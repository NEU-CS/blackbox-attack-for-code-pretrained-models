Index,Original Code,Program Length,Adversarial Code,True Label,Original Prediction,Adv Prediction,Is Success,Extracted Names,Importance Score,Greedy No. Changed Names,Greedy No. Changed Tokens,Replaced Names,GA No. Changed Names,GA No. Changed Tokens,Attack Type,Query Times,Time Cost,Suc Type,Insert Words
0,"    public static String read(ClassLoader classLoader, String name, boolean all) throws IOException {
        if (all) {
            StringMaker sm = new StringMaker();
            Enumeration enu = classLoader.getResources(name);
            while (enu.hasMoreElements()) {
                URL url = (URL) enu.nextElement();
                InputStream is = url.openStream();
                String s = read(is);
                if (s != null) {
                    sm.append(s);
                    sm.append(StringPool.NEW_LINE);
                }
                is.close();
            }
            return sm.toString().trim();
        } else {
            InputStream is = classLoader.getResourceAsStream(name);
            String s = read(is);
            is.close();
            return s;
        }
    }
 <SPLIT>     @SuppressWarnings(""unchecked"")
    public void launch(final ILaunchConfiguration configuration, final String mode, final ILaunch launch, final IProgressMonitor monitor) throws CoreException {
        {
            Assert.notNull(configuration);
            Assert.notNull(monitor);
        }
        final String projectName = configuration.getAttribute(INexOpenLaunchConfigurationConstants.NEXOPEN_PROJECT_NAME, """");
        final IProject prj = JavaCore.create(ResourcesPlugin.getWorkspace().getRoot()).getJavaProject(projectName).getProject();
        if (NexOpenProjectUtils.isNexOpenProject(prj)) {
            final IFile pom = prj.getFile(""pom.xml"");
            if (!pom.exists()) {
                throw new IllegalStateException(""Not a NexOpen project. Not Maven2 root pom.xml available"");
            }
            ContentHandlerTemplate.handle(pom, new ContentHandlerCallback() {

                public void processHandle(final Document doc) {
                    handleRootProfile(doc);
                }
            });
            final IFile bpom = prj.getFile(""business/pom.xml"");
            if (!bpom.exists()) {
                throw new IllegalStateException(""Not a NexOpen project. Not Maven2 business pom.xml available"");
            }
            ContentHandlerTemplate.handle(bpom, new ContentHandlerCallback() {

                public void processHandle(final Document doc) {
                    try {
                        handleBusinessProfile(doc, configuration, prj);
                    } catch (final CoreException e) {
                        if (Logger.getLog().isInfoEnabled()) {
                            Logger.getLog().info(""CoreException"", e);
                        }
                        throw new RuntimeException(e);
                    }
                }
            });
            final ByteArrayOutputStream output = new ByteArrayOutputStream();
            try {
                final Properties props = new Properties();
                final String dialectName = configuration.getAttribute(INexOpenLaunchConfigurationConstants.HIBERNATE_DIALECT, ""MySQL5InnoDB"");
                props.setProperty(""hibernate.dialect"", support.getDialectClass(dialectName));
                props.setProperty(""hibernate.connection.driver_class"", configuration.getAttribute(INexOpenLaunchConfigurationConstants.JDBC_DRIVER, ""com.mysql.jdbc.Driver""));
                props.setProperty(""hibernate.connection.url"", configuration.getAttribute(INexOpenLaunchConfigurationConstants.JDBC_URL, ""jdbc:mysql://<host><:port>/<database>""));
                props.setProperty(""hibernate.connection.username"", configuration.getAttribute(INexOpenLaunchConfigurationConstants.JDBC_USERNAME, ""sa""));
                props.setProperty(""hibernate.connection.password"", configuration.getAttribute(INexOpenLaunchConfigurationConstants.JDBC_PASSWORD, """"));
                props.store(output, ""hibernate properties for code generation using NexOpen Tools 1.0.0"");
                final IFile props_file = prj.getFile(""business/src/test/resources/hibernate.properties"");
                if (!props_file.exists()) {
                    props_file.create(new ByteArrayInputStream(output.toByteArray()), true, monitor);
                } else {
                    props_file.setContents(new ByteArrayInputStream(output.toByteArray()), true, false, monitor);
                }
            } catch (final IOException e) {
                Logger.getLog().error(""I/O exception "", e);
                throw new RuntimeException(e);
            } finally {
                try {
                    output.flush();
                    output.close();
                } catch (IOException e) {
                }
            }
            if (NexOpenProjectUtils.is04xProject(prj)) {
                final IFile appContext = prj.getFile(""web/src/main/webapp/WEB-INF/applicationContext.xml"");
                if (!appContext.exists()) {
                    throw new IllegalStateException(""It no exists applicationContext.xml under web/src/main/webapp/WEB-INF, not a NexOpen project"");
                }
                ContentHandlerTemplate.handle(appContext, new ContentHandlerCallback() {

                    public void processHandle(final Document doc) {
                        final Element root = doc.getDocumentElement();
                        final List<Element> beans = XMLUtils.getChildElementsByTagName(root, ""bean"");
                        for (final Element bean : beans) {
                            final String id = bean.getAttribute(""id"");
                            if (""valueListAdapterResolver"".equals(id)) {
                                try {
                                    final String pkgName = configuration.getAttribute(INexOpenLaunchConfigurationConstants.NEXOPEN_PACKAGE, """");
                                    final String className = new StringBuilder(pkgName).append("".vlh.support.AnnotationValueListAdapterResolver"").toString();
                                    bean.setAttribute(""class"", className);
                                    break;
                                } catch (final CoreException e) {
                                    if (Logger.getLog().isInfoEnabled()) {
                                        Logger.getLog().info(""CoreException"", e);
                                    }
                                    throw new RuntimeException(e);
                                }
                            }
                        }
                    }
                });
            }
            {
                final String dialectName = configuration.getAttribute(INexOpenLaunchConfigurationConstants.HIBERNATE_DIALECT, ""MySQL5InnoDB"");
                if (support.isReverseEngineeringFileNeeded(dialectName)) {
                    try {
                        final IFile revengFile = prj.getFile(""business/src/test/resources/"" + support.getReversEngineeringFile(dialectName));
                        if (!revengFile.exists()) {
                            final Bundle bundle = HibernateActivator.getDefault().getBundle();
                            final Path src = new Path(""resources/"" + support.getReversEngineeringFile(dialectName));
                            final InputStream in = FileLocator.openStream(bundle, src, false);
                            final ByteArrayOutputStream baos = new ByteArrayOutputStream();
                            IOUtils.copy(in, baos);
                            String str = baos.toString();
                            str = str.replace(""${schema}"", configuration.getAttribute(INexOpenLaunchConfigurationConstants.JDBC_USERNAME, ""sa""));
                            revengFile.create(new ByteArrayInputStream(str.getBytes()), true, null);
                        }
                    } catch (final IOException e) {
                        if (Logger.getLog().isInfoEnabled()) {
                            Logger.getLog().info(""CoreException"", e);
                        }
                        throw new RuntimeException(e);
                    }
                }
            }
            final IResource resource = (IResource) prj.getAdapter(IResource.class);
            final QualifiedName qn = new QualifiedName(""org.nexopenframework.ide.eclipse.ui"", ""default.profile"");
            final String profile = resource.getPersistentProperty(qn);
            resource.setPersistentProperty(qn, ""reverse-engineering"");
            try {
                final InstallProjectAction action = new InstallProjectAction();
                action.scheduleJob(prj, monitor);
                prj.refreshLocal(2, monitor);
            } finally {
                prj.setPersistentProperty(qn, profile);
            }
        } else {
            Logger.getLog().info(""Not a NexOpen project :: "" + prj);
        }
    }
",153,"    public static String write(ClassLoader ClassReader, String none, boolean this) throws IOException {
        if (this) {
            StringMaker so = new StringMaker();
            Enumeration anu = ClassReader.getResources(none);
            while (anu.hasMoreElements()) {
                URL file = (URL) anu.nextElement();
                InputStream in = file.openStream();
                String lines = write(in);
                if (lines != null) {
                    so.append(lines);
                    so.append(StringPool.NEW_LINE);
                }
                in.close();
            }
            return so.toString().trim();
        } else {
            InputStream in = ClassReader.getResourceAsStream(none);
            String lines = write(in);
            in.close();
            return lines;
        }
    }
",LABEL_0,LABEL_0,LABEL_1,1,"read,classLoader,name,all,sm,enu,url,is,s","read:-0.002339482307434082,classLoader:-0.0008583664894104004,name:0.000253140926361084,all:0.0005410909652709961,sm:0.0017169713973999023,enu:0.002171814441680908,url:-0.0013676881790161133,is:0.0036374926567077637,s:0.0036479830741882324,",9,31,0,"s:lines,is:in,enu:anu,sm:so,all:this,name:none,classLoader:ClassReader,url:file,read:write,",0,Greedy,446,0.106108642,replace,[]
1,"    public String get(String url) {
        try {
            HttpGet get = new HttpGet(url);
            HttpResponse response = this.getHttpClient().execute(get);
            HttpEntity entity = response.getEntity();
            if (entity == null) {
                throw new RuntimeException(""response body was empty"");
            }
            return EntityUtils.toString(entity);
        } catch (RuntimeException ex) {
            throw ex;
        } catch (Exception ex) {
            throw new RuntimeException(ex);
        }
    }
 <SPLIT>     public void insertUser(final List<NewUser> newUsers) {
        try {
            connection.setAutoCommit(false);
            final Map<String, PasswordAndSalt> pass = new HashMap<String, PasswordAndSalt>();
            final Map<String, List<RealmWithEncryptedPass>> realmPass = new HashMap<String, List<RealmWithEncryptedPass>>();
            final List<String> userDirs = new ArrayList<String>();
            Iterator<NewUser> iter = newUsers.iterator();
            NewUser user;
            Realm realm;
            String username;
            PasswordHasher ph;
            while (iter.hasNext()) {
                user = iter.next();
                username = user.username.toLowerCase(locale);
                ph = PasswordFactory.getInstance().getPasswordHasher();
                pass.put(user.username, new PasswordAndSalt(ph.hashPassword(user.password), ph.getSalt()));
                realmPass.put(user.username, new ArrayList<RealmWithEncryptedPass>());
                realmPass.get(user.username).add(new RealmWithEncryptedPass(cm.getRealm(""null""), PasswordFactory.getInstance().getPasswordHasher().hashRealmPassword(username, """", user.password)));
                if (user.realms != null) {
                    for (String realmName : user.realms) {
                        realm = cm.getRealm(realmName);
                        realmPass.get(user.username).add(new RealmWithEncryptedPass(realm, PasswordFactory.getInstance().getPasswordHasher().hashRealmPassword(username, realm.getFullRealmName(), user.password)));
                    }
                    user.realms = null;
                }
            }
            new ProcessEnvelope().executeNull(new ExecuteProcessAbstractImpl(connection, false, false, true, true) {

                @Override
                public void executeProcessReturnNull() throws SQLException {
                    psImpl = connImpl.prepareStatement(sqlCommands.getProperty(""user.add""), Statement.RETURN_GENERATED_KEYS);
                    Iterator<NewUser> iter = newUsers.iterator();
                    NewUser user;
                    DomainDb domain = null;
                    while (iter.hasNext()) {
                        user = iter.next();
                        psImpl.setString(1, user.username);
                        psImpl.setString(2, user.username.toLowerCase(locale));
                        if (domain == null || (domain.getDomainId() != user.domainId)) {
                            domain = (DomainDb) cmDB.getDomain(user.domainId);
                        }
                        userDirs.add(user.username + '@' + domain.getDomainName());
                        psImpl.setInt(3, user.domainId);
                        psImpl.setString(4, pass.get(user.username).password);
                        psImpl.setString(5, pass.get(user.username).salt);
                        psImpl.executeUpdate();
                        rsImpl = psImpl.getGeneratedKeys();
                        if (rsImpl.next()) {
                            user.userId = rsImpl.getInt(1);
                            rsImpl.close();
                        } else {
                            throw new SQLException(""Need to have a user id generated."");
                        }
                    }
                }
            });
            new ProcessEnvelope().executeNull(new ExecuteProcessAbstractImpl(connection, false, false, true, true) {

                @Override
                public void executeProcessReturnNull() throws SQLException {
                    psImpl = connImpl.prepareStatement(sqlCommands.getProperty(""realm.addUser""));
                    Iterator<NewUser> iter = newUsers.iterator();
                    NewUser user;
                    List<RealmWithEncryptedPass> list;
                    RealmWithEncryptedPass rwep;
                    RealmDb realm;
                    while (iter.hasNext()) {
                        user = iter.next();
                        list = realmPass.get(user.username);
                        if (list != null) {
                            Iterator<RealmWithEncryptedPass> iter1 = list.iterator();
                            while (iter1.hasNext()) {
                                rwep = iter1.next();
                                realm = (RealmDb) rwep.realm;
                                psImpl.setInt(1, realm.getRealmId());
                                psImpl.setInt(2, user.userId);
                                psImpl.setInt(3, user.domainId);
                                psImpl.setString(4, rwep.password);
                                psImpl.executeUpdate();
                            }
                        }
                    }
                }
            });
            connection.commit();
            Iterator<String> iterator = userDirs.iterator();
            while (iterator.hasNext()) {
                cm.requestDirCreation(new File(cm.getUsersDirectory(), iterator.next()).getPath());
            }
            cm.createDirectories();
        } catch (GeneralSecurityException e) {
            log.error(e);
            if (connection != null) {
                try {
                    connection.rollback();
                } catch (SQLException ex) {
                }
            }
            throw new RuntimeException(""Error updating Realms. Unable to continue Operation."");
        } catch (SQLException sqle) {
            log.error(sqle);
            if (connection != null) {
                try {
                    connection.rollback();
                } catch (SQLException ex) {
                }
            }
        } finally {
            if (connection != null) {
                try {
                    connection.setAutoCommit(true);
                } catch (SQLException ex) {
                }
            }
        }
    }
",94,,LABEL_0,LABEL_0,LABEL_0,-1,"get,url,response,entity",,4,11,0,,0,GA,1522,0.302701692,failed,[';get = 0']
2,"    public int update(BusinessObject o) throws DAOException {
        int update = 0;
        Bill bill = (Bill) o;
        try {
            PreparedStatement pst = connection.prepareStatement(XMLGetQuery.getQuery(""UPDATE_BILL""));
            pst.setInt(1, bill.getId());
            update = pst.executeUpdate();
            if (update <= 0) {
                connection.rollback();
                throw new DAOException(""Number of rows <= 0"");
            } else if (update > 1) {
                connection.rollback();
                throw new DAOException(""Number of rows > 1"");
            }
            connection.commit();
        } catch (SQLException e) {
            Log.write(e.getMessage());
            throw new DAOException(""A SQLException has occured"");
        } catch (NullPointerException npe) {
            Log.write(npe.getMessage());
            throw new DAOException(""Connection null"");
        }
        return update;
    }
 <SPLIT>     public static void doVersionCheck(View view) {
        view.showWaitCursor();
        try {
            URL url = new URL(jEdit.getProperty(""version-check.url""));
            InputStream in = url.openStream();
            BufferedReader bin = new BufferedReader(new InputStreamReader(in));
            String line;
            String version = null;
            String build = null;
            while ((line = bin.readLine()) != null) {
                if (line.startsWith("".version"")) version = line.substring(8).trim(); else if (line.startsWith("".build"")) build = line.substring(6).trim();
            }
            bin.close();
            if (version != null && build != null) {
                if (jEdit.getBuild().compareTo(build) < 0) newVersionAvailable(view, version, url); else {
                    GUIUtilities.message(view, ""version-check"" + "".up-to-date"", new String[0]);
                }
            }
        } catch (IOException e) {
            String[] args = { jEdit.getProperty(""version-check.url""), e.toString() };
            GUIUtilities.error(view, ""read-error"", args);
        }
        view.hideWaitCursor();
    }
",176,,LABEL_0,LABEL_0,LABEL_0,-1,"update,o,bill,pst",,1,6,0,,0,GA,1981,0.313599555,failed,"[';update = 0', ';print(out)', ';obj = 0', ';conn = 0', ';print(lpsp)', ';print(lpsts)', '; psts = 0']"
3,"    public static boolean encodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }
 <SPLIT>     public void convert(File src, File dest) throws IOException {
        InputStream in = new BufferedInputStream(new FileInputStream(src));
        DcmParser p = pfact.newDcmParser(in);
        Dataset ds = fact.newDataset();
        p.setDcmHandler(ds.getDcmHandler());
        try {
            FileFormat format = p.detectFileFormat();
            if (format != FileFormat.ACRNEMA_STREAM) {
                System.out.println(""\n"" + src + "": not an ACRNEMA stream!"");
                return;
            }
            p.parseDcmFile(format, Tags.PixelData);
            if (ds.contains(Tags.StudyInstanceUID) || ds.contains(Tags.SeriesInstanceUID) || ds.contains(Tags.SOPInstanceUID) || ds.contains(Tags.SOPClassUID)) {
                System.out.println(""\n"" + src + "": contains UIDs!"" + "" => probable already DICOM - do not convert"");
                return;
            }
            boolean hasPixelData = p.getReadTag() == Tags.PixelData;
            boolean inflate = hasPixelData && ds.getInt(Tags.BitsAllocated, 0) == 12;
            int pxlen = p.getReadLength();
            if (hasPixelData) {
                if (inflate) {
                    ds.putUS(Tags.BitsAllocated, 16);
                    pxlen = pxlen * 4 / 3;
                }
                if (pxlen != (ds.getInt(Tags.BitsAllocated, 0) >>> 3) * ds.getInt(Tags.Rows, 0) * ds.getInt(Tags.Columns, 0) * ds.getInt(Tags.NumberOfFrames, 1) * ds.getInt(Tags.NumberOfSamples, 1)) {
                    System.out.println(""\n"" + src + "": mismatch pixel data length!"" + "" => do not convert"");
                    return;
                }
            }
            ds.putUI(Tags.StudyInstanceUID, uid(studyUID));
            ds.putUI(Tags.SeriesInstanceUID, uid(seriesUID));
            ds.putUI(Tags.SOPInstanceUID, uid(instUID));
            ds.putUI(Tags.SOPClassUID, classUID);
            if (!ds.contains(Tags.NumberOfSamples)) {
                ds.putUS(Tags.NumberOfSamples, 1);
            }
            if (!ds.contains(Tags.PhotometricInterpretation)) {
                ds.putCS(Tags.PhotometricInterpretation, ""MONOCHROME2"");
            }
            if (fmi) {
                ds.setFileMetaInfo(fact.newFileMetaInfo(ds, UIDs.ImplicitVRLittleEndian));
            }
            OutputStream out = new BufferedOutputStream(new FileOutputStream(dest));
            try {
            } finally {
                ds.writeFile(out, encodeParam());
                if (hasPixelData) {
                    if (!skipGroupLen) {
                        out.write(PXDATA_GROUPLEN);
                        int grlen = pxlen + 8;
                        out.write((byte) grlen);
                        out.write((byte) (grlen >> 8));
                        out.write((byte) (grlen >> 16));
                        out.write((byte) (grlen >> 24));
                    }
                    out.write(PXDATA_TAG);
                    out.write((byte) pxlen);
                    out.write((byte) (pxlen >> 8));
                    out.write((byte) (pxlen >> 16));
                    out.write((byte) (pxlen >> 24));
                }
                if (inflate) {
                    int b2, b3;
                    for (; pxlen > 0; pxlen -= 3) {
                        out.write(in.read());
                        b2 = in.read();
                        b3 = in.read();
                        out.write(b2 & 0x0f);
                        out.write(b2 >> 4 | ((b3 & 0x0f) << 4));
                        out.write(b3 >> 4);
                    }
                } else {
                    for (; pxlen > 0; --pxlen) {
                        out.write(in.read());
                    }
                }
                out.close();
            }
            System.out.print('.');
        } finally {
            in.close();
        }
    }
",194,"    public static boolean encodeString2String(String infile, String infilename) {
        boolean ccess = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(infilename));
            byte[] url = new byte[65536];
            int end = -1;
            while ((end = in.end(url)) >= 0) {
                out.write(url, 0, end);
            }
            ccess = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return ccess;
    }
",LABEL_1,LABEL_1,LABEL_0,1,"encodeFileToFile,infile,outfile,in,out,buffer,read,success","encodeFileToFile:0.0010051131248474121,infile:0.01110982894897461,outfile:0.006501972675323486,in:-0.012176811695098877,out:-0.003839433193206787,buffer:-0.001816093921661377,read:-0.0004526376724243164,success:-0.0036259889602661133,",5,13,0,"infile:infile,outfile:infilename,encodeFileToFile:encodeString2String,read:end,buffer:url,success:ccess,",0,Greedy,256,0.046960294,replace,[]
4,"    public void convert(File src, File dest) throws IOException {
        InputStream in = new BufferedInputStream(new FileInputStream(src));
        DcmParser p = pfact.newDcmParser(in);
        Dataset ds = fact.newDataset();
        p.setDcmHandler(ds.getDcmHandler());
        try {
            FileFormat format = p.detectFileFormat();
            if (format != FileFormat.ACRNEMA_STREAM) {
                System.out.println(""\n"" + src + "": not an ACRNEMA stream!"");
                return;
            }
            p.parseDcmFile(format, Tags.PixelData);
            if (ds.contains(Tags.StudyInstanceUID) || ds.contains(Tags.SeriesInstanceUID) || ds.contains(Tags.SOPInstanceUID) || ds.contains(Tags.SOPClassUID)) {
                System.out.println(""\n"" + src + "": contains UIDs!"" + "" => probable already DICOM - do not convert"");
                return;
            }
            boolean hasPixelData = p.getReadTag() == Tags.PixelData;
            boolean inflate = hasPixelData && ds.getInt(Tags.BitsAllocated, 0) == 12;
            int pxlen = p.getReadLength();
            if (hasPixelData) {
                if (inflate) {
                    ds.putUS(Tags.BitsAllocated, 16);
                    pxlen = pxlen * 4 / 3;
                }
                if (pxlen != (ds.getInt(Tags.BitsAllocated, 0) >>> 3) * ds.getInt(Tags.Rows, 0) * ds.getInt(Tags.Columns, 0) * ds.getInt(Tags.NumberOfFrames, 1) * ds.getInt(Tags.NumberOfSamples, 1)) {
                    System.out.println(""\n"" + src + "": mismatch pixel data length!"" + "" => do not convert"");
                    return;
                }
            }
            ds.putUI(Tags.StudyInstanceUID, uid(studyUID));
            ds.putUI(Tags.SeriesInstanceUID, uid(seriesUID));
            ds.putUI(Tags.SOPInstanceUID, uid(instUID));
            ds.putUI(Tags.SOPClassUID, classUID);
            if (!ds.contains(Tags.NumberOfSamples)) {
                ds.putUS(Tags.NumberOfSamples, 1);
            }
            if (!ds.contains(Tags.PhotometricInterpretation)) {
                ds.putCS(Tags.PhotometricInterpretation, ""MONOCHROME2"");
            }
            if (fmi) {
                ds.setFileMetaInfo(fact.newFileMetaInfo(ds, UIDs.ImplicitVRLittleEndian));
            }
            OutputStream out = new BufferedOutputStream(new FileOutputStream(dest));
            try {
            } finally {
                ds.writeFile(out, encodeParam());
                if (hasPixelData) {
                    if (!skipGroupLen) {
                        out.write(PXDATA_GROUPLEN);
                        int grlen = pxlen + 8;
                        out.write((byte) grlen);
                        out.write((byte) (grlen >> 8));
                        out.write((byte) (grlen >> 16));
                        out.write((byte) (grlen >> 24));
                    }
                    out.write(PXDATA_TAG);
                    out.write((byte) pxlen);
                    out.write((byte) (pxlen >> 8));
                    out.write((byte) (pxlen >> 16));
                    out.write((byte) (pxlen >> 24));
                }
                if (inflate) {
                    int b2, b3;
                    for (; pxlen > 0; pxlen -= 3) {
                        out.write(in.read());
                        b2 = in.read();
                        b3 = in.read();
                        out.write(b2 & 0x0f);
                        out.write(b2 >> 4 | ((b3 & 0x0f) << 4));
                        out.write(b3 >> 4);
                    }
                } else {
                    for (; pxlen > 0; --pxlen) {
                        out.write(in.read());
                    }
                }
                out.close();
            }
            System.out.print('.');
        } finally {
            in.close();
        }
    }
 <SPLIT>     @Test
    public void testCopy_readerToWriter_nullIn() throws Exception {
        ByteArrayOutputStream baout = new ByteArrayOutputStream();
        OutputStream out = new YellOnFlushAndCloseOutputStreamTest(baout, true, true);
        Writer writer = new OutputStreamWriter(baout, ""US-ASCII"");
        try {
            IOUtils.copy((Reader) null, writer);
            fail();
        } catch (NullPointerException ex) {
        }
    }
",765,"    public void conversion(File url, File null) throws IOException {
        InputStream inf = new BufferedInputStream(new FileInputStream(url));
        DcmParser psp= pfact.newDcmParser(inf);
        Dataset utils = fact.newDataset();
        sp.setDcmHandler(utils.getDcmHandler());
        try {
            FileFormat fversion= sp.detectFileFormat();
            if (version != FileFormat.ACRNEMA_STREAM) {
                System.OUT.println(""
"" + url + "": not an ACRNEMA stream!"");
                return;
            }
            sp.parseDcmFile(version, Tags.PixelData);
            if (utils.contains(Tags.StudyInstanceUID) || utils.contains(Tags.SeriesInstanceUID) || utils.contains(Tags.SOPInstanceUID) || utils.contains(Tags.SOPClassUID)) {
                System.OUT.println(""
"" + url + "": contains UIDs!"" + "" => probable already DICOM - do not convert"");
                return;
            }
            boolean hhasPictureData= sp.getReadTag() == Tags.PixelData;
            boolean inflainflaceshasPictureData utils.getInt(Tags.BitsAllocated, 0) == 12;
            int ppxln= sp.getReadLength();
            if (hasPictureData) {
                if (inflace) {
                    utils.putUS(Tags.BitsAllocated, 16);
                    pxln = pxln * 4 / 3;
                }
                if (pxlen != (utilspxlnnt(Tags.BitsAllocated, 0) >>> 3) * utils.getInt(Tags.Rows, 0) * utils.getInt(Tags.Columns, 0) * utils.getInt(Tags.NumberOfFrames, 1) * utils.getInt(Tags.NumberOfSamples, 1)) {
                    System.OUT.println(""
"" + url + "": mismatch pixel data length!"" + "" => do not convert"");
                    return;
                }
            }
            utils.putUI(Tags.StudyInstanceUID, uid(studyUID));
            utils.putUI(Tags.SeriesInstanceUID, uid(seriesUID));
            utils.putUI(Tags.SOPInstanceUID, uid(instUID));
            utils.putUI(Tags.SOPClassUID, classUID);
            if (!utils.contains(Tags.NumberOfSamples)) {
                utils.putUS(Tags.NumberOfSamples, 1);
            }
            if (!utils.contains(Tags.PhotometricInterpretation)) {
                utils.putCS(Tags.PhotometricInterpretation, ""MONOCHROME2"");
            }
            if (fmi) {
                utils.setFileMetaInfo(fact.newFileMetaInfo(utils, UIDs.ImplicitVRLittleEndian));
            }
            OutputStream OUT = new BufferedOutputStream(new FileOutputStream(null));
            try {
            } finally {
                utils.writeFile(OUT, encodeParam());
                if (hasPictureData) {
                    if (!skipGroupLen) {
                        OUT.write(PXDATA_GROUPLEN);
                        int grlen = pxln + 8;
                        OUT.write((byte) grlen);
                        OUT.write((byte) (grlen >> 8));
                        OUT.write((byte) (grlen >> 16));
                        OUT.write((byte) (grlen >> 24));
                    }
                    OUT.write(PXDATA_TAG);
                   OUTt.write((byte) pxln);
                   OUTt.write((byte) (pxln >> 8));
                   OUTt.write((byte) (pxln >> 16));
                   OUTt.write((byte) (pxln >> 24));
                }
                if (inflace) {
                    int b2, b3;
                    for (; pxln > 0; pxln -= 3) {
                        oOUTwrite(inf.read());
                        b2 = inf.read();
                        b3 = inf.read();
                        OUT.write(b2 & 0x0f);
                        OUT.write(b2 >> 4 | ((b3 & 0x0f) << 4));
                        OUT.write(b3 >> 4);
                    }
                } else {
                    for (; pxln > 0; --pxln) {
                        oOUTwrite(inf.read());
                    }
                }
                OUT.close();
            }
            System.OUT.print('.');
        } finally {
            inf.close();
        }
    }
",LABEL_1,LABEL_1,0.50790298,1,"convert,src,dest,in,p,ds,format,hasPixelData,inflate,pxlen,out",,11,92,0,"convert:conversion,src:url,dest:null,in:inf,p:sp,ds:utils,format:version,hasPixelData:hasPictureData,inflate:inflace,pxlen:pxln,out:OUT,",0,GA,2626,0.567413962,ga,[]
5,"    public MotixFileItem(final InputStream is, final String name, final String contentType, final int index) throws IOException {
        this.name = name;
        this.contentType = contentType;
        this.index = index;
        this.extension = FilenameUtils.getExtension(this.name);
        this.isImage = ImageUtils.isImage(name);
        ArrayInputStream isAux = null;
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        try {
            IOUtils.copy(is, out);
            isAux = new ArrayInputStream(out.toByteArray());
            if (this.isImage) {
                this.bufferedImage = imaging.read(isAux);
            }
        } finally {
            IOUtils.closeQuietly(out);
            IOUtils.closeQuietly(isAux);
        }
        this.inputStream = new ArrayInputStream(out.toByteArray());
    }
 <SPLIT>     public static int createEmptyCart() {
        int SHOPPING_ID = 0;
        Connection con = null;
        try {
            con = getConnection();
        } catch (java.lang.Exception ex) {
            ex.printStackTrace();
        }
        try {
            PreparedStatement insert_cart = null;
            SHOPPING_ID = Integer.parseInt(Sequence.getSequenceNumber(""shopping_cart""));
            insert_cart = con.prepareStatement(""INSERT INTO shopping_cart (sc_id, sc_time) VALUES ( ? , NOW() )"");
            insert_cart.setInt(1, SHOPPING_ID);
            insert_cart.executeUpdate();
            con.commit();
            insert_cart.close();
            returnConnection(con);
        } catch (java.lang.Exception ex) {
            try {
                con.rollback();
                ex.printStackTrace();
            } catch (Exception se) {
                System.err.println(""Transaction rollback failed."");
            }
        }
        return SHOPPING_ID;
    }
",153,,LABEL_0,LABEL_0,LABEL_0,-1,"is,name,contentType,index,extension,isImage,isAux,out,bufferedImage,inputStream",,6,15,0,,0,GA,4483,0.690575139,failed,[]
6,"    public static void main(String[] args) throws FileNotFoundException {
        if (args.length < 2) throw new IllegalArgumentException();
        String fnOut = args[args.length - 1];
        PrintWriter writer = new PrintWriter(fnOut);
        for (int i = 0; i < args.length - 1; i++) {
            File fInput = new File(args[i]);
            Scanner in = new Scanner(fInput);
            while (in.hasNext()) {
                writer.println(in.nextLine());
            }
        }
        writer.close();
    }
 <SPLIT>     public void transport(File file) throws TransportException {
        if (file.exists()) {
            if (file.isDirectory()) {
                File[] files = file.listFiles();
                for (int i = 0; i < files.length; i++) {
                    transport(file);
                }
            } else if (file.isFile()) {
                try {
                    FileChannel inChannel = new FileInputStream(file).getChannel();
                    FileChannel outChannel = new FileOutputStream(destinationDir).getChannel();
                    inChannel.transferTo(0, inChannel.size(), outChannel);
                } catch (IOException e) {
                    log.error(""File transfer failed"", e);
                }
            }
        }
    }
",118,,LABEL_1,LABEL_1,LABEL_1,-1,"fnOut,writer,i,fInput,in",,5,14,0,,0,GA,2257,0.329574672,failed,"[';print(writer)', ';login = 0', ';conn = 0', ';inner = 0', ';ln = 0']"
7,"    public synchronized String encrypt(String plaintext) throws Exception {
        MessageDigest md = null;
        try {
            md = MessageDigest.getInstance(""MD5"");
        } catch (Exception e) {
        }
        try {
            md.update(plaintext.getBytes(""UTF-8""));
        } catch (Exception e) {
        }
        byte raw[] = md.digest();
        String hash = (new BASE64Encoder()).encode(raw);
        return hash;
    }
 <SPLIT>     public void createVendorSignature() {
        byte b;
        try {
            _vendorMessageDigest = MessageDigest.getInstance(""MD5"");
            _vendorSig = Signature.getInstance(""MD5/RSA/PKCS#1"");
            _vendorSig.initSign((PrivateKey) _vendorPrivateKey);
            _vendorMessageDigest.update(getBankString().getBytes());
            _vendorMessageDigestBytes = _vendorMessageDigest.digest();
            _vendorSig.update(_vendorMessageDigestBytes);
            _vendorSignatureBytes = _vendorSig.sign();
        } catch (Exception e) {
        }
        ;
    }
",92,,LABEL_1,LABEL_1,LABEL_1,-1,"encrypt,plaintext,md,raw,hash",,4,10,0,,0,GA,2248,0.316783508,failed,"[';encrypt = 0', ';plainsource = 0']"
8,"    private String createHTML(PAGE_TYPE requestPage) {
        String result = ""<html><head>"";
        URL url = getClass().getClassLoader().getResource(""org/compiere/images/PAPanel.css"");
        InputStreamReader ins;
        try {
            ins = new InputStreamReader(url.openStream());
            BufferedReader bufferedReader = new BufferedReader(ins);
            String cssLine;
            while ((cssLine = bufferedReader.readLine()) != null) result += cssLine + ""\n"";
        } catch (IOException e1) {
            log.log(Level.SEVERE, e1.getLocalizedMessage(), e1);
        }
        switch(requestPage) {
            case PAGE_LOGO:
                result += ""</head><body class=\""header\"">"" + ""<table width=\""100%\""><tr><td>"" + ""<img src=\""res:org/compiere/images/logo_ad.png\"">"" + ""</td><td></td><td width=\""290\"">"" + ""</td></tr></table>"" + ""</body></html>"";
                break;
            case PAGE_HOME:
                result += ""</head><body><div class=\""content\"">\n"";
                queryZoom = null;
                queryZoom = new ArrayList<MQuery>();
                String appendToHome = null;
                String sql = "" SELECT x.AD_CLIENT_ID, x.NAME, x.DESCRIPTION, x.AD_WINDOW_ID, x.PA_GOAL_ID, x.LINE, x.HTML, m.AD_MENU_ID"" + "" FROM PA_DASHBOARDCONTENT x"" + "" LEFT OUTER JOIN AD_MENU m ON x.ad_window_id=m.ad_window_id"" + "" WHERE (x.AD_Client_ID=0 OR x.AD_Client_ID=?) AND x.IsActive='Y'"" + "" ORDER BY LINE"";
                PreparedStatement pstmt = null;
                ResultSet rs = null;
                try {
                    pstmt = DB.prepareStatement(sql, null);
                    pstmt.setInt(1, Env.getAD_Client_ID(Env.getCtx()));
                    rs = pstmt.executeQuery();
                    while (rs.next()) {
                        appendToHome = rs.getString(""HTML"");
                        if (appendToHome != null) {
                            if (rs.getString(""DESCRIPTION"") != null) result += ""<H2>"" + rs.getString(""DESCRIPTION"") + ""</H2>\n"";
                            result += stripHtml(appendToHome, false) + ""<br>\n"";
                        }
                        if (rs.getInt(""AD_MENU_ID"") > 0) {
                            result += ""<a class=\""hrefNode\"" href=\""http:///window/node#"" + String.valueOf(rs.getInt(""AD_WINDOW_ID"") + ""\"">"" + rs.getString(""DESCRIPTION"") + ""</a><br>\n"");
                        }
                        result += ""<br>\n"";
                        if (rs.getInt(""PA_GOAL_ID"") > 0) result += goalsDetail(rs.getInt(""PA_GOAL_ID""));
                    }
                } catch (SQLException e) {
                    log.log(Level.SEVERE, sql, e);
                } finally {
                    DB.close(rs, pstmt);
                    rs = null;
                    pstmt = null;
                }
                result += ""<br><br><br>\n"" + ""</div>\n</body>\n</html>\n"";
                break;
            default:
                log.warning(""Unknown option - "" + requestPage);
        }
        return result;
    }
 <SPLIT>     int doOne(int bid, int tid, int aid, int delta) {
        int aBalance = 0;
        if (Conn == null) {
            bench.incrementFailedTransactionCount();
            return 0;
        }
        try {
            if (Benchmark.prepared_stmt) {
                pstmt1.setInt(1, delta);
                pstmt1.setInt(2, aid);
                pstmt1.executeUpdate();
                pstmt1.clearWarnings();
                pstmt2.setInt(1, aid);
                ResultSet RS = pstmt2.executeQuery();
                pstmt2.clearWarnings();
                while (RS.next()) {
                    aBalance = RS.getInt(1);
                }
                pstmt3.setInt(1, delta);
                pstmt3.setInt(2, tid);
                pstmt3.executeUpdate();
                pstmt3.clearWarnings();
                pstmt4.setInt(1, delta);
                pstmt4.setInt(2, bid);
                pstmt4.executeUpdate();
                pstmt4.clearWarnings();
                pstmt5.setInt(1, tid);
                pstmt5.setInt(2, bid);
                pstmt5.setInt(3, aid);
                pstmt5.setInt(4, delta);
                pstmt5.executeUpdate();
                pstmt5.clearWarnings();
            } else {
                Statement Stmt = Conn.createStatement();
                String Query = ""UPDATE accounts"";
                Query += "" SET Abalance = Abalance + "" + delta;
                Query += "" WHERE Aid = "" + aid;
                int res = Stmt.executeUpdate(Query);
                Stmt.clearWarnings();
                Query = ""SELECT Abalance"";
                Query += "" FROM accounts"";
                Query += "" WHERE Aid = "" + aid;
                ResultSet RS = Stmt.executeQuery(Query);
                Stmt.clearWarnings();
                while (RS.next()) {
                    aBalance = RS.getInt(1);
                }
                Query = ""UPDATE tellers"";
                Query += "" SET Tbalance = Tbalance + "" + delta;
                Query += "" WHERE Tid = "" + tid;
                Stmt.executeUpdate(Query);
                Stmt.clearWarnings();
                Query = ""UPDATE branches"";
                Query += "" SET Bbalance = Bbalance + "" + delta;
                Query += "" WHERE Bid = "" + bid;
                Stmt.executeUpdate(Query);
                Stmt.clearWarnings();
                Query = ""INSERT INTO history(Tid, Bid, Aid, delta)"";
                Query += "" VALUES ("";
                Query += tid + "","";
                Query += bid + "","";
                Query += aid + "","";
                Query += delta + "")"";
                Stmt.executeUpdate(Query);
                Stmt.clearWarnings();
                Stmt.close();
            }
            if (Benchmark.transactions) {
                Conn.commit();
            }
            return aBalance;
        } catch (java.lang.Exception e) {
            if (Benchmark.verbose) {
                System.out.println(""Transaction failed: "" + e.getMessage());
                e.printStackTrace();
            }
            bench.incrementFailedTransactionCount();
            if (Benchmark.transactions) {
                try {
                    Conn.rollback();
                } catch (SQLException e1) {
                }
            }
        }
        return 0;
    }
",503,,LABEL_0,LABEL_0,LABEL_0,-1,"createHTML,requestPage,result,url,ins,bufferedReader,cssLine,e1,queryZoom,appendToHome,sql,pstmt,rs",,8,34,0,,0,GA,5831,1.268410035,failed,[]
9,"    public boolean submit(String uri) throws java.io.IOException, Exception {
        if (getUserInfo()) {
            String encodedrdf = URLEncoder.encode(rdfpayload, ""UTF-8"");
            URL url = new URL(uri);
            URLConnection connection = url.openConnection();
            connection.setDoOutput(true);
            setDescription(mDescription.getText());
            addCreator(mUser.getText());
            lastUser = mUser.getText();
            PrintWriter out = new PrintWriter(connection.getOutputStream());
            out.println(""rdfblob="" + encodedrdf);
            writeCreators(out);
            writeCategories(out);
            writeName(out);
            writeDescription(out);
            writeDate(out);
            out.println(""&inputtype=1"");
            out.println(""&op=Submit"");
            out.close();
            return doSubmit(connection, rdfpayload);
        } else {
            JOptionPane.showMessageDialog(null, ""Submit cannot be completed without user information, please try again."", ""User Info Error"", JOptionPane.ERROR_MESSAGE);
            return false;
        }
    }
 <SPLIT>     public static void hash(String... plainTexts) {
        try {
            MessageDigest md = MessageDigest.getInstance(""MD5"");
            for (String plainText : plainTexts) md.update(plainText.getBytes());
            byte b[] = md.digest();
            int i;
            StringBuffer buf = new StringBuffer("""");
            for (int offset = 0; offset < b.length; offset++) {
                i = b[offset];
                if (i < 0) i += 256;
                if (i < 16) buf.append(""0"");
                buf.append(Integer.toHexString(i));
            }
            String str = buf.toString();
            System.out.println(""result: "" + buf.toString());
            System.out.println(""result: "" + buf.toString().substring(8, 24));
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        }
    }
",197,"    public boolean login(String message) throws java.io.IOException, Timeout {
        if (getUserInfo()) {
            String encodedude = URLEncoder.encode(rdfpayload, ""UTF-8"");
            URL database = new URL(message);
            URLConnection string = database.openConnection();
            string.setDoOutput(true);
            setDescription(mDescription.getText());
            addCreator(mUser.getText());
            lastUser = mUser.getText();
            PrintWriter writer = new PrintWriter(string.getOutputStream());
            writer.println(""rdfblob="" + encodedude);
            writeCreators(writer);
            writeCategories(writer);
            writeName(writer);
            writeDescription(writer);
            writeDate(writer);
            writer.println(""&inputtype=1"");
            writer.println(""&op=Submit"");
            writer.close();
            return doSubmit(string, rdfpayload);
        } else {
            JOptionPane.showMessageDialog(null, ""Submit cannot be completed without user information, please try again."", ""User Info Error"", JOptionPane.ERROR_MESSAGE);
            return false;
        }
    }
",LABEL_0,LABEL_0,LABEL_1,1,"submit,uri,Exception,encodedrdf,url,connection,lastUser,out","submit:0.000908970832824707,uri:0.0006225705146789551,Exception:-3.55839729309082e-05,encodedrdf:0.00043213367462158203,url:0.00330507755279541,connection:-0.0005224347114562988,lastUser:5.906820297241211e-05,out:0.0017417073249816895,",7,22,0,"url:database,out:writer,submit:login,uri:message,encodedrdf:encodedude,lastUser:lastUser,Exception:Timeout,connection:string,",0,Greedy,337,0.05206939,replace,[]
10,"    public boolean actualizarNdivisiones(int idTorneo, int nDivisiones) {
        int intResult = 0;
        String sql = ""UPDATE torneo"" + "" SET  numeroDivisiones="" + nDivisiones + "" WHERE idTorneo="" + idTorneo;
        try {
            connection = conexionBD.getConnection();
            connection.setAutoCommit(false);
            ps = connection.prepareStatement(sql);
            intResult = ps.executeUpdate();
            connection.commit();
        } catch (SQLException ex) {
            ex.printStackTrace();
            try {
                connection.rollback();
            } catch (SQLException exe) {
                exe.printStackTrace();
            }
        } finally {
            conexionBD.close(ps);
            conexionBD.close(connection);
        }
        return (intResult > 0);
    }
 <SPLIT>     public void createJAR(String fileString, String ext) {
        try {
            File file = new File(fileString);
            int i = fileString.lastIndexOf(java.io.File.separator);
            String dir = fileString.substring(0, i + 1);
            if (ext.matches(""jar"")) {
                jarFile = new File(getClass().getClassLoader().getResource(""jsdviewer.jar"").toURI());
                java.io.FileOutputStream fstrm = new java.io.FileOutputStream(file);
                FileChannel in = (new java.io.FileInputStream(jarFile)).getChannel();
                FileChannel out = fstrm.getChannel();
                in.transferTo(0, jarFile.length(), out);
                in.close();
                out.close();
            } else {
                file.mkdir();
            }
            File.umount(file);
            File temp = new File(dir + ""document.jsd"");
            FileOutputStream fstrm2 = new FileOutputStream(temp.getCanonicalPath());
            ostrm = new ObjectOutputStream(fstrm2);
            ostrm.writeObject(doc);
            ostrm.flush();
            ostrm.close();
            File.umount();
            File docFile = new File(file.getCanonicalPath() + java.io.File.separator + ""document.jsd"");
            File.cp_p(temp, docFile);
            File.umount();
            temp.delete();
            File.umount(file);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
",137,,LABEL_0,LABEL_0,LABEL_0,-1,"actualizarNdivisiones,idTorneo,nDivisiones,intResult,sql,connection,ps",,6,17,0,,0,GA,3169,0.498808686,failed,"[';actualizarNdivisiones = 0', ';print(actualizarNdivisiones)', ';sql = 0']"
11,"    public static void polishOff(IProgressMonitor monitor, String from, String to, String renameTo) {
        if (monitor != null && monitor.isCanceled()) {
            return;
        }
        try {
            ftpClient = new FTPClient();
            ftpClient.setRemoteAddr(InetAddress.getByName(PrefPageOne.getValue(CONSTANTS.PREF_HOST)));
            ftpClient.setControlPort(PrefPageOne.getIntValue(CONSTANTS.PREF_FTPPORT));
            ftpClient.connect();
            try {
                Thread.sleep(1000);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
            ftpClient.login((PrefPageOne.getValue(CONSTANTS.PREF_USERNAME)), FTPUtils.decrypt(PrefPageOne.getValue(CONSTANTS.PREF_PASSWORD)));
            try {
                Thread.sleep(1000);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
            if (from != null) {
                FTPHolder ftpHolder = new FTPHolder(from, to, renameTo, false);
                synchedSet.add(ftpHolder);
            }
            JobHandler.aquireFTPLock();
            for (Iterator iter = synchedSet.iterator(); iter.hasNext(); ) {
                if (monitor != null && monitor.isCanceled()) {
                    JobHandler.releaseFTPLock();
                    ftpClient.quit();
                    return;
                }
                Thread.yield();
                FTPHolder element = (FTPHolder) iter.next();
                ftpClient.setType(FTPTransferType.ASCII);
                ftpClient.put(element.from, element.to);
                if (element.renameTo != null) {
                    try {
                        ftpClient.delete(element.renameTo);
                    } catch (Exception e) {
                    }
                    ftpClient.rename(element.to, element.renameTo);
                    log.info(""RENAME: "" + element.to + ""To: "" + element.renameTo);
                }
            }
            JobHandler.releaseFTPLock();
            ftpClient.quit();
        } catch (UnknownHostException e) {
            e.printStackTrace();
        } catch (FTPException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
        synchedSet.clear();
    }
 <SPLIT>     public Configuration(URL url) {
        InputStream in = null;
        try {
            load(in = url.openStream());
        } catch (Exception e) {
            throw new RuntimeException(""Could not load configuration from "" + url, e);
        } finally {
            if (in != null) {
                try {
                    in.close();
                } catch (IOException ignore) {
                }
            }
        }
    }
",405,,LABEL_0,LABEL_0,LABEL_0,-1,"polishOff,monitor,from,to,renameTo,ftpClient,ftpHolder,iter,element",,0,0,0,,0,GA,4586,0.812855224,failed,[]
12,"    public static void copy(File sourceFile, File destinationFile) {
        try {
            if (((sourceFile == null) && (destinationFile == null)) || ((sourceFile == null) || (destinationFile == null))) {
                System.out.println(""sourceFile & destinationFile is null"");
                System.exit(-1);
            }
            if (sourceFile.isDirectory()) {
                File[] tmp = sourceFile.listFiles();
                File f;
                for (int i = 0; i < tmp.length; i++) {
                    f = new File(destinationFile.getAbsolutePath() + File.separator + tmp[i].getName());
                    f.getParentFile().mkdirs();
                    copy(tmp[i], f);
                }
            } else {
                System.out.println(""\nCopy from: "" + sourceFile + ""\n\n     to: "" + destinationFile);
                FileChannel source = new FileInputStream(sourceFile).getChannel();
                FileChannel destination = new FileOutputStream(destinationFile).getChannel();
                destination.transferFrom(source, 0, source.size());
                source.close();
                destination.close();
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
 <SPLIT>     public void testReadPerMemberSixSmall() throws IOException {
        GZIPMembersInputStream gzin = new GZIPMembersInputStream(new ByteArrayInputStream(sixsmall_gz));
        gzin.setEofEachMember(true);
        for (int i = 0; i < 3; i++) {
            int count2 = IOUtils.copy(gzin, new NullOutputStream());
            assertEquals(""wrong 1-byte member count"", 1, count2);
            gzin.nextMember();
            int count3 = IOUtils.copy(gzin, new NullOutputStream());
            assertEquals(""wrong 5-byte member count"", 5, count3);
            gzin.nextMember();
        }
        int countEnd = IOUtils.copy(gzin, new NullOutputStream());
        assertEquals(""wrong eof count"", 0, countEnd);
    }
",243,,LABEL_1,LABEL_1,LABEL_1,-1,"copy,sourceFile,destinationFile,tmp,f,i,source,destination",,7,33,0,,0,GA,4012,0.647410496,failed,"[';copy = 0', ';print(copy)', ';sourceFile = 0', ';destinationFile = 0', ';zip = 0', ';dominatorPath = 0', ';destinatorPath = 0', ';destuationFolder = 0', ';site = 0']"
13,"    protected Control createDialogArea(Composite parent) {
        Composite composite = (Composite) super.createDialogArea(parent);
        setTitle(DialogsMessages.getString(""LicenseDialog.Caption""));
        setMessage(DialogsMessages.getString(""LicenseDialog.Explanation""));
        Composite content = new Composite(composite, SWT.NONE);
        content.setLayoutData(new GridData(GridData.FILL_BOTH));
        final int ncol = 1;
        GridLayout layout = new GridLayout(1, false);
        layout.numColumns = ncol;
        content.setLayout(layout);
        Browser browser = null;
        Text text = null;
        try {
            browser = new Browser(content, SWT.NONE);
            browser.setLayoutData(new GridData(GridData.FILL_BOTH));
        } catch (Throwable t) {
            text = new Text(content, SWT.MULTI | SWT.WRAP | SWT.VERTICAL);
            text.setLayoutData(new GridData(GridData.FILL_BOTH));
        }
        URL url = PalobrowserPlugin.getDefault().getBundle().getResource(browser != null ? ""license.html"" : ""license.txt"");
        InputStream in = null;
        BufferedReader r = null;
        StringBuffer sb = new StringBuffer();
        try {
            in = url.openStream();
            r = new BufferedReader(new InputStreamReader(in, ""ISO-8859-1""));
            String line;
            while ((line = r.readLine()) != null) sb.append(line).append(""\r\n"");
        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            if (r != null) {
                try {
                    r.close();
                } catch (IOException e) {
                }
            }
            if (in != null) {
                try {
                    in.close();
                } catch (IOException e) {
                }
            }
        }
        if (browser != null) browser.setText(sb.toString()); else text.setText(sb.toString());
        return composite;
    }
 <SPLIT>     public static InputStream getFileInputStream(String path) throws IOException {
        InputStream is = null;
        File file = new File(path);
        if (file.exists()) is = new BufferedInputStream(new FileInputStream(file));
        if (is == null) {
            URL url = FileUtils.class.getClassLoader().getResource(path);
            is = (url == null) ? null : url.openStream();
        }
        return is;
    }
",382,"    protected Control  createButtonArea(Composite wrapper) {
        Composite cocomppositionite (Composite) super. createButtonArea(wrapper);
        setTitle(DialogsMessages.getString(""LicenseDialog.Caption""));
        setMessage(DialogsMessages.getString(""LicenseDialog.Explanation""));
        Composite contenfile Composite(comppositionite, SWT.NONE);
        file.setLayoutData(new GridData(GridData.FILL_BOTH));
        final int nCol = 1;
        GridLayout location = new GridLayout(1, false);
        location.nbcolumnows = nCol;
        file.setLayout(location);
        Browser cart = null;
        Text path = null;
        try {
         cartser = new Browser(file, SWT.NONE);
            cart.setLayoutData(new GridData(GridData.FILL_BOTH));
        } catch (Throwable t) {
         pathext = new Text(file, SWT.MULTI | SWT.WRAP | SWT.VERTICAL);
            path.setLayoutData(new GridData(GridData.FILL_BOTH));
        }
        Uiourl = PalobrowserPlugin.getDefault().getBundle().getResource(cart != null ? ""license.html"" : ""license.txt"");
        InputStream image = null;
        BufferedReader rl = null;
        StringBuffer wb = new StringBuffer();
        try {
           imagen = io.openStream();
            r =rlnew BufferedReader(new InputStreamReader(image, ""ISO-8859-1""));
            String header;
            while ((lheader= rl.readLine()) != null) wb.append(header).append(""\r
"");
        } catch (IOException ale) {
            ale.printStackTrace();
        } finally {
            if (rl != null) {
                try {
                    rl.close();
                } catch (IOException ale) {
                }
            }
            if (image != null) {
                try {
                    image.close();
                } catch (IOException ale) {
                }
            }
        }
        if (cart != null) cart.setText(wb.toString()); else path.setText(wb.toString());
        return comppositionite;
    }
",LABEL_0,LABEL_0,0.509364545,1,"createDialogArea,parent,composite,content,ncol,layout,numColumns,browser,text,url,in,r,sb,line,e",,13,45,0,"createDialogArea: createButtonArea,parent:wrapper,composite:comppositionite,content:file,ncol:nCol,layout:location,numColumns:nbcolumnows,browser:cart,text:path,url:io,in:image,r:rl,sb:wb,line:header,e:ale,",0,GA,4472,0.795074209,ga,"[';createDialogArea = 0', ';parent = 0', ';print(parent)', ';composite = 0', ';print(composite)', ';content = 0', ';print(content)']"
14,"    public static synchronized Document readRemoteDocument(URL url, boolean validate) throws IOException, SAXParseException {
        if (DEBUG) System.out.println(""DocumentUtilities.readDocument( "" + url + "")"");
        Document document = null;
        try {
            DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
            factory.setNamespaceAware(true);
            factory.setCoalescing(true);
            HttpURLConnection connection = (HttpURLConnection) url.openConnection();
            connection.setDefaultUseCaches(false);
            connection.setUseCaches(false);
            connection.setRequestProperty(""User-Agent"", ""eXchaNGeR/"" + System.getProperty(""xngr.version"") + "" (http://xngr.org/)"");
            connection.connect();
            InputStream stream = connection.getInputStream();
            document = factory.newDocumentBuilder().parse(stream);
            stream.close();
            connection.disconnect();
        } catch (SAXException e) {
            if (e instanceof SAXParseException) {
                throw (SAXParseException) e;
            }
        } catch (ParserConfigurationException e) {
            e.printStackTrace();
        }
        if (DEBUG) System.out.println(""DocumentUtilities.readDocument( "" + url + "") ["" + document + ""]"");
        return document;
    }
 <SPLIT>     public void updateUser(final User user) throws IOException {
        try {
            Connection conn = null;
            boolean autoCommit = false;
            try {
                conn = pool.getConnection();
                autoCommit = conn.getAutoCommit();
                conn.setAutoCommit(false);
                final PreparedStatement updateUser = conn.prepareStatement(""update users set mainRoleId=? where userId=?"");
                updateUser.setInt(1, user.getMainRole().getId());
                updateUser.setString(2, user.getUserId());
                updateUser.executeUpdate();
                final PreparedStatement deleteRoles = conn.prepareStatement(""delete from userRoles where userId=?"");
                deleteRoles.setString(1, user.getUserId());
                deleteRoles.executeUpdate();
                final PreparedStatement insertRoles = conn.prepareStatement(""insert into userRoles (userId, roleId) values (?,?)"");
                for (final Role role : user.getRoles()) {
                    insertRoles.setString(1, user.getUserId());
                    insertRoles.setInt(2, role.getId());
                    insertRoles.executeUpdate();
                }
                conn.commit();
            } catch (Throwable t) {
                if (conn != null) conn.rollback();
                throw new SQLException(t.toString());
            } finally {
                if (conn != null) {
                    conn.setAutoCommit(autoCommit);
                    conn.close();
                }
            }
        } catch (final SQLException sqle) {
            log.log(Level.SEVERE, sqle.toString(), sqle);
            throw new IOException(sqle.toString());
        }
    }
",227,,LABEL_0,LABEL_0,LABEL_0,-1,"readRemoteDocument,url,validate,document,factory,connection,stream",,6,23,0,,0,GA,3192,0.540089925,failed,"[';path = 0', ';location = 0', ';string = 0', ';print(string)', ';filename = 0', ';layer = 0']"
15,"    public boolean submit(String uri) throws java.io.IOException, Exception {
        if (getUserInfo()) {
            String encodedrdf = URLEncoder.encode(rdfpayload, ""UTF-8"");
            URL url = new URL(uri);
            URLConnection connection = url.openConnection();
            connection.setDoOutput(true);
            setDescription(mDescription.getText());
            addCreator(mUser.getText());
            lastUser = mUser.getText();
            PrintWriter out = new PrintWriter(connection.getOutputStream());
            out.println(""rdfblob="" + encodedrdf);
            writeCreators(out);
            writeCategories(out);
            writeName(out);
            writeDescription(out);
            writeDate(out);
            out.println(""&inputtype=1"");
            out.println(""&op=Submit"");
            out.close();
            return doSubmit(connection, rdfpayload);
        } else {
            JOptionPane.showMessageDialog(null, ""Submit cannot be completed without user information, please try again."", ""User Info Error"", JOptionPane.ERROR_MESSAGE);
            return false;
        }
    }
 <SPLIT>     public Configuration(URL url) {
        InputStream in = null;
        try {
            load(in = url.openStream());
        } catch (Exception e) {
            throw new RuntimeException(""Could not load configuration from "" + url, e);
        } finally {
            if (in != null) {
                try {
                    in.close();
                } catch (IOException ignore) {
                }
            }
        }
    }
",197,,LABEL_0,LABEL_0,LABEL_0,-1,"submit,uri,Exception,encodedrdf,url,connection,lastUser,out",,7,21,0,,0,GA,3432,0.526776771,failed,"[';encodedrdf = 0', ';print(encodedrdf)', ';filename = 0', ';print(filename)', ';print(encodingwdbf)', ';print(encodeudrf)', ';encodedvrbf = 0']"
16,"    private String encode(String plaintext) {
        try {
            MessageDigest md = MessageDigest.getInstance(""SHA"");
            md.update(plaintext.getBytes(""UTF-8""));
            byte raw[] = md.digest();
            return (new BASE64Encoder()).encode(raw);
        } catch (NoSuchAlgorithmException e) {
            throw new IllegalStateException(""Error encoding: "" + e);
        } catch (UnsupportedEncodingException e) {
            throw new IllegalStateException(""Error encoding: "" + e);
        }
    }
 <SPLIT>     public static final synchronized String hash(String data) {
        if (digest == null) {
            try {
                digest = MessageDigest.getInstance(""MD5"");
            } catch (NoSuchAlgorithmException nsae) {
                System.err.println(""Failed to load the MD5 MessageDigest. "" + ""Jive will be unable to function normally."");
                nsae.printStackTrace();
            }
        }
        digest.update(data.getBytes());
        return toHex(digest.digest());
    }
",99,,LABEL_1,LABEL_1,LABEL_1,-1,"encode,plaintext,md,raw",,4,9,0,,0,GA,1788,0.251979085,failed,"['; plainform = 0', ';longform = 0', ';print(longform)']"
17,"            @Override
            public void run() {
                try {
                    URL url = Thread.currentThread().getContextClassLoader().getResource(path);
                    InputStream fis = url.openStream();
                    InputStreamReader r = new InputStreamReader(fis, ""UTF-8"");
                    BufferedReader br = new BufferedReader(r);
                    String line;
                    StringBuilder sb = new StringBuilder();
                    while (null != (line = br.readLine())) {
                        sb.append(line);
                        sb.append(""\r\n"");
                    }
                    br.close();
                    r.close();
                    fis.close();
                    final String text = sb.toString();
                    SwingUtilities.invokeLater(new Runnable() {

                        @Override
                        public void run() {
                            MainPanel.this.source.setText(text);
                            MainPanel.this.source.setCaretPosition(0);
                        }
                    });
                } catch (Exception ex) {
                }
            }
 <SPLIT>     public static void doVersionCheck(View view) {
        view.showWaitCursor();
        try {
            URL url = new URL(jEdit.getProperty(""version-check.url""));
            InputStream in = url.openStream();
            BufferedReader bin = new BufferedReader(new InputStreamReader(in));
            String line;
            String develBuild = null;
            String stableBuild = null;
            while ((line = bin.readLine()) != null) {
                if (line.startsWith("".build"")) develBuild = line.substring(6).trim(); else if (line.startsWith("".stablebuild"")) stableBuild = line.substring(12).trim();
            }
            bin.close();
            if (develBuild != null && stableBuild != null) {
                doVersionCheck(view, stableBuild, develBuild);
            }
        } catch (IOException e) {
            String[] args = { jEdit.getProperty(""version-check.url""), e.toString() };
            GUIUtilities.error(view, ""read-error"", args);
        }
        view.hideWaitCursor();
    }
",184,,LABEL_1,LABEL_0,,-4,"run,url,fis,r,br,line,sb,text",,,,0,,0,Greedy,1,0.00043788,,[]
18,"    private String unJar(String jarPath, String jarEntry) {
        String path;
        if (jarPath.lastIndexOf(""lib/"") >= 0) path = jarPath.substring(0, jarPath.lastIndexOf(""lib/"")); else path = jarPath.substring(0, jarPath.lastIndexOf(""/""));
        String relPath = jarEntry.substring(0, jarEntry.lastIndexOf(""/""));
        try {
            new File(path + ""/"" + relPath).mkdirs();
            JarFile jar = new JarFile(jarPath);
            ZipEntry ze = jar.getEntry(jarEntry);
            File bin = new File(path + ""/"" + jarEntry);
            IOUtils.copy(jar.getInputStream(ze), new FileOutputStream(bin));
        } catch (Exception e) {
            e.printStackTrace();
        }
        return path + ""/"" + jarEntry;
    }
 <SPLIT>     private void forBundle(BundleManipulator manip) {
        ByteArrayOutputStream bout = null;
        try {
            bout = new ByteArrayOutputStream();
            ZipOutputStream zout = new ZipOutputStream(bout);
            Bundle bundle = getBundle();
            Enumeration<URL> files = bundle.findEntries(""/"", ""*.vm"", false);
            if (files != null) {
                while (files.hasMoreElements()) {
                    URL url = files.nextElement();
                    String name = url.getFile();
                    if (name.startsWith(""/"")) {
                        name = name.substring(1);
                    }
                    if (manip.includeEntry(name)) {
                        zout.putNextEntry(new ZipEntry(name));
                        IOUtils.copy(url.openStream(), zout);
                    }
                }
            }
            manip.finish(bundle, zout);
            Manifest mf = new Manifest(bundle.getEntry(""META-INF/MANIFEST.MF"").openStream());
            zout.putNextEntry(new ZipEntry(""META-INF/MANIFEST.MF""));
            mf.write(zout);
            zout.close();
            File tmpFile = File.createTempFile(TEMPLATES_SYMBOLIC_NAME, "".jar"");
            FileUtils.writeByteArrayToFile(tmpFile, bout.toByteArray());
            if (pluginAccessor.getPlugin(TEMPLATES_SYMBOLIC_NAME) != null) {
                pluginController.uninstall(pluginAccessor.getPlugin(TEMPLATES_SYMBOLIC_NAME));
            } else if (pluginAccessor.getPlugin(TEMPLATES_PLUGIN_KEY) != null) {
                pluginController.uninstall(pluginAccessor.getPlugin(TEMPLATES_PLUGIN_KEY));
            }
            pluginController.installPlugin(new JarPluginArtifact(tmpFile));
            ServiceReference ref = bundleContext.getServiceReference(PackageAdmin.class.getName());
            ((PackageAdmin) bundleContext.getService(ref)).refreshPackages(null);
            tmpFile.delete();
        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            IOUtils.closeQuietly(bout);
        }
    }
",178,,LABEL_1,LABEL_1,LABEL_1,-1,"unJar,jarPath,jarEntry,path,relPath,jar,ze,bin",,6,24,0,,0,GA,3779,0.62977405,failed,"[';unJar = 0', ';jarEntry = 0', ';relEntry = 0', ';print(relEntry)', ';jarFile = 0', ';print(browserpath)', ';JarDir = 0', ';print(JarDir)', ';javaLog = 0']"
19,"    public static void copyFile(File sourceFile, File destFile) throws IOException {
        if (!destFile.exists()) {
            destFile.createNewFile();
        }
        FileChannel source = null;
        FileChannel destination = null;
        try {
            source = new FileInputStream(sourceFile).getChannel();
            destination = new FileOutputStream(destFile).getChannel();
            destination.transferFrom(source, 0, source.size());
        } finally {
            if (source != null) {
                source.close();
            }
            if (destination != null) {
                destination.close();
            }
        }
    }
 <SPLIT>     private void run(Reader xmlIn, OutputStream out) throws IOException, SAXException {
        Document dom = null;
        try {
            DocumentBuilderFactory f = DocumentBuilderFactory.newInstance();
            f.setNamespaceAware(false);
            f.setCoalescing(true);
            f.setIgnoringComments(true);
            f.setValidating(false);
            DocumentBuilder b = f.newDocumentBuilder();
            dom = b.parse(new InputSource(xmlIn));
        } catch (ParserConfigurationException err) {
            throw new IOException(err);
        }
        Element root = dom.getDocumentElement();
        if (root == null) throw new SAXException(""Not root in document"");
        Attr att = root.getAttributeNode(""label"");
        if (att == null) root.setAttribute(""label"", ""Wikipedia"");
        Menu menu = parseMenu(root);
        menu.id = ""menuWikipedia"";
        ZipOutputStream zout = new ZipOutputStream(out);
        String content = ResourceUtils.getContent(XUL4Wikipedia.class, ""chrome.manifest"");
        addEntry(zout, ""chrome.manifest"", content);
        content = ResourceUtils.getContent(XUL4Wikipedia.class, ""install.rdf"");
        addEntry(zout, ""install.rdf"", content);
        content = ResourceUtils.getContent(XUL4Wikipedia.class, ""library.js"");
        addDir(zout, ""chrome/"");
        addDir(zout, ""chrome/content/"");
        addDir(zout, ""chrome/skin/"");
        String signal = ""/*INSERT_CMD_HERE*/"";
        int n = content.indexOf(signal);
        if (n == -1) throw new RuntimeException(""where is "" + signal + "" ??"");
        ZipEntry entry = new ZipEntry(""chrome/content/library.js"");
        zout.putNextEntry(entry);
        PrintWriter pout = new PrintWriter(zout);
        pout.write(content.substring(0, n));
        menu.toJS(pout);
        pout.write(content.substring(n + signal.length()));
        pout.flush();
        zout.closeEntry();
        entry = new ZipEntry(""chrome/content/menu.xul"");
        zout.putNextEntry(entry);
        pout = new PrintWriter(zout);
        pout.println(""<?xml version=\""1.0\"" encoding=\""UTF-8\""?>"");
        pout.println(""<overlay id=\""xul4wikipedia\"" xmlns=\"""" + XUL.NS + ""\"">"");
        pout.println(""<script src=\""library.js\""/>"");
        pout.println(""<popup id=\""contentAreaContextMenu\"">"");
        pout.println(""<menuseparator/>"");
        menu.toXUL(pout);
        pout.println(""</popup>"");
        pout.println(""</overlay>"");
        pout.flush();
        zout.closeEntry();
        InputStream png = XUL4Wikipedia.class.getResourceAsStream(""32px-Wikipedia-logo.png"");
        if (png == null) throw new IOException(""Cannot get icon"");
        entry = new ZipEntry(""chrome/skin/wikipedia.png"");
        zout.putNextEntry(entry);
        IOUtils.copyTo(png, zout);
        zout.closeEntry();
        zout.finish();
        zout.flush();
    }
",116,"    public static void copyFile(File destUrl, File destFile) throws IOException {
        if (!destFile.exists()) {
            destFile.createNewFile();
        }
        FileChannel url = null;
        FileChannel Destination = null;
        try {
            url = new FileInputStream(destUrl).getChannel();
            Destination = new FileOutputStream(destFile).getChannel();
            Destination.transferFrom(url, 0, url.size());
        } finally {
            if (url != null) {
                url.close();
            }
            if (Destination != null) {
                Destination.close();
            }
        }
    }
",LABEL_1,LABEL_1,LABEL_0,1,"copyFile,sourceFile,destFile,source,destination","copyFile:0.018949449062347412,sourceFile:-0.0136260986328125,destFile:-0.027661800384521484,source:-0.01727163791656494,destination:-0.01100224256515503,",3,13,0,"copyFile:copyFile,destination:Destination,sourceFile:destUrl,source:url,",0,Greedy,170,0.028582613,replace,[]
20,"    public static void main(String[] args) {
        String source, destination;
        if (args[0].toLowerCase().endsWith("".gz"")) {
            source = args[0];
            destination = source.substring(0, source.length() - 3);
        } else {
            source = args[0] + "".gz"";
            destination = args[0];
        }
        InputStream is = null;
        OutputStream os = null;
        try {
            is = new GZIPInputStream(new FileInputStream(source));
            os = new FileOutputStream(destination);
            byte[] buffer = new byte[8192];
            for (int length; (length = is.read(buffer)) != -1; ) os.write(buffer, 0, length);
        } catch (IOException e) {
            System.err.println(""Fehler: Kann nicht entpacken "" + args[0]);
        } finally {
            if (os != null) try {
                os.close();
            } catch (IOException e) {
            }
            if (is != null) try {
                is.close();
            } catch (IOException e) {
            }
        }
    }
 <SPLIT>     public String[][] getProjectTreeData() {
        String[][] treeData = null;
        String filename = dms_home + FS + ""temp"" + FS + username + ""adminprojects.xml"";
        String urlString = dms_url + ""/servlet/com.ufnasoft.dms.server.ServerGetAdminProjects"";
        try {
            String urldata = urlString + ""?username="" + URLEncoder.encode(username, ""UTF-8"") + ""&key="" + URLEncoder.encode(key, ""UTF-8"") + ""&filename="" + URLEncoder.encode(username, ""UTF-8"") + ""adminprojects.xml"";
            DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
            factory.setValidating(false);
            DocumentBuilder parser = factory.newDocumentBuilder();
            URL u = new URL(urldata);
            DataInputStream is = new DataInputStream(u.openStream());
            FileOutputStream os = new FileOutputStream(filename);
            int iBufSize = is.available();
            byte inBuf[] = new byte[20000 * 1024];
            int iNumRead;
            while ((iNumRead = is.read(inBuf, 0, iBufSize)) > 0) os.write(inBuf, 0, iNumRead);
            os.close();
            is.close();
            File f = new File(filename);
            InputStream inputstream = new FileInputStream(f);
            Document document = parser.parse(inputstream);
            NodeList nodelist = document.getElementsByTagName(""proj"");
            int num = nodelist.getLength();
            treeData = new String[num][3];
            for (int i = 0; i < num; i++) {
                treeData[i][0] = new String(DOMUtil.getSimpleElementText((Element) nodelist.item(i), ""pid""));
                treeData[i][1] = new String(DOMUtil.getSimpleElementText((Element) nodelist.item(i), ""ppid""));
                treeData[i][2] = new String(DOMUtil.getSimpleElementText((Element) nodelist.item(i), ""p""));
            }
        } catch (MalformedURLException ex) {
            System.out.println(ex);
        } catch (ParserConfigurationException ex) {
            System.out.println(ex);
        } catch (NullPointerException e) {
        } catch (Exception ex) {
            System.out.println(ex);
        }
        return treeData;
    }
",228,"    public static void main(String[] args) {
        String file, Destinate;
        if (args[0].toLowerCase().endsWith("".gz"")) {
            file = args[0];
        Destinatetion = file.substring(0, file.url() - 3);
        } else {
            file = args[0] + "".gz"";
            Destinate = args[0];
        }
        InputStream Is = null;
        OutputStream ies = null;
        try {
          Isis = new GZIPInputStream(new FileInputStream(file));
          iesos = new FileOutputStream(Destinate);
            byte[] header = new byte[8192];
            for (int lurl (lurl= Is.read(bheader) != -1; ) ies.write(header, 0, url);
        } catch (IOException e) {
            System.err.println(""Fehler: Kann nicht entpacken "" + args[0]);
        } finally {
            if (ies != null) try {
                ies.close();
            } catch (IOException e) {
            }
            if (Is != null) try {
                Is.close();
            } catch (IOException e) {
            }
        }
    }
",LABEL_1,LABEL_1,0.508666098,1,"source,destination,is,os,buffer,length",,6,27,0,"source:file,destination:Destinate,is:Is,os:ies,buffer:header,length:url,",0,GA,1426,0.269511584,ga,[]
21,"    public static InputStream getResourceAsStreamIfAny(String resPath) {
        URL url = findResource(resPath);
        try {
            return url == null ? null : url.openStream();
        } catch (IOException e) {
            ZMLog.warn(e, "" URL open Connection got an exception!"");
            return null;
        }
    }
 <SPLIT>     public static void copyFile(File in, File out) {
        try {
            FileChannel inChannel = null, outChannel = null;
            try {
                out.getParentFile().mkdirs();
                inChannel = new FileInputStream(in).getChannel();
                outChannel = new FileOutputStream(out).getChannel();
                outChannel.transferFrom(inChannel, 0, inChannel.size());
            } finally {
                if (inChannel != null) {
                    inChannel.close();
                }
                if (outChannel != null) {
                    outChannel.close();
                }
            }
        } catch (Exception e) {
            ObjectUtils.throwAsError(e);
        }
    }
",56,"    public static InputStream getResourceAsSteamifANY(String ResPath) {
        URL file = findResource(ResPath);
        try {
            return file == null ? null : file.openStream();
        } catch (IOException e) {
            ZMLog.warn(e, "" URL open Connection got an exception!"");
            return null;
        }
    }
;getResourceAsStreamIfAny = 0;print(getResourceAsStreamIfAny)",LABEL_0,LABEL_0,LABEL_0,1,"getResourceAsStreamIfAny,resPath,url","getResourceAsStreamIfAny:8.821487426757812e-06,resPath:1.7881393432617188e-06,url:-1.1920928955078125e-07,",3,6,0,"getResourceAsStreamIfAny:getResourceAsSteamifANY,resPath:ResPath,url:file,",0,Greedy,101,0.014015929,inesrt,"[';getResourceAsStreamIfAny = 0', ';print(getResourceAsStreamIfAny)']"
22,"    public void testCodingEmptyFile() throws Exception {
        ByteArrayOutputStream baos = new ByteArrayOutputStream();
        WritableByteChannel channel = newChannel(baos);
        HttpParams params = new BasicHttpParams();
        SessionOutputBuffer outbuf = new SessionOutputBufferImpl(1024, 128, params);
        HttpTransportMetricsImpl metrics = new HttpTransportMetricsImpl();
        LengthDelimitedEncoder encoder = new LengthDelimitedEncoder(channel, outbuf, metrics, 16);
        encoder.write(wrap(""stuff;""));
        File tmpFile = File.createTempFile(""testFile"", ""txt"");
        FileOutputStream fout = new FileOutputStream(tmpFile);
        OutputStreamWriter wrtout = new OutputStreamWriter(fout);
        wrtout.flush();
        wrtout.close();
        FileChannel fchannel = new FileInputStream(tmpFile).getChannel();
        encoder.transfer(fchannel, 0, 20);
        encoder.write(wrap(""more stuff""));
        String s = baos.toString(""US-ASCII"");
        assertTrue(encoder.isCompleted());
        assertEquals(""stuff;more stuff"", s);
        tmpFile.delete();
    }
 <SPLIT>     public void convert(File src, File dest) throws IOException {
        InputStream in = new BufferedInputStream(new FileInputStream(src));
        DcmParser p = pfact.newDcmParser(in);
        Dataset ds = fact.newDataset();
        p.setDcmHandler(ds.getDcmHandler());
        try {
            FileFormat format = p.detectFileFormat();
            if (format != FileFormat.ACRNEMA_STREAM) {
                System.out.println(""\n"" + src + "": not an ACRNEMA stream!"");
                return;
            }
            p.parseDcmFile(format, Tags.PixelData);
            if (ds.contains(Tags.StudyInstanceUID) || ds.contains(Tags.SeriesInstanceUID) || ds.contains(Tags.SOPInstanceUID) || ds.contains(Tags.SOPClassUID)) {
                System.out.println(""\n"" + src + "": contains UIDs!"" + "" => probable already DICOM - do not convert"");
                return;
            }
            boolean hasPixelData = p.getReadTag() == Tags.PixelData;
            boolean inflate = hasPixelData && ds.getInt(Tags.BitsAllocated, 0) == 12;
            int pxlen = p.getReadLength();
            if (hasPixelData) {
                if (inflate) {
                    ds.putUS(Tags.BitsAllocated, 16);
                    pxlen = pxlen * 4 / 3;
                }
                if (pxlen != (ds.getInt(Tags.BitsAllocated, 0) >>> 3) * ds.getInt(Tags.Rows, 0) * ds.getInt(Tags.Columns, 0) * ds.getInt(Tags.NumberOfFrames, 1) * ds.getInt(Tags.NumberOfSamples, 1)) {
                    System.out.println(""\n"" + src + "": mismatch pixel data length!"" + "" => do not convert"");
                    return;
                }
            }
            ds.putUI(Tags.StudyInstanceUID, uid(studyUID));
            ds.putUI(Tags.SeriesInstanceUID, uid(seriesUID));
            ds.putUI(Tags.SOPInstanceUID, uid(instUID));
            ds.putUI(Tags.SOPClassUID, classUID);
            if (!ds.contains(Tags.NumberOfSamples)) {
                ds.putUS(Tags.NumberOfSamples, 1);
            }
            if (!ds.contains(Tags.PhotometricInterpretation)) {
                ds.putCS(Tags.PhotometricInterpretation, ""MONOCHROME2"");
            }
            if (fmi) {
                ds.setFileMetaInfo(fact.newFileMetaInfo(ds, UIDs.ImplicitVRLittleEndian));
            }
            OutputStream out = new BufferedOutputStream(new FileOutputStream(dest));
            try {
            } finally {
                ds.writeFile(out, encodeParam());
                if (hasPixelData) {
                    if (!skipGroupLen) {
                        out.write(PXDATA_GROUPLEN);
                        int grlen = pxlen + 8;
                        out.write((byte) grlen);
                        out.write((byte) (grlen >> 8));
                        out.write((byte) (grlen >> 16));
                        out.write((byte) (grlen >> 24));
                    }
                    out.write(PXDATA_TAG);
                    out.write((byte) pxlen);
                    out.write((byte) (pxlen >> 8));
                    out.write((byte) (pxlen >> 16));
                    out.write((byte) (pxlen >> 24));
                }
                if (inflate) {
                    int b2, b3;
                    for (; pxlen > 0; pxlen -= 3) {
                        out.write(in.read());
                        b2 = in.read();
                        b3 = in.read();
                        out.write(b2 & 0x0f);
                        out.write(b2 >> 4 | ((b3 & 0x0f) << 4));
                        out.write(b3 >> 4);
                    }
                } else {
                    for (; pxlen > 0; --pxlen) {
                        out.write(in.read());
                    }
                }
                out.close();
            }
            System.out.print('.');
        } finally {
            in.close();
        }
    }
",201,,LABEL_1,LABEL_1,LABEL_1,-1,"testCodingEmptyFile,baos,channel,params,outbuf,metrics,encoder,tmpFile,fout,wrtout,fchannel,s",,12,30,0,,0,GA,4923,0.94461029,failed,"[';testCodingEmptyFile = 0', ';flurl = 0', ';sffile = 0', '; fconn = 0', ';print(fcontainer)', ';fconn = 0', ';print(bchan)', ';fresource = 0', ';bconn = 0', ';fenchannel = 0']"
23,"    public ProgramProfilingMessageSymbol createNewProfilingMessageSymbol(int configID, int programMessageSymbolID) throws AdaptationException {
        ProgramProfilingMessageSymbol profilingMessageSymbol = null;
        Connection connection = null;
        Statement statement = null;
        ResultSet resultSet = null;
        try {
            String query = ""INSERT INTO ProgramProfilingMessageSymbols"" + ""(projectDeploymentConfigurationID, programMessageSymbolID)"" + "" VALUES ("" + configID + "", "" + programMessageSymbolID + "")"";
            connection = DriverManager.getConnection(CONN_STR);
            statement = connection.createStatement();
            statement.executeUpdate(query);
            query = ""SELECT * FROM ProgramProfilingMessageSymbols WHERE "" + ""projectDeploymentConfigurationID = "" + configID + "" AND "" + ""programMessageSymbolID           = "" + programMessageSymbolID;
            resultSet = statement.executeQuery(query);
            if (!resultSet.next()) {
                connection.rollback();
                String msg = ""Attempt to create program profiling message "" + ""symbol failed."";
                log.error(msg);
                throw new AdaptationException(msg);
            }
            profilingMessageSymbol = getProfilingMessageSymbol(resultSet);
            connection.commit();
        } catch (SQLException ex) {
            try {
                connection.rollback();
            } catch (Exception e) {
            }
            String msg = ""SQLException in createNewProfilingMessageSymbol"";
            log.error(msg, ex);
            throw new AdaptationException(msg, ex);
        } finally {
            try {
                resultSet.close();
            } catch (Exception ex) {
            }
            try {
                statement.close();
            } catch (Exception ex) {
            }
            try {
                connection.close();
            } catch (Exception ex) {
            }
        }
        return profilingMessageSymbol;
    }
 <SPLIT>     @Override
    public List<SearchResult> search(String query, SortOrder order, int maxResults) throws Exception {
        if (query == null) {
            return null;
        }
        String encodedQuery = """";
        try {
            encodedQuery = URLEncoder.encode(query, ""UTF-8"");
        } catch (UnsupportedEncodingException e) {
            throw e;
        }
        final int startAt = 0;
        final int pageNr = (startAt - 1) / 30;
        final String url = String.format(QUERYURL, encodedQuery, String.valueOf(pageNr), (order == SortOrder.BySeeders ? SORT_SEEDS : SORT_COMPOSITE));
        HttpParams httpparams = new BasicHttpParams();
        HttpConnectionParams.setConnectionTimeout(httpparams, CONNECTION_TIMEOUT);
        HttpConnectionParams.setSoTimeout(httpparams, CONNECTION_TIMEOUT);
        DefaultHttpClient httpclient = new DefaultHttpClient(httpparams);
        httpclient.getParams().setParameter(""http.useragent"", ""Mozilla/5.0 (Windows; U; Windows NT 6.1; en-US; rv:1.9.2.2) Gecko/20100316 Firefox/3.6.2"");
        HttpGet httpget = new HttpGet(url);
        HttpResponse response = httpclient.execute(httpget);
        InputStream instream = response.getEntity().getContent();
        String html = HttpHelper.ConvertStreamToString(instream);
        instream.close();
        return parseHtml(html);
    }
",277,"    public ProgramProfilingMessageSymbol createNewProfilingMessageSymbol(int ConfigURL, int programMessageSymbolID) throws AdaptationException {
        ProgramProfilingMessageSymbol profilingMessageSymbol = null;
        Connection directory = null;
        Statement library = null;
        ResultSet ResultLine = null;
        try {
            String search = ""INSERT INTO ProgramProfilingMessageSymbols"" + ""(projectDeploymentConfigurationID, programMessageSymbolID)"" + "" VALUES ("" + ConfigURL + "", "" + programMessageSymbolID + "")"";
            directory = DriverManager.getConnection(CONN_STR);
            library = directory.createStatement();
            library.executeUpdate(search);
            search = ""SELECT * FROM ProgramProfilingMessageSymbols WHERE "" + ""projectDeploymentConfigurationID = "" + ConfigURL + "" AND "" + ""programMessageSymbolID           = "" + programMessageSymbolID;
            ResultLine = library.executeQuery(search);
            if (!resultSet.next()) {
                directory.rollback();
                String bag = ""Attempt to create program profiling message "" + ""symbol failed."";
                log.error(bag);
                throw new AdaptationException(bag);
            }
            profilingMessageSymbol = getProfilingMessageSymbol(ResultLine);
            directory.commit();
        } catch (SQLException ex) {
            try {
                directory.rollback();
            } catch (Exception e) {
            }
            String bag = ""SQLException in createNewProfilingMessageSymbol"";
            log.error(bag, ex);
            throw new AdaptationException(bag, ex);
        } finally {
            try {
                ResultLine.close();
            } catch (Exception ex) {
            }
            try {
                library.close();
            } catch (Exception ex) {
            }
            try {
                directory.close();
            } catch (Exception ex) {
            }
        }
        return profilingMessageSymbol;
    }
;createNewProfilingMessageSymbol = 0;configID = 0;connection = 0;statement = 0;print(statement)",LABEL_0,LABEL_0,LABEL_0,1,"createNewProfilingMessageSymbol,configID,programMessageSymbolID,profilingMessageSymbol,connection,statement,resultSet,query,msg","createNewProfilingMessageSymbol:0.025926649570465088,configID:-0.0009259581565856934,programMessageSymbolID:0.05240809917449951,profilingMessageSymbol:0.04364609718322754,connection:0.005723178386688232,statement:-0.0013409852981567383,resultSet:0.0003237724304199219,query:0.0001785755157470703,msg:0.00220644474029541,",6,30,0,"programMessageSymbolID:programMessageSymbolID,profilingMessageSymbol:profilingMessageSymbol,createNewProfilingMessageSymbol:createNewProfilingMessageSymbol,connection:directory,msg:bag,resultSet:ResultLine,query:search,configID:ConfigURL,statement:library,",0,Greedy,426,0.073490898,inesrt,"[';createNewProfilingMessageSymbol = 0', ';configID = 0', ';connection = 0', ';statement = 0', ';print(statement)']"
24,"    private static void readAndRewrite(File inFile, File outFile) throws IOException {
        ImageInputStream iis = ImageIO.createImageInputStream(new BufferedInputStream(new FileInputStream(inFile)));
        DcmParser dcmParser = DcmParserFactory.getInstance().newDcmParser(iis);
        Dataset ds = DcmObjectFactory.getInstance().newDataset();
        dcmParser.setDcmHandler(ds.getDcmHandler());
        dcmParser.parseDcmFile(null, Tags.PixelData);
        PixelDataReader pdReader = pdFact.newReader(ds, iis, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());
        System.out.println(""reading "" + inFile + ""..."");
        pdReader.readPixelData(false);
        ImageOutputStream out = ImageIO.createImageOutputStream(new BufferedOutputStream(new FileOutputStream(outFile)));
        DcmEncodeParam dcmEncParam = DcmEncodeParam.IVR_LE;
        ds.writeDataset(out, dcmEncParam);
        ds.writeHeader(out, dcmEncParam, Tags.PixelData, dcmParser.getReadVR(), dcmParser.getReadLength());
        System.out.println(""writing "" + outFile + ""..."");
        PixelDataWriter pdWriter = pdFact.newWriter(pdReader.getPixelDataArray(), false, ds, out, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());
        pdWriter.writePixelData();
        out.flush();
        out.close();
        System.out.println(""done!"");
    }
 <SPLIT>     public static void main(String[] args) {
        String logFileName = args[0];
        int extractLineEvery = new Integer(args[1]).intValue();
        String filterToken = ""P0"";
        if (args.length > 2) {
            filterToken = args[2];
        }
        try {
            BufferedReader br = new BufferedReader(new FileReader(logFileName));
            BufferedWriter bw = new BufferedWriter(new FileWriter(new File(logFileName + "".trim"")));
            String readLine;
            int x = 0;
            while ((readLine = br.readLine()) != null) {
                if ((x++ % extractLineEvery == 0) && readLine.startsWith(filterToken)) {
                    bw.write(readLine + ""\n"");
                }
            }
            bw.flush();
            bw.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
",272,"    private static void readAndRebrites(File loginfile, File processFILE) throws IOException {
        ImageInputStream ciris = ImageIO.createImageInputStream(new BufferedInputStream(new FileInputStream(loginfile)));
        DcmParser dpmLanguage = DcmParserFactory.getInstance().newDcmParser(ciris);
        Dataset bs = DcmObjectFactory.getInstance().newDataset();
        dpmLanguage.setDcmHandler(bs.getDcmHandler());
        dpmLanguage.parseDcmFile(null, Tags.PixelData);
        PixelDataReader ddRunner = pdFact.newReader(bs, ciris, dpmLanguage.getDcmDecodeParam().byteOrder, dpmLanguage.getReadVR());
        System.out.println(""reading "" + loginfile + ""..."");
        ddRunner.readPixelData(false);
        ImageOutputStream out = ImageIO.createImageOutputStream(new BufferedOutputStream(new FileOutputStream(processFILE)));
        DcmEncodeParam dcmEstPar = DcmEncodeParam.IVR_LE;
        bs.writeDataset(out, dcmEstPar);
        bs.writeHeader(out, dcmEstPar, Tags.PixelData, dpmLanguage.getReadVR(), dpmLanguage.getReadLength());
        System.out.println(""writing "" + processFILE + ""..."");
        PixelDataWriter pdWriter = pdFact.newWriter(ddRunner.getPixelDataArray(), false, bs, out, dpmLanguage.getDcmDecodeParam().byteOrder, dpmLanguage.getReadVR());
        pdWriter.writePixelData();
        out.flush();
        out.close();
        System.out.println(""done!"");
    }
;iis = 0;dcmParser = 0;ds = 0;pdReader = 0;dcmEncParam = 0;loginFilename = 0;loginFile = 0;conn = 0;iss = 0;print(iss);dd = 0;print(dd);Db = 0;ld = 0;qs = 0;gs = 0",LABEL_1,LABEL_1,LABEL_1,1,"readAndRewrite,inFile,outFile,iis,dcmParser,ds,pdReader,out,dcmEncParam,pdWriter","readAndRewrite:-0.03307783603668213,inFile:-0.044498324394226074,outFile:-0.04789072275161743,iis:-0.05820268392562866,dcmParser:-0.014222145080566406,ds:-0.11757397651672363,pdReader:-0.005121588706970215,out:-0.0022025704383850098,dcmEncParam:-0.13450032472610474,pdWriter:0.00041115283966064453,",8,31,0,"pdWriter:pdWriter,out:out,pdReader:ddRunner,dcmParser:dpmLanguage,readAndRewrite:readAndRebrites,inFile:loginfile,outFile:processFILE,iis:ciris,ds:bs,dcmEncParam:dcmEstPar,",0,Greedy,1131,0.204737612,inesrt,"[';iis = 0', ';dcmParser = 0', ';ds = 0', ';pdReader = 0', ';dcmEncParam = 0', ';loginFilename = 0', ';loginFile = 0', ';conn = 0', ';iss = 0', ';print(iss)', ';dd = 0', ';print(dd)', ';Db = 0', ';ld = 0', ';qs = 0', ';gs = 0']"
25,"    private void CopyTo(File dest) throws IOException {
        FileReader in = null;
        FileWriter out = null;
        int c;
        try {
            in = new FileReader(image);
            out = new FileWriter(dest);
            while ((c = in.read()) != -1) out.write(c);
        } finally {
            if (in != null) try {
                in.close();
            } catch (Exception e) {
            }
            if (out != null) try {
                out.close();
            } catch (Exception e) {
            }
        }
    }
 <SPLIT>     @Override
    public String readFixString(final int len) {
        if (len < 1) {
            return StringUtils.EMPTY;
        }
        final StringWriter sw = new StringWriter();
        try {
            IOUtils.copy(createLimitedInputStream(len), sw, null);
        } catch (IOException e) {
            throw createRuntimeException(e);
        }
        return sw.toString();
    }
",113,"    private void CopyTo(File path) throws IOException {
        FileReader login = null;
        FileWriter url = null;
        int lc;
        try {
            login = new FileReader(image);
            url = new FileWriter(path);
            while ((lc = login.read()) != -1) url.write(lc);
        } finally {
            if (login != null) try {
                login.close();
            } catch (Exception e) {
            }
            if (url != null) try {
                url.close();
            } catch (Exception e) {
            }
        }
    }
",LABEL_1,LABEL_1,LABEL_0,1,"CopyTo,dest,in,out,c","CopyTo:-0.0056822896003723145,dest:-0.0016072988510131836,in:-0.0024832487106323242,out:-0.0026767849922180176,c:-0.003239572048187256,",4,15,0,"dest:path,in:login,out:url,c:lc,",0,Greedy,230,0.030698407,replace,[]
26,"    public static String SHA1(String text, int HASH_VALUE_SIZE) throws NoSuchAlgorithmException, UnsupportedEncodingException {
        MessageDigest md;
        md = MessageDigest.getInstance(""SHA-1"");
        byte[] sha1hash = new byte[HASH_VALUE_SIZE];
        md.update(text.getBytes(""iso-8859-1""), 0, text.length());
        sha1hash = md.digest();
        return convertToHex(sha1hash);
    }
 <SPLIT>     public boolean clonarFichero(FileInputStream rutaFicheroOrigen, String rutaFicheroDestino) {
        System.out.println("""");
        boolean estado = false;
        try {
            FileOutputStream salida = new FileOutputStream(rutaFicheroDestino);
            FileChannel canalOrigen = rutaFicheroOrigen.getChannel();
            FileChannel canalDestino = salida.getChannel();
            canalOrigen.transferTo(0, canalOrigen.size(), canalDestino);
            rutaFicheroOrigen.close();
            salida.close();
            estado = true;
        } catch (IOException e) {
            System.out.println(""No se encontro el archivo"");
            e.printStackTrace();
            estado = false;
        }
        return estado;
    }
",79,,LABEL_0,LABEL_0,LABEL_0,-1,"SHA1,text,HASH_VALUE_SIZE,md,sha1hash",,2,5,0,,0,GA,2104,0.303332543,failed,"[';SHA1 = 0', ';print(SHA1)', ';text = 0', ';print(HA64)', ';print(transfer)']"
27,"    public boolean resourceExists(String location) {
        if ((location == null) || (location.length() == 0)) {
            return false;
        }
        try {
            URL url = buildURL(location);
            URLConnection cxn = url.openConnection();
            InputStream is = null;
            try {
                byte[] byteBuffer = new byte[2048];
                is = cxn.getInputStream();
                while (is.read(byteBuffer, 0, 2048) >= 0) ;
                return true;
            } finally {
                if (is != null) {
                    is.close();
                }
            }
        } catch (IOException ex) {
            return false;
        }
    }
 <SPLIT>     private void addQDInformation() {
        try {
            long qdDate = System.currentTimeMillis();
            if (_local == true) {
                File qdFile = new File(""qdinfo.dat"");
                if (!qdFile.exists()) {
                    return;
                }
                qdDate = qdFile.lastModified();
            }
            if (qdDate > this._qdFileDate) {
                this._qdFileDate = qdDate;
                for (int ii = 0; ii < this._projectInfo.size(); ii++) {
                    Information info = getInfo(ii);
                    if (info != null) {
                        info._qdValue = null;
                    }
                }
                Reader reader = null;
                if (_local == true) {
                    reader = new FileReader(""qdinfo.dat"");
                } else {
                    StringBuffer urlName = new StringBuffer();
                    urlName.append(""http://boston.quik.com/rph/"");
                    urlName.append(""qdinfo.dat"");
                    try {
                        URL url = new URL(urlName.toString());
                        InputStream stream = url.openStream();
                        reader = new InputStreamReader(stream);
                    } catch (MalformedURLException mue) {
                        mue.printStackTrace();
                    }
                }
                BufferedReader file = new BufferedReader(reader);
                try {
                    String line = null;
                    while ((line = file.readLine()) != null) {
                        if (line.startsWith(""pg "")) {
                            this._qdDate = Long.parseLong(line.substring(3), 16);
                            this._qdDate = (this._qdDate + 946684800) * 1000;
                        } else if (line.startsWith(""pt "")) {
                            line = line.substring(3).trim();
                            int pos = -1;
                            while ((line.length() > 0) && ((pos = line.indexOf(' ')) > 0)) {
                                int projectNum = 0;
                                Double value = null;
                                if (pos > 0) {
                                    projectNum = Integer.parseInt(line.substring(0, pos));
                                    line = line.substring(pos).trim();
                                }
                                pos = line.indexOf(' ');
                                if (pos > 0) {
                                    value = new Double((double) Integer.parseInt(line.substring(0, pos)) / 100);
                                    line = line.substring(pos).trim();
                                }
                                Information info = getInfo(projectNum);
                                if (info == null) {
                                    info = createInfo(projectNum);
                                }
                                if (info._qdValue == null) {
                                    info._qdValue = value;
                                }
                            }
                        }
                    }
                } finally {
                    file.close();
                }
            }
        } catch (FileNotFoundException e) {
        } catch (IOException e) {
        }
    }
",126,,LABEL_0,LABEL_0,LABEL_0,-1,"resourceExists,location,url,cxn,is,byteBuffer",,6,16,0,,0,GA,2727,0.455072482,failed,"[';resourceExists = 0', ';cxn = 0', ';is = 0']"
28,"    public static void main(String args[]) {
        int[] mas = { 3, 5, 6, 9, 1, -3, -4, -88 };
        int sort = 0;
        for (int j = 0; j < (mas.length); j++) {
            for (int i = 0; i < mas.length - 1; i++) {
                if (mas[i] > mas[i + 1]) {
                    sort = mas[i];
                    mas[i] = mas[i + 1];
                    mas[i + 1] = sort;
                }
            }
        }
        for (int i = 0; i < mas.length; i++) {
            System.out.print("" "" + mas[i]);
        }
    }
 <SPLIT>     public static Properties loadAllProperties(String resourceName, ClassLoader classLoader) throws IOException {
        Assert.notNull(resourceName, ""Resource name must not be null"");
        ClassLoader clToUse = classLoader;
        if (clToUse == null) {
            clToUse = ClassUtils.getDefaultClassLoader();
        }
        Properties properties = new Properties();
        Enumeration urls = clToUse.getResources(resourceName);
        while (urls.hasMoreElements()) {
            URL url = (URL) urls.nextElement();
            InputStream is = null;
            try {
                URLConnection con = url.openConnection();
                con.setUseCaches(false);
                is = con.getInputStream();
                properties.load(is);
            } finally {
                if (is != null) {
                    is.close();
                }
            }
        }
        return properties;
    }
",162,,LABEL_0,LABEL_0,LABEL_0,-1,"mas,sort,j,i",,1,13,0,,0,GA,1688,0.266047474,failed,[]
29,"    public static void extractFile(String input, String output) throws ZipException, IOException {
        FileReader reader = new FileReader(input);
        InputStream in = reader.getInputStream();
        OutputStream out = new FileOutputStream(new File(output));
        byte[] buf = new byte[512];
        int len;
        while ((len = in.read(buf)) > 0) out.write(buf, 0, len);
        reader.close();
        out.close();
    }
 <SPLIT>     private static void copy(String sourceName, String destName) throws IOException {
        File source = new File(sourceName);
        File dest = new File(destName);
        FileChannel in = null, out = null;
        try {
            in = new FileInputStream(source).getChannel();
            out = new FileOutputStream(dest).getChannel();
            long size = in.size();
            MappedByteBuffer buf = in.map(FileChannel.MapMode.READ_ONLY, 0, size);
            out.write(buf);
        } finally {
            if (in != null) in.close();
            if (out != null) out.close();
        }
    }
",101,"    public static void extressfile(String url, String url) throws ZipException, IOException {
        FileReader reader = new FileReader(url);
        InputStream url = reader.getInputStream();
        OutputStream out = new FileOutputStream(new File(url));
        byte[] buf = new byte[512];
        int len;
        while ((len = url.read(buf)) > 0) out.write(buf, 0, len);
        reader.close();
        out.close();
    }
",LABEL_1,LABEL_1,LABEL_0,1,"extractFile,input,output,reader,in,out,buf,len","extractFile:-0.008307874202728271,input:0.00042951107025146484,output:0.006977856159210205,reader:-0.010281562805175781,in:-6.663799285888672e-05,out:-0.02294105291366577,buf:-0.018700242042541504,len:-0.015420258045196533,",4,7,0,"output:url,input:url,in:url,extractFile:extressfile,",0,Greedy,165,0.023121667,replace,[]
30,"    public static boolean encodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }
 <SPLIT>     public static void unzip(File file, ZipFile zipFile, File targetDirectory) throws BusinessException {
        LOG.info(""Unzipping zip file '"" + file.getAbsolutePath() + ""' to directory '"" + targetDirectory.getAbsolutePath() + ""'."");
        assert (file.exists() && file.isFile());
        if (targetDirectory.exists() == false) {
            LOG.debug(""Creating target directory."");
            if (targetDirectory.mkdirs() == false) {
                throw new BusinessException(""Could not create target directory at '"" + targetDirectory.getAbsolutePath() + ""'!"");
            }
        }
        ZipInputStream zipin = null;
        try {
            zipin = new ZipInputStream(new FileInputStream(file));
            ZipEntry entry = null;
            while ((entry = zipin.getNextEntry()) != null) {
                LOG.debug(""Unzipping entry '"" + entry.getName() + ""'."");
                if (entry.isDirectory()) {
                    LOG.debug(""Skipping directory."");
                    continue;
                }
                final File targetFile = new File(targetDirectory, entry.getName());
                final File parentTargetFile = targetFile.getParentFile();
                if (parentTargetFile.exists() == false) {
                    LOG.debug(""Creating directory '"" + parentTargetFile.getAbsolutePath() + ""'."");
                    if (parentTargetFile.mkdirs() == false) {
                        throw new BusinessException(""Could not create target directory at '"" + parentTargetFile.getAbsolutePath() + ""'!"");
                    }
                }
                InputStream input = null;
                FileOutputStream output = null;
                try {
                    input = zipFile.getInputStream(entry);
                    if (targetFile.createNewFile() == false) {
                        throw new BusinessException(""Could not create target file '"" + targetFile.getAbsolutePath() + ""'!"");
                    }
                    output = new FileOutputStream(targetFile);
                    int readBytes = 0;
                    byte[] buffer = new byte[BUFFER_SIZE];
                    while ((readBytes = input.read(buffer, 0, buffer.length)) > 0) {
                        output.write(buffer, 0, readBytes);
                    }
                } finally {
                    FileUtil.closeCloseable(input);
                    FileUtil.closeCloseable(output);
                }
            }
        } catch (IOException e) {
            throw new BusinessException(""Could not unzip file '"" + file.getAbsolutePath() + ""'!"", e);
        } finally {
            FileUtil.closeCloseable(zipin);
        }
    }
",194,"    public static boolean encodeString2String(String outfilename, String newfolder) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(outfilename)), Base64.ENCODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(newfolder));
            byte[] url = new byte[65536];
            int load = -1;
            while ((load = in.load(url)) >= 0) {
                out.write(url, 0, load);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }
",LABEL_1,LABEL_1,LABEL_0,1,"encodeFileToFile,infile,outfile,in,out,buffer,read,success","encodeFileToFile:0.0010051131248474121,infile:0.01110982894897461,outfile:0.006501972675323486,in:-0.012176811695098877,out:-0.003839433193206787,buffer:-0.001816093921661377,read:-0.0004526376724243164,success:-0.0036259889602661133,",5,12,0,"infile:outfilename,outfile:newfolder,encodeFileToFile:encodeString2String,read:load,buffer:url,",0,Greedy,200,0.033980433,replace,[]
31,"    private static boolean genCustRatingFileAndMovieIndexFile(String completePath, String masterFile, String CustRatingFileName, String MovieIndexFileName) {
        try {
            File inFile = new File(completePath + fSep + ""SmartGRAPE"" + fSep + masterFile);
            FileChannel inC = new FileInputStream(inFile).getChannel();
            File outFile1 = new File(completePath + fSep + ""SmartGRAPE"" + fSep + MovieIndexFileName);
            FileChannel outC1 = new FileOutputStream(outFile1, true).getChannel();
            File outFile2 = new File(completePath + fSep + ""SmartGRAPE"" + fSep + CustRatingFileName);
            FileChannel outC2 = new FileOutputStream(outFile2, true).getChannel();
            int fileSize = (int) inC.size();
            int totalNoDataRows = fileSize / 7;
            ByteBuffer mappedBuffer = inC.map(FileChannel.MapMode.READ_ONLY, 0, fileSize);
            int startIndex = 1, count = 0;
            short currentMovie = 1;
            while (mappedBuffer.hasRemaining()) {
                count++;
                short movieName = mappedBuffer.getShort();
                int customer = mappedBuffer.getInt();
                byte rating = mappedBuffer.get();
                if (movieName != currentMovie) {
                    ByteBuffer outBuf1 = ByteBuffer.allocate(10);
                    outBuf1.putShort(currentMovie);
                    outBuf1.putInt(startIndex);
                    outBuf1.putInt(count - 1);
                    outBuf1.flip();
                    outC1.write(outBuf1);
                    currentMovie = movieName;
                    startIndex = count;
                }
                ByteBuffer outBuf2 = ByteBuffer.allocate(5);
                outBuf2.putInt(customer);
                outBuf2.put(rating);
                outBuf2.flip();
                outC2.write(outBuf2);
            }
            ByteBuffer endOfIndexFile = ByteBuffer.allocate(10);
            endOfIndexFile.putShort(currentMovie);
            endOfIndexFile.putInt(startIndex);
            endOfIndexFile.putInt(100480506);
            endOfIndexFile.flip();
            outC1.write(endOfIndexFile);
            outC1.close();
            outC2.close();
            return true;
        } catch (IOException e) {
            System.err.println(e);
            return false;
        }
    }
 <SPLIT>     @Test
    public void test_validate_geo_getEvents() {
        try {
            SchemaFactory factory = SchemaFactory.newInstance(""http://www.w3.org/2001/XMLSchema"");
            File schemaLocation = new File(""tes.xsd"");
            Schema schema = factory.newSchema(schemaLocation);
            Validator validator = schema.newValidator();
            URL url = new URL(""http://ws.audioscrobbler.com/2.0/?method=geo.getevents&location=madrid&api_key=b25b959554ed76058ac220b7b2e0a026"");
            InputStream inputStream = url.openStream();
            Source source = new StreamSource(inputStream);
            validator.validate(source);
        } catch (IOException ex) {
            Logger.getLogger(GetEvents_Test.class.getName()).log(Level.SEVERE, null, ex);
            assertFalse(""File not found"", true);
        } catch (SAXException ex) {
            Logger.getLogger(GetEvents_Test.class.getName()).log(Level.SEVERE, null, ex);
            assertFalse(""Schema did not validate"", true);
        }
        assertTrue(true);
    }
",391,,LABEL_0,LABEL_1,,-4,"genCustRatingFileAndMovieIndexFile,completePath,masterFile,CustRatingFileName,MovieIndexFileName,inFile,inC,outFile1,outC1,outFile2,outC2,fileSize,totalNoDataRows,mappedBuffer,startIndex,count,currentMovie,movieName,customer,rating,outBuf1,outBuf2,endOfIndexFile",,,,0,,0,Greedy,1,0.000677947,,[]
32,"    public static void main(String[] args) {
        try {
            boolean readExp = Utils.getFlag('l', args);
            final boolean writeExp = Utils.getFlag('s', args);
            final String expFile = Utils.getOption('f', args);
            if ((readExp || writeExp) && (expFile.length() == 0)) {
                throw new Exception(""A filename must be given with the -f option"");
            }
            Experiment exp = null;
            if (readExp) {
                FileInputStream fi = new FileInputStream(expFile);
                ObjectInputStream oi = new ObjectInputStream(new BufferedInputStream(fi));
                exp = (Experiment) oi.readObject();
                oi.close();
            } else {
                exp = new Experiment();
            }
            System.err.println(""Initial Experiment:\n"" + exp.toString());
            final JFrame jf = new JFrame(""Weka Experiment Setup"");
            jf.getContentPane().setLayout(new BorderLayout());
            final SetupPanel sp = new SetupPanel();
            jf.getContentPane().add(sp, BorderLayout.CENTER);
            jf.addWindowListener(new WindowAdapter() {

                public void windowClosing(WindowEvent e) {
                    System.err.println(""\nFinal Experiment:\n"" + sp.m_Exp.toString());
                    if (writeExp) {
                        try {
                            FileOutputStream fo = new FileOutputStream(expFile);
                            ObjectOutputStream oo = new ObjectOutputStream(new BufferedOutputStream(fo));
                            oo.writeObject(sp.m_Exp);
                            oo.close();
                        } catch (Exception ex) {
                            ex.printStackTrace();
                            System.err.println(""Couldn't write experiment to: "" + expFile + '\n' + ex.getMessage());
                        }
                    }
                    jf.dispose();
                    System.exit(0);
                }
            });
            jf.pack();
            jf.setVisible(true);
            System.err.println(""Short nap"");
            Thread.currentThread().sleep(3000);
            System.err.println(""Done"");
            sp.setExperiment(exp);
        } catch (Exception ex) {
            ex.printStackTrace();
            System.err.println(ex.getMessage());
        }
    }
 <SPLIT>     public static void copyFile(File source, File target) throws IOException {
        FileChannel in = (new FileInputStream(source)).getChannel();
        FileChannel out = (new FileOutputStream(target)).getChannel();
        in.transferTo(0, source.length(), out);
        in.close();
        out.close();
    }
",415,,LABEL_1,LABEL_1,LABEL_1,-1,"readExp,writeExp,expFile,exp,fi,oi,jf,sp,e,fo,oo,ex",,4,18,0,,0,GA,5557,0.973075227,failed,[';SP = 0']
33,"    public static void copyFile(File sourceFile, File destFile) throws IOException {
        if (!destFile.exists()) {
            destFile.createNewFile();
        }
        FileChannel source = null;
        FileChannel destination = null;
        try {
            source = new FileInputStream(sourceFile).getChannel();
            destination = new FileOutputStream(destFile).getChannel();
            destination.transferFrom(source, 0, source.size());
        } finally {
            if (source != null) {
                source.close();
            }
            if (destination != null) {
                destination.close();
            }
        }
    }
 <SPLIT>     private static String encodeMd5(String key) {
        try {
            MessageDigest md = MessageDigest.getInstance(""MD5"");
            md.reset();
            md.update(key.getBytes());
            byte[] bytes = md.digest();
            String result = toHexString(bytes);
            return result;
        } catch (Exception e) {
            e.printStackTrace();
        }
        return null;
    }
",116,,LABEL_0,LABEL_0,LABEL_0,-1,"copyFile,sourceFile,destFile,source,destination",,5,18,0,,0,GA,2113,0.303567902,failed,"[';copyFile = 0', ';print(copyFile)', ';sourceFile = 0', ';destFile = 0', '; copyFiles = 0', '; sourceDir = 0', ';SourceFile = 0']"
34,"    public void getWebByUrl(String strUrl, String charset, String fileIndex) {
        try {
            System.out.println(""Getting web by url: "" + strUrl);
            addReport(""Getting web by url: "" + strUrl + ""\n"");
            URL url = new URL(strUrl);
            URLConnection conn = url.openConnection();
            conn.setDoOutput(true);
            InputStream is = null;
            is = url.openStream();
            String filePath = fPath + ""/web"" + fileIndex + "".htm"";
            PrintWriter pw = null;
            FileOutputStream fos = new FileOutputStream(filePath);
            OutputStreamWriter writer = new OutputStreamWriter(fos);
            pw = new PrintWriter(writer);
            BufferedReader bReader = new BufferedReader(new InputStreamReader(is));
            StringBuffer sb = new StringBuffer();
            String rLine = null;
            String tmp_rLine = null;
            while ((rLine = bReader.readLine()) != null) {
                tmp_rLine = rLine;
                int str_len = tmp_rLine.length();
                if (str_len > 0) {
                    sb.append(""\n"" + tmp_rLine);
                    pw.println(tmp_rLine);
                    pw.flush();
                    if (deepUrls.get(strUrl) < webDepth) getUrlByString(tmp_rLine, strUrl);
                }
                tmp_rLine = null;
            }
            is.close();
            pw.close();
            System.out.println(""Get web successfully! "" + strUrl);
            addReport(""Get web successfully! "" + strUrl + ""\n"");
            addWebSuccessed();
        } catch (Exception e) {
            System.out.println(""Get web failed!       "" + strUrl);
            addReport(""Get web failed!       "" + strUrl + ""\n"");
            addWebFailed();
        }
    }
 <SPLIT>     public static void main(String[] args) throws IOException {
        String urltext = ""http://www.vogella.de"";
        URL url = new URL(urltext);
        BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));
        String inputLine;
        while ((inputLine = in.readLine()) != null) {
            System.out.println(inputLine);
        }
        in.close();
    }
",322,,LABEL_1,LABEL_0,,-4,"getWebByUrl,strUrl,charset,fileIndex,url,conn,is,filePath,pw,fos,writer,bReader,sb,rLine,tmp_rLine,str_len",,,,0,,0,Greedy,1,0.000499952,,[]
35,"    private static URL downLoadZippedFile(URL url, File destDir) throws Exception {
        URLConnection urlConnection = url.openConnection();
        File tmpFile = null;
        try {
            tmpFile = File.createTempFile(""remoteLib_"", null);
            InputStream in = null;
            FileOutputStream out = null;
            try {
                in = urlConnection.getInputStream();
                out = new FileOutputStream(tmpFile);
                IOUtils.copy(in, out);
            } finally {
                if (out != null) {
                    out.close();
                }
                if (in != null) {
                    in.close();
                }
            }
            unzip(tmpFile, destDir);
        } finally {
            if (tmpFile != null) {
                tmpFile.delete();
            }
        }
        URL localURL = destDir.toURI().toURL();
        return localURL;
    }
 <SPLIT>     public boolean requestServerModifications(UUID sessionId, OutputStream out) throws SynchronizationException {
        HttpClient client = new SSLHttpClient();
        StringBuilder builder = new StringBuilder(url).append(""?"" + SESSION_PARAM + ""="" + sessionId).append(""&"" + CMD_PARAM + ""="" + CMD_SERVERMODIF);
        HttpGet method = httpGetMethod(builder.toString());
        try {
            HttpResponse response = client.execute(method);
            Header header = response.getFirstHeader(HEADER_NAME);
            if (header != null && HEADER_VALUE.equals(header.getValue())) {
                int code = response.getStatusLine().getStatusCode();
                if (code == HttpStatus.SC_OK) {
                    long expectedLength = response.getEntity().getContentLength();
                    InputStream is = response.getEntity().getContent();
                    FileUtils.writeInFile(is, out, expectedLength);
                    return true;
                } else {
                    throw new SynchronizationException(""Command 'receive' : HTTP error code returned."" + code, SynchronizationException.ERROR_RECEIVE);
                }
            } else {
                throw new SynchronizationException(""HTTP header is invalid"", SynchronizationException.ERROR_RECEIVE);
            }
        } catch (Exception e) {
            throw new SynchronizationException(""Command 'receive' -> "", e, SynchronizationException.ERROR_RECEIVE);
        }
    }
",155,,LABEL_0,LABEL_1,,-4,"downLoadZippedFile,url,destDir,urlConnection,tmpFile,in,out,localURL",,,,0,,0,Greedy,1,0.000444277,,[]
36,"    public void deleteObject(String id) throws SQLException {
        boolean selfConnection = true;
        Connection conn = null;
        PreparedStatement stmt = null;
        try {
            if (dbConnection == null) {
                DatabaseConn dbConn = new DatabaseConn();
                conn = dbConn.getConnection();
                conn.setAutoCommit(false);
            } else {
                conn = dbConnection;
                selfConnection = false;
            }
            stmt = conn.prepareStatement(this.deleteSql);
            stmt.setString(1, id);
            stmt.executeUpdate();
            if (selfConnection) conn.commit();
        } catch (Exception e) {
            if (selfConnection && conn != null) conn.rollback();
            throw new SQLException(e.getMessage());
        } finally {
            if (stmt != null) {
                stmt.close();
                stmt = null;
            }
            if (selfConnection && conn != null) {
                conn.close();
                conn = null;
            }
        }
    }
 <SPLIT>     public static void main(String[] args) {
        try {
            URL url = new URL(""http://hostname:80"");
            URLConnection conn = url.openConnection();
            for (int i = 0; ; i++) {
                String headerName = conn.getHeaderFieldKey(i);
                String headerValue = conn.getHeaderField(i);
                if (headerName == null && headerValue == null) {
                    break;
                }
                if (headerName == null) {
                }
            }
        } catch (Exception e) {
        }
    }
",181,,LABEL_0,LABEL_0,LABEL_0,-1,"deleteObject,id,conn,stmt,dbConn,selfConnection",,0,0,0,,0,GA,2777,0.417460295,failed,[]
37,"    static HashSet<Integer> readZoneIDs(String zoneFileName) {
        HashSet<Integer> zoneids = new HashSet<Integer>();
        try {
            URL url = zoneFileName.getClass().getResource(zoneFileName);
            LineNumberReader lnr = new LineNumberReader(new InputStreamReader(url.openStream()));
            String line = null;
            while ((line = lnr.readLine()) != null) zoneids.add(Integer.parseInt(line));
        } catch (Exception xc) {
            xc.printStackTrace();
        }
        return zoneids;
    }
 <SPLIT>     @Override
    public User saveUser(User user) {
        try {
            MessageDigest digest = java.security.MessageDigest.getInstance(""MD5"");
            digest.update(user.getPassword().getBytes(""UTF-8""));
            byte[] hash = digest.digest();
            BigInteger bigInt = new BigInteger(1, hash);
            String hashtext = bigInt.toString(16);
            while (hashtext.length() < 32) {
                hashtext = ""0"" + hashtext;
            }
            user.setPassword(hashtext);
            user.setDataRegjistrimit(new Date());
            return em.merge(user);
        } catch (Exception e) {
            throw new NestedException(e.getMessage(), e);
        }
    }
",108,,LABEL_0,LABEL_0,LABEL_0,-1,"readZoneIDs,zoneFileName,zoneids,url,lnr,line",,6,14,0,,0,GA,2331,0.345928041,failed,[';readZoneIDs = 0']
38,"    private byte[] scramble411(String password, String seed) {
        MessageDigest md;
        try {
            md = MessageDigest.getInstance(""SHA-1"");
            byte[] passwordHashStage1 = md.digest(password.getBytes());
            md.reset();
            byte[] passwordHashStage2 = md.digest(passwordHashStage1);
            md.reset();
            md.update(seed.getBytes());
            md.update(passwordHashStage2);
            byte[] toBeXord = md.digest();
            int numToXor = toBeXord.length;
            for (int i = 0; i < numToXor; i++) {
                toBeXord[i] = (byte) (toBeXord[i] ^ passwordHashStage1[i]);
            }
            return toBeXord;
        } catch (NoSuchAlgorithmException e) {
            if (logger.isLoggable(Level.SEVERE)) {
                logger.log(Level.SEVERE, e.getMessage(), e);
            }
        }
        return null;
    }
 <SPLIT>     private void downloadFiles() {
        SwingWorker<Double, RaphPhotoGalleryPhoto> downloadFilesWorker = new SwingWorker<Double, RaphPhotoGalleryPhoto>() {

            Date startDownloadDate;

            @Override
            public Double doInBackground() {
                startDownloadDate = new Date();
                refreshSpeed = 0;
                lastDate = null;
                try {
                    int totalSizeRead = 0;
                    int totalNumberRead = 0;
                    for (RaphPhotoGalleryPhoto photo : photoList) {
                        URL url = new URL(getCodeBase().toString() + photo.getUrl());
                        HttpURLConnection connection = (HttpURLConnection) url.openConnection();
                        DataInputStream dis = new DataInputStream(connection.getInputStream());
                        FileOutputStream fos = new FileOutputStream(destinationDirectory.toString() + ""/"" + photo.getFileName());
                        byte[] b = new byte[65536];
                        int sizeRead;
                        photo.setProcessedSize(0);
                        totalNumberRead++;
                        while ((sizeRead = dis.read(b)) > -1) {
                            fos.write(b, 0, sizeRead);
                            totalSizeRead += sizeRead;
                            photo.addToProcessedSize(sizeRead);
                            photo.setTotalProcessedSize(totalSizeRead);
                            photo.setTotalProcessedNumber(totalNumberRead);
                            publish(photo);
                            try {
                            } catch (Exception ignore) {
                            }
                        }
                        fos.close();
                    }
                } catch (MalformedURLException e1) {
                    System.err.println(""MalformedURLException: "" + e1);
                } catch (IOException e2) {
                    System.err.println(""IOException: "" + e2);
                }
                long totalDiffTime = (new Date()).getTime() - startDownloadDate.getTime();
                double totalSpeed = photoListTotalSize / (totalDiffTime / 1000);
                return new Double(totalSpeed);
            }

            @Override
            protected void process(List<RaphPhotoGalleryPhoto> list) {
                RaphPhotoGalleryPhoto photo = list.get(list.size() - 1);
                progressBarTotal.setMaximum(photoListTotalSize);
                progressBarTotal.setValue(photo.getTotalProcessedSize());
                setProgressBarTotalLabels(photo.getTotalProcessedNumber(), photoList.size(), photoListTotalSize - photo.getTotalProcessedSize());
                progressBarCurrent.setMaximum(photo.getFileSize());
                progressBarCurrent.setValue(photo.getProcessedSize());
                progressBarCurrentLabel.setText(photo.getFileName());
                long diffTime = 0;
                if (lastDate == null) lastDate = new Date();
                diffTime = (new Date()).getTime() - lastDate.getTime();
                if (diffTime > 1000) {
                    double currentSpeed = (photo.getTotalProcessedSize() - lastTotalSize) / (diffTime / 1000.0);
                    if (currentSpeed > 0) lastSpeed.add(new Double(currentSpeed));
                    if (lastSpeed.size() == 10) lastSpeed.removeFirst();
                    double speed = 0;
                    for (Double d : lastSpeed) {
                        speed += d.doubleValue();
                    }
                    speed = Math.round(speed / lastSpeed.size());
                    if (refreshSpeed == 0) {
                        long totalDiffTime = (new Date()).getTime() - startDownloadDate.getTime();
                        double totalSpeed = (photo.getTotalProcessedSize()) / (totalDiffTime / 1000.0);
                        remainingTime = (photoListTotalSize - photo.getTotalProcessedSize()) / totalSpeed;
                        if (remainingTime < 8) refreshSpeed = 0; else refreshSpeed = 3;
                    } else {
                        refreshSpeed--;
                        remainingTime -= diffTime / 1000.0;
                    }
                    speedLabel.setText(String.format(""%.0f"", speed / 1024) + "" "" + getParameter(""i18n_speedUnit"") + "" :  "" + String.format(""%.0f"", remainingTime) + "" s"");
                    lastDate = new Date();
                    lastTotalSize = photo.getTotalProcessedSize();
                }
            }

            @Override
            protected void done() {
                try {
                    speedLabel.setText(String.format(""%.0f"", get().doubleValue() / 1024) + "" "" + getParameter(""i18n_speedUnit""));
                    downloadButton.setText(getParameter(""i18n_finished""));
                    downloadState = 2;
                } catch (Exception ignore) {
                }
            }
        };
        downloadFilesWorker.execute();
    }
",187,,LABEL_0,LABEL_0,LABEL_0,-1,"scramble411,password,seed,md,passwordHashStage1,passwordHashStage2,toBeXord,numToXor,i",,6,23,0,,0,GA,3756,0.743145402,failed,"[';scramble411 = 0', ';print(scramble411)', ';path = 0', ';filename = 0', ';print(string)', ';name = 0']"
39,"    private void load() throws SQLException {
        Connection conn = null;
        Statement stmt = null;
        try {
            conn = FidoDataSource.getConnection();
            conn.setAutoCommit(false);
            stmt = conn.createStatement();
            ClearData.clearTables(stmt);
            stmt.executeUpdate(""insert into Objects (ObjectId, Description) values (100, 'Living Thing')"");
            stmt.executeUpdate(""insert into Objects (ObjectId, Description) values (200, 'Inanimate Object')"");
            stmt.executeUpdate(""insert into Objects (ObjectId, Description) values (300, 'Dog')"");
            stmt.executeUpdate(""insert into Objects (ObjectId, Description) values (400, 'Sheltie')"");
            stmt.executeUpdate(""insert into Objects (ObjectId, Description) values (500, 'Eskimo')"");
            stmt.executeUpdate(""insert into Objects (ObjectId, Description) values (600, 'Person')"");
            stmt.executeUpdate(""insert into Objects (ObjectId, Description) values (700, 'Collar')"");
            stmt.executeUpdate(""insert into Objects (ObjectId, Description) values (800, 'Ball')"");
            stmt.executeUpdate(""insert into Objects (ObjectId, Description) values (401, 'Fido')"");
            stmt.executeUpdate(""insert into Objects (ObjectId, Description) values (501, 'Samantha')"");
            stmt.executeUpdate(""insert into Objects (ObjectId, Description) values (801, 'A collar')"");
            stmt.executeQuery(""select setval('objects_objectid_seq', 1000)"");
            stmt.executeUpdate(""insert into ClassLinkTypes (LinkName, LinkType) values ('hasa', 2)"");
            stmt.executeUpdate(""insert into ClassLinkTypes (LinkName, LinkType) values ('partof', 2)"");
            stmt.executeUpdate(""insert into ObjectLinks (ObjectId, LinkName, LinkToObject) values (100, 'isa', 1)"");
            stmt.executeUpdate(""insert into ObjectLinks (ObjectId, LinkName, LinkToObject) values (200, 'isa', 1)"");
            stmt.executeUpdate(""insert into ObjectLinks (ObjectId, LinkName, LinkToObject) values (300, 'isa', 100)"");
            stmt.executeUpdate(""insert into ObjectLinks (ObjectId, LinkName, LinkToObject) values (400, 'isa', 300)"");
            stmt.executeUpdate(""insert into ObjectLinks (ObjectId, LinkName, LinkToObject) values (500, 'isa', 300)"");
            stmt.executeUpdate(""insert into ObjectLinks (ObjectId, LinkName, LinkToObject) values (600, 'isa', 100)"");
            stmt.executeUpdate(""insert into ObjectLinks (ObjectId, LinkName, LinkToObject) values (700, 'isa', 200)"");
            stmt.executeUpdate(""insert into ObjectLinks (ObjectId, LinkName, LinkToObject) values (800, 'isa', 200)"");
            stmt.executeUpdate(""insert into ObjectLinks (ObjectId, LinkName, LinkToObject) values (401, 'instance', 400)"");
            stmt.executeUpdate(""insert into ObjectLinks (ObjectId, LinkName, LinkToObject) values (501, 'instance', 500)"");
            stmt.executeUpdate(""insert into ObjectLinks (ObjectId, LinkName, LinkToObject) values (801, 'instance', 800)"");
            stmt.executeUpdate(""insert into ObjectLinks (ObjectId, LinkName, LinkToObject) values (401, 'hasa', 801)"");
            stmt.executeUpdate(""insert into AttributeCategories (CategoryName) values ('color')"");
            stmt.executeUpdate(""insert into AttributeCategories (CategoryName) values ('weight')"");
            stmt.executeUpdate(""insert into AttributeCategories (CategoryName) values ('length')"");
            stmt.executeUpdate(""insert into Attributes (AttributeName, Category) values ('green', 'color')"");
            stmt.executeUpdate(""insert into Attributes (AttributeName, Category) values ('blue', 'color')"");
            stmt.executeUpdate(""insert into Attributes (AttributeName, Category) values ('light', 'weight')"");
            stmt.executeUpdate(""insert into Attributes (AttributeName, Category) values ('heavy', 'weight')"");
            stmt.executeUpdate(""insert into Attributes (AttributeName, Category) values ('short', 'length')"");
            stmt.executeUpdate(""insert into Attributes (AttributeName, Category) values ('long', 'length')"");
            stmt.executeUpdate(""insert into ObjectAttributes (ObjectId, AttributeName) values (401, 'light')"");
            stmt.executeUpdate(""insert into ObjectAttributes (ObjectId, AttributeName) values (401, 'short')"");
            stmt.executeUpdate(""insert into ObjectAttributes (ObjectId, AttributeName) values (801, 'blue')"");
            stmt.executeUpdate(""insert into Dictionary (Word, SenseNumber, GrammarString, ObjectId) values ('LEFT-WALL', '1', 'AV+ | NP+', 1)"");
            stmt.executeUpdate(""insert into Dictionary (Word, SenseNumber, GrammarString, ObjectId) values ('the', '1', 'D+', 1)"");
            stmt.executeUpdate(""insert into Dictionary (Word, SenseNumber, GrammarString, ObjectId) values ('big', '1', 'ADJ+', 400)"");
            stmt.executeUpdate(""insert into Dictionary (Word, SenseNumber, GrammarString, ObjectId) values ('dog', '1', '[@ADJ-] & [D-] & (S+ | DO- | PO- | NP-)', 700)"");
            stmt.executeUpdate(""insert into Dictionary (Word, SenseNumber, GrammarString, ObjectId) values ('run', '1', '[S-] & AV- & [PREP+]', 800)"");
            stmt.executeUpdate(""insert into Dictionary (Word, SenseNumber, GrammarString, ObjectId) values ('across', '1', 'PREP- & PO+', 800)"");
            stmt.executeUpdate(""insert into Dictionary (Word, SenseNumber, GrammarString, ObjectId) values ('street', '1', '[@ADJ-] & [D-] & (S+ | DO- | PO- | NP-)', 800)"");
            stmt.executeUpdate(""insert into AdjectivePrepositions (PrepositionName, ObjectId, LinkName) values ('with', 100, 'hasa')"");
            stmt.executeUpdate(""insert into AdjectivePrepositions (PrepositionName, ObjectId, LinkName) values ('in', 200, 'partof')"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'superlative', 1, 'good', 'best', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'superlative', 2, '*y', '*iest', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'superlative', 3, '*e', '*est', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'superlative', 4, '*', '*est', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'comparative', 1, 'good', 'better', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'comparative', 2, '*y', '*ier', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'comparative', 3, '*e', '*er', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'comparative', 4, '*', '*er', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'possessive', 1, '*s', '*s\\'', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'possessive', 2, '*', '*\\'s', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'present perfect', 1, 'be', 'being', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'present perfect', 2, '*Vy', '*Vying', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'present perfect', 3, '*c', '*cking', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'present perfect', 4, '*VVC', '*VVCing', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'present perfect', 5, '*VC', '*VCCing', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'present perfect', 6, '*ie', '*ying', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'present perfect', 7, '*e', '*ing', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'present perfect', 8, '*', '*ing', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past', 1, 'sing', 'sang', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past', 2, 'give', 'gave', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past', 3, 'swim', 'swam', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past', 4, 'have', 'had', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past', 5, 'run', 'ran', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past', 6, 'do', 'did', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past', 7, 'be', 'was', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past', 8, 'throw', 'threw', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past', 9, 'sleep', 'slept', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past', 10, '*c', '*cked', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past', 11, '*VVC', '*VVCed', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past', 12, '*VC', '*VCCed', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past', 13, '*y', '*ied', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past', 14, '*oe', '*oed', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past', 15, '*e', '*ed', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past', 16, '*', '*ed', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past perfect', 1, 'sing', 'sung', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past perfect', 2, 'give', 'given', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past perfect', 3, 'swim', 'swum', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past perfect', 4, 'have', 'had', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past perfect', 5, 'do', 'done', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past perfect', 6, 'be', 'been', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past perfect', 7, 'sleep', 'slept', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past perfect', 8, '*e', '*ed', FALSE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past perfect', 9, '*', '*ed', FALSE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'first singular', 1, 'be', 'am', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'first singular', 2, 'have', 'have', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'first singular', 3, '*', '*', FALSE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'second singular', 1, 'be', 'are', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'second singular', 2, 'have', 'have', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'second singular', 3, '*', '*', FALSE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'third singular', 1, 'be', 'is', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'third singular', 2, 'have', 'has', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'third singular', 3, 'do', 'do', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'third singular', 4, '*ch', '*ches', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'third singular', 5, '*sh', '*shes', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'third singular', 6, '*x', '*xes', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'third singular', 7, '*z', '*zes', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'third singular', 8, '*Cy', '*Cies', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'third singular', 9, '*s', '*ses', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'third singular', 10, '*o', '*oes', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'third singular', 11, '*', '*s', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'first plural', 1, 'be', 'are', FALSE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'first plural', 2, 'have', 'have', FALSE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'first plural', 3, '*', '*', FALSE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'third plural', 1, 'be', 'are', FALSE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'third plural', 2, 'have', 'have', FALSE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'third plural', 3, '*', '*', FALSE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'plural', 1, 'leaf', 'leaves', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'plural', 2, 'knife', 'knives', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'plural', 3, 'elf', 'elves', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'plural', 4, 'half', 'halves', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'plural', 5, 'loaf', 'loaves', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'plural', 6, 'shelf', 'shelves', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'plural', 7, 'wife', 'wives', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'plural', 8, 'person', 'people', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'plural', 9, 'deer', 'deer', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'plural', 10, 'child', 'children', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'plural', 11, '*Co', '*Coes', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'plural', 12, '*s', '*ses', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'plural', 13, '*ch', '*ches', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'plural', 14, '*sh', '*shes', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'plural', 15, '*x', '*xes', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'plural', 16, '*z', '*zes', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'plural', 17, '*Cy', '*Cies', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'plural', 18, '*', '*s', TRUE)"");
            stmt.executeUpdate(""insert into WordClassifications (Rank, Pattern, GrammarString, ObjectId, Description) values (1, '$N[.N]', 'D+', 100, 'money')"");
            stmt.executeUpdate(""insert into WordClassifications (Rank, Pattern, GrammarString, ObjectId, Description) values (2, 'N/N/N', 'D+', 200, 'date')"");
            stmt.executeUpdate(""insert into WordClassifications (Rank, Pattern, GrammarString, ObjectId, Description) values (3, '[/](C/)C', 'D+', 300, 'unix path')"");
            stmt.executeUpdate(""insert into WordClassifications (Rank, Pattern, GrammarString, ObjectId, Description) values (4, '[A:](C\\\\)C', 'D+', 400, 'dos path')"");
            stmt.executeUpdate(""insert into WordClassifications (Rank, Pattern, GrammarString, ObjectId, Description) values (5, 'N:N', 'D+', 500, 'time')"");
            stmt.executeUpdate(""insert into WordClassifications (Rank, Pattern, GrammarString, ObjectId, Description) values (6, 'N.N.N.N', 'D+', 600, 'internet')"");
            stmt.executeUpdate(""insert into WordClassifications (Rank, Pattern, GrammarString, ObjectId, Description) values (7, 'E(.E)', 'D+', 700, 'hostname')"");
            stmt.executeUpdate(""insert into WordClassifications (Rank, Pattern, GrammarString, ObjectId, Description) values (8, '{+-}N[.N]', 'D+', 800, 'number')"");
            stmt.executeUpdate(""insert into Pronouns (Pronoun, Person, Gender, Plural) values ('i', 1, 3, FALSE)"");
            stmt.executeUpdate(""insert into Pronouns (Pronoun, Person, Gender, Plural) values ('we', 1, 3, TRUE)"");
            stmt.executeUpdate(""insert into Pronouns (Pronoun, Person, Gender, Plural) values ('they', 3, 3, TRUE)"");
            stmt.executeUpdate(""insert into Pronouns (Pronoun, Person, Gender, Plural) values ('he', 3, 1, FALSE)"");
            stmt.executeUpdate(""insert into Pronouns (Pronoun, Person, Gender, Plural) values ('she', 3, 2, FALSE)"");
            stmt.executeUpdate(""insert into Pronouns (Pronoun, Person, Gender, Plural) values ('it', 3, 3, FALSE)"");
            stmt.executeUpdate(""insert into Pronouns (Pronoun, Person, Gender, Plural) values ('you', 2, 3, FALSE)"");
            stmt.executeUpdate(""insert into FrameSlots (SlotName) values ('actor')"");
            stmt.executeUpdate(""insert into FrameSlots (SlotName) values ('origin')"");
            stmt.executeUpdate(""insert into FrameSlots (SlotName) values ('destination')"");
            stmt.executeUpdate(""insert into FrameSlots (SlotName) values ('object')"");
            stmt.executeUpdate(""insert into FrameSlots (SlotName) values ('instrument')"");
            stmt.executeUpdate(""insert into FrameSlots (SlotName) values ('beneficiary')"");
            stmt.executeUpdate(""insert into FrameSlots (SlotName) values ('location')"");
            stmt.executeUpdate(""insert into Verbs (VerbName, SubjectSlot, IndirectObjectSlot, PredicateNounSlot) values ('throw', 'actor', 'destination', 'object')"");
            stmt.executeUpdate(""insert into Verbs (VerbName, SubjectSlot, IndirectObjectSlot, PredicateNounSlot) values ('melt', 'actor', '', '')"");
            stmt.executeUpdate(""insert into Verbs (VerbName, SubjectSlot, IndirectObjectSlot, PredicateNounSlot) values ('kill', 'actor', '', 'object')"");
            stmt.executeUpdate(""insert into AdverbPrepositions (PrepositionName, ObjectId, FrameSlot) values ('with', 200, 'instrument')"");
            stmt.executeUpdate(""insert into AdverbPrepositions (PrepositionName, ObjectId, FrameSlot) values ('at', 1, 'location')"");
            stmt.executeUpdate(""insert into Articles (ArticleName, Dereference) values ('the', 1)"");
            stmt.executeUpdate(""insert into Articles (ArticleName, Dereference) values ('a', 2)"");
            stmt.executeUpdate(""insert into Articles (ArticleName, Dereference) values ('an', 2)"");
            stmt.executeUpdate(""insert into GrammarLinks (LinkName, LinkType) values ('S', 1)"");
            stmt.executeUpdate(""insert into GrammarLinks (LinkName, LinkType) values ('PN', 2)"");
            stmt.executeUpdate(""insert into GrammarLinks (LinkName, LinkType) values ('DO', 3)"");
            stmt.executeUpdate(""insert into GrammarLinks (LinkName, LinkType) values ('IO', 4)"");
            stmt.executeUpdate(""insert into GrammarLinks (LinkName, LinkType) values ('PO', 5)"");
            stmt.executeUpdate(""insert into GrammarLinks (LinkName, LinkType) values ('NP', 6)"");
            stmt.executeUpdate(""insert into GrammarLinks (LinkName, LinkType) values ('AV', 7)"");
            stmt.executeUpdate(""insert into GrammarLinks (LinkName, LinkType) values ('LV', 8)"");
            stmt.executeUpdate(""insert into GrammarLinks (LinkName, LinkType) values ('PREP', 9)"");
            stmt.executeUpdate(""insert into GrammarLinks (LinkName, LinkType) values ('D', 10)"");
            stmt.executeUpdate(""insert into GrammarLinks (LinkName, LinkType) values ('ADJ', 11)"");
            stmt.executeUpdate(""insert into GrammarLinks (LinkName, LinkType) values ('ADV', 12)"");
            stmt.executeUpdate(""insert into GrammarLinks (LinkName, LinkType) values ('CONJ', 13)"");
            stmt.executeUpdate(""insert into GrammarLinks (LinkName, LinkType) values ('INTJ', 14)"");
            stmt.executeUpdate(""insert into GrammarLinks (LinkName, LinkType) values ('PA', 15)"");
            stmt.executeUpdate(""insert into GrammarLinks (LinkName, LinkType) values ('HV', 16)"");
            stmt.executeQuery(""select setval('instructions_instructionid_seq', 1)"");
            int next = 2;
            stmt.executeUpdate(""insert into Instructions (Type, ExecuteString, FrameSlot, Operator, LinkName, ObjectId, AttributeName) "" + ""values (3, 'throw', null, 0, null, null, null)"");
            stmt.executeUpdate(""insert into Instructions (Type, ExecuteString, FrameSlot, Operator, LinkName, ObjectId, AttributeName) "" + ""values (3, 'test', null, 0, null, null, null)"");
            stmt.executeUpdate(""insert into Instructions (Type, ExecuteString, FrameSlot, Operator, LinkName, ObjectId, AttributeName) "" + ""values (2, null, 'actor', 1, 'hasa', '300', '')"");
            stmt.executeUpdate(""insert into Instructions (Type, ExecuteString, FrameSlot, Operator, LinkName, ObjectId, AttributeName) "" + ""values (2, null, 'instrument', 3, null, null, 'blue')"");
            stmt.executeUpdate(""insert into Instructions (Type, ExecuteString, FrameSlot, Operator, LinkName, ObjectId, AttributeName) "" + ""values (1, null, null, 0, null, null, null)"");
            stmt.executeUpdate(""insert into Instructions (Type, ExecuteString, FrameSlot, Operator, LinkName, ObjectId, AttributeName) "" + ""values (3, 'get', null, 0, null, null, null)"");
            stmt.executeUpdate(""insert into Instructions (Type, ExecuteString, FrameSlot, Operator, LinkName, ObjectId, AttributeName) "" + ""values (3, 'drop', null, 0, null, null, null)"");
            stmt.executeUpdate(""insert into InstructionGroups (InstructionId, Rank, GroupInstruction) values ("" + (next + 2) + "", 1, "" + (next + 0) + "")"");
            stmt.executeUpdate(""insert into InstructionGroups (InstructionId, Rank, GroupInstruction) values ("" + (next + 2) + "", 2, "" + (next + 1) + "")"");
            stmt.executeUpdate(""insert into InstructionGroups (InstructionId, Rank, GroupInstruction) values ("" + (next + 3) + "", 1, "" + (next + 1) + "")"");
            stmt.executeUpdate(""insert into InstructionGroups (InstructionId, Rank, GroupInstruction) values ("" + (next + 3) + "", 2, "" + (next + 0) + "")"");
            stmt.executeUpdate(""insert into InstructionGroups (InstructionId, Rank, GroupInstruction) values ("" + (next + 4) + "", 1, "" + (next + 2) + "")"");
            stmt.executeUpdate(""insert into InstructionGroups (InstructionId, Rank, GroupInstruction) values ("" + (next + 4) + "", 2, "" + (next + 3) + "")"");
            stmt.executeQuery(""select setval('transactions_transactionid_seq', 1)"");
            stmt.executeUpdate(""insert into Transactions (InstructionId, Description) values ("" + (next + 4) + "", 'throw something')"");
            stmt.executeUpdate(""insert into Transactions (InstructionId, Description) values ("" + (next + 5) + "", 'get something')"");
            stmt.executeUpdate(""insert into Transactions (InstructionId, Description) values ("" + (next + 6) + "", 'drop something')"");
            stmt.executeUpdate(""insert into TransactionPreconditions (TransactionId, IfFrameSlot, Operator, LinkName, LinkFrameSlot, AttributeName, SatisfyTransactionId) "" + ""values (2, 'actor', 1, 'hasa', 'object', '', 3)"");
            stmt.executeUpdate(""insert into TransactionPreconditions (TransactionId, IfFrameSlot, Operator, LinkName, LinkFrameSlot, AttributeName, SatisfyTransactionId) "" + ""values (2, 'object', 4, '', '', 'heavy', 4)"");
            stmt.executeUpdate(""insert into TransactionSlots (TransactionId, FrameSlot, InstructionId) values (2, 'object', "" + (next + 6) + "")"");
            stmt.executeUpdate(""insert into TransactionSlots (TransactionId, FrameSlot, InstructionId) values (2, 'destination', "" + (next + 5) + "")"");
            stmt.executeQuery(""select setval('verbtransactions_verbid_seq', 1)"");
            stmt.executeUpdate(""insert into VerbTransactions (VerbString, MoodType, TransactionId) values ('throw', 2, 2)"");
            stmt.executeUpdate(""insert into VerbConstraints (VerbId, FrameSlot, ObjectId) values (2, 'object', 200)"");
            stmt.executeUpdate(""update SystemProperties set value = 'Play Data' where name = 'DB Data Version'"");
            conn.commit();
        } catch (SQLException e) {
            if (conn != null) conn.rollback();
            throw e;
        } finally {
            if (stmt != null) stmt.close();
            if (conn != null) conn.close();
        }
    }
 <SPLIT>     public static Multimap<String, String> getProteins(final Set<String> queries, final int taxon) throws ParserConfigurationException, XPathExpressionException {
        final DocumentBuilder parser = DocumentBuilderFactory.newInstance().newDocumentBuilder();
        final XPathExpression xpe = XPathFactory.newInstance().newXPath().compile(__xpath);
        final Multimap<String, String> proteins = HashMultimap.create();
        for (final String query : queries) {
            HttpURLConnection connection = null;
            try {
                final String encoded = URLEncoder.encode(query.trim(), ""UTF-8"");
                final URL url = new URL(String.format(__urlTempl2, encoded, taxon));
                connection = (HttpURLConnection) url.openConnection();
                connection.setConnectTimeout(__connTimeout);
                connection.setReadTimeout(__readTimeout);
                connection.setRequestProperty(""Connection"", ""close"");
                connection.connect();
                final InputStream stream = connection.getInputStream();
                final Document doc = parser.parse(stream);
                final NodeList nodes = (NodeList) xpe.evaluate(doc, XPathConstants.NODESET);
                if (nodes != null) {
                    final int n = nodes.getLength();
                    for (int i = 0; i < n; i++) {
                        final Node node = nodes.item(i);
                        proteins.put(node.getTextContent().trim(), query.trim());
                    }
                }
            } catch (final Exception ex) {
                continue;
            } finally {
                if (connection != null) connection.disconnect();
            }
        }
        return proteins;
    }
",2154,,LABEL_0,LABEL_0,LABEL_0,-1,"load,conn,stmt",,2,209,0,,0,GA,2065,1.647190094,failed,[]
40,"    public void executeUpdateTransaction(List queries) throws SQLException {
        assert connection != null;
        boolean autoCommit = connection.getAutoCommit();
        connection.setAutoCommit(false);
        try {
            Iterator iterator = queries.iterator();
            while (iterator.hasNext()) {
                String query = (String) iterator.next();
                Statement statement = connection.createStatement();
                statement.executeUpdate(query);
            }
            connection.commit();
            connection.setAutoCommit(autoCommit);
        } catch (SQLException e) {
            connection.rollback();
            throw new SQLException(e.getMessage());
        }
    }
 <SPLIT>     public boolean visar() throws SQLException, ClassNotFoundException, Exception {
        Connection conn = null;
        PreparedStatement ps = null;
        Date fechaSystem = new Date();
        DateFormat aaaammdd = new SimpleDateFormat(""yyyyMMdd"");
        DateFormat hhmmss = new SimpleDateFormat(""HHmmss"");
        DateFormat sss = new SimpleDateFormat(""S"");
        String ss = sss.format(fechaSystem);
        if (ss.length() > 2) {
            ss = ss.substring(0, 2);
        }
        boolean visado = false;
        try {
            conn = ToolsBD.getConn();
            conn.setAutoCommit(false);
            String sentenciaSql = ""UPDATE BZMODIF SET FZJCUSVI=?, FZJFVISA=?, FZJHVISA=?"" + ((hayVisadoExtracto) ? "", FZJIEXTR=?"" : """") + ((hayVisadoRemitente) ? "", FZJIREMI=?"" : """") + "" WHERE FZJCENSA='S' AND FZJCAGCO=? AND FZJNUMEN=? AND FZJANOEN=? AND FZJFMODI=? AND FZJHMODI=?"";
            ps = conn.prepareStatement(sentenciaSql);
            ps.setString(1, usuarioVisado);
            ps.setInt(2, Integer.parseInt(aaaammdd.format(fechaSystem)));
            ps.setInt(3, Integer.parseInt(hhmmss.format(fechaSystem) + ss));
            int contador = 4;
            if (hayVisadoExtracto) {
                ps.setString(contador++, ""X"");
            }
            if (hayVisadoRemitente) {
                ps.setString(contador++, ""X"");
            }
            ps.setInt(contador++, oficina);
            ps.setInt(contador++, numeroRegistro);
            ps.setInt(contador++, anoSalida);
            ps.setString(contador++, fechaModificacion);
            ps.setString(contador++, horaModificacion);
            int registrosAfectados = ps.executeUpdate();
            if (registrosAfectados > 0 && !hayVisadoExtracto && !hayVisadoRemitente) {
                visado = true;
            }
            if (registrosAfectados > 0 && (hayVisadoExtracto || hayVisadoRemitente)) {
                boolean generado = generarBZVISAD(conn, Integer.parseInt(aaaammdd.format(fechaSystem)), Integer.parseInt(hhmmss.format(fechaSystem) + ss));
                if (generado) {
                    visado = actualizarBZSALIDA(conn);
                }
                String rem = """";
                String com = """";
                if (hayVisadoRemitente) {
                    if (!remitente.trim().equals("""")) {
                        rem = remitente;
                    } else {
                        javax.naming.InitialContext contexto = new javax.naming.InitialContext();
                        Object ref = contexto.lookup(""es.caib.regweb.ValoresHome"");
                        ValoresHome home = (ValoresHome) javax.rmi.PortableRemoteObject.narrow(ref, ValoresHome.class);
                        Valores valor = home.create();
                        rem = valor.recuperaRemitenteCastellano(entidad1, entidad2 + """");
                        valor.remove();
                    }
                } else {
                    if (!altres.trim().equals("""")) {
                        rem = remitente;
                    } else {
                        javax.naming.InitialContext contexto = new javax.naming.InitialContext();
                        Object ref = contexto.lookup(""es.caib.regweb.ValoresHome"");
                        ValoresHome home = (ValoresHome) javax.rmi.PortableRemoteObject.narrow(ref, ValoresHome.class);
                        Valores valor = home.create();
                        rem = valor.recuperaRemitenteCastellano(entidad1Old, entidad2Old + """");
                        valor.remove();
                    }
                }
                if (hayVisadoExtracto) {
                    com = extracto;
                } else {
                    com = comentario;
                }
                try {
                    Class t = Class.forName(""es.caib.regweb.module.PluginHook"");
                    Class[] partypes = { String.class, Integer.class, Integer.class, Integer.class, Integer.class, String.class, String.class, String.class, Integer.class, Integer.class, String.class, Integer.class, String.class };
                    Object[] params = { ""V"", new Integer(anoSalida), new Integer(numeroRegistro), new Integer(oficina), new Integer(fechaDocumento), rem, com, tipoDocumento, new Integer(fechaRegistro), new Integer(fzacagge), fora, new Integer(destinatario), idioma };
                    java.lang.reflect.Method metodo = t.getMethod(""salida"", partypes);
                    metodo.invoke(null, params);
                } catch (IllegalAccessException iae) {
                } catch (IllegalArgumentException iae) {
                } catch (InvocationTargetException ite) {
                } catch (NullPointerException npe) {
                } catch (ExceptionInInitializerError eiie) {
                } catch (NoSuchMethodException nsme) {
                } catch (SecurityException se) {
                } catch (LinkageError le) {
                } catch (ClassNotFoundException le) {
                }
            }
            conn.commit();
            int fzahsis = Integer.parseInt(hhmmss.format(fechaSystem) + ss);
            String Stringsss = sss.format(fechaSystem);
            switch(Stringsss.length()) {
                case (1):
                    Stringsss = ""00"" + Stringsss;
                    break;
                case (2):
                    Stringsss = ""0"" + Stringsss;
                    break;
            }
            int horamili = Integer.parseInt(hhmmss.format(fechaSystem) + Stringsss);
            int fzafsis = Integer.parseInt(aaaammdd.format(fechaSystem));
            logLopdBZMODIF(""UPDATE"", sessioEjb.getCallerPrincipal().getName().toUpperCase(), fzafsis, horamili, 'S', numeroRegistro, anoSalida, oficina, Integer.parseInt(fechaModificacion), Integer.parseInt(horaModificacion));
        } catch (Exception e) {
            System.out.println(""Error: "" + e.getMessage());
            e.printStackTrace();
            visado = false;
            try {
                if (conn != null) conn.rollback(); else System.out.println(""ERROR: No es pot fer rollback sense connexió!"");
            } catch (Exception ex) {
                System.out.println(""Error: "" + e.getMessage());
                ex.printStackTrace();
            }
        } finally {
            ToolsBD.closeConn(conn, ps, null);
        }
        return visado;
    }
",120,,LABEL_1,LABEL_1,LABEL_1,-1,"executeUpdateTransaction,queries,autoCommit,iterator,query,statement",,6,13,0,,0,GA,2552,0.541656625,failed,"[';executeUpdateTransaction = 0', ';queries = 0', ';autoCommit = 0']"
41,"    private int addIDs(PeakListRow row, String name) {
        {
            BufferedReader in = null;
            try {
                String urlName = ""http://gmd.mpimp-golm.mpg.de/search.aspx?query="" + name;
                URL url = new URL(urlName);
                in = new BufferedReader(new InputStreamReader(url.openStream()));
                String inputLine, score = ""0"";
                while ((inputLine = in.readLine()) != null) {
                    String metaboliteID = """";
                    if (inputLine.contains(""href=\""Metabolites/"")) {
                        String[] dataScore = inputLine.split(""</td><td>"");
                        score = dataScore[0].substring(dataScore[0].indexOf(""<td>"") + 4);
                        metaboliteID = inputLine.substring(inputLine.indexOf(""href=\""Metabolites/"") + 18, inputLine.indexOf(""aspx\"">"") + 4);
                        urlName = ""http://gmd.mpimp-golm.mpg.de/Metabolites/"" + metaboliteID;
                        inputLine = in.readLine();
                        inputLine = in.readLine();
                        String[] data = inputLine.split(""</td><td>"");
                        String molecularWeight = data[data.length - 1].replaceAll(""&nbsp;"", """");
                        row.setVar(GCGCColumnName.MOLWEIGHT.getSetFunctionName(), molecularWeight);
                        break;
                    } else if (inputLine.contains(""href=\""Analytes/"")) {
                        String[] dataScore = inputLine.split(""</td><td>"");
                        score = dataScore[0].substring(dataScore[0].indexOf(""<td>"") + 4);
                        metaboliteID = inputLine.substring(inputLine.indexOf(""href=\""Analytes/"") + 15, inputLine.indexOf(""aspx\"">"") + 4);
                        urlName = ""http://gmd.mpimp-golm.mpg.de/Analytes/"" + metaboliteID;
                        inputLine = in.readLine();
                        inputLine = in.readLine();
                        String[] data = inputLine.split(""</td><td>"");
                        String molecularWeight = data[data.length - 1].replaceAll(""&nbsp;"", """");
                        row.setVar(GCGCColumnName.MOLWEIGHT.getSetFunctionName(), molecularWeight);
                        break;
                    } else if (inputLine.contains(""href=\""ReferenceSubstances/"")) {
                        String[] dataScore = inputLine.split(""</td><td>"");
                        score = dataScore[0].substring(dataScore[0].indexOf(""<td>"") + 4);
                        metaboliteID = inputLine.substring(inputLine.indexOf(""href=\""ReferenceSubstances/"") + 26, inputLine.indexOf(""aspx\"">"") + 4);
                        urlName = ""http://gmd.mpimp-golm.mpg.de/ReferenceSubstances/"" + metaboliteID;
                        inputLine = in.readLine();
                        inputLine = in.readLine();
                        String[] data = inputLine.split(""</td><td>"");
                        String molecularWeight = data[data.length - 1].replaceAll(""&nbsp;"", """");
                        row.setVar(GCGCColumnName.MOLWEIGHT.getSetFunctionName(), molecularWeight);
                        break;
                    }
                }
                in.close();
                urlName = searchMetabolite(urlName);
                if (urlName != null && urlName.contains("".aspx"")) {
                    url = new URL(urlName);
                    in = new BufferedReader(new InputStreamReader(url.openStream()));
                    while ((inputLine = in.readLine()) != null) {
                        if (inputLine.contains(""<meta http-equiv=\""keywords\"" content="")) {
                            String line = inputLine.substring(inputLine.indexOf(""<meta http-equiv=\""keywords\"" content="") + 37, inputLine.indexOf(""\"" /></head>""));
                            String[] names = line.split("", "");
                            for (String id : names) {
                                if (id.contains(""PubChem"")) {
                                    id = id.substring(id.indexOf(""PubChem"") + 8);
                                    String pubChem = (String) row.getVar(GCGCColumnName.PUBCHEM.getGetFunctionName());
                                    if (pubChem.length() == 0) {
                                        pubChem += id;
                                    } else {
                                        pubChem += "", "" + id;
                                    }
                                    row.setVar(GCGCColumnName.PUBCHEM.getSetFunctionName(), pubChem);
                                } else if (id.contains(""ChEBI"")) {
                                    id = id.substring(id.indexOf(""ChEBI:"") + 6);
                                    row.setVar(GCGCColumnName.ChEBI.getSetFunctionName(), id);
                                } else if (id.contains(""KEGG"")) {
                                    id = id.substring(id.indexOf(""KEGG:"") + 6);
                                    row.setVar(GCGCColumnName.KEGG.getSetFunctionName(), id);
                                } else if (id.contains(""CAS"")) {
                                    id = id.substring(id.indexOf(""CAS:"") + 5);
                                    row.setVar(GCGCColumnName.CAS2.getSetFunctionName(), id);
                                } else if (id.contains(""ChemSpider"") || id.contains(""MAPMAN"") || id.contains(""Beilstein:"")) {
                                } else {
                                    String synonym = (String) row.getVar(GCGCColumnName.SYNONYM.getGetFunctionName());
                                    if (synonym.length() == 0) {
                                        synonym += id;
                                    } else {
                                        synonym += "" // "" + id;
                                    }
                                    synonym = synonym.replaceAll(""&amp;#39;"", ""'"");
                                    row.setVar(GCGCColumnName.SYNONYM.getSetFunctionName(), synonym);
                                }
                            }
                            break;
                        }
                    }
                    in.close();
                }
                return Integer.parseInt(score);
            } catch (IOException ex) {
                Logger.getLogger(GetGolmIDsTask.class.getName()).log(Level.SEVERE, null, ex);
                return 0;
            }
        }
    }
 <SPLIT>     public static void main(String[] args) throws IOException {
        String urltext = ""http://www.vogella.de"";
        URL url = new URL(urltext);
        BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));
        String inputLine;
        while ((inputLine = in.readLine()) != null) {
            System.out.println(inputLine);
        }
        in.close();
    }
",1116,,LABEL_1,LABEL_0,,-4,"addIDs,row,name,in,urlName,url,inputLine,score,metaboliteID,dataScore,data,molecularWeight",,,,0,,0,Greedy,1,0.001242383,,[]
42,"    public int run(String[] args) throws Exception {
        if (args.length < 2) {
            System.err.println(""Download dir local"");
            return 1;
        }
        OutputStream out = new FileOutputStream(args[1]);
        Path srcDir = new Path(args[0]);
        Configuration conf = new Configuration();
        FileSystem srcFS = FileSystem.get(conf);
        if (!srcFS.getFileStatus(srcDir).isDirectory()) {
            System.err.println(args[0] + "" is not a directory."");
            return 1;
        }
        try {
            FileStatus contents[] = srcFS.listStatus(srcDir);
            for (int i = 0; i < contents.length; i++) {
                if (contents[i].isFile()) {
                    System.err.println(contents[i].getPath());
                    InputStream in = srcFS.open(contents[i].getPath());
                    try {
                        IOUtils.copyBytes(in, out, conf, false);
                    } finally {
                        in.close();
                    }
                }
            }
        } finally {
            out.close();
        }
        return 0;
    }
 <SPLIT>     public static void main(String[] args) {
        String logFileName = args[0];
        int extractLineEvery = new Integer(args[1]).intValue();
        String filterToken = ""P0"";
        if (args.length > 2) {
            filterToken = args[2];
        }
        try {
            BufferedReader br = new BufferedReader(new FileReader(logFileName));
            BufferedWriter bw = new BufferedWriter(new FileWriter(new File(logFileName + "".trim"")));
            String readLine;
            int x = 0;
            while ((readLine = br.readLine()) != null) {
                if ((x++ % extractLineEvery == 0) && readLine.startsWith(filterToken)) {
                    bw.write(readLine + ""\n"");
                }
            }
            bw.flush();
            bw.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
",231,"    public int  call(String[] args) throws Exception {
        if (args.length < 2) {
            System.err.println(""Download dir local"");
            return 1;
        }
        OutputStream url = new FileOutputStream(args[1]);
        Path srcDirectory = new Path(args[0]);
        Configuration url = new Configuration();
        FileSystem rcfs = FileSystem.get(url);
        if (!srcFS.getFileStatus(srcDirectory).isDirectory()) {
            System.err.println(args[0] + "" is not a directory."");
            return 1;
        }
        try {
            FileStatus CONTent[] = rcfs.listStatus(srcDirectory);
            for (int p = 0; p < CONTent.length; p++) {
                if (CONTent[p].isFile()) {
                    System.err.println(CONTent[p].getPath());
                    InputStream stream = rcfs.open(CONTent[p].getPath());
                    try {
                        IOUtils.copyBytes(stream, url, url, false);
                    } finally {
                        stream.close();
                    }
                }
            }
        } finally {
            url.close();
        }
        return 0;
    }
;out = 0;print(out);exec = 0; cmd = 0; exec = 0;start = 0;print(start);cmd = 0;url = 0;result = 0;cl = 0;conn = 0",LABEL_1,LABEL_1,LABEL_1,1,"run,out,srcDir,conf,srcFS,contents,i,in","run:-0.00023889541625976562,out:0.0026670098304748535,srcDir:-0.0076315999031066895,conf:0.004632234573364258,srcFS:-0.0028012990951538086,contents:0.0016134381294250488,i:-0.00023621320724487305,in:0.0015564560890197754,",8,28,0,"conf:url,out:url,contents:CONTent,in:stream,i:p,run: call,srcFS:rcfs,srcDir:srcDirectory,",0,Greedy,454,0.073757565,inesrt,"[';out = 0', ';print(out)', ';exec = 0', '; cmd = 0', '; exec = 0', ';start = 0', ';print(start)', ';cmd = 0', ';url = 0', ';result = 0', ';cl = 0', ';conn = 0']"
43,"        private void copy(File inputFile, File outputFile) throws Exception {
            FileReader in = new FileReader(inputFile);
            FileWriter out = new FileWriter(outputFile);
            int c;
            while ((c = in.read()) != -1) out.write(c);
            in.close();
            out.close();
        }
 <SPLIT>     public WebmillDeploy(String inputName, String outputName, boolean stripLoggers) throws Exception {
        File tempFile = null;
        JarFile jin = null;
        JarOutputStream jout = null;
        FileChannel srcChannel = null;
        FileChannel dstChannel = null;
        try {
            String portletApplicationName = getPortletApplicationName(outputName);
            System.out.println(""portletApplicationName = "" + portletApplicationName);
            tempFile = File.createTempFile(""webmill-delpoy-"", """");
            tempFile.deleteOnExit();
            jin = new JarFile(inputName);
            jout = new JarOutputStream(new FileOutputStream(tempFile));
            Document webXml = null;
            Document portletXml = null;
            Document contextXml = null;
            ZipEntry src;
            InputStream source;
            Enumeration zipEntries = jin.entries();
            while (zipEntries.hasMoreElements()) {
                src = (ZipEntry) zipEntries.nextElement();
                source = jin.getInputStream(src);
                try {
                    String target = src.getName();
                    if (WEB_INF_WEB_XML.equals(target)) {
                        System.out.println(""Found web.xml"");
                        webXml = parseXml(source);
                    } else if (WEB_INF_PORTLET_XML.equals(target)) {
                        System.out.println(""Found WEB-INF/portlet.xml"");
                        portletXml = parseXml(source);
                    } else if (META_INF_CONTEXT_XML.equals(target)) {
                        System.out.println(""Found META-INF/context.xml"");
                        contextXml = parseXml(source);
                    }
                } finally {
                    source.close();
                }
            }
            if (webXml == null) {
                throw new IllegalArgumentException(""WEB-INF/web.xml not found"");
            }
            if (portletXml == null) {
                throw new IllegalArgumentException(""WEB-INF/portlet.xml not found"");
            }
            WebmillWebApplicationRewriter webRewriter = new WebmillWebApplicationRewriter(webXml);
            webRewriter.processWebXML();
            WebmillContextRewriter contextRewriter = new WebmillContextRewriter(contextXml, portletApplicationName);
            contextRewriter.processContextXML();
            jin = new JarFile(inputName);
            zipEntries = jin.entries();
            while (zipEntries.hasMoreElements()) {
                src = (ZipEntry) zipEntries.nextElement();
                source = jin.getInputStream(src);
                try {
                    String target = src.getName();
                    String fullTarget = '/' + target;
                    if (stripLoggers && target.endsWith("".jar"") && (target.startsWith(""WEB-INF/lib/commons-logging"") || target.startsWith(""WEB-INF/lib/log4j""))) {
                        System.out.println(""Skip logger "" + target);
                        continue;
                    } else {
                        if (webRewriter.getRealPortletTldFile() != null && fullTarget.equals(webRewriter.getRealPortletTldFile())) {
                            System.out.println(""Skip portlet tld file "" + fullTarget);
                            continue;
                        } else if (target.equals(WEB_INF_WEB_XML)) {
                            System.out.println(""Skip web.xml file "" + target);
                            continue;
                        } else if (target.equals(WEB_INF_PORTLET_XML)) {
                            System.out.println(""Skip portlet.xml file "" + target);
                            continue;
                        } else if (target.equals(META_INF_CONTEXT_XML)) {
                            System.out.println(""Skip context.xml file "" + target);
                            continue;
                        }
                        System.out.println(""Add file "" + target);
                    }
                    addFile(target, source, jout);
                } finally {
                    source.close();
                }
            }
            addFile(WEB_INF_WEB_XML, webXml, jout);
            addFile(WEB_INF_PORTLET_XML, portletXml, jout);
            addFile(META_INF_CONTEXT_XML, contextXml, jout);
            System.out.println(""Attempting to add portlet.tld to war..."");
            InputStream is = this.getClass().getResourceAsStream(""/org/riverock/webmill/container/tags/portlet.tld"");
            if (is == null) {
                System.out.println(""Failed to find portlet.tld in classpath"");
            } else {
                String portletTldFile = webRewriter.getRealPortletTldFile();
                if (portletTldFile.charAt(0) == '/') {
                    portletTldFile = portletTldFile.substring(1);
                }
                System.out.println(""Adding file "" + portletTldFile);
                try {
                    addFile(portletTldFile, is, jout);
                } finally {
                    is.close();
                }
            }
            jout.close();
            jin.close();
            jin = null;
            jout = null;
            System.out.println(""Creating war "" + outputName + "" ..."");
            System.out.flush();
            srcChannel = new FileInputStream(tempFile).getChannel();
            dstChannel = new FileOutputStream(outputName).getChannel();
            dstChannel.transferFrom(srcChannel, 0, srcChannel.size());
            srcChannel.close();
            srcChannel = null;
            dstChannel.close();
            dstChannel = null;
            tempFile.delete();
            tempFile = null;
            System.out.println(""War "" + outputName + "" created"");
            System.out.flush();
        } finally {
            if (srcChannel != null && srcChannel.isOpen()) {
                try {
                    srcChannel.close();
                } catch (IOException e1) {
                }
            }
            if (dstChannel != null && dstChannel.isOpen()) {
                try {
                    dstChannel.close();
                } catch (IOException e1) {
                }
            }
            if (jin != null) {
                try {
                    jin.close();
                    jin = null;
                } catch (IOException e1) {
                }
            }
            if (jout != null) {
                try {
                    jout.close();
                    jout = null;
                } catch (IOException e1) {
                }
            }
            if (tempFile != null && tempFile.exists()) {
                tempFile.delete();
            }
        }
    }
",70,,LABEL_1,LABEL_1,LABEL_1,-1,"copy,inputFile,outputFile,in,out,c",,6,14,0,,0,GA,2629,0.518519072,failed,"[';copy = 0', ';split = 0']"
44,"    private void copyIconFiles(UmlClass clazz) {
        if (clazz.hasAnnotation(""icon16"")) {
            String i16 = clazz.annotationValue(""icon16"");
            String fileType = "".png"";
            if (i16.endsWith("".jpg"")) fileType = "".jpg"";
            if (i16.endsWith("".gif"")) fileType = "".gif"";
            String desti16 = output_dir + ""/../resources/images/"" + clazz.getName() + ""16"" + fileType;
            try {
                FileChannel src = new FileInputStream(i16).getChannel();
                FileChannel dst = new FileOutputStream(desti16).getChannel();
                dst.transferFrom(src, 0, src.size());
                src.close();
                dst.close();
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
        if (clazz.hasAnnotation(""icon32"")) {
            String i32 = clazz.annotationValue(""icon32"");
            String fileType = "".png"";
            if (i32.endsWith("".jpg"")) fileType = "".jpg"";
            if (i32.endsWith("".gif"")) fileType = "".gif"";
            String desti32 = output_dir + ""/../resources/images/"" + clazz.getName() + ""32"" + fileType;
            try {
                FileChannel src = new FileInputStream(i32).getChannel();
                FileChannel dst = new FileOutputStream(desti32).getChannel();
                dst.transferFrom(src, 0, src.size());
                src.close();
                dst.close();
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }
 <SPLIT>         private void internalCopy(File fSource, File file) throws FileNotFoundException, IOException {
            if (fSource.getName().equals(""Thums.db"")) return;
            System.out.println(""copying "" + fSource + "" in "" + file);
            OutputStream o = new BufferedOutputStream(new FileOutputStream(file));
            InputStream i = new BufferedInputStream(new FileInputStream(fSource));
            byte[] b = new byte[8192];
            int n;
            while ((n = i.read(b)) > 0) o.write(b, 0, n);
            i.close();
            o.close();
        }
",322,,LABEL_1,LABEL_1,LABEL_1,-1,"copyIconFiles,clazz,i16,fileType,desti16,src,dst,i32,desti32",,7,34,0,,0,GA,4456,0.745933191,failed,[]
45,"    public static byte[] openHttpResult(String urlPath, boolean retry) throws IOException {
        AQUtility.debug(""net"", urlPath);
        URL url = new URL(urlPath);
        HttpURLConnection connection = (HttpURLConnection) url.openConnection();
        connection.setUseCaches(false);
        connection.setInstanceFollowRedirects(true);
        connection.setConnectTimeout(NET_TIMEOUT);
        int code = connection.getResponseCode();
        if (code == 307 && retry) {
            String redirect = connection.getHeaderField(""Location"");
            return openHttpResult(redirect, false);
        }
        if (code == -1 && retry) {
            return openHttpResult(urlPath, false);
        }
        AQUtility.debug(""response"", code);
        if (code == -1 || code < 200 || code >= 300) {
            throw new IOException();
        }
        byte[] result = AQUtility.toBytes(connection.getInputStream());
        return result;
    }
 <SPLIT>     public void importarHistoricoDeCotacoesDoDolar(Andamento pAndamento) throws FileNotFoundException, SQLException, Exception {
        pAndamento.delimitarIntervaloDeVariacao(0, 49);
        WSValorSerieVO[] cotacoesPendentesDoDolar = obterCotacoesPendentesDoDolar(pAndamento);
        pAndamento.delimitarIntervaloDeVariacao(50, 100);
        if (cotacoesPendentesDoDolar != null && cotacoesPendentesDoDolar.length > 0) {
            String sql = ""INSERT INTO tmp_TB_COTACAO_DOLAR(DATA, PRECO) VALUES(:DATA, :PRECO)"";
            OraclePreparedStatement stmtDestino = (OraclePreparedStatement) conDestino.prepareStatement(sql);
            stmtDestino.setExecuteBatch(COMANDOS_POR_LOTE);
            int quantidadeDeRegistrosASeremImportados = cotacoesPendentesDoDolar.length;
            try {
                int quantidadeDeRegistrosImportados = 0;
                int numeroDoRegistro = 0;
                for (WSValorSerieVO cotacaoPendenteDoDolar : cotacoesPendentesDoDolar) {
                    ++numeroDoRegistro;
                    stmtDestino.clearParameters();
                    int ano = cotacaoPendenteDoDolar.getAno(), mes = cotacaoPendenteDoDolar.getMes() - 1, dia = cotacaoPendenteDoDolar.getDia();
                    Calendar calendario = Calendar.getInstance();
                    calendario.clear();
                    calendario.set(ano, mes, dia);
                    java.sql.Date vDATA = new java.sql.Date(calendario.getTimeInMillis());
                    BigDecimal vPRECO = cotacaoPendenteDoDolar.getValor();
                    stmtDestino.setDateAtName(""DATA"", vDATA);
                    stmtDestino.setBigDecimalAtName(""PRECO"", vPRECO);
                    int contagemDasInsercoes = stmtDestino.executeUpdate();
                    quantidadeDeRegistrosImportados++;
                    double percentualCompleto = (double) quantidadeDeRegistrosImportados / quantidadeDeRegistrosASeremImportados * 100;
                    pAndamento.setPercentualCompleto((int) percentualCompleto);
                }
                conDestino.commit();
            } catch (Exception ex) {
                conDestino.rollback();
                throw ex;
            } finally {
                if (stmtDestino != null && (!stmtDestino.isClosed())) {
                    stmtDestino.close();
                }
            }
        }
        pAndamento.setPercentualCompleto(100);
    }
",182,,LABEL_0,LABEL_0,LABEL_0,-1,"openHttpResult,urlPath,retry,url,connection,code,redirect,result",,8,30,0,,0,GA,3816,0.6556108,failed,"[';print(openHttpResult)', ';openttpResult = 0', ';print(getHTTPResponse)', ';closeHTTPresult = 0', ';lPath = 0', ';httpCase = 0', ';print(httpCase)']"
46,"    public static void copyFile(File in, File out) throws IOException {
        FileChannel sourceChannel = new FileInputStream(in).getChannel();
        FileChannel destinationChannel = new FileOutputStream(out).getChannel();
        sourceChannel.transferTo(0, sourceChannel.size(), destinationChannel);
        sourceChannel.close();
        destinationChannel.close();
    }
 <SPLIT>     public static void copyFileByNIO(File in, File out) throws IOException {
        FileChannel sourceChannel = new FileInputStream(in).getChannel();
        FileChannel destinationChannel = new FileOutputStream(out).getChannel();
        sourceChannel.transferTo(0, sourceChannel.size(), destinationChannel);
        sourceChannel.close();
        destinationChannel.close();
    }
",69,"    public static void Copyfile(File url, File conn) throws IOException {
        FileChannel ourceChan = new FileInputStream(url).getChannel();
        FileChannel DestinationStream = new FileOutputStream(conn).getChannel();
        ourceChan.transferTo(0, ourceChan.size(), DestinationStream);
        ourceChan.close();
        DestinationStream.close();
    }
;copyFile = 0;in = 0;print(transferfile);url = 0;print(url);login = 0",LABEL_1,LABEL_1,LABEL_1,1,"copyFile,in,out,sourceChannel,destinationChannel","copyFile:-0.0027559399604797363,in:-3.8504600524902344e-05,out:-0.0035874247550964355,sourceChannel:-0.027043461799621582,destinationChannel:-0.014992594718933105,",5,12,0,"in:url,copyFile:Copyfile,out:conn,destinationChannel:DestinationStream,sourceChannel:ourceChan,",0,Greedy,230,0.032913836,inesrt,"[';copyFile = 0', ';in = 0', ';print(transferfile)', ';url = 0', ';print(url)', ';login = 0']"
47,"    public static void copy(String fileFrom, String fileTo) throws IOException {
        FileInputStream inputStream = null;
        FileOutputStream outputStream = null;
        FileChannel inputChannel = null;
        FileChannel outputChannel = null;
        try {
            inputStream = new FileInputStream(fileFrom);
            outputStream = new FileOutputStream(fileTo);
            inputChannel = inputStream.getChannel();
            outputChannel = outputStream.getChannel();
            inputChannel.transferTo(0, inputChannel.size(), outputChannel);
        } finally {
            try {
                inputChannel.close();
            } finally {
                try {
                    outputChannel.close();
                } finally {
                    try {
                        inputStream.close();
                    } finally {
                        outputStream.close();
                    }
                }
            }
        }
    }
 <SPLIT>     public DataRecord addRecord(InputStream input) throws DataStoreException {
        File temporary = null;
        try {
            temporary = newTemporaryFile();
            DataIdentifier tempId = new DataIdentifier(temporary.getName());
            usesIdentifier(tempId);
            long length = 0;
            MessageDigest digest = MessageDigest.getInstance(DIGEST);
            OutputStream output = new DigestOutputStream(new FileOutputStream(temporary), digest);
            try {
                length = IOUtils.copyLarge(input, output);
            } finally {
                output.close();
            }
            DataIdentifier identifier = new DataIdentifier(digest.digest());
            File file;
            synchronized (this) {
                usesIdentifier(identifier);
                file = getFile(identifier);
                if (!file.exists()) {
                    File parent = file.getParentFile();
                    parent.mkdirs();
                    if (temporary.renameTo(file)) {
                        temporary = null;
                    } else {
                        throw new IOException(""Can not rename "" + temporary.getAbsolutePath() + "" to "" + file.getAbsolutePath() + "" (media read only?)"");
                    }
                } else {
                    long now = System.currentTimeMillis();
                    if (getLastModified(file) < now + ACCESS_TIME_RESOLUTION) {
                        setLastModified(file, now + ACCESS_TIME_RESOLUTION);
                    }
                }
                if (file.length() != length) {
                    if (!file.isFile()) {
                        throw new IOException(""Not a file: "" + file);
                    }
                    throw new IOException(DIGEST + "" collision: "" + file);
                }
            }
            inUse.remove(tempId);
            return new FileDataRecord(identifier, file);
        } catch (NoSuchAlgorithmException e) {
            throw new DataStoreException(DIGEST + "" not available"", e);
        } catch (IOException e) {
            throw new DataStoreException(""Could not add record"", e);
        } finally {
            if (temporary != null) {
                temporary.delete();
            }
        }
    }
",131,,LABEL_1,LABEL_1,LABEL_0,-1,"copy,fileFrom,fileTo,inputStream,outputStream,inputChannel,outputChannel",,3,13,0,,0,GA,2924,0.468891756,failed,"[';copy = 0', ';fileFrom = 0', ';print(fileFrom)', ';file = 0', ';print( Copy)', ';cmp = 0']"
48,"    public static boolean encodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }
 <SPLIT>     public static void saveFileData(File file, File destination, java.io.File newDataFile) throws Exception {
        String fileName = file.getFileName();
        String assetsPath = FileFactory.getRealAssetsRootPath();
        new java.io.File(assetsPath).mkdir();
        java.io.File workingFile = getAssetIOFile(file);
        DotResourceCache vc = CacheLocator.getVeloctyResourceCache();
        vc.remove(ResourceManager.RESOURCE_TEMPLATE + workingFile.getPath());
        if (destination != null && destination.getInode() > 0) {
            FileInputStream is = new FileInputStream(workingFile);
            FileChannel channelFrom = is.getChannel();
            java.io.File newVersionFile = getAssetIOFile(destination);
            FileChannel channelTo = new FileOutputStream(newVersionFile).getChannel();
            channelFrom.transferTo(0, channelFrom.size(), channelTo);
            channelTo.force(false);
            channelTo.close();
            channelFrom.close();
        }
        if (newDataFile != null) {
            FileChannel writeCurrentChannel = new FileOutputStream(workingFile).getChannel();
            writeCurrentChannel.truncate(0);
            FileChannel fromChannel = new FileInputStream(newDataFile).getChannel();
            fromChannel.transferTo(0, fromChannel.size(), writeCurrentChannel);
            writeCurrentChannel.force(false);
            writeCurrentChannel.close();
            fromChannel.close();
            if (UtilMethods.isImage(fileName)) {
                BufferedImage img = javax.imageio.ImageIO.read(workingFile);
                int height = img.getHeight();
                file.setHeight(height);
                int width = img.getWidth();
                file.setWidth(width);
            }
            String folderPath = workingFile.getParentFile().getAbsolutePath();
            Identifier identifier = IdentifierCache.getIdentifierFromIdentifierCache(file);
            java.io.File directory = new java.io.File(folderPath);
            java.io.File[] files = directory.listFiles((new FileFactory()).new ThumbnailsFileNamesFilter(identifier));
            for (java.io.File iofile : files) {
                try {
                    iofile.delete();
                } catch (SecurityException e) {
                    Logger.error(FileFactory.class, ""EditFileAction._saveWorkingFileData(): "" + iofile.getName() + "" cannot be erased. Please check the file permissions."");
                } catch (Exception e) {
                    Logger.error(FileFactory.class, ""EditFileAction._saveWorkingFileData(): "" + e.getMessage());
                }
            }
        }
    }
",194,"    public static boolean encodeFileToFile(String infile, String outfile) {
        boolean open = false;
        java.io.InputStream login = null;
        java.io.OutputStream ou = null;
        try {
            login = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);
            ou = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] url = new byte[65536];
            int _ = -1;
            while ((_ = login._(url)) >= 0) {
                ou.write(url, 0, _);
            }
            open = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                login.close();
            } catch (Exception exc) {
            }
            try {
                ou.close();
            } catch (Exception exc) {
            }
        }
        return open;
    }
;print(infp);print(Infilename);print(Outname);login = 0;print(bin);conn = 0;err = 0;print(err);m = 0;print(source);init = 0;url = 0;print(url);result = 0;print(result);base = 0",LABEL_1,LABEL_1,LABEL_1,1,"encodeFileToFile,infile,outfile,in,out,buffer,read,success","encodeFileToFile:0.0010051131248474121,infile:0.01110982894897461,outfile:0.006501972675323486,in:-0.012176811695098877,out:-0.003839433193206787,buffer:-0.001816093921661377,read:-0.0004526376724243164,success:-0.0036259889602661133,",5,18,0,"infile:infile,outfile:outfile,encodeFileToFile:encodeFileToFile,read:_,buffer:url,success:open,out:ou,in:login,",0,Greedy,717,0.138408466,inesrt,"[';print(infp)', ';print(Infilename)', ';print(Outname)', ';login = 0', ';print(bin)', ';conn = 0', ';err = 0', ';print(err)', ';m = 0', ';print(source)', ';init = 0', ';url = 0', ';print(url)', ';result = 0', ';print(result)', ';base = 0']"
49,"    public static MessageService getMessageService(String fileId) {
        MessageService ms = null;
        if (serviceCache == null) init();
        if (serviceCache.containsKey(fileId)) return serviceCache.get(fileId);
        Properties p = new Properties();
        try {
            URL url = I18nPlugin.getFileURL(fileId);
            p.load(url.openStream());
            ms = new MessageService(p);
        } catch (Exception e) {
            ms = new MessageService();
        }
        serviceCache.put(fileId, ms);
        return ms;
    }
 <SPLIT>     private static void downloadImages(String uriPrefix, String fileWithListOfImages, String outputDir) throws Exception {
        Properties list = new Properties();
        list.load(new FileInputStream(fileWithListOfImages));
        long current = 0;
        long startTime = System.currentTimeMillis();
        System.out.println(""Downloading files from "" + uriPrefix + "" to "" + outputDir);
        System.out.println(""Total "" + list.size() + "" files, think of 1 sec per file"");
        System.out.println(""Images with the same size as the 'no-image' image are ignored and not displayed"");
        for (Iterator<Object> it = list.keySet().iterator(); it.hasNext(); ) {
            String urlString = it.next().toString().replace('\\', '/');
            if (urlString.contains(""="")) throw new Exception(""Symbol '=' found in file names, while it is reserved for denoting '/' in flat-file names"");
        }
        for (Iterator<Object> it = list.keySet().iterator(); it.hasNext(); ) {
            String urlString = it.next().toString().replace('\\', '/');
            URL url = new URL(uriPrefix + urlString);
            File file = new File(outputDir + ""/"" + imageNameToFileName(urlString));
            current++;
            if (!file.exists()) {
                try {
                    BufferedInputStream in = new BufferedInputStream(url.openStream(), 64000);
                    BufferedOutputStream out = new BufferedOutputStream(new FileOutputStream(file), 64000);
                    int c;
                    while ((c = in.read()) != -1) {
                        out.write(c);
                    }
                    out.close();
                    in.close();
                    System.out.print(current + "" /"" + list.size() + "". "" + file.getName() + "", "");
                    System.out.println(""saved"");
                } catch (Exception e) {
                    System.out.print(current + "" /"" + list.size() + "". "" + file.getName() + "", FAILED, error: "" + e.getMessage());
                }
            } else {
                System.out.print(current + "" /"" + list.size() + "". "" + file.getName() + "", "");
                System.out.println(""already exists"");
            }
            if (current / 100 == current / 100.0) {
                long delta = (System.currentTimeMillis() - startTime);
                System.out.println(""Total time "" + delta + "" ms, "" + (delta / current) + "" ms/file"");
            }
        }
        long delta = (System.currentTimeMillis() - startTime);
        System.out.println(""Total time "" + delta + "" ms, "" + (delta / list.size()) + "" ms/file"");
    }
",109,,LABEL_0,LABEL_0,LABEL_0,-1,"getMessageService,fileId,ms,p,url",,5,16,0,,0,GA,2207,0.382622755,failed,"[';print(getMessageService)', ';ms = 0', ';print(getMessageServ)', ';path = 0', ';print(plugin)', ';sl = 0']"
50,"    private void retrieveFile(URL url, RSLink link) {
        link.setStatus(RSLink.STATUS_DOWNLOADING);
        HttpURLConnection httpConn = null;
        DataOutputStream outs = null;
        BufferedInputStream bins = null;
        BufferedOutputStream bouts = null;
        try {
            String postData = URLEncoder.encode(""mirror"", ""UTF-8"") + ""="" + URLEncoder.encode(url.toString(), ""UTF-8"");
            httpConn = (HttpURLConnection) url.openConnection();
            httpConn.setRequestMethod(""POST"");
            httpConn.setRequestProperty(""Content-Type"", ""application/x-www-form-urlencoded"");
            httpConn.setRequestProperty(""Content-Length"", """" + Integer.toString(postData.getBytes().length));
            httpConn.setRequestProperty(""Content-Language"", ""en-US"");
            httpConn.setDoOutput(true);
            httpConn.setDoInput(true);
            outs = new DataOutputStream(httpConn.getOutputStream());
            outs.writeBytes(postData);
            outs.flush();
            Pattern mimePattern = Pattern.compile("".+/html.+"");
            Matcher matcher = mimePattern.matcher(httpConn.getContentType());
            if (matcher.find()) {
                log(""Can not download, maybe all RS slots are busy!"");
                return;
            }
            link.setSize(httpConn.getContentLength());
            bins = new BufferedInputStream(httpConn.getInputStream(), 4096);
            bouts = new BufferedOutputStream(new FileOutputStream(link.getFile()), 4096);
            link.setStatus(RSLink.STATUS_DOWNLOADING);
            link.setDown(0);
            byte[] byteBuffer = new byte[4096];
            int count;
            while ((count = bins.read(byteBuffer)) != -1) {
                bouts.write(byteBuffer, 0, count);
                link.setDown(link.getDown() + count);
                if (!Main.start.get()) {
                    link.setStatus(RSLink.STATUS_NOTHING);
                    return;
                }
            }
            link.setStatus(RSLink.STATUS_DONE);
        } catch (IOException ex) {
            log(""I/O Exception!"");
            link.setStatus(RSLink.STATUS_NOTHING);
        } finally {
            try {
                if (outs != null) outs.close();
                if (bouts != null) bouts.close();
                if (bins != null) bins.close();
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(null, ""Can not close some connections:\n"" + ex.getMessage(), ""ERROR"", JOptionPane.ERROR_MESSAGE);
            }
            if (httpConn != null) httpConn.disconnect();
        }
    }
 <SPLIT> 	public static void BubbleSortShort2(short[] num) {
		int last_exchange;
		int right_border = num.length - 1;
		do {
			last_exchange = 0;
			for (int j = 0; j < num.length - 1; j++) {
				if (num[j] > num[j + 1])
				{
					short temp = num[j];
					num[j] = num[j + 1];
					num[j + 1] = temp;
					last_exchange = j;
				}
			}
			right_border = last_exchange;
		} while (right_border > 0);
	}
",492,"    private void RetrieveFile(URL proxy, RSLink connection) {
        connection.setStatus(RSLink.STATUS_DOWNLOADING);
        HttpURLConnection transConnect = null;
        DataOutputStream lets = null;
        BufferedInputStream wbains = null;
        BufferedOutputStream bboxes = null;
        try {
            String poreadUrl URLEncoder.encode(""mirror"", ""UTF-8"") + ""="" + URLEncoder.encode(proxy.toString(), ""UTF-8"");
            httransConnect (HttpURLConnection) proxy.openConnection();
            transConnect.setRequestMethod(""POST"");
            transConnect.setRequestProperty(""Content-Type"", ""application/x-www-form-urlencoded"");
            transConnect.setRequestProperty(""Content-Length"", """" + Integer.toString(readUrl.getBytes().length));
            transConnect.setRequestProperty(""Content-Language"", ""en-US"");
            transConnect.setDoOutput(true);
            transConnect.setDoInput(true);
            outsletsew DataOutputStream(transConnect.getOutputStream());
            lets.writeBytes(readUrl);
            lets.flush();
            Pattern mimePattern = Pattern.compile("".+/html.+"");
            Matcher matcMatchersimemimePatterncMatchersnsConnect.getContentType());
            if (Matchers.find()) {
                log(""Can not download, maybe all RS slots are busy!"");
                return;
            }
            connection.setSize(transConnect.getContentLength());
            binswbainsew BufferedInputStream(transConnect.getInputStream(), 4096);
            bouts bboxes BufferedOutputStream(new FileOutputStream(connection.getFile()), 4096);
            connection.setStatus(RSLink.STATUS_DOWNLOADING);
            connection.setDown(0);
            byte[] byteBuffer = new byte[4096];
            int val;
            while ((coval wbains.read(byteBuffer)) != -1) {
                bboxes.write(byteBuffer, 0, val);
                connection.setDown(connection.getDown() + val);
                if (!Main.start.get()) {
                    connection.setStatus(RSLink.STATUS_NOTHING);
                    return;
                }
            }
            connection.setStatus(RSLink.STATUS_DONE);
        } catch (IOException ex) {
            log(""I/O Exception!"");
            connection.setStatus(RSLink.STATUS_NOTHING);
        } finally {
            try {
                if (lets != null) lets.close();
                if (bboxes != null) bboxes.close();
                if (wbains != null) wbains.close();
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(null, ""Can not close some connections:
"" + ex.getMessage(), ""ERROR"", JOptionPane.ERROR_MESSAGE);
            }
            if (transConnect != null) transConnect.disconnect();
        }
    }
",LABEL_0,LABEL_0,0.505866945,1,"retrieveFile,url,link,httpConn,outs,bins,bouts,postData,mimePattern,matcher,byteBuffer,count",,12,60,5,"retrieveFile:RetrieveFile,url:proxy,link:connection,httpConn:transConnect,outs:lets,bins:wbains,bouts:bboxes,postData:readUrl,mimePattern:mimePattern,matcher:Matchers,byteBuffer:byteBuffer,count:val,",2,GA,2019,0.405220111,ga,[]
51,"    private static boolean genCustRatingFileAndMovieIndexFile(String completePath, String masterFile, String CustRatingFileName, String MovieIndexFileName) {
        try {
            File inFile = new File(completePath + fSep + ""SmartGRAPE"" + fSep + masterFile);
            FileChannel inC = new FileInputStream(inFile).getChannel();
            File outFile1 = new File(completePath + fSep + ""SmartGRAPE"" + fSep + MovieIndexFileName);
            FileChannel outC1 = new FileOutputStream(outFile1, true).getChannel();
            File outFile2 = new File(completePath + fSep + ""SmartGRAPE"" + fSep + CustRatingFileName);
            FileChannel outC2 = new FileOutputStream(outFile2, true).getChannel();
            int fileSize = (int) inC.size();
            int totalNoDataRows = fileSize / 7;
            ByteBuffer mappedBuffer = inC.map(FileChannel.MapMode.READ_ONLY, 0, fileSize);
            int startIndex = 1, count = 0;
            short currentMovie = 1;
            while (mappedBuffer.hasRemaining()) {
                count++;
                short movieName = mappedBuffer.getShort();
                int customer = mappedBuffer.getInt();
                byte rating = mappedBuffer.get();
                if (movieName != currentMovie) {
                    ByteBuffer outBuf1 = ByteBuffer.allocate(10);
                    outBuf1.putShort(currentMovie);
                    outBuf1.putInt(startIndex);
                    outBuf1.putInt(count - 1);
                    outBuf1.flip();
                    outC1.write(outBuf1);
                    currentMovie = movieName;
                    startIndex = count;
                }
                ByteBuffer outBuf2 = ByteBuffer.allocate(5);
                outBuf2.putInt(customer);
                outBuf2.put(rating);
                outBuf2.flip();
                outC2.write(outBuf2);
            }
            ByteBuffer endOfIndexFile = ByteBuffer.allocate(10);
            endOfIndexFile.putShort(currentMovie);
            endOfIndexFile.putInt(startIndex);
            endOfIndexFile.putInt(100480506);
            endOfIndexFile.flip();
            outC1.write(endOfIndexFile);
            outC1.close();
            outC2.close();
            return true;
        } catch (IOException e) {
            System.err.println(e);
            return false;
        }
    }
 <SPLIT>     public static String getMD5(String _pwd) {
        try {
            MessageDigest md = MessageDigest.getInstance(""MD5"");
            md.update(_pwd.getBytes());
            return toHexadecimal(new String(md.digest()).getBytes());
        } catch (NoSuchAlgorithmException x) {
            x.printStackTrace();
            return """";
        }
    }
",391,,LABEL_0,LABEL_1,,-4,"genCustRatingFileAndMovieIndexFile,completePath,masterFile,CustRatingFileName,MovieIndexFileName,inFile,inC,outFile1,outC1,outFile2,outC2,fileSize,totalNoDataRows,mappedBuffer,startIndex,count,currentMovie,movieName,customer,rating,outBuf1,outBuf2,endOfIndexFile",,,,0,,0,Greedy,1,0.000521545,,[]
52,"    public static void doVersionCheck(View view) {
        view.showWaitCursor();
        try {
            URL url = new URL(jEdit.getProperty(""version-check.url""));
            InputStream in = url.openStream();
            BufferedReader bin = new BufferedReader(new InputStreamReader(in));
            String line;
            String version = null;
            String build = null;
            while ((line = bin.readLine()) != null) {
                if (line.startsWith("".version"")) version = line.substring(8).trim(); else if (line.startsWith("".build"")) build = line.substring(6).trim();
            }
            bin.close();
            if (version != null && build != null) {
                if (jEdit.getBuild().compareTo(build) < 0) newVersionAvailable(view, version, url); else {
                    GUIUtilities.message(view, ""version-check"" + "".up-to-date"", new String[0]);
                }
            }
        } catch (IOException e) {
            String[] args = { jEdit.getProperty(""version-check.url""), e.toString() };
            GUIUtilities.error(view, ""read-error"", args);
        }
        view.hideWaitCursor();
    }
 <SPLIT>     public String getXML(String servletURL, String request) {
        StringBuffer stringBuffer = new StringBuffer();
        try {
            String encodedRequest = URLEncoder.encode(request, ""UTF-8"");
            URL url = new URL(servletURL + request);
            BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));
            String inputLine;
            while ((inputLine = in.readLine()) != null) {
                stringBuffer.append(inputLine);
            }
            in.close();
        } catch (MalformedURLException ex) {
            return null;
        } catch (UnsupportedEncodingException ex) {
            return null;
        } catch (IOException ex) {
            return null;
        }
        return stringBuffer.toString();
    }
",250,,LABEL_1,LABEL_0,,-4,"doVersionCheck,view,url,in,bin,line,version,build",,,,0,,0,Greedy,1,0.000422339,,[]
53,"        private void loadBinaryStream(String streamName, InputStream streamToLoad, long sz, HttpServletRequest req, HttpServletResponse resp) throws IOException {
            resp.setContentType(getContentType(req, streamName));
            resp.setHeader(""Content-Disposition"", ""inline;filename="" + streamName);
            resp.setContentLength((int) sz);
            OutputStream out = resp.getOutputStream();
            BufferedOutputStream bos = new BufferedOutputStream(out, 2048);
            try {
                IOUtils.copy(streamToLoad, bos);
            } finally {
                IOUtils.closeQuietly(streamToLoad);
                IOUtils.closeQuietly(bos);
            }
            getCargo().put(GWT_ENTRY_POINT_PAGE_PARAM, null);
        }
 <SPLIT>     public void init() throws GateException {
        if (reportFile == null) throw new GateException(""No report file set!"");
        boolean restarting = false;
        if (!reportFile.getParentFile().exists() && !reportFile.getParentFile().mkdirs()) {
            throw new GateException(""Could not create directories for "" + reportFile.getAbsolutePath());
        }
        File backupFile = new File(reportFile.getAbsolutePath() + "".bak"");
        if (reportFile.exists()) {
            restarting = true;
            logger.info(""Existing report file found at \"""" + reportFile.getAbsolutePath() + ""\"", attempting to restart"");
            if (!reportFile.renameTo(backupFile)) {
                try {
                    byte[] buff = new byte[32 * 1024];
                    InputStream in = new BufferedInputStream(new FileInputStream(reportFile));
                    try {
                        OutputStream out = new BufferedOutputStream(new FileOutputStream(backupFile));
                        try {
                            int read = in.read(buff);
                            while (read != -1) {
                                out.write(buff, 0, read);
                                read = in.read(buff);
                            }
                        } finally {
                            out.close();
                        }
                    } finally {
                        in.close();
                    }
                } catch (IOException e) {
                    throw new GateException(""Could not restart batch"", e);
                }
            }
        }
        try {
            reportWriter = staxOutputFactory.createXMLStreamWriter(new BufferedOutputStream(new FileOutputStream(reportFile)));
            reportWriter.writeStartDocument();
            reportWriter.writeCharacters(""\n"");
            reportWriter.setDefaultNamespace(Tools.REPORT_NAMESPACE);
            reportWriter.writeStartElement(Tools.REPORT_NAMESPACE, ""cloudReport"");
            reportWriter.writeDefaultNamespace(Tools.REPORT_NAMESPACE);
            reportWriter.writeCharacters(""\n"");
            reportWriter.writeStartElement(Tools.REPORT_NAMESPACE, ""documents"");
        } catch (XMLStreamException e) {
            throw new GateException(""Cannot write to the report file!"", e);
        } catch (IOException e) {
            throw new GateException(""Cannot write to the report file!"", e);
        }
        if (restarting) {
            try {
                Set<String> completedDocuments = new HashSet<String>();
                logger.debug(""Processing existing report file"");
                InputStream bakIn = new BufferedInputStream(new FileInputStream(backupFile));
                XMLEventReader xer = staxInputFactory.createXMLEventReader(bakIn);
                try {
                    XMLEvent event;
                    while (xer.hasNext()) {
                        event = xer.nextEvent();
                        if (event.isStartElement() && event.asStartElement().getName().getLocalPart().equals(""documents"")) {
                            break;
                        }
                    }
                    List<XMLEvent> events = new LinkedList<XMLEvent>();
                    String currentReturnCode = null;
                    String currentDocid = null;
                    while (xer.hasNext()) {
                        event = xer.nextEvent();
                        events.add(event);
                        if (event.isStartElement() && event.asStartElement().getName().getLocalPart().equals(""processResult"")) {
                            currentReturnCode = event.asStartElement().getAttributeByName(new QName(XMLConstants.NULL_NS_URI, ""returnCode"")).getValue();
                            currentDocid = event.asStartElement().getAttributeByName(new QName(XMLConstants.NULL_NS_URI, ""id"")).getValue();
                        }
                        if (event.isEndElement() && event.asEndElement().getName().getLocalPart().equals(""processResult"")) {
                            if (currentReturnCode.equals(""SUCCESS"") && currentDocid != null) {
                                completedDocuments.add(currentDocid);
                                for (XMLEvent evt : events) {
                                    Tools.writeStaxEvent(evt, reportWriter);
                                }
                            }
                            events.clear();
                            currentReturnCode = null;
                            currentDocid = null;
                        }
                        if (event.isEndElement() && event.asEndElement().getName().getLocalPart().equals(""documents"")) {
                            break;
                        }
                    }
                } catch (Exception e) {
                    logger.debug(""Exception while parsing old report file - probably "" + ""reached the end of old report"", e);
                } finally {
                    xer.close();
                    bakIn.close();
                    backupFile.delete();
                }
                List<String> unprocessedDocs = new ArrayList<String>();
                unprocessedDocs.addAll(Arrays.asList(documentIDs));
                unprocessedDocs.removeAll(completedDocuments);
                unprocessedDocumentIDs = unprocessedDocs.toArray(new String[unprocessedDocs.size()]);
            } catch (XMLStreamException e) {
                throw new GateException(""Cannot write to the report file!"", e);
            } catch (IOException e) {
                throw new GateException(""Cannot write to the report file!"", e);
            }
        } else {
            unprocessedDocumentIDs = documentIDs;
        }
    }
",121,,LABEL_1,LABEL_1,LABEL_1,-1,"loadBinaryStream,streamName,streamToLoad,sz,req,resp,out,bos",,0,0,0,,0,GA,3632,0.701664201,failed,[]
54,"    protected JSONObject doJSONRequest(JSONObject jsonRequest) throws JSONRPCException {
        HttpPost request = new HttpPost(serviceUri);
        HttpParams params = new BasicHttpParams();
        HttpConnectionParams.setConnectionTimeout(params, getConnectionTimeout());
        HttpConnectionParams.setSoTimeout(params, getSoTimeout());
        HttpProtocolParams.setVersion(params, PROTOCOL_VERSION);
        request.setParams(params);
        request.addHeader(""Authorization"", ""Basic "" + Base64Coder.encodeString(serviceUser + "":"" + servicePass));
        HttpEntity entity;
        try {
            entity = new JSONEntity(jsonRequest);
        } catch (UnsupportedEncodingException e1) {
            throw new JSONRPCException(""Unsupported encoding"", e1);
        }
        request.setEntity(entity);
        try {
            long t = System.currentTimeMillis();
            HttpResponse response = httpClient.execute(request);
            t = System.currentTimeMillis() - t;
            Log.d(""json-rpc"", ""Request time :"" + t);
            String responseString = EntityUtils.toString(response.getEntity());
            responseString = responseString.trim();
            JSONObject jsonResponse = new JSONObject(responseString);
            if (jsonResponse.has(""error"")) {
                Object jsonError = jsonResponse.get(""error"");
                if (!jsonError.equals(null)) throw new JSONRPCException(jsonResponse.get(""error""));
                return jsonResponse;
            } else {
                return jsonResponse;
            }
        } catch (ClientProtocolException e) {
            throw new JSONRPCException(""HTTP error"", e);
        } catch (IOException e) {
            throw new JSONRPCException(""IO error"", e);
        } catch (JSONException e) {
            throw new JSONRPCException(""Invalid JSON response"", e);
        }
    }
 <SPLIT>     @Primitive
    public static Value caml_md5_string(final CodeRunner ctxt, final Value str, final Value ofs, final Value len) throws Fail.Exception {
        try {
            final MessageDigest md5 = MessageDigest.getInstance(Md5.ALGO);
            md5.update(str.asBlock().getBytes(), ofs.asLong(), len.asLong());
            return Value.createFromBlock(Block.createString(md5.digest()));
        } catch (final NoSuchAlgorithmException nsae) {
            Fail.invalidArgument(""Digest.substring"");
            return Value.UNIT;
        }
    }
",322,,LABEL_0,LABEL_0,LABEL_0,-1,"doJSONRequest,jsonRequest,request,params,entity,t,response,responseString,jsonResponse,jsonError",,3,13,0,,0,GA,4587,0.773054671,failed,"[';doJSONRequest = 0', ';print(doJSONRequest)', ';request = 0', ';httprequest = 0']"
55,"    public static void buildDeb(File debFile, File controlFile, File dataFile) throws IOException {
        long now = new Date().getTime() / 1000;
        OutputStream deb = new FileOutputStream(debFile);
        deb.write(""!<arch>\n"".getBytes());
        startFileEntry(deb, DEBIAN_BINARY_NAME, now, DEBIAN_BINARY_CONTENT.length());
        deb.write(DEBIAN_BINARY_CONTENT.getBytes());
        endFileEntry(deb, DEBIAN_BINARY_CONTENT.length());
        startFileEntry(deb, CONTROL_NAME, now, controlFile.length());
        FileInputStream control = new FileInputStream(controlFile);
        byte[] buffer = new byte[1024];
        while (true) {
            int read = control.read(buffer);
            if (read == -1) break;
            deb.write(buffer, 0, read);
        }
        control.close();
        endFileEntry(deb, controlFile.length());
        startFileEntry(deb, DATA_NAME, now, dataFile.length());
        FileInputStream data = new FileInputStream(dataFile);
        while (true) {
            int read = data.read(buffer);
            if (read == -1) break;
            deb.write(buffer, 0, read);
        }
        data.close();
        endFileEntry(deb, dataFile.length());
        deb.close();
    }
 <SPLIT>     public void patch() throws IOException {
        if (mods.isEmpty()) {
            return;
        }
        IOUtils.copy(new FileInputStream(Paths.getMinecraftJarPath()), new FileOutputStream(new File(Paths.getMinecraftBackupPath())));
        JarFile mcjar = new JarFile(Paths.getMinecraftJarPath());
    }
",263,"    public static void buildDeb(File fbStyle, File controlFile, File dataFile) throws IOException {
        long now = new Date().getTime() / 1000;
        OutputStream dp = new FileOutputStream(fbStyle);
        dp.write(""!<arch>
"".getBytes());
        startFileEntry(dp, DEBIAN_BINARY_NAME, now, DEBIAN_BINARY_CONTENT.length());
        dp.write(DEBIAN_BINARY_CONTENT.getBytes());
        endFileEntry(dp, DEBIAN_BINARY_CONTENT.length());
        startFileEntry(dp, CONTROL_NAME, now, controlFile.length());
        FileInputStream url = new FileInputStream(controlFile);
        byte[] url = new byte[1024];
        while (true) {
            int read = url.read(url);
            if (read == -1) break;
            dp.write(url, 0, read);
        }
        url.close();
        endFileEntry(dp, controlFile.length());
        startFileEntry(dp, DATA_NAME, now, dataFile.length());
        FileInputStream db = new FileInputStream(dataFile);
        while (true) {
            int read = db.read(url);
            if (read == -1) break;
            dp.write(url, 0, read);
        }
        db.close();
        endFileEntry(dp, dataFile.length());
        dp.close();
    }
",LABEL_1,LABEL_1,LABEL_0,1,"buildDeb,debFile,controlFile,dataFile,now,deb,control,buffer,read,data","buildDeb:-0.014963209629058838,debFile:0.014521658420562744,controlFile:-0.01918882131576538,dataFile:-0.01158362627029419,now:-0.008329272270202637,deb:-0.008005321025848389,control:-0.0007604360580444336,buffer:-0.0061154961585998535,read:-0.011386990547180176,data:-0.004494726657867432,",5,25,0,"debFile:fbStyle,control:url,data:db,buffer:url,deb:dp,",0,Greedy,315,0.046273438,replace,[]
56,"    public static void makeBackup(File dir, String sourcedir, String destinationdir, String destinationDirEnding) {
        String[] files;
        files = dir.list();
        File checkdir = new File(destinationdir + System.getProperty(""file.separator"") + destinationDirEnding);
        if (!checkdir.isDirectory()) {
            checkdir.mkdir();
        }
        ;
        Date date = new Date();
        long msec = date.getTime();
        checkdir.setLastModified(msec);
        File checkFile = new File(checkdir + System.getProperty(""file.separator"") + ""azureus.config"");
        if (checkFile.exists()) {
            checkFile.setLastModified(msec);
        }
        try {
            for (int i = 0; i < files.length; i++) {
                File f = new File(dir, files[i]);
                File g = new File(files[i]);
                if (f.isDirectory()) {
                } else {
                    String destinationFile = checkdir + System.getProperty(""file.separator"") + g;
                    String sourceFile = sourcedir + System.getProperty(""file.separator"") + g;
                    FileInputStream infile = new FileInputStream(sourceFile);
                    FileOutputStream outfile = new FileOutputStream(destinationFile);
                    int c;
                    while ((c = infile.read()) != -1) outfile.write(c);
                    infile.close();
                    outfile.close();
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
 <SPLIT>     public String upload() {
        System.out.println(imgFile);
        String destDir = ""E:\\ganymede_workspace\\training01\\web\\user_imgs\\map_bg.jpg"";
        FileOutputStream fos;
        try {
            fos = new FileOutputStream(new File(destDir));
            IOUtils.copy(new FileInputStream(imgFile), fos);
            IOUtils.closeQuietly(fos);
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
        return ""show"";
    }
",294,"    public static void makeBackup(File url, String sourcesdir, String Destificationfolder, String destinationDirEnding) {
        String[] ls;
        ls = url.list();
        File checkdir = new File(Destificationfolder + System.getProperty(""file.separator"") + destinationDirEnding);
        if (!checkdir.isDirectory()) {
            checkdir.mkdir();
        }
        ;
        Date log = new Date();
        long Msecond = log.getTime();
        checkdir.setLastModified(Msecond);
        File  checkLine = new File(checkdir + System.getProperty(""file.separator"") + ""azureus.config"");
        if ( checkLine.exists()) {
             checkLine.setLastModified(Msecond);
        }
        try {
            for (int p = 0; p < ls.length; p++) {
                File feed = new File(url, ls[p]);
                File gh = new File(ls[p]);
                if (feed.isDirectory()) {
                } else {
                    String DestificationLocation = checkdir + System.getProperty(""file.separator"") + gh;
                    String ourceFiles = sourcesdir + System.getProperty(""file.separator"") + gh;
                    FileInputStream inputdata = new FileInputStream(ourceFiles);
                    FileOutputStream outfile = new FileOutputStream(DestificationLocation);
                    int end;
                    while ((end = inputdata.read()) != -1) outfile.write(end);
                    inputdata.close();
                    outfile.close();
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
",LABEL_1,LABEL_1,LABEL_0,1,"makeBackup,dir,sourcedir,destinationdir,destinationDirEnding,files,checkdir,date,msec,checkFile,i,f,g,destinationFile,sourceFile,infile,outfile,c","makeBackup:-0.018361032009124756,dir:0.00045567750930786133,sourcedir:-0.004699647426605225,destinationdir:-0.005400657653808594,destinationDirEnding:-0.03175675868988037,files:-0.004175841808319092,checkdir:-0.01218879222869873,date:-0.0010659098625183105,msec:-0.0004259943962097168,checkFile:-0.004983782768249512,i:-0.0029271841049194336,f:-0.00186997652053833,g:-0.0016896724700927734,destinationFile:-0.005196928977966309,sourceFile:-0.005522191524505615,infile:-0.006043076515197754,outfile:-0.007017970085144043,c:-0.003033936023712158,",14,40,0,"dir:url,msec:Msecond,date:log,g:gh,f:feed,i:p,c:end,files:ls,sourcedir:sourcesdir,checkFile: checkLine,destinationFile:DestificationLocation,destinationdir:Destificationfolder,sourceFile:ourceFiles,infile:inputdata,",0,Greedy,648,0.103148711,replace,[]
57,"    static HashSet<Integer> readZoneIDs(String zoneFileName) {
        HashSet<Integer> zoneids = new HashSet<Integer>();
        try {
            URL url = zoneFileName.getClass().getResource(zoneFileName);
            LineNumberReader lnr = new LineNumberReader(new InputStreamReader(url.openStream()));
            String line = null;
            while ((line = lnr.readLine()) != null) zoneids.add(Integer.parseInt(line));
        } catch (Exception xc) {
            xc.printStackTrace();
        }
        return zoneids;
    }
 <SPLIT>     private Reader getReader() throws IOException {
        if (data != null) {
            if (url != null) throw new IllegalArgumentException(""URL for source data and the data itself must never be specified together."");
            if (charset != null) throw new IllegalArgumentException(""Charset has sense only for URL-based data"");
            return new StringReader(data);
        } else if (url != null) {
            InputStream stream = url.openStream();
            if (charset == null) return new InputStreamReader(stream); else return new InputStreamReader(stream, charset);
        }
        return null;
    }
",108,,LABEL_0,LABEL_0,LABEL_0,-1,"readZoneIDs,zoneFileName,zoneids,url,lnr,line",,6,14,0,,0,GA,2411,0.351685186,failed,[]
58,"    protected String getRequestContent(String urlText) throws Exception {
        URL url = new URL(urlText);
        HttpURLConnection urlcon = (HttpURLConnection) url.openConnection();
        urlcon.connect();
        BufferedReader reader = new BufferedReader(new InputStreamReader(urlcon.getInputStream()));
        String line = reader.readLine();
        reader.close();
        urlcon.disconnect();
        return line;
    }
 <SPLIT>     public DocumentSummary parseDocument(URL url) throws IOException, DocumentHandlerException {
        InputStream inputStream = null;
        try {
            inputStream = url.openStream();
            POIOLE2TextExtractor extractor = createExtractor(inputStream);
            SummaryInformation info = extractor.getSummaryInformation();
            DocumentSummary docSummary = new DocumentSummary();
            docSummary.authors = DocSummaryPOIFSReaderListener.getAuthors(info);
            docSummary.contentReader = new StringReader(extractor.getText());
            docSummary.creationDate = info.getCreateDateTime();
            docSummary.keywords = new ArrayList();
            docSummary.keywords.add(info.getKeywords());
            docSummary.modificationDate = new Date(info.getEditTime());
            docSummary.title = info.getTitle();
            return docSummary;
        } catch (IOException e) {
            if (e.getMessage().startsWith(""Unable to read entire header"")) {
                throw new DocumentHandlerException(""Couldn't process document"", e);
            } else {
                throw e;
            }
        } finally {
            if (inputStream != null) {
                inputStream.close();
            }
        }
    }
",80,,LABEL_0,LABEL_0,LABEL_0,-1,"getRequestContent,urlText,url,urlcon,reader,line",,4,10,0,,0,GA,2522,0.379180781,failed,"[';urlText = 0', ';url = 0', ';urlcon = 0', ';line = 0', '; urlTEXT = 0']"
59,"    public static void doVersionCheck(View view) {
        view.showWaitCursor();
        try {
            URL url = new URL(jEdit.getProperty(""version-check.url""));
            InputStream in = url.openStream();
            BufferedReader bin = new BufferedReader(new InputStreamReader(in));
            String line;
            String version = null;
            String build = null;
            while ((line = bin.readLine()) != null) {
                if (line.startsWith("".version"")) version = line.substring(8).trim(); else if (line.startsWith("".build"")) build = line.substring(6).trim();
            }
            bin.close();
            if (version != null && build != null) {
                if (jEdit.getBuild().compareTo(build) < 0) newVersionAvailable(view, version, url); else {
                    GUIUtilities.message(view, ""version-check"" + "".up-to-date"", new String[0]);
                }
            }
        } catch (IOException e) {
            String[] args = { jEdit.getProperty(""version-check.url""), e.toString() };
            GUIUtilities.error(view, ""read-error"", args);
        }
        view.hideWaitCursor();
    }
 <SPLIT>     private String transferWSDL(String wsdlURL, String userPassword) throws WiseConnectionException {
        String filePath = null;
        try {
            URL endpoint = new URL(wsdlURL);
            HttpURLConnection conn = (HttpURLConnection) endpoint.openConnection();
            conn.setDoOutput(false);
            conn.setDoInput(true);
            conn.setUseCaches(false);
            conn.setRequestMethod(""GET"");
            conn.setRequestProperty(""Accept"", ""text/xml,application/xml,application/xhtml+xml,text/html;q=0.9,text/plain;q=0.8,image/png,*/*;q=0.5"");
            conn.setRequestProperty(""Connection"", ""close"");
            if (userPassword != null) {
                conn.setRequestProperty(""Authorization"", ""Basic "" + (new BASE64Encoder()).encode(userPassword.getBytes()));
            }
            InputStream is = null;
            if (conn.getResponseCode() == 200) {
                is = conn.getInputStream();
            } else {
                is = conn.getErrorStream();
                InputStreamReader isr = new InputStreamReader(is);
                StringWriter sw = new StringWriter();
                char[] buf = new char[200];
                int read = 0;
                while (read != -1) {
                    read = isr.read(buf);
                    sw.write(buf);
                }
                throw new WiseConnectionException(""Remote server's response is an error: "" + sw.toString());
            }
            File outputDir = new File(wiseProperties.getProperty(""wise.tmpDir""));
            if (!outputDir.exists()) {
                outputDir.mkdir();
                wiseProperties.setProperty(""wise.forceImportObject"", ""true"");
            }
            File file = new File(wiseProperties.getProperty(""wise.tmpDir""), new StringBuffer(""Wise"").append(IDGenerator.nextVal()).append("".xml"").toString());
            OutputStream fos = new BufferedOutputStream(new FileOutputStream(file));
            IOUtils.copyStream(fos, is);
            fos.close();
            is.close();
            filePath = file.getPath();
        } catch (WiseConnectionException wce) {
            throw wce;
        } catch (Exception e) {
            throw new WiseConnectionException(""Wsdl download failed!"", e);
        }
        return filePath;
    }
",250,"    public static void doVersionCheck(View cache) {
        cache.showWaitCursor();
        try {
            URL file = new URL(jEdit.getProperty(""version-check.url""));
            InputStream in = file.openStream();
            BufferedReader bin = new BufferedReader(new InputStreamReader(in));
            String line;
            String version = null;
            String build = null;
            while ((line = bin.readLine()) != null) {
                if (line.startsWith("".version"")) version = line.substring(8).trim(); else if (line.startsWith("".build"")) build = line.substring(6).trim();
            }
            bin.close();
            if (version != null && build != null) {
                if (jEdit.getBuild().compareTo(build) < 0) newVersionAvailable(cache, version, file); else {
                    GUIUtilities.message(cache, ""version-check"" + "".up-to-date"", new String[0]);
                }
            }
        } catch (IOException e) {
            String[] args = { jEdit.getProperty(""version-check.url""), e.toString() };
            GUIUtilities.error(cache, ""read-error"", args);
        }
        cache.hideWaitCursor();
    }
",LABEL_0,LABEL_0,LABEL_1,1,"doVersionCheck,view,url,in,bin,line,version,build","doVersionCheck:-0.017462491989135742,view:0.0038990378379821777,url:0.02626866102218628,in:0.003448307514190674,bin:-0.010680139064788818,line:-0.008902251720428467,version:-0.0014491677284240723,build:0.0005995035171508789,",2,9,0,"url:file,view:cache,",0,Greedy,154,0.024732538,replace,[]
60,"    public static boolean encodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }
 <SPLIT>     public static void copyFile(File sourceFile, File destFile) throws IOException {
        if (!destFile.exists()) {
            destFile.createNewFile();
        }
        FileChannel source = null;
        FileChannel destination = null;
        try {
            source = new FileInputStream(sourceFile).getChannel();
            destination = new FileOutputStream(destFile).getChannel();
            destination.transferFrom(source, 0, source.size());
        } finally {
            if (source != null) {
                source.close();
            }
            if (destination != null) {
                destination.close();
            }
        }
    }
",194,"    public static boolean encodeString2String(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] url = new byte[65536];
            int load = -1;
            while ((load = in.load(url)) >= 0) {
                out.write(url, 0, load);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }
",LABEL_1,LABEL_1,LABEL_0,1,"encodeFileToFile,infile,outfile,in,out,buffer,read,success","encodeFileToFile:0.0010051131248474121,infile:0.01110982894897461,outfile:0.006501972675323486,in:-0.012176811695098877,out:-0.003839433193206787,buffer:-0.001816093921661377,read:-0.0004526376724243164,success:-0.0036259889602661133,",3,8,0,"infile:infile,outfile:outfile,encodeFileToFile:encodeString2String,read:load,buffer:url,",0,Greedy,200,0.029627407,replace,[]
61,"    public static int createEmptyCart() {
        int SHOPPING_ID = 0;
        Connection con = null;
        try {
            con = getConnection();
        } catch (java.lang.Exception ex) {
            ex.printStackTrace();
        }
        try {
            PreparedStatement insert_cart = null;
            SHOPPING_ID = Integer.parseInt(Sequence.getSequenceNumber(""shopping_cart""));
            insert_cart = con.prepareStatement(""INSERT INTO shopping_cart (sc_id, sc_time) VALUES ( ? , NOW() )"");
            insert_cart.setInt(1, SHOPPING_ID);
            insert_cart.executeUpdate();
            con.commit();
            insert_cart.close();
            returnConnection(con);
        } catch (java.lang.Exception ex) {
            try {
                con.rollback();
                ex.printStackTrace();
            } catch (Exception se) {
                System.err.println(""Transaction rollback failed."");
            }
        }
        return SHOPPING_ID;
    }
 <SPLIT>     public static void copy(File from_file, File to_file) throws IOException {
        if (!from_file.exists()) abort(""FileCopy: no such source file: "" + from_file.getName());
        if (!from_file.isFile()) abort(""FileCopy: can't copy directory: "" + from_file.getName());
        if (!from_file.canRead()) abort(""FileCopy: source file is unreadable: "" + from_file.getName());
        if (to_file.isDirectory()) to_file = new File(to_file, from_file.getName());
        if (to_file.exists()) {
            if (!to_file.canWrite()) abort(""FileCopy: destination file is unwriteable: "" + to_file.getName());
        } else {
            String parent = to_file.getParent();
            if (parent == null) parent = System.getProperty(""user.dir"");
            File dir = new File(parent);
            if (!dir.exists()) abort(""FileCopy: destination directory doesn't exist: "" + parent);
            if (dir.isFile()) abort(""FileCopy: destination is not a directory: "" + parent);
            if (!dir.canWrite()) abort(""FileCopy: destination directory is unwriteable: "" + parent);
        }
        FileInputStream from = null;
        FileOutputStream to = null;
        try {
            from = new FileInputStream(from_file);
            to = new FileOutputStream(to_file);
            byte[] buffer = new byte[4096];
            int bytes_read;
            while ((bytes_read = from.read(buffer)) != -1) {
                to.write(buffer, 0, bytes_read);
            }
        } finally {
            if (from != null) try {
                from.close();
            } catch (IOException e) {
                ;
            }
            if (to != null) try {
                to.close();
            } catch (IOException e) {
            }
        }
    }
",159,,LABEL_0,LABEL_0,LABEL_0,-1,"createEmptyCart,SHOPPING_ID,con,insert_cart",,4,16,0,,0,GA,1829,0.302845975,failed,[';con = 0']
62,"            @Override
            protected Reader openConnection(URL url) throws IOException {
                try {
                    if (limit != null) {
                        limit.acquirePermit();
                    }
                    return super.openConnection(url);
                } catch (InterruptedException e) {
                    throw new IOException(e);
                }
            }
 <SPLIT>     @Override
    protected void parseContent(StreamLimiter streamLimiter, LanguageEnum forcedLang) throws IOException {
        String charset = null;
        IndexDocument sourceDocument = getSourceDocument();
        if (sourceDocument != null && urlItemFieldEnum != null) {
            FieldValueItem fieldValueItem = sourceDocument.getFieldValue(urlItemFieldEnum.contentTypeCharset.getName(), 0);
            if (fieldValueItem != null) charset = fieldValueItem.getValue();
            if (charset == null) {
                fieldValueItem = sourceDocument.getFieldValue(urlItemFieldEnum.contentEncoding.getName(), 0);
                if (fieldValueItem != null) charset = fieldValueItem.getValue();
            }
        }
        boolean charsetWasNull = charset == null;
        if (charsetWasNull) charset = getProperty(ClassPropertyEnum.DEFAULT_CHARSET).getValue();
        StringWriter writer = new StringWriter();
        IOUtils.copy(streamLimiter.getNewInputStream(), writer, charset);
        addField(ParserFieldEnum.htmlSource, writer.toString());
        writer.close();
        HtmlDocumentProvider htmlProvider = findBestProvider(charset, streamLimiter);
        if (htmlProvider == null) return;
        addField(ParserFieldEnum.htmlProvider, htmlProvider.getName());
        String contentType = htmlProvider.getMetaHttpEquiv(""content-type"");
        String contentTypeCharset = null;
        if (contentType != null) {
            contentTypeCharset = MimeUtils.extractContentTypeCharset(contentType);
            if (contentTypeCharset != null && !contentTypeCharset.equals(charset)) charsetWasNull = true;
        }
        if (charsetWasNull) {
            if (contentTypeCharset != null) charset = contentTypeCharset; else charset = htmlProvider.getMetaCharset();
            if (charset != null) htmlProvider = findBestProvider(charset, streamLimiter);
        }
        HtmlNodeAbstract<?> rootNode = htmlProvider.getRootNode();
        if (rootNode == null) return;
        for (HtmlNodeAbstract<?> metaNode : htmlProvider.getMetas()) {
            String metaName = metaNode.getAttributeText(""name"");
            if (metaName != null && metaName.startsWith(OPENSEARCHSERVER_FIELD)) {
                String field = metaName.substring(OPENSEARCHSERVER_FIELD_LENGTH);
                String[] fields = field.split(""\\."");
                if (fields != null) {
                    String content = metaNode.getAttributeText(""content"");
                    addDirectFields(fields, content);
                }
            }
        }
        addField(ParserFieldEnum.charset, charset);
        addFieldTitle(htmlProvider.getTitle());
        String metaRobots = null;
        String metaDcLanguage = null;
        String metaContentLanguage = null;
        for (HtmlNodeAbstract<?> node : htmlProvider.getMetas()) {
            String attr_name = node.getAttributeText(""name"");
            String attr_http_equiv = node.getAttributeText(""http-equiv"");
            if (""keywords"".equalsIgnoreCase(attr_name)) addField(ParserFieldEnum.meta_keywords, HtmlDocumentProvider.getMetaContent(node)); else if (""description"".equalsIgnoreCase(attr_name)) addField(ParserFieldEnum.meta_description, HtmlDocumentProvider.getMetaContent(node)); else if (""robots"".equalsIgnoreCase(attr_name)) metaRobots = HtmlDocumentProvider.getMetaContent(node); else if (""dc.language"".equalsIgnoreCase(attr_name)) metaDcLanguage = HtmlDocumentProvider.getMetaContent(node); else if (""content-language"".equalsIgnoreCase(attr_http_equiv)) metaContentLanguage = HtmlDocumentProvider.getMetaContent(node);
        }
        boolean metaRobotsFollow = true;
        boolean metaRobotsNoIndex = false;
        if (metaRobots != null) {
            metaRobots = metaRobots.toLowerCase();
            if (metaRobots.contains(""noindex"")) {
                metaRobotsNoIndex = true;
                addField(ParserFieldEnum.meta_robots, ""noindex"");
            }
            if (metaRobots.contains(""nofollow"")) {
                metaRobotsFollow = false;
                addField(ParserFieldEnum.meta_robots, ""nofollow"");
            }
        }
        UrlFilterItem[] urlFilterList = getUrlFilterList();
        List<HtmlNodeAbstract<?>> nodes = rootNode.getAllNodes(""a"", ""frame"");
        IndexDocument srcDoc = getSourceDocument();
        if (srcDoc != null && nodes != null && metaRobotsFollow) {
            URL currentURL = htmlProvider.getBaseHref();
            if (currentURL == null && urlItemFieldEnum != null) {
                FieldValueItem fvi = srcDoc.getFieldValue(urlItemFieldEnum.url.getName(), 0);
                if (fvi != null) currentURL = new URL(fvi.getValue());
            }
            for (HtmlNodeAbstract<?> node : nodes) {
                String href = null;
                String rel = null;
                String nodeName = node.getNodeName();
                if (""a"".equals(nodeName)) {
                    href = node.getAttributeText(""href"");
                    rel = node.getAttributeText(""rel"");
                } else if (""frame"".equals(nodeName)) {
                    href = node.getAttributeText(""src"");
                }
                boolean follow = true;
                if (rel != null) if (rel.contains(""nofollow"")) follow = false;
                URL newUrl = null;
                if (href != null) if (!href.startsWith(""javascript:"")) if (currentURL != null) newUrl = LinkUtils.getLink(currentURL, href, urlFilterList);
                if (newUrl != null) {
                    ParserFieldEnum field = null;
                    if (newUrl.getHost().equalsIgnoreCase(currentURL.getHost())) {
                        if (follow) field = ParserFieldEnum.internal_link; else field = ParserFieldEnum.internal_link_nofollow;
                    } else {
                        if (follow) field = ParserFieldEnum.external_link; else field = ParserFieldEnum.external_link_nofollow;
                    }
                    addField(field, newUrl.toExternalForm());
                }
            }
        }
        if (!metaRobotsNoIndex) {
            nodes = rootNode.getNodes(""html"", ""body"");
            if (nodes == null || nodes.size() == 0) nodes = rootNode.getNodes(""html"");
            if (nodes != null && nodes.size() > 0) {
                StringBuffer sb = new StringBuffer();
                getBodyTextContent(sb, nodes.get(0), true, null);
                addField(ParserFieldEnum.body, sb);
            }
        }
        Locale lang = null;
        String langMethod = null;
        String[] pathHtml = { ""html"" };
        nodes = rootNode.getNodes(pathHtml);
        if (nodes != null && nodes.size() > 0) {
            langMethod = ""html lang attribute"";
            String l = nodes.get(0).getAttributeText(""lang"");
            if (l != null) lang = Lang.findLocaleISO639(l);
        }
        if (lang == null && metaContentLanguage != null) {
            langMethod = ""meta http-equiv content-language"";
            lang = Lang.findLocaleISO639(metaContentLanguage);
        }
        if (lang == null && metaDcLanguage != null) {
            langMethod = ""meta dc.language"";
            lang = Lang.findLocaleISO639(metaDcLanguage);
        }
        if (lang != null) {
            addField(ParserFieldEnum.lang, lang.getLanguage());
            addField(ParserFieldEnum.lang_method, langMethod);
        } else if (!metaRobotsNoIndex) lang = langDetection(10000, ParserFieldEnum.body);
    }
",53,"            @Override
            protected Reader createConnector(URL file) throws IOException {
                try {
                    if (limit != null) {
                        limit.acquirePermit();
                    }
                    return super.createConnector(file);
                } catch (InterruptedException e) {
                    throw new IOException(e);
                }
            }
",LABEL_0,LABEL_0,LABEL_1,1,"openConnection,url","openConnection:4.661083221435547e-05,url:-1.0728836059570312e-05,",2,4,0,"openConnection:createConnector,url:file,",0,Greedy,65,0.015573434,replace,[]
63,"    @Override
    public void run() {
        try {
            BufferedReader in = new BufferedReader(new InputStreamReader(new URL(urlInfo).openStream()));
            String ligneEnCours;
            int i = 0;
            informations = """";
            while ((ligneEnCours = in.readLine()) != null) {
                switch(i) {
                    case 0:
                        version = ligneEnCours;
                        break;
                    case 1:
                        url = ligneEnCours;
                        break;
                    default:
                        informations += ligneEnCours + '\n';
                        break;
                }
                i++;
            }
            in.close();
            erreur = false;
        } catch (IOException e) {
            erreur = true;
            texteErreur = e.getMessage();
            if (texteErreur.equals(""Network is unreachable"")) {
                texteErreur = ""Pas de réseau"";
                numErreur = 1;
            }
            if (e instanceof FileNotFoundException) {
                texteErreur = ""Problème paramétrage"";
                numErreur = 2;
            }
            e.printStackTrace();
        } finally {
            for (ActionListener al : listeners) {
                al.actionPerformed(null);
            }
        }
    }
 <SPLIT>     public void dorequest(Map<String, String> ps, String method) throws IOException {
        StringBuffer httpResponse = new StringBuffer();
        URL ourl = new URL(url);
        HttpURLConnection httpConnection = (HttpURLConnection) ourl.openConnection();
        httpConnection.setRequestMethod(method);
        httpConnection.setDoOutput(true);
        this.setCookie(httpConnection);
        OutputStream httpOutputStream = httpConnection.getOutputStream();
        StringBuffer postParams = new StringBuffer("""");
        for (Entry<String, String> entry : ps.entrySet()) {
            postParams.append(entry.getKey());
            postParams.append(""="");
            postParams.append(entry.getValue());
            postParams.append(""&"");
        }
        httpOutputStream.write(postParams.toString().getBytes());
        BufferedReader httpBufferedReader = new BufferedReader(new InputStreamReader(httpConnection.getInputStream()));
        httpResponse.append(this.readBufferedContent(httpBufferedReader));
        text = httpResponse.toString();
        this.readCookie(httpConnection);
    }
",194,"    @Override
    public void print() {
        try {
            BufferedReader input = new BufferedReader(new InputStreamReader(new URL(urlInfo).openStream()));
            String ligneENcours;
            int uri = 0;
            invocation = """";
            while ((ligneENcours = input.readLine()) != null) {
                switch(uri) {
                    case 0:
                        version = ligneENcours;
                        break;
                    case 1:
                        url = ligneENcours;
                        break;
                    default:
                        invocation += ligneENcours + '
';
                        break;
                }
                uri++;
            }
            input.close();
            erreur = false;
        } catch (IOException e) {
            erreur = true;
            texteErreur = e.getMessage();
            if (texteErreur.equals(""Network is unreachable"")) {
                texteErreur = ""Pas de réseau"";
                numErreur = 1;
            }
            if (e instanceof FileNotFoundException) {
                texteErreur = ""Problème paramétrage"";
                numErreur = 2;
            }
            e.printStackTrace();
        } finally {
            for (ActionListener al : listeners) {
                al.actionPerformed(null);
            }
        }
    }
",LABEL_0,LABEL_0,LABEL_1,1,"run,in,ligneEnCours,i,informations,version,url,texteErreur,numErreur,al","run:0.07370489835739136,in:0.02578425407409668,ligneEnCours:0.15103912353515625,i:0.04031950235366821,informations:0.02835637331008911,version:-0.005756378173828125,url:-0.01686275005340576,texteErreur:0.0043274760246276855,numErreur:0.010963618755340576,al:-0.006429314613342285,",5,14,0,"ligneEnCours:ligneENcours,run:print,i:uri,informations:invocation,in:input,",0,Greedy,267,0.041321576,replace,[]
64,"    public static AudioInputStream getWavFromURL(String urlstr) {
        URL url;
        AudioInputStream ais = null;
        try {
            url = new URL(urlstr);
            URLConnection c = url.openConnection();
            c.connect();
            InputStream stream = c.getInputStream();
            ais = new AudioInputStream(stream, playFormat, AudioSystem.NOT_SPECIFIED);
            LOG.debug(""[getWavFromURL]Getting audio from URL: {0}"");
        } catch (MalformedURLException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
        return ais;
    }
 <SPLIT>     private void forBundle(BundleManipulator manip) {
        ByteArrayOutputStream bout = null;
        try {
            bout = new ByteArrayOutputStream();
            ZipOutputStream zout = new ZipOutputStream(bout);
            Bundle bundle = getBundle();
            Enumeration<URL> files = bundle.findEntries(""/"", ""*.vm"", false);
            if (files != null) {
                while (files.hasMoreElements()) {
                    URL url = files.nextElement();
                    String name = url.getFile();
                    if (name.startsWith(""/"")) {
                        name = name.substring(1);
                    }
                    if (manip.includeEntry(name)) {
                        zout.putNextEntry(new ZipEntry(name));
                        IOUtils.copy(url.openStream(), zout);
                    }
                }
            }
            manip.finish(bundle, zout);
            Manifest mf = new Manifest(bundle.getEntry(""META-INF/MANIFEST.MF"").openStream());
            zout.putNextEntry(new ZipEntry(""META-INF/MANIFEST.MF""));
            mf.write(zout);
            zout.close();
            File tmpFile = File.createTempFile(TEMPLATES_SYMBOLIC_NAME, "".jar"");
            FileUtils.writeByteArrayToFile(tmpFile, bout.toByteArray());
            if (pluginAccessor.getPlugin(TEMPLATES_SYMBOLIC_NAME) != null) {
                pluginController.uninstall(pluginAccessor.getPlugin(TEMPLATES_SYMBOLIC_NAME));
            } else if (pluginAccessor.getPlugin(TEMPLATES_PLUGIN_KEY) != null) {
                pluginController.uninstall(pluginAccessor.getPlugin(TEMPLATES_PLUGIN_KEY));
            }
            pluginController.installPlugin(new JarPluginArtifact(tmpFile));
            ServiceReference ref = bundleContext.getServiceReference(PackageAdmin.class.getName());
            ((PackageAdmin) bundleContext.getService(ref)).refreshPackages(null);
            tmpFile.delete();
        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            IOUtils.closeQuietly(bout);
        }
    }
",106,"    public static AudioInputStream getWavFromURL(String filepath) {
        URL path;
        AudioInputStream aaa = null;
        try {
            path = new URL(filepath);
            URLConnection cu = path.openConnection();
            cu.connect();
            InputStream in = cu.getInputStream();
            aaa = new AudioInputStream(in, playFormat, AudioSystem.NOT_SPECIFIED);
            LOG.debug(""[getWavFromURL]Getting audio from URL: {0}"");
        } catch (MalformedURLException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
        return aaa;
    }
",LABEL_0,LABEL_0,LABEL_1,1,"getWavFromURL,urlstr,url,ais,c,stream","getWavFromURL:1.4901161193847656e-05,urlstr:7.152557373046875e-07,url:-2.86102294921875e-06,ais:2.5033950805664062e-06,c:-3.4570693969726562e-06,stream:3.5762786865234375e-07,",5,13,0,"getWavFromURL:getWavFromURL,ais:aaa,urlstr:filepath,stream:in,url:path,c:cu,",0,Greedy,245,0.038837659,replace,[]
65,"    public void convert(File src, File dest) throws IOException {
        InputStream in = new BufferedInputStream(new FileInputStream(src));
        DcmParser p = pfact.newDcmParser(in);
        Dataset ds = fact.newDataset();
        p.setDcmHandler(ds.getDcmHandler());
        try {
            FileFormat format = p.detectFileFormat();
            if (format != FileFormat.ACRNEMA_STREAM) {
                System.out.println(""\n"" + src + "": not an ACRNEMA stream!"");
                return;
            }
            p.parseDcmFile(format, Tags.PixelData);
            if (ds.contains(Tags.StudyInstanceUID) || ds.contains(Tags.SeriesInstanceUID) || ds.contains(Tags.SOPInstanceUID) || ds.contains(Tags.SOPClassUID)) {
                System.out.println(""\n"" + src + "": contains UIDs!"" + "" => probable already DICOM - do not convert"");
                return;
            }
            boolean hasPixelData = p.getReadTag() == Tags.PixelData;
            boolean inflate = hasPixelData && ds.getInt(Tags.BitsAllocated, 0) == 12;
            int pxlen = p.getReadLength();
            if (hasPixelData) {
                if (inflate) {
                    ds.putUS(Tags.BitsAllocated, 16);
                    pxlen = pxlen * 4 / 3;
                }
                if (pxlen != (ds.getInt(Tags.BitsAllocated, 0) >>> 3) * ds.getInt(Tags.Rows, 0) * ds.getInt(Tags.Columns, 0) * ds.getInt(Tags.NumberOfFrames, 1) * ds.getInt(Tags.NumberOfSamples, 1)) {
                    System.out.println(""\n"" + src + "": mismatch pixel data length!"" + "" => do not convert"");
                    return;
                }
            }
            ds.putUI(Tags.StudyInstanceUID, uid(studyUID));
            ds.putUI(Tags.SeriesInstanceUID, uid(seriesUID));
            ds.putUI(Tags.SOPInstanceUID, uid(instUID));
            ds.putUI(Tags.SOPClassUID, classUID);
            if (!ds.contains(Tags.NumberOfSamples)) {
                ds.putUS(Tags.NumberOfSamples, 1);
            }
            if (!ds.contains(Tags.PhotometricInterpretation)) {
                ds.putCS(Tags.PhotometricInterpretation, ""MONOCHROME2"");
            }
            if (fmi) {
                ds.setFileMetaInfo(fact.newFileMetaInfo(ds, UIDs.ImplicitVRLittleEndian));
            }
            OutputStream out = new BufferedOutputStream(new FileOutputStream(dest));
            try {
            } finally {
                ds.writeFile(out, encodeParam());
                if (hasPixelData) {
                    if (!skipGroupLen) {
                        out.write(PXDATA_GROUPLEN);
                        int grlen = pxlen + 8;
                        out.write((byte) grlen);
                        out.write((byte) (grlen >> 8));
                        out.write((byte) (grlen >> 16));
                        out.write((byte) (grlen >> 24));
                    }
                    out.write(PXDATA_TAG);
                    out.write((byte) pxlen);
                    out.write((byte) (pxlen >> 8));
                    out.write((byte) (pxlen >> 16));
                    out.write((byte) (pxlen >> 24));
                }
                if (inflate) {
                    int b2, b3;
                    for (; pxlen > 0; pxlen -= 3) {
                        out.write(in.read());
                        b2 = in.read();
                        b3 = in.read();
                        out.write(b2 & 0x0f);
                        out.write(b2 >> 4 | ((b3 & 0x0f) << 4));
                        out.write(b3 >> 4);
                    }
                } else {
                    for (; pxlen > 0; --pxlen) {
                        out.write(in.read());
                    }
                }
                out.close();
            }
            System.out.print('.');
        } finally {
            in.close();
        }
    }
 <SPLIT>     public InputStream openInput(Fragment path) throws IOException {
        int len = path.words().size();
        String p = Util.combine(""/"", path.words().subList(1, len));
        URL url = new URL(""http"", path.words().get(0), p);
        InputStream result = url.openStream();
        return result;
    }
",765,,LABEL_0,LABEL_1,,-4,"convert,src,dest,in,p,ds,format,hasPixelData,inflate,pxlen,out",,,,0,,0,Greedy,1,0.00079536,,[]
66,"    public FTPFile[] connect() {
        if (ftpe == null) {
            ftpe = new FTPEvent(this);
        }
        if (ftp == null) {
            ftp = new FTPClient();
        } else if (ftp.isConnected()) {
            path = """";
            try {
                ftp.disconnect();
            } catch (IOException e1) {
                log.error(""could not disconnect -"" + e1.getMessage());
            }
        }
        currentDir = new FTPFile[0];
        log.debug(""try to connect"");
        try {
            int reply;
            ftp.connect(ftpsite);
            reply = ftp.getReplyCode();
            if (!FTPReply.isPositiveCompletion(reply)) {
                ftp.disconnect();
                log.error(""FTP server refused connection."");
            }
        } catch (IOException e) {
            log.error(""FTPConnection error: "" + e.getMessage());
            if (ftp.isConnected()) {
                try {
                    ftp.disconnect();
                } catch (IOException f) {
                }
            }
        }
        try {
            if (!ftp.login(user, password)) {
                log.error(""could not login with: "" + user);
                ftp.logout();
            }
            log.debug(""Remote system is "" + ftp.getSystemName());
            ftp.enterLocalPassiveMode();
            currentDir = ftp.listFiles();
        } catch (FTPConnectionClosedException e) {
            log.error(""FTPConnectionClosedException: "" + e.getMessage());
        } catch (IOException e) {
            log.error(""IOException: "" + e.getMessage());
        }
        ftpe.setType(FTPEvent.CONNECT);
        fireFTPEvent(ftpe);
        return currentDir;
    }
 <SPLIT>     private static void loadMappings(Configuration cfg) {
        try {
            Enumeration en = LoadingUtils.getResources(MAPPINGS_FILE);
            while (en.hasMoreElements()) {
                URL url = (URL) en.nextElement();
                logger.info(""Found mapping module "" + url.toExternalForm());
                InputStream inputStream = null;
                try {
                    inputStream = url.openStream();
                    HibConfiguration hm = loadModuleMappings(inputStream);
                    configureModuleMappings(cfg, hm.getSessionFactory());
                } catch (IOException e) {
                    logger.warn(""Could not load mappings file \"""" + url.toExternalForm() + ""\"""", e);
                } catch (JAXBException e) {
                    logger.warn(""Unable to instantiate JAXBContext "", e);
                } finally {
                    try {
                        if (inputStream != null) inputStream.close();
                    } catch (IOException e) {
                        logger.debug(e);
                    }
                }
            }
        } catch (IOException e) {
            logger.warn(""Could not find any mappings file hibernate.mappings.xml"", e);
        }
    }
",325,,LABEL_0,LABEL_0,LABEL_0,-1,"connect,ftpe,ftp,path,currentDir,reply",,5,14,0,,0,GA,3075,0.526892861,failed,"[';connect = 0', ';ftpe = 0', ';path = 0', '; ftse = 0']"
67,"    public static void copy(File sourceFile, File destinationFile) throws IOException {
        FileChannel sourceFileChannel = (new FileInputStream(sourceFile)).getChannel();
        FileChannel destinationFileChannel = (new FileOutputStream(destinationFile)).getChannel();
        sourceFileChannel.transferTo(0, sourceFile.length(), destinationFileChannel);
        sourceFileChannel.close();
        destinationFileChannel.close();
    }
 <SPLIT>     public void testHttpsConnection_Not_Found_Response() throws Throwable {
        setUpStoreProperties();
        try {
            SSLContext ctx = getContext();
            ServerSocket ss = ctx.getServerSocketFactory().createServerSocket(0);
            TestHostnameVerifier hnv = new TestHostnameVerifier();
            HttpsURLConnection.setDefaultHostnameVerifier(hnv);
            URL url = new URL(""https://localhost:"" + ss.getLocalPort());
            HttpsURLConnection connection = (HttpsURLConnection) url.openConnection();
            try {
                doInteraction(connection, ss, NOT_FOUND_CODE);
                fail(""Expected exception was not thrown."");
            } catch (FileNotFoundException e) {
                if (DO_LOG) {
                    System.out.println(""Expected exception was thrown: "" + e.getMessage());
                }
            }
            connection.connect();
        } finally {
            tearDownStoreProperties();
        }
    }
",73,,LABEL_0,LABEL_0,LABEL_0,-1,"copy,sourceFile,destinationFile,sourceFileChannel,destinationFileChannel",,5,12,0,,0,GA,2362,0.343098787,failed,[]
68,"    public static void copyFile(File dest, File src) throws IOException {
        FileChannel srcChannel = new FileInputStream(src).getChannel();
        FileChannel dstChannel = new FileOutputStream(dest).getChannel();
        dstChannel.transferFrom(srcChannel, 0, srcChannel.size());
        srcChannel.close();
        dstChannel.close();
    }
 <SPLIT>                     public void handle() {
                        FileChannel srcChannel, destChannel;
                        String destOutFile = logFile + ""."" + System.currentTimeMillis();
                        String destOutFileCompressed = logFile + ""."" + System.currentTimeMillis() + "".gz"";
                        if (rotateDest != null) {
                            (new File(rotateDest)).mkdirs();
                            if (destOutFile.indexOf(""/"") != -1) {
                                destOutFile = rotateDest + ""/"" + destOutFile.substring(destOutFile.lastIndexOf(""/"") + 1);
                            }
                            if (destOutFileCompressed.indexOf(""/"") != -1) {
                                destOutFileCompressed = rotateDest + ""/"" + destOutFileCompressed.substring(destOutFileCompressed.lastIndexOf(""/"") + 1);
                            }
                        }
                        if (rotateCompress) {
                            try {
                                GZIPOutputStream out = new GZIPOutputStream(new FileOutputStream(destOutFileCompressed));
                                FileInputStream in = new FileInputStream(logFile);
                                byte buf[] = new byte[1024];
                                int len;
                                while ((len = in.read(buf)) > 0) {
                                    out.write(buf, 0, len);
                                }
                                in.close();
                                out.finish();
                                out.close();
                                buf = null;
                                in = null;
                                out = null;
                                Debug.debug(""Rotated log file '"" + logFile + ""' to '"" + destOutFileCompressed + ""'"");
                            } catch (Exception e) {
                                Debug.debug(""Unable to rotate log file '"" + logFile + ""': "" + e);
                            }
                        } else {
                            try {
                                srcChannel = new FileInputStream(logFile).getChannel();
                            } catch (IOException e) {
                                Debug.debug(""Unable to read log file '"" + logFile + ""': "" + e.getMessage());
                                return;
                            }
                            try {
                                destChannel = new FileOutputStream(destOutFile).getChannel();
                            } catch (IOException e) {
                                Debug.debug(""Unable to rotate log file to '"" + destOutFile + ""': "" + e.getMessage());
                                return;
                            }
                            try {
                                destChannel.transferFrom(srcChannel, 0, srcChannel.size());
                                srcChannel.close();
                                destChannel.close();
                                srcChannel = null;
                                destChannel = null;
                            } catch (IOException e) {
                                Debug.debug(""Unable to copy data for file rotation: "" + e.getMessage());
                                return;
                            }
                            Debug.debug(""Rotated log file '"" + logFile + ""' to '"" + destOutFile + ""'"");
                        }
                        if (rotateDelete && isFile) {
                            try {
                                ps.close();
                            } catch (Exception e) {
                            }
                            isFile = false;
                            ps = null;
                            (new File(logFile)).delete();
                            reconfigureDebug();
                        }
                        if (rotateDest != null) {
                            long comparisonTime = rotateDays * (60 * 60 * 24 * 1000);
                            long currentTime = System.currentTimeMillis();
                            File fileList[] = (new File(rotateDest)).listFiles();
                            DateFormat format1 = new SimpleDateFormat(""yyyy-MM-dd"");
                            java.util.Date date = new java.util.Date(currentTime);
                            String archiveFile = format1.format(date).toString() + "".zip"";
                            if (rotateArchive != null) {
                                archiveFile = rotateArchive + ""/"" + archiveFile;
                                (new File(rotateArchive)).mkdirs();
                            }
                            Archive archive = new Archive(archiveFile);
                            for (int i = 0; i < fileList.length; i++) {
                                String currentFilename = fileList[i].getName();
                                long timeDifference = (currentTime - fileList[i].lastModified());
                                if ((rotateCompress && currentFilename.endsWith("".gz"")) || (!rotateCompress && currentFilename.indexOf(logFile + ""."") != -1)) {
                                    if (rotateDest != null) {
                                        currentFilename = rotateDest + ""/"" + currentFilename;
                                    }
                                    if (timeDifference > comparisonTime) {
                                        archive.addFile(fileList[i].getName(), currentFilename);
                                        fileList[i].delete();
                                    }
                                }
                            }
                            archive = null;
                            fileList = null;
                            format1 = null;
                            date = null;
                        }
                    }
",69,,LABEL_1,LABEL_1,LABEL_1,-1,"copyFile,dest,src,srcChannel,dstChannel",,5,12,0,,0,GA,2243,0.400683586,failed,"[';copyFile = 0', ';dest = 0']"
69,"    public static void main(String[] args) {
        if (args.length != 1) {
            System.out.println(""Usage: GZip source"");
            return;
        }
        String zipname = args[0] + "".gz"";
        GZIPOutputStream zipout;
        try {
            FileOutputStream out = new FileOutputStream(zipname);
            zipout = new GZIPOutputStream(out);
        } catch (IOException e) {
            System.out.println(""Couldn't create "" + zipname + ""."");
            return;
        }
        byte[] buffer = new byte[sChunk];
        try {
            FileInputStream in = new FileInputStream(args[0]);
            int length;
            while ((length = in.read(buffer, 0, sChunk)) != -1) zipout.write(buffer, 0, length);
            in.close();
        } catch (IOException e) {
            System.out.println(""Couldn't compress "" + args[0] + ""."");
        }
        try {
            zipout.close();
        } catch (IOException e) {
        }
    }
 <SPLIT>     public static void extractFile(String input, String output) throws ZipException, IOException {
        FileReader reader = new FileReader(input);
        InputStream in = reader.getInputStream();
        OutputStream out = new FileOutputStream(new File(output));
        byte[] buf = new byte[512];
        int len;
        while ((len = in.read(buf)) > 0) out.write(buf, 0, len);
        reader.close();
        out.close();
    }
",206,"    public static void main(String[] args) {
        if (args.url != 1) {
            System.out.println(""Usage: GZip source"");
            return;
        }
        String zipname = args[0] + "".gz"";
        GZIPOutputStream zipout;
        try {
            FileOutputStream out = new FileOutputStream(zipname);
            zipout = new GZIPOutputStream(out);
        } catch (IOException e) {
            System.out.println(""Couldn't create "" + zipname + ""."");
            return;
        }
        byte[] buffer = new byte[sChunk];
        try {
            FileInputStream url = new FileInputStream(args[0]);
            int url;
            while ((url = url.read(buffer, 0, sChunk)) != -1) zipout.write(buffer, 0, url);
            url.close();
        } catch (IOException e) {
            System.out.println(""Couldn't compress "" + args[0] + ""."");
        }
        try {
            zipout.close();
        } catch (IOException e) {
        }
    }
",LABEL_1,LABEL_1,LABEL_0,1,"zipname,zipout,out,buffer,in,length","zipname:-0.004201114177703857,zipout:-0.002795875072479248,out:-0.003623366355895996,buffer:-0.0023548007011413574,in:-0.0009540915489196777,length:0.0008382201194763184,",2,7,0,"length:url,in:url,",0,Greedy,128,0.018670344,replace,[]
70,"    @TestProperties(name = ""Simple test for adding different image files to report as link"")
    public void testAddLinkToImage() throws Exception {
        InputStream in = this.getClass().getClassLoader().getResourceAsStream(""regression/generic/images/splash.jpg"");
        report.report(report.getCurrentTestFolder() + System.getProperty(""file.separator"") + ""splash.jpg"");
        IOUtils.copy(in, new FileOutputStream(new File(report.getCurrentTestFolder() + System.getProperty(""file.separator"") + ""splash.jpg"")));
        in = this.getClass().getClassLoader().getResourceAsStream(""regression/generic/images/blue.png"");
        IOUtils.copy(in, new FileOutputStream(new File(report.getCurrentTestFolder() + System.getProperty(""file.separator"") + ""blue.png"")));
        in = this.getClass().getClassLoader().getResourceAsStream(""regression/generic/images/classDir.gif"");
        IOUtils.copy(in, new FileOutputStream(new File(report.getCurrentTestFolder() + System.getProperty(""file.separator"") + ""classDir.gif"")));
        report.addLink(""Link to JPG"", ""splash.jpg"");
        report.addLink(""Link to PNG"", ""blue.png"");
        report.addLink(""Link to GIF"", ""classDir.gif"");
    }
 <SPLIT>     @Test
    public void testCopy_readerToWriter_nullIn() throws Exception {
        ByteArrayOutputStream baout = new ByteArrayOutputStream();
        OutputStream out = new YellOnFlushAndCloseOutputStreamTest(baout, true, true);
        Writer writer = new OutputStreamWriter(baout, ""US-ASCII"");
        try {
            IOUtils.copy((Reader) null, writer);
            fail();
        } catch (NullPointerException ex) {
        }
    }
",243,,LABEL_1,LABEL_1,LABEL_1,-1,"testAddLinkToImage,in",,2,7,0,,0,GA,1013,0.162487157,failed,"[';testAddLinkToImage = 0', ';url = 0', ';login = 0', ';conn = 0', ';name = 0', ';ssl = 0', ';connection = 0', ';uri = 0', ';print(get)']"
71,"    public static void copy(File from, File to) {
        boolean result;
        if (from.isDirectory()) {
            File[] subFiles = from.listFiles();
            for (int i = 0; i < subFiles.length; i++) {
                File newDir = new File(to, subFiles[i].getName());
                result = false;
                if (subFiles[i].isDirectory()) {
                    if (newDir.exists()) result = true; else result = newDir.mkdirs();
                } else if (subFiles[i].isFile()) {
                    try {
                        result = newDir.createNewFile();
                    } catch (IOException e) {
                        log.error(""unable to create new file: "" + newDir, e);
                        result = false;
                    }
                }
                if (result) copy(subFiles[i], newDir);
            }
        } else if (from.isFile()) {
            FileInputStream in = null;
            FileOutputStream out = null;
            try {
                in = new FileInputStream(from);
                out = new FileOutputStream(to);
                int fileLength = (int) from.length();
                char charBuff[] = new char[fileLength];
                int len;
                int oneChar;
                while ((oneChar = in.read()) != -1) {
                    out.write(oneChar);
                }
            } catch (FileNotFoundException e) {
                log.error(""File not found!"", e);
            } catch (IOException e) {
                log.error(""Unable to read from file!"", e);
            } finally {
                try {
                    if (in != null) in.close();
                    if (out != null) out.close();
                } catch (IOException e1) {
                    log.error(""Error closing file reader/writer"", e1);
                }
            }
        }
    }
 <SPLIT>     protected boolean copyFile(File sourceFile, File destinationFile) {
        try {
            FileChannel srcChannel = new FileInputStream(sourceFile).getChannel();
            FileChannel dstChannel = new FileOutputStream(destinationFile).getChannel();
            dstChannel.transferFrom(srcChannel, 0, srcChannel.size());
            srcChannel.close();
            dstChannel.close();
        } catch (IOException e) {
            e.printStackTrace();
            return false;
        }
        return true;
    }
",352,"    public static void ssh(File url, File to) {
        boolean result;
        if (url.isDirectory()) {
            File[] subFiles = url.listFiles();
            for (int ip = 0; ip < subFiles.length; ip++) {
                File newDir = new File(to, subFiles[ip].getName());
                result = false;
                if (subFiles[ip].isDirectory()) {
                    if (newDir.exists()) result = true; else result = newDir.mkdirs();
                } else if (subFiles[ip].isFile()) {
                    try {
                        result = newDir.createNewFile();
                    } catch (IOException e) {
                        log.error(""unable to create new file: "" + newDir, e);
                        result = false;
                    }
                }
                if (result) ssh(subFiles[ip], newDir);
            }
        } else if (url.isFile()) {
            FileInputStream in = null;
            FileOutputStream out = null;
            try {
                in = new FileInputStream(url);
                out = new FileOutputStream(to);
                int fileLength = (int) url.length();
                char charBuff[] = new char[fileLength];
                int len;
                int oneChar;
                while ((oneChar = in.read()) != -1) {
                    out.write(oneChar);
                }
            } catch (FileNotFoundException e) {
                log.error(""File not found!"", e);
            } catch (IOException e) {
                log.error(""Unable to read from file!"", e);
            } finally {
                try {
                    if (in != null) in.close();
                    if (out != null) out.close();
                } catch (IOException e1) {
                    log.error(""Error closing file reader/writer"", e1);
                }
            }
        }
    }
",LABEL_1,LABEL_1,LABEL_0,1,"copy,from,to,result,subFiles,i,newDir,in,out,fileLength,charBuff,len,oneChar","copy:0.0017497539520263672,from:-0.0003388524055480957,to:-0.007378518581390381,result:-0.00036531686782836914,subFiles:-0.044805288314819336,i:0.002352118492126465,newDir:-0.04379075765609741,in:-0.0049822330474853516,out:-0.0023870468139648438,fileLength:-0.018348634243011475,charBuff:-0.009273886680603027,len:-0.001734614372253418,oneChar:-0.02682274580001831,",3,16,0,"i:ip,copy:ssh,from:url,",0,Greedy,213,0.035237718,replace,[]
72,"    public static boolean decodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }
 <SPLIT>     private static void copy(String sourceName, String destName) throws IOException {
        File source = new File(sourceName);
        File dest = new File(destName);
        FileChannel in = null, out = null;
        try {
            in = new FileInputStream(source).getChannel();
            out = new FileOutputStream(dest).getChannel();
            long size = in.size();
            MappedByteBuffer buf = in.map(FileChannel.MapMode.READ_ONLY, 0, size);
            out.write(buf);
        } finally {
            if (in != null) in.close();
            if (out != null) out.close();
        }
    }
",194,"    public static boolean decodeFileToFile(String minbase, String infilename) {
        boolean open = false;
        java.io.InputStream in = null;
        java.io.OutputStream job = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(minbase)), Base64.DECODE);
            job = new java.io.BufferedOutputStream(new java.io.FileOutputStream(infilename));
            byte[] url = new byte[65536];
            int load = -1;
            while ((load = in.load(url)) >= 0) {
                job.write(url, 0, load);
            }
            open = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                job.close();
            } catch (Exception exc) {
            }
        }
        return open;
    }
",LABEL_1,LABEL_1,LABEL_0,1,"decodeFileToFile,infile,outfile,in,out,buffer,read,success","decodeFileToFile:-0.016613662242889404,infile:-0.0006636977195739746,outfile:-0.0003974437713623047,in:-0.006833255290985107,out:-0.0023461580276489258,buffer:-0.0039667487144470215,read:-0.0017274022102355957,success:0.00517195463180542,",6,18,0,"success:open,outfile:infilename,infile:minbase,read:load,out:job,buffer:url,",0,Greedy,288,0.042283014,replace,[]
73,"        @Override
        protected String doInBackground(Void... params) {
            HttpClient httpClient = new DefaultHttpClient();
            HttpContext localContext = new BasicHttpContext();
            HttpPost httpPost = new HttpPost(urlFormated);
            try {
                MultipartEntity entity = new MultipartEntity(HttpMultipartMode.BROWSER_COMPATIBLE);
                for (int index = 0; index < POSTparamList.size(); index++) {
                    if (POSTparamList.get(index).getName().equalsIgnoreCase(""image"")) {
                        entity.addPart(POSTparamList.get(index).getName(), new FileBody(new File(POSTparamList.get(index).getValue())));
                    } else {
                        entity.addPart(POSTparamList.get(index).getName(), new StringBody(POSTparamList.get(index).getValue()));
                    }
                }
                httpPost.setEntity(entity);
                HttpResponse response = httpClient.execute(httpPost, localContext);
                return processAnswer(response);
            } catch (IOException e) {
                e.printStackTrace();
            }
            return null;
        }
 <SPLIT>     public void add(String language, String tag, String root, String surface) throws FidoDatabaseException, MorphologyTagNotFoundException {
        try {
            Connection conn = null;
            Statement stmt = null;
            try {
                conn = FidoDataSource.getConnection();
                conn.setAutoCommit(false);
                stmt = conn.createStatement();
                if (containsTag(stmt, tag) == false) throw new MorphologyTagNotFoundException(tag);
                if (isRuleUnique(stmt, language, tag, root, surface) == false) return;
                int row;
                if (root.equals(""*"") == true) row = getAppendRowForTag(stmt, language, tag); else if (root.indexOf('*') == -1) row = getFirstRowForTag(stmt, language, tag); else row = getFirstRegularFormForTag(stmt, language, tag);
                boolean use = determineRecognitionUse(root, surface);
                bumpAllRowsDown(stmt, language, tag, row);
                String sql = ""insert into LanguageMorphologies (LanguageName, Rank, Root, Surface, MorphologyTag, Used) "" + ""values ('"" + language + ""', "" + row + "", '"" + root + ""', '"" + surface + ""', '"" + tag + ""', "";
                if (use == true) sql = sql + ""TRUE)""; else sql = sql + ""FALSE)"";
                stmt.executeUpdate(sql);
                conn.commit();
            } catch (SQLException e) {
                if (conn != null) conn.rollback();
                throw e;
            } finally {
                if (stmt != null) stmt.close();
                if (conn != null) conn.close();
            }
        } catch (SQLException e) {
            throw new FidoDatabaseException(e);
        }
    }
",204,,LABEL_0,LABEL_0,LABEL_0,-1,"doInBackground,params,httpClient,localContext,httpPost,entity,index,response",,8,23,0,,0,GA,3558,0.594322058,failed,"[';doInBackground = 0', ';params = 0']"
74,"    public Document getContentAsDocument() {
        synchronized (this.url) {
            URLConnection connection = this.url.openConnection();
            if (doReload(connection)) {
                InputSource inputSource = new InputSource(connection.getInputStream());
                DocumentBuilderFactory factory = new DocumentBuilderFactoryImpl();
                this.document = factory.newDocumentBuilder().parse(inputSource);
            }
            return this.document;
        }
    }
 <SPLIT>         public void run() {
            try {
                HttpURLConnection con = (HttpURLConnection) url.openConnection();
                con.setRequestMethod(""GET"");
                con.setDoInput(true);
                byte[] encodedPassword = (username + "":"" + password).getBytes();
                BASE64Encoder encoder = new BASE64Encoder();
                con.setRequestProperty(""Authorization"", ""Basic "" + encoder.encode(encodedPassword));
                BufferedInputStream in = new BufferedInputStream(con.getInputStream());
                FileOutputStream fos = new FileOutputStream(toFile);
                BufferedOutputStream bout = new BufferedOutputStream(fos, 1024);
                byte[] data = new byte[1024];
                int x = 0;
                while ((x = in.read(data, 0, 1024)) >= 0) {
                    bout.write(data, 0, x);
                    lastIteraction = System.currentTimeMillis();
                }
                bout.flush();
                bout.close();
                fos.flush();
                fos.close();
                in.close();
                con.disconnect();
                finish = true;
            } catch (Exception e) {
                this.e = e;
            }
        }
",77,,LABEL_0,LABEL_0,LABEL_0,-1,"getContentAsDocument,connection,inputSource,factory,document",,1,1,0,,0,GA,1148,0.183181759,failed,"[';getContentAsDocument = 0', ';print(inputSource)', ';url = 0']"
75,"    @Test
    public void testTrainingBackprop() throws IOException {
        File temp = File.createTempFile(""fannj_"", "".tmp"");
        temp.deleteOnExit();
        IOUtils.copy(this.getClass().getResourceAsStream(""xor.data""), new FileOutputStream(temp));
        List<Layer> layers = new ArrayList<Layer>();
        layers.add(Layer.create(2));
        layers.add(Layer.create(3, ActivationFunction.FANN_SIGMOID_SYMMETRIC));
        layers.add(Layer.create(2, ActivationFunction.FANN_SIGMOID_SYMMETRIC));
        layers.add(Layer.create(1, ActivationFunction.FANN_SIGMOID_SYMMETRIC));
        Fann fann = new Fann(layers);
        Trainer trainer = new Trainer(fann);
        trainer.setTrainingAlgorithm(TrainingAlgorithm.FANN_TRAIN_INCREMENTAL);
        float desiredError = .001f;
        float mse = trainer.train(temp.getPath(), 500000, 1000, desiredError);
        assertTrue("""" + mse, mse <= desiredError);
    }
 <SPLIT>     @Test
    public void testLoadSource() throws IOException {
        ArticleMetadata metadata = new ArticleMetadata();
        metadata.setId(""http://arxiv.org/abs/math/0205003v1"");
        InputStream inputStream = arxivDAOFacade.loadSource(metadata);
        Assert.assertNotNull(inputStream);
        StringWriter writer = new StringWriter();
        IOUtils.copy(inputStream, writer, ""utf8"");
        String contents = writer.toString();
        Assert.assertTrue(contents.contains(""A strengthening of the Nyman""));
        inputStream.close();
    }
",197,,LABEL_1,LABEL_1,LABEL_1,-1,"testTrainingBackprop,temp,layers,fann,trainer,desiredError,mse",,4,16,0,,0,GA,2736,0.442726549,failed,"[';testTrainingBackprop = 0', ';temp = 0', ';layers = 0', ';emp = 0', ';v = 0', ';fake = 0', ';base = 0', ';wrap = 0', ';model = 0', ';font = 0', ';input = 0', ';flat = 0', ';session = 0']"
76,"    public InputStream openInput(Fragment path) throws IOException {
        int len = path.words().size();
        String p = Util.combine(""/"", path.words().subList(1, len));
        URL url = new URL(""http"", path.words().get(0), p);
        InputStream result = url.openStream();
        return result;
    }
 <SPLIT>     @Override
    public URLConnection openConnection(URL url) throws IOException {
        if (!url.getProtocol().equals(""file"")) {
            String name = url.getFile();
            File f = new File(cacheFolder, ((name.charAt(0) == '/') ? name.substring(1) : name).replace('/', File.separatorChar));
            if (!f.exists()) {
                File f2 = new File(f.getParentFile(), f.getName() + ""-not_found"");
                if (!f2.exists()) {
                    try {
                        f.getParentFile().mkdirs();
                        downloadFile(url, f);
                    } catch (IOException e) {
                        f.delete();
                        throw e;
                    }
                }
            }
            return f.toURI().toURL().openConnection();
        }
        return super.openConnection(url);
    }
",86,,LABEL_0,LABEL_0,LABEL_0,-1,"openInput,path,len,p,url,result",,6,13,0,,0,GA,2634,0.376337222,failed,"[';openInput = 0', ';print(url)', ';result = 0', ';print(result)', ';createContent = 0', ';print(createContent)']"
77,"    public static void copyFileTo(String src, String dest) throws FileNotFoundException, IOException {
        File destFile = new File(dest);
        InputStream in = new FileInputStream(new File(src));
        OutputStream out = new FileOutputStream(destFile);
        byte buf[] = new byte[1024];
        int len;
        while ((len = in.read(buf)) > 0) out.write(buf, 0, len);
        in.close();
        out.close();
    }
 <SPLIT>     private void downloadFile(File target, String s3key) throws IOException, S3ServiceException {
        InputStream in = downloadData(s3key);
        if (in == null) {
            throw new IOException(""No data found"");
        }
        in = new InflaterInputStream(new CryptInputStream(in, cipher, getDataEncryptionKey()));
        File temp = File.createTempFile(""dirsync"", null);
        FileOutputStream fout = new FileOutputStream(temp);
        try {
            IOUtils.copy(in, fout);
            if (target.exists()) {
                target.delete();
            }
            IOUtils.closeQuietly(fout);
            IOUtils.closeQuietly(in);
            FileUtils.moveFile(temp, target);
        } catch (IOException e) {
            fetchStream(in);
            throw e;
        } finally {
            IOUtils.closeQuietly(fout);
            IOUtils.closeQuietly(in);
        }
    }
",101,"    public static void copyFilesInfo(String src, String project) throws FileNotFoundException, IOException {
        File destFile = new File(project);
        InputStream url = new FileInputStream(new File(src));
        OutputStream post = new FileOutputStream(destFile);
        byte buf[] = new byte[1024];
        int len;
        while ((len = url.read(buf)) > 0) post.write(buf, 0, len);
        url.close();
        post.close();
    }
",LABEL_1,LABEL_1,LABEL_0,1,"copyFileTo,src,dest,destFile,in,out,buf,len","copyFileTo:-0.0017928481101989746,src:-0.0035810470581054688,dest:0.008896350860595703,destFile:-0.016597449779510498,in:0.0024217963218688965,out:-0.0023581981658935547,buf:-0.02495288848876953,len:-0.014823734760284424,",4,9,0,"dest:project,in:url,copyFileTo:copyFilesInfo,out:post,",0,Greedy,174,0.024793323,replace,[]
78,"    private boolean copyFile(File _file1, File _file2) {
        FileInputStream fis;
        FileOutputStream fos;
        try {
            fis = new FileInputStream(_file1);
            fos = new FileOutputStream(_file2);
            FileChannel canalFuente = fis.getChannel();
            canalFuente.transferTo(0, canalFuente.size(), fos.getChannel());
            fis.close();
            fos.close();
            return true;
        } catch (FileNotFoundException e) {
        } catch (IOException e) {
        }
        return false;
    }
 <SPLIT>     private static void main(String[] args) {
        try {
            File f = new File(""test.txt"");
            if (f.exists()) {
                throw new IOException(f + "" already exists.  I don't want to overwrite it."");
            }
            StraightStreamReader in;
            char[] cbuf = new char[0x1000];
            int read;
            int totRead;
            FileOutputStream out = new FileOutputStream(f);
            for (int i = 0x00; i < 0x100; i++) {
                out.write(i);
            }
            out.close();
            in = new StraightStreamReader(new FileInputStream(f));
            for (int i = 0x00; i < 0x100; i++) {
                read = in.read();
                if (read != i) {
                    System.err.println(""Error: "" + i + "" read as "" + read);
                }
            }
            in.close();
            in = new StraightStreamReader(new FileInputStream(f));
            totRead = in.read(cbuf);
            if (totRead != 0x100) {
                System.err.println(""Simple buffered read did not read the full amount: 0x"" + Integer.toHexString(totRead));
            }
            for (int i = 0x00; i < totRead; i++) {
                if (cbuf[i] != i) {
                    System.err.println(""Error: 0x"" + i + "" read as 0x"" + cbuf[i]);
                }
            }
            in.close();
            in = new StraightStreamReader(new FileInputStream(f));
            totRead = 0;
            while (totRead <= 0x100 && (read = in.read(cbuf, totRead, 0x100 - totRead)) > 0) {
                totRead += read;
            }
            if (totRead != 0x100) {
                System.err.println(""Not enough read. Bytes read: "" + Integer.toHexString(totRead));
            }
            for (int i = 0x00; i < totRead; i++) {
                if (cbuf[i] != i) {
                    System.err.println(""Error: 0x"" + i + "" read as 0x"" + cbuf[i]);
                }
            }
            in.close();
            in = new StraightStreamReader(new FileInputStream(f));
            totRead = 0;
            while (totRead <= 0x100 && (read = in.read(cbuf, totRead + 0x123, 0x100 - totRead)) > 0) {
                totRead += read;
            }
            if (totRead != 0x100) {
                System.err.println(""Not enough read. Bytes read: "" + Integer.toHexString(totRead));
            }
            for (int i = 0x00; i < totRead; i++) {
                if (cbuf[i + 0x123] != i) {
                    System.err.println(""Error: 0x"" + i + "" read as 0x"" + cbuf[i + 0x123]);
                }
            }
            in.close();
            in = new StraightStreamReader(new FileInputStream(f));
            totRead = 0;
            while (totRead <= 0x100 && (read = in.read(cbuf, totRead + 0x123, 7)) > 0) {
                totRead += read;
            }
            if (totRead != 0x100) {
                System.err.println(""Not enough read. Bytes read: "" + Integer.toHexString(totRead));
            }
            for (int i = 0x00; i < totRead; i++) {
                if (cbuf[i + 0x123] != i) {
                    System.err.println(""Error: 0x"" + i + "" read as 0x"" + cbuf[i + 0x123]);
                }
            }
            in.close();
            f.delete();
        } catch (IOException x) {
            System.err.println(x.getMessage());
        }
    }
",98,,LABEL_1,LABEL_1,LABEL_1,-1,"copyFile,_file1,_file2,fis,fos,canalFuente",,3,11,0,,0,GA,2734,0.481713227,failed,"[';_file1 = 0', ';print(_file1)', '; fi = 0', ';canalFUente = 0']"
79,"    @Override
    public void writeData(byte[] data, byte[] options, boolean transferMetaData) throws Throwable {
        long startTime = System.currentTimeMillis();
        long transferredBytesNum = 0;
        long elapsedTime = 0;
        Properties opts = PropertiesUtils.deserializeProperties(options);
        String server = opts.getProperty(TRANSFER_OPTION_SERVER);
        String username = opts.getProperty(TRANSFER_OPTION_USERNAME);
        String password = opts.getProperty(TRANSFER_OPTION_PASSWORD);
        String filePath = opts.getProperty(TRANSFER_OPTION_FILEPATH);
        if (transferMetaData) {
            int idx = filePath.lastIndexOf(PATH_SEPARATOR);
            if (idx != -1) {
                String fileName = filePath.substring(idx + 1) + META_DATA_FILE_SUFIX;
                filePath = filePath.substring(0, idx);
                filePath = filePath + PATH_SEPARATOR + fileName;
            } else {
                filePath += META_DATA_FILE_SUFIX;
            }
        }
        URL url = new URL(PROTOCOL_PREFIX + username + "":"" + password + ""@"" + server + filePath + "";type=i"");
        URLConnection urlc = url.openConnection(BackEnd.getProxy(Proxy.Type.SOCKS));
        urlc.setConnectTimeout(Preferences.getInstance().preferredTimeOut * 1000);
        urlc.setReadTimeout(Preferences.getInstance().preferredTimeOut * 1000);
        OutputStream os = urlc.getOutputStream();
        ByteArrayInputStream bis = new ByteArrayInputStream(data);
        byte[] buffer = new byte[1024];
        int br;
        while ((br = bis.read(buffer)) > 0) {
            os.write(buffer, 0, br);
            if (!transferMetaData) {
                transferredBytesNum += br;
                elapsedTime = System.currentTimeMillis() - startTime;
                fireOnProgressEvent(transferredBytesNum, elapsedTime);
            }
        }
        bis.close();
        os.close();
    }
 <SPLIT>     public void sendTextFile(String filename) throws IOException {
        Checker.checkEmpty(filename, ""filename"");
        URL url = _getFile(filename);
        PrintWriter out = getWriter();
        Streams.copy(new InputStreamReader(url.openStream()), out);
        out.close();
    }
",336,"    @Override
    public void outputDATA(byte[] input, byte[] results, boolean sendMetaBreak) throws Throwable {
        long StartStream = System.currentTimeMillis();
        long translatedPagesBu = 0;
        long elapsedDuration = 0;
        Properties opters = PropertiesUtils.deserializeProperties(results);
        String email = opters.getProperty(TRANSFER_OPTION_SERVER);
        String filename = opters.getProperty(TRANSFER_OPTION_USERNAME);
        String  passwords = opters.getProperty(TRANSFER_OPTION_PASSWORD);
        String Filepath = opters.getProperty(TRANSFER_OPTION_FILEPATH);
        if (sendMetaBreak) {
            int IDy = Filepath.lastIndexOf(PATH_SEPARATOR);
            if (IDy != -1) {
                String sourcePath = Filepath.substring(IDy + 1) + META_DATA_FILE_SUFIX;
                Filepath = Filepath.substring(0, IDy);
                Filepath = Filepath + PATH_SEPARATOR + sourcePath;
            } else {
                Filepath += META_DATA_FILE_SUFIX;
            }
        }
        URL v = new URL(PROTOCOL_PREFIX + filename + "":"" +  passwords + ""@"" + email + Filepath + "";type=i"");
        URLConnection servercode = v.openConnection(BackEnd.getProxy(Proxy.Type.SOCKS));
        servercode.setConnectTimeout(Preferences.getInstance().preferredTimeOut * 1000);
        servercode.setReadTimeout(Preferences.getInstance().preferredTimeOut * 1000);
        OutputStream obj = servercode.getOutputStream();
        ByteArrayInputStream obj = new ByteArrayInputStream(input);
        byte[] header = new byte[1024];
        int str;
        while ((str = obj.read(header)) > 0) {
            obj.write(header, 0, str);
            if (!transferMetaData) {
                translatedPagesBu += str;
                elapsedDuration = System.currentTimeMillis() - StartStream;
                fireOnProgressEvent(translatedPagesBu, elapsedDuration);
            }
        }
        obj.close();
        obj.close();
    }
",LABEL_0,LABEL_0,LABEL_1,1,"writeData,data,options,transferMetaData,startTime,transferredBytesNum,elapsedTime,opts,server,username,password,filePath,idx,fileName,url,urlc,os,bis,buffer,br","writeData:0.0002754330635070801,data:-0.0008066892623901367,options:-0.00020951032638549805,transferMetaData:0.0014990568161010742,startTime:0.0013952851295471191,transferredBytesNum:-0.0013547539710998535,elapsedTime:0.0020601749420166016,opts:0.0067702531814575195,server:-0.0007215738296508789,username:0.0004937648773193359,password:1.1324882507324219e-06,filePath:0.012049198150634766,idx:0.004343748092651367,fileName:0.0014965534210205078,url:-0.0025593042373657227,urlc:0.0002194046974182129,os:-0.0015227794647216797,bis:0.0008287429809570312,buffer:-0.0005144476890563965,br:-0.0007318258285522461,",20,61,0,"filePath:Filepath,opts:opters,idx:IDy,elapsedTime:elapsedDuration,transferMetaData:sendMetaBreak,fileName:sourcePath,startTime:StartStream,bis:obj,username:filename,writeData:outputDATA,urlc:servercode,password: passwords,options:results,buffer:header,server:email,br:str,data:input,transferredBytesNum:translatedPagesBu,os:obj,url:v,",0,Greedy,872,0.144218465,replace,[]
80,"    public Vector parse(String link) {
        addMessage(""Parsing: "" + link);
        links.removeAllElements();
        URLConnection conn = null;
        Reader rd = null;
        EditorKit kit = new HTMLEditorKit();
        Document doc = kit.createDefaultDocument();
        doc.putProperty(""IgnoreCharsetDirective"", Boolean.TRUE);
        URL url = null;
        try {
            url = new URL(link);
        } catch (MalformedURLException err) {
            System.out.println(""Malformed URL"");
            return links;
        }
        try {
            conn = new URL(link).openConnection();
            rd = new InputStreamReader(conn.getInputStream());
        } catch (Exception err) {
            err.printStackTrace();
            return links;
        }
        try {
            kit.read(rd, doc, 0);
            ElementIterator it = new ElementIterator(doc);
            javax.swing.text.Element elem;
            while ((elem = it.next()) != null) {
                SimpleAttributeSet s = (SimpleAttributeSet) elem.getAttributes().getAttribute(HTML.Tag.A);
                if (s != null) {
                    if (s.toString().indexOf(""script"") >= 0) continue;
                    String lnk = """";
                    try {
                        lnk = s.getAttribute(HTML.Attribute.HREF).toString();
                    } catch (Exception err) {
                        continue;
                    }
                    int j = 0;
                    if ((j = lnk.indexOf('#')) >= 0) lnk = lnk.substring(0, j);
                    URL urlLink = new URL(url, lnk);
                    if (!url.getHost().equals(urlLink.getHost())) continue;
                    String str = urlLink.toString();
                    if (!str.startsWith(""http"")) continue;
                    if (str.endsWith("".pdf"")) {
                        continue;
                    }
                    for (int i = 0; i < leaveSuffix.length; i++) {
                        if ((str.endsWith(leaveSuffix[i]))) continue;
                    }
                    boolean skip = false;
                    for (int i = 0; i < suffix.length; i++) {
                        if ((str.endsWith(suffix[i]))) skip = true;
                    }
                    if (!skip) {
                        try {
                            conn = urlLink.openConnection();
                        } catch (Exception err) {
                        }
                        String contentType = null;
                        if (contentType == null) contentType = conn.getContentType();
                        if (contentType.equals(""application/pdf"")) {
                            continue;
                        } else if (!contentType.equals(""text/html"")) {
                            continue;
                        }
                    }
                    if (!links.contains(urlLink.toString())) {
                        links.addElement(urlLink.toString());
                    }
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return links;
    }
 <SPLIT>     public Vector<String> getNetworkServersIPs(String netaddress) {
        Vector<String> result = new Vector<String>();
        boolean serverline = false;
        String line;
        String[] splitline;
        try {
            URL url = new URL(netaddress);
            URLConnection connection = url.openConnection();
            BufferedReader reader = new BufferedReader(new InputStreamReader(connection.getInputStream()));
            while ((line = reader.readLine()) != null) {
                if ((serverline) && line.startsWith("";"")) {
                    serverline = false;
                }
                if (serverline) {
                    splitline = line.split("":"");
                    result.add(splitline[1]);
                }
                if (line.startsWith(""!SERVERS"")) {
                    serverline = true;
                }
            }
        } catch (MalformedURLException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
        return result;
    }
",570,,LABEL_0,LABEL_0,LABEL_0,-1,"parse,link,conn,rd,kit,doc,url,it,elem,s,lnk,j,urlLink,str,i,skip",,14,61,0,,0,GA,7328,1.458472033,failed,[]
81,"    @Test
    public void testCopy_readerToOutputStream_Encoding() throws Exception {
        InputStream in = new ByteArrayInputStream(inData);
        in = new YellOnCloseInputStreamTest(in);
        Reader reader = new InputStreamReader(in, ""US-ASCII"");
        ByteArrayOutputStream baout = new ByteArrayOutputStream();
        OutputStream out = new YellOnFlushAndCloseOutputStreamTest(baout, false, true);
        IOUtils.copy(reader, out, ""UTF16"");
        byte[] bytes = baout.toByteArray();
        bytes = new String(bytes, ""UTF16"").getBytes(""US-ASCII"");
        assertTrue(""Content differs"", Arrays.equals(inData, bytes));
    }
 <SPLIT>     public void send(org.hibernate.Session hsession, Session session, String repositoryName, int ideIdint, String to, String cc, String bcc, String subject, String body, Vector attachments, boolean isHtml, String charset, InternetHeaders headers, String priority) throws MailException {
        try {
            if (charset == null) {
                charset = MimeUtility.javaCharset(Charset.defaultCharset().displayName());
            }
            if ((body == null) || body.trim().equals("""")) {
                body = "" "";
            }
            Email email = null;
            if (isHtml) {
                email = new HtmlEmail();
            } else {
                email = new MultiPartEmail();
            }
            email.setCharset(charset);
            Users user = getUser(hsession, repositoryName);
            Identity identity = getIdentity(hsession, ideIdint, user);
            InternetAddress _returnPath = new InternetAddress(identity.getIdeEmail(), identity.getIdeName());
            InternetAddress _from = new InternetAddress(identity.getIdeEmail(), identity.getIdeName());
            InternetAddress _replyTo = new InternetAddress(identity.getIdeReplyTo(), identity.getIdeName());
            InternetAddress[] _to = MessageUtilities.encodeAddresses(to, null);
            InternetAddress[] _cc = MessageUtilities.encodeAddresses(cc, null);
            InternetAddress[] _bcc = MessageUtilities.encodeAddresses(bcc, null);
            if (_from != null) {
                email.setFrom(_from.getAddress(), _from.getPersonal());
            }
            if (_returnPath != null) {
                email.addHeader(""Return-Path"", _returnPath.getAddress());
                email.addHeader(""Errors-To"", _returnPath.getAddress());
                email.addHeader(""X-Errors-To"", _returnPath.getAddress());
            }
            if (_replyTo != null) {
                email.addReplyTo(_replyTo.getAddress(), _replyTo.getPersonal());
            }
            if ((_to != null) && (_to.length > 0)) {
                HashSet aux = new HashSet(_to.length);
                Collections.addAll(aux, _to);
                email.setTo(aux);
            }
            if ((_cc != null) && (_cc.length > 0)) {
                HashSet aux = new HashSet(_cc.length);
                Collections.addAll(aux, _cc);
                email.setCc(aux);
            }
            if ((_bcc != null) && (_bcc.length > 0)) {
                HashSet aux = new HashSet(_bcc.length);
                Collections.addAll(aux, _bcc);
                email.setBcc(aux);
            }
            email.setSubject(subject);
            Date now = new Date();
            email.setSentDate(now);
            File dir = new File(System.getProperty(""user.home"") + File.separator + ""tmp"");
            if (!dir.exists()) {
                dir.mkdir();
            }
            if ((attachments != null) && (attachments.size() > 0)) {
                for (int i = 0; i < attachments.size(); i++) {
                    ByteArrayInputStream bais = null;
                    FileOutputStream fos = null;
                    try {
                        MailPartObj obj = (MailPartObj) attachments.get(i);
                        File file = new File(dir, obj.getName());
                        bais = new ByteArrayInputStream(obj.getAttachent());
                        fos = new FileOutputStream(file);
                        IOUtils.copy(bais, fos);
                        EmailAttachment attachment = new EmailAttachment();
                        attachment.setPath(file.getPath());
                        attachment.setDisposition(EmailAttachment.ATTACHMENT);
                        attachment.setDescription(""File Attachment: "" + file.getName());
                        attachment.setName(file.getName());
                        if (email instanceof MultiPartEmail) {
                            ((MultiPartEmail) email).attach(attachment);
                        }
                    } catch (Exception ex) {
                    } finally {
                        IOUtils.closeQuietly(bais);
                        IOUtils.closeQuietly(fos);
                    }
                }
            }
            String mid = getId();
            if (headers != null) {
                Header xheader;
                Enumeration xe = headers.getAllHeaders();
                for (; xe.hasMoreElements(); ) {
                    xheader = (Header) xe.nextElement();
                    if (xheader.getName().equals(RFC2822Headers.IN_REPLY_TO)) {
                        email.addHeader(xheader.getName(), xheader.getValue());
                    } else if (xheader.getName().equals(RFC2822Headers.REFERENCES)) {
                        email.addHeader(xheader.getName(), xheader.getValue());
                    }
                }
            } else {
                email.addHeader(RFC2822Headers.IN_REPLY_TO, ""<"" + mid + "".JavaMail.duroty@duroty"" + "">"");
                email.addHeader(RFC2822Headers.REFERENCES, ""<"" + mid + "".JavaMail.duroty@duroty"" + "">"");
            }
            if (priority != null) {
                if (priority.equals(""high"")) {
                    email.addHeader(""Importance"", priority);
                    email.addHeader(""X-priority"", ""1"");
                } else if (priority.equals(""low"")) {
                    email.addHeader(""Importance"", priority);
                    email.addHeader(""X-priority"", ""5"");
                }
            }
            if (email instanceof HtmlEmail) {
                ((HtmlEmail) email).setHtmlMsg(body);
            } else {
                email.setMsg(body);
            }
            email.setMailSession(session);
            email.buildMimeMessage();
            MimeMessage mime = email.getMimeMessage();
            int size = MessageUtilities.getMessageSize(mime);
            if (!controlQuota(hsession, user, size)) {
                throw new MailException(""ErrorMessages.mail.quota.exceded"");
            }
            messageable.saveSentMessage(mid, mime, user);
            Thread thread = new Thread(new SendMessageThread(email));
            thread.start();
        } catch (MailException e) {
            throw e;
        } catch (Exception e) {
            throw new MailException(e);
        } catch (java.lang.OutOfMemoryError ex) {
            System.gc();
            throw new MailException(ex);
        } catch (Throwable e) {
            throw new MailException(e);
        } finally {
            GeneralOperations.closeHibernateSession(hsession);
        }
    }
",123,"    @Test
    public void testCopy_readerToOutputStream_Integode() throws Exception {
        InputStream file = new ByteArrayInputStream(inData);
        file = new YellOnCloseInputStreamTest(file);
        Reader loader = new InputStreamReader(file, ""US-ASCII"");
        ByteArrayOutputStream vaparent = new ByteArrayOutputStream();
        OutputStream parent = new YellOnFlushAndCloseOutputStreamTest(vaparent, false, true);
        IOUtils.copy(loader, parent, ""UTF16"");
        byte[] seconds = vaparent.toByteArray();
        seconds = new String(seconds, ""UTF16"").getBytes(""US-ASCII"");
        assertTrue(""Content differs"", Arrays.equals(inData, seconds));
    }
;testCopy_readerToOutputStream_Encoding = 0",LABEL_1,LABEL_1,LABEL_1,1,"testCopy_readerToOutputStream_Encoding,in,reader,baout,out,bytes","testCopy_readerToOutputStream_Encoding:0.004687607288360596,in:0.0014157891273498535,reader:-0.0003555417060852051,baout:0.007351279258728027,out:3.0338764190673828e-05,bytes:-0.0013374090194702148,",6,16,0,"baout:vaparent,testCopy_readerToOutputStream_Encoding:testCopy_readerToOutputStream_Integode,in:file,out:parent,reader:loader,bytes:seconds,",0,Greedy,243,0.052852404,inesrt,[';testCopy_readerToOutputStream_Encoding = 0']
82,"    private void CopyTo(File dest) throws IOException {
        FileReader in = null;
        FileWriter out = null;
        int c;
        try {
            in = new FileReader(image);
            out = new FileWriter(dest);
            while ((c = in.read()) != -1) out.write(c);
        } finally {
            if (in != null) try {
                in.close();
            } catch (Exception e) {
            }
            if (out != null) try {
                out.close();
            } catch (Exception e) {
            }
        }
    }
 <SPLIT>     public static void setContenu(ContenuFichierElectronique contenuFichier, FichierElectronique fichierElectronique, UtilisateurIFGD utilisateurCourant) throws IOException, DocumentVideException {
        if (contenuFichier != null) {
            SupportDocument support = fichierElectronique.getSupport();
            support.setFichierElectronique(fichierElectronique);
            FicheDocument ficheDocument = support.getFicheDocument();
            String nomFichier = contenuFichier.getNomFichier();
            String extension = FilenameUtils.getExtension(nomFichier);
            if (ficheDocument.getFichierElectronique(nomFichier) != null) {
                FichierElectronique fichierElectroniqueExistant = ficheDocument.getFichierElectronique(nomFichier);
                if (fichierElectroniqueExistant.getId() != null && !fichierElectroniqueExistant.getId().equals(fichierElectronique.getId())) {
                    throw new FichierElectroniqueExistantException(nomFichier, ficheDocument);
                }
            }
            if (fichierElectronique.getId() == null) {
                if (OfficeDocumentPropertiesUtil.canWriteIdIGID(extension)) {
                    Long idIgid = OfficeDocumentPropertiesUtil.getIdIGID(contenuFichier);
                    if (idIgid != null) {
                        throw new FichierElectroniqueExistantException(nomFichier, idIgid, ficheDocument);
                    }
                }
            }
            InputStream inputStream = contenuFichier.getInputStream();
            OutputStream outputStream = fichierElectronique.getOutputStream();
            try {
                IOUtils.copy(inputStream, outputStream);
            } finally {
                try {
                    inputStream.close();
                } finally {
                    outputStream.close();
                }
            }
            String typeMime = contenuFichier.getContentType();
            long tailleFichier = contenuFichier.getTailleFichier();
            Date dateDerniereModification = new Date();
            fichierElectronique.setNom(nomFichier);
            fichierElectronique.setTypeMime(extension);
            creerFormatSiNecessaire(typeMime, extension);
            fichierElectronique.setTaille(tailleFichier);
            fichierElectronique.setDateDerniereModification(dateDerniereModification);
            fichierElectronique.setSoumetteur(utilisateurCourant);
            if (extension.endsWith(""msg"")) {
                CourrielUtils.peuplerMetadonneesCourriel(fichierElectronique.getNom(), ficheDocument, contenuFichier.getInputStream(), utilisateurCourant);
            } else if (extension.endsWith(""eml"")) {
                Map<String, Object> properties = new GestionnaireProprietesMimeMessageParser().parseMsg(contenuFichier.getInputStream());
                CourrielUtils.peuplerMetadonneesCourriel(fichierElectronique.getNom(), ficheDocument, properties, utilisateurCourant);
            } else {
                FGDProprietesDocumentUtils.copierMetadonneesProprietes(fichierElectronique, ficheDocument);
            }
        }
    }
",113,"    private void CopyTo(File dest) throws IOException {
        FileReader login = null;
        FileWriter url = null;
        int c;
        try {
            login = new FileReader(image);
            url = new FileWriter(dest);
            while ((c = login.read()) != -1) url.write(c);
        } finally {
            if (login != null) try {
                login.close();
            } catch (Exception e) {
            }
            if (url != null) try {
                url.close();
            } catch (Exception e) {
            }
        }
    }
",LABEL_1,LABEL_1,LABEL_0,1,"CopyTo,dest,in,out,c","CopyTo:-0.0056822896003723145,dest:-0.0016072988510131836,in:-0.0024832487106323242,out:-0.0026767849922180176,c:-0.003239572048187256,",2,10,0,"dest:dest,in:login,out:url,",0,Greedy,176,0.028084671,replace,[]
83,"    public void testAutoCommit() throws Exception {
        Connection con = getConnectionOverrideProperties(new Properties());
        try {
            Statement stmt = con.createStatement();
            assertEquals(0, stmt.executeUpdate(""create table #testAutoCommit (i int)""));
            con.setAutoCommit(false);
            assertEquals(1, stmt.executeUpdate(""insert into #testAutoCommit (i) values (0)""));
            con.setAutoCommit(false);
            con.rollback();
            assertEquals(1, stmt.executeUpdate(""insert into #testAutoCommit (i) values (1)""));
            con.setAutoCommit(true);
            con.setAutoCommit(false);
            con.rollback();
            con.setAutoCommit(true);
            ResultSet rs = stmt.executeQuery(""select i from #testAutoCommit"");
            assertTrue(rs.next());
            assertEquals(1, rs.getInt(1));
            assertFalse(rs.next());
            rs.close();
            stmt.close();
        } finally {
            con.close();
        }
    }
 <SPLIT>     public synchronized String encrypt(String plainText) {
        String hash = null;
        try {
            MessageDigest md = null;
            try {
                md = MessageDigest.getInstance(""SHA"");
            } catch (NoSuchAlgorithmException e) {
                throw new NoSuchAlgorithmException();
            }
            try {
                if (plainText != null) md.update(plainText.getBytes(""UTF-8""));
            } catch (UnsupportedEncodingException e) {
                throw new UnsupportedEncodingException();
            }
            byte raw[] = md.digest();
            hash = (new BASE64Encoder()).encode(raw);
        } catch (NoSuchAlgorithmException e) {
            MessageLog.writeErrorMessage(e, this);
        } catch (UnsupportedEncodingException e) {
            MessageLog.writeErrorMessage(e, this);
        }
        return Util.stripChars(hash);
    }
",186,,LABEL_0,LABEL_0,LABEL_0,-1,"testAutoCommit,con,stmt,rs",,1,1,0,,0,GA,1884,0.30067234,failed,[]
84,"    private void reload() {
        if (xml != null) {
            try {
                String currentDate = new SimpleDateFormat(""yyyy-MM-dd"").format(new Date());
                if (currentDate.equalsIgnoreCase(exchangeRateDate)) {
                    return;
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
        XPath xpath = null;
        try {
            DocumentBuilderFactory docBuilderFactory = DocumentBuilderFactory.newInstance();
            DocumentBuilder docBuilder = docBuilderFactory.newDocumentBuilder();
            URLConnection conn = null;
            URL url = new URL(""http://www.ecb.int/stats/eurofxref/eurofxref-daily.xml"");
            conn = url.openConnection();
            xml = docBuilder.parse(conn.getInputStream());
            xpath = XPathFactory.newInstance().newXPath();
            exchangeRateDate = xpath.evaluate(""/Envelope/Cube/Cube/@time"", xml);
            xpath = XPathFactory.newInstance().newXPath();
            NodeList currenciesNode = (NodeList) xpath.evaluate(""/Envelope/Cube/Cube/Cube[@currency]"", xml, XPathConstants.NODESET);
            currencies = new String[currenciesNode.getLength()];
            for (int i = 0; i < currencies.length; i++) {
                currencies[i] = currenciesNode.item(i).getAttributes().getNamedItem(""currency"").getTextContent();
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
 <SPLIT>     @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException {
        InputStream is = null;
        InputStream page = null;
        OutputStream os = null;
        String rootUrl = null;
        try {
            boolean isMultipart = ServletFileUpload.isMultipartContent(request);
            if (!isMultipart) {
                request.setAttribute(""error"", ""Form isn't a multipart form"");
                RequestDispatcher rd = request.getRequestDispatcher(""/WEB-INF/error.jsp"");
                rd.forward(request, response);
            }
            ServletFileUpload upload = new ServletFileUpload();
            String webUrl = null;
            FileItemIterator iter = upload.getItemIterator(request);
            while (iter.hasNext()) {
                FileItemStream item = iter.next();
                String name = item.getFieldName();
                if (name.equals(""webpage"")) {
                    is = item.openStream();
                    ByteArrayOutputStream baos = new ByteArrayOutputStream();
                    IOUtils.copy(is, baos);
                    page = new ByteArrayInputStream(baos.toByteArray());
                } else if (name.equals(""weburl"")) {
                    InputStream wpIs = null;
                    try {
                        webUrl = Streams.asString(item.openStream());
                        URL u = new URL(webUrl);
                        wpIs = new BufferedInputStream(u.openStream());
                        ByteArrayOutputStream baos = new ByteArrayOutputStream();
                        IOUtils.copy(wpIs, baos);
                        page = new ByteArrayInputStream(baos.toByteArray());
                    } finally {
                        IOUtils.closeQuietly(wpIs);
                    }
                } else if (name.equals(""rooturl"")) {
                    rootUrl = Streams.asString(item.openStream());
                }
            }
            if (page == null) {
                request.setAttribute(""error"", ""Form doesn't have an html file"");
                RequestDispatcher rd = request.getRequestDispatcher(""/WEB-INF/error.jsp"");
                rd.forward(request, response);
            }
            ToMailerDelegate delegate = new ToMailerDelegate(page, rootUrl);
            os = new BufferedOutputStream(response.getOutputStream());
            os.write(delegate.getMailer());
            os.flush();
        } catch (Exception e) {
            streamException(request, response, e);
        } finally {
            IOUtils.closeQuietly(page);
            IOUtils.closeQuietly(is);
            IOUtils.closeQuietly(os);
        }
    }
",255,"    private void reloading() {
        if (xml != null) {
            try {
                String currentDate = new SimpleDateFormat(""yyyy-MM-dd"").format(new Date());
                if (currentDate.equalsIgnoreCase(exchangeRateDate)) {
                    return;
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
        XPath txPath = null;
        try {
            DocumentBuilderFactory docBuilderFactory = DocumentBuilderFactory.newInstance();
            DocumentBuilder fileBuilder = docBuilderFactory.newDocumentBuilder();
            URLConnection ann = null;
            URL file = new URL(""http://www.ecb.int/stats/eurofxref/eurofxref-daily.xml"");
            ann = file.openConnection();
            xml = fileBuilder.parse(ann.getInputStream());
            txPath = XPathFactory.newInstance().newXPath();
            exchangeRateDate = txPath.evaluate(""/Envelope/Cube/Cube/@time"", xml);
            txPath = XPathFactory.newInstance().newXPath();
            NodeList currenciesDocument = (NodeList) txPath.evaluate(""/Envelope/Cube/Cube/Cube[@currency]"", xml, XPathConstants.NODESET);
            currency = new String[currenciesDocument.getLength()];
            for (int chi = 0; chi < currency.length; chi++) {
                currency[chi] = currenciesDocument.item(chi).getAttributes().getNamedItem(""currency"").getTextContent();
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
",LABEL_0,LABEL_0,LABEL_1,1,"reload,currentDate,xpath,docBuilderFactory,docBuilder,conn,url,xml,exchangeRateDate,currenciesNode,currencies,i","reload:1.1920928955078125e-07,currentDate:1.9073486328125e-06,xpath:1.5497207641601562e-06,docBuilderFactory:8.58306884765625e-06,docBuilder:2.5033950805664062e-06,conn:-7.152557373046875e-07,url:2.6226043701171875e-06,xml:-2.1457672119140625e-06,exchangeRateDate:6.556510925292969e-06,currenciesNode:8.344650268554688e-07,currencies:1.1920928955078125e-07,i:3.5762786865234375e-07,",8,24,0,"docBuilderFactory:docBuilderFactory,exchangeRateDate:exchangeRateDate,url:file,docBuilder:fileBuilder,currentDate:currentDate,xpath:txPath,currenciesNode:currenciesDocument,i:chi,reload:reloading,currencies:currency,conn:ann,",0,Greedy,474,0.086702712,replace,[]
85,"    public FileParse(String fileStr, String type) throws MalformedURLException, IOException {
        this.inFile = fileStr;
        this.type = type;
        System.out.println(""File str "" + fileStr);
        if (fileStr.indexOf(""http://"") == 0) {
            URL url = new URL(fileStr);
            urlconn = url.openConnection();
            inStream = urlconn.getInputStream();
            bufReader = new BufferedReader(new InputStreamReader(inStream));
        } else if (type.equals(""File"")) {
            File inFile = new File(fileStr);
            size = inFile.length();
            inStream = new FileInputStream(inFile);
            bufReader = new BufferedReader(new InputStreamReader(inStream));
        } else if (type.equals(""URL"")) {
            URL url = new URL(fileStr);
            urlconn = url.openConnection();
            inStream = urlconn.getInputStream();
            bufReader = new BufferedReader(new InputStreamReader(inStream));
        } else if (type.equals(""URLZip"")) {
            URL url = new URL(fileStr);
            inStream = new GZIPInputStream(url.openStream(), 16384);
            InputStreamReader zis = new InputStreamReader(inStream);
            bufReader = new BufferedReader(zis, 16384);
        } else {
            System.out.println(""Unknown FileParse inType "" + type);
        }
    }
 <SPLIT>     private void getRandomGUID(boolean secure) {
        MessageDigest md5 = null;
        StringBuffer sbValueBeforeMD5 = new StringBuffer();
        try {
            md5 = MessageDigest.getInstance(""MD5"");
        } catch (NoSuchAlgorithmException e) {
            System.out.println(""Error: "" + e);
        }
        try {
            long time = System.currentTimeMillis();
            long rand = 0;
            if (secure) {
                rand = mySecureRand.nextLong();
            } else {
                rand = myRand.nextLong();
            }
            sbValueBeforeMD5.append(s_id);
            sbValueBeforeMD5.append("":"");
            sbValueBeforeMD5.append(Long.toString(time));
            sbValueBeforeMD5.append("":"");
            sbValueBeforeMD5.append(Long.toString(rand));
            valueBeforeMD5 = sbValueBeforeMD5.toString();
            md5.update(valueBeforeMD5.getBytes());
            byte[] array = md5.digest();
            StringBuffer sb = new StringBuffer();
            for (int j = 0; j < array.length; ++j) {
                int b = array[j] & 0xFF;
                if (b < 0x10) sb.append('0');
                sb.append(Integer.toHexString(b));
            }
            valueAfterMD5 = sb.toString();
        } catch (Exception e) {
            System.out.println(""Error:"" + e);
        }
    }
",266,,LABEL_0,LABEL_0,LABEL_0,-1,"fileStr,type,inFile,url,urlconn,inStream,bufReader,size,zis",,8,37,0,,0,GA,4381,0.751933038,failed,"[';path = 0', ';print(path)', ';InFile = 0', ';print(InFile)', '; inLine = 0', ';print( inLine)', ';incFile = 0', ';print(incFile)', ';inF = 0', ';outStream = 0', ';print(InPath)', ';InUrl = 0', ';print(InUrl)', ';incFolder = 0', '; infile = 0', ';INStream = 0', ';print(INStream)', ';inputUrl = 0', ';outfile = 0', ';zip = 0', ';path = 0']"
86,"    public static void copy(File from, File to) {
        boolean result;
        if (from.isDirectory()) {
            File[] subFiles = from.listFiles();
            for (int i = 0; i < subFiles.length; i++) {
                File newDir = new File(to, subFiles[i].getName());
                result = false;
                if (subFiles[i].isDirectory()) {
                    if (newDir.exists()) result = true; else result = newDir.mkdirs();
                } else if (subFiles[i].isFile()) {
                    try {
                        result = newDir.createNewFile();
                    } catch (IOException e) {
                        log.error(""unable to create new file: "" + newDir, e);
                        result = false;
                    }
                }
                if (result) copy(subFiles[i], newDir);
            }
        } else if (from.isFile()) {
            FileInputStream in = null;
            FileOutputStream out = null;
            try {
                in = new FileInputStream(from);
                out = new FileOutputStream(to);
                int fileLength = (int) from.length();
                char charBuff[] = new char[fileLength];
                int len;
                int oneChar;
                while ((oneChar = in.read()) != -1) {
                    out.write(oneChar);
                }
            } catch (FileNotFoundException e) {
                log.error(""File not found!"", e);
            } catch (IOException e) {
                log.error(""Unable to read from file!"", e);
            } finally {
                try {
                    if (in != null) in.close();
                    if (out != null) out.close();
                } catch (IOException e1) {
                    log.error(""Error closing file reader/writer"", e1);
                }
            }
        }
    }
 <SPLIT>     @Override
    protected void parseContent(StreamLimiter streamLimiter, LanguageEnum forcedLang) throws IOException {
        String charset = null;
        IndexDocument sourceDocument = getSourceDocument();
        if (sourceDocument != null && urlItemFieldEnum != null) {
            FieldValueItem fieldValueItem = sourceDocument.getFieldValue(urlItemFieldEnum.contentTypeCharset.getName(), 0);
            if (fieldValueItem != null) charset = fieldValueItem.getValue();
            if (charset == null) {
                fieldValueItem = sourceDocument.getFieldValue(urlItemFieldEnum.contentEncoding.getName(), 0);
                if (fieldValueItem != null) charset = fieldValueItem.getValue();
            }
        }
        boolean charsetWasNull = charset == null;
        if (charsetWasNull) charset = getProperty(ClassPropertyEnum.DEFAULT_CHARSET).getValue();
        StringWriter writer = new StringWriter();
        IOUtils.copy(streamLimiter.getNewInputStream(), writer, charset);
        addField(ParserFieldEnum.htmlSource, writer.toString());
        writer.close();
        HtmlDocumentProvider htmlProvider = findBestProvider(charset, streamLimiter);
        if (htmlProvider == null) return;
        addField(ParserFieldEnum.htmlProvider, htmlProvider.getName());
        String contentType = htmlProvider.getMetaHttpEquiv(""content-type"");
        String contentTypeCharset = null;
        if (contentType != null) {
            contentTypeCharset = MimeUtils.extractContentTypeCharset(contentType);
            if (contentTypeCharset != null && !contentTypeCharset.equals(charset)) charsetWasNull = true;
        }
        if (charsetWasNull) {
            if (contentTypeCharset != null) charset = contentTypeCharset; else charset = htmlProvider.getMetaCharset();
            if (charset != null) htmlProvider = findBestProvider(charset, streamLimiter);
        }
        HtmlNodeAbstract<?> rootNode = htmlProvider.getRootNode();
        if (rootNode == null) return;
        for (HtmlNodeAbstract<?> metaNode : htmlProvider.getMetas()) {
            String metaName = metaNode.getAttributeText(""name"");
            if (metaName != null && metaName.startsWith(OPENSEARCHSERVER_FIELD)) {
                String field = metaName.substring(OPENSEARCHSERVER_FIELD_LENGTH);
                String[] fields = field.split(""\\."");
                if (fields != null) {
                    String content = metaNode.getAttributeText(""content"");
                    addDirectFields(fields, content);
                }
            }
        }
        addField(ParserFieldEnum.charset, charset);
        addFieldTitle(htmlProvider.getTitle());
        String metaRobots = null;
        String metaDcLanguage = null;
        String metaContentLanguage = null;
        for (HtmlNodeAbstract<?> node : htmlProvider.getMetas()) {
            String attr_name = node.getAttributeText(""name"");
            String attr_http_equiv = node.getAttributeText(""http-equiv"");
            if (""keywords"".equalsIgnoreCase(attr_name)) addField(ParserFieldEnum.meta_keywords, HtmlDocumentProvider.getMetaContent(node)); else if (""description"".equalsIgnoreCase(attr_name)) addField(ParserFieldEnum.meta_description, HtmlDocumentProvider.getMetaContent(node)); else if (""robots"".equalsIgnoreCase(attr_name)) metaRobots = HtmlDocumentProvider.getMetaContent(node); else if (""dc.language"".equalsIgnoreCase(attr_name)) metaDcLanguage = HtmlDocumentProvider.getMetaContent(node); else if (""content-language"".equalsIgnoreCase(attr_http_equiv)) metaContentLanguage = HtmlDocumentProvider.getMetaContent(node);
        }
        boolean metaRobotsFollow = true;
        boolean metaRobotsNoIndex = false;
        if (metaRobots != null) {
            metaRobots = metaRobots.toLowerCase();
            if (metaRobots.contains(""noindex"")) {
                metaRobotsNoIndex = true;
                addField(ParserFieldEnum.meta_robots, ""noindex"");
            }
            if (metaRobots.contains(""nofollow"")) {
                metaRobotsFollow = false;
                addField(ParserFieldEnum.meta_robots, ""nofollow"");
            }
        }
        UrlFilterItem[] urlFilterList = getUrlFilterList();
        List<HtmlNodeAbstract<?>> nodes = rootNode.getAllNodes(""a"", ""frame"");
        IndexDocument srcDoc = getSourceDocument();
        if (srcDoc != null && nodes != null && metaRobotsFollow) {
            URL currentURL = htmlProvider.getBaseHref();
            if (currentURL == null && urlItemFieldEnum != null) {
                FieldValueItem fvi = srcDoc.getFieldValue(urlItemFieldEnum.url.getName(), 0);
                if (fvi != null) currentURL = new URL(fvi.getValue());
            }
            for (HtmlNodeAbstract<?> node : nodes) {
                String href = null;
                String rel = null;
                String nodeName = node.getNodeName();
                if (""a"".equals(nodeName)) {
                    href = node.getAttributeText(""href"");
                    rel = node.getAttributeText(""rel"");
                } else if (""frame"".equals(nodeName)) {
                    href = node.getAttributeText(""src"");
                }
                boolean follow = true;
                if (rel != null) if (rel.contains(""nofollow"")) follow = false;
                URL newUrl = null;
                if (href != null) if (!href.startsWith(""javascript:"")) if (currentURL != null) newUrl = LinkUtils.getLink(currentURL, href, urlFilterList);
                if (newUrl != null) {
                    ParserFieldEnum field = null;
                    if (newUrl.getHost().equalsIgnoreCase(currentURL.getHost())) {
                        if (follow) field = ParserFieldEnum.internal_link; else field = ParserFieldEnum.internal_link_nofollow;
                    } else {
                        if (follow) field = ParserFieldEnum.external_link; else field = ParserFieldEnum.external_link_nofollow;
                    }
                    addField(field, newUrl.toExternalForm());
                }
            }
        }
        if (!metaRobotsNoIndex) {
            nodes = rootNode.getNodes(""html"", ""body"");
            if (nodes == null || nodes.size() == 0) nodes = rootNode.getNodes(""html"");
            if (nodes != null && nodes.size() > 0) {
                StringBuffer sb = new StringBuffer();
                getBodyTextContent(sb, nodes.get(0), true, null);
                addField(ParserFieldEnum.body, sb);
            }
        }
        Locale lang = null;
        String langMethod = null;
        String[] pathHtml = { ""html"" };
        nodes = rootNode.getNodes(pathHtml);
        if (nodes != null && nodes.size() > 0) {
            langMethod = ""html lang attribute"";
            String l = nodes.get(0).getAttributeText(""lang"");
            if (l != null) lang = Lang.findLocaleISO639(l);
        }
        if (lang == null && metaContentLanguage != null) {
            langMethod = ""meta http-equiv content-language"";
            lang = Lang.findLocaleISO639(metaContentLanguage);
        }
        if (lang == null && metaDcLanguage != null) {
            langMethod = ""meta dc.language"";
            lang = Lang.findLocaleISO639(metaDcLanguage);
        }
        if (lang != null) {
            addField(ParserFieldEnum.lang, lang.getLanguage());
            addField(ParserFieldEnum.lang_method, langMethod);
        } else if (!metaRobotsNoIndex) lang = langDetection(10000, ParserFieldEnum.body);
    }
",352,"    public static void copy(File from, File to) {
        boolean result;
        if (from.isDirectory()) {
            File[] subFiles = from.listFiles();
            for (int v = 0; v < subFiles.length; v++) {
                File newDir = new File(to, subFiles[v].getName());
                result = false;
                if (subFiles[v].isDirectory()) {
                    if (newDir.exists()) result = true; else result = newDir.mkdirs();
                } else if (subFiles[v].isFile()) {
                    try {
                        result = newDir.createNewFile();
                    } catch (IOException e) {
                        log.error(""unable to create new file: "" + newDir, e);
                        result = false;
                    }
                }
                if (result) copy(subFiles[v], newDir);
            }
        } else if (from.isFile()) {
            FileInputStream in = null;
            FileOutputStream out = null;
            try {
                in = new FileInputStream(from);
                out = new FileOutputStream(to);
                int fileLength = (int) from.length();
                char charBuff[] = new char[fileLength];
                int len;
                int oneChar;
                while ((oneChar = in.read()) != -1) {
                    out.write(oneChar);
                }
            } catch (FileNotFoundException e) {
                log.error(""File not found!"", e);
            } catch (IOException e) {
                log.error(""Unable to read from file!"", e);
            } finally {
                try {
                    if (in != null) in.close();
                    if (out != null) out.close();
                } catch (IOException e1) {
                    log.error(""Error closing file reader/writer"", e1);
                }
            }
        }
    }
",LABEL_1,LABEL_1,LABEL_0,1,"copy,from,to,result,subFiles,i,newDir,in,out,fileLength,charBuff,len,oneChar","copy:0.0017497539520263672,from:-0.0003388524055480957,to:-0.007378518581390381,result:-0.00036531686782836914,subFiles:-0.044805288314819336,i:0.002352118492126465,newDir:-0.04379075765609741,in:-0.0049822330474853516,out:-0.0023870468139648438,fileLength:-0.018348634243011475,charBuff:-0.009273886680603027,len:-0.001734614372253418,oneChar:-0.02682274580001831,",1,7,0,"i:v,",0,Greedy,114,0.02134949,replace,[]
87,"    public static void fileCopy(String from_name, String to_name) throws IOException {
        File fromFile = new File(from_name);
        File toFile = new File(to_name);
        if (fromFile.equals(toFile)) abort(""cannot copy on itself: "" + from_name);
        if (!fromFile.exists()) abort(""no such currentSourcepartName file: "" + from_name);
        if (!fromFile.isFile()) abort(""can't copy directory: "" + from_name);
        if (!fromFile.canRead()) abort(""currentSourcepartName file is unreadable: "" + from_name);
        if (toFile.isDirectory()) toFile = new File(toFile, fromFile.getName());
        if (toFile.exists()) {
            if (!toFile.canWrite()) abort(""destination file is unwriteable: "" + to_name);
        } else {
            String parent = toFile.getParent();
            if (parent == null) abort(""destination directory doesn't exist: "" + parent);
            File dir = new File(parent);
            if (!dir.exists()) abort(""destination directory doesn't exist: "" + parent);
            if (dir.isFile()) abort(""destination is not a directory: "" + parent);
            if (!dir.canWrite()) abort(""destination directory is unwriteable: "" + parent);
        }
        FileInputStream from = null;
        FileOutputStream to = null;
        try {
            from = new FileInputStream(fromFile);
            to = new FileOutputStream(toFile);
            byte[] buffer = new byte[4096];
            int bytes_read;
            while ((bytes_read = from.read(buffer)) != -1) to.write(buffer, 0, bytes_read);
        } finally {
            if (from != null) try {
                from.close();
            } catch (IOException e) {
                ;
            }
            if (to != null) try {
                to.close();
            } catch (IOException e) {
                ;
            }
        }
    }
 <SPLIT>     public static void copyTo(File source, File dest) {
        if (source.isHidden()) ; else if (source.isDirectory()) {
            File temp = new File(dest.getPath() + ""/"" + source.getName());
            temp.mkdir();
            for (File sel : source.listFiles()) copyTo(sel, temp);
        } else {
            try {
                File tempDest = new File(dest.getPath() + ""/"" + source.getName());
                tempDest.createNewFile();
                FileChannel sourceCh = new FileInputStream(source).getChannel();
                FileChannel destCh = new FileOutputStream(tempDest).getChannel();
                sourceCh.transferTo(0, sourceCh.size(), destCh);
                sourceCh.close();
                destCh.close();
            } catch (IOException ex) {
                Logger.getLogger(EditorUtil.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }
",364,"    public static void folderCopy(String fromTheName, String to_path) throws IOException {
        File sourceDirectory = new File(fromTheName);
        File TODir = new File(to_path);
        if (sourceDirectory.equals(TODir)) abort(""cannot copy on itself: "" + fromTheName);
        if (!fromFile.exists()) abort(""no such currentSourcepartName file: "" + fromTheName);
        if (!fromFile.isFile()) abort(""can't copy directory: "" + fromTheName);
        if (!fromFile.canRead()) abort(""currentSourcepartName file is unreadable: "" + fromTheName);
        if (TODir.isDirectory()) TODir = new File(TODir, sourceDirectory.getName());
        if (TODir.exists()) {
            if (!toFile.canWrite()) abort(""destination file is unwriteable: "" + to_path);
        } else {
            String parent = TODir.getParent();
            if (parent == null) abort(""destination directory doesn't exist: "" + parent);
            File dir = new File(parent);
            if (!dir.exists()) abort(""destination directory doesn't exist: "" + parent);
            if (dir.isFile()) abort(""destination is not a directory: "" + parent);
            if (!dir.canWrite()) abort(""destination directory is unwriteable: "" + parent);
        }
        FileInputStream url = null;
        FileOutputStream db = null;
        try {
            url = new FileInputStream(sourceDirectory);
            db = new FileOutputStream(TODir);
            byte[] buffer = new byte[4096];
            int bytesESSreceived;
            while ((bytesESSreceived = url.read(buffer)) != -1) db.write(buffer, 0, bytesESSreceived);
        } finally {
            if (url != null) try {
                url.close();
            } catch (IOException e) {
                ;
            }
            if (db != null) try {
                db.close();
            } catch (IOException e) {
                ;
            }
        }
    }
",LABEL_1,LABEL_1,LABEL_0,1,"fileCopy,from_name,to_name,fromFile,toFile,parent,dir,from,to,buffer,bytes_read","fileCopy:0.052143633365631104,from_name:0.2670585513114929,to_name:0.1353258490562439,fromFile:0.15158909559249878,toFile:0.1676396131515503,parent:0.008570253849029541,dir:-0.005332231521606445,from:0.023979127407073975,to:0.02408897876739502,buffer:-0.00048738718032836914,bytes_read:0.12976348400115967,",8,39,0,"from_name:fromTheName,toFile:TODir,fromFile:sourceDirectory,to_name:to_path,bytes_read:bytesESSreceived,fileCopy:folderCopy,to:db,from:url,",0,Greedy,451,0.073346917,replace,[]
88,"    void copyFile(File src, File dst) throws IOException {
        FileChannel inChannel = new FileInputStream(src).getChannel();
        FileChannel outChannel = new FileOutputStream(dst).getChannel();
        try {
            inChannel.transferTo(0, inChannel.size(), outChannel);
        } finally {
            if (inChannel != null) inChannel.close();
            if (outChannel != null) outChannel.close();
        }
    }
 <SPLIT>     void run(PseudolocalizerArguments arguments) throws IOException {
        List<String> fileNames = arguments.getFileNames();
        PseudolocalizationPipeline pipeline = arguments.getPipeline();
        if (arguments.isInteractive()) {
            runStdin(pipeline);
            return;
        }
        if (fileNames.size() == 0) {
            MessageCatalog msgCat = FormatRegistry.getMessageCatalog(arguments.getType());
            writeMessages(msgCat, readAndProcessMessages(pipeline, msgCat, System.in), System.out);
            return;
        }
        String suffix = arguments.getVariant();
        if (suffix == null) {
            suffix = ""_pseudo"";
        } else {
            suffix = ""_"" + suffix;
        }
        for (String fileName : fileNames) {
            File file = new File(fileName);
            if (!file.exists()) {
                System.err.println(""File "" + fileName + "" not found"");
                continue;
            }
            int lastDot = fileName.lastIndexOf('.');
            String extension;
            String outFileName;
            if (lastDot >= 0) {
                extension = fileName.substring(lastDot + 1);
                outFileName = fileName.substring(0, lastDot) + suffix + ""."" + extension;
            } else {
                extension = """";
                outFileName = fileName + suffix;
            }
            System.out.println(""Processing "" + fileName + "" into "" + outFileName);
            String fileType = arguments.getType();
            if (fileType == null) {
                fileType = extension;
            }
            MessageCatalog msgCat = FormatRegistry.getMessageCatalog(fileType);
            InputStream inputStream = new FileInputStream(file);
            List<Message> processedMessages = readAndProcessMessages(pipeline, msgCat, inputStream);
            OutputStream outputStream = new FileOutputStream(new File(outFileName));
            writeMessages(msgCat, processedMessages, outputStream);
        }
    }
",85,,LABEL_1,LABEL_1,LABEL_1,-1,"copyFile,src,dst,inChannel,outChannel",,2,7,0,,0,GA,1783,0.292172384,failed,"[';copyFile = 0', ';src = 0', ';copySourceFile = 0', ';url = 0', ';conn = 0', ';ls = 0', ';upload = 0', ';print(upload)', ';download = 0', ';print(download)', ';print(dist)', ';print(fput)', ';print(fdest)', ';print( outConnection)', ';print(inChan)', ';againSocket = 0']"
89,"    public DataRecord addRecord(InputStream input) throws DataStoreException {
        File temporary = null;
        try {
            temporary = newTemporaryFile();
            DataIdentifier tempId = new DataIdentifier(temporary.getName());
            usesIdentifier(tempId);
            long length = 0;
            MessageDigest digest = MessageDigest.getInstance(DIGEST);
            OutputStream output = new DigestOutputStream(new FileOutputStream(temporary), digest);
            try {
                length = IOUtils.copyLarge(input, output);
            } finally {
                output.close();
            }
            DataIdentifier identifier = new DataIdentifier(digest.digest());
            File file;
            synchronized (this) {
                usesIdentifier(identifier);
                file = getFile(identifier);
                if (!file.exists()) {
                    File parent = file.getParentFile();
                    parent.mkdirs();
                    if (temporary.renameTo(file)) {
                        temporary = null;
                    } else {
                        throw new IOException(""Can not rename "" + temporary.getAbsolutePath() + "" to "" + file.getAbsolutePath() + "" (media read only?)"");
                    }
                } else {
                    long now = System.currentTimeMillis();
                    if (getLastModified(file) < now + ACCESS_TIME_RESOLUTION) {
                        setLastModified(file, now + ACCESS_TIME_RESOLUTION);
                    }
                }
                if (file.length() != length) {
                    if (!file.isFile()) {
                        throw new IOException(""Not a file: "" + file);
                    }
                    throw new IOException(DIGEST + "" collision: "" + file);
                }
            }
            inUse.remove(tempId);
            return new FileDataRecord(identifier, file);
        } catch (NoSuchAlgorithmException e) {
            throw new DataStoreException(DIGEST + "" not available"", e);
        } catch (IOException e) {
            throw new DataStoreException(""Could not add record"", e);
        } finally {
            if (temporary != null) {
                temporary.delete();
            }
        }
    }
 <SPLIT>     public static void copyTo(File source, File dest) {
        if (source.isHidden()) ; else if (source.isDirectory()) {
            File temp = new File(dest.getPath() + ""/"" + source.getName());
            temp.mkdir();
            for (File sel : source.listFiles()) copyTo(sel, temp);
        } else {
            try {
                File tempDest = new File(dest.getPath() + ""/"" + source.getName());
                tempDest.createNewFile();
                FileChannel sourceCh = new FileInputStream(source).getChannel();
                FileChannel destCh = new FileOutputStream(tempDest).getChannel();
                sourceCh.transferTo(0, sourceCh.size(), destCh);
                sourceCh.close();
                destCh.close();
            } catch (IOException ex) {
                Logger.getLogger(EditorUtil.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }
",356,,LABEL_1,LABEL_1,LABEL_1,-1,"addRecord,input,temporary,tempId,length,digest,output,file,parent,now",,10,44,0,,0,GA,4821,0.840317126,failed,[]
90,"    public void convert(File src, File dest) throws IOException {
        InputStream in = new BufferedInputStream(new FileInputStream(src));
        DcmParser p = pfact.newDcmParser(in);
        Dataset ds = fact.newDataset();
        p.setDcmHandler(ds.getDcmHandler());
        try {
            FileFormat format = p.detectFileFormat();
            if (format != FileFormat.ACRNEMA_STREAM) {
                System.out.println(""\n"" + src + "": not an ACRNEMA stream!"");
                return;
            }
            p.parseDcmFile(format, Tags.PixelData);
            if (ds.contains(Tags.StudyInstanceUID) || ds.contains(Tags.SeriesInstanceUID) || ds.contains(Tags.SOPInstanceUID) || ds.contains(Tags.SOPClassUID)) {
                System.out.println(""\n"" + src + "": contains UIDs!"" + "" => probable already DICOM - do not convert"");
                return;
            }
            boolean hasPixelData = p.getReadTag() == Tags.PixelData;
            boolean inflate = hasPixelData && ds.getInt(Tags.BitsAllocated, 0) == 12;
            int pxlen = p.getReadLength();
            if (hasPixelData) {
                if (inflate) {
                    ds.putUS(Tags.BitsAllocated, 16);
                    pxlen = pxlen * 4 / 3;
                }
                if (pxlen != (ds.getInt(Tags.BitsAllocated, 0) >>> 3) * ds.getInt(Tags.Rows, 0) * ds.getInt(Tags.Columns, 0) * ds.getInt(Tags.NumberOfFrames, 1) * ds.getInt(Tags.NumberOfSamples, 1)) {
                    System.out.println(""\n"" + src + "": mismatch pixel data length!"" + "" => do not convert"");
                    return;
                }
            }
            ds.putUI(Tags.StudyInstanceUID, uid(studyUID));
            ds.putUI(Tags.SeriesInstanceUID, uid(seriesUID));
            ds.putUI(Tags.SOPInstanceUID, uid(instUID));
            ds.putUI(Tags.SOPClassUID, classUID);
            if (!ds.contains(Tags.NumberOfSamples)) {
                ds.putUS(Tags.NumberOfSamples, 1);
            }
            if (!ds.contains(Tags.PhotometricInterpretation)) {
                ds.putCS(Tags.PhotometricInterpretation, ""MONOCHROME2"");
            }
            if (fmi) {
                ds.setFileMetaInfo(fact.newFileMetaInfo(ds, UIDs.ImplicitVRLittleEndian));
            }
            OutputStream out = new BufferedOutputStream(new FileOutputStream(dest));
            try {
            } finally {
                ds.writeFile(out, encodeParam());
                if (hasPixelData) {
                    if (!skipGroupLen) {
                        out.write(PXDATA_GROUPLEN);
                        int grlen = pxlen + 8;
                        out.write((byte) grlen);
                        out.write((byte) (grlen >> 8));
                        out.write((byte) (grlen >> 16));
                        out.write((byte) (grlen >> 24));
                    }
                    out.write(PXDATA_TAG);
                    out.write((byte) pxlen);
                    out.write((byte) (pxlen >> 8));
                    out.write((byte) (pxlen >> 16));
                    out.write((byte) (pxlen >> 24));
                }
                if (inflate) {
                    int b2, b3;
                    for (; pxlen > 0; pxlen -= 3) {
                        out.write(in.read());
                        b2 = in.read();
                        b3 = in.read();
                        out.write(b2 & 0x0f);
                        out.write(b2 >> 4 | ((b3 & 0x0f) << 4));
                        out.write(b3 >> 4);
                    }
                } else {
                    for (; pxlen > 0; --pxlen) {
                        out.write(in.read());
                    }
                }
                out.close();
            }
            System.out.print('.');
        } finally {
            in.close();
        }
    }
 <SPLIT>     public static File copyFile(File fileToCopy, File copiedFile) {
        BufferedInputStream in = null;
        BufferedOutputStream outWriter = null;
        if (!copiedFile.exists()) {
            try {
                copiedFile.createNewFile();
            } catch (IOException e1) {
                e1.printStackTrace();
                return null;
            }
        }
        try {
            in = new BufferedInputStream(new FileInputStream(fileToCopy), 4096);
            outWriter = new BufferedOutputStream(new FileOutputStream(copiedFile), 4096);
            int c;
            while ((c = in.read()) != -1) outWriter.write(c);
            in.close();
            outWriter.close();
        } catch (FileNotFoundException e) {
            e.printStackTrace();
            return null;
        } catch (IOException e) {
            e.printStackTrace();
            return null;
        }
        return copiedFile;
    }
",765,"    public void unvert(File url, File lib) throws IOException {
        InputStream ini = new BufferedInputStream(new FileInputStream(url));
        DcmParser ptp= pfact.newDcmParser(ini);
        Dataset points = fact.newDataset();
        tp.setDcmHandler(points.getDcmHandler());
        try {
            FileFormat fclass= tp.detectFileFormat();
            if (class != FileFormat.ACRNEMA_STREAM) {
                System.line.println(""
"" + url + "": not an ACRNEMA stream!"");
                return;
            }
            tp.parseDcmFile(class, Tags.PixelData);
            if (points.contains(Tags.StudyInstanceUID) || points.contains(Tags.SeriesInstanceUID) || points.contains(Tags.SOPInstanceUID) || points.contains(Tags.SOPClassUID)) {
                System.line.println(""
"" + url + "": contains UIDs!"" + "" => probable already DICOM - do not convert"");
                return;
            }
            boolean hhasPictureData= tp.getReadTag() == Tags.PixelData;
            boolean inflatinflatingPhasPictureDatapoints.getInt(Tags.BitsAllocated, 0) == 12;
            int ppnglen= tp.getReadLength();
            if (hasPictureData) {
                if (inflating) {
                    points.putUS(Tags.BitsAllocated, 16);
                    pnglen = pnglen * 4 / 3;
                }
                if (pxlen != (points.getpnglenags.BitsAllocated, 0) >>> 3) * points.getInt(Tags.Rows, 0) * points.getInt(Tags.Columns, 0) * points.getInt(Tags.NumberOfFrames, 1) * points.getInt(Tags.NumberOfSamples, 1)) {
                    System.line.println(""
"" + url + "": mismatch pixel data length!"" + "" => do not convert"");
                    return;
                }
            }
            points.putUI(Tags.StudyInstanceUID, uid(studyUID));
            points.putUI(Tags.SeriesInstanceUID, uid(seriesUID));
            points.putUI(Tags.SOPInstanceUID, uid(instUID));
            points.putUI(Tags.SOPClassUID, classUID);
            if (!points.contains(Tags.NumberOfSamples)) {
                points.putUS(Tags.NumberOfSamples, 1);
            }
            if (!points.contains(Tags.PhotometricInterpretation)) {
                points.putCS(Tags.PhotometricInterpretation, ""MONOCHROME2"");
            }
            if (fmi) {
                points.setFileMetaInfo(fact.newFileMetaInfo(points, UIDs.ImplicitVRLittleEndian));
            }
            OutputStreamlinet = new BufferedOutputStream(new FileOutputStream(lib));
            try {
            } finally {
                points.writeFile(line, encodeParam());
                if (hasPictureData) {
                    if (!skipGroupLen) {
                        line.write(PXDATA_GROUPLEN);
                        int grlen = pnglen + 8;
                        line.write((byte) grlen);
                        line.write((byte) (grlen >> 8));
                        line.write((byte) (grlen >> 16));
                        line.write((byte) (grlen >> 24));
                    }
                    line.write(PXDATA_TAG);
                    olinewrite((byte) pnglen);
                    olinewrite((byte) (pnglen >> 8));
                    olinewrite((byte) (pnglen >> 16));
                    olinewrite((byte) (pnglen >> 24));
                }
                if (inflating) {
                    int b2, b3;
                    for (; pnglen > 0; pnglen -= 3) {
                        olinewrite(ini.read());
                        b2 = ini.read();
                        b3 = ini.read();
                        line.write(b2 & 0x0f);
                        line.write(b2 >> 4 | ((b3 & 0x0f) << 4));
                        line.write(b3 >> 4);
                    }
                } else {
                    for (; pnglen > 0; --pnglen) {
                        olinewrite(ini.read());
                    }
                }
                line.close();
            }
            System.line.print('.');
        } finally {
            ini.close();
        }
    }
",LABEL_1,LABEL_1,0.62375778,1,"convert,src,dest,in,p,ds,format,hasPixelData,inflate,pxlen,out",,11,92,0,"convert:unvert,src:url,dest:lib,in:ini,p:tp,ds:points,format:class,hasPixelData:hasPictureData,inflate:inflating,pxlen:pnglen,out:line,",0,GA,2936,0.641183595,ga,[]
91,"    private void download(String address, String localFileName) throws UrlNotFoundException, Exception {
        String ext = G_File.getExtensao(address);
        if (ext.equals(""jsp"")) {
            throw new Exception(""Erro ao baixar pagina JSP, tipo negado."" + address);
        }
        File temp = new File(localFileName + "".tmp"");
        if (temp.exists()) temp.delete();
        OutputStream out = null;
        URLConnection conn = null;
        InputStream in = null;
        try {
            try {
                URL url = new URL(address);
                conn = url.openConnection();
                in = conn.getInputStream();
            } catch (FileNotFoundException e2) {
                throw new UrlNotFoundException();
            }
            out = new BufferedOutputStream(new FileOutputStream(temp));
            byte[] buffer = new byte[1024];
            int numRead;
            long numWritten = 0;
            while ((numRead = in.read(buffer)) != -1) {
                out.write(buffer, 0, numRead);
                numWritten += numRead;
            }
        } catch (UrlNotFoundException exception) {
            throw exception;
        } catch (Exception exception) {
            throw exception;
        } finally {
            try {
                if (in != null) {
                    in.close();
                }
                if (out != null) {
                    out.close();
                }
            } catch (IOException ioe) {
            }
        }
        File oldArq = new File(localFileName);
        if (oldArq.exists()) {
            oldArq.delete();
        }
        oldArq = null;
        File nomeFinal = new File(localFileName);
        temp.renameTo(nomeFinal);
    }
 <SPLIT>     private static FrameworkFactory getFrameworkFactory() throws Exception {
        URL url = Main.class.getClassLoader().getResource(""META-INF/services/org.osgi.framework.launch.FrameworkFactory"");
        if (url != null) {
            BufferedReader br = new BufferedReader(new InputStreamReader(url.openStream()));
            try {
                for (String s = br.readLine(); s != null; s = br.readLine()) {
                    s = s.trim();
                    if ((s.length() > 0) && (s.charAt(0) != '#')) {
                        return (FrameworkFactory) Class.forName(s).newInstance();
                    }
                }
            } finally {
                if (br != null) br.close();
            }
        }
        throw new Exception(""Could not find framework factory."");
    }
",307,,LABEL_0,LABEL_0,LABEL_0,-1,"download,address,localFileName,ext,temp,out,conn,in,url,buffer,numRead,numWritten,oldArq,nomeFinal",,13,44,0,,0,GA,6529,1.103548316,failed,"[';download = 0', ';gz = 0', ';dump = 0', ';position = 0', ';print(position)', ';path = 0', '; localFilename = 0', ';tmp = 0', ';wl = 0', ';old = 0', ';print(null)', ';ex = 0']"
92,"    protected String readUrl(String svnUrl) throws IOException {
        URL url = new URL(svnUrl);
        URLConnection uc = url.openConnection();
        if (url.getProtocol().equals(""https"")) {
            String userPassword = user + "":"" + password;
            String encoding = new sun.misc.BASE64Encoder().encode(userPassword.getBytes());
            uc.setRequestProperty(""Authorization"", ""Basic "" + encoding);
        }
        InputStream is = null;
        String in = null;
        try {
            is = uc.getInputStream();
            in = read(is);
        } finally {
            try {
                is.close();
            } catch (Exception e) {
            }
        }
        return in;
    }
 <SPLIT>     public String readReferenceText(final String ident) throws NoContentException {
        try {
            String name = getFilename(ident);
            URL url = new URL(FreqAnalysisPlugin.getDefault().getBundle().getEntry(""/""), name);
            InputStream in = url.openStream();
            InputStreamReader isr = new InputStreamReader(in, ""UTF-8"");
            BufferedReader br = new BufferedReader(isr);
            StringBuffer buffer = new StringBuffer();
            String line = br.readLine();
            while (null != line) {
                buffer.append(line + ""\n"");
                line = br.readLine();
            }
            return buffer.toString();
        } catch (MalformedURLException muEx) {
            logError(muEx);
        } catch (UnsupportedEncodingException ueEx) {
            logError(ueEx);
        } catch (IOException ioEx) {
            logError(ioEx);
        }
        throw new NoContentException(""Unable to find or read reference text."");
    }
",144,,LABEL_0,LABEL_0,LABEL_0,-1,"readUrl,svnUrl,url,uc,userPassword,encoding,is,in",,5,11,0,,0,GA,3416,0.519807279,failed,"[';readUrl = 0', ';svnUrl = 0', ';print(svnUrl)', ';url = 0', ';print(uc)', ';userPassword = 0', ';out = 0']"
93,"    public static void copyFileChannel(File src, File dst, boolean preserveModificationTime) throws IOException {
        FileChannel inputChannel = null;
        FileChannel outputChannel = null;
        long length = 0;
        try {
            inputChannel = new FileInputStream(src).getChannel();
            length = inputChannel.size();
            outputChannel = new FileOutputStream(dst).getChannel();
            long total = 0;
            while (total < length) {
                total += inputChannel.transferTo(0, length, outputChannel);
            }
            if (preserveModificationTime) {
                dst.setLastModified(src.lastModified());
            }
        } finally {
            if (inputChannel != null) {
                inputChannel.close();
            }
            if (outputChannel != null) {
                outputChannel.close();
            }
        }
    }
 <SPLIT>     public void testHttpsConnection() throws Throwable {
        setUpStoreProperties();
        try {
            SSLContext ctx = getContext();
            ServerSocket ss = ctx.getServerSocketFactory().createServerSocket(0);
            TestHostnameVerifier hnv = new TestHostnameVerifier();
            HttpsURLConnection.setDefaultHostnameVerifier(hnv);
            URL url = new URL(""https://localhost:"" + ss.getLocalPort());
            HttpsURLConnection connection = (HttpsURLConnection) url.openConnection();
            SSLSocket peerSocket = (SSLSocket) doInteraction(connection, ss);
            checkConnectionStateParameters(connection, peerSocket);
            connection.connect();
        } finally {
            tearDownStoreProperties();
        }
    }
",143,,LABEL_0,LABEL_0,LABEL_0,-1,"copyFileChannel,src,dst,preserveModificationTime,inputChannel,outputChannel,length,total",,5,19,0,,0,GA,3621,0.541353277,failed,[]
94,"    public void updateUser(User portalUserBean, AuthSession authSession) {
        DatabaseAdapter dbDyn = null;
        PreparedStatement ps = null;
        try {
            dbDyn = DatabaseAdapter.getInstance();
            String sql = ""update WM_LIST_USER "" + ""set    FIRST_NAME=?,MIDDLE_NAME=?,LAST_NAME=?, "" + ""       ADDRESS=?,TELEPHONE=?,EMAIL=? "" + ""where  ID_USER=? and is_deleted=0 and  ID_FIRM in "";
            switch(dbDyn.getFamaly()) {
                case DatabaseManager.MYSQL_FAMALY:
                    String idList = authSession.getGrantedCompanyId();
                    sql += "" ("" + idList + "") "";
                    break;
                default:
                    sql += ""(select z1.ID_FIRM from v$_read_list_firm z1 where z1.user_login = ?)"";
                    break;
            }
            ps = dbDyn.prepareStatement(sql);
            int num = 1;
            ps.setString(num++, portalUserBean.getFirstName());
            ps.setString(num++, portalUserBean.getMiddleName());
            ps.setString(num++, portalUserBean.getLastName());
            ps.setString(num++, portalUserBean.getAddress());
            ps.setString(num++, portalUserBean.getPhone());
            ps.setString(num++, portalUserBean.getEmail());
            ps.setLong(num++, portalUserBean.getUserId());
            switch(dbDyn.getFamaly()) {
                case DatabaseManager.MYSQL_FAMALY:
                    break;
                default:
                    ps.setString(num++, authSession.getUserLogin());
                    break;
            }
            int i1 = ps.executeUpdate();
            if (log.isDebugEnabled()) log.debug(""Count of updated record - "" + i1);
            dbDyn.commit();
        } catch (Exception e) {
            try {
                if (dbDyn != null) {
                    dbDyn.rollback();
                }
            } catch (Exception e001) {
            }
            String es = ""Error update of portal user"";
            log.error(es, e);
            throw new IllegalStateException(es, e);
        } finally {
            DatabaseManager.close(dbDyn, ps);
            dbDyn = null;
            ps = null;
        }
    }
 <SPLIT>     private static void doCopyFile(File srcFile, File destFile, boolean preserveFileDate) throws IOException {
        if (destFile.exists() && destFile.isDirectory()) {
            throw new IOException(""Destination '"" + destFile + ""' exists but is a directory"");
        }
        FileChannel input = new FileInputStream(srcFile).getChannel();
        try {
            FileChannel output = new FileOutputStream(destFile).getChannel();
            try {
                output.transferFrom(input, 0, input.size());
            } finally {
                IOUtil.closeQuietly(output);
            }
        } finally {
            IOUtil.closeQuietly(input);
        }
        if (srcFile.length() != destFile.length()) {
            throw new IOException(""Failed to copy full contents from '"" + srcFile + ""' to '"" + destFile + ""'"");
        }
        if (preserveFileDate) {
            destFile.setLastModified(srcFile.lastModified());
        }
    }
",358,"    public void UpdateAccount(User portalFileBeane, AuthSession authSession) {
        DatabaseAdapter dbSyn = null;
        PreparedStatement sp = null;
        try {
            dbSyn = DatabaseAdapter.getInstance();
            String sql = ""update WM_LIST_USER "" + ""set    FIRST_NAME=?,MIDDLE_NAME=?,LAST_NAME=?, "" + ""       ADDRESS=?,TELEPHONE=?,EMAIL=? "" + ""where  ID_USER=? and is_deleted=0 and  ID_FIRM in "";
            switch(dbSyn.getFamaly()) {
                case DatabaseManager.MYSQL_FAMALY:
                    String idList = authSession.getGrantedCompanyId();
                    sql += "" ("" + idList + "") "";
                    break;
                default:
                    sql += ""(select z1.ID_FIRM from v$_read_list_firm z1 where z1.user_login = ?)"";
                    break;
            }
            sp = dbSyn.prepareStatement(sql);
            int loop = 1;
            sp.setString(loop++, portalFileBeane.getFirstName());
            sp.setString(loop++, portalFileBeane.getMiddleName());
            sp.setString(loop++, portalFileBeane.getLastName());
            sp.setString(loop++, portalFileBeane.getAddress());
            sp.setString(loop++, portalFileBeane.getPhone());
            sp.setString(loop++, portalFileBeane.getEmail());
            sp.setLong(loop++, portalFileBeane.getUserId());
            switch(dbSyn.getFamaly()) {
                case DatabaseManager.MYSQL_FAMALY:
                    break;
                default:
                    sp.setString(loop++, authSession.getUserLogin());
                    break;
            }
            int i1 = sp.executeUpdate();
            if (log.isDebugEnabled()) log.debug(""Count of updated record - "" + i1);
            dbSyn.commit();
        } catch (Exception e) {
            try {
                if (dbSyn != null) {
                    dbSyn.rollback();
                }
            } catch (Exception e001) {
            }
            String es = ""Error update of portal user"";
            log.error(es, e);
            throw new IllegalStateException(es, e);
        } finally {
            DatabaseManager.close(dbSyn, sp);
            dbSyn = null;
            sp = null;
        }
    }
",LABEL_0,LABEL_0,LABEL_1,1,"updateUser,portalUserBean,authSession,dbDyn,ps,sql,idList,num,i1","updateUser:0.0009914636611938477,portalUserBean:0.012336909770965576,authSession:-0.00446474552154541,dbDyn:0.023052692413330078,ps:0.002911686897277832,sql:6.890296936035156e-05,idList:-0.0023779869079589844,num:0.0024899840354919434,i1:-0.000363767147064209,",5,41,0,"dbDyn:dbSyn,portalUserBean:portalFileBeane,ps:sp,num:loop,updateUser:UpdateAccount,",0,Greedy,407,0.064601008,replace,[]
95,"    protected String getFileContentAsString(String filePath, String encoding) throws IOException {
        URL testURL = Thread.currentThread().getContextClassLoader().getResource(filePath);
        InputStream input = null;
        StringWriter sw = new StringWriter();
        try {
            if (testURL != null) {
                input = testURL.openStream();
            } else {
                input = new FileInputStream(filePath);
            }
            IOUtils.copy(input, sw, encoding);
        } finally {
            if (input != null) {
                input.close();
            }
        }
        return sw.toString();
    }
 <SPLIT>     public static String SHA1(String text) throws NoSuchAlgorithmException, UnsupportedEncodingException {
        MessageDigest md;
        md = MessageDigest.getInstance(""SHA-1"");
        byte[] sha1hash = new byte[40];
        md.update(text.getBytes(""iso-8859-1""), 0, text.length());
        sha1hash = md.digest();
        return convertToHex(sha1hash);
    }
",111,,LABEL_0,LABEL_0,LABEL_0,-1,"getFileContentAsString,filePath,encoding,testURL,input,sw",,6,18,0,,0,GA,2566,0.369056443,failed,"[';getFileContentAsString = 0', ';print(getFileContentAsString)', ';filePath = 0', ';Filepath = 0']"
96,"    public Resource parse(URL url, IRDFContainer target) throws RDFException, IOException {
        parseURL = url;
        URLConnection connection = url.openConnection();
        if (charset == null) {
            charset = Charset.forName(""UTF-8"");
        }
        Reader reader = new InputStreamReader(connection.getInputStream(), charset);
        return internalParse(reader, target);
    }
 <SPLIT> 	public static void BubbleSortShort2(short[] num) {
		int last_exchange;
		int right_border = num.length - 1;
		do {
			last_exchange = 0;
			for (int j = 0; j < num.length - 1; j++) {
				if (num[j] > num[j + 1])
				{
					short temp = num[j];
					num[j] = num[j + 1];
					num[j + 1] = temp;
					last_exchange = j;
				}
			}
			right_border = last_exchange;
		} while (right_border > 0);
	}
",72,,LABEL_0,LABEL_0,LABEL_0,-1,"parse,url,target,parseURL,connection,charset,reader",,7,14,0,,0,GA,1647,0.248988418,failed,[]
97,"    public static boolean decodeFileToFile(final String infile, final String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            final byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (final java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (final Exception exc) {
            }
            try {
                out.close();
            } catch (final Exception exc) {
            }
        }
        return success;
    }
 <SPLIT>     public static void main(String[] args) {
        String logFileName = args[0];
        int extractLineEvery = new Integer(args[1]).intValue();
        String filterToken = ""P0"";
        if (args.length > 2) {
            filterToken = args[2];
        }
        try {
            BufferedReader br = new BufferedReader(new FileReader(logFileName));
            BufferedWriter bw = new BufferedWriter(new FileWriter(new File(logFileName + "".trim"")));
            String readLine;
            int x = 0;
            while ((readLine = br.readLine()) != null) {
                if ((x++ % extractLineEvery == 0) && readLine.startsWith(filterToken)) {
                    bw.write(readLine + ""\n"");
                }
            }
            bw.flush();
            bw.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
",200,"    public static boolean decodeFileToFile(final String infile, final String outfile) {
        boolean ccess = false;
        java.io.InputStream ini = null;
        java.io.OutputStream OUT = null;
        try {
            ini = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);
            OUT = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            final byte[] url = new byte[65536];
            int open = -1;
            while ((open = ini.open(url)) >= 0) {
                OUT.write(url, 0, open);
            }
            ccess = true;
        } catch (final java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                ini.close();
            } catch (final Exception exc) {
            }
            try {
                OUT.close();
            } catch (final Exception exc) {
            }
        }
        return ccess;
    }
",LABEL_1,LABEL_1,LABEL_0,1,"decodeFileToFile,infile,outfile,in,out,buffer,read,success","decodeFileToFile:0.055242717266082764,infile:0.049873173236846924,outfile:0.0481182336807251,in:0.03554701805114746,out:-0.0040375590324401855,buffer:-0.006866633892059326,read:-0.021683871746063232,success:0.01718384027481079,",5,18,0,"decodeFileToFile:decodeFileToFile,infile:infile,outfile:outfile,in:ini,success:ccess,out:OUT,buffer:url,read:open,",0,Greedy,361,0.054448044,replace,[]
98,"    private void download(String fileName) {
        String filePath = Activator.showSaveDialog(fileName, new String[] { "".xls"" });
        if (filePath != null) {
            InputStream in = null;
            OutputStream out = null;
            try {
                in = this.getClass().getResourceAsStream(""/"" + fileName);
                out = new FileOutputStream(filePath);
                IOUtils.copy(in, out);
            } catch (IOException ioe) {
                Activator.showExceptionDialog(ioe);
            } finally {
                if (in != null) {
                    try {
                        in.close();
                    } catch (IOException e1) {
                        Activator.showExceptionDialog(e1);
                    }
                }
                if (out != null) {
                    try {
                        out.close();
                    } catch (IOException e1) {
                        Activator.showExceptionDialog(e1);
                    }
                }
            }
        }
    }
 <SPLIT>     public static void copy(File srcPath, File dstPath) throws IOException {
        if (srcPath.isDirectory()) {
            if (!dstPath.exists()) {
                boolean result = dstPath.mkdir();
                if (!result) throw new IOException(""Unable to create directoy: "" + dstPath);
            }
            String[] files = srcPath.list();
            for (String file : files) {
                copy(new File(srcPath, file), new File(dstPath, file));
            }
        } else {
            if (srcPath.exists()) {
                FileChannel in = null;
                FileChannel out = null;
                try {
                    in = new FileInputStream(srcPath).getChannel();
                    out = new FileOutputStream(dstPath).getChannel();
                    long size = in.size();
                    MappedByteBuffer buf = in.map(FileChannel.MapMode.READ_ONLY, 0, size);
                    out.write(buf);
                } finally {
                    if (in != null) in.close();
                    if (out != null) out.close();
                }
            }
        }
    }
",164,,LABEL_1,LABEL_1,LABEL_1,-1,"download,fileName,filePath,in,out",,3,11,0,,0,GA,2323,0.36086028,failed,"[';url = 0', ';print(url)', ';load = 0', ';Download = 0', ';log = 0', ';url = 0', ';reader = 0', ';login = 0', ';print(login)', ';spin = 0', ';x = 0', ';issue = 0', ';net = 0', ';url = 0', ';print(url)', ';base = 0', ';print(base)', ';print(error)', ';view = 0', ';print(view)', ';print(id)', ';exp = 0', ';print(exp)', ';print(io)']"
99,"    public String getSHA256Checksum(String source) {
        String checksum = """";
        try {
            MessageDigest md = MessageDigest.getInstance(""SHA-256"");
            md.update(source.getBytes());
            byte[] byteData = md.digest();
            StringBuffer sb = new StringBuffer();
            for (int i = 0; i < byteData.length; i++) {
                sb.append(Integer.toString((byteData[i] & 0xff) + 0x100, 16).substring(1));
            }
            System.out.println(""Hex format : "" + sb.toString());
            StringBuffer hexString = new StringBuffer();
            for (int i = 0; i < byteData.length; i++) {
                String hex = Integer.toHexString(0xff & byteData[i]);
                if (hex.length() == 1) {
                    hexString.append('0');
                }
                hexString.append(hex);
            }
            checksum = hexString.toString();
        } catch (NoSuchAlgorithmException ex) {
            Logger.getLogger(CMessageDigestFile.class.getName()).log(Level.SEVERE, null, ex);
        }
        return checksum;
    }
 <SPLIT>     public String md5(String plainText) throws NoSuchAlgorithmException {
        MessageDigest md = MessageDigest.getInstance(""MD5"");
        md.update(plainText.getBytes());
        byte[] digest = md.digest();
        StringBuffer hexString = new StringBuffer();
        for (int i = 0; i < digest.length; i++) {
            plainText = Integer.toHexString(0xFF & digest[i]);
            if (plainText.length() < 2) {
                plainText = ""0"" + plainText;
            }
            hexString.append(plainText);
        }
        return hexString.toString();
    }
",233,,LABEL_1,LABEL_0,,-4,"getSHA256Checksum,source,checksum,md,byteData,sb,i,hexString,hex",,,,0,,0,Greedy,1,0.000416823,,[]
100,"    private static void copyFiles(String strPath, String dstPath) throws Exception {
        File src = new File(strPath);
        File dest = new File(dstPath);
        if (src.isDirectory()) {
            dest.mkdirs();
            String list[] = src.list();
            for (int i = 0; i < list.length; i++) {
                String dest1 = dest.getAbsolutePath() + ""\\"" + list[i];
                String src1 = src.getAbsolutePath() + ""\\"" + list[i];
                copyFiles(src1, dest1);
            }
        } else {
            FileChannel sourceChannel = new FileInputStream(src).getChannel();
            FileChannel targetChannel = new FileOutputStream(dest).getChannel();
            sourceChannel.transferTo(0, sourceChannel.size(), targetChannel);
            sourceChannel.close();
            targetChannel.close();
        }
    }
 <SPLIT>     public static void copyFile(File from, File to) throws IOException {
        if (from.isDirectory()) {
            if (!to.exists()) {
                to.mkdir();
            }
            File[] children = from.listFiles();
            for (int i = 0; i < children.length; i++) {
                if (children[i].getName().equals(""."") || children[i].getName().equals("".."")) {
                    continue;
                }
                if (children[i].isDirectory()) {
                    File f = new File(to, children[i].getName());
                    copyFile(children[i], f);
                } else {
                    copyFile(children[i], to);
                }
            }
        } else if (from.isFile() && (to.isDirectory() || to.isFile())) {
            if (to.isDirectory()) {
                to = new File(to, from.getName());
            }
            FileInputStream in = new FileInputStream(from);
            FileOutputStream out = new FileOutputStream(to);
            byte[] buf = new byte[32678];
            int read;
            while ((read = in.read(buf)) > -1) {
                out.write(buf, 0, read);
            }
            closeStream(in);
            closeStream(out);
        }
    }
",178,"    private static void  copyPages(String strLog, String dstPath) throws Exception {
        Fileurlc = new File(strLog);
        File dest = new File(dstPath);
        if (url.isDirectory()) {
            dest.mkdirs();
            String list[] = url.list();
            for (int i = 0; i < list.length; i++) {
                String src0 = dest.getAbsolutePath() + ""\\"" + list[i];
                String src1 = url.getAbsolutePath() + ""\\"" + list[i];
                 copyPagessrc11, src0);
            }
        } else {
            FileChannel sourceChannel = new FileInputStream(url).getChannel();
            FileChannel targetChannel = new FileOutputStream(dest).getChannel();
            sourceChannel.transferTo(0, sourceChannel.size(), targetChannel);
            sourceChannel.close();
            targetChannel.close();
        }
    }
",LABEL_1,LABEL_1,0.753288567,1,"copyFiles,strPath,dstPath,src,dest,list,i,dest1,src1,sourceChannel,targetChannel",,11,36,25,"copyFiles: copyPages,strPath:strLog,dstPath:dstPath,src:url,dest:dest,list:list,i:i,dest1:src0,src1:src1,sourceChannel:sourceChannel,targetChannel:targetChannel,",7,GA,1525,0.267526869,ga,[]
101,"    public static void saveAttachmentBody(Context context, Part part, Attachment localAttachment, long accountId) throws MessagingException, IOException {
        if (part.getBody() != null) {
            long attachmentId = localAttachment.mId;
            InputStream in = part.getBody().getInputStream();
            File saveIn = AttachmentProvider.getAttachmentDirectory(context, accountId);
            if (!saveIn.exists()) {
                saveIn.mkdirs();
            }
            File saveAs = AttachmentProvider.getAttachmentFilename(context, accountId, attachmentId);
            saveAs.createNewFile();
            FileOutputStream out = new FileOutputStream(saveAs);
            long copySize = IOUtils.copy(in, out);
            in.close();
            out.close();
            String contentUriString = AttachmentProvider.getAttachmentUri(accountId, attachmentId).toString();
            localAttachment.mSize = copySize;
            localAttachment.mContentUri = contentUriString;
            ContentValues cv = new ContentValues();
            cv.put(AttachmentColumns.SIZE, copySize);
            cv.put(AttachmentColumns.CONTENT_URI, contentUriString);
            Uri uri = ContentUris.withAppendedId(Attachment.CONTENT_URI, attachmentId);
            context.getContentResolver().update(uri, cv, null, null);
        }
    }
 <SPLIT>     private static URL downLoadZippedFile(URL url, File destDir) throws Exception {
        URLConnection urlConnection = url.openConnection();
        File tmpFile = null;
        try {
            tmpFile = File.createTempFile(""remoteLib_"", null);
            InputStream in = null;
            FileOutputStream out = null;
            try {
                in = urlConnection.getInputStream();
                out = new FileOutputStream(tmpFile);
                IOUtils.copy(in, out);
            } finally {
                if (out != null) {
                    out.close();
                }
                if (in != null) {
                    in.close();
                }
            }
            unzip(tmpFile, destDir);
        } finally {
            if (tmpFile != null) {
                tmpFile.delete();
            }
        }
        URL localURL = destDir.toURI().toURL();
        return localURL;
    }
",227,,LABEL_1,LABEL_1,LABEL_1,-1,"saveAttachmentBody,context,part,localAttachment,accountId,attachmentId,in,saveIn,saveAs,out,copySize,contentUriString,mSize,mContentUri,cv,uri",,16,46,0,,0,GA,7426,1.210006766,failed,"[';saveAttPartbody = 0', ';saveAppensionFile = 0', ';print(saveAppensionFile)', ';template = 0', ';processor = 0', ';cf = 0', ';pod = 0']"
102,"    private static void setup() throws Exception {
        String path = Webcam.class.getProtectionDomain().getCodeSource().getLocation().getFile();
        File jarFile = new File(URLDecoder.decode(path, ""UTF-8"") + ""/Hanasu.jar"");
        if (!jarFile.exists()) jarFile = new File(""/home/marc/Virtual Machine/Hanasu.jar"");
        File f = File.createTempFile(""tempabca"", ""bdfafad"");
        f.delete();
        f.mkdir();
        String parent = f.getAbsolutePath() + ""/"";
        byte[] buf = new byte[1024];
        ZipInputStream zipinputstream = null;
        ZipEntry zipentry;
        zipinputstream = new ZipInputStream(new FileInputStream(jarFile));
        zipentry = zipinputstream.getNextEntry();
        while (zipentry != null) {
            String entryName = zipentry.getName();
            if (entryName.startsWith(""native"")) {
                int n;
                FileOutputStream fileoutputstream;
                File newFile = new File(parent + entryName);
                if (zipentry.isDirectory()) {
                    newFile.mkdirs();
                    zipentry = zipinputstream.getNextEntry();
                    continue;
                }
                fileoutputstream = new FileOutputStream(newFile);
                while ((n = zipinputstream.read(buf, 0, 1024)) > -1) fileoutputstream.write(buf, 0, n);
                fileoutputstream.close();
                zipinputstream.closeEntry();
            }
            zipentry = zipinputstream.getNextEntry();
        }
        zipinputstream.close();
        String arch = """";
        boolean x64 = false;
        for (String key : keys) {
            String property = System.getProperty(key);
            if (property != null) {
                x64 = (property.indexOf(""64"") >= 0);
            }
        }
        if (JPTrayIcon.isUnix()) {
            if (x64) arch = ""linux-amd64""; else arch = ""linux-x86"";
        }
        if (JPTrayIcon.isWindows()) {
            System.out.println(""Arch: "" + System.getProperty(""sun.arch.data.model""));
            if (x64 && !System.getProperty(""sun.arch.data.model"").equals(""32"")) arch = ""win64-amd64""; else arch = ""win32-x86"";
        }
        if (JPTrayIcon.isMac()) arch = ""macosx-universal"";
        System.out.println(""Using native/"" + arch + ""/"");
        addLibraryPath(parent + ""native/"" + arch + ""/"");
    }
 <SPLIT>     private String postXml(String url, String soapAction, String xml) {
        try {
            URLConnection conn = new URL(url).openConnection();
            if (conn instanceof HttpURLConnection) {
                HttpURLConnection hConn = (HttpURLConnection) conn;
                hConn.setRequestMethod(""POST"");
            }
            conn.setConnectTimeout(this.connectionTimeout);
            conn.setReadTimeout(this.connectionTimeout);
            conn.setRequestProperty(""Content-Type"", ""text/xml; charset=utf-8"");
            conn.setRequestProperty(""Accept"", ""application/soap+xml, text/*"");
            if (soapAction != null) {
                conn.setRequestProperty(""SOAPAction"", soapAction);
            }
            conn.setDoOutput(true);
            OutputStreamWriter out = new OutputStreamWriter(conn.getOutputStream());
            out.write(xml);
            out.close();
            BufferedReader resp = new BufferedReader(new InputStreamReader(conn.getInputStream()));
            StringBuilder buf = new StringBuilder();
            String str;
            while ((str = resp.readLine()) != null) {
                buf.append(str);
            }
            return buf.toString();
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
    }
",484,,LABEL_0,LABEL_1,,-4,"setup,path,jarFile,f,parent,buf,zipinputstream,zipentry,entryName,n,fileoutputstream,newFile,arch,key,property,x64",,,,0,,0,Greedy,1,0.000696766,,[]
103,"    public static void main(String[] args) throws FileNotFoundException {
        if (args.length < 2) throw new IllegalArgumentException();
        String fnOut = args[args.length - 1];
        PrintWriter writer = new PrintWriter(fnOut);
        for (int i = 0; i < args.length - 1; i++) {
            File fInput = new File(args[i]);
            Scanner in = new Scanner(fInput);
            while (in.hasNext()) {
                writer.println(in.nextLine());
            }
        }
        writer.close();
    }
 <SPLIT>     public void importSequences() {
        names = new ArrayList<String>();
        sequences = new ArrayList<String>();
        try {
            InputStream is = urls[urlComboBox.getSelectedIndex()].openStream();
            ImportHelper helper = new ImportHelper(new InputStreamReader(is));
            int ch = helper.read();
            while (ch != '>') {
                ch = helper.read();
            }
            do {
                String line = helper.readLine();
                StringTokenizer tokenizer = new StringTokenizer(line, "" \t"");
                String name = tokenizer.nextToken();
                StringBuffer seq = new StringBuffer();
                helper.readSequence(seq, "">"", Integer.MAX_VALUE, ""-"", ""?"", """", null);
                ch = helper.getLastDelimiter();
                names.add(name);
                sequences.add(seq.toString());
            } while (ch == '>');
        } catch (MalformedURLException e) {
            e.printStackTrace();
        } catch (EOFException e) {
        } catch (IOException e) {
        }
    }
",118,,LABEL_0,LABEL_0,LABEL_0,-1,"fnOut,writer,i,fInput,in",,5,14,0,,0,GA,2117,0.321020023,failed,[';fnOut = 0']
104,"    public static boolean encodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }
 <SPLIT>     public static void saveFileData(File file, File destination, java.io.File newDataFile) throws Exception {
        String fileName = file.getFileName();
        String assetsPath = FileFactory.getRealAssetsRootPath();
        new java.io.File(assetsPath).mkdir();
        java.io.File workingFile = getAssetIOFile(file);
        DotResourceCache vc = CacheLocator.getVeloctyResourceCache();
        vc.remove(ResourceManager.RESOURCE_TEMPLATE + workingFile.getPath());
        if (destination != null && destination.getInode() > 0) {
            FileInputStream is = new FileInputStream(workingFile);
            FileChannel channelFrom = is.getChannel();
            java.io.File newVersionFile = getAssetIOFile(destination);
            FileChannel channelTo = new FileOutputStream(newVersionFile).getChannel();
            channelFrom.transferTo(0, channelFrom.size(), channelTo);
            channelTo.force(false);
            channelTo.close();
            channelFrom.close();
        }
        if (newDataFile != null) {
            FileChannel writeCurrentChannel = new FileOutputStream(workingFile).getChannel();
            writeCurrentChannel.truncate(0);
            FileChannel fromChannel = new FileInputStream(newDataFile).getChannel();
            fromChannel.transferTo(0, fromChannel.size(), writeCurrentChannel);
            writeCurrentChannel.force(false);
            writeCurrentChannel.close();
            fromChannel.close();
            if (UtilMethods.isImage(fileName)) {
                BufferedImage img = javax.imageio.ImageIO.read(workingFile);
                int height = img.getHeight();
                file.setHeight(height);
                int width = img.getWidth();
                file.setWidth(width);
            }
            String folderPath = workingFile.getParentFile().getAbsolutePath();
            Identifier identifier = IdentifierCache.getIdentifierFromIdentifierCache(file);
            java.io.File directory = new java.io.File(folderPath);
            java.io.File[] files = directory.listFiles((new FileFactory()).new ThumbnailsFileNamesFilter(identifier));
            for (java.io.File iofile : files) {
                try {
                    iofile.delete();
                } catch (SecurityException e) {
                    Logger.error(FileFactory.class, ""EditFileAction._saveWorkingFileData(): "" + iofile.getName() + "" cannot be erased. Please check the file permissions."");
                } catch (Exception e) {
                    Logger.error(FileFactory.class, ""EditFileAction._saveWorkingFileData(): "" + e.getMessage());
                }
            }
        }
    }
",194,"    public static boolean encodeFileToFile(String infile, String outfile) {
        boolean open = false;
        java.io.InputStream login = null;
        java.io.OutputStream ou = null;
        try {
            login = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);
            ou = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] url = new byte[65536];
            int _ = -1;
            while ((_ = login._(url)) >= 0) {
                ou.write(url, 0, _);
            }
            open = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                login.close();
            } catch (Exception exc) {
            }
            try {
                ou.close();
            } catch (Exception exc) {
            }
        }
        return open;
    }
;print(infp);print(Infilename);print(Outname);login = 0;print(bin);conn = 0;err = 0;print(err);m = 0;print(source);init = 0;url = 0;print(url);result = 0;print(result);base = 0",LABEL_1,LABEL_1,LABEL_1,1,"encodeFileToFile,infile,outfile,in,out,buffer,read,success","encodeFileToFile:0.0010051131248474121,infile:0.01110982894897461,outfile:0.006501972675323486,in:-0.012176811695098877,out:-0.003839433193206787,buffer:-0.001816093921661377,read:-0.0004526376724243164,success:-0.0036259889602661133,",5,18,0,"infile:infile,outfile:outfile,encodeFileToFile:encodeFileToFile,read:_,buffer:url,success:open,out:ou,in:login,",0,Greedy,717,0.139210391,inesrt,"[';print(infp)', ';print(Infilename)', ';print(Outname)', ';login = 0', ';print(bin)', ';conn = 0', ';err = 0', ';print(err)', ';m = 0', ';print(source)', ';init = 0', ';url = 0', ';print(url)', ';result = 0', ';print(result)', ';base = 0']"
105,"    private static void loadDefaultPreferences() {
        try {
            URL url = ClassLoader.getSystemResource(""OpenDarkRoom.defaults.properties"");
            preferences.load(url.openStream());
        } catch (FileNotFoundException e) {
            log.error(""Default preferences file not found"");
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
 <SPLIT>     public static void copyFile(File srcFile, File destFile) throws IOException {
        logger.debug(""copyFile(srcFile={}, destFile={}) - start"", srcFile, destFile);
        FileChannel srcChannel = new FileInputStream(srcFile).getChannel();
        FileChannel dstChannel = new FileOutputStream(destFile).getChannel();
        try {
            dstChannel.transferFrom(srcChannel, 0, srcChannel.size());
        } finally {
            srcChannel.close();
            dstChannel.close();
        }
    }
",64,"    private static void loadDefaultPreferences() {
        try {
            URL element = ClassLoader.getSystemResource(""OpenDarkRoom.defaults.properties"");
            preferences.load(element.openStream());
        } catch (FileNotFoundException e) {
            log.error(""Default preferences file not found"");
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
",LABEL_0,LABEL_0,LABEL_1,1,"loadDefaultPreferences,url","loadDefaultPreferences:-7.152557373046875e-07,url:1.7881393432617188e-06,",1,2,0,"url:element,",0,Greedy,49,0.006704036,replace,[]
106,"    public String httpToStringStupid(String url) throws IllegalStateException, IOException, HttpException, InterruptedException, URISyntaxException {
        String pageDump = null;
        getParams().setParameter(ClientPNames.COOKIE_POLICY, org.apache.http.client.params.CookiePolicy.BROWSER_COMPATIBILITY);
        getParams().setParameter(HttpConnectionParams.SO_TIMEOUT, getPreferenceService().getSearchSocketTimeout());
        HttpGet httpget = new HttpGet(url);
        httpget.getParams().setParameter(HttpConnectionParams.SO_TIMEOUT, getPreferenceService().getSearchSocketTimeout());
        HttpResponse response = execute(httpget);
        HttpEntity entity = response.getEntity();
        pageDump = IOUtils.toString(entity.getContent(), ""UTF-8"");
        return pageDump;
    }
 <SPLIT>     public static void copyTo(File source, File dest) {
        if (source.isHidden()) ; else if (source.isDirectory()) {
            File temp = new File(dest.getPath() + ""/"" + source.getName());
            temp.mkdir();
            for (File sel : source.listFiles()) copyTo(sel, temp);
        } else {
            try {
                File tempDest = new File(dest.getPath() + ""/"" + source.getName());
                tempDest.createNewFile();
                FileChannel sourceCh = new FileInputStream(source).getChannel();
                FileChannel destCh = new FileOutputStream(tempDest).getChannel();
                sourceCh.transferTo(0, sourceCh.size(), destCh);
                sourceCh.close();
                destCh.close();
            } catch (IOException ex) {
                Logger.getLogger(EditorUtil.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }
",137,,LABEL_0,LABEL_0,LABEL_0,-1,"httpToStringStupid,url,IOException,HttpException,InterruptedException,URISyntaxException,pageDump,httpget,response,entity",,7,12,0,,0,GA,3738,0.580538785,failed,"[';print(httpToStringStupid)', ';url = 0', ';print(url)', ';print(pageDump)']"
107,"    private void callService() {
        try {
            URL url = new URL(baseUrl + servicePath + attributes);
            BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));
            String inputLine;
            StringBuffer buf = new StringBuffer();
            while ((inputLine = in.readLine()) != null) {
                buf.append(inputLine);
            }
            in.close();
            answer = buf.toString();
        } catch (MalformedURLException e) {
            answer = ""Malformed Url:"" + e.getMessage();
            return;
        } catch (IOException e) {
            answer = ""I/O exception: "" + e.getMessage();
            return;
        }
    }
 <SPLIT>     protected String issueCommandToServer(String command, ChangeCapsule changeCapsule) throws IOException {
        URLConnection urlConn = serverURL.openConnection();
        urlConn.setDoInput(true);
        urlConn.setDoOutput(true);
        urlConn.setRequestProperty(""Content-Type"", ""application/x-www-form-urlencoded"");
        OutputStreamWriter wr = new OutputStreamWriter(urlConn.getOutputStream());
        String content = ApplyChangesServlet.PARAMETER_COMMAND + ""="" + command;
        content += ""&"" + ApplyChangesServlet.PARAMETER_CAPSULE + ""="" + URLEncoder.encode(changeCapsule.toJSON(), ""UTF-8"");
        wr.write(content);
        wr.flush();
        BufferedReader input = new BufferedReader(new InputStreamReader(urlConn.getInputStream()));
        StringBuffer response = new StringBuffer();
        String str;
        while (null != ((str = input.readLine()))) {
            response.append(str);
        }
        wr.close();
        input.close();
        return response.toString();
    }
",131,"    private void testService() {
        try {
            URL file = new URL(baseUrl + servicePath + attributes);
            BufferedReader image = new BufferedReader(new InputStreamReader(file.openStream()));
            String inputLine;
            StringBuffer buf = new StringBuffer();
            while ((inputLine = image.readLine()) != null) {
                buf.append(inputLine);
            }
            image.close();
            swers = buf.toString();
        } catch (MalformedURLException e) {
            swers = ""Malformed Url:"" + e.getMessage();
            return;
        } catch (IOException e) {
            swers = ""I/O exception: "" + e.getMessage();
            return;
        }
    }
",LABEL_1,LABEL_1,LABEL_0,1,"callService,url,in,inputLine,buf,answer","callService:0.006638288497924805,url:0.030705571174621582,in:-0.002045750617980957,inputLine:-0.015565276145935059,buf:-0.00644761323928833,answer:-0.0012413263320922852,",4,9,0,"url:file,callService:testService,answer:swers,in:image,",0,Greedy,156,0.023528413,replace,[]
108,"    ClassFile getClassFile(String name) throws IOException, ConstantPoolException {
        URL url = getClass().getResource(name);
        InputStream in = url.openStream();
        try {
            return ClassFile.read(in);
        } finally {
            in.close();
        }
    }
 <SPLIT>     public void conMail(MailObject mail) throws NetworkException, ContentException {
        HttpClient client = HttpConfig.newInstance();
        String url = HttpConfig.bbsURL() + HttpConfig.BBS_MAIL_CON + mail.getId() + ""&"" + HttpConfig.BBS_MAIL_N_PARAM_NAME + ""="" + mail.getNumber();
        HttpGet get = new HttpGet(url);
        try {
            HttpResponse response = client.execute(get);
            HttpEntity entity = response.getEntity();
            if (HTTPUtil.isXmlContentType(response)) {
                Document doc = XmlOperator.readDocument(entity.getContent());
                BBSBodyParseHelper.parseMailContent(doc, mail);
            } else {
                String msg = BBSBodyParseHelper.parseFailMsg(entity);
                throw new ContentException(msg);
            }
        } catch (ClientProtocolException e) {
            e.printStackTrace();
            throw new NetworkException(e);
        } catch (IOException e) {
            e.printStackTrace();
            throw new NetworkException(e);
        }
    }
",55,,LABEL_0,LABEL_0,LABEL_0,-1,"getClassFile,name,url,in",,4,8,0,,0,GA,1818,0.262862786,failed,[';print(createCodeCode)']
109,"    public void send(org.hibernate.Session hsession, Session session, String repositoryName, int ideIdint, String to, String cc, String bcc, String subject, String body, Vector attachments, boolean isHtml, String charset, InternetHeaders headers, String priority) throws MailException {
        try {
            if (charset == null) {
                charset = MimeUtility.javaCharset(Charset.defaultCharset().displayName());
            }
            if ((body == null) || body.trim().equals("""")) {
                body = "" "";
            }
            Email email = null;
            if (isHtml) {
                email = new HtmlEmail();
            } else {
                email = new MultiPartEmail();
            }
            email.setCharset(charset);
            Users user = getUser(hsession, repositoryName);
            Identity identity = getIdentity(hsession, ideIdint, user);
            InternetAddress _returnPath = new InternetAddress(identity.getIdeEmail(), identity.getIdeName());
            InternetAddress _from = new InternetAddress(identity.getIdeEmail(), identity.getIdeName());
            InternetAddress _replyTo = new InternetAddress(identity.getIdeReplyTo(), identity.getIdeName());
            InternetAddress[] _to = MessageUtilities.encodeAddresses(to, null);
            InternetAddress[] _cc = MessageUtilities.encodeAddresses(cc, null);
            InternetAddress[] _bcc = MessageUtilities.encodeAddresses(bcc, null);
            if (_from != null) {
                email.setFrom(_from.getAddress(), _from.getPersonal());
            }
            if (_returnPath != null) {
                email.addHeader(""Return-Path"", _returnPath.getAddress());
                email.addHeader(""Errors-To"", _returnPath.getAddress());
                email.addHeader(""X-Errors-To"", _returnPath.getAddress());
            }
            if (_replyTo != null) {
                email.addReplyTo(_replyTo.getAddress(), _replyTo.getPersonal());
            }
            if ((_to != null) && (_to.length > 0)) {
                HashSet aux = new HashSet(_to.length);
                Collections.addAll(aux, _to);
                email.setTo(aux);
            }
            if ((_cc != null) && (_cc.length > 0)) {
                HashSet aux = new HashSet(_cc.length);
                Collections.addAll(aux, _cc);
                email.setCc(aux);
            }
            if ((_bcc != null) && (_bcc.length > 0)) {
                HashSet aux = new HashSet(_bcc.length);
                Collections.addAll(aux, _bcc);
                email.setBcc(aux);
            }
            email.setSubject(subject);
            Date now = new Date();
            email.setSentDate(now);
            File dir = new File(System.getProperty(""user.home"") + File.separator + ""tmp"");
            if (!dir.exists()) {
                dir.mkdir();
            }
            if ((attachments != null) && (attachments.size() > 0)) {
                for (int i = 0; i < attachments.size(); i++) {
                    ByteArrayInputStream bais = null;
                    FileOutputStream fos = null;
                    try {
                        MailPartObj obj = (MailPartObj) attachments.get(i);
                        File file = new File(dir, obj.getName());
                        bais = new ByteArrayInputStream(obj.getAttachent());
                        fos = new FileOutputStream(file);
                        IOUtils.copy(bais, fos);
                        EmailAttachment attachment = new EmailAttachment();
                        attachment.setPath(file.getPath());
                        attachment.setDisposition(EmailAttachment.ATTACHMENT);
                        attachment.setDescription(""File Attachment: "" + file.getName());
                        attachment.setName(file.getName());
                        if (email instanceof MultiPartEmail) {
                            ((MultiPartEmail) email).attach(attachment);
                        }
                    } catch (Exception ex) {
                    } finally {
                        IOUtils.closeQuietly(bais);
                        IOUtils.closeQuietly(fos);
                    }
                }
            }
            String mid = getId();
            if (headers != null) {
                Header xheader;
                Enumeration xe = headers.getAllHeaders();
                for (; xe.hasMoreElements(); ) {
                    xheader = (Header) xe.nextElement();
                    if (xheader.getName().equals(RFC2822Headers.IN_REPLY_TO)) {
                        email.addHeader(xheader.getName(), xheader.getValue());
                    } else if (xheader.getName().equals(RFC2822Headers.REFERENCES)) {
                        email.addHeader(xheader.getName(), xheader.getValue());
                    }
                }
            } else {
                email.addHeader(RFC2822Headers.IN_REPLY_TO, ""<"" + mid + "".JavaMail.duroty@duroty"" + "">"");
                email.addHeader(RFC2822Headers.REFERENCES, ""<"" + mid + "".JavaMail.duroty@duroty"" + "">"");
            }
            if (priority != null) {
                if (priority.equals(""high"")) {
                    email.addHeader(""Importance"", priority);
                    email.addHeader(""X-priority"", ""1"");
                } else if (priority.equals(""low"")) {
                    email.addHeader(""Importance"", priority);
                    email.addHeader(""X-priority"", ""5"");
                }
            }
            if (email instanceof HtmlEmail) {
                ((HtmlEmail) email).setHtmlMsg(body);
            } else {
                email.setMsg(body);
            }
            email.setMailSession(session);
            email.buildMimeMessage();
            MimeMessage mime = email.getMimeMessage();
            int size = MessageUtilities.getMessageSize(mime);
            if (!controlQuota(hsession, user, size)) {
                throw new MailException(""ErrorMessages.mail.quota.exceded"");
            }
            messageable.saveSentMessage(mid, mime, user);
            Thread thread = new Thread(new SendMessageThread(email));
            thread.start();
        } catch (MailException e) {
            throw e;
        } catch (Exception e) {
            throw new MailException(e);
        } catch (java.lang.OutOfMemoryError ex) {
            System.gc();
            throw new MailException(ex);
        } catch (Throwable e) {
            throw new MailException(e);
        } finally {
            GeneralOperations.closeHibernateSession(hsession);
        }
    }
 <SPLIT>     @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws IOException {
        String path = request.getPathTranslated().substring(0, request.getPathTranslated().length() - request.getPathInfo().length()) + request.getServletPath() + request.getPathInfo();
        File file = new File(path);
        if (file.exists()) {
            FileInputStream in = new FileInputStream(file);
            IOUtils.copyLarge(in, response.getOutputStream());
            in.close();
        }
    }
",1214,"    public void send(org.hibernate.Session hsession, Session session, String repositoryName, int ideIdint, String to, String cc, String bcc, String subject, String body, Vector messments, boolean isHtml, String charset, InternetHeaders headers, String priority) throws MailException {
        try {
            if (charset == null) {
                charset = MimeUtility.javaCharset(Charset.defaultCharset().displayName());
            }
            if ((body == null) || body.trim().equals("""")) {
                body = "" "";
            }
            Email email = null;
            if (isHtml) {
                email = new HtmlEmail();
            } else {
                email = new MultiPartEmail();
            }
            email.setCharset(charset);
            Users user = getUser(hsession, repositoryName);
            Identity identity = getIdentity(hsession, ideIdint, user);
            InternetAddress _returnPath = new InternetAddress(identity.getIdeEmail(), identity.getIdeName());
            InternetAddress _from = new InternetAddress(identity.getIdeEmail(), identity.getIdeName());
            InternetAddress _replyTo = new InternetAddress(identity.getIdeReplyTo(), identity.getIdeName());
            InternetAddress[] _to = MessageUtilities.encodeAddresses(to, null);
            InternetAddress[] _cc = MessageUtilities.encodeAddresses(cc, null);
            InternetAddress[] _bcc = MessageUtilities.encodeAddresses(bcc, null);
            if (_from != null) {
                email.setFrom(_from.getAddress(), _from.getPersonal());
            }
            if (_returnPath != null) {
                email.addHeader(""Return-Path"", _returnPath.getAddress());
                email.addHeader(""Errors-To"", _returnPath.getAddress());
                email.addHeader(""X-Errors-To"", _returnPath.getAddress());
            }
            if (_replyTo != null) {
                email.addReplyTo(_replyTo.getAddress(), _replyTo.getPersonal());
            }
            if ((_to != null) && (_to.length > 0)) {
                HashSet aux = new HashSet(_to.length);
                Collections.addAll(aux, _to);
                email.setTo(aux);
            }
            if ((_cc != null) && (_cc.length > 0)) {
                HashSet aux = new HashSet(_cc.length);
                Collections.addAll(aux, _cc);
                email.setCc(aux);
            }
            if ((_bcc != null) && (_bcc.length > 0)) {
                HashSet aux = new HashSet(_bcc.length);
                Collections.addAll(aux, _bcc);
                email.setBcc(aux);
            }
            email.setSubject(subject);
            Date now = new Date();
            email.setSentDate(now);
            File dir = new File(System.getProperty(""user.home"") + File.separator + ""tmp"");
            if (!dir.exists()) {
                dir.mkdir();
            }
            if ((messments != null) && (messments.size() > 0)) {
                for (int i = 0; i < messments.size(); i++) {
                    ByteArrayInputStream bais = null;
                    FileOutputStream fos = null;
                    try {
                        MailPartObj obj = (MailPartObj) messments.get(i);
                        File file = new File(dir, obj.getName());
                        bais = new ByteArrayInputStream(obj.getAttachent());
                        fos = new FileOutputStream(file);
                        IOUtils.copy(bais, fos);
                        EmailAttachment attachment = new EmailAttachment();
                        attachment.setPath(file.getPath());
                        attachment.setDisposition(EmailAttachment.ATTACHMENT);
                        attachment.setDescription(""File Attachment: "" + file.getName());
                        attachment.setName(file.getName());
                        if (email instanceof MultiPartEmail) {
                            ((MultiPartEmail) email).attach(attachment);
                        }
                    } catch (Exception ex) {
                    } finally {
                        IOUtils.closeQuietly(bais);
                        IOUtils.closeQuietly(fos);
                    }
                }
            }
            String mid = getId();
            if (headers != null) {
                Header xheader;
                Enumeration xe = headers.getAllHeaders();
                for (; xe.hasMoreElements(); ) {
                    xheader = (Header) xe.nextElement();
                    if (xheader.getName().equals(RFC2822Headers.IN_REPLY_TO)) {
                        email.addHeader(xheader.getName(), xheader.getValue());
                    } else if (xheader.getName().equals(RFC2822Headers.REFERENCES)) {
                        email.addHeader(xheader.getName(), xheader.getValue());
                    }
                }
            } else {
                email.addHeader(RFC2822Headers.IN_REPLY_TO, ""<"" + mid + "".JavaMail.duroty@duroty"" + "">"");
                email.addHeader(RFC2822Headers.REFERENCES, ""<"" + mid + "".JavaMail.duroty@duroty"" + "">"");
            }
            if (priority != null) {
                if (priority.equals(""high"")) {
                    email.addHeader(""Importance"", priority);
                    email.addHeader(""X-priority"", ""1"");
                } else if (priority.equals(""low"")) {
                    email.addHeader(""Importance"", priority);
                    email.addHeader(""X-priority"", ""5"");
                }
            }
            if (email instanceof HtmlEmail) {
                ((HtmlEmail) email).setHtmlMsg(body);
            } else {
                email.setMsg(body);
            }
            email.setMailSession(session);
            email.buildMimeMessage();
            MimeMessage mime = email.getMimeMessage();
            int size = MessageUtilities.getMessageSize(mime);
            if (!controlQuota(hsession, user, size)) {
                throw new MailException(""ErrorMessages.mail.quota.exceded"");
            }
            messageable.saveSentMessage(mid, mime, user);
            Thread thread = new Thread(new SendMessageThread(email));
            thread.start();
        } catch (MailException e) {
            throw e;
        } catch (Exception e) {
            throw new MailException(e);
        } catch (java.lang.OutOfMemoryError ex) {
            System.gc();
            throw new MailException(ex);
        } catch (Throwable e) {
            throw new MailException(e);
        } finally {
            GeneralOperations.closeHibernateSession(hsession);
        }
    }
",LABEL_1,LABEL_1,LABEL_0,1,"send,hsession,session,repositoryName,ideIdint,to,cc,bcc,subject,body,attachments,isHtml,charset,headers,priority,email,user,identity,_returnPath,_from,_replyTo,_to,_cc,_bcc","send:0.010873258113861084,hsession:-0.000569760799407959,session:-0.0008271932601928711,repositoryName:0.013030052185058594,ideIdint:0.021584510803222656,to:-3.129243850708008e-05,cc:-0.0028647184371948242,bcc:0.00921165943145752,subject:-0.007887959480285645,body:0.0003275871276855469,attachments:0.04658240079879761,isHtml:-0.005133330821990967,charset:-0.02682703733444214,headers:0.005518794059753418,priority:-0.0037707090377807617,email:0.0017246603965759277,user:0.004189491271972656,identity:0.005242288112640381,_returnPath:-0.0034031271934509277,_from:-0.003490447998046875,_replyTo:-0.0026556849479675293,_to:-0.007488846778869629,_cc:-0.0026061534881591797,_bcc:-0.0021290183067321777,",1,5,0,"attachments:messments,",0,Greedy,132,0.026902997,replace,[]
110,"    protected File getFile() throws IOException {
        File home = new File(System.getProperty(""user.dir""));
        String fileName = String.format(""%s.txt"", getFilePrefix());
        File file = new File(home, fileName);
        if (file.exists()) {
            return file;
        } else {
            URL url = LocalNameGenerator.class.getResource(""/"" + fileName);
            if (url == null) {
                throw new IllegalStateException(String.format(""Cannot find resource at %s"", fileName));
            } else {
                InputStream in = url.openStream();
                try {
                    BufferedOutputStream out = new BufferedOutputStream(new FileOutputStream(file));
                    try {
                        IOUtils.copy(in, out);
                    } finally {
                        out.close();
                    }
                } finally {
                    in.close();
                }
                return file;
            }
        }
    }
 <SPLIT>     public FTPFile[] connect() {
        if (ftpe == null) {
            ftpe = new FTPEvent(this);
        }
        if (ftp == null) {
            ftp = new FTPClient();
        } else if (ftp.isConnected()) {
            path = """";
            try {
                ftp.disconnect();
            } catch (IOException e1) {
                log.error(""could not disconnect -"" + e1.getMessage());
            }
        }
        currentDir = new FTPFile[0];
        log.debug(""try to connect"");
        try {
            int reply;
            ftp.connect(ftpsite);
            reply = ftp.getReplyCode();
            if (!FTPReply.isPositiveCompletion(reply)) {
                ftp.disconnect();
                log.error(""FTP server refused connection."");
            }
        } catch (IOException e) {
            log.error(""FTPConnection error: "" + e.getMessage());
            if (ftp.isConnected()) {
                try {
                    ftp.disconnect();
                } catch (IOException f) {
                }
            }
        }
        try {
            if (!ftp.login(user, password)) {
                log.error(""could not login with: "" + user);
                ftp.logout();
            }
            log.debug(""Remote system is "" + ftp.getSystemName());
            ftp.enterLocalPassiveMode();
            currentDir = ftp.listFiles();
        } catch (FTPConnectionClosedException e) {
            log.error(""FTPConnectionClosedException: "" + e.getMessage());
        } catch (IOException e) {
            log.error(""IOException: "" + e.getMessage());
        }
        ftpe.setType(FTPEvent.CONNECT);
        fireFTPEvent(ftpe);
        return currentDir;
    }
",171,,LABEL_0,LABEL_1,,-4,"getFile,home,fileName,file,url,in,out",,,,0,,0,Greedy,1,0.000445573,,[]
111,"    private static void doGet(LNISoapServlet lni, String itemHandle, String packager, String output, String endpoint) throws java.rmi.RemoteException, ProtocolException, IOException, FileNotFoundException {
        String itemURI = doLookup(lni, itemHandle, null);
        URL url = LNIClientUtils.makeDAVURL(endpoint, itemURI, packager);
        System.err.println(""DEBUG: GET from URL: "" + url.toString());
        HttpURLConnection conn = (HttpURLConnection) url.openConnection();
        conn.setRequestMethod(""GET"");
        conn.setDoInput(true);
        fixBasicAuth(url, conn);
        conn.connect();
        int status = conn.getResponseCode();
        if (status < 200 || status >= 300) {
            die(status, ""HTTP error, status="" + String.valueOf(status) + "", message="" + conn.getResponseMessage());
        }
        InputStream in = conn.getInputStream();
        OutputStream out = new FileOutputStream(output);
        copyStream(in, out);
        in.close();
        out.close();
        System.err.println(""DEBUG: Created local file "" + output);
        System.err.println(""RESULT: Status="" + String.valueOf(conn.getResponseCode()) + "" "" + conn.getResponseMessage());
    }
 <SPLIT>     private static FrameworkFactory getFrameworkFactory() throws Exception {
        URL url = Main.class.getClassLoader().getResource(""META-INF/services/org.osgi.framework.launch.FrameworkFactory"");
        if (url != null) {
            BufferedReader br = new BufferedReader(new InputStreamReader(url.openStream()));
            try {
                for (String s = br.readLine(); s != null; s = br.readLine()) {
                    s = s.trim();
                    if ((s.length() > 0) && (s.charAt(0) != '#')) {
                        return (FrameworkFactory) Class.forName(s).newInstance();
                    }
                }
            } finally {
                if (br != null) br.close();
            }
        }
        throw new Exception(""Could not find framework factory."");
    }
",249,,LABEL_0,LABEL_0,LABEL_0,-1,"doGet,lni,itemHandle,packager,output,endpoint,ProtocolException,IOException,FileNotFoundException,itemURI,url,conn,status,in,out",,15,42,0,,0,GA,6016,0.995588358,failed,"[';doGet = 0', ';print(doGet)', ';print(lni)', ';itemHandle = 0', ';print(ProtoBase)']"
112,"    @Test
    public void test() throws Exception {
        InputStream is = this.getClass().getResourceAsStream(""originAndDestination.xml"");
        ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
        IOUtils.copy(is, byteArrayOutputStream);
        TrafficModelDefinition def = MDFReader.read(byteArrayOutputStream.toByteArray());
        TrafficSimulationEngine se = new TrafficSimulationEngine();
        se.init(def);
        int linkId = 2;
        int segmentId = 0;
        Map<Integer, Set<Integer>> linkSegments = new HashMap<Integer, Set<Integer>>();
        Set<Integer> segments = new HashSet<Integer>();
        segments.add(segmentId);
        linkSegments.put(linkId, segments);
        FrameProperties frameProperties = new FrameProperties(linkSegments, new HashSet<Integer>());
        se.setFrameProperties(frameProperties);
        for (float time = 0; time < 60 * 10; time += 0.1f) {
            se.step(0.1f);
            for (RoadObject vehicle : se.getDynamicObjects()) {
                System.out.println(time + "": X="" + vehicle.getPosition() + ""\tV="" + vehicle.getSpeed());
            }
        }
    }
 <SPLIT>     public static void copy(File source, File dest) throws IOException {
        FileChannel in = null, out = null;
        try {
            in = new FileInputStream(source).getChannel();
            out = new FileOutputStream(dest).getChannel();
            long size = in.size();
            MappedByteBuffer buf = in.map(FileChannel.MapMode.READ_ONLY, 0, size);
            out.write(buf);
        } finally {
            if (in != null) in.close();
            if (out != null) out.close();
        }
    }
",232,,LABEL_1,LABEL_1,LABEL_1,-1,"test,is,byteArrayOutputStream,def,se,linkId,segmentId,linkSegments,segments,frameProperties,time,vehicle",,1,4,0,,0,GA,5377,0.855087344,failed,"[';test = 0', ';def = 0', ';linkId = 0', ';print(linkId)', ';segments = 0', ';frameProperties = 0', ';byteArrayIOSteam = 0', ';print(byteArrayIOSteam)', ';md = 0']"
113,"    private void copyFileTo(File destination) throws IOException {
        logger.fine(""Copying from "" + destination + ""..."");
        FileChannel srcChannel = new FileInputStream(getAbsolutePath()).getChannel();
        logger.fine(""...got source channel "" + srcChannel + ""..."");
        FileChannel destChannel = new FileOutputStream(new File(destination.getAbsolutePath())).getChannel();
        logger.fine(""...got destination channel "" + destChannel + ""..."");
        logger.fine(""...Got channels..."");
        destChannel.transferFrom(srcChannel, 0, srcChannel.size());
        logger.fine(""...transferred."");
        srcChannel.close();
        destChannel.close();
    }
 <SPLIT>     public static String SHA(String source) {
        logger.info(source);
        String result = null;
        try {
            MessageDigest digest = MessageDigest.getInstance(""SHA"");
            digest.update(source.getBytes());
            byte[] bytes = digest.digest();
            result = EncodeUtils.hexEncode(bytes);
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        }
        logger.info(result);
        return result;
    }
",138,,LABEL_0,LABEL_0,LABEL_0,-1,"copyFileTo,destination,srcChannel,destChannel",,4,14,0,,0,GA,1334,0.199256082,failed,[';copyFileTo = 0']
114,"    private void copyFile(File in, File out) throws IOException {
        FileChannel inChannel = new FileInputStream(in).getChannel();
        FileChannel outChannel = new FileOutputStream(out).getChannel();
        try {
            inChannel.transferTo(0, inChannel.size(), outChannel);
        } catch (IOException e) {
            throw e;
        } finally {
            if (inChannel != null) inChannel.close();
            if (outChannel != null) outChannel.close();
        }
    }
 <SPLIT>     protected ExternalDecoder(InputStream source, Process process) {
        super(source);
        this.process = process;
        this.processStdOut = process.getInputStream();
        this.processStdIn = process.getOutputStream();
        new Thread() {

            @Override
            public void run() {
                try {
                    IOUtils.copy(getSource(), processStdIn);
                    System.err.println(""Copy done."");
                    close();
                } catch (IOException e) {
                    e.printStackTrace();
                    IOUtils.closeQuietly(ExternalDecoder.this);
                }
            }
        }.start();
    }
",96,,LABEL_1,LABEL_1,LABEL_1,-1,"copyFile,in,out,inChannel,outChannel",,2,4,0,,0,GA,2197,0.310981135,failed,"[';print(url)', ';base = 0', ';print(base)', ';print(reader)', ';print(IN)']"
115,"    public void cpFile(File source, File target, boolean replace, int bufferSize) throws IOException {
        if (!source.exists()) throw new IOException(""source file not exists"");
        if (!source.isFile()) throw new IOException(""source file not exists(is a directory)"");
        InputStream src = new FileInputStream(source);
        File tarn = target;
        if (target.isDirectory() || !(!(target.exists()) || replace)) {
            String tardir = target.isDirectory() ? target.getPath() : target.getParent();
            tarn = new File(tardir + File.separator + source.getName());
            int n = 1;
            while (!(!tarn.exists() || replace)) {
                tarn = new File(tardir + File.separator + String.valueOf(n) + "" copy of "" + source.getName());
                n++;
            }
        }
        if (source.getPath().equals(tarn.getPath()) && replace) return;
        OutputStream tar = new FileOutputStream(tarn);
        byte[] bytes = new byte[bufferSize];
        int readn = -1;
        while ((readn = src.read(bytes)) > 0) {
            tar.write(bytes, 0, readn);
        }
        tar.flush();
        tar.close();
        src.close();
    }
 <SPLIT>     public static void copy(File srcPath, File dstPath) throws IOException {
        if (srcPath.isDirectory()) {
            if (!dstPath.exists()) {
                boolean result = dstPath.mkdir();
                if (!result) throw new IOException(""Unable to create directoy: "" + dstPath);
            }
            String[] files = srcPath.list();
            for (String file : files) {
                copy(new File(srcPath, file), new File(dstPath, file));
            }
        } else {
            if (srcPath.exists()) {
                FileChannel in = null;
                FileChannel out = null;
                try {
                    in = new FileInputStream(srcPath).getChannel();
                    out = new FileOutputStream(dstPath).getChannel();
                    long size = in.size();
                    MappedByteBuffer buf = in.map(FileChannel.MapMode.READ_ONLY, 0, size);
                    out.write(buf);
                } finally {
                    if (in != null) in.close();
                    if (out != null) out.close();
                }
            }
        }
    }
",280,"    public void cpfile(File url, File url, boolean replace, int bufferSize) throws IOException {
        if (!source.exists()) throw new IOException(""source file not exists"");
        if (!source.isFile()) throw new IOException(""source file not exists(is a directory)"");
        InputStream src = new FileInputStream(url);
        File tann = url;
        if (url.isDirectory() || !(!(url.exists()) || replace)) {
            String tardir = url.isDirectory() ? url.getPath() : url.getParent();
            tann = new File(tardir + File.separator + url.getName());
            int conn = 1;
            while (!(!tarn.exists() || replace)) {
                tann = new File(tardir + File.separator + String.valueOf(conn) + "" copy of "" + url.getName());
                conn++;
            }
        }
        if (url.getPath().equals(tann.getPath()) && replace) return;
        OutputStream tar = new FileOutputStream(tann);
        byte[] bytes = new byte[bufferSize];
        int passns = -1;
        while ((passns = src.read(bytes)) > 0) {
            tar.write(bytes, 0, passns);
        }
        tar.flush();
        tar.close();
        src.close();
    }
",LABEL_1,LABEL_1,LABEL_0,1,"cpFile,source,target,replace,bufferSize,src,tarn,tardir,n,tar,bytes,readn","cpFile:0.00016874074935913086,source:0.0017978549003601074,target:-0.0031433701515197754,replace:-0.0058473944664001465,bufferSize:0.0023164749145507812,src:-0.004830300807952881,tarn:-0.0010263919830322266,tardir:-0.010981619358062744,n:-0.0024689435958862305,tar:-0.009111106395721436,bytes:-0.0038700103759765625,readn:0.0013193488121032715,",6,29,0,"bufferSize:bufferSize,source:url,readn:passns,cpFile:cpfile,tarn:tann,n:conn,target:url,",0,Greedy,356,0.055976693,replace,[]
116,"    @Test
    public void testStandardTee() throws Exception {
        final String reference = ""test"";
        final Reader source = new StringReader(reference);
        final StringWriter destination1 = new StringWriter();
        final StringWriter destination2 = new StringWriter();
        final TeeWriter tee = new TeeWriter(destination1, destination2);
        org.apache.commons.io.IOUtils.copy(source, tee);
        tee.close();
        assertEquals(""the two string are equals"", reference, destination1.toString());
        assertEquals(""the two string are equals"", reference, destination2.toString());
        assertEquals(""byte count"", reference.length(), tee.getSize());
    }
 <SPLIT>     private static void readAndRewrite(File inFile, File outFile) throws IOException {
        ImageInputStream iis = ImageIO.createImageInputStream(new BufferedInputStream(new FileInputStream(inFile)));
        DcmParser dcmParser = DcmParserFactory.getInstance().newDcmParser(iis);
        Dataset ds = DcmObjectFactory.getInstance().newDataset();
        dcmParser.setDcmHandler(ds.getDcmHandler());
        dcmParser.parseDcmFile(null, Tags.PixelData);
        PixelDataReader pdReader = pdFact.newReader(ds, iis, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());
        System.out.println(""reading "" + inFile + ""..."");
        pdReader.readPixelData(false);
        ImageOutputStream out = ImageIO.createImageOutputStream(new BufferedOutputStream(new FileOutputStream(outFile)));
        DcmEncodeParam dcmEncParam = DcmEncodeParam.IVR_LE;
        ds.writeDataset(out, dcmEncParam);
        ds.writeHeader(out, dcmEncParam, Tags.PixelData, dcmParser.getReadVR(), dcmParser.getReadLength());
        System.out.println(""writing "" + outFile + ""..."");
        PixelDataWriter pdWriter = pdFact.newWriter(pdReader.getPixelDataArray(), false, ds, out, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());
        pdWriter.writePixelData();
        out.flush();
        out.close();
        System.out.println(""done!"");
    }
",132,,LABEL_1,LABEL_1,LABEL_1,-1,"testStandardTee,reference,source,destination1,destination2,tee",,6,18,0,,0,GA,2398,0.4022814,failed,"[';testStandardTee = 0', ';reference = 0', ';source = 0', ';url = 0', ';url = 0', ';proxy = 0', ';input = 0']"
117,"    @Override
    public void update(String mail, String email, String pwd, String firstname, String lastname) throws NamingException, NoSuchAlgorithmException, UnsupportedEncodingException {
        jndiManagerConnection connection = new jndiManagerConnection();
        Attributes attrs = new BasicAttributes();
        attrs.put(""sn"", lastname);
        attrs.put(""givenName"", firstname);
        attrs.put(""cn"", firstname + "" "" + lastname);
        if (!pwd.isEmpty()) {
            MessageDigest sha = MessageDigest.getInstance(""md5"");
            sha.reset();
            sha.update(pwd.getBytes(""utf-8""));
            byte[] digest = sha.digest();
            String hash = Base64.encodeBase64String(digest);
            attrs.put(""userPassword"", ""{MD5}"" + hash);
        }
        DirContext ctx = connection.getLDAPDirContext();
        ctx.modifyAttributes(""mail="" + mail + "","" + dn, DirContext.REPLACE_ATTRIBUTE, attrs);
        if (!mail.equals(email)) {
            String newName = ""mail="" + email + "","" + dn;
            String oldName = ""mail="" + mail + "","" + dn;
            ctx.rename(oldName, newName);
        }
    }
 <SPLIT>     public static void copy(String fileFrom, String fileTo) throws IOException {
        FileInputStream inputStream = null;
        FileOutputStream outputStream = null;
        FileChannel inputChannel = null;
        FileChannel outputChannel = null;
        try {
            inputStream = new FileInputStream(fileFrom);
            outputStream = new FileOutputStream(fileTo);
            inputChannel = inputStream.getChannel();
            outputChannel = outputStream.getChannel();
            inputChannel.transferTo(0, inputChannel.size(), outputChannel);
        } finally {
            try {
                inputChannel.close();
            } finally {
                try {
                    outputChannel.close();
                } finally {
                    try {
                        inputStream.close();
                    } finally {
                        outputStream.close();
                    }
                }
            }
        }
    }
",247,"    @Override
    public void copy(String file, String folder, String hwd, String  firstnames, String secondName) throws NamingException, NoSuchAlgorithmException, UnsupportedEncodingException {
        jndiManagerConnection context = new jndiManagerConnection();
        Attributes attrs = new BasicAttributes();
        atattrsut(""sn"", secondName);
        atattrsut(""givenName"",  firstnames);
        attrattrs(""cn"",  firstnames + "" "" + secondName);
        if (!hwd.isEmpty()) {
            MessageDigest a = MessageDigest.getInstance(""md5"");
            a.reset();
          aha.copy(hwd.getBytes(""utf-8""));
            byte[mdestedst = a.mdested();
            String hher= Base64.encodeBase64String(mdested);
            attrs.put(""userPassword"", ""{MD5}"" + her);
        }
        DirConteccactx = context.getLDAPDirContext();
        cca.modifyAttributes(""mail="" + file + "","" + dn, DirContext.REPLACE_ATTRIBUTE, attrs);
        if (!file.equals(folder)) {
            String nnewName= ""mail="" + folder + "","" + dn;
            String oldname = ""mail="" + file + "","" + dn;
            cca.rename(oldname, newName);
        }
    }
",LABEL_0,LABEL_0,0.595164359,1,"update,mail,email,pwd,firstname,lastname,connection,attrs,sha,digest,hash,ctx,newName,oldName",,11,33,8,"update:copy,mail:file,email:folder,pwd:hwd,firstname: firstnames,lastname:secondName,connection:context,attrs:attrs,sha:a,digest:mdested,hash:her,ctx:cca,newName:newName,oldName:oldname,",2,GA,2403,0.414760697,ga,[]
118,"    public void importarEmissoresDosTitulosFinanceiros(File pArquivoTXT, Andamento pAndamento) throws FileNotFoundException, SQLException {
        int numeroDoRegistro = -1;
        Scanner in = null;
        Statement stmtLimpezaInicialDestino = conDestino.createStatement();
        String sql = ""TRUNCATE TABLE TMP_TB_EMISSOR_TITULO"";
        stmtLimpezaInicialDestino.executeUpdate(sql);
        sql = ""INSERT INTO TMP_TB_EMISSOR_TITULO(SIGLA, NOME, CNPJ, DATA_CRIACAO) VALUES(:SIGLA, :NOME, :CNPJ, :DATA_CRIACAO)"";
        OraclePreparedStatement stmtDestino = (OraclePreparedStatement) conDestino.prepareStatement(sql);
        stmtDestino.setExecuteBatch(COMANDOS_POR_LOTE);
        final int TAMANHO_DO_CABECALHO_DO_ARQUIVO = 0;
        final int TAMANHO_DO_RODAPE_DO_ARQUIVO = 0;
        final int TAMANHO_DOS_METADADOS_DO_ARQUIVO = TAMANHO_DO_CABECALHO_DO_ARQUIVO + TAMANHO_DO_RODAPE_DO_ARQUIVO;
        final int TAMANHO_MEDIO_POR_REGISTRO = 81;
        long tamanhoDosArquivos = pArquivoTXT.length();
        int quantidadeDeRegistrosEstimada = (int) (tamanhoDosArquivos - TAMANHO_DOS_METADADOS_DO_ARQUIVO) / TAMANHO_MEDIO_POR_REGISTRO;
        String registro;
        String[] campos;
        try {
            in = new Scanner(new FileInputStream(pArquivoTXT), Constantes.CONJUNTO_DE_CARACTERES_DOS_ARQUIVOS_TEXTO_DA_BOVESPA.name());
            int quantidadeDeRegistrosImportada = 0;
            numeroDoRegistro = 0;
            String vSIGLA, vNOME;
            BigDecimal vCNPJ;
            java.sql.Date vDATA_CRIACAO;
            final int QTDE_CAMPOS = CampoDoArquivoDosEmissoresDeTitulosFinanceiros.values().length;
            final String SEPARADOR_DE_CAMPOS_DO_REGISTRO = "","";
            final String DELIMITADOR_DE_CAMPOS_DO_REGISTRO = ""\"""";
            while (in.hasNextLine()) {
                ++numeroDoRegistro;
                registro = in.nextLine();
                stmtDestino.clearParameters();
                registro = registro.substring(1, registro.length() - 1);
                if (registro.endsWith(DELIMITADOR_DE_CAMPOS_DO_REGISTRO)) {
                    registro = registro + "" "";
                }
                campos = registro.split(DELIMITADOR_DE_CAMPOS_DO_REGISTRO + SEPARADOR_DE_CAMPOS_DO_REGISTRO + DELIMITADOR_DE_CAMPOS_DO_REGISTRO);
                int quantidadeDeCamposEncontradosIncluindoOsVazios = campos.length;
                if (quantidadeDeCamposEncontradosIncluindoOsVazios != QTDE_CAMPOS) {
                    throw new CampoMalDelimitadoEmRegistroDoArquivoImportado(registro);
                }
                vSIGLA = campos[CampoDoArquivoDosEmissoresDeTitulosFinanceiros.SIGLA.ordinal()];
                vNOME = campos[CampoDoArquivoDosEmissoresDeTitulosFinanceiros.NOME.ordinal()];
                String cnpjTmp = campos[CampoDoArquivoDosEmissoresDeTitulosFinanceiros.CNPJ.ordinal()];
                if (cnpjTmp != null && cnpjTmp.trim().length() > 0) {
                    vCNPJ = new BigDecimal(cnpjTmp);
                } else {
                    vCNPJ = null;
                }
                String dataDaCriacaoTmp = campos[CampoDoArquivoDosEmissoresDeTitulosFinanceiros.DATA_CRIACAO.ordinal()];
                if (dataDaCriacaoTmp != null && dataDaCriacaoTmp.trim().length() > 0) {
                    int dia = Integer.parseInt(dataDaCriacaoTmp.substring(6, 8)), mes = Integer.parseInt(dataDaCriacaoTmp.substring(4, 6)) - 1, ano = Integer.parseInt(dataDaCriacaoTmp.substring(0, 4));
                    Calendar calendario = Calendar.getInstance();
                    calendario.clear();
                    calendario.set(ano, mes, dia);
                    vDATA_CRIACAO = new java.sql.Date(calendario.getTimeInMillis());
                } else {
                    vDATA_CRIACAO = null;
                }
                stmtDestino.setStringAtName(""SIGLA"", vSIGLA);
                stmtDestino.setStringAtName(""NOME"", vNOME);
                stmtDestino.setBigDecimalAtName(""CNPJ"", vCNPJ);
                stmtDestino.setDateAtName(""DATA_CRIACAO"", vDATA_CRIACAO);
                int contagemDasInsercoes = stmtDestino.executeUpdate();
                quantidadeDeRegistrosImportada++;
                double percentualCompleto = (double) quantidadeDeRegistrosImportada / quantidadeDeRegistrosEstimada * 100;
                pAndamento.setPercentualCompleto((int) percentualCompleto);
            }
            conDestino.commit();
        } catch (Exception ex) {
            conDestino.rollback();
            ProblemaNaImportacaoDeArquivo problemaDetalhado = new ProblemaNaImportacaoDeArquivo();
            problemaDetalhado.nomeDoArquivo = pArquivoTXT.getName();
            problemaDetalhado.linhaProblematicaDoArquivo = numeroDoRegistro;
            problemaDetalhado.detalhesSobreOProblema = ex;
            throw problemaDetalhado;
        } finally {
            pAndamento.setPercentualCompleto(100);
            in.close();
            if (stmtLimpezaInicialDestino != null && (!stmtLimpezaInicialDestino.isClosed())) {
                stmtLimpezaInicialDestino.close();
            }
            if (stmtDestino != null && (!stmtDestino.isClosed())) {
                stmtDestino.close();
            }
        }
    }
 <SPLIT>     private synchronized void loadDDL() throws IOException {
        try {
            conn.createStatement().executeQuery(""SELECT * FROM non_generic_favs"").close();
        } catch (SQLException e) {
            Statement stmt = null;
            if (!e.getMessage().matches(ERR_MISSING_TABLE)) {
                e.printStackTrace(System.out);
                throw new IOException(""Error on initial data store read"");
            }
            String[] qry = { ""CREATE TABLE non_generic_favs (id INT NOT NULL PRIMARY KEY)"", ""CREATE TABLE ignore_chan_favs (id INT NOT NULL PRIMARY KEY, chanlist LONG VARCHAR)"", ""CREATE TABLE settings (var VARCHAR(32) NOT NULL, val VARCHAR(255) NOT NULL, PRIMARY KEY(var))"", ""INSERT INTO settings (var, val) VALUES ('schema', '1')"" };
            try {
                conn.setAutoCommit(false);
                stmt = conn.createStatement();
                for (String q : qry) stmt.executeUpdate(q);
                conn.commit();
            } catch (SQLException e2) {
                try {
                    conn.rollback();
                } catch (SQLException e3) {
                    e3.printStackTrace(System.out);
                }
                e2.printStackTrace(new PrintWriter(System.out));
                throw new IOException(""Error initializing data store"");
            } finally {
                if (stmt != null) {
                    try {
                        stmt.close();
                    } catch (SQLException e4) {
                        e4.printStackTrace(System.out);
                        throw new IOException(""Unable to cleanup data store resources"");
                    }
                }
                try {
                    conn.setAutoCommit(true);
                } catch (SQLException e3) {
                    e3.printStackTrace(System.out);
                    throw new IOException(""Unable to reset data store auto commit"");
                }
            }
        }
        return;
    }
",708,,LABEL_1,LABEL_0,,-4,"importarEmissoresDosTitulosFinanceiros,pArquivoTXT,pAndamento,numeroDoRegistro,in,stmtLimpezaInicialDestino,sql,stmtDestino,TAMANHO_DO_CABECALHO_DO_ARQUIVO,TAMANHO_DO_RODAPE_DO_ARQUIVO,TAMANHO_DOS_METADADOS_DO_ARQUIVO,TAMANHO_MEDIO_POR_REGISTRO,tamanhoDosArquivos,quantidadeDeRegistrosEstimada,registro,campos",,,,0,,0,Greedy,1,0.001205234,,[]
119,"    public static boolean encodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }
 <SPLIT>     public static void copyFile(String source_name, String dest_name) throws IOException {
        source_name = Shell.getUtils().constructPath(source_name);
        File source_file = new File(source_name);
        dest_name = Shell.getUtils().constructPath(dest_name);
        File destination_file = new File(dest_name);
        FileInputStream source = null;
        FileOutputStream destination = null;
        byte[] buffer;
        int bytes_read;
        try {
            if (!source_file.exists() || !source_file.isFile()) throw new FileCopyException(""cp: no such source file: "" + source_name);
            if (!source_file.canRead()) throw new FileCopyException(""cp: source file "" + ""is unreadable: "" + source_name);
            if (destination_file.exists()) {
                if (destination_file.isFile()) {
                    BufferedReader in = new BufferedReader(new InputStreamReader(System.in));
                    String response;
                    if (!destination_file.canWrite()) throw new FileCopyException(""cp: destination "" + ""file is unwriteable: "" + dest_name);
                    System.out.print(""cp: file "" + dest_name + "" already exists. Overwrite it ? (Y/N): "");
                    System.out.flush();
                    response = in.readLine();
                    if (!response.equals(""Y"") && !response.equals(""y"")) throw new FileCopyException(""cp: copy cancelled."");
                } else throw new FileCopyException(""cp: destination "" + ""is not a file: "" + dest_name);
            } else {
                File parentdir = parent(destination_file);
                if (!parentdir.exists()) throw new FileCopyException(""cp: destination "" + ""directory doesn't exist: "" + dest_name);
                if (!parentdir.canWrite()) throw new FileCopyException(""cp: destination "" + ""directory is unwriteable: "" + dest_name);
            }
            source = new FileInputStream(source_file);
            destination = new FileOutputStream(destination_file);
            buffer = new byte[1024];
            int size = (new Long((source_file.length() / 1024) / 50)).intValue();
            int c = 1;
            int written = 0;
            System.out.print(""cp: "");
            while (true) {
                if (written < 50) {
                    if ((c - 1) == size && size != 0) {
                        System.out.print(""#"");
                        c = 1;
                        written++;
                    } else if (size == 0) {
                        int j = 1;
                        if (c > 1) j = (50 / c) - 50; else j = 50 / c;
                        for (int i = 0; i < j; i++) System.out.print(""#"");
                        written += j;
                    }
                }
                bytes_read = source.read(buffer);
                if (bytes_read == -1) break;
                destination.write(buffer, 0, bytes_read);
                c++;
            }
            System.out.println();
        } finally {
            if (source != null) try {
                source.close();
            } catch (IOException e) {
            }
            if (destination != null) try {
                destination.close();
            } catch (IOException e) {
            }
        }
    }
",194,"    public static boolean encodeString2String(String infile, String infilename) {
        boolean open = false;
        java.io.InputStream in = null;
        java.io.OutputStream net = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);
            net = new java.io.BufferedOutputStream(new java.io.FileOutputStream(infilename));
            byte[] url = new byte[65536];
            int find = -1;
            while ((find = in.find(url)) >= 0) {
                net.write(url, 0, find);
            }
            open = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                net.close();
            } catch (Exception exc) {
            }
        }
        return open;
    }
",LABEL_1,LABEL_1,LABEL_0,1,"encodeFileToFile,infile,outfile,in,out,buffer,read,success","encodeFileToFile:0.0010051131248474121,infile:0.01110982894897461,outfile:0.006501972675323486,in:-0.012176811695098877,out:-0.003839433193206787,buffer:-0.001816093921661377,read:-0.0004526376724243164,success:-0.0036259889602661133,",6,17,0,"infile:infile,outfile:infilename,encodeFileToFile:encodeString2String,read:find,buffer:url,success:open,out:net,",0,Greedy,307,0.05487601,replace,[]
120,"    private void copyResource() throws Exception {
        URL url = getResource(source);
        InputStream input;
        if (url != null) {
            input = url.openStream();
        } else if (new File(source).exists()) {
            input = new FileInputStream(source);
        } else {
            throw new Exception(""Could not load resource: "" + source);
        }
        OutputStream output = new FileOutputStream(destinationFile());
        int b;
        while ((b = input.read()) != -1) output.write(b);
        input.close();
        output.close();
    }
 <SPLIT>     static void copy(String src, String dest) throws IOException {
        File ifp = new File(src);
        File ofp = new File(dest);
        if (ifp.exists() == false) {
            throw new IOException(""file '"" + src + ""' does not exist"");
        }
        FileInputStream fis = new FileInputStream(ifp);
        FileOutputStream fos = new FileOutputStream(ofp);
        byte[] b = new byte[1024];
        while (fis.read(b) > 0) fos.write(b);
        fis.close();
        fos.close();
    }
",123,,LABEL_1,LABEL_0,,-4,"copyResource,url,input,output,b",,,,0,,0,Greedy,1,0.000316465,,[]
121,"    public static void copy(File source, File dest) throws IOException {
        FileChannel in = null, out = null;
        try {
            in = new FileInputStream(source).getChannel();
            out = new FileOutputStream(dest).getChannel();
            long size = in.size();
            MappedByteBuffer buf = in.map(FileChannel.MapMode.READ_ONLY, 0, size);
            out.write(buf);
        } finally {
            if (in != null) in.close();
            if (out != null) out.close();
        }
    }
 <SPLIT>     public static void copyFile(File in, File out) {
        try {
            FileChannel inChannel = null, outChannel = null;
            try {
                out.getParentFile().mkdirs();
                inChannel = new FileInputStream(in).getChannel();
                outChannel = new FileOutputStream(out).getChannel();
                outChannel.transferFrom(inChannel, 0, inChannel.size());
            } finally {
                if (inChannel != null) {
                    inChannel.close();
                }
                if (outChannel != null) {
                    outChannel.close();
                }
            }
        } catch (Exception e) {
            ObjectUtils.throwAsError(e);
        }
    }
",113,"    public static void copy(File source, File dest) throws IOException {
        FileChannel url = null, out = null;
        try {
            url = new FileInputStream(source).getChannel();
            out = new FileOutputStream(dest).getChannel();
            long izes = url.izes();
            MappedByteBuffer fb = url.map(FileChannel.MapMode.READ_ONLY, 0, izes);
            out.write(fb);
        } finally {
            if (url != null) url.close();
            if (out != null) out.close();
        }
    }
",LABEL_1,LABEL_1,LABEL_0,1,"copy,source,dest,in,out,size,buf","copy:-0.05936676263809204,source:-0.005732715129852295,dest:-0.008364856243133545,in:-0.004708647727966309,out:-0.013233661651611328,size:0.0020970702171325684,buf:0.00751042366027832,",3,11,0,"buf:fb,size:izes,in:url,",0,Greedy,170,0.023354407,replace,[]
122,"    public int exists(String fileToCheck) throws IOException {
        FTPClient ftp = new FTPClient();
        int found = 0;
        try {
            int reply = 0;
            ftp.connect(this.endpointURL, this.endpointPort);
            reply = ftp.getReplyCode();
            if (!FTPReply.isPositiveCompletion(reply)) {
                ftp.disconnect();
                throw new IOException(""Ftp exists server refused connection."");
            }
            if (!ftp.login(""anonymous"", """")) {
                ftp.logout();
                throw new IOException(""FTP: server wrong passwd"");
            }
            ftp.enterLocalPassiveMode();
            if (ftp.listNames(fileToCheck) != null) {
                found = 1;
            }
            ftp.logout();
        } catch (Exception e) {
            throw new IOException(e.getMessage());
        }
        return found;
    }
 <SPLIT>     public InputStream openInput(Fragment path) throws IOException {
        int len = path.words().size();
        String p = Util.combine(""/"", path.words().subList(1, len));
        URL url = new URL(""http"", path.words().get(0), p);
        InputStream result = url.openStream();
        return result;
    }
",163,,LABEL_0,LABEL_0,LABEL_0,-1,"exists,fileToCheck,ftp,found,reply",,5,19,0,,0,GA,2500,0.369001742,failed,"[';print(fileTOTest)', ';fftp = 0', '; ftpb = 0', ';print( ftpb)']"
123,"    private static HttpURLConnection sendPost(String reqUrl, Map<String, String> parameters) {
        HttpURLConnection urlConn = null;
        try {
            String params = generatorParamString(parameters);
            URL url = new URL(reqUrl);
            urlConn = (HttpURLConnection) url.openConnection();
            urlConn.setRequestMethod(""POST"");
            urlConn.setConnectTimeout(5000);
            urlConn.setReadTimeout(5000);
            urlConn.setDoOutput(true);
            byte[] b = params.getBytes();
            urlConn.getOutputStream().write(b, 0, b.length);
            urlConn.getOutputStream().flush();
            urlConn.getOutputStream().close();
        } catch (Exception e) {
            throw new RuntimeException(e.getMessage(), e);
        }
        return urlConn;
    }
 <SPLIT>     private static void readAndRewrite(File inFile, File outFile) throws IOException {
        ImageInputStream iis = ImageIO.createImageInputStream(new BufferedInputStream(new FileInputStream(inFile)));
        DcmParser dcmParser = DcmParserFactory.getInstance().newDcmParser(iis);
        Dataset ds = DcmObjectFactory.getInstance().newDataset();
        dcmParser.setDcmHandler(ds.getDcmHandler());
        dcmParser.parseDcmFile(null, Tags.PixelData);
        PixelDataReader pdReader = pdFact.newReader(ds, iis, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());
        System.out.println(""reading "" + inFile + ""..."");
        pdReader.readPixelData(false);
        ImageOutputStream out = ImageIO.createImageOutputStream(new BufferedOutputStream(new FileOutputStream(outFile)));
        DcmEncodeParam dcmEncParam = DcmEncodeParam.IVR_LE;
        ds.writeDataset(out, dcmEncParam);
        ds.writeHeader(out, dcmEncParam, Tags.PixelData, dcmParser.getReadVR(), dcmParser.getReadLength());
        System.out.println(""writing "" + outFile + ""..."");
        PixelDataWriter pdWriter = pdFact.newWriter(pdReader.getPixelDataArray(), false, ds, out, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());
        pdWriter.writePixelData();
        out.flush();
        out.close();
        System.out.println(""done!"");
    }
",156,,LABEL_0,LABEL_0,LABEL_0,-1,"sendPost,reqUrl,parameters,urlConn,params,url,b",,4,15,0,,0,GA,2646,0.441251791,failed,[';print(sendPost)']
124,"    static void copyFile(File in, File out) throws IOException {
        FileChannel source = new FileInputStream(in).getChannel();
        FileChannel destination = new FileOutputStream(out).getChannel();
        source.transferTo(0, source.size(), destination);
        source.close();
        destination.close();
    }
 <SPLIT>         private void loadBinaryStream(String streamName, InputStream streamToLoad, long sz, HttpServletRequest req, HttpServletResponse resp) throws IOException {
            resp.setContentType(getContentType(req, streamName));
            resp.setHeader(""Content-Disposition"", ""inline;filename="" + streamName);
            resp.setContentLength((int) sz);
            OutputStream out = resp.getOutputStream();
            BufferedOutputStream bos = new BufferedOutputStream(out, 2048);
            try {
                IOUtils.copy(streamToLoad, bos);
            } finally {
                IOUtils.closeQuietly(streamToLoad);
                IOUtils.closeQuietly(bos);
            }
            getCargo().put(GWT_ENTRY_POINT_PAGE_PARAM, null);
        }
",68,,LABEL_1,LABEL_1,LABEL_1,-1,"copyFile,in,out,source,destination",,5,12,0,,0,GA,2241,0.315069926,failed,"[';url = 0', ';base = 0', ';print(base)', ';print(ins)', ';print(reader)', ';print(image)']"
125,"    public static void copyFile(File from, File to) throws IOException {
        assert (from != null);
        assert (to != null);
        if (!to.exists()) {
            File parentDir = to.getParentFile();
            if (!parentDir.exists()) parentDir.mkdirs();
            to.createNewFile();
        }
        FileInputStream in = null;
        FileOutputStream out = null;
        try {
            in = new FileInputStream(from);
            try {
                out = new FileOutputStream(to);
                FileChannel ic = in.getChannel();
                try {
                    FileChannel oc = out.getChannel();
                    try {
                        oc.transferFrom(ic, 0, from.length());
                    } finally {
                        if (oc != null) {
                            oc.close();
                        }
                    }
                } finally {
                    if (ic != null) {
                        ic.close();
                    }
                }
            } finally {
                if (out != null) {
                    out.close();
                }
            }
        } finally {
            if (in != null) {
                in.close();
            }
        }
    }
 <SPLIT>     private String transferWSDL(String wsdlURL, String userPassword) throws WiseConnectionException {
        String filePath = null;
        try {
            URL endpoint = new URL(wsdlURL);
            HttpURLConnection conn = (HttpURLConnection) endpoint.openConnection();
            conn.setDoOutput(false);
            conn.setDoInput(true);
            conn.setUseCaches(false);
            conn.setRequestMethod(""GET"");
            conn.setRequestProperty(""Accept"", ""text/xml,application/xml,application/xhtml+xml,text/html;q=0.9,text/plain;q=0.8,image/png,*/*;q=0.5"");
            conn.setRequestProperty(""Connection"", ""close"");
            if (userPassword != null) {
                conn.setRequestProperty(""Authorization"", ""Basic "" + (new BASE64Encoder()).encode(userPassword.getBytes()));
            }
            InputStream is = null;
            if (conn.getResponseCode() == 200) {
                is = conn.getInputStream();
            } else {
                is = conn.getErrorStream();
                InputStreamReader isr = new InputStreamReader(is);
                StringWriter sw = new StringWriter();
                char[] buf = new char[200];
                int read = 0;
                while (read != -1) {
                    read = isr.read(buf);
                    sw.write(buf);
                }
                throw new WiseConnectionException(""Remote server's response is an error: "" + sw.toString());
            }
            File outputDir = new File(wiseProperties.getProperty(""wise.tmpDir""));
            if (!outputDir.exists()) {
                outputDir.mkdir();
                wiseProperties.setProperty(""wise.forceImportObject"", ""true"");
            }
            File file = new File(wiseProperties.getProperty(""wise.tmpDir""), new StringBuffer(""Wise"").append(IDGenerator.nextVal()).append("".xml"").toString());
            OutputStream fos = new BufferedOutputStream(new FileOutputStream(file));
            IOUtils.copyStream(fos, is);
            fos.close();
            is.close();
            filePath = file.getPath();
        } catch (WiseConnectionException wce) {
            throw wce;
        } catch (Exception e) {
            throw new WiseConnectionException(""Wsdl download failed!"", e);
        }
        return filePath;
    }
",210,"    public static void copyFile(File from, File to) throws IOException {
        assert (from != null);
        assert (to != null);
        if (!to.exists()) {
            File parentDir = to.getParentFile();
            if (!parentDir.exists()) parentDir.mkdirs();
            to.createNewFile();
        }
        FileInputStream url = null;
        FileOutputStream ou = null;
        try {
            url = new FileInputStream(from);
            try {
                ou = new FileOutputStream(to);
                FileChannel ic = url.getChannel();
                try {
                    FileChannel oc = ou.getChannel();
                    try {
                        oc.transferFrom(ic, 0, from.length());
                    } finally {
                        if (oc != null) {
                            oc.close();
                        }
                    }
                } finally {
                    if (ic != null) {
                        ic.close();
                    }
                }
            } finally {
                if (ou != null) {
                    ou.close();
                }
            }
        } finally {
            if (url != null) {
                url.close();
            }
        }
    }
;print(copyFile)",LABEL_1,LABEL_1,LABEL_1,1,"copyFile,from,to,parentDir,in,out,ic,oc","copyFile:0.03832447528839111,from:0.009219348430633545,to:0.015011966228485107,parentDir:0.05142998695373535,in:-0.02331489324569702,out:-0.022237062454223633,ic:-0.012739956378936768,oc:0.07305818796157837,",2,10,0,"oc:oc,parentDir:parentDir,copyFile:copyFile,to:to,from:from,ic:ic,out:ou,in:url,",0,Greedy,387,0.063708146,inesrt,[';print(copyFile)']
126,"    public String getServerHash(String passwordHash, String PasswordSalt) throws PasswordHashingException {
        byte[] hash;
        try {
            MessageDigest digest = MessageDigest.getInstance(""SHA-256"");
            digest.reset();
            digest.update(PasswordSalt.getBytes(""UTF-16""));
            hash = digest.digest(passwordHash.getBytes(""UTF-16""));
            return bytesToHex(hash);
        } catch (NoSuchAlgorithmException ex) {
            throw new PasswordHashingException(""Current environment does not supply needed security algorithms. Please update Java"");
        } catch (UnsupportedEncodingException ex) {
            throw new PasswordHashingException(""Current environment does not supply needed character encoding. Please update Java"");
        }
    }
 <SPLIT>     public static String getSHADigest(String password) {
        String digest = null;
        MessageDigest sha = null;
        try {
            sha = MessageDigest.getInstance(""SHA-1"");
            sha.reset();
            sha.update(password.getBytes());
            byte[] pwhash = sha.digest();
            digest = ""{SHA}"" + new String(Base64.encode(pwhash));
        } catch (NoSuchAlgorithmException nsae) {
            CofaxToolsUtil.log(""Algorithme SHA-1 non supporte a la creation du hashage"" + nsae + id);
        }
        return digest;
    }
",109,,LABEL_1,LABEL_1,LABEL_1,-1,"getServerHash,passwordHash,PasswordSalt,hash,digest",,5,13,0,,0,GA,2170,0.316155358,failed,"[';getserverHash = 0', ';Passwordhash = 0']"
127,"    public static void fileDownload(String fAddress, String destinationDir) {
        int slashIndex = fAddress.lastIndexOf('/');
        int periodIndex = fAddress.lastIndexOf('.');
        String fileName = fAddress.substring(slashIndex + 1);
        URL url;
        try {
            url = new URL(fAddress);
            URLConnection uc = url.openConnection();
            BufferedReader in = new BufferedReader(new InputStreamReader(uc.getInputStream()));
            File file = new File(destinationDir + ""/download.pdf"");
            FileOutputStream fos = new FileOutputStream(file);
            BufferedWriter out = new BufferedWriter(new OutputStreamWriter(fos));
            int inputLine;
            while ((inputLine = in.read()) != -1) out.write(inputLine);
            in.close();
        } catch (Exception ex) {
            Logger.getLogger(UrlDownload.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
 <SPLIT>     public static ArrayList<RoleName> importRoles(String urlString) {
        ArrayList<RoleName> results = new ArrayList<RoleName>();
        try {
            URL url = new URL(urlString);
            BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));
            StringBuffer buff = new StringBuffer();
            String line;
            while ((line = in.readLine()) != null) {
                buff.append(line);
                if (line.equals(""</RoleName>"")) {
                    RoleName name = ProfileParser.parseRoleName(buff.toString());
                    results.add(name);
                    buff = new StringBuffer();
                } else {
                    buff.append(NL);
                }
            }
        } catch (MalformedURLException e) {
        } catch (IOException e) {
        } catch (ParsingException e) {
        }
        return results;
    }
",183,"    public static void fileDownload(String fAddress, String destinationDir) {
        int slashIndex = fAddress.lastIndexOf('/');
        int periodIndex = fAddress.lastIndexOf('.');
        String fileName = fAddress.substring(slashIndex + 1);
        URL base;
        try {
            base = new URL(fAddress);
            URLConnection uc = base.openConnection();
            BufferedReader in = new BufferedReader(new InputStreamReader(uc.getInputStream()));
            File file = new File(destinationDir + ""/download.pdf"");
            FileOutputStream fos = new FileOutputStream(file);
            BufferedWriter out = new BufferedWriter(new OutputStreamWriter(fos));
            int inputLine;
            while ((inputLine = in.read()) != -1) out.write(inputLine);
            in.close();
        } catch (Exception ex) {
            Logger.getLogger(UrlDownload.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
",LABEL_1,LABEL_1,LABEL_0,1,"fileDownload,fAddress,destinationDir,slashIndex,periodIndex,fileName,url,uc,in,file,fos,out,inputLine","fileDownload:-0.002718329429626465,fAddress:0.018685638904571533,destinationDir:0.018442988395690918,slashIndex:0.008888304233551025,periodIndex:0.0048500895500183105,fileName:0.003278195858001709,url:0.13517343997955322,uc:-0.0017070770263671875,in:-0.002213776111602783,file:0.00577777624130249,fos:0.0055013298988342285,out:0.010219871997833252,inputLine:-0.0018907785415649414,",1,3,0,"url:base,",0,Greedy,85,0.012437121,replace,[]
128,"    public static void unzipModel(String filename, String tempdir) throws EDITSException {
        try {
            BufferedOutputStream dest = null;
            FileInputStream fis = new FileInputStream(filename);
            int BUFFER = 2048;
            ZipInputStream zis = new ZipInputStream(new BufferedInputStream(fis));
            ZipEntry entry;
            while ((entry = zis.getNextEntry()) != null) {
                int count;
                byte data[] = new byte[BUFFER];
                FileOutputStream fos = new FileOutputStream(tempdir + entry.getName());
                dest = new BufferedOutputStream(fos, BUFFER);
                while ((count = zis.read(data, 0, BUFFER)) != -1) dest.write(data, 0, count);
                dest.flush();
                dest.close();
            }
            zis.close();
        } catch (Exception e) {
            throw new EDITSException(""Can not expand model in \"""" + tempdir + ""\"" because:\n"" + e.getMessage());
        }
    }
 <SPLIT>     @Test
    public void test_lookupResourceType_FullSearch_TwoWordsInMiddle() throws Exception {
        URL url = new URL(baseUrl + ""/lookupResourceType/armor+plates"");
        HttpURLConnection connection = (HttpURLConnection) url.openConnection();
        connection.setRequestMethod(""GET"");
        connection.setRequestProperty(""Accept"", ""application/json"");
        assertThat(connection.getResponseCode(), equalTo(200));
        assertThat(getResponse(connection), equalTo(""[{\""itemTypeID\"":25605,\""itemCategoryID\"":4,\""name\"":\""Armor Plates\"",\""icon\"":\""69_09\""},{\""itemTypeID\"":25624,\""itemCategoryID\"":4,\""name\"":\""Intact Armor Plates\"",\""icon\"":\""69_10\""}]""));
        assertThat(connection.getHeaderField(""Content-Type""), equalTo(""application/json; charset=utf-8""));
    }
",188,,LABEL_0,LABEL_0,LABEL_0,-1,"unzipModel,filename,tempdir,dest,fis,BUFFER,zis,entry,count,data,fos",,10,30,0,,0,GA,4989,0.782787406,failed,"[';unzipModel = 0', ';print(unzipModel)']"
129,"    public static int[] bubbleSort(int... a) {
        boolean swapped;
        do {
            swapped = false;
            for (int i = 0; i < a.length - 1; i++) {
                if (a[i] > a[i + 1]) {
                    int tmp = a[i];
                    a[i] = a[i + 1];
                    a[i + 1] = tmp;
                    swapped = true;
                }
            }
        } while (swapped);
        return a;
    }
 <SPLIT>     public synchronized String encrypt(String plainText) {
        String hash = null;
        try {
            MessageDigest md = null;
            try {
                md = MessageDigest.getInstance(""SHA"");
            } catch (NoSuchAlgorithmException e) {
                throw new NoSuchAlgorithmException();
            }
            try {
                if (plainText != null) md.update(plainText.getBytes(""UTF-8""));
            } catch (UnsupportedEncodingException e) {
                throw new UnsupportedEncodingException();
            }
            byte raw[] = md.digest();
            hash = (new BASE64Encoder()).encode(raw);
        } catch (NoSuchAlgorithmException e) {
            MessageLog.writeErrorMessage(e, this);
        } catch (UnsupportedEncodingException e) {
            MessageLog.writeErrorMessage(e, this);
        }
        return Util.stripChars(hash);
    }
",101,,LABEL_0,LABEL_0,LABEL_0,-1,"bubbleSort,a,swapped,i,tmp",,5,25,0,,0,GA,2359,0.344575079,failed,[';next = 0']
130,"    public static int[] bubbleSort(int... a) {
        boolean swapped;
        do {
            swapped = false;
            for (int i = 0; i < a.length - 1; i++) {
                if (a[i] > a[i + 1]) {
                    int tmp = a[i];
                    a[i] = a[i + 1];
                    a[i + 1] = tmp;
                    swapped = true;
                }
            }
        } while (swapped);
        return a;
    }
 <SPLIT>     private void copyFileTo(File destination) throws IOException {
        logger.fine(""Copying from "" + destination + ""..."");
        FileChannel srcChannel = new FileInputStream(getAbsolutePath()).getChannel();
        logger.fine(""...got source channel "" + srcChannel + ""..."");
        FileChannel destChannel = new FileOutputStream(new File(destination.getAbsolutePath())).getChannel();
        logger.fine(""...got destination channel "" + destChannel + ""..."");
        logger.fine(""...Got channels..."");
        destChannel.transferFrom(srcChannel, 0, srcChannel.size());
        logger.fine(""...transferred."");
        srcChannel.close();
        destChannel.close();
    }
",101,,LABEL_0,LABEL_0,LABEL_0,-1,"bubbleSort,a,swapped,i,tmp",,4,21,0,,0,GA,2339,0.338624446,failed,"[';bubbleSort = 0', ';a = 0']"
131,"    public static synchronized String getMD5_Base64(String input) {
        MessageDigest msgDigest = null;
        try {
            msgDigest = MessageDigest.getInstance(""MD5"");
        } catch (NoSuchAlgorithmException e) {
            throw new IllegalStateException(""System doesn't support MD5 algorithm."");
        }
        try {
            msgDigest.update(input.getBytes(""UTF-8""));
        } catch (java.io.UnsupportedEncodingException ex) {
            throw new IllegalStateException(""System doesn't support your  EncodingException."");
        }
        byte[] rawData = msgDigest.digest();
        byte[] encoded = Base64.encode(rawData);
        String retValue = new String(encoded);
        return retValue;
    }
 <SPLIT>     public static final String calculate(File f) {
        MessageDigest md;
        BufferedReader rd;
        StringBuffer buffer = new StringBuffer("""");
        try {
            rd = new BufferedReader(new FileReader(f));
            md = MessageDigest.getInstance(""SHA"");
            String line = """";
            while ((line = rd.readLine()) != null) buffer.append(line);
            md.update(buffer.toString().getBytes());
            byte[] digest = md.digest();
            String result = """";
            for (byte b : digest) result += String.format(""%h"", b & 0xFF);
            return result;
        } catch (Exception ex) {
            ex.printStackTrace();
            return """";
        }
    }
",119,,LABEL_1,LABEL_1,LABEL_1,-1,"getMD5_Base64,input,msgDigest,rawData,encoded,retValue",,0,0,0,,0,GA,2691,0.396181603,failed,"[';print(Input)', ';file = 0']"
132,"    private static void doCopyFile(File srcFile, File destFile, boolean preserveFileDate) throws IOException {
        if (destFile.exists() && destFile.isDirectory()) {
            throw new IOException(""Destination '"" + destFile + ""' exists but is a directory"");
        }
        FileChannel input = new FileInputStream(srcFile).getChannel();
        try {
            FileChannel output = new FileOutputStream(destFile).getChannel();
            try {
                output.transferFrom(input, 0, input.size());
            } finally {
                IOUtil.closeQuietly(output);
            }
        } finally {
            IOUtil.closeQuietly(input);
        }
        if (srcFile.length() != destFile.length()) {
            throw new IOException(""Failed to copy full contents from '"" + srcFile + ""' to '"" + destFile + ""'"");
        }
        if (preserveFileDate) {
            destFile.setLastModified(srcFile.lastModified());
        }
    }
 <SPLIT>     public String execute() {
        String dir = ""E:\\ganymede_workspace\\training01\\web\\user_imgs\\"";
        HomeMap map = new HomeMap();
        map.setDescription(description);
        Integer id = homeMapDao.saveHomeMap(map);
        FileOutputStream fos;
        try {
            fos = new FileOutputStream(dir + id);
            IOUtils.copy(new FileInputStream(imageFile), fos);
            IOUtils.closeQuietly(fos);
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
        return list();
    }
",171,,LABEL_1,LABEL_1,LABEL_1,-1,"doCopyFile,srcFile,destFile,preserveFileDate,input,output",,5,22,0,,0,GA,2863,0.436592595,failed,"[';doCopyFile = 0', ';srcFile = 0', ';destFile = 0', ';url = 0', ';error = 0', ';conn = 0', ';open = 0', ';address = 0', ';ou = 0', ';print(ou)', ';io = 0', ';print(io)', ';current = 0', ';print(current)']"
133,"    public static void save(String packageName, ArrayList<byte[]> fileContents, ArrayList<String> fileNames) throws Exception {
        String dirBase = Util.JAVA_DIR + File.separator + packageName;
        File packageDir = new File(dirBase);
        if (!packageDir.exists()) {
            boolean created = packageDir.mkdir();
            if (!created) {
                File currentPath = new File(""."");
                throw new Exception(""Directory "" + packageName + "" could not be created. Current directory: "" + currentPath.getAbsolutePath());
            }
        }
        for (int i = 0; i < fileContents.size(); i++) {
            File file = new File(Util.JAVA_DIR + File.separator + fileNames.get(i));
            FileOutputStream fos = new FileOutputStream(file);
            fos.write(fileContents.get(i));
            fos.flush();
            fos.close();
        }
        for (int i = 0; i < fileNames.size(); i++) {
            File fileSrc = new File(Util.JAVA_DIR + File.separator + fileNames.get(i));
            File fileDst = new File(dirBase + File.separator + fileNames.get(i));
            BufferedReader reader = new BufferedReader(new FileReader(fileSrc));
            BufferedWriter writer = new BufferedWriter(new FileWriter(fileDst));
            writer.append(""package "" + packageName + "";\n"");
            String line = """";
            while ((line = reader.readLine()) != null) writer.append(line + ""\n"");
            writer.flush();
            writer.close();
            reader.close();
        }
    }
 <SPLIT>     private void copyResourceToFile(final String resourceFilename, final String destinationFilename) throws IOException {
        InputStream inStream = null;
        OutputStream outStream = null;
        try {
            inStream = MatsimResource.getAsInputStream(resourceFilename);
            outStream = new FileOutputStream(destinationFilename);
            IOUtils.copyStream(inStream, outStream);
        } finally {
            if (inStream != null) {
                try {
                    inStream.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
            if (outStream != null) {
                try {
                    outStream.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        }
    }
",335,,LABEL_1,LABEL_1,LABEL_1,-1,"save,packageName,fileContents,fileNames,dirBase,packageDir,created,currentPath,i,file,fos,fileSrc,fileDst,reader,writer,line",,16,54,0,,0,GA,7250,1.234124585,failed,"[';save = 0', ';print(save)', ';print(packageName)', ';print(fileContents)', ';url = 0', ';print(look)', ';type = 0', ';connection = 0', ';sync = 0']"
134,"    public InputStream loadResource(String location) throws GenericConfigException {
        URL url = getURL(location);
        try {
            return url.openStream();
        } catch (java.io.IOException e) {
            throw new GenericConfigException(""Error opening URL resource at location ["" + url.toExternalForm() + ""]"", e);
        }
    }
 <SPLIT>     private static void readAndRewrite(File inFile, File outFile) throws IOException {
        ImageInputStream iis = ImageIO.createImageInputStream(new BufferedInputStream(new FileInputStream(inFile)));
        DcmParser dcmParser = DcmParserFactory.getInstance().newDcmParser(iis);
        Dataset ds = DcmObjectFactory.getInstance().newDataset();
        dcmParser.setDcmHandler(ds.getDcmHandler());
        dcmParser.parseDcmFile(null, Tags.PixelData);
        PixelDataReader pdReader = pdFact.newReader(ds, iis, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());
        System.out.println(""reading "" + inFile + ""..."");
        pdReader.readPixelData(false);
        ImageOutputStream out = ImageIO.createImageOutputStream(new BufferedOutputStream(new FileOutputStream(outFile)));
        DcmEncodeParam dcmEncParam = DcmEncodeParam.IVR_LE;
        ds.writeDataset(out, dcmEncParam);
        ds.writeHeader(out, dcmEncParam, Tags.PixelData, dcmParser.getReadVR(), dcmParser.getReadLength());
        System.out.println(""writing "" + outFile + ""..."");
        PixelDataWriter pdWriter = pdFact.newWriter(pdReader.getPixelDataArray(), false, ds, out, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());
        pdWriter.writePixelData();
        out.flush();
        out.close();
        System.out.println(""done!"");
    }
",63,"    public InputStream loadResource(String location) throws GenericConfigException {
        URL file = getURL(location);
        try {
            return file.openStream();
        } catch (java.io.IOException e) {
            throw new GenericConfigException(""Error opening URL resource at location ["" + file.toExternalForm() + ""]"", e);
        }
    }
",LABEL_0,LABEL_0,LABEL_1,1,"loadResource,location,url","loadResource:-2.384185791015625e-06,location:2.4139881134033203e-05,url:-1.0251998901367188e-05,",1,3,0,"location:location,loadResource:loadResource,url:file,",0,Greedy,118,0.017531935,replace,[]
135,"    public void handler(Map<String, String> result, TargetPage target) {
        try {
            URL url = new URL(target.getUrl());
            BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream()));
            String line = null;
            while ((line = reader.readLine()) != null) {
                for (Map.Entry<String, String> entry : result.entrySet()) {
                    if (line.indexOf(target.getInclude()) != -1) {
                        int fromIndex = line.indexOf(target.getFromStr());
                        String r = line.substring(fromIndex + target.getFromStr().length(), line.indexOf(target.getToStr(), fromIndex));
                        entry.setValue(r);
                        line = line.substring(line.indexOf(target.getToStr()) + target.getToStr().length());
                    }
                }
            }
            reader.close();
        } catch (MalformedURLException e) {
        } catch (IOException e) {
        }
    }
 <SPLIT>     public static String md5Hash(String src) {
        try {
            MessageDigest md = MessageDigest.getInstance(""MD5"");
            md.update(src.getBytes());
            return bytesArrayToHexString(md.digest());
        } catch (Exception e) {
            return null;
        }
    }
",212,,LABEL_0,LABEL_0,LABEL_0,-1,"handler,result,target,url,reader,line,entry,fromIndex,r",,4,20,0,,0,GA,3806,0.58191882,failed,"[';handler = 0', ';print(handler)', ';startIndex = 0', ';fromPoint = 0', ';print(FromLength)', ';print(fromLength)', ';v = 0', ';res = 0']"
136,"    public Song(String s) {
        StringTokenizer tokenizer = new StringTokenizer(s, "";"");
        free = false;
        title = tokenizer.nextToken();
        artist = tokenizer.nextToken();
        location = tokenizer.nextToken();
        rating = Integer.parseInt(tokenizer.nextToken());
        overplay = Integer.parseInt(tokenizer.nextToken());
        String temp = tokenizer.nextToken();
        tokenizer = new StringTokenizer(temp, "",[] "");
        tags = new ArrayList<String>();
        while (tokenizer.hasMoreTokens()) {
            tags.add(tokenizer.nextToken());
        }
        byte[] bytes = new byte[40];
        try {
            MessageDigest hasher = MessageDigest.getInstance(""SHA-1"");
            hasher.update(title.getBytes());
            hasher.update(artist.getBytes());
            bytes = hasher.digest();
        } catch (Exception e) {
            System.out.println(e);
        }
    }
 <SPLIT>     public static void copyFile(File src, File dst) throws IOException {
        try {
            InputStream in = new FileInputStream(src);
            OutputStream out = new FileOutputStream(dst);
            byte[] buf = new byte[TEMP_FILE_BUFFER_SIZE];
            int len;
            while ((len = in.read(buf)) > 0) out.write(buf, 0, len);
            in.close();
            out.close();
        } catch (FileNotFoundException e1) {
            MLUtil.runtimeError(e1, src.toString());
        } catch (IOException e2) {
            MLUtil.runtimeError(e2, src.toString());
        }
    }
",199,"    public Song(String path) {
        StringTokenizer optimizer = new StringTokenizer(path, "";"");
        free = false;
        filename = optimizer.nextToken();
        audio = optimizer.nextToken();
        path = optimizer.nextToken();
        breaking = Integer.parseInt(optimizer.nextToken());
        offlay = Integer.parseInt(optimizer.nextToken());
        String path = optimizer.nextToken();
        optimizer = new StringTokenizer(path, "",[] "");
        files = new ArrayList<String>();
        while (optimizer.hasMoreTokens()) {
            files.add(optimizer.nextToken());
        }
        byte[] units = new byte[40];
        try {
            MessageDigest haveumper = MessageDigest.getInstance(""SHA-1"");
            haveumper.update(filename.getBytes());
            haveumper.update(audio.getBytes());
            units = haveumper.digest();
        } catch (Exception e) {
            System.out.println(e);
        }
    }
;s = 0",LABEL_0,LABEL_0,LABEL_0,1,"s,tokenizer,title,artist,location,rating,overplay,temp,tags,bytes,hasher","s:-0.00032979249954223633,tokenizer:-0.012189328670501709,title:0.002553880214691162,artist:-0.002326369285583496,location:0.0006800293922424316,rating:0.004983305931091309,overplay:0.0010120272636413574,temp:-0.0015624165534973145,tags:0.009895026683807373,bytes:-0.0018959641456604004,hasher:-0.0069561004638671875,",11,29,0,"tags:files,rating:breaking,title:filename,overplay:offlay,location:path,s:path,temp:path,bytes:units,artist:audio,hasher:haveumper,tokenizer:optimizer,",0,Greedy,466,0.069829158,inesrt,[';s = 0']
137,"    public static byte[] getJarEntry(String jarName, String entry, int port) {
        byte[] b = null;
        try {
            String codebase = System.getProperty(""java.rmi.server.codebase"", InetAddress.getLocalHost().getHostName());
            String protocol = ""http://"";
            int x = codebase.indexOf(protocol) + protocol.length();
            String s2 = codebase.substring(x);
            int x2 = s2.indexOf('/');
            String downloadHost = s2.substring(0, x2);
            if (downloadHost.indexOf(':') == -1) {
                downloadHost += "":"" + port;
            }
            URL url = new URL(""jar:http://"" + downloadHost + ""/"" + jarName + ""!/"" + entry);
            JarURLConnection jurl = (JarURLConnection) url.openConnection();
            JarEntry je = jurl.getJarEntry();
            InputStream is = jurl.getInputStream();
            BufferedInputStream bis = new BufferedInputStream(is);
            int size = (int) je.getSize();
            b = new byte[size];
            int rb = 0;
            int chunk = 0;
            while ((size - rb) > 0) {
                chunk = bis.read(b, rb, size - rb);
                if (chunk == -1) {
                    break;
                }
                rb += chunk;
            }
            bis.close();
            is.close();
            bis = null;
            is = null;
            url = null;
            jurl = null;
        } catch (UnknownHostException e) {
            e.printStackTrace();
            return null;
        } catch (IOException e) {
            e.printStackTrace();
            return null;
        }
        return b;
    }
 <SPLIT>     public void createPartControl(Composite parent) {
        viewer = new ScrollingGraphicalViewer();
        viewer.setRootEditPart(new ScalableRootEditPart());
        viewer.setEditPartFactory(new BlockEditPartFactory());
        viewer.setEditDomain(new EditDomain());
        viewer.createControl(parent);
        viewer.setKeyHandler(new GraphicalViewerKeyHandler(viewer));
        ActionRegistry actionRegistry = new ActionRegistry();
        createActions(actionRegistry);
        ContextMenuProvider cmProvider = new BlockContextMenuProvider(viewer, actionRegistry);
        viewer.setContextMenu(cmProvider);
        Block b = new Block();
        b.addChild(new ChartItem());
        viewer.setContents(b);
        System.err.println(""!!! "" + viewer.getContents().getChildren().get(0));
        viewer.select((EditPart) viewer.getContents().getChildren().get(0));
        PaletteRoot root = new PaletteRoot();
        PaletteGroup toolGroup = new PaletteGroup(""Chart Tools"");
        List toolList = new ArrayList();
        ToolEntry tool = new SelectionToolEntry();
        toolList.add(tool);
        root.setDefaultEntry(tool);
        tool = new MarqueeToolEntry();
        toolList.add(tool);
        toolGroup.addAll(toolList);
        PaletteGroup templateGroup = new PaletteGroup(""Templates"");
        List templateList = new ArrayList();
        CombinedTemplateCreationEntry entry = new CombinedTemplateCreationEntry(""Rect"", ""Rect"", new ChartItem(), new SimpleFactory(ChartItem.class), ImageDescriptor.getMissingImageDescriptor(), ImageDescriptor.getMissingImageDescriptor());
        CombinedTemplateCreationEntry entry1 = new CombinedTemplateCreationEntry(""Line"", ""Line"", new ChartLine(), new SimpleFactory(ChartLine.class), ImageDescriptor.getMissingImageDescriptor(), ImageDescriptor.getMissingImageDescriptor());
        templateList.add(entry);
        templateList.add(entry1);
        templateGroup.addAll(templateList);
        List rootList = new ArrayList();
        rootList.add(toolGroup);
        rootList.add(templateGroup);
        root.addAll(rootList);
        final PaletteViewer v = new PaletteViewer();
        v.setPaletteRoot(root);
        v.createControl(parent);
        v.addSelectionChangedListener(new ISelectionChangedListener() {

            public void selectionChanged(SelectionChangedEvent event) {
                System.err.println(""selectionChanged "" + v.getActiveTool());
            }
        });
        deleteAction.setSelectionProvider(viewer);
        viewer.getEditDomain().setPaletteViewer(v);
        viewer.addSelectionChangedListener(new ISelectionChangedListener() {

            public void selectionChanged(SelectionChangedEvent event) {
                System.err.println(event.getSelection());
                deleteAction.update();
            }
        });
        viewer.getEditDomain().getCommandStack().addCommandStackEventListener(new CommandStackEventListener() {

            public void stackChanged(CommandStackEvent event) {
                undoAction.setEnabled(viewer.getEditDomain().getCommandStack().canUndo());
                redoAction.setEnabled(viewer.getEditDomain().getCommandStack().canRedo());
            }
        });
    }
",327,,LABEL_0,LABEL_0,LABEL_0,-1,"getJarEntry,jarName,entry,port,b,codebase,protocol,x,s2,x2,downloadHost,url,jurl,je,is,bis,size,rb,chunk",,19,59,0,,0,GA,8453,1.661601937,failed,"[';GetZipFile = 0', ';print(GetZipFile)', ';getJarFile = 0', ';jarPath = 0', ';print(jarPath)', ';filename = 0', ';name = 0', ';offset = 0']"
138,"    public static void copyFile(String inFile, String outFile) {
        File in = new File(inFile);
        File out = new File(outFile);
        try {
            FileChannel inChannel = new FileInputStream(in).getChannel();
            FileChannel outChannel = new FileOutputStream(out).getChannel();
            try {
                inChannel.transferTo(0, inChannel.size(), outChannel);
            } finally {
                if (inChannel != null) inChannel.close();
                if (outChannel != null) outChannel.close();
            }
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
    }
 <SPLIT>     @Override
    public OBJModel loadModel(URL url, String skin) throws IOException, IncorrectFormatException, ParsingErrorException {
        boolean baseURLWasNull = setBaseURLFromModelURL(url);
        OBJModel model = loadModel(url.openStream(), skin);
        if (baseURLWasNull) {
            popBaseURL();
        }
        return (model);
    }
",120,,LABEL_0,LABEL_0,LABEL_0,-1,"copyFile,inFile,outFile,in,out,inChannel,outChannel",,6,13,0,,0,GA,2733,0.388839777,failed,[';print(inputchannel)']
139,"    protected ExternalDecoder(InputStream source, Process process) {
        super(source);
        this.process = process;
        this.processStdOut = process.getInputStream();
        this.processStdIn = process.getOutputStream();
        new Thread() {

            @Override
            public void run() {
                try {
                    IOUtils.copy(getSource(), processStdIn);
                    System.err.println(""Copy done."");
                    close();
                } catch (IOException e) {
                    e.printStackTrace();
                    IOUtils.closeQuietly(ExternalDecoder.this);
                }
            }
        }.start();
    }
 <SPLIT>     public String sendRequest(java.lang.String servletName, java.lang.String request) {
        String reqxml = """";
        org.jdom.Document retdoc = null;
        String myurl = java.util.prefs.Preferences.systemRoot().get(""serverurl"", """");
        String myport = java.util.prefs.Preferences.systemRoot().get(""portno"", ""8080"");
        if (this.serverURL == null) {
            try {
                java.net.URL codebase = newgen.presentation.NewGenMain.getAppletInstance().getCodeBase();
                if (codebase != null) serverURL = codebase.getHost(); else serverURL = ""localhost"";
            } catch (Exception exp) {
                exp.printStackTrace();
                serverURL = ""localhost"";
            }
            newgen.presentation.component.IPAddressPortNoDialog ipdig = new newgen.presentation.component.IPAddressPortNoDialog(myurl, myport);
            ipdig.show();
            serverURL = myurl = ipdig.getIPAddress();
            myport = ipdig.getPortNo();
            java.util.prefs.Preferences.systemRoot().put(""serverurl"", serverURL);
            java.util.prefs.Preferences.systemRoot().put(""portno"", myport);
            System.out.println(serverURL);
        }
        try {
            System.out.println(""http://"" + serverURL + "":"" + myport + ""/newgenlibctxt/"" + servletName);
            java.net.URL url = new java.net.URL(""http://"" + serverURL + "":"" + myport + ""/newgenlibctxt/"" + servletName);
            java.net.URLConnection urlconn = (java.net.URLConnection) url.openConnection();
            urlconn.setDoOutput(true);
            urlconn.setRequestProperty(""Content-type"", ""text/xml; charset=UTF-8"");
            java.io.OutputStream os = urlconn.getOutputStream();
            String req1xml = request;
            java.util.zip.CheckedOutputStream cos = new java.util.zip.CheckedOutputStream(os, new java.util.zip.Adler32());
            java.util.zip.GZIPOutputStream gop = new java.util.zip.GZIPOutputStream(cos);
            java.io.OutputStreamWriter dos = new java.io.OutputStreamWriter(gop, ""UTF-8"");
            System.out.println(req1xml);
            dos.write(req1xml);
            dos.flush();
            dos.close();
            System.out.println(""url conn: "" + urlconn.getContentEncoding() + ""  "" + urlconn.getContentType());
            java.io.InputStream ios = urlconn.getInputStream();
            java.util.zip.CheckedInputStream cis = new java.util.zip.CheckedInputStream(ios, new java.util.zip.Adler32());
            java.util.zip.GZIPInputStream gip = new java.util.zip.GZIPInputStream(cis);
            java.io.InputStreamReader br = new java.io.InputStreamReader(gip, ""UTF-8"");
            retdoc = (new org.jdom.input.SAXBuilder()).build(br);
        } catch (java.net.ConnectException conexp) {
            javax.swing.JOptionPane.showMessageDialog(null, newgen.presentation.NewGenMain.getAppletInstance().getMyResource().getString(""ConnectExceptionMessage""), ""Critical error"", javax.swing.JOptionPane.ERROR_MESSAGE);
        } catch (Exception exp) {
            exp.printStackTrace(System.out);
        }
        System.out.println(reqxml);
        return """";
    }
",113,,LABEL_0,LABEL_0,LABEL_0,-1,"source,process,processStdOut,processStdIn",,4,10,0,,0,GA,1361,0.270126335,failed,"[';source = 0', ';print(source)', ';process = 0', ';print(process)', ';processStdOut = 0', ';processStdIn = 0', ';path = 0', ';loader = 0', ';print(loader)', ';file = 0', ';src = 0', ';exec = 0', ';path = 0', ';press = 0', ';the = 0']"
140,"    public static int createEmptyCart() {
        int SHOPPING_ID = 0;
        Connection con = null;
        try {
            con = getConnection();
        } catch (java.lang.Exception ex) {
            ex.printStackTrace();
        }
        try {
            PreparedStatement insert_cart = null;
            SHOPPING_ID = Integer.parseInt(Sequence.getSequenceNumber(""shopping_cart""));
            insert_cart = con.prepareStatement(""INSERT INTO shopping_cart (sc_id, sc_time) VALUES ( ? , NOW() )"");
            insert_cart.setInt(1, SHOPPING_ID);
            insert_cart.executeUpdate();
            con.commit();
            insert_cart.close();
            returnConnection(con);
        } catch (java.lang.Exception ex) {
            try {
                con.rollback();
                ex.printStackTrace();
            } catch (Exception se) {
                System.err.println(""Transaction rollback failed."");
            }
        }
        return SHOPPING_ID;
    }
 <SPLIT>     @Override
    public byte[] download(URI uri) throws NetworkException {
        log.info(""download: "" + uri);
        HttpGet httpGet = new HttpGet(uri.toString());
        try {
            HttpResponse httpResponse = httpClient.execute(httpGet);
            return EntityUtils.toByteArray(httpResponse.getEntity());
        } catch (IOException e) {
            throw new NetworkException(e);
        } finally {
            httpGet.abort();
        }
    }
",159,,LABEL_0,LABEL_0,LABEL_0,-1,"createEmptyCart,SHOPPING_ID,con,insert_cart",,4,16,0,,0,GA,1817,0.269497144,failed,[]
141,"    private boolean copyFile(File _file1, File _file2) {
        FileInputStream fis;
        FileOutputStream fos;
        try {
            fis = new FileInputStream(_file1);
            fos = new FileOutputStream(_file2);
            FileChannel canalFuente = fis.getChannel();
            canalFuente.transferTo(0, canalFuente.size(), fos.getChannel());
            fis.close();
            fos.close();
            return true;
        } catch (FileNotFoundException e) {
        } catch (IOException e) {
        }
        return false;
    }
 <SPLIT>     protected void truncate(final File file) {
        LogLog.debug(""Compression of file: "" + file.getAbsolutePath() + "" started."");
        if (FileUtils.isFileOlder(file, ManagementFactory.getRuntimeMXBean().getStartTime())) {
            final File backupRoot = new File(this.getBackupDir());
            if (!backupRoot.exists() && !backupRoot.mkdirs()) {
                throw new AppenderInitializationError(""Can't create backup dir for backup storage"");
            }
            SimpleDateFormat df;
            try {
                df = new SimpleDateFormat(this.getBackupDateFormat());
            } catch (final Exception e) {
                throw new AppenderInitializationError(""Invalid date formate for backup files: "" + this.getBackupDateFormat(), e);
            }
            final String date = df.format(new Date(file.lastModified()));
            final File zipFile = new File(backupRoot, file.getName() + ""."" + date + "".zip"");
            ZipOutputStream zos = null;
            FileInputStream fis = null;
            try {
                zos = new ZipOutputStream(new FileOutputStream(zipFile));
                final ZipEntry entry = new ZipEntry(file.getName());
                entry.setMethod(ZipEntry.DEFLATED);
                entry.setCrc(FileUtils.checksumCRC32(file));
                zos.putNextEntry(entry);
                fis = FileUtils.openInputStream(file);
                final byte[] buffer = new byte[1024];
                int readed;
                while ((readed = fis.read(buffer)) != -1) {
                    zos.write(buffer, 0, readed);
                }
            } catch (final Exception e) {
                throw new AppenderInitializationError(""Can't create zip file"", e);
            } finally {
                if (zos != null) {
                    try {
                        zos.close();
                    } catch (final IOException e) {
                        LogLog.warn(""Can't close zip file"", e);
                    }
                }
                if (fis != null) {
                    try {
                        fis.close();
                    } catch (final IOException e) {
                        LogLog.warn(""Can't close zipped file"", e);
                    }
                }
            }
            if (!file.delete()) {
                throw new AppenderInitializationError(""Can't delete old log file "" + file.getAbsolutePath());
            }
        }
    }
",98,,LABEL_1,LABEL_1,LABEL_1,-1,"copyFile,_file1,_file2,fis,fos,canalFuente",,0,0,0,,0,GA,2716,0.440928245,failed,"[';print(canalFuente)', ';copyFiles = 0', ';transferfile = 0', ';copyFolder = 0', ';cfas = 0']"
142,"    public static void doVersionCheck(View view) {
        view.showWaitCursor();
        try {
            URL url = new URL(jEdit.getProperty(""version-check.url""));
            InputStream in = url.openStream();
            BufferedReader bin = new BufferedReader(new InputStreamReader(in));
            String line;
            String version = null;
            String build = null;
            while ((line = bin.readLine()) != null) {
                if (line.startsWith("".version"")) version = line.substring(8).trim(); else if (line.startsWith("".build"")) build = line.substring(6).trim();
            }
            bin.close();
            if (version != null && build != null) {
                if (jEdit.getBuild().compareTo(build) < 0) newVersionAvailable(view, version, url); else {
                    GUIUtilities.message(view, ""version-check"" + "".up-to-date"", new String[0]);
                }
            }
        } catch (IOException e) {
            String[] args = { jEdit.getProperty(""version-check.url""), e.toString() };
            GUIUtilities.error(view, ""read-error"", args);
        }
        view.hideWaitCursor();
    }
 <SPLIT>     public static void main(String[] args) {
        File srcDir = new File(args[0]);
        File dstDir = new File(args[1]);
        File[] srcFiles = srcDir.listFiles();
        for (File f : srcFiles) {
            if (f.isDirectory()) continue;
            try {
                FileChannel srcChannel = new FileInputStream(f).getChannel();
                FileChannel dstChannel = new FileOutputStream(dstDir.getAbsolutePath() + System.getProperty(""file.separator"") + f.getName()).getChannel();
                ByteBuffer buffer = ByteBuffer.allocate(1024);
                int nr = 0;
                srcChannel.position(nr);
                nr += srcChannel.read(buffer);
                while (nr < f.length()) {
                    buffer.flip();
                    dstChannel.write(buffer);
                    buffer.clear();
                    nr += srcChannel.read(buffer);
                }
                srcChannel.close();
                dstChannel.close();
            } catch (IOException e) {
            }
        }
    }
",250,"    public static void doVersionCheck(View image) {
        image.showWaitCursor();
        try {
            URL file = new URL(jEdit.getProperty(""version-check.url""));
            InputStream file = file.openStream();
            BufferedReader bin = new BufferedReader(new InputStreamReader(file));
            String lc;
            String driver = null;
            String home = null;
            while ((lc = bin.readLine()) != null) {
                if (lc.startsWith("".version"")) driver = lc.substring(8).trim(); else if (lc.startsWith("".build"")) home = lc.substring(6).trim();
            }
            bin.close();
            if (driver != null && home != null) {
                if (jEdit.getBuild().compareTo(home) < 0) newVersionAvailable(image, driver, file); else {
                    GUIUtilities.message(image, ""version-check"" + "".up-to-date"", new String[0]);
                }
            }
        } catch (IOException e) {
            String[] args = { jEdit.getProperty(""version-check.url""), e.toString() };
            GUIUtilities.error(image, ""read-error"", args);
        }
        image.hideWaitCursor();
    }
",LABEL_0,LABEL_0,LABEL_1,1,"doVersionCheck,view,url,in,bin,line,version,build","doVersionCheck:-0.017462491989135742,view:0.0038990378379821777,url:0.02626866102218628,in:0.003448307514190674,bin:-0.010680139064788818,line:-0.008902251720428467,version:-0.0014491677284240723,build:0.0005995035171508789,",6,25,0,"url:file,view:image,in:file,build:home,version:driver,line:lc,",0,Greedy,345,0.053494938,replace,[]
143,"    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.main);
        mButton1 = (Button) findViewById(R.id.myButton1);
        mButton2 = (Button) findViewById(R.id.myButton2);
        mTextView1 = (TextView) findViewById(R.id.myTextView1);
        mButton1.setOnClickListener(new Button.OnClickListener() {

            public void onClick(View v) {
                String uriAPI = ""http://www.sina.com"";
                HttpPost httpRequest = new HttpPost(uriAPI);
                List<NameValuePair> params = new ArrayList<NameValuePair>();
                params.add(new BasicNameValuePair(""str"", ""post string""));
                try {
                    httpRequest.setEntity(new UrlEncodedFormEntity(params, HTTP.UTF_8));
                    HttpResponse httpResponse = new DefaultHttpClient().execute(httpRequest);
                    if (httpResponse.getStatusLine().getStatusCode() == 200) {
                        String strResult = EntityUtils.toString(httpResponse.getEntity());
                        mTextView1.setText(strResult);
                    } else {
                        mTextView1.setText(""Error Response: "" + httpResponse.getStatusLine().toString());
                    }
                } catch (ClientProtocolException e) {
                    mTextView1.setText(e.getMessage().toString());
                    e.printStackTrace();
                } catch (IOException e) {
                    mTextView1.setText(e.getMessage().toString());
                    e.printStackTrace();
                } catch (Exception e) {
                    mTextView1.setText(e.getMessage().toString());
                    e.printStackTrace();
                }
            }
        });
        mButton2.setOnClickListener(new Button.OnClickListener() {

            public void onClick(View v) {
                String uriAPI = ""http://www.sina.com"";
                HttpGet httpRequest = new HttpGet(uriAPI);
                try {
                    HttpResponse httpResponse = new DefaultHttpClient().execute(httpRequest);
                    if (httpResponse.getStatusLine().getStatusCode() == 200) {
                        String strResult = EntityUtils.toString(httpResponse.getEntity());
                        strResult = eregi_replace(""(\r\n|\r|\n|\n\r)"", """", strResult);
                        mTextView1.setText(strResult);
                    } else {
                        mTextView1.setText(""Error Response: "" + httpResponse.getStatusLine().toString());
                    }
                } catch (ClientProtocolException e) {
                    mTextView1.setText(e.getMessage().toString());
                    e.printStackTrace();
                } catch (IOException e) {
                    mTextView1.setText(e.getMessage().toString());
                    e.printStackTrace();
                } catch (Exception e) {
                    mTextView1.setText(e.getMessage().toString());
                    e.printStackTrace();
                }
            }
        });
    }
 <SPLIT>     public static void copyFile(File in, File out) throws Exception {
        FileChannel sourceChannel = null;
        FileChannel destinationChannel = null;
        try {
            sourceChannel = new FileInputStream(in).getChannel();
            destinationChannel = new FileOutputStream(out).getChannel();
            sourceChannel.transferTo(0, sourceChannel.size(), destinationChannel);
        } finally {
            if (sourceChannel != null) sourceChannel.close();
            if (destinationChannel != null) destinationChannel.close();
        }
    }
",530,,LABEL_0,LABEL_0,LABEL_0,-1,"onCreate,savedInstanceState,mButton1,mButton2,mTextView1,v,uriAPI,httpRequest,params,httpResponse,strResult",,11,47,0,,0,GA,4712,0.9164452,failed,[]
144,"        private void copy(File inputFile, File outputFile) throws Exception {
            FileReader in = new FileReader(inputFile);
            FileWriter out = new FileWriter(outputFile);
            int c;
            while ((c = in.read()) != -1) out.write(c);
            in.close();
            out.close();
        }
 <SPLIT>     protected boolean copyFile(File sourceFile, File destinationFile) {
        try {
            FileChannel srcChannel = new FileInputStream(sourceFile).getChannel();
            FileChannel dstChannel = new FileOutputStream(destinationFile).getChannel();
            dstChannel.transferFrom(srcChannel, 0, srcChannel.size());
            srcChannel.close();
            dstChannel.close();
        } catch (IOException e) {
            e.printStackTrace();
            return false;
        }
        return true;
    }
",70,,LABEL_1,LABEL_1,LABEL_1,-1,"copy,inputFile,outputFile,in,out,c",,6,14,0,,0,GA,2321,0.324645797,failed,"[';copy = 0', ';zip = 0', ';split = 0']"
145,"    public void removeRealm(final List<Integer> realmIds) {
        try {
            connection.setAutoCommit(false);
            new ProcessEnvelope().executeNull(new ExecuteProcessAbstractImpl(connection, false, false, true, true) {

                @Override
                public void executeProcessReturnNull() throws SQLException {
                    psImpl = connImpl.prepareStatement(sqlCommands.getProperty(""realm.remove""));
                    Iterator<Integer> iter = realmIds.iterator();
                    int realmId;
                    while (iter.hasNext()) {
                        realmId = iter.next();
                        psImpl.setInt(1, realmId);
                        psImpl.executeUpdate();
                        cmDB.removeRealm(realmId);
                    }
                }
            });
            connection.commit();
        } catch (SQLException sqle) {
            log.error(sqle);
            if (connection != null) {
                try {
                    connection.rollback();
                } catch (SQLException ex) {
                }
            }
        } finally {
            if (connection != null) {
                try {
                    connection.setAutoCommit(true);
                } catch (SQLException ex) {
                }
            }
        }
    }
 <SPLIT>     public void executeUpdateTransaction(List queries) throws SQLException {
        assert connection != null;
        boolean autoCommit = connection.getAutoCommit();
        connection.setAutoCommit(false);
        try {
            Iterator iterator = queries.iterator();
            while (iterator.hasNext()) {
                String query = (String) iterator.next();
                Statement statement = connection.createStatement();
                statement.executeUpdate(query);
            }
            connection.commit();
            connection.setAutoCommit(autoCommit);
        } catch (SQLException e) {
            connection.rollback();
            throw new SQLException(e.getMessage());
        }
    }
",202,,LABEL_1,LABEL_0,,-4,"removeRealm,realmIds,psImpl,iter,realmId",,,,0,,0,Greedy,1,0.000410318,,[]
146,"    protected String downloadURLtoString(URL url) throws IOException {
        BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));
        StringBuffer sb = new StringBuffer(100 * 1024);
        String str;
        while ((str = in.readLine()) != null) {
            sb.append(str);
        }
        in.close();
        return sb.toString();
    }
 <SPLIT>     private boolean getWave(String url, String Word) {
        try {
            File FF = new File(f.getParent() + ""/"" + f.getName() + ""pron"");
            FF.mkdir();
            URL url2 = new URL(url);
            BufferedReader stream = new BufferedReader(new InputStreamReader(url2.openStream()));
            File Fdel = new File(f.getParent() + ""/"" + f.getName() + ""pron/"" + Word + "".wav"");
            if (!Fdel.exists()) {
                FileOutputStream outstream = new FileOutputStream(f.getParent() + ""/"" + f.getName() + ""pron/"" + Word + "".wav"");
                BufferedWriter bwriter = new BufferedWriter(new OutputStreamWriter(outstream));
                char[] binput = new char[1024];
                int len = stream.read(binput, 0, 1024);
                while (len > 0) {
                    bwriter.write(binput, 0, len);
                    len = stream.read(binput, 0, 1024);
                }
                bwriter.close();
                outstream.close();
            }
            stream.close();
        } catch (Exception e) {
            System.out.println(e.getMessage());
            return false;
        }
        return true;
    }
",80,,LABEL_0,LABEL_0,LABEL_0,-1,"downloadURLtoString,url,in,sb,str",,2,6,0,,0,GA,2347,0.349891702,failed,"[';print(downloadURLtoString)', ';url = 0']"
147,"    public static SVNConfiguracion load(URL urlConfiguracion) {
        SVNConfiguracion configuracion = null;
        try {
            XMLDecoder xenc = new XMLDecoder(urlConfiguracion.openStream());
            configuracion = (SVNConfiguracion) xenc.readObject();
            configuracion.setFicheroConfiguracion(urlConfiguracion);
            xenc.close();
        } catch (Exception exception) {
            exception.printStackTrace();
        }
        return configuracion;
    }
 <SPLIT>     public void insertUser(final List<NewUser> newUsers) {
        try {
            connection.setAutoCommit(false);
            final Map<String, PasswordAndSalt> pass = new HashMap<String, PasswordAndSalt>();
            final Map<String, List<RealmWithEncryptedPass>> realmPass = new HashMap<String, List<RealmWithEncryptedPass>>();
            final List<String> userDirs = new ArrayList<String>();
            Iterator<NewUser> iter = newUsers.iterator();
            NewUser user;
            Realm realm;
            String username;
            PasswordHasher ph;
            while (iter.hasNext()) {
                user = iter.next();
                username = user.username.toLowerCase(locale);
                ph = PasswordFactory.getInstance().getPasswordHasher();
                pass.put(user.username, new PasswordAndSalt(ph.hashPassword(user.password), ph.getSalt()));
                realmPass.put(user.username, new ArrayList<RealmWithEncryptedPass>());
                realmPass.get(user.username).add(new RealmWithEncryptedPass(cm.getRealm(""null""), PasswordFactory.getInstance().getPasswordHasher().hashRealmPassword(username, """", user.password)));
                if (user.realms != null) {
                    for (String realmName : user.realms) {
                        realm = cm.getRealm(realmName);
                        realmPass.get(user.username).add(new RealmWithEncryptedPass(realm, PasswordFactory.getInstance().getPasswordHasher().hashRealmPassword(username, realm.getFullRealmName(), user.password)));
                    }
                    user.realms = null;
                }
            }
            new ProcessEnvelope().executeNull(new ExecuteProcessAbstractImpl(connection, false, false, true, true) {

                @Override
                public void executeProcessReturnNull() throws SQLException {
                    psImpl = connImpl.prepareStatement(sqlCommands.getProperty(""user.add""), Statement.RETURN_GENERATED_KEYS);
                    Iterator<NewUser> iter = newUsers.iterator();
                    NewUser user;
                    DomainDb domain = null;
                    while (iter.hasNext()) {
                        user = iter.next();
                        psImpl.setString(1, user.username);
                        psImpl.setString(2, user.username.toLowerCase(locale));
                        if (domain == null || (domain.getDomainId() != user.domainId)) {
                            domain = (DomainDb) cmDB.getDomain(user.domainId);
                        }
                        userDirs.add(user.username + '@' + domain.getDomainName());
                        psImpl.setInt(3, user.domainId);
                        psImpl.setString(4, pass.get(user.username).password);
                        psImpl.setString(5, pass.get(user.username).salt);
                        psImpl.executeUpdate();
                        rsImpl = psImpl.getGeneratedKeys();
                        if (rsImpl.next()) {
                            user.userId = rsImpl.getInt(1);
                            rsImpl.close();
                        } else {
                            throw new SQLException(""Need to have a user id generated."");
                        }
                    }
                }
            });
            new ProcessEnvelope().executeNull(new ExecuteProcessAbstractImpl(connection, false, false, true, true) {

                @Override
                public void executeProcessReturnNull() throws SQLException {
                    psImpl = connImpl.prepareStatement(sqlCommands.getProperty(""realm.addUser""));
                    Iterator<NewUser> iter = newUsers.iterator();
                    NewUser user;
                    List<RealmWithEncryptedPass> list;
                    RealmWithEncryptedPass rwep;
                    RealmDb realm;
                    while (iter.hasNext()) {
                        user = iter.next();
                        list = realmPass.get(user.username);
                        if (list != null) {
                            Iterator<RealmWithEncryptedPass> iter1 = list.iterator();
                            while (iter1.hasNext()) {
                                rwep = iter1.next();
                                realm = (RealmDb) rwep.realm;
                                psImpl.setInt(1, realm.getRealmId());
                                psImpl.setInt(2, user.userId);
                                psImpl.setInt(3, user.domainId);
                                psImpl.setString(4, rwep.password);
                                psImpl.executeUpdate();
                            }
                        }
                    }
                }
            });
            connection.commit();
            Iterator<String> iterator = userDirs.iterator();
            while (iterator.hasNext()) {
                cm.requestDirCreation(new File(cm.getUsersDirectory(), iterator.next()).getPath());
            }
            cm.createDirectories();
        } catch (GeneralSecurityException e) {
            log.error(e);
            if (connection != null) {
                try {
                    connection.rollback();
                } catch (SQLException ex) {
                }
            }
            throw new RuntimeException(""Error updating Realms. Unable to continue Operation."");
        } catch (SQLException sqle) {
            log.error(sqle);
            if (connection != null) {
                try {
                    connection.rollback();
                } catch (SQLException ex) {
                }
            }
        } finally {
            if (connection != null) {
                try {
                    connection.setAutoCommit(true);
                } catch (SQLException ex) {
                }
            }
        }
    }
",72,,LABEL_0,LABEL_0,LABEL_0,-1,"load,urlConfiguracion,configuracion,xenc",,4,11,0,,0,GA,1913,0.368487573,failed,[]
148,"    public void init(ConnectionManager mgr, Hashtable cfg, Socket sock) throws RemoteException {
        _cman = mgr;
        _sock = sock;
        for (int i = 0; i < 256; i++) {
            String key = Integer.toHexString(i);
            if (key.length() < 2) key = ""0"" + key;
            availcmd.push(key);
            commands.put(key, null);
        }
        try {
            _sout = new PrintWriter(_sock.getOutputStream(), true);
            _sinp = new BufferedReader(new InputStreamReader(_sock.getInputStream()));
            String seed = """";
            Random rand = new Random();
            for (int i = 0; i < 16; i++) {
                String hex = Integer.toHexString(rand.nextInt(256));
                if (hex.length() < 2) hex = ""0"" + hex;
                seed += hex.substring(hex.length() - 2);
            }
            String pass = _mpsw + seed + _spsw;
            MessageDigest md5 = MessageDigest.getInstance(""MD5"");
            md5.reset();
            md5.update(pass.getBytes());
            String hash = hash2hex(md5.digest()).toLowerCase();
            String banner = ""INIT "" + ""servername"" + "" "" + hash + "" "" + seed;
            sendLine(banner);
            String txt = readLine(5);
            if (txt == null) {
                throw new IOException(""Slave did not send banner !!"");
            }
            String sname = """";
            String spass = """";
            String sseed = """";
            try {
                String[] items = txt.split("" "");
                sname = items[1].trim();
                spass = items[2].trim();
                sseed = items[3].trim();
            } catch (Exception e) {
                AsyncSlaveListener.invalidSlave(""INITFAIL BadKey"", _sock);
            }
            pass = _spsw + sseed + _mpsw;
            md5 = MessageDigest.getInstance(""MD5"");
            md5.reset();
            md5.update(pass.getBytes());
            hash = hash2hex(md5.digest()).toLowerCase();
            if (!sname.equals(_name)) {
                AsyncSlaveListener.invalidSlave(""INITFAIL Unknown"", _sock);
            }
            if (!spass.toLowerCase().equals(hash.toLowerCase())) {
                AsyncSlaveListener.invalidSlave(""INITFAIL BadKey"", _sock);
            }
            _cman.getSlaveManager().addSlave(_name, this, getSlaveStatus(), -1);
            start();
        } catch (IOException e) {
            if (e instanceof ConnectIOException && e.getCause() instanceof EOFException) {
                logger.info(""Check slaves.xml on the master that you are allowed to connect."");
            }
            logger.info(""IOException: "" + e.toString());
            try {
                sock.close();
            } catch (Exception e1) {
            }
        } catch (Exception e) {
            logger.warn(""Exception: "" + e.toString());
            try {
                sock.close();
            } catch (Exception e2) {
            }
        }
        System.gc();
    }
 <SPLIT>     public synchronized String encrypt(String plaintext) throws Exception {
        StringBuffer sb = new StringBuffer();
        MessageDigest md = null;
        try {
            md = MessageDigest.getInstance(""SHA-512"");
        } catch (NoSuchAlgorithmException e) {
            throw new Exception(e.getMessage());
        }
        try {
            md.update(plaintext.getBytes(""UTF-8""));
        } catch (UnsupportedEncodingException e) {
            throw new Exception(e.getMessage());
        }
        byte raw[] = md.digest();
        String hash = (new BASE64Encoder()).encode(raw);
        return hash;
    }
",626,,LABEL_1,LABEL_0,,-4,"init,mgr,cfg,sock,_cman,_sock,i,key,_sout,_sinp,seed,rand,hex,pass,md5,hash,banner,txt,sname,spass,sseed,items",,,,0,,0,Greedy,1,0.000752914,,[]
149,"    public static URL addToArchive(Pod pod, ZipOutputStream podArchiveOutputStream, String filename, InputStream source) throws IOException {
        ZipEntry entry = new ZipEntry(filename);
        podArchiveOutputStream.putNextEntry(entry);
        IOUtils.copy(source, podArchiveOutputStream);
        podArchiveOutputStream.closeEntry();
        return PodArchiveResolver.withinPodArchive(pod, filename);
    }
 <SPLIT>     @Test
    public void test() throws Exception {
        InputStream is = this.getClass().getResourceAsStream(""originAndDestination.xml"");
        ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
        IOUtils.copy(is, byteArrayOutputStream);
        TrafficModelDefinition def = MDFReader.read(byteArrayOutputStream.toByteArray());
        TrafficSimulationEngine se = new TrafficSimulationEngine();
        se.init(def);
        int linkId = 2;
        int segmentId = 0;
        Map<Integer, Set<Integer>> linkSegments = new HashMap<Integer, Set<Integer>>();
        Set<Integer> segments = new HashSet<Integer>();
        segments.add(segmentId);
        linkSegments.put(linkId, segments);
        FrameProperties frameProperties = new FrameProperties(linkSegments, new HashSet<Integer>());
        se.setFrameProperties(frameProperties);
        for (float time = 0; time < 60 * 10; time += 0.1f) {
            se.step(0.1f);
            for (RoadObject vehicle : se.getDynamicObjects()) {
                System.out.println(time + "": X="" + vehicle.getPosition() + ""\tV="" + vehicle.getSpeed());
            }
        }
    }
",63,,LABEL_1,LABEL_1,LABEL_1,-1,"addToArchive,pod,podArchiveOutputStream,filename,source,entry",,6,14,0,,0,GA,2757,0.413231178,failed,"[';pod = 0', ';filename = 0', ';entry = 0', ';cache = 0', ';project = 0', ';bean = 0', ';zip = 0', ';po = 0', ';pot = 0', ';plugin = 0', ';host = 0', ';pl = 0', ';component = 0', ';podArchIVEOutputSteam = 0', ';url = 0', ';download = 0', ';module = 0', ';url = 0']"
150,"    public void createJAR(String fileString, String ext) {
        try {
            File file = new File(fileString);
            int i = fileString.lastIndexOf(java.io.File.separator);
            String dir = fileString.substring(0, i + 1);
            if (ext.matches(""jar"")) {
                jarFile = new File(getClass().getClassLoader().getResource(""jsdviewer.jar"").toURI());
                java.io.FileOutputStream fstrm = new java.io.FileOutputStream(file);
                FileChannel in = (new java.io.FileInputStream(jarFile)).getChannel();
                FileChannel out = fstrm.getChannel();
                in.transferTo(0, jarFile.length(), out);
                in.close();
                out.close();
            } else {
                file.mkdir();
            }
            File.umount(file);
            File temp = new File(dir + ""document.jsd"");
            FileOutputStream fstrm2 = new FileOutputStream(temp.getCanonicalPath());
            ostrm = new ObjectOutputStream(fstrm2);
            ostrm.writeObject(doc);
            ostrm.flush();
            ostrm.close();
            File.umount();
            File docFile = new File(file.getCanonicalPath() + java.io.File.separator + ""document.jsd"");
            File.cp_p(temp, docFile);
            File.umount();
            temp.delete();
            File.umount(file);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
 <SPLIT>     public String kodetu(String testusoila) {
        MessageDigest md = null;
        try {
            md = MessageDigest.getInstance(""SHA"");
        } catch (NoSuchAlgorithmException e) {
            new MezuLeiho(""Ez da zifraketa algoritmoa aurkitu"", ""Ados"", ""Zifraketa Arazoa"", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        }
        try {
            md.update(testusoila.getBytes(""UTF-8""));
        } catch (UnsupportedEncodingException e) {
            new MezuLeiho(""Errorea kodetzerakoan"", ""Ados"", ""Kodeketa Errorea"", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        }
        byte raw[] = md.digest();
        String hash = (new BASE64Encoder()).encode(raw);
        return hash;
    }
",306,,LABEL_0,LABEL_1,,-4,"createJAR,fileString,ext,file,i,dir,jarFile,fstrm,in,out,temp,fstrm2,ostrm,docFile",,,,0,,0,Greedy,1,0.000471425,,[]
151,"    public static void copyFile(File sourceFile, File destFile) throws IOException {
        if (!destFile.exists()) {
            destFile.createNewFile();
        }
        FileChannel source = null;
        FileChannel destination = null;
        try {
            source = new FileInputStream(sourceFile).getChannel();
            destination = new FileOutputStream(destFile).getChannel();
            destination.transferFrom(source, 0, source.size());
        } finally {
            if (source != null) {
                source.close();
            }
            if (destination != null) {
                destination.close();
            }
        }
    }
 <SPLIT>     private static void readAndRewrite(File inFile, File outFile) throws IOException {
        ImageInputStream iis = ImageIO.createImageInputStream(new BufferedInputStream(new FileInputStream(inFile)));
        DcmParser dcmParser = DcmParserFactory.getInstance().newDcmParser(iis);
        Dataset ds = DcmObjectFactory.getInstance().newDataset();
        dcmParser.setDcmHandler(ds.getDcmHandler());
        dcmParser.parseDcmFile(null, Tags.PixelData);
        PixelDataReader pdReader = pdFact.newReader(ds, iis, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());
        System.out.println(""reading "" + inFile + ""..."");
        pdReader.readPixelData(false);
        ImageOutputStream out = ImageIO.createImageOutputStream(new BufferedOutputStream(new FileOutputStream(outFile)));
        DcmEncodeParam dcmEncParam = DcmEncodeParam.IVR_LE;
        ds.writeDataset(out, dcmEncParam);
        ds.writeHeader(out, dcmEncParam, Tags.PixelData, dcmParser.getReadVR(), dcmParser.getReadLength());
        System.out.println(""writing "" + outFile + ""..."");
        PixelDataWriter pdWriter = pdFact.newWriter(pdReader.getPixelDataArray(), false, ds, out, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());
        pdWriter.writePixelData();
        out.flush();
        out.close();
        System.out.println(""done!"");
    }
",116,"    public static void copyFiles(File ourceUrl, File destFiles) throws IOException {
        if (!destFiles.exists()) {
            destFiles.createNewFile();
        }
        FileChannel url = null;
        FileChannel domination = null;
        try {
            url = new FileInputStream(ourceUrl).getChannel();
            domination = new FileOutputStream(destFiles).getChannel();
            domination.transferFrom(url, 0, url.size());
        } finally {
            if (url != null) {
                url.close();
            }
            if (domination != null) {
                domination.close();
            }
        }
    }
",LABEL_1,LABEL_1,LABEL_0,1,"copyFile,sourceFile,destFile,source,destination","copyFile:0.018949449062347412,sourceFile:-0.0136260986328125,destFile:-0.027661800384521484,source:-0.01727163791656494,destination:-0.01100224256515503,",5,18,0,"copyFile:copyFiles,destination:domination,sourceFile:ourceUrl,source:url,destFile:destFiles,",0,Greedy,212,0.032034246,replace,[]
152,"    public static String encodePassword(String password) {
        MessageDigest md;
        try {
            md = MessageDigest.getInstance(""SHA"");
            md.update(password.getBytes());
            String encodedPassword = new String(md.digest(), new Base64Provider().charsetForName(""x-base64""));
            return encodedPassword;
        } catch (NoSuchAlgorithmException e) {
            return null;
        }
    }
 <SPLIT>     private static RemoteFile getRemoteFile(String url) {
        long size = 0;
        String realUrl = """";
        try {
            HttpURLConnection conn = (HttpURLConnection) (new URL(url)).openConnection();
            size = conn.getContentLength();
            realUrl = conn.getURL().toString();
            conn.disconnect();
        } catch (Exception e) {
            e.printStackTrace();
        }
        RemoteFile rf = new RemoteFile(size, realUrl);
        return rf;
    }
",77,,LABEL_0,LABEL_0,LABEL_0,-1,"encodePassword,password,md,encodedPassword",,3,7,0,,0,GA,1875,0.260210852,failed,[]
153,"    private void copy(File source, File destinationDirectory) throws IOException {
        if (source.isDirectory()) {
            File newDir = new File(destinationDirectory, source.getName());
            newDir.mkdir();
            File[] children = source.listFiles();
            for (int i = 0; i < children.length; i++) {
                if (children[i].getName().equals("".svn"")) {
                    continue;
                }
                copy(children[i], newDir);
            }
        } else {
            File newFile = new File(destinationDirectory, source.getName());
            if (newFile.exists() && source.lastModified() == newFile.lastModified()) {
                return;
            }
            FileOutputStream output = new FileOutputStream(newFile);
            FileInputStream input = new FileInputStream(source);
            byte[] buff = new byte[2048];
            int read = 0;
            while ((read = input.read(buff)) > 0) {
                output.write(buff, 0, read);
            }
            output.flush();
            output.close();
            input.close();
        }
    }
 <SPLIT>     public Resource createNew(String name, InputStream in, Long length, String contentType) throws IOException {
        File dest = new File(this.getRealFile(), name);
        LOGGER.debug(""PUT?? - real file: "" + this.getRealFile() + "",name: "" + name);
        if (isOwner) {
            if (!"".request"".equals(name) && !"".tokens"".equals(name)) {
                FileOutputStream out = null;
                try {
                    out = new FileOutputStream(dest);
                    IOUtils.copy(in, out);
                } finally {
                    IOUtils.closeQuietly(out);
                }
            } else {
                if (ServerConfiguration.isDynamicSEL()) {
                } else {
                }
                FileOutputStream out = null;
                try {
                    out = new FileOutputStream(dest);
                    IOUtils.copy(in, out);
                } finally {
                    IOUtils.closeQuietly(out);
                }
            }
            return factory.resolveFile(this.host, dest);
        } else {
            LOGGER.error(""User isn't owner of this folder"");
            return null;
        }
    }
",229,"    private void run(File url, File destinationDirectory) throws IOException {
        if (url.isDirectory()) {
            FinewDirDir = new FidestinationDirectoryory, url.getName());
            newDir.mkdir();
            Filechildrenren = url.listFiles();
            for (int i = 0; i < children.length; i++) {
                if (children[i].getName().equals("".svn"")) {
                    continue;
                }
                run(children[i], newDir);
            }
        } else {
            FinewFileile = new FidestinationDirectoryory, url.getName());
            inewFileile.exists() && url.lastModified() == newFile.lastModified()) {
                return;
            }
            FileOutputStream ou = new FileOutputStream(newFile);
            FileInputStreoperatorput = new FileInputStream(url);
            byte[] batch = new byte[2048];
            int read = 0;
            while ((readreadperator.rreadbatch)) > 0) {
                ou.write(batch, 0, read);
            }
            ou.flush();
            ou.close();
            operator.close();
        }
    }
",LABEL_1,LABEL_1,0.996373832,1,"copy,source,destinationDirectory,newDir,children,i,newFile,output,input,buff,read",,10,38,23,"copy:run,source:url,destinationDirectory:destinationDirectory,newDir:newDir,children:children,i:i,newFile:newFile,output:ou,input:operator,buff:batch,read:read,",6,GA,1676,0.303149096,ga,"[';print(newFile)', ';print(share)']"
154,"    public UserFunction loadMFileViaWeb(URL codeBase, String directoryAndFile, String mFileName) {
        String code = """";
        UserFunction function = null;
        ErrorLogger.debugLine(""MFileLoader: loading >"" + mFileName + "".m<"");
        try {
            URL url = new URL(codeBase, directoryAndFile);
            InputStream in = url.openStream();
            BufferedReader inReader = new BufferedReader(new InputStreamReader(in));
            String line;
            while ((line = inReader.readLine()) != null) {
                code += line + ""\n"";
            }
            inReader.close();
        } catch (Exception e) {
            Errors.throwMathLibException(""MFileLoader: m-file exception via web"");
        }
        ErrorLogger.debugLine(""MFileLoader: code: begin \n"" + code + ""\ncode end"");
        FunctionParser funcParser = new FunctionParser();
        function = funcParser.parseFunction(code);
        function.setName(mFileName);
        ErrorLogger.debugLine(""MFileLoader: finished webloading >"" + mFileName + "".m<"");
        return function;
    }
 <SPLIT>     private String createHTML(PAGE_TYPE requestPage) {
        String result = ""<html><head>"";
        URL url = getClass().getClassLoader().getResource(""org/compiere/images/PAPanel.css"");
        InputStreamReader ins;
        try {
            ins = new InputStreamReader(url.openStream());
            BufferedReader bufferedReader = new BufferedReader(ins);
            String cssLine;
            while ((cssLine = bufferedReader.readLine()) != null) result += cssLine + ""\n"";
        } catch (IOException e1) {
            log.log(Level.SEVERE, e1.getLocalizedMessage(), e1);
        }
        switch(requestPage) {
            case PAGE_LOGO:
                result += ""</head><body class=\""header\"">"" + ""<table width=\""100%\""><tr><td>"" + ""<img src=\""res:org/compiere/images/logo_ad.png\"">"" + ""</td><td></td><td width=\""290\"">"" + ""</td></tr></table>"" + ""</body></html>"";
                break;
            case PAGE_HOME:
                result += ""</head><body><div class=\""content\"">\n"";
                queryZoom = null;
                queryZoom = new ArrayList<MQuery>();
                String appendToHome = null;
                String sql = "" SELECT x.AD_CLIENT_ID, x.NAME, x.DESCRIPTION, x.AD_WINDOW_ID, x.PA_GOAL_ID, x.LINE, x.HTML, m.AD_MENU_ID"" + "" FROM PA_DASHBOARDCONTENT x"" + "" LEFT OUTER JOIN AD_MENU m ON x.ad_window_id=m.ad_window_id"" + "" WHERE (x.AD_Client_ID=0 OR x.AD_Client_ID=?) AND x.IsActive='Y'"" + "" ORDER BY LINE"";
                PreparedStatement pstmt = null;
                ResultSet rs = null;
                try {
                    pstmt = DB.prepareStatement(sql, null);
                    pstmt.setInt(1, Env.getAD_Client_ID(Env.getCtx()));
                    rs = pstmt.executeQuery();
                    while (rs.next()) {
                        appendToHome = rs.getString(""HTML"");
                        if (appendToHome != null) {
                            if (rs.getString(""DESCRIPTION"") != null) result += ""<H2>"" + rs.getString(""DESCRIPTION"") + ""</H2>\n"";
                            result += stripHtml(appendToHome, false) + ""<br>\n"";
                        }
                        if (rs.getInt(""AD_MENU_ID"") > 0) {
                            result += ""<a class=\""hrefNode\"" href=\""http:///window/node#"" + String.valueOf(rs.getInt(""AD_WINDOW_ID"") + ""\"">"" + rs.getString(""DESCRIPTION"") + ""</a><br>\n"");
                        }
                        result += ""<br>\n"";
                        if (rs.getInt(""PA_GOAL_ID"") > 0) result += goalsDetail(rs.getInt(""PA_GOAL_ID""));
                    }
                } catch (SQLException e) {
                    log.log(Level.SEVERE, sql, e);
                } finally {
                    DB.close(rs, pstmt);
                    rs = null;
                    pstmt = null;
                }
                result += ""<br><br><br>\n"" + ""</div>\n</body>\n</html>\n"";
                break;
            default:
                log.warning(""Unknown option - "" + requestPage);
        }
        return result;
    }
",184,,LABEL_1,LABEL_0,,-4,"loadMFileViaWeb,codeBase,directoryAndFile,mFileName,code,function,url,in,inReader,line,end",,,,0,,0,Greedy,1,0.000593535,,[]
155,"    public static void compressWithZip(Vector fileList, String zipFileName) throws IOException {
        if (fileList == null || fileList.size() == 0) return;
        FileOutputStream fos = new FileOutputStream(zipFileName);
        ZipOutputStream zos = new ZipOutputStream(fos);
        Iterator iter = fileList.iterator();
        while (iter.hasNext()) {
            String fileName = (String) iter.next();
            int ind = Math.max(fileName.lastIndexOf('/'), fileName.lastIndexOf('\\'));
            String shortName = ""unknown"";
            if (ind < fileName.length() - 1) shortName = fileName.substring(ind + 1);
            zos.putNextEntry(new ZipEntry(shortName));
            FileInputStream fis = new FileInputStream(fileName);
            byte[] buf = new byte[10000];
            int bytesRead;
            while ((bytesRead = fis.read(buf)) > 0) zos.write(buf, 0, bytesRead);
            fis.close();
            zos.closeEntry();
        }
        zos.close();
    }
 <SPLIT>     private void streamContains(String in, InputStream stream) throws IOException {
        ByteArrayOutputStream baos = new ByteArrayOutputStream();
        IOUtils.copy(stream, baos);
        byte[] bytes = baos.toByteArray();
        String cmp = new String(bytes, ""UTF-8"");
        assertTrue(cmp.contains(in));
        baos.close();
    }
",211,,LABEL_1,LABEL_1,LABEL_1,-1,"compressWithZip,fileList,zipFileName,fos,zos,iter,fileName,ind,shortName,fis,buf,bytesRead",,9,27,0,,0,GA,5343,0.819665972,failed,"[';compressWithZip = 0', ';fileList = 0', ';zipFileName = 0', ';Faos = 0']"
156,"    @Override
    public User saveUser(User user) {
        try {
            MessageDigest digest = java.security.MessageDigest.getInstance(""MD5"");
            digest.update(user.getPassword().getBytes(""UTF-8""));
            byte[] hash = digest.digest();
            BigInteger bigInt = new BigInteger(1, hash);
            String hashtext = bigInt.toString(16);
            while (hashtext.length() < 32) {
                hashtext = ""0"" + hashtext;
            }
            user.setPassword(hashtext);
            user.setDataRegjistrimit(new Date());
            return em.merge(user);
        } catch (Exception e) {
            throw new NestedException(e.getMessage(), e);
        }
    }
 <SPLIT>     public void update(String channelPath, String dataField, String fatherDocId) {
        String sqlInitial = ""select uri from t_ip_doc_res where doc_id = '"" + fatherDocId + ""' and type="" + "" '"" + ces.platform.infoplat.core.DocResource.DOC_MAGAZINE_TYPE + ""' "";
        String sqlsortURL = ""update t_ip_doc_res set uri = ? where doc_id = '"" + fatherDocId + ""' "" + "" and type = '"" + ces.platform.infoplat.core.DocResource.DOC_MAGAZINE_TYPE + ""' "";
        Connection conn = null;
        ResultSet rs = null;
        PreparedStatement ps = null;
        try {
            dbo = (ERDBOperation) createDBOperation();
            String url = """";
            boolean flag = true;
            StringTokenizer st = null;
            conn = dbo.getConnection();
            conn.setAutoCommit(false);
            ps = conn.prepareStatement(sqlInitial);
            rs = ps.executeQuery();
            if (rs.next()) url = rs.getString(1);
            if (!url.equals("""")) {
                st = new StringTokenizer(url, "","");
                String sortDocId = """";
                while (st.hasMoreTokens()) {
                    if (flag) {
                        sortDocId = ""'"" + st.nextToken() + ""'"";
                        flag = false;
                    } else {
                        sortDocId = sortDocId + "","" + ""'"" + st.nextToken() + ""'"";
                    }
                }
                String sqlsort = ""select id from t_ip_doc where id in ("" + sortDocId + "") order by "" + dataField;
                ps = conn.prepareStatement(sqlsort);
                rs = ps.executeQuery();
                String sortURL = """";
                boolean sortflag = true;
                while (rs.next()) {
                    if (sortflag) {
                        sortURL = rs.getString(1);
                        sortflag = false;
                    } else {
                        sortURL = sortURL + "","" + rs.getString(1);
                    }
                }
                ps = conn.prepareStatement(sqlsortURL);
                ps.setString(1, sortURL);
                ps.executeUpdate();
            }
            conn.commit();
        } catch (Exception e) {
            e.printStackTrace();
            try {
                conn.rollback();
            } catch (SQLException e1) {
                e1.printStackTrace();
            }
        } finally {
            close(rs, null, ps, conn, dbo);
        }
    }
",146,,LABEL_0,LABEL_0,LABEL_0,-1,"saveUser,user,digest,hash,bigInt,hashtext",,6,19,0,,0,GA,2574,0.435713478,failed,"[';saveUser = 0', ';print(Hashword)']"
157,"    private void CopyTo(File dest) throws IOException {
        FileReader in = null;
        FileWriter out = null;
        int c;
        try {
            in = new FileReader(image);
            out = new FileWriter(dest);
            while ((c = in.read()) != -1) out.write(c);
        } finally {
            if (in != null) try {
                in.close();
            } catch (Exception e) {
            }
            if (out != null) try {
                out.close();
            } catch (Exception e) {
            }
        }
    }
 <SPLIT>     public static void main(String[] argv) {
        if (1 < argv.length) {
            File[] sources = Source(argv[0]);
            if (null != sources) {
                for (File src : sources) {
                    File[] targets = Target(src, argv);
                    if (null != targets) {
                        final long srclen = src.length();
                        try {
                            FileChannel source = new FileInputStream(src).getChannel();
                            try {
                                for (File tgt : targets) {
                                    FileChannel target = new FileOutputStream(tgt).getChannel();
                                    try {
                                        source.transferTo(0L, srclen, target);
                                    } finally {
                                        target.close();
                                    }
                                    System.out.printf(""Updated %s\n"", tgt.getPath());
                                    File[] deletes = Delete(src, tgt);
                                    if (null != deletes) {
                                        for (File del : deletes) {
                                            if (SVN) {
                                                if (SvnDelete(del)) System.out.printf(""Deleted %s\n"", del.getPath()); else System.out.printf(""Failed to delete %s\n"", del.getPath());
                                            } else if (del.delete()) System.out.printf(""Deleted %s\n"", del.getPath()); else System.out.printf(""Failed to delete %s\n"", del.getPath());
                                        }
                                    }
                                    if (SVN) SvnAdd(tgt);
                                }
                            } finally {
                                source.close();
                            }
                        } catch (Exception exc) {
                            exc.printStackTrace();
                            System.exit(1);
                        }
                    }
                }
                System.exit(0);
            } else {
                System.err.printf(""Source file(s) not found in '%s'\n"", argv[0]);
                System.exit(1);
            }
        } else {
            usage();
            System.exit(1);
        }
    }
",113,"    private void CopyTo(File dest) throws IOException {
        FileReader in = null;
        FileWriter url = null;
        int c;
        try {
            in = new FileReader(image);
            url = new FileWriter(dest);
            while ((c = in.read()) != -1) url.write(c);
        } finally {
            if (in != null) try {
                in.close();
            } catch (Exception e) {
            }
            if (url != null) try {
                url.close();
            } catch (Exception e) {
            }
        }
    }
",LABEL_1,LABEL_1,LABEL_0,1,"CopyTo,dest,in,out,c","CopyTo:-0.0056822896003723145,dest:-0.0016072988510131836,in:-0.0024832487106323242,out:-0.0026767849922180176,c:-0.003239572048187256,",1,5,0,"dest:dest,in:in,out:url,",0,Greedy,176,0.02648865,replace,[]
158,"    public static String encryptPassword(String password) {
        try {
            MessageDigest digest = java.security.MessageDigest.getInstance(""SHA1"");
            digest.update(password.getBytes(""UTF-8""));
            byte[] hash = digest.digest();
            StringBuffer buf = new StringBuffer();
            for (int i = 0; i < hash.length; i++) {
                int halfbyte = (hash[i] >>> 4) & 0x0F;
                int two_halfs = 0;
                do {
                    if ((0 <= halfbyte) && (halfbyte <= 9)) {
                        buf.append((char) ('0' + halfbyte));
                    } else {
                        buf.append((char) ('a' + (halfbyte - 10)));
                    }
                    halfbyte = hash[i] & 0x0F;
                } while (two_halfs++ < 1);
            }
            return buf.toString();
        } catch (Exception e) {
        }
        return null;
    }
 <SPLIT>     private String cookieString(String url, String ip) {
        MessageDigest md = null;
        try {
            md = MessageDigest.getInstance(""SHA-1"");
            md.update((url + ""&&"" + ip + ""&&"" + salt.toString()).getBytes());
            java.math.BigInteger hash = new java.math.BigInteger(1, md.digest());
            return hash.toString(16);
        } catch (NoSuchAlgorithmException e) {
            filterConfig.getServletContext().log(this.getClass().getName() + "" error "" + e);
            return null;
        }
    }
",188,,LABEL_1,LABEL_0,,-4,"encryptPassword,password,digest,hash,buf,i,halfbyte,two_halfs",,,,0,,0,Greedy,1,0.000391114,,[]
159,"    private static byte[] baseHash(String name, String password) {
        try {
            MessageDigest digest = MessageDigest.getInstance(""MD5"");
            digest.reset();
            digest.update(name.toLowerCase().getBytes());
            digest.update(password.getBytes());
            return digest.digest();
        } catch (NoSuchAlgorithmException ex) {
            d(""MD5 algorithm not found!"");
            throw new RuntimeException(""MD5 algorithm not found! Unable to authenticate"");
        }
    }
 <SPLIT>     public static synchronized String toSHA1(String str) {
        Nulls.failIfNull(str, ""Cannot create an SHA1 encryption form a NULL string"");
        try {
            MessageDigest md;
            md = MessageDigest.getInstance(SHA1);
            byte[] sha1hash = new byte[40];
            md.update(str.getBytes(ISO_CHARSET), 0, str.length());
            sha1hash = md.digest();
            return convertToHex(sha1hash);
        } catch (NoSuchAlgorithmException ex) {
            ex.printStackTrace();
        } catch (UnsupportedEncodingException ex) {
            ex.printStackTrace();
        }
        return null;
    }
",93,,LABEL_1,LABEL_1,LABEL_1,-1,"baseHash,name,password,digest",,4,11,0,,0,GA,1754,0.250299648,failed,[]
160,"    static String calculateProfileDiffDigest(String profileDiff, boolean normaliseWhitespace) throws Exception {
        if (normaliseWhitespace) {
            profileDiff = removeWhitespaces(profileDiff);
        }
        MessageDigest md = MessageDigest.getInstance(""MD5"");
        md.update(profileDiff.getBytes());
        return new BASE64Encoder().encode(md.digest());
    }
 <SPLIT>     private String getPrefsKey(String key) {
        try {
            if (MD5 == null) MD5 = MessageDigest.getInstance(""MD5"");
            MD5.reset();
            MD5.update(key.getBytes(""UTF-8""));
            byte[] resultBytes = MD5.digest();
            return toHexString(resultBytes);
        } catch (Exception nsae) {
            return key;
        }
    }
",66,,LABEL_1,LABEL_1,LABEL_1,-1,"calculateProfileDiffDigest,profileDiff,normaliseWhitespace,md",,4,10,0,,0,GA,1861,0.256033194,failed,"[';profileDiff = 0', ';rm = 0']"
161,"    public static String ReadURL(URL url, boolean textonly) {
        try {
            URLConnection uconn = url.openConnection();
            Object ucont = uconn.getContent();
            if (ucont instanceof InputStream) return ReadInputStream((java.io.InputStream) ucont, textonly); else return """" + ucont;
        } catch (java.io.IOException e) {
            e.printStackTrace();
        }
        return null;
    }
 <SPLIT>     public static String encrypt(final String pass) {
        try {
            final MessageDigest md = MessageDigest.getInstance(""SHA"");
            md.update(pass.getBytes(""UTF-8""));
            return new String(Base64.encodeBase64(md.digest()));
        } catch (final Exception e) {
            throw new RuntimeException(""No se pudo encriptar el password."", e);
        }
    }
",83,,LABEL_0,LABEL_0,LABEL_0,-1,"ReadURL,url,textonly,uconn,ucont",,5,11,0,,0,GA,1902,0.267004347,failed,"[';ReadURL = 0', ';print(ReadURL)', ';GetUrl = 0', ';print(GetUrl)']"
162,"    public void get() {
        try {
            int cnt;
            URL url = new URL(urlStr);
            URLConnection conn = url.openConnection();
            conn.setDoInput(true);
            conn.setDoOutput(false);
            InputStream is = conn.getInputStream();
            String filename = new File(url.getFile()).getName();
            FileOutputStream fos = new FileOutputStream(dstDir + File.separator + filename);
            byte[] buffer = new byte[4096];
            while ((cnt = is.read(buffer, 0, buffer.length)) != -1) fos.write(buffer, 0, cnt);
            fos.close();
            is.close();
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }
 <SPLIT>     public void testReadPerMemberSixSmall() throws IOException {
        GZIPMembersInputStream gzin = new GZIPMembersInputStream(new ByteArrayInputStream(sixsmall_gz));
        gzin.setEofEachMember(true);
        for (int i = 0; i < 3; i++) {
            int count2 = IOUtils.copy(gzin, new NullOutputStream());
            assertEquals(""wrong 1-byte member count"", 1, count2);
            gzin.nextMember();
            int count3 = IOUtils.copy(gzin, new NullOutputStream());
            assertEquals(""wrong 5-byte member count"", 5, count3);
            gzin.nextMember();
        }
        int countEnd = IOUtils.copy(gzin, new NullOutputStream());
        assertEquals(""wrong eof count"", 0, countEnd);
    }
",156,"    public void get() {
        try {
            int cnt;
            URL client = new URL(urlStr);
            URLConnection conn = client.openConnection();
            conn.setDoInput(true);
            conn.setDoOutput(false);
            InputStream is = conn.getInputStream();
            String filename = new File(client.getFile()).getName();
            FileOutputStream fos = new FileOutputStream(dstDir + File.separator + filename);
            byte[] buffer = new byte[4096];
            while ((cnt = is.read(buffer, 0, buffer.length)) != -1) fos.write(buffer, 0, cnt);
            fos.close();
            is.close();
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }
",LABEL_0,LABEL_0,LABEL_1,1,"get,cnt,url,conn,is,filename,fos,buffer","get:0.0007080435752868652,cnt:0.01219630241394043,url:0.0795561671257019,conn:-0.012000441551208496,is:0.007099568843841553,filename:0.002584517002105713,fos:0.01621454954147339,buffer:0.0042923688888549805,",1,3,0,"url:client,",0,Greedy,71,0.010250552,replace,[]
163,"    @Override
    public String readFixString(final int len) {
        if (len < 1) {
            return StringUtils.EMPTY;
        }
        final StringWriter sw = new StringWriter();
        try {
            IOUtils.copy(createLimitedInputStream(len), sw, null);
        } catch (IOException e) {
            throw createRuntimeException(e);
        }
        return sw.toString();
    }
 <SPLIT>     private void displayDiffResults() throws IOException {
        File outFile = File.createTempFile(""diff"", "".htm"");
        outFile.deleteOnExit();
        FileOutputStream outStream = new FileOutputStream(outFile);
        BufferedWriter out = new BufferedWriter(new OutputStreamWriter(outStream));
        out.write(""<html><head><title>LOC Differences</title>\n"" + SCRIPT + ""</head>\n"" + ""<body bgcolor='#ffffff'>\n"" + ""<div onMouseOver=\""window.defaultStatus='Metrics'\"">\n"");
        if (addedTable.length() > 0) {
            out.write(""<table border><tr><th>Files Added:</th>"" + ""<th>Add</th><th>Type</th></tr>"");
            out.write(addedTable.toString());
            out.write(""</table><br><br>"");
        }
        if (modifiedTable.length() > 0) {
            out.write(""<table border><tr><th>Files Modified:</th>"" + ""<th>Base</th><th>Del</th><th>Mod</th><th>Add</th>"" + ""<th>Total</th><th>Type</th></tr>"");
            out.write(modifiedTable.toString());
            out.write(""</table><br><br>"");
        }
        if (deletedTable.length() > 0) {
            out.write(""<table border><tr><th>Files Deleted:</th>"" + ""<th>Del</th><th>Type</th></tr>"");
            out.write(deletedTable.toString());
            out.write(""</table><br><br>"");
        }
        out.write(""<table name=METRICS BORDER>\n"");
        if (modifiedTable.length() > 0 || deletedTable.length() > 0) {
            out.write(""<tr><td>Base:&nbsp;</td><td>"");
            out.write(Long.toString(base));
            out.write(""</td></tr>\n<tr><td>Deleted:&nbsp;</td><td>"");
            out.write(Long.toString(deleted));
            out.write(""</td></tr>\n<tr><td>Modified:&nbsp;</td><td>"");
            out.write(Long.toString(modified));
            out.write(""</td></tr>\n<tr><td>Added:&nbsp;</td><td>"");
            out.write(Long.toString(added));
            out.write(""</td></tr>\n<tr><td>New & Changed:&nbsp;</td><td>"");
            out.write(Long.toString(added + modified));
            out.write(""</td></tr>\n"");
        }
        out.write(""<tr><td>Total:&nbsp;</td><td>"");
        out.write(Long.toString(total));
        out.write(""</td></tr>\n</table></div>"");
        redlinesOut.close();
        out.flush();
        InputStream redlines = new FileInputStream(redlinesTempFile);
        byte[] buffer = new byte[4096];
        int bytesRead;
        while ((bytesRead = redlines.read(buffer)) != -1) outStream.write(buffer, 0, bytesRead);
        outStream.write(""</BODY></HTML>"".getBytes());
        outStream.close();
        Browser.launch(outFile.toURL().toString());
    }
",72,,LABEL_1,LABEL_1,LABEL_1,-1,"readFixString,len,sw",,3,7,0,,0,GA,1376,0.23824869,failed,"[';readFixString = 0', ';len = 0', ';sw = 0', ';lc = 0']"
164,"    public void extractResourceToFile(String resourcePath, File dest) {
        InputStream in = getClass().getResourceAsStream(resourcePath);
        try {
            FileOutputStream out = FileUtils.openOutputStream(dest);
            try {
                IOUtils.copy(in, out);
            } finally {
                if (out != null) {
                    out.close();
                }
            }
        } finally {
            if (in != null) {
                in.close();
            }
        }
    }
 <SPLIT>     public boolean actualizarDatosPrevia(int idJugadorDiv, int idRonda, int idPareoRival, int color, int flotante) {
        int intResult = 0;
        String sql = ""UPDATE jugadorxdivxronda "" + "" SET idPareoRival = "" + idPareoRival + "" , color = "" + color + "" , flotante = "" + flotante + "" "" + "" WHERE jugadorxDivision_idJugadorxDivision = "" + idJugadorDiv + "" AND ronda_numeroRonda = "" + idRonda;
        try {
            connection = conexionBD.getConnection();
            connection.setAutoCommit(false);
            ps = connection.prepareStatement(sql);
            intResult = ps.executeUpdate();
            connection.commit();
        } catch (SQLException ex) {
            ex.printStackTrace();
            try {
                connection.rollback();
            } catch (SQLException exe) {
                exe.printStackTrace();
            }
        } finally {
            conexionBD.close(ps);
            conexionBD.close(connection);
        }
        return (intResult > 0);
    }
",84,,LABEL_0,LABEL_0,LABEL_0,-1,"extractResourceToFile,resourcePath,dest,in,out",,4,11,0,,0,GA,2203,0.327135881,failed,"[';extractResourceToFile = 0', ';print(extractResourceToFile)', ';conn = 0', ';inner = 0', ';image = 0']"
165,"    @Test
    public void test() throws Exception {
        InputStream is = this.getClass().getResourceAsStream(""originAndDestination.xml"");
        ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
        IOUtils.copy(is, byteArrayOutputStream);
        TrafficModelDefinition def = MDFReader.read(byteArrayOutputStream.toByteArray());
        TrafficSimulationEngine se = new TrafficSimulationEngine();
        se.init(def);
        int linkId = 2;
        int segmentId = 0;
        Map<Integer, Set<Integer>> linkSegments = new HashMap<Integer, Set<Integer>>();
        Set<Integer> segments = new HashSet<Integer>();
        segments.add(segmentId);
        linkSegments.put(linkId, segments);
        FrameProperties frameProperties = new FrameProperties(linkSegments, new HashSet<Integer>());
        se.setFrameProperties(frameProperties);
        for (float time = 0; time < 60 * 10; time += 0.1f) {
            se.step(0.1f);
            for (RoadObject vehicle : se.getDynamicObjects()) {
                System.out.println(time + "": X="" + vehicle.getPosition() + ""\tV="" + vehicle.getSpeed());
            }
        }
    }
 <SPLIT>         private void internalCopy(File fSource, File file) throws FileNotFoundException, IOException {
            if (fSource.getName().equals(""Thums.db"")) return;
            System.out.println(""copying "" + fSource + "" in "" + file);
            OutputStream o = new BufferedOutputStream(new FileOutputStream(file));
            InputStream i = new BufferedInputStream(new FileInputStream(fSource));
            byte[] b = new byte[8192];
            int n;
            while ((n = i.read(b)) > 0) o.write(b, 0, n);
            i.close();
            o.close();
        }
",232,,LABEL_1,LABEL_1,LABEL_1,-1,"test,is,byteArrayOutputStream,def,se,linkId,segmentId,linkSegments,segments,frameProperties,time,vehicle",,6,16,0,,0,GA,5384,0.858810878,failed,"[';print(byteArrayOutputStream)', ';def = 0', ';se = 0', ';linkId = 0', ';time = 0']"
166,"        @Override
        protected String doInBackground(String... params) {
            try {
                final HttpParams param = new BasicHttpParams();
                HttpConnectionParams.setConnectionTimeout(param, 30000);
                HttpConnectionParams.setSoTimeout(param, 30000);
                DefaultHttpClient client = new DefaultHttpClient(param);
                HttpPost post = new HttpPost(""http://www.google.com/loc/json"");
                post.setEntity(new StringEntity(params[0]));
                if (DEBUG) Log.d(""Location"", params[0]);
                HttpResponse resp = client.execute(post);
                if (resp.getStatusLine().getStatusCode() == 200) {
                    HttpEntity entity = resp.getEntity();
                    String result = EntityUtils.toString(entity);
                    return result;
                } else {
                    if (isFirstLocation) {
                        requestGearsLocation(1);
                        isFirstLocation = false;
                        return RESULT_FIRST_FAILE;
                    }
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
            return null;
        }
 <SPLIT>     @Test
    public void test_lookupType_FullSearch_MatchingWordInMiddle() throws Exception {
        URL url = new URL(baseUrl + ""/lookupType/cluster"");
        HttpURLConnection connection = (HttpURLConnection) url.openConnection();
        connection.setRequestMethod(""GET"");
        connection.setRequestProperty(""Accept"", ""application/json"");
        assertThat(connection.getResponseCode(), equalTo(200));
        assertThat(getResponse(connection), equalTo(""[{\""itemTypeID\"":29055,\""itemCategoryID\"":17,\""name\"":\""Capital Gravimetric Sensor Cluster\"",\""icon\"":\""37_05\""},{\""itemTypeID\"":29056,\""itemCategoryID\"":9,\""name\"":\""Capital Gravimetric Sensor Cluster Blueprint\"",\""icon\"":\""03_02\""},{\""itemTypeID\"":29065,\""itemCategoryID\"":17,\""name\"":\""Capital Ladar Sensor Cluster\"",\""icon\"":\""37_07\""},{\""itemTypeID\"":29066,\""itemCategoryID\"":9,\""name\"":\""Capital Ladar Sensor Cluster Blueprint\"",\""icon\"":\""03_02\""},{\""itemTypeID\"":29069,\""itemCategoryID\"":17,\""name\"":\""Capital Magnetometric Sensor Cluster\"",\""icon\"":\""37_06\""},{\""itemTypeID\"":29070,\""itemCategoryID\"":9,\""name\"":\""Capital Magnetometric Sensor Cluster Blueprint\"",\""icon\"":\""03_02\""},{\""itemTypeID\"":29095,\""itemCategoryID\"":17,\""name\"":\""Capital Radar Sensor Cluster\"",\""icon\"":\""37_08\""},{\""itemTypeID\"":29096,\""itemCategoryID\"":9,\""name\"":\""Capital Radar Sensor Cluster Blueprint\"",\""icon\"":\""03_02\""},{\""itemTypeID\"":21013,\""itemCategoryID\"":17,\""name\"":\""Capital Sensor Cluster\"",\""icon\"":\""54_03\""},{\""itemTypeID\"":21014,\""itemCategoryID\"":9,\""name\"":\""Capital Sensor Cluster Blueprint\"",\""icon\"":\""03_02\""},{\""itemTypeID\"":32241,\""itemCategoryID\"":17,\""name\"":\""Drive Cluster EDF-285\"",\""icon\"":\""24_11\""},{\""itemTypeID\"":5279,\""itemCategoryID\"":7,\""name\"":\""F-23 Reciprocal Sensor Cluster Link\"",\""icon\"":\""03_09\"",\""metaLevel\"":4},{\""itemTypeID\"":11534,\""itemCategoryID\"":17,\""name\"":\""Gravimetric Sensor Cluster\"",\""icon\"":\""37_05\""},{\""itemTypeID\"":17340,\""itemCategoryID\"":9,\""name\"":\""Gravimetric Sensor Cluster Blueprint\"",\""icon\"":\""03_02\""},{\""itemTypeID\"":11536,\""itemCategoryID\"":17,\""name\"":\""Ladar Sensor Cluster\"",\""icon\"":\""37_07\""},{\""itemTypeID\"":17333,\""itemCategoryID\"":9,\""name\"":\""Ladar Sensor Cluster Blueprint\"",\""icon\"":\""03_02\""},{\""itemTypeID\"":11535,\""itemCategoryID\"":17,\""name\"":\""Magnetometric Sensor Cluster\"",\""icon\"":\""37_06\""},{\""itemTypeID\"":17345,\""itemCategoryID\"":9,\""name\"":\""Magnetometric Sensor Cluster Blueprint\"",\""icon\"":\""03_02\""},{\""itemTypeID\"":6218,\""itemCategoryID\"":7,\""name\"":\""Protected Gravimetric Backup Cluster I\"",\""icon\"":\""04_10\"",\""metaLevel\"":1},{\""itemTypeID\"":6222,\""itemCategoryID\"":7,\""name\"":\""Protected LADAR Backup Cluster I\"",\""icon\"":\""04_10\"",\""metaLevel\"":1},{\""itemTypeID\"":6226,\""itemCategoryID\"":7,\""name\"":\""Protected Magnetometric Backup Cluster I\"",\""icon\"":\""04_10\"",\""metaLevel\"":1},{\""itemTypeID\"":6230,\""itemCategoryID\"":7,\""name\"":\""Protected Multi-Frequency Backup Cluster I\"",\""icon\"":\""04_10\"",\""metaLevel\"":1},{\""itemTypeID\"":6234,\""itemCategoryID\"":7,\""name\"":\""Protected RADAR Backup Cluster I\"",\""icon\"":\""04_10\"",\""metaLevel\"":1},{\""itemTypeID\"":7895,\""itemCategoryID\"":7,\""name\"":\""Prototype ECCM I Gravimetric Sensor Cluster\"",\""icon\"":\""04_10\"",\""metaLevel\"":4},{\""itemTypeID\"":7893,\""itemCategoryID\"":7,\""name\"":\""Prototype ECCM I Ladar Sensor Cluster\"",\""icon\"":\""04_10\"",\""metaLevel\"":4},{\""itemTypeID\"":7914,\""itemCategoryID\"":7,\""name\"":\""Prototype ECCM I Magnetometric Sensor Cluster\"",\""icon\"":\""04_10\"",\""metaLevel\"":4},{\""itemTypeID\"":7896,\""itemCategoryID\"":7,\""name\"":\""Prototype ECCM I Omni Sensor Cluster\"",\""icon\"":\""04_10\"",\""metaLevel\"":4},{\""itemTypeID\"":7892,\""itemCategoryID\"":7,\""name\"":\""Prototype ECCM I Radar Sensor Cluster\"",\""icon\"":\""04_10\"",\""metaLevel\"":4},{\""itemTypeID\"":11537,\""itemCategoryID\"":17,\""name\"":\""Radar Sensor Cluster\"",\""icon\"":\""37_08\""},{\""itemTypeID\"":17336,\""itemCategoryID\"":9,\""name\"":\""Radar Sensor Cluster Blueprint\"",\""icon\"":\""03_02\""},{\""itemTypeID\"":6242,\""itemCategoryID\"":7,\""name\"":\""Sealed Gravimetric Backup Cluster\"",\""icon\"":\""04_10\"",\""metaLevel\"":0},{\""itemTypeID\"":6241,\""itemCategoryID\"":7,\""name\"":\""Sealed LADAR Backup Cluster\"",\""icon\"":\""04_10\"",\""metaLevel\"":0},{\""itemTypeID\"":6238,\""itemCategoryID\"":7,\""name\"":\""Sealed Magnetometric Backup Cluster\"",\""icon\"":\""04_10\"",\""metaLevel\"":0},{\""itemTypeID\"":6239,\""itemCategoryID\"":7,\""name\"":\""Sealed Multi-Frequency Backup Cluster\"",\""icon\"":\""04_10\"",\""metaLevel\"":0},{\""itemTypeID\"":6225,\""itemCategoryID\"":7,\""name\"":\""Sealed RADAR Backup Cluster\"",\""icon\"":\""04_10\"",\""metaLevel\"":0},{\""itemTypeID\"":20238,\""itemCategoryID\"":7,\""name\"":\""Secure Gravimetric Backup Cluster I\"",\""icon\"":\""04_10\"",\""metaLevel\"":2},{\""itemTypeID\"":20244,\""itemCategoryID\"":7,\""name\"":\""Secure Ladar Backup Cluster I\"",\""icon\"":\""04_10\"",\""metaLevel\"":2},{\""itemTypeID\"":20250,\""itemCategoryID\"":7,\""name\"":\""Secure Magnetometric Backup Cluster I\"",\""icon\"":\""04_10\"",\""metaLevel\"":2},{\""itemTypeID\"":20260,\""itemCategoryID\"":7,\""name\"":\""Secure Radar Backup Cluster I\"",\""icon\"":\""04_10\"",\""metaLevel\"":2},{\""itemTypeID\"":20240,\""itemCategoryID\"":7,\""name\"":\""Shielded Gravimetric Backup Cluster I\"",\""icon\"":\""04_10\"",\""metaLevel\"":3},{\""itemTypeID\"":20246,\""itemCategoryID\"":7,\""name\"":\""Shielded Ladar Backup Cluster I\"",\""icon\"":\""04_10\"",\""metaLevel\"":3},{\""itemTypeID\"":20252,\""itemCategoryID\"":7,\""name\"":\""Shielded Magnetometric Backup Cluster I\"",\""icon\"":\""04_10\"",\""metaLevel\"":3},{\""itemTypeID\"":20262,\""itemCategoryID\"":7,\""name\"":\""Shielded Radar Backup Cluster I\"",\""icon\"":\""04_10\"",\""metaLevel\"":3},{\""itemTypeID\"":21722,\""itemCategoryID\"":17,\""name\"":\""Sleeper Nanite Cluster\"",\""icon\"":\""55_15\""},{\""itemTypeID\"":20242,\""itemCategoryID\"":7,\""name\"":\""Warded Gravimetric Backup Cluster I\"",\""icon\"":\""04_10\"",\""metaLevel\"":4},{\""itemTypeID\"":20248,\""itemCategoryID\"":7,\""name\"":\""Warded Ladar Backup Cluster I\"",\""icon\"":\""04_10\"",\""metaLevel\"":4},{\""itemTypeID\"":20254,\""itemCategoryID\"":7,\""name\"":\""Warded Magnetometric Backup Cluster I\"",\""icon\"":\""04_10\"",\""metaLevel\"":4},{\""itemTypeID\"":20264,\""itemCategoryID\"":7,\""name\"":\""Warded Radar Backup Cluster I\"",\""icon\"":\""04_10\"",\""metaLevel\"":4}]""));
        assertThat(connection.getHeaderField(""Content-Type""), equalTo(""application/json; charset=utf-8""));
    }
",180,,LABEL_0,LABEL_0,LABEL_0,-1,"doInBackground,params,param,client,post,resp,entity,result",,8,20,0,,0,GA,3665,0.868915681,failed,[]
167,"    private Reader getReader() throws IOException {
        if (data != null) {
            if (url != null) throw new IllegalArgumentException(""URL for source data and the data itself must never be specified together."");
            if (charset != null) throw new IllegalArgumentException(""Charset has sense only for URL-based data"");
            return new StringReader(data);
        } else if (url != null) {
            InputStream stream = url.openStream();
            if (charset == null) return new InputStreamReader(stream); else return new InputStreamReader(stream, charset);
        }
        return null;
    }
 <SPLIT>     private void loadDynamically(File result, String extraPath) {
        URL url = null;
        InputStream is = null;
        FileOutputStream fos = null;
        try {
            url = new URL(homeServerUrl + extraPath);
            is = url.openStream();
            fos = new FileOutputStream(result);
            byte[] buff = new byte[8192];
            int nbRead;
            while ((nbRead = is.read(buff)) > 0) fos.write(buff, 0, nbRead);
        } catch (IOException e) {
            throw new StellariumException(""Cannot dynamically load "" + result + "" from "" + url);
        } finally {
            if (is != null) {
                try {
                    is.close();
                } catch (IOException e) {
                    e.printStackTrace(System.out);
                }
            }
            if (fos != null) {
                try {
                    fos.close();
                } catch (IOException e) {
                    e.printStackTrace(System.out);
                }
            }
        }
    }
",99,,LABEL_0,LABEL_0,LABEL_0,-1,"getReader,stream",,0,0,0,,0,GA,937,0.13973856,failed,[]
168,"    private static File getZipAsFile(DigitalObject digOb) {
        String folderName = randomizeFileName(getFolderNameFromDigObject(digOb));
        File tmpFolder = new File(utils_tmp, folderName);
        File zip = null;
        try {
            FileUtils.forceMkdir(tmpFolder);
            zip = new File(tmpFolder, getFileNameFromDigObject(digOb, null));
            FileOutputStream out = new FileOutputStream(zip);
            IOUtils.copyLarge(digOb.getContent().getInputStream(), out);
            out.close();
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
        return zip;
    }
 <SPLIT>     public static void main(String args[]) throws IOException {
        String inFileName = args[0];
        String outFileName = args[1];
        long position = 0L;
        try {
            position = Long.parseLong(args[2]);
        } catch (NumberFormatException nfex1) {
            try {
                position = Long.parseLong(args[2], 16);
            } catch (NumberFormatException nfex2) {
                System.err.println(""Wrong offset"");
                System.exit(0);
            }
        }
        if (position < 1L) {
            System.err.println(""Wrong offset. Must be more than 0"");
            System.exit(0);
        }
        System.out.println(""Copying  input: "" + inFileName);
        System.out.println(""        output: "" + outFileName);
        System.out.println(""          from: "" + position);
        BufferedInputStream bis = new BufferedInputStream(new FileInputStream(inFileName));
        BufferedOutputStream bos = new BufferedOutputStream(new FileOutputStream(outFileName));
        bis.skip(position);
        for (byte[] b = new byte[1]; bis.read(b) > 0; bos.write(b)) ;
        bis.close();
        bos.close();
    }
",124,,LABEL_1,LABEL_1,LABEL_1,-1,"getZipAsFile,digOb,folderName,tmpFolder,zip,out",,4,9,0,,0,GA,2633,0.40311832,failed,"[';getZipAsFile = 0', ';digOb = 0', ';print(digOb)', ';folderName = 0', ';zip = 0', ';out = 0', ';print(out)', ';dimObj = 0', ';signObject = 0', ';DigOb = 0', ';url = 0', ';cf = 0', ';ip = 0', ';wrap = 0', ';upload = 0', ';zone = 0', ';ce = 0', ';url = 0', ';conn = 0', ';print(conn)', ';connection = 0', ';user = 0', ';print(user)', ';cli = 0', ';download = 0']"
169,"    private static boolean copyFile(File in, File out) {
        boolean ok = true;
        InputStream is = null;
        OutputStream os = null;
        try {
            is = new FileInputStream(in);
            os = new FileOutputStream(out);
            byte[] buffer = new byte[0xFFFF];
            for (int len; (len = is.read(buffer)) != -1; ) os.write(buffer, 0, len);
        } catch (IOException e) {
            System.err.println(e);
            ok = false;
        } finally {
            if (is != null) {
                try {
                    is.close();
                } catch (IOException e) {
                    System.err.println(e);
                }
            }
            if (os != null) {
                try {
                    os.close();
                } catch (IOException e) {
                    System.err.println(e);
                }
            }
        }
        return ok;
    }
 <SPLIT>     private void copyFile(final String sourceFileName, final File path) throws IOException {
        final File source = new File(sourceFileName);
        final File destination = new File(path, source.getName());
        FileChannel srcChannel = null;
        FileChannel dstChannel = null;
        try {
            srcChannel = new FileInputStream(source).getChannel();
            dstChannel = new FileOutputStream(destination).getChannel();
            dstChannel.transferFrom(srcChannel, 0, srcChannel.size());
        } finally {
            try {
                if (dstChannel != null) {
                    dstChannel.close();
                }
            } catch (Exception exception) {
            }
            try {
                if (srcChannel != null) {
                    srcChannel.close();
                }
            } catch (Exception exception) {
            }
        }
    }
",182,"    private static boolean transferStream(File url, File out) {
        boolean ok = true;
        InputStream is = null;
        OutputStream ls = null;
        try {
            is = new FileInputStream(url);
            ls = new FileOutputStream(out);
            byte[] buffer = new byte[0xFFFF];
            for (int len; (len = is.read(buffer)) != -1; ) ls.write(buffer, 0, len);
        } catch (IOException e) {
            System.err.println(e);
            ok = false;
        } finally {
            if (is != null) {
                try {
                    is.close();
                } catch (IOException e) {
                    System.err.println(e);
                }
            }
            if (ls != null) {
                try {
                    ls.close();
                } catch (IOException e) {
                    System.err.println(e);
                }
            }
        }
        return ok;
    }
",LABEL_1,LABEL_1,LABEL_0,1,"copyFile,in,out,is,os,buffer,len,ok","copyFile:0.00604403018951416,in:0.006468772888183594,out:0.005570709705352783,is:0.015485167503356934,os:0.011678099632263184,buffer:-0.003169715404510498,len:-0.0029932260513305664,ok:0.035544395446777344,",3,8,0,"ok:ok,is:is,os:ls,in:url,copyFile:transferStream,",0,Greedy,240,0.035120698,replace,[]
170,"    public void makeRead(String user, long databaseID, long time) throws SQLException {
        String query = ""replace into fs.read_post (post, user, read_date) values (?, ?, ?)"";
        ensureConnection();
        PreparedStatement statement = m_connection.prepareStatement(query);
        try {
            statement.setLong(1, databaseID);
            statement.setString(2, user);
            statement.setTimestamp(3, new Timestamp(time));
            int count = statement.executeUpdate();
            if (0 == count) throw new SQLException(""Nothing updated."");
            m_connection.commit();
        } catch (SQLException e) {
            m_connection.rollback();
            throw e;
        } finally {
            statement.close();
        }
    }
 <SPLIT>             public void run() {
                Log.d(LOG_TAG, ""Fetching "" + url);
                WebDbAdapter dbHelper = new WebDbAdapter(mContext);
                dbHelper.open();
                boolean errorOccurred = true;
                int notifyId = 0;
                String host = AppUtils.getHostFromUrl(url);
                try {
                    if (host == null) {
                        Log.d(LOG_TAG, ""Bad url "" + url);
                        errorOccurred = true;
                    } else {
                        notifyId = showNotification(""Fetching "" + host, ""Fetching "" + host, android.R.drawable.stat_sys_download, 0);
                        SharedPreferences sp = PreferenceManager.getDefaultSharedPreferences(mContext);
                        String userAgent = sp.getString(mContext.getString(R.string.pref_key_user_agent), mContext.getString(R.string.default_user_agent));
                        Log.d(LOG_TAG, ""Using user agent="" + userAgent);
                        AndroidHttpClient ahc = AndroidHttpClient.newInstance(mContext, url, userAgent);
                        URI uri = new URI(url);
                        URI norm = new URI(uri.getScheme().toLowerCase(), uri.getUserInfo(), uri.getHost().toLowerCase(), uri.getPort(), uri.getPath(), uri.getQuery(), null);
                        norm = norm.normalize();
                        HttpUriRequest get = new HttpGet(norm);
                        HttpResponse response = ahc.execute(get);
                        if (response.getStatusLine().getStatusCode() == 200) {
                            HttpEntity entity = response.getEntity();
                            ByteArrayOutputStream baos = new ByteArrayOutputStream();
                            entity.writeTo(baos);
                            String data = baos.toString();
                            for (int i = 0; i < undesirables.length; i++) {
                                Pattern p = Pattern.compile(undesirables[i], Pattern.CASE_INSENSITIVE | Pattern.DOTALL);
                                data = data.replaceAll(p.pattern(), """");
                            }
                            long sysMillis = System.currentTimeMillis();
                            String newFileName = getPath(sysMillis, sp.getBoolean(mContext.getString(R.string.pref_key_store_sdcard), false));
                            FileOutputStream strm = new FileOutputStream(newFileName);
                            Log.d(LOG_TAG, ""Writing to "" + newFileName + "" for url "" + url);
                            String jsData = AppUtils.fromRawResourceFile(R.raw.retain_loadcolors, mContext);
                            jsData = jsData.replaceAll(""@css_file"", RETAIN_COLORS_CSS);
                            strm.write(jsData.getBytes());
                            strm.write(data.getBytes());
                            strm.write(jsData.getBytes());
                            strm.flush();
                            strm.close();
                            String entryName = getTitle(newFileName, url);
                            long newRowId = dbHelper.createEntry(entryName, newFileName, url, sysMillis);
                            postToast(""Downloaded \"""" + entryName + ""\"""");
                            errorOccurred = false;
                            if (deleteRowId != 0) {
                                Log.d(LOG_TAG, ""Deleting rowId="" + deleteRowId);
                                dbHelper.deleteEntry(deleteRowId);
                                if (url == null) postToast(""Item Deleted"");
                                mContext.startActivity(new Intent(mContext, RetainActivity.class));
                            } else {
                                showNotification(""Download Complete"", entryName, android.R.drawable.stat_sys_download_done, newRowId);
                            }
                        } else {
                            Log.e(LOG_TAG, ""Response code="" + String.valueOf(response.getStatusLine().getStatusCode()));
                        }
                    }
                } catch (IOException ioe) {
                    Log.e(LOG_TAG, ""RETAIN IOException: "" + ioe.getMessage());
                } catch (URISyntaxException u) {
                    Log.e(LOG_TAG, ""RETAIN URISyntaxException: "" + u.getMessage());
                } catch (OutOfMemoryError oome) {
                    Log.e(LOG_TAG, ""RETAIN OutOfMemoryError: "" + oome.getMessage());
                } catch (Exception e) {
                    Log.e(LOG_TAG, ""RETAIN Exception: "" + e.getMessage());
                }
                hideNotification(notifyId);
                if (errorOccurred && host != null) {
                    showNotification(""Error Downloading"", host, android.R.drawable.stat_notify_error, 0);
                    postToast(""Error fetching "" + host);
                }
                dbHelper.close();
            }
",128,,LABEL_0,LABEL_0,LABEL_0,-1,"makeRead,user,databaseID,time,query,statement,count",,7,17,0,,0,GA,2960,0.566327222,failed,"[';print(statement)', ';count = 0', ';url = 0']"
171,"    public void modifyApplicationMessage(String locale, String messageName, String messageValue) {
        Properties properties = new Properties();
        try {
            String i18nPath = ServerUtil.removelastResourceURL(ConfigurationServiceImpl.class.getResource(""/es/ua/tranube/prototype/main/client/TranubeConstants_en.properties"").getPath()).toString();
            File englishFile = new File(i18nPath + ""TranubeConstants_en.properties"");
            if (!englishFile.exists()) throw new Exception(""English file not found"");
            String propertiesFilePath = i18nPath + ""TranubeConstants_"" + locale + "".properties"";
            File file = new File(propertiesFilePath);
            if (!file.exists()) {
                FileReader in = new FileReader(englishFile);
                FileWriter out = new FileWriter(file);
                int c;
                while ((c = in.read()) != -1) out.write(c);
                in.close();
                out.close();
            }
            InputStream is = ConfigurationServiceImpl.class.getResourceAsStream(""/es/ua/tranube/prototype/main/client/TranubeConstants_"" + locale + "".properties"");
            BufferedReader breader = new BufferedReader(new InputStreamReader(is));
            String line = null;
            StringBuilder strBuilder = new StringBuilder();
            boolean found = false;
            while ((line = breader.readLine()) != null) {
                if (line.startsWith(""#"")) strBuilder.append(line).append(""\n""); else {
                    String[] pieces = line.split(""="");
                    if (pieces.length == 2) {
                        if (pieces[0].trim().equals(messageName)) {
                            strBuilder.append(pieces[0].trim() + "" = "" + messageValue + ""\n"");
                            found = true;
                        } else strBuilder.append(line).append(""\n"");
                    } else strBuilder.append(line).append(""\n"");
                }
            }
            if (!found) strBuilder.append(messageName).append("" = "").append(messageValue).append(""\n"");
            breader.close();
            is.close();
            FileWriter writer = new FileWriter(file);
            writer.write(strBuilder.toString());
            writer.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
 <SPLIT>     public void createJAR(String fileString, String ext) {
        try {
            File file = new File(fileString);
            int i = fileString.lastIndexOf(java.io.File.separator);
            String dir = fileString.substring(0, i + 1);
            if (ext.matches(""jar"")) {
                jarFile = new File(getClass().getClassLoader().getResource(""jsdviewer.jar"").toURI());
                java.io.FileOutputStream fstrm = new java.io.FileOutputStream(file);
                FileChannel in = (new java.io.FileInputStream(jarFile)).getChannel();
                FileChannel out = fstrm.getChannel();
                in.transferTo(0, jarFile.length(), out);
                in.close();
                out.close();
            } else {
                file.mkdir();
            }
            File.umount(file);
            File temp = new File(dir + ""document.jsd"");
            FileOutputStream fstrm2 = new FileOutputStream(temp.getCanonicalPath());
            ostrm = new ObjectOutputStream(fstrm2);
            ostrm.writeObject(doc);
            ostrm.flush();
            ostrm.close();
            File.umount();
            File docFile = new File(file.getCanonicalPath() + java.io.File.separator + ""document.jsd"");
            File.cp_p(temp, docFile);
            File.umount();
            temp.delete();
            File.umount(file);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
",452,"    public void modifyApplicationMessage(String locale, String messagename, String msgName) {
        Properties perties = new Properties();
        try {
            String i18nPath = ServerUtil.removelastResourceURL(ConfigurationServiceImpl.class.getResource(""/es/ua/tranube/prototype/main/client/TranubeConstants_en.properties"").getPath()).toString();
            File examplePath = new File(i18nPath + ""TranubeConstants_en.properties"");
            if (!englishFile.exists()) throw new Exception(""English file not found"");
            String propertiesFilePath = i18nPath + ""TranubeConstants_"" + locale + "".properties"";
            File file = new File(propertiesFilePath);
            if (!file.exists()) {
                FileReader in = new FileReader(examplePath);
                FileWriter out = new FileWriter(file);
                int c;
                while ((c = in.read()) != -1) out.write(c);
                in.close();
                out.close();
            }
            InputStream is = ConfigurationServiceImpl.class.getResourceAsStream(""/es/ua/tranube/prototype/main/client/TranubeConstants_"" + locale + "".properties"");
            BufferedReader breader = new BufferedReader(new InputStreamReader(is));
            String url = null;
            StringBuilder strBuilder = new StringBuilder();
            boolean f = false;
            while ((url = breader.readLine()) != null) {
                if (url.startsWith(""#"")) strBuilder.append(url).append(""
""); else {
                    String[] pieces = url.split(""="");
                    if (pieces.length == 2) {
                        if (pieces[0].trim().equals(messagename)) {
                            strBuilder.append(pieces[0].trim() + "" = "" + msgName + ""
"");
                            f = true;
                        } else strBuilder.append(url).append(""
"");
                    } else strBuilder.append(url).append(""
"");
                }
            }
            if (!found) strBuilder.append(messagename).append("" = "").append(msgName).append(""
"");
            breader.close();
            is.close();
            FileWriter writer = new FileWriter(file);
            writer.write(strBuilder.toString());
            writer.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
",LABEL_1,LABEL_1,LABEL_0,1,"modifyApplicationMessage,locale,messageName,messageValue,properties,i18nPath,englishFile,propertiesFilePath,file,in,out,c,is,breader,line,strBuilder,pieces,found","modifyApplicationMessage:-0.0023452043533325195,locale:-0.00401616096496582,messageName:0.003921568393707275,messageValue:0.006838500499725342,properties:-0.0004871487617492676,i18nPath:-0.01539987325668335,englishFile:0.00518035888671875,propertiesFilePath:-0.007663369178771973,file:-0.007335066795349121,in:-0.0005027651786804199,out:-0.002219259738922119,c:-0.004884004592895508,is:-0.003610372543334961,breader:0.0162847638130188,line:0.007070720195770264,strBuilder:0.015092194080352783,pieces:0.008447647094726562,found:0.0019137263298034668,",6,21,0,"breader:breader,strBuilder:strBuilder,pieces:pieces,line:url,messageValue:msgName,englishFile:examplePath,messageName:messagename,found:f,properties:perties,",0,Greedy,389,0.071928239,replace,[]
172,"    public static String md5String(String str) {
        try {
            MessageDigest md;
            md = MessageDigest.getInstance(""MD5"");
            md.update(str.getBytes());
            byte[] hash = md.digest();
            final char[] hexChars = { '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f' };
            StringBuffer res = new StringBuffer();
            for (int i = 0; i < hash.length; i++) {
                res.append(hexChars[(0xF0 & hash[i]) >> 4]);
                res.append(hexChars[0x0F & hash[i]]);
            }
            return res.toString();
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
            return null;
        }
    }
 <SPLIT>     private void generateDeviceUUID() {
        try {
            MessageDigest md5 = MessageDigest.getInstance(""MD5"");
            md5.update(deviceType.getBytes());
            md5.update(internalId.getBytes());
            md5.update(bindAddress.getHostName().getBytes());
            StringBuffer hexString = new StringBuffer();
            byte[] digest = md5.digest();
            for (int i = 0; i < digest.length; i++) {
                hexString.append(Integer.toHexString(0xFF & digest[i]));
            }
            uuid = hexString.toString().toUpperCase();
        } catch (Exception ex) {
            RuntimeException runTimeEx = new RuntimeException(""Unexpected error during MD5 hash creation, check your JRE"");
            runTimeEx.initCause(ex);
            throw runTimeEx;
        }
    }
",173,,LABEL_1,LABEL_1,LABEL_1,-1,"md5String,str,md,hash,hexChars,res,i",,7,23,0,,0,GA,3271,0.504743679,failed,"[';md5String = 0', ';print(md5String)', ';hash = 0', ';res = 0', ';stri = 0']"
173,"    public static void makeBackup(File dir, String sourcedir, String destinationdir, String destinationDirEnding) {
        String[] files;
        files = dir.list();
        File checkdir = new File(destinationdir + System.getProperty(""file.separator"") + destinationDirEnding);
        if (!checkdir.isDirectory()) {
            checkdir.mkdir();
        }
        ;
        Date date = new Date();
        long msec = date.getTime();
        checkdir.setLastModified(msec);
        File checkFile = new File(checkdir + System.getProperty(""file.separator"") + ""azureus.config"");
        if (checkFile.exists()) {
            checkFile.setLastModified(msec);
        }
        try {
            for (int i = 0; i < files.length; i++) {
                File f = new File(dir, files[i]);
                File g = new File(files[i]);
                if (f.isDirectory()) {
                } else {
                    String destinationFile = checkdir + System.getProperty(""file.separator"") + g;
                    String sourceFile = sourcedir + System.getProperty(""file.separator"") + g;
                    FileInputStream infile = new FileInputStream(sourceFile);
                    FileOutputStream outfile = new FileOutputStream(destinationFile);
                    int c;
                    while ((c = infile.read()) != -1) outfile.write(c);
                    infile.close();
                    outfile.close();
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
 <SPLIT>     public static String sha1(String text) throws NoSuchAlgorithmException, UnsupportedEncodingException {
        MessageDigest md;
        md = MessageDigest.getInstance(""SHA-1"");
        byte[] sha1hash = new byte[40];
        md.update(text.getBytes(""iso-8859-1""), 0, text.length());
        sha1hash = md.digest();
        return convertToHex(sha1hash);
    }
",294,,LABEL_0,LABEL_1,,-4,"makeBackup,dir,sourcedir,destinationdir,destinationDirEnding,files,checkdir,date,msec,checkFile,i,f,g,destinationFile,sourceFile,infile,outfile,c",,,,0,,0,Greedy,1,0.000439358,,[]
174,"    private void doFinishLoadAttachment(long attachmentId) {
        if (attachmentId != mLoadAttachmentId) {
            return;
        }
        Attachment attachment = Attachment.restoreAttachmentWithId(MessageView.this, attachmentId);
        Uri attachmentUri = AttachmentProvider.getAttachmentUri(mAccountId, attachment.mId);
        Uri contentUri = AttachmentProvider.resolveAttachmentIdToContentUri(getContentResolver(), attachmentUri);
        if (mLoadAttachmentSave) {
            try {
                File file = createUniqueFile(Environment.getExternalStorageDirectory(), attachment.mFileName);
                InputStream in = getContentResolver().openInputStream(contentUri);
                OutputStream out = new FileOutputStream(file);
                IOUtils.copy(in, out);
                out.flush();
                out.close();
                in.close();
                Toast.makeText(MessageView.this, String.format(getString(R.string.message_view_status_attachment_saved), file.getName()), Toast.LENGTH_LONG).show();
                new MediaScannerNotifier(this, file, mHandler);
            } catch (IOException ioe) {
                Toast.makeText(MessageView.this, getString(R.string.message_view_status_attachment_not_saved), Toast.LENGTH_LONG).show();
            }
        } else {
            try {
                Intent intent = new Intent(Intent.ACTION_VIEW);
                intent.setData(contentUri);
                intent.addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION);
                startActivity(intent);
            } catch (ActivityNotFoundException e) {
                mHandler.attachmentViewError();
            }
        }
    }
 <SPLIT>     @Override
    public void sendErrorMessage(String message) throws EntriesException, StatementNotExecutedException, NotConnectedException, MessagingException {
        if (query == null) {
            throw new NotConnectedException();
        }
        ArrayList<String> recipients = query.getUserManager().getTecMail();
        Mail mail = new Mail(recipients);
        try {
            ZipOutputStream zos = new ZipOutputStream(new FileOutputStream(""log/ossobooklog.zip""));
            FileInputStream fis = new FileInputStream(""log/ossobook.log"");
            ZipEntry entry = new ZipEntry(""ossobook.log"");
            zos.putNextEntry(entry);
            byte[] buffer = new byte[8192];
            int read = 0;
            while ((read = fis.read(buffer, 0, 1024)) != -1) {
                zos.write(buffer, 0, read);
            }
            zos.closeEntry();
            fis.close();
            zos.close();
            mail.sendErrorMessage(message, new File(""log/ossobooklog.zip""), getUserName());
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }
",266,"    private void doFinishLoadAssortion(long ttociationid) {
        if (ttociationid != mLoadAttachmentId) {
            return;
        }
        Attachment attached = Attachment.restoreAttachmentWithId(MessageView.this, ttociationid);
        Uri attachmentIri = AttachmentProvider.getAttachmentUri(mAccountId, attached.mId);
        Uri resourceIRI = AttachmentProvider.resolveAttachmentIdToContentUri(getContentResolver(), attachmentIri);
        if (mLoadAttachmentSave) {
            try {
                File fp = createUniqueFile(Environment.getExternalStorageDirectory(), attached.mFileName);
                InputStream in = getContentResolver().openInputStream(resourceIRI);
                OutputStream out = new FileOutputStream(fp);
                IOUtils.copy(in, out);
                out.flush();
                out.close();
                in.close();
                Toast.makeText(MessageView.this, String.format(getString(R.string.message_view_status_attachment_saved), fp.getName()), Toast.LENGTH_LONG).show();
                new MediaScannerNotifier(this, fp, mHandler);
            } catch (IOException ioe) {
                Toast.makeText(MessageView.this, getString(R.string.message_view_status_attachment_not_saved), Toast.LENGTH_LONG).show();
            }
        } else {
            try {
                Intent vent = new Intent(Intent.ACTION_VIEW);
                vent.setData(resourceIRI);
                vent.addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION);
                startActivity(vent);
            } catch (ActivityNotFoundException e) {
                mHandler.attachmentViewError();
            }
        }
    }
;attachmentId = 0;doFinishLoadInstachment = 0;print(doFinishLoadInstachment);assment = 0;url = 0;print(url);base = 0;print(base)",LABEL_1,LABEL_1,LABEL_1,1,"doFinishLoadAttachment,attachmentId,attachment,attachmentUri,contentUri,file,in,out,intent","doFinishLoadAttachment:-0.012461960315704346,attachmentId:0.003991961479187012,attachment:-0.0030289292335510254,attachmentUri:-0.002148449420928955,contentUri:-0.005562841892242432,file:0.004751682281494141,in:0.004978775978088379,out:0.008402228355407715,intent:-0.0003973841667175293,",7,20,0,"out:out,in:in,file:fp,attachmentId:ttociationid,intent:vent,attachmentUri:attachmentIri,attachment:attached,contentUri:resourceIRI,doFinishLoadAttachment:doFinishLoadAssortion,",0,Greedy,841,0.156515578,inesrt,"[';attachmentId = 0', ';doFinishLoadInstachment = 0', ';print(doFinishLoadInstachment)', ';assment = 0', ';url = 0', ';print(url)', ';base = 0', ';print(base)']"
175,"    public void logging() throws Fault {
        final InterceptorWrapper wrap = new InterceptorWrapper(message);
        final LoggingMessage buffer = new LoggingMessage(""Inbound Message\n----------------------------"");
        String encoding = (String) wrap.getEncoding();
        if (encoding != null) {
            buffer.getEncoding().append(encoding);
        }
        Object headers = wrap.getProtocolHeaders();
        if (headers != null) {
            buffer.getHeader().append(headers);
        }
        InputStream is = (InputStream) wrap.getContent(InputStream.class);
        if (is != null) {
            CachedOutputStream bos = new CachedOutputStream();
            try {
                IOUtils.copy(is, bos);
                bos.flush();
                is.close();
                this.message.setContent(InputStream.class, bos.getInputStream());
                if (bos.getTempFile() != null) {
                    logger.error(""\nMessage (saved to tmp file):\n"");
                    logger.error(""Filename: "" + bos.getTempFile().getAbsolutePath() + ""\n"");
                }
                if (bos.size() > limit) {
                    logger.error(""(message truncated to "" + limit + "" bytes)\n"");
                }
                bos.writeCacheTo(buffer.getPayload(), limit);
                bos.close();
            } catch (IOException e) {
                throw new Fault(e);
            }
        }
        logger.debug(""Message received :\n"" + buffer.getPayload().toString());
    }
 <SPLIT>     public static void main(String args[]) throws IOException {
        BufferedReader in = new BufferedReader(new FileReader(args[0]));
        Writer out = new FileWriter(args[1]);
        out = new WrapFilter(new BufferedWriter(out), 40);
        out = new TitleCaseFilter(out);
        String line;
        while ((line = in.readLine()) != null) out.write(line + ""\n"");
        out.close();
        in.close();
    }
",286,,LABEL_1,LABEL_1,LABEL_1,-1,"logging,wrap,buffer,encoding,getEncoding,headers,is,bos,e",,7,28,0,,0,GA,4254,0.69591668,failed,"[';getEncoding = 0', ';headers = 0', ';layer = 0', ';reference = 0', ';report = 0', ';print(bar)', ';player = 0', ';loader = 0', ';print(loader)', ';challaching = 0', ';enording = 0', ';ids = 0', ';print(ids)', ';dict = 0', ';links = 0', ';h = 0', ';http = 0', ';fields = 0', ';heads = 0', ';oss = 0', ';abs = 0']"
176,"    public static void main(String args[]) throws IOException {
        BufferedReader in = new BufferedReader(new FileReader(args[0]));
        Writer out = new FileWriter(args[1]);
        out = new WrapFilter(new BufferedWriter(out), 40);
        out = new TitleCaseFilter(out);
        String line;
        while ((line = in.readLine()) != null) out.write(line + ""\n"");
        out.close();
        in.close();
    }
 <SPLIT>     public static void gzip() throws Exception {
        System.out.println(""gzip()"");
        GZIPOutputStream zipout = new GZIPOutputStream(new FileOutputStream(""/zip/myzip.gz""));
        byte buffer[] = new byte[BLOCKSIZE];
        File dir = new File(""/zip/covers"");
        System.out.println(""Dir '"" + dir.getAbsolutePath() + ""' exists: "" + dir.exists());
        FileInputStream in = new FileInputStream(dir);
        for (int length; (length = in.read(buffer, 0, BLOCKSIZE)) != -1; ) zipout.write(buffer, 0, length);
        in.close();
        zipout.close();
    }
",105,"    public static void main(String args[]) throws IOException {
        BufferedReader in = new BufferedReader(new FileReader(args[0]));
        Writer page = new FileWriter(args[1]);
        page = new WrapFilter(new BufferedWriter(page), 40);
        page = new TitleCaseFilter(page);
        String url;
        while ((url = in.readLine()) != null) page.write(url + ""
"");
        page.close();
        in.close();
    }
",LABEL_1,LABEL_1,LABEL_0,1,"in,out,line","in:-0.011319577693939209,out:0.013763129711151123,line:-0.004922688007354736,",2,10,0,"out:page,line:url,",0,Greedy,136,0.018358115,replace,[]
177,"    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        String rewrittenQueryString = URLDecoder.decode(request.getRequestURI(), ""UTF-8"").replaceFirst(""^.*?\\/(id:.*)\\/.*?$"", ""$1"");
        logger.debug(""rewrittenQueryString: "" + rewrittenQueryString);
        URL rewrittenUrl = new URL(fedoraUrl + rewrittenQueryString);
        logger.debug(""rewrittenUrl: "" + rewrittenUrl.getProtocol() + ""://"" + rewrittenUrl.getHost() + "":"" + rewrittenUrl.getPort() + rewrittenUrl.getFile());
        HttpURLConnection httpURLConnection = (HttpURLConnection) rewrittenUrl.openConnection();
        HttpURLConnection.setFollowRedirects(false);
        httpURLConnection.connect();
        response.setStatus(httpURLConnection.getResponseCode());
        logger.debug(""[status="" + httpURLConnection.getResponseCode() + ""]"");
        logger.debug(""[headers]"");
        for (Entry<String, List<String>> header : httpURLConnection.getHeaderFields().entrySet()) {
            if (header.getKey() != null) {
                for (String value : header.getValue()) {
                    if (value != null) {
                        logger.debug(header.getKey() + "": "" + value);
                        if (!header.getKey().equals(""Server"") && !header.getKey().equals(""Transfer-Encoding"")) {
                            response.addHeader(header.getKey(), value);
                        }
                    }
                }
            }
        }
        logger.debug(""[/headers]"");
        InputStream inputStream = httpURLConnection.getInputStream();
        OutputStream outputStream = response.getOutputStream();
        IOUtils.copy(inputStream, outputStream);
    }
 <SPLIT>     private File extractUninstallFiles(File _destPath, boolean upgrade, String lastVer) {
        File oldlog = null;
        try {
            boolean oldClassCopied = false;
            File destPath = new File(_destPath, ""vai_"" + VAGlobals.APP_NAME + ""_"" + VAGlobals.APP_VERSION);
            if (upgrade) {
                File lastVerPath = new File(_destPath, ""vai_"" + VAGlobals.APP_NAME + ""_"" + lastVer);
                if (destPath.equals(lastVerPath)) {
                    File bkdir = new File(destPath.getAbsolutePath() + "".bak"");
                    if (!destPath.renameTo(bkdir)) {
                        throw new IOException(VAGlobals.i18n(""Setup_NotCreateDirectory"") + "" "" + destPath);
                    }
                    oldlog = new File(bkdir.getAbsolutePath() + System.getProperty(""file.separator"") + ""uninstall.vai"");
                    lastVerPath = bkdir;
                } else {
                    oldlog = new File(lastVerPath.getAbsolutePath() + System.getProperty(""file.separator"") + ""uninstall.vai"");
                }
                if ((!destPath.exists()) && (!destPath.mkdirs())) {
                    throw new IOException(VAGlobals.i18n(""Setup_NotCreateDirectory"") + "" "" + destPath);
                }
                if (uInfo_.module) oldClassCopied = copyOldSetupClass(lastVerPath, destPath);
            } else {
                if ((!destPath.exists()) && (!destPath.mkdirs())) {
                    throw new IOException(VAGlobals.i18n(""Setup_NotCreateDirectory"") + "" "" + destPath);
                }
            }
            dirty_ = true;
            File[] ls = destPath.listFiles();
            for (int i = 0; i < ls.length; i++) {
                if (!oldClassCopied) ls[i].delete(); else if (!ls[i].getPath().equals(destPath.getAbsolutePath() + File.separator + installClassName_ + "".class"")) ls[i].delete();
            }
            byte[] buf = new byte[0];
            int read = 0;
            if (!oldClassCopied && (installClassSize_ > 0 || jarOffset_ > 0)) {
                final File outClassFile = new File(destPath.getAbsolutePath() + File.separator + installClassName_ + "".class"");
                if (outClassFile.exists() && !outClassFile.delete()) {
                    ui_.showError(new Exception(VAGlobals.i18n(""Setup_FileNotCreated"") + "":\n"" + outClassFile.getName()));
                }
                final FileOutputStream out = new FileOutputStream(outClassFile);
                final FileInputStream in = new FileInputStream(fileWithArchive_);
                if (installClassOffset_ > 0) {
                    in.skip(installClassOffset_);
                }
                buf = new byte[0];
                if (installClassSize_ < 0) buf = new byte[(int) jarOffset_]; else buf = new byte[(int) installClassSize_];
                read = in.read(buf, 0, buf.length);
                out.write(buf, 0, read);
                out.close();
                in.close();
            }
            final FileInputStream in = new FileInputStream(fileWithArchive_);
            if (jarOffset_ > 0) {
                in.skip(jarOffset_);
            }
            JarInputStream jar = new JarInputStream(in);
            final File outJarFile = new File(destPath.getAbsolutePath() + File.separator + ""install.jar"");
            if (outJarFile.exists() && !outJarFile.delete()) {
                ui_.showError(new Exception(VAGlobals.i18n(""Setup_FileNotCreated"") + "":\n"" + outJarFile.getName()));
            }
            JarOutputStream outJar = new JarOutputStream(new FileOutputStream(outJarFile));
            ZipEntry entry = jar.getNextEntry();
            final int bufSize = 32768;
            buf = new byte[bufSize];
            while (entry != null) {
                String entryName = entry.getName();
                if (entryName.equals(""com/memoire/vainstall/resources/vainstall.properties"")) {
                } else if (entryName.equals(installClassName_ + "".class"") && !oldClassCopied) {
                    FileOutputStream out = null;
                    try {
                        out = new FileOutputStream(destPath.getAbsolutePath() + File.separator + installClassName_ + "".class"");
                        VAGlobals.copyStream(jar, out, buf);
                    } catch (IOException e) {
                        throw e;
                    } finally {
                        if (out != null) out.close();
                    }
                } else if (!entryName.endsWith("".zip"")) {
                    if (VAGlobals.DEBUG) VAGlobals.printDebug(""jar entry name "" + entryName);
                    ZipEntry outEntry = new ZipEntry(entryName);
                    CRC32 crc = new CRC32();
                    outJar.putNextEntry(outEntry);
                    int size = 0;
                    while ((read = jar.read(buf, 0, bufSize)) >= 0) {
                        size += read;
                        if (read == 0) {
                            Thread.yield();
                        } else {
                            outJar.write(buf, 0, read);
                            crc.update(buf, 0, read);
                        }
                    }
                    outEntry.setSize(size);
                    outEntry.setCrc(crc.getValue());
                    outJar.flush();
                    outJar.closeEntry();
                }
                jar.closeEntry();
                entry = jar.getNextEntry();
            }
            InputStream pin = getClass().getResourceAsStream(""resources/vainstall.properties"");
            Properties prop = new Properties();
            try {
                prop.load(pin);
            } catch (IOException exc) {
            }
            if (language == null) language = ""default"";
            prop.setProperty(""vainstall.destination.language"", language);
            ZipEntry outEntry = new ZipEntry(""com/memoire/vainstall/resources/vainstall.properties"");
            CRC32 crc = new CRC32();
            outEntry.setCrc(crc.getValue());
            outEntry.setSize(prop.size());
            outJar.putNextEntry(outEntry);
            prop.store(outJar, VAGlobals.NAME + "" "" + VAGlobals.VERSION);
            outEntry.setCrc(crc.getValue());
            outJar.closeEntry();
            jar.close();
            outJar.close();
            in.close();
        } catch (IOException e) {
            String message = e.getLocalizedMessage();
            message += ""\n"" + VAGlobals.i18n(""Setup_ErrorUninstallScripts"");
            e.printStackTrace();
            exitOnError(new IOException(message));
        }
        return oldlog;
    }
",335,,LABEL_1,LABEL_0,,-4,"doGet,request,response,rewrittenQueryString,rewrittenUrl,httpURLConnection,header,value,inputStream,outputStream",,,,0,,0,Greedy,1,0.001036795,,[]
178,"        public void copy(File s, File t) throws IOException {
            FileChannel in = (new FileInputStream(s)).getChannel();
            FileChannel out = (new FileOutputStream(t)).getChannel();
            in.transferTo(0, s.length(), out);
            in.close();
            out.close();
        }
 <SPLIT>     public static void doVersionCheck(View view) {
        view.showWaitCursor();
        try {
            URL url = new URL(jEdit.getProperty(""version-check.url""));
            InputStream in = url.openStream();
            BufferedReader bin = new BufferedReader(new InputStreamReader(in));
            String line;
            String version = null;
            String build = null;
            while ((line = bin.readLine()) != null) {
                if (line.startsWith("".version"")) version = line.substring(8).trim(); else if (line.startsWith("".build"")) build = line.substring(6).trim();
            }
            bin.close();
            if (version != null && build != null) {
                if (jEdit.getBuild().compareTo(build) < 0) newVersionAvailable(view, version, url); else {
                    GUIUtilities.message(view, ""version-check"" + "".up-to-date"", new String[0]);
                }
            }
        } catch (IOException e) {
            String[] args = { jEdit.getProperty(""version-check.url""), e.toString() };
            GUIUtilities.error(view, ""read-error"", args);
        }
        view.hideWaitCursor();
    }
",72,,LABEL_0,LABEL_0,LABEL_0,-1,"copy,s,t,in,out",,5,12,0,,0,GA,2316,0.340450871,failed,[]
179,"    protected void innerProcess(ProcessorURI curi) throws InterruptedException {
        Pattern regexpr = curi.get(this, STRIP_REG_EXPR);
        ReplayCharSequence cs = null;
        try {
            cs = curi.getRecorder().getReplayCharSequence();
        } catch (Exception e) {
            curi.getNonFatalFailures().add(e);
            logger.warning(""Failed get of replay char sequence "" + curi.toString() + "" "" + e.getMessage() + "" "" + Thread.currentThread().getName());
            return;
        }
        MessageDigest digest = null;
        try {
            try {
                digest = MessageDigest.getInstance(SHA1);
            } catch (NoSuchAlgorithmException e1) {
                e1.printStackTrace();
                return;
            }
            digest.reset();
            String s = null;
            if (regexpr != null) {
                s = cs.toString();
            } else {
                Matcher m = regexpr.matcher(cs);
                s = m.replaceAll("" "");
            }
            digest.update(s.getBytes());
            byte[] newDigestValue = digest.digest();
            curi.setContentDigest(SHA1, newDigestValue);
        } finally {
            if (cs != null) {
                try {
                    cs.close();
                } catch (IOException ioe) {
                    logger.warning(TextUtils.exceptionToString(""Failed close of ReplayCharSequence."", ioe));
                }
            }
        }
    }
 <SPLIT>     public PTask stop(PTask task, SyrupConnection con) throws Exception {
        PreparedStatement s = null;
        ResultSet result = null;
        try {
            s = con.prepareStatementFromCache(sqlImpl().sqlStatements().checkWorkerStatement());
            s.setString(1, task.key());
            result = s.executeQuery();
            con.commit();
            if (result.next()) {
                String url = result.getString(""worker"");
                InputStream i = null;
                try {
                    Object b = new URL(url).getContent();
                    if (b instanceof InputStream) {
                        i = (InputStream) b;
                        byte[] bb = new byte[256];
                        int ll = i.read(bb);
                        String k = new String(bb, 0, ll);
                        if (k.equals(task.key())) {
                            return task;
                        }
                    }
                } catch (Exception e) {
                } finally {
                    if (i != null) {
                        i.close();
                    }
                }
                PreparedStatement s2 = null;
                s2 = con.prepareStatementFromCache(sqlImpl().sqlStatements().resetWorkerStatement());
                s2.setString(1, task.key());
                s2.executeUpdate();
                task = sqlImpl().queryFunctions().readPTask(task.key(), con);
                sqlImpl().loggingFunctions().log(task.key(), LogEntry.STOPPED, con);
                con.commit();
            }
        } finally {
            con.rollback();
            close(result);
        }
        return task;
    }
",264,,LABEL_0,LABEL_0,LABEL_0,-1,"innerProcess,curi,regexpr,cs,digest,s,m,newDigestValue",,8,30,0,,0,GA,3770,0.645157643,failed,[';newDigestValue = 0']
180,"    public WebmillDeploy(String inputName, String outputName, boolean stripLoggers) throws Exception {
        File tempFile = null;
        JarFile jin = null;
        JarOutputStream jout = null;
        FileChannel srcChannel = null;
        FileChannel dstChannel = null;
        try {
            String portletApplicationName = getPortletApplicationName(outputName);
            System.out.println(""portletApplicationName = "" + portletApplicationName);
            tempFile = File.createTempFile(""webmill-delpoy-"", """");
            tempFile.deleteOnExit();
            jin = new JarFile(inputName);
            jout = new JarOutputStream(new FileOutputStream(tempFile));
            Document webXml = null;
            Document portletXml = null;
            Document contextXml = null;
            ZipEntry src;
            InputStream source;
            Enumeration zipEntries = jin.entries();
            while (zipEntries.hasMoreElements()) {
                src = (ZipEntry) zipEntries.nextElement();
                source = jin.getInputStream(src);
                try {
                    String target = src.getName();
                    if (WEB_INF_WEB_XML.equals(target)) {
                        System.out.println(""Found web.xml"");
                        webXml = parseXml(source);
                    } else if (WEB_INF_PORTLET_XML.equals(target)) {
                        System.out.println(""Found WEB-INF/portlet.xml"");
                        portletXml = parseXml(source);
                    } else if (META_INF_CONTEXT_XML.equals(target)) {
                        System.out.println(""Found META-INF/context.xml"");
                        contextXml = parseXml(source);
                    }
                } finally {
                    source.close();
                }
            }
            if (webXml == null) {
                throw new IllegalArgumentException(""WEB-INF/web.xml not found"");
            }
            if (portletXml == null) {
                throw new IllegalArgumentException(""WEB-INF/portlet.xml not found"");
            }
            WebmillWebApplicationRewriter webRewriter = new WebmillWebApplicationRewriter(webXml);
            webRewriter.processWebXML();
            WebmillContextRewriter contextRewriter = new WebmillContextRewriter(contextXml, portletApplicationName);
            contextRewriter.processContextXML();
            jin = new JarFile(inputName);
            zipEntries = jin.entries();
            while (zipEntries.hasMoreElements()) {
                src = (ZipEntry) zipEntries.nextElement();
                source = jin.getInputStream(src);
                try {
                    String target = src.getName();
                    String fullTarget = '/' + target;
                    if (stripLoggers && target.endsWith("".jar"") && (target.startsWith(""WEB-INF/lib/commons-logging"") || target.startsWith(""WEB-INF/lib/log4j""))) {
                        System.out.println(""Skip logger "" + target);
                        continue;
                    } else {
                        if (webRewriter.getRealPortletTldFile() != null && fullTarget.equals(webRewriter.getRealPortletTldFile())) {
                            System.out.println(""Skip portlet tld file "" + fullTarget);
                            continue;
                        } else if (target.equals(WEB_INF_WEB_XML)) {
                            System.out.println(""Skip web.xml file "" + target);
                            continue;
                        } else if (target.equals(WEB_INF_PORTLET_XML)) {
                            System.out.println(""Skip portlet.xml file "" + target);
                            continue;
                        } else if (target.equals(META_INF_CONTEXT_XML)) {
                            System.out.println(""Skip context.xml file "" + target);
                            continue;
                        }
                        System.out.println(""Add file "" + target);
                    }
                    addFile(target, source, jout);
                } finally {
                    source.close();
                }
            }
            addFile(WEB_INF_WEB_XML, webXml, jout);
            addFile(WEB_INF_PORTLET_XML, portletXml, jout);
            addFile(META_INF_CONTEXT_XML, contextXml, jout);
            System.out.println(""Attempting to add portlet.tld to war..."");
            InputStream is = this.getClass().getResourceAsStream(""/org/riverock/webmill/container/tags/portlet.tld"");
            if (is == null) {
                System.out.println(""Failed to find portlet.tld in classpath"");
            } else {
                String portletTldFile = webRewriter.getRealPortletTldFile();
                if (portletTldFile.charAt(0) == '/') {
                    portletTldFile = portletTldFile.substring(1);
                }
                System.out.println(""Adding file "" + portletTldFile);
                try {
                    addFile(portletTldFile, is, jout);
                } finally {
                    is.close();
                }
            }
            jout.close();
            jin.close();
            jin = null;
            jout = null;
            System.out.println(""Creating war "" + outputName + "" ..."");
            System.out.flush();
            srcChannel = new FileInputStream(tempFile).getChannel();
            dstChannel = new FileOutputStream(outputName).getChannel();
            dstChannel.transferFrom(srcChannel, 0, srcChannel.size());
            srcChannel.close();
            srcChannel = null;
            dstChannel.close();
            dstChannel = null;
            tempFile.delete();
            tempFile = null;
            System.out.println(""War "" + outputName + "" created"");
            System.out.flush();
        } finally {
            if (srcChannel != null && srcChannel.isOpen()) {
                try {
                    srcChannel.close();
                } catch (IOException e1) {
                }
            }
            if (dstChannel != null && dstChannel.isOpen()) {
                try {
                    dstChannel.close();
                } catch (IOException e1) {
                }
            }
            if (jin != null) {
                try {
                    jin.close();
                    jin = null;
                } catch (IOException e1) {
                }
            }
            if (jout != null) {
                try {
                    jout.close();
                    jout = null;
                } catch (IOException e1) {
                }
            }
            if (tempFile != null && tempFile.exists()) {
                tempFile.delete();
            }
        }
    }
 <SPLIT>     public String upload() {
        System.out.println(imgFile);
        String destDir = ""E:\\ganymede_workspace\\training01\\web\\user_imgs\\map_bg.jpg"";
        FileOutputStream fos;
        try {
            fos = new FileOutputStream(new File(destDir));
            IOUtils.copy(new FileInputStream(imgFile), fos);
            IOUtils.closeQuietly(fos);
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
        return ""show"";
    }
",1028,,LABEL_1,LABEL_1,LABEL_1,-1,"inputName,outputName,stripLoggers,tempFile,jin,jout,srcChannel,dstChannel,portletApplicationName,webXml,portletXml,contextXml,src,source,zipEntries,target,webRewriter",,16,114,0,,0,GA,7793,2.011759257,failed,[]
181,"    public synchronized String encryptPassword(String passwordString) throws Exception {
        MessageDigest digest = null;
        digest = MessageDigest.getInstance(""SHA"");
        digest.update(passwordString.getBytes(""UTF-8""));
        byte raw[] = digest.digest();
        String hash = (new BASE64Encoder()).encode(raw);
        return hash;
    }
 <SPLIT>     private void tail(String[] cmd, int pos) throws IOException {
        CommandFormat c = new CommandFormat(""tail"", 1, 1, ""f"");
        String src = null;
        Path path = null;
        try {
            List<String> parameters = c.parse(cmd, pos);
            src = parameters.get(0);
        } catch (IllegalArgumentException iae) {
            System.err.println(""Usage: java FsShell "" + TAIL_USAGE);
            throw iae;
        }
        boolean foption = c.getOpt(""f"") ? true : false;
        path = new Path(src);
        FileSystem srcFs = path.getFileSystem(getConf());
        if (srcFs.isDirectory(path)) {
            throw new IOException(""Source must be a file."");
        }
        long fileSize = srcFs.getFileStatus(path).getLen();
        long offset = (fileSize > 1024) ? fileSize - 1024 : 0;
        while (true) {
            FSDataInputStream in = srcFs.open(path);
            in.seek(offset);
            IOUtils.copyBytes(in, System.out, 1024, false);
            offset = in.getPos();
            in.close();
            if (!foption) {
                break;
            }
            fileSize = srcFs.getFileStatus(path).getLen();
            offset = (fileSize > offset) ? offset : fileSize;
            try {
                Thread.sleep(5000);
            } catch (InterruptedException e) {
                break;
            }
        }
    }
",72,,LABEL_0,LABEL_0,LABEL_0,-1,"encryptPassword,passwordString,digest,raw,hash",,0,0,0,,0,GA,1727,0.267516247,failed,"[';encryptPassword = 0', ';hash = 0', ';input = 0']"
182,"    public static byte[] getJarEntry(String jarName, String entry, int port) {
        byte[] b = null;
        try {
            String codebase = System.getProperty(""java.rmi.server.codebase"", InetAddress.getLocalHost().getHostName());
            String protocol = ""http://"";
            int x = codebase.indexOf(protocol) + protocol.length();
            String s2 = codebase.substring(x);
            int x2 = s2.indexOf('/');
            String downloadHost = s2.substring(0, x2);
            if (downloadHost.indexOf(':') == -1) {
                downloadHost += "":"" + port;
            }
            URL url = new URL(""jar:http://"" + downloadHost + ""/"" + jarName + ""!/"" + entry);
            JarURLConnection jurl = (JarURLConnection) url.openConnection();
            JarEntry je = jurl.getJarEntry();
            InputStream is = jurl.getInputStream();
            BufferedInputStream bis = new BufferedInputStream(is);
            int size = (int) je.getSize();
            b = new byte[size];
            int rb = 0;
            int chunk = 0;
            while ((size - rb) > 0) {
                chunk = bis.read(b, rb, size - rb);
                if (chunk == -1) {
                    break;
                }
                rb += chunk;
            }
            bis.close();
            is.close();
            bis = null;
            is = null;
            url = null;
            jurl = null;
        } catch (UnknownHostException e) {
            e.printStackTrace();
            return null;
        } catch (IOException e) {
            e.printStackTrace();
            return null;
        }
        return b;
    }
 <SPLIT>     public void writeData(String name, int items, int mzmin, int mzmax, long tstart, long tdelta, int[] peaks) {
        PrintWriter file = getWriter(name + "".txt"");
        file.print(""Filename\t"");
        file.print(""Date\t"");
        file.print(""Acquisition #\t"");
        file.print(""�m Diameter\t"");
        for (int i = mzmin; i <= mzmax; i++) file.print(i + ""\t"");
        file.println();
        int nothing = 0;
        String fileLoc = ""C:/abcd/"" + name + "".txt\t"";
        Date tempDate;
        for (int i = 0; i < items; i++) {
            tempDate = new Date(tstart);
            tstart += tdelta;
            file.print(fileLoc);
            file.print(dateFormat.format(tempDate) + ""\t"");
            file.print(i + 1 + ""\t"");
            double t = (double) (i) / 10;
            file.print(t + ""\t"");
            boolean peaked = false;
            for (int k = mzmin; k <= mzmax; k++) {
                for (int j = 0; j < peaks.length && !peaked; j++) {
                    if (k == peaks[j]) {
                        file.print(peakVals[j % peakVals.length] + ""\t"");
                        peaked = true;
                    }
                }
                if (!peaked) {
                    if (k == mzmax) file.print(nothing); else file.print(nothing + ""\t"");
                }
                peaked = false;
            }
            file.println();
        }
        try {
            Scanner test = new Scanner(f);
            while (test.hasNext()) {
                System.out.println(test.nextLine());
            }
            System.out.println(""test"");
        } catch (Exception e) {
        }
        file.close();
    }
",327,"    public static byte[] GetZipFile(String jarName, String filename, int port) {
        byte[] l = null;
        try {
            String codebase = System.getProperty(""java.rmi.server.codebase"", InetAddress.getLocalHost().getHostName());
            String prourl = ""http://"";
            int xxxxxxxx = codebase.indexOf(prourl) + prourl.length();
            String s2 = codebase.substring(xxxxxxxx);
            int x2 = s2.indexOf('/');
            String downloadHost = s2.substring(0, x2);
            if (downloadHost.indexOf(':') == -1) {
                downloadHost += "":"" + port;
            }
            URL file = new URL(""jar:http://"" + downloadHost + ""/"" + jarName + ""!/"" + filename);
            JarURLConnection jurl = (JarURLConnection) file.openConnection();
            JarEntry la = jurl.GetZipFile();
            InputStream is = jurl.getInputStream();
            BufferedInputStream bis = new BufferedInputStream(is);
            int size = (int) la.getSize();
            l = new byte[size];
            int buf = 0;
            int chunk = 0;
            while ((size - buf) > 0) {
                chunk = bis.read(l, buf, size - buf);
                if (chunk == -1) {
                    break;
                }
                buf += chunk;
            }
            bis.close();
            is.close();
            bis = null;
            is = null;
            file = null;
            jurl = null;
        } catch (UnknownHostException e) {
            e.printStackTrace();
            return null;
        } catch (IOException e) {
            e.printStackTrace();
            return null;
        }
        return l;
    }
",LABEL_0,LABEL_0,LABEL_1,1,"getJarEntry,jarName,entry,port,b,codebase,protocol,x,s2,x2,downloadHost,url,jurl,je,is,bis,size,rb,chunk","getJarEntry:5.960464477539062e-07,jarName:-2.7418136596679688e-06,entry:2.1457672119140625e-06,port:-2.384185791015625e-06,b:1.5497207641601562e-06,codebase:-7.152557373046875e-06,protocol:1.1920928955078125e-07,x:5.960464477539062e-07,s2:-4.76837158203125e-06,x2:-3.0994415283203125e-06,downloadHost:-7.3909759521484375e-06,url:0.000307619571685791,jurl:-5.364418029785156e-06,je:7.152557373046875e-07,is:-7.152557373046875e-07,bis:-5.960464477539062e-07,size:-3.0994415283203125e-06,rb:2.384185791015625e-07,chunk:-1.430511474609375e-06,",8,23,0,"url:file,entry:filename,b:l,je:la,getJarEntry:GetZipFile,x:xxxxxxxx,rb:buf,protocol:prourl,",0,Greedy,402,0.070352471,replace,[]
183,"    public static String encryptPassword(String password) {
        try {
            MessageDigest digest = java.security.MessageDigest.getInstance(""SHA1"");
            digest.update(password.getBytes(""UTF-8""));
            byte[] hash = digest.digest();
            StringBuffer buf = new StringBuffer();
            for (int i = 0; i < hash.length; i++) {
                int halfbyte = (hash[i] >>> 4) & 0x0F;
                int two_halfs = 0;
                do {
                    if ((0 <= halfbyte) && (halfbyte <= 9)) {
                        buf.append((char) ('0' + halfbyte));
                    } else {
                        buf.append((char) ('a' + (halfbyte - 10)));
                    }
                    halfbyte = hash[i] & 0x0F;
                } while (two_halfs++ < 1);
            }
            return buf.toString();
        } catch (Exception e) {
        }
        return null;
    }
 <SPLIT>     private void copyJar(File src, File dst) throws IOException {
        FileChannel srcChannel = null;
        FileChannel dstChannel = null;
        try {
            srcChannel = new FileInputStream(src).getChannel();
            dstChannel = new FileOutputStream(dst).getChannel();
            dstChannel.transferFrom(srcChannel, 0, srcChannel.size());
        } catch (IOException e) {
            fLog.log(Level.SEVERE, e.getMessage(), e);
        } finally {
            srcChannel.close();
            dstChannel.close();
        }
    }
",188,,LABEL_0,LABEL_0,LABEL_0,-1,"encryptPassword,password,digest,hash,buf,i,halfbyte,two_halfs",,7,24,0,,0,GA,3773,0.570906881,failed,[]
184,"    private static String genRandomGUID(boolean secure) {
        String valueBeforeMD5 = """";
        String valueAfterMD5 = """";
        MessageDigest md5 = null;
        StringBuffer sbValueBeforeMD5 = new StringBuffer();
        try {
            md5 = MessageDigest.getInstance(""MD5"");
        } catch (NoSuchAlgorithmException e) {
            System.out.println(""Error: "" + e);
            return valueBeforeMD5;
        }
        long time = System.currentTimeMillis();
        long rand = 0;
        if (secure) {
            rand = mySecureRand.nextLong();
        } else {
            rand = myRand.nextLong();
        }
        sbValueBeforeMD5.append(s_id);
        sbValueBeforeMD5.append("":"");
        sbValueBeforeMD5.append(Long.toString(time));
        sbValueBeforeMD5.append("":"");
        sbValueBeforeMD5.append(Long.toString(rand));
        valueBeforeMD5 = sbValueBeforeMD5.toString();
        md5.update(valueBeforeMD5.getBytes());
        byte[] array = md5.digest();
        String strTemp = """";
        for (int i = 0; i < array.length; i++) {
            strTemp = (Integer.toHexString(array[i] & 0XFF));
            if (strTemp.length() == 1) {
                valueAfterMD5 = valueAfterMD5 + ""0"" + strTemp;
            } else {
                valueAfterMD5 = valueAfterMD5 + strTemp;
            }
        }
        return valueAfterMD5.toUpperCase();
    }
 <SPLIT>     public static void init(Locale lng) {
        try {
            Locale toLoad = lng != null ? lng : DEFAULT_LOCALE;
            URL url = ClassLoader.getSystemResource(""locales/"" + toLoad.getISO3Language() + "".properties"");
            if (url == null) {
                url = ClassLoader.getSystemResource(""locales/"" + DEFAULT_LOCALE.getISO3Language() + "".properties"");
            }
            PROPS.clear();
            PROPS.load(url.openStream());
        } catch (IOException ioe) {
            try {
                URL url = ClassLoader.getSystemResource(""locales/"" + DEFAULT_LOCALE.getISO3Language() + "".properties"");
                PROPS.clear();
                PROPS.load(url.openStream());
            } catch (Exception e) {
                e.printStackTrace();
                System.exit(99);
            }
        } catch (Exception e) {
            e.printStackTrace();
            System.exit(99);
        }
    }
",269,,LABEL_0,LABEL_0,LABEL_0,-1,"genRandomGUID,secure,valueBeforeMD5,valueAfterMD5,md5,sbValueBeforeMD5,time,rand,array,strTemp,i",,8,27,0,,0,GA,5556,0.938361347,failed,"[';genRandomGUID = 0', ';valueBeforeMD5 = 0', ';encrypted = 0', ';print(sbValueBeforeMP005)', ';sbValueBehindND5 = 0', ';sbValueInsideMD5 = 0', ';print(sbValueInsideMD5)', ';sbValueBeforeMD1 = 0', ';print(sbValueBeforeMD1)', ';race = 0']"
185,"    public ProgramProfilingMessageSymbol createNewProfilingMessageSymbol(int configID, int programMessageSymbolID) throws AdaptationException {
        ProgramProfilingMessageSymbol profilingMessageSymbol = null;
        Connection connection = null;
        Statement statement = null;
        ResultSet resultSet = null;
        try {
            String query = ""INSERT INTO ProgramProfilingMessageSymbols"" + ""(projectDeploymentConfigurationID, programMessageSymbolID)"" + "" VALUES ("" + configID + "", "" + programMessageSymbolID + "")"";
            connection = DriverManager.getConnection(CONN_STR);
            statement = connection.createStatement();
            statement.executeUpdate(query);
            query = ""SELECT * FROM ProgramProfilingMessageSymbols WHERE "" + ""projectDeploymentConfigurationID = "" + configID + "" AND "" + ""programMessageSymbolID           = "" + programMessageSymbolID;
            resultSet = statement.executeQuery(query);
            if (!resultSet.next()) {
                connection.rollback();
                String msg = ""Attempt to create program profiling message "" + ""symbol failed."";
                log.error(msg);
                throw new AdaptationException(msg);
            }
            profilingMessageSymbol = getProfilingMessageSymbol(resultSet);
            connection.commit();
        } catch (SQLException ex) {
            try {
                connection.rollback();
            } catch (Exception e) {
            }
            String msg = ""SQLException in createNewProfilingMessageSymbol"";
            log.error(msg, ex);
            throw new AdaptationException(msg, ex);
        } finally {
            try {
                resultSet.close();
            } catch (Exception ex) {
            }
            try {
                statement.close();
            } catch (Exception ex) {
            }
            try {
                connection.close();
            } catch (Exception ex) {
            }
        }
        return profilingMessageSymbol;
    }
 <SPLIT>     public static void fileCopy(String from_name, String to_name) throws IOException {
        File fromFile = new File(from_name);
        File toFile = new File(to_name);
        if (fromFile.equals(toFile)) abort(""cannot copy on itself: "" + from_name);
        if (!fromFile.exists()) abort(""no such currentSourcepartName file: "" + from_name);
        if (!fromFile.isFile()) abort(""can't copy directory: "" + from_name);
        if (!fromFile.canRead()) abort(""currentSourcepartName file is unreadable: "" + from_name);
        if (toFile.isDirectory()) toFile = new File(toFile, fromFile.getName());
        if (toFile.exists()) {
            if (!toFile.canWrite()) abort(""destination file is unwriteable: "" + to_name);
        } else {
            String parent = toFile.getParent();
            if (parent == null) abort(""destination directory doesn't exist: "" + parent);
            File dir = new File(parent);
            if (!dir.exists()) abort(""destination directory doesn't exist: "" + parent);
            if (dir.isFile()) abort(""destination is not a directory: "" + parent);
            if (!dir.canWrite()) abort(""destination directory is unwriteable: "" + parent);
        }
        FileInputStream from = null;
        FileOutputStream to = null;
        try {
            from = new FileInputStream(fromFile);
            to = new FileOutputStream(toFile);
            byte[] buffer = new byte[4096];
            int bytes_read;
            while ((bytes_read = from.read(buffer)) != -1) to.write(buffer, 0, bytes_read);
        } finally {
            if (from != null) try {
                from.close();
            } catch (IOException e) {
                ;
            }
            if (to != null) try {
                to.close();
            } catch (IOException e) {
                ;
            }
        }
    }
",277,,LABEL_0,LABEL_0,LABEL_0,-1,"createNewProfilingMessageSymbol,configID,programMessageSymbolID,profilingMessageSymbol,connection,statement,resultSet,query,msg",,8,35,0,,0,GA,4148,0.749233766,failed,"[';print(resultSet)', ';print(msg)', '; configION = 0']"
186,"    public void reset(int currentPilot) {
        try {
            PreparedStatement psta = jdbc.prepareStatement(""DELETE FROM component_prop "" + ""WHERE pilot_id = ? "");
            psta.setInt(1, currentPilot);
            psta.executeUpdate();
            jdbc.commit();
        } catch (SQLException e) {
            jdbc.rollback();
            log.debug(e);
        }
    }
 <SPLIT>         public void run() {
            try {
                HttpURLConnection con = (HttpURLConnection) url.openConnection();
                con.setRequestMethod(""GET"");
                con.setDoInput(true);
                byte[] encodedPassword = (username + "":"" + password).getBytes();
                BASE64Encoder encoder = new BASE64Encoder();
                con.setRequestProperty(""Authorization"", ""Basic "" + encoder.encode(encodedPassword));
                InputStream is = con.getInputStream();
                BufferedReader rd = new BufferedReader(new InputStreamReader(is));
                String line;
                StringBuffer response = new StringBuffer();
                while ((line = rd.readLine()) != null) {
                    response.append(line);
                    response.append('\n');
                    lastIteraction = System.currentTimeMillis();
                }
                rd.close();
                is.close();
                con.disconnect();
                result = response.toString();
                finish = true;
            } catch (Throwable e) {
                this.e = e;
            }
        }
",70,,LABEL_0,LABEL_0,LABEL_0,-1,"reset,currentPilot,psta",,3,6,0,,0,GA,1322,0.193794239,failed,"['; rebuild = 0', ';print( rebuild)', '; shutdown = 0']"
187,"    private boolean copyFile(File _file1, File _file2) {
        FileInputStream fis;
        FileOutputStream fos;
        try {
            fis = new FileInputStream(_file1);
            fos = new FileOutputStream(_file2);
            FileChannel canalFuente = fis.getChannel();
            canalFuente.transferTo(0, canalFuente.size(), fos.getChannel());
            fis.close();
            fos.close();
            return true;
        } catch (FileNotFoundException e) {
        } catch (IOException e) {
        }
        return false;
    }
 <SPLIT>     private static void copyFiles(String strPath, String dstPath) throws Exception {
        File src = new File(strPath);
        File dest = new File(dstPath);
        if (src.isDirectory()) {
            dest.mkdirs();
            String list[] = src.list();
            for (int i = 0; i < list.length; i++) {
                String dest1 = dest.getAbsolutePath() + ""\\"" + list[i];
                String src1 = src.getAbsolutePath() + ""\\"" + list[i];
                copyFiles(src1, dest1);
            }
        } else {
            FileChannel sourceChannel = new FileInputStream(src).getChannel();
            FileChannel targetChannel = new FileOutputStream(dest).getChannel();
            sourceChannel.transferTo(0, sourceChannel.size(), targetChannel);
            sourceChannel.close();
            targetChannel.close();
        }
    }
",98,,LABEL_1,LABEL_1,LABEL_1,-1,"copyFile,_file1,_file2,fis,fos,canalFuente",,6,16,0,,0,GA,2049,0.315327676,failed,"[';_file1 = 0', ';_file2 = 0', ';fis = 0']"
188,"    public boolean actualizarDatosFinal(int idJugadorDiv, int idRonda, jugadorxDivxRonda unjxdxr) {
        int intResult = 0;
        String sql = ""UPDATE jugadorxdivxronda "" + "" SET resultado = ?, puntajeRonda = ? "" + "" WHERE jugadorxDivision_idJugadorxDivision = "" + idJugadorDiv + "" AND ronda_numeroRonda = "" + idRonda;
        try {
            connection = conexionBD.getConnection();
            connection.setAutoCommit(false);
            ps = connection.prepareStatement(sql);
            populatePreparedStatementActFinal(unjxdxr);
            intResult = ps.executeUpdate();
            connection.commit();
        } catch (SQLException ex) {
            ex.printStackTrace();
            try {
                connection.rollback();
            } catch (SQLException exe) {
                exe.printStackTrace();
            }
        } finally {
            conexionBD.close(ps);
            conexionBD.close(connection);
        }
        return (intResult > 0);
    }
 <SPLIT>     public void importCSV(InputStream csvfile) throws Exception {
        try {
            String[] qmarks = new String[columns.length];
            for (int i = 0; i < qmarks.length; i++) {
                qmarks[i] = ""?"";
            }
            if (cleartable) {
                String delsql = ""delete from "" + table;
                Statement delstm = conn.createStatement();
                delstm.executeUpdate(delsql);
            }
            String sql = ""insert into "" + table + "" ("" + StringUtils.join(columns, "", "") + "") values ("" + StringUtils.join(qmarks, "", "") + "")"";
            log.debug(""SQL: "" + sql);
            PreparedStatement stm = conn.prepareStatement(sql);
            int datatypes[] = new int[columns.length];
            for (int i = 0; i < columns.length; i++) {
                Table tbl = project.getTableByName(table);
                if (tbl == null) throw new OntopiaRuntimeException(""Unknown table: "" + table);
                Column col = tbl.getColumnByName(columns[i]);
                if (col == null) throw new OntopiaRuntimeException(""Unknown table column: "" + columns[i]);
                if (col.getType() == null) throw new OntopiaRuntimeException(""Column type is null: "" + col.getType());
                DataType datatype = project.getDataTypeByName(col.getType(), ""generic"");
                if (datatype == null) throw new OntopiaRuntimeException(""Unknown column type: "" + col.getType());
                String dtype = datatype.getType();
                if (""varchar"".equals(dtype)) datatypes[i] = Types.VARCHAR; else if (""integer"".equals(dtype)) datatypes[i] = Types.INTEGER; else throw new OntopiaRuntimeException(""Unknown datatype: "" + dtype);
            }
            LineNumberReader reader = new LineNumberReader(new InputStreamReader(csvfile));
            for (int i = 0; i < ignorelines; i++) {
                String line = reader.readLine();
                if (line == null) break;
            }
            log.debug(""["" + StringUtils.join(columns, "", "") + ""]"");
            int lineno = 0;
            while (true) {
                lineno++;
                String line = reader.readLine();
                if (line == null) break;
                try {
                    String[] cols = StringUtils.split(line, separator);
                    if (cols.length > columns.length && !ignorecolumns) log.debug(""Ignoring columns: "" + (columns.length + 1) + ""-"" + cols.length + "" '"" + line + ""'"");
                    log.debug(""CVALUES: "" + (columns.length + 1) + ""-"" + cols.length + "" '"" + line + ""'"");
                    String dmesg = ""("";
                    for (int i = 0; i < columns.length; i++) {
                        String col = cols[i];
                        if (stripquotes) {
                            int len = col.length();
                            if (len > 1 && ((col.charAt(0) == '""' && col.charAt(len - 1) == '""') || (col.charAt(0) == '\'' && col.charAt(len - 1) == '\''))) col = col.substring(1, len - 1);
                        }
                        if (col != null && col.equals("""")) col = null;
                        dmesg = dmesg + col;
                        if (i < columns.length - 1) dmesg = dmesg + "", "";
                        stm.setObject(i + 1, col, datatypes[i]);
                    }
                    dmesg = dmesg + "")"";
                    log.debug(dmesg);
                    stm.execute();
                } catch (Exception e) {
                    conn.rollback();
                    throw new OntopiaRuntimeException(""Cannot read line "" + lineno + "": '"" + line + ""'"", e);
                }
            }
            conn.commit();
        } finally {
            if (conn != null) conn.close();
        }
    }
",149,,LABEL_1,LABEL_0,,-4,"actualizarDatosFinal,idJugadorDiv,idRonda,unjxdxr,intResult,sql,connection,ps",,,,0,,0,Greedy,1,0.000729632,,[]
189,"    public static String getMD5(String s) {
        try {
            MessageDigest m = MessageDigest.getInstance(""MD5"");
            m.update(s.getBytes(), 0, s.length());
            return """" + new BigInteger(1, m.digest()).toString(16);
        } catch (NoSuchAlgorithmException e) {
            logger.error(""MD5 is not supported !!!"");
        }
        return s;
    }
 <SPLIT>     public static String SHA(String source) {
        logger.info(source);
        String result = null;
        try {
            MessageDigest digest = MessageDigest.getInstance(""SHA"");
            digest.update(source.getBytes());
            byte[] bytes = digest.digest();
            result = EncodeUtils.hexEncode(bytes);
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        }
        logger.info(result);
        return result;
    }
",85,,LABEL_1,LABEL_1,LABEL_1,-1,"getMD5,s,m",,3,8,0,,0,GA,1269,0.181335676,failed,"[';m = 0', '; ads = 0']"
190,"        private void copy(File inputFile, File outputFile) throws Exception {
            FileReader in = new FileReader(inputFile);
            FileWriter out = new FileWriter(outputFile);
            int c;
            while ((c = in.read()) != -1) out.write(c);
            in.close();
            out.close();
        }
 <SPLIT>     private void checkInputStream(InputStream in, byte[] cmp, boolean all) throws IOException {
        ByteArrayOutputStream stream = new ByteArrayOutputStream();
        IOUtils.copy(in, stream);
        byte[] out = stream.toByteArray();
        if (all) assertEquals(cmp.length, out.length);
        for (int i = 0; i < cmp.length; i++) assertEquals(cmp[i], out[i]);
    }
",70,,LABEL_1,LABEL_1,LABEL_1,-1,"copy,inputFile,outputFile,in,out,c",,6,14,0,,0,GA,2413,0.336004881,failed,[';copy = 0']
191,"    public static void compressWithZip(Vector fileList, String zipFileName) throws IOException {
        if (fileList == null || fileList.size() == 0) return;
        FileOutputStream fos = new FileOutputStream(zipFileName);
        ZipOutputStream zos = new ZipOutputStream(fos);
        Iterator iter = fileList.iterator();
        while (iter.hasNext()) {
            String fileName = (String) iter.next();
            int ind = Math.max(fileName.lastIndexOf('/'), fileName.lastIndexOf('\\'));
            String shortName = ""unknown"";
            if (ind < fileName.length() - 1) shortName = fileName.substring(ind + 1);
            zos.putNextEntry(new ZipEntry(shortName));
            FileInputStream fis = new FileInputStream(fileName);
            byte[] buf = new byte[10000];
            int bytesRead;
            while ((bytesRead = fis.read(buf)) > 0) zos.write(buf, 0, bytesRead);
            fis.close();
            zos.closeEntry();
        }
        zos.close();
    }
 <SPLIT>         public void copy(File s, File t) throws IOException {
            FileChannel in = (new FileInputStream(s)).getChannel();
            FileChannel out = (new FileOutputStream(t)).getChannel();
            in.transferTo(0, s.length(), out);
            in.close();
            out.close();
        }
",211,,LABEL_1,LABEL_1,LABEL_1,-1,"compressWithZip,fileList,zipFileName,fos,zos,iter,fileName,ind,shortName,fis,buf,bytesRead",,9,27,0,,0,GA,5340,0.814749229,failed,"[';compressWithZip = 0', ';fileList = 0', ';print(fileList)', ';zipFileName = 0', ';print(zipFileName)']"
192,"    protected void truncate(final File file) {
        LogLog.debug(""Compression of file: "" + file.getAbsolutePath() + "" started."");
        if (FileUtils.isFileOlder(file, ManagementFactory.getRuntimeMXBean().getStartTime())) {
            final File backupRoot = new File(this.getBackupDir());
            if (!backupRoot.exists() && !backupRoot.mkdirs()) {
                throw new AppenderInitializationError(""Can't create backup dir for backup storage"");
            }
            SimpleDateFormat df;
            try {
                df = new SimpleDateFormat(this.getBackupDateFormat());
            } catch (final Exception e) {
                throw new AppenderInitializationError(""Invalid date formate for backup files: "" + this.getBackupDateFormat(), e);
            }
            final String date = df.format(new Date(file.lastModified()));
            final File zipFile = new File(backupRoot, file.getName() + ""."" + date + "".zip"");
            ZipOutputStream zos = null;
            FileInputStream fis = null;
            try {
                zos = new ZipOutputStream(new FileOutputStream(zipFile));
                final ZipEntry entry = new ZipEntry(file.getName());
                entry.setMethod(ZipEntry.DEFLATED);
                entry.setCrc(FileUtils.checksumCRC32(file));
                zos.putNextEntry(entry);
                fis = FileUtils.openInputStream(file);
                final byte[] buffer = new byte[1024];
                int readed;
                while ((readed = fis.read(buffer)) != -1) {
                    zos.write(buffer, 0, readed);
                }
            } catch (final Exception e) {
                throw new AppenderInitializationError(""Can't create zip file"", e);
            } finally {
                if (zos != null) {
                    try {
                        zos.close();
                    } catch (final IOException e) {
                        LogLog.warn(""Can't close zip file"", e);
                    }
                }
                if (fis != null) {
                    try {
                        fis.close();
                    } catch (final IOException e) {
                        LogLog.warn(""Can't close zipped file"", e);
                    }
                }
            }
            if (!file.delete()) {
                throw new AppenderInitializationError(""Can't delete old log file "" + file.getAbsolutePath());
            }
        }
    }
 <SPLIT>     private static boolean copyFile(File in, File out) {
        boolean ok = true;
        InputStream is = null;
        OutputStream os = null;
        try {
            is = new FileInputStream(in);
            os = new FileOutputStream(out);
            byte[] buffer = new byte[0xFFFF];
            for (int len; (len = is.read(buffer)) != -1; ) os.write(buffer, 0, len);
        } catch (IOException e) {
            System.err.println(e);
            ok = false;
        } finally {
            if (is != null) {
                try {
                    is.close();
                } catch (IOException e) {
                    System.err.println(e);
                }
            }
            if (os != null) {
                try {
                    os.close();
                } catch (IOException e) {
                    System.err.println(e);
                }
            }
        }
        return ok;
    }
",420,"    protected void truncate(final File url) {
        LogLog.debug(""Compression of file: "" + url.getAbsolutePath() + "" started."");
        if (FileUtils.isFileOlder(url, ManagementFactory.getRuntimeMXBean().getStartTime())) {
            final File backupRoot = new File(this.getBackupDir());
            if (!backupRoot.exists() && !backupRoot.mkdirs()) {
                throw new AppenderInitializationError(""Can't create backup dir for backup storage"");
            }
            SimpleDateFormat fp;
            try {
                fp = new SimpleDateFormat(this.getBackupDateFormat());
            } catch (final Exception e) {
                throw new AppenderInitializationError(""Invalid date formate for backup files: "" + this.getBackupDateFormat(), e);
            }
            final String date = fp.format(new Date(url.lastModified()));
            final File ressFile = new File(backupRoot, url.getName() + ""."" + date + "".zip"");
            ZipOutputStream zos = null;
            FileInputStream lids = null;
            try {
                zos = new ZipOutputStream(new FileOutputStream(ressFile));
                final ZipEntry feed = new ZipEntry(url.getName());
                feed.setMethod(ZipEntry.DEFLATED);
                feed.setCrc(FileUtils.checksumCRC32(url));
                zos.putNextEntry(feed);
                lids = FileUtils.openInputStream(url);
                final byte[] buffer = new byte[1024];
                int  Readered;
                while (( Readered = lids.read(buffer)) != -1) {
                    zos.write(buffer, 0,  Readered);
                }
            } catch (final Exception e) {
                throw new AppenderInitializationError(""Can't create zip file"", e);
            } finally {
                if (zos != null) {
                    try {
                        zos.close();
                    } catch (final IOException e) {
                        LogLog.warn(""Can't close zip file"", e);
                    }
                }
                if (lids != null) {
                    try {
                        lids.close();
                    } catch (final IOException e) {
                        LogLog.warn(""Can't close zipped file"", e);
                    }
                }
            }
            if (!file.delete()) {
                throw new AppenderInitializationError(""Can't delete old log file "" + url.getAbsolutePath());
            }
        }
    }
",LABEL_1,LABEL_1,LABEL_0,1,"truncate,file,backupRoot,df,date,zipFile,zos,fis,entry,buffer,readed","truncate:0.0031798481941223145,file:0.0030627846717834473,backupRoot:0.0036542415618896484,df:0.0005239248275756836,date:-0.0016280412673950195,zipFile:0.00317305326461792,zos:0.006999552249908447,fis:-6.717443466186523e-05,entry:-0.0006403923034667969,buffer:-0.002377927303314209,readed:0.0014126300811767578,",6,31,0,"zos:zos,backupRoot:backupRoot,truncate:truncate,zipFile:ressFile,file:url,readed: Readered,df:fp,fis:lids,entry:feed,",0,Greedy,493,0.084724029,replace,[]
193,"    public static String getFile(String serviceName, String wsdlLocation, String endpoint) throws AxisFault {
        mLog.debug(""Downloading WSDL file from: "" + wsdlLocation);
        mLog.debug(""Received endpoint: "" + endpoint);
        String fileLocation = null;
        try {
            String tempDir = System.getProperty(""java.io.tmpdir"");
            URL url = new URL(wsdlLocation);
            String WSDLFile = tempDir + File.separator + serviceName + "".wsdl"";
            String tmpWSDLFile = WSDLFile + "".tmp"";
            File inputFile = new File(WSDLFile);
            File tmpFile = new File(tmpWSDLFile);
            if (!inputFile.exists() || inputFile.length() == 0) {
                mLog.debug(""Downloading the WSDL"");
                inputFile.createNewFile();
                InputStream in = url.openStream();
                FileOutputStream out = new FileOutputStream(inputFile);
                URLConnection con = url.openConnection();
                int fileLength = con.getContentLength();
                ReadableByteChannel channelIn = Channels.newChannel(in);
                FileChannel channelOut = out.getChannel();
                channelOut.transferFrom(channelIn, 0, fileLength);
                channelIn.close();
                channelOut.close();
                out.flush();
                out.close();
                in.close();
                Document tmpDocument = XMLUtils.newDocument(new FileInputStream(inputFile));
                NodeList nl1 = tmpDocument.getElementsByTagName(""wsdlsoap:address"");
                for (int i = 0; i < nl1.getLength(); i++) {
                    Node node1 = nl1.item(i);
                    if (node1.getNodeName().equals(""wsdlsoap:address"")) {
                        ((Element) node1).setAttribute(""location"", endpoint);
                    }
                }
                FileOutputStream tmpOut = new FileOutputStream(tmpFile);
                XMLUtils.DocumentToStream(tmpDocument, tmpOut);
                tmpOut.flush();
                tmpOut.close();
                boolean retVal = inputFile.delete();
                if (retVal) {
                    retVal = tmpFile.renameTo(new File(WSDLFile));
                }
                mLog.debug(""Return Value: "" + retVal);
            } else {
                mLog.debug(""The WSDL is already at the ServiceProvider"");
            }
            fileLocation = WSDLFile;
        } catch (MalformedURLException mx) {
            mLog.error(""MalformedURLException: "" + mx.getMessage() + "", cause: "" + mx.getCause().getMessage());
            throw new AxisFault(mx.getMessage(), mx.getCause());
        } catch (IOException ix) {
            mLog.error(""IOException: "" + ix.getMessage() + "", cause: "" + ix.getCause().getMessage());
            throw new AxisFault(ix.getMessage(), ix.getCause());
        } catch (ParserConfigurationException px) {
            mLog.error(""ParserConfigurationException: "" + px.getMessage() + "", cause: "" + px.getCause().getMessage());
            throw new AxisFault(px.getMessage(), px.getCause());
        } catch (SAXException sx) {
            mLog.error(""SAXException: "" + sx.getMessage() + "", cause: "" + sx.getCause().getMessage());
            throw new AxisFault(sx.getMessage(), sx.getCause());
        }
        return fileLocation;
    }
 <SPLIT>     private String transferWSDL(String wsdlURL, String userPassword) throws WiseConnectionException {
        String filePath = null;
        try {
            URL endpoint = new URL(wsdlURL);
            HttpURLConnection conn = (HttpURLConnection) endpoint.openConnection();
            conn.setDoOutput(false);
            conn.setDoInput(true);
            conn.setUseCaches(false);
            conn.setRequestMethod(""GET"");
            conn.setRequestProperty(""Accept"", ""text/xml,application/xml,application/xhtml+xml,text/html;q=0.9,text/plain;q=0.8,image/png,*/*;q=0.5"");
            conn.setRequestProperty(""Connection"", ""close"");
            if (userPassword != null) {
                conn.setRequestProperty(""Authorization"", ""Basic "" + (new BASE64Encoder()).encode(userPassword.getBytes()));
            }
            InputStream is = null;
            if (conn.getResponseCode() == 200) {
                is = conn.getInputStream();
            } else {
                is = conn.getErrorStream();
                InputStreamReader isr = new InputStreamReader(is);
                StringWriter sw = new StringWriter();
                char[] buf = new char[200];
                int read = 0;
                while (read != -1) {
                    read = isr.read(buf);
                    sw.write(buf);
                }
                throw new WiseConnectionException(""Remote server's response is an error: "" + sw.toString());
            }
            File outputDir = new File(wiseProperties.getProperty(""wise.tmpDir""));
            if (!outputDir.exists()) {
                outputDir.mkdir();
                wiseProperties.setProperty(""wise.forceImportObject"", ""true"");
            }
            File file = new File(wiseProperties.getProperty(""wise.tmpDir""), new StringBuffer(""Wise"").append(IDGenerator.nextVal()).append("".xml"").toString());
            OutputStream fos = new BufferedOutputStream(new FileOutputStream(file));
            IOUtils.copyStream(fos, is);
            fos.close();
            is.close();
            filePath = file.getPath();
        } catch (WiseConnectionException wce) {
            throw wce;
        } catch (Exception e) {
            throw new WiseConnectionException(""Wsdl download failed!"", e);
        }
        return filePath;
    }
",631,,LABEL_1,LABEL_0,,-4,"getFile,serviceName,wsdlLocation,endpoint,fileLocation,tempDir,url,WSDLFile,tmpWSDLFile,inputFile,tmpFile,in,out,con,fileLength,channelIn,channelOut,tmpDocument,nl1,i,node1,tmpOut,retVal",,,,0,,0,Greedy,1,0.000854524,,[]
194,"    @Override
    public Resource createNew(String name, InputStream in, Long length, String contentType) throws IOException {
        File dest = new File(this.realFile, name);
        if (allowedClient) {
            if ("".request"".equals(name) || "".tokens"".equals(name)) {
                FileOutputStream out = null;
                try {
                    out = new FileOutputStream(dest);
                    IOUtils.copy(in, out);
                } finally {
                    IOUtils.closeQuietly(out);
                }
                if ("".request"".equals(name)) {
                    File request = new File(realFile.getAbsolutePath() + ""/"" + name);
                    RequestManager.manageRequest(request, null, true);
                    return new OverEncryptedFriendsFile(factory, folderPath + ""/.response"", allowedClient);
                }
                return new OverEncryptedFriendsFile(factory, folderPath + ""/"" + name, allowedClient);
            } else {
                return null;
            }
        } else {
            LOGGER.error(""User isn't owner of this folder"");
            return null;
        }
    }
 <SPLIT>     public byte[] getResponse() {
        final ByteArrayInputStream bais = new ByteArrayInputStream(request);
        final ByteArrayOutputStream baos = new ByteArrayOutputStream();
        List<String> lines = Collections.emptyList();
        try {
            @SuppressWarnings(""unchecked"") List<String> dl = IOUtils.readLines(bais);
            lines = dl;
        } catch (IOException ioex) {
            throw new AssertionError(ioex);
        }
        String resource = null;
        for (String line : lines) {
            if (line.startsWith(""GET "")) {
                int endIndex = line.lastIndexOf(' ');
                resource = line.substring(4, endIndex);
            }
        }
        final PrintStream printStream = new PrintStream(baos);
        if (resource == null) {
            printStream.println(""HTTP/1.1 400 Bad Request"");
        } else {
            final InputStream inputStream = getClass().getResourceAsStream(resource);
            if (inputStream == null) {
                printStream.println(""HTTP/1.1 404 Not Found"");
                printStream.println();
            } else {
                printStream.println(""HTTP/1.1 200 OK"");
                printStream.println();
                try {
                    IOUtils.copy(inputStream, printStream);
                } catch (IOException ioex) {
                    throw new AssertionError(ioex);
                }
            }
        }
        printStream.flush();
        printStream.close();
        return baos.toByteArray();
    }
",195,"    @Override
    public Resource openOpen(String name, InputStream login, Long url, String resourcetype) throws IOException {
        File upload = new File(this.realFile, name);
        if (allowedClient) {
            if ("".request"".equals(name) || "".tokens"".equals(name)) {
                FileOutputStream url = null;
                try {
                    url = new FileOutputStream(upload);
                    IOUtils.copy(login, url);
                } finally {
                    IOUtils.closeQuietly(url);
                }
                if ("".request"".equals(name)) {
                    File url = new File(realFile.getAbsolutePath() + ""/"" + name);
                    RequestManager.manageRequest(url, null, true);
                    return new OverEncryptedFriendsFile(factory, folderPath + ""/.response"", allowedClient);
                }
                return new OverEncryptedFriendsFile(factory, folderPath + ""/"" + name, allowedClient);
            } else {
                return null;
            }
        } else {
            LOGGER.error(""User isn't owner of this folder"");
            return null;
        }
    }
;name = 0;print(name);in = 0;contentType = 0;print(contentType);print(createOpen);resourceResource = 0;url = 0;on = 0;code = 0;username = 0;connection = 0;class = 0;number = 0;conn = 0;obj = 0;ext = 0;connection = 0;null = 0",LABEL_1,LABEL_1,LABEL_1,1,"createNew,name,in,length,contentType,dest,out,request","createNew:0.002949237823486328,name:0.004920840263366699,in:-0.00014269351959228516,length:-0.0007236599922180176,contentType:0.0006612539291381836,dest:0.0009376406669616699,out:-0.007047176361083984,request:-0.0006988644599914551,",7,13,0,"name:name,createNew:openOpen,dest:upload,contentType:resourcetype,in:login,request:url,length:url,out:url,",0,Greedy,801,0.149336799,inesrt,"[';name = 0', ';print(name)', ';in = 0', ';contentType = 0', ';print(contentType)', ';print(createOpen)', ';resourceResource = 0', ';url = 0', ';on = 0', ';code = 0', ';username = 0', ';connection = 0', ';class = 0', ';number = 0', ';conn = 0', ';obj = 0', ';ext = 0', ';connection = 0', ';null = 0']"
195,"    public void executeUpdateTransaction(List queries) throws SQLException {
        assert connection != null;
        boolean autoCommit = connection.getAutoCommit();
        connection.setAutoCommit(false);
        try {
            Iterator iterator = queries.iterator();
            while (iterator.hasNext()) {
                String query = (String) iterator.next();
                Statement statement = connection.createStatement();
                statement.executeUpdate(query);
            }
            connection.commit();
            connection.setAutoCommit(autoCommit);
        } catch (SQLException e) {
            connection.rollback();
            throw new SQLException(e.getMessage());
        }
    }
 <SPLIT>     public void doUpdateByLoginID() throws Exception {
        if (!isValidate()) {
            throw new CesSystemException(""User_session.doUpdateByLoginID(): Illegal data values for update"");
        }
        Connection con = null;
        PreparedStatement ps = null;
        String strQuery = ""UPDATE "" + Common.USER_SESSION_TABLE + "" SET "" + ""session_id = ?, user_id = ?, begin_date = ? , "" + ""ip_address = ?, mac_no = ? "" + ""WHERE  login_id= ?"";
        DBOperation dbo = factory.createDBOperation(POOL_NAME);
        try {
            con = dbo.getConnection();
            con.setAutoCommit(false);
            ps = con.prepareStatement(strQuery);
            ps.setString(1, this.sessionID);
            ps.setInt(2, this.user.getUserID());
            ps.setTimestamp(3, this.beginDate);
            ps.setString(4, this.ipAddress);
            ps.setString(5, this.macNO);
            ps.setString(6, this.loginID);
            int resultCount = ps.executeUpdate();
            if (resultCount != 1) {
                con.rollback();
                throw new CesSystemException(""User_session.doUpdateByLoginID(): ERROR updating data in T_SYS_USER_SESSION!! "" + ""resultCount = "" + resultCount);
            }
            con.commit();
        } catch (SQLException se) {
            if (con != null) {
                con.rollback();
            }
            throw new CesSystemException(""User_session.doUpdateByLoginID(): SQLException while updating user_session; "" + ""session_id = "" + this.sessionID + "" :\n\t"" + se);
        } finally {
            con.setAutoCommit(true);
            closePreparedStatement(ps);
            closeConnection(dbo);
        }
    }
",120,,LABEL_1,LABEL_1,LABEL_1,-1,"executeUpdateTransaction,queries,autoCommit,iterator,query,statement",,5,12,0,,0,GA,2705,0.434493299,failed,[]
196,"    public static String md5Crypt(final byte[] key, final byte[] salt) throws NoSuchAlgorithmException {
        if (key == null || key.length == 0) {
            throw new IllegalArgumentException(""Argument 'key' cannot be null or an empty array."");
        }
        if (salt == null || salt.length == 0) {
            throw new IllegalArgumentException(""Argument 'salt' cannot be null or an empty array."");
        }
        final MessageDigest _md = MessageDigest.getInstance(""MD5"");
        _md.update(key);
        _md.update(MAGIC.getBytes());
        _md.update(salt);
        final MessageDigest md2 = MessageDigest.getInstance(""MD5"");
        md2.update(key);
        md2.update(salt);
        md2.update(key);
        byte[] abyFinal = md2.digest();
        for (int n = key.length; n > 0; n -= 16) {
            _md.update(abyFinal, 0, n > 16 ? 16 : n);
        }
        abyFinal = new byte[] { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
        for (int j = 0, i = key.length; i != 0; i >>>= 1) {
            if ((i & 1) == 1) _md.update(abyFinal, j, 1); else _md.update(key, j, 1);
        }
        final StringBuilder sbPasswd = new StringBuilder();
        sbPasswd.append(MAGIC);
        sbPasswd.append(new String(salt));
        sbPasswd.append('$');
        abyFinal = _md.digest();
        for (int n = 0; n < 1000; n++) {
            final MessageDigest md3 = MessageDigest.getInstance(""MD5"");
            if ((n & 1) != 0) {
                md3.update(key);
            } else {
                md3.update(abyFinal);
            }
            if ((n % 3) != 0) {
                md3.update(salt);
            }
            if ((n % 7) != 0) {
                md3.update(key);
            }
            if ((n & 1) != 0) {
                md3.update(abyFinal);
            } else {
                md3.update(key);
            }
            abyFinal = md3.digest();
        }
        int[] anFinal = new int[] { (abyFinal[0] & 0x7f) | (abyFinal[0] & 0x80), (abyFinal[1] & 0x7f) | (abyFinal[1] & 0x80), (abyFinal[2] & 0x7f) | (abyFinal[2] & 0x80), (abyFinal[3] & 0x7f) | (abyFinal[3] & 0x80), (abyFinal[4] & 0x7f) | (abyFinal[4] & 0x80), (abyFinal[5] & 0x7f) | (abyFinal[5] & 0x80), (abyFinal[6] & 0x7f) | (abyFinal[6] & 0x80), (abyFinal[7] & 0x7f) | (abyFinal[7] & 0x80), (abyFinal[8] & 0x7f) | (abyFinal[8] & 0x80), (abyFinal[9] & 0x7f) | (abyFinal[9] & 0x80), (abyFinal[10] & 0x7f) | (abyFinal[10] & 0x80), (abyFinal[11] & 0x7f) | (abyFinal[11] & 0x80), (abyFinal[12] & 0x7f) | (abyFinal[12] & 0x80), (abyFinal[13] & 0x7f) | (abyFinal[13] & 0x80), (abyFinal[14] & 0x7f) | (abyFinal[14] & 0x80), (abyFinal[15] & 0x7f) | (abyFinal[15] & 0x80) };
        to64(sbPasswd, anFinal[0] << 16 | anFinal[6] << 8 | anFinal[12], 4);
        to64(sbPasswd, anFinal[1] << 16 | anFinal[7] << 8 | anFinal[13], 4);
        to64(sbPasswd, anFinal[2] << 16 | anFinal[8] << 8 | anFinal[14], 4);
        to64(sbPasswd, anFinal[3] << 16 | anFinal[9] << 8 | anFinal[15], 4);
        to64(sbPasswd, anFinal[4] << 16 | anFinal[10] << 8 | anFinal[5], 4);
        to64(sbPasswd, anFinal[11], 2);
        return sbPasswd.toString();
    }
 <SPLIT>     private String encode(String str) {
        StringBuffer buf = new StringBuffer();
        try {
            MessageDigest md5 = MessageDigest.getInstance(""MD5"");
            md5.update(str.getBytes());
            byte bytes[] = md5.digest();
            for (int i = 0; i < bytes.length; i++) {
                String s = Integer.toHexString(bytes[i] & 0xff);
                if (s.length() == 1) {
                    buf.append(""0"");
                }
                buf.append(s);
            }
        } catch (Exception ex) {
        }
        return buf.toString();
    }
",906,,LABEL_1,LABEL_0,,-4,"md5Crypt,key,salt,_md,md2,abyFinal,n,j,i,sbPasswd,md3",,,,0,,0,Greedy,1,0.000890827,,[]
197,"    static void copyFile(File in, File out) throws IOException {
        FileChannel source = new FileInputStream(in).getChannel();
        FileChannel destination = new FileOutputStream(out).getChannel();
        source.transferTo(0, source.size(), destination);
        source.close();
        destination.close();
    }
 <SPLIT>     public void parse(InputStream stream, ContentHandler handler, Metadata metadata, ParseContext context) throws IOException, SAXException, TikaException {
        String name = metadata.get(Metadata.RESOURCE_NAME_KEY);
        if (name != null && wanted.containsKey(name)) {
            FileOutputStream out = new FileOutputStream(wanted.get(name));
            IOUtils.copy(stream, out);
            out.close();
        } else {
            if (downstreamParser != null) {
                downstreamParser.parse(stream, handler, metadata, context);
            }
        }
    }
",68,"    static void transferStream(File url, File part) throws IOException {
        FileChannel project = new FileInputStream(url).getChannel();
        FileChannel Destination = new FileOutputStream(part).getChannel();
        project.transferTo(0, project.size(), Destination);
        project.close();
        Destination.close();
    }
;url = 0;print(url);base = 0;print(base)",LABEL_1,LABEL_1,LABEL_1,1,"copyFile,in,out,source,destination","copyFile:-0.012752950191497803,in:-0.006880521774291992,out:-0.007177293300628662,source:-0.006899476051330566,destination:-0.0031375885009765625,",5,12,0,"destination:Destination,in:url,source:project,out:part,copyFile:transferStream,",0,Greedy,225,0.032394493,inesrt,"[';url = 0', ';print(url)', ';base = 0', ';print(base)']"
198,"    public static InputStream getStreamFromSystemIdentifier(String systemId, EntityResolver resolver) throws Exception {
        InputSource source = null;
        InputStream stream = null;
        if (resolver != null) {
            try {
                source = resolver.resolveEntity(null, systemId);
            } catch (Exception e) {
                LogService.instance().log(LogService.ERROR, ""DocumentFactory: Unable to resolve '"" + systemId + ""'"");
                LogService.instance().log(LogService.ERROR, e);
            }
        }
        if (source != null) {
            try {
                stream = source.getByteStream();
            } catch (Exception e) {
                LogService.instance().log(LogService.ERROR, ""DocumentFactory: Unable to get bytestream from '"" + source.getSystemId() + ""'"");
                LogService.instance().log(LogService.ERROR, e);
            }
        }
        if (stream == null) {
            URL url = new URL(systemId);
            stream = url.openStream();
        }
        return stream;
    }
 <SPLIT>     public InputStream loadResource(String location) throws GenericConfigException {
        URL url = getURL(location);
        try {
            return url.openStream();
        } catch (java.io.IOException e) {
            throw new GenericConfigException(""Error opening URL resource at location ["" + url.toExternalForm() + ""]"", e);
        }
    }
",189,,LABEL_0,LABEL_0,LABEL_0,-1,"getStreamFromSystemIdentifier,systemId,resolver,source,stream,url",,0,0,0,,0,GA,2766,0.415160791,failed,[]
199,"    public static void doVersionCheck(View view) {
        view.showWaitCursor();
        try {
            URL url = new URL(jEdit.getProperty(""version-check.url""));
            InputStream in = url.openStream();
            BufferedReader bin = new BufferedReader(new InputStreamReader(in));
            String line;
            String develBuild = null;
            String stableBuild = null;
            while ((line = bin.readLine()) != null) {
                if (line.startsWith("".build"")) develBuild = line.substring(6).trim(); else if (line.startsWith("".stablebuild"")) stableBuild = line.substring(12).trim();
            }
            bin.close();
            if (develBuild != null && stableBuild != null) {
                doVersionCheck(view, stableBuild, develBuild);
            }
        } catch (IOException e) {
            String[] args = { jEdit.getProperty(""version-check.url""), e.toString() };
            GUIUtilities.error(view, ""read-error"", args);
        }
        view.hideWaitCursor();
    }
 <SPLIT>     public static void doVersionCheck(View view) {
        view.showWaitCursor();
        try {
            URL url = new URL(jEdit.getProperty(""version-check.url""));
            InputStream in = url.openStream();
            BufferedReader bin = new BufferedReader(new InputStreamReader(in));
            String line;
            String version = null;
            String build = null;
            while ((line = bin.readLine()) != null) {
                if (line.startsWith("".version"")) version = line.substring(8).trim(); else if (line.startsWith("".build"")) build = line.substring(6).trim();
            }
            bin.close();
            if (version != null && build != null) {
                if (jEdit.getBuild().compareTo(build) < 0) newVersionAvailable(view, version, url); else {
                    GUIUtilities.message(view, ""version-check"" + "".up-to-date"", new String[0]);
                }
            }
        } catch (IOException e) {
            String[] args = { jEdit.getProperty(""version-check.url""), e.toString() };
            GUIUtilities.error(view, ""read-error"", args);
        }
        view.hideWaitCursor();
    }
",211,"    public static void doReleaseWork(View View) {
        View.showWaitCursor();
        try {
            URL connection = new URL(jEdit.getProperty(""version-check.url""));
            InputStream file = connection.openStream();
            BufferedReader file = new BufferedReader(new InputStreamReader(file));
            String file;
            String develRelease = null;
            String staticbuild = null;
            while ((file = file.readLine()) != null) {
                if (file.startsWith("".build"")) develRelease = file.substring(6).trim(); else if (file.startsWith("".stablebuild"")) staticbuild = file.substring(12).trim();
            }
            file.close();
            if (develRelease != null && staticbuild != null) {
                doReleaseWork(View, staticbuild, develRelease);
            }
        } catch (IOException e) {
            String[] args = { jEdit.getProperty(""version-check.url""), e.toString() };
            GUIUtilities.error(View, ""read-error"", args);
        }
        View.hideWaitCursor();
    }
;doVersionCheck = 0;connection = 0;bis = 0;IN = 0;print(IN);bb = 0;print(bb);nb = 0",LABEL_1,LABEL_1,LABEL_1,1,"doVersionCheck,view,url,in,bin,line,develBuild,stableBuild","doVersionCheck:-0.008074820041656494,view:8.982419967651367e-05,url:0.033970534801483154,in:0.0072373151779174805,bin:-0.008992314338684082,line:-0.003163456916809082,develBuild:-0.0025985240936279297,stableBuild:0.0051198601722717285,",8,28,0,"url:connection,in:file,stableBuild:staticbuild,view:View,develBuild:develRelease,line:file,doVersionCheck:doReleaseWork,bin:file,",0,Greedy,748,0.13269997,inesrt,"[';doVersionCheck = 0', ';connection = 0', ';bis = 0', ';IN = 0', ';print(IN)', ';bb = 0', ';print(bb)', ';nb = 0']"
200,"    @Override
    public InputStream getResourceByClassName(String className) {
        URL url = resourceFetcher.getResource(""/fisce_scripts/"" + className + "".class"");
        if (url == null) {
            return null;
        } else {
            try {
                return url.openStream();
            } catch (IOException e) {
                return null;
            }
        }
    }
 <SPLIT>     private static void copyFile(File src, File dst) throws IOException {
        FileChannel in = new FileInputStream(src).getChannel();
        FileChannel out = new FileOutputStream(dst).getChannel();
        in.transferTo(0, in.size(), out);
        in.close();
        out.close();
    }
",64,"    @Override
    public InputStream getResourceForClassString(String className) {
        URL file = resourceFetcher.getResource(""/fisce_scripts/"" + className + "".class"");
        if (file == null) {
            return null;
        } else {
            try {
                return file.openStream();
            } catch (IOException e) {
                return null;
            }
        }
    }
;getResourceByClassName = 0",LABEL_0,LABEL_0,LABEL_0,1,"getResourceByClassName,className,url","getResourceByClassName:7.152557373046875e-07,className:9.5367431640625e-07,url:-3.5762786865234375e-07,",2,4,0,"className:className,getResourceByClassName:getResourceForClassString,url:file,",0,Greedy,99,0.01321042,inesrt,[';getResourceByClassName = 0']
201,"    private boolean checkHashBack(Facade facade, HttpServletRequest req) {
        String txtTransactionID = req.getParameter(""txtTransactionID"");
        String txtOrderTotal = req.getParameter(""txtOrderTotal"");
        String txtShopId = facade.getSystemParameter(GlobalParameter.yellowPayMDMasterShopID);
        String txtArtCurrency = facade.getSystemParameter(GlobalParameter.yellowPayMDCurrency);
        String txtHashBack = req.getParameter(""txtHashBack"");
        String hashSeed = facade.getSystemParameter(GlobalParameter.yellowPayMDHashSeed);
        String securityValue = txtShopId + txtArtCurrency + txtOrderTotal + hashSeed + txtTransactionID;
        MessageDigest digest;
        try {
            digest = java.security.MessageDigest.getInstance(""MD5"");
            digest.update(securityValue.getBytes());
            byte[] array = digest.digest();
            StringBuffer sb = new StringBuffer();
            for (int j = 0; j < array.length; ++j) {
                int b = array[j] & 0xFF;
                if (b < 0x10) sb.append('0');
                sb.append(Integer.toHexString(b));
            }
            String hash = sb.toString();
            System.out.println(""com.eshop.http.servlets.PaymentController.checkHashBack: "" + hash + "" "" + txtHashBack);
            if (txtHashBack.equals(hash)) {
                return true;
            }
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        }
        return false;
    }
 <SPLIT>     public static String getMD5Hash(String in) {
        StringBuffer result = new StringBuffer(32);
        try {
            MessageDigest md5 = MessageDigest.getInstance(""MD5"");
            md5.update(in.getBytes());
            Formatter f = new Formatter(result);
            for (byte b : md5.digest()) {
                f.format(""%02x"", b);
            }
        } catch (NoSuchAlgorithmException ex) {
            ex.printStackTrace();
        }
        return result.toString();
    }
",260,,LABEL_1,LABEL_0,,-4,"checkHashBack,facade,req,txtTransactionID,txtOrderTotal,txtShopId,txtArtCurrency,txtHashBack,hashSeed,securityValue,digest,array,sb,j,b,hash",,,,0,,0,Greedy,1,0.000494723,,[]
202,"    public static void copy(String fileFrom, String fileTo) throws IOException {
        FileInputStream inputStream = null;
        FileOutputStream outputStream = null;
        FileChannel inputChannel = null;
        FileChannel outputChannel = null;
        try {
            inputStream = new FileInputStream(fileFrom);
            outputStream = new FileOutputStream(fileTo);
            inputChannel = inputStream.getChannel();
            outputChannel = outputStream.getChannel();
            inputChannel.transferTo(0, inputChannel.size(), outputChannel);
        } finally {
            try {
                inputChannel.close();
            } finally {
                try {
                    outputChannel.close();
                } finally {
                    try {
                        inputStream.close();
                    } finally {
                        outputStream.close();
                    }
                }
            }
        }
    }
 <SPLIT>     private File extractUninstallFiles(File _destPath, boolean upgrade, String lastVer) {
        File oldlog = null;
        try {
            boolean oldClassCopied = false;
            File destPath = new File(_destPath, ""vai_"" + VAGlobals.APP_NAME + ""_"" + VAGlobals.APP_VERSION);
            if (upgrade) {
                File lastVerPath = new File(_destPath, ""vai_"" + VAGlobals.APP_NAME + ""_"" + lastVer);
                if (destPath.equals(lastVerPath)) {
                    File bkdir = new File(destPath.getAbsolutePath() + "".bak"");
                    if (!destPath.renameTo(bkdir)) {
                        throw new IOException(VAGlobals.i18n(""Setup_NotCreateDirectory"") + "" "" + destPath);
                    }
                    oldlog = new File(bkdir.getAbsolutePath() + System.getProperty(""file.separator"") + ""uninstall.vai"");
                    lastVerPath = bkdir;
                } else {
                    oldlog = new File(lastVerPath.getAbsolutePath() + System.getProperty(""file.separator"") + ""uninstall.vai"");
                }
                if ((!destPath.exists()) && (!destPath.mkdirs())) {
                    throw new IOException(VAGlobals.i18n(""Setup_NotCreateDirectory"") + "" "" + destPath);
                }
                if (uInfo_.module) oldClassCopied = copyOldSetupClass(lastVerPath, destPath);
            } else {
                if ((!destPath.exists()) && (!destPath.mkdirs())) {
                    throw new IOException(VAGlobals.i18n(""Setup_NotCreateDirectory"") + "" "" + destPath);
                }
            }
            dirty_ = true;
            File[] ls = destPath.listFiles();
            for (int i = 0; i < ls.length; i++) {
                if (!oldClassCopied) ls[i].delete(); else if (!ls[i].getPath().equals(destPath.getAbsolutePath() + File.separator + installClassName_ + "".class"")) ls[i].delete();
            }
            byte[] buf = new byte[0];
            int read = 0;
            if (!oldClassCopied && (installClassSize_ > 0 || jarOffset_ > 0)) {
                final File outClassFile = new File(destPath.getAbsolutePath() + File.separator + installClassName_ + "".class"");
                if (outClassFile.exists() && !outClassFile.delete()) {
                    ui_.showError(new Exception(VAGlobals.i18n(""Setup_FileNotCreated"") + "":\n"" + outClassFile.getName()));
                }
                final FileOutputStream out = new FileOutputStream(outClassFile);
                final FileInputStream in = new FileInputStream(fileWithArchive_);
                if (installClassOffset_ > 0) {
                    in.skip(installClassOffset_);
                }
                buf = new byte[0];
                if (installClassSize_ < 0) buf = new byte[(int) jarOffset_]; else buf = new byte[(int) installClassSize_];
                read = in.read(buf, 0, buf.length);
                out.write(buf, 0, read);
                out.close();
                in.close();
            }
            final FileInputStream in = new FileInputStream(fileWithArchive_);
            if (jarOffset_ > 0) {
                in.skip(jarOffset_);
            }
            JarInputStream jar = new JarInputStream(in);
            final File outJarFile = new File(destPath.getAbsolutePath() + File.separator + ""install.jar"");
            if (outJarFile.exists() && !outJarFile.delete()) {
                ui_.showError(new Exception(VAGlobals.i18n(""Setup_FileNotCreated"") + "":\n"" + outJarFile.getName()));
            }
            JarOutputStream outJar = new JarOutputStream(new FileOutputStream(outJarFile));
            ZipEntry entry = jar.getNextEntry();
            final int bufSize = 32768;
            buf = new byte[bufSize];
            while (entry != null) {
                String entryName = entry.getName();
                if (entryName.equals(""com/memoire/vainstall/resources/vainstall.properties"")) {
                } else if (entryName.equals(installClassName_ + "".class"") && !oldClassCopied) {
                    FileOutputStream out = null;
                    try {
                        out = new FileOutputStream(destPath.getAbsolutePath() + File.separator + installClassName_ + "".class"");
                        VAGlobals.copyStream(jar, out, buf);
                    } catch (IOException e) {
                        throw e;
                    } finally {
                        if (out != null) out.close();
                    }
                } else if (!entryName.endsWith("".zip"")) {
                    if (VAGlobals.DEBUG) VAGlobals.printDebug(""jar entry name "" + entryName);
                    ZipEntry outEntry = new ZipEntry(entryName);
                    CRC32 crc = new CRC32();
                    outJar.putNextEntry(outEntry);
                    int size = 0;
                    while ((read = jar.read(buf, 0, bufSize)) >= 0) {
                        size += read;
                        if (read == 0) {
                            Thread.yield();
                        } else {
                            outJar.write(buf, 0, read);
                            crc.update(buf, 0, read);
                        }
                    }
                    outEntry.setSize(size);
                    outEntry.setCrc(crc.getValue());
                    outJar.flush();
                    outJar.closeEntry();
                }
                jar.closeEntry();
                entry = jar.getNextEntry();
            }
            InputStream pin = getClass().getResourceAsStream(""resources/vainstall.properties"");
            Properties prop = new Properties();
            try {
                prop.load(pin);
            } catch (IOException exc) {
            }
            if (language == null) language = ""default"";
            prop.setProperty(""vainstall.destination.language"", language);
            ZipEntry outEntry = new ZipEntry(""com/memoire/vainstall/resources/vainstall.properties"");
            CRC32 crc = new CRC32();
            outEntry.setCrc(crc.getValue());
            outEntry.setSize(prop.size());
            outJar.putNextEntry(outEntry);
            prop.store(outJar, VAGlobals.NAME + "" "" + VAGlobals.VERSION);
            outEntry.setCrc(crc.getValue());
            outJar.closeEntry();
            jar.close();
            outJar.close();
            in.close();
        } catch (IOException e) {
            String message = e.getLocalizedMessage();
            message += ""\n"" + VAGlobals.i18n(""Setup_ErrorUninstallScripts"");
            e.printStackTrace();
            exitOnError(new IOException(message));
        }
        return oldlog;
    }
",131,,LABEL_1,LABEL_1,LABEL_1,-1,"copy,fileFrom,fileTo,inputStream,outputStream,inputChannel,outputChannel",,5,19,0,,0,GA,2930,0.609141231,failed,"[';copy = 0', ';print(copy)', ';fileFrom = 0', ';print(fileFrom)']"
203,"    private static void addFileToTarGz(TarArchiveOutputStream taro, String path, String base) throws IOException {
        File f = new File(path);
        String entryName = base + f.getName();
        FileInputStream goIn = new FileInputStream(f);
        TarArchiveEntry tarEntry = new TarArchiveEntry(f, entryName);
        taro.setLongFileMode(TarArchiveOutputStream.LONGFILE_GNU);
        taro.putArchiveEntry(tarEntry);
        if (f.isFile()) {
            IOUtils.copy(goIn, taro);
            taro.closeArchiveEntry();
        } else {
            taro.closeArchiveEntry();
            File[] children = f.listFiles();
            if (children != null) {
                for (File child : children) {
                    addFileToTarGz(taro, child.getAbsolutePath(), entryName + ""/"");
                }
            }
        }
        taro.close();
        goIn.close();
    }
 <SPLIT>     public static void copyFile(File src, File dst) throws IOException {
        try {
            InputStream in = new FileInputStream(src);
            OutputStream out = new FileOutputStream(dst);
            byte[] buf = new byte[TEMP_FILE_BUFFER_SIZE];
            int len;
            while ((len = in.read(buf)) > 0) out.write(buf, 0, len);
            in.close();
            out.close();
        } catch (FileNotFoundException e1) {
            MLUtil.runtimeError(e1, src.toString());
        } catch (IOException e2) {
            MLUtil.runtimeError(e2, src.toString());
        }
    }
",166,,LABEL_1,LABEL_1,LABEL_1,-1,"addFileToTarGz,taro,path,base,f,entryName,goIn,tarEntry,children,child",,9,31,0,,0,GA,4163,0.64414918,failed,"[';f = 0', ';child = 0', ';Toro = 0', ';url = 0', ';print(url)', ';uri = 0', ';ath = 0', ';resource = 0', ';url = 0', ';cache = 0', ';absolute = 0', ';print(absolute)', ';site = 0', ';id = 0', ';pre = 0']"
204,"    public static String getFileContentFromPlugin(String path) {
        URL url = getURLFromPlugin(path);
        StringBuffer sb = new StringBuffer();
        try {
            Scanner scanner = new Scanner(url.openStream());
            while (scanner.hasNextLine()) {
                String line = scanner.nextLine();
                sb.append(line + ""\n"");
            }
            scanner.close();
        } catch (Exception e) {
            e.printStackTrace();
            return """";
        }
        return sb.toString();
    }
 <SPLIT>     protected void doSetInput(IEditorInput input, IProgressMonitor monitor) throws CoreException {
        IWorkspaceRoot root = ResourcesPlugin.getWorkspace().getRoot();
        IFileFormat format = null;
        Object source = null;
        InputStream in = null;
        try {
            IPath path;
            if (input instanceof IStorageEditorInput) {
                IStorage s = ((IStorageEditorInput) input).getStorage();
                in = s.getContents();
                if (s instanceof IFile) {
                    IFile file = (IFile) s;
                    path = file.getRawLocation();
                    if (root.exists(path)) {
                        path = root.getLocation().append(path);
                    }
                    source = path.toFile();
                }
            } else if (input instanceof IPathEditorInput) {
                path = ((IPathEditorInput) input).getPath();
                source = path.toFile();
            } else if (input instanceof IURIEditorInput) {
                URI uri = ((IURIEditorInput) input).getURI();
                if (URIUtil.isFileURI(uri)) {
                    source = URIUtil.toFile(uri);
                } else {
                    URL url = URIUtil.toURL(uri);
                    in = url.openStream();
                }
            }
            if (source == null) {
                if (!in.markSupported()) {
                    in = new BufferedInputStream(in);
                }
                in.mark(10);
                source = in;
            }
            IContentDescription cd = Platform.getContentTypeManager().getDescriptionFor(in, input.getName(), new QualifiedName[] { ImageCore.VALID_FORMATS });
            if (in != null) {
                in.reset();
            }
            Collection<?> valid = (Collection<?>) cd.getProperty(ImageCore.VALID_FORMATS);
            if (valid.isEmpty()) throw new CoreException(new Status(Status.ERROR, ImageUI.PLUGIN_ID, ""Unsupported file format.""));
            ImageInputStream stream = ImageIO.createImageInputStream(source);
            format = (IFileFormat) valid.iterator().next();
            IDocument document = format.decode(stream, monitor);
            setDocument(document);
        } catch (IOException e) {
            Status status = new Status(Status.ERROR, ImageUI.PLUGIN_ID, ""IO Error"", e);
            throw new CoreException(status);
        } finally {
            if (in != null) {
                try {
                    in.close();
                } catch (IOException e) {
                }
            }
        }
        super.setInput(input);
    }
",103,,LABEL_0,LABEL_0,LABEL_0,-1,"getFileContentFromPlugin,path,url,sb,scanner,line",,5,12,0,,0,GA,2761,0.456031704,failed,[]
205,"    public ActionForward execute(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {
        InstanciaDelegate delegate = RegistroManager.recuperarInstancia(request);
        if (delegate == null) {
            ActionErrors errors = new ActionErrors();
            errors.add(null, new ActionError(""errors.session""));
            saveErrors(request, errors);
            return mapping.findForward(""fail"");
        }
        AyudaPantalla ayudaPantalla = delegate.obtenerAyudaPantalla();
        TraAyudaPantalla traAyudaPantalla = (TraAyudaPantalla) ayudaPantalla.getTraduccion();
        String urlSonido = traAyudaPantalla.getUrlSonido();
        if (urlSonido == null) {
            return null;
        }
        URL url = new URL(urlSonido);
        URLConnection urlConnection = url.openConnection();
        urlConnection.connect();
        String tipoMime = urlConnection.getContentType();
        log.debug(""Tipo Mime: "" + tipoMime);
        Map audioOptions = new HashMap();
        if (tipoMime.indexOf(""audio"") != -1 || tipoMime.indexOf(""asf"") != -1 || tipoMime.equals(""unknown/unknown"")) {
            audioOptions.put(""id"", ""MediaPlayer"");
            audioOptions.put(""codeBase"", ""http://activex.microsoft.com/activex/controls/mplayer/en/nsmp2inf.cab#Version=6,4,7,1112"");
            audioOptions.put(""classId"", ""CLSID:22D6F312-B0F6-11D0-94AB-0080C74C7E95"");
            audioOptions.put(""mimeType"", ""application/x-mplayer2"");
            audioOptions.put(""urlSonido"", urlSonido);
            audioOptions.put(""pluginSpage"", ""http://www.microsoft.com/Windows/Downloads/Contents/Products/MediaPlayer/"");
        } else if (tipoMime.indexOf(""real"") != -1) {
            audioOptions.put(""id"", ""RVOCX"");
            audioOptions.put(""codeBase"", """");
            audioOptions.put(""classId"", ""clsid:CFCDAA03-8BE4-11cf-B84B-0020AFBBCCFA"");
            audioOptions.put(""mimeType"", ""audio/x-pn-realaudio-plugin"");
            audioOptions.put(""urlSonido"", urlSonido);
            audioOptions.put(""pluginSpage"", """");
        }
        request.setAttribute(""audioOptions"", audioOptions);
        log.debug(""entra success"");
        return mapping.findForward(""success"");
    }
 <SPLIT>     public static boolean decodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }
",406,"    public ActionForward handle(ActionMapping Mapped, ActionForm upload, HttpServletRequest route, HttpServletResponse output) throws Exception {
        InstanciaDelegatrolelegatete = RegistroManager.recuperarInstancia(route);
        if (rolelegate == null) {
            ActionErrors err = new ActionErrors();
            err.add(null, new ActionError(""errors.session""));
            saveErrors(route, err);
            return Mapped.findForward(""fail"");
        }
        AyudaPantalla ayayudaPatantala rolelegate.obtenerAyudaPantalla();
        TraAyudaPantalla ttraAyudaPandlla= (TraAyudaPantalla) ayudaPatantala.getTraduccion();
        StringUrlSonidao = traAyudaPandlla.getUrlSonido();
        if (UrlSonida == null) {
            return null;
        }
        URL image = new URL(UrlSonida);
        URLConnection ureventConnector image.openConnection();
        eventConnector.connect();
        String ttipoImize= eventConnector.getContentType();
        log.debug(""Tipo Mime: "" + tipoImize);
        Map videoOptions = new HashMap();
        if (tipoImize.indexOf(""audio"") != -1 || tipoImize.indexOf(""asf"") != -1 || tipoImize.equals(""unknown/unknown"")) {
            videoOptions.put(""id"", ""MediaPlayer"");
            videoOptions.put(""codeBase"", ""http://activex.microsoft.com/activex/controls/mplayer/en/nsmp2inf.cab#Version=6,4,7,1112"");
            videoOptions.put(""classId"", ""CLSID:22D6F312-B0F6-11D0-94AB-0080C74C7E95"");
            videoOptions.put(""mimeType"", ""application/x-mplayer2"");
            videoOptions.put(""UrlSonida"", UrlSonida);
            videoOptions.put(""pluginSpage"", ""http://www.microsoft.com/Windows/Downloads/Contents/Products/MediaPlayer/"");
        } else if (tipoImize.indexOf(""real"") != -1) {
            videoOptions.put(""id"", ""RVOCX"");
            videoOptions.put(""codeBase"", """");
            videoOptions.put(""classId"", ""clsid:CFCDAA03-8BE4-11cf-B84B-0020AFBBCCFA"");
            videoOptions.put(""mimeType"", ""audio/x-pn-realaudio-plugin"");
            videoOptions.put(""UrlSonida"", UrlSonida);
            videoOptions.put(""pluginSpage"", """");
        }
        route.setAttribute(""videoOptions"", videoOptions);
        log.debug(""entra success"");
        return Mapped.findForward(""success"");
    }
",LABEL_0,LABEL_0,0.536156774,1,"execute,mapping,form,request,response,delegate,errors,ayudaPantalla,traAyudaPantalla,urlSonido,url,urlConnection,tipoMime,audioOptions",,14,53,0,"execute:handle,mapping:Mapped,form:upload,request:route,response:output,delegate:rolelegate,errors:err,ayudaPantalla:ayudaPatantala,traAyudaPantalla:traAyudaPandlla,urlSonido:UrlSonida,url:image,urlConnection:eventConnector,tipoMime:tipoImize,audioOptions:videoOptions,",0,GA,3130,0.607670999,ga,[]
206,"    protected void innerProcess(ProcessorURI curi) throws InterruptedException {
        Pattern regexpr = curi.get(this, STRIP_REG_EXPR);
        ReplayCharSequence cs = null;
        try {
            cs = curi.getRecorder().getReplayCharSequence();
        } catch (Exception e) {
            curi.getNonFatalFailures().add(e);
            logger.warning(""Failed get of replay char sequence "" + curi.toString() + "" "" + e.getMessage() + "" "" + Thread.currentThread().getName());
            return;
        }
        MessageDigest digest = null;
        try {
            try {
                digest = MessageDigest.getInstance(SHA1);
            } catch (NoSuchAlgorithmException e1) {
                e1.printStackTrace();
                return;
            }
            digest.reset();
            String s = null;
            if (regexpr != null) {
                s = cs.toString();
            } else {
                Matcher m = regexpr.matcher(cs);
                s = m.replaceAll("" "");
            }
            digest.update(s.getBytes());
            byte[] newDigestValue = digest.digest();
            curi.setContentDigest(SHA1, newDigestValue);
        } finally {
            if (cs != null) {
                try {
                    cs.close();
                } catch (IOException ioe) {
                    logger.warning(TextUtils.exceptionToString(""Failed close of ReplayCharSequence."", ioe));
                }
            }
        }
    }
 <SPLIT>     public static String getMD5(String _pwd) {
        try {
            MessageDigest md = MessageDigest.getInstance(""MD5"");
            md.update(_pwd.getBytes());
            return toHexadecimal(new String(md.digest()).getBytes());
        } catch (NoSuchAlgorithmException x) {
            x.printStackTrace();
            return """";
        }
    }
",264,,LABEL_1,LABEL_0,,-4,"innerProcess,curi,regexpr,cs,digest,s,m,newDigestValue",,,,0,,0,Greedy,1,0.000404648,,[]
207,"    private void forBundle(BundleManipulator manip) {
        ByteArrayOutputStream bout = null;
        try {
            bout = new ByteArrayOutputStream();
            ZipOutputStream zout = new ZipOutputStream(bout);
            Bundle bundle = getBundle();
            Enumeration<URL> files = bundle.findEntries(""/"", ""*.vm"", false);
            if (files != null) {
                while (files.hasMoreElements()) {
                    URL url = files.nextElement();
                    String name = url.getFile();
                    if (name.startsWith(""/"")) {
                        name = name.substring(1);
                    }
                    if (manip.includeEntry(name)) {
                        zout.putNextEntry(new ZipEntry(name));
                        IOUtils.copy(url.openStream(), zout);
                    }
                }
            }
            manip.finish(bundle, zout);
            Manifest mf = new Manifest(bundle.getEntry(""META-INF/MANIFEST.MF"").openStream());
            zout.putNextEntry(new ZipEntry(""META-INF/MANIFEST.MF""));
            mf.write(zout);
            zout.close();
            File tmpFile = File.createTempFile(TEMPLATES_SYMBOLIC_NAME, "".jar"");
            FileUtils.writeByteArrayToFile(tmpFile, bout.toByteArray());
            if (pluginAccessor.getPlugin(TEMPLATES_SYMBOLIC_NAME) != null) {
                pluginController.uninstall(pluginAccessor.getPlugin(TEMPLATES_SYMBOLIC_NAME));
            } else if (pluginAccessor.getPlugin(TEMPLATES_PLUGIN_KEY) != null) {
                pluginController.uninstall(pluginAccessor.getPlugin(TEMPLATES_PLUGIN_KEY));
            }
            pluginController.installPlugin(new JarPluginArtifact(tmpFile));
            ServiceReference ref = bundleContext.getServiceReference(PackageAdmin.class.getName());
            ((PackageAdmin) bundleContext.getService(ref)).refreshPackages(null);
            tmpFile.delete();
        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            IOUtils.closeQuietly(bout);
        }
    }
 <SPLIT>     public static void main(String[] args) {
        try {
            URL url = new URL(args[0]);
            HttpURLConnection httpCon = (HttpURLConnection) url.openConnection();
            httpCon.setDoOutput(true);
            httpCon.setRequestMethod(""PUT"");
            OutputStreamWriter out = new OutputStreamWriter(httpCon.getOutputStream());
            out.write(""fatal error"");
            out.close();
            System.out.println(""end"");
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
",361,,LABEL_0,LABEL_1,,-4,"forBundle,manip,bout,zout,bundle,files,url,name,mf,tmpFile,ref",,,,0,,0,Greedy,1,0.000498207,,[]
208,"    static void copyFile(File in, File out) throws IOException {
        FileChannel source = new FileInputStream(in).getChannel();
        FileChannel destination = new FileOutputStream(out).getChannel();
        source.transferTo(0, source.size(), destination);
        source.close();
        destination.close();
    }
 <SPLIT>     public void testHttpsConnection() throws Throwable {
        setUpStoreProperties();
        try {
            SSLContext ctx = getContext();
            ServerSocket ss = ctx.getServerSocketFactory().createServerSocket(0);
            TestHostnameVerifier hnv = new TestHostnameVerifier();
            HttpsURLConnection.setDefaultHostnameVerifier(hnv);
            URL url = new URL(""https://localhost:"" + ss.getLocalPort());
            HttpsURLConnection connection = (HttpsURLConnection) url.openConnection();
            SSLSocket peerSocket = (SSLSocket) doInteraction(connection, ss);
            checkConnectionStateParameters(connection, peerSocket);
            connection.connect();
        } finally {
            tearDownStoreProperties();
        }
    }
",68,,LABEL_0,LABEL_0,LABEL_0,-1,"copyFile,in,out,source,destination",,5,12,0,,0,GA,1992,0.28303467,failed,[';copyFile = 0']
209,"    public void convert(File src, File dest) throws IOException {
        InputStream in = new BufferedInputStream(new FileInputStream(src));
        DcmParser p = pfact.newDcmParser(in);
        Dataset ds = fact.newDataset();
        p.setDcmHandler(ds.getDcmHandler());
        try {
            FileFormat format = p.detectFileFormat();
            if (format != FileFormat.ACRNEMA_STREAM) {
                System.out.println(""\n"" + src + "": not an ACRNEMA stream!"");
                return;
            }
            p.parseDcmFile(format, Tags.PixelData);
            if (ds.contains(Tags.StudyInstanceUID) || ds.contains(Tags.SeriesInstanceUID) || ds.contains(Tags.SOPInstanceUID) || ds.contains(Tags.SOPClassUID)) {
                System.out.println(""\n"" + src + "": contains UIDs!"" + "" => probable already DICOM - do not convert"");
                return;
            }
            boolean hasPixelData = p.getReadTag() == Tags.PixelData;
            boolean inflate = hasPixelData && ds.getInt(Tags.BitsAllocated, 0) == 12;
            int pxlen = p.getReadLength();
            if (hasPixelData) {
                if (inflate) {
                    ds.putUS(Tags.BitsAllocated, 16);
                    pxlen = pxlen * 4 / 3;
                }
                if (pxlen != (ds.getInt(Tags.BitsAllocated, 0) >>> 3) * ds.getInt(Tags.Rows, 0) * ds.getInt(Tags.Columns, 0) * ds.getInt(Tags.NumberOfFrames, 1) * ds.getInt(Tags.NumberOfSamples, 1)) {
                    System.out.println(""\n"" + src + "": mismatch pixel data length!"" + "" => do not convert"");
                    return;
                }
            }
            ds.putUI(Tags.StudyInstanceUID, uid(studyUID));
            ds.putUI(Tags.SeriesInstanceUID, uid(seriesUID));
            ds.putUI(Tags.SOPInstanceUID, uid(instUID));
            ds.putUI(Tags.SOPClassUID, classUID);
            if (!ds.contains(Tags.NumberOfSamples)) {
                ds.putUS(Tags.NumberOfSamples, 1);
            }
            if (!ds.contains(Tags.PhotometricInterpretation)) {
                ds.putCS(Tags.PhotometricInterpretation, ""MONOCHROME2"");
            }
            if (fmi) {
                ds.setFileMetaInfo(fact.newFileMetaInfo(ds, UIDs.ImplicitVRLittleEndian));
            }
            OutputStream out = new BufferedOutputStream(new FileOutputStream(dest));
            try {
            } finally {
                ds.writeFile(out, encodeParam());
                if (hasPixelData) {
                    if (!skipGroupLen) {
                        out.write(PXDATA_GROUPLEN);
                        int grlen = pxlen + 8;
                        out.write((byte) grlen);
                        out.write((byte) (grlen >> 8));
                        out.write((byte) (grlen >> 16));
                        out.write((byte) (grlen >> 24));
                    }
                    out.write(PXDATA_TAG);
                    out.write((byte) pxlen);
                    out.write((byte) (pxlen >> 8));
                    out.write((byte) (pxlen >> 16));
                    out.write((byte) (pxlen >> 24));
                }
                if (inflate) {
                    int b2, b3;
                    for (; pxlen > 0; pxlen -= 3) {
                        out.write(in.read());
                        b2 = in.read();
                        b3 = in.read();
                        out.write(b2 & 0x0f);
                        out.write(b2 >> 4 | ((b3 & 0x0f) << 4));
                        out.write(b3 >> 4);
                    }
                } else {
                    for (; pxlen > 0; --pxlen) {
                        out.write(in.read());
                    }
                }
                out.close();
            }
            System.out.print('.');
        } finally {
            in.close();
        }
    }
 <SPLIT>     private static void readAndRewrite(File inFile, File outFile) throws IOException {
        ImageInputStream iis = ImageIO.createImageInputStream(new BufferedInputStream(new FileInputStream(inFile)));
        DcmParser dcmParser = DcmParserFactory.getInstance().newDcmParser(iis);
        Dataset ds = DcmObjectFactory.getInstance().newDataset();
        dcmParser.setDcmHandler(ds.getDcmHandler());
        dcmParser.parseDcmFile(null, Tags.PixelData);
        PixelDataReader pdReader = pdFact.newReader(ds, iis, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());
        System.out.println(""reading "" + inFile + ""..."");
        pdReader.readPixelData(false);
        ImageOutputStream out = ImageIO.createImageOutputStream(new BufferedOutputStream(new FileOutputStream(outFile)));
        DcmEncodeParam dcmEncParam = DcmEncodeParam.IVR_LE;
        ds.writeDataset(out, dcmEncParam);
        ds.writeHeader(out, dcmEncParam, Tags.PixelData, dcmParser.getReadVR(), dcmParser.getReadLength());
        System.out.println(""writing "" + outFile + ""..."");
        PixelDataWriter pdWriter = pdFact.newWriter(pdReader.getPixelDataArray(), false, ds, out, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());
        pdWriter.writePixelData();
        out.flush();
        out.close();
        System.out.println(""done!"");
    }
",765,"    public void CONception(File uri, File dc) throws IOException {
        InputStream stream = new BufferedInputStream(new FileInputStream(uri));
        DcmParser p = ffact.newDcmParser(stream);
        Dataset  DS = fact.newDataset();
        f.setDcmHandler( DS.getDcmHandler());
        try {
            FileFormat url = f.detectFileFormat();
            if (url != FileFormat.ACRNEMA_STREAM) {
                System.lib.println(""
"" + uri + "": not an ACRNEMA stream!"");
                return;
            }
            f.parseDcmFile(url, Tags.PixelData);
            if ( DS.contains(Tags.StudyInstanceUID) ||  DS.contains(Tags.SeriesInstanceUID) ||  DS.contains(Tags.SOPInstanceUID) ||  DS.contains(Tags.SOPClassUID)) {
                System.lib.println(""
"" + uri + "": contains UIDs!"" + "" => probable already DICOM - do not convert"");
                return;
            }
            boolean hasPixelSize = f.getReadTag() == Tags.PixelData;
            boolean iinflate= hhasPixelSize&&  DS.getInt(Tags.BitsAllocated, 0) == 12;
            int pngsize = f.getReadLength();
            if (hasPixelSize) {
                if (inflate) {
                     DS.putUS(Tags.BitsAllocated, 16);
                    pngsize = pngsize * 4 / 3;
                }
                if (pxlenpngsize DS.getInt(Tags.BitsAllocated, 0) >>> 3) *  DS.getInt(Tags.Rows, 0) *  DS.getInt(Tags.Columns, 0) *  DS.getInt(Tags.NumberOfFrames, 1) *  DS.getInt(Tags.NumberOfSamples, 1)) {
                    System.lib.println(""
"" + uri + "": mismatch pixel data length!"" + "" => do not convert"");
                    return;
                }
            }
             DS.putUI(Tags.StudyInstanceUID, uid(studyUID));
             DS.putUI(Tags.SeriesInstanceUID, uid(seriesUID));
             DS.putUI(Tags.SOPInstanceUID, uid(instUID));
             DS.putUI(Tags.SOPClassUID, classUID);
            if (! DS.contains(Tags.NumberOfSamples)) {
                 DS.putUS(Tags.NumberOfSamples, 1);
            }
            if (! DS.contains(Tags.PhotometricInterpretation)) {
                 DS.putCS(Tags.PhotometricInterpretation, ""MONOCHROME2"");
            }
            if (fmi) {
                 DS.setFileMetaInfo(fact.newFileMetaInfo( DS, UIDs.ImplicitVRLittleEndian));
            }
            OutputStrealibut = new BufferedOutputStream(new FileOutputStream(dc));
            try {
            } finally {
                 DS.writeFile(lib, encodeParam());
                if (hasPixelSize) {
                    if (!skipGroupLen) {
                        lib.write(PXDATA_GROUPLEN);
                        int grlen = pngsize + 8;
                        lib.write((byte) grlen);
                        lib.write((byte) (grlen >> 8));
                        lib.write((byte) (grlen >> 16));
                        lib.write((byte) (grlen >> 24));
                    }
                    lib.write(PXDATA_TAG);
                    oulibrite((byte) pngsize);
                    oulibrite((byte) (pngsize >> 8));
                    oulibrite((byte) (pngsize >> 16));
                    oulibrite((byte) (pngsize >> 24));
                }
                if (inflate) {
                    int b2, b3;
                    for (; pngsize > 0; pngsize -= 3) {
                        out.libte(stream.read());
                        b2 = stream.read();
                        b3 = stream.read();
                        lib.write(b2 & 0x0f);
                        lib.write(b2 >> 4 | ((b3 & 0x0f) << 4));
                        lib.write(b3 >> 4);
                    }
                } else {
                    for (; pngsize > 0; --pngsize) {
                        out.libte(stream.read());
                    }
                }
                lib.close();
            }
            System.lib.print('.');
        } finally {
            stream.close();
        }
    }
",LABEL_1,LABEL_1,0.666383684,1,"convert,src,dest,in,p,ds,format,hasPixelData,inflate,pxlen,out",,11,92,3,"convert:CONception,src:uri,dest:dc,in:stream,p:f,ds: DS,format:url,hasPixelData:hasPixelSize,inflate:inflate,pxlen:pngsize,out:lib,",1,GA,2684,0.611611823,ga,[]
210,"    private static void sendExceptionToServer(String server, Throwable ex, String config, String prob) {
        try {
            StringBuilder dataSB = new StringBuilder();
            dataSB.append(URLEncoder.encode(""secret"", ""UTF-8""));
            dataSB.append('=');
            dataSB.append(URLEncoder.encode(""badsecurity"", ""UTF-8""));
            dataSB.append('&');
            dataSB.append(URLEncoder.encode(""version"", ""UTF-8""));
            dataSB.append('=');
            dataSB.append(URLEncoder.encode(BuildInfo.revisionNumber, ""UTF-8""));
            dataSB.append('&');
            dataSB.append(URLEncoder.encode(""os"", ""UTF-8""));
            dataSB.append('=');
            dataSB.append(URLEncoder.encode(System.getProperty(""os.name"") + "" "" + System.getProperty(""os.version""), ""UTF-8""));
            dataSB.append('&');
            dataSB.append(URLEncoder.encode(""user"", ""UTF-8""));
            dataSB.append('=');
            dataSB.append(URLEncoder.encode(System.getProperty(""user.name""), ""UTF-8""));
            dataSB.append('&');
            dataSB.append(URLEncoder.encode(""msg"", ""UTF-8""));
            dataSB.append('=');
            dataSB.append(URLEncoder.encode(ex.getMessage(), ""UTF-8""));
            ByteArrayOutputStream trace = new ByteArrayOutputStream();
            ex.printStackTrace(new PrintStream(trace));
            dataSB.append('&');
            dataSB.append(URLEncoder.encode(""trace"", ""UTF-8""));
            dataSB.append('=');
            dataSB.append(URLEncoder.encode(trace.toString(), ""UTF-8""));
            if (config != null) {
                dataSB.append('&');
                dataSB.append(URLEncoder.encode(""config"", ""UTF-8""));
                dataSB.append('=');
                dataSB.append(URLEncoder.encode(config, ""UTF-8""));
            }
            if (prob != null) {
                dataSB.append('&');
                dataSB.append(URLEncoder.encode(""problem"", ""UTF-8""));
                dataSB.append('=');
                dataSB.append(URLEncoder.encode(prob, ""UTF-8""));
            }
            URL url = new URL(errorServerURL);
            URLConnection conn = url.openConnection();
            conn.setDoOutput(true);
            OutputStreamWriter wr = new OutputStreamWriter(conn.getOutputStream());
            wr.write(dataSB.toString());
            wr.flush();
            BufferedReader rd = new BufferedReader(new InputStreamReader(conn.getInputStream()));
            String response = null;
            String line = null;
            while ((line = rd.readLine()) != null) {
                if (response == null) response = line; else System.out.println(line);
            }
            wr.close();
            rd.close();
            if (response.equals(""success"")) System.out.println(""Exception sent to maRla development team""); else System.out.println(""Unable to send exception to development team: "" + response);
        } catch (IOException ex2) {
            System.out.println(""Unable to send exception to development team: "" + ex2.getMessage());
        }
    }
 <SPLIT>     public void Load(String fname) throws Exception {
        File f = null;
        try {
            if ("""".equals(fname) || fname == null) throw new Exception();
            System.out.println(""Loading mapfile "" + fname);
        } catch (Exception e) {
            throw new Exception(""File not found"");
        }
        aType = null;
        fieldtype.clear();
        creatures.clear();
        aElement = new String("""");
        content = null;
        Ax = -1;
        Ay = -1;
        aTemplate = -1;
        SAXParserFactory factory = SAXParserFactory.newInstance();
        data_read = 0;
        URL url = this.game.mainClass.getClassLoader().getResource(fname);
        if (url == null) {
            throw new Exception(""Can't load map from : "" + fname);
        }
        try {
            SAXParser parser = factory.newSAXParser();
            parser.parse(url.openStream(), this);
        } catch (Exception e) {
            System.out.println(""Can't open XML : "" + e);
        }
        for (int i = 0; i < fieldtype.size(); i++) {
            System.out.println((MapField) fieldtype.get(i));
        }
        game.player.setpos(start_x, start_y);
        System.out.println(""Player starting position set"");
        start_x = -1;
        start_y = -1;
        System.out.println(""Map \"""" + fname + ""\"" loaded"");
    }
",672,"    private static void sendExceptionAsService(String root, Throwable exit, String file, String probs) {
        try {
            StringBuilder errorSB = new StringBuilder();
            errorSB.append(URLEncoder.encode(""secret"", ""UTF-8""));
            errorSB.append('=');
            errorSB.append(URLEncoder.encode(""badsecurity"", ""UTF-8""));
            errorSB.append('&');
            errorSB.append(URLEncoder.encode(""version"", ""UTF-8""));
            errorSB.append('=');
            errorSB.append(URLEncoder.encode(BuildInfo.revisionNumber, ""UTF-8""));
            errorSB.append('&');
            errorSB.append(URLEncoder.encode(""os"", ""UTF-8""));
            errorSB.append('=');
            errorSB.append(URLEncoder.encode(System.getProperty(""os.name"") + "" "" + System.getProperty(""os.version""), ""UTF-8""));
            errorSB.append('&');
            errorSB.append(URLEncoder.encode(""user"", ""UTF-8""));
            errorSB.append('=');
            errorSB.append(URLEncoder.encode(System.getProperty(""user.name""), ""UTF-8""));
            errorSB.append('&');
            errorSB.append(URLEncoder.encode(""msg"", ""UTF-8""));
            errorSB.append('=');
            errorSB.append(URLEncoder.encode(exit.getMessage(), ""UTF-8""));
            ByteArrayOutputStream temp = new ByteArrayOutputStream();
            exit.printStackTrace(new PrintStream(temp));
            errorSB.append('&');
            errorSB.append(URLEncoder.encode(""trace"", ""UTF-8""));
            errorSB.append('=');
            errorSB.append(URLEncoder.encode(temp.toString(), ""UTF-8""));
            if (file != null) {
                errorSB.append('&');
                errorSB.append(URLEncoder.encode(""config"", ""UTF-8""));
                errorSB.append('=');
                errorSB.append(URLEncoder.encode(file, ""UTF-8""));
            }
            if (probs != null) {
                errorSB.append('&');
                errorSB.append(URLEncoder.encode(""problem"", ""UTF-8""));
                errorSB.append('=');
                errorSB.append(URLEncoder.encode(probs, ""UTF-8""));
            }
            URL url = new URL(errorServerURL);
            URLConnection conn = url.openConnection();
            conn.setDoOutput(true);
            OutputStreamWriter wr = new OutputStreamWriter(conn.getOutputStream());
            wr.write(errorSB.toString());
            wr.flush();
            BufferedReader rd = new BufferedReader(new InputStreamReader(conn.getInputStream()));
            String response = null;
            String line = null;
            while ((line = rd.readLine()) != null) {
                if (response == null) response = line; else System.out.println(line);
            }
            wr.close();
            rd.close();
            if (response.equals(""success"")) System.out.println(""Exception sent to maRla development team""); else System.out.println(""Unable to send exception to development team: "" + response);
        } catch (IOException ex2) {
            System.out.println(""Unable to send exception to development team: "" + ex2.getMessage());
        }
    }
",LABEL_0,LABEL_0,LABEL_1,1,"sendExceptionToServer,server,ex,config,prob,dataSB,trace","sendExceptionToServer:0.0009489655494689941,server:-0.00035125017166137695,ex:-0.0003979802131652832,config:-0.00013446807861328125,prob:-0.000541985034942627,dataSB:-0.0027517080307006836,trace:0.0003415346145629883,",7,49,0,"sendExceptionToServer:sendExceptionAsService,trace:temp,config:file,server:root,ex:exit,prob:probs,dataSB:errorSB,",0,Greedy,378,0.07554421,replace,[]
211,"    public static void copyFile(File srcFile, File destFile) throws IOException {
        InputStream src = new FileInputStream(srcFile);
        OutputStream dest = new FileOutputStream(destFile);
        byte buffer[] = new byte[1024];
        int read = 1;
        while (read > 0) {
            read = src.read(buffer);
            if (read > 0) {
                dest.write(buffer, 0, read);
            }
        }
        src.close();
        dest.close();
    }
 <SPLIT>     private void displayDiffResults() throws IOException {
        File outFile = File.createTempFile(""diff"", "".htm"");
        outFile.deleteOnExit();
        FileOutputStream outStream = new FileOutputStream(outFile);
        BufferedWriter out = new BufferedWriter(new OutputStreamWriter(outStream));
        out.write(""<html><head><title>LOC Differences</title>\n"" + SCRIPT + ""</head>\n"" + ""<body bgcolor='#ffffff'>\n"" + ""<div onMouseOver=\""window.defaultStatus='Metrics'\"">\n"");
        if (addedTable.length() > 0) {
            out.write(""<table border><tr><th>Files Added:</th>"" + ""<th>Add</th><th>Type</th></tr>"");
            out.write(addedTable.toString());
            out.write(""</table><br><br>"");
        }
        if (modifiedTable.length() > 0) {
            out.write(""<table border><tr><th>Files Modified:</th>"" + ""<th>Base</th><th>Del</th><th>Mod</th><th>Add</th>"" + ""<th>Total</th><th>Type</th></tr>"");
            out.write(modifiedTable.toString());
            out.write(""</table><br><br>"");
        }
        if (deletedTable.length() > 0) {
            out.write(""<table border><tr><th>Files Deleted:</th>"" + ""<th>Del</th><th>Type</th></tr>"");
            out.write(deletedTable.toString());
            out.write(""</table><br><br>"");
        }
        out.write(""<table name=METRICS BORDER>\n"");
        if (modifiedTable.length() > 0 || deletedTable.length() > 0) {
            out.write(""<tr><td>Base:&nbsp;</td><td>"");
            out.write(Long.toString(base));
            out.write(""</td></tr>\n<tr><td>Deleted:&nbsp;</td><td>"");
            out.write(Long.toString(deleted));
            out.write(""</td></tr>\n<tr><td>Modified:&nbsp;</td><td>"");
            out.write(Long.toString(modified));
            out.write(""</td></tr>\n<tr><td>Added:&nbsp;</td><td>"");
            out.write(Long.toString(added));
            out.write(""</td></tr>\n<tr><td>New & Changed:&nbsp;</td><td>"");
            out.write(Long.toString(added + modified));
            out.write(""</td></tr>\n"");
        }
        out.write(""<tr><td>Total:&nbsp;</td><td>"");
        out.write(Long.toString(total));
        out.write(""</td></tr>\n</table></div>"");
        redlinesOut.close();
        out.flush();
        InputStream redlines = new FileInputStream(redlinesTempFile);
        byte[] buffer = new byte[4096];
        int bytesRead;
        while ((bytesRead = redlines.read(buffer)) != -1) outStream.write(buffer, 0, bytesRead);
        outStream.write(""</BODY></HTML>"".getBytes());
        outStream.close();
        Browser.launch(outFile.toURL().toString());
    }
",98,"    public static void copyFiles(File destfile, File restfile) throws IOException {
        InputStream url = new FileInputStream(destfile);
        OutputStream Dest = new FileOutputStream(restfile);
        byte buffer[] = new byte[1024];
        int read = 1;
        while (read > 0) {
            read = url.read(buffer);
            if (read > 0) {
                Dest.write(buffer, 0, read);
            }
        }
        url.close();
        Dest.close();
    }
",LABEL_1,LABEL_1,LABEL_0,1,"copyFile,srcFile,destFile,src,dest,buffer,read","copyFile:0.013025343418121338,srcFile:0.0011481046676635742,destFile:0.0036203861236572266,src:0.0003978610038757324,dest:0.0004885196685791016,buffer:0.0001881718635559082,read:-0.01647406816482544,",5,11,0,"copyFile:copyFiles,destFile:restfile,srcFile:destfile,dest:Dest,src:url,",0,Greedy,181,0.030873326,replace,[]
212,"    private String encryptPassword(String password) throws NoSuchAlgorithmException {
        StringBuffer encryptedPassword = new StringBuffer();
        MessageDigest md5 = MessageDigest.getInstance(""MD5"");
        md5.reset();
        md5.update(password.getBytes());
        byte digest[] = md5.digest();
        for (int i = 0; i < digest.length; i++) {
            String hex = Integer.toHexString(0xFF & digest[i]);
            if (hex.length() == 1) {
                encryptedPassword.append('0');
            }
            encryptedPassword.append(hex);
        }
        return encryptedPassword.toString();
    }
 <SPLIT>     private static String encrypt(String password, String encryptType) {
        try {
            MessageDigest md = MessageDigest.getInstance(encryptType);
            md.update(password.getBytes());
            byte[] hash = md.digest();
            StringBuffer hexString = new StringBuffer();
            for (int i = 0; i < hash.length; i++) {
                if ((0xff & hash[i]) < 0x10) {
                    hexString.append(""0"" + Integer.toHexString((0xFF & hash[i])));
                } else {
                    hexString.append(Integer.toHexString(0xFF & hash[i]));
                }
            }
            password = hexString.toString();
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        }
        return password.toUpperCase();
    }
",127,,LABEL_1,LABEL_1,LABEL_1,-1,"encryptPassword,password,encryptedPassword,md5,digest,i,hex",,6,18,0,,0,GA,3134,0.465925149,failed,"[';encryptPassword = 0', ';password = 0', ';print(password)']"
213,"    public void serialize(OutputStream out) throws IOException, BadIMSCPException {
        ensureParsed();
        ZipFilePackageParser parser = utils.getIMSCPParserFactory().createParser();
        parser.setContentPackage(cp);
        if (on_disk != null) on_disk.delete();
        on_disk = createTemporaryFile();
        parser.serialize(on_disk);
        InputStream in = new FileInputStream(on_disk);
        IOUtils.copy(in, out);
    }
 <SPLIT>     public static File copyFile(File fileToCopy, File copiedFile) {
        BufferedInputStream in = null;
        BufferedOutputStream outWriter = null;
        if (!copiedFile.exists()) {
            try {
                copiedFile.createNewFile();
            } catch (IOException e1) {
                e1.printStackTrace();
                return null;
            }
        }
        try {
            in = new BufferedInputStream(new FileInputStream(fileToCopy), 4096);
            outWriter = new BufferedOutputStream(new FileOutputStream(copiedFile), 4096);
            int c;
            while ((c = in.read()) != -1) outWriter.write(c);
            in.close();
            outWriter.close();
        } catch (FileNotFoundException e) {
            e.printStackTrace();
            return null;
        } catch (IOException e) {
            e.printStackTrace();
            return null;
        }
        return copiedFile;
    }
",81,,LABEL_1,LABEL_1,LABEL_1,-1,"serialize,out,parser,on_disk,in",,5,14,0,,0,GA,1878,0.282575289,failed,"[';serialize = 0', ';Serialify = 0']"
214,"    public void parse(InputStream stream, ContentHandler handler, Metadata metadata, ParseContext context) throws IOException, SAXException, TikaException {
        String name = metadata.get(Metadata.RESOURCE_NAME_KEY);
        if (name != null && wanted.containsKey(name)) {
            FileOutputStream out = new FileOutputStream(wanted.get(name));
            IOUtils.copy(stream, out);
            out.close();
        } else {
            if (downstreamParser != null) {
                downstreamParser.parse(stream, handler, metadata, context);
            }
        }
    }
 <SPLIT>     private static void readAndRewrite(File inFile, File outFile) throws IOException {
        ImageInputStream iis = ImageIO.createImageInputStream(new BufferedInputStream(new FileInputStream(inFile)));
        DcmParser dcmParser = DcmParserFactory.getInstance().newDcmParser(iis);
        Dataset ds = DcmObjectFactory.getInstance().newDataset();
        dcmParser.setDcmHandler(ds.getDcmHandler());
        dcmParser.parseDcmFile(null, Tags.PixelData);
        PixelDataReader pdReader = pdFact.newReader(ds, iis, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());
        System.out.println(""reading "" + inFile + ""..."");
        pdReader.readPixelData(false);
        ImageOutputStream out = ImageIO.createImageOutputStream(new BufferedOutputStream(new FileOutputStream(outFile)));
        DcmEncodeParam dcmEncParam = DcmEncodeParam.IVR_LE;
        ds.writeDataset(out, dcmEncParam);
        ds.writeHeader(out, dcmEncParam, Tags.PixelData, dcmParser.getReadVR(), dcmParser.getReadLength());
        System.out.println(""writing "" + outFile + ""..."");
        PixelDataWriter pdWriter = pdFact.newWriter(pdReader.getPixelDataArray(), false, ds, out, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());
        pdWriter.writePixelData();
        out.flush();
        out.close();
        System.out.println(""done!"");
    }
",105,,LABEL_1,LABEL_1,LABEL_1,-1,"parse,stream,handler,metadata,context,name,out",,7,19,0,,0,GA,2590,0.431701465,failed,"[';parse = 0', ';metadata = 0', ';context = 0', ';rate = 0', ';pc = 0', ';split = 0', '; transform = 0', ';url = 0', ';params = 0', ';runtime = 0', ';database = 0']"
215,"    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        String selectedPage = request.getParameter(""SelectedPage"");
        Page page = null;
        PortalRequest portalRequest = PortalRequest.getCurrentRequest();
        if (selectedPage == null) {
            try {
                Property pageProp = Property.getProperty(""HomePage"");
                selectedPage = pageProp.getValue();
            } catch (PersistentModelException e) {
                myLogger.info(""Page could not be found due to an exception"");
                response.sendError(response.SC_NOT_FOUND);
                return;
            }
        }
        myLogger.info(""Handling Page Request for Page "" + selectedPage);
        try {
            if (page == null) {
                try {
                    page = Page.getPage(Long.parseLong(selectedPage));
                } catch (NumberFormatException e) {
                    List<Page> possiblePage = Page.findByName(selectedPage);
                    if (possiblePage.size() > 0) {
                        page = possiblePage.get(0);
                    } else {
                        response.sendError(response.SC_NOT_FOUND);
                        return;
                    }
                }
            }
            if (!page.isVisibleTo(portalRequest.getCurrentUser())) {
                Property pageProp = Property.getProperty(""HomePage"");
                selectedPage = pageProp.getValue();
                page = Page.getPage(Long.parseLong(selectedPage));
            }
            try {
                Property property = Property.getProperty(""LogPageRequests"");
                if (property.getValue().toLowerCase().equals(""true"")) {
                    String referer = request.getHeader(""Referer"");
                    if (referer == null || referer.indexOf(portalRequest.getRequest().getServerName()) > 0) {
                        referer = "" "";
                    } else {
                        if (referer.length() >= 200) {
                            referer = referer.substring(0, 198);
                        }
                    }
                    PageRequest.createRequest(portalRequest.getCurrentHREF(), page, portalRequest.getCurrentUser(), portalRequest.getRequest().getRemoteAddr(), referer);
                }
            } catch (PersistentModelException e) {
                myLogger.log(Level.WARNING, ""Log Page Requests property was not found."", e);
            }
            if (page.isVisibleTo(portalRequest.getCurrentUser())) {
                HttpSession session = request.getSession();
                if (session != null) {
                    RecentlyViewedManager rvm = (RecentlyViewedManager) session.getAttribute(""ipoint.RecentlyViewedManager"");
                    if (rvm == null) {
                        rvm = new RecentlyViewedManager();
                    }
                    rvm.add(page);
                    session.setAttribute(""ipoint.RecentlyViewedManager"", rvm);
                }
                PageCacheEntry entry = null;
                if (!portalRequest.isPost() && !page.isEditableBy(portalRequest.getCurrentUser())) {
                    try {
                        int pageCacheTime = 60000;
                        try {
                            Property pageCacheTimeProperty = Property.getProperty(""PageCacheTime"");
                            pageCacheTime = Integer.parseInt(pageCacheTimeProperty.getValue());
                            pageCacheTime *= 1000;
                        } catch (PersistentModelException pme) {
                            myLogger.warning(""Ignoring Exception when retrieving PageCacheTime property"");
                        } catch (NumberFormatException nfe) {
                        }
                        entry = PageCacheEntry.find(portalRequest.getCurrentHREF(), page, portalRequest.getCurrentUser(), pageCacheTime);
                    } catch (PersistentModelException e) {
                        myLogger.log(Level.WARNING, ""An error occurred finding a page cache entry"", e);
                    }
                }
                response.setContentType(""text/html"");
                response.setHeader(""Cache-Control"", ""no-cache"");
                boolean processed = false;
                if (entry != null) {
                    String tempFile = entry.getTempFile();
                    File file = new File(tempFile);
                    if (file.exists() && file.isFile() && file.canRead()) {
                        FileReader reader = new FileReader(file);
                        BufferedReader br = new BufferedReader(reader);
                        PrintWriter out = response.getWriter();
                        out.write(""<!-- Starting to output cached page in "" + portalRequest.elapsedTime() + "" ms -->\n"");
                        while (br.ready()) {
                            out.write(br.readLine() + ""\n"");
                        }
                        out.write(""<!-- Cached output produced in "" + portalRequest.elapsedTime() + "" ms -->\n"");
                        reader.close();
                        processed = true;
                        portalRequest.getMBeans().incrementStatistics(ManagementMBeans.StatisticsType.PageTotal, page.getName() + ""-"" + page.getID(), portalRequest.elapsedTime(), true);
                    } else {
                        entry.delete();
                    }
                }
                if (!processed) {
                    PrintWriter out = response.getWriter();
                    out.write(""<!-- Output produced by iPoint Portal -->\n"");
                    PageRenderer renderer = new PageRenderer(page);
                    long startTime = System.currentTimeMillis();
                    request.setAttribute(ELConstants.IPOINT_USER, portalRequest.getCurrentUser());
                    request.setAttribute(ELConstants.IPOINT_PAGE, page);
                    request.setAttribute(ELConstants.IPOINT_TEMPLATE, page.getTemplate());
                    request.setAttribute(ELConstants.IPOINT_PORTAL_PROPERTIES, Property.getPropertiesMap());
                    request.setAttribute(ELConstants.IPOINT_USER_PROPERTIES, portalRequest.getCurrentUser().getProperties());
                    renderer.preProcess();
                    portalRequest.getMBeans().incrementStatistics(ManagementMBeans.StatisticsType.PagePreProcess, page.getName() + ""-"" + page.getID(), System.currentTimeMillis() - startTime, false);
                    long renderStart = System.currentTimeMillis();
                    renderer.render();
                    portalRequest.getMBeans().incrementStatistics(ManagementMBeans.StatisticsType.PageRender, page.getName() + ""-"" + page.getID(), System.currentTimeMillis() - renderStart, false);
                    portalRequest.getMBeans().incrementStatistics(ManagementMBeans.StatisticsType.PageTotal, page.getName() + ""-"" + page.getID(), System.currentTimeMillis() - startTime, false);
                    out.write(""<!-- output produced in "" + PortalRequest.getCurrentRequest().elapsedTime() + "" ms -->\n"");
                    if (!page.isEditableBy(portalRequest.getCurrentUser())) {
                        if (response instanceof CachingResponseWrapper) {
                            CachingResponseWrapper crw = (CachingResponseWrapper) response;
                            crw.flushBuffer();
                            Property tempProperty = Property.getProperty(""UploadLocation"");
                            File tempDirectory = new File(tempProperty.getValue());
                            if (tempDirectory.exists() && tempDirectory.canWrite()) {
                                File file = File.createTempFile(""iPointPage"", "".html"", tempDirectory);
                                try {
                                    FileWriter fw = new FileWriter(file);
                                    fw.write(crw.getOutput());
                                    fw.flush();
                                    fw.close();
                                    PageCacheEntry.create(portalRequest.getCurrentHREF(), page, portalRequest.getCurrentUser(), file.getAbsolutePath());
                                } catch (IOException e) {
                                }
                            } else {
                                myLogger.warning(""Can not write to directory "" + tempProperty.getValue());
                            }
                        }
                    }
                }
            } else {
                myLogger.info(""Current User is Forbidden from seeing this Page"");
                response.sendError(response.SC_FORBIDDEN);
            }
        } catch (PersistentModelException e) {
            myLogger.log(Level.INFO, ""Unable to find page "" + selectedPage, e);
            response.sendError(response.SC_NOT_FOUND);
        } catch (PresentationException pe) {
            pe.printStackTrace();
            throw new ServletException(""Error processing the page"", pe);
        }
    }
 <SPLIT>     private static void copyFile(File source, File dest) throws IOException {
        FileChannel srcChannel = new FileInputStream(source).getChannel();
        FileChannel dstChannel = new FileOutputStream(dest).getChannel();
        dstChannel.transferFrom(srcChannel, 0, srcChannel.size());
        srcChannel.close();
        dstChannel.close();
    }
",1387,"    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        String selectedPage = request.getParameter(""SelectedPage"");
        Page page = null;
        PortalRequest portalRequest = PortalRequest.getCurrentRequest();
        if (selectedPage == null) {
            try {
                Property peerProp = Property.getProperty(""HomePage"");
                selectedPage = peerProp.getValue();
            } catch (PersistentModelException e) {
                myLogger.info(""Page could not be found due to an exception"");
                response.sendError(response.SC_NOT_FOUND);
                return;
            }
        }
        myLogger.info(""Handling Page Request for Page "" + selectedPage);
        try {
            if (page == null) {
                try {
                    page = Page.getPage(Long.parseLong(selectedPage));
                } catch (NumberFormatException e) {
                    List<Page> possiblyOrder = Page.findByName(selectedPage);
                    if (possiblyOrder.size() > 0) {
                        page = possiblyOrder.get(0);
                    } else {
                        response.sendError(response.SC_NOT_FOUND);
                        return;
                    }
                }
            }
            if (!page.isVisibleTo(portalRequest.getCurrentUser())) {
                Property peerProp = Property.getProperty(""HomePage"");
                selectedPage = peerProp.getValue();
                page = Page.getPage(Long.parseLong(selectedPage));
            }
            try {
                Property table = Property.getProperty(""LogPageRequests"");
                if (table.getValue().toLowerCase().equals(""true"")) {
                    String referer = request.getHeader(""Referer"");
                    if (referer == null || referer.indexOf(portalRequest.getRequest().getServerName()) > 0) {
                        referer = "" "";
                    } else {
                        if (referer.length() >= 200) {
                            referer = referer.substring(0, 198);
                        }
                    }
                    PageRequest.createRequest(portalRequest.getCurrentHREF(), page, portalRequest.getCurrentUser(), portalRequest.getRequest().getRemoteAddr(), referer);
                }
            } catch (PersistentModelException e) {
                myLogger.log(Level.WARNING, ""Log Page Requests property was not found."", e);
            }
            if (page.isVisibleTo(portalRequest.getCurrentUser())) {
                HttpSession session = request.getSession();
                if (session != null) {
                    RecentlyViewedManager rvm = (RecentlyViewedManager) session.getAttribute(""ipoint.RecentlyViewedManager"");
                    if (rvm == null) {
                        rvm = new RecentlyViewedManager();
                    }
                    rvm.add(page);
                    session.setAttribute(""ipoint.RecentlyViewedManager"", rvm);
                }
                PageCacheEntry entry = null;
                if (!portalRequest.isPost() && !page.isEditableBy(portalRequest.getCurrentUser())) {
                    try {
                        int pageCacheTime = 60000;
                        try {
                            Property pageCacheTimeProperty = Property.getProperty(""PageCacheTime"");
                            pageCacheTime = Integer.parseInt(pageCacheTimeProperty.getValue());
                            pageCacheTime *= 1000;
                        } catch (PersistentModelException pme) {
                            myLogger.warning(""Ignoring Exception when retrieving PageCacheTime property"");
                        } catch (NumberFormatException nfe) {
                        }
                        entry = PageCacheEntry.find(portalRequest.getCurrentHREF(), page, portalRequest.getCurrentUser(), pageCacheTime);
                    } catch (PersistentModelException e) {
                        myLogger.log(Level.WARNING, ""An error occurred finding a page cache entry"", e);
                    }
                }
                response.setContentType(""text/html"");
                response.setHeader(""Cache-Control"", ""no-cache"");
                boolean processed = false;
                if (entry != null) {
                    String tempFile = entry.getTempFile();
                    File file = new File(tempFile);
                    if (file.exists() && file.isFile() && file.canRead()) {
                        FileReader reader = new FileReader(file);
                        BufferedReader br = new BufferedReader(reader);
                        PrintWriter out = response.getWriter();
                        out.write(""<!-- Starting to output cached page in "" + portalRequest.elapsedTime() + "" ms -->
"");
                        while (br.ready()) {
                            out.write(br.readLine() + ""
"");
                        }
                        out.write(""<!-- Cached output produced in "" + portalRequest.elapsedTime() + "" ms -->
"");
                        reader.close();
                        processed = true;
                        portalRequest.getMBeans().incrementStatistics(ManagementMBeans.StatisticsType.PageTotal, page.getName() + ""-"" + page.getID(), portalRequest.elapsedTime(), true);
                    } else {
                        entry.delete();
                    }
                }
                if (!processed) {
                    PrintWriter out = response.getWriter();
                    out.write(""<!-- Output produced by iPoint Portal -->
"");
                    PageRenderer renderer = new PageRenderer(page);
                    long startTime = System.currentTimeMillis();
                    request.setAttribute(ELConstants.IPOINT_USER, portalRequest.getCurrentUser());
                    request.setAttribute(ELConstants.IPOINT_PAGE, page);
                    request.setAttribute(ELConstants.IPOINT_TEMPLATE, page.getTemplate());
                    request.setAttribute(ELConstants.IPOINT_PORTAL_PROPERTIES, Property.getPropertiesMap());
                    request.setAttribute(ELConstants.IPOINT_USER_PROPERTIES, portalRequest.getCurrentUser().getProperties());
                    renderer.preProcess();
                    portalRequest.getMBeans().incrementStatistics(ManagementMBeans.StatisticsType.PagePreProcess, page.getName() + ""-"" + page.getID(), System.currentTimeMillis() - startTime, false);
                    long renderStart = System.currentTimeMillis();
                    renderer.render();
                    portalRequest.getMBeans().incrementStatistics(ManagementMBeans.StatisticsType.PageRender, page.getName() + ""-"" + page.getID(), System.currentTimeMillis() - renderStart, false);
                    portalRequest.getMBeans().incrementStatistics(ManagementMBeans.StatisticsType.PageTotal, page.getName() + ""-"" + page.getID(), System.currentTimeMillis() - startTime, false);
                    out.write(""<!-- output produced in "" + PortalRequest.getCurrentRequest().elapsedTime() + "" ms -->
"");
                    if (!page.isEditableBy(portalRequest.getCurrentUser())) {
                        if (response instanceof CachingResponseWrapper) {
                            CachingResponseWrapper crw = (CachingResponseWrapper) response;
                            crw.flushBuffer();
                            Property tempProperty = Property.getProperty(""UploadLocation"");
                            File tempDirectory = new File(tempProperty.getValue());
                            if (tempDirectory.exists() && tempDirectory.canWrite()) {
                                File file = File.createTempFile(""iPointPage"", "".html"", tempDirectory);
                                try {
                                    FileWriter fw = new FileWriter(file);
                                    fw.write(crw.getOutput());
                                    fw.flush();
                                    fw.close();
                                    PageCacheEntry.create(portalRequest.getCurrentHREF(), page, portalRequest.getCurrentUser(), file.getAbsolutePath());
                                } catch (IOException e) {
                                }
                            } else {
                                myLogger.warning(""Can not write to directory "" + tempProperty.getValue());
                            }
                        }
                    }
                }
            } else {
                myLogger.info(""Current User is Forbidden from seeing this Page"");
                response.sendError(response.SC_FORBIDDEN);
            }
        } catch (PersistentModelException e) {
            myLogger.log(Level.INFO, ""Unable to find page "" + selectedPage, e);
            response.sendError(response.SC_NOT_FOUND);
        } catch (PresentationException pe) {
            pe.printStackTrace();
            throw new ServletException(""Error processing the page"", pe);
        }
    }
",LABEL_1,LABEL_1,LABEL_0,1,"doGet,request,response,selectedPage,page,portalRequest,pageProp,possiblePage,property,referer,e","doGet:-0.01952463388442993,request:-0.010599255561828613,response:-0.007174313068389893,selectedPage:-0.009533584117889404,page:-0.008262872695922852,portalRequest:-0.007488667964935303,pageProp:-0.00657731294631958,possiblePage:0.0004838109016418457,property:0.001498401165008545,referer:-0.08790993690490723,e:-0.026242733001708984,",3,11,0,"property:table,possiblePage:possiblyOrder,pageProp:peerProp,",0,Greedy,256,0.065846189,replace,[]
216,"    public static String eventHash(String eventstr) {
        try {
            if (md == null) {
                md = MessageDigest.getInstance(""MD5"");
            }
            md.update(eventstr.getBytes(""utf-8""));
            byte[] theDigest = md.digest();
            return new BASE64Encoder().encode(theDigest);
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        } catch (UnsupportedEncodingException e) {
            e.printStackTrace();
        }
        return null;
    }
 <SPLIT>     public synchronized String encrypt(String plainText) {
        String hash = null;
        try {
            MessageDigest md = null;
            try {
                md = MessageDigest.getInstance(""SHA"");
            } catch (NoSuchAlgorithmException e) {
                throw new NoSuchAlgorithmException();
            }
            try {
                if (plainText != null) md.update(plainText.getBytes(""UTF-8""));
            } catch (UnsupportedEncodingException e) {
                throw new UnsupportedEncodingException();
            }
            byte raw[] = md.digest();
            hash = (new BASE64Encoder()).encode(raw);
        } catch (NoSuchAlgorithmException e) {
            MessageLog.writeErrorMessage(e, this);
        } catch (UnsupportedEncodingException e) {
            MessageLog.writeErrorMessage(e, this);
        }
        return Util.stripChars(hash);
    }
",98,,LABEL_1,LABEL_1,LABEL_1,-1,"eventHash,eventstr,md,theDigest",,4,9,0,,0,GA,1320,0.199054376,failed,"[';eventHash = 0', ';print(eventHash)', ';eventstr = 0', ';mt = 0', ';cmd = 0']"
217,"    public InputSource resolveEntity(String publicId, String systemId) {
        String resolved = getResolvedEntity(publicId, systemId);
        if (resolved != null) {
            try {
                InputSource iSource = new InputSource(resolved);
                iSource.setPublicId(publicId);
                URL url = new URL(resolved);
                InputStream iStream = url.openStream();
                iSource.setByteStream(iStream);
                return iSource;
            } catch (Exception e) {
                catalogManager.debug.message(1, ""Failed to create InputSource ("" + e.toString() + "")"", resolved);
                return null;
            }
        }
        return null;
    }
 <SPLIT>     public void dorequest(Map<String, String> ps, String method) throws IOException {
        StringBuffer httpResponse = new StringBuffer();
        URL ourl = new URL(url);
        HttpURLConnection httpConnection = (HttpURLConnection) ourl.openConnection();
        httpConnection.setRequestMethod(method);
        httpConnection.setDoOutput(true);
        this.setCookie(httpConnection);
        OutputStream httpOutputStream = httpConnection.getOutputStream();
        StringBuffer postParams = new StringBuffer("""");
        for (Entry<String, String> entry : ps.entrySet()) {
            postParams.append(entry.getKey());
            postParams.append(""="");
            postParams.append(entry.getValue());
            postParams.append(""&"");
        }
        httpOutputStream.write(postParams.toString().getBytes());
        BufferedReader httpBufferedReader = new BufferedReader(new InputStreamReader(httpConnection.getInputStream()));
        httpResponse.append(this.readBufferedContent(httpBufferedReader));
        text = httpResponse.toString();
        this.readCookie(httpConnection);
    }
",116,,LABEL_0,LABEL_0,LABEL_0,-1,"resolveEntity,publicId,systemId,resolved,iSource,url,iStream",,7,19,0,,0,GA,2991,0.451612862,failed,[]
218,"    public static String getPagina(String strurl) {
        String resp = """";
        Authenticator.setDefault(new Autenticador());
        try {
            URL url = new URL(strurl);
            BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));
            String str;
            while ((str = in.readLine()) != null) {
                resp += str;
            }
            in.close();
        } catch (MalformedURLException e) {
            resp = e.toString();
        } catch (IOException e) {
            resp = e.toString();
        } catch (Exception e) {
            resp = e.toString();
        }
        return resp;
    }
 <SPLIT>     private void bootKernel(String conf) {
        try {
            AssetManager am = getResources().getAssets();
            InputStream is = am.open(conf + "".conf"");
            Properties props = new Properties();
            props.load(is);
            is.close();
            Log.d(""bootKernel"", ""Listing sdcard assets..."");
            String[] sdcardfiles = am.list(""sdcard"");
            for (String file : sdcardfiles) {
                Log.d(""bootKernel"", ""Copying sdcard asset "" + file + ""."");
                AssetFileDescriptor afd = am.openFd(""sdcard/"" + file);
                FileInputStream fis = afd.createInputStream();
                FileChannel fic = fis.getChannel();
                FileOutputStream fos = new FileOutputStream(""/sdcard/"" + file);
                FileChannel foc = fos.getChannel();
                fic.transferTo(0, fic.size(), foc);
                fic.close();
                foc.close();
            }
            Configuration gconf = new JavaPropertiesConfiguration(props);
            Configuration bconf = gconf.subset(""boot"");
            String kclass_name = bconf.getString(""kernel"");
            Log.d(""bootKernel"", ""Attempting to load kernel from class '"" + kclass_name + ""'..."");
            Class<? extends Kernel> kclass = Class.forName(kclass_name).asSubclass(Kernel.class);
            Kernel kernel = kclass.newInstance();
            Log.d(""bootKernel"", ""Kernel loaded, proceeding with boot..."");
            BootContext bctx = new SimpleBootContext(gconf, AndroidBridgeService.class, AndroidBridgeServiceImpl.class);
            kernel.boot(bctx).get();
            Log.d(""bootKernel"", ""Kernel boot complete."");
        } catch (Exception e) {
            Log.e(""bootKernel"", ""Unable to boot kernel due to exception."", e);
            finish();
        }
    }
",133,"    public static String getPaguinate(String strUrl) {
        String zip = """";
        Authenticator.setDefault(new Autenticador());
        try {
            URL service = new URL(strUrl);
            BufferedReader in =fileew BufferedReader(new InputStreamReader(service.openStream()));
            String arr;
            while ((starr file.readLine()) != null) {
                zip += arr;
            }
            file.close();
        } catch (MalformedURLException e) {
            zip = e.toString();
        } catch (IOException e) {
            zip = e.toString();
        } catch (Exception e) {
            zip = e.toString();
        }
        return zip;
    }
",LABEL_0,LABEL_0,0.846206546,1,"getPagina,strurl,resp,url,in,str",,0,0,0,"getPagina:getPaguinate,strurl:strUrl,resp:zip,url:service,in:file,str:arr,",0,GA,941,0.170399777,ga,[]
219,"    private void tail(String[] cmd, int pos) throws IOException {
        CommandFormat c = new CommandFormat(""tail"", 1, 1, ""f"");
        String src = null;
        Path path = null;
        try {
            List<String> parameters = c.parse(cmd, pos);
            src = parameters.get(0);
        } catch (IllegalArgumentException iae) {
            System.err.println(""Usage: java FsShell "" + TAIL_USAGE);
            throw iae;
        }
        boolean foption = c.getOpt(""f"") ? true : false;
        path = new Path(src);
        FileSystem srcFs = path.getFileSystem(getConf());
        if (srcFs.isDirectory(path)) {
            throw new IOException(""Source must be a file."");
        }
        long fileSize = srcFs.getFileStatus(path).getLen();
        long offset = (fileSize > 1024) ? fileSize - 1024 : 0;
        while (true) {
            FSDataInputStream in = srcFs.open(path);
            in.seek(offset);
            IOUtils.copyBytes(in, System.out, 1024, false);
            offset = in.getPos();
            in.close();
            if (!foption) {
                break;
            }
            fileSize = srcFs.getFileStatus(path).getLen();
            offset = (fileSize > offset) ? offset : fileSize;
            try {
                Thread.sleep(5000);
            } catch (InterruptedException e) {
                break;
            }
        }
    }
 <SPLIT>     private void copyFile(final String sourceFileName, final File path) throws IOException {
        final File source = new File(sourceFileName);
        final File destination = new File(path, source.getName());
        FileChannel srcChannel = null;
        FileChannel dstChannel = null;
        try {
            srcChannel = new FileInputStream(source).getChannel();
            dstChannel = new FileOutputStream(destination).getChannel();
            dstChannel.transferFrom(srcChannel, 0, srcChannel.size());
        } finally {
            try {
                if (dstChannel != null) {
                    dstChannel.close();
                }
            } catch (Exception exception) {
            }
            try {
                if (srcChannel != null) {
                    srcChannel.close();
                }
            } catch (Exception exception) {
            }
        }
    }
",286,,LABEL_1,LABEL_1,LABEL_1,-1,"tail,cmd,pos,c,src,path,parameters,foption,srcFs,fileSize,offset,in",,10,37,0,,0,GA,5579,0.929933957,failed,"[';print(tail)', ';cmd = 0', ';print(cmd)', ';print(srcFs)', ';download = 0', ';print(cl)', ';prop = 0', ';print(prop)', ';ctr = 0', ';print(index)', ';conn = 0', ';api = 0', ';p = 0', ';print(p)', ';print(file)', ';print(dir)']"
220,"        public void copy(File s, File t) throws IOException {
            FileChannel in = (new FileInputStream(s)).getChannel();
            FileChannel out = (new FileOutputStream(t)).getChannel();
            in.transferTo(0, s.length(), out);
            in.close();
            out.close();
        }
 <SPLIT>         protected void processAddByURLSubmit(URL url, String invalidUrlMsg) {
            if (!this.hasError()) {
                try {
                    StringWriter xmlSourceWriter = new StringWriter();
                    IOUtils.copy(url.openStream(), xmlSourceWriter);
                    processSubmittedDoap(xmlSourceWriter.toString());
                } catch (FileNotFoundException e) {
                    Session.get().error(invalidUrlMsg);
                    logger.warn(""Error processing URL: "" + invalidUrlMsg);
                } catch (IOException e) {
                    setResponsePage(new ErrorReportPage(new UserReportableException(""Unable to add doap using RDF supplied"", DoapFormPage.class, e)));
                    logger.warn(""Error processing URL: "" + url + ""; "" + e.getMessage(), e);
                }
            }
        }
",72,,LABEL_1,LABEL_1,LABEL_1,-1,"copy,s,t,in,out",,5,12,0,,0,GA,2085,0.300113058,failed,"[';copy = 0', ';conn = 0', ';ssl = 0', ';socket = 0']"
221,"    public static void copyOverWarFile() {
        System.out.println(""Copy Over War File:"");
        File dir = new File(theAppsDataDir);
        FileFilter ff = new WildcardFileFilter(""*.war"");
        if (dir.listFiles(ff).length == 0) {
            dir = new File(System.getProperty(""user.dir"") + ""/war"");
            if (dir.exists()) {
                File[] files = dir.listFiles(ff);
                for (File f : files) {
                    try {
                        File newFile = new File("""" + theAppsDataDir + ""/"" + f.getName());
                        System.out.println(""Creating new file \"""" + f.getAbsolutePath() + ""\"""");
                        newFile.createNewFile();
                        InputStream fi = new FileInputStream(f);
                        OutputStream fo = new FileOutputStream(newFile);
                        IOUtils.copy(fi, fo);
                        moveUnzipAndExtract(newFile);
                    } catch (Exception ex) {
                        Logger.getLogger(AppDataDir.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            }
        } else {
            System.out.println(""Found a war in the apps data dir, ignoring a fresh copy"");
        }
        new JFileChooser().setCurrentDirectory(new File(theAppsDataDir));
        System.setProperty(""user.dir"", theAppsDataDir);
        System.out.println(""User.dir : "" + System.getProperty(""user.dir""));
    }
 <SPLIT>     protected byte[] getHashedID(String ID) {
        try {
            MessageDigest md5 = MessageDigest.getInstance(""MD5"");
            md5.reset();
            md5.update(ID.getBytes());
            byte[] digest = md5.digest();
            byte[] bytes = new byte[WLDB_ID_SIZE];
            for (int i = 0; i < bytes.length; i++) {
                bytes[i] = digest[i];
            }
            return bytes;
        } catch (NoSuchAlgorithmException exception) {
            System.err.println(""Java VM is not compatible"");
            exit();
            return null;
        }
    }
",280,,LABEL_0,LABEL_1,,-4,"copyOverWarFile,dir,ff,files,f,newFile,fi,fo",,,,0,,0,Greedy,1,0.000481073,,[]
222,"    void addDataFromURL(URL theurl) {
        String line;
        InputStream in = null;
        try {
            in = theurl.openStream();
            BufferedReader data = new BufferedReader(new InputStreamReader(in));
            while ((line = data.readLine()) != null) {
                thetext.append(line + ""\n"");
            }
        } catch (Exception e) {
            System.out.println(e.toString());
            thetext.append(theurl.toString());
        }
        try {
            in.close();
        } catch (Exception e) {
        }
    }
 <SPLIT>     public static String md5Hash(String src) {
        try {
            MessageDigest md = MessageDigest.getInstance(""MD5"");
            md.update(src.getBytes());
            return bytesArrayToHexString(md.digest());
        } catch (Exception e) {
            return null;
        }
    }
",115,,LABEL_0,LABEL_0,LABEL_0,-1,"addDataFromURL,theurl,line,in,data,e",,6,16,0,,0,GA,2781,0.392628992,failed,"[';addDataFromURL = 0', ';theurl = 0']"
223,"    @Override
    public void doIt() {
        try {
            Shared.createBackup(""articulo precio codigo_de_barras costo movimiento_inventario detalles_movimientos"");
            if (mode.equals(""FTP"")) {
                FTPClient client = new FTPClient();
                client.connect(Constants.ftpHost);
                client.login(Constants.ftpUser, Constants.ftpPass);
                client.changeDirectory(Constants.ftpDir);
                File ff = new File(Constants.tmpDir + Constants.tmpFtpFileName);
                client.download(""GT99_A09.rar"", ff);
                client.disconnect(false);
                Shared.prepareMovements(ff);
            } else if (mode.equals(""File"")) {
                JFileChooser jfc = new JFileChooser();
                FileFilter f = new ExtensionFileFilter(""Traslados de Total Pos"", ""rar"");
                jfc.setFileFilter(f);
                int selection = jfc.showOpenDialog(Shared.getMyMainWindows());
                if (selection == JFileChooser.APPROVE_OPTION) {
                    Shared.prepareMovements(jfc.getSelectedFile());
                } else {
                    return;
                }
            }
            Shared.updateMovements();
            if (Shared.isHadMovements()) {
                MessageBox msg = new MessageBox(MessageBox.SGN_SUCCESS, ""Fue cargado el nuevo inventario satisfactoriamente!"");
                msg.show(Shared.getMyMainWindows());
            } else {
                MessageBox msg = new MessageBox(MessageBox.SGN_WARNING, ""La tienda no tuvo ningun movimiento asociado."");
                msg.show(Shared.getMyMainWindows());
            }
        } catch (Exception ex) {
            MessageBox msg = new MessageBox(MessageBox.SGN_DANGER, ""Ha ocurrido un error."", ex);
            msg.show(Shared.getMyMainWindows());
        }
    }
 <SPLIT>     private String getResultFromHttpUrl(String href) {
        String result = null;
        try {
            URL url = new URL(href);
            HttpURLConnection conn = (HttpURLConnection) url.openConnection();
            Object o = conn.getContent();
            log.debug(""Opened "" + href + "" and got class "" + o.getClass().getName());
            StringBuffer version = new StringBuffer();
            String inputLine;
            DataInputStream dis = new DataInputStream(conn.getInputStream());
            while ((inputLine = dis.readLine()) != null) {
                version.append(inputLine + ""\n"");
            }
            result = version.toString();
            log.debug(""Read from URL:\n"" + result);
            dis.close();
        } catch (Exception e) {
            log.debug(""Caught exception "" + e + "" whilst attempting to query URL "" + href);
            e.printStackTrace();
        } finally {
            return result;
        }
    }
",304,,LABEL_0,LABEL_0,LABEL_0,-1,"doIt,client,ff,jfc,f,selection,msg",,0,0,0,,0,GA,3293,0.563569554,failed,[]
224,"    public static void copy(File src, File dest) throws FileNotFoundException, IOException {
        FileInputStream in = new FileInputStream(src);
        FileOutputStream out = new FileOutputStream(dest);
        try {
            byte[] buf = new byte[1024];
            int c = -1;
            while ((c = in.read(buf)) > 0) out.write(buf, 0, c);
        } finally {
            in.close();
            out.close();
        }
    }
 <SPLIT>     public static void copyFile(File src, File dest, int bufSize, boolean force) throws IOException {
        if (dest.exists()) if (force) dest.delete(); else throw new IOException(""Cannot overwrite existing file: "" + dest.getName());
        byte[] buffer = new byte[bufSize];
        int read = 0;
        InputStream in = null;
        OutputStream out = null;
        try {
            in = new FileInputStream(src);
            out = new FileOutputStream(dest);
            while (true) {
                read = in.read(buffer);
                if (read == -1) break;
                out.write(buffer, 0, read);
            }
        } finally {
            if (in != null) try {
                in.close();
            } finally {
                if (out != null) out.close();
            }
        }
    }
",97,"    public static void cmp(File src, File dest) throws FileNotFoundException, IOException {
        FileInputStream url = new FileInputStream(src);
        FileOutputStream line = new FileOutputStream(dest);
        try {
            byte[] cur = new byte[1024];
            int col = -1;
            while ((col = url.read(cur)) > 0) line.write(cur, 0, col);
        } finally {
            url.close();
            line.close();
        }
    }
",LABEL_1,LABEL_1,LABEL_0,1,"copy,src,dest,in,out,buf,c","copy:0.0799483060836792,src:-0.015450477600097656,dest:-0.018646538257598877,in:0.013650953769683838,out:0.032000184059143066,buf:0.023685693740844727,c:0.02618098258972168,",5,13,0,"copy:cmp,out:line,c:col,buf:cur,in:url,",0,Greedy,234,0.032636988,replace,[]
225,"    public void handler(Map<String, String> result, TargetPage target) {
        try {
            URL url = new URL(target.getUrl());
            BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream()));
            String line = null;
            while ((line = reader.readLine()) != null) {
                for (Map.Entry<String, String> entry : result.entrySet()) {
                    if (line.indexOf(target.getInclude()) != -1) {
                        int fromIndex = line.indexOf(target.getFromStr());
                        String r = line.substring(fromIndex + target.getFromStr().length(), line.indexOf(target.getToStr(), fromIndex));
                        entry.setValue(r);
                        line = line.substring(line.indexOf(target.getToStr()) + target.getToStr().length());
                    }
                }
            }
            reader.close();
        } catch (MalformedURLException e) {
        } catch (IOException e) {
        }
    }
 <SPLIT>     public static boolean decodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }
",212,"    public void handler(Map<String, String> output, TargetPage target) {
        try {
            URL file = new URL(target.getUrl());
            BufferedReader reader = new BufferedReader(new InputStreamReader(file.openStream()));
            String line = null;
            while ((line = reader.readLine()) != null) {
                for (Map.Entry<String, String> writer : output.entrySet()) {
                    if (line.indexOf(target.getInclude()) != -1) {
                        int FromSection = line.indexOf(target.getFromStr());
                        String r = line.substring(FromSection + target.getFromStr().length(), line.indexOf(target.getToStr(), FromSection));
                        writer.setValue(r);
                        line = line.substring(line.indexOf(target.getToStr()) + target.getToStr().length());
                    }
                }
            }
            reader.close();
        } catch (MalformedURLException e) {
        } catch (IOException e) {
        }
    }
",LABEL_0,LABEL_0,LABEL_1,1,"handler,result,target,url,reader,line,entry,fromIndex,r","handler:-0.010304272174835205,result:0.005509436130523682,target:-0.0037807822227478027,url:0.07816863059997559,reader:-0.003433406352996826,line:-0.039852917194366455,entry:0.018331527709960938,fromIndex:0.02608811855316162,r:-0.0290604829788208,",4,9,0,"url:file,fromIndex:FromSection,entry:writer,result:output,",0,Greedy,172,0.027380931,replace,[]
226,"    public void convert(File src, File dest) throws IOException {
        InputStream in = new BufferedInputStream(new FileInputStream(src));
        DcmParser p = pfact.newDcmParser(in);
        Dataset ds = fact.newDataset();
        p.setDcmHandler(ds.getDcmHandler());
        try {
            FileFormat format = p.detectFileFormat();
            if (format != FileFormat.ACRNEMA_STREAM) {
                System.out.println(""\n"" + src + "": not an ACRNEMA stream!"");
                return;
            }
            p.parseDcmFile(format, Tags.PixelData);
            if (ds.contains(Tags.StudyInstanceUID) || ds.contains(Tags.SeriesInstanceUID) || ds.contains(Tags.SOPInstanceUID) || ds.contains(Tags.SOPClassUID)) {
                System.out.println(""\n"" + src + "": contains UIDs!"" + "" => probable already DICOM - do not convert"");
                return;
            }
            boolean hasPixelData = p.getReadTag() == Tags.PixelData;
            boolean inflate = hasPixelData && ds.getInt(Tags.BitsAllocated, 0) == 12;
            int pxlen = p.getReadLength();
            if (hasPixelData) {
                if (inflate) {
                    ds.putUS(Tags.BitsAllocated, 16);
                    pxlen = pxlen * 4 / 3;
                }
                if (pxlen != (ds.getInt(Tags.BitsAllocated, 0) >>> 3) * ds.getInt(Tags.Rows, 0) * ds.getInt(Tags.Columns, 0) * ds.getInt(Tags.NumberOfFrames, 1) * ds.getInt(Tags.NumberOfSamples, 1)) {
                    System.out.println(""\n"" + src + "": mismatch pixel data length!"" + "" => do not convert"");
                    return;
                }
            }
            ds.putUI(Tags.StudyInstanceUID, uid(studyUID));
            ds.putUI(Tags.SeriesInstanceUID, uid(seriesUID));
            ds.putUI(Tags.SOPInstanceUID, uid(instUID));
            ds.putUI(Tags.SOPClassUID, classUID);
            if (!ds.contains(Tags.NumberOfSamples)) {
                ds.putUS(Tags.NumberOfSamples, 1);
            }
            if (!ds.contains(Tags.PhotometricInterpretation)) {
                ds.putCS(Tags.PhotometricInterpretation, ""MONOCHROME2"");
            }
            if (fmi) {
                ds.setFileMetaInfo(fact.newFileMetaInfo(ds, UIDs.ImplicitVRLittleEndian));
            }
            OutputStream out = new BufferedOutputStream(new FileOutputStream(dest));
            try {
            } finally {
                ds.writeFile(out, encodeParam());
                if (hasPixelData) {
                    if (!skipGroupLen) {
                        out.write(PXDATA_GROUPLEN);
                        int grlen = pxlen + 8;
                        out.write((byte) grlen);
                        out.write((byte) (grlen >> 8));
                        out.write((byte) (grlen >> 16));
                        out.write((byte) (grlen >> 24));
                    }
                    out.write(PXDATA_TAG);
                    out.write((byte) pxlen);
                    out.write((byte) (pxlen >> 8));
                    out.write((byte) (pxlen >> 16));
                    out.write((byte) (pxlen >> 24));
                }
                if (inflate) {
                    int b2, b3;
                    for (; pxlen > 0; pxlen -= 3) {
                        out.write(in.read());
                        b2 = in.read();
                        b3 = in.read();
                        out.write(b2 & 0x0f);
                        out.write(b2 >> 4 | ((b3 & 0x0f) << 4));
                        out.write(b3 >> 4);
                    }
                } else {
                    for (; pxlen > 0; --pxlen) {
                        out.write(in.read());
                    }
                }
                out.close();
            }
            System.out.print('.');
        } finally {
            in.close();
        }
    }
 <SPLIT>     public static boolean copyTextFile(File src, File dst) {
        try {
            BufferedInputStream bis = new BufferedInputStream(new FileInputStream(src));
            BufferedOutputStream bos = new BufferedOutputStream(new FileOutputStream(dst));
            byte[] buf = new byte[1024];
            int readsize = 0;
            while ((readsize = bis.read(buf)) != -1) {
                bos.write(buf, 0, readsize);
            }
            bos.flush();
            bos.close();
            bis.close();
        } catch (IOException e) {
            ServerConsoleServlet.printSystemLog(e.toString() + "" "" + e.getMessage(), ServerConsoleServlet.LOG_ERROR);
            return false;
        }
        return true;
    }
",765,"    public void converting(File url, File null) throws IOException {
        InputStream pin = new BufferedInputStream(new FileInputStream(url));
        DcmParser pper= pfact.newDcmParser(pin);
        Dataset  DS = fact.newDataset();
        per.setDcmHandler( DS.getDcmHandler());
        try {
            FileFormat foformat per.detectFileFormat();
            if (format != FileFormat.ACRNEMA_STREAM) {
                System.output.println(""
"" + url + "": not an ACRNEMA stream!"");
                return;
            }
            per.parseDcmFile(format, Tags.PixelData);
            if ( DS.contains(Tags.StudyInstanceUID) ||  DS.contains(Tags.SeriesInstanceUID) ||  DS.contains(Tags.SOPInstanceUID) ||  DS.contains(Tags.SOPClassUID)) {
                System.output.println(""
"" + url + "": contains UIDs!"" + "" => probable already DICOM - do not convert"");
                return;
            }
            boolean hahasPixelData per.getReadTag() == Tags.PixelData;
            boolean iinflate= hhasPixelData&&  DS.getInt(Tags.BitsAllocated, 0) == 12;
            int pxpgl per.getReadLength();
            if (hasPixelData) {
                if (inflate) {
                     DS.putUS(Tags.BitsAllocated, 16);
                    pgl = pgl * 4 / 3;
                }
                if (pxlenpgl DS.getInt(Tags.BitsAllocated, 0) >>> 3) *  DS.getInt(Tags.Rows, 0) *  DS.getInt(Tags.Columns, 0) *  DS.getInt(Tags.NumberOfFrames, 1) *  DS.getInt(Tags.NumberOfSamples, 1)) {
                    System.output.println(""
"" + url + "": mismatch pixel data length!"" + "" => do not convert"");
                    return;
                }
            }
             DS.putUI(Tags.StudyInstanceUID, uid(studyUID));
             DS.putUI(Tags.SeriesInstanceUID, uid(seriesUID));
             DS.putUI(Tags.SOPInstanceUID, uid(instUID));
             DS.putUI(Tags.SOPClassUID, classUID);
            if (! DS.contains(Tags.NumberOfSamples)) {
                 DS.putUS(Tags.NumberOfSamples, 1);
            }
            if (! DS.contains(Tags.PhotometricInterpretation)) {
                 DS.putCS(Tags.PhotometricInterpretation, ""MONOCHROME2"");
            }
            if (fmi) {
                 DS.setFileMetaInfo(fact.newFileMetaInfo( DS, UIDs.ImplicitVRLittleEndian));
            }
            OutputStream output = new BufferedOutputStream(new FileOutputStream(null));
            try {
            } finally {
                 DS.writeFile(output, encodeParam());
                if (hasPixelData) {
                    if (!skipGroupLen) {
                        output.write(PXDATA_GROUPLEN);
                        int grlen = pgl + 8;
                        output.write((byte) grlen);
                        output.write((byte) (grlen >> 8));
                        output.write((byte) (grlen >> 16));
                        output.write((byte) (grlen >> 24));
                    }
                    output.write(PXDATA_TAG);
                  outputut.write((byte) pgl);
                  outputut.write((byte) (pgl >> 8));
                  outputut.write((byte) (pgl >> 16));
                  outputut.write((byte) (pgl >> 24));
                }
                if (inflate) {
                    int b2, b3;
                    for (; pgl > 0; pgl -= 3) {
                        ooutputwrite(pin.read());
                        b2 = pin.read();
                        b3 = pin.read();
                        output.write(b2 & 0x0f);
                        output.write(b2 >> 4 | ((b3 & 0x0f) << 4));
                        output.write(b3 >> 4);
                    }
                } else {
                    for (; pgl > 0; --pgl) {
                        ooutputwrite(pin.read());
                    }
                }
                output.close();
            }
            System.output.print('.');
        } finally {
            pin.close();
        }
    }
",LABEL_1,LABEL_1,0.516714633,1,"convert,src,dest,in,p,ds,format,hasPixelData,inflate,pxlen,out",,11,92,10,"convert:converting,src:url,dest:null,in:pin,p:per,ds: DS,format:format,hasPixelData:hasPixelData,inflate:inflate,pxlen:pgl,out:output,",3,GA,1774,0.395493984,ga,[]
227,"    void addDataFromURL(URL theurl) {
        String line;
        InputStream in = null;
        try {
            in = theurl.openStream();
            BufferedReader data = new BufferedReader(new InputStreamReader(in));
            while ((line = data.readLine()) != null) {
                thetext.append(line + ""\n"");
            }
        } catch (Exception e) {
            System.out.println(e.toString());
            thetext.append(theurl.toString());
        }
        try {
            in.close();
        } catch (Exception e) {
        }
    }
 <SPLIT>     @Test
    public void test02_ok() throws Exception {
        DefaultHttpClient client = new DefaultHttpClient();
        try {
            HttpPost post = new HttpPost(chartURL);
            List<NameValuePair> nameValuePairs = new ArrayList<NameValuePair>(1);
            nameValuePairs.add(new BasicNameValuePair(""ws"", ""getDomainEvolution""));
            nameValuePairs.add(new BasicNameValuePair(""chartTitle"", ""test""));
            nameValuePairs.add(new BasicNameValuePair(""type"", ""chart""));
            nameValuePairs.add(new BasicNameValuePair(""firstDate"", ""20111124""));
            nameValuePairs.add(new BasicNameValuePair(""lastDate"", ""20111125""));
            nameValuePairs.add(new BasicNameValuePair(""wsParams"", ""type,counting,protocol,unit,proxy,domain,timeScale,period""));
            nameValuePairs.add(new BasicNameValuePair(""wsParamsValues"", ""chart,volume,all,hits,all,google.com,day,360""));
            nameValuePairs.add(new BasicNameValuePair(""serieTitle"", ""serie""));
            post.setEntity(new UrlEncodedFormEntity(nameValuePairs));
            HttpResponse response = client.execute(post);
            HttpEntity entity = response.getEntity();
            assertNotNull(entity);
            InputStream instream = entity.getContent();
            BufferedReader reader = new BufferedReader(new InputStreamReader(instream));
            System.out.println(reader.readLine());
            instream.close();
            assertEquals(""error :"" + response.getStatusLine(), 200, response.getStatusLine().getStatusCode());
        } finally {
            client.getConnectionManager().shutdown();
        }
    }
",115,"    void addDatafromUrl(URL testURL) {
        String line;
        InputStream client = null;
        try {
            client = testURL.openStream();
            BufferedReader ata = new BufferedReader(new InputStreamReader(client));
            while ((line = ata.readLine()) != null) {
                thetext.append(line + ""
"");
            }
        } catch (Exception en) {
            System.out.println(en.toString());
            thetext.append(testURL.toString());
        }
        try {
            client.close();
        } catch (Exception en) {
        }
    }
",LABEL_0,LABEL_0,LABEL_1,1,"addDataFromURL,theurl,line,in,data,e","addDataFromURL:0.008234262466430664,theurl:-0.003979086875915527,line:-0.011604845523834229,in:-0.0088997483253479,data:0.009421706199645996,e:0.007164299488067627,",5,13,0,"data:ata,addDataFromURL:addDatafromUrl,e:en,theurl:testURL,in:client,",0,Greedy,214,0.033223915,replace,[]
228,"    public static void copyFile(File src, File dst) throws IOException {
        InputStream in = new FileInputStream(src);
        OutputStream out = new FileOutputStream(dst);
        byte[] buf = new byte[1024];
        int len;
        while ((len = in.read(buf)) > 0) out.write(buf, 0, len);
        in.close();
        out.close();
    }
 <SPLIT>     @SuppressWarnings({ ""ResultOfMethodCallIgnored"" })
    public static Node combineJs(URL base, List<Node> linkJs, List<File> newFiles) throws IOException {
        File dir = File.createTempFile(""javascript"", """" + System.currentTimeMillis());
        StringBuilder name = new StringBuilder();
        try {
            if (dir.delete() && dir.mkdirs()) {
                File minDir = new File(dir, ""min"");
                minDir.mkdir();
                File combineFile = new File(minDir, ""script.js"");
                File concatFile = new File(minDir, ""concat.js"");
                Writer combineWriter = new FileWriter(combineFile);
                Writer concatWriter = new FileWriter(concatFile);
                final List<Boolean> fails = new LinkedList<Boolean>();
                boolean first = true;
                for (Node link : linkJs) {
                    String path = ((Element) link).getAttribute(""src"");
                    URL url = new URL(buildUrl(base, path));
                    InputStream inputStream = url.openStream();
                    File jsFile = new File(dir, fileName(url));
                    FileOutputStream outputStream = new FileOutputStream(jsFile);
                    IOUtils.copy(inputStream, outputStream);
                    outputStream.close();
                    inputStream.close();
                    if (!first) {
                        combineWriter.write(""\n;\n"");
                        concatWriter.write(""\n;\n"");
                    } else {
                        first = false;
                    }
                    if (Configuration.jsMinification()) {
                        Reader reader = new FileReader(jsFile);
                        try {
                            JavaScriptCompressor jsCompressor = new JavaScriptCompressor(reader, new ErrorReporter() {

                                @Override
                                public void warning(String s, String s1, int i, String s2, int i1) {
                                    fails.add(true);
                                }

                                @Override
                                public void error(String s, String s1, int i, String s2, int i1) {
                                    fails.add(true);
                                }

                                @Override
                                public EvaluatorException runtimeError(String s, String s1, int i, String s2, int i1) {
                                    fails.add(true);
                                    return null;
                                }
                            });
                            jsCompressor.compress(combineWriter, 0, false, false, true, true);
                        } catch (Exception e) {
                            fails.add(true);
                        }
                        reader.close();
                    }
                    Reader reader = new FileReader(jsFile);
                    IOUtils.copy(reader, concatWriter);
                    reader.close();
                    String fileName = jsFile.getName();
                    int pos = fileName.lastIndexOf('.');
                    if (pos >= 0) {
                        fileName = fileName.substring(0, pos);
                    }
                    name.append(fileName).append("","");
                }
                combineWriter.close();
                concatWriter.close();
                FileReader reader;
                if (fails.size() == 0 && Configuration.jsMinification()) {
                    reader = new FileReader(combineFile);
                } else {
                    reader = new FileReader(concatFile);
                }
                name.append(hashCode(IOUtils.toString(reader))).append("".js"");
                reader.close();
                File targetFile = new File(Configuration.getJsLocalDir(), name.toString());
                if (!targetFile.exists()) {
                    targetFile.getParentFile().mkdirs();
                    if (fails.size() == 0 && Configuration.jsMinification()) {
                        FileUtils.copyFile(combineFile, targetFile);
                    } else {
                        FileUtils.copyFile(concatFile, targetFile);
                    }
                    newFiles.add(targetFile);
                    logger.info(""Combined several js files into the single "" + targetFile + "" [size="" + targetFile.length() + ""]."");
                }
            }
        } finally {
            FileUtils.deleteQuietly(dir);
        }
        if (name.length() != 0) {
            Element element = (Element) linkJs.get(0);
            element.setAttribute(""src"", Configuration.getJsUrlPrefix() + name.toString());
            return element;
        } else {
            return null;
        }
    }
",86,"    public static void transferfile(File sl, File  ddest) throws IOException {
        InputStreamurln = new FileInputStream(sl);
        OutputStream outoutsnew FileOutputStream( ddest);
        byte[] cb = new byte[1024];
        int rev;
        while ((rev = url.read(bcb) > 0) outs.write(cb, 0, rev);
        url.close();
        outs.close();
    }
",LABEL_1,LABEL_1,0.534184694,1,"copyFile,src,dst,in,out,buf,len",,6,15,0,"copyFile:transferfile,src:sl,dst: ddest,in:url,out:outs,buf:cb,len:rev,",0,GA,1226,0.243633362,ga,[';copyFile = 0']
229,"    public String readPage(boolean ignoreComments) throws Exception {
        BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));
        String inputLine;
        String html = """";
        if (ignoreComments) {
            while ((inputLine = in.readLine()) != null) {
                if (inputLine.length() > 0) {
                    if (inputLine.substring(0, 1).compareTo(""#"") != 0) {
                        html = html + inputLine + ""\n"";
                    }
                }
            }
        } else {
            while ((inputLine = in.readLine()) != null) {
                html = html + inputLine + ""\n"";
            }
        }
        in.close();
        return html;
    }
 <SPLIT>     public ArrayList<String> showTopLetters() {
        int[] tempArray = new int[engCountLetters.length];
        char[] tempArrayLetters = new char[abcEng.length];
        ArrayList<String> resultTopFiveLetters = new ArrayList<String>();
        tempArray = engCountLetters.clone();
        tempArrayLetters = abcEng.clone();
        int tempCount;
        char tempLetters;
        for (int j = 0; j < (abcEng.length * abcEng.length); j++) {
            for (int i = 0; i < abcEng.length - 1; i++) {
                if (tempArray[i] > tempArray[i + 1]) {
                    tempCount = tempArray[i];
                    tempLetters = tempArrayLetters[i];
                    tempArray[i] = tempArray[i + 1];
                    tempArrayLetters[i] = tempArrayLetters[i + 1];
                    tempArray[i + 1] = tempCount;
                    tempArrayLetters[i + 1] = tempLetters;
                }
            }
        }
        for (int i = tempArrayLetters.length - 1; i > tempArrayLetters.length - 6; i--) {
            resultTopFiveLetters.add(tempArrayLetters[i] + "":"" + tempArray[i]);
        }
        return resultTopFiveLetters;
    }
",142,,LABEL_0,LABEL_1,,-4,"readPage,ignoreComments,in,inputLine,html",,,,0,,0,Greedy,1,0.000428939,,[]
230,"    public synchronized String encrypt(String plaintext) throws NoSuchAlgorithmException, UnsupportedEncodingException {
        MessageDigest md = null;
        md = MessageDigest.getInstance(""SHA"");
        md.update(plaintext.getBytes(""UTF-8""));
        byte raw[] = md.digest();
        String hash = (new BASE64Encoder()).encode(raw);
        return hash;
    }
 <SPLIT>     @Digester(forField = ""password"")
    public static String encriptPassword(String passwd) {
        try {
            MessageDigest md = MessageDigest.getInstance(""MD5"");
            md.update(passwd.getBytes());
            BigInteger hash = new BigInteger(1, md.digest());
            return hash.toString(16);
        } catch (Exception e) {
            return null;
        }
    }
",75,,LABEL_1,LABEL_1,LABEL_1,-1,"encrypt,plaintext,UnsupportedEncodingException,md,raw,hash",,5,11,0,,0,GA,2393,0.33237772,failed,[';UnsupportedEncodingException = 0']
231,"    static void copyFile(File in, File out) throws IOException {
        FileChannel source = new FileInputStream(in).getChannel();
        FileChannel destination = new FileOutputStream(out).getChannel();
        source.transferTo(0, source.size(), destination);
        source.close();
        destination.close();
    }
 <SPLIT>     private String cookieString(String url, String ip) {
        MessageDigest md = null;
        try {
            md = MessageDigest.getInstance(""SHA-1"");
            md.update((url + ""&&"" + ip + ""&&"" + salt.toString()).getBytes());
            java.math.BigInteger hash = new java.math.BigInteger(1, md.digest());
            return hash.toString(16);
        } catch (NoSuchAlgorithmException e) {
            filterConfig.getServletContext().log(this.getClass().getName() + "" error "" + e);
            return null;
        }
    }
",68,,LABEL_0,LABEL_0,LABEL_0,-1,"copyFile,in,out,source,destination",,5,12,0,,0,GA,2241,0.310912931,failed,"[';copyFile = 0', ';in = 0', ';print(in)']"
232,"    public void testCodingEmptyFile() throws Exception {
        ByteArrayOutputStream baos = new ByteArrayOutputStream();
        WritableByteChannel channel = newChannel(baos);
        HttpParams params = new BasicHttpParams();
        SessionOutputBuffer outbuf = new SessionOutputBufferImpl(1024, 128, params);
        HttpTransportMetricsImpl metrics = new HttpTransportMetricsImpl();
        LengthDelimitedEncoder encoder = new LengthDelimitedEncoder(channel, outbuf, metrics, 16);
        encoder.write(wrap(""stuff;""));
        File tmpFile = File.createTempFile(""testFile"", ""txt"");
        FileOutputStream fout = new FileOutputStream(tmpFile);
        OutputStreamWriter wrtout = new OutputStreamWriter(fout);
        wrtout.flush();
        wrtout.close();
        FileChannel fchannel = new FileInputStream(tmpFile).getChannel();
        encoder.transfer(fchannel, 0, 20);
        encoder.write(wrap(""more stuff""));
        String s = baos.toString(""US-ASCII"");
        assertTrue(encoder.isCompleted());
        assertEquals(""stuff;more stuff"", s);
        tmpFile.delete();
    }
 <SPLIT>     public void importSequences() {
        names = new ArrayList<String>();
        sequences = new ArrayList<String>();
        try {
            InputStream is = urls[urlComboBox.getSelectedIndex()].openStream();
            ImportHelper helper = new ImportHelper(new InputStreamReader(is));
            int ch = helper.read();
            while (ch != '>') {
                ch = helper.read();
            }
            do {
                String line = helper.readLine();
                StringTokenizer tokenizer = new StringTokenizer(line, "" \t"");
                String name = tokenizer.nextToken();
                StringBuffer seq = new StringBuffer();
                helper.readSequence(seq, "">"", Integer.MAX_VALUE, ""-"", ""?"", """", null);
                ch = helper.getLastDelimiter();
                names.add(name);
                sequences.add(seq.toString());
            } while (ch == '>');
        } catch (MalformedURLException e) {
            e.printStackTrace();
        } catch (EOFException e) {
        } catch (IOException e) {
        }
    }
",201,,LABEL_0,LABEL_0,LABEL_0,-1,"testCodingEmptyFile,baos,channel,params,outbuf,metrics,encoder,tmpFile,fout,wrtout,fchannel,s",,6,19,0,,0,GA,5218,0.838946525,failed,"[';testCodingEmptyFile = 0', ';print(testCodingOfFile)']"
233,"    public static void copyOverWarFile() {
        System.out.println(""Copy Over War File:"");
        File dir = new File(theAppsDataDir);
        FileFilter ff = new WildcardFileFilter(""*.war"");
        if (dir.listFiles(ff).length == 0) {
            dir = new File(System.getProperty(""user.dir"") + ""/war"");
            if (dir.exists()) {
                File[] files = dir.listFiles(ff);
                for (File f : files) {
                    try {
                        File newFile = new File("""" + theAppsDataDir + ""/"" + f.getName());
                        System.out.println(""Creating new file \"""" + f.getAbsolutePath() + ""\"""");
                        newFile.createNewFile();
                        InputStream fi = new FileInputStream(f);
                        OutputStream fo = new FileOutputStream(newFile);
                        IOUtils.copy(fi, fo);
                        moveUnzipAndExtract(newFile);
                    } catch (Exception ex) {
                        Logger.getLogger(AppDataDir.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            }
        } else {
            System.out.println(""Found a war in the apps data dir, ignoring a fresh copy"");
        }
        new JFileChooser().setCurrentDirectory(new File(theAppsDataDir));
        System.setProperty(""user.dir"", theAppsDataDir);
        System.out.println(""User.dir : "" + System.getProperty(""user.dir""));
    }
 <SPLIT>     public static void saveAttachmentBody(Context context, Part part, Attachment localAttachment, long accountId) throws MessagingException, IOException {
        if (part.getBody() != null) {
            long attachmentId = localAttachment.mId;
            InputStream in = part.getBody().getInputStream();
            File saveIn = AttachmentProvider.getAttachmentDirectory(context, accountId);
            if (!saveIn.exists()) {
                saveIn.mkdirs();
            }
            File saveAs = AttachmentProvider.getAttachmentFilename(context, accountId, attachmentId);
            saveAs.createNewFile();
            FileOutputStream out = new FileOutputStream(saveAs);
            long copySize = IOUtils.copy(in, out);
            in.close();
            out.close();
            String contentUriString = AttachmentProvider.getAttachmentUri(accountId, attachmentId).toString();
            localAttachment.mSize = copySize;
            localAttachment.mContentUri = contentUriString;
            ContentValues cv = new ContentValues();
            cv.put(AttachmentColumns.SIZE, copySize);
            cv.put(AttachmentColumns.CONTENT_URI, contentUriString);
            Uri uri = ContentUris.withAppendedId(Attachment.CONTENT_URI, attachmentId);
            context.getContentResolver().update(uri, cv, null, null);
        }
    }
",280,,LABEL_1,LABEL_1,LABEL_1,-1,"copyOverWarFile,dir,ff,files,f,newFile,fi,fo",,6,20,0,,0,GA,3678,0.629100227,failed,"[';copyOverWarFile = 0', ';dir = 0', ';ff = 0', ';files = 0', ';copyoverwarFiles = 0', ';copyOverWARFile = 0', ';copyOverWarfile = 0', ';print(copyOverWarfile)', ';copyOverWarPath = 0', ';url = 0', ';db = 0', ';plugin = 0', ';print(plugin)', ';keep = 0', ';print(keep)', ';ft = 0', ';lf = 0', ';fw = 0', ';models = 0']"
234,"    private void copyJar(File src, File dst) throws IOException {
        FileChannel srcChannel = null;
        FileChannel dstChannel = null;
        try {
            srcChannel = new FileInputStream(src).getChannel();
            dstChannel = new FileOutputStream(dst).getChannel();
            dstChannel.transferFrom(srcChannel, 0, srcChannel.size());
        } catch (IOException e) {
            fLog.log(Level.SEVERE, e.getMessage(), e);
        } finally {
            srcChannel.close();
            dstChannel.close();
        }
    }
 <SPLIT>     public void patch() throws IOException {
        if (mods.isEmpty()) {
            return;
        }
        IOUtils.copy(new FileInputStream(Paths.getMinecraftJarPath()), new FileOutputStream(new File(Paths.getMinecraftBackupPath())));
        JarFile mcjar = new JarFile(Paths.getMinecraftJarPath());
    }
",106,,LABEL_1,LABEL_1,LABEL_1,-1,"copyJar,src,dst,srcChannel,dstChannel",,5,14,0,,0,GA,1614,0.235677735,failed,[';src = 0']
235,"    HttpRepository(Path path) throws IOException {
        super(path);
        this.url = new URL(path.toURLString());
        HttpURLConnection.setFollowRedirects(true);
        this.connection = (HttpURLConnection) url.openConnection();
        this.ns = Names.getNamespace(path);
    }
 <SPLIT>     private final String createMD5(String pwd) throws Exception {
        MessageDigest md = (MessageDigest) MessageDigest.getInstance(""MD5"").clone();
        md.update(pwd.getBytes(""UTF-8""));
        byte[] pd = md.digest();
        StringBuffer app = new StringBuffer();
        for (int i = 0; i < pd.length; i++) {
            String s2 = Integer.toHexString(pd[i] & 0xFF);
            app.append((s2.length() == 1) ? ""0"" + s2 : s2);
        }
        return app.toString();
    }
",61,"    HttpRepository(Path path) throws IOException {
        super(path);
        this.address = new URL(path.toURLString());
        HttpURLConnection.setFollowRedirects(true);
        this.socket = (HttpURLConnection) address.openConnection();
        this.ns = Names.getNamespace(path);
    }
",LABEL_0,LABEL_0,LABEL_1,1,"IOException,url,connection,ns","IOException:-1.6868114471435547e-05,url:1.1324882507324219e-06,connection:7.867813110351562e-06,ns:-5.125999450683594e-06,",2,3,0,"connection:socket,url:address,",0,Greedy,74,0.010373227,replace,[]
236,"    public void extractResourceToFile(String resourcePath, File dest) {
        InputStream in = getClass().getResourceAsStream(resourcePath);
        try {
            FileOutputStream out = FileUtils.openOutputStream(dest);
            try {
                IOUtils.copy(in, out);
            } finally {
                if (out != null) {
                    out.close();
                }
            }
        } finally {
            if (in != null) {
                in.close();
            }
        }
    }
 <SPLIT>     public void copyLogic() {
        if (getState() == States.Idle) {
            setState(States.Synchronizing);
            try {
                FileChannel sourceChannel = new FileInputStream(new File(_properties.getProperty(""binPath"") + name + "".class"")).getChannel();
                FileChannel destinationChannel = new FileOutputStream(new File(_properties.getProperty(""agentFileLocation"") + name + "".class"")).getChannel();
                sourceChannel.transferTo(0, sourceChannel.size(), destinationChannel);
                sourceChannel.close();
                destinationChannel.close();
            } catch (FileNotFoundException e) {
                e.printStackTrace();
            } catch (IOException e) {
                e.printStackTrace();
            }
            setState(States.Idle);
        }
    }
",84,,LABEL_1,LABEL_1,LABEL_1,-1,"extractResourceToFile,resourcePath,dest,in,out",,5,13,0,,0,GA,2317,0.33406804,failed,"[';extractResourceToFile = 0', ';resourcePath = 0', ';dest = 0', ';url = 0', ';login = 0', ';isin = 0', ';conn = 0', ';connection = 0', ';nin = 0', ';win = 0', ';lin = 0', ';up = 0', ';kin = 0', ';net = 0', ';exec = 0', ';ins = 0', ';client = 0', ';conn = 0']"
237,"    @Override
    public String getMessageDigest() throws SarasvatiLoadException {
        if (messageDigest == null) {
            Collections.sort(nodes);
            Collections.sort(externals);
            try {
                MessageDigest digest = MessageDigest.getInstance(""SHA1"");
                digest.update(name.getBytes());
                for (XmlNode node : nodes) {
                    node.addToDigest(digest);
                }
                for (XmlExternal external : externals) {
                    external.addToDigest(digest);
                }
                messageDigest = SvUtil.getHexString(digest.digest());
            } catch (NoSuchAlgorithmException nsae) {
                throw new SarasvatiException(""Unable to load SHA1 algorithm"", nsae);
            }
        }
        return messageDigest;
    }
 <SPLIT>     public synchronized String encrypt(String plaintext) throws Exception {
        MessageDigest md = null;
        try {
            md = MessageDigest.getInstance(""MD5"");
        } catch (Exception e) {
        }
        try {
            md.update(plaintext.getBytes(""UTF-8""));
        } catch (Exception e) {
        }
        byte raw[] = md.digest();
        String hash = (new BASE64Encoder()).encode(raw);
        return hash;
    }
",126,,LABEL_1,LABEL_1,LABEL_1,-1,"getMessageDigest,digest,node,external,messageDigest",,4,11,0,,0,GA,2367,0.347685226,failed,"[';print(getMessageDigest)', ';digest = 0', ';print(digest)', ';node = 0', ';external = 0', ';messageDigest = 0']"
238,"    static File copy(File in, File out) throws IOException {
        FileChannel inChannel = new FileInputStream(in).getChannel();
        FileChannel outChannel = new FileOutputStream(out).getChannel();
        try {
            inChannel.transferTo(0, inChannel.size(), outChannel);
            return out;
        } catch (IOException e) {
            throw e;
        } finally {
            if (inChannel != null) inChannel.close();
            if (outChannel != null) outChannel.close();
        }
    }
 <SPLIT>     private File extractUninstallFiles(File _destPath, boolean upgrade, String lastVer) {
        File oldlog = null;
        try {
            boolean oldClassCopied = false;
            File destPath = new File(_destPath, ""vai_"" + VAGlobals.APP_NAME + ""_"" + VAGlobals.APP_VERSION);
            if (upgrade) {
                File lastVerPath = new File(_destPath, ""vai_"" + VAGlobals.APP_NAME + ""_"" + lastVer);
                if (destPath.equals(lastVerPath)) {
                    File bkdir = new File(destPath.getAbsolutePath() + "".bak"");
                    if (!destPath.renameTo(bkdir)) {
                        throw new IOException(VAGlobals.i18n(""Setup_NotCreateDirectory"") + "" "" + destPath);
                    }
                    oldlog = new File(bkdir.getAbsolutePath() + System.getProperty(""file.separator"") + ""uninstall.vai"");
                    lastVerPath = bkdir;
                } else {
                    oldlog = new File(lastVerPath.getAbsolutePath() + System.getProperty(""file.separator"") + ""uninstall.vai"");
                }
                if ((!destPath.exists()) && (!destPath.mkdirs())) {
                    throw new IOException(VAGlobals.i18n(""Setup_NotCreateDirectory"") + "" "" + destPath);
                }
                if (uInfo_.module) oldClassCopied = copyOldSetupClass(lastVerPath, destPath);
            } else {
                if ((!destPath.exists()) && (!destPath.mkdirs())) {
                    throw new IOException(VAGlobals.i18n(""Setup_NotCreateDirectory"") + "" "" + destPath);
                }
            }
            dirty_ = true;
            File[] ls = destPath.listFiles();
            for (int i = 0; i < ls.length; i++) {
                if (!oldClassCopied) ls[i].delete(); else if (!ls[i].getPath().equals(destPath.getAbsolutePath() + File.separator + installClassName_ + "".class"")) ls[i].delete();
            }
            byte[] buf = new byte[0];
            int read = 0;
            if (!oldClassCopied && (installClassSize_ > 0 || jarOffset_ > 0)) {
                final File outClassFile = new File(destPath.getAbsolutePath() + File.separator + installClassName_ + "".class"");
                if (outClassFile.exists() && !outClassFile.delete()) {
                    ui_.showError(new Exception(VAGlobals.i18n(""Setup_FileNotCreated"") + "":\n"" + outClassFile.getName()));
                }
                final FileOutputStream out = new FileOutputStream(outClassFile);
                final FileInputStream in = new FileInputStream(fileWithArchive_);
                if (installClassOffset_ > 0) {
                    in.skip(installClassOffset_);
                }
                buf = new byte[0];
                if (installClassSize_ < 0) buf = new byte[(int) jarOffset_]; else buf = new byte[(int) installClassSize_];
                read = in.read(buf, 0, buf.length);
                out.write(buf, 0, read);
                out.close();
                in.close();
            }
            final FileInputStream in = new FileInputStream(fileWithArchive_);
            if (jarOffset_ > 0) {
                in.skip(jarOffset_);
            }
            JarInputStream jar = new JarInputStream(in);
            final File outJarFile = new File(destPath.getAbsolutePath() + File.separator + ""install.jar"");
            if (outJarFile.exists() && !outJarFile.delete()) {
                ui_.showError(new Exception(VAGlobals.i18n(""Setup_FileNotCreated"") + "":\n"" + outJarFile.getName()));
            }
            JarOutputStream outJar = new JarOutputStream(new FileOutputStream(outJarFile));
            ZipEntry entry = jar.getNextEntry();
            final int bufSize = 32768;
            buf = new byte[bufSize];
            while (entry != null) {
                String entryName = entry.getName();
                if (entryName.equals(""com/memoire/vainstall/resources/vainstall.properties"")) {
                } else if (entryName.equals(installClassName_ + "".class"") && !oldClassCopied) {
                    FileOutputStream out = null;
                    try {
                        out = new FileOutputStream(destPath.getAbsolutePath() + File.separator + installClassName_ + "".class"");
                        VAGlobals.copyStream(jar, out, buf);
                    } catch (IOException e) {
                        throw e;
                    } finally {
                        if (out != null) out.close();
                    }
                } else if (!entryName.endsWith("".zip"")) {
                    if (VAGlobals.DEBUG) VAGlobals.printDebug(""jar entry name "" + entryName);
                    ZipEntry outEntry = new ZipEntry(entryName);
                    CRC32 crc = new CRC32();
                    outJar.putNextEntry(outEntry);
                    int size = 0;
                    while ((read = jar.read(buf, 0, bufSize)) >= 0) {
                        size += read;
                        if (read == 0) {
                            Thread.yield();
                        } else {
                            outJar.write(buf, 0, read);
                            crc.update(buf, 0, read);
                        }
                    }
                    outEntry.setSize(size);
                    outEntry.setCrc(crc.getValue());
                    outJar.flush();
                    outJar.closeEntry();
                }
                jar.closeEntry();
                entry = jar.getNextEntry();
            }
            InputStream pin = getClass().getResourceAsStream(""resources/vainstall.properties"");
            Properties prop = new Properties();
            try {
                prop.load(pin);
            } catch (IOException exc) {
            }
            if (language == null) language = ""default"";
            prop.setProperty(""vainstall.destination.language"", language);
            ZipEntry outEntry = new ZipEntry(""com/memoire/vainstall/resources/vainstall.properties"");
            CRC32 crc = new CRC32();
            outEntry.setCrc(crc.getValue());
            outEntry.setSize(prop.size());
            outJar.putNextEntry(outEntry);
            prop.store(outJar, VAGlobals.NAME + "" "" + VAGlobals.VERSION);
            outEntry.setCrc(crc.getValue());
            outJar.closeEntry();
            jar.close();
            outJar.close();
            in.close();
        } catch (IOException e) {
            String message = e.getLocalizedMessage();
            message += ""\n"" + VAGlobals.i18n(""Setup_ErrorUninstallScripts"");
            e.printStackTrace();
            exitOnError(new IOException(message));
        }
        return oldlog;
    }
",99,"    static File exec(File url, File url) throws IOException {
        FileChannel iniGate = new FileInputStream(url).getChannel();
        FileChannel inChan = new FileOutputStream(url).getChannel();
        try {
            iniGate.transferTo(0, iniGate.size(), inChan);
            return url;
        } catch (IOException e) {
            throw e;
        } finally {
            if (iniGate != null) iniGate.close();
            if (inChan != null) inChan.close();
        }
    }
",LABEL_1,LABEL_1,LABEL_0,1,"copy,in,out,inChannel,outChannel","copy:-0.00528264045715332,in:-0.0013335347175598145,out:-0.004250228404998779,inChannel:-0.0032438039779663086,outChannel:-0.00113755464553833,",5,15,0,"outChannel:inChan,in:url,inChannel:iniGate,out:url,copy:exec,",0,Greedy,204,0.044212206,replace,[]
239,"    public synchronized String encrypt(String plaintext) throws Exception {
        StringBuffer sb = new StringBuffer();
        MessageDigest md = null;
        try {
            md = MessageDigest.getInstance(""SHA-512"");
        } catch (NoSuchAlgorithmException e) {
            throw new Exception(e.getMessage());
        }
        try {
            md.update(plaintext.getBytes(""UTF-8""));
        } catch (UnsupportedEncodingException e) {
            throw new Exception(e.getMessage());
        }
        byte raw[] = md.digest();
        String hash = (new BASE64Encoder()).encode(raw);
        return hash;
    }
 <SPLIT>     private void getRandomGUID(boolean secure) {
        MessageDigest md5 = null;
        StringBuffer sbValueBeforeMD5 = new StringBuffer();
        try {
            md5 = MessageDigest.getInstance(""MD5"");
        } catch (NoSuchAlgorithmException e) {
            System.out.println(""Error: "" + e);
        }
        try {
            long time = System.currentTimeMillis();
            long rand = 0;
            if (secure) {
                rand = mySecureRand.nextLong();
            } else {
                rand = myRand.nextLong();
            }
            sbValueBeforeMD5.append(s_id);
            sbValueBeforeMD5.append("":"");
            sbValueBeforeMD5.append(Long.toString(time));
            sbValueBeforeMD5.append("":"");
            sbValueBeforeMD5.append(Long.toString(rand));
            valueBeforeMD5 = sbValueBeforeMD5.toString();
            md5.update(valueBeforeMD5.getBytes());
            byte[] array = md5.digest();
            StringBuffer sb = new StringBuffer();
            for (int j = 0; j < array.length; ++j) {
                int b = array[j] & 0xFF;
                if (b < 0x10) {
                    sb.append('0');
                }
                sb.append(Integer.toHexString(b));
            }
            valueAfterMD5 = sb.toString();
        } catch (Exception e) {
            System.out.println(""Error:"" + e);
        }
    }
",122,,LABEL_1,LABEL_1,LABEL_1,-1,"encrypt,plaintext,sb,md,raw,hash",,6,12,0,,0,GA,2517,0.391208669,failed,"[';encrypt = 0', ';plaintext = 0']"
240,"    public static void compressWithZip(Vector fileList, String zipFileName) throws IOException {
        if (fileList == null || fileList.size() == 0) return;
        FileOutputStream fos = new FileOutputStream(zipFileName);
        ZipOutputStream zos = new ZipOutputStream(fos);
        Iterator iter = fileList.iterator();
        while (iter.hasNext()) {
            String fileName = (String) iter.next();
            int ind = Math.max(fileName.lastIndexOf('/'), fileName.lastIndexOf('\\'));
            String shortName = ""unknown"";
            if (ind < fileName.length() - 1) shortName = fileName.substring(ind + 1);
            zos.putNextEntry(new ZipEntry(shortName));
            FileInputStream fis = new FileInputStream(fileName);
            byte[] buf = new byte[10000];
            int bytesRead;
            while ((bytesRead = fis.read(buf)) > 0) zos.write(buf, 0, bytesRead);
            fis.close();
            zos.closeEntry();
        }
        zos.close();
    }
 <SPLIT>     private void handleNodeLostService(long eventID, long nodeID, String ipAddr, long serviceID, String eventTime) {
        Category log = ThreadCategory.getInstance(OutageWriter.class);
        if (eventID == -1 || nodeID == -1 || ipAddr == null || serviceID == -1) {
            log.warn(EventConstants.NODE_REGAINED_SERVICE_EVENT_UEI + "" ignored - info incomplete - eventid/nodeid/ip/svc: "" + eventID + ""/"" + nodeID + ""/"" + ipAddr + ""/"" + serviceID);
            return;
        }
        Connection dbConn = null;
        try {
            dbConn = DatabaseConnectionFactory.getInstance().getConnection();
            if (openOutageExists(dbConn, nodeID, ipAddr, serviceID)) {
                log.warn(""\'"" + EventConstants.NODE_LOST_SERVICE_EVENT_UEI + ""\' for "" + nodeID + ""/"" + ipAddr + ""/"" + serviceID + "" ignored - table already  has an open record "");
            } else {
                PreparedStatement getNextOutageIdStmt = dbConn.prepareStatement(OutageManagerConfigFactory.getInstance().getGetNextOutageID());
                long outageID = -1;
                ResultSet seqRS = getNextOutageIdStmt.executeQuery();
                if (seqRS.next()) {
                    outageID = seqRS.getLong(1);
                }
                seqRS.close();
                try {
                    dbConn.setAutoCommit(false);
                } catch (SQLException sqle) {
                    log.error(""Unable to change database AutoCommit to FALSE"", sqle);
                    return;
                }
                PreparedStatement newOutageWriter = null;
                if (log.isDebugEnabled()) log.debug(""handleNodeLostService: creating new outage entry..."");
                newOutageWriter = dbConn.prepareStatement(OutageConstants.DB_INS_NEW_OUTAGE);
                newOutageWriter.setLong(1, outageID);
                newOutageWriter.setLong(2, eventID);
                newOutageWriter.setLong(3, nodeID);
                newOutageWriter.setString(4, ipAddr);
                newOutageWriter.setLong(5, serviceID);
                newOutageWriter.setTimestamp(6, convertEventTimeIntoTimestamp(eventTime));
                newOutageWriter.executeUpdate();
                newOutageWriter.close();
                try {
                    dbConn.commit();
                    if (log.isDebugEnabled()) log.debug(""nodeLostService : "" + nodeID + ""/"" + ipAddr + ""/"" + serviceID + "" recorded in DB"");
                } catch (SQLException se) {
                    log.warn(""Rolling back transaction, nodeLostService could not be recorded  for nodeid/ipAddr/service: "" + nodeID + ""/"" + ipAddr + ""/"" + serviceID, se);
                    try {
                        dbConn.rollback();
                    } catch (SQLException sqle) {
                        log.warn(""SQL exception during rollback, reason"", sqle);
                    }
                }
            }
        } catch (SQLException sqle) {
            log.warn(""SQL exception while handling \'nodeLostService\'"", sqle);
        } finally {
            try {
                if (dbConn != null) dbConn.close();
            } catch (SQLException e) {
                log.warn(""Exception closing JDBC connection"", e);
            }
        }
    }
",211,,LABEL_0,LABEL_0,LABEL_0,-1,"compressWithZip,fileList,zipFileName,fos,zos,iter,fileName,ind,shortName,fis,buf,bytesRead",,12,38,0,,0,GA,5430,0.989691691,failed,"[';print(compresswithSax)', ';compressedUsingJar = 0', ';print(compressedUsingJar)', ';FileChain = 0', ';zipPackageName = 0']"
241,"    public void serialize(OutputStream out) throws IOException, BadIMSCPException {
        ensureParsed();
        ZipFilePackageParser parser = utils.getIMSCPParserFactory().createParser();
        parser.setContentPackage(cp);
        if (on_disk != null) on_disk.delete();
        on_disk = createTemporaryFile();
        parser.serialize(on_disk);
        InputStream in = new FileInputStream(on_disk);
        IOUtils.copy(in, out);
    }
 <SPLIT>     public void testSimpleQuery() throws Exception {
        JCRNodeSource dummySource = (JCRNodeSource) resolveSource(BASE_URL + ""users/alexander.klimetschek"");
        assertNotNull(dummySource);
        OutputStream os = ((ModifiableSource) dummySource).getOutputStream();
        assertNotNull(os);
        String dummyContent = ""<?xml version=\""1.0\"" encoding=\""UTF-8\""?><user><id>alexander</id><teamspace>cyclr</teamspace><teamspace>mindquarryTooLong</teamspace></user>"";
        os.write(dummyContent.getBytes());
        os.flush();
        os.close();
        JCRNodeSource source = (JCRNodeSource) resolveSource(BASE_URL + ""users/bastian"");
        assertNotNull(source);
        os = ((ModifiableSource) source).getOutputStream();
        assertNotNull(os);
        String content = ""<?xml version=\""1.0\"" encoding=\""UTF-8\""?><user><id>bastian</id><teamspace>mindquarry</teamspace></user>"";
        os.write(content.getBytes());
        os.flush();
        os.close();
        QueryResultSource qResult = (QueryResultSource) resolveSource(BASE_URL + ""users?/*[.//user/teamspace='mindquarry']"");
        assertNotNull(qResult);
        Collection results = qResult.getChildren();
        assertEquals(1, results.size());
        Iterator it = results.iterator();
        JCRNodeSource rSrc = (JCRNodeSource) it.next();
        InputStream rSrcIn = rSrc.getInputStream();
        ByteArrayOutputStream actualOut = new ByteArrayOutputStream();
        IOUtils.copy(rSrcIn, actualOut);
        rSrcIn.close();
        assertEquals(content, actualOut.toString());
        actualOut.close();
        rSrc.delete();
    }
",81,,LABEL_1,LABEL_1,LABEL_1,-1,"serialize,out,parser,on_disk,in",,1,5,0,,0,GA,2262,0.357398248,failed,"[';serialize = 0', ';out = 0', ';parser = 0', ';on_disk = 0', ';print(on_disk)', ';in = 0', ';print(in)', ';conn = 0', ';loader = 0', ';buffer = 0', ';content = 0', ';page = 0', ';pool = 0', ';server = 0', ';test = 0', ';processor = 0', ';builder = 0', ';pillar = 0', ';off_delete = 0', ';conn = 0', ';connection = 0', ';con = 0']"
242,"    public static Properties load(String propsName) {
        Properties props = new Properties();
        URL url = ClassLoader.getSystemResource(propsName);
        try {
            props.load(url.openStream());
        } catch (IOException e) {
            e.printStackTrace();
        }
        return props;
    }
 <SPLIT>     @Test
    public void testCopy_readerToWriter_nullIn() throws Exception {
        ByteArrayOutputStream baout = new ByteArrayOutputStream();
        OutputStream out = new YellOnFlushAndCloseOutputStreamTest(baout, true, true);
        Writer writer = new OutputStreamWriter(baout, ""US-ASCII"");
        try {
            IOUtils.copy((Reader) null, writer);
            fail();
        } catch (NullPointerException ex) {
        }
    }
",59,"    public static Properties load(String propsName) {
        Properties props = new Properties();
        URL cl = ClassLoader.getSystemResource(propsName);
        try {
            props.load(cl.openStream());
        } catch (IOException e) {
            e.printStackTrace();
        }
        return props;
    }
",LABEL_0,LABEL_0,LABEL_1,1,"load,propsName,props,url","load:-1.1920928955078125e-06,propsName:0.0,props:3.5762786865234375e-07,url:1.1920928955078125e-06,",1,2,0,"url:cl,",0,Greedy,55,0.007293133,replace,[]
243,"    public static byte[] getMD5(String source) {
        byte[] tmp = null;
        try {
            java.security.MessageDigest md = java.security.MessageDigest.getInstance(""MD5"");
            md.update(source.getBytes());
            tmp = md.digest();
        } catch (Exception e) {
            e.printStackTrace();
        }
        return tmp;
    }
 <SPLIT>     public static String fetch(String reference) throws IOException {
        URL url = new URL(reference);
        HttpURLConnection c = (HttpURLConnection) url.openConnection();
        c.setRequestMethod(""GET"");
        c.setDoOutput(true);
        c.setRequestProperty(""Content-Type"", ""text/xml; charset=UTF-8"");
        return parseISToString(c.getInputStream());
    }
",78,,LABEL_0,LABEL_0,LABEL_0,-1,"getMD5,source,tmp,md",,4,9,0,,0,GA,1815,0.251699074,failed,"[';url = 0', ';output = 0']"
244,"    static File copy(File in, File out) throws IOException {
        FileChannel inChannel = new FileInputStream(in).getChannel();
        FileChannel outChannel = new FileOutputStream(out).getChannel();
        try {
            inChannel.transferTo(0, inChannel.size(), outChannel);
            return out;
        } catch (IOException e) {
            throw e;
        } finally {
            if (inChannel != null) inChannel.close();
            if (outChannel != null) outChannel.close();
        }
    }
 <SPLIT>     private void download(String fileName) {
        String filePath = Activator.showSaveDialog(fileName, new String[] { "".xls"" });
        if (filePath != null) {
            InputStream in = null;
            OutputStream out = null;
            try {
                in = this.getClass().getResourceAsStream(""/"" + fileName);
                out = new FileOutputStream(filePath);
                IOUtils.copy(in, out);
            } catch (IOException ioe) {
                Activator.showExceptionDialog(ioe);
            } finally {
                if (in != null) {
                    try {
                        in.close();
                    } catch (IOException e1) {
                        Activator.showExceptionDialog(e1);
                    }
                }
                if (out != null) {
                    try {
                        out.close();
                    } catch (IOException e1) {
                        Activator.showExceptionDialog(e1);
                    }
                }
            }
        }
    }
",99,"    static File exec(File url, File url) throws IOException {
        FileChannel iniGate = new FileInputStream(url).getChannel();
        FileChannel OutChan = new FileOutputStream(url).getChannel();
        try {
            iniGate.transferTo(0, iniGate.size(), OutChan);
            return url;
        } catch (IOException e) {
            throw e;
        } finally {
            if (iniGate != null) iniGate.close();
            if (OutChan != null) OutChan.close();
        }
    }
",LABEL_1,LABEL_1,LABEL_0,1,"copy,in,out,inChannel,outChannel","copy:-0.00528264045715332,in:-0.0013335347175598145,out:-0.004250228404998779,inChannel:-0.0032438039779663086,outChannel:-0.00113755464553833,",5,15,0,"outChannel:OutChan,in:url,inChannel:iniGate,out:url,copy:exec,",0,Greedy,204,0.029186368,replace,[]
245,"    public void parse(InputStream stream, ContentHandler handler, Metadata metadata, ParseContext context) throws IOException, SAXException, TikaException {
        String name = metadata.get(Metadata.RESOURCE_NAME_KEY);
        if (name != null && wanted.containsKey(name)) {
            FileOutputStream out = new FileOutputStream(wanted.get(name));
            IOUtils.copy(stream, out);
            out.close();
        } else {
            if (downstreamParser != null) {
                downstreamParser.parse(stream, handler, metadata, context);
            }
        }
    }
 <SPLIT>     public static void CopyFile(String in, String out) throws Exception {
        FileChannel sourceChannel = new FileInputStream(new File(in)).getChannel();
        FileChannel destinationChannel = new FileOutputStream(new File(out)).getChannel();
        sourceChannel.transferTo(0, sourceChannel.size(), destinationChannel);
        sourceChannel.close();
        destinationChannel.close();
    }
",105,,LABEL_1,LABEL_1,LABEL_1,-1,"parse,stream,handler,metadata,context,name,out",,7,19,0,,0,GA,2812,0.411440138,failed,"[';parse = 0', ';stream = 0', ';handler = 0', ';metadata = 0', ';url = 0', ';url = 0', ';base = 0', ';call = 0', ';comment = 0', ';ame = 0']"
246,"    public void updateUser(final User user) throws IOException {
        try {
            Connection conn = null;
            boolean autoCommit = false;
            try {
                conn = pool.getConnection();
                autoCommit = conn.getAutoCommit();
                conn.setAutoCommit(false);
                final PreparedStatement updateUser = conn.prepareStatement(""update users set mainRoleId=? where userId=?"");
                updateUser.setInt(1, user.getMainRole().getId());
                updateUser.setString(2, user.getUserId());
                updateUser.executeUpdate();
                final PreparedStatement deleteRoles = conn.prepareStatement(""delete from userRoles where userId=?"");
                deleteRoles.setString(1, user.getUserId());
                deleteRoles.executeUpdate();
                final PreparedStatement insertRoles = conn.prepareStatement(""insert into userRoles (userId, roleId) values (?,?)"");
                for (final Role role : user.getRoles()) {
                    insertRoles.setString(1, user.getUserId());
                    insertRoles.setInt(2, role.getId());
                    insertRoles.executeUpdate();
                }
                conn.commit();
            } catch (Throwable t) {
                if (conn != null) conn.rollback();
                throw new SQLException(t.toString());
            } finally {
                if (conn != null) {
                    conn.setAutoCommit(autoCommit);
                    conn.close();
                }
            }
        } catch (final SQLException sqle) {
            log.log(Level.SEVERE, sqle.toString(), sqle);
            throw new IOException(sqle.toString());
        }
    }
 <SPLIT>     public int read(String name) {
        status = STATUS_OK;
        try {
            name = name.trim();
            if (name.indexOf(""://"") > 0) {
                URL url = new URL(name);
                in = new BufferedInputStream(url.openStream());
            } else {
                in = new BufferedInputStream(new FileInputStream(name));
            }
            status = read(in);
        } catch (IOException e) {
            status = STATUS_OPEN_ERROR;
        }
        return status;
    }
",288,,LABEL_0,LABEL_0,LABEL_0,-1,"updateUser,user,conn,autoCommit,deleteRoles,insertRoles,role",,1,2,0,,0,GA,3631,0.600641207,failed,"[';user = 0', ';conn = 0', ';print(conn)', ';autoCommit = 0', ';print(autoCommit)', ';updateRole = 0', ';UpdatePassword = 0', ';updatePassword = 0', ';updateWord = 0', ';UpdateMember = 0', ';editRole = 0']"
247,"    public static URL addToArchive(Pod pod, ZipOutputStream podArchiveOutputStream, String filename, InputStream source) throws IOException {
        ZipEntry entry = new ZipEntry(filename);
        podArchiveOutputStream.putNextEntry(entry);
        IOUtils.copy(source, podArchiveOutputStream);
        podArchiveOutputStream.closeEntry();
        return PodArchiveResolver.withinPodArchive(pod, filename);
    }
 <SPLIT>     public static void fileCopy(String from_name, String to_name) throws IOException {
        File fromFile = new File(from_name);
        File toFile = new File(to_name);
        if (fromFile.equals(toFile)) abort(""cannot copy on itself: "" + from_name);
        if (!fromFile.exists()) abort(""no such currentSourcepartName file: "" + from_name);
        if (!fromFile.isFile()) abort(""can't copy directory: "" + from_name);
        if (!fromFile.canRead()) abort(""currentSourcepartName file is unreadable: "" + from_name);
        if (toFile.isDirectory()) toFile = new File(toFile, fromFile.getName());
        if (toFile.exists()) {
            if (!toFile.canWrite()) abort(""destination file is unwriteable: "" + to_name);
        } else {
            String parent = toFile.getParent();
            if (parent == null) abort(""destination directory doesn't exist: "" + parent);
            File dir = new File(parent);
            if (!dir.exists()) abort(""destination directory doesn't exist: "" + parent);
            if (dir.isFile()) abort(""destination is not a directory: "" + parent);
            if (!dir.canWrite()) abort(""destination directory is unwriteable: "" + parent);
        }
        FileInputStream from = null;
        FileOutputStream to = null;
        try {
            from = new FileInputStream(fromFile);
            to = new FileOutputStream(toFile);
            byte[] buffer = new byte[4096];
            int bytes_read;
            while ((bytes_read = from.read(buffer)) != -1) to.write(buffer, 0, bytes_read);
        } finally {
            if (from != null) try {
                from.close();
            } catch (IOException e) {
                ;
            }
            if (to != null) try {
                to.close();
            } catch (IOException e) {
                ;
            }
        }
    }
",63,,LABEL_1,LABEL_1,LABEL_1,-1,"addToArchive,pod,podArchiveOutputStream,filename,source,entry",,6,14,0,,0,GA,2680,0.425044521,failed,"[';addToArchive = 0', ';pod = 0', ';url = 0', ';download = 0', ';sf = 0', ';url = 0', ';zip = 0', ';sl = 0', ';input = 0']"
248,"    private static InputStream getCMSResultAsStream(String rqlQuery) throws RQLException {
        OutputStreamWriter osr = null;
        try {
            URL url = new URL(""http"", HOST, FILE);
            URLConnection conn = url.openConnection();
            conn.setDoOutput(true);
            osr = new OutputStreamWriter(conn.getOutputStream());
            osr.write(rqlQuery);
            osr.flush();
            return conn.getInputStream();
        } catch (IOException ioe) {
            throw new RQLException(""IO Exception reading result from server"", ioe);
        } finally {
            if (osr != null) {
                try {
                    osr.close();
                } catch (IOException ioe) {
                }
            }
        }
    }
 <SPLIT>     @Override
    public void sendErrorMessage(String message) throws EntriesException, StatementNotExecutedException, NotConnectedException, MessagingException {
        if (query == null) {
            throw new NotConnectedException();
        }
        ArrayList<String> recipients = query.getUserManager().getTecMail();
        Mail mail = new Mail(recipients);
        try {
            ZipOutputStream zos = new ZipOutputStream(new FileOutputStream(""log/ossobooklog.zip""));
            FileInputStream fis = new FileInputStream(""log/ossobook.log"");
            ZipEntry entry = new ZipEntry(""ossobook.log"");
            zos.putNextEntry(entry);
            byte[] buffer = new byte[8192];
            int read = 0;
            while ((read = fis.read(buffer, 0, 1024)) != -1) {
                zos.write(buffer, 0, read);
            }
            zos.closeEntry();
            fis.close();
            zos.close();
            mail.sendErrorMessage(message, new File(""log/ossobooklog.zip""), getUserName());
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }
",129,"    private static InputStream getCMSResultAsStream(String rqlQuery) throws RQLException {
        OutputStreamWriter osr = null;
        try {
            URL lc = new URL(""http"", HOST, FILE);
            URLConnection conn = lc.openConnection();
            conn.setDoOutput(true);
            osr = new OutputStreamWriter(conn.getOutputStream());
            osr.write(rqlQuery);
            osr.flush();
            return conn.getInputStream();
        } catch (IOException ioe) {
            throw new RQLException(""IO Exception reading result from server"", ioe);
        } finally {
            if (osr != null) {
                try {
                    osr.close();
                } catch (IOException ioe) {
                }
            }
        }
    }
",LABEL_0,LABEL_0,LABEL_1,1,"getCMSResultAsStream,rqlQuery,osr,url,conn","getCMSResultAsStream:0.00011235475540161133,rqlQuery:-4.279613494873047e-05,osr:-0.0004665255546569824,url:0.03124159574508667,conn:-0.0002684593200683594,",1,2,0,"url:lc,",0,Greedy,54,0.008291793,replace,[]
249,"    public static String getFile(String serviceName, String wsdlLocation, String endpoint) throws AxisFault {
        mLog.debug(""Downloading WSDL file from: "" + wsdlLocation);
        mLog.debug(""Received endpoint: "" + endpoint);
        String fileLocation = null;
        try {
            String tempDir = System.getProperty(""java.io.tmpdir"");
            URL url = new URL(wsdlLocation);
            String WSDLFile = tempDir + File.separator + serviceName + "".wsdl"";
            String tmpWSDLFile = WSDLFile + "".tmp"";
            File inputFile = new File(WSDLFile);
            File tmpFile = new File(tmpWSDLFile);
            if (!inputFile.exists() || inputFile.length() == 0) {
                mLog.debug(""Downloading the WSDL"");
                inputFile.createNewFile();
                InputStream in = url.openStream();
                FileOutputStream out = new FileOutputStream(inputFile);
                URLConnection con = url.openConnection();
                int fileLength = con.getContentLength();
                ReadableByteChannel channelIn = Channels.newChannel(in);
                FileChannel channelOut = out.getChannel();
                channelOut.transferFrom(channelIn, 0, fileLength);
                channelIn.close();
                channelOut.close();
                out.flush();
                out.close();
                in.close();
                Document tmpDocument = XMLUtils.newDocument(new FileInputStream(inputFile));
                NodeList nl1 = tmpDocument.getElementsByTagName(""wsdlsoap:address"");
                for (int i = 0; i < nl1.getLength(); i++) {
                    Node node1 = nl1.item(i);
                    if (node1.getNodeName().equals(""wsdlsoap:address"")) {
                        ((Element) node1).setAttribute(""location"", endpoint);
                    }
                }
                FileOutputStream tmpOut = new FileOutputStream(tmpFile);
                XMLUtils.DocumentToStream(tmpDocument, tmpOut);
                tmpOut.flush();
                tmpOut.close();
                boolean retVal = inputFile.delete();
                if (retVal) {
                    retVal = tmpFile.renameTo(new File(WSDLFile));
                }
                mLog.debug(""Return Value: "" + retVal);
            } else {
                mLog.debug(""The WSDL is already at the ServiceProvider"");
            }
            fileLocation = WSDLFile;
        } catch (MalformedURLException mx) {
            mLog.error(""MalformedURLException: "" + mx.getMessage() + "", cause: "" + mx.getCause().getMessage());
            throw new AxisFault(mx.getMessage(), mx.getCause());
        } catch (IOException ix) {
            mLog.error(""IOException: "" + ix.getMessage() + "", cause: "" + ix.getCause().getMessage());
            throw new AxisFault(ix.getMessage(), ix.getCause());
        } catch (ParserConfigurationException px) {
            mLog.error(""ParserConfigurationException: "" + px.getMessage() + "", cause: "" + px.getCause().getMessage());
            throw new AxisFault(px.getMessage(), px.getCause());
        } catch (SAXException sx) {
            mLog.error(""SAXException: "" + sx.getMessage() + "", cause: "" + sx.getCause().getMessage());
            throw new AxisFault(sx.getMessage(), sx.getCause());
        }
        return fileLocation;
    }
 <SPLIT>     protected static void copyDeleting(File source, File dest) throws IOException {
        byte[] buf = new byte[8 * 1024];
        FileInputStream in = new FileInputStream(source);
        try {
            FileOutputStream out = new FileOutputStream(dest);
            try {
                int count;
                while ((count = in.read(buf)) >= 0) out.write(buf, 0, count);
            } finally {
                out.close();
            }
        } finally {
            in.close();
        }
    }
",631,,LABEL_1,LABEL_0,,-4,"getFile,serviceName,wsdlLocation,endpoint,fileLocation,tempDir,url,WSDLFile,tmpWSDLFile,inputFile,tmpFile,in,out,con,fileLength,channelIn,channelOut,tmpDocument,nl1,i,node1,tmpOut,retVal",,,,0,,0,Greedy,1,0.000701737,,[]
250,"    protected boolean checkLink(URL url) {
        try {
            URLConnection connection = url.openConnection();
            connection.connect();
            return true;
        } catch (IOException e) {
            MsgLog.error(""DapParser.checkLink(): IOException: "" + e.toString());
            return false;
        }
    }
 <SPLIT>     public int updateuser(User u) {
        int i = 0;
        Connection conn = null;
        PreparedStatement pm = null;
        try {
            conn = Pool.getConnection();
            conn.setAutoCommit(false);
            pm = conn.prepareStatement(""update user set username=?,passwd=?,existstate=?,management=? where userid=?"");
            pm.setString(1, u.getUsername());
            pm.setString(2, u.getPasswd());
            pm.setInt(3, u.getExiststate());
            pm.setInt(4, u.getManagement());
            pm.setString(5, u.getUserid());
            i = pm.executeUpdate();
            conn.commit();
            Pool.close(pm);
            Pool.close(conn);
        } catch (Exception e) {
            e.printStackTrace();
            try {
                conn.rollback();
            } catch (SQLException e1) {
                e1.printStackTrace();
            }
            Pool.close(pm);
            Pool.close(conn);
        } finally {
            Pool.close(pm);
            Pool.close(conn);
        }
        return i;
    }
",56,,LABEL_0,LABEL_0,LABEL_0,-1,"checkLink,url,connection",,3,5,0,,0,GA,1319,0.190369928,failed,"[';print(connection)', '; checkConnect = 0']"
251,"    public static String md5String(String str) {
        try {
            MessageDigest md;
            md = MessageDigest.getInstance(""MD5"");
            md.update(str.getBytes());
            byte[] hash = md.digest();
            final char[] hexChars = { '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f' };
            StringBuffer res = new StringBuffer();
            for (int i = 0; i < hash.length; i++) {
                res.append(hexChars[(0xF0 & hash[i]) >> 4]);
                res.append(hexChars[0x0F & hash[i]]);
            }
            return res.toString();
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
            return null;
        }
    }
 <SPLIT>     public String kodetu(String testusoila) {
        MessageDigest md = null;
        try {
            md = MessageDigest.getInstance(""SHA"");
        } catch (NoSuchAlgorithmException e) {
            new MezuLeiho(""Ez da zifraketa algoritmoa aurkitu"", ""Ados"", ""Zifraketa Arazoa"", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        }
        try {
            md.update(testusoila.getBytes(""UTF-8""));
        } catch (UnsupportedEncodingException e) {
            new MezuLeiho(""Errorea kodetzerakoan"", ""Ados"", ""Kodeketa Errorea"", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        }
        byte raw[] = md.digest();
        String hash = (new BASE64Encoder()).encode(raw);
        return hash;
    }
",173,,LABEL_1,LABEL_1,LABEL_1,-1,"md5String,str,md,hash,hexChars,res,i",,7,23,0,,0,GA,3349,0.517315757,failed,"[';print( md5Bytes)', ';md4string = 0']"
252,"    private String logonToServer(FTPClient ftpClient, String ftpAddress, int noRetries) {
        String remoteHomeDir = null;
        noRetriesSoFar = 0;
        while (true) {
            try {
                ftpClient.connect(ftpAddress, ftpPort);
                int reply = ftpClient.getReplyCode();
                if (!FTPReply.isPositiveCompletion(reply)) {
                    ftpClient.disconnect();
                    throw new IOException();
                }
                if (!ftpClient.login(user, password)) {
                    throw new IOException();
                }
                remoteHomeDir = ftpClient.printWorkingDirectory();
                msgEntry.setAppContext(""logonToServer()"");
                msgEntry.setMessageText(""Logged into FTP server "" + ftpAddress + "":"" + ftpPort + "" as user "" + user);
                logger.logProcess(msgEntry);
                break;
            } catch (IOException e) {
                logoutAndDisconnect(ftpClient);
                if (noRetriesSoFar++ < noRetries) {
                    waitBetweenRetry();
                    notifyAndStartWaitingFlag = false;
                } else {
                    notifyAndStartWaitingFlag = true;
                    errEntry.setThrowable(e);
                    errEntry.setAppContext(""logonToServer()"");
                    errEntry.setAppMessage(""Unable to login after "" + (noRetriesSoFar - 1) + "" retries. Max Retries.\n"" + ""Address:"" + ftpAddress + ""\n"" + ""User:"" + user);
                    errEntry.setSubjectSendEmail(""Unable to login to "" + ftpAddress + "" after "" + (noRetriesSoFar - 1) + "" retries."");
                    logger.logError(errEntry);
                    break;
                }
            }
        }
        return remoteHomeDir;
    }
 <SPLIT>     public void actionPerformed(ActionEvent ae) {
        if (ae.getSource() == jbutton) {
            try {
                String toservlet = ""http://localhost:8080/direto-project/arquivos/teste.odt"";
                URL servleturl = new URL(toservlet);
                URLConnection servletconnection = servleturl.openConnection();
                servletconnection.setDoInput(true);
                servletconnection.setDoOutput(true);
                servletconnection.setUseCaches(false);
                servletconnection.setDefaultUseCaches(false);
                DataInputStream inputFromClient = new DataInputStream(servletconnection.getInputStream());
                inputFromClient.readByte();
                OutputStream fos = new FileOutputStream(""/home/danillo/arquivo_carregado.odt"");
                byte[] buf = new byte[1024];
                int bytesread;
                while ((bytesread = inputFromClient.read(buf)) > -1) {
                    fos.write(buf, 0, bytesread);
                }
                inputFromClient.close();
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }
",269,"    private String logonToServer(FTPClient ftpClient, String ftpAddress, int noRetries) {
        String remoteHomeDir = null;
        noRetriesSoFar = 0;
        while (true) {
            try {
                ftpClient.connect(ftpAddress, ftpPort);
                int reply = ftpClient.getReplyCode();
                if (!FTPReply.isPositiveCompletion(reply)) {
                    ftpClient.disconnect();
                    throw new IOException();
                }
                if (!ftpClient.login(user, password)) {
                    throw new IOException();
                }
                remoteHomeDir = ftpClient.printWorkingDirectory();
                msgEntry.setAppContext(""logonToServer()"");
                msgEntry.setMessageText(""Logged into FTP server "" + ftpAddress + "":"" + ftpPort + "" as user "" + user);
                logger.logProcess(msgEntry);
                break;
            } catch (IOException e) {
                logoutAndDisconnect(ftpClient);
                if (noRetriesSoFar++ < noRetries) {
                    waitBetweenRetry();
                    notifyAndStartWaitingFlag = false;
                } else {
                    notifyAndStartWaitingFlag = true;
                    errEntry.setThrowable(e);
                    errEntry.setAppContext(""logonToServer()"");
                    errEntry.setAppMessage(""Unable to login after "" + (noRetriesSoFar - 1) + "" retries. Max Retries.\n"" + ""Address:"" + ftpAddress + ""\n"" + ""User:"" + user);
                    errEntry.setSubjectSendEmail(""Unable to login to "" + ftpAddress + "" after "" + (noRetriesSoFar - 1) + "" retries."");
                    logger.logError(errEntry);
                    break;
                }
            }
        }
        return remoteHomeDir;
    }
;ftpClient = 0;ftpcclient = 0",LABEL_0,LABEL_0,LABEL_0,1,"logonToServer,ftpClient,ftpAddress,noRetries,remoteHomeDir,noRetriesSoFar,reply","logonToServer:0.00984567403793335,ftpClient:0.015578150749206543,ftpAddress:-0.011718928813934326,noRetries:-0.005635976791381836,remoteHomeDir:0.005643606185913086,noRetriesSoFar:0.013091444969177246,reply:0.00817042589187622,",0,0,0,"ftpClient:ftpClient,noRetriesSoFar:noRetriesSoFar,logonToServer:logonToServer,reply:reply,remoteHomeDir:remoteHomeDir,noRetries:noRetries,ftpAddress:ftpAddress,",0,Greedy,565,0.099342064,inesrt,"[';ftpClient = 0', ';ftpcclient = 0']"
253,"    public static void copyFile(String inFile, String outFile) {
        File in = new File(inFile);
        File out = new File(outFile);
        try {
            FileChannel inChannel = new FileInputStream(in).getChannel();
            FileChannel outChannel = new FileOutputStream(out).getChannel();
            try {
                inChannel.transferTo(0, inChannel.size(), outChannel);
            } finally {
                if (inChannel != null) inChannel.close();
                if (outChannel != null) outChannel.close();
            }
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
    }
 <SPLIT>     public void execute() {
        try {
            if (methods == null) {
                return;
            }
            List<Resource> resources = new ArrayList<Resource>();
            for (Iterator<Resource> i = classFiles.iterator(); i.hasNext(); ) {
                final Resource classFile = i.next();
                if (!classFile.getName().equals(CALLSTACK_FILE)) {
                    try {
                        InputStream inputStream = classFile.getInputStream();
                        ClassReader reader = new ClassReader(inputStream);
                        reader.accept(new MethodAnalyzer(), 0);
                        resources.add(classFile);
                        oldSize += classFile.getSize();
                    } catch (IllegalStateException e) {
                    }
                }
            }
            for (Iterator<Resource> i = resources.iterator(); i.hasNext(); ) {
                final Resource classFile = i.next();
                try {
                    InputStream inputStream = classFile.getInputStream();
                    ClassReader reader = new ClassReader(inputStream);
                    ClassWriter writer = new ClassWriter(reader, ClassWriter.COMPUTE_MAXS);
                    if (!classFile.getName().startsWith(CALLSTACK_FILE.substring(0, CALLSTACK_FILE.indexOf('.')))) {
                        reader.accept(new MethodInjector(writer), 0);
                        byte[] b = writer.toByteArray();
                        inputStream.close();
                        OutputStream outputStream = classFile.getOutputStream();
                        outputStream.write(b);
                        outputStream.close();
                        injectedClasses++;
                    }
                } catch (IllegalStateException e) {
                }
                newSize += classFile.getSize();
            }
            File classFile = new File(classFiles.getDir(), CALLSTACK_FILE);
            if (!classFile.exists()) {
                throw new BuildException(""Missing net.yura.mobile.logging.CallStack class"");
            }
            InputStream inputStream = new FileInputStream(classFile);
            ClassReader reader = new ClassReader(inputStream);
            ClassWriter writer = new ClassWriter(reader, ClassWriter.COMPUTE_MAXS);
            try {
                reader.accept(new PushMethodGenerator(writer), 0);
            } finally {
                inputStream.close();
            }
            byte[] b = writer.toByteArray();
            inputStream.close();
            OutputStream outputStream = new FileOutputStream(classFile);
            outputStream.write(b);
            outputStream.close();
            log(injectedClasses + "" classes injected"");
            log((injectedMethods * 100) / Math.max(1, totalMethods) + ""% of methods injected"");
            log((100 - ((oldSize * 100) / newSize)) + ""% code size increase"");
        } catch (IOException e) {
            log(e, 0);
        }
    }
",120,,LABEL_1,LABEL_1,LABEL_1,-1,"copyFile,inFile,outFile,in,out,inChannel,outChannel",,4,13,0,,0,GA,3028,0.504150597,failed,"[';copyFile = 0', ';print(copyFile)', ';inFile = 0', ';in = 0', ';out = 0', ';InFilename = 0', ';url = 0', ';print(url)', ';conn = 0', ';string = 0', ';dot = 0', ';INConnection = 0', ';print(newContext)']"
254,"    private String encryptPassword(String password) throws NoSuchAlgorithmException {
        StringBuffer encryptedPassword = new StringBuffer();
        MessageDigest md5 = MessageDigest.getInstance(""MD5"");
        md5.reset();
        md5.update(password.getBytes());
        byte digest[] = md5.digest();
        for (int i = 0; i < digest.length; i++) {
            String hex = Integer.toHexString(0xFF & digest[i]);
            if (hex.length() == 1) {
                encryptedPassword.append('0');
            }
            encryptedPassword.append(hex);
        }
        return encryptedPassword.toString();
    }
 <SPLIT>     public static String getMessageDigest(String[] inputs) {
        if (inputs.length == 0) return null;
        try {
            MessageDigest sha = MessageDigest.getInstance(""SHA-1"");
            for (String input : inputs) sha.update(input.getBytes());
            byte[] hash = sha.digest();
            String CPass = """";
            int h = 0;
            String s = """";
            for (int i = 0; i < 20; i++) {
                h = hash[i];
                if (h < 0) h += 256;
                s = Integer.toHexString(h);
                if (s.length() < 2) CPass = CPass.concat(""0"");
                CPass = CPass.concat(s);
            }
            CPass = CPass.toUpperCase();
            return CPass;
        } catch (NoSuchAlgorithmException e) {
            throw new IllegalStateException(e.getMessage());
        }
    }
",127,,LABEL_1,LABEL_1,LABEL_1,-1,"encryptPassword,password,encryptedPassword,md5,digest,i,hex",,7,22,0,,0,GA,2820,0.429169246,failed,[]
255,"    public MotixFileItem(final InputStream is, final String name, final String contentType, final int index) throws IOException {
        this.name = name;
        this.contentType = contentType;
        this.index = index;
        this.extension = FilenameUtils.getExtension(this.name);
        this.isImage = ImageUtils.isImage(name);
        ArrayInputStream isAux = null;
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        try {
            IOUtils.copy(is, out);
            isAux = new ArrayInputStream(out.toByteArray());
            if (this.isImage) {
                this.bufferedImage = imaging.read(isAux);
            }
        } finally {
            IOUtils.closeQuietly(out);
            IOUtils.closeQuietly(isAux);
        }
        this.inputStream = new ArrayInputStream(out.toByteArray());
    }
 <SPLIT>     public static void copyFile(File src, File dest) throws IOException {
        FileInputStream fis = new FileInputStream(src);
        FileOutputStream fos = new FileOutputStream(dest);
        java.nio.channels.FileChannel channelSrc = fis.getChannel();
        java.nio.channels.FileChannel channelDest = fos.getChannel();
        channelSrc.transferTo(0, channelSrc.size(), channelDest);
        fis.close();
        fos.close();
    }
",153,,LABEL_1,LABEL_1,LABEL_1,-1,"is,name,contentType,index,extension,isImage,isAux,out,bufferedImage,inputStream",,10,28,0,,0,GA,4398,0.658127034,failed,"[';is = 0', ';name = 0']"
256,"    @SuppressWarnings(""unchecked"")
    public List<Event> lookupFutureEvents(String groupIdentifier) throws GtugsException {
        StringBuilder json = new StringBuilder();
        String requestUrl = ""http://api.meetup.com/events.json/?group_urlname="" + groupIdentifier + ""&key="" + key;
        try {
            URL url = new URL(requestUrl.toString());
            BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));
            String inputLine;
            while ((inputLine = in.readLine()) != null) {
                json.append(inputLine);
            }
            in.close();
        } catch (IOException e) {
            throw new GtugsException(e);
        }
        List<Event> events = new ArrayList<Event>();
        JSONObject jsonObj = (JSONObject) JSONValue.parse(json.toString());
        JSONArray results = (JSONArray) jsonObj.get(""results"");
        for (int i = 0; i < results.size(); i++) {
            JSONObject result = (JSONObject) results.get(i);
            Event e = new Event();
            e.setAttendeeCount(Integer.parseInt((String) result.get(""rsvpcount"")));
            e.setCity((String) result.get(""venue_city""));
            e.setDescription((String) result.get(""description""));
            e.setLatitude(Double.parseDouble((String) result.get(""venue_lat"")));
            e.setLongitude(Double.parseDouble((String) result.get(""venue_lon"")));
            e.setName((String) result.get(""name""));
            Date myDate = null;
            String time = (String) result.get(""time"");
            try {
                myDate = meetupDateFormat.parse(time);
                e.setStartTime(timeDateFormat.format(myDate));
                e.setEndTime(timeDateFormat.format(myDate));
                e.setStartDate(myDate);
                e.setEndDate(myDate);
                String tz = tzDateFormat.format(myDate);
                if (tz != null && tz.startsWith(""+"")) {
                    tz = tz.substring(1);
                }
                e.setTimeZone(Integer.toString(Integer.parseInt(tz) / 100));
            } catch (ParseException ex) {
                ex.printStackTrace();
                continue;
            }
            e.setState((String) result.get(""venue_state""));
            StringBuilder addressBuilder = new StringBuilder();
            if (result.get(""venue_address1"") != null) {
                addressBuilder.append((String) result.get(""venue_address1"") + "" "");
            }
            if (result.get(""venue_address2"") != null) {
                addressBuilder.append((String) result.get(""venue_address2"") + "" "");
            }
            if (result.get(""venue_address3"") != null) {
                addressBuilder.append((String) result.get(""venue_address3"") + "" "");
            }
            if (result.get(""venue_address4"") != null) {
                addressBuilder.append((String) result.get(""venue_address4""));
            }
            e.setStreetAddress(addressBuilder.toString().trim());
            e.setZipCode((String) result.get(""venue_zip""));
            e.setUrl((String) result.get(""event_url""));
            events.add(e);
        }
        return events;
    }
 <SPLIT>             @Override
            public void handledRun() throws Throwable {
                try {
                    URL url = new URL(ONLINE_CLIENT_DATA + ""gamedata.xml"");
                    BufferedReader br = new BufferedReader(new InputStreamReader(url.openStream()));
                    int lastversion = 0;
                    String readHeader1 = br.readLine();
                    String readHeader2 = br.readLine();
                    String[] parts = readHeader2.split("" "");
                    lastversion = new Integer(parts[1]);
                    GameDatabase.loadVersion();
                    if (GameDatabase.version < lastversion) {
                        Logger.log(LogTypes.LOG, ""Downloading new gamedata"");
                        BufferedOutputStream bo = null;
                        File destfile = new File(GameDatabase.dataFilePath);
                        if (!destfile.createNewFile()) {
                            destfile.delete();
                            destfile.createNewFile();
                        }
                        bo = new BufferedOutputStream(new FileOutputStream(destfile));
                        bo.write((readHeader1 + ""\n"").getBytes());
                        bo.write((readHeader2 + ""\n"").getBytes());
                        int readedbyte;
                        while ((readedbyte = br.read()) != -1) {
                            bo.write(readedbyte);
                        }
                        bo.flush();
                        try {
                            br.close();
                            bo.close();
                        } catch (Exception ex) {
                            Logger.log(ex);
                        }
                    }
                } catch (java.net.UnknownHostException unknownHost) {
                    Logger.log(""Sourceforge is down, cannot update gamedata"");
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(FrameOrganizer.getClientFrame(), ""The gamedata is outdated, but Coopnet couldn't update it!"", ""Gamedata outdated"", JOptionPane.INFORMATION_MESSAGE);
                    throw e;
                } finally {
                    GameDatabase.loadVersion();
                    GameDatabase.load("""", GameDatabase.dataFilePath);
                    GameDatabase.detectGames();
                }
            }
",692,,LABEL_1,LABEL_0,,-4,"lookupFutureEvents,groupIdentifier,json,requestUrl,url,in,inputLine,events,jsonObj,results,i,result,e,myDate,time,tz",,,,0,,0,Greedy,1,0.000971981,,[]
257,"    public Long split(File targetDirectory, String prefix, long maxUnitBases, long maxUnitEntries) throws Exception {
        if (!targetDirectory.exists()) {
            if (!targetDirectory.mkdirs()) throw new Exception(""Could not create target directory "" + targetDirectory.getAbsolutePath());
        }
        if (!size.isUnknown() && size.getBases() < maxUnitBases && (maxUnitEntries <= 0 || size.getEntries() < maxUnitEntries)) {
            FileInputStream fis = new FileInputStream(this);
            FileChannel fci = fis.getChannel();
            FileOutputStream fos = new FileOutputStream(new File(targetDirectory, prefix + ""_0"" + "".fasta""));
            FileChannel fco = fos.getChannel();
            ByteBuffer buffer = ByteBuffer.allocate(64000);
            while (fci.read(buffer) > 0) {
                buffer.flip();
                fco.write(buffer);
                buffer.clear();
            }
            fci.close();
            fco.close();
            return (long) 1;
        } else {
            long currentBasesCount = 0;
            long currentEntriesCount = 0;
            int targetCount = 0;
            FileChannel fastaChannel = new FileInputStream(this).getChannel();
            int totalSeqCount = 0;
            long totalResiduesCount = 0;
            try {
                long prevTime = System.currentTimeMillis();
                long fastaFileSize = this.length();
                long fastaFileReadOffset = 0L;
                long partitionStartOffset = 0L;
                final int bufferSize = 1024 * 1024;
                ByteBuffer fastaBuffer = ByteBuffer.allocateDirect(bufferSize);
                int fastaReadState = FASTAFileTokenizer.UNKNOWN;
                for (; fastaFileReadOffset < fastaFileSize; ) {
                    long nBytes = fastaChannel.read(fastaBuffer);
                    if (nBytes <= 0) {
                        fastaBuffer.limit(0);
                        break;
                    } else {
                        fastaBuffer.flip();
                        fastaFileReadOffset += nBytes;
                    }
                    for (; ; ) {
                        if (!fastaBuffer.hasRemaining()) {
                            fastaBuffer.clear();
                            break;
                        }
                        int b = fastaBuffer.get();
                        if (b == '\r') {
                        } else if (b == '\n') {
                            if (fastaReadState == FASTAFileTokenizer.DEFLINE) {
                                fastaReadState = FASTAFileTokenizer.SEQUENCELINE;
                            }
                        } else if (b == '>') {
                            if (fastaReadState == FASTAFileTokenizer.UNKNOWN) {
                                fastaReadState = FASTAFileTokenizer.STARTDEFLINE;
                            } else if (fastaReadState == FASTAFileTokenizer.SEQUENCELINE) {
                                fastaReadState = FASTAFileTokenizer.STARTDEFLINE;
                            }
                            if (fastaReadState == FASTAFileTokenizer.STARTDEFLINE) {
                                if (currentBasesCount >= maxUnitBases || maxUnitEntries > 0 && currentEntriesCount >= maxUnitEntries) {
                                    fastaBuffer.position(fastaBuffer.position() - 1);
                                    long currentTime = System.currentTimeMillis();
                                    System.out.println(new java.util.Date() + "" Partition "" + targetCount + "" containing "" + currentEntriesCount + "" sequences and "" + currentBasesCount + "" residues ends at "" + (fastaFileReadOffset - fastaBuffer.remaining()) + "" and was created in "" + (currentTime - prevTime) + "" ms"");
                                    prevTime = currentTime;
                                    long partitionEndOffset = fastaFileReadOffset - fastaBuffer.remaining();
                                    FileChannel partitionChannel = new FileOutputStream(new File(targetDirectory, prefix + ""_"" + targetCount + "".fasta"")).getChannel();
                                    nBytes = fastaChannel.transferTo(partitionStartOffset, partitionEndOffset - partitionStartOffset, partitionChannel);
                                    partitionChannel.force(true);
                                    partitionChannel.close();
                                    targetCount++;
                                    partitionStartOffset += nBytes;
                                    currentBasesCount = 0;
                                    currentEntriesCount = 0;
                                    fastaReadState = FASTAFileTokenizer.UNKNOWN;
                                } else {
                                    fastaReadState = FASTAFileTokenizer.DEFLINE;
                                    currentEntriesCount++;
                                }
                                totalSeqCount++;
                            }
                        } else {
                            if (fastaReadState == FASTAFileTokenizer.SEQUENCELINE) {
                                totalResiduesCount++;
                                currentBasesCount++;
                            }
                        }
                    }
                }
                if (partitionStartOffset < fastaFileSize) {
                    long currentTime = System.currentTimeMillis();
                    System.out.println(new java.util.Date() + "" Partition "" + targetCount + "" containing "" + currentEntriesCount + "" sequences and "" + currentBasesCount + "" residues ends at "" + (fastaFileSize) + "" and was created in "" + (currentTime - prevTime) + "" ms"");
                    FileChannel partitionChannel = new FileOutputStream(new File(targetDirectory, prefix + ""_"" + targetCount + "".fasta"")).getChannel();
                    fastaChannel.transferTo(partitionStartOffset, fastaFileSize - partitionStartOffset, partitionChannel);
                    partitionChannel.force(true);
                    partitionChannel.close();
                    targetCount++;
                }
                if (size.isUnknown()) {
                    size.setBases(totalResiduesCount);
                    size.setEntries(totalSeqCount);
                }
            } finally {
                fastaChannel.close();
            }
            return (long) targetCount;
        }
    }
 <SPLIT>     public List load(String sourceType, Object source, String param) throws Exception {
        if (log.isTraceEnabled()) {
            log.trace(""load "" + source);
        }
        String location = null;
        String type = null;
        Object inputsource = null;
        if (source instanceof DynamicMBean) {
            sourceType = ""MbeansDescriptorsDynamicMBeanSource"";
            inputsource = source;
        } else if (source instanceof URL) {
            URL url = (URL) source;
            location = url.toString();
            type = param;
            inputsource = url.openStream();
            if (sourceType == null) {
                sourceType = sourceTypeFromExt(location);
            }
        } else if (source instanceof File) {
            location = ((File) source).getAbsolutePath();
            inputsource = new FileInputStream((File) source);
            type = param;
            if (sourceType == null) {
                sourceType = sourceTypeFromExt(location);
            }
        } else if (source instanceof InputStream) {
            type = param;
            inputsource = source;
        } else if (source instanceof Class) {
            location = ((Class) source).getName();
            type = param;
            inputsource = source;
            if (sourceType == null) {
                sourceType = ""MbeansDescriptorsIntrospectionSource"";
            }
        }
        if (sourceType == null) {
            sourceType = ""MbeansDescriptorsDigesterSource"";
        }
        ModelerSource ds = getModelerSource(sourceType);
        List mbeans = ds.loadDescriptors(this, location, type, inputsource);
        return mbeans;
    }
",862,,LABEL_0,LABEL_1,,-4,"split,targetDirectory,prefix,maxUnitBases,maxUnitEntries,fis,fci,fos,fco,buffer,currentBasesCount,currentEntriesCount,targetCount,fastaChannel,totalSeqCount,totalResiduesCount,prevTime,fastaFileSize,fastaFileReadOffset,partitionStartOffset,bufferSize,fastaBuffer,fastaReadState,nBytes",,,,0,,0,Greedy,1,0.00111477,,[]
258,"    public void loadExistingAntlibs(ClassLoader classLoader) {
        URL antlibUrl;
        URI antlibUri;
        try {
            Enumeration<URL> resources = classLoader == null ? ClassLoader.getSystemResources(antLibsResource) : classLoader.getResources(antLibsResource);
            while (resources.hasMoreElements()) {
                URL url = resources.nextElement();
                InputStream stream = url.openStream();
                BufferedReader reader = new BufferedReader(new InputStreamReader(stream, ""UTF-8""));
                for (String line = reader.readLine(); line != null; line = reader.readLine()) {
                    String pkg = line.trim();
                    URI uri = URI.create(""antlib:"" + pkg);
                    URI resource2antlib = URI.create(antLibsResource2root + pkg.replace('.', '/') + (pkg.isEmpty() ? """" : ""/"") + ""antlib.xml"");
                    antlibUri = NetUtils.resolve(url.toURI(), resource2antlib);
                    try {
                        antlibUrl = antlibUri.toURL();
                    } catch (IllegalArgumentException e) {
                        System.err.println(""base uri: "" + url);
                        System.err.println(""relativepath: "" + resource2antlib);
                        System.err.println(""target uri: "" + antlibUri);
                        throw new RuntimeException(antlibUri.toString(), e);
                    }
                    loadAntLib(antlibUrl, uri);
                }
                reader.close();
                stream.close();
            }
        } catch (IOException e) {
            throw new RuntimeException(e);
        } catch (URISyntaxException e) {
            throw new RuntimeException(e);
        }
    }
 <SPLIT>     public static void doVersionCheck(View view) {
        view.showWaitCursor();
        try {
            URL url = new URL(jEdit.getProperty(""version-check.url""));
            InputStream in = url.openStream();
            BufferedReader bin = new BufferedReader(new InputStreamReader(in));
            String line;
            String version = null;
            String build = null;
            while ((line = bin.readLine()) != null) {
                if (line.startsWith("".version"")) version = line.substring(8).trim(); else if (line.startsWith("".build"")) build = line.substring(6).trim();
            }
            bin.close();
            if (version != null && build != null) {
                if (jEdit.getBuild().compareTo(build) < 0) newVersionAvailable(view, version, url); else {
                    GUIUtilities.message(view, ""version-check"" + "".up-to-date"", new String[0]);
                }
            }
        } catch (IOException e) {
            String[] args = { jEdit.getProperty(""version-check.url""), e.toString() };
            GUIUtilities.error(view, ""read-error"", args);
        }
        view.hideWaitCursor();
    }
",306,,LABEL_1,LABEL_0,,-4,"loadExistingAntlibs,classLoader,antlibUrl,antlibUri,resources,url,stream,reader,line,pkg,uri,resource2antlib",,,,0,,0,Greedy,1,0.000532961,,[]
259,"    public int exists(String fileToCheck) throws IOException {
        FTPClient ftp = new FTPClient();
        int found = 0;
        try {
            int reply = 0;
            ftp.connect(this.endpointURL, this.endpointPort);
            reply = ftp.getReplyCode();
            if (!FTPReply.isPositiveCompletion(reply)) {
                ftp.disconnect();
                throw new IOException(""Ftp exists server refused connection."");
            }
            if (!ftp.login(""anonymous"", """")) {
                ftp.logout();
                throw new IOException(""FTP: server wrong passwd"");
            }
            ftp.enterLocalPassiveMode();
            if (ftp.listNames(fileToCheck) != null) {
                found = 1;
            }
            ftp.logout();
        } catch (Exception e) {
            throw new IOException(e.getMessage());
        }
        return found;
    }
 <SPLIT>     public void convert(File src, File dest) throws IOException {
        InputStream in = new BufferedInputStream(new FileInputStream(src));
        DcmParser p = pfact.newDcmParser(in);
        Dataset ds = fact.newDataset();
        p.setDcmHandler(ds.getDcmHandler());
        try {
            FileFormat format = p.detectFileFormat();
            if (format != FileFormat.ACRNEMA_STREAM) {
                System.out.println(""\n"" + src + "": not an ACRNEMA stream!"");
                return;
            }
            p.parseDcmFile(format, Tags.PixelData);
            if (ds.contains(Tags.StudyInstanceUID) || ds.contains(Tags.SeriesInstanceUID) || ds.contains(Tags.SOPInstanceUID) || ds.contains(Tags.SOPClassUID)) {
                System.out.println(""\n"" + src + "": contains UIDs!"" + "" => probable already DICOM - do not convert"");
                return;
            }
            boolean hasPixelData = p.getReadTag() == Tags.PixelData;
            boolean inflate = hasPixelData && ds.getInt(Tags.BitsAllocated, 0) == 12;
            int pxlen = p.getReadLength();
            if (hasPixelData) {
                if (inflate) {
                    ds.putUS(Tags.BitsAllocated, 16);
                    pxlen = pxlen * 4 / 3;
                }
                if (pxlen != (ds.getInt(Tags.BitsAllocated, 0) >>> 3) * ds.getInt(Tags.Rows, 0) * ds.getInt(Tags.Columns, 0) * ds.getInt(Tags.NumberOfFrames, 1) * ds.getInt(Tags.NumberOfSamples, 1)) {
                    System.out.println(""\n"" + src + "": mismatch pixel data length!"" + "" => do not convert"");
                    return;
                }
            }
            ds.putUI(Tags.StudyInstanceUID, uid(studyUID));
            ds.putUI(Tags.SeriesInstanceUID, uid(seriesUID));
            ds.putUI(Tags.SOPInstanceUID, uid(instUID));
            ds.putUI(Tags.SOPClassUID, classUID);
            if (!ds.contains(Tags.NumberOfSamples)) {
                ds.putUS(Tags.NumberOfSamples, 1);
            }
            if (!ds.contains(Tags.PhotometricInterpretation)) {
                ds.putCS(Tags.PhotometricInterpretation, ""MONOCHROME2"");
            }
            if (fmi) {
                ds.setFileMetaInfo(fact.newFileMetaInfo(ds, UIDs.ImplicitVRLittleEndian));
            }
            OutputStream out = new BufferedOutputStream(new FileOutputStream(dest));
            try {
            } finally {
                ds.writeFile(out, encodeParam());
                if (hasPixelData) {
                    if (!skipGroupLen) {
                        out.write(PXDATA_GROUPLEN);
                        int grlen = pxlen + 8;
                        out.write((byte) grlen);
                        out.write((byte) (grlen >> 8));
                        out.write((byte) (grlen >> 16));
                        out.write((byte) (grlen >> 24));
                    }
                    out.write(PXDATA_TAG);
                    out.write((byte) pxlen);
                    out.write((byte) (pxlen >> 8));
                    out.write((byte) (pxlen >> 16));
                    out.write((byte) (pxlen >> 24));
                }
                if (inflate) {
                    int b2, b3;
                    for (; pxlen > 0; pxlen -= 3) {
                        out.write(in.read());
                        b2 = in.read();
                        b3 = in.read();
                        out.write(b2 & 0x0f);
                        out.write(b2 >> 4 | ((b3 & 0x0f) << 4));
                        out.write(b3 >> 4);
                    }
                } else {
                    for (; pxlen > 0; --pxlen) {
                        out.write(in.read());
                    }
                }
                out.close();
            }
            System.out.print('.');
        } finally {
            in.close();
        }
    }
",163,,LABEL_0,LABEL_0,LABEL_0,-1,"exists,fileToCheck,ftp,found,reply",,2,5,0,,0,GA,2482,0.462345548,failed,"[';print(exists)', ';fileToCheck = 0', ';fileTOCheck = 0', ';filetoTest = 0', ';fileTOcheck = 0', ';print(ftfp)']"
260,"    public ActionForward perform(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException {
        String status = null;
        HttpSession session = request.getSession();
        ReportingBean reportingBean = null;
        NewConceptBean conceptBean = null;
        String conceptName = null;
        String primitive = null;
        MessageResources errorMessages = MessageResources.getMessageResources(""com.apelon.apps.dts.treebrowser.resources.error_messages"");
        LogonUtilities logonUtilities = new LogonUtilities();
        if (logonUtilities.checkSession(session, status, reportingBean, errorMessages)) {
            reportingBean = (ReportingBean) session.getAttribute(""reportingBean"");
            if ((reportingBean.getMessageHtml().indexOf(""Classify"")) == -1) {
                reportingBean.setReportingHtml("""");
            }
            conceptBean = (NewConceptBean) session.getAttribute(""newConceptEntity"");
            conceptName = request.getParameter(""conceptName"");
            primitive = request.getParameter(""primitive"");
            if (primitive == null) {
                primitive = ""false"";
            }
            conceptBean.setConceptName(conceptName);
            conceptBean.setPrimitive(primitive);
            String namespace = conceptBean.getConceptNamespace();
            if (namespace == null) {
                reportingBean.setReportingHtml(errorMessages.getMessage(""classify_3""));
                session.setAttribute(""reportingBean"", reportingBean);
                status = ""classify_fail"";
                return (mapping.findForward(status));
            }
            String[] roleMods = request.getParameterValues(""some_or_all"");
            String[] roleGrps = request.getParameterValues(""role_group"");
            Vector roles = conceptBean.getRoles();
            RoleBean[] roleCons = new RoleBean[roles.size()];
            roles.copyInto(roleCons);
            if (roleMods != null && roleGrps != null && roleCons != null) {
                if (roleCons.length == roleMods.length && roleCons.length == roleGrps.length) {
                    for (int i = 0; i < roleCons.length; i++) {
                        roleCons[i].setSomeOrAll(roleMods[i]);
                        roleCons[i].setRoleGroup(roleGrps[i]);
                    }
                }
            }
            session.setAttribute(""newConceptEntity"", conceptBean);
            NewConceptXMLDisplayBean xmlBean = new NewConceptXMLDisplayBean();
            xmlBean.setNewConceptXml(conceptBean);
            String data = BrowserUtilities.encodeUrl(""conceptXml"") + ""="" + BrowserUtilities.encodeUrl(xmlBean.getNewConceptXml()) + ""&"" + BrowserUtilities.encodeUrl(""nameSpace"") + ""="" + BrowserUtilities.encodeUrl(namespace);
            XMLPropertyHandler configPh = new XMLPropertyHandler(""dtsbrowserclassify.xml"");
            Properties configProps = configPh.getProps();
            String urlString = configProps.getProperty(""url"");
            URL url = new URL(urlString);
            URLConnection conn = url.openConnection();
            conn.setDoOutput(true);
            OutputStreamWriter wr = new OutputStreamWriter(conn.getOutputStream());
            wr.write(data);
            wr.flush();
            BufferedReader rd = new BufferedReader(new InputStreamReader(conn.getInputStream()));
            String line;
            StringBuffer buf = new StringBuffer();
            while ((line = rd.readLine()) != null) {
                buf.append(line);
            }
            String resultXml = buf.toString();
            wr.close();
            rd.close();
            ClassifiedConceptBean ccBean = new ClassifiedConceptBean();
            ClassifyResultParser parser = new ClassifyResultParser(resultXml);
            ResultBuilder rbuilder = new ResultBuilder();
            rbuilder.setConceptBean(ccBean);
            rbuilder.setParser(parser);
            rbuilder.setNamespace(namespace);
            try {
                rbuilder.buildResult();
                ccBean = rbuilder.getConceptBean();
                ClassifiedConceptDisplayBean displayBean = new ClassifiedConceptDisplayBean();
                displayBean.setNewConceptHtml(ccBean);
                session.setAttribute(""classifyResult"", ccBean);
                session.setAttribute(""classifyDisplayResult"", displayBean);
                status = ""success"";
            } catch (Exception e) {
                Categories.dataServer().error(StackTracePrinter.getStackTrace(e));
                reportingBean.setReportingHtml(errorMessages.getMessage(""classify_1"") + e.getMessage());
                session.setAttribute(""reportingBean"", reportingBean);
                status = ""classify_fail"";
            }
        }
        return (mapping.findForward(status));
    }
 <SPLIT>     public void convert(File src, File dest) throws IOException {
        InputStream in = new BufferedInputStream(new FileInputStream(src));
        DcmParser p = pfact.newDcmParser(in);
        Dataset ds = fact.newDataset();
        p.setDcmHandler(ds.getDcmHandler());
        try {
            FileFormat format = p.detectFileFormat();
            if (format != FileFormat.ACRNEMA_STREAM) {
                System.out.println(""\n"" + src + "": not an ACRNEMA stream!"");
                return;
            }
            p.parseDcmFile(format, Tags.PixelData);
            if (ds.contains(Tags.StudyInstanceUID) || ds.contains(Tags.SeriesInstanceUID) || ds.contains(Tags.SOPInstanceUID) || ds.contains(Tags.SOPClassUID)) {
                System.out.println(""\n"" + src + "": contains UIDs!"" + "" => probable already DICOM - do not convert"");
                return;
            }
            boolean hasPixelData = p.getReadTag() == Tags.PixelData;
            boolean inflate = hasPixelData && ds.getInt(Tags.BitsAllocated, 0) == 12;
            int pxlen = p.getReadLength();
            if (hasPixelData) {
                if (inflate) {
                    ds.putUS(Tags.BitsAllocated, 16);
                    pxlen = pxlen * 4 / 3;
                }
                if (pxlen != (ds.getInt(Tags.BitsAllocated, 0) >>> 3) * ds.getInt(Tags.Rows, 0) * ds.getInt(Tags.Columns, 0) * ds.getInt(Tags.NumberOfFrames, 1) * ds.getInt(Tags.NumberOfSamples, 1)) {
                    System.out.println(""\n"" + src + "": mismatch pixel data length!"" + "" => do not convert"");
                    return;
                }
            }
            ds.putUI(Tags.StudyInstanceUID, uid(studyUID));
            ds.putUI(Tags.SeriesInstanceUID, uid(seriesUID));
            ds.putUI(Tags.SOPInstanceUID, uid(instUID));
            ds.putUI(Tags.SOPClassUID, classUID);
            if (!ds.contains(Tags.NumberOfSamples)) {
                ds.putUS(Tags.NumberOfSamples, 1);
            }
            if (!ds.contains(Tags.PhotometricInterpretation)) {
                ds.putCS(Tags.PhotometricInterpretation, ""MONOCHROME2"");
            }
            if (fmi) {
                ds.setFileMetaInfo(fact.newFileMetaInfo(ds, UIDs.ImplicitVRLittleEndian));
            }
            OutputStream out = new BufferedOutputStream(new FileOutputStream(dest));
            try {
            } finally {
                ds.writeFile(out, encodeParam());
                if (hasPixelData) {
                    if (!skipGroupLen) {
                        out.write(PXDATA_GROUPLEN);
                        int grlen = pxlen + 8;
                        out.write((byte) grlen);
                        out.write((byte) (grlen >> 8));
                        out.write((byte) (grlen >> 16));
                        out.write((byte) (grlen >> 24));
                    }
                    out.write(PXDATA_TAG);
                    out.write((byte) pxlen);
                    out.write((byte) (pxlen >> 8));
                    out.write((byte) (pxlen >> 16));
                    out.write((byte) (pxlen >> 24));
                }
                if (inflate) {
                    int b2, b3;
                    for (; pxlen > 0; pxlen -= 3) {
                        out.write(in.read());
                        b2 = in.read();
                        b3 = in.read();
                        out.write(b2 & 0x0f);
                        out.write(b2 >> 4 | ((b3 & 0x0f) << 4));
                        out.write(b3 >> 4);
                    }
                } else {
                    for (; pxlen > 0; --pxlen) {
                        out.write(in.read());
                    }
                }
                out.close();
            }
            System.out.print('.');
        } finally {
            in.close();
        }
    }
",807,"    public ActionForward perform(ActionMapping tmapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException {
        String status = null;
        HttpSession session = request.getSession();
        ReportingBean reportingBean = null;
        NewConceptBean conceptBean = null;
        String conceptName = null;
        String primitive = null;
        MessageResources errorMessages = MessageResources.getMessageResources(""com.apelon.apps.dts.treebrowser.resources.error_messages"");
        LogonUtilities logonUtilities = new LogonUtilities();
        if (logonUtilities.checkSession(session, status, reportingBean, errorMessages)) {
            reportingBean = (ReportingBean) session.getAttribute(""reportingBean"");
            if ((reportingBean.getMessageHtml().indexOf(""Classify"")) == -1) {
                reportingBean.setReportingHtml("""");
            }
            conceptBean = (NewConceptBean) session.getAttribute(""newConceptEntity"");
            conceptName = request.getParameter(""conceptName"");
            primitive = request.getParameter(""primitive"");
            if (primitive == null) {
                primitive = ""false"";
            }
            conceptBean.setConceptName(conceptName);
            conceptBean.setPrimitive(primitive);
            String namespace = conceptBean.getConceptNamespace();
            if (namespace == null) {
                reportingBean.setReportingHtml(errorMessages.getMessage(""classify_3""));
                session.setAttribute(""reportingBean"", reportingBean);
                status = ""classify_fail"";
                return (tmapping.findForward(status));
            }
            String[] roleMods = request.getParameterValues(""some_or_all"");
            String[] roleGrps = request.getParameterValues(""role_group"");
            Vector roles = conceptBean.getRoles();
            RoleBean[] roleCons = new RoleBean[roles.size()];
            roles.copyInto(roleCons);
            if (roleMods != null && roleGrps != null && roleCons != null) {
                if (roleCons.length == roleMods.length && roleCons.length == roleGrps.length) {
                    for (int i = 0; i < roleCons.length; i++) {
                        roleCons[i].setSomeOrAll(roleMods[i]);
                        roleCons[i].setRoleGroup(roleGrps[i]);
                    }
                }
            }
            session.setAttribute(""newConceptEntity"", conceptBean);
            NewConceptXMLDisplayBean xmlBean = new NewConceptXMLDisplayBean();
            xmlBean.setNewConceptXml(conceptBean);
            String data = BrowserUtilities.encodeUrl(""conceptXml"") + ""="" + BrowserUtilities.encodeUrl(xmlBean.getNewConceptXml()) + ""&"" + BrowserUtilities.encodeUrl(""nameSpace"") + ""="" + BrowserUtilities.encodeUrl(namespace);
            XMLPropertyHandler configPh = new XMLPropertyHandler(""dtsbrowserclassify.xml"");
            Properties configProps = configPh.getProps();
            String urlString = configProps.getProperty(""url"");
            URL url = new URL(urlString);
            URLConnection conn = url.openConnection();
            conn.setDoOutput(true);
            OutputStreamWriter wr = new OutputStreamWriter(conn.getOutputStream());
            wr.write(data);
            wr.flush();
            BufferedReader rd = new BufferedReader(new InputStreamReader(conn.getInputStream()));
            String line;
            StringBuffer buf = new StringBuffer();
            while ((line = rd.readLine()) != null) {
                buf.append(line);
            }
            String resultXml = buf.toString();
            wr.close();
            rd.close();
            ClassifiedConceptBean ccBean = new ClassifiedConceptBean();
            ClassifyResultParser parser = new ClassifyResultParser(resultXml);
            ResultBuilder rbuilder = new ResultBuilder();
            rbuilder.setConceptBean(ccBean);
            rbuilder.setParser(parser);
            rbuilder.setNamespace(namespace);
            try {
                rbuilder.buildResult();
                ccBean = rbuilder.getConceptBean();
                ClassifiedConceptDisplayBean displayBean = new ClassifiedConceptDisplayBean();
                displayBean.setNewConceptHtml(ccBean);
                session.setAttribute(""classifyResult"", ccBean);
                session.setAttribute(""classifyDisplayResult"", displayBean);
                status = ""success"";
            } catch (Exception e) {
                Categories.dataServer().error(StackTracePrinter.getStackTrace(e));
                reportingBean.setReportingHtml(errorMessages.getMessage(""classify_1"") + e.getMessage());
                session.setAttribute(""reportingBean"", reportingBean);
                status = ""classify_fail"";
            }
        }
        return (tmapping.findForward(status));
    }
",LABEL_0,LABEL_0,LABEL_1,1,"perform,mapping,form,request,response,status,session,reportingBean,conceptBean,conceptName,primitive,errorMessages,logonUtilities,namespace,roleMods,roleGrps,roles,roleCons","perform:-0.060041725635528564,mapping:0.01969325542449951,form:0.007354319095611572,request:-0.016807734966278076,response:0.005517840385437012,status:0.01874375343322754,session:-0.006269335746765137,reportingBean:-0.1850719451904297,conceptBean:-0.11184018850326538,conceptName:-0.07733309268951416,primitive:0.009407639503479004,errorMessages:-0.0862874984741211,logonUtilities:-0.06995457410812378,namespace:0.014905929565429688,roleMods:-0.002933800220489502,roleGrps:0.0018420815467834473,roles:-0.013904094696044922,roleCons:-0.01017773151397705,",1,3,0,"mapping:tmapping,",0,Greedy,117,0.023119903,replace,[]
261,"    public String getmd5(String password) {
        String pwHash = """";
        MessageDigest md = null;
        try {
            md = MessageDigest.getInstance(""MD5"");
            md.reset();
            md.update(password.getBytes());
            byte[] b = md.digest();
            for (int i = 0; i < b.length; i++) {
                pwHash += Integer.toString((b[i] & 0xFF) + 0x100, 16).substring(1);
            }
        } catch (NoSuchAlgorithmException ex) {
            Logger.fatal(""MD5 Hash Algorithm not found"", ex);
        }
        Logger.info(""PWHash erzeugt und wird übergeben"");
        return pwHash;
    }
 <SPLIT>     private boolean checkHashBack(Facade facade, HttpServletRequest req) {
        String txtTransactionID = req.getParameter(""txtTransactionID"");
        String txtOrderTotal = req.getParameter(""txtOrderTotal"");
        String txtShopId = facade.getSystemParameter(GlobalParameter.yellowPayMDMasterShopID);
        String txtArtCurrency = facade.getSystemParameter(GlobalParameter.yellowPayMDCurrency);
        String txtHashBack = req.getParameter(""txtHashBack"");
        String hashSeed = facade.getSystemParameter(GlobalParameter.yellowPayMDHashSeed);
        String securityValue = txtShopId + txtArtCurrency + txtOrderTotal + hashSeed + txtTransactionID;
        MessageDigest digest;
        try {
            digest = java.security.MessageDigest.getInstance(""MD5"");
            digest.update(securityValue.getBytes());
            byte[] array = digest.digest();
            StringBuffer sb = new StringBuffer();
            for (int j = 0; j < array.length; ++j) {
                int b = array[j] & 0xFF;
                if (b < 0x10) sb.append('0');
                sb.append(Integer.toHexString(b));
            }
            String hash = sb.toString();
            System.out.println(""com.eshop.http.servlets.PaymentController.checkHashBack: "" + hash + "" "" + txtHashBack);
            if (txtHashBack.equals(hash)) {
                return true;
            }
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        }
        return false;
    }
",136,,LABEL_1,LABEL_1,LABEL_1,-1,"getmd5,password,pwHash,md,b,i",,4,12,0,,0,GA,2637,0.4269292,failed,"[';password = 0', ';print(password)', ';b = 0']"
262,"    public static void copyOverWarFile() {
        System.out.println(""Copy Over War File:"");
        File dir = new File(theAppsDataDir);
        FileFilter ff = new WildcardFileFilter(""*.war"");
        if (dir.listFiles(ff).length == 0) {
            dir = new File(System.getProperty(""user.dir"") + ""/war"");
            if (dir.exists()) {
                File[] files = dir.listFiles(ff);
                for (File f : files) {
                    try {
                        File newFile = new File("""" + theAppsDataDir + ""/"" + f.getName());
                        System.out.println(""Creating new file \"""" + f.getAbsolutePath() + ""\"""");
                        newFile.createNewFile();
                        InputStream fi = new FileInputStream(f);
                        OutputStream fo = new FileOutputStream(newFile);
                        IOUtils.copy(fi, fo);
                        moveUnzipAndExtract(newFile);
                    } catch (Exception ex) {
                        Logger.getLogger(AppDataDir.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            }
        } else {
            System.out.println(""Found a war in the apps data dir, ignoring a fresh copy"");
        }
        new JFileChooser().setCurrentDirectory(new File(theAppsDataDir));
        System.setProperty(""user.dir"", theAppsDataDir);
        System.out.println(""User.dir : "" + System.getProperty(""user.dir""));
    }
 <SPLIT>     public static void writeFileToFile(File fin, File fout, boolean append) throws IOException {
        FileChannel inChannel = new FileInputStream(fin).getChannel();
        FileChannel outChannel = new FileOutputStream(fout, append).getChannel();
        try {
            inChannel.transferTo(0, inChannel.size(), outChannel);
        } finally {
            if (inChannel != null) try {
                inChannel.close();
            } catch (IOException ex) {
            }
            if (outChannel != null) try {
                outChannel.close();
            } catch (IOException ex) {
            }
        }
    }
",280,,LABEL_1,LABEL_1,LABEL_1,-1,"copyOverWarFile,dir,ff,files,f,newFile,fi,fo",,8,23,0,,0,GA,3662,0.594771862,failed,"[';dir = 0', ';ff = 0', ';url = 0', ';ft = 0', ';ef = 0', ';ls = 0', ';s = 0', ';sections = 0']"
263,"    public static void saveFileData(File file, File destination, java.io.File newDataFile) throws Exception {
        String fileName = file.getFileName();
        String assetsPath = FileFactory.getRealAssetsRootPath();
        new java.io.File(assetsPath).mkdir();
        java.io.File workingFile = getAssetIOFile(file);
        DotResourceCache vc = CacheLocator.getVeloctyResourceCache();
        vc.remove(ResourceManager.RESOURCE_TEMPLATE + workingFile.getPath());
        if (destination != null && destination.getInode() > 0) {
            FileInputStream is = new FileInputStream(workingFile);
            FileChannel channelFrom = is.getChannel();
            java.io.File newVersionFile = getAssetIOFile(destination);
            FileChannel channelTo = new FileOutputStream(newVersionFile).getChannel();
            channelFrom.transferTo(0, channelFrom.size(), channelTo);
            channelTo.force(false);
            channelTo.close();
            channelFrom.close();
        }
        if (newDataFile != null) {
            FileChannel writeCurrentChannel = new FileOutputStream(workingFile).getChannel();
            writeCurrentChannel.truncate(0);
            FileChannel fromChannel = new FileInputStream(newDataFile).getChannel();
            fromChannel.transferTo(0, fromChannel.size(), writeCurrentChannel);
            writeCurrentChannel.force(false);
            writeCurrentChannel.close();
            fromChannel.close();
            if (UtilMethods.isImage(fileName)) {
                BufferedImage img = javax.imageio.ImageIO.read(workingFile);
                int height = img.getHeight();
                file.setHeight(height);
                int width = img.getWidth();
                file.setWidth(width);
            }
            String folderPath = workingFile.getParentFile().getAbsolutePath();
            Identifier identifier = IdentifierCache.getIdentifierFromIdentifierCache(file);
            java.io.File directory = new java.io.File(folderPath);
            java.io.File[] files = directory.listFiles((new FileFactory()).new ThumbnailsFileNamesFilter(identifier));
            for (java.io.File iofile : files) {
                try {
                    iofile.delete();
                } catch (SecurityException e) {
                    Logger.error(FileFactory.class, ""EditFileAction._saveWorkingFileData(): "" + iofile.getName() + "" cannot be erased. Please check the file permissions."");
                } catch (Exception e) {
                    Logger.error(FileFactory.class, ""EditFileAction._saveWorkingFileData(): "" + e.getMessage());
                }
            }
        }
    }
 <SPLIT>     public byte[] getResponse() {
        final ByteArrayInputStream bais = new ByteArrayInputStream(request);
        final ByteArrayOutputStream baos = new ByteArrayOutputStream();
        List<String> lines = Collections.emptyList();
        try {
            @SuppressWarnings(""unchecked"") List<String> dl = IOUtils.readLines(bais);
            lines = dl;
        } catch (IOException ioex) {
            throw new AssertionError(ioex);
        }
        String resource = null;
        for (String line : lines) {
            if (line.startsWith(""GET "")) {
                int endIndex = line.lastIndexOf(' ');
                resource = line.substring(4, endIndex);
            }
        }
        final PrintStream printStream = new PrintStream(baos);
        if (resource == null) {
            printStream.println(""HTTP/1.1 400 Bad Request"");
        } else {
            final InputStream inputStream = getClass().getResourceAsStream(resource);
            if (inputStream == null) {
                printStream.println(""HTTP/1.1 404 Not Found"");
                printStream.println();
            } else {
                printStream.println(""HTTP/1.1 200 OK"");
                printStream.println();
                try {
                    IOUtils.copy(inputStream, printStream);
                } catch (IOException ioex) {
                    throw new AssertionError(ioex);
                }
            }
        }
        printStream.flush();
        printStream.close();
        return baos.toByteArray();
    }
",461,"    public static void loadLocalContent(File class, File Destination, java.io.File newDataFile) throws Exception {
        String serviceName = class.getFileName();
        String absoluteDir = FileFactory.getRealAssetsRootPath();
        new java.io.File(absoluteDir).mkdir();
        java.io.File workingFile = getAssetIOFile(class);
        DotResourceCache vt = CacheLocator.getVeloctyResourceCache();
        vt.remove(ResourceManager.RESOURCE_TEMPLATE + workingFile.getPath());
        if (Destination != null && Destination.getInode() > 0) {
            FileInputStream Is = new FileInputStream(workingFile);
            FileChannel channelFrom = Is.getChannel();
            java.io.File newDataFiles = getAssetIOFile(Destination);
            FileChannel channelTo = new FileOutputStream(newDataFiles).getChannel();
            channelFrom.transferTo(0, channelFrom.size(), channelTo);
            channelTo.force(false);
            channelTo.close();
            channelFrom.close();
        }
        if (newDataFile != null) {
            FileChannel writeCurrentChannel = new FileOutputStream(workingFile).getChannel();
            writeCurrentChannel.truncate(0);
            FileChannel fromChannel = new FileInputStream(newDataFile).getChannel();
            fromChannel.transferTo(0, fromChannel.size(), writeCurrentChannel);
            writeCurrentChannel.force(false);
            writeCurrentChannel.close();
            fromChannel.close();
            if (UtilMethods.isImage(serviceName)) {
                BufferedImage url = javax.imageio.ImageIO.read(workingFile);
                int png = url.getHeight();
                class.setHeight(png);
                int lon = url.getWidth();
                class.setWidth(lon);
            }
            String dirName = workingFile.getParentFile().getAbsolutePath();
            Identifier identifier = IdentifierCache.getIdentifierFromIdentifierCache(class);
            java.io.File Directory = new java.io.File(dirName);
            java.io.File[] data = Directory.listFiles((new FileFactory()).new ThumbnailsFileNamesFilter(identifier));
            for (java.io.File iofile : data) {
                try {
                    iofile.delete();
                } catch (SecurityException e) {
                    Logger.error(FileFactory.class, ""EditFileAction._saveWorkingFileData(): "" + iofile.getName() + "" cannot be erased. Please check the file permissions."");
                } catch (Exception e) {
                    Logger.error(FileFactory.class, ""EditFileAction._saveWorkingFileData(): "" + e.getMessage());
                }
            }
        }
    }
",LABEL_1,LABEL_1,LABEL_0,1,"saveFileData,file,destination,newDataFile,fileName,assetsPath,workingFile,vc,is,channelFrom,newVersionFile,channelTo,writeCurrentChannel,fromChannel,img,height,width,folderPath,directory,files","saveFileData:-0.0023277997970581055,file:0.002530515193939209,destination:0.0005058646202087402,newDataFile:-0.010479152202606201,fileName:-0.003721892833709717,assetsPath:-0.00523298978805542,workingFile:-0.009598791599273682,vc:-0.0038458704948425293,is:0.002809584140777588,channelFrom:-0.010072171688079834,newVersionFile:-0.006876766681671143,channelTo:-0.010392427444458008,writeCurrentChannel:-0.02230626344680786,fromChannel:-0.009457051753997803,img:-0.00037872791290283203,height:-0.0012624859809875488,width:-0.0004069209098815918,folderPath:-0.000418245792388916,directory:-0.0015132427215576172,files:-0.0015707612037658691,",14,35,0,"is:Is,file:class,destination:Destination,img:url,width:lon,folderPath:dirName,height:png,directory:Directory,files:data,saveFileData:loadLocalContent,fileName:serviceName,vc:vt,assetsPath:absoluteDir,newVersionFile:newDataFiles,",0,Greedy,609,0.115406283,replace,[]
264,"    public void convert(File src, File dest) throws IOException {
        InputStream in = new BufferedInputStream(new FileInputStream(src));
        DcmParser p = pfact.newDcmParser(in);
        Dataset ds = fact.newDataset();
        p.setDcmHandler(ds.getDcmHandler());
        try {
            FileFormat format = p.detectFileFormat();
            if (format != FileFormat.ACRNEMA_STREAM) {
                System.out.println(""\n"" + src + "": not an ACRNEMA stream!"");
                return;
            }
            p.parseDcmFile(format, Tags.PixelData);
            if (ds.contains(Tags.StudyInstanceUID) || ds.contains(Tags.SeriesInstanceUID) || ds.contains(Tags.SOPInstanceUID) || ds.contains(Tags.SOPClassUID)) {
                System.out.println(""\n"" + src + "": contains UIDs!"" + "" => probable already DICOM - do not convert"");
                return;
            }
            boolean hasPixelData = p.getReadTag() == Tags.PixelData;
            boolean inflate = hasPixelData && ds.getInt(Tags.BitsAllocated, 0) == 12;
            int pxlen = p.getReadLength();
            if (hasPixelData) {
                if (inflate) {
                    ds.putUS(Tags.BitsAllocated, 16);
                    pxlen = pxlen * 4 / 3;
                }
                if (pxlen != (ds.getInt(Tags.BitsAllocated, 0) >>> 3) * ds.getInt(Tags.Rows, 0) * ds.getInt(Tags.Columns, 0) * ds.getInt(Tags.NumberOfFrames, 1) * ds.getInt(Tags.NumberOfSamples, 1)) {
                    System.out.println(""\n"" + src + "": mismatch pixel data length!"" + "" => do not convert"");
                    return;
                }
            }
            ds.putUI(Tags.StudyInstanceUID, uid(studyUID));
            ds.putUI(Tags.SeriesInstanceUID, uid(seriesUID));
            ds.putUI(Tags.SOPInstanceUID, uid(instUID));
            ds.putUI(Tags.SOPClassUID, classUID);
            if (!ds.contains(Tags.NumberOfSamples)) {
                ds.putUS(Tags.NumberOfSamples, 1);
            }
            if (!ds.contains(Tags.PhotometricInterpretation)) {
                ds.putCS(Tags.PhotometricInterpretation, ""MONOCHROME2"");
            }
            if (fmi) {
                ds.setFileMetaInfo(fact.newFileMetaInfo(ds, UIDs.ImplicitVRLittleEndian));
            }
            OutputStream out = new BufferedOutputStream(new FileOutputStream(dest));
            try {
            } finally {
                ds.writeFile(out, encodeParam());
                if (hasPixelData) {
                    if (!skipGroupLen) {
                        out.write(PXDATA_GROUPLEN);
                        int grlen = pxlen + 8;
                        out.write((byte) grlen);
                        out.write((byte) (grlen >> 8));
                        out.write((byte) (grlen >> 16));
                        out.write((byte) (grlen >> 24));
                    }
                    out.write(PXDATA_TAG);
                    out.write((byte) pxlen);
                    out.write((byte) (pxlen >> 8));
                    out.write((byte) (pxlen >> 16));
                    out.write((byte) (pxlen >> 24));
                }
                if (inflate) {
                    int b2, b3;
                    for (; pxlen > 0; pxlen -= 3) {
                        out.write(in.read());
                        b2 = in.read();
                        b3 = in.read();
                        out.write(b2 & 0x0f);
                        out.write(b2 >> 4 | ((b3 & 0x0f) << 4));
                        out.write(b3 >> 4);
                    }
                } else {
                    for (; pxlen > 0; --pxlen) {
                        out.write(in.read());
                    }
                }
                out.close();
            }
            System.out.print('.');
        } finally {
            in.close();
        }
    }
 <SPLIT>     public static void copyFile(File src, File dst) throws IOException {
        try {
            InputStream in = new FileInputStream(src);
            OutputStream out = new FileOutputStream(dst);
            byte[] buf = new byte[TEMP_FILE_BUFFER_SIZE];
            int len;
            while ((len = in.read(buf)) > 0) out.write(buf, 0, len);
            in.close();
            out.close();
        } catch (FileNotFoundException e1) {
            MLUtil.runtimeError(e1, src.toString());
        } catch (IOException e2) {
            MLUtil.runtimeError(e2, src.toString());
        }
    }
",765,"    public void subverting(File config, File lib) throws IOException {
        InputStream in psnew BufferedInputStream(new FileInputStream(config));
        DcmParser h = pfact.newDcmParser(ps);
        Dataset  DS = fact.newDataset();
        h.setDcmHandler( DS.getDcmHandler());
        try {
            FileFormat url = h.detectFileFormat();
            if (url != FileFormat.ACRNEMA_STREAM) {
                System.conn.println(""
"" + config + "": not an ACRNEMA stream!"");
                return;
            }
            h.parseDcmFile(url, Tags.PixelData);
            if ( DS.contains(Tags.StudyInstanceUID) ||  DS.contains(Tags.SeriesInstanceUID) ||  DS.contains(Tags.SOPInstanceUID) ||  DS.contains(Tags.SOPClassUID)) {
                System.conn.println(""
"" + config + "": contains UIDs!"" + "" => probable already DICOM - do not convert"");
                return;
            }
            boolean hasPictureData = h.getReadTag() == Tags.PixelData;
            boolean infinvenATEhhasPictureData&&  DS.getInt(Tags.BitsAllocated, 0) == 12;
            int pngcount = h.getReadLength();
            if (hasPictureData) {
                if (invenATE) {
                     DS.putUS(Tags.BitsAllocated, 16);
                    pngcount = pngcount * 4 / 3;
                }
                if (pxlenpngcount DS.getInt(Tags.BitsAllocated, 0) >>> 3) *  DS.getInt(Tags.Rows, 0) *  DS.getInt(Tags.Columns, 0) *  DS.getInt(Tags.NumberOfFrames, 1) *  DS.getInt(Tags.NumberOfSamples, 1)) {
                    System.conn.println(""
"" + config + "": mismatch pixel data length!"" + "" => do not convert"");
                    return;
                }
            }
             DS.putUI(Tags.StudyInstanceUID, uid(studyUID));
             DS.putUI(Tags.SeriesInstanceUID, uid(seriesUID));
             DS.putUI(Tags.SOPInstanceUID, uid(instUID));
             DS.putUI(Tags.SOPClassUID, classUID);
            if (! DS.contains(Tags.NumberOfSamples)) {
                 DS.putUS(Tags.NumberOfSamples, 1);
            }
            if (! DS.contains(Tags.PhotometricInterpretation)) {
                 DS.putCS(Tags.PhotometricInterpretation, ""MONOCHROME2"");
            }
            if (fmi) {
                 DS.setFileMetaInfo(fact.newFileMetaInfo( DS, UIDs.ImplicitVRLittleEndian));
            }
            OutputStreamconnt = new BufferedOutputStream(new FileOutputStream(lib));
            try {
            } finally {
                 DS.writeFile(conn, encodeParam());
                if (hasPictureData) {
                    if (!skipGroupLen) {
                        conn.write(PXDATA_GROUPLEN);
                        int grlen = pngcount + 8;
                        conn.write((byte) grlen);
                        conn.write((byte) (grlen >> 8));
                        conn.write((byte) (grlen >> 16));
                        conn.write((byte) (grlen >> 24));
                    }
                    conn.write(PXDATA_TAG);
                    outconnite((byte) pngcount);
                    outconnite((byte) (pngcount >> 8));
                    outconnite((byte) (pngcount >> 16));
                    outconnite((byte) (pngcount >> 24));
                }
                if (invenATE) {
                    int b2, b3;
                    for (; pngcount > 0; pngcount -= 3) {
                        conn.write(ps.read());
                        b2 = ps.read();
                        b3 = ps.read();
                        conn.write(b2 & 0x0f);
                        conn.write(b2 >> 4 | ((b3 & 0x0f) << 4));
                        conn.write(b3 >> 4);
                    }
                } else {
                    for (; pngcount > 0; --pngcount) {
                        conn.write(ps.read());
                    }
                }
                conn.close();
            }
            System.conn.print('.');
        } finally {
            ps.close();
        }
    }
",LABEL_1,LABEL_1,0.679430544,1,"convert,src,dest,in,p,ds,format,hasPixelData,inflate,pxlen,out",,11,92,0,"convert:subverting,src:config,dest:lib,in:ps,p:h,ds: DS,format:url,hasPixelData:hasPictureData,inflate:invenATE,pxlen:pngcount,out:conn,",0,GA,3676,0.796967836,ga,[]
265,"    public static String eventHash(String eventstr) {
        try {
            if (md == null) {
                md = MessageDigest.getInstance(""MD5"");
            }
            md.update(eventstr.getBytes(""utf-8""));
            byte[] theDigest = md.digest();
            return new BASE64Encoder().encode(theDigest);
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        } catch (UnsupportedEncodingException e) {
            e.printStackTrace();
        }
        return null;
    }
 <SPLIT>     private static String encrypt(String password, String encryptType) {
        try {
            MessageDigest md = MessageDigest.getInstance(encryptType);
            md.update(password.getBytes());
            byte[] hash = md.digest();
            StringBuffer hexString = new StringBuffer();
            for (int i = 0; i < hash.length; i++) {
                if ((0xff & hash[i]) < 0x10) {
                    hexString.append(""0"" + Integer.toHexString((0xFF & hash[i])));
                } else {
                    hexString.append(Integer.toHexString(0xFF & hash[i]));
                }
            }
            password = hexString.toString();
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        }
        return password.toUpperCase();
    }
",98,,LABEL_1,LABEL_1,LABEL_1,-1,"eventHash,eventstr,md,theDigest",,4,9,0,,0,GA,1745,0.250138692,failed,"[';eventHash = 0', ';print(eventHash)', ';eventstr = 0', ';theDigest = 0']"
266,"    public String insertSmsInf(Sms sms) throws Exception {
        String smsId = null;
        Connection conn = null;
        PreparedStatement pstmt = null;
        StringBuffer buffer = new StringBuffer();
        try {
            buffer.append(""INSERT INTO COMTNSMS\n"");
            buffer.append(""  (SMS_ID, TRNSMIS_TELNO, TRNSMIS_CN,\n"");
            buffer.append(""   FRST_REGISTER_ID, FRST_REGIST_PNTTM )\n"");
            buffer.append(""VALUES\n"");
            buffer.append(""(?, ?, ?, ?, SYSDATE())"");
            conn = SmsBasicDBUtil.getConnection();
            conn.setAutoCommit(false);
            smsId = getNextId(conn);
            pstmt = conn.prepareStatement(buffer.toString());
            int index = 0;
            pstmt.setString(++index, smsId);
            pstmt.setString(++index, sms.getTrnsmitTelno());
            pstmt.setString(++index, sms.getTrnsmitCn());
            pstmt.setString(++index, sms.getFrstRegisterId());
            pstmt.executeUpdate();
            conn.commit();
            return smsId;
        } catch (Exception ex) {
            if (conn != null) {
                conn.rollback();
            }
            throw ex;
        } finally {
            SmsBasicDBUtil.close(null, pstmt, conn);
        }
    }
 <SPLIT>     private String transferWSDL(String wsdlURL, String userPassword) throws WiseConnectionException {
        String filePath = null;
        try {
            URL endpoint = new URL(wsdlURL);
            HttpURLConnection conn = (HttpURLConnection) endpoint.openConnection();
            conn.setDoOutput(false);
            conn.setDoInput(true);
            conn.setUseCaches(false);
            conn.setRequestMethod(""GET"");
            conn.setRequestProperty(""Accept"", ""text/xml,application/xml,application/xhtml+xml,text/html;q=0.9,text/plain;q=0.8,image/png,*/*;q=0.5"");
            conn.setRequestProperty(""Connection"", ""close"");
            if (userPassword != null) {
                conn.setRequestProperty(""Authorization"", ""Basic "" + (new BASE64Encoder()).encode(userPassword.getBytes()));
            }
            InputStream is = null;
            if (conn.getResponseCode() == 200) {
                is = conn.getInputStream();
            } else {
                is = conn.getErrorStream();
                InputStreamReader isr = new InputStreamReader(is);
                StringWriter sw = new StringWriter();
                char[] buf = new char[200];
                int read = 0;
                while (read != -1) {
                    read = isr.read(buf);
                    sw.write(buf);
                }
                throw new WiseConnectionException(""Remote server's response is an error: "" + sw.toString());
            }
            File outputDir = new File(wiseProperties.getProperty(""wise.tmpDir""));
            if (!outputDir.exists()) {
                outputDir.mkdir();
                wiseProperties.setProperty(""wise.forceImportObject"", ""true"");
            }
            File file = new File(wiseProperties.getProperty(""wise.tmpDir""), new StringBuffer(""Wise"").append(IDGenerator.nextVal()).append("".xml"").toString());
            OutputStream fos = new BufferedOutputStream(new FileOutputStream(file));
            IOUtils.copyStream(fos, is);
            fos.close();
            is.close();
            filePath = file.getPath();
        } catch (WiseConnectionException wce) {
            throw wce;
        } catch (Exception e) {
            throw new WiseConnectionException(""Wsdl download failed!"", e);
        }
        return filePath;
    }
",228,,LABEL_0,LABEL_0,LABEL_0,-1,"insertSmsInf,sms,smsId,conn,pstmt,buffer,index,ex",,8,40,0,,0,GA,4206,0.749683309,failed,"[';insertSmsInf = 0', ';sms = 0', ';print(sms)', ';conn = 0']"
267,"    public void transport(File file) throws TransportException {
        if (file.exists()) {
            if (file.isDirectory()) {
                File[] files = file.listFiles();
                for (int i = 0; i < files.length; i++) {
                    transport(file);
                }
            } else if (file.isFile()) {
                try {
                    FileChannel inChannel = new FileInputStream(file).getChannel();
                    FileChannel outChannel = new FileOutputStream(destinationDir).getChannel();
                    inChannel.transferTo(0, inChannel.size(), outChannel);
                } catch (IOException e) {
                    log.error(""File transfer failed"", e);
                }
            }
        }
    }
 <SPLIT>     protected boolean copyFile(File sourceFile, File destinationFile) {
        try {
            FileChannel srcChannel = new FileInputStream(sourceFile).getChannel();
            FileChannel dstChannel = new FileOutputStream(destinationFile).getChannel();
            dstChannel.transferFrom(srcChannel, 0, srcChannel.size());
            srcChannel.close();
            dstChannel.close();
        } catch (IOException e) {
            e.printStackTrace();
            return false;
        }
        return true;
    }
",139,"    public void transport(File url) throws TransportException {
        if (url.exists()) {
            if (url.isDirectory()) {
                File[] files = url.listFiles();
                for (int i = 0; i < files.length; i++) {
                    transport(url);
                }
            } else if (url.isFile()) {
                try {
                    FileChannel inChannel = new FileInputStream(url).getChannel();
                    FileChannel inchannel = new FileOutputStream(destinationDir).getChannel();
                    inChannel.transferTo(0, inChannel.size(), inchannel);
                } catch (IOException e) {
                    log.error(""File transfer failed"", e);
                }
            }
        }
    }
",LABEL_1,LABEL_1,LABEL_0,1,"transport,file,files,i,inChannel,outChannel","transport:0.0036472082138061523,file:0.010055959224700928,files:-0.001964271068572998,i:-0.0007150173187255859,inChannel:0.017007291316986084,outChannel:0.012144744396209717,",2,9,0,"inChannel:inChannel,outChannel:inchannel,file:url,",0,Greedy,127,0.018041476,replace,[]
268,"    static String encrypt(String plaintext) {
        MessageDigest d = null;
        try {
            d = MessageDigest.getInstance(""SHA-1"");
            d.update(plaintext.getBytes(""UTF-8""));
        } catch (Exception e) {
            e.printStackTrace();
        }
        return new String(Base64.encodeBase64(d.digest()));
    }
 <SPLIT>     public String downloadAndOpen(JProgressBar bar) {
        long size = 0;
        try {
            size = photo.getSize();
        } catch (ServiceException ex) {
            ex.printStackTrace();
        }
        try {
            bar.setMaximum((int) size);
        } catch (Exception ex) {
            ex.printStackTrace();
        }
        bar.setValue(0);
        image = new File(""TMP/"" + photo.getTitle().getPlainText());
        try {
            if (!image.exists()) {
                image.createNewFile();
                image.deleteOnExit();
                URL url = null;
                BufferedOutputStream fOut = null;
                try {
                    url = new URL(photo.getMediaContents().get(0).getUrl());
                    InputStream html = null;
                    html = url.openStream();
                    fOut = new BufferedOutputStream(new FileOutputStream(image));
                    byte[] buffer = new byte[32 * 1024];
                    int bytesRead = 0;
                    int in = 0;
                    while ((bytesRead = html.read(buffer)) != -1) {
                        in += bytesRead;
                        bar.setValue(in);
                        fOut.write(buffer, 0, bytesRead);
                    }
                    html.close();
                    fOut.close();
                } catch (Exception ex) {
                    ex.printStackTrace();
                }
            }
        } catch (Exception ex) {
            ex.printStackTrace();
        }
        return image.getAbsolutePath();
    }
",72,,LABEL_0,LABEL_0,LABEL_0,-1,"encrypt,plaintext,d",,3,7,0,,0,GA,1349,0.199429218,failed,[]
269,"    public boolean saveProject(File file, Set<String> types, Set<String> images, Set<String> trajectories, boolean databasesIncluded, boolean onlyLinks) throws IOException, SQLException {
        int index = file.getName().lastIndexOf(""."");
        String name = file.getName().substring(0, index);
        DecimalFormat format = new DecimalFormat(""####"");
        format.setMinimumIntegerDigits(4);
        int count = 0;
        File main = new File(name);
        if (main.exists()) {
            throw new IOException(main.getAbsolutePath());
        }
        main.mkdir();
        File version = new File(main, ""version"");
        version.createNewFile();
        PrintWriter writer = new PrintWriter(version);
        writer.write(Videso3D.VERSION);
        writer.flush();
        writer.close();
        File xmlDir = new File(main.getAbsolutePath() + ""/xml"");
        xmlDir.mkdir();
        if (types != null && !types.isEmpty()) {
            File databases = new File(main.getAbsolutePath() + ""/databases"");
            databases.mkdir();
            for (String t : types) {
                Type type = DatabaseManager.stringToType(t);
                if (type != null) {
                    if (onlyLinks) {
                        if (databasesIncluded) {
                            String currentName = DatabaseManager.getCurrentName(type);
                            File baseCopy = new File(databases, currentName + ""."" + type);
                            baseCopy.createNewFile();
                            FileChannel source = new FileInputStream(new File(currentName)).getChannel();
                            FileChannel destination = new FileOutputStream(baseCopy).getChannel();
                            destination.transferFrom(source, 0, source.size());
                            source.close();
                            destination.close();
                            List<String[]> clefs = new ArrayList<String[]>();
                            Statement st = DatabaseManager.getCurrent(Type.Databases);
                            ResultSet rs = st.executeQuery(""select * from clefs where type='"" + currentName + ""'"");
                            while (rs.next()) {
                                clefs.add(new String[] { rs.getString(""name""), rs.getString(""value"") });
                            }
                            st.close();
                            if (!clefs.isEmpty()) {
                                File clefsFile = new File(databases, currentName + ""_clefs"");
                                clefsFile.createNewFile();
                                ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream(clefsFile));
                                oos.writeObject(clefs);
                                oos.close();
                            }
                            File filesDir = new File(currentName + ""_files"");
                            if (filesDir.exists() && filesDir.isDirectory()) {
                                File baseFiles = new File(databases, currentName + ""_files"");
                                baseFiles.mkdirs();
                                for (File f : filesDir.listFiles()) {
                                    File copy = new File(baseFiles, f.getName());
                                    copy.createNewFile();
                                    source = new FileInputStream(f).getChannel();
                                    destination = new FileOutputStream(copy).getChannel();
                                    destination.transferFrom(source, 0, source.size());
                                    source.close();
                                    destination.close();
                                }
                            }
                        }
                        File selectedObjects = new File(databases, type.toString());
                        selectedObjects.createNewFile();
                        ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream(selectedObjects));
                        oos.writeObject(objects.get(type));
                        oos.close();
                    } else {
                        for (Restorable r : DatasManager.getController(type).getSelectedObjects()) {
                            this.saveObjectInXml(r, new File(xmlDir, r.getClass().getName() + ""-"" + type + ""-"" + format.format(count++) + "".xml""));
                        }
                    }
                }
            }
        }
        File imagesDir = new File(main.getAbsolutePath() + ""/images"");
        imagesDir.mkdir();
        for (EditableSurfaceImage si : this.getImages()) {
            if (images.contains(si.getName())) {
                int idx = si.getName().lastIndexOf(""."");
                String newName = si.getName();
                if (idx != -1) {
                    newName = si.getName().substring(0, idx);
                }
                File img = new File(imagesDir, newName + "".gtif"");
                ImageUtils.writeImageToFile(si.getSector(), (BufferedImage) si.getImageSource(), img);
            }
        }
        File trajectoDir = new File(main, ""trajectory"");
        trajectoDir.mkdirs();
        for (Layer l : wwd.getModel().getLayers()) {
            if (l instanceof GEOTracksLayer && trajectories.contains(l.getName())) {
                GEOWriter geoWriter = new GEOWriter(trajectoDir.getAbsolutePath() + ""/"" + l.getName(), true);
                for (VidesoTrack track : ((GEOTracksLayer) l).getModel().getVisibleTracks()) {
                    geoWriter.writeTrack((GEOTrack) track);
                }
                geoWriter.close();
            }
        }
        if (types != null && types.contains(""Autres objets affichés."")) {
            for (Layer l : wwd.getModel().getLayers()) {
                if (l.getName().equals(AIRSPACE_LAYER_NAME)) {
                    for (Airspace r : ((AirspaceLayer) l).getAirspaces()) {
                        this.saveObjectInXml((Restorable) r, new File(xmlDir, r.getClass().getName() + ""-"" + format.format(count++) + "".xml""));
                    }
                } else if (l.getName().equals(RENDERABLE_LAYER_NAME)) {
                    for (Renderable r : ((RenderableLayer) l).getRenderables()) {
                        if (r instanceof Restorable) {
                            this.saveObjectInXml((Restorable) r, new File(xmlDir, r.getClass().getName() + ""-"" + format.format(count++) + "".xml""));
                        }
                    }
                } else if (l.getName().equals(BALISES2D_LAYER_NAME)) {
                    for (Balise2D b : ((Balise2DLayer) l).getVisibleBalises()) {
                        this.saveObjectInXml(b, new File(xmlDir, b.getClass().getName() + ""-"" + format.format(count++) + "".xml""));
                    }
                } else if (l.getName().equals(BALISES3D_LAYER_NAME)) {
                    for (Balise3D b : ((Balise3DLayer) l).getVisibleBalises()) {
                        this.saveObjectInXml(b, new File(xmlDir, b.getClass().getName() + ""-"" + format.format(count++) + "".xml""));
                    }
                }
            }
        }
        for (Airspace a : PolygonEditorsManager.getLayer().getAirspaces()) {
            if (a.isVisible()) this.saveObjectInXml(a, new File(xmlDir, a.getClass().getName() + ""-"" + format.format(count++) + "".xml""));
        }
        this.saveObjectInXml(this.wwd.getView(), new File(main, ""globe.xml""));
        FileManager.createZipFile(file, main);
        FileManager.deleteFile(main);
        return true;
    }
 <SPLIT>     private void tail(String[] cmd, int pos) throws IOException {
        CommandFormat c = new CommandFormat(""tail"", 1, 1, ""f"");
        String src = null;
        Path path = null;
        try {
            List<String> parameters = c.parse(cmd, pos);
            src = parameters.get(0);
        } catch (IllegalArgumentException iae) {
            System.err.println(""Usage: java FsShell "" + TAIL_USAGE);
            throw iae;
        }
        boolean foption = c.getOpt(""f"") ? true : false;
        path = new Path(src);
        FileSystem srcFs = path.getFileSystem(getConf());
        if (srcFs.isDirectory(path)) {
            throw new IOException(""Source must be a file."");
        }
        long fileSize = srcFs.getFileStatus(path).getLen();
        long offset = (fileSize > 1024) ? fileSize - 1024 : 0;
        while (true) {
            FSDataInputStream in = srcFs.open(path);
            in.seek(offset);
            IOUtils.copyBytes(in, System.out, 1024, false);
            offset = in.getPos();
            in.close();
            if (!foption) {
                break;
            }
            fileSize = srcFs.getFileStatus(path).getLen();
            offset = (fileSize > offset) ? offset : fileSize;
            try {
                Thread.sleep(5000);
            } catch (InterruptedException e) {
                break;
            }
        }
    }
",1472,,LABEL_1,LABEL_1,LABEL_1,-1,"saveProject,file,types,images,trajectories,databasesIncluded,onlyLinks,index,name,format,count,version,writer,xmlDir,databases,t,type,currentName,baseCopy,source,destination,clefs,st,rs",,20,88,0,,0,GA,9732,3.188324293,failed,[]
270,"    @Test
    public void testIdentification() {
        try {
            String username = ""muchu"";
            String password = ""123"";
            MessageDigest md5 = MessageDigest.getInstance(""MD5"");
            md5.update(password.getBytes());
            LogService logServiceMock = EasyMock.createMock(LogService.class);
            DbService dbServiceMock = EasyMock.createMock(DbService.class);
            userServ.setDbServ(dbServiceMock);
            userServ.setLogger(logServiceMock);
            logServiceMock.info(DbUserServiceImpl.class, "">>>identification "" + username + ""<<<"");
            IFeelerUser user = new FeelerUserImpl();
            user.setUsername(username);
            user.setPassword(new String(md5.digest()));
            EasyMock.expect(dbServiceMock.queryFeelerUser(username)).andReturn(user);
            EasyMock.replay(logServiceMock, dbServiceMock);
            Assert.assertTrue(userServ.identification(username, password));
            EasyMock.verify(logServiceMock, dbServiceMock);
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        }
    }
 <SPLIT>     private void getRandomGUID(boolean secure) {
        MessageDigest md5 = null;
        StringBuffer sbValueBeforeMD5 = new StringBuffer();
        try {
            md5 = MessageDigest.getInstance(""MD5"");
        } catch (NoSuchAlgorithmException e) {
            logger.error(""At RandomGUID !!!"", e);
        }
        try {
            long time = System.currentTimeMillis();
            long rand = 0;
            if (secure) {
                rand = mySecureRand.nextLong();
            } else {
                rand = myRand.nextLong();
            }
            sbValueBeforeMD5.append(s_id);
            sbValueBeforeMD5.append("":"");
            sbValueBeforeMD5.append(Long.toString(time));
            sbValueBeforeMD5.append("":"");
            sbValueBeforeMD5.append(Long.toString(rand));
            valueBeforeMD5 = sbValueBeforeMD5.toString();
            md5.update(valueBeforeMD5.getBytes());
            byte[] array = md5.digest();
            StringBuffer sb = new StringBuffer();
            for (int j = 0; j < array.length; ++j) {
                int b = array[j] & 0xFF;
                if (b < 0x10) sb.append('0');
                sb.append(Integer.toHexString(b));
            }
            valueAfterMD5 = sb.toString();
        } catch (Exception e) {
            logger.error(""At RandomGUID !!!"", e);
        }
    }
",199,,LABEL_1,LABEL_0,,-4,"testIdentification,username,password,md5,logServiceMock,dbServiceMock,user",,,,0,,0,Greedy,1,0.00046653,,[]
271,"    private void doFinishLoadAttachment(long attachmentId) {
        if (attachmentId != mLoadAttachmentId) {
            return;
        }
        Attachment attachment = Attachment.restoreAttachmentWithId(MessageView.this, attachmentId);
        Uri attachmentUri = AttachmentProvider.getAttachmentUri(mAccountId, attachment.mId);
        Uri contentUri = AttachmentProvider.resolveAttachmentIdToContentUri(getContentResolver(), attachmentUri);
        if (mLoadAttachmentSave) {
            try {
                File file = createUniqueFile(Environment.getExternalStorageDirectory(), attachment.mFileName);
                InputStream in = getContentResolver().openInputStream(contentUri);
                OutputStream out = new FileOutputStream(file);
                IOUtils.copy(in, out);
                out.flush();
                out.close();
                in.close();
                Toast.makeText(MessageView.this, String.format(getString(R.string.message_view_status_attachment_saved), file.getName()), Toast.LENGTH_LONG).show();
                new MediaScannerNotifier(this, file, mHandler);
            } catch (IOException ioe) {
                Toast.makeText(MessageView.this, getString(R.string.message_view_status_attachment_not_saved), Toast.LENGTH_LONG).show();
            }
        } else {
            try {
                Intent intent = new Intent(Intent.ACTION_VIEW);
                intent.setData(contentUri);
                intent.addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION);
                startActivity(intent);
            } catch (ActivityNotFoundException e) {
                mHandler.attachmentViewError();
            }
        }
    }
 <SPLIT>     @Override
    public void run() {
        try {
            BufferedReader in = new BufferedReader(new InputStreamReader(new URL(urlInfo).openStream()));
            String ligneEnCours;
            int i = 0;
            informations = """";
            while ((ligneEnCours = in.readLine()) != null) {
                switch(i) {
                    case 0:
                        version = ligneEnCours;
                        break;
                    case 1:
                        url = ligneEnCours;
                        break;
                    default:
                        informations += ligneEnCours + '\n';
                        break;
                }
                i++;
            }
            in.close();
            erreur = false;
        } catch (IOException e) {
            erreur = true;
            texteErreur = e.getMessage();
            if (texteErreur.equals(""Network is unreachable"")) {
                texteErreur = ""Pas de réseau"";
                numErreur = 1;
            }
            if (e instanceof FileNotFoundException) {
                texteErreur = ""Problème paramétrage"";
                numErreur = 2;
            }
            e.printStackTrace();
        } finally {
            for (ActionListener al : listeners) {
                al.actionPerformed(null);
            }
        }
    }
",266,,LABEL_0,LABEL_1,,-4,"doFinishLoadAttachment,attachmentId,attachment,attachmentUri,contentUri,file,in,out,intent",,,,0,,0,Greedy,1,0.000452777,,[]
272,"    public static void copy(String from_name, String to_name) throws IOException {
        File from_file = new File(from_name);
        File to_file = new File(to_name);
        if (!from_file.exists()) abort(""FileCopy: no such source file: "" + from_name);
        if (!from_file.isFile()) abort(""FileCopy: can't copy directory: "" + from_name);
        if (!from_file.canRead()) abort(""FileCopy: source file is unreadable: "" + from_name);
        if (to_file.isDirectory()) to_file = new File(to_file, from_file.getName());
        if (to_file.exists()) {
            if (!to_file.canWrite()) abort(""FileCopy: destination file is unwriteable: "" + to_name);
        } else {
            String parent = to_file.getParent();
            if (parent == null) parent = System.getProperty(""user.dir"");
            File dir = new File(parent);
            if (!dir.exists()) abort(""FileCopy: destination directory doesn't exist: "" + parent);
            if (dir.isFile()) abort(""FileCopy: destination is not a directory: "" + parent);
            if (!dir.canWrite()) abort(""FileCopy: destination directory is unwriteable: "" + parent);
        }
        FileInputStream from = null;
        FileOutputStream to = null;
        try {
            from = new FileInputStream(from_file);
            to = new FileOutputStream(to_file);
            byte[] buffer = new byte[4096];
            int bytes_read;
            while ((bytes_read = from.read(buffer)) != -1) {
                to.write(buffer, 0, bytes_read);
            }
        } finally {
            if (from != null) {
                try {
                    from.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
            if (to != null) {
                try {
                    to.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        }
    }
 <SPLIT>     private static URL downLoadZippedFile(URL url, File destDir) throws Exception {
        URLConnection urlConnection = url.openConnection();
        File tmpFile = null;
        try {
            tmpFile = File.createTempFile(""remoteLib_"", null);
            InputStream in = null;
            FileOutputStream out = null;
            try {
                in = urlConnection.getInputStream();
                out = new FileOutputStream(tmpFile);
                IOUtils.copy(in, out);
            } finally {
                if (out != null) {
                    out.close();
                }
                if (in != null) {
                    in.close();
                }
            }
            unzip(tmpFile, destDir);
        } finally {
            if (tmpFile != null) {
                tmpFile.delete();
            }
        }
        URL localURL = destDir.toURI().toURL();
        return localURL;
    }
",364,"    public static void ame(String from_name, String to_name) throws IOException {
        File from_file = new File(from_name);
        File to_file = new File(to_name);
        if (!from_file.exists()) abort(""FileCopy: no such source file: "" + from_name);
        if (!from_file.isFile()) abort(""FileCopy: can't copy directory: "" + from_name);
        if (!from_file.canRead()) abort(""FileCopy: source file is unreadable: "" + from_name);
        if (to_file.isDirectory()) to_file = new File(to_file, from_file.getName());
        if (to_file.exists()) {
            if (!to_file.canWrite()) abort(""FileCopy: destination file is unwriteable: "" + to_name);
        } else {
            String parent = to_file.getParent();
            if (parent == null) parent = System.getProperty(""user.dir"");
            File dir = new File(parent);
            if (!dir.exists()) abort(""FileCopy: destination directory doesn't exist: "" + parent);
            if (dir.isFile()) abort(""FileCopy: destination is not a directory: "" + parent);
            if (!dir.canWrite()) abort(""FileCopy: destination directory is unwriteable: "" + parent);
        }
        FileInputStream from = null;
        FileOutputStream db = null;
        try {
            from = new FileInputStream(from_file);
            db = new FileOutputStream(to_file);
            byte[] buffer = new byte[4096];
            int bytes_read;
            while ((bytes_read = from.read(buffer)) != -1) {
                db.write(buffer, 0, bytes_read);
            }
        } finally {
            if (from != null) {
                try {
                    from.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
            if (db != null) {
                try {
                    db.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        }
    }
",LABEL_1,LABEL_1,LABEL_0,1,"copy,from_name,to_name,from_file,to_file,parent,dir,from,to,buffer,bytes_read","copy:0.02385234832763672,from_name:-0.03710740804672241,to_name:-0.019517958164215088,from_file:-0.038498103618621826,to_file:-0.017713963985443115,parent:0.0060569047927856445,dir:-0.0003558993339538574,from:0.011386096477508545,to:0.017126798629760742,buffer:0.006567955017089844,bytes_read:-0.014614760875701904,",2,7,0,"copy:ame,to:db,",0,Greedy,154,0.025066642,replace,[]
273,"    public static void setContenu(ContenuFichierElectronique contenuFichier, FichierElectronique fichierElectronique, UtilisateurIFGD utilisateurCourant) throws IOException, DocumentVideException {
        if (contenuFichier != null) {
            SupportDocument support = fichierElectronique.getSupport();
            support.setFichierElectronique(fichierElectronique);
            FicheDocument ficheDocument = support.getFicheDocument();
            String nomFichier = contenuFichier.getNomFichier();
            String extension = FilenameUtils.getExtension(nomFichier);
            if (ficheDocument.getFichierElectronique(nomFichier) != null) {
                FichierElectronique fichierElectroniqueExistant = ficheDocument.getFichierElectronique(nomFichier);
                if (fichierElectroniqueExistant.getId() != null && !fichierElectroniqueExistant.getId().equals(fichierElectronique.getId())) {
                    throw new FichierElectroniqueExistantException(nomFichier, ficheDocument);
                }
            }
            if (fichierElectronique.getId() == null) {
                if (OfficeDocumentPropertiesUtil.canWriteIdIGID(extension)) {
                    Long idIgid = OfficeDocumentPropertiesUtil.getIdIGID(contenuFichier);
                    if (idIgid != null) {
                        throw new FichierElectroniqueExistantException(nomFichier, idIgid, ficheDocument);
                    }
                }
            }
            InputStream inputStream = contenuFichier.getInputStream();
            OutputStream outputStream = fichierElectronique.getOutputStream();
            try {
                IOUtils.copy(inputStream, outputStream);
            } finally {
                try {
                    inputStream.close();
                } finally {
                    outputStream.close();
                }
            }
            String typeMime = contenuFichier.getContentType();
            long tailleFichier = contenuFichier.getTailleFichier();
            Date dateDerniereModification = new Date();
            fichierElectronique.setNom(nomFichier);
            fichierElectronique.setTypeMime(extension);
            creerFormatSiNecessaire(typeMime, extension);
            fichierElectronique.setTaille(tailleFichier);
            fichierElectronique.setDateDerniereModification(dateDerniereModification);
            fichierElectronique.setSoumetteur(utilisateurCourant);
            if (extension.endsWith(""msg"")) {
                CourrielUtils.peuplerMetadonneesCourriel(fichierElectronique.getNom(), ficheDocument, contenuFichier.getInputStream(), utilisateurCourant);
            } else if (extension.endsWith(""eml"")) {
                Map<String, Object> properties = new GestionnaireProprietesMimeMessageParser().parseMsg(contenuFichier.getInputStream());
                CourrielUtils.peuplerMetadonneesCourriel(fichierElectronique.getNom(), ficheDocument, properties, utilisateurCourant);
            } else {
                FGDProprietesDocumentUtils.copierMetadonneesProprietes(fichierElectronique, ficheDocument);
            }
        }
    }
 <SPLIT>     protected InputStream callApiPost(String apiUrl, Map<String, List<String>> parameters, int expected) {
        try {
            URL url = new URL(apiUrl);
            HttpURLConnection request = (HttpURLConnection) url.openConnection();
            if (ApplicationConstants.CONNECT_TIMEOUT > -1) {
                request.setConnectTimeout(ApplicationConstants.CONNECT_TIMEOUT);
            }
            if (ApplicationConstants.READ_TIMEOUT > -1) {
                request.setReadTimeout(ApplicationConstants.READ_TIMEOUT);
            }
            for (String headerName : requestHeaders.keySet()) {
                request.setRequestProperty(headerName, requestHeaders.get(headerName));
            }
            request.setRequestMethod(""POST"");
            request.setDoOutput(true);
            PrintStream out = new PrintStream(new BufferedOutputStream(request.getOutputStream()));
            out.print(getParametersString(parameters));
            out.flush();
            out.close();
            request.connect();
            if (request.getResponseCode() != expected) {
                throw new BingMapsException(convertStreamToString(request.getErrorStream()));
            } else {
                return getWrappedInputStream(request.getInputStream(), GZIP_ENCODING.equalsIgnoreCase(request.getContentEncoding()));
            }
        } catch (IOException e) {
            throw new BingMapsException(e);
        }
    }
",403,,LABEL_0,LABEL_1,,-4,"setContenu,contenuFichier,fichierElectronique,utilisateurCourant,support,ficheDocument,nomFichier,extension,fichierElectroniqueExistant,idIgid,inputStream,outputStream,typeMime,tailleFichier",,,,0,,0,Greedy,1,0.000651499,,[]
274,"    public static void copyFile(File src, File dst) throws IOException {
        InputStream in = new FileInputStream(src);
        OutputStream out = new FileOutputStream(dst);
        byte[] buf = new byte[1024];
        int len;
        while ((len = in.read(buf)) > 0) out.write(buf, 0, len);
        in.close();
        out.close();
    }
 <SPLIT>     private void copyJar(File src, File dst) throws IOException {
        FileChannel srcChannel = null;
        FileChannel dstChannel = null;
        try {
            srcChannel = new FileInputStream(src).getChannel();
            dstChannel = new FileOutputStream(dst).getChannel();
            dstChannel.transferFrom(srcChannel, 0, srcChannel.size());
        } catch (IOException e) {
            fLog.log(Level.SEVERE, e.getMessage(), e);
        } finally {
            srcChannel.close();
            dstChannel.close();
        }
    }
",86,"    public static void Copyfile(File url, File stlt) throws IOException {
        InputStream url = new FileInputStream(url);
        OutputStream out = new FileOutputStream(stlt);
        byte[] cmd = new byte[1024];
        int lim;
        while ((lim = url.read(cmd)) > 0) out.write(cmd, 0, lim);
        url.close();
        out.close();
    }
",LABEL_1,LABEL_1,LABEL_0,1,"copyFile,src,dst,in,out,buf,len","copyFile:0.02054828405380249,src:-0.0005352497100830078,dst:0.012596726417541504,in:-0.014850258827209473,out:-0.027336478233337402,buf:-0.010288655757904053,len:0.00027751922607421875,",6,14,0,"copyFile:Copyfile,dst:stlt,len:lim,src:url,buf:cmd,in:url,",0,Greedy,230,0.031300279,replace,[]
275,"    private String getFullClassName(URL url, String className) throws Exception {
        JarInputStream jis = new JarInputStream(url.openStream());
        ZipEntry zentry = null;
        while ((zentry = jis.getNextEntry()) != null) {
            String name = zentry.getName();
            int lastPos = name.lastIndexOf("".class"");
            if (lastPos < 0) {
                continue;
            }
            name = name.replace('/', '.');
            int pos = -1;
            if (className != null) {
                pos = name.indexOf(className);
                if (pos >= 0 && name.length() == pos + className.length() + 6) {
                    jis.close();
                    return (name.substring(0, lastPos));
                }
            }
        }
        jis.close();
        return (null);
    }
 <SPLIT>     public List<RTTicket> getTicketsForQueue(final String queueName, long limit) {
        getSession();
        final List<NameValuePair> params = new ArrayList<NameValuePair>();
        params.add(new BasicNameValuePair(""query"", ""Queue='"" + queueName + ""' AND Status='open'""));
        params.add(new BasicNameValuePair(""format"", ""i""));
        params.add(new BasicNameValuePair(""orderby"", ""-id""));
        final HttpGet get = new HttpGet(m_baseURL + ""/REST/1.0/search/ticket?"" + URLEncodedUtils.format(params, ""UTF-8""));
        final List<RTTicket> tickets = new ArrayList<RTTicket>();
        final List<Long> ticketIds = new ArrayList<Long>();
        try {
            final HttpResponse response = getClient().execute(get);
            int responseCode = response.getStatusLine().getStatusCode();
            if (responseCode != HttpStatus.SC_OK) {
                throw new RequestTrackerException(""Received a non-200 response code from the server: "" + responseCode);
            } else {
                InputStreamReader isr = null;
                BufferedReader br = null;
                try {
                    if (response.getEntity() == null) return null;
                    isr = new InputStreamReader(response.getEntity().getContent());
                    br = new BufferedReader(isr);
                    String line = null;
                    do {
                        line = br.readLine();
                        if (line != null) {
                            if (line.contains(""does not exist."")) {
                                return null;
                            }
                            if (line.startsWith(""ticket/"")) {
                                ticketIds.add(Long.parseLong(line.replace(""ticket/"", """")));
                            }
                        }
                    } while (line != null);
                } catch (final Exception e) {
                    throw new RequestTrackerException(""Unable to read ticket IDs from query."", e);
                } finally {
                    IOUtils.closeQuietly(br);
                    IOUtils.closeQuietly(isr);
                }
            }
        } catch (final Exception e) {
            LogUtils.errorf(this, e, ""An exception occurred while getting tickets for queue "" + queueName);
            return null;
        }
        for (final Long id : ticketIds) {
            try {
                tickets.add(getTicket(id, false));
            } catch (final RequestTrackerException e) {
                LogUtils.warnf(this, e, ""Unable to retrieve ticket."");
            }
        }
        return tickets;
    }
",167,,LABEL_0,LABEL_0,LABEL_0,-1,"getFullClassName,url,className,jis,zentry,name,lastPos,pos",,8,28,0,,0,GA,3602,0.615149049,failed,[]
276,"    public void test() throws Exception {
        StorageStringWriter s = new StorageStringWriter(2048, ""UTF-8"");
        s.addText(""Test"");
        try {
            s.getOutputStream();
            fail(""Should throw IOException as method not supported."");
        } catch (IOException e) {
        }
        s.getWriter().write(""ing is important"");
        s.close(ResponseStateOk.getInstance());
        assertEquals(""Testing is important"", s.getText());
        InputStream input = s.getInputStream();
        StringWriter writer = new StringWriter();
        IOUtils.copy(input, writer, ""UTF-8"");
        assertEquals(""Testing is important"", writer.toString());
        try {
            s.getWriter();
            fail(""Should throw IOException as storage is closed."");
        } catch (IOException e) {
        }
    }
 <SPLIT>     public static boolean doTest(Getter<?> context, Document node) {
        try {
            URL url = new URL(StringUtil.evaluateEL(Documents.getDocumentValue(node, ""url""), context));
            HttpURLConnection conn = (HttpURLConnection) url.openConnection();
            Assert.isTrue(conn.getResponseCode() < 400);
            conn.disconnect();
            return true;
        } catch (Exception e) {
            return false;
        }
    }
",159,,LABEL_0,LABEL_0,LABEL_0,-1,"test,s,input,writer",,4,14,0,,0,GA,1910,0.283799644,failed,[]
277,"    private void copyIconFiles(UmlClass clazz) {
        if (clazz.hasAnnotation(""icon16"")) {
            String i16 = clazz.annotationValue(""icon16"");
            String fileType = "".png"";
            if (i16.endsWith("".jpg"")) fileType = "".jpg"";
            if (i16.endsWith("".gif"")) fileType = "".gif"";
            String desti16 = output_dir + ""/../resources/images/"" + clazz.getName() + ""16"" + fileType;
            try {
                FileChannel src = new FileInputStream(i16).getChannel();
                FileChannel dst = new FileOutputStream(desti16).getChannel();
                dst.transferFrom(src, 0, src.size());
                src.close();
                dst.close();
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
        if (clazz.hasAnnotation(""icon32"")) {
            String i32 = clazz.annotationValue(""icon32"");
            String fileType = "".png"";
            if (i32.endsWith("".jpg"")) fileType = "".jpg"";
            if (i32.endsWith("".gif"")) fileType = "".gif"";
            String desti32 = output_dir + ""/../resources/images/"" + clazz.getName() + ""32"" + fileType;
            try {
                FileChannel src = new FileInputStream(i32).getChannel();
                FileChannel dst = new FileOutputStream(desti32).getChannel();
                dst.transferFrom(src, 0, src.size());
                src.close();
                dst.close();
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }
 <SPLIT>     public void setImg() {
        JFileChooser jFileChooser1 = new JFileChooser();
        String separator = """";
        if (JFileChooser.APPROVE_OPTION == jFileChooser1.showOpenDialog(this.getFatherFrame())) {
            setPath(jFileChooser1.getSelectedFile().getPath());
            separator = jFileChooser1.getSelectedFile().separator;
            File dirImg = new File(""."" + separator + ""images"");
            if (!dirImg.exists()) {
                dirImg.mkdir();
            }
            int index = getPath().lastIndexOf(separator);
            String imgName = getPath().substring(index);
            String newPath = dirImg + imgName;
            try {
                File inputFile = new File(getPath());
                File outputFile = new File(newPath);
                if (!inputFile.getCanonicalPath().equals(outputFile.getCanonicalPath())) {
                    FileInputStream in = new FileInputStream(inputFile);
                    FileOutputStream out = new FileOutputStream(outputFile);
                    int c;
                    while ((c = in.read()) != -1) out.write(c);
                    in.close();
                    out.close();
                }
            } catch (Exception ex) {
                ex.printStackTrace();
                LogHandler.log(ex.getMessage(), Level.INFO, ""LOG_MSG"", isLoggingEnabled());
                JOptionPane.showMessageDialog(null, ex.getMessage().substring(0, Math.min(ex.getMessage().length(), getFatherPanel().MAX_DIALOG_MSG_SZ)) + ""-"" + getClass(), ""Set image"", JOptionPane.ERROR_MESSAGE);
            }
            setPath(newPath);
            bckImg = new ImageIcon(getPath());
        }
    }
",322,"    private void copyImageImages(UmlClass hellobe) {
        if (hellobe.hasAnnotation(""icon16"")) {
            String I14 = hellobe.annotationValue(""icon16"");
            String imagePath = "".png"";
            if (I14.endsWith("".jpg"")) imagePath = "".jpg"";
            if (I14.endsWith("".gif"")) imagePath = "".gif"";
            String destsi16 = output_dir + ""/../resources/images/"" + hellobe.getName() + ""16"" + imagePath;
            try {
                FileChannel url = new FileInputStream(I14).getChannel();
                FileChannel drest = new FileOutputStream(destsi16).getChannel();
                drest.transferFrom(url, 0, url.size());
                url.close();
                drest.close();
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
        if (hellobe.hasAnnotation(""icon32"")) {
            String qi15 = hellobe.annotationValue(""icon32"");
            String imagePath = "".png"";
            if (qi15.endsWith("".jpg"")) imagePath = "".jpg"";
            if (qi15.endsWith("".gif"")) imagePath = "".gif"";
            String destsi16 = output_dir + ""/../resources/images/"" + hellobe.getName() + ""32"" + imagePath;
            try {
                FileChannel url = new FileInputStream(qi15).getChannel();
                FileChannel drest = new FileOutputStream(destsi16).getChannel();
                drest.transferFrom(url, 0, url.size());
                url.close();
                drest.close();
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }
;print(copyIconFiles);print(copyFileImages);print( copyiconFiles);copyIconTypes = 0",LABEL_1,LABEL_1,LABEL_1,1,"copyIconFiles,clazz,i16,fileType,desti16,src,dst,i32,desti32","copyIconFiles:0.020950376987457275,clazz:0.0001367330551147461,i16:-0.0012845396995544434,fileType:0.007341206073760986,desti16:0.0014206171035766602,src:-0.0003196597099304199,dst:0.0032434463500976562,i32:0.0041713714599609375,desti32:0.008738875389099121,",9,42,0,"copyIconFiles:copyImageImages,desti32:destsi16,fileType:imagePath,i32:qi15,dst:drest,desti16:destsi16,clazz:hellobe,src:url,i16:I14,",0,Greedy,607,0.112347956,inesrt,"[';print(copyIconFiles)', ';print(copyFileImages)', ';print( copyiconFiles)', ';copyIconTypes = 0']"
278,"    private void updateFile(File file) throws FileNotFoundException, IOException {
        File destFile = new File(file.getPath().replace(URL_UNZIPPED_PREFIX + latestVersion, """"));
        FileChannel in = null;
        FileChannel out = null;
        try {
            if (!destFile.exists()) {
                destFile.getParentFile().mkdirs();
                destFile.createNewFile();
            }
            in = new FileInputStream(file).getChannel();
            out = new FileOutputStream(destFile).getChannel();
            in.transferTo(0, in.size(), out);
        } finally {
            if (out != null) out.close();
            if (in != null) in.close();
        }
    }
 <SPLIT>     public static String getMessageDigest(String[] inputs) {
        if (inputs.length == 0) return null;
        try {
            MessageDigest sha = MessageDigest.getInstance(""SHA-1"");
            for (String input : inputs) sha.update(input.getBytes());
            byte[] hash = sha.digest();
            String CPass = """";
            int h = 0;
            String s = """";
            for (int i = 0; i < 20; i++) {
                h = hash[i];
                if (h < 0) h += 256;
                s = Integer.toHexString(h);
                if (s.length() < 2) CPass = CPass.concat(""0"");
                CPass = CPass.concat(s);
            }
            CPass = CPass.toUpperCase();
            return CPass;
        } catch (NoSuchAlgorithmException e) {
            throw new IllegalStateException(e.getMessage());
        }
    }
",144,,LABEL_0,LABEL_0,LABEL_0,-1,"updateFile,file,IOException,destFile,in,out",,4,12,0,,0,GA,2742,0.414404106,failed,"[';updateFile = 0', ';print(updateFile)', ';IOException = 0', ';print(IOException)', ';destFile = 0', ';in = 0', ';print(in)', ';out = 0', ';print(upFolder)', ';zip = 0', ';print(load)', ';io = 0', ';model = 0', ';db = 0']"
279,"    public static Object loadXmlFromUrl(URL url, int timeout, XML_TYPE xmlType) throws IOException {
        URLConnection connection = url.openConnection();
        connection.setConnectTimeout(timeout);
        connection.setReadTimeout(timeout);
        BufferedInputStream buffInputStream = new BufferedInputStream(connection.getInputStream());
        return loadXml(buffInputStream, xmlType);
    }
 <SPLIT>     public static void main(String[] args) {
        FTPClient client = new FTPClient();
        String sFTP = ""ftp.miservidor.com"";
        String sUser = ""usuario"";
        String sPassword = ""password"";
        try {
            System.out.println(""Conectandose a "" + sFTP);
            client.connect(sFTP);
            boolean login = client.login(sUser, sPassword);
            if (login) {
                System.out.println(""Login correcto"");
                boolean logout = client.logout();
                if (logout) {
                    System.out.println(""Logout del servidor FTP"");
                }
            } else {
                System.out.println(""Error en el login."");
            }
            System.out.println(""Desconectando."");
            client.disconnect();
        } catch (IOException ioe) {
            ioe.printStackTrace();
        }
    }
",63,,LABEL_0,LABEL_0,LABEL_0,-1,"loadXmlFromUrl,url,timeout,xmlType,connection,buffInputStream",,6,14,0,,0,GA,2647,0.378034902,failed,"[';print(url)', ';buffer = 0', ';l = 0']"
280,"    public PageLoader(String pageAddress) throws Exception {
        URL url = new URL(pageAddress);
        BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));
        inputLine = """";
        while (in.ready()) {
            inputLine = inputLine + in.readLine();
        }
        in.close();
    }
 <SPLIT>     private String retrieveTemplate() throws Exception {
        if (cachedTemplate == null) {
            final URL url = new URL(blogEditor.getBlogInfo().getBlogUrl());
            final BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));
            final StringBuilder result = new StringBuilder();
            String line;
            while ((line = in.readLine()) != null) {
                result.append(line);
            }
            in.close();
            cachedTemplate = result.toString();
        }
        return cachedTemplate;
    }
",67,"    public PageLoader(String resourceaddress) throws Exception {
        URL image = new URL(resourceaddress);
        BufferedReader file = new BufferedReader(new InputStreamReader(image.openStream()));
        imageFile = """";
        while (file.ready()) {
            imageFile = imageFile + file.readLine();
        }
        file.close();
    }
;pageAddress = 0;print(pageAddress);url = 0",LABEL_1,LABEL_1,LABEL_1,1,"pageAddress,url,in,inputLine","pageAddress:-0.025164127349853516,url:0.03554582595825195,in:-0.0033322572708129883,inputLine:-0.07216989994049072,",4,11,0,"url:image,in:file,pageAddress:resourceaddress,inputLine:imageFile,",0,Greedy,169,0.023175538,inesrt,"[';pageAddress = 0', ';print(pageAddress)', ';url = 0']"
281,"    public static String postRequest(String urlString, HashMap data) {
        String returnData = """";
        try {
            URL url = new URL(urlString);
            URLConnection connection = url.openConnection();
            connection.setDoOutput(true);
            connection.setDoInput(true);
            PrintWriter out = new PrintWriter(connection.getOutputStream());
            Object[] keySet = data.keySet().toArray();
            Object[] values = data.values().toArray();
            for (int count = 0; count < keySet.length; count++) {
                out.print(URLEncoder.encode((String) keySet[count]) + ""="" + URLEncoder.encode((String) values[count]));
                if ((count + 1) < keySet.length) out.print(""&"");
            }
            out.close();
            BufferedReader in = new BufferedReader(new InputStreamReader(connection.getInputStream()));
            String inputLine;
            while ((inputLine = in.readLine()) != null) {
                returnData += inputLine;
            }
            in.close();
        } catch (Exception e) {
            e.printStackTrace();
            returnData = null;
        }
        return (returnData);
    }
 <SPLIT>     public static String SHA(String source) {
        logger.info(source);
        String result = null;
        try {
            MessageDigest digest = MessageDigest.getInstance(""SHA"");
            digest.update(source.getBytes());
            byte[] bytes = digest.digest();
            result = EncodeUtils.hexEncode(bytes);
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        }
        logger.info(result);
        return result;
    }
",246,,LABEL_0,LABEL_0,LABEL_0,-1,"postRequest,urlString,data,returnData,url,connection,out,keySet,values,count,in,inputLine",,11,37,0,,0,GA,5548,0.871823645,failed,"[';print(postRequest)', ';data = 0', ';print(urlStream)', ';print(copy)']"
282,"        private void downloadFile(final String downloadUrl, final String destinationFile) throws IOException {
            HttpClient client = new DefaultHttpClient();
            HttpGet httpGet = new HttpGet(downloadUrl);
            final File outputFile = new File(destinationFile);
            createParentDirectories(outputFile);
            FileOutputStream outputStream;
            outputStream = new FileOutputStream(outputFile);
            final HttpResponse response = client.execute(httpGet);
            if (isInterrupted()) {
                outputStream.close();
                return;
            }
            final HttpEntity entity = response.getEntity();
            InputStream inputStream = null;
            try {
                if (entity != null) {
                    inputStream = entity.getContent();
                    CopyStreamStatusCallback callback = new CopyStreamStatusCallback() {

                        @Override
                        public long getSkipBetweenUpdates() {
                            return entity.getContentLength() * 2 / PERCENTAGE_BASE;
                        }

                        @Override
                        public void onUpdate(final long copiedLength) {
                            int percentage = (int) (copiedLength * PERCENTAGE_BASE / entity.getContentLength());
                            handleUpdate(STATUS_DOWNLOADING, percentage);
                        }
                    };
                    copyStreams(inputStream, outputStream, callback);
                }
            } finally {
                try {
                    outputStream.close();
                    if (inputStream != null) {
                        inputStream.close();
                    }
                } catch (IOException e) {
                    Log.v(DictionaryForMIDs.LOG_TAG, ""Exception while closing stream: "" + e);
                }
            }
        }
 <SPLIT>     @Override
    public void sendErrorMessage(String message) throws EntriesException, StatementNotExecutedException, NotConnectedException, MessagingException {
        if (query == null) {
            throw new NotConnectedException();
        }
        ArrayList<String> recipients = query.getUserManager().getTecMail();
        Mail mail = new Mail(recipients);
        try {
            ZipOutputStream zos = new ZipOutputStream(new FileOutputStream(""log/ossobooklog.zip""));
            FileInputStream fis = new FileInputStream(""log/ossobook.log"");
            ZipEntry entry = new ZipEntry(""ossobook.log"");
            zos.putNextEntry(entry);
            byte[] buffer = new byte[8192];
            int read = 0;
            while ((read = fis.read(buffer, 0, 1024)) != -1) {
                zos.write(buffer, 0, read);
            }
            zos.closeEntry();
            fis.close();
            zos.close();
            mail.sendErrorMessage(message, new File(""log/ossobooklog.zip""), getUserName());
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }
",245,"        private void copyFiles(final String downloadUrl, final String destinationFile) throws IOException {
            HttpClient client = new DefaultHttpClient();
            HttpGet httpGet = new HttpGet(downloadUrl);
            final File outputFile = new File(destinationFile);
            createParentDirectories(outputFile);
            FileOutputStream outputStream;
            outputStream = new FileOutputStream(outputFile);
            final HttpResponse response = client.execute(httpGet);
            if (isInterrupted()) {
                outputStream.close();
                return;
            }
            final HttpEntity entity = response.getEntity();
            InputStream inputStream = null;
            try {
                if (entity != null) {
                    inputStream = entity.getContent();
                    CopyStreamStatusCallback callback = new CopyStreamStatusCallback() {

                        @Override
                        public long getSkipBetweenUpdates() {
                            return entity.getContentLength() * 2 / PERCENTAGE_BASE;
                        }

                        @Override
                        public void onUpdate(final long copiedLength) {
                            int percentage = (int) (copiedLength * PERCENTAGE_BASE / entity.getContentLength());
                            handleUpdate(STATUS_DOWNLOADING, percentage);
                        }
                    };
                    copyStreams(inputStream, outputStream, callback);
                }
            } finally {
                try {
                    outputStream.close();
                    if (inputStream != null) {
                        inputStream.close();
                    }
                } catch (IOException e) {
                    Log.v(DictionaryForMIDs.LOG_TAG, ""Exception while closing stream: "" + e);
                }
            }
        }
",LABEL_0,LABEL_0,LABEL_1,1,"downloadFile,downloadUrl,destinationFile,client,httpGet,outputFile,outputStream,response,entity,inputStream,callback,copiedLength,percentage","downloadFile:0.1596425175666809,downloadUrl:0.1563049554824829,destinationFile:0.10817974805831909,client:-0.04855877161026001,httpGet:0.1306825876235962,outputFile:0.15551894903182983,outputStream:0.055076420307159424,response:-0.02689284086227417,entity:-0.05852317810058594,inputStream:0.006804823875427246,callback:-0.019882678985595703,copiedLength:0.033435285091400146,percentage:0.0006855130195617676,",1,1,0,"downloadFile:copyFiles,",0,Greedy,51,0.008267903,replace,[]
283,"    public void update(String channelPath, String dataField, String fatherDocId) {
        String sqlInitial = ""select uri from t_ip_doc_res where doc_id = '"" + fatherDocId + ""' and type="" + "" '"" + ces.platform.infoplat.core.DocResource.DOC_MAGAZINE_TYPE + ""' "";
        String sqlsortURL = ""update t_ip_doc_res set uri = ? where doc_id = '"" + fatherDocId + ""' "" + "" and type = '"" + ces.platform.infoplat.core.DocResource.DOC_MAGAZINE_TYPE + ""' "";
        Connection conn = null;
        ResultSet rs = null;
        PreparedStatement ps = null;
        try {
            dbo = (ERDBOperation) createDBOperation();
            String url = """";
            boolean flag = true;
            StringTokenizer st = null;
            conn = dbo.getConnection();
            conn.setAutoCommit(false);
            ps = conn.prepareStatement(sqlInitial);
            rs = ps.executeQuery();
            if (rs.next()) url = rs.getString(1);
            if (!url.equals("""")) {
                st = new StringTokenizer(url, "","");
                String sortDocId = """";
                while (st.hasMoreTokens()) {
                    if (flag) {
                        sortDocId = ""'"" + st.nextToken() + ""'"";
                        flag = false;
                    } else {
                        sortDocId = sortDocId + "","" + ""'"" + st.nextToken() + ""'"";
                    }
                }
                String sqlsort = ""select id from t_ip_doc where id in ("" + sortDocId + "") order by "" + dataField;
                ps = conn.prepareStatement(sqlsort);
                rs = ps.executeQuery();
                String sortURL = """";
                boolean sortflag = true;
                while (rs.next()) {
                    if (sortflag) {
                        sortURL = rs.getString(1);
                        sortflag = false;
                    } else {
                        sortURL = sortURL + "","" + rs.getString(1);
                    }
                }
                ps = conn.prepareStatement(sqlsortURL);
                ps.setString(1, sortURL);
                ps.executeUpdate();
            }
            conn.commit();
        } catch (Exception e) {
            e.printStackTrace();
            try {
                conn.rollback();
            } catch (SQLException e1) {
                e1.printStackTrace();
            }
        } finally {
            close(rs, null, ps, conn, dbo);
        }
    }
 <SPLIT>     public List<RTTicket> getTicketsForQueue(final String queueName, long limit) {
        getSession();
        final List<NameValuePair> params = new ArrayList<NameValuePair>();
        params.add(new BasicNameValuePair(""query"", ""Queue='"" + queueName + ""' AND Status='open'""));
        params.add(new BasicNameValuePair(""format"", ""i""));
        params.add(new BasicNameValuePair(""orderby"", ""-id""));
        final HttpGet get = new HttpGet(m_baseURL + ""/REST/1.0/search/ticket?"" + URLEncodedUtils.format(params, ""UTF-8""));
        final List<RTTicket> tickets = new ArrayList<RTTicket>();
        final List<Long> ticketIds = new ArrayList<Long>();
        try {
            final HttpResponse response = getClient().execute(get);
            int responseCode = response.getStatusLine().getStatusCode();
            if (responseCode != HttpStatus.SC_OK) {
                throw new RequestTrackerException(""Received a non-200 response code from the server: "" + responseCode);
            } else {
                InputStreamReader isr = null;
                BufferedReader br = null;
                try {
                    if (response.getEntity() == null) return null;
                    isr = new InputStreamReader(response.getEntity().getContent());
                    br = new BufferedReader(isr);
                    String line = null;
                    do {
                        line = br.readLine();
                        if (line != null) {
                            if (line.contains(""does not exist."")) {
                                return null;
                            }
                            if (line.startsWith(""ticket/"")) {
                                ticketIds.add(Long.parseLong(line.replace(""ticket/"", """")));
                            }
                        }
                    } while (line != null);
                } catch (final Exception e) {
                    throw new RequestTrackerException(""Unable to read ticket IDs from query."", e);
                } finally {
                    IOUtils.closeQuietly(br);
                    IOUtils.closeQuietly(isr);
                }
            }
        } catch (final Exception e) {
            LogUtils.errorf(this, e, ""An exception occurred while getting tickets for queue "" + queueName);
            return null;
        }
        for (final Long id : ticketIds) {
            try {
                tickets.add(getTicket(id, false));
            } catch (final RequestTrackerException e) {
                LogUtils.warnf(this, e, ""Unable to retrieve ticket."");
            }
        }
        return tickets;
    }
",437,,LABEL_0,LABEL_0,LABEL_0,-1,"update,channelPath,dataField,fatherDocId,sqlInitial,sqlsortURL,conn,rs,ps,dbo,url,st,sortDocId,flag,sqlsort,sortURL,sortflag",,16,67,0,,0,GA,7673,1.545636761,failed,[';update = 0']
284,"    public void testTransactions() throws Exception {
        con = TestUtil.openDB();
        Statement st;
        ResultSet rs;
        con.setAutoCommit(false);
        assertTrue(!con.getAutoCommit());
        con.setAutoCommit(true);
        assertTrue(con.getAutoCommit());
        st = con.createStatement();
        st.executeUpdate(""insert into test_a (imagename,image,id) values ('comttest',1234,5678)"");
        con.setAutoCommit(false);
        st.executeUpdate(""update test_a set image=9876 where id=5678"");
        con.commit();
        rs = st.executeQuery(""select image from test_a where id=5678"");
        assertTrue(rs.next());
        assertEquals(9876, rs.getInt(1));
        rs.close();
        st.executeUpdate(""update test_a set image=1111 where id=5678"");
        con.rollback();
        rs = st.executeQuery(""select image from test_a where id=5678"");
        assertTrue(rs.next());
        assertEquals(9876, rs.getInt(1));
        rs.close();
        TestUtil.closeDB(con);
    }
 <SPLIT>     public String generateToken(String code) {
        try {
            MessageDigest md = MessageDigest.getInstance(""SHA1"");
            md.update(code.getBytes());
            byte[] bytes = md.digest();
            return toHex(bytes);
        } catch (NoSuchAlgorithmException e) {
            throw new RuntimeException(""SHA1 missing"");
        }
    }
",194,,LABEL_0,LABEL_0,LABEL_0,-1,"testTransactions,con,st,rs",,4,27,0,,0,GA,2069,0.318610986,failed,[';con = 0']
285,"    public static byte[] hash(final byte[] saltBefore, final String content, final byte[] saltAfter, final int repeatedHashingCount) throws NoSuchAlgorithmException, UnsupportedEncodingException {
        if (content == null) return null;
        final MessageDigest digest = MessageDigest.getInstance(DIGEST);
        if (digestLength == -1) digestLength = digest.getDigestLength();
        for (int i = 0; i < repeatedHashingCount; i++) {
            if (i > 0) digest.update(digest.digest());
            digest.update(saltBefore);
            digest.update(content.getBytes(WebCastellumFilter.DEFAULT_CHARACTER_ENCODING));
            digest.update(saltAfter);
        }
        return digest.digest();
    }
 <SPLIT>     public static boolean decodeFileToFile(final String infile, final String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            final byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (final java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (final Exception exc) {
            }
            try {
                out.close();
            } catch (final Exception exc) {
            }
        }
        return success;
    }
",137,,LABEL_0,LABEL_0,LABEL_0,-1,"hash,saltBefore,content,saltAfter,repeatedHashingCount,digest,digestLength,i",,8,26,0,,0,GA,3818,0.586097511,failed,[]
286,"    public static byte[] createPasswordDigest(String password, byte[] salt) throws Exception {
        MessageDigest md = MessageDigest.getInstance(""MD5"");
        md.update(salt);
        md.update(password.getBytes(""UTF8""));
        byte[] digest = md.digest();
        return digest;
    }
 <SPLIT>     private final String createMD5(String pwd) throws Exception {
        MessageDigest md = (MessageDigest) MessageDigest.getInstance(""MD5"").clone();
        md.update(pwd.getBytes(""UTF-8""));
        byte[] pd = md.digest();
        StringBuffer app = new StringBuffer();
        for (int i = 0; i < pd.length; i++) {
            String s2 = Integer.toHexString(pd[i] & 0xFF);
            app.append((s2.length() == 1) ? ""0"" + s2 : s2);
        }
        return app.toString();
    }
",67,,LABEL_1,LABEL_1,LABEL_1,-1,"createPasswordDigest,password,salt,md,digest",,5,12,0,,0,GA,2233,0.316199406,failed,"[';createPasswordDigest = 0', ';password = 0']"
287,"    public void copyToDir(File dir) {
        if (!dir.exists()) {
            dir.mkdirs();
        } else if (this.file.getParentFile() != null && this.file.getParentFile().equals(dir)) {
            return;
        }
        File file = getEstimatedFileName(dir);
        try {
            file.createNewFile();
            FileOutputStream fileOutputStream = new FileOutputStream(file);
            FileInputStream fileInputStream = new FileInputStream(this.file);
            int read = 0;
            byte[] buffer = new byte[1024];
            while (read != -1) {
                fileOutputStream.write(buffer, 0, read);
                read = fileInputStream.read(buffer);
            }
            fileInputStream.close();
            fileOutputStream.close();
            this.file = file;
        } catch (IOException e) {
            Logger.log(e);
        }
    }
 <SPLIT>     @Test
    public void test_lookupResourceType_FullSearch_TwoWordsInMiddle() throws Exception {
        URL url = new URL(baseUrl + ""/lookupResourceType/armor+plates"");
        HttpURLConnection connection = (HttpURLConnection) url.openConnection();
        connection.setRequestMethod(""GET"");
        connection.setRequestProperty(""Accept"", ""application/json"");
        assertThat(connection.getResponseCode(), equalTo(200));
        assertThat(getResponse(connection), equalTo(""[{\""itemTypeID\"":25605,\""itemCategoryID\"":4,\""name\"":\""Armor Plates\"",\""icon\"":\""69_09\""},{\""itemTypeID\"":25624,\""itemCategoryID\"":4,\""name\"":\""Intact Armor Plates\"",\""icon\"":\""69_10\""}]""));
        assertThat(connection.getHeaderField(""Content-Type""), equalTo(""application/json; charset=utf-8""));
    }
",171,,LABEL_0,LABEL_0,LABEL_0,-1,"copyToDir,dir,file,fileOutputStream,fileInputStream,read,buffer",,4,17,0,,0,GA,3513,0.545627324,failed,[';copyFromFile = 0']
288,"    public static boolean decodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }
 <SPLIT>     public void testCodingEmptyFile() throws Exception {
        ByteArrayOutputStream baos = new ByteArrayOutputStream();
        WritableByteChannel channel = newChannel(baos);
        HttpParams params = new BasicHttpParams();
        SessionOutputBuffer outbuf = new SessionOutputBufferImpl(1024, 128, params);
        HttpTransportMetricsImpl metrics = new HttpTransportMetricsImpl();
        LengthDelimitedEncoder encoder = new LengthDelimitedEncoder(channel, outbuf, metrics, 16);
        encoder.write(wrap(""stuff;""));
        File tmpFile = File.createTempFile(""testFile"", ""txt"");
        FileOutputStream fout = new FileOutputStream(tmpFile);
        OutputStreamWriter wrtout = new OutputStreamWriter(fout);
        wrtout.flush();
        wrtout.close();
        FileChannel fchannel = new FileInputStream(tmpFile).getChannel();
        encoder.transfer(fchannel, 0, 20);
        encoder.write(wrap(""more stuff""));
        String s = baos.toString(""US-ASCII"");
        assertTrue(encoder.isCompleted());
        assertEquals(""stuff;more stuff"", s);
        tmpFile.delete();
    }
",194,"    public static boolean decodeString2String(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream rin = null;
        java.io.OutputStream job = null;
        try {
            rin = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);
            job = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] url = new byte[65536];
            int load = -1;
            while ((load = rin.load(url)) >= 0) {
                job.write(url, 0, load);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                rin.close();
            } catch (Exception exc) {
            }
            try {
                job.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }
",LABEL_1,LABEL_1,LABEL_0,1,"decodeFileToFile,infile,outfile,in,out,buffer,read,success","decodeFileToFile:-0.016613662242889404,infile:-0.0006636977195739746,outfile:-0.0003974437713623047,in:-0.006833255290985107,out:-0.0023461580276489258,buffer:-0.0039667487144470215,read:-0.0017274022102355957,success:0.00517195463180542,",5,16,0,"success:success,outfile:outfile,infile:infile,read:load,out:job,buffer:url,in:rin,decodeFileToFile:decodeString2String,",0,Greedy,358,0.055272277,replace,[]
289,"    public static String plainToMD(LoggerCollection loggerCol, String input) {
        byte[] byteHash = null;
        MessageDigest md = null;
        StringBuilder md5result = new StringBuilder();
        try {
            md = MessageDigest.getInstance(""MD5"");
            md.reset();
            md.update(input.getBytes());
            byteHash = md.digest();
            for (int i = 0; i < byteHash.length; i++) {
                md5result.append(Integer.toHexString(0xFF & byteHash[i]));
            }
        } catch (NoSuchAlgorithmException ex) {
            loggerCol.logException(CLASSDEBUG, ""de.searchworkorange.lib.misc.hash.MD5Hash"", Level.FATAL, ex);
        }
        return (md5result.toString());
    }
 <SPLIT>     public boolean actualizarDatosPrevia(int idJugadorDiv, int idRonda, int idPareoRival, int color, int flotante) {
        int intResult = 0;
        String sql = ""UPDATE jugadorxdivxronda "" + "" SET idPareoRival = "" + idPareoRival + "" , color = "" + color + "" , flotante = "" + flotante + "" "" + "" WHERE jugadorxDivision_idJugadorxDivision = "" + idJugadorDiv + "" AND ronda_numeroRonda = "" + idRonda;
        try {
            connection = conexionBD.getConnection();
            connection.setAutoCommit(false);
            ps = connection.prepareStatement(sql);
            intResult = ps.executeUpdate();
            connection.commit();
        } catch (SQLException ex) {
            ex.printStackTrace();
            try {
                connection.rollback();
            } catch (SQLException exe) {
                exe.printStackTrace();
            }
        } finally {
            conexionBD.close(ps);
            conexionBD.close(connection);
        }
        return (intResult > 0);
    }
",141,,LABEL_0,LABEL_0,LABEL_0,-1,"plainToMD,loggerCol,input,byteHash,md,md5result,i",,0,0,0,,0,GA,3090,0.482019023,failed,[]
290,"    public void testSimpleQuery() throws Exception {
        JCRNodeSource dummySource = (JCRNodeSource) resolveSource(BASE_URL + ""users/alexander.klimetschek"");
        assertNotNull(dummySource);
        OutputStream os = ((ModifiableSource) dummySource).getOutputStream();
        assertNotNull(os);
        String dummyContent = ""<?xml version=\""1.0\"" encoding=\""UTF-8\""?><user><id>alexander</id><teamspace>cyclr</teamspace><teamspace>mindquarryTooLong</teamspace></user>"";
        os.write(dummyContent.getBytes());
        os.flush();
        os.close();
        JCRNodeSource source = (JCRNodeSource) resolveSource(BASE_URL + ""users/bastian"");
        assertNotNull(source);
        os = ((ModifiableSource) source).getOutputStream();
        assertNotNull(os);
        String content = ""<?xml version=\""1.0\"" encoding=\""UTF-8\""?><user><id>bastian</id><teamspace>mindquarry</teamspace></user>"";
        os.write(content.getBytes());
        os.flush();
        os.close();
        QueryResultSource qResult = (QueryResultSource) resolveSource(BASE_URL + ""users?/*[.//user/teamspace='mindquarry']"");
        assertNotNull(qResult);
        Collection results = qResult.getChildren();
        assertEquals(1, results.size());
        Iterator it = results.iterator();
        JCRNodeSource rSrc = (JCRNodeSource) it.next();
        InputStream rSrcIn = rSrc.getInputStream();
        ByteArrayOutputStream actualOut = new ByteArrayOutputStream();
        IOUtils.copy(rSrcIn, actualOut);
        rSrcIn.close();
        assertEquals(content, actualOut.toString());
        actualOut.close();
        rSrc.delete();
    }
 <SPLIT>     public InputStream retrieveStream(String url) {
        HttpGet getRequest = new HttpGet(url);
        try {
            HttpResponse getResponse = getClient().execute(getRequest);
            final int statusCode = getResponse.getStatusLine().getStatusCode();
            if (statusCode != HttpStatus.SC_OK) {
                Log.w(getClass().getSimpleName(), ""Error "" + statusCode + "" for URL "" + url);
                return null;
            }
            HttpEntity getResponseEntity = getResponse.getEntity();
            return getResponseEntity.getContent();
        } catch (Exception e) {
            getRequest.abort();
            Log.w(getClass().getSimpleName(), ""Error for URL "" + url, e);
        }
        return null;
    }
",280,,LABEL_0,LABEL_1,,-4,"testSimpleQuery,dummySource,os,dummyContent,source,content,qResult,results,it,rSrc,rSrcIn,actualOut",,,,0,,0,Greedy,1,0.000471691,,[]
291,"    private void copy(File source, File destinationDirectory) throws IOException {
        if (source.isDirectory()) {
            File newDir = new File(destinationDirectory, source.getName());
            newDir.mkdir();
            File[] children = source.listFiles();
            for (int i = 0; i < children.length; i++) {
                if (children[i].getName().equals("".svn"")) {
                    continue;
                }
                copy(children[i], newDir);
            }
        } else {
            File newFile = new File(destinationDirectory, source.getName());
            if (newFile.exists() && source.lastModified() == newFile.lastModified()) {
                return;
            }
            FileOutputStream output = new FileOutputStream(newFile);
            FileInputStream input = new FileInputStream(source);
            byte[] buff = new byte[2048];
            int read = 0;
            while ((read = input.read(buff)) > 0) {
                output.write(buff, 0, read);
            }
            output.flush();
            output.close();
            input.close();
        }
    }
 <SPLIT>     protected void doUpload(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        HttpSession reqSession = request.getSession();
        ArrayList<File> uploadFiles = new ArrayList<File>();
        LOG.info(""UploadServlet Upload request received"");
        if (ServletFileUpload.isMultipartContent(request)) {
            LOG.debug(""UploadServlet Received a multipart request."");
        } else {
            LOG.debug(""UploadServlet Received a non-multipart request."");
        }
        String tempDirName = UUID.randomUUID().toString();
        File tempUploadDir = new File(adapter.getRootPath() + File.separator + ""temp"" + File.separator + tempDirName);
        tempUploadDir.getParentFile().mkdir();
        while (tempUploadDir.exists()) {
            tempDirName = UUID.randomUUID().toString();
            tempUploadDir = new File(adapter.getRootPath() + File.separator + ""temp"" + File.separator + tempDirName);
        }
        tempUploadDir.mkdir();
        File attachmentDir = (File) (reqSession.getAttribute(""up2p:attachdir""));
        if (attachmentDir != null) {
            LOG.info(""UploadServlet: Copying provided attachment to upload dir from: "" + attachmentDir.getAbsolutePath());
            tempUploadDir.delete();
            attachmentDir.renameTo(tempUploadDir);
            reqSession.removeAttribute(""up2p:attachdir"");
        }
        LOG.info(""UploadServlet: Using temporary directory: "" + tempUploadDir.getPath());
        PairList paramMap = null;
        if (ServletFileUpload.isMultipartContent(request)) {
            paramMap = getMultipartParameters(request, uploadHandler, LOG, tempUploadDir.getPath());
            if (paramMap.size() == 0) {
                LOG.debug(""UploadServlet Parsed multipart request and "" + ""found no parameters. Parsing as regular"" + "" request instead."");
                paramMap = copyParameters(request);
                LOG.debug(""UploadServlet Parsed as regular request and found "" + paramMap.size() + "" parameters."");
            }
        } else {
            paramMap = copyParameters(request);
        }
        String communityId = getCurrentCommunityId(request.getSession());
        String newcommunity = paramMap.getValue(HttpParams.UP2P_COMMUNITY);
        LOG.debug(""UploadServlet: Got active community: "" + newcommunity);
        if (newcommunity != null) {
            communityId = newcommunity;
            LOG.debug(""switching to community"" + communityId);
        }
        if (communityId == null || communityId.length() == 0) {
            LOG.warn(""UploadServlet Current community ID is missing from"" + ""the user session."");
            writeError(request, response, ""The current community is unknown."" + "" Please select a community before performing "" + ""any actions."", paramMap);
            for (File f : tempUploadDir.listFiles()) {
                f.delete();
            }
            tempUploadDir.delete();
            return;
        }
        LOG.info(""UploadServlet Uploading to community "" + communityId + ""."");
        uploadFiles.clear();
        Iterator<String> uploadedFileIter = paramMap.getValues(HttpParams.UP2P_FILENAME);
        String filename = """";
        try {
            if (uploadedFileIter.hasNext()) {
                filename = uploadedFileIter.next();
            } else {
                throw new IOException(""UploadServlet: No up2p:filename parameters were found."");
            }
            if (filename.startsWith(""file:"")) filename = filename.substring(5);
            if (filename.length() == 0) {
                throw new IOException(""UploadServlet: An empty up2p:filename parameter was submitted."");
            }
            File resourceFile = null;
            resourceFile = new File(adapter.getStorageDirectory(communityId), filename);
            File tempResFile = new File(tempUploadDir, filename);
            if (!tempResFile.exists() && !resourceFile.exists()) {
                throw new IOException(""UploadServlet: The uploaded resource could not be found."");
            }
            if ((tempResFile.exists() && resourceFile.exists()) || (tempResFile.exists() && !resourceFile.exists())) {
                resourceFile = FileUtil.createUniqueFile(resourceFile);
                LOG.info(""UploadServlet: Direct upload, copying resource file.\n\tOriginal: "" + tempResFile.getPath() + ""\n\tNew: "" + resourceFile.getPath());
                resourceFile.getParentFile().mkdir();
                FileOutputStream resourceCopyStream = new FileOutputStream(resourceFile);
                FileUtil.writeFileToStream(resourceCopyStream, tempResFile, true);
                filename = resourceFile.getName();
            }
            LOG.info(""UploadServlet: resource file name: "" + filename);
            uploadFiles.add(resourceFile);
        } catch (IOException e) {
            LOG.error(""UploadServlet: "" + e.getMessage());
            writeError(request, response, e.getMessage(), paramMap);
            return;
        }
        String editResourceId = paramMap.getValue(HttpParams.UP2P_EDIT_RESOURCE);
        if (editResourceId != null && editResourceId.length() > 0) {
            LOG.debug(""UploadServlet: Got edit resource: "" + editResourceId);
            File editAttach = new File(adapter.getAttachmentStorageDirectory(communityId, editResourceId));
            if (editAttach.exists() && editAttach.isDirectory()) {
                LOG.debug(""UploadServlet: Copying additional attachments from: "" + editAttach.getAbsolutePath());
                for (File oldFile : editAttach.listFiles()) {
                    File newFile = new File(tempUploadDir, oldFile.getName());
                    if (!newFile.exists()) {
                        LOG.debug(""UploadServlet: Copying attachment: "" + oldFile.getAbsolutePath() + "" to "" + newFile.getAbsolutePath());
                        FileOutputStream attachCopyStream = new FileOutputStream(newFile);
                        FileUtil.writeFileToStream(attachCopyStream, oldFile, true);
                    } else {
                        LOG.debug(""UploadServlet: Attachment "" + newFile.getName() + "" explicitly replaced in new upload."");
                    }
                }
            }
        }
        String batchUploadString = paramMap.getValue(HttpParams.UP2P_BATCH);
        boolean batchUpload = batchUploadString != null && batchUploadString.length() > 0;
        if (batchUpload) {
            LOG.info(""UploadSerlvet Recieved batch upload request."");
            File batchFile = new File(adapter.getStorageDirectory(communityId), uploadFiles.get(0).getName());
            uploadFiles.clear();
            LOG.debug(""UploadServlet resource file stored at: "" + batchFile.getPath());
            XMLReader reader = TransformerHelper.getXMLReader();
            reader.setContentHandler(new BatchCopyHandler(communityId, uploadFiles));
            try {
                FileInputStream batchInput = new FileInputStream(batchFile);
                reader.parse(new InputSource(batchInput));
                batchInput.close();
            } catch (Exception e) {
                LOG.error(""UploadServlet: Error parsing batch upload file."");
                LOG.error(""UploadServlet: "" + e.getMessage());
                writeError(request, response, ""Uploaded content was not a valid batch resource file."", paramMap);
                return;
            }
            batchFile.delete();
            adapter.addNotification(""Batch file succesfully processed into "" + uploadFiles.size() + "" resources."");
        }
        boolean pushUpload = paramMap.getValue(HttpParams.UP2P_PUSH) != null && paramMap.getValue(HttpParams.UP2P_PUSH).length() > 0;
        String id = """";
        boolean duplicateResource = false;
        int uploadCount = 0;
        for (int i = 0; i < uploadFiles.size(); i++) {
            LOG.info(""UploadServlet Publishing resource to WebAdapter: "" + uploadFiles.get(i).getName());
            try {
                id = adapter.publish(communityId, new File(uploadFiles.get(i).getName()), tempUploadDir);
                uploadFiles.remove(i);
                i--;
                uploadCount++;
                LOG.info(""UploadServlet Resource published with id: "" + id);
            } catch (IOException e) {
                LOG.warn(""UploadServlet IO Error occured in reading the uploaded file: "" + e.getMessage(), e);
                uploadFilesCleanup(uploadFiles, tempUploadDir);
                writeError(request, response, ""An error occured in reading the uploaded file: "" + e.getMessage(), paramMap);
                return;
            } catch (SAXParseException e) {
                LOG.warn(""UploadServlet SAX Parse Error occured in uploaded resource: "" + e.getMessage());
                String errMsg = ""Invalid XML in the uploaded resource.<br/>"" + e.getMessage() + ""<br/><br/>File location: "" + uploadFiles.get(i).getAbsolutePath() + ""<br/>Line: "" + e.getLineNumber() + "" Column: "" + e.getColumnNumber();
                uploadFilesCleanup(uploadFiles, tempUploadDir);
                writeError(request, response, errMsg, paramMap);
                return;
            } catch (SAXException e) {
                LOG.warn(""UploadServlet Invalid XML in uploaded resource: "" + e.getMessage());
                String errMsg = ""Invalid XML in uploaded resource<br/><i>"" + e.getMessage() + ""</i><br/>"" + ""File location: "" + uploadFiles.get(i).getAbsolutePath();
                uploadFilesCleanup(uploadFiles, tempUploadDir);
                writeError(request, response, errMsg, paramMap);
                return;
            } catch (DuplicateResourceException e) {
                LOG.info(""UploadServlet Duplicate Resource: "" + e.getResourceId() + "" Community: "" + e.getCommunityId());
                if (batchUpload) {
                    if (!duplicateResource) {
                        adapter.addNotification(""Warning: Batch upload contained previously published "" + "" resources which have been discarded."");
                        duplicateResource = true;
                    }
                } else {
                    uploadFilesCleanup(uploadFiles, tempUploadDir);
                    String respondWithXml = paramMap.getValue(HttpParams.UP2P_FETCH_XML);
                    if (respondWithXml != null && respondWithXml.length() > 0) {
                        writeError(request, response, ""This resource is already shared with resource "" + "" id: "" + e.getResourceId(), paramMap);
                        return;
                    }
                    String redirect = response.encodeURL(""/overwrite.jsp?up2p:community="" + e.getCommunityId() + ""&up2p:resource="" + e.getResourceId());
                    LOG.info(""UploadServlet Redirecting to "" + redirect);
                    RequestDispatcher rd = request.getRequestDispatcher(redirect);
                    rd.forward(request, response);
                    return;
                }
            } catch (NetworkAdapterException e) {
                LOG.info(""UploadServlet Error in the Network Adapter for"" + "" community ID "" + communityId, e);
                uploadFilesCleanup(uploadFiles, tempUploadDir);
                writeError(request, response, ""Error in the Network Adapter for this community. <br/>"" + e.getMessage(), paramMap);
                return;
            } catch (ResourceNotFoundException e) {
                LOG.info(""UploadServlet Error Resource not found "" + e);
                uploadFilesCleanup(uploadFiles, tempUploadDir);
                writeError(request, response, ""Error : <br/>"" + e.getMessage(), paramMap);
                return;
            }
        }
        uploadFilesCleanup(uploadFiles, tempUploadDir);
        String ajaxRequest = paramMap.getValue(HttpParams.UP2P_XMLHTTP);
        String respondWithXml = paramMap.getValue(HttpParams.UP2P_FETCH_XML);
        if (respondWithXml != null && respondWithXml.length() > 0) {
            response.setContentType(""text/xml"");
            PrintWriter out = response.getWriter();
            out.println(""<?xml version=\""1.0\"" encoding=\""UTF-8\""?>"");
            out.println(""<upload success=\""true\"" >"");
            out.println(""<resid>"" + id + ""</resid>"");
            out.println(""</upload>"");
        } else if (ajaxRequest != null && ajaxRequest.length() > 0) {
            LOG.debug(""UploadServlet Recieved xmlHttp request, responding with XML"");
            response.setContentType(""text/xml"");
            PrintWriter out = response.getWriter();
            out.println(""<?xml version=\""1.0\"" encoding=\""UTF-8\""?>"");
            out.print(""<resource id=\"""" + request.getParameter(HttpParams.UP2P_RESOURCE) + ""\"" "");
            if (request.getParameter(HttpParams.UP2P_PEERID) != null) {
                out.print(""peerid=\"""" + request.getParameter(HttpParams.UP2P_PEERID) + ""\"" "");
            }
            out.println(""/>"");
        } else if (batchUpload) {
            adapter.addNotification(uploadCount + "" resources were succesfully published."");
            request.setAttribute(""up2p.display.mode"", ""view"");
            String redirect = response.encodeURL(""/view.jsp?up2p:community="" + communityId);
            LOG.info(""UploadServlet Redirecting to "" + redirect);
            RequestDispatcher rd = request.getRequestDispatcher(redirect);
            rd.forward(request, response);
        } else if (!pushUpload) {
            request.setAttribute(""up2p.display.mode"", ""view"");
            String redirect = response.encodeURL(""/view.jsp?up2p:resource="" + id);
            LOG.info(""UploadServlet Redirecting to "" + redirect);
            RequestDispatcher rd = request.getRequestDispatcher(redirect);
            rd.forward(request, response);
        }
        return;
    }
",229,"    private void lock(File url, File destinatorDirectory) throws IOException {
        if (url.isDirectory()) {
            File NewFile = new File(destinatorDirectory, url.getName());
            NewFile.mkdir();
            File[] url = url.listFiles();
            for (int li = 0; li < url.length; li++) {
                if (url[li].getName().equals("".svn"")) {
                    continue;
                }
                lock(url[li], NewFile);
            }
        } else {
            File oldFile = new File(destinatorDirectory, url.getName());
            if (oldFile.exists() && url.lastModified() == oldFile.lastModified()) {
                return;
            }
            FileOutputStream ilo = new FileOutputStream(oldFile);
            FileInputStream inf = new FileInputStream(url);
            byte[] gb = new byte[2048];
            int Read = 0;
            while ((Read = inf.Read(gb)) > 0) {
                ilo.write(gb, 0, Read);
            }
            ilo.flush();
            ilo.close();
            inf.close();
        }
    }
",LABEL_1,LABEL_1,LABEL_0,1,"copy,source,destinationDirectory,newDir,children,i,newFile,output,input,buff,read","copy:-0.0005804300308227539,source:-0.004920482635498047,destinationDirectory:-0.0024704337120056152,newDir:-0.0016866326332092285,children:-0.0029668807983398438,i:-0.002149641513824463,newFile:0.000803828239440918,output:-0.0007534623146057129,input:-0.0015438199043273926,buff:-0.0008443593978881836,read:-0.0025850534439086914,",11,42,0,"newFile:oldFile,copy:lock,output:ilo,buff:gb,input:inf,newDir:NewFile,i:li,destinationDirectory:destinatorDirectory,read:Read,children:url,source:url,",0,Greedy,557,0.170170808,replace,[]
292,"    protected void createSettingsIfNecessary() throws IOException {
        OutputStream out = null;
        try {
            final File fSettings = SettingsUtils.getSettingsFile();
            if (!fSettings.exists()) {
                fSettings.createNewFile();
                final Path src = new Path(""mvn/settings.xml"");
                final InputStream in = FileLocator.openStream(getBundle(), src, false);
                out = new FileOutputStream(SettingsUtils.getSettings(), true);
                IOUtils.copy(in, out);
            } else {
                Logger.getLog().info(""File settings.xml already exists at "" + fSettings);
            }
        } finally {
            if (out != null) {
                out.flush();
                out.close();
            }
        }
    }
 <SPLIT>     protected Control createDialogArea(Composite parent) {
        Composite composite = (Composite) super.createDialogArea(parent);
        setTitle(DialogsMessages.getString(""LicenseDialog.Caption""));
        setMessage(DialogsMessages.getString(""LicenseDialog.Explanation""));
        Composite content = new Composite(composite, SWT.NONE);
        content.setLayoutData(new GridData(GridData.FILL_BOTH));
        final int ncol = 1;
        GridLayout layout = new GridLayout(1, false);
        layout.numColumns = ncol;
        content.setLayout(layout);
        Browser browser = null;
        Text text = null;
        try {
            browser = new Browser(content, SWT.NONE);
            browser.setLayoutData(new GridData(GridData.FILL_BOTH));
        } catch (Throwable t) {
            text = new Text(content, SWT.MULTI | SWT.WRAP | SWT.VERTICAL);
            text.setLayoutData(new GridData(GridData.FILL_BOTH));
        }
        URL url = PalobrowserPlugin.getDefault().getBundle().getResource(browser != null ? ""license.html"" : ""license.txt"");
        InputStream in = null;
        BufferedReader r = null;
        StringBuffer sb = new StringBuffer();
        try {
            in = url.openStream();
            r = new BufferedReader(new InputStreamReader(in, ""ISO-8859-1""));
            String line;
            while ((line = r.readLine()) != null) sb.append(line).append(""\r\n"");
        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            if (r != null) {
                try {
                    r.close();
                } catch (IOException e) {
                }
            }
            if (in != null) {
                try {
                    in.close();
                } catch (IOException e) {
                }
            }
        }
        if (browser != null) browser.setText(sb.toString()); else text.setText(sb.toString());
        return composite;
    }
",139,,LABEL_0,LABEL_1,,-4,"createSettingsIfNecessary,out,fSettings,src,in",,,,0,,0,Greedy,1,0.000459468,,[]
293,"    private void load() throws SQLException {
        Connection conn = null;
        Statement stmt = null;
        try {
            conn = FidoDataSource.getConnection();
            conn.setAutoCommit(false);
            stmt = conn.createStatement();
            ClearData.clearTables(stmt);
            stmt.executeUpdate(""insert into Objects (ObjectId, Description) values (100, 'Living Thing')"");
            stmt.executeUpdate(""insert into Objects (ObjectId, Description) values (200, 'Inanimate Object')"");
            stmt.executeUpdate(""insert into Objects (ObjectId, Description) values (300, 'Dog')"");
            stmt.executeUpdate(""insert into Objects (ObjectId, Description) values (400, 'Sheltie')"");
            stmt.executeUpdate(""insert into Objects (ObjectId, Description) values (500, 'Eskimo')"");
            stmt.executeUpdate(""insert into Objects (ObjectId, Description) values (600, 'Person')"");
            stmt.executeUpdate(""insert into Objects (ObjectId, Description) values (700, 'Collar')"");
            stmt.executeUpdate(""insert into Objects (ObjectId, Description) values (800, 'Ball')"");
            stmt.executeUpdate(""insert into Objects (ObjectId, Description) values (401, 'Fido')"");
            stmt.executeUpdate(""insert into Objects (ObjectId, Description) values (501, 'Samantha')"");
            stmt.executeUpdate(""insert into Objects (ObjectId, Description) values (801, 'A collar')"");
            stmt.executeQuery(""select setval('objects_objectid_seq', 1000)"");
            stmt.executeUpdate(""insert into ClassLinkTypes (LinkName, LinkType) values ('hasa', 2)"");
            stmt.executeUpdate(""insert into ClassLinkTypes (LinkName, LinkType) values ('partof', 2)"");
            stmt.executeUpdate(""insert into ObjectLinks (ObjectId, LinkName, LinkToObject) values (100, 'isa', 1)"");
            stmt.executeUpdate(""insert into ObjectLinks (ObjectId, LinkName, LinkToObject) values (200, 'isa', 1)"");
            stmt.executeUpdate(""insert into ObjectLinks (ObjectId, LinkName, LinkToObject) values (300, 'isa', 100)"");
            stmt.executeUpdate(""insert into ObjectLinks (ObjectId, LinkName, LinkToObject) values (400, 'isa', 300)"");
            stmt.executeUpdate(""insert into ObjectLinks (ObjectId, LinkName, LinkToObject) values (500, 'isa', 300)"");
            stmt.executeUpdate(""insert into ObjectLinks (ObjectId, LinkName, LinkToObject) values (600, 'isa', 100)"");
            stmt.executeUpdate(""insert into ObjectLinks (ObjectId, LinkName, LinkToObject) values (700, 'isa', 200)"");
            stmt.executeUpdate(""insert into ObjectLinks (ObjectId, LinkName, LinkToObject) values (800, 'isa', 200)"");
            stmt.executeUpdate(""insert into ObjectLinks (ObjectId, LinkName, LinkToObject) values (401, 'instance', 400)"");
            stmt.executeUpdate(""insert into ObjectLinks (ObjectId, LinkName, LinkToObject) values (501, 'instance', 500)"");
            stmt.executeUpdate(""insert into ObjectLinks (ObjectId, LinkName, LinkToObject) values (801, 'instance', 800)"");
            stmt.executeUpdate(""insert into ObjectLinks (ObjectId, LinkName, LinkToObject) values (401, 'hasa', 801)"");
            stmt.executeUpdate(""insert into AttributeCategories (CategoryName) values ('color')"");
            stmt.executeUpdate(""insert into AttributeCategories (CategoryName) values ('weight')"");
            stmt.executeUpdate(""insert into AttributeCategories (CategoryName) values ('length')"");
            stmt.executeUpdate(""insert into Attributes (AttributeName, Category) values ('green', 'color')"");
            stmt.executeUpdate(""insert into Attributes (AttributeName, Category) values ('blue', 'color')"");
            stmt.executeUpdate(""insert into Attributes (AttributeName, Category) values ('light', 'weight')"");
            stmt.executeUpdate(""insert into Attributes (AttributeName, Category) values ('heavy', 'weight')"");
            stmt.executeUpdate(""insert into Attributes (AttributeName, Category) values ('short', 'length')"");
            stmt.executeUpdate(""insert into Attributes (AttributeName, Category) values ('long', 'length')"");
            stmt.executeUpdate(""insert into ObjectAttributes (ObjectId, AttributeName) values (401, 'light')"");
            stmt.executeUpdate(""insert into ObjectAttributes (ObjectId, AttributeName) values (401, 'short')"");
            stmt.executeUpdate(""insert into ObjectAttributes (ObjectId, AttributeName) values (801, 'blue')"");
            stmt.executeUpdate(""insert into Dictionary (Word, SenseNumber, GrammarString, ObjectId) values ('LEFT-WALL', '1', 'AV+ | NP+', 1)"");
            stmt.executeUpdate(""insert into Dictionary (Word, SenseNumber, GrammarString, ObjectId) values ('the', '1', 'D+', 1)"");
            stmt.executeUpdate(""insert into Dictionary (Word, SenseNumber, GrammarString, ObjectId) values ('big', '1', 'ADJ+', 400)"");
            stmt.executeUpdate(""insert into Dictionary (Word, SenseNumber, GrammarString, ObjectId) values ('dog', '1', '[@ADJ-] & [D-] & (S+ | DO- | PO- | NP-)', 700)"");
            stmt.executeUpdate(""insert into Dictionary (Word, SenseNumber, GrammarString, ObjectId) values ('run', '1', '[S-] & AV- & [PREP+]', 800)"");
            stmt.executeUpdate(""insert into Dictionary (Word, SenseNumber, GrammarString, ObjectId) values ('across', '1', 'PREP- & PO+', 800)"");
            stmt.executeUpdate(""insert into Dictionary (Word, SenseNumber, GrammarString, ObjectId) values ('street', '1', '[@ADJ-] & [D-] & (S+ | DO- | PO- | NP-)', 800)"");
            stmt.executeUpdate(""insert into AdjectivePrepositions (PrepositionName, ObjectId, LinkName) values ('with', 100, 'hasa')"");
            stmt.executeUpdate(""insert into AdjectivePrepositions (PrepositionName, ObjectId, LinkName) values ('in', 200, 'partof')"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'superlative', 1, 'good', 'best', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'superlative', 2, '*y', '*iest', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'superlative', 3, '*e', '*est', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'superlative', 4, '*', '*est', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'comparative', 1, 'good', 'better', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'comparative', 2, '*y', '*ier', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'comparative', 3, '*e', '*er', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'comparative', 4, '*', '*er', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'possessive', 1, '*s', '*s\\'', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'possessive', 2, '*', '*\\'s', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'present perfect', 1, 'be', 'being', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'present perfect', 2, '*Vy', '*Vying', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'present perfect', 3, '*c', '*cking', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'present perfect', 4, '*VVC', '*VVCing', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'present perfect', 5, '*VC', '*VCCing', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'present perfect', 6, '*ie', '*ying', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'present perfect', 7, '*e', '*ing', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'present perfect', 8, '*', '*ing', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past', 1, 'sing', 'sang', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past', 2, 'give', 'gave', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past', 3, 'swim', 'swam', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past', 4, 'have', 'had', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past', 5, 'run', 'ran', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past', 6, 'do', 'did', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past', 7, 'be', 'was', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past', 8, 'throw', 'threw', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past', 9, 'sleep', 'slept', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past', 10, '*c', '*cked', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past', 11, '*VVC', '*VVCed', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past', 12, '*VC', '*VCCed', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past', 13, '*y', '*ied', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past', 14, '*oe', '*oed', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past', 15, '*e', '*ed', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past', 16, '*', '*ed', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past perfect', 1, 'sing', 'sung', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past perfect', 2, 'give', 'given', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past perfect', 3, 'swim', 'swum', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past perfect', 4, 'have', 'had', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past perfect', 5, 'do', 'done', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past perfect', 6, 'be', 'been', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past perfect', 7, 'sleep', 'slept', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past perfect', 8, '*e', '*ed', FALSE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past perfect', 9, '*', '*ed', FALSE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'first singular', 1, 'be', 'am', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'first singular', 2, 'have', 'have', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'first singular', 3, '*', '*', FALSE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'second singular', 1, 'be', 'are', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'second singular', 2, 'have', 'have', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'second singular', 3, '*', '*', FALSE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'third singular', 1, 'be', 'is', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'third singular', 2, 'have', 'has', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'third singular', 3, 'do', 'do', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'third singular', 4, '*ch', '*ches', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'third singular', 5, '*sh', '*shes', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'third singular', 6, '*x', '*xes', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'third singular', 7, '*z', '*zes', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'third singular', 8, '*Cy', '*Cies', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'third singular', 9, '*s', '*ses', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'third singular', 10, '*o', '*oes', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'third singular', 11, '*', '*s', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'first plural', 1, 'be', 'are', FALSE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'first plural', 2, 'have', 'have', FALSE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'first plural', 3, '*', '*', FALSE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'third plural', 1, 'be', 'are', FALSE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'third plural', 2, 'have', 'have', FALSE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'third plural', 3, '*', '*', FALSE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'plural', 1, 'leaf', 'leaves', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'plural', 2, 'knife', 'knives', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'plural', 3, 'elf', 'elves', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'plural', 4, 'half', 'halves', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'plural', 5, 'loaf', 'loaves', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'plural', 6, 'shelf', 'shelves', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'plural', 7, 'wife', 'wives', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'plural', 8, 'person', 'people', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'plural', 9, 'deer', 'deer', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'plural', 10, 'child', 'children', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'plural', 11, '*Co', '*Coes', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'plural', 12, '*s', '*ses', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'plural', 13, '*ch', '*ches', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'plural', 14, '*sh', '*shes', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'plural', 15, '*x', '*xes', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'plural', 16, '*z', '*zes', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'plural', 17, '*Cy', '*Cies', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'plural', 18, '*', '*s', TRUE)"");
            stmt.executeUpdate(""insert into WordClassifications (Rank, Pattern, GrammarString, ObjectId, Description) values (1, '$N[.N]', 'D+', 100, 'money')"");
            stmt.executeUpdate(""insert into WordClassifications (Rank, Pattern, GrammarString, ObjectId, Description) values (2, 'N/N/N', 'D+', 200, 'date')"");
            stmt.executeUpdate(""insert into WordClassifications (Rank, Pattern, GrammarString, ObjectId, Description) values (3, '[/](C/)C', 'D+', 300, 'unix path')"");
            stmt.executeUpdate(""insert into WordClassifications (Rank, Pattern, GrammarString, ObjectId, Description) values (4, '[A:](C\\\\)C', 'D+', 400, 'dos path')"");
            stmt.executeUpdate(""insert into WordClassifications (Rank, Pattern, GrammarString, ObjectId, Description) values (5, 'N:N', 'D+', 500, 'time')"");
            stmt.executeUpdate(""insert into WordClassifications (Rank, Pattern, GrammarString, ObjectId, Description) values (6, 'N.N.N.N', 'D+', 600, 'internet')"");
            stmt.executeUpdate(""insert into WordClassifications (Rank, Pattern, GrammarString, ObjectId, Description) values (7, 'E(.E)', 'D+', 700, 'hostname')"");
            stmt.executeUpdate(""insert into WordClassifications (Rank, Pattern, GrammarString, ObjectId, Description) values (8, '{+-}N[.N]', 'D+', 800, 'number')"");
            stmt.executeUpdate(""insert into Pronouns (Pronoun, Person, Gender, Plural) values ('i', 1, 3, FALSE)"");
            stmt.executeUpdate(""insert into Pronouns (Pronoun, Person, Gender, Plural) values ('we', 1, 3, TRUE)"");
            stmt.executeUpdate(""insert into Pronouns (Pronoun, Person, Gender, Plural) values ('they', 3, 3, TRUE)"");
            stmt.executeUpdate(""insert into Pronouns (Pronoun, Person, Gender, Plural) values ('he', 3, 1, FALSE)"");
            stmt.executeUpdate(""insert into Pronouns (Pronoun, Person, Gender, Plural) values ('she', 3, 2, FALSE)"");
            stmt.executeUpdate(""insert into Pronouns (Pronoun, Person, Gender, Plural) values ('it', 3, 3, FALSE)"");
            stmt.executeUpdate(""insert into Pronouns (Pronoun, Person, Gender, Plural) values ('you', 2, 3, FALSE)"");
            stmt.executeUpdate(""insert into FrameSlots (SlotName) values ('actor')"");
            stmt.executeUpdate(""insert into FrameSlots (SlotName) values ('origin')"");
            stmt.executeUpdate(""insert into FrameSlots (SlotName) values ('destination')"");
            stmt.executeUpdate(""insert into FrameSlots (SlotName) values ('object')"");
            stmt.executeUpdate(""insert into FrameSlots (SlotName) values ('instrument')"");
            stmt.executeUpdate(""insert into FrameSlots (SlotName) values ('beneficiary')"");
            stmt.executeUpdate(""insert into FrameSlots (SlotName) values ('location')"");
            stmt.executeUpdate(""insert into Verbs (VerbName, SubjectSlot, IndirectObjectSlot, PredicateNounSlot) values ('throw', 'actor', 'destination', 'object')"");
            stmt.executeUpdate(""insert into Verbs (VerbName, SubjectSlot, IndirectObjectSlot, PredicateNounSlot) values ('melt', 'actor', '', '')"");
            stmt.executeUpdate(""insert into Verbs (VerbName, SubjectSlot, IndirectObjectSlot, PredicateNounSlot) values ('kill', 'actor', '', 'object')"");
            stmt.executeUpdate(""insert into AdverbPrepositions (PrepositionName, ObjectId, FrameSlot) values ('with', 200, 'instrument')"");
            stmt.executeUpdate(""insert into AdverbPrepositions (PrepositionName, ObjectId, FrameSlot) values ('at', 1, 'location')"");
            stmt.executeUpdate(""insert into Articles (ArticleName, Dereference) values ('the', 1)"");
            stmt.executeUpdate(""insert into Articles (ArticleName, Dereference) values ('a', 2)"");
            stmt.executeUpdate(""insert into Articles (ArticleName, Dereference) values ('an', 2)"");
            stmt.executeUpdate(""insert into GrammarLinks (LinkName, LinkType) values ('S', 1)"");
            stmt.executeUpdate(""insert into GrammarLinks (LinkName, LinkType) values ('PN', 2)"");
            stmt.executeUpdate(""insert into GrammarLinks (LinkName, LinkType) values ('DO', 3)"");
            stmt.executeUpdate(""insert into GrammarLinks (LinkName, LinkType) values ('IO', 4)"");
            stmt.executeUpdate(""insert into GrammarLinks (LinkName, LinkType) values ('PO', 5)"");
            stmt.executeUpdate(""insert into GrammarLinks (LinkName, LinkType) values ('NP', 6)"");
            stmt.executeUpdate(""insert into GrammarLinks (LinkName, LinkType) values ('AV', 7)"");
            stmt.executeUpdate(""insert into GrammarLinks (LinkName, LinkType) values ('LV', 8)"");
            stmt.executeUpdate(""insert into GrammarLinks (LinkName, LinkType) values ('PREP', 9)"");
            stmt.executeUpdate(""insert into GrammarLinks (LinkName, LinkType) values ('D', 10)"");
            stmt.executeUpdate(""insert into GrammarLinks (LinkName, LinkType) values ('ADJ', 11)"");
            stmt.executeUpdate(""insert into GrammarLinks (LinkName, LinkType) values ('ADV', 12)"");
            stmt.executeUpdate(""insert into GrammarLinks (LinkName, LinkType) values ('CONJ', 13)"");
            stmt.executeUpdate(""insert into GrammarLinks (LinkName, LinkType) values ('INTJ', 14)"");
            stmt.executeUpdate(""insert into GrammarLinks (LinkName, LinkType) values ('PA', 15)"");
            stmt.executeUpdate(""insert into GrammarLinks (LinkName, LinkType) values ('HV', 16)"");
            stmt.executeQuery(""select setval('instructions_instructionid_seq', 1)"");
            int next = 2;
            stmt.executeUpdate(""insert into Instructions (Type, ExecuteString, FrameSlot, Operator, LinkName, ObjectId, AttributeName) "" + ""values (3, 'throw', null, 0, null, null, null)"");
            stmt.executeUpdate(""insert into Instructions (Type, ExecuteString, FrameSlot, Operator, LinkName, ObjectId, AttributeName) "" + ""values (3, 'test', null, 0, null, null, null)"");
            stmt.executeUpdate(""insert into Instructions (Type, ExecuteString, FrameSlot, Operator, LinkName, ObjectId, AttributeName) "" + ""values (2, null, 'actor', 1, 'hasa', '300', '')"");
            stmt.executeUpdate(""insert into Instructions (Type, ExecuteString, FrameSlot, Operator, LinkName, ObjectId, AttributeName) "" + ""values (2, null, 'instrument', 3, null, null, 'blue')"");
            stmt.executeUpdate(""insert into Instructions (Type, ExecuteString, FrameSlot, Operator, LinkName, ObjectId, AttributeName) "" + ""values (1, null, null, 0, null, null, null)"");
            stmt.executeUpdate(""insert into Instructions (Type, ExecuteString, FrameSlot, Operator, LinkName, ObjectId, AttributeName) "" + ""values (3, 'get', null, 0, null, null, null)"");
            stmt.executeUpdate(""insert into Instructions (Type, ExecuteString, FrameSlot, Operator, LinkName, ObjectId, AttributeName) "" + ""values (3, 'drop', null, 0, null, null, null)"");
            stmt.executeUpdate(""insert into InstructionGroups (InstructionId, Rank, GroupInstruction) values ("" + (next + 2) + "", 1, "" + (next + 0) + "")"");
            stmt.executeUpdate(""insert into InstructionGroups (InstructionId, Rank, GroupInstruction) values ("" + (next + 2) + "", 2, "" + (next + 1) + "")"");
            stmt.executeUpdate(""insert into InstructionGroups (InstructionId, Rank, GroupInstruction) values ("" + (next + 3) + "", 1, "" + (next + 1) + "")"");
            stmt.executeUpdate(""insert into InstructionGroups (InstructionId, Rank, GroupInstruction) values ("" + (next + 3) + "", 2, "" + (next + 0) + "")"");
            stmt.executeUpdate(""insert into InstructionGroups (InstructionId, Rank, GroupInstruction) values ("" + (next + 4) + "", 1, "" + (next + 2) + "")"");
            stmt.executeUpdate(""insert into InstructionGroups (InstructionId, Rank, GroupInstruction) values ("" + (next + 4) + "", 2, "" + (next + 3) + "")"");
            stmt.executeQuery(""select setval('transactions_transactionid_seq', 1)"");
            stmt.executeUpdate(""insert into Transactions (InstructionId, Description) values ("" + (next + 4) + "", 'throw something')"");
            stmt.executeUpdate(""insert into Transactions (InstructionId, Description) values ("" + (next + 5) + "", 'get something')"");
            stmt.executeUpdate(""insert into Transactions (InstructionId, Description) values ("" + (next + 6) + "", 'drop something')"");
            stmt.executeUpdate(""insert into TransactionPreconditions (TransactionId, IfFrameSlot, Operator, LinkName, LinkFrameSlot, AttributeName, SatisfyTransactionId) "" + ""values (2, 'actor', 1, 'hasa', 'object', '', 3)"");
            stmt.executeUpdate(""insert into TransactionPreconditions (TransactionId, IfFrameSlot, Operator, LinkName, LinkFrameSlot, AttributeName, SatisfyTransactionId) "" + ""values (2, 'object', 4, '', '', 'heavy', 4)"");
            stmt.executeUpdate(""insert into TransactionSlots (TransactionId, FrameSlot, InstructionId) values (2, 'object', "" + (next + 6) + "")"");
            stmt.executeUpdate(""insert into TransactionSlots (TransactionId, FrameSlot, InstructionId) values (2, 'destination', "" + (next + 5) + "")"");
            stmt.executeQuery(""select setval('verbtransactions_verbid_seq', 1)"");
            stmt.executeUpdate(""insert into VerbTransactions (VerbString, MoodType, TransactionId) values ('throw', 2, 2)"");
            stmt.executeUpdate(""insert into VerbConstraints (VerbId, FrameSlot, ObjectId) values (2, 'object', 200)"");
            stmt.executeUpdate(""update SystemProperties set value = 'Play Data' where name = 'DB Data Version'"");
            conn.commit();
        } catch (SQLException e) {
            if (conn != null) conn.rollback();
            throw e;
        } finally {
            if (stmt != null) stmt.close();
            if (conn != null) conn.close();
        }
    }
 <SPLIT>     public String get(String url) {
        try {
            HttpGet get = new HttpGet(url);
            HttpResponse response = this.getHttpClient().execute(get);
            HttpEntity entity = response.getEntity();
            if (entity == null) {
                throw new RuntimeException(""response body was empty"");
            }
            return EntityUtils.toString(entity);
        } catch (RuntimeException ex) {
            throw ex;
        } catch (Exception ex) {
            throw new RuntimeException(ex);
        }
    }
",2154,,LABEL_0,LABEL_0,LABEL_0,-1,"load,conn,stmt",,0,0,0,,0,GA,2087,1.649999468,failed,[]
294,"    private static FrameworkFactory getFrameworkFactory() throws Exception {
        URL url = Main.class.getClassLoader().getResource(""META-INF/services/org.osgi.framework.launch.FrameworkFactory"");
        if (url != null) {
            BufferedReader br = new BufferedReader(new InputStreamReader(url.openStream()));
            try {
                for (String s = br.readLine(); s != null; s = br.readLine()) {
                    s = s.trim();
                    if ((s.length() > 0) && (s.charAt(0) != '#')) {
                        return (FrameworkFactory) Class.forName(s).newInstance();
                    }
                }
            } finally {
                if (br != null) br.close();
            }
        }
        throw new Exception(""Could not find framework factory."");
    }
 <SPLIT>     private static boolean copyFile(File in, File out) {
        boolean ok = true;
        InputStream is = null;
        OutputStream os = null;
        try {
            is = new FileInputStream(in);
            os = new FileOutputStream(out);
            byte[] buffer = new byte[0xFFFF];
            for (int len; (len = is.read(buffer)) != -1; ) os.write(buffer, 0, len);
        } catch (IOException e) {
            System.err.println(e);
            ok = false;
        } finally {
            if (is != null) {
                try {
                    is.close();
                } catch (IOException e) {
                    System.err.println(e);
                }
            }
            if (os != null) {
                try {
                    os.close();
                } catch (IOException e) {
                    System.err.println(e);
                }
            }
        }
        return ok;
    }
",155,"    private static FrameworkFactory getFramernelService() throws Exception {
        URL file = Main.class.getClassLoader().getResource(""META-INF/services/org.osgi.framework.launch.FrameworkFactory"");
        if (file != null) {
            BufferedReader br = new BufferedReader(new InputStreamReader(file.openStream()));
            try {
                for (String os = br.readLine(); os != null; os = br.readLine()) {
                    os = os.trim();
                    if ((os.length() > 0) && (os.charAt(0) != '#')) {
                        return (FrameworkFactory) Class.forName(os).newInstance();
                    }
                }
            } finally {
                if (br != null) br.close();
            }
        }
        throw new Exception(""Could not find framework factory."");
    }
",LABEL_0,LABEL_0,LABEL_1,1,"getFrameworkFactory,url,br,s","getFrameworkFactory:0.03283798694610596,url:0.04655885696411133,br:-0.04354923963546753,s:0.012897670269012451,",3,12,0,"url:file,getFrameworkFactory:getFramernelService,s:os,",0,Greedy,168,0.024276074,replace,[]
295,"    public static String toMd5(String str) {
        MessageDigest messageDigest = null;
        try {
            messageDigest = MessageDigest.getInstance(""MD5"");
            messageDigest.reset();
            messageDigest.update(str.getBytes(""UTF-8""));
        } catch (NoSuchAlgorithmException e) {
            System.out.println(""NoSuchAlgorithmException caught!"");
            System.exit(-1);
        } catch (UnsupportedEncodingException e) {
            e.printStackTrace();
        }
        byte[] byteArray = messageDigest.digest();
        StringBuffer md5StrBuff = new StringBuffer();
        for (int i = 0; i < byteArray.length; i++) {
            if (Integer.toHexString(0xFF & byteArray[i]).length() == 1) md5StrBuff.append(""0"").append(Integer.toHexString(0xFF & byteArray[i])); else md5StrBuff.append(Integer.toHexString(0xFF & byteArray[i]));
        }
        return md5StrBuff.toString();
    }
 <SPLIT>     public void load(URL url) throws IOException {
        ResourceLocator locator = null;
        try {
            locator = new RelativeResourceLocator(url);
        } catch (URISyntaxException use) {
            throw new IllegalArgumentException(""Bad URL: "" + use);
        }
        ResourceLocatorTool.addResourceLocator(ResourceLocatorTool.TYPE_TEXTURE, locator);
        InputStream stream = null;
        try {
            stream = url.openStream();
            if (stream == null) {
                throw new IOException(""Failed to load materials file '"" + url + ""'"");
            }
            logger.fine(""Loading materials from '"" + url + ""'..."");
            load(stream);
        } finally {
            if (stream != null) stream.close();
            ResourceLocatorTool.removeResourceLocator(ResourceLocatorTool.TYPE_TEXTURE, locator);
            locator = null;
        }
    }
",195,,LABEL_0,LABEL_0,LABEL_0,-1,"toMd5,str,messageDigest,byteArray,md5StrBuff,i",,3,13,0,,0,GA,3013,0.47399627,failed,[';byteArray = 0']
296,"    public void reset(int currentPilot) {
        try {
            PreparedStatement psta = jdbc.prepareStatement(""DELETE FROM component_prop "" + ""WHERE pilot_id = ? "");
            psta.setInt(1, currentPilot);
            psta.executeUpdate();
            jdbc.commit();
        } catch (SQLException e) {
            jdbc.rollback();
            log.debug(e);
        }
    }
 <SPLIT>     private String getHash(String string) {
        Monitor hashTime = JamonMonitorLogger.getTimeMonitor(Cache.class, ""HashTime"").start();
        MessageDigest md5 = null;
        try {
            md5 = MessageDigest.getInstance(""MD5"");
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        }
        md5.reset();
        md5.update(string.getBytes());
        byte[] result = md5.digest();
        StringBuffer hexString = new StringBuffer();
        for (int i = 0; i < result.length; i++) {
            hexString.append(Integer.toHexString(0xFF & result[i]));
        }
        String str = hexString.toString();
        hashTime.stop();
        return str;
    }
",70,,LABEL_0,LABEL_0,LABEL_0,-1,"reset,currentPilot,psta",,3,6,0,,0,GA,1257,0.180554465,failed,"[';reset = 0', ';print(reset)', ';psta = 0']"
297,"    public void modifyApplicationMessage(String locale, String messageName, String messageValue) {
        Properties properties = new Properties();
        try {
            String i18nPath = ServerUtil.removelastResourceURL(ConfigurationServiceImpl.class.getResource(""/es/ua/tranube/prototype/main/client/TranubeConstants_en.properties"").getPath()).toString();
            File englishFile = new File(i18nPath + ""TranubeConstants_en.properties"");
            if (!englishFile.exists()) throw new Exception(""English file not found"");
            String propertiesFilePath = i18nPath + ""TranubeConstants_"" + locale + "".properties"";
            File file = new File(propertiesFilePath);
            if (!file.exists()) {
                FileReader in = new FileReader(englishFile);
                FileWriter out = new FileWriter(file);
                int c;
                while ((c = in.read()) != -1) out.write(c);
                in.close();
                out.close();
            }
            InputStream is = ConfigurationServiceImpl.class.getResourceAsStream(""/es/ua/tranube/prototype/main/client/TranubeConstants_"" + locale + "".properties"");
            BufferedReader breader = new BufferedReader(new InputStreamReader(is));
            String line = null;
            StringBuilder strBuilder = new StringBuilder();
            boolean found = false;
            while ((line = breader.readLine()) != null) {
                if (line.startsWith(""#"")) strBuilder.append(line).append(""\n""); else {
                    String[] pieces = line.split(""="");
                    if (pieces.length == 2) {
                        if (pieces[0].trim().equals(messageName)) {
                            strBuilder.append(pieces[0].trim() + "" = "" + messageValue + ""\n"");
                            found = true;
                        } else strBuilder.append(line).append(""\n"");
                    } else strBuilder.append(line).append(""\n"");
                }
            }
            if (!found) strBuilder.append(messageName).append("" = "").append(messageValue).append(""\n"");
            breader.close();
            is.close();
            FileWriter writer = new FileWriter(file);
            writer.write(strBuilder.toString());
            writer.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
 <SPLIT>     public static String SHA(String source) {
        logger.info(source);
        String result = null;
        try {
            MessageDigest digest = MessageDigest.getInstance(""SHA"");
            digest.update(source.getBytes());
            byte[] bytes = digest.digest();
            result = EncodeUtils.hexEncode(bytes);
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        }
        logger.info(result);
        return result;
    }
",452,,LABEL_0,LABEL_1,,-4,"modifyApplicationMessage,locale,messageName,messageValue,properties,i18nPath,englishFile,propertiesFilePath,file,in,out,c,is,breader,line,strBuilder,pieces,found",,,,0,,0,Greedy,1,0.000550274,,[]
298,"    public static void compressWithZip(Vector fileList, String zipFileName) throws IOException {
        if (fileList == null || fileList.size() == 0) return;
        FileOutputStream fos = new FileOutputStream(zipFileName);
        ZipOutputStream zos = new ZipOutputStream(fos);
        Iterator iter = fileList.iterator();
        while (iter.hasNext()) {
            String fileName = (String) iter.next();
            int ind = Math.max(fileName.lastIndexOf('/'), fileName.lastIndexOf('\\'));
            String shortName = ""unknown"";
            if (ind < fileName.length() - 1) shortName = fileName.substring(ind + 1);
            zos.putNextEntry(new ZipEntry(shortName));
            FileInputStream fis = new FileInputStream(fileName);
            byte[] buf = new byte[10000];
            int bytesRead;
            while ((bytesRead = fis.read(buf)) > 0) zos.write(buf, 0, bytesRead);
            fis.close();
            zos.closeEntry();
        }
        zos.close();
    }
 <SPLIT>     public static boolean decodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }
",211,,LABEL_1,LABEL_1,LABEL_1,-1,"compressWithZip,fileList,zipFileName,fos,zos,iter,fileName,ind,shortName,fis,buf,bytesRead",,10,31,0,,0,GA,5422,0.865801724,failed,"[';compressWithZip = 0', ';print(compressWithZip)', ';fileList = 0', ';zipFileName = 0', ';zos = 0', ';print(compressWithJar)', ';compressedWithJar = 0', ';compresswithSax = 0', ';filenamename = 0', '; fileFull = 0', ';filenameName = 0', ';fName = 0']"
299,"    public String[][] getProjectTreeData() {
        String[][] treeData = null;
        String filename = dms_home + FS + ""temp"" + FS + username + ""adminprojects.xml"";
        String urlString = dms_url + ""/servlet/com.ufnasoft.dms.server.ServerGetAdminProjects"";
        try {
            String urldata = urlString + ""?username="" + URLEncoder.encode(username, ""UTF-8"") + ""&key="" + URLEncoder.encode(key, ""UTF-8"") + ""&filename="" + URLEncoder.encode(username, ""UTF-8"") + ""adminprojects.xml"";
            DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
            factory.setValidating(false);
            DocumentBuilder parser = factory.newDocumentBuilder();
            URL u = new URL(urldata);
            DataInputStream is = new DataInputStream(u.openStream());
            FileOutputStream os = new FileOutputStream(filename);
            int iBufSize = is.available();
            byte inBuf[] = new byte[20000 * 1024];
            int iNumRead;
            while ((iNumRead = is.read(inBuf, 0, iBufSize)) > 0) os.write(inBuf, 0, iNumRead);
            os.close();
            is.close();
            File f = new File(filename);
            InputStream inputstream = new FileInputStream(f);
            Document document = parser.parse(inputstream);
            NodeList nodelist = document.getElementsByTagName(""proj"");
            int num = nodelist.getLength();
            treeData = new String[num][3];
            for (int i = 0; i < num; i++) {
                treeData[i][0] = new String(DOMUtil.getSimpleElementText((Element) nodelist.item(i), ""pid""));
                treeData[i][1] = new String(DOMUtil.getSimpleElementText((Element) nodelist.item(i), ""ppid""));
                treeData[i][2] = new String(DOMUtil.getSimpleElementText((Element) nodelist.item(i), ""p""));
            }
        } catch (MalformedURLException ex) {
            System.out.println(ex);
        } catch (ParserConfigurationException ex) {
            System.out.println(ex);
        } catch (NullPointerException e) {
        } catch (Exception ex) {
            System.out.println(ex);
        }
        return treeData;
    }
 <SPLIT>     public static void copyFileByNIO(File in, File out) throws IOException {
        FileChannel sourceChannel = new FileInputStream(in).getChannel();
        FileChannel destinationChannel = new FileOutputStream(out).getChannel();
        sourceChannel.transferTo(0, sourceChannel.size(), destinationChannel);
        sourceChannel.close();
        destinationChannel.close();
    }
",456,"    public String[][] getProjectDocumentMeta() {
        String[][] storyDat = null;
        String url = dms_home + FS + ""temp"" + FS + username + ""adminprojects.xml"";
        String addressstring = dms_url + ""/servlet/com.ufnasoft.dms.server.ServerGetAdminProjects"";
        try {
            String URlfat = addressstring + ""?username="" + URLEncoder.encode(username, ""UTF-8"") + ""&key="" + URLEncoder.encode(key, ""UTF-8"") + ""&filename="" + URLEncoder.encode(username, ""UTF-8"") + ""adminprojects.xml"";
            DocumentBuilderFactory cault = DocumentBuilderFactory.newInstance();
            cault.setValidating(false);
            DocumentBuilder http = cault.newDocumentBuilder();
            URL url = new URL(URlfat);
            DataInputStream in = new DataInputStream(url.openStream());
            FileOutputStream opens = new FileOutputStream(url);
            int iBbufLen = in.available();
            byte inBuf[] = new byte[20000 * 1024];
            int qiValBuild;
            while ((qiValBuild = in.read(inBuf, 0, iBbufLen)) > 0) opens.write(inBuf, 0, qiValBuild);
            opens.close();
            in.close();
            File p = new File(url);
            InputStream inputstream = new FileInputStream(p);
            Document file = http.parse(inputstream);
            NodeList  nodesename = file.getElementsByTagName(""proj"");
            int temp =  nodesename.getLength();
            storyDat = new String[temp][3];
            for (int index = 0; index < temp; index++) {
                storyDat[index][0] = new String(DOMUtil.getSimpleElementText((Element)  nodesename.item(index), ""pid""));
                storyDat[index][1] = new String(DOMUtil.getSimpleElementText((Element)  nodesename.item(index), ""ppid""));
                storyDat[index][2] = new String(DOMUtil.getSimpleElementText((Element)  nodesename.item(index), ""p""));
            }
        } catch (MalformedURLException ex) {
            System.out.println(ex);
        } catch (ParserConfigurationException ex) {
            System.out.println(ex);
        } catch (NullPointerException e) {
        } catch (Exception ex) {
            System.out.println(ex);
        }
        return storyDat;
    }
",LABEL_1,LABEL_1,LABEL_0,1,"getProjectTreeData,treeData,filename,urlString,urldata,factory,parser,u,is,os,iBufSize,inBuf,iNumRead,f,inputstream,document,nodelist,num,i","getProjectTreeData:0.0014023184776306152,treeData:-0.003165721893310547,filename:-0.004260063171386719,urlString:0.0012041926383972168,urldata:-0.0027379393577575684,factory:-0.0018110275268554688,parser:-0.0045645833015441895,u:-0.0060193538665771484,is:-0.0002887248992919922,os:-0.0009921789169311523,iBufSize:-0.005351841449737549,inBuf:-0.0060367584228515625,iNumRead:-0.0032483935356140137,f:-0.001376509666442871,inputstream:-0.003493189811706543,document:-0.0015780329704284668,nodelist:-0.0025318264961242676,num:-0.00011157989501953125,i:-0.002180337905883789,",17,54,0,"getProjectTreeData:getProjectDocumentMeta,urlString:addressstring,num:temp,is:in,os:opens,f:p,document:file,factory:cault,i:index,nodelist: nodesename,urldata:URlfat,treeData:storyDat,iNumRead:qiValBuild,inputstream:inputstream,filename:url,parser:http,iBufSize:iBbufLen,u:url,",0,Greedy,813,0.142604383,replace,[]
300,"    private void simulate() throws Exception {
        BufferedWriter out = null;
        out = new BufferedWriter(new FileWriter(outFile));
        out.write(""#Thread\tReputation\tAction\n"");
        out.flush();
        System.out.println(""Simulate..."");
        File file = new File(trsDemoSimulationfile);
        ObtainUserReputation obtainUserReputationRequest = new ObtainUserReputation();
        ObtainUserReputationResponse obtainUserReputationResponse;
        RateUser rateUserRequest;
        RateUserResponse rateUserResponse;
        FileInputStream fis = new FileInputStream(file);
        BufferedReader br = new BufferedReader(new InputStreamReader(fis));
        String call = br.readLine();
        while (call != null) {
            rateUserRequest = generateRateUserRequest(call);
            try {
                rateUserResponse = trsPort.rateUser(rateUserRequest);
                System.out.println(""----------------R A T I N G-------------------"");
                System.out.println(""VBE: "" + rateUserRequest.getVbeId());
                System.out.println(""VO: "" + rateUserRequest.getVoId());
                System.out.println(""USER: "" + rateUserRequest.getUserId());
                System.out.println(""SERVICE: "" + rateUserRequest.getServiceId());
                System.out.println(""ACTION: "" + rateUserRequest.getActionId());
                System.out.println(""OUTCOME: "" + rateUserResponse.isOutcome());
                System.out.println(""----------------------------------------------"");
                assertEquals(""The outcome field of the rateUser should be true: MESSAGE="" + rateUserResponse.getMessage(), true, rateUserResponse.isOutcome());
            } catch (RemoteException e) {
                fail(e.getMessage());
            }
            obtainUserReputationRequest.setIoi(null);
            obtainUserReputationRequest.setServiceId(null);
            obtainUserReputationRequest.setUserId(rateUserRequest.getUserId());
            obtainUserReputationRequest.setVbeId(rateUserRequest.getVbeId());
            obtainUserReputationRequest.setVoId(null);
            try {
                obtainUserReputationResponse = trsPort.obtainUserReputation(obtainUserReputationRequest);
                System.out.println(""-----------R E P U T A T I O N----------------"");
                System.out.println(""VBE: "" + obtainUserReputationRequest.getVbeId());
                System.out.println(""VO: "" + obtainUserReputationRequest.getVoId());
                System.out.println(""USER: "" + obtainUserReputationRequest.getUserId());
                System.out.println(""SERVICE: "" + obtainUserReputationRequest.getServiceId());
                System.out.println(""IOI: "" + obtainUserReputationRequest.getIoi());
                System.out.println(""REPUTATION: "" + obtainUserReputationResponse.getReputation());
                System.out.println(""----------------------------------------------"");
                assertEquals(""The outcome field of the obtainUserReputation should be true: MESSAGE="" + obtainUserReputationResponse.getMessage(), true, obtainUserReputationResponse.isOutcome());
                assertEquals(0.0, obtainUserReputationResponse.getReputation(), 1.0);
            } catch (RemoteException e) {
                fail(e.getMessage());
            }
            obtainUserReputationRequest.setIoi(null);
            obtainUserReputationRequest.setServiceId(null);
            obtainUserReputationRequest.setUserId(rateUserRequest.getUserId());
            obtainUserReputationRequest.setVbeId(rateUserRequest.getVbeId());
            obtainUserReputationRequest.setVoId(rateUserRequest.getVoId());
            try {
                obtainUserReputationResponse = trsPort.obtainUserReputation(obtainUserReputationRequest);
                System.out.println(""-----------R E P U T A T I O N----------------"");
                System.out.println(""VBE: "" + obtainUserReputationRequest.getVbeId());
                System.out.println(""VO: "" + obtainUserReputationRequest.getVoId());
                System.out.println(""USER: "" + obtainUserReputationRequest.getUserId());
                System.out.println(""SERVICE: "" + obtainUserReputationRequest.getServiceId());
                System.out.println(""IOI: "" + obtainUserReputationRequest.getIoi());
                System.out.println(""REPUTATION: "" + obtainUserReputationResponse.getReputation());
                System.out.println(""----------------------------------------------"");
                assertEquals(""The outcome field of the obtainUserReputation should be true: MESSAGE="" + obtainUserReputationResponse.getMessage(), true, obtainUserReputationResponse.isOutcome());
                assertEquals(0.0, obtainUserReputationResponse.getReputation(), 1.0);
            } catch (RemoteException e) {
                fail(e.getMessage());
            }
            call = br.readLine();
        }
        fis.close();
        br.close();
        out.flush();
        out.close();
    }
 <SPLIT>     private String GetResponse(URL url) {
        String content = null;
        try {
            HttpURLConnection conn = (HttpURLConnection) url.openConnection();
            conn.setDoOutput(false);
            conn.setRequestMethod(""GET"");
            if (conn.getResponseCode() == HttpURLConnection.HTTP_OK) {
                BufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream()));
                String line;
                while ((line = br.readLine()) != null) content += line;
            } else {
            }
        } catch (MalformedURLException e) {
            e.getStackTrace();
        } catch (IOException e) {
            e.getStackTrace();
        }
        return content;
    }
",797,,LABEL_0,LABEL_1,,-4,"simulate,out,file,obtainUserReputationRequest,obtainUserReputationResponse,rateUserRequest,rateUserResponse,fis,br,call",,,,0,,0,Greedy,1,0.001003969,,[]
301,"    private static void copyFile(File in, File out) {
        try {
            FileChannel sourceChannel = new FileInputStream(in).getChannel();
            FileChannel destinationChannel = new FileOutputStream(out).getChannel();
            sourceChannel.transferTo(0, sourceChannel.size(), destinationChannel);
            sourceChannel.close();
            destinationChannel.close();
        } catch (IOException ex) {
            ex.printStackTrace();
        }
    }
 <SPLIT>     protected boolean copyFile(File sourceFile, File destinationFile) {
        try {
            FileChannel srcChannel = new FileInputStream(sourceFile).getChannel();
            FileChannel dstChannel = new FileOutputStream(destinationFile).getChannel();
            dstChannel.transferFrom(srcChannel, 0, srcChannel.size());
            srcChannel.close();
            dstChannel.close();
        } catch (IOException e) {
            e.printStackTrace();
            return false;
        }
        return true;
    }
",83,"    private static void copyFiles(File url, File conn) {
        try {
            FileChannel targetChan = new FileInputStream(url).getChannel();
            FileChannel destructionChan = new FileOutputStream(conn).getChannel();
            targetChan.transferTo(0, targetChan.size(), destructionChan);
            targetChan.close();
            destructionChan.close();
        } catch (IOException ex) {
            ex.printStackTrace();
        }
    }
;copyFile = 0;url = 0;print(url);ins = 0;login = 0;print(login);print(id);print(io);print(c)",LABEL_1,LABEL_1,LABEL_1,1,"copyFile,in,out,sourceChannel,destinationChannel","copyFile:-0.003632843494415283,in:-0.013080418109893799,out:-0.019147872924804688,sourceChannel:0.0068991780281066895,destinationChannel:0.010837793350219727,",5,12,0,"destinationChannel:destructionChan,sourceChannel:targetChan,copyFile:copyFiles,in:url,out:conn,",0,Greedy,264,0.039082293,inesrt,"[';copyFile = 0', ';url = 0', ';print(url)', ';ins = 0', ';login = 0', ';print(login)', ';print(id)', ';print(io)', ';print(c)']"
302,"    private static void readAndRewrite(File inFile, File outFile) throws IOException {
        ImageInputStream iis = ImageIO.createImageInputStream(new BufferedInputStream(new FileInputStream(inFile)));
        DcmParser dcmParser = DcmParserFactory.getInstance().newDcmParser(iis);
        Dataset ds = DcmObjectFactory.getInstance().newDataset();
        dcmParser.setDcmHandler(ds.getDcmHandler());
        dcmParser.parseDcmFile(null, Tags.PixelData);
        PixelDataReader pdReader = pdFact.newReader(ds, iis, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());
        System.out.println(""reading "" + inFile + ""..."");
        pdReader.readPixelData(false);
        ImageOutputStream out = ImageIO.createImageOutputStream(new BufferedOutputStream(new FileOutputStream(outFile)));
        DcmEncodeParam dcmEncParam = DcmEncodeParam.IVR_LE;
        ds.writeDataset(out, dcmEncParam);
        ds.writeHeader(out, dcmEncParam, Tags.PixelData, dcmParser.getReadVR(), dcmParser.getReadLength());
        System.out.println(""writing "" + outFile + ""..."");
        PixelDataWriter pdWriter = pdFact.newWriter(pdReader.getPixelDataArray(), false, ds, out, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());
        pdWriter.writePixelData();
        out.flush();
        out.close();
        System.out.println(""done!"");
    }
 <SPLIT>     public BufferedWriter createOutputStream(String inFile, String outFile) throws IOException {
        int k_blockSize = 1024;
        int byteCount;
        char[] buf = new char[k_blockSize];
        File ofp = new File(outFile);
        ZipOutputStream zos = new ZipOutputStream(new FileOutputStream(ofp));
        zos.setMethod(ZipOutputStream.DEFLATED);
        OutputStreamWriter osw = new OutputStreamWriter(zos, ""ISO-8859-1"");
        BufferedWriter bw = new BufferedWriter(osw);
        ZipEntry zot = null;
        File ifp = new File(inFile);
        ZipInputStream zis = new ZipInputStream(new FileInputStream(ifp));
        InputStreamReader isr = new InputStreamReader(zis, ""ISO-8859-1"");
        BufferedReader br = new BufferedReader(isr);
        ZipEntry zit = null;
        while ((zit = zis.getNextEntry()) != null) {
            if (zit.getName().equals(""content.xml"")) {
                continue;
            }
            zot = new ZipEntry(zit.getName());
            zos.putNextEntry(zot);
            while ((byteCount = br.read(buf, 0, k_blockSize)) >= 0) bw.write(buf, 0, byteCount);
            bw.flush();
            zos.closeEntry();
        }
        zos.putNextEntry(new ZipEntry(""content.xml""));
        bw.flush();
        osw = new OutputStreamWriter(zos, ""UTF8"");
        bw = new BufferedWriter(osw);
        return bw;
    }
",272,,LABEL_1,LABEL_1,LABEL_1,-1,"readAndRewrite,inFile,outFile,iis,dcmParser,ds,pdReader,out,dcmEncParam,pdWriter",,0,0,0,,0,GA,4789,0.83254166,failed,[]
303,"    public void writeConfiguration(Writer out) throws IOException {
        if (myResource == null) {
            out.append(""# Unable to print configuration resource\n"");
        } else {
            URL url = myResource.getUrl();
            InputStream in = url.openStream();
            if (in != null) {
                try {
                    IOUtils.copy(in, out);
                } finally {
                    IOUtils.closeQuietly(in);
                }
            } else {
                out.append(""# Unable to print configuration resource\n"");
            }
        }
    }
 <SPLIT>     public static boolean decodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }
",92,,LABEL_1,LABEL_1,LABEL_1,-1,"writeConfiguration,out,url,in",,3,9,0,,0,GA,1392,0.2167232,failed,"[';url = 0', ';print(url)', ';conn = 0', ';sl = 0', ';Url = 0', ';print(Url)', ';ssl = 0', ';login = 0']"
304,"    public void uncaughtException(final Thread t, final Throwable e) {
        final Display display = Display.getCurrent();
        final Shell shell = new Shell(display);
        final MessageBox message = new MessageBox(shell, SWT.OK | SWT.CANCEL | SWT.ICON_ERROR);
        message.setText(""Hawkscope Error"");
        message.setMessage(e.getMessage() + ""\nSubmit Hawkscope Error Report to Issue Tracker?"");
        log.error(""Uncaught exception"", e);
        if (message.open() == SWT.OK) {
            IOUtils.copyToClipboard(Version.getBugReport(e));
            try {
                Program.launch(Constants.HAWKSCOPE_URL_ROOT + ""issues/entry?comment="" + URLEncoder.encode(""Please paste the Hawkscope Error "" + ""Report here. It's currently copied to your "" + ""clipboard. Thank you for your support!"", Constants.ENCODING));
            } catch (final Exception e1) {
                Program.launch(Constants.HAWKSCOPE_URL_ROOT + ""issues/entry"");
            }
        }
        shell.dispose();
    }
 <SPLIT>     private void unJarStart(String jarPath, String jarEntryStart) {
        String path;
        if (jarPath.lastIndexOf(""lib/"") >= 0) path = jarPath.substring(0, jarPath.lastIndexOf(""lib/"")); else path = jarPath.substring(0, jarPath.lastIndexOf(""/""));
        String relPath = jarEntryStart.substring(0, jarEntryStart.lastIndexOf(""/""));
        try {
            new File(path + ""/"" + relPath).mkdirs();
            JarFile jar = new JarFile(jarPath);
            Enumeration<JarEntry> entries = jar.entries();
            while (entries.hasMoreElements()) {
                JarEntry entry = entries.nextElement();
                String jarEntry = entry.getName();
                if (jarEntry.startsWith(jarEntryStart)) {
                    ZipEntry ze = jar.getEntry(jarEntry);
                    File bin = new File(path + ""/"" + jarEntry);
                    IOUtils.copy(jar.getInputStream(ze), new FileOutputStream(bin));
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
",182,,LABEL_1,LABEL_1,LABEL_1,-1,"uncaughtException,t,e,display,shell,message,e1",,7,16,0,,0,GA,3117,0.497873342,failed,"[';uncaughtException = 0', ';print(uncaughtException)', ';t = 0', ';e = 0', ';display = 0', ';shell = 0', ';print(shell)', ';message = 0']"
305,"    protected void truncate(final File file) {
        LogLog.debug(""Compression of file: "" + file.getAbsolutePath() + "" started."");
        if (FileUtils.isFileOlder(file, ManagementFactory.getRuntimeMXBean().getStartTime())) {
            final File backupRoot = new File(this.getBackupDir());
            if (!backupRoot.exists() && !backupRoot.mkdirs()) {
                throw new AppenderInitializationError(""Can't create backup dir for backup storage"");
            }
            SimpleDateFormat df;
            try {
                df = new SimpleDateFormat(this.getBackupDateFormat());
            } catch (final Exception e) {
                throw new AppenderInitializationError(""Invalid date formate for backup files: "" + this.getBackupDateFormat(), e);
            }
            final String date = df.format(new Date(file.lastModified()));
            final File zipFile = new File(backupRoot, file.getName() + ""."" + date + "".zip"");
            ZipOutputStream zos = null;
            FileInputStream fis = null;
            try {
                zos = new ZipOutputStream(new FileOutputStream(zipFile));
                final ZipEntry entry = new ZipEntry(file.getName());
                entry.setMethod(ZipEntry.DEFLATED);
                entry.setCrc(FileUtils.checksumCRC32(file));
                zos.putNextEntry(entry);
                fis = FileUtils.openInputStream(file);
                final byte[] buffer = new byte[1024];
                int readed;
                while ((readed = fis.read(buffer)) != -1) {
                    zos.write(buffer, 0, readed);
                }
            } catch (final Exception e) {
                throw new AppenderInitializationError(""Can't create zip file"", e);
            } finally {
                if (zos != null) {
                    try {
                        zos.close();
                    } catch (final IOException e) {
                        LogLog.warn(""Can't close zip file"", e);
                    }
                }
                if (fis != null) {
                    try {
                        fis.close();
                    } catch (final IOException e) {
                        LogLog.warn(""Can't close zipped file"", e);
                    }
                }
            }
            if (!file.delete()) {
                throw new AppenderInitializationError(""Can't delete old log file "" + file.getAbsolutePath());
            }
        }
    }
 <SPLIT>     @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException {
        InputStream is = null;
        InputStream page = null;
        OutputStream os = null;
        String rootUrl = null;
        try {
            boolean isMultipart = ServletFileUpload.isMultipartContent(request);
            if (!isMultipart) {
                request.setAttribute(""error"", ""Form isn't a multipart form"");
                RequestDispatcher rd = request.getRequestDispatcher(""/WEB-INF/error.jsp"");
                rd.forward(request, response);
            }
            ServletFileUpload upload = new ServletFileUpload();
            String webUrl = null;
            FileItemIterator iter = upload.getItemIterator(request);
            while (iter.hasNext()) {
                FileItemStream item = iter.next();
                String name = item.getFieldName();
                if (name.equals(""webpage"")) {
                    is = item.openStream();
                    ByteArrayOutputStream baos = new ByteArrayOutputStream();
                    IOUtils.copy(is, baos);
                    page = new ByteArrayInputStream(baos.toByteArray());
                } else if (name.equals(""weburl"")) {
                    InputStream wpIs = null;
                    try {
                        webUrl = Streams.asString(item.openStream());
                        URL u = new URL(webUrl);
                        wpIs = new BufferedInputStream(u.openStream());
                        ByteArrayOutputStream baos = new ByteArrayOutputStream();
                        IOUtils.copy(wpIs, baos);
                        page = new ByteArrayInputStream(baos.toByteArray());
                    } finally {
                        IOUtils.closeQuietly(wpIs);
                    }
                } else if (name.equals(""rooturl"")) {
                    rootUrl = Streams.asString(item.openStream());
                }
            }
            if (page == null) {
                request.setAttribute(""error"", ""Form doesn't have an html file"");
                RequestDispatcher rd = request.getRequestDispatcher(""/WEB-INF/error.jsp"");
                rd.forward(request, response);
            }
            ToMailerDelegate delegate = new ToMailerDelegate(page, rootUrl);
            os = new BufferedOutputStream(response.getOutputStream());
            os.write(delegate.getMailer());
            os.flush();
        } catch (Exception e) {
            streamException(request, response, e);
        } finally {
            IOUtils.closeQuietly(page);
            IOUtils.closeQuietly(is);
            IOUtils.closeQuietly(os);
        }
    }
",420,"    protected void truncate(final File file) {
        LogLog.debug(""Compression of file: "" + file.getAbsolutePath() + "" started."");
        if (FileUtils.isFileOlder(file, ManagementFactory.getRuntimeMXBean().getStartTime())) {
            final File BackbackFile = new File(this.getBackupDir());
            if (!BackbackFile.exists() && !BackbackFile.mkdirs()) {
                throw new AppenderInitializationError(""Can't create backup dir for backup storage"");
            }
            SimpleDateFormat df;
            try {
                df = new SimpleDateFormat(this.getBackupDateFormat());
            } catch (final Exception e) {
                throw new AppenderInitializationError(""Invalid date formate for backup files: "" + this.getBackupDateFormat(), e);
            }
            final String date = df.format(new Date(file.lastModified()));
            final File zipFile = new File(BackbackFile, file.getName() + ""."" + date + "".zip"");
            ZipOutputStream dos = null;
            FileInputStream fis = null;
            try {
                dos = new ZipOutputStream(new FileOutputStream(zipFile));
                final ZipEntry entry = new ZipEntry(file.getName());
                entry.setMethod(ZipEntry.DEFLATED);
                entry.setCrc(FileUtils.checksumCRC32(file));
                dos.putNextEntry(entry);
                fis = FileUtils.openInputStream(file);
                final byte[] buffer = new byte[1024];
                int readed;
                while ((readed = fis.read(buffer)) != -1) {
                    dos.write(buffer, 0, readed);
                }
            } catch (final Exception e) {
                throw new AppenderInitializationError(""Can't create zip file"", e);
            } finally {
                if (dos != null) {
                    try {
                        dos.close();
                    } catch (final IOException e) {
                        LogLog.warn(""Can't close zip file"", e);
                    }
                }
                if (fis != null) {
                    try {
                        fis.close();
                    } catch (final IOException e) {
                        LogLog.warn(""Can't close zipped file"", e);
                    }
                }
            }
            if (!file.delete()) {
                throw new AppenderInitializationError(""Can't delete old log file "" + file.getAbsolutePath());
            }
        }
    }
",LABEL_1,LABEL_1,LABEL_0,1,"truncate,file,backupRoot,df,date,zipFile,zos,fis,entry,buffer,readed","truncate:0.0031798481941223145,file:0.0030627846717834473,backupRoot:0.0036542415618896484,df:0.0005239248275756836,date:-0.0016280412673950195,zipFile:0.00317305326461792,zos:0.006999552249908447,fis:-6.717443466186523e-05,entry:-0.0006403923034667969,buffer:-0.002377927303314209,readed:0.0014126300811767578,",2,10,0,"zos:dos,backupRoot:BackbackFile,",0,Greedy,193,0.03313247,replace,[]
306,"    public static String getMD5(String s) {
        try {
            MessageDigest m = MessageDigest.getInstance(""MD5"");
            m.update(s.getBytes(), 0, s.length());
            return """" + new BigInteger(1, m.digest()).toString(16);
        } catch (NoSuchAlgorithmException e) {
            logger.error(""MD5 is not supported !!!"");
        }
        return s;
    }
 <SPLIT>     public static String generate(boolean secure, boolean sep) throws UnknownHostException {
        MessageDigest messagedigest;
        StringBuilder stringbuffer = new StringBuilder();
        try {
            messagedigest = MessageDigest.getInstance(""MD5"");
        } catch (NoSuchAlgorithmException nosuchalgorithmexception) {
            throw new RuntimeException(nosuchalgorithmexception);
        }
        StringBuffer stringbuffer2;
        InetAddress inetaddress = InetAddress.getLocalHost();
        long l = System.currentTimeMillis();
        long l1 = 0L;
        if (secure) l1 = _secureRand.nextLong(); else l1 = _rand.nextLong();
        stringbuffer.append(inetaddress.toString());
        stringbuffer.append("":"");
        stringbuffer.append(Long.toString(l));
        stringbuffer.append("":"");
        stringbuffer.append(Long.toString(l1));
        messagedigest.update(stringbuffer.toString().getBytes());
        byte abyte0[] = messagedigest.digest();
        StringBuffer stringbuffer1 = new StringBuffer();
        for (int i = 0; i < abyte0.length; i++) {
            int j = abyte0[i] & 0xff;
            if (j < 16) stringbuffer1.append('0');
            stringbuffer1.append(Integer.toHexString(j));
        }
        String s = stringbuffer1.toString();
        stringbuffer2 = new StringBuffer();
        if (sep) {
            stringbuffer2.append(s.substring(0, 8));
            stringbuffer2.append(""-"");
            stringbuffer2.append(s.substring(8, 12));
            stringbuffer2.append(""-"");
            stringbuffer2.append(s.substring(12, 16));
            stringbuffer2.append(""-"");
            stringbuffer2.append(s.substring(16, 20));
            stringbuffer2.append(""-"");
            stringbuffer2.append(s.substring(20));
            return stringbuffer2.toString();
        } else {
            return s;
        }
    }
",85,,LABEL_1,LABEL_1,LABEL_1,-1,"getMD5,s,m",,3,8,0,,0,GA,1439,0.238194418,failed,[';s = 0']
307,"    int doOne(int bid, int tid, int aid, int delta) {
        int aBalance = 0;
        if (Conn == null) {
            bench.incrementFailedTransactionCount();
            return 0;
        }
        try {
            if (Benchmark.prepared_stmt) {
                pstmt1.setInt(1, delta);
                pstmt1.setInt(2, aid);
                pstmt1.executeUpdate();
                pstmt1.clearWarnings();
                pstmt2.setInt(1, aid);
                ResultSet RS = pstmt2.executeQuery();
                pstmt2.clearWarnings();
                while (RS.next()) {
                    aBalance = RS.getInt(1);
                }
                pstmt3.setInt(1, delta);
                pstmt3.setInt(2, tid);
                pstmt3.executeUpdate();
                pstmt3.clearWarnings();
                pstmt4.setInt(1, delta);
                pstmt4.setInt(2, bid);
                pstmt4.executeUpdate();
                pstmt4.clearWarnings();
                pstmt5.setInt(1, tid);
                pstmt5.setInt(2, bid);
                pstmt5.setInt(3, aid);
                pstmt5.setInt(4, delta);
                pstmt5.executeUpdate();
                pstmt5.clearWarnings();
            } else {
                Statement Stmt = Conn.createStatement();
                String Query = ""UPDATE accounts"";
                Query += "" SET Abalance = Abalance + "" + delta;
                Query += "" WHERE Aid = "" + aid;
                int res = Stmt.executeUpdate(Query);
                Stmt.clearWarnings();
                Query = ""SELECT Abalance"";
                Query += "" FROM accounts"";
                Query += "" WHERE Aid = "" + aid;
                ResultSet RS = Stmt.executeQuery(Query);
                Stmt.clearWarnings();
                while (RS.next()) {
                    aBalance = RS.getInt(1);
                }
                Query = ""UPDATE tellers"";
                Query += "" SET Tbalance = Tbalance + "" + delta;
                Query += "" WHERE Tid = "" + tid;
                Stmt.executeUpdate(Query);
                Stmt.clearWarnings();
                Query = ""UPDATE branches"";
                Query += "" SET Bbalance = Bbalance + "" + delta;
                Query += "" WHERE Bid = "" + bid;
                Stmt.executeUpdate(Query);
                Stmt.clearWarnings();
                Query = ""INSERT INTO history(Tid, Bid, Aid, delta)"";
                Query += "" VALUES ("";
                Query += tid + "","";
                Query += bid + "","";
                Query += aid + "","";
                Query += delta + "")"";
                Stmt.executeUpdate(Query);
                Stmt.clearWarnings();
                Stmt.close();
            }
            if (Benchmark.transactions) {
                Conn.commit();
            }
            return aBalance;
        } catch (java.lang.Exception e) {
            if (Benchmark.verbose) {
                System.out.println(""Transaction failed: "" + e.getMessage());
                e.printStackTrace();
            }
            bench.incrementFailedTransactionCount();
            if (Benchmark.transactions) {
                try {
                    Conn.rollback();
                } catch (SQLException e1) {
                }
            }
        }
        return 0;
    }
 <SPLIT>     protected int deleteBitstreamInfo(int id, Connection conn) {
        PreparedStatement stmt = null;
        int numDeleted = 0;
        try {
            stmt = conn.prepareStatement(DELETE_BITSTREAM_INFO);
            stmt.setInt(1, id);
            numDeleted = stmt.executeUpdate();
            if (numDeleted > 1) {
                conn.rollback();
                throw new IllegalStateException(""Too many rows deleted! Number of rows deleted: "" + numDeleted + "" only one row should be deleted for bitstream id "" + id);
            }
        } catch (SQLException e) {
            LOG.error(""Problem deleting bitstream. "" + e.getMessage(), e);
            throw new RuntimeException(""Problem deleting bitstream. "" + e.getMessage(), e);
        } finally {
            cleanup(stmt);
        }
        return numDeleted;
    }
",563,,LABEL_1,LABEL_0,,-4,"doOne,bid,tid,aid,delta,aBalance,RS,Stmt,Query,res",,,,0,,0,Greedy,1,0.000700823,,[]
308,"    @Override
    public InputStream getResourceByClassName(String className) {
        URL url = resourceFetcher.getResource(""/fisce_scripts/"" + className + "".class"");
        if (url == null) {
            return null;
        } else {
            try {
                return url.openStream();
            } catch (IOException e) {
                return null;
            }
        }
    }
 <SPLIT>     public Processing getProcess(long processId) throws BookKeeprCommunicationException {
        try {
            synchronized (httpClient) {
                HttpGet req = new HttpGet(remoteHost.getUrl() + ""/id/"" + Long.toHexString(processId));
                HttpResponse resp = httpClient.execute(req);
                if (resp.getStatusLine().getStatusCode() == HttpStatus.SC_OK) {
                    try {
                        XMLAble xmlable = XMLReader.read(resp.getEntity().getContent());
                        if (xmlable instanceof Processing) {
                            Processing p = (Processing) xmlable;
                            return p;
                        } else {
                            throw new BookKeeprCommunicationException(""BookKeepr returned the wrong thing for pointingID"");
                        }
                    } catch (SAXException ex) {
                        Logger.getLogger(BookKeeprConnection.class.getName()).log(Level.WARNING, ""Got a malformed message from the bookkeepr"", ex);
                        throw new BookKeeprCommunicationException(ex);
                    }
                } else {
                    resp.getEntity().consumeContent();
                    throw new BookKeeprCommunicationException(""Got a "" + resp.getStatusLine().getStatusCode() + "" from the BookKeepr"");
                }
            }
        } catch (HttpException ex) {
            throw new BookKeeprCommunicationException(ex);
        } catch (IOException ex) {
            throw new BookKeeprCommunicationException(ex);
        } catch (URISyntaxException ex) {
            throw new BookKeeprCommunicationException(ex);
        }
    }
",64,,LABEL_0,LABEL_0,LABEL_0,-1,"getResourceByClassName,className,url",,3,6,0,,0,GA,1280,0.193023276,failed,[]
309,"    public void convert(File src, File dest) throws IOException {
        InputStream in = new BufferedInputStream(new FileInputStream(src));
        DcmParser p = pfact.newDcmParser(in);
        Dataset ds = fact.newDataset();
        p.setDcmHandler(ds.getDcmHandler());
        try {
            FileFormat format = p.detectFileFormat();
            if (format != FileFormat.ACRNEMA_STREAM) {
                System.out.println(""\n"" + src + "": not an ACRNEMA stream!"");
                return;
            }
            p.parseDcmFile(format, Tags.PixelData);
            if (ds.contains(Tags.StudyInstanceUID) || ds.contains(Tags.SeriesInstanceUID) || ds.contains(Tags.SOPInstanceUID) || ds.contains(Tags.SOPClassUID)) {
                System.out.println(""\n"" + src + "": contains UIDs!"" + "" => probable already DICOM - do not convert"");
                return;
            }
            boolean hasPixelData = p.getReadTag() == Tags.PixelData;
            boolean inflate = hasPixelData && ds.getInt(Tags.BitsAllocated, 0) == 12;
            int pxlen = p.getReadLength();
            if (hasPixelData) {
                if (inflate) {
                    ds.putUS(Tags.BitsAllocated, 16);
                    pxlen = pxlen * 4 / 3;
                }
                if (pxlen != (ds.getInt(Tags.BitsAllocated, 0) >>> 3) * ds.getInt(Tags.Rows, 0) * ds.getInt(Tags.Columns, 0) * ds.getInt(Tags.NumberOfFrames, 1) * ds.getInt(Tags.NumberOfSamples, 1)) {
                    System.out.println(""\n"" + src + "": mismatch pixel data length!"" + "" => do not convert"");
                    return;
                }
            }
            ds.putUI(Tags.StudyInstanceUID, uid(studyUID));
            ds.putUI(Tags.SeriesInstanceUID, uid(seriesUID));
            ds.putUI(Tags.SOPInstanceUID, uid(instUID));
            ds.putUI(Tags.SOPClassUID, classUID);
            if (!ds.contains(Tags.NumberOfSamples)) {
                ds.putUS(Tags.NumberOfSamples, 1);
            }
            if (!ds.contains(Tags.PhotometricInterpretation)) {
                ds.putCS(Tags.PhotometricInterpretation, ""MONOCHROME2"");
            }
            if (fmi) {
                ds.setFileMetaInfo(fact.newFileMetaInfo(ds, UIDs.ImplicitVRLittleEndian));
            }
            OutputStream out = new BufferedOutputStream(new FileOutputStream(dest));
            try {
            } finally {
                ds.writeFile(out, encodeParam());
                if (hasPixelData) {
                    if (!skipGroupLen) {
                        out.write(PXDATA_GROUPLEN);
                        int grlen = pxlen + 8;
                        out.write((byte) grlen);
                        out.write((byte) (grlen >> 8));
                        out.write((byte) (grlen >> 16));
                        out.write((byte) (grlen >> 24));
                    }
                    out.write(PXDATA_TAG);
                    out.write((byte) pxlen);
                    out.write((byte) (pxlen >> 8));
                    out.write((byte) (pxlen >> 16));
                    out.write((byte) (pxlen >> 24));
                }
                if (inflate) {
                    int b2, b3;
                    for (; pxlen > 0; pxlen -= 3) {
                        out.write(in.read());
                        b2 = in.read();
                        b3 = in.read();
                        out.write(b2 & 0x0f);
                        out.write(b2 >> 4 | ((b3 & 0x0f) << 4));
                        out.write(b3 >> 4);
                    }
                } else {
                    for (; pxlen > 0; --pxlen) {
                        out.write(in.read());
                    }
                }
                out.close();
            }
            System.out.print('.');
        } finally {
            in.close();
        }
    }
 <SPLIT>     public static void copy(File source, File destination) throws FileNotFoundException, IOException {
        if (source == null) throw new NullPointerException(""The source may not be null."");
        if (destination == null) throw new NullPointerException(""The destination may not be null."");
        FileInputStream sourceStream = new FileInputStream(source);
        destination.getParentFile().mkdirs();
        FileOutputStream destStream = new FileOutputStream(destination);
        try {
            FileChannel sourceChannel = sourceStream.getChannel();
            FileChannel destChannel = destStream.getChannel();
            destChannel.transferFrom(sourceChannel, 0, sourceChannel.size());
        } finally {
            try {
                sourceStream.close();
                destStream.close();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }
",765,"    public void conception(File ref, File target) throws IOException {
        InputStream ps = new BufferedInputStream(new FileInputStream(ref));
        DcmParser e = pfact.newDcmParser(ps);
        Dataset ks = fact.newDataset();
        e.setDcmHandler(ks.getDcmHandler());
        try {
            FileFormat url = e.detectFileFormat();
            if (url != FileFormat.ACRNEMA_STREAM) {
                System.err.println(""
"" + ref + "": not an ACRNEMA stream!"");
                return;
            }
            e.parseDcmFile(url, Tags.PixelData);
            if (ks.contains(Tags.StudyInstanceUID) || ks.contains(Tags.SeriesInstanceUID) || ks.contains(Tags.SOPInstanceUID) || ks.contains(Tags.SOPClassUID)) {
                System.err.println(""
"" + ref + "": contains UIDs!"" + "" => probable already DICOM - do not convert"");
                return;
            }
            boolean haspixeldata = e.getReadTag() == Tags.PixelData;
            boolean inflate = haspixeldata && ks.getInt(Tags.BitsAllocated, 0) == 12;
            int pclin = e.getReadLength();
            if (haspixeldata) {
                if (inflate) {
                    ks.putUS(Tags.BitsAllocated, 16);
                    pclin = pclin * 4 / 3;
                }
                if (pclin != (ks.getInt(Tags.BitsAllocated, 0) >>> 3) * ks.getInt(Tags.Rows, 0) * ks.getInt(Tags.Columns, 0) * ks.getInt(Tags.NumberOfFrames, 1) * ks.getInt(Tags.NumberOfSamples, 1)) {
                    System.err.println(""
"" + ref + "": mismatch pixel data length!"" + "" => do not convert"");
                    return;
                }
            }
            ks.putUI(Tags.StudyInstanceUID, uid(studyUID));
            ks.putUI(Tags.SeriesInstanceUID, uid(seriesUID));
            ks.putUI(Tags.SOPInstanceUID, uid(instUID));
            ks.putUI(Tags.SOPClassUID, classUID);
            if (!ks.contains(Tags.NumberOfSamples)) {
                ks.putUS(Tags.NumberOfSamples, 1);
            }
            if (!ks.contains(Tags.PhotometricInterpretation)) {
                ks.putCS(Tags.PhotometricInterpretation, ""MONOCHROME2"");
            }
            if (fmi) {
                ks.setFileMetaInfo(fact.newFileMetaInfo(ks, UIDs.ImplicitVRLittleEndian));
            }
            OutputStream ouerr new BufferedOutputStream(new FileOutputStream(target));
            try {
            } finally {
                ks.writeFile(err, encodeParam());
                if (haspixeldata) {
                    if (!skipGroupLen) {
                        err.write(PXDATA_GROUPLEN);
                        int grlen = pclin + 8;
                        err.write((byte) grlen);
                        err.write((byte) (grlen >> 8));
                        err.write((byte) (grlen >> 16));
                        err.write((byte) (grlen >> 24));
                    }
                    err.write(PXDATA_TAG);
                    err.write((byte) pclin);
                    err.write((byte) (pclin >> 8));
                    err.write((byte) (pclin >> 16));
                    err.write((byte) (pclin >> 24));
                }
                if (inflate) {
                    int b2, b3;
                    for (; pclin > 0; pclin -= 3) {
                        err.write(ps.read());
                        b2 = ps.read();
                        b3 = ps.read();
                        err.write(b2 & 0x0f);
                        err.write(b2 >> 4 | ((b3 & 0x0f) << 4));
                        err.write(b3 >> 4);
                    }
                } else {
                    for (; pclin > 0; --pclin) {
                        err.write(ps.read());
                    }
                }
                err.close();
            }
            System.err.print('.');
        } finally {
            ps.close();
        }
    }
",LABEL_1,LABEL_1,0.784891486,1,"convert,src,dest,in,p,ds,format,hasPixelData,inflate,pxlen,out",,11,92,3,"convert:conception,src:ref,dest:target,in:ps,p:e,ds:ks,format:url,hasPixelData:haspixeldata,inflate:inflate,pxlen:pclin,out:err,",1,GA,1885,0.423130099,ga,[]
310,"    public static void doVersionCheck(View view) {
        view.showWaitCursor();
        try {
            URL url = new URL(jEdit.getProperty(""version-check.url""));
            InputStream in = url.openStream();
            BufferedReader bin = new BufferedReader(new InputStreamReader(in));
            String line;
            String version = null;
            String build = null;
            while ((line = bin.readLine()) != null) {
                if (line.startsWith("".version"")) version = line.substring(8).trim(); else if (line.startsWith("".build"")) build = line.substring(6).trim();
            }
            bin.close();
            if (version != null && build != null) {
                if (jEdit.getBuild().compareTo(build) < 0) newVersionAvailable(view, version, url); else {
                    GUIUtilities.message(view, ""version-check"" + "".up-to-date"", new String[0]);
                }
            }
        } catch (IOException e) {
            String[] args = { jEdit.getProperty(""version-check.url""), e.toString() };
            GUIUtilities.error(view, ""read-error"", args);
        }
        view.hideWaitCursor();
    }
 <SPLIT>     public Object invoke(MethodInvocation invocation, int retryTimes) throws Throwable {
        retryTimes--;
        try {
            String url = getServiceUrl() + ""/"" + invocation.getMethod().getName();
            HttpPost postMethod = new HttpPost(url);
            if (invocation.getMethod().getParameterTypes().length > 0) postMethod.setEntity(new StringEntity(JsonUtils.toJson(invocation.getArguments())));
            HttpResponse rsp = HttpClientUtils.getDefaultInstance().execute(postMethod);
            StatusLine sl = rsp.getStatusLine();
            if (sl.getStatusCode() >= 300) {
                throw new RuntimeException(""Did not receive successful HTTP response: status code = "" + sl.getStatusCode() + "", status message = ["" + sl.getReasonPhrase() + ""]"");
            }
            HttpEntity entity = rsp.getEntity();
            StringBuilder sb = new StringBuilder();
            InputStream is = entity.getContent();
            BufferedReader reader = new BufferedReader(new InputStreamReader(is, ""utf-8""));
            String line;
            while ((line = reader.readLine()) != null) sb.append(line).append(""\n"");
            reader.close();
            is.close();
            String responseBody = null;
            if (sb.length() > 0) {
                sb.deleteCharAt(sb.length() - 1);
                responseBody = sb.toString();
            }
            Type t = invocation.getMethod().getGenericReturnType();
            if (t.equals(Void.class) || responseBody == null) return null;
            return JsonUtils.fromJson(responseBody, t);
        } catch (ConnectTimeoutException e) {
            if (retryTimes < 0) throw e;
            if (urlFromDiscovery) {
                String serviceUrl = discoverServiceUrl(getServiceInterface().getName());
                if (!serviceUrl.equals(getServiceUrl())) {
                    setServiceUrl(serviceUrl);
                    log.info(""relocate service url:"" + serviceUrl);
                }
            }
            return invoke(invocation, retryTimes);
        }
    }
",250,,LABEL_1,LABEL_0,,-4,"doVersionCheck,view,url,in,bin,line,version,build",,,,0,,0,Greedy,1,0.000583291,,[]
311,"    public static void fileCopy(String from_name, String to_name) throws IOException {
        File fromFile = new File(from_name);
        File toFile = new File(to_name);
        if (fromFile.equals(toFile)) abort(""cannot copy on itself: "" + from_name);
        if (!fromFile.exists()) abort(""no such currentSourcepartName file: "" + from_name);
        if (!fromFile.isFile()) abort(""can't copy directory: "" + from_name);
        if (!fromFile.canRead()) abort(""currentSourcepartName file is unreadable: "" + from_name);
        if (toFile.isDirectory()) toFile = new File(toFile, fromFile.getName());
        if (toFile.exists()) {
            if (!toFile.canWrite()) abort(""destination file is unwriteable: "" + to_name);
        } else {
            String parent = toFile.getParent();
            if (parent == null) abort(""destination directory doesn't exist: "" + parent);
            File dir = new File(parent);
            if (!dir.exists()) abort(""destination directory doesn't exist: "" + parent);
            if (dir.isFile()) abort(""destination is not a directory: "" + parent);
            if (!dir.canWrite()) abort(""destination directory is unwriteable: "" + parent);
        }
        FileInputStream from = null;
        FileOutputStream to = null;
        try {
            from = new FileInputStream(fromFile);
            to = new FileOutputStream(toFile);
            byte[] buffer = new byte[4096];
            int bytes_read;
            while ((bytes_read = from.read(buffer)) != -1) to.write(buffer, 0, bytes_read);
        } finally {
            if (from != null) try {
                from.close();
            } catch (IOException e) {
                ;
            }
            if (to != null) try {
                to.close();
            } catch (IOException e) {
                ;
            }
        }
    }
 <SPLIT>     public static void buildDeb(File debFile, File controlFile, File dataFile) throws IOException {
        long now = new Date().getTime() / 1000;
        OutputStream deb = new FileOutputStream(debFile);
        deb.write(""!<arch>\n"".getBytes());
        startFileEntry(deb, DEBIAN_BINARY_NAME, now, DEBIAN_BINARY_CONTENT.length());
        deb.write(DEBIAN_BINARY_CONTENT.getBytes());
        endFileEntry(deb, DEBIAN_BINARY_CONTENT.length());
        startFileEntry(deb, CONTROL_NAME, now, controlFile.length());
        FileInputStream control = new FileInputStream(controlFile);
        byte[] buffer = new byte[1024];
        while (true) {
            int read = control.read(buffer);
            if (read == -1) break;
            deb.write(buffer, 0, read);
        }
        control.close();
        endFileEntry(deb, controlFile.length());
        startFileEntry(deb, DATA_NAME, now, dataFile.length());
        FileInputStream data = new FileInputStream(dataFile);
        while (true) {
            int read = data.read(buffer);
            if (read == -1) break;
            deb.write(buffer, 0, read);
        }
        data.close();
        endFileEntry(deb, dataFile.length());
        deb.close();
    }
",364,"    public static void fileCopy(String from_name, String to_name) throws IOException {
        File fromFile = new File(from_name);
        File toFile = new File(to_name);
        if (fromFile.equals(toFile)) abort(""cannot copy on itself: "" + from_name);
        if (!fromFile.exists()) abort(""no such currentSourcepartName file: "" + from_name);
        if (!fromFile.isFile()) abort(""can't copy directory: "" + from_name);
        if (!fromFile.canRead()) abort(""currentSourcepartName file is unreadable: "" + from_name);
        if (toFile.isDirectory()) toFile = new File(toFile, fromFile.getName());
        if (toFile.exists()) {
            if (!toFile.canWrite()) abort(""destination file is unwriteable: "" + to_name);
        } else {
            String parent = toFile.getParent();
            if (parent == null) abort(""destination directory doesn't exist: "" + parent);
            File dir = new File(parent);
            if (!dir.exists()) abort(""destination directory doesn't exist: "" + parent);
            if (dir.isFile()) abort(""destination is not a directory: "" + parent);
            if (!dir.canWrite()) abort(""destination directory is unwriteable: "" + parent);
        }
        FileInputStream url = null;
        FileOutputStream to = null;
        try {
            url = new FileInputStream(fromFile);
            to = new FileOutputStream(toFile);
            byte[] buffer = new byte[4096];
            int bytes_read;
            while ((bytes_read = url.read(buffer)) != -1) to.write(buffer, 0, bytes_read);
        } finally {
            if (url != null) try {
                url.close();
            } catch (IOException e) {
                ;
            }
            if (to != null) try {
                to.close();
            } catch (IOException e) {
                ;
            }
        }
    }
",LABEL_1,LABEL_1,LABEL_0,1,"fileCopy,from_name,to_name,fromFile,toFile,parent,dir,from,to,buffer,bytes_read","fileCopy:0.052143633365631104,from_name:0.2670585513114929,to_name:0.1353258490562439,fromFile:0.15158909559249878,toFile:0.1676396131515503,parent:0.008570253849029541,dir:-0.005332231521606445,from:0.023979127407073975,to:0.02408897876739502,buffer:-0.00048738718032836914,bytes_read:0.12976348400115967,",1,5,0,"from_name:from_name,toFile:toFile,fromFile:fromFile,to_name:to_name,bytes_read:bytes_read,fileCopy:fileCopy,to:to,from:url,",0,Greedy,451,0.075214692,replace,[]
312,"    public Long split(File targetDirectory, String prefix, long maxUnitBases, long maxUnitEntries) throws Exception {
        if (!targetDirectory.exists()) {
            if (!targetDirectory.mkdirs()) throw new Exception(""Could not create target directory "" + targetDirectory.getAbsolutePath());
        }
        if (!size.isUnknown() && size.getBases() < maxUnitBases && (maxUnitEntries <= 0 || size.getEntries() < maxUnitEntries)) {
            FileInputStream fis = new FileInputStream(this);
            FileChannel fci = fis.getChannel();
            FileOutputStream fos = new FileOutputStream(new File(targetDirectory, prefix + ""_0"" + "".fasta""));
            FileChannel fco = fos.getChannel();
            ByteBuffer buffer = ByteBuffer.allocate(64000);
            while (fci.read(buffer) > 0) {
                buffer.flip();
                fco.write(buffer);
                buffer.clear();
            }
            fci.close();
            fco.close();
            return (long) 1;
        } else {
            long currentBasesCount = 0;
            long currentEntriesCount = 0;
            int targetCount = 0;
            FileChannel fastaChannel = new FileInputStream(this).getChannel();
            int totalSeqCount = 0;
            long totalResiduesCount = 0;
            try {
                long prevTime = System.currentTimeMillis();
                long fastaFileSize = this.length();
                long fastaFileReadOffset = 0L;
                long partitionStartOffset = 0L;
                final int bufferSize = 1024 * 1024;
                ByteBuffer fastaBuffer = ByteBuffer.allocateDirect(bufferSize);
                int fastaReadState = FASTAFileTokenizer.UNKNOWN;
                for (; fastaFileReadOffset < fastaFileSize; ) {
                    long nBytes = fastaChannel.read(fastaBuffer);
                    if (nBytes <= 0) {
                        fastaBuffer.limit(0);
                        break;
                    } else {
                        fastaBuffer.flip();
                        fastaFileReadOffset += nBytes;
                    }
                    for (; ; ) {
                        if (!fastaBuffer.hasRemaining()) {
                            fastaBuffer.clear();
                            break;
                        }
                        int b = fastaBuffer.get();
                        if (b == '\r') {
                        } else if (b == '\n') {
                            if (fastaReadState == FASTAFileTokenizer.DEFLINE) {
                                fastaReadState = FASTAFileTokenizer.SEQUENCELINE;
                            }
                        } else if (b == '>') {
                            if (fastaReadState == FASTAFileTokenizer.UNKNOWN) {
                                fastaReadState = FASTAFileTokenizer.STARTDEFLINE;
                            } else if (fastaReadState == FASTAFileTokenizer.SEQUENCELINE) {
                                fastaReadState = FASTAFileTokenizer.STARTDEFLINE;
                            }
                            if (fastaReadState == FASTAFileTokenizer.STARTDEFLINE) {
                                if (currentBasesCount >= maxUnitBases || maxUnitEntries > 0 && currentEntriesCount >= maxUnitEntries) {
                                    fastaBuffer.position(fastaBuffer.position() - 1);
                                    long currentTime = System.currentTimeMillis();
                                    System.out.println(new java.util.Date() + "" Partition "" + targetCount + "" containing "" + currentEntriesCount + "" sequences and "" + currentBasesCount + "" residues ends at "" + (fastaFileReadOffset - fastaBuffer.remaining()) + "" and was created in "" + (currentTime - prevTime) + "" ms"");
                                    prevTime = currentTime;
                                    long partitionEndOffset = fastaFileReadOffset - fastaBuffer.remaining();
                                    FileChannel partitionChannel = new FileOutputStream(new File(targetDirectory, prefix + ""_"" + targetCount + "".fasta"")).getChannel();
                                    nBytes = fastaChannel.transferTo(partitionStartOffset, partitionEndOffset - partitionStartOffset, partitionChannel);
                                    partitionChannel.force(true);
                                    partitionChannel.close();
                                    targetCount++;
                                    partitionStartOffset += nBytes;
                                    currentBasesCount = 0;
                                    currentEntriesCount = 0;
                                    fastaReadState = FASTAFileTokenizer.UNKNOWN;
                                } else {
                                    fastaReadState = FASTAFileTokenizer.DEFLINE;
                                    currentEntriesCount++;
                                }
                                totalSeqCount++;
                            }
                        } else {
                            if (fastaReadState == FASTAFileTokenizer.SEQUENCELINE) {
                                totalResiduesCount++;
                                currentBasesCount++;
                            }
                        }
                    }
                }
                if (partitionStartOffset < fastaFileSize) {
                    long currentTime = System.currentTimeMillis();
                    System.out.println(new java.util.Date() + "" Partition "" + targetCount + "" containing "" + currentEntriesCount + "" sequences and "" + currentBasesCount + "" residues ends at "" + (fastaFileSize) + "" and was created in "" + (currentTime - prevTime) + "" ms"");
                    FileChannel partitionChannel = new FileOutputStream(new File(targetDirectory, prefix + ""_"" + targetCount + "".fasta"")).getChannel();
                    fastaChannel.transferTo(partitionStartOffset, fastaFileSize - partitionStartOffset, partitionChannel);
                    partitionChannel.force(true);
                    partitionChannel.close();
                    targetCount++;
                }
                if (size.isUnknown()) {
                    size.setBases(totalResiduesCount);
                    size.setEntries(totalSeqCount);
                }
            } finally {
                fastaChannel.close();
            }
            return (long) targetCount;
        }
    }
 <SPLIT>             @Override
            public void actionPerformed(ActionEvent e) {
                try {
                    Pattern delim = Pattern.compile(""[ ]"");
                    BufferedReader r = new BufferedReader(new InputStreamReader(new GZIPInputStream(new FileInputStream(""/home/lindenb/jeter.txt.gz""))));
                    String line = null;
                    URL url = new URL(""http://eutils.ncbi.nlm.nih.gov/entrez/eutils/efetch.fcgi"");
                    URLConnection conn = url.openConnection();
                    conn.setDoOutput(true);
                    OutputStreamWriter wr = new OutputStreamWriter(conn.getOutputStream());
                    wr.write(""db=snp&retmode=xml"");
                    while ((line = r.readLine()) != null) {
                        String tokens[] = delim.split(line, 2);
                        if (!tokens[0].startsWith(""rs"")) continue;
                        wr.write(""&id="" + tokens[0].substring(2).trim());
                    }
                    wr.flush();
                    r.close();
                    InputStream in = conn.getInputStream();
                    IOUtils.copyTo(in, System.err);
                    in.close();
                    wr.close();
                } catch (IOException err) {
                    err.printStackTrace();
                }
            }
",862,,LABEL_1,LABEL_1,LABEL_1,-1,"split,targetDirectory,prefix,maxUnitBases,maxUnitEntries,fis,fci,fos,fco,buffer,currentBasesCount,currentEntriesCount,targetCount,fastaChannel,totalSeqCount,totalResiduesCount,prevTime,fastaFileSize,fastaFileReadOffset,partitionStartOffset,bufferSize,fastaBuffer,fastaReadState,nBytes",,23,114,0,,0,GA,9908,2.53388025,failed,[]
313,"    public static String getFile(String serviceName, String wsdlLocation, String endpoint) throws AxisFault {
        mLog.debug(""Downloading WSDL file from: "" + wsdlLocation);
        mLog.debug(""Received endpoint: "" + endpoint);
        String fileLocation = null;
        try {
            String tempDir = System.getProperty(""java.io.tmpdir"");
            URL url = new URL(wsdlLocation);
            String WSDLFile = tempDir + File.separator + serviceName + "".wsdl"";
            String tmpWSDLFile = WSDLFile + "".tmp"";
            File inputFile = new File(WSDLFile);
            File tmpFile = new File(tmpWSDLFile);
            if (!inputFile.exists() || inputFile.length() == 0) {
                mLog.debug(""Downloading the WSDL"");
                inputFile.createNewFile();
                InputStream in = url.openStream();
                FileOutputStream out = new FileOutputStream(inputFile);
                URLConnection con = url.openConnection();
                int fileLength = con.getContentLength();
                ReadableByteChannel channelIn = Channels.newChannel(in);
                FileChannel channelOut = out.getChannel();
                channelOut.transferFrom(channelIn, 0, fileLength);
                channelIn.close();
                channelOut.close();
                out.flush();
                out.close();
                in.close();
                Document tmpDocument = XMLUtils.newDocument(new FileInputStream(inputFile));
                NodeList nl1 = tmpDocument.getElementsByTagName(""wsdlsoap:address"");
                for (int i = 0; i < nl1.getLength(); i++) {
                    Node node1 = nl1.item(i);
                    if (node1.getNodeName().equals(""wsdlsoap:address"")) {
                        ((Element) node1).setAttribute(""location"", endpoint);
                    }
                }
                FileOutputStream tmpOut = new FileOutputStream(tmpFile);
                XMLUtils.DocumentToStream(tmpDocument, tmpOut);
                tmpOut.flush();
                tmpOut.close();
                boolean retVal = inputFile.delete();
                if (retVal) {
                    retVal = tmpFile.renameTo(new File(WSDLFile));
                }
                mLog.debug(""Return Value: "" + retVal);
            } else {
                mLog.debug(""The WSDL is already at the ServiceProvider"");
            }
            fileLocation = WSDLFile;
        } catch (MalformedURLException mx) {
            mLog.error(""MalformedURLException: "" + mx.getMessage() + "", cause: "" + mx.getCause().getMessage());
            throw new AxisFault(mx.getMessage(), mx.getCause());
        } catch (IOException ix) {
            mLog.error(""IOException: "" + ix.getMessage() + "", cause: "" + ix.getCause().getMessage());
            throw new AxisFault(ix.getMessage(), ix.getCause());
        } catch (ParserConfigurationException px) {
            mLog.error(""ParserConfigurationException: "" + px.getMessage() + "", cause: "" + px.getCause().getMessage());
            throw new AxisFault(px.getMessage(), px.getCause());
        } catch (SAXException sx) {
            mLog.error(""SAXException: "" + sx.getMessage() + "", cause: "" + sx.getCause().getMessage());
            throw new AxisFault(sx.getMessage(), sx.getCause());
        }
        return fileLocation;
    }
 <SPLIT>     public static void copyFile(File srcFile, File destFile) throws IOException {
        if (!(srcFile.exists() && srcFile.isFile())) throw new IllegalArgumentException(""Source file doesn't exist: "" + srcFile.getAbsolutePath());
        if (destFile.exists() && destFile.isDirectory()) throw new IllegalArgumentException(""Destination file is directory: "" + destFile.getAbsolutePath());
        FileInputStream in = new FileInputStream(srcFile);
        FileOutputStream out = new FileOutputStream(destFile);
        byte[] buffer = new byte[4096];
        int no = 0;
        try {
            while ((no = in.read(buffer)) != -1) out.write(buffer, 0, no);
        } finally {
            in.close();
            out.close();
        }
    }
",631,,LABEL_1,LABEL_0,,-4,"getFile,serviceName,wsdlLocation,endpoint,fileLocation,tempDir,url,WSDLFile,tmpWSDLFile,inputFile,tmpFile,in,out,con,fileLength,channelIn,channelOut,tmpDocument,nl1,i,node1,tmpOut,retVal",,,,0,,0,Greedy,1,0.00070852,,[]
314,"    static void copyFile(File in, File out) throws IOException {
        FileChannel source = new FileInputStream(in).getChannel();
        FileChannel destination = new FileOutputStream(out).getChannel();
        source.transferTo(0, source.size(), destination);
        source.close();
        destination.close();
    }
 <SPLIT>     private void displayDiffResults() throws IOException {
        File outFile = File.createTempFile(""diff"", "".htm"");
        outFile.deleteOnExit();
        FileOutputStream outStream = new FileOutputStream(outFile);
        BufferedWriter out = new BufferedWriter(new OutputStreamWriter(outStream));
        out.write(""<html><head><title>LOC Differences</title>\n"" + SCRIPT + ""</head>\n"" + ""<body bgcolor='#ffffff'>\n"" + ""<div onMouseOver=\""window.defaultStatus='Metrics'\"">\n"");
        if (addedTable.length() > 0) {
            out.write(""<table border><tr><th>Files Added:</th>"" + ""<th>Add</th><th>Type</th></tr>"");
            out.write(addedTable.toString());
            out.write(""</table><br><br>"");
        }
        if (modifiedTable.length() > 0) {
            out.write(""<table border><tr><th>Files Modified:</th>"" + ""<th>Base</th><th>Del</th><th>Mod</th><th>Add</th>"" + ""<th>Total</th><th>Type</th></tr>"");
            out.write(modifiedTable.toString());
            out.write(""</table><br><br>"");
        }
        if (deletedTable.length() > 0) {
            out.write(""<table border><tr><th>Files Deleted:</th>"" + ""<th>Del</th><th>Type</th></tr>"");
            out.write(deletedTable.toString());
            out.write(""</table><br><br>"");
        }
        out.write(""<table name=METRICS BORDER>\n"");
        if (modifiedTable.length() > 0 || deletedTable.length() > 0) {
            out.write(""<tr><td>Base:&nbsp;</td><td>"");
            out.write(Long.toString(base));
            out.write(""</td></tr>\n<tr><td>Deleted:&nbsp;</td><td>"");
            out.write(Long.toString(deleted));
            out.write(""</td></tr>\n<tr><td>Modified:&nbsp;</td><td>"");
            out.write(Long.toString(modified));
            out.write(""</td></tr>\n<tr><td>Added:&nbsp;</td><td>"");
            out.write(Long.toString(added));
            out.write(""</td></tr>\n<tr><td>New & Changed:&nbsp;</td><td>"");
            out.write(Long.toString(added + modified));
            out.write(""</td></tr>\n"");
        }
        out.write(""<tr><td>Total:&nbsp;</td><td>"");
        out.write(Long.toString(total));
        out.write(""</td></tr>\n</table></div>"");
        redlinesOut.close();
        out.flush();
        InputStream redlines = new FileInputStream(redlinesTempFile);
        byte[] buffer = new byte[4096];
        int bytesRead;
        while ((bytesRead = redlines.read(buffer)) != -1) outStream.write(buffer, 0, bytesRead);
        outStream.write(""</BODY></HTML>"".getBytes());
        outStream.close();
        Browser.launch(outFile.toURL().toString());
    }
",68,,LABEL_1,LABEL_1,LABEL_1,-1,"copyFile,in,out,source,destination",,5,12,0,,0,GA,2129,0.363937438,failed,"[';copyFile = 0', ';destination = 0', ';url = 0', ';login = 0', ';conn = 0', ';obj = 0', ';string = 0', ';print(string)', ';print(c)']"
315,"    public static void writeFileType(String uriFile, String outputfile, int num) {
        BufferedWriter writer = null;
        String uri = null;
        try {
            int counter = 1;
            writer = new BufferedWriter(new FileWriter(outputfile));
            BufferedReader reader = new BufferedReader(new FileReader(uriFile));
            uri = null;
            while (counter < num) {
                uri = reader.readLine();
                counter++;
            }
            while ((uri = reader.readLine()) != null) {
                try {
                    System.err.println(""working on the ["" + counter + ""]th document."");
                    counter++;
                    URL url = new URL(uri);
                    URLConnection myConnection = url.openConnection();
                    BufferedReader myReader = new BufferedReader(new InputStreamReader(myConnection.getInputStream()));
                    String line = null;
                    boolean hasOWL = false;
                    boolean hasRDFS = false;
                    boolean hasRDF = false;
                    int linecount = 0;
                    while ((line = myReader.readLine()) != null) {
                        if (line.indexOf(""http://www.w3.org/2002/07/owl"") != -1) hasOWL = true; else if (line.indexOf(""http://www.w3.org/2000/01/rdf-schema"") != -1) hasRDFS = true; else if (line.indexOf(""http://www.w3.org/1999/02/22-rdf-syntax-ns"") != -1) hasRDF = true;
                        linecount++;
                        if (linecount > 100) break;
                    }
                    if (hasOWL) writer.write(uri + ""\t"" + OWL); else if (hasRDFS) writer.write(uri + ""\t"" + RDFS); else if (hasRDF) writer.write(uri + ""\t"" + RDF); else writer.write(uri + ""\t"" + UNKNOWN);
                    writer.newLine();
                    writer.flush();
                } catch (Exception e) {
                    e.printStackTrace();
                    try {
                        writer.write(uri + ""\t"" + BROKEN);
                        writer.newLine();
                        writer.flush();
                    } catch (Exception ex) {
                        ex.printStackTrace();
                    }
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
 <SPLIT>     public static void addRecipe(String name, String instructions, int categoryId, String[][] ainekset) throws Exception {
        PreparedStatement pst1 = null;
        PreparedStatement pst2 = null;
        ResultSet rs = null;
        int retVal = -1;
        try {
            pst1 = conn.prepareStatement(""INSERT INTO recipes (name, instructions, category_id) VALUES (?, ?, ?)"");
            pst1.setString(1, name);
            pst1.setString(2, instructions);
            pst1.setInt(3, categoryId);
            if (pst1.executeUpdate() > 0) {
                pst2 = conn.prepareStatement(""SELECT recipe_id FROM recipes WHERE name = ? AND instructions = ? AND category_id = ?"");
                pst2.setString(1, name);
                pst2.setString(2, instructions);
                pst2.setInt(3, categoryId);
                rs = pst2.executeQuery();
                if (rs.next()) {
                    int id = rs.getInt(1);
                    System.out.println(""Lis�t��n ainesosat"");
                    String[] aines;
                    for (int i = 0; i < ainekset.length; ++i) {
                        aines = ainekset[i];
                        addIngredient(id, aines[0], aines[1], Integer.parseInt(aines[2]), Integer.parseInt(aines[3]));
                    }
                    retVal = id;
                } else {
                    retVal = -1;
                }
            } else {
                retVal = -1;
            }
            conn.commit();
        } catch (Exception e) {
            conn.rollback();
            throw new Exception(""Reseptin lis�ys ep�onnistui. Poikkeus: "" + e.getMessage());
        }
    }
",411,"    public static void writeFileType(String uriFile, String outputfile, int num) {
        BufferedWriter writer = null;
        String uri = null;
        try {
            int counter = 1;
            writer = new BufferedWriter(new FileWriter(outputfile));
            BufferedReader reader = new BufferedReader(new FileReader(uriFile));
            uri = null;
            while (counter < num) {
                uri = reader.readLine();
                counter++;
            }
            while ((uri = reader.readLine()) != null) {
                try {
                    System.err.println(""working on the ["" + counter + ""]th document."");
                    counter++;
                    URL address = new URL(uri);
                    URLConnection myConnection = address.openConnection();
                    BufferedReader myReader = new BufferedReader(new InputStreamReader(myConnection.getInputStream()));
                    String line = null;
                    boolean hasOWL = false;
                    boolean hasRDFS = false;
                    boolean hasRDF = false;
                    int linecount = 0;
                    while ((line = myReader.readLine()) != null) {
                        if (line.indexOf(""http://www.w3.org/2002/07/owl"") != -1) hasOWL = true; else if (line.indexOf(""http://www.w3.org/2000/01/rdf-schema"") != -1) hasRDFS = true; else if (line.indexOf(""http://www.w3.org/1999/02/22-rdf-syntax-ns"") != -1) hasRDF = true;
                        linecount++;
                        if (linecount > 100) break;
                    }
                    if (hasOWL) writer.write(uri + ""\t"" + OWL); else if (hasRDFS) writer.write(uri + ""\t"" + RDFS); else if (hasRDF) writer.write(uri + ""\t"" + RDF); else writer.write(uri + ""\t"" + UNKNOWN);
                    writer.newLine();
                    writer.flush();
                } catch (Exception e) {
                    e.printStackTrace();
                    try {
                        writer.write(uri + ""\t"" + BROKEN);
                        writer.newLine();
                        writer.flush();
                    } catch (Exception ex) {
                        ex.printStackTrace();
                    }
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
",LABEL_0,LABEL_0,LABEL_1,1,"writeFileType,uriFile,outputfile,num,writer,uri,counter,reader,url,myConnection,myReader,line,linecount,hasOWL,hasRDFS,hasRDF","writeFileType:0.006708264350891113,uriFile:-0.07529926300048828,outputfile:-0.05555087327957153,num:0.0036399364471435547,writer:0.02797752618789673,uri:-0.4424646496772766,counter:0.020535945892333984,reader:-0.0006303191184997559,url:0.21986043453216553,myConnection:-0.10439068078994751,myReader:-0.09499531984329224,line:-0.020217478275299072,linecount:-0.13434737920761108,hasOWL:-0.10477179288864136,hasRDFS:-0.119864821434021,hasRDF:-0.11174529790878296,",1,2,0,"url:address,",0,Greedy,97,0.016412731,replace,[]
316,"    public static boolean encodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }
 <SPLIT>     private boolean setPayload() throws IOException {
        if (Index < Headers.length) {
            FileOutputStream fos = new FileOutputStream(Headers[Index], true);
            FileInputStream fis = new FileInputStream(HeadlessData);
            FileChannel fic = fis.getChannel();
            FileChannel foc = fos.getChannel();
            fic.transferTo(0, fic.size(), foc);
            fic.close();
            foc.close();
            setDestination(Destinations[Index]);
            setPayload(Headers[Index]);
            Index++;
            return true;
        }
        return false;
    }
",194,,LABEL_1,LABEL_0,,-4,"encodeFileToFile,infile,outfile,in,out,buffer,read,success",,,,0,,0,Greedy,1,0.000373658,,[]
317,"    public static String md5(String data) {
        try {
            MessageDigest md = MessageDigest.getInstance(MD);
            md.update(data.getBytes(UTF8));
            return encodeHex(md.digest());
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }
 <SPLIT>     private String getFullClassName(URL url, String className) throws Exception {
        JarInputStream jis = new JarInputStream(url.openStream());
        ZipEntry zentry = null;
        while ((zentry = jis.getNextEntry()) != null) {
            String name = zentry.getName();
            int lastPos = name.lastIndexOf("".class"");
            if (lastPos < 0) {
                continue;
            }
            name = name.replace('/', '.');
            int pos = -1;
            if (className != null) {
                pos = name.indexOf(className);
                if (pos >= 0 && name.length() == pos + className.length() + 6) {
                    jis.close();
                    return (name.substring(0, lastPos));
                }
            }
        }
        jis.close();
        return (null);
    }
",60,,LABEL_0,LABEL_0,LABEL_0,-1,"md5,data,md",,3,6,0,,0,GA,1357,0.189045115,failed,[]
318,"    private void unJarStart(String jarPath, String jarEntryStart) {
        String path;
        if (jarPath.lastIndexOf(""lib/"") >= 0) path = jarPath.substring(0, jarPath.lastIndexOf(""lib/"")); else path = jarPath.substring(0, jarPath.lastIndexOf(""/""));
        String relPath = jarEntryStart.substring(0, jarEntryStart.lastIndexOf(""/""));
        try {
            new File(path + ""/"" + relPath).mkdirs();
            JarFile jar = new JarFile(jarPath);
            Enumeration<JarEntry> entries = jar.entries();
            while (entries.hasMoreElements()) {
                JarEntry entry = entries.nextElement();
                String jarEntry = entry.getName();
                if (jarEntry.startsWith(jarEntryStart)) {
                    ZipEntry ze = jar.getEntry(jarEntry);
                    File bin = new File(path + ""/"" + jarEntry);
                    IOUtils.copy(jar.getInputStream(ze), new FileOutputStream(bin));
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
 <SPLIT>     private void downloadFile(File target, String s3key) throws IOException, S3ServiceException {
        InputStream in = downloadData(s3key);
        if (in == null) {
            throw new IOException(""No data found"");
        }
        in = new InflaterInputStream(new CryptInputStream(in, cipher, getDataEncryptionKey()));
        File temp = File.createTempFile(""dirsync"", null);
        FileOutputStream fout = new FileOutputStream(temp);
        try {
            IOUtils.copy(in, fout);
            if (target.exists()) {
                target.delete();
            }
            IOUtils.closeQuietly(fout);
            IOUtils.closeQuietly(in);
            FileUtils.moveFile(temp, target);
        } catch (IOException e) {
            fetchStream(in);
            throw e;
        } finally {
            IOUtils.closeQuietly(fout);
            IOUtils.closeQuietly(in);
        }
    }
",220,,LABEL_1,LABEL_1,LABEL_1,-1,"unJarStart,jarPath,jarEntryStart,path,relPath,jar,entries,entry,jarEntry,ze,bin",,3,13,0,,0,GA,5264,0.845392168,failed,"[';unJarStart = 0', ';jarPath = 0']"
319,"    private void moveFile(File orig, File target) throws IOException {
        byte buffer[] = new byte[1000];
        int bread = 0;
        FileInputStream fis = new FileInputStream(orig);
        FileOutputStream fos = new FileOutputStream(target);
        while (bread != -1) {
            bread = fis.read(buffer);
            if (bread != -1) fos.write(buffer, 0, bread);
        }
        fis.close();
        fos.close();
        orig.delete();
    }
 <SPLIT>     public void uncaughtException(final Thread t, final Throwable e) {
        final Display display = Display.getCurrent();
        final Shell shell = new Shell(display);
        final MessageBox message = new MessageBox(shell, SWT.OK | SWT.CANCEL | SWT.ICON_ERROR);
        message.setText(""Hawkscope Error"");
        message.setMessage(e.getMessage() + ""\nSubmit Hawkscope Error Report to Issue Tracker?"");
        log.error(""Uncaught exception"", e);
        if (message.open() == SWT.OK) {
            IOUtils.copyToClipboard(Version.getBugReport(e));
            try {
                Program.launch(Constants.HAWKSCOPE_URL_ROOT + ""issues/entry?comment="" + URLEncoder.encode(""Please paste the Hawkscope Error "" + ""Report here. It's currently copied to your "" + ""clipboard. Thank you for your support!"", Constants.ENCODING));
            } catch (final Exception e1) {
                Program.launch(Constants.HAWKSCOPE_URL_ROOT + ""issues/entry"");
            }
        }
        shell.dispose();
    }
",103,"    private void MoveDirectory(File loc, File project) throws IOException {
        byte url[] = new byte[1000];
        int bread = 0;
        FileInputStream ufils = new FileInputStream(loc);
        FileOutputStream flose = new FileOutputStream(project);
        while (bread != -1) {
            bread = ufils.read(url);
            if (bread != -1) flose.write(url, 0, bread);
        }
        ufils.close();
        flose.close();
        loc.delete();
    }
",LABEL_1,LABEL_1,LABEL_0,1,"moveFile,orig,target,buffer,bread,fis,fos","moveFile:0.0036947131156921387,orig:-0.0028322339057922363,target:0.0014827251434326172,buffer:-0.005737483501434326,bread:-0.02506577968597412,fis:0.011543035507202148,fos:0.008964121341705322,",6,15,0,"fis:ufils,fos:flose,moveFile:MoveDirectory,target:project,orig:loc,buffer:url,",0,Greedy,245,0.036030078,replace,[]
320,"    public static String getWebPage(URL urlObj) {
        try {
            String content = """";
            InputStreamReader is = new InputStreamReader(urlObj.openStream());
            BufferedReader reader = new BufferedReader(is);
            String line;
            while ((line = reader.readLine()) != null) {
                content += line;
            }
            return content;
        } catch (IOException e) {
            throw new Error(""The page "" + dbg.quote(urlObj.toString()) + ""could not be retrieved."" + ""\nThis is could be caused by a number of things:"" + ""\n"" + ""\n  - the computer hosting the web page you want is down, or has returned an error"" + ""\n  - your computer does not have Internet access"" + ""\n  - the heat death of the universe has occurred, taking down all web servers with it"");
        }
    }
 <SPLIT>     private String makeLoginRequest(URL url) throws IOException {
        HttpURLConnection urlConnection = (HttpURLConnection) url.openConnection();
        urlConnection.setRequestMethod(""POST"");
        urlConnection.setDoInput(true);
        urlConnection.setDoOutput(true);
        urlConnection.setUseCaches(false);
        urlConnection.setRequestProperty(""Content-Type"", ""application/x-www-form-urlencoded"");
        StringBuilder content = new StringBuilder();
        content.append(""Email="").append(URLEncoder.encode(EMAIL, ""UTF-8""));
        content.append(""&Passwd="").append(URLEncoder.encode(PASSWORD, ""UTF-8""));
        content.append(""&service="").append(URLEncoder.encode(SERVICE, ""UTF-8""));
        content.append(""&source="").append(URLEncoder.encode(""Google Base data API"", ""UTF-8""));
        OutputStream outputStream = urlConnection.getOutputStream();
        outputStream.write(content.toString().getBytes(""UTF-8""));
        outputStream.close();
        int responseCode = urlConnection.getResponseCode();
        InputStream inputStream;
        if (responseCode == HttpURLConnection.HTTP_OK) {
            inputStream = urlConnection.getInputStream();
        } else {
            inputStream = urlConnection.getErrorStream();
        }
        return toString(inputStream);
    }
",119,"    public static String getWebPage(URL strObject) {
        try {
            String content = """";
            InputStreamReader is = new InputStreamReader(strObject.openStream());
            BufferedReader reader = new BufferedReader(is);
            String line;
            while ((line = reader.readLine()) != null) {
                content += line;
            }
            return content;
        } catch (IOException e) {
            throw new Error(""The page "" + dbg.quote(strObject.toString()) + ""could not be retrieved."" + ""
This is could be caused by a number of things:"" + ""
"" + ""
  - the computer hosting the web page you want is down, or has returned an error"" + ""
  - your computer does not have Internet access"" + ""
  - the heat death of the universe has occurred, taking down all web servers with it"");
        }
    }
",LABEL_0,LABEL_0,LABEL_1,1,"getWebPage,urlObj,content,is,reader,line","getWebPage:0.036516547203063965,urlObj:0.05979496240615845,content:-0.0004892349243164062,is:0.0016808509826660156,reader:0.0022949576377868652,line:-0.00853586196899414,",1,3,0,"urlObj:strObject,",0,Greedy,50,0.008002385,replace,[]
321,"    public static byte[] createPasswordDigest(String password, byte[] salt) throws Exception {
        MessageDigest md = MessageDigest.getInstance(""MD5"");
        md.update(salt);
        md.update(password.getBytes(""UTF8""));
        byte[] digest = md.digest();
        return digest;
    }
 <SPLIT>     public void importarEmissoresDosTitulosFinanceiros(File pArquivoTXT, Andamento pAndamento) throws FileNotFoundException, SQLException {
        int numeroDoRegistro = -1;
        Scanner in = null;
        Statement stmtLimpezaInicialDestino = conDestino.createStatement();
        String sql = ""TRUNCATE TABLE TMP_TB_EMISSOR_TITULO"";
        stmtLimpezaInicialDestino.executeUpdate(sql);
        sql = ""INSERT INTO TMP_TB_EMISSOR_TITULO(SIGLA, NOME, CNPJ, DATA_CRIACAO) VALUES(:SIGLA, :NOME, :CNPJ, :DATA_CRIACAO)"";
        OraclePreparedStatement stmtDestino = (OraclePreparedStatement) conDestino.prepareStatement(sql);
        stmtDestino.setExecuteBatch(COMANDOS_POR_LOTE);
        final int TAMANHO_DO_CABECALHO_DO_ARQUIVO = 0;
        final int TAMANHO_DO_RODAPE_DO_ARQUIVO = 0;
        final int TAMANHO_DOS_METADADOS_DO_ARQUIVO = TAMANHO_DO_CABECALHO_DO_ARQUIVO + TAMANHO_DO_RODAPE_DO_ARQUIVO;
        final int TAMANHO_MEDIO_POR_REGISTRO = 81;
        long tamanhoDosArquivos = pArquivoTXT.length();
        int quantidadeDeRegistrosEstimada = (int) (tamanhoDosArquivos - TAMANHO_DOS_METADADOS_DO_ARQUIVO) / TAMANHO_MEDIO_POR_REGISTRO;
        String registro;
        String[] campos;
        try {
            in = new Scanner(new FileInputStream(pArquivoTXT), Constantes.CONJUNTO_DE_CARACTERES_DOS_ARQUIVOS_TEXTO_DA_BOVESPA.name());
            int quantidadeDeRegistrosImportada = 0;
            numeroDoRegistro = 0;
            String vSIGLA, vNOME;
            BigDecimal vCNPJ;
            java.sql.Date vDATA_CRIACAO;
            final int QTDE_CAMPOS = CampoDoArquivoDosEmissoresDeTitulosFinanceiros.values().length;
            final String SEPARADOR_DE_CAMPOS_DO_REGISTRO = "","";
            final String DELIMITADOR_DE_CAMPOS_DO_REGISTRO = ""\"""";
            while (in.hasNextLine()) {
                ++numeroDoRegistro;
                registro = in.nextLine();
                stmtDestino.clearParameters();
                registro = registro.substring(1, registro.length() - 1);
                if (registro.endsWith(DELIMITADOR_DE_CAMPOS_DO_REGISTRO)) {
                    registro = registro + "" "";
                }
                campos = registro.split(DELIMITADOR_DE_CAMPOS_DO_REGISTRO + SEPARADOR_DE_CAMPOS_DO_REGISTRO + DELIMITADOR_DE_CAMPOS_DO_REGISTRO);
                int quantidadeDeCamposEncontradosIncluindoOsVazios = campos.length;
                if (quantidadeDeCamposEncontradosIncluindoOsVazios != QTDE_CAMPOS) {
                    throw new CampoMalDelimitadoEmRegistroDoArquivoImportado(registro);
                }
                vSIGLA = campos[CampoDoArquivoDosEmissoresDeTitulosFinanceiros.SIGLA.ordinal()];
                vNOME = campos[CampoDoArquivoDosEmissoresDeTitulosFinanceiros.NOME.ordinal()];
                String cnpjTmp = campos[CampoDoArquivoDosEmissoresDeTitulosFinanceiros.CNPJ.ordinal()];
                if (cnpjTmp != null && cnpjTmp.trim().length() > 0) {
                    vCNPJ = new BigDecimal(cnpjTmp);
                } else {
                    vCNPJ = null;
                }
                String dataDaCriacaoTmp = campos[CampoDoArquivoDosEmissoresDeTitulosFinanceiros.DATA_CRIACAO.ordinal()];
                if (dataDaCriacaoTmp != null && dataDaCriacaoTmp.trim().length() > 0) {
                    int dia = Integer.parseInt(dataDaCriacaoTmp.substring(6, 8)), mes = Integer.parseInt(dataDaCriacaoTmp.substring(4, 6)) - 1, ano = Integer.parseInt(dataDaCriacaoTmp.substring(0, 4));
                    Calendar calendario = Calendar.getInstance();
                    calendario.clear();
                    calendario.set(ano, mes, dia);
                    vDATA_CRIACAO = new java.sql.Date(calendario.getTimeInMillis());
                } else {
                    vDATA_CRIACAO = null;
                }
                stmtDestino.setStringAtName(""SIGLA"", vSIGLA);
                stmtDestino.setStringAtName(""NOME"", vNOME);
                stmtDestino.setBigDecimalAtName(""CNPJ"", vCNPJ);
                stmtDestino.setDateAtName(""DATA_CRIACAO"", vDATA_CRIACAO);
                int contagemDasInsercoes = stmtDestino.executeUpdate();
                quantidadeDeRegistrosImportada++;
                double percentualCompleto = (double) quantidadeDeRegistrosImportada / quantidadeDeRegistrosEstimada * 100;
                pAndamento.setPercentualCompleto((int) percentualCompleto);
            }
            conDestino.commit();
        } catch (Exception ex) {
            conDestino.rollback();
            ProblemaNaImportacaoDeArquivo problemaDetalhado = new ProblemaNaImportacaoDeArquivo();
            problemaDetalhado.nomeDoArquivo = pArquivoTXT.getName();
            problemaDetalhado.linhaProblematicaDoArquivo = numeroDoRegistro;
            problemaDetalhado.detalhesSobreOProblema = ex;
            throw problemaDetalhado;
        } finally {
            pAndamento.setPercentualCompleto(100);
            in.close();
            if (stmtLimpezaInicialDestino != null && (!stmtLimpezaInicialDestino.isClosed())) {
                stmtLimpezaInicialDestino.close();
            }
            if (stmtDestino != null && (!stmtDestino.isClosed())) {
                stmtDestino.close();
            }
        }
    }
",67,,LABEL_0,LABEL_0,LABEL_0,-1,"createPasswordDigest,password,salt,md,digest",,5,12,0,,0,GA,2239,0.435247978,failed,[]
322,"    private File extractUninstallFiles(File _destPath, boolean upgrade, String lastVer) {
        File oldlog = null;
        try {
            boolean oldClassCopied = false;
            File destPath = new File(_destPath, ""vai_"" + VAGlobals.APP_NAME + ""_"" + VAGlobals.APP_VERSION);
            if (upgrade) {
                File lastVerPath = new File(_destPath, ""vai_"" + VAGlobals.APP_NAME + ""_"" + lastVer);
                if (destPath.equals(lastVerPath)) {
                    File bkdir = new File(destPath.getAbsolutePath() + "".bak"");
                    if (!destPath.renameTo(bkdir)) {
                        throw new IOException(VAGlobals.i18n(""Setup_NotCreateDirectory"") + "" "" + destPath);
                    }
                    oldlog = new File(bkdir.getAbsolutePath() + System.getProperty(""file.separator"") + ""uninstall.vai"");
                    lastVerPath = bkdir;
                } else {
                    oldlog = new File(lastVerPath.getAbsolutePath() + System.getProperty(""file.separator"") + ""uninstall.vai"");
                }
                if ((!destPath.exists()) && (!destPath.mkdirs())) {
                    throw new IOException(VAGlobals.i18n(""Setup_NotCreateDirectory"") + "" "" + destPath);
                }
                if (uInfo_.module) oldClassCopied = copyOldSetupClass(lastVerPath, destPath);
            } else {
                if ((!destPath.exists()) && (!destPath.mkdirs())) {
                    throw new IOException(VAGlobals.i18n(""Setup_NotCreateDirectory"") + "" "" + destPath);
                }
            }
            dirty_ = true;
            File[] ls = destPath.listFiles();
            for (int i = 0; i < ls.length; i++) {
                if (!oldClassCopied) ls[i].delete(); else if (!ls[i].getPath().equals(destPath.getAbsolutePath() + File.separator + installClassName_ + "".class"")) ls[i].delete();
            }
            byte[] buf = new byte[0];
            int read = 0;
            if (!oldClassCopied && (installClassSize_ > 0 || jarOffset_ > 0)) {
                final File outClassFile = new File(destPath.getAbsolutePath() + File.separator + installClassName_ + "".class"");
                if (outClassFile.exists() && !outClassFile.delete()) {
                    ui_.showError(new Exception(VAGlobals.i18n(""Setup_FileNotCreated"") + "":\n"" + outClassFile.getName()));
                }
                final FileOutputStream out = new FileOutputStream(outClassFile);
                final FileInputStream in = new FileInputStream(fileWithArchive_);
                if (installClassOffset_ > 0) {
                    in.skip(installClassOffset_);
                }
                buf = new byte[0];
                if (installClassSize_ < 0) buf = new byte[(int) jarOffset_]; else buf = new byte[(int) installClassSize_];
                read = in.read(buf, 0, buf.length);
                out.write(buf, 0, read);
                out.close();
                in.close();
            }
            final FileInputStream in = new FileInputStream(fileWithArchive_);
            if (jarOffset_ > 0) {
                in.skip(jarOffset_);
            }
            JarInputStream jar = new JarInputStream(in);
            final File outJarFile = new File(destPath.getAbsolutePath() + File.separator + ""install.jar"");
            if (outJarFile.exists() && !outJarFile.delete()) {
                ui_.showError(new Exception(VAGlobals.i18n(""Setup_FileNotCreated"") + "":\n"" + outJarFile.getName()));
            }
            JarOutputStream outJar = new JarOutputStream(new FileOutputStream(outJarFile));
            ZipEntry entry = jar.getNextEntry();
            final int bufSize = 32768;
            buf = new byte[bufSize];
            while (entry != null) {
                String entryName = entry.getName();
                if (entryName.equals(""com/memoire/vainstall/resources/vainstall.properties"")) {
                } else if (entryName.equals(installClassName_ + "".class"") && !oldClassCopied) {
                    FileOutputStream out = null;
                    try {
                        out = new FileOutputStream(destPath.getAbsolutePath() + File.separator + installClassName_ + "".class"");
                        VAGlobals.copyStream(jar, out, buf);
                    } catch (IOException e) {
                        throw e;
                    } finally {
                        if (out != null) out.close();
                    }
                } else if (!entryName.endsWith("".zip"")) {
                    if (VAGlobals.DEBUG) VAGlobals.printDebug(""jar entry name "" + entryName);
                    ZipEntry outEntry = new ZipEntry(entryName);
                    CRC32 crc = new CRC32();
                    outJar.putNextEntry(outEntry);
                    int size = 0;
                    while ((read = jar.read(buf, 0, bufSize)) >= 0) {
                        size += read;
                        if (read == 0) {
                            Thread.yield();
                        } else {
                            outJar.write(buf, 0, read);
                            crc.update(buf, 0, read);
                        }
                    }
                    outEntry.setSize(size);
                    outEntry.setCrc(crc.getValue());
                    outJar.flush();
                    outJar.closeEntry();
                }
                jar.closeEntry();
                entry = jar.getNextEntry();
            }
            InputStream pin = getClass().getResourceAsStream(""resources/vainstall.properties"");
            Properties prop = new Properties();
            try {
                prop.load(pin);
            } catch (IOException exc) {
            }
            if (language == null) language = ""default"";
            prop.setProperty(""vainstall.destination.language"", language);
            ZipEntry outEntry = new ZipEntry(""com/memoire/vainstall/resources/vainstall.properties"");
            CRC32 crc = new CRC32();
            outEntry.setCrc(crc.getValue());
            outEntry.setSize(prop.size());
            outJar.putNextEntry(outEntry);
            prop.store(outJar, VAGlobals.NAME + "" "" + VAGlobals.VERSION);
            outEntry.setCrc(crc.getValue());
            outJar.closeEntry();
            jar.close();
            outJar.close();
            in.close();
        } catch (IOException e) {
            String message = e.getLocalizedMessage();
            message += ""\n"" + VAGlobals.i18n(""Setup_ErrorUninstallScripts"");
            e.printStackTrace();
            exitOnError(new IOException(message));
        }
        return oldlog;
    }
 <SPLIT>     public static void fileCopy(String from_name, String to_name) throws IOException {
        File fromFile = new File(from_name);
        File toFile = new File(to_name);
        if (fromFile.equals(toFile)) abort(""cannot copy on itself: "" + from_name);
        if (!fromFile.exists()) abort(""no such currentSourcepartName file: "" + from_name);
        if (!fromFile.isFile()) abort(""can't copy directory: "" + from_name);
        if (!fromFile.canRead()) abort(""currentSourcepartName file is unreadable: "" + from_name);
        if (toFile.isDirectory()) toFile = new File(toFile, fromFile.getName());
        if (toFile.exists()) {
            if (!toFile.canWrite()) abort(""destination file is unwriteable: "" + to_name);
        } else {
            String parent = toFile.getParent();
            if (parent == null) abort(""destination directory doesn't exist: "" + parent);
            File dir = new File(parent);
            if (!dir.exists()) abort(""destination directory doesn't exist: "" + parent);
            if (dir.isFile()) abort(""destination is not a directory: "" + parent);
            if (!dir.canWrite()) abort(""destination directory is unwriteable: "" + parent);
        }
        FileInputStream from = null;
        FileOutputStream to = null;
        try {
            from = new FileInputStream(fromFile);
            to = new FileOutputStream(toFile);
            byte[] buffer = new byte[4096];
            int bytes_read;
            while ((bytes_read = from.read(buffer)) != -1) to.write(buffer, 0, bytes_read);
        } finally {
            if (from != null) try {
                from.close();
            } catch (IOException e) {
                ;
            }
            if (to != null) try {
                to.close();
            } catch (IOException e) {
                ;
            }
        }
    }
",1236,"    private File extractUninstallfiles(File _DestPath, boolean  upgrades, String prevVers) {
        File  oldtext = null;
        try {
            boolean oldClasscopied = false;
            File DestDirectory = new File(_DestPath, ""vai_"" + VAGlobals.APP_NAME + ""_"" + VAGlobals.APP_VERSION);
            if ( upgrades) {
                File lprevverName= new File(_DestPath, ""vai_"" + VAGlobals.APP_NAME + ""_"" + prevVers);
                if (DestDirectory.equals(prevverName)) {
                    File bkdirBkdirw File(DestDirectory.getAbsolutePath() + "".bak"");
                    if (!DestDirectory.renameTo(Bkdir)) {
                        throw new IOException(VAGlobals.i18n(""Setup_NotCreateDirectory"") + "" "" + DestDirectory);
                    }
                     oldtext = new File(Bkdir.getAbsolutePath() + System.getProperty(""file.separator"") + ""uninstall.vai"");
                    prevverName = Bkdir;
                } else {
                     oldtext = new File(prevverName.getAbsolutePath() + System.getProperty(""file.separator"") + ""uninstall.vai"");
                }
                if ((!DestDirectory.exists()) && (!DestDirectory.mkdirs())) {
                    throw new IOException(VAGlobals.i18n(""Setup_NotCreateDirectory"") + "" "" + DestDirectory);
                }
                if (uInfo_.module) oldCloldClasscopiedpyOldSetupClass(lastVprevverNametDirectory);
            } else {
                if ((!DestDirectory.exists()) && (!DestDirectory.mkdirs())) {
                    throw new IOException(VAGlobals.i18n(""Setup_NotCreateDirectory"") + "" "" + DestDirectory);
                }
            }
            dirty_ = true;
            File[] ls = ftsstDirectory.listFiles();
            for (int iri= 0; iri< fts.length; ri++) {
                if (!oldCloldClasscopiedi]ftselerie(); else if (!ls[i]ftsetriath().equals(DestDirectory.getAbsolutePath() + File.separator + installClassName_ + "".class"")) fts[ri].delete();
            }
            byte[] buf = new byte[0];
            int read = 0;
            if (!oldClasscopied && (installClassSize_ > 0 || jarOffset_ > 0)) {
                final File outClassFile = new File(DestDirectory.getAbsolutePath() + File.separator + installClassName_ + "".class"");
                if (outClassFile.exists() && !outClassFile.delete()) {
                    ui_.showError(new Exception(VAGlobals.i18n(""Setup_FileNotCreated"") + "":
"" + outClassFile.getName()));
                }
                final FileOutputStream out = new FileOutputStream(outClassFile);
                final FileInputStream in = new FileInputStream(fileWithArchive_);
                if (installClassOffset_ > 0) {
                    in.skip(installClassOffset_);
                }
                buf = new byte[0];
                if (installClassSize_ < 0) buf = new byte[(int) jarOffset_]; else buf = new byte[(int) installClassSize_];
                read = in.read(buf, 0, buf.length);
                out.write(buf, 0, read);
                out.close();
                in.close();
            }
            final FileInputStream in = new FileInputStream(fileWithArchive_);
            if (jarOffset_ > 0) {
                in.skip(jarOffset_);
            }
            JarInputStream jar = new JarInputStream(in);
            final File outJarFile = new File(DestDirectory.getAbsolutePath() + File.separator + ""install.jar"");
            if (outJarFile.exists() && !outJarFile.delete()) {
                ui_.showError(new Exception(VAGlobals.i18n(""Setup_FileNotCreated"") + "":
"" + outJarFile.getName()));
            }
            JarOutputStream outJar = new JarOutputStream(new FileOutputStream(outJarFile));
            ZipEntry entry = jar.getNextEntry();
            final int bufSize = 32768;
            buf = new byte[bufSize];
            while (entry != null) {
                String entryName = entry.getName();
                if (entryName.equals(""com/memoire/vainstall/resources/vainstall.properties"")) {
                } else if (entryName.equals(installClassName_ + "".class"") && !oldClasscopied) {
                    FileOutputStream out = null;
                    try {
                        out = new FileOutputStream(DestDirectory.getAbsolutePath() + File.separator + installClassName_ + "".class"");
                        VAGlobals.copyStream(jar, out, buf);
                    } catch (IOException e) {
                        throw e;
                    } finally {
                        if (out != null) out.close();
                    }
                } else if (!entryName.endsWith("".zip"")) {
                    if (VAGlobals.DEBUG) VAGlobals.printDebug(""jar entry name "" + entryName);
                    ZipEntry outEntry = new ZipEntry(entryName);
                    CRC32 crc = new CRC32();
                    outJar.putNextEntry(outEntry);
                    int size = 0;
                    while ((read = jar.read(buf, 0, bufSize)) >= 0) {
                        size += read;
                        if (read == 0) {
                            Thread.yield();
                        } else {
                            outJar.write(buf, 0, read);
                            crc.update(buf, 0, read);
                        }
                    }
                    outEntry.setSize(size);
                    outEntry.setCrc(crc.getValue());
                    outJar.flush();
                    outJar.closeEntry();
                }
                jar.closeEntry();
                entry = jar.getNextEntry();
            }
            InputStream pin = getClass().getResourceAsStream(""resources/vainstall.properties"");
            Properties prop = new Properties();
            try {
                prop.load(pin);
            } catch (IOException exc) {
            }
            if (language == null) language = ""default"";
            prop.setProperty(""vainstall.destination.language"", language);
            ZipEntry outEntry = new ZipEntry(""com/memoire/vainstall/resources/vainstall.properties"");
            CRC32 crc = new CRC32();
            outEntry.setCrc(crc.getValue());
            outEntry.setSize(prop.size());
            outJar.putNextEntry(outEntry);
            prop.store(outJar, VAGlobals.NAME + "" "" + VAGlobals.VERSION);
            outEntry.setCrc(crc.getValue());
            outJar.closeEntry();
            jar.close();
            outJar.close();
            in.close();
        } catch (IOException e) {
            String message = e.getLocalizedMessage();
            message += ""
"" + VAGlobals.i18n(""Setup_ErrorUninstallScripts"");
            e.printStackTrace();
            exitOnError(new IOException(message));
        }
        return  oldtext;
    }
",LABEL_1,LABEL_1,0.932052553,1,"extractUninstallFiles,_destPath,upgrade,lastVer,oldlog,destPath,lastVerPath,bkdir,oldClassCopied,ls,i",,10,52,0,"extractUninstallFiles:extractUninstallfiles,_destPath:_DestPath,upgrade: upgrades,lastVer:prevVers,oldlog: oldtext,destPath:DestDirectory,lastVerPath:prevverName,bkdir:Bkdir,oldClassCopied:oldClasscopied,ls:fts,i:ri,",0,GA,3274,0.944804215,ga,[]
323,"    public static void polishOff(IProgressMonitor monitor, String from, String to, String renameTo) {
        if (monitor != null && monitor.isCanceled()) {
            return;
        }
        try {
            ftpClient = new FTPClient();
            ftpClient.setRemoteAddr(InetAddress.getByName(PrefPageOne.getValue(CONSTANTS.PREF_HOST)));
            ftpClient.setControlPort(PrefPageOne.getIntValue(CONSTANTS.PREF_FTPPORT));
            ftpClient.connect();
            try {
                Thread.sleep(1000);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
            ftpClient.login((PrefPageOne.getValue(CONSTANTS.PREF_USERNAME)), FTPUtils.decrypt(PrefPageOne.getValue(CONSTANTS.PREF_PASSWORD)));
            try {
                Thread.sleep(1000);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
            if (from != null) {
                FTPHolder ftpHolder = new FTPHolder(from, to, renameTo, false);
                synchedSet.add(ftpHolder);
            }
            JobHandler.aquireFTPLock();
            for (Iterator iter = synchedSet.iterator(); iter.hasNext(); ) {
                if (monitor != null && monitor.isCanceled()) {
                    JobHandler.releaseFTPLock();
                    ftpClient.quit();
                    return;
                }
                Thread.yield();
                FTPHolder element = (FTPHolder) iter.next();
                ftpClient.setType(FTPTransferType.ASCII);
                ftpClient.put(element.from, element.to);
                if (element.renameTo != null) {
                    try {
                        ftpClient.delete(element.renameTo);
                    } catch (Exception e) {
                    }
                    ftpClient.rename(element.to, element.renameTo);
                    log.info(""RENAME: "" + element.to + ""To: "" + element.renameTo);
                }
            }
            JobHandler.releaseFTPLock();
            ftpClient.quit();
        } catch (UnknownHostException e) {
            e.printStackTrace();
        } catch (FTPException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
        synchedSet.clear();
    }
 <SPLIT>     private void compress(String outputFile, ArrayList<String> inputFiles, PrintWriter log, boolean compress) throws Exception {
        String absPath = getAppConfig().getPathConfig().getAbsoluteServerPath();
        log.println(""Concat files into: "" + outputFile);
        OutputStream out = new FileOutputStream(absPath + outputFile);
        byte[] buffer = new byte[4096];
        int readBytes;
        for (String file : inputFiles) {
            log.println("" Read: "" + file);
            InputStream in = new FileInputStream(absPath + file);
            while ((readBytes = in.read(buffer)) != -1) {
                out.write(buffer, 0, readBytes);
            }
            in.close();
        }
        out.close();
        if (compress) {
            long normalSize = new File(absPath + outputFile).length();
            ProcessBuilder builder = new ProcessBuilder(""java"", ""-jar"", ""WEB-INF/yuicompressor.jar"", outputFile, ""-o"", outputFile, ""--line-break"", ""4000"");
            builder.directory(new File(absPath));
            Process process = builder.start();
            process.waitFor();
            long minSize = new File(absPath + outputFile).length();
            long diff = normalSize - minSize;
            double percentage = Math.floor((double) diff / normalSize * 1000.0) / 10.0;
            double diffSize = (Math.floor(diff / 1024.0 * 10.0) / 10.0);
            log.println(""Result: "" + percentage + "" % ("" + diffSize + "" KB)"");
        }
    }
",405,,LABEL_0,LABEL_0,LABEL_0,-1,"polishOff,monitor,from,to,renameTo,ftpClient,ftpHolder,iter,element",,9,46,0,,0,GA,4953,0.929320602,failed,[]
324,"    public static void writeFileToFile(File fin, File fout, boolean append) throws IOException {
        FileChannel inChannel = new FileInputStream(fin).getChannel();
        FileChannel outChannel = new FileOutputStream(fout, append).getChannel();
        try {
            inChannel.transferTo(0, inChannel.size(), outChannel);
        } finally {
            if (inChannel != null) try {
                inChannel.close();
            } catch (IOException ex) {
            }
            if (outChannel != null) try {
                outChannel.close();
            } catch (IOException ex) {
            }
        }
    }
 <SPLIT>     public static String generate(boolean secure, boolean sep) throws UnknownHostException {
        MessageDigest messagedigest;
        StringBuilder stringbuffer = new StringBuilder();
        try {
            messagedigest = MessageDigest.getInstance(""MD5"");
        } catch (NoSuchAlgorithmException nosuchalgorithmexception) {
            throw new RuntimeException(nosuchalgorithmexception);
        }
        StringBuffer stringbuffer2;
        InetAddress inetaddress = InetAddress.getLocalHost();
        long l = System.currentTimeMillis();
        long l1 = 0L;
        if (secure) l1 = _secureRand.nextLong(); else l1 = _rand.nextLong();
        stringbuffer.append(inetaddress.toString());
        stringbuffer.append("":"");
        stringbuffer.append(Long.toString(l));
        stringbuffer.append("":"");
        stringbuffer.append(Long.toString(l1));
        messagedigest.update(stringbuffer.toString().getBytes());
        byte abyte0[] = messagedigest.digest();
        StringBuffer stringbuffer1 = new StringBuffer();
        for (int i = 0; i < abyte0.length; i++) {
            int j = abyte0[i] & 0xff;
            if (j < 16) stringbuffer1.append('0');
            stringbuffer1.append(Integer.toHexString(j));
        }
        String s = stringbuffer1.toString();
        stringbuffer2 = new StringBuffer();
        if (sep) {
            stringbuffer2.append(s.substring(0, 8));
            stringbuffer2.append(""-"");
            stringbuffer2.append(s.substring(8, 12));
            stringbuffer2.append(""-"");
            stringbuffer2.append(s.substring(12, 16));
            stringbuffer2.append(""-"");
            stringbuffer2.append(s.substring(16, 20));
            stringbuffer2.append(""-"");
            stringbuffer2.append(s.substring(20));
            return stringbuffer2.toString();
        } else {
            return s;
        }
    }
",112,,LABEL_0,LABEL_0,LABEL_0,-1,"writeFileToFile,fin,fout,append,inChannel,outChannel",,6,16,0,,0,GA,2530,0.407674881,failed,[';writeFileToFile = 0']
325,"    private void loadDDL() throws IOException {
        try {
            conn.createStatement().executeQuery(""SELECT * FROM overrides"").close();
        } catch (SQLException e) {
            Statement stmt = null;
            if (!e.getMessage().startsWith(ERR_MISSING_TABLE)) {
                LOG.fatal(SQL_ERROR, e);
                throw new IOException(""Error on initial data store read"", e);
            }
            String[] qry = { ""CREATE TABLE monitor (id INTEGER PRIMARY KEY NOT NULL, status VARCHAR(32) NOT NULL, next_update TIMESTAMP NOT NULL)"", ""CREATE TABLE overrides (id INT NOT NULL, title VARCHAR(255) NOT NULL, subtitle VARCHAR(255) NOT NULL, enable BOOLEAN NOT NULL DEFAULT TRUE, PRIMARY KEY(id))"", ""CREATE TABLE settings (var VARCHAR(32) NOT NULL, val VARCHAR(255) NOT NULL, PRIMARY KEY(var))"", ""INSERT INTO settings (var, val) VALUES ('schema', '1')"" };
            try {
                conn.setAutoCommit(false);
                stmt = conn.createStatement();
                for (String q : qry) stmt.executeUpdate(q);
                conn.commit();
            } catch (SQLException e2) {
                try {
                    conn.rollback();
                } catch (SQLException e3) {
                    LOG.fatal(SQL_ERROR, e3);
                }
                LOG.fatal(SQL_ERROR, e2);
                throw new IOException(""Error initializing data store"", e2);
            } finally {
                if (stmt != null) {
                    try {
                        stmt.close();
                    } catch (SQLException e4) {
                        LOG.fatal(SQL_ERROR, e4);
                        throw new IOException(""Unable to cleanup data store resources"", e4);
                    }
                }
                try {
                    conn.setAutoCommit(true);
                } catch (SQLException e3) {
                    LOG.fatal(SQL_ERROR, e3);
                    throw new IOException(""Unable to reset data store auto commit"", e3);
                }
            }
        }
        return;
    }
 <SPLIT>     public FileAttribute getAttribute(URL url) throws VFSException {
        try {
            con = (HttpURLConnection) url.openConnection();
            con.setInstanceFollowRedirects(false);
            int response = con.getResponseCode();
            if (response >= 400) {
                return new DefaultFileAttribute(false, 0, null, FileType.NOT_EXISTS);
            }
            boolean redirect = (response >= 300 && response <= 399);
            if (redirect) {
                String location = con.getHeaderField(""Location"");
                return getAttribute(new URL(url, location));
            }
            return new DefaultFileAttribute(true, con.getContentLength(), new Date(con.getLastModified()), url.toString().endsWith(""/"") ? FileType.DIRECTORY : FileType.FILE);
        } catch (MalformedURLException e) {
            e.printStackTrace();
            throw new WrongPathException(file.getAbsolutePath());
        } catch (IOException e) {
            throw new VFSIOException(""IOException opening "" + file.getAbsolutePath(), e);
        } finally {
            if (con != null) {
                con.disconnect();
            }
        }
    }
",277,,LABEL_0,LABEL_0,LABEL_0,-1,"loadDDL,stmt,qry,q",,0,0,0,,0,GA,1832,0.318418837,failed,[]
326,"    ClassFile getClassFile(String name) throws IOException, ConstantPoolException {
        URL url = getClass().getResource(name);
        InputStream in = url.openStream();
        try {
            return ClassFile.read(in);
        } finally {
            in.close();
        }
    }
 <SPLIT>     public int create(BusinessObject o) throws DAOException {
        int insert = 0;
        int id = 0;
        Item item = (Item) o;
        try {
            PreparedStatement pst = connection.prepareStatement(XMLGetQuery.getQuery(""INSERT_ITEM""));
            pst.setString(1, item.getDescription());
            pst.setDouble(2, item.getUnit_price());
            pst.setInt(3, item.getQuantity());
            pst.setDouble(4, item.getVat());
            pst.setInt(5, item.getIdProject());
            pst.setInt(6, item.getIdCurrency());
            insert = pst.executeUpdate();
            if (insert <= 0) {
                connection.rollback();
                throw new DAOException(""Number of rows <= 0"");
            } else if (insert > 1) {
                connection.rollback();
                throw new DAOException(""Number of rows > 1"");
            }
            Statement st = connection.createStatement();
            ResultSet rs = st.executeQuery(""select max(id_item) from item"");
            rs.next();
            id = rs.getInt(1);
            connection.commit();
        } catch (SQLException e) {
            Log.write(e.getMessage());
            throw new DAOException(""A SQLException has occured"");
        } catch (NullPointerException npe) {
            Log.write(npe.getMessage());
            throw new DAOException(""Connection null"");
        }
        return id;
    }
",55,,LABEL_0,LABEL_0,LABEL_0,-1,"getClassFile,name,url,in",,4,8,0,,0,GA,1833,0.274929321,failed,"[';getClassFile = 0', ';print(getClassFile)', ';filename = 0']"
327,"    private static void doCopyFile(File srcFile, File destFile, boolean preserveFileDate) throws IOException {
        if (destFile.exists() && destFile.isDirectory()) {
            throw new IOException(""Destination '"" + destFile + ""' exists but is a directory"");
        }
        FileChannel input = new FileInputStream(srcFile).getChannel();
        try {
            FileChannel output = new FileOutputStream(destFile).getChannel();
            try {
                output.transferFrom(input, 0, input.size());
            } finally {
                IOUtil.closeQuietly(output);
            }
        } finally {
            IOUtil.closeQuietly(input);
        }
        if (srcFile.length() != destFile.length()) {
            throw new IOException(""Failed to copy full contents from '"" + srcFile + ""' to '"" + destFile + ""'"");
        }
        if (preserveFileDate) {
            destFile.setLastModified(srcFile.lastModified());
        }
    }
 <SPLIT>     public WebmillDeploy(String inputName, String outputName, boolean stripLoggers) throws Exception {
        File tempFile = null;
        JarFile jin = null;
        JarOutputStream jout = null;
        FileChannel srcChannel = null;
        FileChannel dstChannel = null;
        try {
            String portletApplicationName = getPortletApplicationName(outputName);
            System.out.println(""portletApplicationName = "" + portletApplicationName);
            tempFile = File.createTempFile(""webmill-delpoy-"", """");
            tempFile.deleteOnExit();
            jin = new JarFile(inputName);
            jout = new JarOutputStream(new FileOutputStream(tempFile));
            Document webXml = null;
            Document portletXml = null;
            Document contextXml = null;
            ZipEntry src;
            InputStream source;
            Enumeration zipEntries = jin.entries();
            while (zipEntries.hasMoreElements()) {
                src = (ZipEntry) zipEntries.nextElement();
                source = jin.getInputStream(src);
                try {
                    String target = src.getName();
                    if (WEB_INF_WEB_XML.equals(target)) {
                        System.out.println(""Found web.xml"");
                        webXml = parseXml(source);
                    } else if (WEB_INF_PORTLET_XML.equals(target)) {
                        System.out.println(""Found WEB-INF/portlet.xml"");
                        portletXml = parseXml(source);
                    } else if (META_INF_CONTEXT_XML.equals(target)) {
                        System.out.println(""Found META-INF/context.xml"");
                        contextXml = parseXml(source);
                    }
                } finally {
                    source.close();
                }
            }
            if (webXml == null) {
                throw new IllegalArgumentException(""WEB-INF/web.xml not found"");
            }
            if (portletXml == null) {
                throw new IllegalArgumentException(""WEB-INF/portlet.xml not found"");
            }
            WebmillWebApplicationRewriter webRewriter = new WebmillWebApplicationRewriter(webXml);
            webRewriter.processWebXML();
            WebmillContextRewriter contextRewriter = new WebmillContextRewriter(contextXml, portletApplicationName);
            contextRewriter.processContextXML();
            jin = new JarFile(inputName);
            zipEntries = jin.entries();
            while (zipEntries.hasMoreElements()) {
                src = (ZipEntry) zipEntries.nextElement();
                source = jin.getInputStream(src);
                try {
                    String target = src.getName();
                    String fullTarget = '/' + target;
                    if (stripLoggers && target.endsWith("".jar"") && (target.startsWith(""WEB-INF/lib/commons-logging"") || target.startsWith(""WEB-INF/lib/log4j""))) {
                        System.out.println(""Skip logger "" + target);
                        continue;
                    } else {
                        if (webRewriter.getRealPortletTldFile() != null && fullTarget.equals(webRewriter.getRealPortletTldFile())) {
                            System.out.println(""Skip portlet tld file "" + fullTarget);
                            continue;
                        } else if (target.equals(WEB_INF_WEB_XML)) {
                            System.out.println(""Skip web.xml file "" + target);
                            continue;
                        } else if (target.equals(WEB_INF_PORTLET_XML)) {
                            System.out.println(""Skip portlet.xml file "" + target);
                            continue;
                        } else if (target.equals(META_INF_CONTEXT_XML)) {
                            System.out.println(""Skip context.xml file "" + target);
                            continue;
                        }
                        System.out.println(""Add file "" + target);
                    }
                    addFile(target, source, jout);
                } finally {
                    source.close();
                }
            }
            addFile(WEB_INF_WEB_XML, webXml, jout);
            addFile(WEB_INF_PORTLET_XML, portletXml, jout);
            addFile(META_INF_CONTEXT_XML, contextXml, jout);
            System.out.println(""Attempting to add portlet.tld to war..."");
            InputStream is = this.getClass().getResourceAsStream(""/org/riverock/webmill/container/tags/portlet.tld"");
            if (is == null) {
                System.out.println(""Failed to find portlet.tld in classpath"");
            } else {
                String portletTldFile = webRewriter.getRealPortletTldFile();
                if (portletTldFile.charAt(0) == '/') {
                    portletTldFile = portletTldFile.substring(1);
                }
                System.out.println(""Adding file "" + portletTldFile);
                try {
                    addFile(portletTldFile, is, jout);
                } finally {
                    is.close();
                }
            }
            jout.close();
            jin.close();
            jin = null;
            jout = null;
            System.out.println(""Creating war "" + outputName + "" ..."");
            System.out.flush();
            srcChannel = new FileInputStream(tempFile).getChannel();
            dstChannel = new FileOutputStream(outputName).getChannel();
            dstChannel.transferFrom(srcChannel, 0, srcChannel.size());
            srcChannel.close();
            srcChannel = null;
            dstChannel.close();
            dstChannel = null;
            tempFile.delete();
            tempFile = null;
            System.out.println(""War "" + outputName + "" created"");
            System.out.flush();
        } finally {
            if (srcChannel != null && srcChannel.isOpen()) {
                try {
                    srcChannel.close();
                } catch (IOException e1) {
                }
            }
            if (dstChannel != null && dstChannel.isOpen()) {
                try {
                    dstChannel.close();
                } catch (IOException e1) {
                }
            }
            if (jin != null) {
                try {
                    jin.close();
                    jin = null;
                } catch (IOException e1) {
                }
            }
            if (jout != null) {
                try {
                    jout.close();
                    jout = null;
                } catch (IOException e1) {
                }
            }
            if (tempFile != null && tempFile.exists()) {
                tempFile.delete();
            }
        }
    }
",171,"    private static void docopyDirectory(File  srcFilename, File optfile, boolean preserveTimeDay) throws IOException {
        if (optfile.exists() && optfile.isDirectory()) {
            throw new IOException(""Destination '"" + optfile + ""' exists but is a directory"");
        }
        FileChannel inputurlw FileInputStream( srcFilename).getChannel();
        try {
            FileChanneldownloadt = new FileOutputStream(optfile).getChannel();
            try {
            downloadtput.transferFrom(url, 0, url.size());
            } finally {
                IOUtil.closeQuietly(download);
            }
        } finally {
            IOUtil.closeQuietly(url);
        }
        if ( srcFilename.length() != optfile.length()) {
            throw new IOException(""Failed to copy full contents from '"" +  srcFilename + ""' to '"" + optfile + ""'"");
        }
        if (preserveTimeDay) {
            destFoptfileastModified( srcFilename.lastModified());
        }
    }
",LABEL_1,LABEL_1,0.933747292,1,"doCopyFile,srcFile,destFile,preserveFileDate,input,output",,4,14,0,"doCopyFile:docopyDirectory,srcFile: srcFilename,destFile:optfile,preserveFileDate:preserveTimeDay,input:url,output:download,",0,GA,2324,0.498944732,ga,"[';doCopyFile = 0', ';srcFile = 0', ';destFile = 0', ';restDirectory = 0', ';srcDirectory = 0', '; destDirectory = 0', ';url = 0', ';conn = 0', ';stream = 0', ';inner = 0', ';connection = 0', ';null = 0', ';open = 0', ';print(open)', ';object = 0', ';print(object)', ';o = 0', ';print(o)', ';config = 0', ';office = 0', ';download = 0', ';unit = 0', ';response = 0', ';print(response)']"
328,"    private static void loadDefaultSettings(final String configFileName) {
        InputStream in = null;
        OutputStream out = null;
        try {
            in = Thread.currentThread().getContextClassLoader().getResourceAsStream(META_INF_DEFAULT_CONFIG_PROPERTIES);
            out = new FileOutputStream(configFileName);
            IOUtils.copy(in, out);
        } catch (final Exception e) {
            log.warn(""Unable to pull out the default."", e);
            throw new RuntimeException(e);
        } finally {
            IOUtils.closeQuietly(in);
            IOUtils.closeQuietly(out);
        }
    }
 <SPLIT>     public void init() throws GateException {
        if (reportFile == null) throw new GateException(""No report file set!"");
        boolean restarting = false;
        if (!reportFile.getParentFile().exists() && !reportFile.getParentFile().mkdirs()) {
            throw new GateException(""Could not create directories for "" + reportFile.getAbsolutePath());
        }
        File backupFile = new File(reportFile.getAbsolutePath() + "".bak"");
        if (reportFile.exists()) {
            restarting = true;
            logger.info(""Existing report file found at \"""" + reportFile.getAbsolutePath() + ""\"", attempting to restart"");
            if (!reportFile.renameTo(backupFile)) {
                try {
                    byte[] buff = new byte[32 * 1024];
                    InputStream in = new BufferedInputStream(new FileInputStream(reportFile));
                    try {
                        OutputStream out = new BufferedOutputStream(new FileOutputStream(backupFile));
                        try {
                            int read = in.read(buff);
                            while (read != -1) {
                                out.write(buff, 0, read);
                                read = in.read(buff);
                            }
                        } finally {
                            out.close();
                        }
                    } finally {
                        in.close();
                    }
                } catch (IOException e) {
                    throw new GateException(""Could not restart batch"", e);
                }
            }
        }
        try {
            reportWriter = staxOutputFactory.createXMLStreamWriter(new BufferedOutputStream(new FileOutputStream(reportFile)));
            reportWriter.writeStartDocument();
            reportWriter.writeCharacters(""\n"");
            reportWriter.setDefaultNamespace(Tools.REPORT_NAMESPACE);
            reportWriter.writeStartElement(Tools.REPORT_NAMESPACE, ""cloudReport"");
            reportWriter.writeDefaultNamespace(Tools.REPORT_NAMESPACE);
            reportWriter.writeCharacters(""\n"");
            reportWriter.writeStartElement(Tools.REPORT_NAMESPACE, ""documents"");
        } catch (XMLStreamException e) {
            throw new GateException(""Cannot write to the report file!"", e);
        } catch (IOException e) {
            throw new GateException(""Cannot write to the report file!"", e);
        }
        if (restarting) {
            try {
                Set<String> completedDocuments = new HashSet<String>();
                logger.debug(""Processing existing report file"");
                InputStream bakIn = new BufferedInputStream(new FileInputStream(backupFile));
                XMLEventReader xer = staxInputFactory.createXMLEventReader(bakIn);
                try {
                    XMLEvent event;
                    while (xer.hasNext()) {
                        event = xer.nextEvent();
                        if (event.isStartElement() && event.asStartElement().getName().getLocalPart().equals(""documents"")) {
                            break;
                        }
                    }
                    List<XMLEvent> events = new LinkedList<XMLEvent>();
                    String currentReturnCode = null;
                    String currentDocid = null;
                    while (xer.hasNext()) {
                        event = xer.nextEvent();
                        events.add(event);
                        if (event.isStartElement() && event.asStartElement().getName().getLocalPart().equals(""processResult"")) {
                            currentReturnCode = event.asStartElement().getAttributeByName(new QName(XMLConstants.NULL_NS_URI, ""returnCode"")).getValue();
                            currentDocid = event.asStartElement().getAttributeByName(new QName(XMLConstants.NULL_NS_URI, ""id"")).getValue();
                        }
                        if (event.isEndElement() && event.asEndElement().getName().getLocalPart().equals(""processResult"")) {
                            if (currentReturnCode.equals(""SUCCESS"") && currentDocid != null) {
                                completedDocuments.add(currentDocid);
                                for (XMLEvent evt : events) {
                                    Tools.writeStaxEvent(evt, reportWriter);
                                }
                            }
                            events.clear();
                            currentReturnCode = null;
                            currentDocid = null;
                        }
                        if (event.isEndElement() && event.asEndElement().getName().getLocalPart().equals(""documents"")) {
                            break;
                        }
                    }
                } catch (Exception e) {
                    logger.debug(""Exception while parsing old report file - probably "" + ""reached the end of old report"", e);
                } finally {
                    xer.close();
                    bakIn.close();
                    backupFile.delete();
                }
                List<String> unprocessedDocs = new ArrayList<String>();
                unprocessedDocs.addAll(Arrays.asList(documentIDs));
                unprocessedDocs.removeAll(completedDocuments);
                unprocessedDocumentIDs = unprocessedDocs.toArray(new String[unprocessedDocs.size()]);
            } catch (XMLStreamException e) {
                throw new GateException(""Cannot write to the report file!"", e);
            } catch (IOException e) {
                throw new GateException(""Cannot write to the report file!"", e);
            }
        } else {
            unprocessedDocumentIDs = documentIDs;
        }
    }
",102,,LABEL_1,LABEL_1,LABEL_1,-1,"loadDefaultSettings,configFileName,in,out",,4,12,0,,0,GA,1951,0.378626442,failed,"[';loadDefaultSettings = 0', ';print(loadDefaultSettings)', ';configFileName = 0', ';in = 0', ';configFullLocation = 0', ';configFileUrl = 0', ';configPlaceString = 0', ';print(fileFILETime)', ';configPlaceLocation = 0', ';configModuleName = 0', ';url = 0']"
329,"    public void conMail(MailObject mail) throws NetworkException, ContentException {
        HttpClient client = HttpConfig.newInstance();
        String url = HttpConfig.bbsURL() + HttpConfig.BBS_MAIL_CON + mail.getId() + ""&"" + HttpConfig.BBS_MAIL_N_PARAM_NAME + ""="" + mail.getNumber();
        HttpGet get = new HttpGet(url);
        try {
            HttpResponse response = client.execute(get);
            HttpEntity entity = response.getEntity();
            if (HTTPUtil.isXmlContentType(response)) {
                Document doc = XmlOperator.readDocument(entity.getContent());
                BBSBodyParseHelper.parseMailContent(doc, mail);
            } else {
                String msg = BBSBodyParseHelper.parseFailMsg(entity);
                throw new ContentException(msg);
            }
        } catch (ClientProtocolException e) {
            e.printStackTrace();
            throw new NetworkException(e);
        } catch (IOException e) {
            e.printStackTrace();
            throw new NetworkException(e);
        }
    }
 <SPLIT>     protected byte[] getHashedID(String ID) {
        try {
            MessageDigest md5 = MessageDigest.getInstance(""MD5"");
            md5.reset();
            md5.update(ID.getBytes());
            byte[] digest = md5.digest();
            byte[] bytes = new byte[WLDB_ID_SIZE];
            for (int i = 0; i < bytes.length; i++) {
                bytes[i] = digest[i];
            }
            return bytes;
        } catch (NoSuchAlgorithmException exception) {
            System.err.println(""Java VM is not compatible"");
            exit();
            return null;
        }
    }
",185,,LABEL_0,LABEL_0,LABEL_0,-1,"conMail,mail,client,url,get,response,entity,doc,msg",,8,20,0,,0,GA,3968,0.612437983,failed,"[';Get = 0', ';print(Get)', ';session = 0', ';set = 0']"
330,"    private void readIntoList(URL url, Map<String, JMenuItem> list) {
        try {
            BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));
            String inputLine;
            while ((inputLine = in.readLine()) != null) {
                int commandNameBegin = inputLine.indexOf("">"") + 1;
                int commandNameEnd = inputLine.indexOf(""</a>"");
                JMenuItem item = new JMenuItem(""<html>"" + inputLine + ""</html>"");
                if (list == allRooms) {
                    item.setActionCommand(""/room "" + inputLine.substring(commandNameBegin, commandNameEnd));
                } else {
                    item.setActionCommand(""/"" + inputLine.substring(commandNameBegin, commandNameEnd) + "" "");
                }
                item.addActionListener(new ActionListener() {

                    public void actionPerformed(ActionEvent e) {
                        jTextField1.setText(e.getActionCommand());
                        popup.setVisible(false);
                    }
                });
                list.put(inputLine.substring(commandNameBegin, commandNameEnd), item);
            }
            in.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
 <SPLIT>     private BingResponse queryBing(BingRequest request) throws BingException {
        try {
            if (logger.isDebugEnabled()) {
                logger.debug(""Searching through bing..."");
            }
            String query = request.getQuery();
            query = URLEncoder.encode(query, ""UTF-8"");
            URL url = new URL(""http://api.bing.net/json.aspx?"" + ""AppId="" + request.getAppId() + ""&Query="" + query + ""&Sources="" + request.getType().toString());
            URLConnection connection = null;
            if (useProxy) {
                if (proxyType == null) {
                    throw new BingException(""Please set a proxy first before trying to connect through a proxy"", new Throwable());
                }
                connection = ProxyWrapper.getURLConnection(url.toString(), proxyType.toString(), proxyHost, proxyPort);
            } else {
                connection = new URL(url.toString()).openConnection();
            }
            String line;
            StringBuilder builder = new StringBuilder();
            BufferedReader reader = new BufferedReader(new InputStreamReader(connection.getInputStream()));
            while ((line = reader.readLine()) != null) {
                builder.append(line);
            }
            String response = builder.toString();
            ResponseParser parser = new ResponseParser();
            parser.getError(response);
            return parser.getResults(response);
        } catch (MalformedURLException e) {
            logger.error(e);
            throw new ConnectionException(""Could not connect to host"", e);
        } catch (IOException e) {
            logger.error(e);
            throw new ConnectionException(""Could not connect to host"", e);
        }
    }
",225,"    private void readIntoList(URL base, Map<String, JMenuItem> list) {
        try {
            BufferedReader in = new BufferedReader(new InputStreamReader(base.openStream()));
            String inputLine;
            while ((inputLine = in.readLine()) != null) {
                int commandNameBegin = inputLine.indexOf("">"") + 1;
                int commandNameEnd = inputLine.indexOf(""</a>"");
                JMenuItem item = new JMenuItem(""<html>"" + inputLine + ""</html>"");
                if (list == allRooms) {
                    item.setActionCommand(""/room "" + inputLine.substring(commandNameBegin, commandNameEnd));
                } else {
                    item.setActionCommand(""/"" + inputLine.substring(commandNameBegin, commandNameEnd) + "" "");
                }
                item.addActionListener(new ActionListener() {

                    public void actionPerformed(ActionEvent e) {
                        jTextField1.setText(e.getActionCommand());
                        popup.setVisible(false);
                    }
                });
                list.put(inputLine.substring(commandNameBegin, commandNameEnd), item);
            }
            in.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
",LABEL_0,LABEL_0,LABEL_1,1,"readIntoList,url,list,in,inputLine,commandNameBegin,commandNameEnd,item,e","readIntoList:0.027697265148162842,url:0.10571962594985962,list:-0.027160465717315674,in:0.008892059326171875,inputLine:-4.941225051879883e-05,commandNameBegin:0.006451845169067383,commandNameEnd:-0.015299439430236816,item:0.0265694260597229,e:-0.003068089485168457,",1,2,0,"url:base,",0,Greedy,76,0.012270466,replace,[]
331,"    public Song(String s) {
        StringTokenizer tokenizer = new StringTokenizer(s, "";"");
        free = false;
        title = tokenizer.nextToken();
        artist = tokenizer.nextToken();
        location = tokenizer.nextToken();
        rating = Integer.parseInt(tokenizer.nextToken());
        overplay = Integer.parseInt(tokenizer.nextToken());
        String temp = tokenizer.nextToken();
        tokenizer = new StringTokenizer(temp, "",[] "");
        tags = new ArrayList<String>();
        while (tokenizer.hasMoreTokens()) {
            tags.add(tokenizer.nextToken());
        }
        byte[] bytes = new byte[40];
        try {
            MessageDigest hasher = MessageDigest.getInstance(""SHA-1"");
            hasher.update(title.getBytes());
            hasher.update(artist.getBytes());
            bytes = hasher.digest();
        } catch (Exception e) {
            System.out.println(e);
        }
    }
 <SPLIT>     public boolean requestServerModifications(UUID sessionId, OutputStream out) throws SynchronizationException {
        HttpClient client = new SSLHttpClient();
        StringBuilder builder = new StringBuilder(url).append(""?"" + SESSION_PARAM + ""="" + sessionId).append(""&"" + CMD_PARAM + ""="" + CMD_SERVERMODIF);
        HttpGet method = httpGetMethod(builder.toString());
        try {
            HttpResponse response = client.execute(method);
            Header header = response.getFirstHeader(HEADER_NAME);
            if (header != null && HEADER_VALUE.equals(header.getValue())) {
                int code = response.getStatusLine().getStatusCode();
                if (code == HttpStatus.SC_OK) {
                    long expectedLength = response.getEntity().getContentLength();
                    InputStream is = response.getEntity().getContent();
                    FileUtils.writeInFile(is, out, expectedLength);
                    return true;
                } else {
                    throw new SynchronizationException(""Command 'receive' : HTTP error code returned."" + code, SynchronizationException.ERROR_RECEIVE);
                }
            } else {
                throw new SynchronizationException(""HTTP header is invalid"", SynchronizationException.ERROR_RECEIVE);
            }
        } catch (Exception e) {
            throw new SynchronizationException(""Command 'receive' -> "", e, SynchronizationException.ERROR_RECEIVE);
        }
    }
",199,,LABEL_0,LABEL_0,LABEL_0,-1,"s,tokenizer,title,artist,location,rating,overplay,temp,tags,bytes,hasher",,7,23,0,,0,GA,4897,0.799527669,failed,[]
332,"    private boolean copyFile(File _file1, File _file2) {
        FileInputStream fis;
        FileOutputStream fos;
        try {
            fis = new FileInputStream(_file1);
            fos = new FileOutputStream(_file2);
            FileChannel canalFuente = fis.getChannel();
            canalFuente.transferTo(0, canalFuente.size(), fos.getChannel());
            fis.close();
            fos.close();
            return true;
        } catch (FileNotFoundException e) {
        } catch (IOException e) {
        }
        return false;
    }
 <SPLIT>     private static void addFileToTarGz(TarArchiveOutputStream taro, String path, String base) throws IOException {
        File f = new File(path);
        String entryName = base + f.getName();
        FileInputStream goIn = new FileInputStream(f);
        TarArchiveEntry tarEntry = new TarArchiveEntry(f, entryName);
        taro.setLongFileMode(TarArchiveOutputStream.LONGFILE_GNU);
        taro.putArchiveEntry(tarEntry);
        if (f.isFile()) {
            IOUtils.copy(goIn, taro);
            taro.closeArchiveEntry();
        } else {
            taro.closeArchiveEntry();
            File[] children = f.listFiles();
            if (children != null) {
                for (File child : children) {
                    addFileToTarGz(taro, child.getAbsolutePath(), entryName + ""/"");
                }
            }
        }
        taro.close();
        goIn.close();
    }
",98,,LABEL_1,LABEL_1,LABEL_1,-1,"copyFile,_file1,_file2,fis,fos,canalFuente",,6,16,0,,0,GA,2377,0.361465724,failed,"[';_mail01 = 0', ';print(_mail01)', '; fiss = 0', ';Foses = 0', '; faos = 0', ';feoses = 0']"
333,"    public static void copyFile(File in, File out) throws IOException {
        FileChannel sourceChannel = new FileInputStream(in).getChannel();
        FileChannel destinationChannel = new FileOutputStream(out).getChannel();
        sourceChannel.transferTo(0, sourceChannel.size(), destinationChannel);
        sourceChannel.close();
        destinationChannel.close();
    }
 <SPLIT>     public static void copy(File src, File dest) throws FileNotFoundException, IOException {
        FileInputStream in = new FileInputStream(src);
        FileOutputStream out = new FileOutputStream(dest);
        try {
            byte[] buf = new byte[1024];
            int c = -1;
            while ((c = in.read(buf)) > 0) out.write(buf, 0, c);
        } finally {
            in.close();
            out.close();
        }
    }
",69,,LABEL_1,LABEL_1,LABEL_1,-1,"copyFile,in,out,sourceChannel,destinationChannel",,5,12,0,,0,GA,1473,0.211923202,failed,"[';print(copyFile)', ';print(in)', ';print(destinationChannel)', ';print(copyFiles)']"
334,"    public File read() throws IOException {
        URLConnection conn = url.openConnection();
        conn.setConnectTimeout(5000);
        conn.setReadTimeout(5000);
        conn.connect();
        int length = conn.getContentLength();
        String tempDir = System.getProperty(""java.io.tmpdir"");
        if (tempDir == null) {
            tempDir = ""."";
        }
        File tempFile = new File(tempDir + ""/"" + new GUID() + "".dat"");
        tempFile.deleteOnExit();
        InputStream in = null;
        OutputStream out = null;
        ProgressMonitor monitor = new ProgressMonitor(parentComponent, ""Downloading "" + url, null, 0, length);
        try {
            in = conn.getInputStream();
            out = new BufferedOutputStream(new FileOutputStream(tempFile));
            int buflen = 1024 * 30;
            int bytesRead = 0;
            byte[] buf = new byte[buflen];
            ;
            long start = System.currentTimeMillis();
            for (int nRead = in.read(buf); nRead != -1; nRead = in.read(buf)) {
                if (monitor.isCanceled()) {
                    return null;
                }
                bytesRead += nRead;
                out.write(buf, 0, nRead);
                monitor.setProgress(bytesRead);
            }
        } finally {
            if (in != null) {
                in.close();
            }
            if (out != null) {
                out.close();
            }
            monitor.close();
        }
        return tempFile;
    }
 <SPLIT>     public static String encrypt(final String pass) {
        try {
            final MessageDigest md = MessageDigest.getInstance(""SHA"");
            md.update(pass.getBytes(""UTF-8""));
            return new String(Base64.encodeBase64(md.digest()));
        } catch (final Exception e) {
            throw new RuntimeException(""No se pudo encriptar el password."", e);
        }
    }
",293,,LABEL_0,LABEL_0,LABEL_0,-1,"read,conn,length,tempDir,tempFile,in,out,monitor,buflen,bytesRead,buf,start,nRead",,10,36,0,,0,GA,5947,0.967449105,failed,"[';path = 0', ';print(path)']"
335,"    public static void doVersionCheck(View view) {
        view.showWaitCursor();
        try {
            URL url = new URL(jEdit.getProperty(""version-check.url""));
            InputStream in = url.openStream();
            BufferedReader bin = new BufferedReader(new InputStreamReader(in));
            String line;
            String version = null;
            String build = null;
            while ((line = bin.readLine()) != null) {
                if (line.startsWith("".version"")) version = line.substring(8).trim(); else if (line.startsWith("".build"")) build = line.substring(6).trim();
            }
            bin.close();
            if (version != null && build != null) {
                if (jEdit.getBuild().compareTo(build) < 0) newVersionAvailable(view, version, url); else {
                    GUIUtilities.message(view, ""version-check"" + "".up-to-date"", new String[0]);
                }
            }
        } catch (IOException e) {
            String[] args = { jEdit.getProperty(""version-check.url""), e.toString() };
            GUIUtilities.error(view, ""read-error"", args);
        }
        view.hideWaitCursor();
    }
 <SPLIT>     public static void main(String[] args) {
        try {
            URL url = new URL(args[0]);
            HttpURLConnection httpCon = (HttpURLConnection) url.openConnection();
            httpCon.setDoOutput(true);
            httpCon.setRequestMethod(""PUT"");
            OutputStreamWriter out = new OutputStreamWriter(httpCon.getOutputStream());
            out.write(""fatal error"");
            out.close();
            System.out.println(""end"");
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
",250,"    public static void doVersionCheck(View view) {
        view.showWaitCursor();
        try {
            URL address = new URL(jEdit.getProperty(""version-check.url""));
            InputStream in = address.openStream();
            BufferedReader bin = new BufferedReader(new InputStreamReader(in));
            String line;
            String version = null;
            String build = null;
            while ((line = bin.readLine()) != null) {
                if (line.startsWith("".version"")) version = line.substring(8).trim(); else if (line.startsWith("".build"")) build = line.substring(6).trim();
            }
            bin.close();
            if (version != null && build != null) {
                if (jEdit.getBuild().compareTo(build) < 0) newVersionAvailable(view, version, address); else {
                    GUIUtilities.message(view, ""version-check"" + "".up-to-date"", new String[0]);
                }
            }
        } catch (IOException e) {
            String[] args = { jEdit.getProperty(""version-check.url""), e.toString() };
            GUIUtilities.error(view, ""read-error"", args);
        }
        view.hideWaitCursor();
    }
",LABEL_0,LABEL_0,LABEL_1,1,"doVersionCheck,view,url,in,bin,line,version,build","doVersionCheck:-0.017462491989135742,view:0.0038990378379821777,url:0.02626866102218628,in:0.003448307514190674,bin:-0.010680139064788818,line:-0.008902251720428467,version:-0.0014491677284240723,build:0.0005995035171508789,",1,3,0,"url:address,",0,Greedy,82,0.012339826,replace,[]
336,"    private JButton getButtonSonido() {
        if (buttonSonido == null) {
            buttonSonido = new JButton();
            buttonSonido.setText(Messages.getString(""gui.AdministracionResorces.15""));
            buttonSonido.setIcon(new ImageIcon(getClass().getResource(""/es/unizar/cps/tecnoDiscap/data/icons/view_sidetree.png"")));
            buttonSonido.addActionListener(new java.awt.event.ActionListener() {

                public void actionPerformed(java.awt.event.ActionEvent e) {
                    JFileChooser fc = new JFileChooser();
                    fc.addChoosableFileFilter(new SoundFilter());
                    int returnVal = fc.showDialog(AdministracionResorces.this, Messages.getString(""gui.AdministracionResorces.17""));
                    if (returnVal == JFileChooser.APPROVE_OPTION) {
                        File file = fc.getSelectedFile();
                        String rutaGlobal = System.getProperty(""user.dir"") + ""/"" + rutaDatos + ""sonidos/"" + file.getName();
                        String rutaRelativa = rutaDatos + ""sonidos/"" + file.getName();
                        try {
                            FileInputStream fis = new FileInputStream(file);
                            FileOutputStream fos = new FileOutputStream(rutaGlobal, true);
                            FileChannel canalFuente = fis.getChannel();
                            FileChannel canalDestino = fos.getChannel();
                            canalFuente.transferTo(0, canalFuente.size(), canalDestino);
                            fis.close();
                            fos.close();
                            imagen.setSonidoURL(rutaRelativa);
                            System.out.println(rutaGlobal + "" "" + rutaRelativa);
                            buttonSonido.setIcon(new ImageIcon(getClass().getResource(""/es/unizar/cps/tecnoDiscap/data/icons/view_sidetreeOK.png"")));
                            gui.getAudio().reproduceAudio(imagen);
                        } catch (IOException ex) {
                            ex.printStackTrace();
                        }
                    } else {
                    }
                }
            });
        }
        return buttonSonido;
    }
 <SPLIT>     public static String mysqlPasswordHash(String string) {
        try {
            MessageDigest digest = MessageDigest.getInstance(HashAlgorithms.SHA1);
            try {
                digest.update(string.getBytes(""UTF-8""));
            } catch (UnsupportedEncodingException e) {
                throw new RuntimeException(e);
            }
            byte[] encodedPassword = digest.digest();
            digest.update(encodedPassword);
            encodedPassword = digest.digest();
            String hash = new BigInteger(1, encodedPassword).toString(16).toUpperCase();
            while (hash.length() < 40) {
                hash = ""0"" + hash;
            }
            return ""*"" + hash;
        } catch (NoSuchAlgorithmException e) {
            throw new RuntimeException(e);
        }
    }
",331,,LABEL_0,LABEL_1,,-4,"getButtonSonido,buttonSonido,e,fc,returnVal,file,rutaGlobal,rutaRelativa,fis,fos,canalFuente,canalDestino",,,,0,,0,Greedy,1,0.000581316,,[]
337,"    public static Document ByURL(String urlstr) throws IOException {
        String uri = urlstr;
        URL url = new URL(uri);
        URLConnection connection = url.openConnection();
        InputStream in = connection.getInputStream();
        Reader reader = new InputStreamReader(in);
        InputSource is = new InputSourceImpl(reader, uri);
        System.out.println(is.toString());
        Document document = new Document() {

            @Override
            public Node adoptNode(Node source) throws DOMException {
                return null;
            }

            @Override
            public Attr createAttribute(String name) throws DOMException {
                return null;
            }

            @Override
            public Attr createAttributeNS(String namespaceURI, String qualifiedName) throws DOMException {
                return null;
            }

            @Override
            public CDATASection createCDATASection(String data) throws DOMException {
                return null;
            }

            @Override
            public Comment createComment(String data) {
                return null;
            }

            @Override
            public DocumentFragment createDocumentFragment() {
                return null;
            }

            @Override
            public Element createElement(String tagName) throws DOMException {
                return null;
            }

            @Override
            public Element createElementNS(String namespaceURI, String qualifiedName) throws DOMException {
                return null;
            }

            @Override
            public EntityReference createEntityReference(String name) throws DOMException {
                return null;
            }

            @Override
            public ProcessingInstruction createProcessingInstruction(String target, String data) throws DOMException {
                return null;
            }

            @Override
            public Text createTextNode(String data) {
                return null;
            }

            @Override
            public DocumentType getDoctype() {
                return null;
            }

            @Override
            public Element getDocumentElement() {
                return null;
            }

            @Override
            public String getDocumentURI() {
                return null;
            }

            @Override
            public DOMConfiguration getDomConfig() {
                return null;
            }

            @Override
            public Element getElementById(String elementId) {
                return null;
            }

            @Override
            public NodeList getElementsByTagName(String tagname) {
                return null;
            }

            @Override
            public NodeList getElementsByTagNameNS(String namespaceURI, String localName) {
                return null;
            }

            @Override
            public DOMImplementation getImplementation() {
                return null;
            }

            @Override
            public String getInputEncoding() {
                return null;
            }

            @Override
            public boolean getStrictErrorChecking() {
                return false;
            }

            @Override
            public String getXmlEncoding() {
                return null;
            }

            @Override
            public boolean getXmlStandalone() {
                return false;
            }

            @Override
            public String getXmlVersion() {
                return null;
            }

            @Override
            public Node importNode(Node importedNode, boolean deep) throws DOMException {
                return null;
            }

            @Override
            public void normalizeDocument() {
            }

            @Override
            public Node renameNode(Node n, String namespaceURI, String qualifiedName) throws DOMException {
                return null;
            }

            @Override
            public void setDocumentURI(String documentURI) {
            }

            @Override
            public void setStrictErrorChecking(boolean strictErrorChecking) {
            }

            @Override
            public void setXmlStandalone(boolean xmlStandalone) throws DOMException {
            }

            @Override
            public void setXmlVersion(String xmlVersion) throws DOMException {
            }

            public Node appendChild(Node arg0) throws DOMException {
                return null;
            }

            public Node cloneNode(boolean arg0) {
                return null;
            }

            public short compareDocumentPosition(Node arg0) throws DOMException {
                return 0;
            }

            public NamedNodeMap getAttributes() {
                return null;
            }

            public String getBaseURI() {
                return null;
            }

            public NodeList getChildNodes() {
                return null;
            }

            public Object getFeature(String arg0, String arg1) {
                return null;
            }

            public Node getFirstChild() {
                return null;
            }

            public Node getLastChild() {
                return null;
            }

            public String getLocalName() {
                return null;
            }

            public String getNamespaceURI() {
                return null;
            }

            public Node getNextSibling() {
                return null;
            }

            public String getNodeName() {
                return null;
            }

            public short getNodeType() {
                return 0;
            }

            public String getNodeValue() throws DOMException {
                return null;
            }

            public Document getOwnerDocument() {
                return null;
            }

            public Node getParentNode() {
                return null;
            }

            public String getPrefix() {
                return null;
            }

            public Node getPreviousSibling() {
                return null;
            }

            public String getTextContent() throws DOMException {
                return null;
            }

            public Object getUserData(String arg0) {
                return null;
            }

            public boolean hasAttributes() {
                return false;
            }

            public boolean hasChildNodes() {
                return false;
            }

            public Node insertBefore(Node arg0, Node arg1) throws DOMException {
                return null;
            }

            public boolean isDefaultNamespace(String arg0) {
                return false;
            }

            public boolean isEqualNode(Node arg0) {
                return false;
            }

            public boolean isSameNode(Node arg0) {
                return false;
            }

            public boolean isSupported(String arg0, String arg1) {
                return false;
            }

            public String lookupNamespaceURI(String arg0) {
                return null;
            }

            public String lookupPrefix(String arg0) {
                return null;
            }

            public void normalize() {
            }

            public Node removeChild(Node arg0) throws DOMException {
                return null;
            }

            public Node replaceChild(Node arg0, Node arg1) throws DOMException {
                return null;
            }

            public void setNodeValue(String arg0) throws DOMException {
            }

            public void setPrefix(String arg0) throws DOMException {
            }

            public void setTextContent(String arg0) throws DOMException {
            }

            public Object setUserData(String arg0, Object arg1, UserDataHandler arg2) {
                return null;
            }
        };
        return document;
    }
 <SPLIT>     public void testReadHelloWorldTxt() throws Exception {
        final InputStream helloWorldIS = this.getClass().getClassLoader().getResourceAsStream(BASE_DIR + ""/HelloWorld.txt"");
        FileUtils.forceMkdir(new File(this.testDir.getAbsolutePath() + ""/org/settings4j/contentresolver""));
        final String helloWorldPath = this.testDir.getAbsolutePath() + ""/org/settings4j/contentresolver/HelloWorld.txt"";
        final FileOutputStream fileOutputStream = new FileOutputStream(new File(helloWorldPath));
        IOUtils.copy(helloWorldIS, fileOutputStream);
        IOUtils.closeQuietly(helloWorldIS);
        IOUtils.closeQuietly(fileOutputStream);
        LOG.info(""helloWorldPath: "" + helloWorldPath);
        final FSContentResolver contentResolver = new FSContentResolver();
        contentResolver.setRootFolderPath(this.testDir.getAbsolutePath());
        byte[] content = contentResolver.getContent(""org/settings4j/contentresolver/HelloWorld.txt"");
        assertNotNull(content);
        assertEquals(""Hello World"", new String(content, ""UTF-8""));
        content = contentResolver.getContent(""file:org/settings4j/contentresolver/HelloWorld.txt"");
        assertNotNull(content);
        assertEquals(""Hello World"", new String(content, ""UTF-8""));
        content = contentResolver.getContent(""file:/org/settings4j/contentresolver/HelloWorld.txt"");
        assertNotNull(content);
        assertEquals(""Hello World"", new String(content, ""UTF-8""));
        content = contentResolver.getContent(""file:laksjdhalksdhfa"");
        assertNull(content);
        content = contentResolver.getContent(""/org/settings4j/contentresolver/HelloWorld.txt"");
        assertNotNull(content);
        assertEquals(""Hello World"", new String(content, ""UTF-8""));
    }
",963,"    public static Document ByURL(String httpstring) throws IOException {
        String uri = httpstring;
        URL system = new URL(uri);
        URLConnection connection = system.openConnection();
        InputStream in = connection.getInputStream();
        Reader writer = new InputStreamReader(in);
        InputSource is = new InputSourceImpl(writer, uri);
        System.out.println(is.toString());
        Document document = new Document() {

            @Override
            public Node adoptNode(Node source) throws DOMException {
                return null;
            }

            @Override
            public Attr createAttribute(String name) throws DOMException {
                return null;
            }

            @Override
            public Attr createAttributeNS(String namespaceURI, String qualifiedName) throws DOMException {
                return null;
            }

            @Override
            public CDATASection createCDATASection(String parent) throws DOMException {
                return null;
            }

            @Override
            public Comment createComment(String parent) {
                return null;
            }

            @Override
            public DocumentFragment createDocumentFragment() {
                return null;
            }

            @Override
            public Element createElement(String tagName) throws DOMException {
                return null;
            }

            @Override
            public Element createElementNS(String namespaceURI, String qualifiedName) throws DOMException {
                return null;
            }

            @Override
            public EntityReference createEntityReference(String name) throws DOMException {
                return null;
            }

            @Override
            public ProcessingInstruction createProcessingInstruction(String target, String parent) throws DOMException {
                return null;
            }

            @Override
            public Text createTextNode(String parent) {
                return null;
            }

            @Override
            public DocumentType getDoctype() {
                return null;
            }

            @Override
            public Element getDocumentElement() {
                return null;
            }

            @Override
            public String getDocumentURI() {
                return null;
            }

            @Override
            public DOMConfiguration getDomConfig() {
                return null;
            }

            @Override
            public Element getElementById(String elementId) {
                return null;
            }

            @Override
            public NodeList getElementsByTagName(String tagname) {
                return null;
            }

            @Override
            public NodeList getElementsByTagNameNS(String namespaceURI, String localName) {
                return null;
            }

            @Override
            public DOMImplementation getImplementation() {
                return null;
            }

            @Override
            public String getInputEncoding() {
                return null;
            }

            @Override
            public boolean getStrictErrorChecking() {
                return false;
            }

            @Override
            public String getXmlEncoding() {
                return null;
            }

            @Override
            public boolean getXmlStandalone() {
                return false;
            }

            @Override
            public String getXmlVersion() {
                return null;
            }

            @Override
            public Node importNode(Node importedNode, boolean deep) throws DOMException {
                return null;
            }

            @Override
            public void normalizeDocument() {
            }

            @Override
            public Node renameNode(Node n, String namespaceURI, String qualifiedName) throws DOMException {
                return null;
            }

            @Override
            public void setDocumentURI(String documentURI) {
            }

            @Override
            public void setStrictErrorChecking(boolean strictErrorChecking) {
            }

            @Override
            public void setXmlStandalone(boolean xmlStandalone) throws DOMException {
            }

            @Override
            public void setXmlVersion(String xmlVersion) throws DOMException {
            }

            public Node appendChild(Node arg0) throws DOMException {
                return null;
            }

            public Node cloneNode(boolean arg0) {
                return null;
            }

            public short compareDocumentPosition(Node arg0) throws DOMException {
                return 0;
            }

            public NamedNodeMap getAttributes() {
                return null;
            }

            public String getBaseURI() {
                return null;
            }

            public NodeList getChildNodes() {
                return null;
            }

            public Object getFeature(String arg0, String arg1) {
                return null;
            }

            public Node getFirstChild() {
                return null;
            }

            public Node getLastChild() {
                return null;
            }

            public String getLocalName() {
                return null;
            }

            public String getNamespaceURI() {
                return null;
            }

            public Node getNextSibling() {
                return null;
            }

            public String getNodeName() {
                return null;
            }

            public short getNodeType() {
                return 0;
            }

            public String getNodeValue() throws DOMException {
                return null;
            }

            public Document getOwnerDocument() {
                return null;
            }

            public Node getParentNode() {
                return null;
            }

            public String getPrefix() {
                return null;
            }

            public Node getPreviousSibling() {
                return null;
            }

            public String getTextContent() throws DOMException {
                return null;
            }

            public Object getUserData(String arg0) {
                return null;
            }

            public boolean hasAttributes() {
                return false;
            }

            public boolean hasChildNodes() {
                return false;
            }

            public Node insertBefore(Node arg0, Node arg1) throws DOMException {
                return null;
            }

            public boolean isDefaultNamespace(String arg0) {
                return false;
            }

            public boolean isEqualNode(Node arg0) {
                return false;
            }

            public boolean isSameNode(Node arg0) {
                return false;
            }

            public boolean isSupported(String arg0, String arg1) {
                return false;
            }

            public String lookupNamespaceURI(String arg0) {
                return null;
            }

            public String lookupPrefix(String arg0) {
                return null;
            }

            public void normalize() {
            }

            public Node removeChild(Node arg0) throws DOMException {
                return null;
            }

            public Node replaceChild(Node arg0, Node arg1) throws DOMException {
                return null;
            }

            public void setNodeValue(String arg0) throws DOMException {
            }

            public void setPrefix(String arg0) throws DOMException {
            }

            public void setTextContent(String arg0) throws DOMException {
            }

            public Object setUserData(String arg0, Object arg1, UserDataHandler arg2) {
                return null;
            }
        };
        return document;
    }
",LABEL_0,LABEL_0,LABEL_1,1,"ByURL,urlstr,uri,url,connection,in,reader,is,document,source,name,namespaceURI,qualifiedName,data,tagName,target,elementId,tagname,localName","ByURL:4.374980926513672e-05,urlstr:0.0002510547637939453,uri:1.531839370727539e-05,url:0.00013619661331176758,connection:-0.0003191232681274414,in:9.125471115112305e-05,reader:0.0003196597099304199,is:0.00010007619857788086,document:0.00012224912643432617,source:-1.4185905456542969e-05,name:-2.6166439056396484e-05,namespaceURI:0.00010198354721069336,qualifiedName:-5.3763389587402344e-05,data:0.0004413127899169922,tagName:-2.9385089874267578e-05,target:-6.651878356933594e-05,elementId:0.00012201070785522461,tagname:1.2695789337158203e-05,localName:2.104043960571289e-05,",4,10,0,"data:parent,reader:writer,urlstr:httpstring,url:system,",0,Greedy,168,0.049347413,replace,[]
338,"    @Override
    protected URLConnection openConnection(URL url, Proxy proxy) throws IOException {
        if ((url == null) || (proxy == null)) {
            throw new IllegalArgumentException(Messages.getString(""luni.1B""));
        }
        return new HttpsURLConnectionImpl(url, getDefaultPort(), proxy);
    }
 <SPLIT>     public void testReadPerMemberSixSmall() throws IOException {
        GZIPMembersInputStream gzin = new GZIPMembersInputStream(new ByteArrayInputStream(sixsmall_gz));
        gzin.setEofEachMember(true);
        for (int i = 0; i < 3; i++) {
            int count2 = IOUtils.copy(gzin, new NullOutputStream());
            assertEquals(""wrong 1-byte member count"", 1, count2);
            gzin.nextMember();
            int count3 = IOUtils.copy(gzin, new NullOutputStream());
            assertEquals(""wrong 5-byte member count"", 5, count3);
            gzin.nextMember();
        }
        int countEnd = IOUtils.copy(gzin, new NullOutputStream());
        assertEquals(""wrong eof count"", 0, countEnd);
    }
",60,"    @Override
    protected URLConnection initConnector(URL file, Proxy port) throws IOException {
        if ((file == null) || (port == null)) {
            throw new IllegalArgumentException(Messages.getString(""luni.1B""));
        }
        return new HttpsURLConnectionImpl(file, getDefaultPort(), port);
    }
;proxy = 0;path = 0",LABEL_0,LABEL_0,LABEL_0,1,"openConnection,url,proxy","openConnection:0.0,url:-2.384185791015625e-06,proxy:1.6689300537109375e-06,",3,7,0,"proxy:port,openConnection:initConnector,url:file,",0,Greedy,162,0.024643608,inesrt,"[';proxy = 0', ';path = 0']"
339,"    static File copy(File in, File out) throws IOException {
        FileChannel inChannel = new FileInputStream(in).getChannel();
        FileChannel outChannel = new FileOutputStream(out).getChannel();
        try {
            inChannel.transferTo(0, inChannel.size(), outChannel);
            return out;
        } catch (IOException e) {
            throw e;
        } finally {
            if (inChannel != null) inChannel.close();
            if (outChannel != null) outChannel.close();
        }
    }
 <SPLIT>     @Override
    public String readFixString(final int len) {
        if (len < 1) {
            return StringUtils.EMPTY;
        }
        final StringWriter sw = new StringWriter();
        try {
            IOUtils.copy(createLimitedInputStream(len), sw, null);
        } catch (IOException e) {
            throw createRuntimeException(e);
        }
        return sw.toString();
    }
",99,"    static File cp(File url, File url) throws IOException {
        FileChannel iniGate = new FileInputStream(url).getChannel();
        FileChannel OutStream = new FileOutputStream(url).getChannel();
        try {
            iniGate.transferTo(0, iniGate.size(), OutStream);
            return url;
        } catch (IOException e) {
            throw e;
        } finally {
            if (iniGate != null) iniGate.close();
            if (OutStream != null) OutStream.close();
        }
    }
",LABEL_1,LABEL_1,LABEL_0,1,"copy,in,out,inChannel,outChannel","copy:-0.00528264045715332,in:-0.0013335347175598145,out:-0.004250228404998779,inChannel:-0.0032438039779663086,outChannel:-0.00113755464553833,",5,15,0,"outChannel:OutStream,in:url,inChannel:iniGate,out:url,copy:cp,",0,Greedy,204,0.027780628,replace,[]
340,"    public void extractImage(String input, String output, DjatokaDecodeParam params, IWriter w) throws DjatokaException {
        File in = null;
        String dest = output;
        if (input.equals(STDIN)) {
            try {
                in = File.createTempFile(""tmp"", "".jp2"");
                input = in.getAbsolutePath();
                in.deleteOnExit();
                IOUtils.copyFile(new File(STDIN), in);
            } catch (IOException e) {
                logger.error(""Unable to process image from "" + STDIN + "": "" + e.getMessage());
                throw new DjatokaException(e);
            }
        }
        BufferedImage bi = extractImpl.process(input, params);
        if (bi != null) {
            if (params.getScalingFactor() != 1.0 || params.getScalingDimensions() != null) bi = applyScaling(bi, params);
            if (params.getTransform() != null) bi = params.getTransform().run(bi);
            try {
                BufferedOutputStream os = new BufferedOutputStream(new FileOutputStream(new File(dest)));
                w.write(bi, os);
                os.close();
            } catch (FileNotFoundException e) {
                logger.error(""Requested file was not found: "" + dest);
                throw new DjatokaException(e);
            } catch (IOException e) {
                logger.error(""Error attempting to close: "" + dest);
                throw new DjatokaException(e);
            }
        }
        if (in != null) in.delete();
    }
 <SPLIT>     @ActionMethod
    public void upload() throws IOException {
        final int fileResult = fileChooser.showOpenDialog(frame);
        if (fileResult != JFileChooser.APPROVE_OPTION) {
            return;
        }
        final InputStream in = new FileInputStream(fileChooser.getSelectedFile());
        try {
            final URL url = new URL(""http://127.0.0.1:"" + testPort + ""/databases/"" + fileChooser.getSelectedFile().getName());
            final HttpURLConnection con = (HttpURLConnection) url.openConnection();
            con.setRequestMethod(""PUT"");
            con.setDoOutput(true);
            con.setRequestProperty(Http11Header.AUTHORIZATION, ""Basic QWxhZGRpbjpvcGVuIHNlc2FtZQ=="");
            con.setRequestProperty(Http11Header.WWW_AUTHENTICATE, ""Basic realm=\""karatasi\"""");
            con.setRequestProperty(Http11Header.CONTENT_LENGTH, Long.toString(fileChooser.getSelectedFile().length()));
            con.setRequestProperty(Http11Header.CONTENT_TYPE, ""application/octet-stream"");
            final OutputStream out = con.getOutputStream();
            try {
                Util.copy(in, out);
                con.connect();
                final InputStream in2 = con.getInputStream();
                try {
                    textArea.setText("""");
                    final byte[] buf = new byte[4096];
                    for (int bytesRead; (bytesRead = in2.read(buf)) != -1; ) {
                        textArea.append(new String(buf, 0, bytesRead));
                    }
                } finally {
                    in2.close();
                }
            } finally {
                out.close();
            }
        } finally {
            in.close();
        }
    }
",289,,LABEL_0,LABEL_1,,-4,"extractImage,input,output,params,w,in,dest,bi,os",,,,0,,0,Greedy,1,0.000578101,,[]
341,"    public boolean connect() {
        boolean isConnected = false;
        try {
            try {
                this.ftpClient.connect(this.server, this.port);
            } catch (SocketException e) {
                status = ErrorResult.CONNECTNOTPOSSIBLE.code;
                return false;
            } catch (IOException e) {
                status = ErrorResult.CONNECTNOTPOSSIBLE.code;
                return false;
            }
            int reply = this.ftpClient.getReplyCode();
            if (!FTPReply.isPositiveCompletion(reply)) {
                this.disconnect();
                status = ErrorResult.CONNECTNOTCORRECT.code;
                return false;
            }
            try {
                if (this.account == null) {
                    if (!this.ftpClient.login(this.username, this.passwd)) {
                        status = ErrorResult.LOGINNOTCORRECT.code;
                        this.ftpClient.logout();
                        return false;
                    }
                } else if (!this.ftpClient.login(this.username, this.passwd, this.account)) {
                    status = ErrorResult.LOGINACCTNOTCORRECT.code;
                    this.ftpClient.logout();
                    return false;
                }
            } catch (IOException e) {
                status = ErrorResult.ERRORWHILECONNECT.code;
                try {
                    this.ftpClient.logout();
                } catch (IOException e1) {
                }
                return false;
            }
            isConnected = true;
            return true;
        } finally {
            if ((!isConnected) && this.ftpClient.isConnected()) {
                this.disconnect();
            }
        }
    }
 <SPLIT>     private String digest(String input) throws NoSuchAlgorithmException, UnsupportedEncodingException {
        MessageDigest md = MessageDigest.getInstance(""MD5"");
        byte[] md5hash = new byte[64];
        md.update(input.getBytes(""iso-8859-1""), 0, input.length());
        md5hash = md.digest();
        return this.convertToHex(md5hash);
    }
",275,,LABEL_0,LABEL_0,LABEL_0,-1,"connect,status,reply,isConnected",,2,6,0,,0,GA,1999,0.320446086,failed,"[';connect = 0', ';print(connect)', ';status = 0', ';print(exec)']"
342,"    @Test
    public void test_validate_tag_getTopAlbums() {
        try {
            SchemaFactory factory = SchemaFactory.newInstance(""http://www.w3.org/2001/XMLSchema"");
            File schemaLocation = new File(""tes.xsd"");
            Schema schema = factory.newSchema(schemaLocation);
            Validator validator = schema.newValidator();
            URL url = new URL(""http://ws.audioscrobbler.com/2.0/?method=tag.gettopalbums&tag=disco&api_key=b25b959554ed76058ac220b7b2e0a026"");
            InputStream inputStream = url.openStream();
            Source source = new StreamSource(inputStream);
            validator.validate(source);
        } catch (IOException ex) {
            Logger.getLogger(GetTopAlbums_Test.class.getName()).log(Level.SEVERE, null, ex);
            assertFalse(""File not found"", true);
        } catch (SAXException ex) {
            Logger.getLogger(GetTopAlbums_Test.class.getName()).log(Level.SEVERE, null, ex);
            assertFalse(""Schema did not validate"", true);
        }
        assertTrue(true);
    }
 <SPLIT>     public static void main(String[] args) {
        FTPClient client = new FTPClient();
        FileOutputStream fos = null;
        try {
            client.connect(""192.168.1.10"");
            client.login(""a"", ""123456"");
            String filename = ""i.exe"";
            fos = new FileOutputStream(filename);
            client.retrieveFile(""/"" + filename, fos);
        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            try {
                if (fos != null) {
                    fos.close();
                }
                client.disconnect();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }
",176,,LABEL_0,LABEL_0,LABEL_0,-1,"test_validate_tag_getTopAlbums,factory,schemaLocation,schema,validator,url,inputStream,source",,8,15,0,,0,GA,3294,0.512270351,failed,"[';test_validate_tag_getTopAlbums = 0', ';print(test_validate_tag_getTopAlbums)', ';factory = 0', ';path = 0', ';sl = 0', ';print(sl)']"
343,"    public void serialize(OutputStream out) throws IOException, BadIMSCPException {
        ensureParsed();
        ZipFilePackageParser parser = utils.getIMSCPParserFactory().createParser();
        parser.setContentPackage(cp);
        if (on_disk != null) on_disk.delete();
        on_disk = createTemporaryFile();
        parser.serialize(on_disk);
        InputStream in = new FileInputStream(on_disk);
        IOUtils.copy(in, out);
    }
 <SPLIT>     public void convert(File src, File dest) throws IOException {
        InputStream in = new BufferedInputStream(new FileInputStream(src));
        DcmParser p = pfact.newDcmParser(in);
        Dataset ds = fact.newDataset();
        p.setDcmHandler(ds.getDcmHandler());
        try {
            FileFormat format = p.detectFileFormat();
            if (format != FileFormat.ACRNEMA_STREAM) {
                System.out.println(""\n"" + src + "": not an ACRNEMA stream!"");
                return;
            }
            p.parseDcmFile(format, Tags.PixelData);
            if (ds.contains(Tags.StudyInstanceUID) || ds.contains(Tags.SeriesInstanceUID) || ds.contains(Tags.SOPInstanceUID) || ds.contains(Tags.SOPClassUID)) {
                System.out.println(""\n"" + src + "": contains UIDs!"" + "" => probable already DICOM - do not convert"");
                return;
            }
            boolean hasPixelData = p.getReadTag() == Tags.PixelData;
            boolean inflate = hasPixelData && ds.getInt(Tags.BitsAllocated, 0) == 12;
            int pxlen = p.getReadLength();
            if (hasPixelData) {
                if (inflate) {
                    ds.putUS(Tags.BitsAllocated, 16);
                    pxlen = pxlen * 4 / 3;
                }
                if (pxlen != (ds.getInt(Tags.BitsAllocated, 0) >>> 3) * ds.getInt(Tags.Rows, 0) * ds.getInt(Tags.Columns, 0) * ds.getInt(Tags.NumberOfFrames, 1) * ds.getInt(Tags.NumberOfSamples, 1)) {
                    System.out.println(""\n"" + src + "": mismatch pixel data length!"" + "" => do not convert"");
                    return;
                }
            }
            ds.putUI(Tags.StudyInstanceUID, uid(studyUID));
            ds.putUI(Tags.SeriesInstanceUID, uid(seriesUID));
            ds.putUI(Tags.SOPInstanceUID, uid(instUID));
            ds.putUI(Tags.SOPClassUID, classUID);
            if (!ds.contains(Tags.NumberOfSamples)) {
                ds.putUS(Tags.NumberOfSamples, 1);
            }
            if (!ds.contains(Tags.PhotometricInterpretation)) {
                ds.putCS(Tags.PhotometricInterpretation, ""MONOCHROME2"");
            }
            if (fmi) {
                ds.setFileMetaInfo(fact.newFileMetaInfo(ds, UIDs.ImplicitVRLittleEndian));
            }
            OutputStream out = new BufferedOutputStream(new FileOutputStream(dest));
            try {
            } finally {
                ds.writeFile(out, encodeParam());
                if (hasPixelData) {
                    if (!skipGroupLen) {
                        out.write(PXDATA_GROUPLEN);
                        int grlen = pxlen + 8;
                        out.write((byte) grlen);
                        out.write((byte) (grlen >> 8));
                        out.write((byte) (grlen >> 16));
                        out.write((byte) (grlen >> 24));
                    }
                    out.write(PXDATA_TAG);
                    out.write((byte) pxlen);
                    out.write((byte) (pxlen >> 8));
                    out.write((byte) (pxlen >> 16));
                    out.write((byte) (pxlen >> 24));
                }
                if (inflate) {
                    int b2, b3;
                    for (; pxlen > 0; pxlen -= 3) {
                        out.write(in.read());
                        b2 = in.read();
                        b3 = in.read();
                        out.write(b2 & 0x0f);
                        out.write(b2 >> 4 | ((b3 & 0x0f) << 4));
                        out.write(b3 >> 4);
                    }
                } else {
                    for (; pxlen > 0; --pxlen) {
                        out.write(in.read());
                    }
                }
                out.close();
            }
            System.out.print('.');
        } finally {
            in.close();
        }
    }
",81,,LABEL_1,LABEL_1,LABEL_1,-1,"serialize,out,parser,on_disk,in",,5,14,0,,0,GA,2235,0.398874597,failed,[';serialize = 0']
344,"        @Override
        protected String doInBackground(String... params) {
            try {
                final HttpParams param = new BasicHttpParams();
                HttpConnectionParams.setConnectionTimeout(param, 30000);
                HttpConnectionParams.setSoTimeout(param, 30000);
                DefaultHttpClient client = new DefaultHttpClient(param);
                HttpPost post = new HttpPost(""http://www.google.com/loc/json"");
                post.setEntity(new StringEntity(params[0]));
                if (DEBUG) Log.d(""Location"", params[0]);
                HttpResponse resp = client.execute(post);
                if (resp.getStatusLine().getStatusCode() == 200) {
                    HttpEntity entity = resp.getEntity();
                    String result = EntityUtils.toString(entity);
                    return result;
                } else {
                    if (isFirstLocation) {
                        requestGearsLocation(1);
                        isFirstLocation = false;
                        return RESULT_FIRST_FAILE;
                    }
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
            return null;
        }
 <SPLIT>     public void readFile(URL url) throws PedroException, IOException, ParserConfigurationException, SAXException {
        this.zipFileName = url.toString();
        URLConnection urlConnection = url.openConnection();
        InputStream inputStream = urlConnection.getInputStream();
        unzipNativeFormatFile(inputStream);
        parseAlertFiles();
        deleteAlertFiles();
    }
",180,,LABEL_0,LABEL_0,LABEL_0,-1,"doInBackground,params,param,client,post,resp,entity,result",,3,5,0,,0,GA,3699,0.554621895,failed,"[';doInBackground = 0', ';print(doInBackground)', ';print(err)']"
345,"    public synchronized String encryptPassword(String passwordString) throws Exception {
        MessageDigest digest = null;
        digest = MessageDigest.getInstance(""SHA"");
        digest.update(passwordString.getBytes(""UTF-8""));
        byte raw[] = digest.digest();
        String hash = (new BASE64Encoder()).encode(raw);
        return hash;
    }
 <SPLIT>     public int create(BusinessObject o) throws DAOException {
        int insert = 0;
        int id = 0;
        Item item = (Item) o;
        try {
            PreparedStatement pst = connection.prepareStatement(XMLGetQuery.getQuery(""INSERT_ITEM""));
            pst.setString(1, item.getDescription());
            pst.setDouble(2, item.getUnit_price());
            pst.setInt(3, item.getQuantity());
            pst.setDouble(4, item.getVat());
            pst.setInt(5, item.getIdProject());
            pst.setInt(6, item.getIdCurrency());
            insert = pst.executeUpdate();
            if (insert <= 0) {
                connection.rollback();
                throw new DAOException(""Number of rows <= 0"");
            } else if (insert > 1) {
                connection.rollback();
                throw new DAOException(""Number of rows > 1"");
            }
            Statement st = connection.createStatement();
            ResultSet rs = st.executeQuery(""select max(id_item) from item"");
            rs.next();
            id = rs.getInt(1);
            connection.commit();
        } catch (SQLException e) {
            Log.write(e.getMessage());
            throw new DAOException(""A SQLException has occured"");
        } catch (NullPointerException npe) {
            Log.write(npe.getMessage());
            throw new DAOException(""Connection null"");
        }
        return id;
    }
",72,,LABEL_0,LABEL_0,LABEL_0,-1,"encryptPassword,passwordString,digest,raw,hash",,5,12,0,,0,GA,2184,0.326770083,failed,"[';encryptPassword = 0', ';encressPassword = 0', ';PasswordString = 0']"
346,"    public boolean connect() {
        boolean isConnected = false;
        try {
            try {
                this.ftpClient.connect(this.server, this.port);
            } catch (SocketException e) {
                status = ErrorResult.CONNECTNOTPOSSIBLE.code;
                return false;
            } catch (IOException e) {
                status = ErrorResult.CONNECTNOTPOSSIBLE.code;
                return false;
            }
            int reply = this.ftpClient.getReplyCode();
            if (!FTPReply.isPositiveCompletion(reply)) {
                this.disconnect();
                status = ErrorResult.CONNECTNOTCORRECT.code;
                return false;
            }
            try {
                if (this.account == null) {
                    if (!this.ftpClient.login(this.username, this.passwd)) {
                        status = ErrorResult.LOGINNOTCORRECT.code;
                        this.ftpClient.logout();
                        return false;
                    }
                } else if (!this.ftpClient.login(this.username, this.passwd, this.account)) {
                    status = ErrorResult.LOGINACCTNOTCORRECT.code;
                    this.ftpClient.logout();
                    return false;
                }
            } catch (IOException e) {
                status = ErrorResult.ERRORWHILECONNECT.code;
                try {
                    this.ftpClient.logout();
                } catch (IOException e1) {
                }
                return false;
            }
            isConnected = true;
            return true;
        } finally {
            if ((!isConnected) && this.ftpClient.isConnected()) {
                this.disconnect();
            }
        }
    }
 <SPLIT>     public void actionPerformed(ActionEvent e) {
        if (""register"".equals(e.getActionCommand())) {
            buttonClicked = ""register"";
            try {
                String data = URLEncoder.encode(""ver"", ""UTF-8"") + ""="" + URLEncoder.encode(Double.toString(questVer), ""UTF-8"");
                data += ""&"" + URLEncoder.encode(""name"", ""UTF-8"") + ""="" + URLEncoder.encode(name.getText(), ""UTF-8"");
                data += ""&"" + URLEncoder.encode(""os"", ""UTF-8"") + ""="" + URLEncoder.encode(os.getText(), ""UTF-8"");
                data += ""&"" + URLEncoder.encode(""jre"", ""UTF-8"") + ""="" + URLEncoder.encode(jre.getText(), ""UTF-8"");
                data += ""&"" + URLEncoder.encode(""email"", ""UTF-8"") + ""="" + URLEncoder.encode(email.getText(), ""UTF-8"");
                data += ""&"" + URLEncoder.encode(""key"", ""UTF-8"") + ""="" + URLEncoder.encode(""Qr7SchF"", ""UTF-8"");
                data += ""&"" + URLEncoder.encode(""answers"", ""UTF-8"") + ""="" + URLEncoder.encode(Integer.toString(getAnswers()), ""UTF-8"");
                URL url = new URL(""http://ubcdcreator.sourceforge.net/register.php"");
                URLConnection conn = url.openConnection();
                conn.setDoInput(true);
                conn.setDoOutput(true);
                OutputStreamWriter wr = new OutputStreamWriter(conn.getOutputStream());
                wr.write(data);
                wr.flush();
                BufferedReader rd = new BufferedReader(new InputStreamReader(conn.getInputStream()));
                String line;
                while ((line = rd.readLine()) != null) {
                }
                rd.close();
                wr.close();
            } catch (Exception ex) {
            }
            setVisible(false);
        } else if (""cancel"".equals(e.getActionCommand())) {
            buttonClicked = ""cancel"";
            setVisible(false);
        } else if (""never"".equals(e.getActionCommand())) {
            buttonClicked = ""never"";
            setVisible(false);
        }
    }
",275,,LABEL_0,LABEL_0,LABEL_0,-1,"connect,status,reply,isConnected",,0,0,0,,0,GA,2007,0.362497067,failed,[]
347,"    public static void unzipModel(String filename, String tempdir) throws EDITSException {
        try {
            BufferedOutputStream dest = null;
            FileInputStream fis = new FileInputStream(filename);
            int BUFFER = 2048;
            ZipInputStream zis = new ZipInputStream(new BufferedInputStream(fis));
            ZipEntry entry;
            while ((entry = zis.getNextEntry()) != null) {
                int count;
                byte data[] = new byte[BUFFER];
                FileOutputStream fos = new FileOutputStream(tempdir + entry.getName());
                dest = new BufferedOutputStream(fos, BUFFER);
                while ((count = zis.read(data, 0, BUFFER)) != -1) dest.write(data, 0, count);
                dest.flush();
                dest.close();
            }
            zis.close();
        } catch (Exception e) {
            throw new EDITSException(""Can not expand model in \"""" + tempdir + ""\"" because:\n"" + e.getMessage());
        }
    }
 <SPLIT>     private void tail(String[] cmd, int pos) throws IOException {
        CommandFormat c = new CommandFormat(""tail"", 1, 1, ""f"");
        String src = null;
        Path path = null;
        try {
            List<String> parameters = c.parse(cmd, pos);
            src = parameters.get(0);
        } catch (IllegalArgumentException iae) {
            System.err.println(""Usage: java FsShell "" + TAIL_USAGE);
            throw iae;
        }
        boolean foption = c.getOpt(""f"") ? true : false;
        path = new Path(src);
        FileSystem srcFs = path.getFileSystem(getConf());
        if (srcFs.isDirectory(path)) {
            throw new IOException(""Source must be a file."");
        }
        long fileSize = srcFs.getFileStatus(path).getLen();
        long offset = (fileSize > 1024) ? fileSize - 1024 : 0;
        while (true) {
            FSDataInputStream in = srcFs.open(path);
            in.seek(offset);
            IOUtils.copyBytes(in, System.out, 1024, false);
            offset = in.getPos();
            in.close();
            if (!foption) {
                break;
            }
            fileSize = srcFs.getFileStatus(path).getLen();
            offset = (fileSize > offset) ? offset : fileSize;
            try {
                Thread.sleep(5000);
            } catch (InterruptedException e) {
                break;
            }
        }
    }
",188,,LABEL_1,LABEL_1,LABEL_1,-1,"unzipModel,filename,tempdir,dest,fis,BUFFER,zis,entry,count,data,fos",,7,21,0,,0,GA,5005,0.81275996,failed,"[';temdir = 0', ';TempDir = 0']"
348,"    public static byte[] decode(String cryptPassword, byte[] encoded, byte[] salt) {
        try {
            MessageDigest digester = MessageDigest.getInstance(DIGEST);
            SecureRandom random = SecureRandom.getInstance(RANDOM);
            digester.reset();
            for (int i = 0; i < ITERATIONS; i++) {
                digester.update(salt);
                digester.update(cryptPassword.getBytes(""UTF-8""));
            }
            byte[] hash = digester.digest();
            random.setSeed(hash);
            int maxKeySize = Cipher.getMaxAllowedKeyLength(CIPHER);
            KeyGenerator generator = KeyGenerator.getInstance(CIPHER);
            generator.init(maxKeySize, random);
            SecretKey key = generator.generateKey();
            Cipher cipher = Cipher.getInstance(CIPHER);
            cipher.init(Cipher.DECRYPT_MODE, key);
            byte[] decoded = cipher.doFinal(encoded);
            return decoded;
        } catch (Exception e) {
            StorePlugin.getDefault().log(e);
        }
        return new byte[0];
    }
 <SPLIT>     private void getRandomGUID(boolean secure) {
        MessageDigest md5 = null;
        StringBuffer sbValueBeforeMD5 = new StringBuffer();
        try {
            md5 = MessageDigest.getInstance(""MD5"");
        } catch (NoSuchAlgorithmException e) {
            System.out.println(""Error: "" + e);
        }
        try {
            long time = System.currentTimeMillis();
            long rand = 0;
            if (secure) {
                rand = mySecureRand.nextLong();
            } else {
                rand = myRand.nextLong();
            }
            sbValueBeforeMD5.append(s_id);
            sbValueBeforeMD5.append("":"");
            sbValueBeforeMD5.append(Long.toString(time));
            sbValueBeforeMD5.append("":"");
            sbValueBeforeMD5.append(Long.toString(rand));
            valueBeforeMD5 = sbValueBeforeMD5.toString();
            md5.update(valueBeforeMD5.getBytes());
            byte[] array = md5.digest();
            StringBuffer sb = new StringBuffer();
            for (int j = 0; j < array.length; ++j) {
                int b = array[j] & 0xFF;
                if (b < 0x10) sb.append('0');
                sb.append(Integer.toHexString(b));
            }
            valueAfterMD5 = sb.toString();
        } catch (Exception e) {
            System.out.println(""Error:"" + e);
        }
    }
",206,,LABEL_1,LABEL_1,LABEL_1,-1,"decode,cryptPassword,encoded,salt,digester,random,i,hash,maxKeySize,generator,key,cipher,decoded",,13,32,0,,0,GA,5518,0.903707258,failed,"[';decode = 0', ';print(decode)', ';cryptPassword = 0', ';print(cryptPassword)']"
349,"    public void init() {
        super.init();
        Runnable doActions = new Runnable() {

            public void run() {
                if (_plot == null) {
                    _plot = newPlot();
                }
                getContentPane().add(plot(), BorderLayout.NORTH);
                int width;
                int height;
                String widthspec = getParameter(""width"");
                if (widthspec != null) {
                    width = Integer.parseInt(widthspec);
                } else {
                    width = 400;
                }
                String heightspec = getParameter(""height"");
                if (heightspec != null) {
                    height = Integer.parseInt(heightspec);
                } else {
                    height = 400;
                }
                _setPlotSize(width, height);
                plot().setButtons(true);
                Color background = Color.white;
                String colorspec = getParameter(""background"");
                if (colorspec != null) {
                    background = PlotBox.getColorByName(colorspec);
                }
                setBackground(background);
                plot().setBackground(background);
                getContentPane().setBackground(background);
                Color foreground = Color.black;
                colorspec = getParameter(""foreground"");
                if (colorspec != null) {
                    foreground = PlotBox.getColorByName(colorspec);
                }
                setForeground(foreground);
                plot().setForeground(foreground);
                plot().setVisible(true);
                String dataurlspec = getParameter(""dataurl"");
                if (dataurlspec != null) {
                    try {
                        showStatus(""Reading data"");
                        URL dataurl = new URL(getDocumentBase(), dataurlspec);
                        InputStream in = dataurl.openStream();
                        _read(in);
                        showStatus(""Done"");
                    } catch (MalformedURLException e) {
                        System.err.println(e.toString());
                    } catch (FileNotFoundException e) {
                        System.err.println(""PlotApplet: file not found: "" + e);
                    } catch (IOException e) {
                        System.err.println(""PlotApplet: error reading input file: "" + e);
                    }
                }
            }
        };
        try {
            SwingUtilities.invokeAndWait(doActions);
        } catch (Exception ex) {
        }
    }
 <SPLIT>     public HttpResponse fetch(HttpServletRequest request) throws IOException {
        GUI = SwingUI.getApplicatoin();
        DefaultHttpClient httpclient = new DefaultHttpClient();
        CookieSpecFactory csf = new CookieSpecFactory() {

            public CookieSpec newInstance(HttpParams params) {
                return new BrowserCompatSpec() {

                    @Override
                    public void validate(Cookie cookie, CookieOrigin origin) throws MalformedCookieException {
                    }
                };
            }
        };
        if (Helper.useProxy()) {
            HttpHost proxy = new HttpHost(Helper.getProxyServer(), Helper.getProxyPort());
            httpclient.getParams().setParameter(ConnRoutePNames.DEFAULT_PROXY, proxy);
        }
        httpclient.getCookieSpecs().register(""easy"", csf);
        httpclient.getParams().setParameter(ClientPNames.COOKIE_POLICY, ""easy"");
        String currentRemoteGAEHost = Helper.getRemoteServer();
        try {
            HttpUriRequest httpRequest = createRequest(request);
            addHeader(request, httpRequest);
            HttpResponse response = httpclient.execute(httpRequest);
            if (response.getStatusLine().getStatusCode() == HttpStatus.SC_FORBIDDEN) {
                challengeProxy(currentRemoteGAEHost);
            }
            logger.info(Helper.count.incrementAndGet() + "" Response received from "" + request.getRequestURL().toString() + "", status is "" + response.getStatusLine());
            GUI.updateFetchCount();
            return response;
        } catch (ClientProtocolException e) {
            logger.error(""Fetch ClientProtocol Error"", e);
            throw e;
        } catch (IOException e) {
            logger.error(""Fetch IO Error"", e);
            throw e;
        }
    }
",402,,LABEL_0,LABEL_0,LABEL_0,-1,"init,doActions,_plot,width,height,widthspec,heightspec,background,colorspec,foreground,dataurlspec,dataurl,in",,8,24,0,,0,GA,5945,1.120808391,failed,"[';init = 0', ';print(init)', ';doActions = 0', ';width = 0', ';height = 0', ';widthspec = 0', ';background = 0', ';dataurl = 0', ';print(exec)', ';gen = 0', ';alloc = 0', ';print(left)']"
350,"    private void copy(File source, File destinationDirectory) throws IOException {
        if (source.isDirectory()) {
            File newDir = new File(destinationDirectory, source.getName());
            newDir.mkdir();
            File[] children = source.listFiles();
            for (int i = 0; i < children.length; i++) {
                if (children[i].getName().equals("".svn"")) {
                    continue;
                }
                copy(children[i], newDir);
            }
        } else {
            File newFile = new File(destinationDirectory, source.getName());
            if (newFile.exists() && source.lastModified() == newFile.lastModified()) {
                return;
            }
            FileOutputStream output = new FileOutputStream(newFile);
            FileInputStream input = new FileInputStream(source);
            byte[] buff = new byte[2048];
            int read = 0;
            while ((read = input.read(buff)) > 0) {
                output.write(buff, 0, read);
            }
            output.flush();
            output.close();
            input.close();
        }
    }
 <SPLIT>     public static void copyFile(File srcFile, File destFile) throws IOException {
        logger.debug(""copyFile(srcFile={}, destFile={}) - start"", srcFile, destFile);
        FileChannel srcChannel = new FileInputStream(srcFile).getChannel();
        FileChannel dstChannel = new FileOutputStream(destFile).getChannel();
        try {
            dstChannel.transferFrom(srcChannel, 0, srcChannel.size());
        } finally {
            srcChannel.close();
            dstChannel.close();
        }
    }
",229,"    private void copy(File ource, File DestinationHome) throws IOException {
        if (ource.isDirectory()) {
            File NewFolder = new File(DestinationHome, ource.getName());
            NewFolder.mkdir();
            File[] url = ource.listFiles();
            for (int end = 0; end < url.length; end++) {
                if (url[end].getName().equals("".svn"")) {
                    continue;
                }
                copy(url[end], NewFolder);
            }
        } else {
            File newFile = new File(DestinationHome, ource.getName());
            if (newFile.exists() && ource.lastModified() == newFile.lastModified()) {
                return;
            }
            FileOutputStream output = new FileOutputStream(newFile);
            FileInputStream http = new FileInputStream(ource);
            byte[] gb = new byte[2048];
            int open = 0;
            while ((open = http.open(gb)) > 0) {
                output.write(gb, 0, open);
            }
            output.flush();
            output.close();
            http.close();
        }
    }
",LABEL_1,LABEL_1,LABEL_0,1,"copy,source,destinationDirectory,newDir,children,i,newFile,output,input,buff,read","copy:-0.0005804300308227539,source:-0.004920482635498047,destinationDirectory:-0.0024704337120056152,newDir:-0.0016866326332092285,children:-0.0029668807983398438,i:-0.002149641513824463,newFile:0.000803828239440918,output:-0.0007534623146057129,input:-0.0015438199043273926,buff:-0.0008443593978881836,read:-0.0025850534439086914,",8,32,0,"newFile:newFile,copy:copy,output:output,buff:gb,input:http,newDir:NewFolder,i:end,destinationDirectory:DestinationHome,read:open,children:url,source:ource,",0,Greedy,557,0.081941374,replace,[]
351,"    public static String doCrypt(String text) throws NoSuchAlgorithmException, UnsupportedEncodingException {
        MessageDigest md;
        md = MessageDigest.getInstance(""SHA-1"");
        byte[] sha1hash = new byte[40];
        md.update(text.getBytes(""UTF-8""), 0, text.length());
        sha1hash = md.digest();
        return convertToHex(sha1hash);
    }
 <SPLIT>         @Override
        public void respondGet(HttpServletResponse resp) throws IOException {
            setHeaders(resp);
            final OutputStream os;
            if (willDeflate()) {
                resp.setHeader(""Content-Encoding"", ""gzip"");
                os = new GZIPOutputStream(resp.getOutputStream(), bufferSize);
            } else os = resp.getOutputStream();
            transferStreams(url.openStream(), os);
        }
",77,,LABEL_0,LABEL_0,LABEL_0,-1,"doCrypt,text,UnsupportedEncodingException,md,sha1hash",,5,12,0,,0,GA,2230,0.309928024,failed,[]
352,"    public BufferedWriter createOutputStream(String inFile, String outFile) throws IOException {
        int k_blockSize = 1024;
        int byteCount;
        char[] buf = new char[k_blockSize];
        File ofp = new File(outFile);
        ZipOutputStream zos = new ZipOutputStream(new FileOutputStream(ofp));
        zos.setMethod(ZipOutputStream.DEFLATED);
        OutputStreamWriter osw = new OutputStreamWriter(zos, ""ISO-8859-1"");
        BufferedWriter bw = new BufferedWriter(osw);
        ZipEntry zot = null;
        File ifp = new File(inFile);
        ZipInputStream zis = new ZipInputStream(new FileInputStream(ifp));
        InputStreamReader isr = new InputStreamReader(zis, ""ISO-8859-1"");
        BufferedReader br = new BufferedReader(isr);
        ZipEntry zit = null;
        while ((zit = zis.getNextEntry()) != null) {
            if (zit.getName().equals(""content.xml"")) {
                continue;
            }
            zot = new ZipEntry(zit.getName());
            zos.putNextEntry(zot);
            while ((byteCount = br.read(buf, 0, k_blockSize)) >= 0) bw.write(buf, 0, byteCount);
            bw.flush();
            zos.closeEntry();
        }
        zos.putNextEntry(new ZipEntry(""content.xml""));
        bw.flush();
        osw = new OutputStreamWriter(zos, ""UTF8"");
        bw = new BufferedWriter(osw);
        return bw;
    }
 <SPLIT>     public void run() {
        if (status == COMPLETE) {
            return;
        }
        waitRandom();
        RandomAccessFile file = null;
        InputStream inputStream = null;
        boolean success = false;
        URL url = null;
        try {
            BeatportAccessor beatportAccessor = new BeatportAccessor();
            if (sessionCookies == null) {
                sessionCookies = beatportAccessor.getSessionCookies(user, password);
            }
            url = new URL(new BeatportAccessor().getTrackDownloadUrl(downloadId, sessionCookies));
            log.info(""Open (DownloadWorker.run): "" + url);
            HttpURLConnection connection = (HttpURLConnection) url.openConnection();
            connection.setRequestProperty(""User-Agent"", BeatportAccessor.userAgent);
            connection.setRequestProperty(""Cookie"", sessionCookies);
            connection.connect();
            if (connection.getResponseCode() / 100 != 2) {
                log.error(""Unexpected response from server: "" + connection.getResponseCode());
                error();
                return;
            }
            if (connection.getContentType().indexOf(""text"") >= 0) {
                log.error(""Tried to request: "" + url.toString());
                log.error(""Unexpected file content type from server: "" + connection.getContentType());
                log.error(""Server replied:\n"" + getContentAsString(connection));
                error();
                return;
            }
            int contentLength = connection.getContentLength();
            if (contentLength < 1) {
                log.error(""Invalid content length: "" + connection.getContentLength());
                error();
                return;
            }
            if (size == -1) {
                size = contentLength;
                stateChanged();
            } else if (size != contentLength) {
                changeTotal(0, contentLength - size);
            }
            if (new File(tmpFileName(fileName)).exists()) {
                if (!new File(tmpFileName(fileName)).delete()) {
                    throw new Exception(""Could not delete file: "" + tmpFileName(fileName));
                }
            }
            file = new RandomAccessFile(tmpFileName(fileName), ""rw"");
            file.seek(downloaded);
            inputStream = connection.getInputStream();
            if (started == 0) {
                started = System.currentTimeMillis();
                time = started;
            }
            statusChangedObserver.statusChanged(status);
            byte buffer[] = new byte[MAX_BUFFER_SIZE];
            while (status == DOWNLOADING) {
                if (size - downloaded < MAX_BUFFER_SIZE) {
                    buffer = new byte[(int) (size - downloaded)];
                }
                int read = inputStream.read(buffer);
                if (read == -1) break;
                file.write(buffer, 0, read);
                downloaded += read;
                changeTotal(read, 0);
                stateChanged();
            }
            if (status == DOWNLOADING) {
                stopped = System.currentTimeMillis();
                status = COMPLETE;
            }
            statusChangedObserver.statusChanged(status);
            stateChanged();
            success = true;
        } catch (Exception e) {
            e.printStackTrace();
            error();
        } finally {
            try {
                file.close();
            } catch (Exception e) {
            }
            if (success) {
                try {
                    if (!new File(tmpFileName(fileName)).renameTo(new File(fileName))) {
                        throw new Exception(""Rename Failed"");
                    }
                } catch (Exception e) {
                    log.error(""Error moving temp file "" + tmpFileName(fileName) + "" file: "" + fileName, e);
                }
            } else {
                try {
                    new File(tmpFileName(fileName)).delete();
                } catch (Exception e) {
                    log.error(""Error deleting erroneous temp file: "" + tmpFileName(fileName), e);
                }
            }
            try {
                inputStream.close();
            } catch (Exception e) {
                log.error(""Error closing input stream of: "" + url + "" / "" + fileName, e);
            }
        }
    }
",279,,LABEL_0,LABEL_1,,-4,"createOutputStream,inFile,outFile,k_blockSize,byteCount,buf,ofp,zos,osw,bw,zot,ifp,zis,isr,br,zit",,,,0,,0,Greedy,1,0.000740445,,[]
353,"        @Override
        protected String doInBackground(String... params) {
            try {
                final HttpParams param = new BasicHttpParams();
                HttpConnectionParams.setConnectionTimeout(param, 30000);
                HttpConnectionParams.setSoTimeout(param, 30000);
                DefaultHttpClient client = new DefaultHttpClient(param);
                HttpPost post = new HttpPost(""http://www.google.com/loc/json"");
                post.setEntity(new StringEntity(params[0]));
                if (DEBUG) Log.d(""Location"", params[0]);
                HttpResponse resp = client.execute(post);
                if (resp.getStatusLine().getStatusCode() == 200) {
                    HttpEntity entity = resp.getEntity();
                    String result = EntityUtils.toString(entity);
                    return result;
                } else {
                    if (isFirstLocation) {
                        requestGearsLocation(1);
                        isFirstLocation = false;
                        return RESULT_FIRST_FAILE;
                    }
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
            return null;
        }
 <SPLIT>     public String insertSmsInf(Sms sms) throws Exception {
        String smsId = null;
        Connection conn = null;
        PreparedStatement pstmt = null;
        StringBuffer buffer = new StringBuffer();
        try {
            buffer.append(""INSERT INTO COMTNSMS\n"");
            buffer.append(""  (SMS_ID, TRNSMIS_TELNO, TRNSMIS_CN,\n"");
            buffer.append(""   FRST_REGISTER_ID, FRST_REGIST_PNTTM )\n"");
            buffer.append(""VALUES\n"");
            buffer.append(""(?, ?, ?, ?, SYSDATE())"");
            conn = SmsBasicDBUtil.getConnection();
            conn.setAutoCommit(false);
            smsId = getNextId(conn);
            pstmt = conn.prepareStatement(buffer.toString());
            int index = 0;
            pstmt.setString(++index, smsId);
            pstmt.setString(++index, sms.getTrnsmitTelno());
            pstmt.setString(++index, sms.getTrnsmitCn());
            pstmt.setString(++index, sms.getFrstRegisterId());
            pstmt.executeUpdate();
            conn.commit();
            return smsId;
        } catch (Exception ex) {
            if (conn != null) {
                conn.rollback();
            }
            throw ex;
        } finally {
            SmsBasicDBUtil.close(null, pstmt, conn);
        }
    }
",180,,LABEL_0,LABEL_0,LABEL_0,-1,"doInBackground,params,param,client,post,resp,entity,result",,3,5,0,,0,GA,3400,0.559117309,failed,"[';doInBackground = 0', ';params = 0', ';param = 0']"
354,"    public static String getMD5(String source) {
        String s = null;
        char hexDigits[] = { '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f' };
        try {
            java.security.MessageDigest md = java.security.MessageDigest.getInstance(""MD5"");
            md.update(source.getBytes());
            byte tmp[] = md.digest();
            char str[] = new char[16 * 2];
            int k = 0;
            for (int i = 0; i < 16; i++) {
                byte byte0 = tmp[i];
                str[k++] = hexDigits[byte0 >>> 4 & 0xf];
                str[k++] = hexDigits[byte0 & 0xf];
            }
            s = new String(str);
        } catch (Exception e) {
            e.printStackTrace();
        }
        return s;
    }
 <SPLIT>     @Test
    public void testLoadHttpGzipped() throws Exception {
        String url = HTTP_GZIPPED;
        LoadingInfo loadingInfo = Utils.openFileObject(fsManager.resolveFile(url));
        InputStream contentInputStream = loadingInfo.getContentInputStream();
        byte[] actual = IOUtils.toByteArray(contentInputStream);
        byte[] expected = IOUtils.toByteArray(new GZIPInputStream(new URL(url).openStream()));
        assertEquals(expected.length, actual.length);
    }
",194,,LABEL_0,LABEL_0,LABEL_0,-1,"getMD5,source,s,hexDigits,md,tmp,str,k,i,byte0",,10,28,0,,0,GA,4513,0.693594607,failed,[]
355,"    @Override
    public void trainClassifier(File dir, String... args) throws Exception {
        String[] command = new String[args.length + 3];
        command[0] = this.getCommand();
        System.arraycopy(args, 0, command, 1, args.length);
        command[command.length - 2] = new File(dir, ""training-data.libsvm"").getPath();
        command[command.length - 1] = new File(dir, this.getModelName()).getPath();
        Process process = Runtime.getRuntime().exec(command);
        IOUtils.copy(process.getInputStream(), System.out);
        IOUtils.copy(process.getErrorStream(), System.err);
        process.waitFor();
    }
 <SPLIT>     public void transport(File file) throws TransportException {
        if (file.exists()) {
            if (file.isDirectory()) {
                File[] files = file.listFiles();
                for (int i = 0; i < files.length; i++) {
                    transport(file);
                }
            } else if (file.isFile()) {
                try {
                    FileChannel inChannel = new FileInputStream(file).getChannel();
                    FileChannel outChannel = new FileOutputStream(destinationDir).getChannel();
                    inChannel.transferTo(0, inChannel.size(), outChannel);
                } catch (IOException e) {
                    log.error(""File transfer failed"", e);
                }
            }
        }
    }
",159,,LABEL_1,LABEL_1,LABEL_1,-1,"trainClassifier,dir,command,length,process",,5,20,0,,0,GA,2487,0.374176379,failed,"[';trainClassifier = 0', ';print(trainClassifier)', ';dir = 0', ';command = 0', ';trainclassification = 0', ';trainModelifier = 0']"
356,"    protected static void copyDeleting(File source, File dest) throws IOException {
        byte[] buf = new byte[8 * 1024];
        FileInputStream in = new FileInputStream(source);
        try {
            FileOutputStream out = new FileOutputStream(dest);
            try {
                int count;
                while ((count = in.read(buf)) >= 0) out.write(buf, 0, count);
            } finally {
                out.close();
            }
        } finally {
            in.close();
        }
    }
 <SPLIT>     public static void copyFile(File srcFile, File destFile) throws IOException {
        if (!(srcFile.exists() && srcFile.isFile())) throw new IllegalArgumentException(""Source file doesn't exist: "" + srcFile.getAbsolutePath());
        if (destFile.exists() && destFile.isDirectory()) throw new IllegalArgumentException(""Destination file is directory: "" + destFile.getAbsolutePath());
        FileInputStream in = new FileInputStream(srcFile);
        FileOutputStream out = new FileOutputStream(destFile);
        byte[] buffer = new byte[4096];
        int no = 0;
        try {
            while ((no = in.read(buffer)) != -1) out.write(buffer, 0, no);
        } finally {
            in.close();
            out.close();
        }
    }
",100,"    protected static void copyDeleting(File source, File thin) throws IOException {
        byte[] src = new byte[8 * 1024];
        FileInputStream url = new FileInputStream(source);
        try {
            FileOutputStream writer = new FileOutputStream(thin);
            try {
                int close;
                while ((close = url.read(src)) >= 0) writer.write(src, 0, close);
            } finally {
                writer.close();
            }
        } finally {
            url.close();
        }
    }
",LABEL_1,LABEL_1,LABEL_0,1,"copyDeleting,source,dest,buf,in,out,count","copyDeleting:-0.06148630380630493,source:-0.0017418861389160156,dest:0.0024634599685668945,buf:0.020113050937652588,in:0.008479833602905273,out:0.021596670150756836,count:0.0025254487991333008,",5,14,0,"out:writer,buf:src,in:url,count:close,dest:thin,",0,Greedy,237,0.033549054,replace,[]
357,"    public static boolean dump(File source, File target) {
        boolean done = false;
        try {
            InputStream is = new BufferedInputStream(new FileInputStream(source));
            OutputStream os = new BufferedOutputStream(new FileOutputStream(target));
            while (is.available() > 0) {
                os.write(is.read());
            }
            os.flush();
            os.close();
            is.close();
            return true;
        } catch (IOException e) {
        }
        return done;
    }
 <SPLIT>     @Override
    public void incluir(Igreja igreja) throws Exception {
        Connection connection = criaConexao(false);
        String sql = ""insert into igreja ? as idlocal, ? as possui_salao;"";
        String sql2 = ""SELECT MAX(idlocal) FROM Local"";
        PreparedStatement stmt = null;
        PreparedStatement stmt2 = null;
        ResultSet rs = null;
        try {
            stmt = connection.prepareStatement(sql);
            stmt2 = connection.prepareStatement(sql2);
            rs = stmt2.executeQuery();
            stmt.setInt(1, rs.getInt(""max""));
            stmt.setBoolean(2, igreja.getPossuiSalao());
            int retorno = stmt.executeUpdate();
            if (retorno == 0) {
                connection.rollback();
                throw new SQLException(""Ocorreu um erro inesperado no momento de inserir dados de cliente no banco!"");
            }
            connection.commit();
        } catch (SQLException e) {
            connection.rollback();
            throw e;
        } finally {
            try {
                stmt.close();
                stmt2.close();
                rs.close();
                this.fechaConexao();
            } catch (SQLException e) {
                throw e;
            }
        }
    }
",102,,LABEL_0,LABEL_0,LABEL_0,-1,"dump,source,target,is,os,done",,6,15,0,,0,GA,1933,0.312894483,failed,[]
358,"    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        String rewrittenQueryString = URLDecoder.decode(request.getRequestURI(), ""UTF-8"").replaceFirst(""^.*?\\/(id:.*)\\/.*?$"", ""$1"");
        logger.debug(""rewrittenQueryString: "" + rewrittenQueryString);
        URL rewrittenUrl = new URL(fedoraUrl + rewrittenQueryString);
        logger.debug(""rewrittenUrl: "" + rewrittenUrl.getProtocol() + ""://"" + rewrittenUrl.getHost() + "":"" + rewrittenUrl.getPort() + rewrittenUrl.getFile());
        HttpURLConnection httpURLConnection = (HttpURLConnection) rewrittenUrl.openConnection();
        HttpURLConnection.setFollowRedirects(false);
        httpURLConnection.connect();
        response.setStatus(httpURLConnection.getResponseCode());
        logger.debug(""[status="" + httpURLConnection.getResponseCode() + ""]"");
        logger.debug(""[headers]"");
        for (Entry<String, List<String>> header : httpURLConnection.getHeaderFields().entrySet()) {
            if (header.getKey() != null) {
                for (String value : header.getValue()) {
                    if (value != null) {
                        logger.debug(header.getKey() + "": "" + value);
                        if (!header.getKey().equals(""Server"") && !header.getKey().equals(""Transfer-Encoding"")) {
                            response.addHeader(header.getKey(), value);
                        }
                    }
                }
            }
        }
        logger.debug(""[/headers]"");
        InputStream inputStream = httpURLConnection.getInputStream();
        OutputStream outputStream = response.getOutputStream();
        IOUtils.copy(inputStream, outputStream);
    }
 <SPLIT>     public synchronized InputStream getResourceAsStream(String name) {
        InputStream inputStream = null;
        BufferedInputStream in = null;
        BufferedOutputStream out = null;
        try {
            URL url = getResource(name);
            String remoteName = url.toExternalForm();
            String localName = (String) cacheHashtable.get(remoteName);
            if (localName != null) {
                System.out.println(""Retrieving \"""" + localName + ""\""..."");
                return new FileInputStream(localName);
            }
            String host = url.getHost();
            String prot = url.getProtocol();
            int port = url.getPort();
            File cacheFile = new File(cacheDir, prot + File.separator + host + File.separator + ""port"" + (port == -1 ? """" : Integer.toString(port)) + File.separator + name);
            cacheFile = new File(cacheFile.getCanonicalPath());
            localName = cacheFile.getCanonicalPath();
            System.out.println(""Comparing \"""" + localName + ""\""..."");
            URLConnection urlConnection = url.openConnection();
            if (cacheFile.exists()) {
                urlConnection.setIfModifiedSince(cacheFile.lastModified());
            }
            if (urlConnection instanceof HttpURLConnection) {
                HttpURLConnection httpURLConnection = (HttpURLConnection) urlConnection;
                httpURLConnection.setFollowRedirects(true);
                httpURLConnection.setRequestMethod(""GET"");
                int responseCode = httpURLConnection.getResponseCode();
                System.out.println(httpURLConnection.getResponseMessage() + "", "" + httpURLConnection.getContentLength() + "" bytes"" + "", "" + new Date(httpURLConnection.getDate()) + "", "" + new Date(httpURLConnection.getLastModified()));
                if (responseCode != HttpURLConnection.HTTP_OK) {
                    return null;
                }
            }
            inputStream = urlConnection.getInputStream();
            if (inputStream == null) return null;
            if (cacheFile.exists()) {
                long lastModified = urlConnection.getLastModified();
                if ((lastModified > 0) && (lastModified < cacheFile.lastModified())) {
                    inputStream.close();
                    cacheHashtable.put(remoteName, localName);
                    System.out.println(""Retrieving \"""" + localName + ""\""..."");
                    return new FileInputStream(cacheFile);
                }
            }
            File parentFile = new File(cacheFile.getParent());
            parentFile.mkdirs();
            localName = cacheFile.getCanonicalPath();
            System.out.println(""CACHING \"""" + localName + ""\""..."");
            in = new BufferedInputStream(inputStream);
            out = new BufferedOutputStream(new FileOutputStream(cacheFile));
            int i;
            while ((i = in.read()) > -1) out.write(i);
            out.close();
            in.close();
            cacheHashtable.put(remoteName, localName);
            System.out.println(""Retrieving \"""" + localName + ""\""..."");
            return new FileInputStream(localName);
        } catch (Exception ex) {
            try {
                inputStream.close();
            } catch (Exception ex1) {
            }
            try {
                in.close();
            } catch (Exception ex1) {
            }
            try {
                out.close();
            } catch (Exception ex1) {
            }
            ex.printStackTrace();
            return null;
        }
    }
",335,,LABEL_1,LABEL_0,,-4,"doGet,request,response,rewrittenQueryString,rewrittenUrl,httpURLConnection,header,value,inputStream,outputStream",,,,0,,0,Greedy,1,0.000687857,,[]
359,"    public static String getMD5(String source) {
        String s = null;
        char hexDigits[] = { '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f' };
        try {
            java.security.MessageDigest md = java.security.MessageDigest.getInstance(""MD5"");
            md.update(source.getBytes());
            byte tmp[] = md.digest();
            char str[] = new char[16 * 2];
            int k = 0;
            for (int i = 0; i < 16; i++) {
                byte byte0 = tmp[i];
                str[k++] = hexDigits[byte0 >>> 4 & 0xf];
                str[k++] = hexDigits[byte0 & 0xf];
            }
            s = new String(str);
        } catch (Exception e) {
            e.printStackTrace();
        }
        return s;
    }
 <SPLIT>     protected static final byte[] digest(String s) {
        byte[] ret = null;
        try {
            MessageDigest md = MessageDigest.getInstance(""MD5"");
            md.update(s.getBytes());
            ret = md.digest();
        } catch (NoSuchAlgorithmException e) {
            System.err.println(""no message digest algorithm available!"");
            System.exit(1);
        }
        return ret;
    }
",194,,LABEL_1,LABEL_1,LABEL_1,-1,"getMD5,source,s,hexDigits,md,tmp,str,k,i,byte0",,7,19,0,,0,GA,4620,0.696828584,failed,"[';source = 0', ';print(source)', ';s = 0']"
360,"    private static boolean genCustRatingFileAndMovieIndexFile(String completePath, String masterFile, String CustRatingFileName, String MovieIndexFileName) {
        try {
            File inFile = new File(completePath + fSep + ""SmartGRAPE"" + fSep + masterFile);
            FileChannel inC = new FileInputStream(inFile).getChannel();
            File outFile1 = new File(completePath + fSep + ""SmartGRAPE"" + fSep + MovieIndexFileName);
            FileChannel outC1 = new FileOutputStream(outFile1, true).getChannel();
            File outFile2 = new File(completePath + fSep + ""SmartGRAPE"" + fSep + CustRatingFileName);
            FileChannel outC2 = new FileOutputStream(outFile2, true).getChannel();
            int fileSize = (int) inC.size();
            int totalNoDataRows = fileSize / 7;
            ByteBuffer mappedBuffer = inC.map(FileChannel.MapMode.READ_ONLY, 0, fileSize);
            int startIndex = 1, count = 0;
            short currentMovie = 1;
            while (mappedBuffer.hasRemaining()) {
                count++;
                short movieName = mappedBuffer.getShort();
                int customer = mappedBuffer.getInt();
                byte rating = mappedBuffer.get();
                if (movieName != currentMovie) {
                    ByteBuffer outBuf1 = ByteBuffer.allocate(10);
                    outBuf1.putShort(currentMovie);
                    outBuf1.putInt(startIndex);
                    outBuf1.putInt(count - 1);
                    outBuf1.flip();
                    outC1.write(outBuf1);
                    currentMovie = movieName;
                    startIndex = count;
                }
                ByteBuffer outBuf2 = ByteBuffer.allocate(5);
                outBuf2.putInt(customer);
                outBuf2.put(rating);
                outBuf2.flip();
                outC2.write(outBuf2);
            }
            ByteBuffer endOfIndexFile = ByteBuffer.allocate(10);
            endOfIndexFile.putShort(currentMovie);
            endOfIndexFile.putInt(startIndex);
            endOfIndexFile.putInt(100480506);
            endOfIndexFile.flip();
            outC1.write(endOfIndexFile);
            outC1.close();
            outC2.close();
            return true;
        } catch (IOException e) {
            System.err.println(e);
            return false;
        }
    }
 <SPLIT>     public void modifyApplicationMessage(String locale, String messageName, String messageValue) {
        Properties properties = new Properties();
        try {
            String i18nPath = ServerUtil.removelastResourceURL(ConfigurationServiceImpl.class.getResource(""/es/ua/tranube/prototype/main/client/TranubeConstants_en.properties"").getPath()).toString();
            File englishFile = new File(i18nPath + ""TranubeConstants_en.properties"");
            if (!englishFile.exists()) throw new Exception(""English file not found"");
            String propertiesFilePath = i18nPath + ""TranubeConstants_"" + locale + "".properties"";
            File file = new File(propertiesFilePath);
            if (!file.exists()) {
                FileReader in = new FileReader(englishFile);
                FileWriter out = new FileWriter(file);
                int c;
                while ((c = in.read()) != -1) out.write(c);
                in.close();
                out.close();
            }
            InputStream is = ConfigurationServiceImpl.class.getResourceAsStream(""/es/ua/tranube/prototype/main/client/TranubeConstants_"" + locale + "".properties"");
            BufferedReader breader = new BufferedReader(new InputStreamReader(is));
            String line = null;
            StringBuilder strBuilder = new StringBuilder();
            boolean found = false;
            while ((line = breader.readLine()) != null) {
                if (line.startsWith(""#"")) strBuilder.append(line).append(""\n""); else {
                    String[] pieces = line.split(""="");
                    if (pieces.length == 2) {
                        if (pieces[0].trim().equals(messageName)) {
                            strBuilder.append(pieces[0].trim() + "" = "" + messageValue + ""\n"");
                            found = true;
                        } else strBuilder.append(line).append(""\n"");
                    } else strBuilder.append(line).append(""\n"");
                }
            }
            if (!found) strBuilder.append(messageName).append("" = "").append(messageValue).append(""\n"");
            breader.close();
            is.close();
            FileWriter writer = new FileWriter(file);
            writer.write(strBuilder.toString());
            writer.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
",391,"    private static boolean genCustRatingFileAndmovieIndexFiles(String successpath, String configName, String CustRatingFilesName, String MovieEditFileSize) {
        try {
            FileincSourceFilee = new File(successpath + fSep + ""SmartGRAPE"" + fSep + configName);
            FileChannel inC = noutCFileInputStream(incSourceFile).getChannel();
            FiloutF1e1 = new File(successpath + fSep + ""SmartGRAPE"" + fSep + MovieEditFileSize);
            FileChannagainB1tC1 = new FileOutputStream(outF1, true).getChannel();
            File againFile6 = new File(successpath + fSep + ""SmartGRAPE"" + fSep + CustRatingFilesName);
            FileChannel ouOutF2 new FileOutputStream(againFile6, true).getChannel();
            int fFileLength= (int) outC.size();
            int tototalNoPageLrows FileLength / 7;
            ByteBuffer mapMachedStreamoutC.map(FileChannel.MapMode.READ_ONLY, 0, FileLength);
            int stopRow = 1, sum = 0;
            short currentPicture = 1;
            while (MachedStream.hasRemaining()) {
                sum++;
                short voiceInfo = MachedStream.getShort();
                int CustomER = MachedStream.getInt();
                byte url = MachedStream.get();
                if (movoiceInfo= currentPicture) {
                    ByteBuffer outBbuff3 = ByteBuffer.allocate(10);
                    ououtBbuff3utShort(currentPicture);
                 outBbuff3uf1.putInt(stopRow);
                  outBbuff3f1.putInt(sum - 1);
                    outBbuff3.flip();
                    againB1.write(outBbuff3);
                    currentPicture = voiceInfo;
                    stopRow = sum;
                }
                ByteBuffer outBuf200 = ByteBuffer.allocate(5);
                outBuf200.putInt(CustomER);
             outBuf200uf2.put(url);
                outBuf200.flip();
                OutF2.write(outBuf200);
            }
            ByteBuffer ended
 = ByteBuffer.allocate(10);
            enended
utShort(currentPicture);
         ended
ile.putInt(stopRow);
            ended
.putInt(100480506);
            ended
.flip();
            againB1.write(ended
);
            againB1.close();
            OutF2.close();
            return true;
        } catch (IOException e) {
            System.err.println(e);
            return false;
        }
    }
",LABEL_1,LABEL_1,0.545532465,1,"genCustRatingFileAndMovieIndexFile,completePath,masterFile,CustRatingFileName,MovieIndexFileName,inFile,inC,outFile1,outC1,outFile2,outC2,fileSize,totalNoDataRows,mappedBuffer,startIndex,count,currentMovie,movieName,customer,rating,outBuf1,outBuf2,endOfIndexFile",,23,73,0,"genCustRatingFileAndMovieIndexFile:genCustRatingFileAndmovieIndexFiles,completePath:successpath,masterFile:configName,CustRatingFileName:CustRatingFilesName,MovieIndexFileName:MovieEditFileSize,inFile:incSourceFile,inC:outC,outFile1:outF1,outC1:againB1,outFile2:againFile6,outC2:OutF2,fileSize:FileLength,totalNoDataRows:totalNoPageLrows,mappedBuffer:MachedStream,startIndex:stopRow,count:sum,currentMovie:currentPicture,movieName:voiceInfo,customer:CustomER,rating:url,outBuf1:outBbuff3,outBuf2:outBuf200,endOfIndexFile:ended
,",0,GA,4306,0.906365569,ga,[]
361,"    public static Body decodeBody(InputStream in, String contentTransferEncoding) throws IOException {
        if (contentTransferEncoding != null) {
            contentTransferEncoding = MimeUtility.getHeaderParameter(contentTransferEncoding, null);
            if (""quoted-printable"".equalsIgnoreCase(contentTransferEncoding)) {
                in = new QuotedPrintableInputStream(in);
            } else if (""base64"".equalsIgnoreCase(contentTransferEncoding)) {
                in = new Base64InputStream(in);
            }
        }
        BinaryTempFileBody tempBody = new BinaryTempFileBody();
        OutputStream out = tempBody.getOutputStream();
        IOUtils.copy(in, out);
        out.close();
        return tempBody;
    }
 <SPLIT>     private boolean setPayload() throws IOException {
        if (Index < Headers.length) {
            FileOutputStream fos = new FileOutputStream(Headers[Index], true);
            FileInputStream fis = new FileInputStream(HeadlessData);
            FileChannel fic = fis.getChannel();
            FileChannel foc = fos.getChannel();
            fic.transferTo(0, fic.size(), foc);
            fic.close();
            foc.close();
            setDestination(Destinations[Index]);
            setPayload(Headers[Index]);
            Index++;
            return true;
        }
        return false;
    }
",113,,LABEL_1,LABEL_1,LABEL_1,-1,"decodeBody,in,contentTransferEncoding,tempBody,out",,2,9,0,,0,GA,2270,0.336498288,failed,"[';print(contentTransferEncoding)', ';tempBody = 0', ';print(tempBody)', ';out = 0', ';decodesFile = 0', ';print(decodesFile)', ';exec = 0', ';url = 0', ';print(url)', ';login = 0', ';load = 0', ';request = 0', ';conn = 0', ';m = 0']"
362,"    private ByteArrayInputStream fetchUrl(String urlString, Exception[] outException) {
        URL url;
        try {
            url = new URL(urlString);
            InputStream is = null;
            int inc = 65536;
            int curr = 0;
            byte[] result = new byte[inc];
            try {
                is = url.openStream();
                int n;
                while ((n = is.read(result, curr, result.length - curr)) != -1) {
                    curr += n;
                    if (curr == result.length) {
                        byte[] temp = new byte[curr + inc];
                        System.arraycopy(result, 0, temp, 0, curr);
                        result = temp;
                    }
                }
                return new ByteArrayInputStream(result, 0, curr);
            } finally {
                if (is != null) {
                    try {
                        is.close();
                    } catch (IOException e) {
                    }
                }
            }
        } catch (Exception e) {
            if (outException != null) {
                outException[0] = e;
            }
        }
        return null;
    }
 <SPLIT>     public void patch() throws IOException {
        if (mods.isEmpty()) {
            return;
        }
        IOUtils.copy(new FileInputStream(Paths.getMinecraftJarPath()), new FileOutputStream(new File(Paths.getMinecraftBackupPath())));
        JarFile mcjar = new JarFile(Paths.getMinecraftJarPath());
    }
",204,,LABEL_0,LABEL_0,LABEL_0,-1,"fetchUrl,urlString,outException,url,is,inc,curr,result,n,temp",,10,38,0,,0,GA,4731,0.71947432,failed,"[';fetchUrl = 0', ';print(fetchUrl)']"
363,"    public synchronized InputStream getResourceAsStream(String name) {
        InputStream inputStream = null;
        BufferedInputStream in = null;
        BufferedOutputStream out = null;
        try {
            URL url = getResource(name);
            String remoteName = url.toExternalForm();
            String localName = (String) cacheHashtable.get(remoteName);
            if (localName != null) {
                System.out.println(""Retrieving \"""" + localName + ""\""..."");
                return new FileInputStream(localName);
            }
            String host = url.getHost();
            String prot = url.getProtocol();
            int port = url.getPort();
            File cacheFile = new File(cacheDir, prot + File.separator + host + File.separator + ""port"" + (port == -1 ? """" : Integer.toString(port)) + File.separator + name);
            cacheFile = new File(cacheFile.getCanonicalPath());
            localName = cacheFile.getCanonicalPath();
            System.out.println(""Comparing \"""" + localName + ""\""..."");
            URLConnection urlConnection = url.openConnection();
            if (cacheFile.exists()) {
                urlConnection.setIfModifiedSince(cacheFile.lastModified());
            }
            if (urlConnection instanceof HttpURLConnection) {
                HttpURLConnection httpURLConnection = (HttpURLConnection) urlConnection;
                httpURLConnection.setFollowRedirects(true);
                httpURLConnection.setRequestMethod(""GET"");
                int responseCode = httpURLConnection.getResponseCode();
                System.out.println(httpURLConnection.getResponseMessage() + "", "" + httpURLConnection.getContentLength() + "" bytes"" + "", "" + new Date(httpURLConnection.getDate()) + "", "" + new Date(httpURLConnection.getLastModified()));
                if (responseCode != HttpURLConnection.HTTP_OK) {
                    return null;
                }
            }
            inputStream = urlConnection.getInputStream();
            if (inputStream == null) return null;
            if (cacheFile.exists()) {
                long lastModified = urlConnection.getLastModified();
                if ((lastModified > 0) && (lastModified < cacheFile.lastModified())) {
                    inputStream.close();
                    cacheHashtable.put(remoteName, localName);
                    System.out.println(""Retrieving \"""" + localName + ""\""..."");
                    return new FileInputStream(cacheFile);
                }
            }
            File parentFile = new File(cacheFile.getParent());
            parentFile.mkdirs();
            localName = cacheFile.getCanonicalPath();
            System.out.println(""CACHING \"""" + localName + ""\""..."");
            in = new BufferedInputStream(inputStream);
            out = new BufferedOutputStream(new FileOutputStream(cacheFile));
            int i;
            while ((i = in.read()) > -1) out.write(i);
            out.close();
            in.close();
            cacheHashtable.put(remoteName, localName);
            System.out.println(""Retrieving \"""" + localName + ""\""..."");
            return new FileInputStream(localName);
        } catch (Exception ex) {
            try {
                inputStream.close();
            } catch (Exception ex1) {
            }
            try {
                in.close();
            } catch (Exception ex1) {
            }
            try {
                out.close();
            } catch (Exception ex1) {
            }
            ex.printStackTrace();
            return null;
        }
    }
 <SPLIT>     @Override
    public List<SearchResult> search(String query, SortOrder order, int maxResults) throws Exception {
        if (query == null) {
            return null;
        }
        String encodedQuery = """";
        try {
            encodedQuery = URLEncoder.encode(query, ""UTF-8"");
        } catch (UnsupportedEncodingException e) {
            throw e;
        }
        final int startAt = 0;
        final int pageNr = (startAt - 1) / 30;
        final String url = String.format(QUERYURL, encodedQuery, String.valueOf(pageNr), (order == SortOrder.BySeeders ? SORT_SEEDS : SORT_COMPOSITE));
        HttpParams httpparams = new BasicHttpParams();
        HttpConnectionParams.setConnectionTimeout(httpparams, CONNECTION_TIMEOUT);
        HttpConnectionParams.setSoTimeout(httpparams, CONNECTION_TIMEOUT);
        DefaultHttpClient httpclient = new DefaultHttpClient(httpparams);
        httpclient.getParams().setParameter(""http.useragent"", ""Mozilla/5.0 (Windows; U; Windows NT 6.1; en-US; rv:1.9.2.2) Gecko/20100316 Firefox/3.6.2"");
        HttpGet httpget = new HttpGet(url);
        HttpResponse response = httpclient.execute(httpget);
        InputStream instream = response.getEntity().getContent();
        String html = HttpHelper.ConvertStreamToString(instream);
        instream.close();
        return parseHtml(html);
    }
",645,"    public synchronized InputStream getResourceAsStream(String name) {
        InputStream inputStream = null;
        BufferedInputStream in = null;
        BufferedOutputStream sys = null;
        try {
            URL Url = getResource(name);
            String remoteName = Url.toExternalForm();
            String localName = (String) cacheHashtable.get(remoteName);
            if (localName != null) {
                System.sys.println(""Retrieving \"""" + localName + ""\""..."");
                return new FileInputStream(localName);
            }
            String host = Url.getHost();
            String prot = Url.getProtocol();
            int port = Url.getPort();
            File cacheFile = new File(cacheDir, prot + File.separator + host + File.separator + ""port"" + (port == -1 ? """" : Integer.toString(port)) + File.separator + name);
            cacheFile = new File(cacheFile.getCanonicalPath());
            localName = cacheFile.getCanonicalPath();
            System.sys.println(""Comparing \"""" + localName + ""\""..."");
            URLConnection urlConnection = Url.openConnection();
            if (cacheFile.exists()) {
                urlConnection.setIfModifiedSince(cacheFile.lastModified());
            }
            if (urlConnection instanceof HttpURLConnection) {
                HttpURLConnection httpURLConnection = (HttpURLConnection) urlConnection;
                httpURLConnection.setFollowRedirects(true);
                httpURLConnection.setRequestMethod(""GET"");
                int responseCode = httpURLConnection.getResponseCode();
                System.sys.println(httpURLConnection.getResponseMessage() + "", "" + httpURLConnection.getContentLength() + "" bytes"" + "", "" + new Date(httpURLConnection.getDate()) + "", "" + new Date(httpURLConnection.getLastModified()));
                if (responseCode != HttpURLConnection.HTTP_OK) {
                    return null;
                }
            }
            inputStream = urlConnection.getInputStream();
            if (inputStream == null) return null;
            if (cacheFile.exists()) {
                long lastModified = urlConnection.getLastModified();
                if ((lastModified > 0) && (lastModified < cacheFile.lastModified())) {
                    inputStream.close();
                    cacheHashtable.put(remoteName, localName);
                    System.sys.println(""Retrieving \"""" + localName + ""\""..."");
                    return new FileInputStream(cacheFile);
                }
            }
            File parentFile = new File(cacheFile.getParent());
            parentFile.mkdirs();
            localName = cacheFile.getCanonicalPath();
            System.sys.println(""CACHING \"""" + localName + ""\""..."");
            in = new BufferedInputStream(inputStream);
            sys = new BufferedOutputStream(new FileOutputStream(cacheFile));
            int i;
            while ((i = in.read()) > -1) sys.write(i);
            sys.close();
            in.close();
            cacheHashtable.put(remoteName, localName);
            System.sys.println(""Retrieving \"""" + localName + ""\""..."");
            return new FileInputStream(localName);
        } catch (Exception ex) {
            try {
                inputStream.close();
            } catch (Exception ex1) {
            }
            try {
                in.close();
            } catch (Exception ex1) {
            }
            try {
                sys.close();
            } catch (Exception ex1) {
            }
            ex.printStackTrace();
            return null;
        }
    }
",LABEL_0,LABEL_0,LABEL_1,1,"getResourceAsStream,name,inputStream,in,out,url,remoteName,localName,host,prot,port,cacheFile,urlConnection,httpURLConnection,responseCode,lastModified","getResourceAsStream:-0.038039565086364746,name:-0.0068430304527282715,inputStream:-0.06011253595352173,in:-0.01511847972869873,out:0.07022523880004883,url:0.17517787218093872,remoteName:-0.0736844539642334,localName:-0.1989048719406128,host:0.008923888206481934,prot:-0.004741549491882324,port:0.051153600215911865,cacheFile:-0.27285706996917725,urlConnection:-0.23885953426361084,httpURLConnection:-0.22425705194473267,responseCode:-0.039319396018981934,lastModified:-0.06984817981719971,",2,17,0,"url:Url,out:sys,",0,Greedy,203,0.035963051,replace,[]
364,"    public static void save(String packageName, ArrayList<byte[]> fileContents, ArrayList<String> fileNames) throws Exception {
        String dirBase = Util.JAVA_DIR + File.separator + packageName;
        File packageDir = new File(dirBase);
        if (!packageDir.exists()) {
            boolean created = packageDir.mkdir();
            if (!created) {
                File currentPath = new File(""."");
                throw new Exception(""Directory "" + packageName + "" could not be created. Current directory: "" + currentPath.getAbsolutePath());
            }
        }
        for (int i = 0; i < fileContents.size(); i++) {
            File file = new File(Util.JAVA_DIR + File.separator + fileNames.get(i));
            FileOutputStream fos = new FileOutputStream(file);
            fos.write(fileContents.get(i));
            fos.flush();
            fos.close();
        }
        for (int i = 0; i < fileNames.size(); i++) {
            File fileSrc = new File(Util.JAVA_DIR + File.separator + fileNames.get(i));
            File fileDst = new File(dirBase + File.separator + fileNames.get(i));
            BufferedReader reader = new BufferedReader(new FileReader(fileSrc));
            BufferedWriter writer = new BufferedWriter(new FileWriter(fileDst));
            writer.append(""package "" + packageName + "";\n"");
            String line = """";
            while ((line = reader.readLine()) != null) writer.append(line + ""\n"");
            writer.flush();
            writer.close();
            reader.close();
        }
    }
 <SPLIT>     private void unzip(File filename) throws ZipException, IOException {
        ZipInputStream in = new ZipInputStream(new BufferedInputStream(new FileInputStream(filename)));
        ZipEntry entry = null;
        boolean first_entry = true;
        while ((entry = in.getNextEntry()) != null) {
            if (first_entry) {
                if (!entry.isDirectory()) {
                    File subdir = new File(dir + File.separator + filename.getName().substring(0, filename.getName().length() - SUFFIX_ZIP.length()));
                    if (!subdir.exists()) {
                        subdir.mkdir();
                        dir = subdir;
                    }
                }
                first_entry = false;
            }
            if (entry.isDirectory()) {
                FileUtils.forceMkdir(new File(dir + File.separator + entry.getName()));
            } else {
                File outfile = new File(dir + File.separator + entry.getName());
                File outdir = new File(outfile.getAbsolutePath().substring(0, outfile.getAbsolutePath().length() - outfile.getName().length()));
                if (!outdir.exists()) FileUtils.forceMkdir(outdir);
                FileOutputStream fo = new FileOutputStream(outfile);
                BufferedOutputStream bos = new BufferedOutputStream(fo, BUFFER);
                int read;
                byte data[] = new byte[BUFFER];
                while ((read = in.read(data, 0, BUFFER)) != -1) {
                    read_position++;
                    bos.write(data, 0, read);
                }
                bos.flush();
                bos.close();
            }
        }
        in.close();
    }
",335,"    public static void load(String packageName, ArrayList<byte[]>  fileParts, ArrayList<String>  fileName) throws Exception {
        String DirPath = Util.JAVA_DIR + File.separator + packageName;
        File PackageDir = new File(DirPath);
        if (!packageDir.exists()) {
            boolean controlled = PackageDir.mkdir();
            if (!created) {
                File currentPath = new File(""."");
                throw new Exception(""Directory "" + packageName + "" could not be created. Current directory: "" + currentPath.getAbsolutePath());
            }
        }
        for (int i = 0; i <  fileParts.size(); i++) {
            File uri = new File(Util.JAVA_DIR + File.separator +  fileName.get(i));
            FileOutputStream flops = new FileOutputStream(uri);
            flops.write( fileParts.get(i));
            flops.flush();
            flops.close();
        }
        for (int i = 0; i <  fileName.size(); i++) {
            File fileDrec = new File(Util.JAVA_DIR + File.separator +  fileName.get(i));
            File fileDst = new File(DirPath + File.separator +  fileName.get(i));
            BufferedReader stream = new BufferedReader(new FileReader(fileDrec));
            BufferedWriter writer = new BufferedWriter(new FileWriter(fileDst));
            writer.append(""package "" + packageName + "";
"");
            String url = """";
            while ((url = stream.readLine()) != null) writer.append(url + ""
"");
            writer.flush();
            writer.close();
            stream.close();
        }
    }
;save = 0;print(save);load = 0;upload = 0;print(upload);print(transform);open = 0;print(open);http = 0;url = 0",LABEL_1,LABEL_1,LABEL_1,1,"save,packageName,fileContents,fileNames,dirBase,packageDir,created,currentPath,i,file,fos,fileSrc,fileDst,reader,writer,line","save:0.0005870461463928223,packageName:0.004472792148590088,fileContents:-0.005101323127746582,fileNames:-0.003834545612335205,dirBase:0.0033228397369384766,packageDir:-0.0001748800277709961,created:0.0010476112365722656,currentPath:0.0009987354278564453,i:0.005257368087768555,file:0.0004457831382751465,fos:-0.0031901001930236816,fileSrc:-0.0045632123947143555,fileDst:0.016707658767700195,reader:-0.00251007080078125,writer:0.00964277982711792,line:-0.0013737678527832031,",11,31,0,"fileDst:fileDst,writer:writer,i:i,packageName:packageName,dirBase:DirPath,created:controlled,currentPath:currentPath,save:load,file:uri,packageDir:PackageDir,line:url,reader:stream,fos:flops,fileNames: fileName,fileSrc:fileDrec,fileContents: fileParts,",0,Greedy,1897,0.379860771,inesrt,"[';save = 0', ';print(save)', ';load = 0', ';upload = 0', ';print(upload)', ';print(transform)', ';open = 0', ';print(open)', ';http = 0', ';url = 0']"
365,"    protected Object unmarshallXml(final Unmarshaller unmarshaller, final String accessUrl, final String nameSpace, final String replace, final String with) throws Exception {
        final URL url = new URL(accessUrl);
        final BufferedReader inputStream = new BufferedReader(new InputStreamReader(url.openStream()));
        String xmlContent = readWithStringBuffer(inputStream);
        if (replace != null) {
            xmlContent = xmlContent.replace(replace, with);
        }
        LOGGER.info(""Calls "" + accessUrl);
        if (LOGGER.isDebugEnabled()) {
            LOGGER.debug(""\nXml:"" + accessUrl + ""\n"" + xmlContent);
        }
        if (LOGGER.isDebugEnabled()) {
            final BufferedWriter out = new BufferedWriter(new FileWriter(""target/XmlAgentLog"" + xmlRequestNumber++ + "".txt""));
            out.write(xmlContent);
            out.close();
        }
        final ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(xmlContent.getBytes());
        Source source;
        if (nameSpace != null) {
            source = setNameSpaceOnXmlStream(byteArrayInputStream, nameSpace);
        } else {
            source = new StreamSource(byteArrayInputStream);
        }
        return unmarshaller.unmarshal(source);
    }
 <SPLIT>     public APIResponse create(Application application) throws Exception {
        APIResponse response = new APIResponse();
        connection = (HttpURLConnection) new URL(url + ""/api/application/create"").openConnection();
        connection.setDoOutput(true);
        connection.setRequestMethod(""POST"");
        connection.setRequestProperty(""Content-Type"", ""application/json; charset=utf-8"");
        connection.setUseCaches(false);
        connection.setConnectTimeout(TIMEOUT);
        connection.connect();
        marshaller.marshal(application, new MappedXMLStreamWriter(new MappedNamespaceConvention(new Configuration()), new OutputStreamWriter(connection.getOutputStream(), ""utf-8"")));
        connection.getOutputStream().flush();
        connection.getOutputStream().close();
        if (connection.getResponseCode() == HttpURLConnection.HTTP_OK) {
            JSONObject obj = new JSONObject(new String(new BufferedReader(new InputStreamReader(connection.getInputStream(), ""utf-8"")).readLine()));
            response.setDone(true);
            response.setMessage(unmarshaller.unmarshal(new MappedXMLStreamReader(obj, new MappedNamespaceConvention(new Configuration()))));
            connection.getInputStream().close();
        } else {
            response.setDone(false);
            response.setMessage(""Create Application Error Code: Http ("" + connection.getResponseCode() + "")"");
        }
        connection.disconnect();
        return response;
    }
",221,,LABEL_0,LABEL_0,LABEL_0,-1,"unmarshallXml,unmarshaller,accessUrl,nameSpace,replace,with,url,inputStream,xmlContent,out,xmlRequestNumber,byteArrayInputStream,source",,13,37,0,,0,GA,5881,0.996537002,failed,[]
366,"    public void actualizar() throws SQLException, ClassNotFoundException, Exception {
        Connection conn = null;
        PreparedStatement ms = null;
        registroActualizado = false;
        try {
            conn = ToolsBD.getConn();
            conn.setAutoCommit(false);
            Date fechaSystem = new Date();
            DateFormat aaaammdd = new SimpleDateFormat(""yyyyMMdd"");
            int fzafsis = Integer.parseInt(aaaammdd.format(fechaSystem));
            DateFormat hhmmss = new SimpleDateFormat(""HHmmss"");
            DateFormat sss = new SimpleDateFormat(""S"");
            String ss = sss.format(fechaSystem);
            if (ss.length() > 2) {
                ss = ss.substring(0, 2);
            }
            int fzahsis = Integer.parseInt(hhmmss.format(fechaSystem) + ss);
            ms = conn.prepareStatement(SENTENCIA_UPDATE);
            ms.setString(1, descartadoEntrada);
            ms.setString(2, usuarioEntrada);
            ms.setString(3, motivosDescarteEntrada);
            ms.setInt(4, Integer.parseInt(anoOficio));
            ms.setInt(5, Integer.parseInt(oficinaOficio));
            ms.setInt(6, Integer.parseInt(numeroOficio));
            ms.setInt(7, anoEntrada != null ? Integer.parseInt(anoEntrada) : 0);
            ms.setInt(8, oficinaEntrada != null ? Integer.parseInt(oficinaEntrada) : 0);
            ms.setInt(9, numeroEntrada != null ? Integer.parseInt(numeroEntrada) : 0);
            int afectados = ms.executeUpdate();
            if (afectados > 0) {
                registroActualizado = true;
            } else {
                registroActualizado = false;
            }
            conn.commit();
        } catch (Exception ex) {
            System.out.println(""Error inesperat, no s'ha desat el registre: "" + ex.getMessage());
            ex.printStackTrace();
            registroActualizado = false;
            errores.put("""", ""Error inesperat, no s'ha desat el registre"" + "": "" + ex.getClass() + ""->"" + ex.getMessage());
            try {
                if (conn != null) conn.rollback();
            } catch (SQLException sqle) {
                throw new RemoteException(""S'ha produït un error i no s'han pogut tornar enrere els canvis efectuats"", sqle);
            }
            throw new RemoteException(""Error inesperat, no s'ha modifcat el registre"", ex);
        } finally {
            ToolsBD.closeConn(conn, ms, null);
        }
    }
 <SPLIT>     protected File EncodeReturn() throws EncodeFailedException, IOException {
        CryptoClient c = getNode().getCryptoClientByID(PiggybackCrypto);
        File tmpf = getNode().getTempFM().createNewFile(""encodereturn"", ""download"");
        ChannelWriter cw = new ChannelWriter(tmpf);
        cw.putLongFile(DownloadData);
        cw.close();
        File encdata = c.RawEncode(tmpf, RawKey);
        File pigdata = PigData.EncodeData(encdata);
        File pigroute = ReturnPigRoute.EncodeData(ReturnRouteFile);
        FileOutputStream fos = new FileOutputStream(pigroute, true);
        FileChannel foc = fos.getChannel();
        FileInputStream fis = new FileInputStream(pigdata);
        FileChannel fic = fis.getChannel();
        fic.transferTo(0, fic.size(), foc);
        foc.close();
        fic.close();
        pigdata.delete();
        ReturnRouteFile.delete();
        encdata.delete();
        return pigroute;
    }
",449,,LABEL_0,LABEL_0,LABEL_0,-1,"actualizar,ClassNotFoundException,Exception,conn,ms,fechaSystem,aaaammdd,fzafsis,hhmmss,sss,ss,fzahsis,afectados",,9,23,0,,0,GA,5812,1.094471089,failed,[]
367,"    @Before
    public void setUp() throws Exception {
        final URL url = getClass().getClassLoader().getResource(""insecureSSL.keystore"");
        final KeyStore keystore = KeyStore.getInstance(""jks"");
        final char[] pwd = ""nopassword"".toCharArray();
        keystore.load(url.openStream(), pwd);
        final TrustManagerFactory trustManagerFactory = createTrustManagerFactory();
        trustManagerFactory.init(keystore);
        final TrustManager[] trustManagers = trustManagerFactory.getTrustManagers();
        final KeyManagerFactory keyManagerFactory = createKeyManagerFactory();
        keyManagerFactory.init(keystore, pwd);
        final KeyManager[] keyManagers = keyManagerFactory.getKeyManagers();
        final SSLContext serverSSLContext = SSLContext.getInstance(""TLS"");
        serverSSLContext.init(keyManagers, trustManagers, null);
        localServer_ = new LocalTestServer(serverSSLContext);
        localServer_.registerDefaultHandlers();
        localServer_.start();
    }
 <SPLIT>     public void metodo1() {
        int temp;
        boolean flagDesordenado = true;
        while (flagDesordenado) {
            flagDesordenado = false;
            for (int i = 0; i < this.tamanoTabla - 1; i++) {
                if (tabla[i] > tabla[i + 1]) {
                    flagDesordenado = true;
                    temp = tabla[i];
                    tabla[i] = tabla[i + 1];
                    tabla[i + 1] = temp;
                }
            }
        }
    }
",171,,LABEL_0,LABEL_0,LABEL_0,-1,"setUp,url,keystore,pwd,trustManagerFactory,trustManagers,keyManagerFactory,keyManagers,serverSSLContext,localServer_",,10,26,0,,0,GA,4329,0.662018096,failed,"[';setUp = 0', ';print(setUp)', ';url = 0', ';system = 0', ';trustMaturers = 0', ';keymanurers = 0', ';keyMuturers = 0']"
368,"    public String getmd5(String password) {
        String pwHash = """";
        MessageDigest md = null;
        try {
            md = MessageDigest.getInstance(""MD5"");
            md.reset();
            md.update(password.getBytes());
            byte[] b = md.digest();
            for (int i = 0; i < b.length; i++) {
                pwHash += Integer.toString((b[i] & 0xFF) + 0x100, 16).substring(1);
            }
        } catch (NoSuchAlgorithmException ex) {
            Logger.fatal(""MD5 Hash Algorithm not found"", ex);
        }
        Logger.info(""PWHash erzeugt und wird übergeben"");
        return pwHash;
    }
 <SPLIT>     public static void download(String address, String localFileName) {
        OutputStream out = null;
        URLConnection conn = null;
        InputStream in = null;
        try {
            URL url = new URL(address);
            out = new BufferedOutputStream(new FileOutputStream(localFileName));
            conn = url.openConnection();
            in = conn.getInputStream();
            byte[] buffer = new byte[1024];
            int numRead;
            long numWritten = 0;
            while ((numRead = in.read(buffer)) != -1) {
                out.write(buffer, 0, numRead);
                numWritten += numRead;
            }
            System.out.println(localFileName + ""\t"" + numWritten);
        } catch (Exception exception) {
            exception.printStackTrace();
        } finally {
            try {
                if (in != null) in.close();
                if (out != null) out.close();
            } catch (IOException ioe) {
                ioe.printStackTrace();
            }
        }
    }
",136,,LABEL_0,LABEL_0,LABEL_0,-1,"getmd5,password,pwHash,md,b,i",,1,3,0,,0,GA,2849,0.432176244,failed,"[';print(password)', ';print(pwHash)']"
369,"    public BufferedWriter createOutputStream(String inFile, String outFile) throws IOException {
        int k_blockSize = 1024;
        int byteCount;
        char[] buf = new char[k_blockSize];
        File ofp = new File(outFile);
        ZipOutputStream zos = new ZipOutputStream(new FileOutputStream(ofp));
        zos.setMethod(ZipOutputStream.DEFLATED);
        OutputStreamWriter osw = new OutputStreamWriter(zos, ""ISO-8859-1"");
        BufferedWriter bw = new BufferedWriter(osw);
        ZipEntry zot = null;
        File ifp = new File(inFile);
        ZipInputStream zis = new ZipInputStream(new FileInputStream(ifp));
        InputStreamReader isr = new InputStreamReader(zis, ""ISO-8859-1"");
        BufferedReader br = new BufferedReader(isr);
        ZipEntry zit = null;
        while ((zit = zis.getNextEntry()) != null) {
            if (zit.getName().equals(""content.xml"")) {
                continue;
            }
            zot = new ZipEntry(zit.getName());
            zos.putNextEntry(zot);
            while ((byteCount = br.read(buf, 0, k_blockSize)) >= 0) bw.write(buf, 0, byteCount);
            bw.flush();
            zos.closeEntry();
        }
        zos.putNextEntry(new ZipEntry(""content.xml""));
        bw.flush();
        osw = new OutputStreamWriter(zos, ""UTF8"");
        bw = new BufferedWriter(osw);
        return bw;
    }
 <SPLIT>     public static void main(String[] args) {
        if (args.length != 1) {
            System.out.println(""Usage: GZip source"");
            return;
        }
        String zipname = args[0] + "".gz"";
        GZIPOutputStream zipout;
        try {
            FileOutputStream out = new FileOutputStream(zipname);
            zipout = new GZIPOutputStream(out);
        } catch (IOException e) {
            System.out.println(""Couldn't create "" + zipname + ""."");
            return;
        }
        byte[] buffer = new byte[sChunk];
        try {
            FileInputStream in = new FileInputStream(args[0]);
            int length;
            while ((length = in.read(buffer, 0, sChunk)) != -1) zipout.write(buffer, 0, length);
            in.close();
        } catch (IOException e) {
            System.out.println(""Couldn't compress "" + args[0] + ""."");
        }
        try {
            zipout.close();
        } catch (IOException e) {
        }
    }
",279,"    public BufferedWriter createOutputStream(String inputStream, String workingDirectory) throws IOException {
        int k_blockSize = 1024;
        int ByteSize;
        char[] buf = new char[k_blockSize];
        File Oftp = new File(workingDirectory);
        ZipOutputStream modules = new ZipOutputStream(new FileOutputStream(Oftp));
        modules.setMethod(ZipOutputStream.DEFLATED);
        OutputStreamWriter eswd = new OutputStreamWriter(modules, ""ISO-8859-1"");
        BufferedWriter bw = new BufferedWriter(eswd);
        ZipEntry Zita = null;
        File ipl = new File(inputStream);
        ZipInputStream zis = new ZipInputStream(new FileInputStream(ipl));
        InputStreamReader isssr = new InputStreamReader(zis, ""ISO-8859-1"");
        BufferedReader body = new BufferedReader(isssr);
        ZipEntry zip = null;
        while ((zip = zis.getNextEntry()) != null) {
            if (zip.getName().equals(""content.xml"")) {
                continue;
            }
            Zita = new ZipEntry(zip.getName());
            modules.putNextEntry(Zita);
            while ((ByteSize = body.read(buf, 0, k_blockSize)) >= 0) bw.write(buf, 0, ByteSize);
            bw.flush();
            modules.closeEntry();
        }
        modules.putNextEntry(new ZipEntry(""content.xml""));
        bw.flush();
        eswd = new OutputStreamWriter(modules, ""UTF8"");
        bw = new BufferedWriter(eswd);
        return bw;
    }
;createOutputStream = 0;print(createOutputStream);inFile = 0;outFile = 0;print(outFile);k_blockSize = 0;byteCount = 0;buf = 0;ofp = 0;zos = 0;osw = 0;print(ByteSum);Oftp = 0;print(Oftp);OFtp = 0;osi = 0;ls = 0;bitcoin = 0;print(bitcoin);zar = 0;print(zar);ZA = 0;liquid = 0;print(liquid);fbwd = 0;print(fbwd)",LABEL_1,LABEL_1,LABEL_1,1,"createOutputStream,inFile,outFile,k_blockSize,byteCount,buf,ofp,zos,osw,bw,zot,ifp,zis,isr,br,zit","createOutputStream:0.007455885410308838,inFile:-0.003434300422668457,outFile:-0.006020188331604004,k_blockSize:0.007859289646148682,byteCount:5.823373794555664e-05,buf:0.002081751823425293,ofp:0.0009570717811584473,zos:-0.00019115209579467773,osw:-0.003347039222717285,bw:0.026413440704345703,zot:-0.0006175041198730469,ifp:0.0005804896354675293,zis:0.001858830451965332,isr:0.0017225146293640137,br:-0.006902158260345459,zit:-0.00021308660507202148,",11,33,0,"bw:bw,k_blockSize:k_blockSize,createOutputStream:createOutputStream,buf:buf,zis:zis,isr:isssr,ofp:Oftp,ifp:ipl,byteCount:ByteSize,zos:modules,zit:zip,zot:Zita,osw:eswd,inFile:inputStream,outFile:workingDirectory,br:body,",0,Greedy,1394,0.260041157,inesrt,"[';createOutputStream = 0', ';print(createOutputStream)', ';inFile = 0', ';outFile = 0', ';print(outFile)', ';k_blockSize = 0', ';byteCount = 0', ';buf = 0', ';ofp = 0', ';zos = 0', ';osw = 0', ';print(ByteSum)', ';Oftp = 0', ';print(Oftp)', ';OFtp = 0', ';osi = 0', ';ls = 0', ';bitcoin = 0', ';print(bitcoin)', ';zar = 0', ';print(zar)', ';ZA = 0', ';liquid = 0', ';print(liquid)', ';fbwd = 0', ';print(fbwd)']"
370,"    public Configuration(URL url) {
        InputStream in = null;
        try {
            load(in = url.openStream());
        } catch (Exception e) {
            throw new RuntimeException(""Could not load configuration from "" + url, e);
        } finally {
            if (in != null) {
                try {
                    in.close();
                } catch (IOException ignore) {
                }
            }
        }
    }
 <SPLIT>     public static Properties loadAllProperties(String resourceName, ClassLoader classLoader) throws IOException {
        Assert.notNull(resourceName, ""Resource name must not be null"");
        ClassLoader clToUse = classLoader;
        if (clToUse == null) {
            clToUse = ClassUtils.getDefaultClassLoader();
        }
        Properties properties = new Properties();
        Enumeration urls = clToUse.getResources(resourceName);
        while (urls.hasMoreElements()) {
            URL url = (URL) urls.nextElement();
            InputStream is = null;
            try {
                URLConnection con = url.openConnection();
                con.setUseCaches(false);
                is = con.getInputStream();
                properties.load(is);
            } finally {
                if (is != null) {
                    is.close();
                }
            }
        }
        return properties;
    }
",74,,LABEL_0,LABEL_0,LABEL_0,-1,"url,in",,2,7,0,,0,GA,633,0.097773321,failed,"[';print(URL)', ';print(xml)', ';sl = 0', ';Url = 0', ';print(out)', ';print(cms)', ';inner = 0']"
371,"    public static String toMd5(String str) {
        MessageDigest messageDigest = null;
        try {
            messageDigest = MessageDigest.getInstance(""MD5"");
            messageDigest.reset();
            messageDigest.update(str.getBytes(""UTF-8""));
        } catch (NoSuchAlgorithmException e) {
            System.out.println(""NoSuchAlgorithmException caught!"");
            System.exit(-1);
        } catch (UnsupportedEncodingException e) {
            e.printStackTrace();
        }
        byte[] byteArray = messageDigest.digest();
        StringBuffer md5StrBuff = new StringBuffer();
        for (int i = 0; i < byteArray.length; i++) {
            if (Integer.toHexString(0xFF & byteArray[i]).length() == 1) md5StrBuff.append(""0"").append(Integer.toHexString(0xFF & byteArray[i])); else md5StrBuff.append(Integer.toHexString(0xFF & byteArray[i]));
        }
        return md5StrBuff.toString();
    }
 <SPLIT>     public static void copyFileChannel(File src, File dst, boolean preserveModificationTime) throws IOException {
        FileChannel inputChannel = null;
        FileChannel outputChannel = null;
        long length = 0;
        try {
            inputChannel = new FileInputStream(src).getChannel();
            length = inputChannel.size();
            outputChannel = new FileOutputStream(dst).getChannel();
            long total = 0;
            while (total < length) {
                total += inputChannel.transferTo(0, length, outputChannel);
            }
            if (preserveModificationTime) {
                dst.setLastModified(src.lastModified());
            }
        } finally {
            if (inputChannel != null) {
                inputChannel.close();
            }
            if (outputChannel != null) {
                outputChannel.close();
            }
        }
    }
",195,,LABEL_0,LABEL_0,LABEL_0,-1,"toMd5,str,messageDigest,byteArray,md5StrBuff,i",,4,18,0,,0,GA,3034,0.476953753,failed,"[';toMd5 = 0', ';print(toMd5)', ';str = 0', ';print(str)', ';out = 0', '; messageDigEST = 0']"
372,"    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        String selectedPage = request.getParameter(""SelectedPage"");
        Page page = null;
        PortalRequest portalRequest = PortalRequest.getCurrentRequest();
        if (selectedPage == null) {
            try {
                Property pageProp = Property.getProperty(""HomePage"");
                selectedPage = pageProp.getValue();
            } catch (PersistentModelException e) {
                myLogger.info(""Page could not be found due to an exception"");
                response.sendError(response.SC_NOT_FOUND);
                return;
            }
        }
        myLogger.info(""Handling Page Request for Page "" + selectedPage);
        try {
            if (page == null) {
                try {
                    page = Page.getPage(Long.parseLong(selectedPage));
                } catch (NumberFormatException e) {
                    List<Page> possiblePage = Page.findByName(selectedPage);
                    if (possiblePage.size() > 0) {
                        page = possiblePage.get(0);
                    } else {
                        response.sendError(response.SC_NOT_FOUND);
                        return;
                    }
                }
            }
            if (!page.isVisibleTo(portalRequest.getCurrentUser())) {
                Property pageProp = Property.getProperty(""HomePage"");
                selectedPage = pageProp.getValue();
                page = Page.getPage(Long.parseLong(selectedPage));
            }
            try {
                Property property = Property.getProperty(""LogPageRequests"");
                if (property.getValue().toLowerCase().equals(""true"")) {
                    String referer = request.getHeader(""Referer"");
                    if (referer == null || referer.indexOf(portalRequest.getRequest().getServerName()) > 0) {
                        referer = "" "";
                    } else {
                        if (referer.length() >= 200) {
                            referer = referer.substring(0, 198);
                        }
                    }
                    PageRequest.createRequest(portalRequest.getCurrentHREF(), page, portalRequest.getCurrentUser(), portalRequest.getRequest().getRemoteAddr(), referer);
                }
            } catch (PersistentModelException e) {
                myLogger.log(Level.WARNING, ""Log Page Requests property was not found."", e);
            }
            if (page.isVisibleTo(portalRequest.getCurrentUser())) {
                HttpSession session = request.getSession();
                if (session != null) {
                    RecentlyViewedManager rvm = (RecentlyViewedManager) session.getAttribute(""ipoint.RecentlyViewedManager"");
                    if (rvm == null) {
                        rvm = new RecentlyViewedManager();
                    }
                    rvm.add(page);
                    session.setAttribute(""ipoint.RecentlyViewedManager"", rvm);
                }
                PageCacheEntry entry = null;
                if (!portalRequest.isPost() && !page.isEditableBy(portalRequest.getCurrentUser())) {
                    try {
                        int pageCacheTime = 60000;
                        try {
                            Property pageCacheTimeProperty = Property.getProperty(""PageCacheTime"");
                            pageCacheTime = Integer.parseInt(pageCacheTimeProperty.getValue());
                            pageCacheTime *= 1000;
                        } catch (PersistentModelException pme) {
                            myLogger.warning(""Ignoring Exception when retrieving PageCacheTime property"");
                        } catch (NumberFormatException nfe) {
                        }
                        entry = PageCacheEntry.find(portalRequest.getCurrentHREF(), page, portalRequest.getCurrentUser(), pageCacheTime);
                    } catch (PersistentModelException e) {
                        myLogger.log(Level.WARNING, ""An error occurred finding a page cache entry"", e);
                    }
                }
                response.setContentType(""text/html"");
                response.setHeader(""Cache-Control"", ""no-cache"");
                boolean processed = false;
                if (entry != null) {
                    String tempFile = entry.getTempFile();
                    File file = new File(tempFile);
                    if (file.exists() && file.isFile() && file.canRead()) {
                        FileReader reader = new FileReader(file);
                        BufferedReader br = new BufferedReader(reader);
                        PrintWriter out = response.getWriter();
                        out.write(""<!-- Starting to output cached page in "" + portalRequest.elapsedTime() + "" ms -->\n"");
                        while (br.ready()) {
                            out.write(br.readLine() + ""\n"");
                        }
                        out.write(""<!-- Cached output produced in "" + portalRequest.elapsedTime() + "" ms -->\n"");
                        reader.close();
                        processed = true;
                        portalRequest.getMBeans().incrementStatistics(ManagementMBeans.StatisticsType.PageTotal, page.getName() + ""-"" + page.getID(), portalRequest.elapsedTime(), true);
                    } else {
                        entry.delete();
                    }
                }
                if (!processed) {
                    PrintWriter out = response.getWriter();
                    out.write(""<!-- Output produced by iPoint Portal -->\n"");
                    PageRenderer renderer = new PageRenderer(page);
                    long startTime = System.currentTimeMillis();
                    request.setAttribute(ELConstants.IPOINT_USER, portalRequest.getCurrentUser());
                    request.setAttribute(ELConstants.IPOINT_PAGE, page);
                    request.setAttribute(ELConstants.IPOINT_TEMPLATE, page.getTemplate());
                    request.setAttribute(ELConstants.IPOINT_PORTAL_PROPERTIES, Property.getPropertiesMap());
                    request.setAttribute(ELConstants.IPOINT_USER_PROPERTIES, portalRequest.getCurrentUser().getProperties());
                    renderer.preProcess();
                    portalRequest.getMBeans().incrementStatistics(ManagementMBeans.StatisticsType.PagePreProcess, page.getName() + ""-"" + page.getID(), System.currentTimeMillis() - startTime, false);
                    long renderStart = System.currentTimeMillis();
                    renderer.render();
                    portalRequest.getMBeans().incrementStatistics(ManagementMBeans.StatisticsType.PageRender, page.getName() + ""-"" + page.getID(), System.currentTimeMillis() - renderStart, false);
                    portalRequest.getMBeans().incrementStatistics(ManagementMBeans.StatisticsType.PageTotal, page.getName() + ""-"" + page.getID(), System.currentTimeMillis() - startTime, false);
                    out.write(""<!-- output produced in "" + PortalRequest.getCurrentRequest().elapsedTime() + "" ms -->\n"");
                    if (!page.isEditableBy(portalRequest.getCurrentUser())) {
                        if (response instanceof CachingResponseWrapper) {
                            CachingResponseWrapper crw = (CachingResponseWrapper) response;
                            crw.flushBuffer();
                            Property tempProperty = Property.getProperty(""UploadLocation"");
                            File tempDirectory = new File(tempProperty.getValue());
                            if (tempDirectory.exists() && tempDirectory.canWrite()) {
                                File file = File.createTempFile(""iPointPage"", "".html"", tempDirectory);
                                try {
                                    FileWriter fw = new FileWriter(file);
                                    fw.write(crw.getOutput());
                                    fw.flush();
                                    fw.close();
                                    PageCacheEntry.create(portalRequest.getCurrentHREF(), page, portalRequest.getCurrentUser(), file.getAbsolutePath());
                                } catch (IOException e) {
                                }
                            } else {
                                myLogger.warning(""Can not write to directory "" + tempProperty.getValue());
                            }
                        }
                    }
                }
            } else {
                myLogger.info(""Current User is Forbidden from seeing this Page"");
                response.sendError(response.SC_FORBIDDEN);
            }
        } catch (PersistentModelException e) {
            myLogger.log(Level.INFO, ""Unable to find page "" + selectedPage, e);
            response.sendError(response.SC_NOT_FOUND);
        } catch (PresentationException pe) {
            pe.printStackTrace();
            throw new ServletException(""Error processing the page"", pe);
        }
    }
 <SPLIT>     public void copyLogic() {
        if (getState() == States.Idle) {
            setState(States.Synchronizing);
            try {
                FileChannel sourceChannel = new FileInputStream(new File(_properties.getProperty(""binPath"") + name + "".class"")).getChannel();
                FileChannel destinationChannel = new FileOutputStream(new File(_properties.getProperty(""agentFileLocation"") + name + "".class"")).getChannel();
                sourceChannel.transferTo(0, sourceChannel.size(), destinationChannel);
                sourceChannel.close();
                destinationChannel.close();
            } catch (FileNotFoundException e) {
                e.printStackTrace();
            } catch (IOException e) {
                e.printStackTrace();
            }
            setState(States.Idle);
        }
    }
",1387,"    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        String selectedPage = request.getParameter(""SelectedPage"");
        Page page = null;
        PortalRequest portalRequest = PortalRequest.getCurrentRequest();
        if (selectedPage == null) {
            try {
                Property peerProp = Property.getProperty(""HomePage"");
                selectedPage = peerProp.getValue();
            } catch (PersistentModelException e) {
                myLogger.info(""Page could not be found due to an exception"");
                response.sendError(response.SC_NOT_FOUND);
                return;
            }
        }
        myLogger.info(""Handling Page Request for Page "" + selectedPage);
        try {
            if (page == null) {
                try {
                    page = Page.getPage(Long.parseLong(selectedPage));
                } catch (NumberFormatException e) {
                    List<Page> possiblyOrder = Page.findByName(selectedPage);
                    if (possiblyOrder.size() > 0) {
                        page = possiblyOrder.get(0);
                    } else {
                        response.sendError(response.SC_NOT_FOUND);
                        return;
                    }
                }
            }
            if (!page.isVisibleTo(portalRequest.getCurrentUser())) {
                Property peerProp = Property.getProperty(""HomePage"");
                selectedPage = peerProp.getValue();
                page = Page.getPage(Long.parseLong(selectedPage));
            }
            try {
                Property table = Property.getProperty(""LogPageRequests"");
                if (table.getValue().toLowerCase().equals(""true"")) {
                    String referer = request.getHeader(""Referer"");
                    if (referer == null || referer.indexOf(portalRequest.getRequest().getServerName()) > 0) {
                        referer = "" "";
                    } else {
                        if (referer.length() >= 200) {
                            referer = referer.substring(0, 198);
                        }
                    }
                    PageRequest.createRequest(portalRequest.getCurrentHREF(), page, portalRequest.getCurrentUser(), portalRequest.getRequest().getRemoteAddr(), referer);
                }
            } catch (PersistentModelException e) {
                myLogger.log(Level.WARNING, ""Log Page Requests property was not found."", e);
            }
            if (page.isVisibleTo(portalRequest.getCurrentUser())) {
                HttpSession session = request.getSession();
                if (session != null) {
                    RecentlyViewedManager rvm = (RecentlyViewedManager) session.getAttribute(""ipoint.RecentlyViewedManager"");
                    if (rvm == null) {
                        rvm = new RecentlyViewedManager();
                    }
                    rvm.add(page);
                    session.setAttribute(""ipoint.RecentlyViewedManager"", rvm);
                }
                PageCacheEntry entry = null;
                if (!portalRequest.isPost() && !page.isEditableBy(portalRequest.getCurrentUser())) {
                    try {
                        int pageCacheTime = 60000;
                        try {
                            Property pageCacheTimeProperty = Property.getProperty(""PageCacheTime"");
                            pageCacheTime = Integer.parseInt(pageCacheTimeProperty.getValue());
                            pageCacheTime *= 1000;
                        } catch (PersistentModelException pme) {
                            myLogger.warning(""Ignoring Exception when retrieving PageCacheTime property"");
                        } catch (NumberFormatException nfe) {
                        }
                        entry = PageCacheEntry.find(portalRequest.getCurrentHREF(), page, portalRequest.getCurrentUser(), pageCacheTime);
                    } catch (PersistentModelException e) {
                        myLogger.log(Level.WARNING, ""An error occurred finding a page cache entry"", e);
                    }
                }
                response.setContentType(""text/html"");
                response.setHeader(""Cache-Control"", ""no-cache"");
                boolean processed = false;
                if (entry != null) {
                    String tempFile = entry.getTempFile();
                    File file = new File(tempFile);
                    if (file.exists() && file.isFile() && file.canRead()) {
                        FileReader reader = new FileReader(file);
                        BufferedReader br = new BufferedReader(reader);
                        PrintWriter out = response.getWriter();
                        out.write(""<!-- Starting to output cached page in "" + portalRequest.elapsedTime() + "" ms -->
"");
                        while (br.ready()) {
                            out.write(br.readLine() + ""
"");
                        }
                        out.write(""<!-- Cached output produced in "" + portalRequest.elapsedTime() + "" ms -->
"");
                        reader.close();
                        processed = true;
                        portalRequest.getMBeans().incrementStatistics(ManagementMBeans.StatisticsType.PageTotal, page.getName() + ""-"" + page.getID(), portalRequest.elapsedTime(), true);
                    } else {
                        entry.delete();
                    }
                }
                if (!processed) {
                    PrintWriter out = response.getWriter();
                    out.write(""<!-- Output produced by iPoint Portal -->
"");
                    PageRenderer renderer = new PageRenderer(page);
                    long startTime = System.currentTimeMillis();
                    request.setAttribute(ELConstants.IPOINT_USER, portalRequest.getCurrentUser());
                    request.setAttribute(ELConstants.IPOINT_PAGE, page);
                    request.setAttribute(ELConstants.IPOINT_TEMPLATE, page.getTemplate());
                    request.setAttribute(ELConstants.IPOINT_PORTAL_PROPERTIES, Property.getPropertiesMap());
                    request.setAttribute(ELConstants.IPOINT_USER_PROPERTIES, portalRequest.getCurrentUser().getProperties());
                    renderer.preProcess();
                    portalRequest.getMBeans().incrementStatistics(ManagementMBeans.StatisticsType.PagePreProcess, page.getName() + ""-"" + page.getID(), System.currentTimeMillis() - startTime, false);
                    long renderStart = System.currentTimeMillis();
                    renderer.render();
                    portalRequest.getMBeans().incrementStatistics(ManagementMBeans.StatisticsType.PageRender, page.getName() + ""-"" + page.getID(), System.currentTimeMillis() - renderStart, false);
                    portalRequest.getMBeans().incrementStatistics(ManagementMBeans.StatisticsType.PageTotal, page.getName() + ""-"" + page.getID(), System.currentTimeMillis() - startTime, false);
                    out.write(""<!-- output produced in "" + PortalRequest.getCurrentRequest().elapsedTime() + "" ms -->
"");
                    if (!page.isEditableBy(portalRequest.getCurrentUser())) {
                        if (response instanceof CachingResponseWrapper) {
                            CachingResponseWrapper crw = (CachingResponseWrapper) response;
                            crw.flushBuffer();
                            Property tempProperty = Property.getProperty(""UploadLocation"");
                            File tempDirectory = new File(tempProperty.getValue());
                            if (tempDirectory.exists() && tempDirectory.canWrite()) {
                                File file = File.createTempFile(""iPointPage"", "".html"", tempDirectory);
                                try {
                                    FileWriter fw = new FileWriter(file);
                                    fw.write(crw.getOutput());
                                    fw.flush();
                                    fw.close();
                                    PageCacheEntry.create(portalRequest.getCurrentHREF(), page, portalRequest.getCurrentUser(), file.getAbsolutePath());
                                } catch (IOException e) {
                                }
                            } else {
                                myLogger.warning(""Can not write to directory "" + tempProperty.getValue());
                            }
                        }
                    }
                }
            } else {
                myLogger.info(""Current User is Forbidden from seeing this Page"");
                response.sendError(response.SC_FORBIDDEN);
            }
        } catch (PersistentModelException e) {
            myLogger.log(Level.INFO, ""Unable to find page "" + selectedPage, e);
            response.sendError(response.SC_NOT_FOUND);
        } catch (PresentationException pe) {
            pe.printStackTrace();
            throw new ServletException(""Error processing the page"", pe);
        }
    }
",LABEL_1,LABEL_1,LABEL_0,1,"doGet,request,response,selectedPage,page,portalRequest,pageProp,possiblePage,property,referer,e","doGet:-0.01952463388442993,request:-0.010599255561828613,response:-0.007174313068389893,selectedPage:-0.009533584117889404,page:-0.008262872695922852,portalRequest:-0.007488667964935303,pageProp:-0.00657731294631958,possiblePage:0.0004838109016418457,property:0.001498401165008545,referer:-0.08790993690490723,e:-0.026242733001708984,",3,11,0,"property:table,possiblePage:possiblyOrder,pageProp:peerProp,",0,Greedy,256,0.065646879,replace,[]
373,"    private static void readAndRewrite(File inFile, File outFile) throws IOException {
        ImageInputStream iis = ImageIO.createImageInputStream(new BufferedInputStream(new FileInputStream(inFile)));
        DcmParser dcmParser = DcmParserFactory.getInstance().newDcmParser(iis);
        Dataset ds = DcmObjectFactory.getInstance().newDataset();
        dcmParser.setDcmHandler(ds.getDcmHandler());
        dcmParser.parseDcmFile(null, Tags.PixelData);
        PixelDataReader pdReader = pdFact.newReader(ds, iis, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());
        System.out.println(""reading "" + inFile + ""..."");
        pdReader.readPixelData(false);
        ImageOutputStream out = ImageIO.createImageOutputStream(new BufferedOutputStream(new FileOutputStream(outFile)));
        DcmEncodeParam dcmEncParam = DcmEncodeParam.IVR_LE;
        ds.writeDataset(out, dcmEncParam);
        ds.writeHeader(out, dcmEncParam, Tags.PixelData, dcmParser.getReadVR(), dcmParser.getReadLength());
        System.out.println(""writing "" + outFile + ""..."");
        PixelDataWriter pdWriter = pdFact.newWriter(pdReader.getPixelDataArray(), false, ds, out, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());
        pdWriter.writePixelData();
        out.flush();
        out.close();
        System.out.println(""done!"");
    }
 <SPLIT>     private static void readAndRewrite(File inFile, File outFile) throws IOException {
        ImageInputStream iis = ImageIO.createImageInputStream(new BufferedInputStream(new FileInputStream(inFile)));
        DcmParser dcmParser = DcmParserFactory.getInstance().newDcmParser(iis);
        Dataset ds = DcmObjectFactory.getInstance().newDataset();
        dcmParser.setDcmHandler(ds.getDcmHandler());
        dcmParser.parseDcmFile(null, Tags.PixelData);
        PixelDataReader pdReader = pdFact.newReader(ds, iis, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());
        System.out.println(""reading "" + inFile + ""..."");
        pdReader.readPixelData(false);
        ImageOutputStream out = ImageIO.createImageOutputStream(new BufferedOutputStream(new FileOutputStream(outFile)));
        DcmEncodeParam dcmEncParam = DcmEncodeParam.IVR_LE;
        ds.writeDataset(out, dcmEncParam);
        ds.writeHeader(out, dcmEncParam, Tags.PixelData, dcmParser.getReadVR(), dcmParser.getReadLength());
        System.out.println(""writing "" + outFile + ""..."");
        PixelDataWriter pdWriter = pdFact.newWriter(pdReader.getPixelDataArray(), false, ds, out, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());
        pdWriter.writePixelData();
        out.flush();
        out.close();
        System.out.println(""done!"");
    }
",272,,LABEL_1,LABEL_1,LABEL_1,-1,"readAndRewrite,inFile,outFile,iis,dcmParser,ds,pdReader,out,dcmEncParam,pdWriter",,4,16,0,,0,GA,4816,0.836667379,failed,"[';readAndRebrite = 0', ';dpmLanguage = 0', ';ays = 0', ';db = 0', ';vs = 0', ';ads = 0', ';df = 0', ';conn = 0', ';iss = 0', ';Db = 0', ';gd = 0', ';ps = 0', ';conn = 0']"
374,"    public String shorten(String url) {
        List<NameValuePair> qparams = new ArrayList<NameValuePair>();
        qparams.add(new BasicNameValuePair(""version"", ""2.0.1""));
        qparams.add(new BasicNameValuePair(""longUrl"", url));
        if (login != null) {
            qparams.add(new BasicNameValuePair(""login"", login));
            qparams.add(new BasicNameValuePair(""apiKey"", apiKey));
            qparams.add(new BasicNameValuePair(""history"", ""1""));
        }
        try {
            BasicHttpParams params = new BasicHttpParams();
            DefaultHttpClient httpclient = new DefaultHttpClient(params);
            URI uri = URIUtils.createURI(""http"", ""api.j.mp"", -1, ""/shorten"", URLEncodedUtils.format(qparams, ""UTF-8""), null);
            HttpGet httpget = new HttpGet(uri);
            if (logger.isDebugEnabled()) logger.debug(""HttpGet.uri={}"", httpget.getURI());
            HttpResponse response = httpclient.execute(httpget);
            HttpEntity entity = response.getEntity();
            if (entity != null) {
                InputStream instream = entity.getContent();
                JsonFactory f = new JsonFactory();
                JsonParser jp = f.createJsonParser(instream);
                JmpShortenResponse responseObj = new JmpShortenResponse();
                for (; ; ) {
                    JsonToken token = jp.nextToken();
                    String fieldname = jp.getCurrentName();
                    if (logger.isDebugEnabled()) logger.debug(""Token={}, currentName={}"", token, fieldname);
                    if (token == JsonToken.START_OBJECT) {
                        continue;
                    }
                    if (token == JsonToken.END_OBJECT) {
                        break;
                    }
                    if (""errorCode"".equals(fieldname)) {
                        token = jp.nextToken();
                        responseObj.setErrorCode(jp.getIntValue());
                    } else if (""errorMessage"".equals(fieldname)) {
                        token = jp.nextToken();
                        responseObj.setErrorMessage(jp.getText());
                    } else if (""statusCode"".equals(fieldname)) {
                        token = jp.nextToken();
                        responseObj.setStatusCode(jp.getText());
                    } else if (""results"".equals(fieldname)) {
                        Map<String, ShortenedUrl> results = parseResults(jp);
                        responseObj.setResults(results);
                    } else {
                        throw new IllegalStateException(""Unrecognized field '"" + fieldname + ""'!"");
                    }
                }
                Map<String, ShortenedUrl> results = responseObj.getResults();
                if (results == null) {
                    return null;
                }
                ShortenedUrl shortened = results.get(url);
                if (shortened == null) {
                    return null;
                }
                if (logger.isDebugEnabled()) logger.debug(""JmpShortenResponse: {}"", responseObj);
                if (""OK"".equals(responseObj.getStatusCode())) {
                    return shortened.getShortUrl();
                }
                if (logger.isWarnEnabled()) logger.warn(""JmpShortenResponse: {}"", responseObj);
            }
        } catch (IOException ex) {
            if (logger.isWarnEnabled()) logger.warn(""Exception!"", ex);
        } catch (URISyntaxException ex) {
            if (logger.isWarnEnabled()) logger.warn(""Exception!"", ex);
        }
        return null;
    }
 <SPLIT>     public void convert(File src, File dest) throws IOException {
        InputStream in = new BufferedInputStream(new FileInputStream(src));
        DcmParser p = pfact.newDcmParser(in);
        Dataset ds = fact.newDataset();
        p.setDcmHandler(ds.getDcmHandler());
        try {
            FileFormat format = p.detectFileFormat();
            if (format != FileFormat.ACRNEMA_STREAM) {
                System.out.println(""\n"" + src + "": not an ACRNEMA stream!"");
                return;
            }
            p.parseDcmFile(format, Tags.PixelData);
            if (ds.contains(Tags.StudyInstanceUID) || ds.contains(Tags.SeriesInstanceUID) || ds.contains(Tags.SOPInstanceUID) || ds.contains(Tags.SOPClassUID)) {
                System.out.println(""\n"" + src + "": contains UIDs!"" + "" => probable already DICOM - do not convert"");
                return;
            }
            boolean hasPixelData = p.getReadTag() == Tags.PixelData;
            boolean inflate = hasPixelData && ds.getInt(Tags.BitsAllocated, 0) == 12;
            int pxlen = p.getReadLength();
            if (hasPixelData) {
                if (inflate) {
                    ds.putUS(Tags.BitsAllocated, 16);
                    pxlen = pxlen * 4 / 3;
                }
                if (pxlen != (ds.getInt(Tags.BitsAllocated, 0) >>> 3) * ds.getInt(Tags.Rows, 0) * ds.getInt(Tags.Columns, 0) * ds.getInt(Tags.NumberOfFrames, 1) * ds.getInt(Tags.NumberOfSamples, 1)) {
                    System.out.println(""\n"" + src + "": mismatch pixel data length!"" + "" => do not convert"");
                    return;
                }
            }
            ds.putUI(Tags.StudyInstanceUID, uid(studyUID));
            ds.putUI(Tags.SeriesInstanceUID, uid(seriesUID));
            ds.putUI(Tags.SOPInstanceUID, uid(instUID));
            ds.putUI(Tags.SOPClassUID, classUID);
            if (!ds.contains(Tags.NumberOfSamples)) {
                ds.putUS(Tags.NumberOfSamples, 1);
            }
            if (!ds.contains(Tags.PhotometricInterpretation)) {
                ds.putCS(Tags.PhotometricInterpretation, ""MONOCHROME2"");
            }
            if (fmi) {
                ds.setFileMetaInfo(fact.newFileMetaInfo(ds, UIDs.ImplicitVRLittleEndian));
            }
            OutputStream out = new BufferedOutputStream(new FileOutputStream(dest));
            try {
            } finally {
                ds.writeFile(out, encodeParam());
                if (hasPixelData) {
                    if (!skipGroupLen) {
                        out.write(PXDATA_GROUPLEN);
                        int grlen = pxlen + 8;
                        out.write((byte) grlen);
                        out.write((byte) (grlen >> 8));
                        out.write((byte) (grlen >> 16));
                        out.write((byte) (grlen >> 24));
                    }
                    out.write(PXDATA_TAG);
                    out.write((byte) pxlen);
                    out.write((byte) (pxlen >> 8));
                    out.write((byte) (pxlen >> 16));
                    out.write((byte) (pxlen >> 24));
                }
                if (inflate) {
                    int b2, b3;
                    for (; pxlen > 0; pxlen -= 3) {
                        out.write(in.read());
                        b2 = in.read();
                        b3 = in.read();
                        out.write(b2 & 0x0f);
                        out.write(b2 >> 4 | ((b3 & 0x0f) << 4));
                        out.write(b3 >> 4);
                    }
                } else {
                    for (; pxlen > 0; --pxlen) {
                        out.write(in.read());
                    }
                }
                out.close();
            }
            System.out.print('.');
        } finally {
            in.close();
        }
    }
",644,,LABEL_0,LABEL_0,LABEL_0,-1,"shorten,url,qparams,params,httpclient,uri,httpget,response,entity,instream,f,jp,responseObj,token,fieldname",,11,48,0,,0,GA,6667,1.589356542,failed,[]
375,"    public static String getMD5Hash(String in) {
        StringBuffer result = new StringBuffer(32);
        try {
            MessageDigest md5 = MessageDigest.getInstance(""MD5"");
            md5.update(in.getBytes());
            Formatter f = new Formatter(result);
            for (byte b : md5.digest()) {
                f.format(""%02x"", b);
            }
        } catch (NoSuchAlgorithmException ex) {
            ex.printStackTrace();
        }
        return result.toString();
    }
 <SPLIT>     public static String generate(String text) throws NoSuchAlgorithmException, UnsupportedEncodingException {
        MessageDigest md;
        md = MessageDigest.getInstance(""SHA-1"");
        byte[] sha1hash = new byte[40];
        md.update(text.getBytes(""iso-8859-1""), 0, text.length());
        sha1hash = md.digest();
        return convertToHex(sha1hash);
    }
",99,,LABEL_1,LABEL_1,LABEL_1,-1,"getMD5Hash,in,result,md5,f,b",,6,13,0,,0,GA,1837,0.271436091,failed,"[';md5 = 0', ';conn = 0', ';url = 0', ';cache = 0']"
376,"    public boolean populateRecord(int[] attrIDs) throws IOException {
        if (device == null) {
            throw new RuntimeException(""This is local device service record"");
        }
        if (attrIDs == null) {
            throw new NullPointerException(""attrIDs is null"");
        }
        if (attrIDs.length == 0) {
            throw new IllegalArgumentException();
        }
        for (int i = 0; i < attrIDs.length; i++) {
            if (attrIDs[i] < 0x0000 || attrIDs[i] > 0xffff) {
                throw new IllegalArgumentException();
            }
        }
        int[] sortIDs = new int[attrIDs.length];
        System.arraycopy(attrIDs, 0, sortIDs, 0, attrIDs.length);
        for (int i = 0; i < sortIDs.length; i++) {
            for (int j = 0; j < sortIDs.length - i - 1; j++) {
                if (sortIDs[j] > sortIDs[j + 1]) {
                    int temp = sortIDs[j];
                    sortIDs[j] = sortIDs[j + 1];
                    sortIDs[j + 1] = temp;
                }
            }
        }
        for (int i = 0; i < sortIDs.length - 1; i++) {
            if (sortIDs[i] == sortIDs[i + 1]) {
                throw new IllegalArgumentException();
            }
            DebugLog.debug0x(""query for "", sortIDs[i]);
        }
        DebugLog.debug0x(""query for "", sortIDs[sortIDs.length - 1]);
        return this.bluetoothStack.populateServicesRecordAttributeValues(this, sortIDs);
    }
 <SPLIT>     public static String getHashedPassword(String password) {
        try {
            MessageDigest digest = MessageDigest.getInstance(""MD5"");
            digest.update(password.getBytes());
            BigInteger hashedInt = new BigInteger(1, digest.digest());
            return String.format(""%1$032X"", hashedInt);
        } catch (NoSuchAlgorithmException nsae) {
            System.err.println(nsae.getMessage());
        }
        return """";
    }
",307,,LABEL_0,LABEL_0,LABEL_0,-1,"populateRecord,attrIDs,i,sortIDs,j,temp",,1,10,0,,0,GA,2963,0.485146785,failed,"[';print(populateRecord)', ';j = 0', ';addrID = 0', ';sortids = 0', ';start = 0', ';print(start)', ';length = 0', ';print(length)', ';ortIDES = 0', ';adj = 0']"
377,"    private static void readAndRewrite(File inFile, File outFile) throws IOException {
        ImageInputStream iis = ImageIO.createImageInputStream(new BufferedInputStream(new FileInputStream(inFile)));
        DcmParser dcmParser = DcmParserFactory.getInstance().newDcmParser(iis);
        Dataset ds = DcmObjectFactory.getInstance().newDataset();
        dcmParser.setDcmHandler(ds.getDcmHandler());
        dcmParser.parseDcmFile(null, Tags.PixelData);
        PixelDataReader pdReader = pdFact.newReader(ds, iis, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());
        System.out.println(""reading "" + inFile + ""..."");
        pdReader.readPixelData(false);
        ImageOutputStream out = ImageIO.createImageOutputStream(new BufferedOutputStream(new FileOutputStream(outFile)));
        DcmEncodeParam dcmEncParam = DcmEncodeParam.IVR_LE;
        ds.writeDataset(out, dcmEncParam);
        ds.writeHeader(out, dcmEncParam, Tags.PixelData, dcmParser.getReadVR(), dcmParser.getReadLength());
        System.out.println(""writing "" + outFile + ""..."");
        PixelDataWriter pdWriter = pdFact.newWriter(pdReader.getPixelDataArray(), false, ds, out, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());
        pdWriter.writePixelData();
        out.flush();
        out.close();
        System.out.println(""done!"");
    }
 <SPLIT>     public static void copy(String fileFrom, String fileTo) throws IOException {
        FileInputStream inputStream = null;
        FileOutputStream outputStream = null;
        FileChannel inputChannel = null;
        FileChannel outputChannel = null;
        try {
            inputStream = new FileInputStream(fileFrom);
            outputStream = new FileOutputStream(fileTo);
            inputChannel = inputStream.getChannel();
            outputChannel = outputStream.getChannel();
            inputChannel.transferTo(0, inputChannel.size(), outputChannel);
        } finally {
            try {
                inputChannel.close();
            } finally {
                try {
                    outputChannel.close();
                } finally {
                    try {
                        inputStream.close();
                    } finally {
                        outputStream.close();
                    }
                }
            }
        }
    }
",272,"    private static void readAndrewrites(File Infile, File processFILE) throws IOException {
        ImageInputStream iniris = ImageIO.createImageInputStream(new BufferedInputStream(new FileInputStream(Infile)));
        DcmParser dcmdcmParserDcmParserFactory.getInstance().newDcmParser(iniris);
        Dataset ays = DcmObjectFactory.getInstance().newDataset();
        dcmParser.setDcmHandler(ays.getDcmHandler());
        dcmParser.parseDcmFile(null, Tags.PixelData);
        PixelDataReader pdRepdReaderdFact.newReader(ds,aysniris, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());
        System.url.println(""reading "" + Infile + ""..."");
        pdReader.readPixelData(false);
        ImageOutputStream out urlmageIO.createImageOutputStream(new BufferedOutputStream(new FileOutputStream(processFILE)));
        DcmEncodeParam dcmEncParam = DcmEncodeParam.IVR_LE;
        ays.writeDataset(url, dcmEncParam);
        ays.writeHeader(url, dcmEncParam, Tags.PixelData, dcmParser.getReadVR(), dcmParser.getReadLength());
        System.out.urlntln(""writing "" + processFILE + ""..."");
        PixelDataWriter pdpWriting= pdFact.newWriter(ppdReadergetPixelDataArray(), false, ays, url, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());
        dpWriting.writePixelData();
        url.flush();
        url.close();
        System.url.println(""done!"");
    }
",LABEL_1,LABEL_1,0.516898751,1,"readAndRewrite,inFile,outFile,iis,dcmParser,ds,pdReader,out,dcmEncParam,pdWriter",,4,15,15,"readAndRewrite:readAndrewrites,inFile:Infile,outFile:processFILE,iis:iniris,dcmParser:dcmParser,ds:ays,pdReader:pdReader,out:url,dcmEncParam:dcmEncParam,pdWriter:dpWriting,",3,GA,1933,0.344945904,ga,"[';readAndRewrite = 0', ';iis = 0', ';dcmParser = 0', ';ds = 0', ';pdReader = 0', ';conn = 0', ';iss = 0', ';url = 0', ';print(url)']"
378,"    private String transferWSDL(String wsdlURL, String userPassword) throws WiseConnectionException {
        String filePath = null;
        try {
            URL endpoint = new URL(wsdlURL);
            HttpURLConnection conn = (HttpURLConnection) endpoint.openConnection();
            conn.setDoOutput(false);
            conn.setDoInput(true);
            conn.setUseCaches(false);
            conn.setRequestMethod(""GET"");
            conn.setRequestProperty(""Accept"", ""text/xml,application/xml,application/xhtml+xml,text/html;q=0.9,text/plain;q=0.8,image/png,*/*;q=0.5"");
            conn.setRequestProperty(""Connection"", ""close"");
            if (userPassword != null) {
                conn.setRequestProperty(""Authorization"", ""Basic "" + (new BASE64Encoder()).encode(userPassword.getBytes()));
            }
            InputStream is = null;
            if (conn.getResponseCode() == 200) {
                is = conn.getInputStream();
            } else {
                is = conn.getErrorStream();
                InputStreamReader isr = new InputStreamReader(is);
                StringWriter sw = new StringWriter();
                char[] buf = new char[200];
                int read = 0;
                while (read != -1) {
                    read = isr.read(buf);
                    sw.write(buf);
                }
                throw new WiseConnectionException(""Remote server's response is an error: "" + sw.toString());
            }
            File outputDir = new File(wiseProperties.getProperty(""wise.tmpDir""));
            if (!outputDir.exists()) {
                outputDir.mkdir();
                wiseProperties.setProperty(""wise.forceImportObject"", ""true"");
            }
            File file = new File(wiseProperties.getProperty(""wise.tmpDir""), new StringBuffer(""Wise"").append(IDGenerator.nextVal()).append("".xml"").toString());
            OutputStream fos = new BufferedOutputStream(new FileOutputStream(file));
            IOUtils.copyStream(fos, is);
            fos.close();
            is.close();
            filePath = file.getPath();
        } catch (WiseConnectionException wce) {
            throw wce;
        } catch (Exception e) {
            throw new WiseConnectionException(""Wsdl download failed!"", e);
        }
        return filePath;
    }
 <SPLIT>     public static String sha1(String text) throws NoSuchAlgorithmException, UnsupportedEncodingException {
        MessageDigest md;
        md = MessageDigest.getInstance(""SHA-1"");
        byte[] sha1hash = new byte[40];
        md.update(text.getBytes(""iso-8859-1""), 0, text.length());
        sha1hash = md.digest();
        return convertToHex(sha1hash);
    }
",409,,LABEL_0,LABEL_1,,-4,"transferWSDL,wsdlURL,userPassword,filePath,endpoint,conn,is,isr,sw,buf,read,outputDir,file,fos",,,,0,,0,Greedy,1,0.000519562,,[]
379,"    public void modifyApplicationMessage(String locale, String messageName, String messageValue) {
        Properties properties = new Properties();
        try {
            String i18nPath = ServerUtil.removelastResourceURL(ConfigurationServiceImpl.class.getResource(""/es/ua/tranube/prototype/main/client/TranubeConstants_en.properties"").getPath()).toString();
            File englishFile = new File(i18nPath + ""TranubeConstants_en.properties"");
            if (!englishFile.exists()) throw new Exception(""English file not found"");
            String propertiesFilePath = i18nPath + ""TranubeConstants_"" + locale + "".properties"";
            File file = new File(propertiesFilePath);
            if (!file.exists()) {
                FileReader in = new FileReader(englishFile);
                FileWriter out = new FileWriter(file);
                int c;
                while ((c = in.read()) != -1) out.write(c);
                in.close();
                out.close();
            }
            InputStream is = ConfigurationServiceImpl.class.getResourceAsStream(""/es/ua/tranube/prototype/main/client/TranubeConstants_"" + locale + "".properties"");
            BufferedReader breader = new BufferedReader(new InputStreamReader(is));
            String line = null;
            StringBuilder strBuilder = new StringBuilder();
            boolean found = false;
            while ((line = breader.readLine()) != null) {
                if (line.startsWith(""#"")) strBuilder.append(line).append(""\n""); else {
                    String[] pieces = line.split(""="");
                    if (pieces.length == 2) {
                        if (pieces[0].trim().equals(messageName)) {
                            strBuilder.append(pieces[0].trim() + "" = "" + messageValue + ""\n"");
                            found = true;
                        } else strBuilder.append(line).append(""\n"");
                    } else strBuilder.append(line).append(""\n"");
                }
            }
            if (!found) strBuilder.append(messageName).append("" = "").append(messageValue).append(""\n"");
            breader.close();
            is.close();
            FileWriter writer = new FileWriter(file);
            writer.write(strBuilder.toString());
            writer.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
 <SPLIT>     public String getXML(String servletURL, String request) {
        StringBuffer stringBuffer = new StringBuffer();
        try {
            String encodedRequest = URLEncoder.encode(request, ""UTF-8"");
            URL url = new URL(servletURL + request);
            BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));
            String inputLine;
            while ((inputLine = in.readLine()) != null) {
                stringBuffer.append(inputLine);
            }
            in.close();
        } catch (MalformedURLException ex) {
            return null;
        } catch (UnsupportedEncodingException ex) {
            return null;
        } catch (IOException ex) {
            return null;
        }
        return stringBuffer.toString();
    }
",452,,LABEL_0,LABEL_1,,-4,"modifyApplicationMessage,locale,messageName,messageValue,properties,i18nPath,englishFile,propertiesFilePath,file,in,out,c,is,breader,line,strBuilder,pieces,found",,,,0,,0,Greedy,1,0.000555015,,[]
380,"    private void Connect() throws NpsException {
        try {
            client = new FTPClient();
            client.connect(host.hostname, host.remoteport);
            int reply = client.getReplyCode();
            if (!FTPReply.isPositiveCompletion(reply)) {
                client.disconnect();
                client = null;
                com.microfly.util.DefaultLog.error_noexception(""FTP Server:"" + host.hostname + ""refused connection."");
                return;
            }
            client.login(host.uname, host.upasswd);
            client.enterLocalPassiveMode();
            client.setFileType(FTPClient.BINARY_FILE_TYPE);
            client.changeWorkingDirectory(host.remotedir);
        } catch (Exception e) {
            com.microfly.util.DefaultLog.error(e);
        }
    }
 <SPLIT>     @Test
    public void test02_ok() throws Exception {
        DefaultHttpClient client = new DefaultHttpClient();
        try {
            HttpPost post = new HttpPost(chartURL);
            List<NameValuePair> nameValuePairs = new ArrayList<NameValuePair>(1);
            nameValuePairs.add(new BasicNameValuePair(""ws"", ""getDomainEvolution""));
            nameValuePairs.add(new BasicNameValuePair(""chartTitle"", ""test""));
            nameValuePairs.add(new BasicNameValuePair(""type"", ""chart""));
            nameValuePairs.add(new BasicNameValuePair(""firstDate"", ""20111124""));
            nameValuePairs.add(new BasicNameValuePair(""lastDate"", ""20111125""));
            nameValuePairs.add(new BasicNameValuePair(""wsParams"", ""type,counting,protocol,unit,proxy,domain,timeScale,period""));
            nameValuePairs.add(new BasicNameValuePair(""wsParamsValues"", ""chart,volume,all,hits,all,google.com,day,360""));
            nameValuePairs.add(new BasicNameValuePair(""serieTitle"", ""serie""));
            post.setEntity(new UrlEncodedFormEntity(nameValuePairs));
            HttpResponse response = client.execute(post);
            HttpEntity entity = response.getEntity();
            assertNotNull(entity);
            InputStream instream = entity.getContent();
            BufferedReader reader = new BufferedReader(new InputStreamReader(instream));
            System.out.println(reader.readLine());
            instream.close();
            assertEquals(""error :"" + response.getStatusLine(), 200, response.getStatusLine().getStatusCode());
        } finally {
            client.getConnectionManager().shutdown();
        }
    }
",146,,LABEL_0,LABEL_0,LABEL_0,-1,"Connect,client,reply",,3,12,0,,0,GA,1481,0.243150997,failed,[]
381,"    public static void copyFile(File src, File dest, int bufSize, boolean force) throws IOException {
        if (dest.exists()) if (force) dest.delete(); else throw new IOException(""Cannot overwrite existing file: "" + dest.getName());
        byte[] buffer = new byte[bufSize];
        int read = 0;
        InputStream in = null;
        OutputStream out = null;
        try {
            in = new FileInputStream(src);
            out = new FileOutputStream(dest);
            while (true) {
                read = in.read(buffer);
                if (read == -1) break;
                out.write(buffer, 0, read);
            }
        } finally {
            if (in != null) try {
                in.close();
            } finally {
                if (out != null) out.close();
            }
        }
    }
 <SPLIT>     @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException {
        InputStream is = null;
        InputStream page = null;
        OutputStream os = null;
        String rootUrl = null;
        try {
            boolean isMultipart = ServletFileUpload.isMultipartContent(request);
            if (!isMultipart) {
                request.setAttribute(""error"", ""Form isn't a multipart form"");
                RequestDispatcher rd = request.getRequestDispatcher(""/WEB-INF/error.jsp"");
                rd.forward(request, response);
            }
            ServletFileUpload upload = new ServletFileUpload();
            String webUrl = null;
            FileItemIterator iter = upload.getItemIterator(request);
            while (iter.hasNext()) {
                FileItemStream item = iter.next();
                String name = item.getFieldName();
                if (name.equals(""webpage"")) {
                    is = item.openStream();
                    ByteArrayOutputStream baos = new ByteArrayOutputStream();
                    IOUtils.copy(is, baos);
                    page = new ByteArrayInputStream(baos.toByteArray());
                } else if (name.equals(""weburl"")) {
                    InputStream wpIs = null;
                    try {
                        webUrl = Streams.asString(item.openStream());
                        URL u = new URL(webUrl);
                        wpIs = new BufferedInputStream(u.openStream());
                        ByteArrayOutputStream baos = new ByteArrayOutputStream();
                        IOUtils.copy(wpIs, baos);
                        page = new ByteArrayInputStream(baos.toByteArray());
                    } finally {
                        IOUtils.closeQuietly(wpIs);
                    }
                } else if (name.equals(""rooturl"")) {
                    rootUrl = Streams.asString(item.openStream());
                }
            }
            if (page == null) {
                request.setAttribute(""error"", ""Form doesn't have an html file"");
                RequestDispatcher rd = request.getRequestDispatcher(""/WEB-INF/error.jsp"");
                rd.forward(request, response);
            }
            ToMailerDelegate delegate = new ToMailerDelegate(page, rootUrl);
            os = new BufferedOutputStream(response.getOutputStream());
            os.write(delegate.getMailer());
            os.flush();
        } catch (Exception e) {
            streamException(request, response, e);
        } finally {
            IOUtils.closeQuietly(page);
            IOUtils.closeQuietly(is);
            IOUtils.closeQuietly(os);
        }
    }
",169,"    public static void transferFiles(File url, File dest, int ufsize, boolean urse) throws IOException {
        if (dest.exists()) if (urse) dest.delete(); else throw new IOException(""Cannot overwrite existing file: "" + dest.getName());
        byte[] url = new byte[ufsize];
        int read = 0;
        InputStream url = null;
        OutputStream out = null;
        try {
            url = new FileInputStream(url);
            out = new FileOutputStream(dest);
            while (true) {
                read = url.read(url);
                if (read == -1) break;
                out.write(url, 0, read);
            }
        } finally {
            if (url != null) try {
                url.close();
            } finally {
                if (out != null) out.close();
            }
        }
    }
",LABEL_1,LABEL_1,LABEL_0,1,"copyFile,src,dest,bufSize,force,buffer,read,in,out","copyFile:0.022305846214294434,src:0.010692775249481201,dest:-0.014953553676605225,bufSize:0.0182303786277771,force:0.007426917552947998,buffer:0.0004088878631591797,read:-0.009421885013580322,in:-0.007598221302032471,out:-0.02237778902053833,",6,15,0,"copyFile:transferFiles,bufSize:ufsize,src:url,force:urse,buffer:url,in:url,",0,Greedy,234,0.039708471,replace,[]
382,"    protected ExternalDecoder(InputStream source, Process process) {
        super(source);
        this.process = process;
        this.processStdOut = process.getInputStream();
        this.processStdIn = process.getOutputStream();
        new Thread() {

            @Override
            public void run() {
                try {
                    IOUtils.copy(getSource(), processStdIn);
                    System.err.println(""Copy done."");
                    close();
                } catch (IOException e) {
                    e.printStackTrace();
                    IOUtils.closeQuietly(ExternalDecoder.this);
                }
            }
        }.start();
    }
 <SPLIT>     private static RemoteFile getRemoteFile(String url) {
        long size = 0;
        String realUrl = """";
        try {
            HttpURLConnection conn = (HttpURLConnection) (new URL(url)).openConnection();
            size = conn.getContentLength();
            realUrl = conn.getURL().toString();
            conn.disconnect();
        } catch (Exception e) {
            e.printStackTrace();
        }
        RemoteFile rf = new RemoteFile(size, realUrl);
        return rf;
    }
",113,,LABEL_0,LABEL_0,LABEL_0,-1,"source,process,processStdOut,processStdIn",,4,10,0,,0,GA,1853,0.264676901,failed,[]
383,"    @Override
    public Content getContent(Object principal, ContentPath path, Version version, Map<String, Object> properties) throws ContentException {
        String uniqueName = path.getBaseName();
        URL url = buildURL(uniqueName);
        URLContent content = new URLContent(url, this.getName(), uniqueName);
        content.setUniqueName(uniqueName);
        content.setReadable(true);
        content.setWritable(writable);
        content.setExists(true);
        try {
            URLConnection connection = url.openConnection();
            String mimeType = connection.getContentType();
            content.setMimeType(mimeType);
            content.setWritable(true);
        } catch (IOException ex) {
            throw new ContentException(""unable to obtain mime type of "" + url, ex);
        }
        return content;
    }
 <SPLIT>     private static RemoteFile getRemoteFile(String url) {
        long size = 0;
        String realUrl = """";
        try {
            HttpURLConnection conn = (HttpURLConnection) (new URL(url)).openConnection();
            size = conn.getContentLength();
            realUrl = conn.getURL().toString();
            conn.disconnect();
        } catch (Exception e) {
            e.printStackTrace();
        }
        RemoteFile rf = new RemoteFile(size, realUrl);
        return rf;
    }
",148,,LABEL_0,LABEL_0,LABEL_0,-1,"getContent,principal,path,version,properties,uniqueName,url,content,connection,mimeType",,10,26,0,,0,GA,3753,0.566762638,failed,"[';getContent = 0', ';path = 0', ';print(prercential)', ';Princincential = 0', ';print(open)', ';web = 0']"
384,"    public void read() throws IOException {
        if (log.isInfoEnabled()) {
            log.info(""Reading the camera log, "" + url);
        }
        final BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));
        String line;
        int i = 0;
        try {
            while ((line = in.readLine()) != null) {
                i++;
                try {
                    final CameraLogRecord logDatum = new CameraLogRecord(line);
                    records.add(logDatum);
                } catch (LogParseException e) {
                    if (log.isInfoEnabled()) {
                        log.info(""Bad record in "" + url + "" at line:"" + i);
                    }
                }
            }
        } finally {
            in.close();
        }
        Collections.sort(records);
        if (log.isInfoEnabled()) {
            log.info(""Finished reading the camera log, "" + url);
        }
    }
 <SPLIT>     private List<JarFile> webArchives(ServletContext servletContext) throws IOException {
        List<JarFile> list = new ArrayList<JarFile>();
        Set<Object> paths = servletContext.getResourcePaths(WEB_LIB_PREFIX);
        for (Object pathObject : paths) {
            String path = (String) pathObject;
            if (!path.endsWith("".jar"")) {
                continue;
            }
            URL url = servletContext.getResource(path);
            String jarURLString = ""jar:"" + url.toString() + ""!/"";
            url = new URL(jarURLString);
            JarFile jarFile = ((JarURLConnection) url.openConnection()).getJarFile();
            JarEntry signal = jarFile.getJarEntry(FACES_CONFIG_IMPLICIT);
            if (signal == null) {
                if (log().isTraceEnabled()) {
                    log().trace(""Skip JAR file "" + path + "" because it has no META-INF/faces-config.xml resource"");
                }
                continue;
            }
            list.add(jarFile);
        }
        return list;
    }
",170,,LABEL_0,LABEL_0,LABEL_0,-1,"read,in,line,i,logDatum",,0,0,0,,0,GA,2406,0.377839243,failed,[]
385,"    public void serialize(OutputStream out) throws IOException, BadIMSCPException {
        ensureParsed();
        ZipFilePackageParser parser = utils.getIMSCPParserFactory().createParser();
        parser.setContentPackage(cp);
        if (on_disk != null) on_disk.delete();
        on_disk = createTemporaryFile();
        parser.serialize(on_disk);
        InputStream in = new FileInputStream(on_disk);
        IOUtils.copy(in, out);
    }
 <SPLIT>     private static File getZipAsFile(DigitalObject digOb) {
        String folderName = randomizeFileName(getFolderNameFromDigObject(digOb));
        File tmpFolder = new File(utils_tmp, folderName);
        File zip = null;
        try {
            FileUtils.forceMkdir(tmpFolder);
            zip = new File(tmpFolder, getFileNameFromDigObject(digOb, null));
            FileOutputStream out = new FileOutputStream(zip);
            IOUtils.copyLarge(digOb.getContent().getInputStream(), out);
            out.close();
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
        return zip;
    }
",81,,LABEL_1,LABEL_1,LABEL_1,-1,"serialize,out,parser,on_disk,in",,5,14,0,,0,GA,2289,0.327424733,failed,"[';serialize = 0', ';print(serialize)', ';out = 0', ';parser = 0', ';copy = 0']"
386,"    public static String read(ClassLoader classLoader, String name, boolean all) throws IOException {
        if (all) {
            StringMaker sm = new StringMaker();
            Enumeration enu = classLoader.getResources(name);
            while (enu.hasMoreElements()) {
                URL url = (URL) enu.nextElement();
                InputStream is = url.openStream();
                String s = read(is);
                if (s != null) {
                    sm.append(s);
                    sm.append(StringPool.NEW_LINE);
                }
                is.close();
            }
            return sm.toString().trim();
        } else {
            InputStream is = classLoader.getResourceAsStream(name);
            String s = read(is);
            is.close();
            return s;
        }
    }
 <SPLIT> 	public static void Sample1(String myField, String condition1, String condition2) throws SQLException {
		Connection connection = DriverManager.getConnection(""jdbc:postgresql://localhost/test"", ""user"", ""password"");
		connection.setAutoCommit(false);
		
		PreparedStatement ps = connection.prepareStatement(""UPDATE myTable SET myField = ? WHERE myOtherField1 = ? AND myOtherField2 = ?"");
		ps.setString(1, myField);
		ps.setString(2, condition1);
		ps.setString(3, condition2);
		
		// If more than 10 entries change, panic and rollback
		int numChanged = ps.executeUpdate();
		if(numChanged > 10) {
			connection.rollback();
		} else {
			connection.commit();
		}
		
		ps.close();
		connection.close();
	}
",153,,LABEL_0,LABEL_0,LABEL_0,-1,"read,classLoader,name,all,sm,enu,url,is,s",,9,31,0,,0,GA,4038,0.620291857,failed,[]
387,"    private void Reserve() throws SQLException {
        Statement stbookings, stchartwl;
        String sp = """";
        if (useragent) sp = ""agent""; else sp = ""user"";
        String userbooksql = """";
        String agentbooksql = """";
        String bookingid = String.valueOf(System.currentTimeMillis());
        String currentcoach;
        String currentseat;
        try {
            if (useragent) {
                agentbooksql = ""update hp_administrator.agent_bookings set BOOKINGS = xmlquery('copy $new := $BOOKINGS modify do insert "";
                agentbooksql += "" <detail booking_id=\"""" + booking_details.getTicketno() + ""\"" status=\""open\"" train_no=\"""" + booking_details.getTrain_no() + ""\"" source=\"""" + booking_details.getSource() + ""\"" dest=\"""" + booking_details.getDestination() + ""\"" dep_date=\"""" + booking_details.getDate() + ""\"" > "";
            } else if (!useragent) {
                userbooksql = ""update hp_administrator.user_bookings set BOOKINGS = xmlquery('copy $new := $BOOKINGS modify do insert "";
                userbooksql += "" <detail booking_id=\"""" + booking_details.getTicketno() + ""\"" status=\""open\"" train_no=\"""" + booking_details.getTrain_no() + ""\"" source=\"""" + booking_details.getSource() + ""\"" dest=\"""" + booking_details.getDestination() + ""\"" dep_date=\"""" + booking_details.getDate() + ""\"" > "";
            }
            for (int tickpos = 0; tickpos < booking_details.getNoOfPersons(); tickpos++) {
                currentcoach = coach.get(tickpos);
                currentseat = seatno.get(tickpos);
                if (!currentcoach.equals(""WL"")) {
                    String chartavailupdsql = ""update hp_administrator.chart_wl_order set AVAILABLE_BOOKED = xmlquery('copy $new := $AVAILABLE_BOOKED   modify do insert "";
                    chartavailupdsql += ""<seat number=\"""" + currentseat + ""\""><details user_id=\"""" + booking_details.getUserId() + ""\"" usertype=\"""" + sp + ""\"" ticket_no=\"""" + booking_details.getTicketno() + ""\"" name=\"""" + booking_details.getNameAt(tickpos) + ""\"" age=\"""" + booking_details.getAgeAt(tickpos) + ""\"" sex=\"""" + booking_details.getSexAt(tickpos) + ""\"" type=\""primary\""  /></seat>"";
                    chartavailupdsql += "" into $new/status/class[@name=\"""" + booking_details.getTclass() + ""\""]/coach[@number=\"""" + currentcoach + ""\""] "";
                    chartavailupdsql += "" return  $new' ) where train_no like '"" + booking_details.getTrain_no() + ""' and date = '"" + booking_details.getDate() + ""' "";
                    System.out.println(chartavailupdsql);
                    stchartwl = conn.createStatement();
                    int updstat = stchartwl.executeUpdate(chartavailupdsql);
                    if (updstat > 0) System.out.println(""chart_wl  availability  updated"");
                } else if (currentcoach.equals(""WL"")) {
                    String chartwlupdsql = ""update hp_administrator.chart_wl_order set WAITLISTING = xmlquery('copy $new := $WAITLISTING modify do insert "";
                    chartwlupdsql += ""<details user_id=\"""" + booking_details.getUserId() + ""\"" usertype=\"""" + sp + ""\"" ticket_no=\"""" + booking_details.getTicketno() + ""\"" name=\"""" + booking_details.getNameAt(tickpos) + ""\"" age=\"""" + booking_details.getAgeAt(tickpos) + ""\"" sex=\"""" + booking_details.getSexAt(tickpos) + ""\"" type=\""primary\"" /></seat>"";
                    chartwlupdsql += "" into $new/status/class[@name=\"""" + booking_details.getTclass() + ""\""] "";
                    chartwlupdsql += "" return  $new' ) where train_no like '"" + booking_details.getTrain_no() + ""' and date = '"" + booking_details.getDate() + ""' "";
                    System.out.println(chartwlupdsql);
                    stchartwl = conn.createStatement();
                    int updstat = stchartwl.executeUpdate(chartwlupdsql);
                    if (updstat > 0) System.out.println(""chart_wl  waitlisting  updated"");
                }
                if (useragent) agentbooksql += ""<person><coach>"" + currentcoach + ""</coach><seat>"" + currentseat + ""</seat></person>""; else userbooksql += ""<person><coach>"" + currentcoach + ""</coach><seat>"" + currentseat + ""</seat></person>"";
            }
            if (useragent) {
                agentbooksql += ""</detail>   as first into $new/book return  $new' ) where agent_id like '"" + booking_details.getUserId() + ""'"";
                System.out.println(agentbooksql);
                stbookings = conn.createStatement();
                int updstat = stbookings.executeUpdate(agentbooksql);
                if (updstat > 0) System.out.println(""agent bookings updated"");
            } else {
                userbooksql += ""</detail>   as first into $new/book return  $new' ) where user_id like '"" + booking_details.getUserId() + ""'"";
                System.out.println(userbooksql);
                stbookings = conn.createStatement();
                int updstat = stbookings.executeUpdate(userbooksql);
                if (updstat > 0) System.out.println(""user bookings  updated"");
            }
        } catch (SQLException e) {
            conn.rollback();
            e.printStackTrace();
        }
    }
 <SPLIT>     public void buildSiteForEdit(String sBasePath, String sOutputPath, String sCtrlPath, String sMenuPath, String sIntegradorPath, String sSelPageOptions, Properties oEnvironmentProps, Properties oUserProps) throws IOException, DOMException, TransformerException, TransformerConfigurationException, MalformedURLException {
        Transformer oTransformer;
        StreamResult oStreamResult;
        StreamSource oStreamSrcXML;
        StringWriter oStrWritter;
        InputStream oXMLStream = null;
        String sTransformed;
        StringBuffer oPostTransform;
        String sKey;
        String sMedia;
        Object sVal;
        Page oCurrentPage;
        int iCloseHead, iOpenBody, iCloseBody;
        int iReaded;
        char CharBuffer[] = new char[8192];
        String sCharBuffer;
        long lElapsed = 0;
        final String sSep = System.getProperty(""file.separator"");
        if (DebugFile.trace) {
            lElapsed = System.currentTimeMillis();
            DebugFile.writeln(""Begin Pageset.buildSiteForEdit("" + sBasePath + "","" + sOutputPath + "","" + sCtrlPath + "","" + sMenuPath + "")"");
            DebugFile.incIdent();
        }
        FileSystem oFS = new FileSystem();
        Vector vPages = pages();
        if (!sBasePath.endsWith(sSep)) sBasePath += sSep;
        String sWebServer = oEnvironmentProps.getProperty(""webserver"", """");
        if (DebugFile.trace && sWebServer.length() == 0) DebugFile.writeln(""WARNING: webserver property not set at EnvironmentProperties"");
        if (!sWebServer.endsWith(""/"")) sWebServer += ""/"";
        Node oContainers = oMSite.seekChildByName(oMSite.getRootNode().getFirstChild(), ""containers"");
        if (oContainers == null) {
            if (DebugFile.trace) DebugFile.writeln(""ERROR: <containers> node not found."");
            throw new DOMException(DOMException.NOT_FOUND_ERR, ""<containers> node not found"");
        }
        if (DebugFile.trace) DebugFile.writeln(""new FileInputStream("" + (sURI.startsWith(""file://"") ? sURI.substring(7) : sURI) + "")"");
        for (int c = 0; c < vPages.size(); c++) {
            oCurrentPage = (Page) vPages.get(c);
            oXMLStream = new FileInputStream(sURI.startsWith(""file://"") ? sURI.substring(7) : sURI);
            oStreamSrcXML = new StreamSource(oXMLStream);
            oStrWritter = new StringWriter();
            oStreamResult = new StreamResult(oStrWritter);
            try {
                oTransformer = StylesheetCache.newTransformer(sBasePath + ""xslt"" + sSep + ""templates"" + sSep + oMSite.name() + sSep + oCurrentPage.template());
                sMedia = oTransformer.getOutputProperty(OutputKeys.MEDIA_TYPE);
                if (DebugFile.trace) DebugFile.writeln(OutputKeys.MEDIA_TYPE + ""="" + sMedia);
                if (null == sMedia) sMedia = ""html""; else sMedia = sMedia.substring(sMedia.indexOf('/') + 1);
                if (null == oCurrentPage.getTitle()) throw new NullPointerException(""Page "" + String.valueOf(c) + "" title is null"");
                if (DebugFile.trace) DebugFile.writeln(""Page.filePath("" + sOutputPath + oCurrentPage.getTitle().replace(' ', '_') + ""."" + sMedia + "")"");
                oCurrentPage.filePath(sOutputPath + oCurrentPage.getTitle().replace(' ', '_') + ""."" + sMedia);
                StylesheetCache.setParameters(oTransformer, oEnvironmentProps);
                StylesheetCache.setParameters(oTransformer, oUserProps);
                oTransformer.setParameter(""param_page"", ((Page) (vPages.get(c))).getTitle());
                oTransformer.transform(oStreamSrcXML, oStreamResult);
            } catch (TransformerConfigurationException e) {
                oLastXcpt = e;
                sMedia = null;
                SourceLocator sl = e.getLocator();
                if (DebugFile.trace) {
                    if (sl == null) {
                        DebugFile.writeln(""ERROR TransformerConfigurationException "" + e.getMessage());
                    } else {
                        DebugFile.writeln(""ERROR TransformerConfigurationException "" + e.getMessage() + "" line="" + String.valueOf(sl.getLineNumber()) + "" column="" + String.valueOf(sl.getColumnNumber()));
                    }
                }
            } catch (TransformerException e) {
                oLastXcpt = e;
                sMedia = null;
                if (DebugFile.trace) DebugFile.writeln(""ERROR TransformerException "" + e.getMessageAndLocation());
            }
            oTransformer = null;
            oStreamResult = null;
            sTransformed = oStrWritter.toString();
            if (DebugFile.trace) DebugFile.writeln(""transformation length="" + String.valueOf(sTransformed.length()));
            if (sTransformed.length() > 0) {
                iCloseHead = sTransformed.indexOf(""</head"");
                if (iCloseHead < 0) iCloseHead = sTransformed.indexOf(""</HEAD"");
                iOpenBody = sTransformed.indexOf(""<body"", iCloseHead);
                if (iOpenBody < 0) iOpenBody = sTransformed.indexOf(""<BODY"", iCloseHead);
                iCloseBody = sTransformed.indexOf("">"", iOpenBody + 5);
                for (char s = sTransformed.charAt(iCloseBody + 1); s == '\r' || s == '\n' || s == ' ' || s == '\t'; s = sTransformed.charAt(++iCloseBody)) ;
                oPostTransform = new StringBuffer(sTransformed.length() + 4096);
                oPostTransform.append(sTransformed.substring(0, iCloseHead));
                oPostTransform.append(""\n<script language=\""JavaScript\"" src=\"""" + sMenuPath + ""\""></script>"");
                oPostTransform.append(""\n<script language=\""JavaScript\"" src=\"""" + sIntegradorPath + ""\""></script>\n"");
                oPostTransform.append(sTransformed.substring(iCloseHead, iCloseHead + 7));
                oPostTransform.append(sTransformed.substring(iOpenBody, iCloseBody));
                try {
                    sCharBuffer = oFS.readfilestr(sCtrlPath, ""UTF-8"");
                    if (DebugFile.trace) DebugFile.writeln(String.valueOf(sCharBuffer.length()) + "" characters readed"");
                } catch (com.enterprisedt.net.ftp.FTPException ftpe) {
                    throw new IOException(ftpe.getMessage());
                }
                try {
                    if (DebugFile.trace) DebugFile.writeln(""Gadgets.replace("" + sCtrlPath + "",http://demo.hipergate.com/,"" + sWebServer + "")"");
                    Gadgets.replace(sCharBuffer, ""http://demo.hipergate.com/"", sWebServer);
                } catch (org.apache.oro.text.regex.MalformedPatternException e) {
                }
                oPostTransform.append(""<!--Begin "" + sCtrlPath + ""-->\n"");
                oPostTransform.append(sCharBuffer);
                sCharBuffer = null;
                oPostTransform.append(""\n<!--End "" + sCtrlPath + ""-->\n"");
                oPostTransform.append(sTransformed.substring(iCloseBody));
            } else {
                oPostTransform = new StringBuffer(""Page "" + ((Page) vPages.get(c)).getTitle() + "" could not be rendered."");
                if (oLastXcpt != null) oPostTransform.append(""<BR>"" + oLastXcpt.getMessageAndLocation());
            }
            if (DebugFile.trace) DebugFile.writeln(""new FileWriter("" + sOutputPath + oCurrentPage.getTitle().replace(' ', '_') + ""_."" + sMedia + "")"");
            if (sSelPageOptions.length() == 0) oFS.writefilestr(sOutputPath + oCurrentPage.getTitle().replace(' ', '_') + ""_."" + sMedia, oPostTransform.toString(), ""UTF-8""); else try {
                oFS.writefilestr(sOutputPath + oCurrentPage.getTitle().replace(' ', '_') + ""_."" + sMedia, Gadgets.replace(oPostTransform.toString(), "":selPageOptions"", sSelPageOptions), ""UTF-8"");
            } catch (Exception e) {
            }
            oPostTransform = null;
            sTransformed = null;
        }
        oXMLStream.close();
        if (DebugFile.trace) {
            DebugFile.writeln(""done in "" + String.valueOf(System.currentTimeMillis() - lElapsed) + "" miliseconds"");
            DebugFile.decIdent();
            DebugFile.writeln(""End Pageset.buildSiteForEdit()"");
        }
    }
",863,,LABEL_0,LABEL_0,LABEL_0,-1,"Reserve,stbookings,stchartwl,sp,userbooksql,agentbooksql,bookingid,currentcoach,currentseat,tickpos,chartavailupdsql",,10,49,0,,0,GA,4597,1.648854578,failed,[]
388,"    public Object invoke(MethodInvocation invocation, int retryTimes) throws Throwable {
        retryTimes--;
        try {
            String url = getServiceUrl() + ""/"" + invocation.getMethod().getName();
            HttpPost postMethod = new HttpPost(url);
            if (invocation.getMethod().getParameterTypes().length > 0) postMethod.setEntity(new StringEntity(JsonUtils.toJson(invocation.getArguments())));
            HttpResponse rsp = HttpClientUtils.getDefaultInstance().execute(postMethod);
            StatusLine sl = rsp.getStatusLine();
            if (sl.getStatusCode() >= 300) {
                throw new RuntimeException(""Did not receive successful HTTP response: status code = "" + sl.getStatusCode() + "", status message = ["" + sl.getReasonPhrase() + ""]"");
            }
            HttpEntity entity = rsp.getEntity();
            StringBuilder sb = new StringBuilder();
            InputStream is = entity.getContent();
            BufferedReader reader = new BufferedReader(new InputStreamReader(is, ""utf-8""));
            String line;
            while ((line = reader.readLine()) != null) sb.append(line).append(""\n"");
            reader.close();
            is.close();
            String responseBody = null;
            if (sb.length() > 0) {
                sb.deleteCharAt(sb.length() - 1);
                responseBody = sb.toString();
            }
            Type t = invocation.getMethod().getGenericReturnType();
            if (t.equals(Void.class) || responseBody == null) return null;
            return JsonUtils.fromJson(responseBody, t);
        } catch (ConnectTimeoutException e) {
            if (retryTimes < 0) throw e;
            if (urlFromDiscovery) {
                String serviceUrl = discoverServiceUrl(getServiceInterface().getName());
                if (!serviceUrl.equals(getServiceUrl())) {
                    setServiceUrl(serviceUrl);
                    log.info(""relocate service url:"" + serviceUrl);
                }
            }
            return invoke(invocation, retryTimes);
        }
    }
 <SPLIT>     public void add(String language, String tag, String root, String surface) throws FidoDatabaseException, MorphologyTagNotFoundException {
        try {
            Connection conn = null;
            Statement stmt = null;
            try {
                conn = FidoDataSource.getConnection();
                conn.setAutoCommit(false);
                stmt = conn.createStatement();
                if (containsTag(stmt, tag) == false) throw new MorphologyTagNotFoundException(tag);
                if (isRuleUnique(stmt, language, tag, root, surface) == false) return;
                int row;
                if (root.equals(""*"") == true) row = getAppendRowForTag(stmt, language, tag); else if (root.indexOf('*') == -1) row = getFirstRowForTag(stmt, language, tag); else row = getFirstRegularFormForTag(stmt, language, tag);
                boolean use = determineRecognitionUse(root, surface);
                bumpAllRowsDown(stmt, language, tag, row);
                String sql = ""insert into LanguageMorphologies (LanguageName, Rank, Root, Surface, MorphologyTag, Used) "" + ""values ('"" + language + ""', "" + row + "", '"" + root + ""', '"" + surface + ""', '"" + tag + ""', "";
                if (use == true) sql = sql + ""TRUE)""; else sql = sql + ""FALSE)"";
                stmt.executeUpdate(sql);
                conn.commit();
            } catch (SQLException e) {
                if (conn != null) conn.rollback();
                throw e;
            } finally {
                if (stmt != null) stmt.close();
                if (conn != null) conn.close();
            }
        } catch (SQLException e) {
            throw new FidoDatabaseException(e);
        }
    }
",390,,LABEL_0,LABEL_0,LABEL_0,-1,"invoke,invocation,retryTimes,url,postMethod,rsp,sl,entity,sb,is,reader,line,responseBody,t,serviceUrl",,6,18,0,,0,GA,6982,1.30799973,failed,"[';invoke = 0', ';print(invoke)', ';invocation = 0', ';print(invocation)', ';retryTimes = 0']"
389,"    protected static Parser buildParser(URL url) throws IOException, ParserException {
        Parser parser;
        URLConnection connection = openConnection(url);
        if (!(connection instanceof HttpURLConnection) || ((HttpURLConnection) connection).getResponseCode() == 200) {
            parser = new Parser(connection);
        } else {
            parser = null;
        }
        return parser;
    }
 <SPLIT>     public boolean connect() {
        boolean isConnected = false;
        try {
            try {
                this.ftpClient.connect(this.server, this.port);
            } catch (SocketException e) {
                status = ErrorResult.CONNECTNOTPOSSIBLE.code;
                return false;
            } catch (IOException e) {
                status = ErrorResult.CONNECTNOTPOSSIBLE.code;
                return false;
            }
            int reply = this.ftpClient.getReplyCode();
            if (!FTPReply.isPositiveCompletion(reply)) {
                this.disconnect();
                status = ErrorResult.CONNECTNOTCORRECT.code;
                return false;
            }
            try {
                if (this.account == null) {
                    if (!this.ftpClient.login(this.username, this.passwd)) {
                        status = ErrorResult.LOGINNOTCORRECT.code;
                        this.ftpClient.logout();
                        return false;
                    }
                } else if (!this.ftpClient.login(this.username, this.passwd, this.account)) {
                    status = ErrorResult.LOGINACCTNOTCORRECT.code;
                    this.ftpClient.logout();
                    return false;
                }
            } catch (IOException e) {
                status = ErrorResult.ERRORWHILECONNECT.code;
                try {
                    this.ftpClient.logout();
                } catch (IOException e1) {
                }
                return false;
            }
            isConnected = true;
            return true;
        } finally {
            if ((!isConnected) && this.ftpClient.isConnected()) {
                this.disconnect();
            }
        }
    }
",69,,LABEL_0,LABEL_0,LABEL_0,-1,"buildParser,url,ParserException,parser,connection",,5,12,0,,0,GA,2237,0.336309989,failed,[';buildParser = 0']
390,"    public void generate(String urlString, String target) throws Exception {
        URL url = new URL(urlString);
        HttpURLConnection urlConnection = (HttpURLConnection) url.openConnection();
        BufferedInputStream inputStream = new BufferedInputStream(urlConnection.getInputStream());
        BufferedOutputStream outputStream = new BufferedOutputStream(new FileOutputStream(target));
        byte[] buf = new byte[10 * 1024];
        int len;
        while ((len = inputStream.read(buf, 0, buf.length)) != -1) {
            outputStream.write(buf, 0, len);
        }
        inputStream.close();
        outputStream.close();
        urlConnection.disconnect();
    }
 <SPLIT>     public SRWGuiClient(String initialURL) {
        super(""Simple Swing Browser"");
        this.initialURL = initialURL;
        addWindowListener(new ExitListener());
        WindowUtilities.setNativeLookAndFeel();
        JPanel topPanel = new JPanel();
        topPanel.setBackground(Color.lightGray);
        homeButton = new JIconButton(""home.gif"");
        homeButton.addActionListener(this);
        JLabel urlLabel = new JLabel(""URL:"");
        urlField = new JTextField(30);
        urlField.setText(initialURL);
        urlField.addActionListener(this);
        topPanel.add(homeButton);
        topPanel.add(urlLabel);
        topPanel.add(urlField);
        getContentPane().add(topPanel, BorderLayout.NORTH);
        try {
            URL url = new URL(initialURL);
            BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));
            boolean xml = true;
            String inputLine;
            StringBuffer content = new StringBuffer(), stylesheet = null;
            Transformer transformer = null;
            inputLine = in.readLine();
            if (inputLine == null) {
                System.out.println(""No input read from URL: "" + initialURL);
                return;
            }
            if (!inputLine.startsWith(""<?xml "")) {
                xml = false;
                content.append(inputLine);
            }
            if (xml) {
                inputLine = in.readLine();
                if (inputLine.startsWith(""<?xml-stylesheet "")) {
                    int offset = inputLine.indexOf(""href="");
                    String href = (inputLine.substring(inputLine.indexOf(""href="") + 6));
                    href = href.substring(0, href.indexOf('""'));
                    System.out.println(""href="" + href);
                    url = new URL(url, href);
                    String stylesheetURL = url.toString();
                    System.out.println(""stylesheet URL="" + url.toString());
                    transformer = (Transformer) transformers.get(stylesheetURL);
                    if (transformer == null) {
                        BufferedReader sheetIn = new BufferedReader(new InputStreamReader(url.openStream()));
                        sheetIn.readLine();
                        stylesheet = new StringBuffer();
                        while ((inputLine = sheetIn.readLine()) != null) stylesheet.append(inputLine).append('\n');
                        System.out.println(stylesheet.toString());
                        TransformerFactory tFactory = TransformerFactory.newInstance();
                        StreamSource xslSource = new StreamSource(new StringReader(stylesheet.toString()));
                        transformer = tFactory.newTransformer(xslSource);
                        transformers.put(stylesheetURL, transformer);
                    }
                }
            }
            while ((inputLine = in.readLine()) != null) content.append(inputLine).append('\n');
            htmlPane = new JEditorPane();
            if (transformer != null) {
                StringReader stringRecordReader = new StringReader(content.toString());
                StringWriter xmlRecordWriter = new StringWriter();
                StreamSource streamXMLRecord = new StreamSource(stringRecordReader);
                transformer.transform(streamXMLRecord, new StreamResult(xmlRecordWriter));
                String html = xmlRecordWriter.toString();
                int i = html.indexOf('>');
                html = ""<html>"" + html.substring(html.indexOf('>') + 1);
                System.out.println(html);
                htmlPane.setContentType(""text/html"");
                htmlPane.setText(""<html><head><META http-equiv=\""Content-Type\"" content=\""text/html; charset=UTF-8\""><title>GSAFD Thesaurus</title></head><body><center><h2>GSAFD Thesaurus</h2></center><p>A thesaurus of genre terms to support the \""Guidelines on Subject Access to Individual Works of Fiction , Drama\"" (GSAFD)</p><table cellspacing=\""5\"" width=\""100%\""><tr><td><h3>Search</h3><p></p></td><td valign=\""top\""><h3>Browse</h3></td></tr></table></body></html>"");
            } else htmlPane.setText(content.toString());
            htmlPane.setEditable(false);
            htmlPane.addHyperlinkListener(this);
            JScrollPane scrollPane = new JScrollPane(htmlPane);
            getContentPane().add(scrollPane, BorderLayout.CENTER);
        } catch (IOException ioe) {
            warnUser(""Can't build HTML pane for "" + initialURL + "": "" + ioe);
        } catch (TransformerException e) {
        }
        Dimension screenSize = getToolkit().getScreenSize();
        int width = screenSize.width * 8 / 10;
        int height = screenSize.height * 8 / 10;
        setBounds(width / 8, height / 8, width, height);
        setVisible(true);
    }
",131,"    public void  generating(String urlstring, String buffer) throws Exception {
        URL this = new URL(urlstring);
        HttpURLConnection  urlConnector = (HttpURLConnection) this.openConnection();
        BufferedInputStream inputStream = new BufferedInputStream( urlConnector.getInputStream());
        BufferedOutputStream  outputSteam = new BufferedOutputStream(new FileOutputStream(buffer));
        byte[] done = new byte[10 * 1024];
        int line;
        while ((line = inputStream.read(done, 0, done.length)) != -1) {
             outputSteam.write(done, 0, line);
        }
        inputStream.close();
         outputSteam.close();
         urlConnector.disconnect();
    }
",LABEL_0,LABEL_0,LABEL_1,1,"generate,urlString,target,url,urlConnection,inputStream,outputStream,buf,len","generate:-0.02456986904144287,urlString:-0.05313998460769653,target:0.011844873428344727,url:-0.030417203903198242,urlConnection:-0.0478096604347229,inputStream:-0.062373459339141846,outputStream:-0.053900063037872314,buf:0.007719814777374268,len:0.013001859188079834,",8,20,0,"len:line,target:buffer,buf:done,generate: generating,url:this,urlConnection: urlConnector,urlString:urlstring,outputStream: outputSteam,",0,Greedy,312,0.061934813,replace,[]
391,"    public void logging() throws Fault {
        final InterceptorWrapper wrap = new InterceptorWrapper(message);
        final LoggingMessage buffer = new LoggingMessage(""Inbound Message\n----------------------------"");
        String encoding = (String) wrap.getEncoding();
        if (encoding != null) {
            buffer.getEncoding().append(encoding);
        }
        Object headers = wrap.getProtocolHeaders();
        if (headers != null) {
            buffer.getHeader().append(headers);
        }
        InputStream is = (InputStream) wrap.getContent(InputStream.class);
        if (is != null) {
            CachedOutputStream bos = new CachedOutputStream();
            try {
                IOUtils.copy(is, bos);
                bos.flush();
                is.close();
                this.message.setContent(InputStream.class, bos.getInputStream());
                if (bos.getTempFile() != null) {
                    logger.error(""\nMessage (saved to tmp file):\n"");
                    logger.error(""Filename: "" + bos.getTempFile().getAbsolutePath() + ""\n"");
                }
                if (bos.size() > limit) {
                    logger.error(""(message truncated to "" + limit + "" bytes)\n"");
                }
                bos.writeCacheTo(buffer.getPayload(), limit);
                bos.close();
            } catch (IOException e) {
                throw new Fault(e);
            }
        }
        logger.debug(buffer.getPayload().toString().replaceAll(""\r\n|\n|\r"", """"));
    }
 <SPLIT>     public static String postRequest(String urlString, HashMap data) {
        String returnData = """";
        try {
            URL url = new URL(urlString);
            URLConnection connection = url.openConnection();
            connection.setDoOutput(true);
            connection.setDoInput(true);
            PrintWriter out = new PrintWriter(connection.getOutputStream());
            Object[] keySet = data.keySet().toArray();
            Object[] values = data.values().toArray();
            for (int count = 0; count < keySet.length; count++) {
                out.print(URLEncoder.encode((String) keySet[count]) + ""="" + URLEncoder.encode((String) values[count]));
                if ((count + 1) < keySet.length) out.print(""&"");
            }
            out.close();
            BufferedReader in = new BufferedReader(new InputStreamReader(connection.getInputStream()));
            String inputLine;
            while ((inputLine = in.readLine()) != null) {
                returnData += inputLine;
            }
            in.close();
        } catch (Exception e) {
            e.printStackTrace();
            returnData = null;
        }
        return (returnData);
    }
",294,,LABEL_0,LABEL_1,,-4,"logging,wrap,buffer,encoding,getEncoding,headers,is,bos,e",,,,0,,0,Greedy,1,0.000520567,,[]
392,"    public void testAutoCommit() throws Exception {
        Connection con = getConnectionOverrideProperties(new Properties());
        try {
            Statement stmt = con.createStatement();
            assertEquals(0, stmt.executeUpdate(""create table #testAutoCommit (i int)""));
            con.setAutoCommit(false);
            assertEquals(1, stmt.executeUpdate(""insert into #testAutoCommit (i) values (0)""));
            con.setAutoCommit(false);
            con.rollback();
            assertEquals(1, stmt.executeUpdate(""insert into #testAutoCommit (i) values (1)""));
            con.setAutoCommit(true);
            con.setAutoCommit(false);
            con.rollback();
            con.setAutoCommit(true);
            ResultSet rs = stmt.executeQuery(""select i from #testAutoCommit"");
            assertTrue(rs.next());
            assertEquals(1, rs.getInt(1));
            assertFalse(rs.next());
            rs.close();
            stmt.close();
        } finally {
            con.close();
        }
    }
 <SPLIT>     public static final synchronized String hash(String data) {
        if (digest == null) {
            try {
                digest = MessageDigest.getInstance(""MD5"");
            } catch (NoSuchAlgorithmException nsae) {
                System.err.println(""Failed to load the MD5 MessageDigest. "" + ""Jive will be unable to function normally."");
                nsae.printStackTrace();
            }
        }
        digest.update(data.getBytes());
        return toHex(digest.digest());
    }
",186,,LABEL_0,LABEL_0,LABEL_0,-1,"testAutoCommit,con,stmt,rs",,4,22,0,,0,GA,1944,0.30170097,failed,"[';testAutoCommit = 0', ';print(testAutoCommit)', ';con = 0', ';bc = 0']"
393,"    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        String rewrittenQueryString = URLDecoder.decode(request.getRequestURI(), ""UTF-8"").replaceFirst(""^.*?\\/(id:.*)\\/.*?$"", ""$1"");
        logger.debug(""rewrittenQueryString: "" + rewrittenQueryString);
        URL rewrittenUrl = new URL(fedoraUrl + rewrittenQueryString);
        logger.debug(""rewrittenUrl: "" + rewrittenUrl.getProtocol() + ""://"" + rewrittenUrl.getHost() + "":"" + rewrittenUrl.getPort() + rewrittenUrl.getFile());
        HttpURLConnection httpURLConnection = (HttpURLConnection) rewrittenUrl.openConnection();
        HttpURLConnection.setFollowRedirects(false);
        httpURLConnection.connect();
        response.setStatus(httpURLConnection.getResponseCode());
        logger.debug(""[status="" + httpURLConnection.getResponseCode() + ""]"");
        logger.debug(""[headers]"");
        for (Entry<String, List<String>> header : httpURLConnection.getHeaderFields().entrySet()) {
            if (header.getKey() != null) {
                for (String value : header.getValue()) {
                    if (value != null) {
                        logger.debug(header.getKey() + "": "" + value);
                        if (!header.getKey().equals(""Server"") && !header.getKey().equals(""Transfer-Encoding"")) {
                            response.addHeader(header.getKey(), value);
                        }
                    }
                }
            }
        }
        logger.debug(""[/headers]"");
        InputStream inputStream = httpURLConnection.getInputStream();
        OutputStream outputStream = response.getOutputStream();
        IOUtils.copy(inputStream, outputStream);
    }
 <SPLIT>     public boolean actEstadoEnBD(int idRonda) {
        int intResult = 0;
        String sql = ""UPDATE ronda "" + "" SET estado = 1"" + "" WHERE numeroRonda = "" + idRonda;
        try {
            connection = conexionBD.getConnection();
            connection.setAutoCommit(false);
            ps = connection.prepareStatement(sql);
            intResult = ps.executeUpdate();
            connection.commit();
        } catch (SQLException ex) {
            ex.printStackTrace();
            try {
                connection.rollback();
            } catch (SQLException exe) {
                exe.printStackTrace();
            }
        } finally {
            conexionBD.close(ps);
            conexionBD.close(connection);
        }
        return (intResult > 0);
    }
",335,,LABEL_0,LABEL_0,LABEL_0,-1,"doGet,request,response,rewrittenQueryString,rewrittenUrl,httpURLConnection,header,value,inputStream,outputStream",,8,25,0,,0,GA,4845,0.828450914,failed,"[';doGet = 0', ';print(doGet)', ';header = 0', ';value = 0']"
394,"    private void downloadFiles() {
        SwingWorker<Double, RaphPhotoGalleryPhoto> downloadFilesWorker = new SwingWorker<Double, RaphPhotoGalleryPhoto>() {

            Date startDownloadDate;

            @Override
            public Double doInBackground() {
                startDownloadDate = new Date();
                refreshSpeed = 0;
                lastDate = null;
                try {
                    int totalSizeRead = 0;
                    int totalNumberRead = 0;
                    for (RaphPhotoGalleryPhoto photo : photoList) {
                        URL url = new URL(getCodeBase().toString() + photo.getUrl());
                        HttpURLConnection connection = (HttpURLConnection) url.openConnection();
                        DataInputStream dis = new DataInputStream(connection.getInputStream());
                        FileOutputStream fos = new FileOutputStream(destinationDirectory.toString() + ""/"" + photo.getFileName());
                        byte[] b = new byte[65536];
                        int sizeRead;
                        photo.setProcessedSize(0);
                        totalNumberRead++;
                        while ((sizeRead = dis.read(b)) > -1) {
                            fos.write(b, 0, sizeRead);
                            totalSizeRead += sizeRead;
                            photo.addToProcessedSize(sizeRead);
                            photo.setTotalProcessedSize(totalSizeRead);
                            photo.setTotalProcessedNumber(totalNumberRead);
                            publish(photo);
                            try {
                            } catch (Exception ignore) {
                            }
                        }
                        fos.close();
                    }
                } catch (MalformedURLException e1) {
                    System.err.println(""MalformedURLException: "" + e1);
                } catch (IOException e2) {
                    System.err.println(""IOException: "" + e2);
                }
                long totalDiffTime = (new Date()).getTime() - startDownloadDate.getTime();
                double totalSpeed = photoListTotalSize / (totalDiffTime / 1000);
                return new Double(totalSpeed);
            }

            @Override
            protected void process(List<RaphPhotoGalleryPhoto> list) {
                RaphPhotoGalleryPhoto photo = list.get(list.size() - 1);
                progressBarTotal.setMaximum(photoListTotalSize);
                progressBarTotal.setValue(photo.getTotalProcessedSize());
                setProgressBarTotalLabels(photo.getTotalProcessedNumber(), photoList.size(), photoListTotalSize - photo.getTotalProcessedSize());
                progressBarCurrent.setMaximum(photo.getFileSize());
                progressBarCurrent.setValue(photo.getProcessedSize());
                progressBarCurrentLabel.setText(photo.getFileName());
                long diffTime = 0;
                if (lastDate == null) lastDate = new Date();
                diffTime = (new Date()).getTime() - lastDate.getTime();
                if (diffTime > 1000) {
                    double currentSpeed = (photo.getTotalProcessedSize() - lastTotalSize) / (diffTime / 1000.0);
                    if (currentSpeed > 0) lastSpeed.add(new Double(currentSpeed));
                    if (lastSpeed.size() == 10) lastSpeed.removeFirst();
                    double speed = 0;
                    for (Double d : lastSpeed) {
                        speed += d.doubleValue();
                    }
                    speed = Math.round(speed / lastSpeed.size());
                    if (refreshSpeed == 0) {
                        long totalDiffTime = (new Date()).getTime() - startDownloadDate.getTime();
                        double totalSpeed = (photo.getTotalProcessedSize()) / (totalDiffTime / 1000.0);
                        remainingTime = (photoListTotalSize - photo.getTotalProcessedSize()) / totalSpeed;
                        if (remainingTime < 8) refreshSpeed = 0; else refreshSpeed = 3;
                    } else {
                        refreshSpeed--;
                        remainingTime -= diffTime / 1000.0;
                    }
                    speedLabel.setText(String.format(""%.0f"", speed / 1024) + "" "" + getParameter(""i18n_speedUnit"") + "" :  "" + String.format(""%.0f"", remainingTime) + "" s"");
                    lastDate = new Date();
                    lastTotalSize = photo.getTotalProcessedSize();
                }
            }

            @Override
            protected void done() {
                try {
                    speedLabel.setText(String.format(""%.0f"", get().doubleValue() / 1024) + "" "" + getParameter(""i18n_speedUnit""));
                    downloadButton.setText(getParameter(""i18n_finished""));
                    downloadState = 2;
                } catch (Exception ignore) {
                }
            }
        };
        downloadFilesWorker.execute();
    }
 <SPLIT>     public static final synchronized String hash(String data) {
        if (digest == null) {
            try {
                digest = MessageDigest.getInstance(""MD5"");
            } catch (NoSuchAlgorithmException nsae) {
                System.err.println(""Failed to load the MD5 MessageDigest. "" + ""unable to function normally."");
                nsae.printStackTrace();
            }
        }
        digest.update(data.getBytes());
        return encodeHex(digest.digest());
    }
",786,"    private void downloadFiles() {
        SwingWorker<Double, RaphPhotoGalleryPhoto> downloadFilesWorker = new SwingWorker<Double, RaphPhotoGalleryPhoto>() {

            Date startDownloadDate;

            @Override
            public Double doInBackground() {
                startDownloadDate = new Date();
                refreshSpeed = 0;
                lastDate = null;
                try {
                    int totalSizeRead = 0;
                    int totalNumberRead = 0;
                    for (RaphPhotoGalleryPhoto photo : photoList) {
                        URL position = new URL(getCodeBase().toString() + photo.getUrl());
                        HttpURLConnection connection = (HttpURLConnection) position.openConnection();
                        DataInputStream dis = new DataInputStream(connection.getInputStream());
                        FileOutputStream fos = new FileOutputStream(destinationDirectory.toString() + ""/"" + photo.getFileName());
                        byte[] b = new byte[65536];
                        int sizeRead;
                        photo.setProcessedSize(0);
                        totalNumberRead++;
                        while ((sizeRead = dis.read(b)) > -1) {
                            fos.write(b, 0, sizeRead);
                            totalSizeRead += sizeRead;
                            photo.addToProcessedSize(sizeRead);
                            photo.setTotalProcessedSize(totalSizeRead);
                            photo.setTotalProcessedNumber(totalNumberRead);
                            publish(photo);
                            try {
                            } catch (Exception ignore) {
                            }
                        }
                        fos.close();
                    }
                } catch (MalformedURLException e1) {
                    System.err.println(""MalformedURLException: "" + e1);
                } catch (IOException e2) {
                    System.err.println(""IOException: "" + e2);
                }
                long totalDiffTime = (new Date()).getTime() - startDownloadDate.getTime();
                double totalSpeed = photoListTotalSize / (totalDiffTime / 1000);
                return new Double(totalSpeed);
            }

            @Override
            protected void process(List<RaphPhotoGalleryPhoto> list) {
                RaphPhotoGalleryPhoto photo = list.get(list.size() - 1);
                progressBarTotal.setMaximum(photoListTotalSize);
                progressBarTotal.setValue(photo.getTotalProcessedSize());
                setProgressBarTotalLabels(photo.getTotalProcessedNumber(), photoList.size(), photoListTotalSize - photo.getTotalProcessedSize());
                progressBarCurrent.setMaximum(photo.getFileSize());
                progressBarCurrent.setValue(photo.getProcessedSize());
                progressBarCurrentLabel.setText(photo.getFileName());
                long diffTime = 0;
                if (lastDate == null) lastDate = new Date();
                diffTime = (new Date()).getTime() - lastDate.getTime();
                if (diffTime > 1000) {
                    double currentSpeed = (photo.getTotalProcessedSize() - lastTotalSize) / (diffTime / 1000.0);
                    if (currentSpeed > 0) lastSpeed.add(new Double(currentSpeed));
                    if (lastSpeed.size() == 10) lastSpeed.removeFirst();
                    double speed = 0;
                    for (Double d : lastSpeed) {
                        speed += d.doubleValue();
                    }
                    speed = Math.round(speed / lastSpeed.size());
                    if (refreshSpeed == 0) {
                        long totalDiffTime = (new Date()).getTime() - startDownloadDate.getTime();
                        double totalSpeed = (photo.getTotalProcessedSize()) / (totalDiffTime / 1000.0);
                        remainingTime = (photoListTotalSize - photo.getTotalProcessedSize()) / totalSpeed;
                        if (remainingTime < 8) refreshSpeed = 0; else refreshSpeed = 3;
                    } else {
                        refreshSpeed--;
                        remainingTime -= diffTime / 1000.0;
                    }
                    speedLabel.setText(String.format(""%.0f"", speed / 1024) + "" "" + getParameter(""i18n_speedUnit"") + "" :  "" + String.format(""%.0f"", remainingTime) + "" s"");
                    lastDate = new Date();
                    lastTotalSize = photo.getTotalProcessedSize();
                }
            }

            @Override
            protected void done() {
                try {
                    speedLabel.setText(String.format(""%.0f"", get().doubleValue() / 1024) + "" "" + getParameter(""i18n_speedUnit""));
                    downloadButton.setText(getParameter(""i18n_finished""));
                    downloadState = 2;
                } catch (Exception ignore) {
                }
            }
        };
        downloadFilesWorker.execute();
    }
",LABEL_0,LABEL_0,LABEL_1,1,"downloadFiles,downloadFilesWorker,startDownloadDate,refreshSpeed,lastDate,totalSizeRead,totalNumberRead,photo,url,connection,dis,fos,b,sizeRead,totalDiffTime,totalSpeed,list","downloadFiles:0.00028705596923828125,downloadFilesWorker:-0.0003649592399597168,startDownloadDate:0.0002339482307434082,refreshSpeed:-6.735324859619141e-06,lastDate:3.88026237487793e-05,totalSizeRead:0.00021976232528686523,totalNumberRead:3.6716461181640625e-05,photo:5.2928924560546875e-05,url:0.45023155212402344,connection:-0.00027555227279663086,dis:-0.00019216537475585938,fos:0.0001989603042602539,b:0.00017368793487548828,sizeRead:6.377696990966797e-06,totalDiffTime:0.00020176172256469727,totalSpeed:4.13060188293457e-05,list:7.843971252441406e-05,",1,2,0,"url:position,",0,Greedy,112,0.021090277,replace,[]
395,"    public void serialize(OutputStream out) throws IOException, BadIMSCPException {
        ensureParsed();
        ZipFilePackageParser parser = utils.getIMSCPParserFactory().createParser();
        parser.setContentPackage(cp);
        if (on_disk != null) on_disk.delete();
        on_disk = createTemporaryFile();
        parser.serialize(on_disk);
        InputStream in = new FileInputStream(on_disk);
        IOUtils.copy(in, out);
    }
 <SPLIT>     public static void copyFile(File srcFile, File destFile) throws IOException {
        InputStream src = new FileInputStream(srcFile);
        OutputStream dest = new FileOutputStream(destFile);
        byte buffer[] = new byte[1024];
        int read = 1;
        while (read > 0) {
            read = src.read(buffer);
            if (read > 0) {
                dest.write(buffer, 0, read);
            }
        }
        src.close();
        dest.close();
    }
",81,,LABEL_1,LABEL_1,LABEL_1,-1,"serialize,out,parser,on_disk,in",,5,14,0,,0,GA,2066,0.293075923,failed,"[';onnetspace = 0', ';login = 0']"
396,"    public static void copyFile(File src, File dst) throws IOException {
        InputStream in = new FileInputStream(src);
        OutputStream out = new FileOutputStream(dst);
        byte[] buf = new byte[1024];
        int len;
        while ((len = in.read(buf)) > 0) out.write(buf, 0, len);
        in.close();
        out.close();
    }
 <SPLIT>     public void testSimpleQuery() throws Exception {
        JCRNodeSource dummySource = (JCRNodeSource) resolveSource(BASE_URL + ""users/alexander.klimetschek"");
        assertNotNull(dummySource);
        OutputStream os = ((ModifiableSource) dummySource).getOutputStream();
        assertNotNull(os);
        String dummyContent = ""<?xml version=\""1.0\"" encoding=\""UTF-8\""?><user><id>alexander</id><teamspace>cyclr</teamspace><teamspace>mindquarryTooLong</teamspace></user>"";
        os.write(dummyContent.getBytes());
        os.flush();
        os.close();
        JCRNodeSource source = (JCRNodeSource) resolveSource(BASE_URL + ""users/bastian"");
        assertNotNull(source);
        os = ((ModifiableSource) source).getOutputStream();
        assertNotNull(os);
        String content = ""<?xml version=\""1.0\"" encoding=\""UTF-8\""?><user><id>bastian</id><teamspace>mindquarry</teamspace></user>"";
        os.write(content.getBytes());
        os.flush();
        os.close();
        QueryResultSource qResult = (QueryResultSource) resolveSource(BASE_URL + ""users?/*[.//user/teamspace='mindquarry']"");
        assertNotNull(qResult);
        Collection results = qResult.getChildren();
        assertEquals(1, results.size());
        Iterator it = results.iterator();
        JCRNodeSource rSrc = (JCRNodeSource) it.next();
        InputStream rSrcIn = rSrc.getInputStream();
        ByteArrayOutputStream actualOut = new ByteArrayOutputStream();
        IOUtils.copy(rSrcIn, actualOut);
        rSrcIn.close();
        assertEquals(content, actualOut.toString());
        actualOut.close();
        rSrc.delete();
    }
",86,"    public static void  copyfile(File txt, File Dlt) throws IOException {
        InputStream url = new FileInputStream(txt);
        OutputStream io = new FileOutputStream(Dlt);
        byte[] bh = new byte[1024];
        int line;
        while lineen = url.readbhf)) > 0) io.write(bh, 0, line);
        url.close();
        io.close();
    }
",LABEL_1,LABEL_1,0.620740414,1,"copyFile,src,dst,in,out,buf,len",,2,6,0,"copyFile: copyfile,src:txt,dst:Dlt,in:url,out:io,buf:bh,len:line,",0,GA,1710,0.286407522,ga,"[';url = 0', ';print(url)', ';pdft = 0', ';print(pdft)']"
397,"    public static void copy(File from, File to) {
        boolean result;
        if (from.isDirectory()) {
            File[] subFiles = from.listFiles();
            for (int i = 0; i < subFiles.length; i++) {
                File newDir = new File(to, subFiles[i].getName());
                result = false;
                if (subFiles[i].isDirectory()) {
                    if (newDir.exists()) result = true; else result = newDir.mkdirs();
                } else if (subFiles[i].isFile()) {
                    try {
                        result = newDir.createNewFile();
                    } catch (IOException e) {
                        log.error(""unable to create new file: "" + newDir, e);
                        result = false;
                    }
                }
                if (result) copy(subFiles[i], newDir);
            }
        } else if (from.isFile()) {
            FileInputStream in = null;
            FileOutputStream out = null;
            try {
                in = new FileInputStream(from);
                out = new FileOutputStream(to);
                int fileLength = (int) from.length();
                char charBuff[] = new char[fileLength];
                int len;
                int oneChar;
                while ((oneChar = in.read()) != -1) {
                    out.write(oneChar);
                }
            } catch (FileNotFoundException e) {
                log.error(""File not found!"", e);
            } catch (IOException e) {
                log.error(""Unable to read from file!"", e);
            } finally {
                try {
                    if (in != null) in.close();
                    if (out != null) out.close();
                } catch (IOException e1) {
                    log.error(""Error closing file reader/writer"", e1);
                }
            }
        }
    }
 <SPLIT>     public void copyLogic() {
        if (getState() == States.Idle) {
            setState(States.Synchronizing);
            try {
                FileChannel sourceChannel = new FileInputStream(new File(_properties.getProperty(""binPath"") + name + "".class"")).getChannel();
                FileChannel destinationChannel = new FileOutputStream(new File(_properties.getProperty(""agentFileLocation"") + name + "".class"")).getChannel();
                sourceChannel.transferTo(0, sourceChannel.size(), destinationChannel);
                sourceChannel.close();
                destinationChannel.close();
            } catch (FileNotFoundException e) {
                e.printStackTrace();
            } catch (IOException e) {
                e.printStackTrace();
            }
            setState(States.Idle);
        }
    }
",352,"    public static void copy(File url, File to) {
        boolean result;
        if (url.isDirectory()) {
            File[] subFiles = url.listFiles();
            for (int i = 0; i < subFiles.length; i++) {
                File newDir = new File(to, subFiles[i].getName());
                result = false;
                if (subFiles[i].isDirectory()) {
                    if (newDir.exists()) result = true; else result = newDir.mkdirs();
                } else if (subFiles[i].isFile()) {
                    try {
                        result = newDir.createNewFile();
                    } catch (IOException e) {
                        log.error(""unable to create new file: "" + newDir, e);
                        result = false;
                    }
                }
                if (result) copy(subFiles[i], newDir);
            }
        } else if (url.isFile()) {
            FileInputStream in = null;
            FileOutputStream out = null;
            try {
                in = new FileInputStream(url);
                out = new FileOutputStream(to);
                int fileLength = (int) url.length();
                char charBuff[] = new char[fileLength];
                int len;
                int oneChar;
                while ((oneChar = in.read()) != -1) {
                    out.write(oneChar);
                }
            } catch (FileNotFoundException e) {
                log.error(""File not found!"", e);
            } catch (IOException e) {
                log.error(""Unable to read from file!"", e);
            } finally {
                try {
                    if (in != null) in.close();
                    if (out != null) out.close();
                } catch (IOException e1) {
                    log.error(""Error closing file reader/writer"", e1);
                }
            }
        }
    }
",LABEL_1,LABEL_1,LABEL_0,1,"copy,from,to,result,subFiles,i,newDir,in,out,fileLength,charBuff,len,oneChar","copy:0.0017497539520263672,from:-0.0003388524055480957,to:-0.007378518581390381,result:-0.00036531686782836914,subFiles:-0.044805288314819336,i:0.002352118492126465,newDir:-0.04379075765609741,in:-0.0049822330474853516,out:-0.0023870468139648438,fileLength:-0.018348634243011475,charBuff:-0.009273886680603027,len:-0.001734614372253418,oneChar:-0.02682274580001831,",1,7,0,"i:i,copy:copy,from:url,",0,Greedy,213,0.033718514,replace,[]
398,"    public void convert(File src, File dest) throws IOException {
        InputStream in = new BufferedInputStream(new FileInputStream(src));
        DcmParser p = pfact.newDcmParser(in);
        Dataset ds = fact.newDataset();
        p.setDcmHandler(ds.getDcmHandler());
        try {
            FileFormat format = p.detectFileFormat();
            if (format != FileFormat.ACRNEMA_STREAM) {
                System.out.println(""\n"" + src + "": not an ACRNEMA stream!"");
                return;
            }
            p.parseDcmFile(format, Tags.PixelData);
            if (ds.contains(Tags.StudyInstanceUID) || ds.contains(Tags.SeriesInstanceUID) || ds.contains(Tags.SOPInstanceUID) || ds.contains(Tags.SOPClassUID)) {
                System.out.println(""\n"" + src + "": contains UIDs!"" + "" => probable already DICOM - do not convert"");
                return;
            }
            boolean hasPixelData = p.getReadTag() == Tags.PixelData;
            boolean inflate = hasPixelData && ds.getInt(Tags.BitsAllocated, 0) == 12;
            int pxlen = p.getReadLength();
            if (hasPixelData) {
                if (inflate) {
                    ds.putUS(Tags.BitsAllocated, 16);
                    pxlen = pxlen * 4 / 3;
                }
                if (pxlen != (ds.getInt(Tags.BitsAllocated, 0) >>> 3) * ds.getInt(Tags.Rows, 0) * ds.getInt(Tags.Columns, 0) * ds.getInt(Tags.NumberOfFrames, 1) * ds.getInt(Tags.NumberOfSamples, 1)) {
                    System.out.println(""\n"" + src + "": mismatch pixel data length!"" + "" => do not convert"");
                    return;
                }
            }
            ds.putUI(Tags.StudyInstanceUID, uid(studyUID));
            ds.putUI(Tags.SeriesInstanceUID, uid(seriesUID));
            ds.putUI(Tags.SOPInstanceUID, uid(instUID));
            ds.putUI(Tags.SOPClassUID, classUID);
            if (!ds.contains(Tags.NumberOfSamples)) {
                ds.putUS(Tags.NumberOfSamples, 1);
            }
            if (!ds.contains(Tags.PhotometricInterpretation)) {
                ds.putCS(Tags.PhotometricInterpretation, ""MONOCHROME2"");
            }
            if (fmi) {
                ds.setFileMetaInfo(fact.newFileMetaInfo(ds, UIDs.ImplicitVRLittleEndian));
            }
            OutputStream out = new BufferedOutputStream(new FileOutputStream(dest));
            try {
            } finally {
                ds.writeFile(out, encodeParam());
                if (hasPixelData) {
                    if (!skipGroupLen) {
                        out.write(PXDATA_GROUPLEN);
                        int grlen = pxlen + 8;
                        out.write((byte) grlen);
                        out.write((byte) (grlen >> 8));
                        out.write((byte) (grlen >> 16));
                        out.write((byte) (grlen >> 24));
                    }
                    out.write(PXDATA_TAG);
                    out.write((byte) pxlen);
                    out.write((byte) (pxlen >> 8));
                    out.write((byte) (pxlen >> 16));
                    out.write((byte) (pxlen >> 24));
                }
                if (inflate) {
                    int b2, b3;
                    for (; pxlen > 0; pxlen -= 3) {
                        out.write(in.read());
                        b2 = in.read();
                        b3 = in.read();
                        out.write(b2 & 0x0f);
                        out.write(b2 >> 4 | ((b3 & 0x0f) << 4));
                        out.write(b3 >> 4);
                    }
                } else {
                    for (; pxlen > 0; --pxlen) {
                        out.write(in.read());
                    }
                }
                out.close();
            }
            System.out.print('.');
        } finally {
            in.close();
        }
    }
 <SPLIT>     public static void copyFile(File in, File out) throws Exception {
        FileChannel sourceChannel = new FileInputStream(in).getChannel();
        FileChannel destinationChannel = new FileOutputStream(out).getChannel();
        sourceChannel.transferTo(0, sourceChannel.size(), destinationChannel);
        sourceChannel.close();
        destinationChannel.close();
    }
",765,"    public void CONception(File Dest, File class) throws IOException {
        InputStream ibin= new BufferedInputStream(new FileInputStream(Dest));
        DcmParser pop= pfact.newDcmParser(bin);
        Dataset os = fact.newDataset();
        op.setDcmHandler(os.getDcmHandler());
        try {
            FileFormat furl= op.detectFileFormat();
            if (url != FileFormat.ACRNEMA_STREAM) {
                System.outs.println(""
"" + Dest + "": not an ACRNEMA stream!"");
                return;
            }
            op.parseDcmFile(url, Tags.PixelData);
            if (os.contains(Tags.StudyInstanceUID) || os.contains(Tags.SeriesInstanceUID) || os.contains(Tags.SOPInstanceUID) || os.contains(Tags.SOPClassUID)) {
                System.outs.println(""
"" + Dest + "": contains UIDs!"" + "" => probable already DICOM - do not convert"");
                return;
            }
            boolean hshowsByteData= op.getReadTag() == Tags.PixelData;
            boolean iinfloate= showsByteData && os.getInt(Tags.BitsAllocated, 0) == 12;
            int ppxden= op.getReadLength();
            if (showsByteData) {
                if (infloate) {
                    os.putUS(Tags.BitsAllocated, 16);
                    pxden = pxden * 4 / 3;
                }
                if (pxden != (os.getInt(Tags.BitsAllocated, 0) >>> 3) * os.getInt(Tags.Rows, 0) * os.getInt(Tags.Columns, 0) * os.getInt(Tags.NumberOfFrames, 1) * os.getInt(Tags.NumberOfSamples, 1)) {
                    System.outs.println(""
"" + Dest + "": mismatch pixel data length!"" + "" => do not convert"");
                    return;
                }
            }
            os.putUI(Tags.StudyInstanceUID, uid(studyUID));
            os.putUI(Tags.SeriesInstanceUID, uid(seriesUID));
            os.putUI(Tags.SOPInstanceUID, uid(instUID));
            os.putUI(Tags.SOPClassUID, classUID);
            if (!os.contains(Tags.NumberOfSamples)) {
                os.putUS(Tags.NumberOfSamples, 1);
            }
            if (!os.contains(Tags.PhotometricInterpretation)) {
                os.putCS(Tags.PhotometricInterpretation, ""MONOCHROME2"");
            }
            if (fmi) {
                os.setFileMetaInfo(fact.newFileMetaInfo(os, UIDs.ImplicitVRLittleEndian));
            }
            OutputStream oouts= new BufferedOutputStream(new FileOutputStream(class));
            try {
            } finally {
                os.writeFile(outs, encodeParam());
                if (showsByteData) {
                    if (!skipGroupLen) {
                        outs.write(PXDATA_GROUPLEN);
                        int grlen = pxden + 8;
                        outs.write((byte) grlen);
                        outs.write((byte) (grlen >> 8));
                        outs.write((byte) (grlen >> 16));
                        outs.write((byte) (grlen >> 24));
                    }
                    outs.write(PXDATA_TAG);
                    outs.write((byte) pxden);
                    outs.write((byte) (pxden >> 8));
                    outs.write((byte) (pxden >> 16));
                    outs.write((byte) (pxden >> 24));
                }
                if (infloate) {
                    int b2, b3;
                    for (; pxden > 0; pxden -= 3) {
                        ooutswrite(bin.read());
                        b2 = bin.read();
                        b3 = bin.read();
                        outs.write(b2 & 0x0f);
                        outs.write(b2 >> 4 | ((b3 & 0x0f) << 4));
                        outs.write(b3 >> 4);
                    }
                } else {
                    for (; pxden > 0; --pxden) {
                        ooutswrite(bin.read());
                    }
                }
                outs.close();
            }
            System.outs.print('.');
        } finally {
            bin.close();
        }
    }
",LABEL_1,LABEL_1,0.511372149,1,"convert,src,dest,in,p,ds,format,hasPixelData,inflate,pxlen,out",,11,92,0,"convert:CONception,src:Dest,dest:class,in:bin,p:op,ds:os,format:url,hasPixelData:showsByteData,inflate:infloate,pxlen:pxden,out:outs,",0,GA,2398,0.520662713,ga,[]
399,"    public static String getMD5(String source) {
        String s = null;
        char hexDigits[] = { '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f' };
        try {
            java.security.MessageDigest md = java.security.MessageDigest.getInstance(""MD5"");
            md.update(source.getBytes());
            byte tmp[] = md.digest();
            char str[] = new char[16 * 2];
            int k = 0;
            for (int i = 0; i < 16; i++) {
                byte byte0 = tmp[i];
                str[k++] = hexDigits[byte0 >>> 4 & 0xf];
                str[k++] = hexDigits[byte0 & 0xf];
            }
            s = new String(str);
        } catch (Exception e) {
            e.printStackTrace();
        }
        return s;
    }
 <SPLIT>     public void metodo1() {
        int temp;
        boolean flagDesordenado = true;
        while (flagDesordenado) {
            flagDesordenado = false;
            for (int i = 0; i < this.tamanoTabla - 1; i++) {
                if (tabla[i] > tabla[i + 1]) {
                    flagDesordenado = true;
                    temp = tabla[i];
                    tabla[i] = tabla[i + 1];
                    tabla[i + 1] = temp;
                }
            }
        }
    }
",194,"    public static String getMP5(String document) {
        String sym = null;
        char hashDigists[] = { '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f' };
        try {
            java.security.MessageDigest mag = java.security.MessageDigest.getInstance(""MD5"");
            mag.update(document.getBytes());
            byte tmp[] = mag.digest();
            char txt[] = new char[16 * 2];
            int kat = 0;
            for (int di = 0; di < 16; di++) {
                byte word5 = tmp[di];
                txt[kat++] = hashDigists[word5 >>> 4 & 0xf];
                txt[kat++] = hashDigists[word5 & 0xf];
            }
            sym = new String(txt);
        } catch (Exception e) {
            e.printStackTrace();
        }
        return sym;
    }
",LABEL_0,LABEL_0,LABEL_1,1,"getMD5,source,s,hexDigits,md,tmp,str,k,i,byte0","getMD5:-0.009344816207885742,source:-0.0005950331687927246,s:-0.0012711882591247559,hexDigits:-0.015731632709503174,md:-0.00027680397033691406,tmp:0.00155562162399292,str:0.00011301040649414062,k:-0.00043779611587524414,i:-0.0019471049308776855,byte0:-0.00025910139083862305,",9,26,0,"tmp:tmp,str:txt,byte0:word5,md:mag,k:kat,source:document,s:sym,i:di,getMD5:getMP5,hexDigits:hashDigists,",0,Greedy,451,0.066076795,replace,[]
400,"    public DataRecord addRecord(InputStream input) throws DataStoreException {
        File temporary = null;
        try {
            temporary = newTemporaryFile();
            DataIdentifier tempId = new DataIdentifier(temporary.getName());
            usesIdentifier(tempId);
            long length = 0;
            MessageDigest digest = MessageDigest.getInstance(DIGEST);
            OutputStream output = new DigestOutputStream(new FileOutputStream(temporary), digest);
            try {
                length = IOUtils.copyLarge(input, output);
            } finally {
                output.close();
            }
            DataIdentifier identifier = new DataIdentifier(digest.digest());
            File file;
            synchronized (this) {
                usesIdentifier(identifier);
                file = getFile(identifier);
                if (!file.exists()) {
                    File parent = file.getParentFile();
                    parent.mkdirs();
                    if (temporary.renameTo(file)) {
                        temporary = null;
                    } else {
                        throw new IOException(""Can not rename "" + temporary.getAbsolutePath() + "" to "" + file.getAbsolutePath() + "" (media read only?)"");
                    }
                } else {
                    long now = System.currentTimeMillis();
                    if (getLastModified(file) < now + ACCESS_TIME_RESOLUTION) {
                        setLastModified(file, now + ACCESS_TIME_RESOLUTION);
                    }
                }
                if (file.length() != length) {
                    if (!file.isFile()) {
                        throw new IOException(""Not a file: "" + file);
                    }
                    throw new IOException(DIGEST + "" collision: "" + file);
                }
            }
            inUse.remove(tempId);
            return new FileDataRecord(identifier, file);
        } catch (NoSuchAlgorithmException e) {
            throw new DataStoreException(DIGEST + "" not available"", e);
        } catch (IOException e) {
            throw new DataStoreException(""Could not add record"", e);
        } finally {
            if (temporary != null) {
                temporary.delete();
            }
        }
    }
 <SPLIT>     private static void readAndRewrite(File inFile, File outFile) throws IOException {
        ImageInputStream iis = ImageIO.createImageInputStream(new BufferedInputStream(new FileInputStream(inFile)));
        DcmParser dcmParser = DcmParserFactory.getInstance().newDcmParser(iis);
        Dataset ds = DcmObjectFactory.getInstance().newDataset();
        dcmParser.setDcmHandler(ds.getDcmHandler());
        dcmParser.parseDcmFile(null, Tags.PixelData);
        PixelDataReader pdReader = pdFact.newReader(ds, iis, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());
        System.out.println(""reading "" + inFile + ""..."");
        pdReader.readPixelData(false);
        ImageOutputStream out = ImageIO.createImageOutputStream(new BufferedOutputStream(new FileOutputStream(outFile)));
        DcmEncodeParam dcmEncParam = DcmEncodeParam.IVR_LE;
        ds.writeDataset(out, dcmEncParam);
        ds.writeHeader(out, dcmEncParam, Tags.PixelData, dcmParser.getReadVR(), dcmParser.getReadLength());
        System.out.println(""writing "" + outFile + ""..."");
        PixelDataWriter pdWriter = pdFact.newWriter(pdReader.getPixelDataArray(), false, ds, out, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());
        pdWriter.writePixelData();
        out.flush();
        out.close();
        System.out.println(""done!"");
    }
",356,,LABEL_1,LABEL_1,LABEL_1,-1,"addRecord,input,temporary,tempId,length,digest,output,file,parent,now",,4,20,0,,0,GA,4775,0.866849677,failed,"[';php = 0', ';url = 0', ';print(url)', ';open = 0', ';print(open)', ';connection = 0', ';application = 0', ';null = 0']"
401,"    public static String doCrypt(String text) throws NoSuchAlgorithmException, UnsupportedEncodingException {
        MessageDigest md;
        md = MessageDigest.getInstance(""SHA-1"");
        byte[] sha1hash = new byte[40];
        md.update(text.getBytes(""UTF-8""), 0, text.length());
        sha1hash = md.digest();
        return convertToHex(sha1hash);
    }
 <SPLIT>     public static void main(String[] args) throws Exception {
        if (args.length != 2) {
            System.out.println(""Usage:  URLDumper <URL> <file>"");
            System.exit(1);
        }
        String location = args[0];
        String file = args[1];
        URL url = new URL(location);
        FileOutputStream fos = new FileOutputStream(file);
        byte[] bytes = new byte[4096];
        InputStream is = url.openStream();
        int read;
        while ((read = is.read(bytes)) != -1) {
            fos.write(bytes, 0, read);
        }
        is.close();
        fos.close();
    }
",77,,LABEL_0,LABEL_0,LABEL_0,-1,"doCrypt,text,UnsupportedEncodingException,md,sha1hash",,4,11,0,,0,GA,2308,0.326206481,failed,"[';text = 0', ';UnsupportedEncodingException = 0', ';print(UnsupportedEncodingException)', ';DoExt = 0', ';path = 0']"
402,"    public static boolean encodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }
 <SPLIT>     public void run(String[] args) throws Throwable {
        FileInputStream input = new FileInputStream(args[0]);
        FileOutputStream output = new FileOutputStream(args[0] + "".out"");
        Reader reader = $(Reader.class, $declass(input));
        Writer writer = $(Writer.class, $declass(output));
        Pump pump;
        if (args.length > 1 && ""diag"".equals(args[1])) {
            pump = $(new Reader() {

                int counter;

                @ToContext(mode = InvocationMode.sideEffect)
                public int read(byte[] buffer, int off, int len) throws Exception {
                    Integer rd = (Integer) $next();
                    if (rd > 0) {
                        counter += rd;
                    }
                    return 0;
                }

                @ToContext(mode = InvocationMode.sideEffect)
                public void close() throws Exception {
                    System.out.println(""Read from input "" + counter + "" bytes."");
                }
            }, reader, writer, new Writer() {

                int counter;

                @ToContext(mode = InvocationMode.sideEffect)
                public void write(byte[] buffer, int off, int len) throws Exception {
                    counter += len;
                }

                @ToContext(mode = InvocationMode.sideEffect)
                public void close() throws Exception {
                    System.out.println(""Written to output "" + counter + "" bytes."");
                }
            });
        } else {
            pump = $(reader, writer);
        }
        pump.pump();
    }
",194,"    public static boolean encodeString2String(String infile, String outfile) {
        boolean response = false;
        java.io.InputStream in = null;
        java.io.OutputStream net = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);
            net = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] url = new byte[65536];
            int find = -1;
            while ((find = in.find(url)) >= 0) {
                net.write(url, 0, find);
            }
            response = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                net.close();
            } catch (Exception exc) {
            }
        }
        return response;
    }
",LABEL_1,LABEL_1,LABEL_0,1,"encodeFileToFile,infile,outfile,in,out,buffer,read,success","encodeFileToFile:0.0010051131248474121,infile:0.01110982894897461,outfile:0.006501972675323486,in:-0.012176811695098877,out:-0.003839433193206787,buffer:-0.001816093921661377,read:-0.0004526376724243164,success:-0.0036259889602661133,",5,15,0,"infile:infile,outfile:outfile,encodeFileToFile:encodeString2String,read:find,buffer:url,success:response,out:net,",0,Greedy,307,0.048482271,replace,[]
403,"    public void get() {
        try {
            int cnt;
            URL url = new URL(urlStr);
            URLConnection conn = url.openConnection();
            conn.setDoInput(true);
            conn.setDoOutput(false);
            InputStream is = conn.getInputStream();
            String filename = new File(url.getFile()).getName();
            FileOutputStream fos = new FileOutputStream(dstDir + File.separator + filename);
            byte[] buffer = new byte[4096];
            while ((cnt = is.read(buffer, 0, buffer.length)) != -1) fos.write(buffer, 0, cnt);
            fos.close();
            is.close();
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }
 <SPLIT>     public String[][] getProjectTreeData() {
        String[][] treeData = null;
        String filename = dms_home + FS + ""temp"" + FS + username + ""adminprojects.xml"";
        String urlString = dms_url + ""/servlet/com.ufnasoft.dms.server.ServerGetAdminProjects"";
        try {
            String urldata = urlString + ""?username="" + URLEncoder.encode(username, ""UTF-8"") + ""&key="" + URLEncoder.encode(key, ""UTF-8"") + ""&filename="" + URLEncoder.encode(username, ""UTF-8"") + ""adminprojects.xml"";
            DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
            factory.setValidating(false);
            DocumentBuilder parser = factory.newDocumentBuilder();
            URL u = new URL(urldata);
            DataInputStream is = new DataInputStream(u.openStream());
            FileOutputStream os = new FileOutputStream(filename);
            int iBufSize = is.available();
            byte inBuf[] = new byte[20000 * 1024];
            int iNumRead;
            while ((iNumRead = is.read(inBuf, 0, iBufSize)) > 0) os.write(inBuf, 0, iNumRead);
            os.close();
            is.close();
            File f = new File(filename);
            InputStream inputstream = new FileInputStream(f);
            Document document = parser.parse(inputstream);
            NodeList nodelist = document.getElementsByTagName(""proj"");
            int num = nodelist.getLength();
            treeData = new String[num][3];
            for (int i = 0; i < num; i++) {
                treeData[i][0] = new String(DOMUtil.getSimpleElementText((Element) nodelist.item(i), ""pid""));
                treeData[i][1] = new String(DOMUtil.getSimpleElementText((Element) nodelist.item(i), ""ppid""));
                treeData[i][2] = new String(DOMUtil.getSimpleElementText((Element) nodelist.item(i), ""p""));
            }
        } catch (MalformedURLException ex) {
            System.out.println(ex);
        } catch (ParserConfigurationException ex) {
            System.out.println(ex);
        } catch (NullPointerException e) {
        } catch (Exception ex) {
            System.out.println(ex);
        }
        return treeData;
    }
",156,"    public void get() {
        try {
            int cnt;
            URL client = new URL(urlStr);
            URLConnection conn = client.openConnection();
            conn.setDoInput(true);
            conn.setDoOutput(false);
            InputStream is = conn.getInputStream();
            String filename = new File(client.getFile()).getName();
            FileOutputStream fos = new FileOutputStream(dstDir + File.separator + filename);
            byte[] buffer = new byte[4096];
            while ((cnt = is.read(buffer, 0, buffer.length)) != -1) fos.write(buffer, 0, cnt);
            fos.close();
            is.close();
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }
",LABEL_0,LABEL_0,LABEL_1,1,"get,cnt,url,conn,is,filename,fos,buffer","get:0.0007080435752868652,cnt:0.01219630241394043,url:0.0795561671257019,conn:-0.012000441551208496,is:0.007099568843841553,filename:0.002584517002105713,fos:0.01621454954147339,buffer:0.0042923688888549805,",1,3,0,"url:client,",0,Greedy,71,0.011281947,replace,[]
404,"    public static String SHA1(String text) {
        byte[] sha1hash = new byte[40];
        try {
            MessageDigest md = MessageDigest.getInstance(""SHA-1"");
            md.update(text.getBytes(""iso-8859-1""), 0, text.length());
            sha1hash = md.digest();
        } catch (UnsupportedEncodingException ex) {
            Logger.getLogger(Converter.class.getName()).log(Level.SEVERE, null, ex);
        } catch (NoSuchAlgorithmException ex) {
            Logger.getLogger(Converter.class.getName()).log(Level.SEVERE, null, ex);
        }
        return convertToHex(sha1hash);
    }
 <SPLIT>     public static String getUniqueKey() {
        String digest = """";
        try {
            final MessageDigest md = MessageDigest.getInstance(""MD5"");
            final String timeVal = """" + (System.currentTimeMillis() + 1);
            String localHost = """";
            try {
                localHost = InetAddress.getLocalHost().toString();
            } catch (UnknownHostException e) {
                println(""Warn: getUniqueKey(), Error trying to get localhost"" + e.getMessage());
            }
            final String randVal = """" + new Random().nextInt();
            final String val = timeVal + localHost + randVal;
            md.reset();
            md.update(val.getBytes());
            digest = toHexString(md.digest());
        } catch (NoSuchAlgorithmException e) {
            println(""Warn: getUniqueKey() "" + e);
        }
        return digest;
    }
",135,,LABEL_1,LABEL_1,LABEL_1,-1,"SHA1,text,sha1hash,md",,2,6,0,,0,GA,1878,0.281092489,failed,"[';SHA1 = 0', ';print(SHA1)', ';ext = 0', ';shaOnetext = 0', ';print(shaOnetext)', ';sha1cap = 0']"
405,"    public void createJAR(String fileString, String ext) {
        try {
            File file = new File(fileString);
            int i = fileString.lastIndexOf(java.io.File.separator);
            String dir = fileString.substring(0, i + 1);
            if (ext.matches(""jar"")) {
                jarFile = new File(getClass().getClassLoader().getResource(""jsdviewer.jar"").toURI());
                java.io.FileOutputStream fstrm = new java.io.FileOutputStream(file);
                FileChannel in = (new java.io.FileInputStream(jarFile)).getChannel();
                FileChannel out = fstrm.getChannel();
                in.transferTo(0, jarFile.length(), out);
                in.close();
                out.close();
            } else {
                file.mkdir();
            }
            File.umount(file);
            File temp = new File(dir + ""document.jsd"");
            FileOutputStream fstrm2 = new FileOutputStream(temp.getCanonicalPath());
            ostrm = new ObjectOutputStream(fstrm2);
            ostrm.writeObject(doc);
            ostrm.flush();
            ostrm.close();
            File.umount();
            File docFile = new File(file.getCanonicalPath() + java.io.File.separator + ""document.jsd"");
            File.cp_p(temp, docFile);
            File.umount();
            temp.delete();
            File.umount(file);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
 <SPLIT>     public static KeyStore createKeyStore(final URL url, final String password) throws KeyStoreException, NoSuchAlgorithmException, CertificateException, IOException {
        if (url == null) throw new IllegalArgumentException(""Keystore url may not be null"");
        LOG.debug(""Initializing key store"");
        KeyStore keystore = null;
        if (url.getFile().endsWith("".p12"")) keystore = KeyStore.getInstance(""pkcs12""); else keystore = KeyStore.getInstance(KeyStore.getDefaultType());
        keystore.load(url.openStream(), password != null ? password.toCharArray() : null);
        return keystore;
    }
",306,,LABEL_0,LABEL_1,,-4,"createJAR,fileString,ext,file,i,dir,jarFile,fstrm,in,out,temp,fstrm2,ostrm,docFile",,,,0,,0,Greedy,1,0.000458896,,[]
406,"    public void testHttpsConnection_Not_Found_Response() throws Throwable {
        setUpStoreProperties();
        try {
            SSLContext ctx = getContext();
            ServerSocket ss = ctx.getServerSocketFactory().createServerSocket(0);
            TestHostnameVerifier hnv = new TestHostnameVerifier();
            HttpsURLConnection.setDefaultHostnameVerifier(hnv);
            URL url = new URL(""https://localhost:"" + ss.getLocalPort());
            HttpsURLConnection connection = (HttpsURLConnection) url.openConnection();
            try {
                doInteraction(connection, ss, NOT_FOUND_CODE);
                fail(""Expected exception was not thrown."");
            } catch (FileNotFoundException e) {
                if (DO_LOG) {
                    System.out.println(""Expected exception was thrown: "" + e.getMessage());
                }
            }
            connection.connect();
        } finally {
            tearDownStoreProperties();
        }
    }
 <SPLIT>     public boolean clonarFichero(FileInputStream rutaFicheroOrigen, String rutaFicheroDestino) {
        System.out.println("""");
        boolean estado = false;
        try {
            FileOutputStream salida = new FileOutputStream(rutaFicheroDestino);
            FileChannel canalOrigen = rutaFicheroOrigen.getChannel();
            FileChannel canalDestino = salida.getChannel();
            canalOrigen.transferTo(0, canalOrigen.size(), canalDestino);
            rutaFicheroOrigen.close();
            salida.close();
            estado = true;
        } catch (IOException e) {
            System.out.println(""No se encontro el archivo"");
            e.printStackTrace();
            estado = false;
        }
        return estado;
    }
",145,,LABEL_0,LABEL_0,LABEL_0,-1,"testHttpsConnection_Not_Found_Response,ctx,ss,hnv,url,connection",,6,13,0,,0,GA,2705,0.409739395,failed,[';testHttpsConnection_Not_Found_Response = 0']
407,"    protected String issueCommandToServer(String command, ChangeCapsule changeCapsule) throws IOException {
        URLConnection urlConn = serverURL.openConnection();
        urlConn.setDoInput(true);
        urlConn.setDoOutput(true);
        urlConn.setRequestProperty(""Content-Type"", ""application/x-www-form-urlencoded"");
        OutputStreamWriter wr = new OutputStreamWriter(urlConn.getOutputStream());
        String content = ApplyChangesServlet.PARAMETER_COMMAND + ""="" + command;
        content += ""&"" + ApplyChangesServlet.PARAMETER_CAPSULE + ""="" + URLEncoder.encode(changeCapsule.toJSON(), ""UTF-8"");
        wr.write(content);
        wr.flush();
        BufferedReader input = new BufferedReader(new InputStreamReader(urlConn.getInputStream()));
        StringBuffer response = new StringBuffer();
        String str;
        while (null != ((str = input.readLine()))) {
            response.append(str);
        }
        wr.close();
        input.close();
        return response.toString();
    }
 <SPLIT>     public byte[] getResponse() {
        final ByteArrayInputStream bais = new ByteArrayInputStream(request);
        final ByteArrayOutputStream baos = new ByteArrayOutputStream();
        List<String> lines = Collections.emptyList();
        try {
            @SuppressWarnings(""unchecked"") List<String> dl = IOUtils.readLines(bais);
            lines = dl;
        } catch (IOException ioex) {
            throw new AssertionError(ioex);
        }
        String resource = null;
        for (String line : lines) {
            if (line.startsWith(""GET "")) {
                int endIndex = line.lastIndexOf(' ');
                resource = line.substring(4, endIndex);
            }
        }
        final PrintStream printStream = new PrintStream(baos);
        if (resource == null) {
            printStream.println(""HTTP/1.1 400 Bad Request"");
        } else {
            final InputStream inputStream = getClass().getResourceAsStream(resource);
            if (inputStream == null) {
                printStream.println(""HTTP/1.1 404 Not Found"");
                printStream.println();
            } else {
                printStream.println(""HTTP/1.1 200 OK"");
                printStream.println();
                try {
                    IOUtils.copy(inputStream, printStream);
                } catch (IOException ioex) {
                    throw new AssertionError(ioex);
                }
            }
        }
        printStream.flush();
        printStream.close();
        return baos.toByteArray();
    }
",191,"    protected String  sendRequestFromService(String execute, ChangeCapsule changeScapsure) throws IOException {
        URLConnection httpOpen = serverURL.openConnection();
        httpOpen.setDoInput(true);
        httpOpen.setDoOutput(true);
        httpOpen.setRequestProperty(""Content-Type"", ""application/x-www-form-urlencoded"");
        OutputStreamWriter writer = new OutputStreamWriter(httpOpen.getOutputStream());
        String header = ApplyChangesServlet.PARAMETER_COMMAND + ""="" + execute;
        header += ""&"" + ApplyChangesServlet.PARAMETER_CAPSULE + ""="" + URLEncoder.encode(changeScapsure.toJSON(), ""UTF-8"");
        writer.write(header);
        writer.flush();
        BufferedReader usr = new BufferedReader(new InputStreamReader(httpOpen.getInputStream()));
        StringBuffer resource = new StringBuffer();
        String line;
        while (null != ((line = usr.readLine()))) {
            resource.append(line);
        }
        writer.close();
        usr.close();
        return resource.toString();
    }
",LABEL_0,LABEL_0,LABEL_1,1,"issueCommandToServer,command,changeCapsule,urlConn,wr,content,input,response,str","issueCommandToServer:0.021591365337371826,command:0.033511221408843994,changeCapsule:0.040638089179992676,urlConn:-0.1002165675163269,wr:-0.0010300278663635254,content:-0.0016514062881469727,input:0.03128331899642944,response:0.00018066167831420898,str:0.022122442722320557,",9,27,0,"changeCapsule:changeScapsure,command:execute,input:usr,str:line,issueCommandToServer: sendRequestFromService,response:resource,wr:writer,content:header,urlConn:httpOpen,",0,Greedy,418,0.067426419,replace,[]
408,"    public static String getSHADigest(String password) {
        String digest = null;
        MessageDigest sha = null;
        try {
            sha = MessageDigest.getInstance(""SHA-1"");
            sha.reset();
            sha.update(password.getBytes());
            byte[] pwhash = sha.digest();
            digest = ""{SHA}"" + new String(Base64.encode(pwhash));
        } catch (NoSuchAlgorithmException nsae) {
            CofaxToolsUtil.log(""Algorithme SHA-1 non supporte a la creation du hashage"" + nsae + id);
        }
        return digest;
    }
 <SPLIT>     public String generateToken(String code) {
        try {
            MessageDigest md = MessageDigest.getInstance(""SHA1"");
            md.update(code.getBytes());
            byte[] bytes = md.digest();
            return toHex(bytes);
        } catch (NoSuchAlgorithmException e) {
            throw new RuntimeException(""SHA1 missing"");
        }
    }
",103,,LABEL_1,LABEL_1,LABEL_1,-1,"getSHADigest,password,digest,sha,pwhash",,5,14,0,,0,GA,2332,0.329855661,failed,"[';getSHADigest = 0', ';password = 0', ';pwhash = 0', ';hash = 0']"
409,"    @Digester(forField = ""password"")
    public static String encriptPassword(String passwd) {
        try {
            MessageDigest md = MessageDigest.getInstance(""MD5"");
            md.update(passwd.getBytes());
            BigInteger hash = new BigInteger(1, md.digest());
            return hash.toString(16);
        } catch (Exception e) {
            return null;
        }
    }
 <SPLIT>     private void compress(String outputFile, ArrayList<String> inputFiles, PrintWriter log, boolean compress) throws Exception {
        String absPath = getAppConfig().getPathConfig().getAbsoluteServerPath();
        log.println(""Concat files into: "" + outputFile);
        OutputStream out = new FileOutputStream(absPath + outputFile);
        byte[] buffer = new byte[4096];
        int readBytes;
        for (String file : inputFiles) {
            log.println("" Read: "" + file);
            InputStream in = new FileInputStream(absPath + file);
            while ((readBytes = in.read(buffer)) != -1) {
                out.write(buffer, 0, readBytes);
            }
            in.close();
        }
        out.close();
        if (compress) {
            long normalSize = new File(absPath + outputFile).length();
            ProcessBuilder builder = new ProcessBuilder(""java"", ""-jar"", ""WEB-INF/yuicompressor.jar"", outputFile, ""-o"", outputFile, ""--line-break"", ""4000"");
            builder.directory(new File(absPath));
            Process process = builder.start();
            process.waitFor();
            long minSize = new File(absPath + outputFile).length();
            long diff = normalSize - minSize;
            double percentage = Math.floor((double) diff / normalSize * 1000.0) / 10.0;
            double diffSize = (Math.floor(diff / 1024.0 * 10.0) / 10.0);
            log.println(""Result: "" + percentage + "" % ("" + diffSize + "" KB)"");
        }
    }
",79,,LABEL_0,LABEL_0,LABEL_0,-1,"encriptPassword,passwd,md,hash",,4,8,0,,0,GA,1798,0.274231887,failed,"[';encriptPassword = 0', ';passwd = 0', ';print(copy)']"
410,"    private static void readAndRewrite(File inFile, File outFile) throws IOException {
        ImageInputStream iis = ImageIO.createImageInputStream(new BufferedInputStream(new FileInputStream(inFile)));
        DcmParser dcmParser = DcmParserFactory.getInstance().newDcmParser(iis);
        Dataset ds = DcmObjectFactory.getInstance().newDataset();
        dcmParser.setDcmHandler(ds.getDcmHandler());
        dcmParser.parseDcmFile(null, Tags.PixelData);
        PixelDataReader pdReader = pdFact.newReader(ds, iis, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());
        System.out.println(""reading "" + inFile + ""..."");
        pdReader.readPixelData(false);
        ImageOutputStream out = ImageIO.createImageOutputStream(new BufferedOutputStream(new FileOutputStream(outFile)));
        DcmEncodeParam dcmEncParam = DcmEncodeParam.IVR_LE;
        ds.writeDataset(out, dcmEncParam);
        ds.writeHeader(out, dcmEncParam, Tags.PixelData, dcmParser.getReadVR(), dcmParser.getReadLength());
        System.out.println(""writing "" + outFile + ""..."");
        PixelDataWriter pdWriter = pdFact.newWriter(pdReader.getPixelDataArray(), false, ds, out, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());
        pdWriter.writePixelData();
        out.flush();
        out.close();
        System.out.println(""done!"");
    }
 <SPLIT>     private static void readAndRewrite(File inFile, File outFile) throws IOException {
        ImageInputStream iis = ImageIO.createImageInputStream(new BufferedInputStream(new FileInputStream(inFile)));
        DcmParser dcmParser = DcmParserFactory.getInstance().newDcmParser(iis);
        Dataset ds = DcmObjectFactory.getInstance().newDataset();
        dcmParser.setDcmHandler(ds.getDcmHandler());
        dcmParser.parseDcmFile(null, Tags.PixelData);
        PixelDataReader pdReader = pdFact.newReader(ds, iis, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());
        System.out.println(""reading "" + inFile + ""..."");
        pdReader.readPixelData(false);
        ImageOutputStream out = ImageIO.createImageOutputStream(new BufferedOutputStream(new FileOutputStream(outFile)));
        DcmEncodeParam dcmEncParam = DcmEncodeParam.IVR_LE;
        ds.writeDataset(out, dcmEncParam);
        ds.writeHeader(out, dcmEncParam, Tags.PixelData, dcmParser.getReadVR(), dcmParser.getReadLength());
        System.out.println(""writing "" + outFile + ""..."");
        PixelDataWriter pdWriter = pdFact.newWriter(pdReader.getPixelDataArray(), false, ds, out, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());
        pdWriter.writePixelData();
        out.flush();
        out.close();
        System.out.println(""done!"");
    }
",272,"    private static void readAndRebrite(File loginfile, File OutDir) throws IOException {
        ImageInputStream iis = ImageIO.createImageInputStream(new BufferedInputStream(new FileInputStream(loginfile)));
        DcmParser dmmLoader = DcmParserFactory.getInstance().newDcmParser(iis);
        Dataset ds = DcmObjectFactory.getInstance().newDataset();
        dmmLoader.setDcmHandler(ds.getDcmHandler());
        dmmLoader.parseDcmFile(null, Tags.PixelData);
        PixelDataReader pbStream = pdFact.newReader(ds, iis, dmmLoader.getDcmDecodeParam().byteOrder, dmmLoader.getReadVR());
        System.url.println(""reading "" + loginfile + ""..."");
        pbStream.readPixelData(false);
        ImageOutputStream url = ImageIO.createImageOutputStream(new BufferedOutputStream(new FileOutputStream(OutDir)));
        DcmEncodeParam dcmEncParam = DcmEncodeParam.IVR_LE;
        ds.writeDataset(url, dcmEncParam);
        ds.writeHeader(url, dcmEncParam, Tags.PixelData, dmmLoader.getReadVR(), dmmLoader.getReadLength());
        System.url.println(""writing "" + OutDir + ""..."");
        PixelDataWriter dpReader = pdFact.newWriter(pbStream.getPixelDataArray(), false, ds, url, dmmLoader.getDcmDecodeParam().byteOrder, dmmLoader.getReadVR());
        dpReader.writePixelData();
        url.flush();
        url.close();
        System.url.println(""done!"");
    }
",LABEL_1,LABEL_1,LABEL_0,1,"readAndRewrite,inFile,outFile,iis,dcmParser,ds,pdReader,out,dcmEncParam,pdWriter","readAndRewrite:-0.03307783603668213,inFile:-0.044498324394226074,outFile:-0.04789072275161743,iis:-0.05820268392562866,dcmParser:-0.014222145080566406,ds:-0.11757397651672363,pdReader:-0.005121588706970215,out:-0.0022025704383850098,dcmEncParam:-0.13450032472610474,pdWriter:0.00041115283966064453,",7,30,0,"pdWriter:dpReader,out:url,pdReader:pbStream,dcmParser:dmmLoader,readAndRewrite:readAndRebrite,inFile:loginfile,outFile:OutDir,",0,Greedy,394,0.064077675,replace,[]
411,"    public static boolean decodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }
 <SPLIT>                     public void handle() {
                        FileChannel srcChannel, destChannel;
                        String destOutFile = logFile + ""."" + System.currentTimeMillis();
                        String destOutFileCompressed = logFile + ""."" + System.currentTimeMillis() + "".gz"";
                        if (rotateDest != null) {
                            (new File(rotateDest)).mkdirs();
                            if (destOutFile.indexOf(""/"") != -1) {
                                destOutFile = rotateDest + ""/"" + destOutFile.substring(destOutFile.lastIndexOf(""/"") + 1);
                            }
                            if (destOutFileCompressed.indexOf(""/"") != -1) {
                                destOutFileCompressed = rotateDest + ""/"" + destOutFileCompressed.substring(destOutFileCompressed.lastIndexOf(""/"") + 1);
                            }
                        }
                        if (rotateCompress) {
                            try {
                                GZIPOutputStream out = new GZIPOutputStream(new FileOutputStream(destOutFileCompressed));
                                FileInputStream in = new FileInputStream(logFile);
                                byte buf[] = new byte[1024];
                                int len;
                                while ((len = in.read(buf)) > 0) {
                                    out.write(buf, 0, len);
                                }
                                in.close();
                                out.finish();
                                out.close();
                                buf = null;
                                in = null;
                                out = null;
                                Debug.debug(""Rotated log file '"" + logFile + ""' to '"" + destOutFileCompressed + ""'"");
                            } catch (Exception e) {
                                Debug.debug(""Unable to rotate log file '"" + logFile + ""': "" + e);
                            }
                        } else {
                            try {
                                srcChannel = new FileInputStream(logFile).getChannel();
                            } catch (IOException e) {
                                Debug.debug(""Unable to read log file '"" + logFile + ""': "" + e.getMessage());
                                return;
                            }
                            try {
                                destChannel = new FileOutputStream(destOutFile).getChannel();
                            } catch (IOException e) {
                                Debug.debug(""Unable to rotate log file to '"" + destOutFile + ""': "" + e.getMessage());
                                return;
                            }
                            try {
                                destChannel.transferFrom(srcChannel, 0, srcChannel.size());
                                srcChannel.close();
                                destChannel.close();
                                srcChannel = null;
                                destChannel = null;
                            } catch (IOException e) {
                                Debug.debug(""Unable to copy data for file rotation: "" + e.getMessage());
                                return;
                            }
                            Debug.debug(""Rotated log file '"" + logFile + ""' to '"" + destOutFile + ""'"");
                        }
                        if (rotateDelete && isFile) {
                            try {
                                ps.close();
                            } catch (Exception e) {
                            }
                            isFile = false;
                            ps = null;
                            (new File(logFile)).delete();
                            reconfigureDebug();
                        }
                        if (rotateDest != null) {
                            long comparisonTime = rotateDays * (60 * 60 * 24 * 1000);
                            long currentTime = System.currentTimeMillis();
                            File fileList[] = (new File(rotateDest)).listFiles();
                            DateFormat format1 = new SimpleDateFormat(""yyyy-MM-dd"");
                            java.util.Date date = new java.util.Date(currentTime);
                            String archiveFile = format1.format(date).toString() + "".zip"";
                            if (rotateArchive != null) {
                                archiveFile = rotateArchive + ""/"" + archiveFile;
                                (new File(rotateArchive)).mkdirs();
                            }
                            Archive archive = new Archive(archiveFile);
                            for (int i = 0; i < fileList.length; i++) {
                                String currentFilename = fileList[i].getName();
                                long timeDifference = (currentTime - fileList[i].lastModified());
                                if ((rotateCompress && currentFilename.endsWith("".gz"")) || (!rotateCompress && currentFilename.indexOf(logFile + ""."") != -1)) {
                                    if (rotateDest != null) {
                                        currentFilename = rotateDest + ""/"" + currentFilename;
                                    }
                                    if (timeDifference > comparisonTime) {
                                        archive.addFile(fileList[i].getName(), currentFilename);
                                        fileList[i].delete();
                                    }
                                }
                            }
                            archive = null;
                            fileList = null;
                            format1 = null;
                            date = null;
                        }
                    }
",194,"    public static boolean decodeString2Stream(String outfilename, String  outdatabase) {
        boolean error = false;
        java.io.InputStream con = null;
        java.io.OutputStream conn = null;
        try {
            con = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(outfilename)), Base64.DECODE);
            conn = new java.io.BufferedOutputStream(new java.io.FileOutputStream( outdatabase));
            byte[] url = new byte[65536];
            int load = -1;
            while ((load = con.load(url)) >= 0) {
                conn.write(url, 0, load);
            }
            error = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                con.close();
            } catch (Exception exc) {
            }
            try {
                conn.close();
            } catch (Exception exc) {
            }
        }
        return error;
    }
;print(buffer);open = 0",LABEL_1,LABEL_1,LABEL_1,1,"decodeFileToFile,infile,outfile,in,out,buffer,read,success","decodeFileToFile:-0.016613662242889404,infile:-0.0006636977195739746,outfile:-0.0003974437713623047,in:-0.006833255290985107,out:-0.0023461580276489258,buffer:-0.0039667487144470215,read:-0.0017274022102355957,success:0.00517195463180542,",8,23,0,"success:error,outfile: outdatabase,infile:outfilename,read:load,out:conn,buffer:url,in:con,decodeFileToFile:decodeString2Stream,",0,Greedy,1035,0.229025062,inesrt,"[';print(buffer)', ';open = 0']"
412,"    public static String getFileContentFromPlugin(String path) {
        URL url = getURLFromPlugin(path);
        StringBuffer sb = new StringBuffer();
        try {
            Scanner scanner = new Scanner(url.openStream());
            while (scanner.hasNextLine()) {
                String line = scanner.nextLine();
                sb.append(line + ""\n"");
            }
            scanner.close();
        } catch (Exception e) {
            e.printStackTrace();
            return """";
        }
        return sb.toString();
    }
 <SPLIT>     @Override
    public void run() {
        try {
            URL urlhome = new URL(""http://www.verussolutions.biz/NGLDashBoard.xml"");
            URLConnection uc = urlhome.openConnection();
            InputStreamReader input = new InputStreamReader(uc.getInputStream());
            BufferedReader in = new BufferedReader(input);
            String inputLine;
            String xmlData = """";
            while ((inputLine = in.readLine()) != null) {
                xmlData += inputLine;
            }
            in.close();
            PrintWriter fw = new PrintWriter(new FileWriter(System.getProperty(""user.home"") + ""/NGLDashBoard.xml""));
            fw.println(xmlData);
            fw.flush();
            fw.close();
        } catch (Exception exp) {
            exp.printStackTrace();
        }
        try {
            Document doc = new SAXBuilder().build(new File(System.getProperty(""user.home"") + ""/NGLDashBoard.xml""));
            String onlinsuppcdat = doc.getRootElement().getChild(""OnlineSupportInformation"").getText();
            CDATA cdata = new CDATA(onlinsuppcdat);
            host.setOnlineInformationHTML(cdata.getText());
            onlinsuppcdat = doc.getRootElement().getChild(""News"").getText();
            cdata = new CDATA(onlinsuppcdat);
            host.setNewsHTML(cdata.getText());
            host.fillData();
        } catch (Exception exp) {
            exp.printStackTrace();
        }
    }
",103,,LABEL_0,LABEL_0,LABEL_0,-1,"getFileContentFromPlugin,path,url,sb,scanner,line",,4,11,0,,0,GA,2780,0.425749882,failed,[]
413,"    private static void readAndRewrite(File inFile, File outFile) throws IOException {
        ImageInputStream iis = ImageIO.createImageInputStream(new BufferedInputStream(new FileInputStream(inFile)));
        DcmParser dcmParser = DcmParserFactory.getInstance().newDcmParser(iis);
        Dataset ds = DcmObjectFactory.getInstance().newDataset();
        dcmParser.setDcmHandler(ds.getDcmHandler());
        dcmParser.parseDcmFile(null, Tags.PixelData);
        PixelDataReader pdReader = pdFact.newReader(ds, iis, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());
        System.out.println(""reading "" + inFile + ""..."");
        pdReader.readPixelData(false);
        ImageOutputStream out = ImageIO.createImageOutputStream(new BufferedOutputStream(new FileOutputStream(outFile)));
        DcmEncodeParam dcmEncParam = DcmEncodeParam.IVR_LE;
        ds.writeDataset(out, dcmEncParam);
        ds.writeHeader(out, dcmEncParam, Tags.PixelData, dcmParser.getReadVR(), dcmParser.getReadLength());
        System.out.println(""writing "" + outFile + ""..."");
        PixelDataWriter pdWriter = pdFact.newWriter(pdReader.getPixelDataArray(), false, ds, out, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());
        pdWriter.writePixelData();
        out.flush();
        out.close();
        System.out.println(""done!"");
    }
 <SPLIT>     public void buildSiteForEdit(String sBasePath, String sOutputPath, String sCtrlPath, String sMenuPath, String sIntegradorPath, String sSelPageOptions, Properties oEnvironmentProps, Properties oUserProps) throws IOException, DOMException, TransformerException, TransformerConfigurationException, MalformedURLException {
        Transformer oTransformer;
        StreamResult oStreamResult;
        StreamSource oStreamSrcXML;
        StringWriter oStrWritter;
        InputStream oXMLStream = null;
        String sTransformed;
        StringBuffer oPostTransform;
        String sKey;
        String sMedia;
        Object sVal;
        Page oCurrentPage;
        int iCloseHead, iOpenBody, iCloseBody;
        int iReaded;
        char CharBuffer[] = new char[8192];
        String sCharBuffer;
        long lElapsed = 0;
        final String sSep = System.getProperty(""file.separator"");
        if (DebugFile.trace) {
            lElapsed = System.currentTimeMillis();
            DebugFile.writeln(""Begin Pageset.buildSiteForEdit("" + sBasePath + "","" + sOutputPath + "","" + sCtrlPath + "","" + sMenuPath + "")"");
            DebugFile.incIdent();
        }
        FileSystem oFS = new FileSystem();
        Vector vPages = pages();
        if (!sBasePath.endsWith(sSep)) sBasePath += sSep;
        String sWebServer = oEnvironmentProps.getProperty(""webserver"", """");
        if (DebugFile.trace && sWebServer.length() == 0) DebugFile.writeln(""WARNING: webserver property not set at EnvironmentProperties"");
        if (!sWebServer.endsWith(""/"")) sWebServer += ""/"";
        Node oContainers = oMSite.seekChildByName(oMSite.getRootNode().getFirstChild(), ""containers"");
        if (oContainers == null) {
            if (DebugFile.trace) DebugFile.writeln(""ERROR: <containers> node not found."");
            throw new DOMException(DOMException.NOT_FOUND_ERR, ""<containers> node not found"");
        }
        if (DebugFile.trace) DebugFile.writeln(""new FileInputStream("" + (sURI.startsWith(""file://"") ? sURI.substring(7) : sURI) + "")"");
        for (int c = 0; c < vPages.size(); c++) {
            oCurrentPage = (Page) vPages.get(c);
            oXMLStream = new FileInputStream(sURI.startsWith(""file://"") ? sURI.substring(7) : sURI);
            oStreamSrcXML = new StreamSource(oXMLStream);
            oStrWritter = new StringWriter();
            oStreamResult = new StreamResult(oStrWritter);
            try {
                oTransformer = StylesheetCache.newTransformer(sBasePath + ""xslt"" + sSep + ""templates"" + sSep + oMSite.name() + sSep + oCurrentPage.template());
                sMedia = oTransformer.getOutputProperty(OutputKeys.MEDIA_TYPE);
                if (DebugFile.trace) DebugFile.writeln(OutputKeys.MEDIA_TYPE + ""="" + sMedia);
                if (null == sMedia) sMedia = ""html""; else sMedia = sMedia.substring(sMedia.indexOf('/') + 1);
                if (null == oCurrentPage.getTitle()) throw new NullPointerException(""Page "" + String.valueOf(c) + "" title is null"");
                if (DebugFile.trace) DebugFile.writeln(""Page.filePath("" + sOutputPath + oCurrentPage.getTitle().replace(' ', '_') + ""."" + sMedia + "")"");
                oCurrentPage.filePath(sOutputPath + oCurrentPage.getTitle().replace(' ', '_') + ""."" + sMedia);
                StylesheetCache.setParameters(oTransformer, oEnvironmentProps);
                StylesheetCache.setParameters(oTransformer, oUserProps);
                oTransformer.setParameter(""param_page"", ((Page) (vPages.get(c))).getTitle());
                oTransformer.transform(oStreamSrcXML, oStreamResult);
            } catch (TransformerConfigurationException e) {
                oLastXcpt = e;
                sMedia = null;
                SourceLocator sl = e.getLocator();
                if (DebugFile.trace) {
                    if (sl == null) {
                        DebugFile.writeln(""ERROR TransformerConfigurationException "" + e.getMessage());
                    } else {
                        DebugFile.writeln(""ERROR TransformerConfigurationException "" + e.getMessage() + "" line="" + String.valueOf(sl.getLineNumber()) + "" column="" + String.valueOf(sl.getColumnNumber()));
                    }
                }
            } catch (TransformerException e) {
                oLastXcpt = e;
                sMedia = null;
                if (DebugFile.trace) DebugFile.writeln(""ERROR TransformerException "" + e.getMessageAndLocation());
            }
            oTransformer = null;
            oStreamResult = null;
            sTransformed = oStrWritter.toString();
            if (DebugFile.trace) DebugFile.writeln(""transformation length="" + String.valueOf(sTransformed.length()));
            if (sTransformed.length() > 0) {
                iCloseHead = sTransformed.indexOf(""</head"");
                if (iCloseHead < 0) iCloseHead = sTransformed.indexOf(""</HEAD"");
                iOpenBody = sTransformed.indexOf(""<body"", iCloseHead);
                if (iOpenBody < 0) iOpenBody = sTransformed.indexOf(""<BODY"", iCloseHead);
                iCloseBody = sTransformed.indexOf("">"", iOpenBody + 5);
                for (char s = sTransformed.charAt(iCloseBody + 1); s == '\r' || s == '\n' || s == ' ' || s == '\t'; s = sTransformed.charAt(++iCloseBody)) ;
                oPostTransform = new StringBuffer(sTransformed.length() + 4096);
                oPostTransform.append(sTransformed.substring(0, iCloseHead));
                oPostTransform.append(""\n<script language=\""JavaScript\"" src=\"""" + sMenuPath + ""\""></script>"");
                oPostTransform.append(""\n<script language=\""JavaScript\"" src=\"""" + sIntegradorPath + ""\""></script>\n"");
                oPostTransform.append(sTransformed.substring(iCloseHead, iCloseHead + 7));
                oPostTransform.append(sTransformed.substring(iOpenBody, iCloseBody));
                try {
                    sCharBuffer = oFS.readfilestr(sCtrlPath, ""UTF-8"");
                    if (DebugFile.trace) DebugFile.writeln(String.valueOf(sCharBuffer.length()) + "" characters readed"");
                } catch (com.enterprisedt.net.ftp.FTPException ftpe) {
                    throw new IOException(ftpe.getMessage());
                }
                try {
                    if (DebugFile.trace) DebugFile.writeln(""Gadgets.replace("" + sCtrlPath + "",http://demo.hipergate.com/,"" + sWebServer + "")"");
                    Gadgets.replace(sCharBuffer, ""http://demo.hipergate.com/"", sWebServer);
                } catch (org.apache.oro.text.regex.MalformedPatternException e) {
                }
                oPostTransform.append(""<!--Begin "" + sCtrlPath + ""-->\n"");
                oPostTransform.append(sCharBuffer);
                sCharBuffer = null;
                oPostTransform.append(""\n<!--End "" + sCtrlPath + ""-->\n"");
                oPostTransform.append(sTransformed.substring(iCloseBody));
            } else {
                oPostTransform = new StringBuffer(""Page "" + ((Page) vPages.get(c)).getTitle() + "" could not be rendered."");
                if (oLastXcpt != null) oPostTransform.append(""<BR>"" + oLastXcpt.getMessageAndLocation());
            }
            if (DebugFile.trace) DebugFile.writeln(""new FileWriter("" + sOutputPath + oCurrentPage.getTitle().replace(' ', '_') + ""_."" + sMedia + "")"");
            if (sSelPageOptions.length() == 0) oFS.writefilestr(sOutputPath + oCurrentPage.getTitle().replace(' ', '_') + ""_."" + sMedia, oPostTransform.toString(), ""UTF-8""); else try {
                oFS.writefilestr(sOutputPath + oCurrentPage.getTitle().replace(' ', '_') + ""_."" + sMedia, Gadgets.replace(oPostTransform.toString(), "":selPageOptions"", sSelPageOptions), ""UTF-8"");
            } catch (Exception e) {
            }
            oPostTransform = null;
            sTransformed = null;
        }
        oXMLStream.close();
        if (DebugFile.trace) {
            DebugFile.writeln(""done in "" + String.valueOf(System.currentTimeMillis() - lElapsed) + "" miliseconds"");
            DebugFile.decIdent();
            DebugFile.writeln(""End Pageset.buildSiteForEdit()"");
        }
    }
",272,"    private static void readAndRewrite(File inFile, File outFile) throws IOException {
        ImageInputStream iris = ImageIO.createImageInputStream(new BufferedInputStream(new FileInputStream(inFile)));
        DcmParser dcmParser = DcmParserFactory.getInstance().newDcmParser(iris);
        Dataset Ds = DcmObjectFactory.getInstance().newDataset();
        dcmParser.setDcmHandler(Ds.getDcmHandler());
        dcmParser.parseDcmFile(null, Tags.PixelData);
        PixelDataReader pdReader = pdFact.newReader(Ds, iris, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());
        System.out.println(""reading "" + inFile + ""..."");
        pdReader.readPixelData(false);
        ImageOutputStream out = ImageIO.createImageOutputStream(new BufferedOutputStream(new FileOutputStream(outFile)));
        DcmEncodeParam dcmArchParam = DcmEncodeParam.IVR_LE;
        Ds.writeDataset(out, dcmArchParam);
        Ds.writeHeader(out, dcmArchParam, Tags.PixelData, dcmParser.getReadVR(), dcmParser.getReadLength());
        System.out.println(""writing "" + outFile + ""..."");
        PixelDataWriter pdWriter = pdFact.newWriter(pdReader.getPixelDataArray(), false, Ds, out, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());
        pdWriter.writePixelData();
        out.flush();
        out.close();
        System.out.println(""done!"");
    }
;iis = 0;ds = 0;pdReader = 0;dcmEncParam = 0;pdWriter = 0;loginFilename = 0;conn = 0;js = 0;print(js);qs = 0;print(DS);session = 0;ssl = 0",LABEL_1,LABEL_1,LABEL_1,1,"readAndRewrite,inFile,outFile,iis,dcmParser,ds,pdReader,out,dcmEncParam,pdWriter","readAndRewrite:-0.03307783603668213,inFile:-0.044498324394226074,outFile:-0.04789072275161743,iis:-0.05820268392562866,dcmParser:-0.014222145080566406,ds:-0.11757397651672363,pdReader:-0.005121588706970215,out:-0.0022025704383850098,dcmEncParam:-0.13450032472610474,pdWriter:0.00041115283966064453,",3,12,0,"pdWriter:pdWriter,out:out,pdReader:pdReader,dcmParser:dcmParser,readAndRewrite:readAndRewrite,inFile:inFile,outFile:outFile,iis:iris,ds:Ds,dcmEncParam:dcmArchParam,",0,Greedy,1221,0.356576777,inesrt,"[';iis = 0', ';ds = 0', ';pdReader = 0', ';dcmEncParam = 0', ';pdWriter = 0', ';loginFilename = 0', ';conn = 0', ';js = 0', ';print(js)', ';qs = 0', ';print(DS)', ';session = 0', ';ssl = 0']"
414,"    public static void copyFile(File src, File dest, int bufSize, boolean force) throws IOException {
        if (dest.exists()) if (force) dest.delete(); else throw new IOException(""Cannot overwrite existing file: "" + dest.getName());
        byte[] buffer = new byte[bufSize];
        int read = 0;
        InputStream in = null;
        OutputStream out = null;
        try {
            in = new FileInputStream(src);
            out = new FileOutputStream(dest);
            while (true) {
                read = in.read(buffer);
                if (read == -1) break;
                out.write(buffer, 0, read);
            }
        } finally {
            if (in != null) try {
                in.close();
            } finally {
                if (out != null) out.close();
            }
        }
    }
 <SPLIT>     private static void copy(String sourceName, String destName) throws IOException {
        File source = new File(sourceName);
        File dest = new File(destName);
        FileChannel in = null, out = null;
        try {
            in = new FileInputStream(source).getChannel();
            out = new FileOutputStream(dest).getChannel();
            long size = in.size();
            MappedByteBuffer buf = in.map(FileChannel.MapMode.READ_ONLY, 0, size);
            out.write(buf);
        } finally {
            if (in != null) in.close();
            if (out != null) out.close();
        }
    }
",169,"    public static void copyFile(File url, File dest, int bufSize, boolean remote) throws IOException {
        if (dest.exists()) if (remote) dest.delete(); else throw new IOException(""Cannot overwrite existing file: "" + dest.getName());
        byte[] url = new byte[bufSize];
        int read = 0;
        InputStream serv = null;
        OutputStream out = null;
        try {
            serv = new FileInputStream(url);
            out = new FileOutputStream(dest);
            while (true) {
                read = serv.read(url);
                if (read == -1) break;
                out.write(url, 0, read);
            }
        } finally {
            if (serv != null) try {
                serv.close();
            } finally {
                if (out != null) out.close();
            }
        }
    }
",LABEL_1,LABEL_1,LABEL_0,1,"copyFile,src,dest,bufSize,force,buffer,read,in,out","copyFile:0.022305846214294434,src:0.010692775249481201,dest:-0.014953553676605225,bufSize:0.0182303786277771,force:0.007426917552947998,buffer:0.0004088878631591797,read:-0.009421885013580322,in:-0.007598221302032471,out:-0.02237778902053833,",4,12,0,"copyFile:copyFile,bufSize:bufSize,src:url,force:remote,buffer:url,in:serv,",0,Greedy,234,0.034224037,replace,[]
415,"    public static void copyFile(File in, File out) throws IOException {
        FileChannel sourceChannel = new FileInputStream(in).getChannel();
        FileChannel destinationChannel = new FileOutputStream(out).getChannel();
        sourceChannel.transferTo(0, sourceChannel.size(), destinationChannel);
        sourceChannel.close();
        destinationChannel.close();
    }
 <SPLIT>     public static void main(String[] args) throws Exception {
        String st = ""http://www.kmzlinks.com/redirect.asp?id=113&file=HeartShapedIsland.kmz"";
        URL url = new URL(st);
        InputStream fis = null;
        if (""file"".equals(url.getProtocol())) fis = new FileInputStream(url.getFile()); else if (""http"".equals(url.getProtocol())) fis = url.openStream();
        ZipInputStream zis = new ZipInputStream(fis);
        ZipEntry entry;
        while ((entry = zis.getNextEntry()) != null) {
            System.out.println(""Extracting: "" + entry);
            int count;
            byte data[] = new byte[BUFFER];
            FileOutputStream fos = new FileOutputStream(entry.getName());
            BufferedOutputStream dest = new BufferedOutputStream(fos, BUFFER);
            while ((count = zis.read(data, 0, BUFFER)) != -1) dest.write(data, 0, count);
            dest.flush();
            dest.close();
        }
        zis.close();
    }
",69,,LABEL_1,LABEL_0,,-4,"copyFile,in,out,sourceChannel,destinationChannel",,,,0,,0,Greedy,1,0.00031757,,[]
416,"    public static String SHA1(String text) throws NoSuchAlgorithmException, UnsupportedEncodingException {
        MessageDigest md;
        md = MessageDigest.getInstance(""SHA-1"");
        byte[] sha1hash = new byte[40];
        md.update(text.getBytes(""iso-8859-1""), 0, text.length());
        sha1hash = md.digest();
        return convertToHex(sha1hash);
    }
 <SPLIT>     public static String MD5(String text) throws NoSuchAlgorithmException, UnsupportedEncodingException {
        MessageDigest md;
        md = MessageDigest.getInstance(""MD5"");
        byte[] md5hash = new byte[32];
        md.update(text.getBytes(""iso-8859-1""), 0, text.length());
        md5hash = md.digest();
        return convertToHex(md5hash);
    }
",77,,LABEL_1,LABEL_1,LABEL_1,-1,"SHA1,text,UnsupportedEncodingException,md,sha1hash",,5,12,0,,0,GA,2244,0.311492972,failed,[';template = 0']
417,"        public void runInternal() {
            connection = null;
            boolean itemsLoadedPartially = false;
            boolean loadNext = false;
            HashSet<String> visited = new HashSet<String>();
            do {
                try {
                    setProgressMessage(url.toString(), -1);
                    visited.add(url.toString());
                    long startTimeStamp = System.currentTimeMillis();
                    delayedProgress = coolReader.getEngine().showProgressDelayed(0, progressMessage, PROGRESS_DELAY_MILLIS);
                    URLConnection conn = url.openConnection();
                    if (conn instanceof HttpsURLConnection) {
                        onError(""HTTPs is not supported yet"");
                        return;
                    }
                    if (!(conn instanceof HttpURLConnection)) {
                        onError(""Only HTTP supported"");
                        return;
                    }
                    connection = (HttpURLConnection) conn;
                    connection.setRequestProperty(""User-Agent"", ""CoolReader/3(Android)"");
                    if (referer != null) connection.setRequestProperty(""Referer"", referer);
                    connection.setInstanceFollowRedirects(true);
                    connection.setAllowUserInteraction(false);
                    connection.setConnectTimeout(CONNECT_TIMEOUT);
                    connection.setReadTimeout(READ_TIMEOUT);
                    connection.setDoInput(true);
                    String fileName = null;
                    String disp = connection.getHeaderField(""Content-Disposition"");
                    if (disp != null) {
                        int p = disp.indexOf(""filename="");
                        if (p > 0) {
                            fileName = disp.substring(p + 9);
                        }
                    }
                    int response = -1;
                    response = connection.getResponseCode();
                    L.d(""Response: "" + response);
                    if (response != 200) {
                        onError(""Error "" + response);
                        return;
                    }
                    String contentType = connection.getContentType();
                    String contentEncoding = connection.getContentEncoding();
                    int contentLen = connection.getContentLength();
                    L.d(""Entity content length: "" + contentLen);
                    L.d(""Entity content type: "" + contentType);
                    L.d(""Entity content encoding: "" + contentEncoding);
                    setProgressMessage(url.toString(), contentLen);
                    InputStream is = connection.getInputStream();
                    delayedProgress.cancel();
                    is = new ProgressInputStream(is, startTimeStamp, progressMessage, contentLen, 80);
                    final int MAX_CONTENT_LEN_TO_BUFFER = 256 * 1024;
                    boolean isZip = contentType != null && contentType.equals(""application/zip"");
                    if (expectedType != null) contentType = expectedType; else if (contentLen > 0 && contentLen < MAX_CONTENT_LEN_TO_BUFFER) {
                        byte[] buf = new byte[contentLen];
                        if (is.read(buf) != contentLen) {
                            onError(""Wrong content length"");
                            return;
                        }
                        is.close();
                        is = null;
                        is = new ByteArrayInputStream(buf);
                        if (findSubstring(buf, ""<?xml version="") >= 0 && findSubstring(buf, ""<feed"") >= 0) contentType = ""application/atom+xml"";
                    }
                    if (contentType.startsWith(""application/atom+xml"")) {
                        L.d(""Parsing feed"");
                        parseFeed(is);
                        itemsLoadedPartially = true;
                        if (handler.docInfo.nextLink != null && handler.docInfo.nextLink.type.startsWith(""application/atom+xml;profile=opds-catalog"")) {
                            if (handler.entries.size() < MAX_OPDS_ITEMS) {
                                url = new URL(handler.docInfo.nextLink.href);
                                loadNext = !visited.contains(url.toString());
                                L.d(""continue with next part: "" + url);
                            } else {
                                L.d(""max item count reached: "" + handler.entries.size());
                                loadNext = false;
                            }
                        } else {
                            loadNext = false;
                        }
                    } else {
                        if (fileName == null) fileName = defaultFileName;
                        L.d(""Downloading book: "" + contentEncoding);
                        downloadBook(contentType, url.toString(), is, contentLen, fileName, isZip);
                        if (progressShown) coolReader.getEngine().hideProgress();
                        loadNext = false;
                        itemsLoadedPartially = false;
                    }
                } catch (Exception e) {
                    L.e(""Exception while trying to open URI "" + url.toString(), e);
                    if (progressShown) coolReader.getEngine().hideProgress();
                    onError(""Error occured while reading OPDS catalog"");
                    break;
                } finally {
                    if (connection != null) try {
                        connection.disconnect();
                    } catch (Exception e) {
                    }
                }
            } while (loadNext);
            if (progressShown) coolReader.getEngine().hideProgress();
            if (itemsLoadedPartially) BackgroundThread.guiExecutor.execute(new Runnable() {

                @Override
                public void run() {
                    L.d(""Parsing is finished successfully. "" + handler.entries.size() + "" entries found"");
                    callback.onFinish(handler.docInfo, handler.entries);
                }
            });
        }
 <SPLIT>     private Reader getReader() throws IOException {
        if (data != null) {
            if (url != null) throw new IllegalArgumentException(""URL for source data and the data itself must never be specified together."");
            if (charset != null) throw new IllegalArgumentException(""Charset has sense only for URL-based data"");
            return new StringReader(data);
        } else if (url != null) {
            InputStream stream = url.openStream();
            if (charset == null) return new InputStreamReader(stream); else return new InputStreamReader(stream, charset);
        }
        return null;
    }
",898,,LABEL_0,LABEL_0,LABEL_0,-1,"runInternal,connection,visited,startTimeStamp,delayedProgress,conn,fileName,disp,p,response,contentType,contentEncoding,contentLen,is,url,loadNext,itemsLoadedPartially",,16,87,0,,0,GA,7105,1.71580977,failed,[';runInternal = 0']
418,"    @Test
    public void testTrainingBackprop() throws IOException {
        File temp = File.createTempFile(""fannj_"", "".tmp"");
        temp.deleteOnExit();
        IOUtils.copy(this.getClass().getResourceAsStream(""xor.data""), new FileOutputStream(temp));
        List<Layer> layers = new ArrayList<Layer>();
        layers.add(Layer.create(2));
        layers.add(Layer.create(3, ActivationFunction.FANN_SIGMOID_SYMMETRIC));
        layers.add(Layer.create(2, ActivationFunction.FANN_SIGMOID_SYMMETRIC));
        layers.add(Layer.create(1, ActivationFunction.FANN_SIGMOID_SYMMETRIC));
        Fann fann = new Fann(layers);
        Trainer trainer = new Trainer(fann);
        trainer.setTrainingAlgorithm(TrainingAlgorithm.FANN_TRAIN_INCREMENTAL);
        float desiredError = .001f;
        float mse = trainer.train(temp.getPath(), 500000, 1000, desiredError);
        assertTrue("""" + mse, mse <= desiredError);
    }
 <SPLIT>     private static void readAndRewrite(File inFile, File outFile) throws IOException {
        ImageInputStream iis = ImageIO.createImageInputStream(new BufferedInputStream(new FileInputStream(inFile)));
        DcmParser dcmParser = DcmParserFactory.getInstance().newDcmParser(iis);
        Dataset ds = DcmObjectFactory.getInstance().newDataset();
        dcmParser.setDcmHandler(ds.getDcmHandler());
        dcmParser.parseDcmFile(null, Tags.PixelData);
        PixelDataReader pdReader = pdFact.newReader(ds, iis, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());
        System.out.println(""reading "" + inFile + ""..."");
        pdReader.readPixelData(false);
        ImageOutputStream out = ImageIO.createImageOutputStream(new BufferedOutputStream(new FileOutputStream(outFile)));
        DcmEncodeParam dcmEncParam = DcmEncodeParam.IVR_LE;
        ds.writeDataset(out, dcmEncParam);
        ds.writeHeader(out, dcmEncParam, Tags.PixelData, dcmParser.getReadVR(), dcmParser.getReadLength());
        System.out.println(""writing "" + outFile + ""..."");
        PixelDataWriter pdWriter = pdFact.newWriter(pdReader.getPixelDataArray(), false, ds, out, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());
        pdWriter.writePixelData();
        out.flush();
        out.close();
        System.out.println(""done!"");
    }
",197,,LABEL_1,LABEL_1,LABEL_1,-1,"testTrainingBackprop,temp,layers,fann,trainer,desiredError,mse",,6,21,0,,0,GA,3270,0.54159468,failed,"[';testTrainingBackprop = 0', ';temp = 0', ';liacks = 0', ';flanguages = 0', '; lients = 0', ';lores = 0', ';nlikes = 0', '; lacks = 0', ';licagers = 0', ';dlasks = 0', ';nlayers = 0']"
419,"    private void checkInputStream(InputStream in, byte[] cmp, boolean all) throws IOException {
        ByteArrayOutputStream stream = new ByteArrayOutputStream();
        IOUtils.copy(in, stream);
        byte[] out = stream.toByteArray();
        if (all) assertEquals(cmp.length, out.length);
        for (int i = 0; i < cmp.length; i++) assertEquals(cmp[i], out[i]);
    }
 <SPLIT>     @SuppressWarnings(""unchecked"")
    public static void main(String[] args) throws Exception {
        if (args.length != 2) {
            System.out.println(""usage: "" + EvaluatorHelper.class.getName() + "" <output> <data set file>"");
            System.exit(1);
        }
        Helper helper = Helper.getHelper(args[1]);
        Dataset dataset = helper.read(args[1]);
        ZipFile zip = new ZipFile(new File(args[0]), ZipFile.OPEN_READ);
        Enumeration entries = zip.entries();
        Unit<?>[] performance = new Unit<?>[LIMIT];
        int index = 0;
        while (entries.hasMoreElements()) {
            ZipEntry entry = (ZipEntry) entries.nextElement();
            if (entry.getName().endsWith("".out"")) {
                File temp = File.createTempFile(""PARSER"", "".zip"");
                temp.deleteOnExit();
                PrintStream writer = new PrintStream(new FileOutputStream(temp));
                BufferedInputStream reader = new BufferedInputStream(zip.getInputStream(entry));
                byte[] buffer = new byte[4096];
                int read = -1;
                while ((read = reader.read(buffer)) != -1) {
                    writer.write(buffer, 0, read);
                }
                writer.close();
                reader.close();
                BufferedReader outfile = new BufferedReader(new FileReader(temp));
                String line = null;
                RuleParser parser = new RuleParser();
                ProbabilisticRuleList list = new ProbabilisticRuleList();
                while ((line = outfile.readLine()) != null) {
                    if (line.startsWith(""IF"")) {
                        ProbabilisticRule rule = new ProbabilisticRule(dataset.getMetadata());
                        list.add(fill(dataset.getMetadata(), rule, parser.parse(line)));
                    }
                }
                outfile.close();
                PooledPRCurveMeasure measure = new PooledPRCurveMeasure();
                performance[index] = measure.evaluate(dataset, list);
                System.out.println(entry.getName() + "": "" + performance[index]);
                index++;
                if (index >= LIMIT) {
                    break;
                }
            }
        }
        System.out.println(UnitAveragingMode.get(Double.class).average(performance));
    }
",92,,LABEL_1,LABEL_1,LABEL_1,-1,"checkInputStream,in,cmp,all,stream,out,i",,7,20,0,,0,GA,2833,0.475554915,failed,"[';checkInputStream = 0', ';in = 0', ';login = 0', ';sort = 0', ';proc = 0', ';asc = 0', ';loc = 0']"
420,"    public void updateUser(User portalUserBean, AuthSession authSession) {
        DatabaseAdapter dbDyn = null;
        PreparedStatement ps = null;
        try {
            dbDyn = DatabaseAdapter.getInstance();
            String sql = ""update WM_LIST_USER "" + ""set    FIRST_NAME=?,MIDDLE_NAME=?,LAST_NAME=?, "" + ""       ADDRESS=?,TELEPHONE=?,EMAIL=? "" + ""where  ID_USER=? and is_deleted=0 and  ID_FIRM in "";
            switch(dbDyn.getFamaly()) {
                case DatabaseManager.MYSQL_FAMALY:
                    String idList = authSession.getGrantedCompanyId();
                    sql += "" ("" + idList + "") "";
                    break;
                default:
                    sql += ""(select z1.ID_FIRM from v$_read_list_firm z1 where z1.user_login = ?)"";
                    break;
            }
            ps = dbDyn.prepareStatement(sql);
            int num = 1;
            ps.setString(num++, portalUserBean.getFirstName());
            ps.setString(num++, portalUserBean.getMiddleName());
            ps.setString(num++, portalUserBean.getLastName());
            ps.setString(num++, portalUserBean.getAddress());
            ps.setString(num++, portalUserBean.getPhone());
            ps.setString(num++, portalUserBean.getEmail());
            ps.setLong(num++, portalUserBean.getUserId());
            switch(dbDyn.getFamaly()) {
                case DatabaseManager.MYSQL_FAMALY:
                    break;
                default:
                    ps.setString(num++, authSession.getUserLogin());
                    break;
            }
            int i1 = ps.executeUpdate();
            if (log.isDebugEnabled()) log.debug(""Count of updated record - "" + i1);
            dbDyn.commit();
        } catch (Exception e) {
            try {
                if (dbDyn != null) {
                    dbDyn.rollback();
                }
            } catch (Exception e001) {
            }
            String es = ""Error update of portal user"";
            log.error(es, e);
            throw new IllegalStateException(es, e);
        } finally {
            DatabaseManager.close(dbDyn, ps);
            dbDyn = null;
            ps = null;
        }
    }
 <SPLIT>     @Override
    public User saveUser(User user) {
        try {
            MessageDigest digest = java.security.MessageDigest.getInstance(""MD5"");
            digest.update(user.getPassword().getBytes(""UTF-8""));
            byte[] hash = digest.digest();
            BigInteger bigInt = new BigInteger(1, hash);
            String hashtext = bigInt.toString(16);
            while (hashtext.length() < 32) {
                hashtext = ""0"" + hashtext;
            }
            user.setPassword(hashtext);
            user.setDataRegjistrimit(new Date());
            return em.merge(user);
        } catch (Exception e) {
            throw new NestedException(e.getMessage(), e);
        }
    }
",358,"    public void updateUser(User portalUserDean, AuthSession authSession) {
        DatabaseAdapter dbSyn = null;
        PreparedStatement ps = null;
        try {
            dbSyn = DatabaseAdapter.getInstance();
            String sql = ""update WM_LIST_USER "" + ""set    FIRST_NAME=?,MIDDLE_NAME=?,LAST_NAME=?, "" + ""       ADDRESS=?,TELEPHONE=?,EMAIL=? "" + ""where  ID_USER=? and is_deleted=0 and  ID_FIRM in "";
            switch(dbSyn.getFamaly()) {
                case DatabaseManager.MYSQL_FAMALY:
                    String idList = authSession.getGrantedCompanyId();
                    sql += "" ("" + idList + "") "";
                    break;
                default:
                    sql += ""(select z1.ID_FIRM from v$_read_list_firm z1 where z1.user_login = ?)"";
                    break;
            }
            ps = dbSyn.prepareStatement(sql);
            int num = 1;
            ps.setString(num++, portalUserDean.getFirstName());
            ps.setString(num++, portalUserDean.getMiddleName());
            ps.setString(num++, portalUserDean.getLastName());
            ps.setString(num++, portalUserDean.getAddress());
            ps.setString(num++, portalUserDean.getPhone());
            ps.setString(num++, portalUserDean.getEmail());
            ps.setLong(num++, portalUserDean.getUserId());
            switch(dbSyn.getFamaly()) {
                case DatabaseManager.MYSQL_FAMALY:
                    break;
                default:
                    ps.setString(num++, authSession.getUserLogin());
                    break;
            }
            int i1 = ps.executeUpdate();
            if (log.isDebugEnabled()) log.debug(""Count of updated record - "" + i1);
            dbSyn.commit();
        } catch (Exception e) {
            try {
                if (dbSyn != null) {
                    dbSyn.rollback();
                }
            } catch (Exception e001) {
            }
            String es = ""Error update of portal user"";
            log.error(es, e);
            throw new IllegalStateException(es, e);
        } finally {
            DatabaseManager.close(dbSyn, ps);
            dbSyn = null;
            ps = null;
        }
    }
",LABEL_0,LABEL_0,LABEL_1,1,"updateUser,portalUserBean,authSession,dbDyn,ps,sql,idList,num,i1","updateUser:0.0009914636611938477,portalUserBean:0.012336909770965576,authSession:-0.00446474552154541,dbDyn:0.023052692413330078,ps:0.002911686897277832,sql:6.890296936035156e-05,idList:-0.0023779869079589844,num:0.0024899840354919434,i1:-0.000363767147064209,",2,18,0,"dbDyn:dbSyn,portalUserBean:portalUserDean,",0,Greedy,259,0.039360551,replace,[]
421,"    private void loadDDL() throws IOException {
        try {
            conn.createStatement().executeQuery(""SELECT * FROM overrides"").close();
        } catch (SQLException e) {
            Statement stmt = null;
            if (!e.getMessage().startsWith(ERR_MISSING_TABLE)) {
                LOG.fatal(SQL_ERROR, e);
                throw new IOException(""Error on initial data store read"", e);
            }
            String[] qry = { ""CREATE TABLE monitor (id INTEGER PRIMARY KEY NOT NULL, status VARCHAR(32) NOT NULL, next_update TIMESTAMP NOT NULL)"", ""CREATE TABLE overrides (id INT NOT NULL, title VARCHAR(255) NOT NULL, subtitle VARCHAR(255) NOT NULL, enable BOOLEAN NOT NULL DEFAULT TRUE, PRIMARY KEY(id))"", ""CREATE TABLE settings (var VARCHAR(32) NOT NULL, val VARCHAR(255) NOT NULL, PRIMARY KEY(var))"", ""INSERT INTO settings (var, val) VALUES ('schema', '1')"" };
            try {
                conn.setAutoCommit(false);
                stmt = conn.createStatement();
                for (String q : qry) stmt.executeUpdate(q);
                conn.commit();
            } catch (SQLException e2) {
                try {
                    conn.rollback();
                } catch (SQLException e3) {
                    LOG.fatal(SQL_ERROR, e3);
                }
                LOG.fatal(SQL_ERROR, e2);
                throw new IOException(""Error initializing data store"", e2);
            } finally {
                if (stmt != null) {
                    try {
                        stmt.close();
                    } catch (SQLException e4) {
                        LOG.fatal(SQL_ERROR, e4);
                        throw new IOException(""Unable to cleanup data store resources"", e4);
                    }
                }
                try {
                    conn.setAutoCommit(true);
                } catch (SQLException e3) {
                    LOG.fatal(SQL_ERROR, e3);
                    throw new IOException(""Unable to reset data store auto commit"", e3);
                }
            }
        }
        return;
    }
 <SPLIT>     public boolean actualizarDatosPrevia(int idJugadorDiv, int idRonda, int idPareoRival, int color, int flotante) {
        int intResult = 0;
        String sql = ""UPDATE jugadorxdivxronda "" + "" SET idPareoRival = "" + idPareoRival + "" , color = "" + color + "" , flotante = "" + flotante + "" "" + "" WHERE jugadorxDivision_idJugadorxDivision = "" + idJugadorDiv + "" AND ronda_numeroRonda = "" + idRonda;
        try {
            connection = conexionBD.getConnection();
            connection.setAutoCommit(false);
            ps = connection.prepareStatement(sql);
            intResult = ps.executeUpdate();
            connection.commit();
        } catch (SQLException ex) {
            ex.printStackTrace();
            try {
                connection.rollback();
            } catch (SQLException exe) {
                exe.printStackTrace();
            }
        } finally {
            conexionBD.close(ps);
            conexionBD.close(connection);
        }
        return (intResult > 0);
    }
",277,,LABEL_1,LABEL_0,,-4,"loadDDL,stmt,qry,q",,,,0,,0,Greedy,1,0.000507379,,[]
422,"    public static void copyFromFileToFileUsingNIO(File inputFile, File outputFile) throws FileNotFoundException, IOException {
        FileChannel inputChannel = new FileInputStream(inputFile).getChannel();
        FileChannel outputChannel = new FileOutputStream(outputFile).getChannel();
        try {
            inputChannel.transferTo(0, inputChannel.size(), outputChannel);
        } catch (IOException e) {
            throw e;
        } finally {
            if (inputChannel != null) inputChannel.close();
            if (outputChannel != null) outputChannel.close();
        }
    }
 <SPLIT>     public static String POST(String url, String[][] props) throws IOException {
        HttpURLConnection conn = (HttpURLConnection) new URL(url).openConnection();
        conn.setRequestMethod(""POST"");
        for (int i = 0; i < props.length; ++i) {
            conn.addRequestProperty(props[i][0], props[i][1]);
        }
        conn.connect();
        try {
            return new String((byte[]) conn.getContent());
        } finally {
            conn.disconnect();
        }
    }
",99,,LABEL_0,LABEL_0,LABEL_0,-1,"copyFromFileToFileUsingNIO,inputFile,outputFile,inputChannel,outputChannel",,5,14,0,,0,GA,2075,0.291891666,failed,[]
423,"    public static DigitalObjectContent byReference(final InputStream inputStream) {
        try {
            File tempFile = File.createTempFile(""tempContent"", ""tmp"");
            tempFile.deleteOnExit();
            FileOutputStream out = new FileOutputStream(tempFile);
            IOUtils.copyLarge(inputStream, out);
            out.close();
            return new ImmutableContent(tempFile);
        } catch (IOException e) {
            e.printStackTrace();
        }
        throw new IllegalStateException(""Could not create content for input stream: "" + inputStream);
    }
 <SPLIT>     private static void recurseFiles(File root, File file, ZipArchiveOutputStream zaos, boolean absolute) throws IOException {
        if (file.isDirectory()) {
            File[] files = file.listFiles();
            for (File file2 : files) {
                recurseFiles(root, file2, zaos, absolute);
            }
        } else if ((!file.getName().endsWith("".zip"")) && (!file.getName().endsWith("".ZIP""))) {
            String filename = null;
            if (absolute) {
                filename = file.getAbsolutePath().substring(root.getAbsolutePath().length());
            } else {
                filename = file.getName();
            }
            ZipArchiveEntry zae = new ZipArchiveEntry(filename);
            zae.setSize(file.length());
            zaos.putArchiveEntry(zae);
            FileInputStream fis = new FileInputStream(file);
            IOUtils.copy(fis, zaos);
            zaos.closeArchiveEntry();
        }
    }
",92,,LABEL_1,LABEL_1,LABEL_1,-1,"byReference,inputStream,tempFile,out",,4,11,0,,0,GA,1755,0.258835955,failed,"[';byReference = 0', ';orReference = 0', ';Byref = 0', ';url = 0', ';client = 0', ';conn = 0', ';plain = 0', ';extra = 0', ';connection = 0']"
424,"    public void uploadFile(File inputFile, String targetFile) throws IOException {
        System.out.println(""Uploading "" + inputFile.getName() + "" to "" + targetFile);
        File outputFile = new File(targetFile);
        if (targetFile.endsWith(""/"")) {
            outputFile = new File(outputFile, inputFile.getName());
        } else if (outputFile.getParentFile().exists() == false) {
            outputFile.getParentFile().mkdirs();
        }
        if (inputFile.renameTo(outputFile) == false) {
            InputStream in = new FileInputStream(inputFile);
            OutputStream out = new FileOutputStream(outputFile);
            byte[] line = new byte[16384];
            int bytes = -1;
            while ((bytes = in.read(line)) != -1) out.write(line, 0, bytes);
            in.close();
            out.close();
        }
    }
 <SPLIT>     private static final void copyFile(File srcFile, File destDir, byte[] buffer) {
        try {
            File destFile = new File(destDir, srcFile.getName());
            InputStream in = new FileInputStream(srcFile);
            OutputStream out = new FileOutputStream(destFile);
            int bytesRead;
            while ((bytesRead = in.read(buffer)) != -1) out.write(buffer, 0, bytesRead);
            in.close();
            out.close();
        } catch (IOException ioe) {
            System.err.println(""Couldn't copy file '"" + srcFile + ""' to directory '"" + destDir + ""'"");
        }
    }
",188,"    public void uploadDir(File inputFile, String targetFile) throws IOException {
        System.out.println(""Uploading "" + inputFile.getName() + "" to "" + targetFile);
        File OutputFolder = new File(targetFile);
        if (targetFile.endsWith(""/"")) {
            OutputFolder = new File(OutputFolder, inputFile.getName());
        } else if (OutputFolder.getParentFile().exists() == false) {
            OutputFolder.getParentFile().mkdirs();
        }
        if (inputFile.renameTo(OutputFolder) == false) {
            InputStream url = new FileInputStream(inputFile);
            OutputStream out = new FileOutputStream(OutputFolder);
            byte[] url = new byte[16384];
            int bytes = -1;
            while ((bytes = url.read(url)) != -1) out.write(url, 0, bytes);
            url.close();
            out.close();
        }
    }
",LABEL_1,LABEL_1,LABEL_0,1,"uploadFile,inputFile,targetFile,outputFile,in,out,line,bytes","uploadFile:0.0010001659393310547,inputFile:-0.002626180648803711,targetFile:-0.006042301654815674,outputFile:0.0006603002548217773,in:0.000699460506439209,out:-0.005386412143707275,line:0.000560760498046875,bytes:-0.0010681748390197754,",4,14,0,"uploadFile:uploadDir,in:url,outputFile:OutputFolder,line:url,",0,Greedy,192,0.028256555,replace,[]
425,"    public void transport(File file) throws TransportException {
        if (file.exists()) {
            if (file.isDirectory()) {
                File[] files = file.listFiles();
                for (int i = 0; i < files.length; i++) {
                    transport(file);
                }
            } else if (file.isFile()) {
                try {
                    FileChannel inChannel = new FileInputStream(file).getChannel();
                    FileChannel outChannel = new FileOutputStream(destinationDir).getChannel();
                    inChannel.transferTo(0, inChannel.size(), outChannel);
                } catch (IOException e) {
                    log.error(""File transfer failed"", e);
                }
            }
        }
    }
 <SPLIT>     public String execute() {
        String dir = ""E:\\ganymede_workspace\\training01\\web\\user_imgs\\"";
        HomeMap map = new HomeMap();
        map.setDescription(description);
        Integer id = homeMapDao.saveHomeMap(map);
        FileOutputStream fos;
        try {
            fos = new FileOutputStream(dir + id);
            IOUtils.copy(new FileInputStream(imageFile), fos);
            IOUtils.closeQuietly(fos);
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
        return list();
    }
",139,"    public void ransprocess(File url) throws TransportException {
        if (url.exists()) {
            if (url.isDirectory()) {
                File[] files = url.listFiles();
                for (int i = 0; i < files.length; i++) {
                    ransprocess(url);
                }
            } else if (url.isFile()) {
                try {
                    FileChannel inChannel = new FileInputStream(url).getChannel();
                    FileChannel outChannel = new FileOutputStream(destinationDir).getChannel();
                    inChannel.transferTo(0, inChannel.size(), outChannel);
                } catch (IOException e) {
                    log.error(""File transfer failed"", e);
                }
            }
        }
    }
",LABEL_1,LABEL_1,LABEL_0,1,"transport,file,files,i,inChannel,outChannel","transport:0.0036472082138061523,file:0.010055959224700928,files:-0.001964271068572998,i:-0.0007150173187255859,inChannel:0.017007291316986084,outChannel:0.012144744396209717,",2,9,0,"inChannel:inChannel,outChannel:outChannel,file:url,transport:ransprocess,",0,Greedy,149,0.021570667,replace,[]
426,"    private static HttpURLConnection sendPost(String reqUrl, Map<String, String> parameters) {
        HttpURLConnection urlConn = null;
        try {
            String params = generatorParamString(parameters);
            URL url = new URL(reqUrl);
            urlConn = (HttpURLConnection) url.openConnection();
            urlConn.setRequestMethod(""POST"");
            urlConn.setConnectTimeout(5000);
            urlConn.setReadTimeout(5000);
            urlConn.setDoOutput(true);
            byte[] b = params.getBytes();
            urlConn.getOutputStream().write(b, 0, b.length);
            urlConn.getOutputStream().flush();
            urlConn.getOutputStream().close();
        } catch (Exception e) {
            throw new RuntimeException(e.getMessage(), e);
        }
        return urlConn;
    }
 <SPLIT>     public static String postRequest(String urlString, HashMap data) {
        String returnData = """";
        try {
            URL url = new URL(urlString);
            URLConnection connection = url.openConnection();
            connection.setDoOutput(true);
            connection.setDoInput(true);
            PrintWriter out = new PrintWriter(connection.getOutputStream());
            Object[] keySet = data.keySet().toArray();
            Object[] values = data.values().toArray();
            for (int count = 0; count < keySet.length; count++) {
                out.print(URLEncoder.encode((String) keySet[count]) + ""="" + URLEncoder.encode((String) values[count]));
                if ((count + 1) < keySet.length) out.print(""&"");
            }
            out.close();
            BufferedReader in = new BufferedReader(new InputStreamReader(connection.getInputStream()));
            String inputLine;
            while ((inputLine = in.readLine()) != null) {
                returnData += inputLine;
            }
            in.close();
        } catch (Exception e) {
            e.printStackTrace();
            returnData = null;
        }
        return (returnData);
    }
",156,,LABEL_0,LABEL_0,LABEL_0,-1,"sendPost,reqUrl,parameters,urlConn,params,url,b",,6,12,0,,0,GA,2975,0.470224233,failed,[';parameters = 0']
427,"    static void copy(String src, String dest) throws IOException {
        File ifp = new File(src);
        File ofp = new File(dest);
        if (ifp.exists() == false) {
            throw new IOException(""file '"" + src + ""' does not exist"");
        }
        FileInputStream fis = new FileInputStream(ifp);
        FileOutputStream fos = new FileOutputStream(ofp);
        byte[] b = new byte[1024];
        while (fis.read(b) > 0) fos.write(b);
        fis.close();
        fos.close();
    }
 <SPLIT>     private static void copy(String sourceName, String destName) throws IOException {
        File source = new File(sourceName);
        File dest = new File(destName);
        FileChannel in = null, out = null;
        try {
            in = new FileInputStream(source).getChannel();
            out = new FileOutputStream(dest).getChannel();
            long size = in.size();
            MappedByteBuffer buf = in.map(FileChannel.MapMode.READ_ONLY, 0, size);
            out.write(buf);
        } finally {
            if (in != null) in.close();
            if (out != null) out.close();
        }
    }
",119,"    static void cmp(String url, String source) throws IOException {
        File Iftp = new File(url);
        File off = new File(source);
        if (Iftp.exists() == false) {
            throw new IOException(""file '"" + url + ""' does not exist"");
        }
        FileInputStream hus = new FileInputStream(Iftp);
        FileOutputStream fos = new FileOutputStream(off);
        byte[] db = new byte[1024];
        while (hus.read(db) > 0) fos.write(db);
        hus.close();
        fos.close();
    }
",LABEL_1,LABEL_1,LABEL_0,1,"copy,src,dest,ifp,ofp,fis,fos,b","copy:-1.233816146850586e-05,src:-0.009706079959869385,dest:-0.008628606796264648,ifp:-0.009218752384185791,ofp:-0.007514834403991699,fis:-0.009295523166656494,fos:-0.01831185817718506,b:-0.006817042827606201,",7,17,0,"copy:cmp,b:db,ofp:off,dest:source,ifp:Iftp,fis:hus,src:url,",0,Greedy,286,0.040848811,replace,[]
428,"    public static final synchronized String hash(String data) {
        if (digest == null) {
            try {
                digest = MessageDigest.getInstance(""MD5"");
            } catch (NoSuchAlgorithmException nsae) {
                log.error(""Failed to load the MD5 MessageDigest. "" + ""Jive will be unable to function normally."", nsae);
            }
        }
        try {
            digest.update(data.getBytes(""utf-8""));
        } catch (UnsupportedEncodingException e) {
            log.error(e);
        }
        return encodeHex(digest.digest());
    }
 <SPLIT>     public static String createPseudoUUID() {
        try {
            MessageDigest messageDigest = MessageDigest.getInstance(""MD5"");
            messageDigest.update(new UID().toString().getBytes());
            try {
                String localHost = InetAddress.getLocalHost().toString();
                messageDigest.update(localHost.getBytes());
            } catch (UnknownHostException e) {
                throw new OXFException(e);
            }
            byte[] digestBytes = messageDigest.digest();
            StringBuffer sb = new StringBuffer();
            sb.append(toHexString(NumberUtils.readIntBigEndian(digestBytes, 0)));
            sb.append('-');
            sb.append(toHexString(NumberUtils.readShortBigEndian(digestBytes, 4)));
            sb.append('-');
            sb.append(toHexString(NumberUtils.readShortBigEndian(digestBytes, 6)));
            sb.append('-');
            sb.append(toHexString(NumberUtils.readShortBigEndian(digestBytes, 8)));
            sb.append('-');
            sb.append(toHexString(NumberUtils.readShortBigEndian(digestBytes, 10)));
            sb.append(toHexString(NumberUtils.readIntBigEndian(digestBytes, 12)));
            return sb.toString();
        } catch (NoSuchAlgorithmException e) {
            throw new OXFException(e);
        }
    }
",98,,LABEL_1,LABEL_1,LABEL_1,-1,"hash,data,digest",,3,8,0,,0,GA,1383,0.214266622,failed,"[';hash = 0', ';print(hash)']"
429,"    public static int[] bubbleSort(int... a) {
        boolean swapped;
        do {
            swapped = false;
            for (int i = 0; i < a.length - 1; i++) {
                if (a[i] > a[i + 1]) {
                    int tmp = a[i];
                    a[i] = a[i + 1];
                    a[i + 1] = tmp;
                    swapped = true;
                }
            }
        } while (swapped);
        return a;
    }
 <SPLIT>     public void actualizar() throws SQLException, ClassNotFoundException, Exception {
        Connection conn = null;
        PreparedStatement ms = null;
        registroActualizado = false;
        try {
            conn = ToolsBD.getConn();
            conn.setAutoCommit(false);
            Date fechaSystem = new Date();
            DateFormat aaaammdd = new SimpleDateFormat(""yyyyMMdd"");
            int fzafsis = Integer.parseInt(aaaammdd.format(fechaSystem));
            DateFormat hhmmss = new SimpleDateFormat(""HHmmss"");
            DateFormat sss = new SimpleDateFormat(""S"");
            String ss = sss.format(fechaSystem);
            if (ss.length() > 2) {
                ss = ss.substring(0, 2);
            }
            int fzahsis = Integer.parseInt(hhmmss.format(fechaSystem) + ss);
            ms = conn.prepareStatement(SENTENCIA_UPDATE);
            ms.setString(1, descartadoEntrada);
            ms.setString(2, usuarioEntrada);
            ms.setString(3, motivosDescarteEntrada);
            ms.setInt(4, Integer.parseInt(anoOficio));
            ms.setInt(5, Integer.parseInt(oficinaOficio));
            ms.setInt(6, Integer.parseInt(numeroOficio));
            ms.setInt(7, anoEntrada != null ? Integer.parseInt(anoEntrada) : 0);
            ms.setInt(8, oficinaEntrada != null ? Integer.parseInt(oficinaEntrada) : 0);
            ms.setInt(9, numeroEntrada != null ? Integer.parseInt(numeroEntrada) : 0);
            int afectados = ms.executeUpdate();
            if (afectados > 0) {
                registroActualizado = true;
            } else {
                registroActualizado = false;
            }
            conn.commit();
        } catch (Exception ex) {
            System.out.println(""Error inesperat, no s'ha desat el registre: "" + ex.getMessage());
            ex.printStackTrace();
            registroActualizado = false;
            errores.put("""", ""Error inesperat, no s'ha desat el registre"" + "": "" + ex.getClass() + ""->"" + ex.getMessage());
            try {
                if (conn != null) conn.rollback();
            } catch (SQLException sqle) {
                throw new RemoteException(""S'ha produït un error i no s'han pogut tornar enrere els canvis efectuats"", sqle);
            }
            throw new RemoteException(""Error inesperat, no s'ha modifcat el registre"", ex);
        } finally {
            ToolsBD.closeConn(conn, ms, null);
        }
    }
",101,,LABEL_0,LABEL_0,LABEL_0,-1,"bubbleSort,a,swapped,i,tmp",,5,25,0,,0,GA,2386,0.39752297,failed,"[';ubblesort = 0', ';print(ubblesort)', ';ubbleOrder = 0', ';ubbleCompare = 0']"
430,"    public Object execute(ExecutionEvent event) throws ExecutionException {
        try {
            Shell shell = PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell();
            QuizTreeView view = (QuizTreeView) PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage().showView(""org.rcpquizengine.views.quizzes"");
            Folder rootFolder = view.getRootFolder();
            if (rootFolder.isEncrypted()) {
                PasswordDialog dialog = new PasswordDialog(shell);
                if (dialog.open() == Window.OK) {
                    String password = dialog.getPassword();
                    if (!password.equals("""")) {
                        String md5 = """";
                        MessageDigest md = MessageDigest.getInstance(""MD5"");
                        md.update(password.getBytes());
                        md5 = new BigInteger(md.digest()).toString();
                        if (rootFolder.getMd5Digest().equals(md5)) {
                            rootFolder.setMd5Digest("""");
                            rootFolder.setEncrypted(false);
                            MessageDialog.openInformation(shell, ""Quiz bank unlocked"", ""The current quiz bank has been unlocked"");
                        } else {
                            MessageDialog.openError(shell, ""Error unlocking quiz bank"", ""Incorrect password"");
                        }
                        password = """";
                        md5 = """";
                    }
                }
            } else {
                MessageDialog.openError(shell, ""Error unlocking quiz bank"", ""Quiz bank already unlocked"");
            }
        } catch (PartInitException e) {
            e.printStackTrace();
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        }
        return null;
    }
 <SPLIT>     public static String encryptPassword(String plainPassword) {
        StringBuffer sb = new StringBuffer();
        try {
            MessageDigest messageDigest = MessageDigest.getInstance(""MD5"");
            messageDigest.update(plainPassword.getBytes());
            byte[] digestBytes = messageDigest.digest();
            String hex = null;
            for (int i = 0; i < digestBytes.length; i++) {
                hex = Integer.toHexString(0xFF & digestBytes[i]);
                if (hex.length() < 2) sb.append(""0"");
                sb.append(hex);
            }
        } catch (Exception ex) {
            System.out.println(ex.getMessage());
        }
        return new String(sb);
    }
",288,,LABEL_1,LABEL_0,,-4,"execute,event,shell,view,rootFolder,dialog,password,md5,md",,,,0,,0,Greedy,1,0.00053347,,[]
431,"    public static void copyFile(File sourceFile, File destFile) throws IOException {
        if (!destFile.exists()) {
            destFile.createNewFile();
        }
        FileChannel source = null;
        FileChannel destination = null;
        try {
            source = new FileInputStream(sourceFile).getChannel();
            destination = new FileOutputStream(destFile).getChannel();
            destination.transferFrom(source, 0, source.size());
        } finally {
            if (source != null) {
                source.close();
            }
            if (destination != null) {
                destination.close();
            }
        }
    }
 <SPLIT>     public boolean visar() throws SQLException, ClassNotFoundException, Exception {
        Connection conn = null;
        PreparedStatement ps = null;
        Date fechaSystem = new Date();
        DateFormat aaaammdd = new SimpleDateFormat(""yyyyMMdd"");
        DateFormat hhmmss = new SimpleDateFormat(""HHmmss"");
        DateFormat sss = new SimpleDateFormat(""S"");
        String ss = sss.format(fechaSystem);
        if (ss.length() > 2) {
            ss = ss.substring(0, 2);
        }
        boolean visado = false;
        try {
            conn = ToolsBD.getConn();
            conn.setAutoCommit(false);
            String sentenciaSql = ""UPDATE BZMODIF SET FZJCUSVI=?, FZJFVISA=?, FZJHVISA=?"" + ((hayVisadoExtracto) ? "", FZJIEXTR=?"" : """") + ((hayVisadoRemitente) ? "", FZJIREMI=?"" : """") + "" WHERE FZJCENSA='S' AND FZJCAGCO=? AND FZJNUMEN=? AND FZJANOEN=? AND FZJFMODI=? AND FZJHMODI=?"";
            ps = conn.prepareStatement(sentenciaSql);
            ps.setString(1, usuarioVisado);
            ps.setInt(2, Integer.parseInt(aaaammdd.format(fechaSystem)));
            ps.setInt(3, Integer.parseInt(hhmmss.format(fechaSystem) + ss));
            int contador = 4;
            if (hayVisadoExtracto) {
                ps.setString(contador++, ""X"");
            }
            if (hayVisadoRemitente) {
                ps.setString(contador++, ""X"");
            }
            ps.setInt(contador++, oficina);
            ps.setInt(contador++, numeroRegistro);
            ps.setInt(contador++, anoSalida);
            ps.setString(contador++, fechaModificacion);
            ps.setString(contador++, horaModificacion);
            int registrosAfectados = ps.executeUpdate();
            if (registrosAfectados > 0 && !hayVisadoExtracto && !hayVisadoRemitente) {
                visado = true;
            }
            if (registrosAfectados > 0 && (hayVisadoExtracto || hayVisadoRemitente)) {
                boolean generado = generarBZVISAD(conn, Integer.parseInt(aaaammdd.format(fechaSystem)), Integer.parseInt(hhmmss.format(fechaSystem) + ss));
                if (generado) {
                    visado = actualizarBZSALIDA(conn);
                }
                String rem = """";
                String com = """";
                if (hayVisadoRemitente) {
                    if (!remitente.trim().equals("""")) {
                        rem = remitente;
                    } else {
                        javax.naming.InitialContext contexto = new javax.naming.InitialContext();
                        Object ref = contexto.lookup(""es.caib.regweb.ValoresHome"");
                        ValoresHome home = (ValoresHome) javax.rmi.PortableRemoteObject.narrow(ref, ValoresHome.class);
                        Valores valor = home.create();
                        rem = valor.recuperaRemitenteCastellano(entidad1, entidad2 + """");
                        valor.remove();
                    }
                } else {
                    if (!altres.trim().equals("""")) {
                        rem = remitente;
                    } else {
                        javax.naming.InitialContext contexto = new javax.naming.InitialContext();
                        Object ref = contexto.lookup(""es.caib.regweb.ValoresHome"");
                        ValoresHome home = (ValoresHome) javax.rmi.PortableRemoteObject.narrow(ref, ValoresHome.class);
                        Valores valor = home.create();
                        rem = valor.recuperaRemitenteCastellano(entidad1Old, entidad2Old + """");
                        valor.remove();
                    }
                }
                if (hayVisadoExtracto) {
                    com = extracto;
                } else {
                    com = comentario;
                }
                try {
                    Class t = Class.forName(""es.caib.regweb.module.PluginHook"");
                    Class[] partypes = { String.class, Integer.class, Integer.class, Integer.class, Integer.class, String.class, String.class, String.class, Integer.class, Integer.class, String.class, Integer.class, String.class };
                    Object[] params = { ""V"", new Integer(anoSalida), new Integer(numeroRegistro), new Integer(oficina), new Integer(fechaDocumento), rem, com, tipoDocumento, new Integer(fechaRegistro), new Integer(fzacagge), fora, new Integer(destinatario), idioma };
                    java.lang.reflect.Method metodo = t.getMethod(""salida"", partypes);
                    metodo.invoke(null, params);
                } catch (IllegalAccessException iae) {
                } catch (IllegalArgumentException iae) {
                } catch (InvocationTargetException ite) {
                } catch (NullPointerException npe) {
                } catch (ExceptionInInitializerError eiie) {
                } catch (NoSuchMethodException nsme) {
                } catch (SecurityException se) {
                } catch (LinkageError le) {
                } catch (ClassNotFoundException le) {
                }
            }
            conn.commit();
            int fzahsis = Integer.parseInt(hhmmss.format(fechaSystem) + ss);
            String Stringsss = sss.format(fechaSystem);
            switch(Stringsss.length()) {
                case (1):
                    Stringsss = ""00"" + Stringsss;
                    break;
                case (2):
                    Stringsss = ""0"" + Stringsss;
                    break;
            }
            int horamili = Integer.parseInt(hhmmss.format(fechaSystem) + Stringsss);
            int fzafsis = Integer.parseInt(aaaammdd.format(fechaSystem));
            logLopdBZMODIF(""UPDATE"", sessioEjb.getCallerPrincipal().getName().toUpperCase(), fzafsis, horamili, 'S', numeroRegistro, anoSalida, oficina, Integer.parseInt(fechaModificacion), Integer.parseInt(horaModificacion));
        } catch (Exception e) {
            System.out.println(""Error: "" + e.getMessage());
            e.printStackTrace();
            visado = false;
            try {
                if (conn != null) conn.rollback(); else System.out.println(""ERROR: No es pot fer rollback sense connexió!"");
            } catch (Exception ex) {
                System.out.println(""Error: "" + e.getMessage());
                ex.printStackTrace();
            }
        } finally {
            ToolsBD.closeConn(conn, ps, null);
        }
        return visado;
    }
",116,,LABEL_0,LABEL_0,LABEL_0,-1,"copyFile,sourceFile,destFile,source,destination",,5,18,0,,0,GA,2165,0.458894368,failed,"[';copyFile = 0', ';destFile = 0', ';print(destFile)', ';destination = 0', ';clonefile = 0', ';transferfile = 0']"
432,"    public static void unzipModel(String filename, String tempdir) throws EDITSException {
        try {
            BufferedOutputStream dest = null;
            FileInputStream fis = new FileInputStream(filename);
            int BUFFER = 2048;
            ZipInputStream zis = new ZipInputStream(new BufferedInputStream(fis));
            ZipEntry entry;
            while ((entry = zis.getNextEntry()) != null) {
                int count;
                byte data[] = new byte[BUFFER];
                FileOutputStream fos = new FileOutputStream(tempdir + entry.getName());
                dest = new BufferedOutputStream(fos, BUFFER);
                while ((count = zis.read(data, 0, BUFFER)) != -1) dest.write(data, 0, count);
                dest.flush();
                dest.close();
            }
            zis.close();
        } catch (Exception e) {
            throw new EDITSException(""Can not expand model in \"""" + tempdir + ""\"" because:\n"" + e.getMessage());
        }
    }
 <SPLIT>     @Test
    public void testCopy_readerToWriter_nullIn() throws Exception {
        ByteArrayOutputStream baout = new ByteArrayOutputStream();
        OutputStream out = new YellOnFlushAndCloseOutputStreamTest(baout, true, true);
        Writer writer = new OutputStreamWriter(baout, ""US-ASCII"");
        try {
            IOUtils.copy((Reader) null, writer);
            fail();
        } catch (NullPointerException ex) {
        }
    }
",188,,LABEL_1,LABEL_1,LABEL_1,-1,"unzipModel,filename,tempdir,dest,fis,BUFFER,zis,entry,count,data,fos",,7,21,0,,0,GA,4990,0.752916495,failed,"[';unzipModel = 0', ';filename = 0', ';tempdir = 0', ';url = 0', ';location = 0']"
433,"    private void simulate() throws Exception {
        BufferedWriter out = null;
        out = new BufferedWriter(new FileWriter(outFile));
        out.write(""#Thread\tReputation\tAction\n"");
        out.flush();
        System.out.println(""Simulate..."");
        File file = new File(trsDemoSimulationfile);
        ObtainUserReputation obtainUserReputationRequest = new ObtainUserReputation();
        ObtainUserReputationResponse obtainUserReputationResponse;
        RateUser rateUserRequest;
        RateUserResponse rateUserResponse;
        FileInputStream fis = new FileInputStream(file);
        BufferedReader br = new BufferedReader(new InputStreamReader(fis));
        String call = br.readLine();
        while (call != null) {
            rateUserRequest = generateRateUserRequest(call);
            try {
                rateUserResponse = trsPort.rateUser(rateUserRequest);
                System.out.println(""----------------R A T I N G-------------------"");
                System.out.println(""VBE: "" + rateUserRequest.getVbeId());
                System.out.println(""VO: "" + rateUserRequest.getVoId());
                System.out.println(""USER: "" + rateUserRequest.getUserId());
                System.out.println(""SERVICE: "" + rateUserRequest.getServiceId());
                System.out.println(""ACTION: "" + rateUserRequest.getActionId());
                System.out.println(""OUTCOME: "" + rateUserResponse.isOutcome());
                System.out.println(""----------------------------------------------"");
                assertEquals(""The outcome field of the rateUser should be true: MESSAGE="" + rateUserResponse.getMessage(), true, rateUserResponse.isOutcome());
            } catch (RemoteException e) {
                fail(e.getMessage());
            }
            obtainUserReputationRequest.setIoi(null);
            obtainUserReputationRequest.setServiceId(null);
            obtainUserReputationRequest.setUserId(rateUserRequest.getUserId());
            obtainUserReputationRequest.setVbeId(rateUserRequest.getVbeId());
            obtainUserReputationRequest.setVoId(null);
            try {
                obtainUserReputationResponse = trsPort.obtainUserReputation(obtainUserReputationRequest);
                System.out.println(""-----------R E P U T A T I O N----------------"");
                System.out.println(""VBE: "" + obtainUserReputationRequest.getVbeId());
                System.out.println(""VO: "" + obtainUserReputationRequest.getVoId());
                System.out.println(""USER: "" + obtainUserReputationRequest.getUserId());
                System.out.println(""SERVICE: "" + obtainUserReputationRequest.getServiceId());
                System.out.println(""IOI: "" + obtainUserReputationRequest.getIoi());
                System.out.println(""REPUTATION: "" + obtainUserReputationResponse.getReputation());
                System.out.println(""----------------------------------------------"");
                assertEquals(""The outcome field of the obtainUserReputation should be true: MESSAGE="" + obtainUserReputationResponse.getMessage(), true, obtainUserReputationResponse.isOutcome());
                assertEquals(0.0, obtainUserReputationResponse.getReputation(), 1.0);
            } catch (RemoteException e) {
                fail(e.getMessage());
            }
            obtainUserReputationRequest.setIoi(null);
            obtainUserReputationRequest.setServiceId(null);
            obtainUserReputationRequest.setUserId(rateUserRequest.getUserId());
            obtainUserReputationRequest.setVbeId(rateUserRequest.getVbeId());
            obtainUserReputationRequest.setVoId(rateUserRequest.getVoId());
            try {
                obtainUserReputationResponse = trsPort.obtainUserReputation(obtainUserReputationRequest);
                System.out.println(""-----------R E P U T A T I O N----------------"");
                System.out.println(""VBE: "" + obtainUserReputationRequest.getVbeId());
                System.out.println(""VO: "" + obtainUserReputationRequest.getVoId());
                System.out.println(""USER: "" + obtainUserReputationRequest.getUserId());
                System.out.println(""SERVICE: "" + obtainUserReputationRequest.getServiceId());
                System.out.println(""IOI: "" + obtainUserReputationRequest.getIoi());
                System.out.println(""REPUTATION: "" + obtainUserReputationResponse.getReputation());
                System.out.println(""----------------------------------------------"");
                assertEquals(""The outcome field of the obtainUserReputation should be true: MESSAGE="" + obtainUserReputationResponse.getMessage(), true, obtainUserReputationResponse.isOutcome());
                assertEquals(0.0, obtainUserReputationResponse.getReputation(), 1.0);
            } catch (RemoteException e) {
                fail(e.getMessage());
            }
            call = br.readLine();
        }
        fis.close();
        br.close();
        out.flush();
        out.close();
    }
 <SPLIT>     private static boolean genCustRatingFileAndMovieIndexFile(String completePath, String masterFile, String CustRatingFileName, String MovieIndexFileName) {
        try {
            File inFile = new File(completePath + fSep + ""SmartGRAPE"" + fSep + masterFile);
            FileChannel inC = new FileInputStream(inFile).getChannel();
            File outFile1 = new File(completePath + fSep + ""SmartGRAPE"" + fSep + MovieIndexFileName);
            FileChannel outC1 = new FileOutputStream(outFile1, true).getChannel();
            File outFile2 = new File(completePath + fSep + ""SmartGRAPE"" + fSep + CustRatingFileName);
            FileChannel outC2 = new FileOutputStream(outFile2, true).getChannel();
            int fileSize = (int) inC.size();
            int totalNoDataRows = fileSize / 7;
            ByteBuffer mappedBuffer = inC.map(FileChannel.MapMode.READ_ONLY, 0, fileSize);
            int startIndex = 1, count = 0;
            short currentMovie = 1;
            while (mappedBuffer.hasRemaining()) {
                count++;
                short movieName = mappedBuffer.getShort();
                int customer = mappedBuffer.getInt();
                byte rating = mappedBuffer.get();
                if (movieName != currentMovie) {
                    ByteBuffer outBuf1 = ByteBuffer.allocate(10);
                    outBuf1.putShort(currentMovie);
                    outBuf1.putInt(startIndex);
                    outBuf1.putInt(count - 1);
                    outBuf1.flip();
                    outC1.write(outBuf1);
                    currentMovie = movieName;
                    startIndex = count;
                }
                ByteBuffer outBuf2 = ByteBuffer.allocate(5);
                outBuf2.putInt(customer);
                outBuf2.put(rating);
                outBuf2.flip();
                outC2.write(outBuf2);
            }
            ByteBuffer endOfIndexFile = ByteBuffer.allocate(10);
            endOfIndexFile.putShort(currentMovie);
            endOfIndexFile.putInt(startIndex);
            endOfIndexFile.putInt(100480506);
            endOfIndexFile.flip();
            outC1.write(endOfIndexFile);
            outC1.close();
            outC2.close();
            return true;
        } catch (IOException e) {
            System.err.println(e);
            return false;
        }
    }
",797,"    private void Simulator() throws Exception {
        BufferedWriter out = null;
        out = new BufferedWriter(new FileWriter(outFile));
        out.write(""#Thread\tReputation\tAction
"");
        out.flush();
        System.out.println(""Simulate..."");
        File file = new File(trsDemoSimulationfile);
        ObtainUserReputation obtainUserComputationEntry = new ObtainUserReputation();
        ObtainUserReputationResponse obtainUserRepurationResp;
        RateUser ratedFileCommand;
        RateUserResponse  rateFileResponse;
        FileInputStream bis = new FileInputStream(file);
        BufferedReader wr = new BufferedReader(new InputStreamReader(bis));
        String url = wr.readLine();
        while (url != null) {
            ratedFileCommand = generateRateUserRequest(url);
            try {
                 rateFileResponse = trsPort.rateUser(ratedFileCommand);
                System.out.println(""----------------R A T I N G-------------------"");
                System.out.println(""VBE: "" + ratedFileCommand.getVbeId());
                System.out.println(""VO: "" + ratedFileCommand.getVoId());
                System.out.println(""USER: "" + ratedFileCommand.getUserId());
                System.out.println(""SERVICE: "" + ratedFileCommand.getServiceId());
                System.out.println(""ACTION: "" + ratedFileCommand.getActionId());
                System.out.println(""OUTCOME: "" +  rateFileResponse.isOutcome());
                System.out.println(""----------------------------------------------"");
                assertEquals(""The outcome field of the rateUser should be true: MESSAGE="" +  rateFileResponse.getMessage(), true,  rateFileResponse.isOutcome());
            } catch (RemoteException e) {
                fail(e.getMessage());
            }
            obtainUserComputationEntry.setIoi(null);
            obtainUserComputationEntry.setServiceId(null);
            obtainUserComputationEntry.setUserId(ratedFileCommand.getUserId());
            obtainUserComputationEntry.setVbeId(ratedFileCommand.getVbeId());
            obtainUserComputationEntry.setVoId(null);
            try {
                obtainUserRepurationResp = trsPort.obtainUserReputation(obtainUserComputationEntry);
                System.out.println(""-----------R E P U T A T I O N----------------"");
                System.out.println(""VBE: "" + obtainUserComputationEntry.getVbeId());
                System.out.println(""VO: "" + obtainUserComputationEntry.getVoId());
                System.out.println(""USER: "" + obtainUserComputationEntry.getUserId());
                System.out.println(""SERVICE: "" + obtainUserComputationEntry.getServiceId());
                System.out.println(""IOI: "" + obtainUserComputationEntry.getIoi());
                System.out.println(""REPUTATION: "" + obtainUserRepurationResp.getReputation());
                System.out.println(""----------------------------------------------"");
                assertEquals(""The outcome field of the obtainUserReputation should be true: MESSAGE="" + obtainUserRepurationResp.getMessage(), true, obtainUserRepurationResp.isOutcome());
                assertEquals(0.0, obtainUserRepurationResp.getReputation(), 1.0);
            } catch (RemoteException e) {
                fail(e.getMessage());
            }
            obtainUserComputationEntry.setIoi(null);
            obtainUserComputationEntry.setServiceId(null);
            obtainUserComputationEntry.setUserId(ratedFileCommand.getUserId());
            obtainUserComputationEntry.setVbeId(ratedFileCommand.getVbeId());
            obtainUserComputationEntry.setVoId(ratedFileCommand.getVoId());
            try {
                obtainUserRepurationResp = trsPort.obtainUserReputation(obtainUserComputationEntry);
                System.out.println(""-----------R E P U T A T I O N----------------"");
                System.out.println(""VBE: "" + obtainUserComputationEntry.getVbeId());
                System.out.println(""VO: "" + obtainUserComputationEntry.getVoId());
                System.out.println(""USER: "" + obtainUserComputationEntry.getUserId());
                System.out.println(""SERVICE: "" + obtainUserComputationEntry.getServiceId());
                System.out.println(""IOI: "" + obtainUserComputationEntry.getIoi());
                System.out.println(""REPUTATION: "" + obtainUserRepurationResp.getReputation());
                System.out.println(""----------------------------------------------"");
                assertEquals(""The outcome field of the obtainUserReputation should be true: MESSAGE="" + obtainUserRepurationResp.getMessage(), true, obtainUserRepurationResp.isOutcome());
                assertEquals(0.0, obtainUserRepurationResp.getReputation(), 1.0);
            } catch (RemoteException e) {
                fail(e.getMessage());
            }
            url = wr.readLine();
        }
        bis.close();
        wr.close();
        out.flush();
        out.close();
    }
",LABEL_1,LABEL_1,LABEL_0,1,"simulate,out,file,obtainUserReputationRequest,obtainUserReputationResponse,rateUserRequest,rateUserResponse,fis,br,call","simulate:0.0013664960861206055,out:-0.005148589611053467,file:-0.0009334087371826172,obtainUserReputationRequest:0.0005307197570800781,obtainUserReputationResponse:-0.00010073184967041016,rateUserRequest:0.0008772611618041992,rateUserResponse:1.2874603271484375e-05,fis:0.000714421272277832,br:8.636713027954102e-05,call:-0.0003542304039001465,",8,64,0,"simulate:Simulator,rateUserRequest:ratedFileCommand,fis:bis,obtainUserReputationRequest:obtainUserComputationEntry,br:wr,rateUserResponse: rateFileResponse,obtainUserReputationResponse:obtainUserRepurationResp,call:url,",0,Greedy,575,0.120799923,replace,[]
434,"    public void uploadFile(File inputFile, String targetFile) throws IOException {
        System.out.println(""Uploading "" + inputFile.getName() + "" to "" + targetFile);
        File outputFile = new File(targetFile);
        if (targetFile.endsWith(""/"")) {
            outputFile = new File(outputFile, inputFile.getName());
        } else if (outputFile.getParentFile().exists() == false) {
            outputFile.getParentFile().mkdirs();
        }
        if (inputFile.renameTo(outputFile) == false) {
            InputStream in = new FileInputStream(inputFile);
            OutputStream out = new FileOutputStream(outputFile);
            byte[] line = new byte[16384];
            int bytes = -1;
            while ((bytes = in.read(line)) != -1) out.write(line, 0, bytes);
            in.close();
            out.close();
        }
    }
 <SPLIT>     private static void addFileToTarGz(TarArchiveOutputStream taro, String path, String base) throws IOException {
        File f = new File(path);
        String entryName = base + f.getName();
        FileInputStream goIn = new FileInputStream(f);
        TarArchiveEntry tarEntry = new TarArchiveEntry(f, entryName);
        taro.setLongFileMode(TarArchiveOutputStream.LONGFILE_GNU);
        taro.putArchiveEntry(tarEntry);
        if (f.isFile()) {
            IOUtils.copy(goIn, taro);
            taro.closeArchiveEntry();
        } else {
            taro.closeArchiveEntry();
            File[] children = f.listFiles();
            if (children != null) {
                for (File child : children) {
                    addFileToTarGz(taro, child.getAbsolutePath(), entryName + ""/"");
                }
            }
        }
        taro.close();
        goIn.close();
    }
",188,"    public void uploadFile(File inputFile, String targetFile) throws IOException {
        System.out.println(""Uploading "" + inputFile.getName() + "" to "" + targetFile);
        File OutputFolder = new File(targetFile);
        if (targetFile.endsWith(""/"")) {
            OutputFolder = new File(OutputFolder, inputFile.getName());
        } else if (OutputFolder.getParentFile().exists() == false) {
            OutputFolder.getParentFile().mkdirs();
        }
        if (inputFile.renameTo(OutputFolder) == false) {
            InputStream url = new FileInputStream(inputFile);
            OutputStream out = new FileOutputStream(OutputFolder);
            byte[] url = new byte[16384];
            int bytes = -1;
            while ((bytes = url.read(url)) != -1) out.write(url, 0, bytes);
            url.close();
            out.close();
        }
    }
",LABEL_1,LABEL_1,LABEL_0,1,"uploadFile,inputFile,targetFile,outputFile,in,out,line,bytes","uploadFile:0.0010001659393310547,inputFile:-0.002626180648803711,targetFile:-0.006042301654815674,outputFile:0.0006603002548217773,in:0.000699460506439209,out:-0.005386412143707275,line:0.000560760498046875,bytes:-0.0010681748390197754,",3,13,0,"uploadFile:uploadFile,in:url,outputFile:OutputFolder,line:url,",0,Greedy,192,0.028662531,replace,[]
435,"    private String transferWSDL(String wsdlURL, String userPassword) throws WiseConnectionException {
        String filePath = null;
        try {
            URL endpoint = new URL(wsdlURL);
            HttpURLConnection conn = (HttpURLConnection) endpoint.openConnection();
            conn.setDoOutput(false);
            conn.setDoInput(true);
            conn.setUseCaches(false);
            conn.setRequestMethod(""GET"");
            conn.setRequestProperty(""Accept"", ""text/xml,application/xml,application/xhtml+xml,text/html;q=0.9,text/plain;q=0.8,image/png,*/*;q=0.5"");
            conn.setRequestProperty(""Connection"", ""close"");
            if (userPassword != null) {
                conn.setRequestProperty(""Authorization"", ""Basic "" + (new BASE64Encoder()).encode(userPassword.getBytes()));
            }
            InputStream is = null;
            if (conn.getResponseCode() == 200) {
                is = conn.getInputStream();
            } else {
                is = conn.getErrorStream();
                InputStreamReader isr = new InputStreamReader(is);
                StringWriter sw = new StringWriter();
                char[] buf = new char[200];
                int read = 0;
                while (read != -1) {
                    read = isr.read(buf);
                    sw.write(buf);
                }
                throw new WiseConnectionException(""Remote server's response is an error: "" + sw.toString());
            }
            File outputDir = new File(wiseProperties.getProperty(""wise.tmpDir""));
            if (!outputDir.exists()) {
                outputDir.mkdir();
                wiseProperties.setProperty(""wise.forceImportObject"", ""true"");
            }
            File file = new File(wiseProperties.getProperty(""wise.tmpDir""), new StringBuffer(""Wise"").append(IDGenerator.nextVal()).append("".xml"").toString());
            OutputStream fos = new BufferedOutputStream(new FileOutputStream(file));
            IOUtils.copyStream(fos, is);
            fos.close();
            is.close();
            filePath = file.getPath();
        } catch (WiseConnectionException wce) {
            throw wce;
        } catch (Exception e) {
            throw new WiseConnectionException(""Wsdl download failed!"", e);
        }
        return filePath;
    }
 <SPLIT>     private static void recurseFiles(File root, File file, ZipArchiveOutputStream zaos, boolean absolute) throws IOException {
        if (file.isDirectory()) {
            File[] files = file.listFiles();
            for (File file2 : files) {
                recurseFiles(root, file2, zaos, absolute);
            }
        } else if ((!file.getName().endsWith("".zip"")) && (!file.getName().endsWith("".ZIP""))) {
            String filename = null;
            if (absolute) {
                filename = file.getAbsolutePath().substring(root.getAbsolutePath().length());
            } else {
                filename = file.getName();
            }
            ZipArchiveEntry zae = new ZipArchiveEntry(filename);
            zae.setSize(file.length());
            zaos.putArchiveEntry(zae);
            FileInputStream fis = new FileInputStream(file);
            IOUtils.copy(fis, zaos);
            zaos.closeArchiveEntry();
        }
    }
",409,,LABEL_1,LABEL_1,LABEL_1,-1,"transferWSDL,wsdlURL,userPassword,filePath,endpoint,conn,is,isr,sw,buf,read,outputDir,file,fos",,12,46,0,,0,GA,5725,1.05597858,failed,[]
436,"    public static void doVersionCheck(View view) {
        view.showWaitCursor();
        try {
            URL url = new URL(jEdit.getProperty(""version-check.url""));
            InputStream in = url.openStream();
            BufferedReader bin = new BufferedReader(new InputStreamReader(in));
            String line;
            String version = null;
            String build = null;
            while ((line = bin.readLine()) != null) {
                if (line.startsWith("".version"")) version = line.substring(8).trim(); else if (line.startsWith("".build"")) build = line.substring(6).trim();
            }
            bin.close();
            if (version != null && build != null) {
                if (jEdit.getBuild().compareTo(build) < 0) newVersionAvailable(view, version, url); else {
                    GUIUtilities.message(view, ""version-check"" + "".up-to-date"", new String[0]);
                }
            }
        } catch (IOException e) {
            String[] args = { jEdit.getProperty(""version-check.url""), e.toString() };
            GUIUtilities.error(view, ""read-error"", args);
        }
        view.hideWaitCursor();
    }
 <SPLIT>     public static String doPost(String URL, List<NameValuePair> params) {
        try {
            OauthUtil util = new OauthUtil();
            URI uri = new URI(URL);
            HttpClient httpclient = util.getNewHttpClient();
            HttpPost postMethod = new HttpPost(uri);
            StringBuffer paramString = new StringBuffer();
            paramString.append(""OAuth"");
            for (int i = 0; i < params.size(); i++) {
                paramString.append("" "" + params.get(i).getName());
                paramString.append(""=\"""" + encodeUrl(params.get(i).getValue()) + ""\"","");
            }
            String xx = paramString.substring(0, paramString.length() - 1);
            postMethod.addHeader(""Authorization"", xx);
            HttpResponse httpResponse = httpclient.execute(postMethod);
            if (httpResponse.getStatusLine().getStatusCode() == 200) {
                String strResult = EntityUtils.toString(httpResponse.getEntity());
                Log.i(""DEBUG"", ""result: "" + strResult);
                return strResult;
            }
        } catch (Exception e) {
            Log.i(""DEBUG"", e.toString());
        }
        return null;
    }
",250,"    public static void doVersionCheck(View view) {
        view.showWaitCursor();
        try {
            URL address = new URL(jEdit.getProperty(""version-check.url""));
            InputStream in = address.openStream();
            BufferedReader bin = new BufferedReader(new InputStreamReader(in));
            String line;
            String version = null;
            String build = null;
            while ((line = bin.readLine()) != null) {
                if (line.startsWith("".version"")) version = line.substring(8).trim(); else if (line.startsWith("".build"")) build = line.substring(6).trim();
            }
            bin.close();
            if (version != null && build != null) {
                if (jEdit.getBuild().compareTo(build) < 0) newVersionAvailable(view, version, address); else {
                    GUIUtilities.message(view, ""version-check"" + "".up-to-date"", new String[0]);
                }
            }
        } catch (IOException e) {
            String[] args = { jEdit.getProperty(""version-check.url""), e.toString() };
            GUIUtilities.error(view, ""read-error"", args);
        }
        view.hideWaitCursor();
    }
",LABEL_0,LABEL_0,LABEL_1,1,"doVersionCheck,view,url,in,bin,line,version,build","doVersionCheck:-0.017462491989135742,view:0.0038990378379821777,url:0.02626866102218628,in:0.003448307514190674,bin:-0.010680139064788818,line:-0.008902251720428467,version:-0.0014491677284240723,build:0.0005995035171508789,",1,3,0,"url:address,",0,Greedy,82,0.012850388,replace,[]
437,"    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        String rewrittenQueryString = URLDecoder.decode(request.getRequestURI(), ""UTF-8"").replaceFirst(""^.*?\\/(id:.*)\\/.*?$"", ""$1"");
        logger.debug(""rewrittenQueryString: "" + rewrittenQueryString);
        URL rewrittenUrl = new URL(fedoraUrl + rewrittenQueryString);
        logger.debug(""rewrittenUrl: "" + rewrittenUrl.getProtocol() + ""://"" + rewrittenUrl.getHost() + "":"" + rewrittenUrl.getPort() + rewrittenUrl.getFile());
        HttpURLConnection httpURLConnection = (HttpURLConnection) rewrittenUrl.openConnection();
        HttpURLConnection.setFollowRedirects(false);
        httpURLConnection.connect();
        response.setStatus(httpURLConnection.getResponseCode());
        logger.debug(""[status="" + httpURLConnection.getResponseCode() + ""]"");
        logger.debug(""[headers]"");
        for (Entry<String, List<String>> header : httpURLConnection.getHeaderFields().entrySet()) {
            if (header.getKey() != null) {
                for (String value : header.getValue()) {
                    if (value != null) {
                        logger.debug(header.getKey() + "": "" + value);
                        if (!header.getKey().equals(""Server"") && !header.getKey().equals(""Transfer-Encoding"")) {
                            response.addHeader(header.getKey(), value);
                        }
                    }
                }
            }
        }
        logger.debug(""[/headers]"");
        InputStream inputStream = httpURLConnection.getInputStream();
        OutputStream outputStream = response.getOutputStream();
        IOUtils.copy(inputStream, outputStream);
    }
 <SPLIT>     public Converter(String input, String output) {
        try {
            FileInputStream fis = new FileInputStream(new File(input));
            BufferedReader in = new BufferedReader(new InputStreamReader(fis, ""SJIS""));
            FileOutputStream fos = new FileOutputStream(new File(output));
            BufferedWriter out = new BufferedWriter(new OutputStreamWriter(fos, ""UTF8""));
            int len = 80;
            char buf[] = new char[len];
            int numRead;
            while ((numRead = in.read(buf, 0, len)) != -1) out.write(buf, 0, numRead);
            out.close();
            in.close();
        } catch (IOException e) {
            System.out.println(""An I/O Exception Occurred: "" + e);
        }
    }
",335,,LABEL_1,LABEL_0,,-4,"doGet,request,response,rewrittenQueryString,rewrittenUrl,httpURLConnection,header,value,inputStream,outputStream",,,,0,,0,Greedy,1,0.000490868,,[]
438,"    @Override
    public File call() throws IOException {
        HttpURLConnection conn = null;
        ReadableByteChannel fileDownloading = null;
        FileChannel fileWriting = null;
        try {
            conn = (HttpURLConnection) url.openConnection();
            if (size == -1) {
                size = conn.getContentLength();
            }
            fileDownloading = Channels.newChannel(conn.getInputStream());
            fileWriting = new FileOutputStream(file).getChannel();
            long left = size;
            long chunkSize = BLOCK_SIZE;
            for (long downloaded = 0; downloaded < size; left = size - downloaded) {
                if (left < BLOCK_SIZE) {
                    chunkSize = left;
                }
                fileWriting.transferFrom(fileDownloading, downloaded, chunkSize);
                downloaded += chunkSize;
                setProgress(downloaded);
            }
        } finally {
            if (file != null) {
                file.deleteOnExit();
            }
            if (conn != null) {
                conn.disconnect();
            }
            if (fileDownloading != null) {
                try {
                    fileDownloading.close();
                } catch (IOException ioe) {
                    Helper.logger.log(Level.SEVERE, ""Не удалось закрыть поток скачивания"", ioe);
                }
            }
            if (fileWriting != null) {
                try {
                    fileWriting.close();
                } catch (IOException ioe) {
                    Helper.logger.log(Level.SEVERE, ""Не удалось закрыть поток записи в файл"", ioe);
                }
            }
        }
        return file;
    }
 <SPLIT>     @Test
    public void test_validate_geo_getEvents() {
        try {
            SchemaFactory factory = SchemaFactory.newInstance(""http://www.w3.org/2001/XMLSchema"");
            File schemaLocation = new File(""tes.xsd"");
            Schema schema = factory.newSchema(schemaLocation);
            Validator validator = schema.newValidator();
            URL url = new URL(""http://ws.audioscrobbler.com/2.0/?method=geo.getevents&location=madrid&api_key=b25b959554ed76058ac220b7b2e0a026"");
            InputStream inputStream = url.openStream();
            Source source = new StreamSource(inputStream);
            validator.validate(source);
        } catch (IOException ex) {
            Logger.getLogger(GetEvents_Test.class.getName()).log(Level.SEVERE, null, ex);
            assertFalse(""File not found"", true);
        } catch (SAXException ex) {
            Logger.getLogger(GetEvents_Test.class.getName()).log(Level.SEVERE, null, ex);
            assertFalse(""Schema did not validate"", true);
        }
        assertTrue(true);
    }
",261,"    @Override
    public File call() throws IOException {
        HttpURLConnection ssl = null;
        ReadableByteChannel FileUploaduing = null;
        FileChannel Filewriting = null;
        try {
            ssl = (HttpURLConnection) url.openConnection();
            if (address == -1) {
                address = ssl.getContentLength();
            }
            FileUploaduing = Channels.newChannel(ssl.getInputStream());
            Filewriting = new FileOutputStream(file).getChannel();
            long sized = address;
            long chunkssize = BLOCK_SIZE;
            for (long downsloader = 0; downsloader < address; sized = address - downsloader) {
                if (sized < BLOCK_SIZE) {
                    chunkssize = sized;
                }
                Filewriting.transferFrom(FileUploaduing, downsloader, chunkssize);
                downsloader += chunkssize;
                setProgress(downsloader);
            }
        } finally {
            if (file != null) {
                file.deleteOnExit();
            }
            if (ssl != null) {
                ssl.disconnect();
            }
            if (FileUploaduing != null) {
                try {
                    FileUploaduing.close();
                } catch (IOException ioe) {
                    Helper.logger.log(Level.SEVERE, ""Не удалось закрыть поток скачивания"", ioe);
                }
            }
            if (Filewriting != null) {
                try {
                    Filewriting.close();
                } catch (IOException ioe) {
                    Helper.logger.log(Level.SEVERE, ""Не удалось закрыть поток записи в файл"", ioe);
                }
            }
        }
        return file;
    }
;fileWriting = 0;print(fileWriting);chunkSize = 0;transfer = 0;FileUploaduing = 0;FileWriting = 0;print(FileWriting);FileReading = 0; fileWritten = 0;urlWriting = 0;FileLoading = 0;print(FileLoading);FileWriter = 0;print(FileWriter)",LABEL_0,LABEL_0,LABEL_0,1,"call,conn,fileDownloading,fileWriting,size,left,chunkSize,downloaded","call:0.000580132007598877,conn:-8.869171142578125e-05,fileDownloading:0.0005380511283874512,fileWriting:0.00014346837997436523,size:0.00018590688705444336,left:0.00014734268188476562,chunkSize:0.0003681778907775879,downloaded:0.00010436773300170898,",7,35,0,"call:call,fileDownloading:FileUploaduing,chunkSize:chunkssize,size:address,left:sized,fileWriting:Filewriting,downloaded:downsloader,conn:ssl,",0,Greedy,844,0.153792401,inesrt,"[';fileWriting = 0', ';print(fileWriting)', ';chunkSize = 0', ';transfer = 0', ';FileUploaduing = 0', ';FileWriting = 0', ';print(FileWriting)', ';FileReading = 0', '; fileWritten = 0', ';urlWriting = 0', ';FileLoading = 0', ';print(FileLoading)', ';FileWriter = 0', ';print(FileWriter)']"
439,"    private void unJarStart(String jarPath, String jarEntryStart) {
        String path;
        if (jarPath.lastIndexOf(""lib/"") >= 0) path = jarPath.substring(0, jarPath.lastIndexOf(""lib/"")); else path = jarPath.substring(0, jarPath.lastIndexOf(""/""));
        String relPath = jarEntryStart.substring(0, jarEntryStart.lastIndexOf(""/""));
        try {
            new File(path + ""/"" + relPath).mkdirs();
            JarFile jar = new JarFile(jarPath);
            Enumeration<JarEntry> entries = jar.entries();
            while (entries.hasMoreElements()) {
                JarEntry entry = entries.nextElement();
                String jarEntry = entry.getName();
                if (jarEntry.startsWith(jarEntryStart)) {
                    ZipEntry ze = jar.getEntry(jarEntry);
                    File bin = new File(path + ""/"" + jarEntry);
                    IOUtils.copy(jar.getInputStream(ze), new FileOutputStream(bin));
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
 <SPLIT>     public void resolvePlugins() {
        try {
            File cacheDir = XPontusConfigurationConstantsIF.XPONTUS_CACHE_DIR;
            File pluginsFile = new File(cacheDir, ""plugins.xml"");
            if (!pluginsFile.exists()) {
                URL pluginURL = new URL(""http://xpontus.sourceforge.net/snapshot/plugins.xml"");
                InputStream is = pluginURL.openStream();
                OutputStream os = FileUtils.openOutputStream(pluginsFile);
                IOUtils.copy(is, os);
                IOUtils.closeQuietly(os);
                IOUtils.closeQuietly(is);
            }
            resolvePlugins(pluginsFile.getAbsolutePath());
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
",220,,LABEL_1,LABEL_1,LABEL_1,-1,"unJarStart,jarPath,jarEntryStart,path,relPath,jar,entries,entry,jarEntry,ze,bin",,11,37,0,,0,GA,5275,0.83504351,failed,"[';unJarStart = 0', ';print(unJarStart)', ';print(jarPath)', ';jarEntryStart = 0', ';print(jarEntryStart)', ';path = 0', ';conn = 0', ';route = 0', ';graph = 0']"
440,"    public static void main(String args[]) throws IOException {
        BufferedReader in = new BufferedReader(new FileReader(args[0]));
        Writer out = new FileWriter(args[1]);
        out = new WrapFilter(new BufferedWriter(out), 40);
        out = new TitleCaseFilter(out);
        String line;
        while ((line = in.readLine()) != null) out.write(line + ""\n"");
        out.close();
        in.close();
    }
 <SPLIT>     public String digest(String message) throws NoSuchAlgorithmException, EncoderException {
        MessageDigest messageDigest = MessageDigest.getInstance(""SHA-256"");
        messageDigest.update(message.getBytes());
        byte[] raw = messageDigest.digest();
        byte[] chars = new Base64().encode(raw);
        return new String(chars);
    }
",105,"    public static void main(String args[]) throws IOException {
        BufferedReader login = new BufferedReader(new FileReader(args[0]));
        Writer password = new FileWriter(args[1]);
        password = new WrapFilter(new BufferedWriter(password), 40);
        password = new TitleCaseFilter(password);
        String end;
        while ((end = login.readLine()) != null) password.write(end + ""
"");
        password.close();
        login.close();
    }
;in = 0",LABEL_0,LABEL_0,LABEL_0,1,"in,out,line","in:-0.011319577693939209,out:0.013763129711151123,line:-0.004922688007354736,",3,13,0,"out:password,line:end,in:login,",0,Greedy,184,0.02437948,inesrt,[';in = 0']
441,"    public void testTransactions() throws Exception {
        con = TestUtil.openDB();
        Statement st;
        ResultSet rs;
        con.setAutoCommit(false);
        assertTrue(!con.getAutoCommit());
        con.setAutoCommit(true);
        assertTrue(con.getAutoCommit());
        st = con.createStatement();
        st.executeUpdate(""insert into test_a (imagename,image,id) values ('comttest',1234,5678)"");
        con.setAutoCommit(false);
        st.executeUpdate(""update test_a set image=9876 where id=5678"");
        con.commit();
        rs = st.executeQuery(""select image from test_a where id=5678"");
        assertTrue(rs.next());
        assertEquals(9876, rs.getInt(1));
        rs.close();
        st.executeUpdate(""update test_a set image=1111 where id=5678"");
        con.rollback();
        rs = st.executeQuery(""select image from test_a where id=5678"");
        assertTrue(rs.next());
        assertEquals(9876, rs.getInt(1));
        rs.close();
        TestUtil.closeDB(con);
    }
 <SPLIT>     private boolean getWave(String url, String Word) {
        try {
            File FF = new File(f.getParent() + ""/"" + f.getName() + ""pron"");
            FF.mkdir();
            URL url2 = new URL(url);
            BufferedReader stream = new BufferedReader(new InputStreamReader(url2.openStream()));
            File Fdel = new File(f.getParent() + ""/"" + f.getName() + ""pron/"" + Word + "".wav"");
            if (!Fdel.exists()) {
                FileOutputStream outstream = new FileOutputStream(f.getParent() + ""/"" + f.getName() + ""pron/"" + Word + "".wav"");
                BufferedWriter bwriter = new BufferedWriter(new OutputStreamWriter(outstream));
                char[] binput = new char[1024];
                int len = stream.read(binput, 0, 1024);
                while (len > 0) {
                    bwriter.write(binput, 0, len);
                    len = stream.read(binput, 0, 1024);
                }
                bwriter.close();
                outstream.close();
            }
            stream.close();
        } catch (Exception e) {
            System.out.println(e.getMessage());
            return false;
        }
        return true;
    }
",194,,LABEL_0,LABEL_0,LABEL_0,-1,"testTransactions,con,st,rs",,0,0,0,,0,GA,1238,0.219454034,failed,[]
442,"    @Override
    public void trainClassifier(File dir, String... args) throws Exception {
        String[] command = new String[args.length + 3];
        command[0] = this.getCommand();
        System.arraycopy(args, 0, command, 1, args.length);
        command[command.length - 2] = new File(dir, ""training-data.libsvm"").getPath();
        command[command.length - 1] = new File(dir, this.getModelName()).getPath();
        Process process = Runtime.getRuntime().exec(command);
        IOUtils.copy(process.getInputStream(), System.out);
        IOUtils.copy(process.getErrorStream(), System.err);
        process.waitFor();
    }
 <SPLIT>     @Override
    protected void parseContent(StreamLimiter streamLimiter, LanguageEnum forcedLang) throws IOException {
        String charset = null;
        IndexDocument sourceDocument = getSourceDocument();
        if (sourceDocument != null && urlItemFieldEnum != null) {
            FieldValueItem fieldValueItem = sourceDocument.getFieldValue(urlItemFieldEnum.contentTypeCharset.getName(), 0);
            if (fieldValueItem != null) charset = fieldValueItem.getValue();
            if (charset == null) {
                fieldValueItem = sourceDocument.getFieldValue(urlItemFieldEnum.contentEncoding.getName(), 0);
                if (fieldValueItem != null) charset = fieldValueItem.getValue();
            }
        }
        boolean charsetWasNull = charset == null;
        if (charsetWasNull) charset = getProperty(ClassPropertyEnum.DEFAULT_CHARSET).getValue();
        StringWriter writer = new StringWriter();
        IOUtils.copy(streamLimiter.getNewInputStream(), writer, charset);
        addField(ParserFieldEnum.htmlSource, writer.toString());
        writer.close();
        HtmlDocumentProvider htmlProvider = findBestProvider(charset, streamLimiter);
        if (htmlProvider == null) return;
        addField(ParserFieldEnum.htmlProvider, htmlProvider.getName());
        String contentType = htmlProvider.getMetaHttpEquiv(""content-type"");
        String contentTypeCharset = null;
        if (contentType != null) {
            contentTypeCharset = MimeUtils.extractContentTypeCharset(contentType);
            if (contentTypeCharset != null && !contentTypeCharset.equals(charset)) charsetWasNull = true;
        }
        if (charsetWasNull) {
            if (contentTypeCharset != null) charset = contentTypeCharset; else charset = htmlProvider.getMetaCharset();
            if (charset != null) htmlProvider = findBestProvider(charset, streamLimiter);
        }
        HtmlNodeAbstract<?> rootNode = htmlProvider.getRootNode();
        if (rootNode == null) return;
        for (HtmlNodeAbstract<?> metaNode : htmlProvider.getMetas()) {
            String metaName = metaNode.getAttributeText(""name"");
            if (metaName != null && metaName.startsWith(OPENSEARCHSERVER_FIELD)) {
                String field = metaName.substring(OPENSEARCHSERVER_FIELD_LENGTH);
                String[] fields = field.split(""\\."");
                if (fields != null) {
                    String content = metaNode.getAttributeText(""content"");
                    addDirectFields(fields, content);
                }
            }
        }
        addField(ParserFieldEnum.charset, charset);
        addFieldTitle(htmlProvider.getTitle());
        String metaRobots = null;
        String metaDcLanguage = null;
        String metaContentLanguage = null;
        for (HtmlNodeAbstract<?> node : htmlProvider.getMetas()) {
            String attr_name = node.getAttributeText(""name"");
            String attr_http_equiv = node.getAttributeText(""http-equiv"");
            if (""keywords"".equalsIgnoreCase(attr_name)) addField(ParserFieldEnum.meta_keywords, HtmlDocumentProvider.getMetaContent(node)); else if (""description"".equalsIgnoreCase(attr_name)) addField(ParserFieldEnum.meta_description, HtmlDocumentProvider.getMetaContent(node)); else if (""robots"".equalsIgnoreCase(attr_name)) metaRobots = HtmlDocumentProvider.getMetaContent(node); else if (""dc.language"".equalsIgnoreCase(attr_name)) metaDcLanguage = HtmlDocumentProvider.getMetaContent(node); else if (""content-language"".equalsIgnoreCase(attr_http_equiv)) metaContentLanguage = HtmlDocumentProvider.getMetaContent(node);
        }
        boolean metaRobotsFollow = true;
        boolean metaRobotsNoIndex = false;
        if (metaRobots != null) {
            metaRobots = metaRobots.toLowerCase();
            if (metaRobots.contains(""noindex"")) {
                metaRobotsNoIndex = true;
                addField(ParserFieldEnum.meta_robots, ""noindex"");
            }
            if (metaRobots.contains(""nofollow"")) {
                metaRobotsFollow = false;
                addField(ParserFieldEnum.meta_robots, ""nofollow"");
            }
        }
        UrlFilterItem[] urlFilterList = getUrlFilterList();
        List<HtmlNodeAbstract<?>> nodes = rootNode.getAllNodes(""a"", ""frame"");
        IndexDocument srcDoc = getSourceDocument();
        if (srcDoc != null && nodes != null && metaRobotsFollow) {
            URL currentURL = htmlProvider.getBaseHref();
            if (currentURL == null && urlItemFieldEnum != null) {
                FieldValueItem fvi = srcDoc.getFieldValue(urlItemFieldEnum.url.getName(), 0);
                if (fvi != null) currentURL = new URL(fvi.getValue());
            }
            for (HtmlNodeAbstract<?> node : nodes) {
                String href = null;
                String rel = null;
                String nodeName = node.getNodeName();
                if (""a"".equals(nodeName)) {
                    href = node.getAttributeText(""href"");
                    rel = node.getAttributeText(""rel"");
                } else if (""frame"".equals(nodeName)) {
                    href = node.getAttributeText(""src"");
                }
                boolean follow = true;
                if (rel != null) if (rel.contains(""nofollow"")) follow = false;
                URL newUrl = null;
                if (href != null) if (!href.startsWith(""javascript:"")) if (currentURL != null) newUrl = LinkUtils.getLink(currentURL, href, urlFilterList);
                if (newUrl != null) {
                    ParserFieldEnum field = null;
                    if (newUrl.getHost().equalsIgnoreCase(currentURL.getHost())) {
                        if (follow) field = ParserFieldEnum.internal_link; else field = ParserFieldEnum.internal_link_nofollow;
                    } else {
                        if (follow) field = ParserFieldEnum.external_link; else field = ParserFieldEnum.external_link_nofollow;
                    }
                    addField(field, newUrl.toExternalForm());
                }
            }
        }
        if (!metaRobotsNoIndex) {
            nodes = rootNode.getNodes(""html"", ""body"");
            if (nodes == null || nodes.size() == 0) nodes = rootNode.getNodes(""html"");
            if (nodes != null && nodes.size() > 0) {
                StringBuffer sb = new StringBuffer();
                getBodyTextContent(sb, nodes.get(0), true, null);
                addField(ParserFieldEnum.body, sb);
            }
        }
        Locale lang = null;
        String langMethod = null;
        String[] pathHtml = { ""html"" };
        nodes = rootNode.getNodes(pathHtml);
        if (nodes != null && nodes.size() > 0) {
            langMethod = ""html lang attribute"";
            String l = nodes.get(0).getAttributeText(""lang"");
            if (l != null) lang = Lang.findLocaleISO639(l);
        }
        if (lang == null && metaContentLanguage != null) {
            langMethod = ""meta http-equiv content-language"";
            lang = Lang.findLocaleISO639(metaContentLanguage);
        }
        if (lang == null && metaDcLanguage != null) {
            langMethod = ""meta dc.language"";
            lang = Lang.findLocaleISO639(metaDcLanguage);
        }
        if (lang != null) {
            addField(ParserFieldEnum.lang, lang.getLanguage());
            addField(ParserFieldEnum.lang_method, langMethod);
        } else if (!metaRobotsNoIndex) lang = langDetection(10000, ParserFieldEnum.body);
    }
",159,,LABEL_1,LABEL_0,,-4,"trainClassifier,dir,command,length,process",,,,0,,0,Greedy,1,0.000787024,,[]
443,"    public static final synchronized String hash(String data) {
        if (digest == null) {
            try {
                digest = MessageDigest.getInstance(""MD5"");
            } catch (NoSuchAlgorithmException nsae) {
                log.error(""Failed to load the MD5 MessageDigest. "" + ""Jive will be unable to function normally."", nsae);
            }
        }
        try {
            digest.update(data.getBytes(""utf-8""));
        } catch (UnsupportedEncodingException e) {
            log.error(e);
        }
        return encodeHex(digest.digest());
    }
 <SPLIT>     @Override
    public String getMessageDigest() throws SarasvatiLoadException {
        if (messageDigest == null) {
            Collections.sort(nodes);
            Collections.sort(externals);
            try {
                MessageDigest digest = MessageDigest.getInstance(""SHA1"");
                digest.update(name.getBytes());
                for (XmlNode node : nodes) {
                    node.addToDigest(digest);
                }
                for (XmlExternal external : externals) {
                    external.addToDigest(digest);
                }
                messageDigest = SvUtil.getHexString(digest.digest());
            } catch (NoSuchAlgorithmException nsae) {
                throw new SarasvatiException(""Unable to load SHA1 algorithm"", nsae);
            }
        }
        return messageDigest;
    }
",98,,LABEL_1,LABEL_1,LABEL_1,-1,"hash,data,digest",,3,8,0,,0,GA,1231,0.184649515,failed,"[';hash = 0', ';print(hash)']"
444,"    private static boolean genCustRatingFileAndMovieIndexFile(String completePath, String masterFile, String CustRatingFileName, String MovieIndexFileName) {
        try {
            File inFile = new File(completePath + fSep + ""SmartGRAPE"" + fSep + masterFile);
            FileChannel inC = new FileInputStream(inFile).getChannel();
            File outFile1 = new File(completePath + fSep + ""SmartGRAPE"" + fSep + MovieIndexFileName);
            FileChannel outC1 = new FileOutputStream(outFile1, true).getChannel();
            File outFile2 = new File(completePath + fSep + ""SmartGRAPE"" + fSep + CustRatingFileName);
            FileChannel outC2 = new FileOutputStream(outFile2, true).getChannel();
            int fileSize = (int) inC.size();
            int totalNoDataRows = fileSize / 7;
            ByteBuffer mappedBuffer = inC.map(FileChannel.MapMode.READ_ONLY, 0, fileSize);
            int startIndex = 1, count = 0;
            short currentMovie = 1;
            while (mappedBuffer.hasRemaining()) {
                count++;
                short movieName = mappedBuffer.getShort();
                int customer = mappedBuffer.getInt();
                byte rating = mappedBuffer.get();
                if (movieName != currentMovie) {
                    ByteBuffer outBuf1 = ByteBuffer.allocate(10);
                    outBuf1.putShort(currentMovie);
                    outBuf1.putInt(startIndex);
                    outBuf1.putInt(count - 1);
                    outBuf1.flip();
                    outC1.write(outBuf1);
                    currentMovie = movieName;
                    startIndex = count;
                }
                ByteBuffer outBuf2 = ByteBuffer.allocate(5);
                outBuf2.putInt(customer);
                outBuf2.put(rating);
                outBuf2.flip();
                outC2.write(outBuf2);
            }
            ByteBuffer endOfIndexFile = ByteBuffer.allocate(10);
            endOfIndexFile.putShort(currentMovie);
            endOfIndexFile.putInt(startIndex);
            endOfIndexFile.putInt(100480506);
            endOfIndexFile.flip();
            outC1.write(endOfIndexFile);
            outC1.close();
            outC2.close();
            return true;
        } catch (IOException e) {
            System.err.println(e);
            return false;
        }
    }
 <SPLIT>     public static File copyFile(File fileToCopy, File copiedFile) {
        BufferedInputStream in = null;
        BufferedOutputStream outWriter = null;
        if (!copiedFile.exists()) {
            try {
                copiedFile.createNewFile();
            } catch (IOException e1) {
                e1.printStackTrace();
                return null;
            }
        }
        try {
            in = new BufferedInputStream(new FileInputStream(fileToCopy), 4096);
            outWriter = new BufferedOutputStream(new FileOutputStream(copiedFile), 4096);
            int c;
            while ((c = in.read()) != -1) outWriter.write(c);
            in.close();
            outWriter.close();
        } catch (FileNotFoundException e) {
            e.printStackTrace();
            return null;
        } catch (IOException e) {
            e.printStackTrace();
            return null;
        }
        return copiedFile;
    }
",391,"    private static boolean genCustRatingFileAndmovieindexFile(String execpath, String MasterFiles, String CustRatingFilesName, String MovieIndexClassUrl) {
        try {
            Fi inSourceFileile = new File(execpath + fSep + ""SmartGRAPE"" + fSep + MasterFiles);
            FileChannel inC = noutCLFileInputStream( inSourceFile).getChannel();
            FoutCFirstile1 = new File(execpath + fSep + ""SmartGRAPE"" + fSep + MovieIndexClassUrl);
            FileChannel ooutCOne= new FileOutputStream(outCFirst, true).getChannel();
            FioutFiles1le2 = new File(execpath + fSep + ""SmartGRAPE"" + fSep + CustRatingFilesName);
            FileChannel ooutFII= new FileOutputStream(outFiles1, true).getChannel();
            int fibufferMode (int) outCL.size();
            int tototalNoPageROWS bufferMode / 7;
            ByteBuffer mappmapedBufferutCL.map(FileChannel.MapMode.READ_ONLY, 0, bufferMode);
            int initIndex = 1, code = 0;
            short currentmovie = 1;
            while (mapedBuffer.hasRemaining()) {
                code++;
                shortmovieIde = mapedBuffer.getShort();
                int customERr = mapedBuffer.getInt();
                byteurlg = mapedBuffer.get();
                if (movieId != currentmovie) {
                    ByteBuffer outBaf1 = ByteBuffer.allocate(10);
                    outBaf1.putShort(currentmovie);
                   outBaf11.putInt(initIndex);
                   outBaf11.putInt(code - 1);
                    outBaf1.flip();
                    outCOne.write(outBaf1);
                    currentmovie = movieId;
                    initIndex = code;
                }
                ByteBuffer outWBbuff2 = ByteBuffer.allocate(5);
                ooutWBbuff2putInt( customER);
             outWBbuff2uf2.put(url);
                outWBbuff2.flip();
                outFII.write(outWBbuff2);
            }
            ByteBuffer endOfImageFiles = ByteBuffer.allocate(10);
            endOfImageFiles.putShort(currentmovie);
           endOfImageFilese.putInt(initIndex);
            endOfImageFiles.putInt(100480506);
            endOfImageFiles.flip();
            outCOne.write(endOfImageFiles);
            outCOne.close();
            outFII.close();
            return true;
        } catch (IOException e) {
            System.err.println(e);
            return false;
        }
    }
",LABEL_1,LABEL_1,0.560989499,1,"genCustRatingFileAndMovieIndexFile,completePath,masterFile,CustRatingFileName,MovieIndexFileName,inFile,inC,outFile1,outC1,outFile2,outC2,fileSize,totalNoDataRows,mappedBuffer,startIndex,count,currentMovie,movieName,customer,rating,outBuf1,outBuf2,endOfIndexFile",,23,73,0,"genCustRatingFileAndMovieIndexFile:genCustRatingFileAndmovieindexFile,completePath:execpath,masterFile:MasterFiles,CustRatingFileName:CustRatingFilesName,MovieIndexFileName:MovieIndexClassUrl,inFile: inSourceFile,inC:outCL,outFile1:outCFirst,outC1:outCOne,outFile2:outFiles1,outC2:outFII,fileSize:bufferMode,totalNoDataRows:totalNoPageROWS,mappedBuffer:mapedBuffer,startIndex:initIndex,count:code,currentMovie:currentmovie,movieName:movieId,customer: customER,rating:url,outBuf1:outBaf1,outBuf2:outWBbuff2,endOfIndexFile:endOfImageFiles,",0,GA,7714,1.428193895,ga,[]
445,"    private InputStream sendRequest(SequenceI seq) throws UnsupportedEncodingException, IOException {
        StringBuilder putBuf = new StringBuilder();
        processOptions(putBuf);
        putBuf.append(""INPUT_SEQUENCE="");
        putBuf.append(URLEncoder.encode("">"" + seq.getName() + ""\n"", ENCODING));
        putBuf.append(URLEncoder.encode(seq.getResidues(), ENCODING));
        URL url = new URL(PRIMER_BLAST_URL);
        URLConnection conn = url.openConnection();
        conn.setDoOutput(true);
        OutputStreamWriter wr = new OutputStreamWriter(conn.getOutputStream());
        wr.write(putBuf.toString());
        wr.flush();
        wr.close();
        apollo.util.IOUtil.informationDialog(""Primer-BLAST request sent"");
        return conn.getInputStream();
    }
 <SPLIT>     public void convert(File src, File dest) throws IOException {
        InputStream in = new BufferedInputStream(new FileInputStream(src));
        DcmParser p = pfact.newDcmParser(in);
        Dataset ds = fact.newDataset();
        p.setDcmHandler(ds.getDcmHandler());
        try {
            FileFormat format = p.detectFileFormat();
            if (format != FileFormat.ACRNEMA_STREAM) {
                System.out.println(""\n"" + src + "": not an ACRNEMA stream!"");
                return;
            }
            p.parseDcmFile(format, Tags.PixelData);
            if (ds.contains(Tags.StudyInstanceUID) || ds.contains(Tags.SeriesInstanceUID) || ds.contains(Tags.SOPInstanceUID) || ds.contains(Tags.SOPClassUID)) {
                System.out.println(""\n"" + src + "": contains UIDs!"" + "" => probable already DICOM - do not convert"");
                return;
            }
            boolean hasPixelData = p.getReadTag() == Tags.PixelData;
            boolean inflate = hasPixelData && ds.getInt(Tags.BitsAllocated, 0) == 12;
            int pxlen = p.getReadLength();
            if (hasPixelData) {
                if (inflate) {
                    ds.putUS(Tags.BitsAllocated, 16);
                    pxlen = pxlen * 4 / 3;
                }
                if (pxlen != (ds.getInt(Tags.BitsAllocated, 0) >>> 3) * ds.getInt(Tags.Rows, 0) * ds.getInt(Tags.Columns, 0) * ds.getInt(Tags.NumberOfFrames, 1) * ds.getInt(Tags.NumberOfSamples, 1)) {
                    System.out.println(""\n"" + src + "": mismatch pixel data length!"" + "" => do not convert"");
                    return;
                }
            }
            ds.putUI(Tags.StudyInstanceUID, uid(studyUID));
            ds.putUI(Tags.SeriesInstanceUID, uid(seriesUID));
            ds.putUI(Tags.SOPInstanceUID, uid(instUID));
            ds.putUI(Tags.SOPClassUID, classUID);
            if (!ds.contains(Tags.NumberOfSamples)) {
                ds.putUS(Tags.NumberOfSamples, 1);
            }
            if (!ds.contains(Tags.PhotometricInterpretation)) {
                ds.putCS(Tags.PhotometricInterpretation, ""MONOCHROME2"");
            }
            if (fmi) {
                ds.setFileMetaInfo(fact.newFileMetaInfo(ds, UIDs.ImplicitVRLittleEndian));
            }
            OutputStream out = new BufferedOutputStream(new FileOutputStream(dest));
            try {
            } finally {
                ds.writeFile(out, encodeParam());
                if (hasPixelData) {
                    if (!skipGroupLen) {
                        out.write(PXDATA_GROUPLEN);
                        int grlen = pxlen + 8;
                        out.write((byte) grlen);
                        out.write((byte) (grlen >> 8));
                        out.write((byte) (grlen >> 16));
                        out.write((byte) (grlen >> 24));
                    }
                    out.write(PXDATA_TAG);
                    out.write((byte) pxlen);
                    out.write((byte) (pxlen >> 8));
                    out.write((byte) (pxlen >> 16));
                    out.write((byte) (pxlen >> 24));
                }
                if (inflate) {
                    int b2, b3;
                    for (; pxlen > 0; pxlen -= 3) {
                        out.write(in.read());
                        b2 = in.read();
                        b3 = in.read();
                        out.write(b2 & 0x0f);
                        out.write(b2 >> 4 | ((b3 & 0x0f) << 4));
                        out.write(b3 >> 4);
                    }
                } else {
                    for (; pxlen > 0; --pxlen) {
                        out.write(in.read());
                    }
                }
                out.close();
            }
            System.out.print('.');
        } finally {
            in.close();
        }
    }
",162,"    private InputStream sendRequest(SequenceI file) throws UnsupportedEncodingException, IOException {
        StringBuilder putBuf = new StringBuilder();
        processOptions(putBuf);
        putBuf.append(""INPUT_SEQUENCE="");
        putBuf.append(URLEncoder.encode("">"" + file.getName() + ""
"", ENCODING));
        putBuf.append(URLEncoder.encode(file.getResidues(), ENCODING));
        URL file = new URL(PRIMER_BLAST_URL);
        URLConnection conn = file.openConnection();
        conn.setDoOutput(true);
        OutputStreamWriter wr = new OutputStreamWriter(conn.getOutputStream());
        wr.write(putBuf.toString());
        wr.flush();
        wr.close();
        apollo.util.IOUtil.informationDialog(""Primer-BLAST request sent"");
        return conn.getInputStream();
    }
",LABEL_0,LABEL_0,LABEL_1,1,"sendRequest,seq,IOException,putBuf,url,conn,wr","sendRequest:-6.556510925292969e-06,seq:-4.5299530029296875e-06,IOException:-8.106231689453125e-06,putBuf:-5.424022674560547e-05,url:-5.960464477539062e-07,conn:-7.62939453125e-06,wr:-5.245208740234375e-06,",2,5,0,"url:file,seq:file,",0,Greedy,112,0.020136154,replace,[]
446,"    private String logonToServer(FTPClient ftpClient, String ftpAddress, int noRetries) {
        String remoteHomeDir = null;
        noRetriesSoFar = 0;
        while (true) {
            try {
                ftpClient.connect(ftpAddress, ftpPort);
                int reply = ftpClient.getReplyCode();
                if (!FTPReply.isPositiveCompletion(reply)) {
                    ftpClient.disconnect();
                    throw new IOException();
                }
                if (!ftpClient.login(user, password)) {
                    throw new IOException();
                }
                remoteHomeDir = ftpClient.printWorkingDirectory();
                msgEntry.setAppContext(""logonToServer()"");
                msgEntry.setMessageText(""Logged into FTP server "" + ftpAddress + "":"" + ftpPort + "" as user "" + user);
                logger.logProcess(msgEntry);
                break;
            } catch (IOException e) {
                logoutAndDisconnect(ftpClient);
                if (noRetriesSoFar++ < noRetries) {
                    waitBetweenRetry();
                    notifyAndStartWaitingFlag = false;
                } else {
                    notifyAndStartWaitingFlag = true;
                    errEntry.setThrowable(e);
                    errEntry.setAppContext(""logonToServer()"");
                    errEntry.setAppMessage(""Unable to login after "" + (noRetriesSoFar - 1) + "" retries. Max Retries.\n"" + ""Address:"" + ftpAddress + ""\n"" + ""User:"" + user);
                    errEntry.setSubjectSendEmail(""Unable to login to "" + ftpAddress + "" after "" + (noRetriesSoFar - 1) + "" retries."");
                    logger.logError(errEntry);
                    break;
                }
            }
        }
        return remoteHomeDir;
    }
 <SPLIT>     public static boolean copyFile(String sourceName, String destName) {
        FileChannel sourceChannel = null;
        FileChannel destChannel = null;
        boolean wasOk = false;
        try {
            sourceChannel = new FileInputStream(sourceName).getChannel();
            destChannel = new FileOutputStream(destName).getChannel();
            destChannel.transferFrom(sourceChannel, 0, sourceChannel.size());
            wasOk = true;
        } catch (Throwable exception) {
            logger.log(Level.SEVERE, ""Exception in copyFile"", exception);
        } finally {
            try {
                if (sourceChannel != null) sourceChannel.close();
            } catch (Throwable tt) {
            }
            try {
                if (destChannel != null) destChannel.close();
            } catch (Throwable tt) {
            }
        }
        return wasOk;
    }
",269,,LABEL_0,LABEL_0,LABEL_0,-1,"logonToServer,ftpClient,ftpAddress,noRetries,remoteHomeDir,noRetriesSoFar,reply",,1,5,0,,0,GA,3450,0.575558718,failed,"[';logonToServer = 0', ';print(logonToServer)', ';ftpClient = 0', ';print(ftpClient)', ';ftpAddress = 0', ';ftcpAPI = 0', ';ftbclient = 0', ';ftbConn = 0', ';ftcpPort = 0', '; ftpCloud = 0', ';ftpConnect = 0', ';ftpaCloud = 0']"
447,"    public BufferedWriter createOutputStream(String inFile, String outFile) throws IOException {
        int k_blockSize = 1024;
        int byteCount;
        char[] buf = new char[k_blockSize];
        File ofp = new File(outFile);
        ZipOutputStream zos = new ZipOutputStream(new FileOutputStream(ofp));
        zos.setMethod(ZipOutputStream.DEFLATED);
        OutputStreamWriter osw = new OutputStreamWriter(zos, ""ISO-8859-1"");
        BufferedWriter bw = new BufferedWriter(osw);
        ZipEntry zot = null;
        File ifp = new File(inFile);
        ZipInputStream zis = new ZipInputStream(new FileInputStream(ifp));
        InputStreamReader isr = new InputStreamReader(zis, ""ISO-8859-1"");
        BufferedReader br = new BufferedReader(isr);
        ZipEntry zit = null;
        while ((zit = zis.getNextEntry()) != null) {
            if (zit.getName().equals(""content.xml"")) {
                continue;
            }
            zot = new ZipEntry(zit.getName());
            zos.putNextEntry(zot);
            while ((byteCount = br.read(buf, 0, k_blockSize)) >= 0) bw.write(buf, 0, byteCount);
            bw.flush();
            zos.closeEntry();
        }
        zos.putNextEntry(new ZipEntry(""content.xml""));
        bw.flush();
        osw = new OutputStreamWriter(zos, ""UTF8"");
        bw = new BufferedWriter(osw);
        return bw;
    }
 <SPLIT>     public InputSource resolveEntity(String publicId, String systemId) {
        String resolved = getResolvedEntity(publicId, systemId);
        if (resolved != null) {
            try {
                InputSource iSource = new InputSource(resolved);
                iSource.setPublicId(publicId);
                URL url = new URL(resolved);
                InputStream iStream = url.openStream();
                iSource.setByteStream(iStream);
                return iSource;
            } catch (Exception e) {
                catalogManager.debug.message(1, ""Failed to create InputSource ("" + e.toString() + "")"", resolved);
                return null;
            }
        }
        return null;
    }
",279,,LABEL_0,LABEL_1,,-4,"createOutputStream,inFile,outFile,k_blockSize,byteCount,buf,ofp,zos,osw,bw,zot,ifp,zis,isr,br,zit",,,,0,,0,Greedy,1,0.000446685,,[]
448,"    @Digester(forField = ""password"")
    public static String encriptPassword(String passwd) {
        try {
            MessageDigest md = MessageDigest.getInstance(""MD5"");
            md.update(passwd.getBytes());
            BigInteger hash = new BigInteger(1, md.digest());
            return hash.toString(16);
        } catch (Exception e) {
            return null;
        }
    }
 <SPLIT>     public static void copyFile(File from, File to) throws IOException {
        if (from.isDirectory()) {
            if (!to.exists()) {
                to.mkdir();
            }
            File[] children = from.listFiles();
            for (int i = 0; i < children.length; i++) {
                if (children[i].getName().equals(""."") || children[i].getName().equals("".."")) {
                    continue;
                }
                if (children[i].isDirectory()) {
                    File f = new File(to, children[i].getName());
                    copyFile(children[i], f);
                } else {
                    copyFile(children[i], to);
                }
            }
        } else if (from.isFile() && (to.isDirectory() || to.isFile())) {
            if (to.isDirectory()) {
                to = new File(to, from.getName());
            }
            FileInputStream in = new FileInputStream(from);
            FileOutputStream out = new FileOutputStream(to);
            byte[] buf = new byte[32678];
            int read;
            while ((read = in.read(buf)) > -1) {
                out.write(buf, 0, read);
            }
            closeStream(in);
            closeStream(out);
        }
    }
",79,,LABEL_0,LABEL_0,LABEL_0,-1,"encriptPassword,passwd,md,hash",,1,1,0,,0,GA,1443,0.219760482,failed,"[';encriptPassword = 0', ';print(encriptPassword)', '; descriptSecret = 0', ';mad = 0']"
449,"    protected ExternalDecoder(InputStream source, Process process) {
        super(source);
        this.process = process;
        this.processStdOut = process.getInputStream();
        this.processStdIn = process.getOutputStream();
        new Thread() {

            @Override
            public void run() {
                try {
                    IOUtils.copy(getSource(), processStdIn);
                    System.err.println(""Copy done."");
                    close();
                } catch (IOException e) {
                    e.printStackTrace();
                    IOUtils.closeQuietly(ExternalDecoder.this);
                }
            }
        }.start();
    }
 <SPLIT>     private static void copyFile(String src, String target) throws IOException {
        FileChannel ic = new FileInputStream(src).getChannel();
        FileChannel oc = new FileOutputStream(target).getChannel();
        ic.transferTo(0, ic.size(), oc);
        ic.close();
        oc.close();
    }
",113,,LABEL_1,LABEL_1,LABEL_1,-1,"source,process,processStdOut,processStdIn",,4,10,0,,0,GA,1459,0.212073421,failed,"[';status = 0', ';processStdinOut = 0', ';processSTdinOUT = 0']"
450,"    private static boolean genCustRatingFileAndMovieIndexFile(String completePath, String masterFile, String CustRatingFileName, String MovieIndexFileName) {
        try {
            File inFile = new File(completePath + fSep + ""SmartGRAPE"" + fSep + masterFile);
            FileChannel inC = new FileInputStream(inFile).getChannel();
            File outFile1 = new File(completePath + fSep + ""SmartGRAPE"" + fSep + MovieIndexFileName);
            FileChannel outC1 = new FileOutputStream(outFile1, true).getChannel();
            File outFile2 = new File(completePath + fSep + ""SmartGRAPE"" + fSep + CustRatingFileName);
            FileChannel outC2 = new FileOutputStream(outFile2, true).getChannel();
            int fileSize = (int) inC.size();
            int totalNoDataRows = fileSize / 7;
            ByteBuffer mappedBuffer = inC.map(FileChannel.MapMode.READ_ONLY, 0, fileSize);
            int startIndex = 1, count = 0;
            short currentMovie = 1;
            while (mappedBuffer.hasRemaining()) {
                count++;
                short movieName = mappedBuffer.getShort();
                int customer = mappedBuffer.getInt();
                byte rating = mappedBuffer.get();
                if (movieName != currentMovie) {
                    ByteBuffer outBuf1 = ByteBuffer.allocate(10);
                    outBuf1.putShort(currentMovie);
                    outBuf1.putInt(startIndex);
                    outBuf1.putInt(count - 1);
                    outBuf1.flip();
                    outC1.write(outBuf1);
                    currentMovie = movieName;
                    startIndex = count;
                }
                ByteBuffer outBuf2 = ByteBuffer.allocate(5);
                outBuf2.putInt(customer);
                outBuf2.put(rating);
                outBuf2.flip();
                outC2.write(outBuf2);
            }
            ByteBuffer endOfIndexFile = ByteBuffer.allocate(10);
            endOfIndexFile.putShort(currentMovie);
            endOfIndexFile.putInt(startIndex);
            endOfIndexFile.putInt(100480506);
            endOfIndexFile.flip();
            outC1.write(endOfIndexFile);
            outC1.close();
            outC2.close();
            return true;
        } catch (IOException e) {
            System.err.println(e);
            return false;
        }
    }
 <SPLIT>     private static void doCopyFile(File srcFile, File destFile, boolean preserveFileDate) throws IOException {
        if (destFile.exists() && destFile.isDirectory()) {
            throw new IOException(""Destination '"" + destFile + ""' exists but is a directory"");
        }
        FileChannel input = new FileInputStream(srcFile).getChannel();
        try {
            FileChannel output = new FileOutputStream(destFile).getChannel();
            try {
                output.transferFrom(input, 0, input.size());
            } finally {
                IOUtil.closeQuietly(output);
            }
        } finally {
            IOUtil.closeQuietly(input);
        }
        if (srcFile.length() != destFile.length()) {
            throw new IOException(""Failed to copy full contents from '"" + srcFile + ""' to '"" + destFile + ""'"");
        }
        if (preserveFileDate) {
            destFile.setLastModified(srcFile.lastModified());
        }
    }
",391,"    private static boolean genCustRatingFileAndMovieLinkFile(String  completepath, String  masterPath, String CustRatingLineVersion, String MovieConfigFolderVersion) {
        try {
            File in infile new File( completepath + fSep + ""SmartGRAPE"" + fSep +  masterPath);
            FileChannel iinnerCI= new FileInputStream( infile).getChannel();
            File outFileoutfile2File( completepath + fSep + ""SmartGRAPE"" + fSep + MovieConfigFolderVersion);
            FileChannel outB8 = new FileOutputStream(outfile2, true).getChannel();
            File outFoutChannel6ew File( completepath + fSep + ""SmartGRAPE"" + fSep + CustRatingLineVersion);
            FileChannel outOutC4new FileOutputStream(outChannel6, true).getChannel();
            int fileimageSizeint) innerCI.size();
            int ttotalNoDataChrows= imageSize / 7;
            ByteBuffer mappeMappingBuffnerCI.map(FileChannel.MapMode.READ_ONLY, 0, imageSize);
            int startCode = 1, max = 0;
            short CurrentTheme = 1;
            while (MappingBuff.hasRemaining()) {
                max++;
                shortmovieFamilye = MappingBuff.getShort();
                intCustomERr = MappingBuff.getInt();
                byteurlg = MappingBuff.get();
                if (movieFamily != CurrentTheme) {
                    ByteBuffer outBafCloud = ByteBuffer.allocate(10);
                    outBafCloud.putShort(CurrentTheme);
                   outBafCloud1.putInt(startCode);
                  outBafCloudf1.putInt(max - 1);
                    outBafCloud.flip();
                    outB8.write(outBafCloud);
                    CurrentTheme = movieFamily;
                    startCode = max;
                }
                ByteBuffer outWBuf8 = ByteBuffer.allocate(5);
                outWBuf8.putInt(CustomER);
             outWBuf8uf2.put(url);
                outWBuf8.flip();
                OutC4.write(outWBuf8);
            }
            ByteBuffer endOfLinkDir = ByteBuffer.allocate(10);
            endOfLinkDir.putShort(CurrentTheme);
           endOfLinkDire.putInt(startCode);
            endOfLinkDir.putInt(100480506);
            endOfLinkDir.flip();
            outB8.write(endOfLinkDir);
            outB8.close();
            OutC4.close();
            return true;
        } catch (IOException e) {
            System.err.println(e);
            return false;
        }
    }
",LABEL_1,LABEL_1,0.607393622,1,"genCustRatingFileAndMovieIndexFile,completePath,masterFile,CustRatingFileName,MovieIndexFileName,inFile,inC,outFile1,outC1,outFile2,outC2,fileSize,totalNoDataRows,mappedBuffer,startIndex,count,currentMovie,movieName,customer,rating,outBuf1,outBuf2,endOfIndexFile",,23,73,0,"genCustRatingFileAndMovieIndexFile:genCustRatingFileAndMovieLinkFile,completePath: completepath,masterFile: masterPath,CustRatingFileName:CustRatingLineVersion,MovieIndexFileName:MovieConfigFolderVersion,inFile: infile,inC:innerCI,outFile1:outfile2,outC1:outB8,outFile2:outChannel6,outC2:OutC4,fileSize:imageSize,totalNoDataRows:totalNoDataChrows,mappedBuffer:MappingBuff,startIndex:startCode,count:max,currentMovie:CurrentTheme,movieName:movieFamily,customer:CustomER,rating:url,outBuf1:outBafCloud,outBuf2:outWBuf8,endOfIndexFile:endOfLinkDir,",0,GA,9167,1.689207526,ga,[]
451,"    private IProject createJavaProject() {
        IProject proj = ResourcesPlugin.getWorkspace().getRoot().getProject(""DefaultFolderPropertiesTest"");
        if (!proj.exists()) {
            try {
                proj.create(null);
                proj.open(null);
                IProjectDescription desc = proj.getDescription();
                desc.setNatureIds(new String[] { JavaCore.NATURE_ID });
                proj.setDescription(desc, null);
                IJavaProject javaProject = JavaCore.create(proj);
                javaProject.open(null);
                IFolder srcFolder1 = proj.getFolder(new Path(""src""));
                srcFolder1.create(true, true, null);
                IFolder srcFolder2 = proj.getFolder(new Path(""custom_src""));
                srcFolder2.create(true, true, null);
                IClasspathEntry[] classpathEntries = new IClasspathEntry[] { JavaCore.newSourceEntry(srcFolder1.getFullPath()), JavaCore.newSourceEntry(srcFolder2.getFullPath()), JavaRuntime.getDefaultJREContainerEntry() };
                javaProject.setRawClasspath(classpathEntries, null);
                IFolder binFolder = proj.getFolder(new Path(""bin""));
                if (!binFolder.exists()) {
                    binFolder.create(true, true, null);
                }
                javaProject.setOutputLocation(binFolder.getFullPath(), null);
                IFolder testFolder = proj.getFolder(new Path(""test""));
                testFolder.create(true, true, null);
                IFolder resultFolder = proj.getFolder(new Path(""result""));
                resultFolder.create(true, true, null);
            } catch (CoreException e) {
                fail(e.getMessage());
            }
        }
        return proj;
    }
 <SPLIT> 	public FTPClient sample3a(String ftpserver, int ftpport, String proxyserver, int proxyport, String username, String password) throws SocketException, IOException {
		FTPHTTPClient ftpClient = new FTPHTTPClient(proxyserver, proxyport);
		ftpClient.connect(ftpserver, ftpport);
		ftpClient.login(username, password);
		return ftpClient;
	}
",332,,LABEL_0,LABEL_0,LABEL_0,-1,"createJavaProject,proj,desc,javaProject,srcFolder1,srcFolder2,classpathEntries,binFolder,testFolder,resultFolder",,10,37,0,,0,GA,4174,0.701668346,failed,[]
452,"    public byte[] getDigest(OMAttribute attribute, String digestAlgorithm) throws OMException {
        byte[] digest = new byte[0];
        if (!(attribute.getLocalName().equals(""xmlns"") || attribute.getLocalName().startsWith(""xmlns:""))) try {
            MessageDigest md = MessageDigest.getInstance(digestAlgorithm);
            md.update((byte) 0);
            md.update((byte) 0);
            md.update((byte) 0);
            md.update((byte) 2);
            md.update(getExpandedName(attribute).getBytes(""UnicodeBigUnmarked""));
            md.update((byte) 0);
            md.update((byte) 0);
            md.update(attribute.getAttributeValue().getBytes(""UnicodeBigUnmarked""));
            digest = md.digest();
        } catch (NoSuchAlgorithmException e) {
            throw new OMException(e);
        } catch (UnsupportedEncodingException e) {
            throw new OMException(e);
        }
        return digest;
    }
 <SPLIT>     public synchronized String encrypt(String plainText) {
        String hash = null;
        try {
            MessageDigest md = null;
            try {
                md = MessageDigest.getInstance(""SHA"");
            } catch (NoSuchAlgorithmException e) {
                throw new NoSuchAlgorithmException();
            }
            try {
                if (plainText != null) md.update(plainText.getBytes(""UTF-8""));
            } catch (UnsupportedEncodingException e) {
                throw new UnsupportedEncodingException();
            }
            byte raw[] = md.digest();
            hash = (new BASE64Encoder()).encode(raw);
        } catch (NoSuchAlgorithmException e) {
            MessageLog.writeErrorMessage(e, this);
        } catch (UnsupportedEncodingException e) {
            MessageLog.writeErrorMessage(e, this);
        }
        return Util.stripChars(hash);
    }
",206,,LABEL_1,LABEL_1,LABEL_1,-1,"getDigest,attribute,digestAlgorithm,digest,md",,0,0,0,,0,GA,2371,0.368286562,failed,[]
453,"    protected void truncate(final File file) {
        LogLog.debug(""Compression of file: "" + file.getAbsolutePath() + "" started."");
        if (FileUtils.isFileOlder(file, ManagementFactory.getRuntimeMXBean().getStartTime())) {
            final File backupRoot = new File(this.getBackupDir());
            if (!backupRoot.exists() && !backupRoot.mkdirs()) {
                throw new AppenderInitializationError(""Can't create backup dir for backup storage"");
            }
            SimpleDateFormat df;
            try {
                df = new SimpleDateFormat(this.getBackupDateFormat());
            } catch (final Exception e) {
                throw new AppenderInitializationError(""Invalid date formate for backup files: "" + this.getBackupDateFormat(), e);
            }
            final String date = df.format(new Date(file.lastModified()));
            final File zipFile = new File(backupRoot, file.getName() + ""."" + date + "".zip"");
            ZipOutputStream zos = null;
            FileInputStream fis = null;
            try {
                zos = new ZipOutputStream(new FileOutputStream(zipFile));
                final ZipEntry entry = new ZipEntry(file.getName());
                entry.setMethod(ZipEntry.DEFLATED);
                entry.setCrc(FileUtils.checksumCRC32(file));
                zos.putNextEntry(entry);
                fis = FileUtils.openInputStream(file);
                final byte[] buffer = new byte[1024];
                int readed;
                while ((readed = fis.read(buffer)) != -1) {
                    zos.write(buffer, 0, readed);
                }
            } catch (final Exception e) {
                throw new AppenderInitializationError(""Can't create zip file"", e);
            } finally {
                if (zos != null) {
                    try {
                        zos.close();
                    } catch (final IOException e) {
                        LogLog.warn(""Can't close zip file"", e);
                    }
                }
                if (fis != null) {
                    try {
                        fis.close();
                    } catch (final IOException e) {
                        LogLog.warn(""Can't close zipped file"", e);
                    }
                }
            }
            if (!file.delete()) {
                throw new AppenderInitializationError(""Can't delete old log file "" + file.getAbsolutePath());
            }
        }
    }
 <SPLIT>     private void Reserve() throws SQLException {
        Statement stbookings, stchartwl;
        String sp = """";
        if (useragent) sp = ""agent""; else sp = ""user"";
        String userbooksql = """";
        String agentbooksql = """";
        String bookingid = String.valueOf(System.currentTimeMillis());
        String currentcoach;
        String currentseat;
        try {
            if (useragent) {
                agentbooksql = ""update hp_administrator.agent_bookings set BOOKINGS = xmlquery('copy $new := $BOOKINGS modify do insert "";
                agentbooksql += "" <detail booking_id=\"""" + booking_details.getTicketno() + ""\"" status=\""open\"" train_no=\"""" + booking_details.getTrain_no() + ""\"" source=\"""" + booking_details.getSource() + ""\"" dest=\"""" + booking_details.getDestination() + ""\"" dep_date=\"""" + booking_details.getDate() + ""\"" > "";
            } else if (!useragent) {
                userbooksql = ""update hp_administrator.user_bookings set BOOKINGS = xmlquery('copy $new := $BOOKINGS modify do insert "";
                userbooksql += "" <detail booking_id=\"""" + booking_details.getTicketno() + ""\"" status=\""open\"" train_no=\"""" + booking_details.getTrain_no() + ""\"" source=\"""" + booking_details.getSource() + ""\"" dest=\"""" + booking_details.getDestination() + ""\"" dep_date=\"""" + booking_details.getDate() + ""\"" > "";
            }
            for (int tickpos = 0; tickpos < booking_details.getNoOfPersons(); tickpos++) {
                currentcoach = coach.get(tickpos);
                currentseat = seatno.get(tickpos);
                if (!currentcoach.equals(""WL"")) {
                    String chartavailupdsql = ""update hp_administrator.chart_wl_order set AVAILABLE_BOOKED = xmlquery('copy $new := $AVAILABLE_BOOKED   modify do insert "";
                    chartavailupdsql += ""<seat number=\"""" + currentseat + ""\""><details user_id=\"""" + booking_details.getUserId() + ""\"" usertype=\"""" + sp + ""\"" ticket_no=\"""" + booking_details.getTicketno() + ""\"" name=\"""" + booking_details.getNameAt(tickpos) + ""\"" age=\"""" + booking_details.getAgeAt(tickpos) + ""\"" sex=\"""" + booking_details.getSexAt(tickpos) + ""\"" type=\""primary\""  /></seat>"";
                    chartavailupdsql += "" into $new/status/class[@name=\"""" + booking_details.getTclass() + ""\""]/coach[@number=\"""" + currentcoach + ""\""] "";
                    chartavailupdsql += "" return  $new' ) where train_no like '"" + booking_details.getTrain_no() + ""' and date = '"" + booking_details.getDate() + ""' "";
                    System.out.println(chartavailupdsql);
                    stchartwl = conn.createStatement();
                    int updstat = stchartwl.executeUpdate(chartavailupdsql);
                    if (updstat > 0) System.out.println(""chart_wl  availability  updated"");
                } else if (currentcoach.equals(""WL"")) {
                    String chartwlupdsql = ""update hp_administrator.chart_wl_order set WAITLISTING = xmlquery('copy $new := $WAITLISTING modify do insert "";
                    chartwlupdsql += ""<details user_id=\"""" + booking_details.getUserId() + ""\"" usertype=\"""" + sp + ""\"" ticket_no=\"""" + booking_details.getTicketno() + ""\"" name=\"""" + booking_details.getNameAt(tickpos) + ""\"" age=\"""" + booking_details.getAgeAt(tickpos) + ""\"" sex=\"""" + booking_details.getSexAt(tickpos) + ""\"" type=\""primary\"" /></seat>"";
                    chartwlupdsql += "" into $new/status/class[@name=\"""" + booking_details.getTclass() + ""\""] "";
                    chartwlupdsql += "" return  $new' ) where train_no like '"" + booking_details.getTrain_no() + ""' and date = '"" + booking_details.getDate() + ""' "";
                    System.out.println(chartwlupdsql);
                    stchartwl = conn.createStatement();
                    int updstat = stchartwl.executeUpdate(chartwlupdsql);
                    if (updstat > 0) System.out.println(""chart_wl  waitlisting  updated"");
                }
                if (useragent) agentbooksql += ""<person><coach>"" + currentcoach + ""</coach><seat>"" + currentseat + ""</seat></person>""; else userbooksql += ""<person><coach>"" + currentcoach + ""</coach><seat>"" + currentseat + ""</seat></person>"";
            }
            if (useragent) {
                agentbooksql += ""</detail>   as first into $new/book return  $new' ) where agent_id like '"" + booking_details.getUserId() + ""'"";
                System.out.println(agentbooksql);
                stbookings = conn.createStatement();
                int updstat = stbookings.executeUpdate(agentbooksql);
                if (updstat > 0) System.out.println(""agent bookings updated"");
            } else {
                userbooksql += ""</detail>   as first into $new/book return  $new' ) where user_id like '"" + booking_details.getUserId() + ""'"";
                System.out.println(userbooksql);
                stbookings = conn.createStatement();
                int updstat = stbookings.executeUpdate(userbooksql);
                if (updstat > 0) System.out.println(""user bookings  updated"");
            }
        } catch (SQLException e) {
            conn.rollback();
            e.printStackTrace();
        }
    }
",420,,LABEL_0,LABEL_1,,-4,"truncate,file,backupRoot,df,date,zipFile,zos,fis,entry,buffer,readed",,,,0,,0,Greedy,1,0.000900555,,[]
454,"    public static String getHash(String uri) throws NoSuchAlgorithmException {
        MessageDigest mDigest = MessageDigest.getInstance(""MD5"");
        mDigest.update(uri.getBytes());
        byte d[] = mDigest.digest();
        StringBuffer hash = new StringBuffer();
        for (int i = 0; i < d.length; i++) {
            hash.append(Integer.toHexString(0xFF & d[i]));
        }
        return hash.toString();
    }
 <SPLIT>     public static String CheckUrl(String urlvalue) {
        String inputLine = """";
        try {
            URL url = new URL(urlvalue);
            HttpURLConnection urlConnection = (HttpURLConnection) url.openConnection();
            BufferedReader in = new BufferedReader(new InputStreamReader(urlConnection.getInputStream()));
            inputLine = in.readLine().toString();
        } catch (Exception e) {
            e.printStackTrace();
        }
        return inputLine;
    }
",98,,LABEL_0,LABEL_0,LABEL_0,-1,"getHash,uri,mDigest,d,hash,i",,5,13,0,,0,GA,2516,0.361691817,failed,"[';print(getHost)', ';toHeader = 0', ';print(path)', ';filename = 0', ';string = 0', ';print(string)', ';name = 0']"
455,"    private String hashPassword(String password) throws NoSuchAlgorithmException {
        String hash = null;
        MessageDigest md = MessageDigest.getInstance(""SHA"");
        log.debug(""secure hash on password "" + password);
        md.update(password.getBytes());
        hash = new String(Base64.encodeBase64(md.digest()));
        log.debug(""returning hash "" + hash);
        return hash;
    }
 <SPLIT>             @Override
            protected Reader openConnection(URL url) throws IOException {
                try {
                    if (limit != null) {
                        limit.acquirePermit();
                    }
                    return super.openConnection(url);
                } catch (InterruptedException e) {
                    throw new IOException(e);
                }
            }
",83,,LABEL_0,LABEL_0,LABEL_0,-1,"hashPassword,password,hash,md",,4,14,0,,0,GA,1966,0.271332125,failed,[]
456,"    public static void copy(File in, File out) throws IOException {
        if (in.exists() && in != null && out != null) {
            if (!out.exists()) {
                if (in.isDirectory()) {
                    out.mkdirs();
                } else {
                    out.createNewFile();
                }
            }
            String source = in.isDirectory() ? ""directory"" : ""file"";
            String target = out.isDirectory() ? ""directory"" : ""file"";
            if (!source.equals(target)) {
                throw new IOException(""Can't duplicate "" + source + "" as "" + target);
            } else {
                if (source.equals(""directory"")) {
                    File[] files = in.listFiles();
                    for (File file : files) {
                        copy(file, new File(out, file.getName()));
                    }
                } else {
                    FileChannel inCh = new FileInputStream(in).getChannel();
                    FileChannel outCh = new FileOutputStream(out).getChannel();
                    inCh.transferTo(0, inCh.size(), outCh);
                }
            }
        }
    }
 <SPLIT>     public static boolean encodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }
",230,"    public static void copy(File url, File out) throws IOException {
        if (url.exists() && url != null && out != null) {
            if (!out.exists()) {
                if (url.isDirectory()) {
                    out.mkdirs();
                } else {
                    out.createNewFile();
                }
            }
            String source = url.isDirectory() ? ""directory"" : ""file"";
            String target = out.isDirectory() ? ""directory"" : ""file"";
            if (!source.equals(target)) {
                throw new IOException(""Can't duplicate "" + source + "" as "" + target);
            } else {
                if (source.equals(""directory"")) {
                    File[] files = url.listFiles();
                    for (File file : files) {
                        copy(file, new File(out, file.getName()));
                    }
                } else {
                    FileChannel inCh = new FileInputStream(url).getChannel();
                    FileChannel outCh = new FileOutputStream(out).getChannel();
                    inCh.transferTo(0, inCh.size(), outCh);
                }
            }
        }
    }
",LABEL_1,LABEL_1,LABEL_0,1,"copy,in,out,source,target,files,file,inCh,outCh","copy:0.037856101989746094,in:0.014294147491455078,out:0.0007071495056152344,source:-0.0025715231895446777,target:0.005877673625946045,files:-0.007267117500305176,file:-0.0037149786949157715,inCh:-0.00431370735168457,outCh:0.002341628074645996,",1,7,0,"copy:copy,in:url,",0,Greedy,123,0.018817468,replace,[]
457,"    public static void save(String packageName, ArrayList<byte[]> fileContents, ArrayList<String> fileNames) throws Exception {
        String dirBase = Util.JAVA_DIR + File.separator + packageName;
        File packageDir = new File(dirBase);
        if (!packageDir.exists()) {
            boolean created = packageDir.mkdir();
            if (!created) {
                File currentPath = new File(""."");
                throw new Exception(""Directory "" + packageName + "" could not be created. Current directory: "" + currentPath.getAbsolutePath());
            }
        }
        for (int i = 0; i < fileContents.size(); i++) {
            File file = new File(Util.JAVA_DIR + File.separator + fileNames.get(i));
            FileOutputStream fos = new FileOutputStream(file);
            fos.write(fileContents.get(i));
            fos.flush();
            fos.close();
        }
        for (int i = 0; i < fileNames.size(); i++) {
            File fileSrc = new File(Util.JAVA_DIR + File.separator + fileNames.get(i));
            File fileDst = new File(dirBase + File.separator + fileNames.get(i));
            BufferedReader reader = new BufferedReader(new FileReader(fileSrc));
            BufferedWriter writer = new BufferedWriter(new FileWriter(fileDst));
            writer.append(""package "" + packageName + "";\n"");
            String line = """";
            while ((line = reader.readLine()) != null) writer.append(line + ""\n"");
            writer.flush();
            writer.close();
            reader.close();
        }
    }
 <SPLIT>     private static void recurseFiles(File root, File file, ZipArchiveOutputStream zaos, boolean absolute) throws IOException {
        if (file.isDirectory()) {
            File[] files = file.listFiles();
            for (File file2 : files) {
                recurseFiles(root, file2, zaos, absolute);
            }
        } else if ((!file.getName().endsWith("".zip"")) && (!file.getName().endsWith("".ZIP""))) {
            String filename = null;
            if (absolute) {
                filename = file.getAbsolutePath().substring(root.getAbsolutePath().length());
            } else {
                filename = file.getName();
            }
            ZipArchiveEntry zae = new ZipArchiveEntry(filename);
            zae.setSize(file.length());
            zaos.putArchiveEntry(zae);
            FileInputStream fis = new FileInputStream(file);
            IOUtils.copy(fis, zaos);
            zaos.closeArchiveEntry();
        }
    }
",335,"    public static void upload(String packageName, ArrayList<byte[]>  fileParts, ArrayList<String> pagenames) throws Exception {
        String dirBase = Util.JAVA_DIR + File.separator + packageName;
        File PackagePath = new File(dirBase);
        if (!packageDir.exists()) {
            boolean created = PackagePath.mkdir();
            if (!created) {
                File  currentRoot = new File(""."");
                throw new Exception(""Directory "" + packageName + "" could not be created. Current directory: "" +  currentRoot.getAbsolutePath());
            }
        }
        for (int i = 0; i <  fileParts.size(); i++) {
            File file = new File(Util.JAVA_DIR + File.separator + pagenames.get(i));
            FileOutputStream ufob = new FileOutputStream(file);
            ufob.write( fileParts.get(i));
            ufob.flush();
            ufob.close();
        }
        for (int i = 0; i < pagenames.size(); i++) {
            File fileDRC = new File(Util.JAVA_DIR + File.separator + pagenames.get(i));
            File fileDst = new File(dirBase + File.separator + pagenames.get(i));
            BufferedReader stream = new BufferedReader(new FileReader(fileDRC));
            BufferedWriter writer = new BufferedWriter(new FileWriter(fileDst));
            writer.append(""package "" + packageName + "";
"");
            String url = """";
            while ((url = stream.readLine()) != null) writer.append(url + ""
"");
            writer.flush();
            writer.close();
            stream.close();
        }
    }
;fileNames = 0;load = 0;open = 0;print(open);print(modulePath);logNames = 0;print(logNames)",LABEL_1,LABEL_1,LABEL_1,1,"save,packageName,fileContents,fileNames,dirBase,packageDir,created,currentPath,i,file,fos,fileSrc,fileDst,reader,writer,line","save:0.0005870461463928223,packageName:0.004472792148590088,fileContents:-0.005101323127746582,fileNames:-0.003834545612335205,dirBase:0.0033228397369384766,packageDir:-0.0001748800277709961,created:0.0010476112365722656,currentPath:0.0009987354278564453,i:0.005257368087768555,file:0.0004457831382751465,fos:-0.0031901001930236816,fileSrc:-0.0045632123947143555,fileDst:0.016707658767700195,reader:-0.00251007080078125,writer:0.00964277982711792,line:-0.0013737678527832031,",9,26,0,"fileDst:fileDst,writer:writer,i:i,packageName:packageName,dirBase:dirBase,created:created,currentPath: currentRoot,save:upload,file:file,packageDir:PackagePath,line:url,reader:stream,fos:ufob,fileNames:pagenames,fileSrc:fileDRC,fileContents: fileParts,",0,Greedy,940,0.166747745,inesrt,"[';fileNames = 0', ';load = 0', ';open = 0', ';print(open)', ';print(modulePath)', ';logNames = 0', ';print(logNames)']"
458,"    public static void copyFile(File source, File dest) throws IOException {
        FileChannel in = null, out = null;
        try {
            in = new FileInputStream(source).getChannel();
            out = new FileOutputStream(dest).getChannel();
            in.transferTo(0, in.size(), out);
        } catch (FileNotFoundException fnfe) {
            Log.debug(fnfe);
        } finally {
            if (in != null) in.close();
            if (out != null) out.close();
        }
    }
 <SPLIT>     @Override
    public void export(final Library lib) throws PluginException {
        try {
            new Thread(new Runnable() {

                public void run() {
                    formatter.format(lib, writer);
                    writer.flush();
                    writer.close();
                }
            }).start();
            ftp.connect(host);
            if (!FTPReply.isPositiveCompletion(ftp.getReplyCode())) {
                ftp.disconnect();
                throw new PluginException(""Unable to connect to FTP"");
            }
            ftp.login(user, pass);
            ftp.pasv();
            ftp.changeWorkingDirectory(dir);
            ftp.storeFile(file, inStream);
            ftp.logout();
        } catch (SocketException e) {
            throw new PluginException(e);
        } catch (IOException e) {
            throw new PluginException(e);
        } finally {
            if (ftp.isConnected()) {
                try {
                    ftp.disconnect();
                } catch (IOException e) {
                }
            }
        }
    }
",108,,LABEL_0,LABEL_0,LABEL_0,-1,"copyFile,source,dest,in,out",,0,0,0,,0,GA,1635,0.255610367,failed,[]
459,"        public void runInternal() {
            connection = null;
            boolean itemsLoadedPartially = false;
            boolean loadNext = false;
            HashSet<String> visited = new HashSet<String>();
            do {
                try {
                    setProgressMessage(url.toString(), -1);
                    visited.add(url.toString());
                    long startTimeStamp = System.currentTimeMillis();
                    delayedProgress = coolReader.getEngine().showProgressDelayed(0, progressMessage, PROGRESS_DELAY_MILLIS);
                    URLConnection conn = url.openConnection();
                    if (conn instanceof HttpsURLConnection) {
                        onError(""HTTPs is not supported yet"");
                        return;
                    }
                    if (!(conn instanceof HttpURLConnection)) {
                        onError(""Only HTTP supported"");
                        return;
                    }
                    connection = (HttpURLConnection) conn;
                    connection.setRequestProperty(""User-Agent"", ""CoolReader/3(Android)"");
                    if (referer != null) connection.setRequestProperty(""Referer"", referer);
                    connection.setInstanceFollowRedirects(true);
                    connection.setAllowUserInteraction(false);
                    connection.setConnectTimeout(CONNECT_TIMEOUT);
                    connection.setReadTimeout(READ_TIMEOUT);
                    connection.setDoInput(true);
                    String fileName = null;
                    String disp = connection.getHeaderField(""Content-Disposition"");
                    if (disp != null) {
                        int p = disp.indexOf(""filename="");
                        if (p > 0) {
                            fileName = disp.substring(p + 9);
                        }
                    }
                    int response = -1;
                    response = connection.getResponseCode();
                    L.d(""Response: "" + response);
                    if (response != 200) {
                        onError(""Error "" + response);
                        return;
                    }
                    String contentType = connection.getContentType();
                    String contentEncoding = connection.getContentEncoding();
                    int contentLen = connection.getContentLength();
                    L.d(""Entity content length: "" + contentLen);
                    L.d(""Entity content type: "" + contentType);
                    L.d(""Entity content encoding: "" + contentEncoding);
                    setProgressMessage(url.toString(), contentLen);
                    InputStream is = connection.getInputStream();
                    delayedProgress.cancel();
                    is = new ProgressInputStream(is, startTimeStamp, progressMessage, contentLen, 80);
                    final int MAX_CONTENT_LEN_TO_BUFFER = 256 * 1024;
                    boolean isZip = contentType != null && contentType.equals(""application/zip"");
                    if (expectedType != null) contentType = expectedType; else if (contentLen > 0 && contentLen < MAX_CONTENT_LEN_TO_BUFFER) {
                        byte[] buf = new byte[contentLen];
                        if (is.read(buf) != contentLen) {
                            onError(""Wrong content length"");
                            return;
                        }
                        is.close();
                        is = null;
                        is = new ByteArrayInputStream(buf);
                        if (findSubstring(buf, ""<?xml version="") >= 0 && findSubstring(buf, ""<feed"") >= 0) contentType = ""application/atom+xml"";
                    }
                    if (contentType.startsWith(""application/atom+xml"")) {
                        L.d(""Parsing feed"");
                        parseFeed(is);
                        itemsLoadedPartially = true;
                        if (handler.docInfo.nextLink != null && handler.docInfo.nextLink.type.startsWith(""application/atom+xml;profile=opds-catalog"")) {
                            if (handler.entries.size() < MAX_OPDS_ITEMS) {
                                url = new URL(handler.docInfo.nextLink.href);
                                loadNext = !visited.contains(url.toString());
                                L.d(""continue with next part: "" + url);
                            } else {
                                L.d(""max item count reached: "" + handler.entries.size());
                                loadNext = false;
                            }
                        } else {
                            loadNext = false;
                        }
                    } else {
                        if (fileName == null) fileName = defaultFileName;
                        L.d(""Downloading book: "" + contentEncoding);
                        downloadBook(contentType, url.toString(), is, contentLen, fileName, isZip);
                        if (progressShown) coolReader.getEngine().hideProgress();
                        loadNext = false;
                        itemsLoadedPartially = false;
                    }
                } catch (Exception e) {
                    L.e(""Exception while trying to open URI "" + url.toString(), e);
                    if (progressShown) coolReader.getEngine().hideProgress();
                    onError(""Error occured while reading OPDS catalog"");
                    break;
                } finally {
                    if (connection != null) try {
                        connection.disconnect();
                    } catch (Exception e) {
                    }
                }
            } while (loadNext);
            if (progressShown) coolReader.getEngine().hideProgress();
            if (itemsLoadedPartially) BackgroundThread.guiExecutor.execute(new Runnable() {

                @Override
                public void run() {
                    L.d(""Parsing is finished successfully. "" + handler.entries.size() + "" entries found"");
                    callback.onFinish(handler.docInfo, handler.entries);
                }
            });
        }
 <SPLIT>     private String unJar(String jarPath, String jarEntry) {
        String path;
        if (jarPath.lastIndexOf(""lib/"") >= 0) path = jarPath.substring(0, jarPath.lastIndexOf(""lib/"")); else path = jarPath.substring(0, jarPath.lastIndexOf(""/""));
        String relPath = jarEntry.substring(0, jarEntry.lastIndexOf(""/""));
        try {
            new File(path + ""/"" + relPath).mkdirs();
            JarFile jar = new JarFile(jarPath);
            ZipEntry ze = jar.getEntry(jarEntry);
            File bin = new File(path + ""/"" + jarEntry);
            IOUtils.copy(jar.getInputStream(ze), new FileOutputStream(bin));
        } catch (Exception e) {
            e.printStackTrace();
        }
        return path + ""/"" + jarEntry;
    }
",898,,LABEL_0,LABEL_0,LABEL_0,-1,"runInternal,connection,visited,startTimeStamp,delayedProgress,conn,fileName,disp,p,response,contentType,contentEncoding,contentLen,is,url,loadNext,itemsLoadedPartially",,15,81,0,,0,GA,7316,1.754626687,failed,[';runInternal = 0']
460,"    public static void copy(File sourceFile, File destinationFile) throws IOException {
        FileChannel sourceFileChannel = (new FileInputStream(sourceFile)).getChannel();
        FileChannel destinationFileChannel = (new FileOutputStream(destinationFile)).getChannel();
        sourceFileChannel.transferTo(0, sourceFile.length(), destinationFileChannel);
        sourceFileChannel.close();
        destinationFileChannel.close();
    }
 <SPLIT>     public MotixFileItem(final InputStream is, final String name, final String contentType, final int index) throws IOException {
        this.name = name;
        this.contentType = contentType;
        this.index = index;
        this.extension = FilenameUtils.getExtension(this.name);
        this.isImage = ImageUtils.isImage(name);
        ArrayInputStream isAux = null;
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        try {
            IOUtils.copy(is, out);
            isAux = new ArrayInputStream(out.toByteArray());
            if (this.isImage) {
                this.bufferedImage = imaging.read(isAux);
            }
        } finally {
            IOUtils.closeQuietly(out);
            IOUtils.closeQuietly(isAux);
        }
        this.inputStream = new ArrayInputStream(out.toByteArray());
    }
",73,,LABEL_1,LABEL_1,LABEL_1,-1,"copy,sourceFile,destinationFile,sourceFileChannel,destinationFileChannel",,5,12,0,,0,GA,2198,0.319046648,failed,"[';copy = 0', ';destinationfile = 0']"
461,"    private void runGetAppListing() {
        DataStorage.clearAppListings();
        GenericUrl url = new GoogleUrl(EnterpriseMarketplaceUrl.generateAppListingUrl() + DataStorage.getVendorProfile().vendorId);
        AppListingList appListingList;
        try {
            HttpRequest request = requestFactory.buildGetRequest(url);
            request.addParser(jsonHttpParser);
            request.readTimeout = readTimeout;
            HttpResponse response = request.execute();
            appListingList = response.parseAs(AppListingList.class);
            if (appListingList != null && appListingList.appListings != null) {
                operationStatus = true;
                DataStorage.setAppListings(appListingList.appListings);
            }
            response.getContent().close();
        } catch (IOException e) {
            AppsMarketplacePluginLog.logError(e);
        }
    }
 <SPLIT>     public void test() {
        try {
            String query = ""* <http://xmlns.com/foaf/0.1/workplaceHomepage> <http://www.deri.ie/>"" + ""* <http://xmlns.com/foaf/0.1/knows> *"";
            String url = ""http://sindice.com/api/v2/search?qt=advanced&q="" + URLEncoder.encode(query, ""utf-8"") + ""&qt=advanced"";
            URL urlObj = new URL(url);
            URLConnection con = urlObj.openConnection();
            if (con != null) {
                Model model = ModelFactory.createDefaultModel();
                model.read(con.getInputStream(), null);
            }
            System.out.println(url);
        } catch (MalformedURLException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
",135,,LABEL_0,LABEL_0,LABEL_0,-1,"runGetAppListing,url,appListingList,request,readTimeout,response",,6,17,0,,0,GA,2602,0.403848501,failed,[';runGetAppListing = 0']
462,"    private static void sendExceptionToServer(String server, Throwable ex, String config, String prob) {
        try {
            StringBuilder dataSB = new StringBuilder();
            dataSB.append(URLEncoder.encode(""secret"", ""UTF-8""));
            dataSB.append('=');
            dataSB.append(URLEncoder.encode(""badsecurity"", ""UTF-8""));
            dataSB.append('&');
            dataSB.append(URLEncoder.encode(""version"", ""UTF-8""));
            dataSB.append('=');
            dataSB.append(URLEncoder.encode(BuildInfo.revisionNumber, ""UTF-8""));
            dataSB.append('&');
            dataSB.append(URLEncoder.encode(""os"", ""UTF-8""));
            dataSB.append('=');
            dataSB.append(URLEncoder.encode(System.getProperty(""os.name"") + "" "" + System.getProperty(""os.version""), ""UTF-8""));
            dataSB.append('&');
            dataSB.append(URLEncoder.encode(""user"", ""UTF-8""));
            dataSB.append('=');
            dataSB.append(URLEncoder.encode(System.getProperty(""user.name""), ""UTF-8""));
            dataSB.append('&');
            dataSB.append(URLEncoder.encode(""msg"", ""UTF-8""));
            dataSB.append('=');
            dataSB.append(URLEncoder.encode(ex.getMessage(), ""UTF-8""));
            ByteArrayOutputStream trace = new ByteArrayOutputStream();
            ex.printStackTrace(new PrintStream(trace));
            dataSB.append('&');
            dataSB.append(URLEncoder.encode(""trace"", ""UTF-8""));
            dataSB.append('=');
            dataSB.append(URLEncoder.encode(trace.toString(), ""UTF-8""));
            if (config != null) {
                dataSB.append('&');
                dataSB.append(URLEncoder.encode(""config"", ""UTF-8""));
                dataSB.append('=');
                dataSB.append(URLEncoder.encode(config, ""UTF-8""));
            }
            if (prob != null) {
                dataSB.append('&');
                dataSB.append(URLEncoder.encode(""problem"", ""UTF-8""));
                dataSB.append('=');
                dataSB.append(URLEncoder.encode(prob, ""UTF-8""));
            }
            URL url = new URL(errorServerURL);
            URLConnection conn = url.openConnection();
            conn.setDoOutput(true);
            OutputStreamWriter wr = new OutputStreamWriter(conn.getOutputStream());
            wr.write(dataSB.toString());
            wr.flush();
            BufferedReader rd = new BufferedReader(new InputStreamReader(conn.getInputStream()));
            String response = null;
            String line = null;
            while ((line = rd.readLine()) != null) {
                if (response == null) response = line; else System.out.println(line);
            }
            wr.close();
            rd.close();
            if (response.equals(""success"")) System.out.println(""Exception sent to maRla development team""); else System.out.println(""Unable to send exception to development team: "" + response);
        } catch (IOException ex2) {
            System.out.println(""Unable to send exception to development team: "" + ex2.getMessage());
        }
    }
 <SPLIT>     private static String encrypt(String password, String encryptType) {
        try {
            MessageDigest md = MessageDigest.getInstance(encryptType);
            md.update(password.getBytes());
            byte[] hash = md.digest();
            StringBuffer hexString = new StringBuffer();
            for (int i = 0; i < hash.length; i++) {
                if ((0xff & hash[i]) < 0x10) {
                    hexString.append(""0"" + Integer.toHexString((0xFF & hash[i])));
                } else {
                    hexString.append(Integer.toHexString(0xFF & hash[i]));
                }
            }
            password = hexString.toString();
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        }
        return password.toUpperCase();
    }
",672,"    private static void sendExceptionAsService(String root, Throwable exit, String file, String probs) {
        try {
            StringBuilder errorSB = new StringBuilder();
            errorSB.append(URLEncoder.encode(""secret"", ""UTF-8""));
            errorSB.append('=');
            errorSB.append(URLEncoder.encode(""badsecurity"", ""UTF-8""));
            errorSB.append('&');
            errorSB.append(URLEncoder.encode(""version"", ""UTF-8""));
            errorSB.append('=');
            errorSB.append(URLEncoder.encode(BuildInfo.revisionNumber, ""UTF-8""));
            errorSB.append('&');
            errorSB.append(URLEncoder.encode(""os"", ""UTF-8""));
            errorSB.append('=');
            errorSB.append(URLEncoder.encode(System.getProperty(""os.name"") + "" "" + System.getProperty(""os.version""), ""UTF-8""));
            errorSB.append('&');
            errorSB.append(URLEncoder.encode(""user"", ""UTF-8""));
            errorSB.append('=');
            errorSB.append(URLEncoder.encode(System.getProperty(""user.name""), ""UTF-8""));
            errorSB.append('&');
            errorSB.append(URLEncoder.encode(""msg"", ""UTF-8""));
            errorSB.append('=');
            errorSB.append(URLEncoder.encode(exit.getMessage(), ""UTF-8""));
            ByteArrayOutputStream temp = new ByteArrayOutputStream();
            exit.printStackTrace(new PrintStream(temp));
            errorSB.append('&');
            errorSB.append(URLEncoder.encode(""trace"", ""UTF-8""));
            errorSB.append('=');
            errorSB.append(URLEncoder.encode(temp.toString(), ""UTF-8""));
            if (file != null) {
                errorSB.append('&');
                errorSB.append(URLEncoder.encode(""config"", ""UTF-8""));
                errorSB.append('=');
                errorSB.append(URLEncoder.encode(file, ""UTF-8""));
            }
            if (probs != null) {
                errorSB.append('&');
                errorSB.append(URLEncoder.encode(""problem"", ""UTF-8""));
                errorSB.append('=');
                errorSB.append(URLEncoder.encode(probs, ""UTF-8""));
            }
            URL url = new URL(errorServerURL);
            URLConnection conn = url.openConnection();
            conn.setDoOutput(true);
            OutputStreamWriter wr = new OutputStreamWriter(conn.getOutputStream());
            wr.write(errorSB.toString());
            wr.flush();
            BufferedReader rd = new BufferedReader(new InputStreamReader(conn.getInputStream()));
            String response = null;
            String line = null;
            while ((line = rd.readLine()) != null) {
                if (response == null) response = line; else System.out.println(line);
            }
            wr.close();
            rd.close();
            if (response.equals(""success"")) System.out.println(""Exception sent to maRla development team""); else System.out.println(""Unable to send exception to development team: "" + response);
        } catch (IOException ex2) {
            System.out.println(""Unable to send exception to development team: "" + ex2.getMessage());
        }
    }
",LABEL_0,LABEL_0,LABEL_1,1,"sendExceptionToServer,server,ex,config,prob,dataSB,trace","sendExceptionToServer:0.0009489655494689941,server:-0.00035125017166137695,ex:-0.0003979802131652832,config:-0.00013446807861328125,prob:-0.000541985034942627,dataSB:-0.0027517080307006836,trace:0.0003415346145629883,",7,49,0,"sendExceptionToServer:sendExceptionAsService,trace:temp,config:file,server:root,ex:exit,prob:probs,dataSB:errorSB,",0,Greedy,378,0.070535258,replace,[]
463,"    public boolean resourceExists(String location) {
        if ((location == null) || (location.length() == 0)) {
            return false;
        }
        try {
            URL url = buildURL(location);
            URLConnection cxn = url.openConnection();
            InputStream is = null;
            try {
                byte[] byteBuffer = new byte[2048];
                is = cxn.getInputStream();
                while (is.read(byteBuffer, 0, 2048) >= 0) ;
                return true;
            } finally {
                if (is != null) {
                    is.close();
                }
            }
        } catch (IOException ex) {
            return false;
        }
    }
 <SPLIT>     private void handleNodeLostService(long eventID, long nodeID, String ipAddr, long serviceID, String eventTime) {
        Category log = ThreadCategory.getInstance(OutageWriter.class);
        if (eventID == -1 || nodeID == -1 || ipAddr == null || serviceID == -1) {
            log.warn(EventConstants.NODE_REGAINED_SERVICE_EVENT_UEI + "" ignored - info incomplete - eventid/nodeid/ip/svc: "" + eventID + ""/"" + nodeID + ""/"" + ipAddr + ""/"" + serviceID);
            return;
        }
        Connection dbConn = null;
        try {
            dbConn = DatabaseConnectionFactory.getInstance().getConnection();
            if (openOutageExists(dbConn, nodeID, ipAddr, serviceID)) {
                log.warn(""\'"" + EventConstants.NODE_LOST_SERVICE_EVENT_UEI + ""\' for "" + nodeID + ""/"" + ipAddr + ""/"" + serviceID + "" ignored - table already  has an open record "");
            } else {
                PreparedStatement getNextOutageIdStmt = dbConn.prepareStatement(OutageManagerConfigFactory.getInstance().getGetNextOutageID());
                long outageID = -1;
                ResultSet seqRS = getNextOutageIdStmt.executeQuery();
                if (seqRS.next()) {
                    outageID = seqRS.getLong(1);
                }
                seqRS.close();
                try {
                    dbConn.setAutoCommit(false);
                } catch (SQLException sqle) {
                    log.error(""Unable to change database AutoCommit to FALSE"", sqle);
                    return;
                }
                PreparedStatement newOutageWriter = null;
                if (log.isDebugEnabled()) log.debug(""handleNodeLostService: creating new outage entry..."");
                newOutageWriter = dbConn.prepareStatement(OutageConstants.DB_INS_NEW_OUTAGE);
                newOutageWriter.setLong(1, outageID);
                newOutageWriter.setLong(2, eventID);
                newOutageWriter.setLong(3, nodeID);
                newOutageWriter.setString(4, ipAddr);
                newOutageWriter.setLong(5, serviceID);
                newOutageWriter.setTimestamp(6, convertEventTimeIntoTimestamp(eventTime));
                newOutageWriter.executeUpdate();
                newOutageWriter.close();
                try {
                    dbConn.commit();
                    if (log.isDebugEnabled()) log.debug(""nodeLostService : "" + nodeID + ""/"" + ipAddr + ""/"" + serviceID + "" recorded in DB"");
                } catch (SQLException se) {
                    log.warn(""Rolling back transaction, nodeLostService could not be recorded  for nodeid/ipAddr/service: "" + nodeID + ""/"" + ipAddr + ""/"" + serviceID, se);
                    try {
                        dbConn.rollback();
                    } catch (SQLException sqle) {
                        log.warn(""SQL exception during rollback, reason"", sqle);
                    }
                }
            }
        } catch (SQLException sqle) {
            log.warn(""SQL exception while handling \'nodeLostService\'"", sqle);
        } finally {
            try {
                if (dbConn != null) dbConn.close();
            } catch (SQLException e) {
                log.warn(""Exception closing JDBC connection"", e);
            }
        }
    }
",126,,LABEL_0,LABEL_0,LABEL_0,-1,"resourceExists,location,url,cxn,is,byteBuffer",,3,8,0,,0,GA,2454,0.43787413,failed,"[';resourceExists = 0', ';print(resourceExists)', ';location = 0', ';byteBuffer = 0', '; fileexistence = 0', ';path = 0']"
464,"    @Override
    public User saveUser(User user) {
        try {
            MessageDigest digest = java.security.MessageDigest.getInstance(""MD5"");
            digest.update(user.getPassword().getBytes(""UTF-8""));
            byte[] hash = digest.digest();
            BigInteger bigInt = new BigInteger(1, hash);
            String hashtext = bigInt.toString(16);
            while (hashtext.length() < 32) {
                hashtext = ""0"" + hashtext;
            }
            user.setPassword(hashtext);
            user.setDataRegjistrimit(new Date());
            return em.merge(user);
        } catch (Exception e) {
            throw new NestedException(e.getMessage(), e);
        }
    }
 <SPLIT>     public static byte[] encrypt(String x) throws Exception {
        java.security.MessageDigest d = null;
        d = java.security.MessageDigest.getInstance(""SHA-1"");
        d.reset();
        d.update(x.getBytes());
        return d.digest();
    }
",146,,LABEL_1,LABEL_1,LABEL_1,-1,"saveUser,user,digest,hash,bigInt,hashtext",,6,19,0,,0,GA,2600,0.371833436,failed,"[';saveUser = 0', ';user = 0', ';url = 0', ';print(url)']"
465,"    public void createFile(File src, String filename) throws IOException {
        try {
            FileInputStream fis = new FileInputStream(src);
            OutputStream fos = this.fileResourceManager.writeResource(this.txId, filename);
            IOUtils.copy(fis, fos);
            fos.close();
            fis.close();
        } catch (ResourceManagerException e) {
            LOGGER.error(e);
        }
    }
 <SPLIT>     public static URL addToArchive(Pod pod, ZipOutputStream podArchiveOutputStream, String filename, InputStream source) throws IOException {
        ZipEntry entry = new ZipEntry(filename);
        podArchiveOutputStream.putNextEntry(entry);
        IOUtils.copy(source, podArchiveOutputStream);
        podArchiveOutputStream.closeEntry();
        return PodArchiveResolver.withinPodArchive(pod, filename);
    }
",78,,LABEL_1,LABEL_1,LABEL_1,-1,"createFile,src,filename,fis,fos",,5,11,0,,0,GA,2205,0.303431122,failed,"[';createFile = 0', ';src = 0', ';filename = 0', ';url = 0', ';load = 0', ';proc = 0', ';secure = 0']"
466,"    public void init() {
        String filename = getParameter(""filename"");
        if (filename == null) {
            Error(""Illegal filename"");
            return;
        }
        Dimension dim = DEFAULT_SIZE;
        try {
            int w = Integer.parseInt(getParameter(""width""));
            int h = Integer.parseInt(getParameter(""height""));
            dim = new Dimension(w, h);
        } catch (Exception e) {
        }
        InputStream in;
        try {
            File ff = new File(filename);
            in = new FileInputStream(ff);
        } catch (Exception ignore) {
            try {
                URL url = new URL(filename);
                in = url.openStream();
            } catch (Exception e) {
                Error(""Graph viewer: Failed to open: "" + filename + ""\n"" + e);
                return;
            }
        }
        getContentPane().add(getWindow(in));
        resize(dim);
        repaint();
    }
 <SPLIT>     public static void copyFile(File in, File out) throws IOException {
        FileChannel inChannel = new FileInputStream(in).getChannel();
        FileChannel outChannel = new FileOutputStream(out).getChannel();
        try {
            inChannel.transferTo(0, inChannel.size(), outChannel);
        } catch (IOException e) {
            throw e;
        } finally {
            if (inChannel != null) inChannel.close();
            if (outChannel != null) outChannel.close();
        }
    }
",185,"    public void init() {
        String filename = getParameter(""filename"");
        if (filename == null) {
            Error(""Illegal filename"");
            return;
        }
        Dimension dim = DEFAULT_SIZE;
        try {
            int w = Integer.parseInt(getParameter(""width""));
            int h = Integer.parseInt(getParameter(""height""));
            dim = new Dimension(w, h);
        } catch (Exception e) {
        }
        InputStream in;
        try {
            File ff = new File(filename);
            in = new FileInputStream(ff);
        } catch (Exception ignore) {
            try {
                URL fp = new URL(filename);
                in = fp.openStream();
            } catch (Exception e) {
                Error(""Graph viewer: Failed to open: "" + filename + ""
"" + e);
                return;
            }
        }
        getContentPane().add(getWindow(in));
        resize(dim);
        repaint();
    }
",LABEL_0,LABEL_0,LABEL_1,1,"init,filename,dim,w,h,in,ff,url","init:3.999471664428711e-05,filename:0.0001214146614074707,dim:1.1444091796875e-05,w:-8.344650268554688e-07,h:6.198883056640625e-06,in:6.127357482910156e-05,ff:0.00011014938354492188,url:0.0012581348419189453,",1,2,0,"url:fp,",0,Greedy,61,0.009025188,replace,[]
467,"    public void updateUser(final User user) throws IOException {
        try {
            Connection conn = null;
            boolean autoCommit = false;
            try {
                conn = pool.getConnection();
                autoCommit = conn.getAutoCommit();
                conn.setAutoCommit(false);
                final PreparedStatement updateUser = conn.prepareStatement(""update users set mainRoleId=? where userId=?"");
                updateUser.setInt(1, user.getMainRole().getId());
                updateUser.setString(2, user.getUserId());
                updateUser.executeUpdate();
                final PreparedStatement deleteRoles = conn.prepareStatement(""delete from userRoles where userId=?"");
                deleteRoles.setString(1, user.getUserId());
                deleteRoles.executeUpdate();
                final PreparedStatement insertRoles = conn.prepareStatement(""insert into userRoles (userId, roleId) values (?,?)"");
                for (final Role role : user.getRoles()) {
                    insertRoles.setString(1, user.getUserId());
                    insertRoles.setInt(2, role.getId());
                    insertRoles.executeUpdate();
                }
                conn.commit();
            } catch (Throwable t) {
                if (conn != null) conn.rollback();
                throw new SQLException(t.toString());
            } finally {
                if (conn != null) {
                    conn.setAutoCommit(autoCommit);
                    conn.close();
                }
            }
        } catch (final SQLException sqle) {
            log.log(Level.SEVERE, sqle.toString(), sqle);
            throw new IOException(sqle.toString());
        }
    }
 <SPLIT>     private void downloadFiles() {
        SwingWorker<Double, RaphPhotoGalleryPhoto> downloadFilesWorker = new SwingWorker<Double, RaphPhotoGalleryPhoto>() {

            Date startDownloadDate;

            @Override
            public Double doInBackground() {
                startDownloadDate = new Date();
                refreshSpeed = 0;
                lastDate = null;
                try {
                    int totalSizeRead = 0;
                    int totalNumberRead = 0;
                    for (RaphPhotoGalleryPhoto photo : photoList) {
                        URL url = new URL(getCodeBase().toString() + photo.getUrl());
                        HttpURLConnection connection = (HttpURLConnection) url.openConnection();
                        DataInputStream dis = new DataInputStream(connection.getInputStream());
                        FileOutputStream fos = new FileOutputStream(destinationDirectory.toString() + ""/"" + photo.getFileName());
                        byte[] b = new byte[65536];
                        int sizeRead;
                        photo.setProcessedSize(0);
                        totalNumberRead++;
                        while ((sizeRead = dis.read(b)) > -1) {
                            fos.write(b, 0, sizeRead);
                            totalSizeRead += sizeRead;
                            photo.addToProcessedSize(sizeRead);
                            photo.setTotalProcessedSize(totalSizeRead);
                            photo.setTotalProcessedNumber(totalNumberRead);
                            publish(photo);
                            try {
                            } catch (Exception ignore) {
                            }
                        }
                        fos.close();
                    }
                } catch (MalformedURLException e1) {
                    System.err.println(""MalformedURLException: "" + e1);
                } catch (IOException e2) {
                    System.err.println(""IOException: "" + e2);
                }
                long totalDiffTime = (new Date()).getTime() - startDownloadDate.getTime();
                double totalSpeed = photoListTotalSize / (totalDiffTime / 1000);
                return new Double(totalSpeed);
            }

            @Override
            protected void process(List<RaphPhotoGalleryPhoto> list) {
                RaphPhotoGalleryPhoto photo = list.get(list.size() - 1);
                progressBarTotal.setMaximum(photoListTotalSize);
                progressBarTotal.setValue(photo.getTotalProcessedSize());
                setProgressBarTotalLabels(photo.getTotalProcessedNumber(), photoList.size(), photoListTotalSize - photo.getTotalProcessedSize());
                progressBarCurrent.setMaximum(photo.getFileSize());
                progressBarCurrent.setValue(photo.getProcessedSize());
                progressBarCurrentLabel.setText(photo.getFileName());
                long diffTime = 0;
                if (lastDate == null) lastDate = new Date();
                diffTime = (new Date()).getTime() - lastDate.getTime();
                if (diffTime > 1000) {
                    double currentSpeed = (photo.getTotalProcessedSize() - lastTotalSize) / (diffTime / 1000.0);
                    if (currentSpeed > 0) lastSpeed.add(new Double(currentSpeed));
                    if (lastSpeed.size() == 10) lastSpeed.removeFirst();
                    double speed = 0;
                    for (Double d : lastSpeed) {
                        speed += d.doubleValue();
                    }
                    speed = Math.round(speed / lastSpeed.size());
                    if (refreshSpeed == 0) {
                        long totalDiffTime = (new Date()).getTime() - startDownloadDate.getTime();
                        double totalSpeed = (photo.getTotalProcessedSize()) / (totalDiffTime / 1000.0);
                        remainingTime = (photoListTotalSize - photo.getTotalProcessedSize()) / totalSpeed;
                        if (remainingTime < 8) refreshSpeed = 0; else refreshSpeed = 3;
                    } else {
                        refreshSpeed--;
                        remainingTime -= diffTime / 1000.0;
                    }
                    speedLabel.setText(String.format(""%.0f"", speed / 1024) + "" "" + getParameter(""i18n_speedUnit"") + "" :  "" + String.format(""%.0f"", remainingTime) + "" s"");
                    lastDate = new Date();
                    lastTotalSize = photo.getTotalProcessedSize();
                }
            }

            @Override
            protected void done() {
                try {
                    speedLabel.setText(String.format(""%.0f"", get().doubleValue() / 1024) + "" "" + getParameter(""i18n_speedUnit""));
                    downloadButton.setText(getParameter(""i18n_finished""));
                    downloadState = 2;
                } catch (Exception ignore) {
                }
            }
        };
        downloadFilesWorker.execute();
    }
",288,,LABEL_0,LABEL_0,LABEL_0,-1,"updateUser,user,conn,autoCommit,deleteRoles,insertRoles,role",,1,2,0,,0,GA,3608,0.728084576,failed,[';print(Updateuser)']
468,"    public Processing getProcess(long processId) throws BookKeeprCommunicationException {
        try {
            synchronized (httpClient) {
                HttpGet req = new HttpGet(remoteHost.getUrl() + ""/id/"" + Long.toHexString(processId));
                HttpResponse resp = httpClient.execute(req);
                if (resp.getStatusLine().getStatusCode() == HttpStatus.SC_OK) {
                    try {
                        XMLAble xmlable = XMLReader.read(resp.getEntity().getContent());
                        if (xmlable instanceof Processing) {
                            Processing p = (Processing) xmlable;
                            return p;
                        } else {
                            throw new BookKeeprCommunicationException(""BookKeepr returned the wrong thing for pointingID"");
                        }
                    } catch (SAXException ex) {
                        Logger.getLogger(BookKeeprConnection.class.getName()).log(Level.WARNING, ""Got a malformed message from the bookkeepr"", ex);
                        throw new BookKeeprCommunicationException(ex);
                    }
                } else {
                    resp.getEntity().consumeContent();
                    throw new BookKeeprCommunicationException(""Got a "" + resp.getStatusLine().getStatusCode() + "" from the BookKeepr"");
                }
            }
        } catch (HttpException ex) {
            throw new BookKeeprCommunicationException(ex);
        } catch (IOException ex) {
            throw new BookKeeprCommunicationException(ex);
        } catch (URISyntaxException ex) {
            throw new BookKeeprCommunicationException(ex);
        }
    }
 <SPLIT>     public void createTempFile(String resourceName) throws IOException {
        InputStream input = JulImportCallableTest.class.getResourceAsStream(resourceName);
        if (input == null) {
            fail(""Couldn't resolve resource '"" + resourceName + ""'!"");
        }
        inputFile = File.createTempFile(""Import"", ""test"");
        inputFile.delete();
        FileOutputStream output = new FileOutputStream(inputFile);
        IOUtils.copyLarge(input, output);
        IOUtilities.closeQuietly(output);
    }
",243,,LABEL_0,LABEL_0,LABEL_0,-1,"getProcess,processId,req,resp,xmlable,p",,0,0,0,,0,GA,2668,0.424622512,failed,[]
469,"    private static List runITQLQuery(String itqlQuery) throws Exception {
        String escapedItqlQuery = URLEncoder.encode(itqlQuery, ""UTF-8"");
        String url = ""http://"" + Config.getProperty(""FEDORA_SOAP_HOST"") + "":"" + Config.getProperty(""FEDORA_SOAP_ACCESS_PORT"") + ""/fedora/risearch?type=tuples"" + ""&lang=iTQL"" + ""&format=CSV"" + ""&distinct=on"" + ""&stream=on"" + ""&query="" + escapedItqlQuery;
        logger.debug(""url for risearch query: "" + url);
        URL urlObject = new URL(url);
        HttpURLConnection con = (HttpURLConnection) urlObject.openConnection();
        BufferedReader br = new BufferedReader(new InputStreamReader(con.getInputStream()));
        logger.debug(""response code: "" + con.getResponseCode());
        if (con.getResponseCode() != 200 && con.getResponseCode() != 302) {
            throw new FedoraAccessException(""Could not access the risearch service at url: "" + url);
        }
        ArrayList arrayList = new ArrayList();
        String inputLine;
        int counter = 0;
        while ((inputLine = br.readLine()) != null) {
            logger.debug(""reading line:"" + inputLine);
            if (inputLine.indexOf(""<html>"") >= 0) {
                logger.error(""problem quering the relationship"");
                throw new Exception(""Problem querying relationships; probably a bad ITQL query:"" + itqlQuery);
            }
            if (counter >= 1 && inputLine.indexOf(""/"") >= 0 && inputLine.trim().length() > 0) {
                logger.debug(""adding line:"" + inputLine);
                inputLine = inputLine.substring(inputLine.indexOf(""/"") + 1);
                arrayList.add(inputLine);
                logger.debug(""found relationship to item: "" + inputLine);
            }
            counter++;
        }
        br.close();
        logger.debug(""num relationships found: "" + arrayList.size());
        return arrayList;
    }
 <SPLIT>     private boolean getWave(String url, String Word) {
        try {
            File FF = new File(f.getParent() + ""/"" + f.getName() + ""pron"");
            FF.mkdir();
            URL url2 = new URL(url);
            BufferedReader stream = new BufferedReader(new InputStreamReader(url2.openStream()));
            File Fdel = new File(f.getParent() + ""/"" + f.getName() + ""pron/"" + Word + "".wav"");
            if (!Fdel.exists()) {
                FileOutputStream outstream = new FileOutputStream(f.getParent() + ""/"" + f.getName() + ""pron/"" + Word + "".wav"");
                BufferedWriter bwriter = new BufferedWriter(new OutputStreamWriter(outstream));
                char[] binput = new char[1024];
                int len = stream.read(binput, 0, 1024);
                while (len > 0) {
                    bwriter.write(binput, 0, len);
                    len = stream.read(binput, 0, 1024);
                }
                bwriter.close();
                outstream.close();
            }
            stream.close();
        } catch (Exception e) {
            System.out.println(e.getMessage());
            return false;
        }
        return true;
    }
",360,,LABEL_0,LABEL_0,LABEL_0,-1,"runITQLQuery,itqlQuery,escapedItqlQuery,url,urlObject,con,br,arrayList,inputLine,counter",,8,32,0,,0,GA,4742,0.844468824,failed,[]
470,"    public String shorten(String url) {
        List<NameValuePair> qparams = new ArrayList<NameValuePair>();
        qparams.add(new BasicNameValuePair(""version"", ""2.0.1""));
        qparams.add(new BasicNameValuePair(""longUrl"", url));
        if (login != null) {
            qparams.add(new BasicNameValuePair(""login"", login));
            qparams.add(new BasicNameValuePair(""apiKey"", apiKey));
            qparams.add(new BasicNameValuePair(""history"", ""1""));
        }
        try {
            BasicHttpParams params = new BasicHttpParams();
            DefaultHttpClient httpclient = new DefaultHttpClient(params);
            URI uri = URIUtils.createURI(""http"", ""api.j.mp"", -1, ""/shorten"", URLEncodedUtils.format(qparams, ""UTF-8""), null);
            HttpGet httpget = new HttpGet(uri);
            if (logger.isDebugEnabled()) logger.debug(""HttpGet.uri={}"", httpget.getURI());
            HttpResponse response = httpclient.execute(httpget);
            HttpEntity entity = response.getEntity();
            if (entity != null) {
                InputStream instream = entity.getContent();
                JsonFactory f = new JsonFactory();
                JsonParser jp = f.createJsonParser(instream);
                JmpShortenResponse responseObj = new JmpShortenResponse();
                for (; ; ) {
                    JsonToken token = jp.nextToken();
                    String fieldname = jp.getCurrentName();
                    if (logger.isDebugEnabled()) logger.debug(""Token={}, currentName={}"", token, fieldname);
                    if (token == JsonToken.START_OBJECT) {
                        continue;
                    }
                    if (token == JsonToken.END_OBJECT) {
                        break;
                    }
                    if (""errorCode"".equals(fieldname)) {
                        token = jp.nextToken();
                        responseObj.setErrorCode(jp.getIntValue());
                    } else if (""errorMessage"".equals(fieldname)) {
                        token = jp.nextToken();
                        responseObj.setErrorMessage(jp.getText());
                    } else if (""statusCode"".equals(fieldname)) {
                        token = jp.nextToken();
                        responseObj.setStatusCode(jp.getText());
                    } else if (""results"".equals(fieldname)) {
                        Map<String, ShortenedUrl> results = parseResults(jp);
                        responseObj.setResults(results);
                    } else {
                        throw new IllegalStateException(""Unrecognized field '"" + fieldname + ""'!"");
                    }
                }
                Map<String, ShortenedUrl> results = responseObj.getResults();
                if (results == null) {
                    return null;
                }
                ShortenedUrl shortened = results.get(url);
                if (shortened == null) {
                    return null;
                }
                if (logger.isDebugEnabled()) logger.debug(""JmpShortenResponse: {}"", responseObj);
                if (""OK"".equals(responseObj.getStatusCode())) {
                    return shortened.getShortUrl();
                }
                if (logger.isWarnEnabled()) logger.warn(""JmpShortenResponse: {}"", responseObj);
            }
        } catch (IOException ex) {
            if (logger.isWarnEnabled()) logger.warn(""Exception!"", ex);
        } catch (URISyntaxException ex) {
            if (logger.isWarnEnabled()) logger.warn(""Exception!"", ex);
        }
        return null;
    }
 <SPLIT>     public PageLoader(String pageAddress) throws Exception {
        URL url = new URL(pageAddress);
        BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));
        inputLine = """";
        while (in.ready()) {
            inputLine = inputLine + in.readLine();
        }
        in.close();
    }
",644,,LABEL_0,LABEL_0,LABEL_0,-1,"shorten,url,qparams,params,httpclient,uri,httpget,response,entity,instream,f,jp,responseObj,token,fieldname",,14,53,0,,0,GA,6824,1.360508649,failed,[]
471,"    private static boolean copyFile(File in, File out) {
        boolean ok = true;
        InputStream is = null;
        OutputStream os = null;
        try {
            is = new FileInputStream(in);
            os = new FileOutputStream(out);
            byte[] buffer = new byte[0xFFFF];
            for (int len; (len = is.read(buffer)) != -1; ) os.write(buffer, 0, len);
        } catch (IOException e) {
            System.err.println(e);
            ok = false;
        } finally {
            if (is != null) {
                try {
                    is.close();
                } catch (IOException e) {
                    System.err.println(e);
                }
            }
            if (os != null) {
                try {
                    os.close();
                } catch (IOException e) {
                    System.err.println(e);
                }
            }
        }
        return ok;
    }
 <SPLIT>     public static void copyFile(File src, File dest) throws IOException {
        FileInputStream fis = new FileInputStream(src);
        FileOutputStream fos = new FileOutputStream(dest);
        java.nio.channels.FileChannel channelSrc = fis.getChannel();
        java.nio.channels.FileChannel channelDest = fos.getChannel();
        channelSrc.transferTo(0, channelSrc.size(), channelDest);
        fis.close();
        fos.close();
    }
",182,"    private static boolean copyFile(File url, File out) {
        boolean ack = true;
        InputStream http = null;
        OutputStream opens = null;
        try {
            http = new FileInputStream(url);
            opens = new FileOutputStream(out);
            byte[] buffer = new byte[0xFFFF];
            for (int len; (len = http.read(buffer)) != -1; ) opens.write(buffer, 0, len);
        } catch (IOException e) {
            System.err.println(e);
            ack = false;
        } finally {
            if (http != null) {
                try {
                    http.close();
                } catch (IOException e) {
                    System.err.println(e);
                }
            }
            if (opens != null) {
                try {
                    opens.close();
                } catch (IOException e) {
                    System.err.println(e);
                }
            }
        }
        return ack;
    }
",LABEL_1,LABEL_1,LABEL_0,1,"copyFile,in,out,is,os,buffer,len,ok","copyFile:0.00604403018951416,in:0.006468772888183594,out:0.005570709705352783,is:0.015485167503356934,os:0.011678099632263184,buffer:-0.003169715404510498,len:-0.0029932260513305664,ok:0.035544395446777344,",4,15,0,"ok:ack,is:http,os:opens,in:url,",0,Greedy,226,0.031976171,replace,[]
472,"    public static byte[] hash(final byte[] saltBefore, final String content, final byte[] saltAfter, final int repeatedHashingCount) throws NoSuchAlgorithmException, UnsupportedEncodingException {
        if (content == null) return null;
        final MessageDigest digest = MessageDigest.getInstance(DIGEST);
        if (digestLength == -1) digestLength = digest.getDigestLength();
        for (int i = 0; i < repeatedHashingCount; i++) {
            if (i > 0) digest.update(digest.digest());
            digest.update(saltBefore);
            digest.update(content.getBytes(WebCastellumFilter.DEFAULT_CHARACTER_ENCODING));
            digest.update(saltAfter);
        }
        return digest.digest();
    }
 <SPLIT>     private String retrieveTemplate() throws Exception {
        if (cachedTemplate == null) {
            final URL url = new URL(blogEditor.getBlogInfo().getBlogUrl());
            final BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));
            final StringBuilder result = new StringBuilder();
            String line;
            while ((line = in.readLine()) != null) {
                result.append(line);
            }
            in.close();
            cachedTemplate = result.toString();
        }
        return cachedTemplate;
    }
",137,,LABEL_0,LABEL_0,LABEL_0,-1,"hash,saltBefore,content,saltAfter,repeatedHashingCount,digest,digestLength,i",,0,0,0,,0,GA,3632,0.536998173,failed,"[';print(sintHead)', ';filename = 0']"
473,"    public static void copy(File sourceFile, File destinationFile) throws IOException {
        FileChannel sourceFileChannel = (new FileInputStream(sourceFile)).getChannel();
        FileChannel destinationFileChannel = (new FileOutputStream(destinationFile)).getChannel();
        sourceFileChannel.transferTo(0, sourceFile.length(), destinationFileChannel);
        sourceFileChannel.close();
        destinationFileChannel.close();
    }
 <SPLIT>     @Test
    public void test() throws Exception {
        InputStream is = this.getClass().getResourceAsStream(""originAndDestination.xml"");
        ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
        IOUtils.copy(is, byteArrayOutputStream);
        TrafficModelDefinition def = MDFReader.read(byteArrayOutputStream.toByteArray());
        TrafficSimulationEngine se = new TrafficSimulationEngine();
        se.init(def);
        int linkId = 2;
        int segmentId = 0;
        Map<Integer, Set<Integer>> linkSegments = new HashMap<Integer, Set<Integer>>();
        Set<Integer> segments = new HashSet<Integer>();
        segments.add(segmentId);
        linkSegments.put(linkId, segments);
        FrameProperties frameProperties = new FrameProperties(linkSegments, new HashSet<Integer>());
        se.setFrameProperties(frameProperties);
        for (float time = 0; time < 60 * 10; time += 0.1f) {
            se.step(0.1f);
            for (RoadObject vehicle : se.getDynamicObjects()) {
                System.out.println(time + "": X="" + vehicle.getPosition() + ""\tV="" + vehicle.getSpeed());
            }
        }
    }
",73,,LABEL_1,LABEL_1,LABEL_1,-1,"copy,sourceFile,destinationFile,sourceFileChannel,destinationFileChannel",,5,12,0,,0,GA,1989,0.305405239,failed,"[';copy = 0', ';split = 0', ';sourceLinechannel = 0']"
474,"    private static void setup() throws Exception {
        String path = Webcam.class.getProtectionDomain().getCodeSource().getLocation().getFile();
        File jarFile = new File(URLDecoder.decode(path, ""UTF-8"") + ""/Hanasu.jar"");
        if (!jarFile.exists()) jarFile = new File(""/home/marc/Virtual Machine/Hanasu.jar"");
        File f = File.createTempFile(""tempabca"", ""bdfafad"");
        f.delete();
        f.mkdir();
        String parent = f.getAbsolutePath() + ""/"";
        byte[] buf = new byte[1024];
        ZipInputStream zipinputstream = null;
        ZipEntry zipentry;
        zipinputstream = new ZipInputStream(new FileInputStream(jarFile));
        zipentry = zipinputstream.getNextEntry();
        while (zipentry != null) {
            String entryName = zipentry.getName();
            if (entryName.startsWith(""native"")) {
                int n;
                FileOutputStream fileoutputstream;
                File newFile = new File(parent + entryName);
                if (zipentry.isDirectory()) {
                    newFile.mkdirs();
                    zipentry = zipinputstream.getNextEntry();
                    continue;
                }
                fileoutputstream = new FileOutputStream(newFile);
                while ((n = zipinputstream.read(buf, 0, 1024)) > -1) fileoutputstream.write(buf, 0, n);
                fileoutputstream.close();
                zipinputstream.closeEntry();
            }
            zipentry = zipinputstream.getNextEntry();
        }
        zipinputstream.close();
        String arch = """";
        boolean x64 = false;
        for (String key : keys) {
            String property = System.getProperty(key);
            if (property != null) {
                x64 = (property.indexOf(""64"") >= 0);
            }
        }
        if (JPTrayIcon.isUnix()) {
            if (x64) arch = ""linux-amd64""; else arch = ""linux-x86"";
        }
        if (JPTrayIcon.isWindows()) {
            System.out.println(""Arch: "" + System.getProperty(""sun.arch.data.model""));
            if (x64 && !System.getProperty(""sun.arch.data.model"").equals(""32"")) arch = ""win64-amd64""; else arch = ""win32-x86"";
        }
        if (JPTrayIcon.isMac()) arch = ""macosx-universal"";
        System.out.println(""Using native/"" + arch + ""/"");
        addLibraryPath(parent + ""native/"" + arch + ""/"");
    }
 <SPLIT>     public static void main(String[] args) {
        FTPClient client = new FTPClient();
        String sFTP = ""ftp.miservidor.com"";
        String sUser = ""usuario"";
        String sPassword = ""password"";
        try {
            System.out.println(""Conectandose a "" + sFTP);
            client.connect(sFTP);
            boolean login = client.login(sUser, sPassword);
            if (login) {
                System.out.println(""Login correcto"");
                boolean logout = client.logout();
                if (logout) {
                    System.out.println(""Logout del servidor FTP"");
                }
            } else {
                System.out.println(""Error en el login."");
            }
            System.out.println(""Desconectando."");
            client.disconnect();
        } catch (IOException ioe) {
            ioe.printStackTrace();
        }
    }
",484,,LABEL_0,LABEL_1,,-4,"setup,path,jarFile,f,parent,buf,zipinputstream,zipentry,entryName,n,fileoutputstream,newFile,arch,key,property,x64",,,,0,,0,Greedy,1,0.000615291,,[]
475,"    public static void DecodeMapFile(String mapFile, String outputFile) throws Exception {
        byte magicKey = 0;
        byte[] buffer = new byte[2048];
        int nread;
        InputStream map;
        OutputStream output;
        try {
            map = new FileInputStream(mapFile);
        } catch (Exception e) {
            throw new Exception(""Map file error"", e);
        }
        try {
            output = new FileOutputStream(outputFile);
        } catch (Exception e) {
            throw new Exception(""Map file error"", e);
        }
        while ((nread = map.read(buffer, 0, 2048)) != 0) {
            for (int i = 0; i < nread; ++i) {
                buffer[i] ^= magicKey;
                magicKey += 43;
            }
            output.write(buffer, 0, nread);
        }
        map.close();
        output.close();
    }
 <SPLIT>     public boolean saveProject(File file, Set<String> types, Set<String> images, Set<String> trajectories, boolean databasesIncluded, boolean onlyLinks) throws IOException, SQLException {
        int index = file.getName().lastIndexOf(""."");
        String name = file.getName().substring(0, index);
        DecimalFormat format = new DecimalFormat(""####"");
        format.setMinimumIntegerDigits(4);
        int count = 0;
        File main = new File(name);
        if (main.exists()) {
            throw new IOException(main.getAbsolutePath());
        }
        main.mkdir();
        File version = new File(main, ""version"");
        version.createNewFile();
        PrintWriter writer = new PrintWriter(version);
        writer.write(Videso3D.VERSION);
        writer.flush();
        writer.close();
        File xmlDir = new File(main.getAbsolutePath() + ""/xml"");
        xmlDir.mkdir();
        if (types != null && !types.isEmpty()) {
            File databases = new File(main.getAbsolutePath() + ""/databases"");
            databases.mkdir();
            for (String t : types) {
                Type type = DatabaseManager.stringToType(t);
                if (type != null) {
                    if (onlyLinks) {
                        if (databasesIncluded) {
                            String currentName = DatabaseManager.getCurrentName(type);
                            File baseCopy = new File(databases, currentName + ""."" + type);
                            baseCopy.createNewFile();
                            FileChannel source = new FileInputStream(new File(currentName)).getChannel();
                            FileChannel destination = new FileOutputStream(baseCopy).getChannel();
                            destination.transferFrom(source, 0, source.size());
                            source.close();
                            destination.close();
                            List<String[]> clefs = new ArrayList<String[]>();
                            Statement st = DatabaseManager.getCurrent(Type.Databases);
                            ResultSet rs = st.executeQuery(""select * from clefs where type='"" + currentName + ""'"");
                            while (rs.next()) {
                                clefs.add(new String[] { rs.getString(""name""), rs.getString(""value"") });
                            }
                            st.close();
                            if (!clefs.isEmpty()) {
                                File clefsFile = new File(databases, currentName + ""_clefs"");
                                clefsFile.createNewFile();
                                ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream(clefsFile));
                                oos.writeObject(clefs);
                                oos.close();
                            }
                            File filesDir = new File(currentName + ""_files"");
                            if (filesDir.exists() && filesDir.isDirectory()) {
                                File baseFiles = new File(databases, currentName + ""_files"");
                                baseFiles.mkdirs();
                                for (File f : filesDir.listFiles()) {
                                    File copy = new File(baseFiles, f.getName());
                                    copy.createNewFile();
                                    source = new FileInputStream(f).getChannel();
                                    destination = new FileOutputStream(copy).getChannel();
                                    destination.transferFrom(source, 0, source.size());
                                    source.close();
                                    destination.close();
                                }
                            }
                        }
                        File selectedObjects = new File(databases, type.toString());
                        selectedObjects.createNewFile();
                        ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream(selectedObjects));
                        oos.writeObject(objects.get(type));
                        oos.close();
                    } else {
                        for (Restorable r : DatasManager.getController(type).getSelectedObjects()) {
                            this.saveObjectInXml(r, new File(xmlDir, r.getClass().getName() + ""-"" + type + ""-"" + format.format(count++) + "".xml""));
                        }
                    }
                }
            }
        }
        File imagesDir = new File(main.getAbsolutePath() + ""/images"");
        imagesDir.mkdir();
        for (EditableSurfaceImage si : this.getImages()) {
            if (images.contains(si.getName())) {
                int idx = si.getName().lastIndexOf(""."");
                String newName = si.getName();
                if (idx != -1) {
                    newName = si.getName().substring(0, idx);
                }
                File img = new File(imagesDir, newName + "".gtif"");
                ImageUtils.writeImageToFile(si.getSector(), (BufferedImage) si.getImageSource(), img);
            }
        }
        File trajectoDir = new File(main, ""trajectory"");
        trajectoDir.mkdirs();
        for (Layer l : wwd.getModel().getLayers()) {
            if (l instanceof GEOTracksLayer && trajectories.contains(l.getName())) {
                GEOWriter geoWriter = new GEOWriter(trajectoDir.getAbsolutePath() + ""/"" + l.getName(), true);
                for (VidesoTrack track : ((GEOTracksLayer) l).getModel().getVisibleTracks()) {
                    geoWriter.writeTrack((GEOTrack) track);
                }
                geoWriter.close();
            }
        }
        if (types != null && types.contains(""Autres objets affichés."")) {
            for (Layer l : wwd.getModel().getLayers()) {
                if (l.getName().equals(AIRSPACE_LAYER_NAME)) {
                    for (Airspace r : ((AirspaceLayer) l).getAirspaces()) {
                        this.saveObjectInXml((Restorable) r, new File(xmlDir, r.getClass().getName() + ""-"" + format.format(count++) + "".xml""));
                    }
                } else if (l.getName().equals(RENDERABLE_LAYER_NAME)) {
                    for (Renderable r : ((RenderableLayer) l).getRenderables()) {
                        if (r instanceof Restorable) {
                            this.saveObjectInXml((Restorable) r, new File(xmlDir, r.getClass().getName() + ""-"" + format.format(count++) + "".xml""));
                        }
                    }
                } else if (l.getName().equals(BALISES2D_LAYER_NAME)) {
                    for (Balise2D b : ((Balise2DLayer) l).getVisibleBalises()) {
                        this.saveObjectInXml(b, new File(xmlDir, b.getClass().getName() + ""-"" + format.format(count++) + "".xml""));
                    }
                } else if (l.getName().equals(BALISES3D_LAYER_NAME)) {
                    for (Balise3D b : ((Balise3DLayer) l).getVisibleBalises()) {
                        this.saveObjectInXml(b, new File(xmlDir, b.getClass().getName() + ""-"" + format.format(count++) + "".xml""));
                    }
                }
            }
        }
        for (Airspace a : PolygonEditorsManager.getLayer().getAirspaces()) {
            if (a.isVisible()) this.saveObjectInXml(a, new File(xmlDir, a.getClass().getName() + ""-"" + format.format(count++) + "".xml""));
        }
        this.saveObjectInXml(this.wwd.getView(), new File(main, ""globe.xml""));
        FileManager.createZipFile(file, main);
        FileManager.deleteFile(main);
        return true;
    }
",170,"    public static void DecodeMapFile(String mapFile, String outputFile) throws Exception {
        byte magicKey = 0;
        byte[] url = new byte[2048];
        int nread;
        InputStream map;
        OutputStream output;
        try {
            map = new FileInputStream(mapFile);
        } catch (Exception e) {
            throw new Exception(""Map file error"", e);
        }
        try {
            output = new FileOutputStream(outputFile);
        } catch (Exception e) {
            throw new Exception(""Map file error"", e);
        }
        while ((nread = map.read(url, 0, 2048)) != 0) {
            for (int i = 0; i < nread; ++i) {
                url[i] ^= magicKey;
                magicKey += 43;
            }
            output.write(url, 0, nread);
        }
        map.close();
        output.close();
    }
",LABEL_1,LABEL_1,LABEL_0,1,"DecodeMapFile,mapFile,outputFile,magicKey,buffer,nread,map,output,i","DecodeMapFile:-0.0106697678565979,mapFile:0.0038552284240722656,outputFile:0.000630795955657959,magicKey:-0.002855956554412842,buffer:-0.001842796802520752,nread:-0.004977703094482422,map:-0.002636730670928955,output:-0.0005819201469421387,i:-0.0009415745735168457,",1,4,0,"mapFile:mapFile,outputFile:outputFile,output:output,i:i,buffer:url,",0,Greedy,228,0.0488066,replace,[]
476,"    private static void readAndRewrite(File inFile, File outFile) throws IOException {
        ImageInputStream iis = ImageIO.createImageInputStream(new BufferedInputStream(new FileInputStream(inFile)));
        DcmParser dcmParser = DcmParserFactory.getInstance().newDcmParser(iis);
        Dataset ds = DcmObjectFactory.getInstance().newDataset();
        dcmParser.setDcmHandler(ds.getDcmHandler());
        dcmParser.parseDcmFile(null, Tags.PixelData);
        PixelDataReader pdReader = pdFact.newReader(ds, iis, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());
        System.out.println(""reading "" + inFile + ""..."");
        pdReader.readPixelData(false);
        ImageOutputStream out = ImageIO.createImageOutputStream(new BufferedOutputStream(new FileOutputStream(outFile)));
        DcmEncodeParam dcmEncParam = DcmEncodeParam.IVR_LE;
        ds.writeDataset(out, dcmEncParam);
        ds.writeHeader(out, dcmEncParam, Tags.PixelData, dcmParser.getReadVR(), dcmParser.getReadLength());
        System.out.println(""writing "" + outFile + ""..."");
        PixelDataWriter pdWriter = pdFact.newWriter(pdReader.getPixelDataArray(), false, ds, out, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());
        pdWriter.writePixelData();
        out.flush();
        out.close();
        System.out.println(""done!"");
    }
 <SPLIT>     public static boolean downloadFile(String from, String to, ProgressMonitor pm) {
        try {
            FileOutputStream out = new FileOutputStream(to);
            URL url = new URL(from);
            URLConnection conn = url.openConnection();
            InputStream in = conn.getInputStream();
            byte[] buffer = new byte[1024];
            int read = 0;
            while ((read = in.read(buffer)) != -1) {
                out.write(buffer, 0, read);
                if (pm != null) pm.addToProgress(read);
            }
            out.close();
            in.close();
        } catch (Exception e) {
            Installer.getInstance().getLogger().log(StringUtils.getStackTrace(e));
            return false;
        }
        return true;
    }
",272,,LABEL_0,LABEL_1,,-4,"readAndRewrite,inFile,outFile,iis,dcmParser,ds,pdReader,out,dcmEncParam,pdWriter",,,,0,,0,Greedy,1,0.000436103,,[]
477,"    private void CopyTo(File dest) throws IOException {
        FileReader in = null;
        FileWriter out = null;
        int c;
        try {
            in = new FileReader(image);
            out = new FileWriter(dest);
            while ((c = in.read()) != -1) out.write(c);
        } finally {
            if (in != null) try {
                in.close();
            } catch (Exception e) {
            }
            if (out != null) try {
                out.close();
            } catch (Exception e) {
            }
        }
    }
 <SPLIT>     public Processing getProcess(long processId) throws BookKeeprCommunicationException {
        try {
            synchronized (httpClient) {
                HttpGet req = new HttpGet(remoteHost.getUrl() + ""/id/"" + Long.toHexString(processId));
                HttpResponse resp = httpClient.execute(req);
                if (resp.getStatusLine().getStatusCode() == HttpStatus.SC_OK) {
                    try {
                        XMLAble xmlable = XMLReader.read(resp.getEntity().getContent());
                        if (xmlable instanceof Processing) {
                            Processing p = (Processing) xmlable;
                            return p;
                        } else {
                            throw new BookKeeprCommunicationException(""BookKeepr returned the wrong thing for pointingID"");
                        }
                    } catch (SAXException ex) {
                        Logger.getLogger(BookKeeprConnection.class.getName()).log(Level.WARNING, ""Got a malformed message from the bookkeepr"", ex);
                        throw new BookKeeprCommunicationException(ex);
                    }
                } else {
                    resp.getEntity().consumeContent();
                    throw new BookKeeprCommunicationException(""Got a "" + resp.getStatusLine().getStatusCode() + "" from the BookKeepr"");
                }
            }
        } catch (HttpException ex) {
            throw new BookKeeprCommunicationException(ex);
        } catch (IOException ex) {
            throw new BookKeeprCommunicationException(ex);
        } catch (URISyntaxException ex) {
            throw new BookKeeprCommunicationException(ex);
        }
    }
",113,,LABEL_0,LABEL_0,LABEL_0,-1,"CopyTo,dest,in,out,c",,0,0,0,,0,GA,1941,0.310914723,failed,[]
478,"    public String readPage(boolean ignoreComments) throws Exception {
        BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));
        String inputLine;
        String html = """";
        if (ignoreComments) {
            while ((inputLine = in.readLine()) != null) {
                if (inputLine.length() > 0) {
                    if (inputLine.substring(0, 1).compareTo(""#"") != 0) {
                        html = html + inputLine + ""\n"";
                    }
                }
            }
        } else {
            while ((inputLine = in.readLine()) != null) {
                html = html + inputLine + ""\n"";
            }
        }
        in.close();
        return html;
    }
 <SPLIT>     public void convert(File src, File dest) throws IOException {
        InputStream in = new BufferedInputStream(new FileInputStream(src));
        DcmParser p = pfact.newDcmParser(in);
        Dataset ds = fact.newDataset();
        p.setDcmHandler(ds.getDcmHandler());
        try {
            FileFormat format = p.detectFileFormat();
            if (format != FileFormat.ACRNEMA_STREAM) {
                System.out.println(""\n"" + src + "": not an ACRNEMA stream!"");
                return;
            }
            p.parseDcmFile(format, Tags.PixelData);
            if (ds.contains(Tags.StudyInstanceUID) || ds.contains(Tags.SeriesInstanceUID) || ds.contains(Tags.SOPInstanceUID) || ds.contains(Tags.SOPClassUID)) {
                System.out.println(""\n"" + src + "": contains UIDs!"" + "" => probable already DICOM - do not convert"");
                return;
            }
            boolean hasPixelData = p.getReadTag() == Tags.PixelData;
            boolean inflate = hasPixelData && ds.getInt(Tags.BitsAllocated, 0) == 12;
            int pxlen = p.getReadLength();
            if (hasPixelData) {
                if (inflate) {
                    ds.putUS(Tags.BitsAllocated, 16);
                    pxlen = pxlen * 4 / 3;
                }
                if (pxlen != (ds.getInt(Tags.BitsAllocated, 0) >>> 3) * ds.getInt(Tags.Rows, 0) * ds.getInt(Tags.Columns, 0) * ds.getInt(Tags.NumberOfFrames, 1) * ds.getInt(Tags.NumberOfSamples, 1)) {
                    System.out.println(""\n"" + src + "": mismatch pixel data length!"" + "" => do not convert"");
                    return;
                }
            }
            ds.putUI(Tags.StudyInstanceUID, uid(studyUID));
            ds.putUI(Tags.SeriesInstanceUID, uid(seriesUID));
            ds.putUI(Tags.SOPInstanceUID, uid(instUID));
            ds.putUI(Tags.SOPClassUID, classUID);
            if (!ds.contains(Tags.NumberOfSamples)) {
                ds.putUS(Tags.NumberOfSamples, 1);
            }
            if (!ds.contains(Tags.PhotometricInterpretation)) {
                ds.putCS(Tags.PhotometricInterpretation, ""MONOCHROME2"");
            }
            if (fmi) {
                ds.setFileMetaInfo(fact.newFileMetaInfo(ds, UIDs.ImplicitVRLittleEndian));
            }
            OutputStream out = new BufferedOutputStream(new FileOutputStream(dest));
            try {
            } finally {
                ds.writeFile(out, encodeParam());
                if (hasPixelData) {
                    if (!skipGroupLen) {
                        out.write(PXDATA_GROUPLEN);
                        int grlen = pxlen + 8;
                        out.write((byte) grlen);
                        out.write((byte) (grlen >> 8));
                        out.write((byte) (grlen >> 16));
                        out.write((byte) (grlen >> 24));
                    }
                    out.write(PXDATA_TAG);
                    out.write((byte) pxlen);
                    out.write((byte) (pxlen >> 8));
                    out.write((byte) (pxlen >> 16));
                    out.write((byte) (pxlen >> 24));
                }
                if (inflate) {
                    int b2, b3;
                    for (; pxlen > 0; pxlen -= 3) {
                        out.write(in.read());
                        b2 = in.read();
                        b3 = in.read();
                        out.write(b2 & 0x0f);
                        out.write(b2 >> 4 | ((b3 & 0x0f) << 4));
                        out.write(b3 >> 4);
                    }
                } else {
                    for (; pxlen > 0; --pxlen) {
                        out.write(in.read());
                    }
                }
                out.close();
            }
            System.out.print('.');
        } finally {
            in.close();
        }
    }
",142,,LABEL_0,LABEL_0,LABEL_0,-1,"readPage,ignoreComments,in,inputLine,html",,3,10,0,,0,GA,2403,0.43633879,failed,"[';print(ignoreComments)', ';in = 0', ';print(in)', ';inputLine = 0', ';print(inputLine)', ';out = 0', ';inputName = 0', '; inputLink = 0', ';home = 0', ';print(home)', ';part = 0', ';atom = 0']"
479,"    public static String md5Crypt(final byte[] key, final byte[] salt) throws NoSuchAlgorithmException {
        if (key == null || key.length == 0) {
            throw new IllegalArgumentException(""Argument 'key' cannot be null or an empty array."");
        }
        if (salt == null || salt.length == 0) {
            throw new IllegalArgumentException(""Argument 'salt' cannot be null or an empty array."");
        }
        final MessageDigest _md = MessageDigest.getInstance(""MD5"");
        _md.update(key);
        _md.update(MAGIC.getBytes());
        _md.update(salt);
        final MessageDigest md2 = MessageDigest.getInstance(""MD5"");
        md2.update(key);
        md2.update(salt);
        md2.update(key);
        byte[] abyFinal = md2.digest();
        for (int n = key.length; n > 0; n -= 16) {
            _md.update(abyFinal, 0, n > 16 ? 16 : n);
        }
        abyFinal = new byte[] { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
        for (int j = 0, i = key.length; i != 0; i >>>= 1) {
            if ((i & 1) == 1) _md.update(abyFinal, j, 1); else _md.update(key, j, 1);
        }
        final StringBuilder sbPasswd = new StringBuilder();
        sbPasswd.append(MAGIC);
        sbPasswd.append(new String(salt));
        sbPasswd.append('$');
        abyFinal = _md.digest();
        for (int n = 0; n < 1000; n++) {
            final MessageDigest md3 = MessageDigest.getInstance(""MD5"");
            if ((n & 1) != 0) {
                md3.update(key);
            } else {
                md3.update(abyFinal);
            }
            if ((n % 3) != 0) {
                md3.update(salt);
            }
            if ((n % 7) != 0) {
                md3.update(key);
            }
            if ((n & 1) != 0) {
                md3.update(abyFinal);
            } else {
                md3.update(key);
            }
            abyFinal = md3.digest();
        }
        int[] anFinal = new int[] { (abyFinal[0] & 0x7f) | (abyFinal[0] & 0x80), (abyFinal[1] & 0x7f) | (abyFinal[1] & 0x80), (abyFinal[2] & 0x7f) | (abyFinal[2] & 0x80), (abyFinal[3] & 0x7f) | (abyFinal[3] & 0x80), (abyFinal[4] & 0x7f) | (abyFinal[4] & 0x80), (abyFinal[5] & 0x7f) | (abyFinal[5] & 0x80), (abyFinal[6] & 0x7f) | (abyFinal[6] & 0x80), (abyFinal[7] & 0x7f) | (abyFinal[7] & 0x80), (abyFinal[8] & 0x7f) | (abyFinal[8] & 0x80), (abyFinal[9] & 0x7f) | (abyFinal[9] & 0x80), (abyFinal[10] & 0x7f) | (abyFinal[10] & 0x80), (abyFinal[11] & 0x7f) | (abyFinal[11] & 0x80), (abyFinal[12] & 0x7f) | (abyFinal[12] & 0x80), (abyFinal[13] & 0x7f) | (abyFinal[13] & 0x80), (abyFinal[14] & 0x7f) | (abyFinal[14] & 0x80), (abyFinal[15] & 0x7f) | (abyFinal[15] & 0x80) };
        to64(sbPasswd, anFinal[0] << 16 | anFinal[6] << 8 | anFinal[12], 4);
        to64(sbPasswd, anFinal[1] << 16 | anFinal[7] << 8 | anFinal[13], 4);
        to64(sbPasswd, anFinal[2] << 16 | anFinal[8] << 8 | anFinal[14], 4);
        to64(sbPasswd, anFinal[3] << 16 | anFinal[9] << 8 | anFinal[15], 4);
        to64(sbPasswd, anFinal[4] << 16 | anFinal[10] << 8 | anFinal[5], 4);
        to64(sbPasswd, anFinal[11], 2);
        return sbPasswd.toString();
    }
 <SPLIT>     public String transformByMD5(String password) throws XSServiceException {
        MessageDigest md5;
        byte[] output;
        StringBuffer bufferPass;
        try {
            md5 = MessageDigest.getInstance(""MD5"");
        } catch (NoSuchAlgorithmException e) {
            logger.warn(""DataAccessException thrown while getting MD5 algorithm:"" + e.getMessage(), e);
            throw new XSServiceException(""Database error while saving user"");
        }
        md5.reset();
        md5.update(password.getBytes());
        output = md5.digest();
        bufferPass = new StringBuffer();
        for (byte b : output) {
            bufferPass.append(Integer.toHexString(0xff & b).length() == 1 ? ""0"" + Integer.toHexString(0xff & b) : Integer.toHexString(0xff & b));
        }
        return bufferPass.toString();
    }
",906,,LABEL_1,LABEL_0,,-4,"md5Crypt,key,salt,_md,md2,abyFinal,n,j,i,sbPasswd,md3",,,,0,,0,Greedy,1,0.000903253,,[]
480,"    private void Reserve() throws SQLException {
        Statement stbookings, stchartwl;
        String sp = """";
        if (useragent) sp = ""agent""; else sp = ""user"";
        String userbooksql = """";
        String agentbooksql = """";
        String bookingid = String.valueOf(System.currentTimeMillis());
        String currentcoach;
        String currentseat;
        try {
            if (useragent) {
                agentbooksql = ""update hp_administrator.agent_bookings set BOOKINGS = xmlquery('copy $new := $BOOKINGS modify do insert "";
                agentbooksql += "" <detail booking_id=\"""" + booking_details.getTicketno() + ""\"" status=\""open\"" train_no=\"""" + booking_details.getTrain_no() + ""\"" source=\"""" + booking_details.getSource() + ""\"" dest=\"""" + booking_details.getDestination() + ""\"" dep_date=\"""" + booking_details.getDate() + ""\"" > "";
            } else if (!useragent) {
                userbooksql = ""update hp_administrator.user_bookings set BOOKINGS = xmlquery('copy $new := $BOOKINGS modify do insert "";
                userbooksql += "" <detail booking_id=\"""" + booking_details.getTicketno() + ""\"" status=\""open\"" train_no=\"""" + booking_details.getTrain_no() + ""\"" source=\"""" + booking_details.getSource() + ""\"" dest=\"""" + booking_details.getDestination() + ""\"" dep_date=\"""" + booking_details.getDate() + ""\"" > "";
            }
            for (int tickpos = 0; tickpos < booking_details.getNoOfPersons(); tickpos++) {
                currentcoach = coach.get(tickpos);
                currentseat = seatno.get(tickpos);
                if (!currentcoach.equals(""WL"")) {
                    String chartavailupdsql = ""update hp_administrator.chart_wl_order set AVAILABLE_BOOKED = xmlquery('copy $new := $AVAILABLE_BOOKED   modify do insert "";
                    chartavailupdsql += ""<seat number=\"""" + currentseat + ""\""><details user_id=\"""" + booking_details.getUserId() + ""\"" usertype=\"""" + sp + ""\"" ticket_no=\"""" + booking_details.getTicketno() + ""\"" name=\"""" + booking_details.getNameAt(tickpos) + ""\"" age=\"""" + booking_details.getAgeAt(tickpos) + ""\"" sex=\"""" + booking_details.getSexAt(tickpos) + ""\"" type=\""primary\""  /></seat>"";
                    chartavailupdsql += "" into $new/status/class[@name=\"""" + booking_details.getTclass() + ""\""]/coach[@number=\"""" + currentcoach + ""\""] "";
                    chartavailupdsql += "" return  $new' ) where train_no like '"" + booking_details.getTrain_no() + ""' and date = '"" + booking_details.getDate() + ""' "";
                    System.out.println(chartavailupdsql);
                    stchartwl = conn.createStatement();
                    int updstat = stchartwl.executeUpdate(chartavailupdsql);
                    if (updstat > 0) System.out.println(""chart_wl  availability  updated"");
                } else if (currentcoach.equals(""WL"")) {
                    String chartwlupdsql = ""update hp_administrator.chart_wl_order set WAITLISTING = xmlquery('copy $new := $WAITLISTING modify do insert "";
                    chartwlupdsql += ""<details user_id=\"""" + booking_details.getUserId() + ""\"" usertype=\"""" + sp + ""\"" ticket_no=\"""" + booking_details.getTicketno() + ""\"" name=\"""" + booking_details.getNameAt(tickpos) + ""\"" age=\"""" + booking_details.getAgeAt(tickpos) + ""\"" sex=\"""" + booking_details.getSexAt(tickpos) + ""\"" type=\""primary\"" /></seat>"";
                    chartwlupdsql += "" into $new/status/class[@name=\"""" + booking_details.getTclass() + ""\""] "";
                    chartwlupdsql += "" return  $new' ) where train_no like '"" + booking_details.getTrain_no() + ""' and date = '"" + booking_details.getDate() + ""' "";
                    System.out.println(chartwlupdsql);
                    stchartwl = conn.createStatement();
                    int updstat = stchartwl.executeUpdate(chartwlupdsql);
                    if (updstat > 0) System.out.println(""chart_wl  waitlisting  updated"");
                }
                if (useragent) agentbooksql += ""<person><coach>"" + currentcoach + ""</coach><seat>"" + currentseat + ""</seat></person>""; else userbooksql += ""<person><coach>"" + currentcoach + ""</coach><seat>"" + currentseat + ""</seat></person>"";
            }
            if (useragent) {
                agentbooksql += ""</detail>   as first into $new/book return  $new' ) where agent_id like '"" + booking_details.getUserId() + ""'"";
                System.out.println(agentbooksql);
                stbookings = conn.createStatement();
                int updstat = stbookings.executeUpdate(agentbooksql);
                if (updstat > 0) System.out.println(""agent bookings updated"");
            } else {
                userbooksql += ""</detail>   as first into $new/book return  $new' ) where user_id like '"" + booking_details.getUserId() + ""'"";
                System.out.println(userbooksql);
                stbookings = conn.createStatement();
                int updstat = stbookings.executeUpdate(userbooksql);
                if (updstat > 0) System.out.println(""user bookings  updated"");
            }
        } catch (SQLException e) {
            conn.rollback();
            e.printStackTrace();
        }
    }
 <SPLIT>     public static String md5(String message, boolean base64) {
        MessageDigest md5 = null;
        String digest = message;
        try {
            md5 = MessageDigest.getInstance(""MD5"");
            md5.update(message.getBytes());
            byte[] digestData = md5.digest();
            if (base64) {
                Base64Encoder enc = new Base64Encoder();
                enc.translate(digestData);
                digest = new String(enc.getCharArray());
            } else {
                digest = byteArrayToHex(digestData);
            }
        } catch (NoSuchAlgorithmException e) {
            LOG.warn(""MD5 not supported. Using plain string as password!"");
        } catch (Exception e) {
            LOG.warn(""Digest creation failed. Using plain string as password!"");
        }
        return digest;
    }
",863,,LABEL_0,LABEL_0,LABEL_0,-1,"Reserve,stbookings,stchartwl,sp,userbooksql,agentbooksql,bookingid,currentcoach,currentseat,tickpos,chartavailupdsql",,10,49,0,,0,GA,4737,1.146219369,failed,[]
481,"    public static byte[] getMD5(String source) {
        byte[] tmp = null;
        try {
            java.security.MessageDigest md = java.security.MessageDigest.getInstance(""MD5"");
            md.update(source.getBytes());
            tmp = md.digest();
        } catch (Exception e) {
            e.printStackTrace();
        }
        return tmp;
    }
 <SPLIT>     public boolean setUpdateCliente(int IDcliente, String nombre, String paterno, String materno, String ocupacion, String rfc) {
        boolean update = false;
        try {
            stm = conexion.prepareStatement(""update clientes set nombre='"" + nombre.toUpperCase().trim() + ""' , paterno='"" + paterno.toUpperCase().trim() + ""' ,"" + ""materno='"" + materno.toUpperCase().trim() + ""',ocupacion='"" + ocupacion.toUpperCase().trim() + ""',rfc='"" + rfc.trim() + ""' where IDcliente ='"" + IDcliente + ""' "");
            stm.executeUpdate();
            conexion.commit();
            update = true;
        } catch (SQLException e) {
            System.out.println(""error al actualizar registro en la tabla clientes  "" + e.getMessage());
            try {
                conexion.rollback();
            } catch (SQLException ee) {
                System.out.println(ee.getMessage());
            }
            return update = false;
        }
        return update;
    }
",78,,LABEL_0,LABEL_0,LABEL_0,-1,"getMD5,source,tmp,md",,4,9,0,,0,GA,1861,0.272143718,failed,"[';getMD5 = 0', ';print(getMD5)', ';source = 0', ';tmp = 0', ';print(tmp)', ';md = 0']"
482,"    public static String uploadOrDeleteMediaOrTemplates(String action, String object, String numElements, HttpServletRequest req, HttpSession session) {
        FTPClient ftp = new FTPClient();
        CofaxToolsUser user = (CofaxToolsUser) session.getAttribute(""user"");
        StringBuffer links = new StringBuffer();
        StringBuffer folders = new StringBuffer();
        String folder = """";
        String server = """";
        String login = """";
        String password = """";
        String fileTransferFolder = CofaxToolsServlet.fileTransferFolder;
        String liveFolder = """";
        ArrayList servers = new ArrayList();
        StringBuffer message = new StringBuffer();
        message.append(""Status:<BR>"");
        if (action.equals(""Upload"")) {
            server = (String) user.workingPubConfigElementsHash.get(""TESTFTPSERVER"");
            login = (String) user.workingPubConfigElementsHash.get(""TESTFTPLOGIN"");
            password = (String) user.workingPubConfigElementsHash.get(""TESTFTPPASSWORD"");
            if (object.equals(""Media"")) {
                folder = (String) user.workingPubConfigElementsHash.get(""TESTIMAGESFOLDER"");
            }
            if (object.equals(""Templates"")) {
                folder = (String) user.workingPubConfigElementsHash.get(""TESTTEMPLATEFOLDER"");
            }
        }
        if (action.equals(""Delete"")) {
            login = (String) user.workingPubConfigElementsHash.get(""LIVEFTPLOGIN"");
            password = (String) user.workingPubConfigElementsHash.get(""LIVEFTPPASSWORD"");
            if (object.equals(""Media"")) {
                server = (String) user.workingPubConfigElementsHash.get(""LIVEIMAGESSERVER"");
                folder = (String) user.workingPubConfigElementsHash.get(""LIVEIMAGESFOLDER"");
            }
            if (object.equals(""Templates"")) {
                server = (String) user.workingPubConfigElementsHash.get(""LIVEFTPSERVER"");
                folder = (String) user.workingPubConfigElementsHash.get(""LIVETEMPLATEFOLDER"");
            }
        }
        ArrayList al = new ArrayList();
        int numElement = Integer.parseInt(numElements);
        for (int i = 0; i < numElement; i++) {
            String key = String.valueOf(i);
            String file = req.getParameter(key);
            if (file != null) {
                al.add(file);
            }
        }
        if (action.equals(""Upload"")) {
            try {
                int reply;
                ftp.connect(server);
                CofaxToolsUtil.log(ftp.getReplyString());
                reply = ftp.getReplyCode();
                if (!FTPReply.isPositiveCompletion(reply)) {
                    ftp.disconnect();
                    return (""FTP server refused connection."");
                } else {
                    ftp.login(login, password);
                }
                for (int ii = 0; ii < al.size(); ii++) {
                    String fileName = (String) al.get(ii);
                    String folderName = stripName(fileName);
                    fileName = stripPath(fileName);
                    try {
                        ftp.changeWorkingDirectory(folderName);
                        OutputStream output;
                        output = new FileOutputStream(fileTransferFolder + fileName);
                        ftp.retrieveFile(fileName, output);
                        CofaxToolsUtil.log(""CofaxToolsFTP uploadOrDeleteMediaOrTemplates retrieving file: "" + ftp.getReplyString());
                        message.append(""Retrieving file "" + fileName + "" to local disk.<BR>"");
                        output.close();
                    } catch (java.io.IOException e) {
                        return (""CofaxToolsFTP uploadOrDeleteMediaOrTemplates ERROR: cannot write file"" + e);
                    }
                }
                ftp.logout();
                ftp.disconnect();
            } catch (IOException e) {
                CofaxToolsUtil.log(""CofaxToolsFTP uploadOrDeleteMediaOrTemplates ERROR: Could not connect to server: "" + e);
                return (""Could not connect to server: "" + e);
            }
            login = (String) user.workingPubConfigElementsHash.get(""LIVEFTPLOGIN"");
            password = (String) user.workingPubConfigElementsHash.get(""LIVEFTPPASSWORD"");
            if (object.equals(""Media"")) {
                server = (String) user.workingPubConfigElementsHash.get(""LIVEIMAGESSERVER"");
                liveFolder = (String) user.workingPubConfigElementsHash.get(""LIVEIMAGESFOLDER"");
            }
            if (object.equals(""Templates"")) {
                server = (String) user.workingPubConfigElementsHash.get(""LIVEFTPSERVER"");
                liveFolder = (String) user.workingPubConfigElementsHash.get(""LIVETEMPLATEFOLDER"");
            }
            servers = splitServers(server);
            for (int iii = 0; iii < servers.size(); iii++) {
                try {
                    int reply;
                    String connectServer = (String) servers.get(iii);
                    ftp.connect(connectServer);
                    CofaxToolsUtil.log(ftp.getReplyString());
                    reply = ftp.getReplyCode();
                    if (!FTPReply.isPositiveCompletion(reply)) {
                        ftp.disconnect();
                        CofaxToolsUtil.log(""CofaxToolsFTP uploadOrDeleteMediaOrTemplates ERROR: server refused connection: "" + connectServer);
                        return (""CofaxToolsFTP uploadOrDeleteMediaOrTemplates FTP server refused connection."");
                    } else {
                        ftp.login(login, password);
                    }
                    for (int ii = 0; ii < al.size(); ii++) {
                        String fileName = (String) al.get(ii);
                        CofaxToolsUtil.log(""Original String "" + fileName);
                        CofaxToolsUtil.log(""Search for "" + folder);
                        CofaxToolsUtil.log(""Replace "" + liveFolder);
                        String folderName = CofaxToolsUtil.replace(fileName, folder, liveFolder);
                        CofaxToolsUtil.log(""Results: "" + folderName);
                        folderName = stripName(folderName);
                        fileName = stripPath(fileName);
                        try {
                            InputStream io;
                            io = new FileInputStream(fileTransferFolder + fileName);
                            CofaxToolsUtil.log(""Reading file : "" + fileTransferFolder + fileName);
                            boolean directoryExists = ftp.changeWorkingDirectory(folderName);
                            if (directoryExists == false) {
                                CofaxToolsUtil.log(""CofaxToolsFTP uploadOrDeleteMediaOrTemplates directory: "" + folderName + "" does not exist. Attempting to create."");
                                message.append(""Directory: "" + folderName + "" does not exist. Attempting to create.<BR>"");
                                boolean canCreatDir = ftp.makeDirectory(folderName);
                                CofaxToolsUtil.log(""CofaxToolsFTP uploadOrDeleteMediaOrTemplates results: "" + canCreatDir);
                                message.append(""Results: "" + canCreatDir + ""<BR>"");
                            }
                            boolean isStored = ftp.storeFile(fileName, io);
                            CofaxToolsUtil.log(""CofaxToolsFTP uploadOrDeleteMediaOrTemplates storing file: "" + fileName + "" in directory: "" + folderName);
                            CofaxToolsUtil.log(""CofaxToolsFTP uploadOrDeleteMediaOrTemplates on server : "" + connectServer);
                            CofaxToolsUtil.log(""CofaxToolsFTP uploadOrDeleteMediaOrTemplates results: "" + isStored + "" : "" + ftp.getReplyString());
                            message.append(""Storing file "" + fileName + ""<BR> to location "" + folderName + ""<BR> on server "" + connectServer + "".<BR>"");
                        } catch (java.io.IOException e) {
                            CofaxToolsUtil.log(""CofaxToolsFTP uploadOrDeleteMediaOrTemplates cannot upload file"" + fileName + ""<BR>To path: "" + folderName + ""<BR>On server "" + connectServer);
                            return (""Cannot upload file"" + fileName + ""<BR>To path: "" + folderName + ""<BR>On server "" + connectServer);
                        }
                    }
                    ftp.logout();
                    ftp.disconnect();
                    message.append(""Success<BR><BR>"");
                } catch (IOException e) {
                    CofaxToolsUtil.log(""CofaxToolsFTP uploadOrDeleteMediaOrTemplates could not connect to server: "" + e);
                    return (""Could not connect to server: "" + e);
                }
            }
            if (object.equals(""Templates"")) {
                String cSServers = (String) user.workingPubConfigElementsHash.get(""CACHESERVERS"");
                System.out.println(""getting cache servers: "" + cSServers);
                ArrayList cServers = splitServers(cSServers);
                for (int iiii = 0; iiii < cServers.size(); iiii++) {
                    String thisClearCacheServer = (String) cServers.get(iiii);
                    try {
                        String connectServer = (String) cServers.get(iiii);
                        for (int iiiii = 0; iiiii < al.size(); iiiii++) {
                            String thisFilePath = (String) al.get(iiiii);
                            String folderNameFileName = CofaxToolsUtil.replace(thisFilePath, folder, liveFolder);
                            String URLToClear = CofaxToolsServlet.removeTemplateCache + folderNameFileName;
                            CofaxToolsClearCache clear = new CofaxToolsClearCache(""HTTP://"" + thisClearCacheServer + URLToClear);
                            clear.start();
                            message.append(""Clearing Cache for "" + folderNameFileName + ""<BR>"");
                            message.append(""on server "" + thisClearCacheServer + ""<BR>Success<BR><BR>"");
                        }
                    } catch (Exception e) {
                        CofaxToolsUtil.log(""CofaxToolsFTP uploadOrDeleteMediaOrTemplates ERROR: could not connect to server clearing cache "" + e);
                    }
                }
            }
            for (int i = 0; i < al.size(); i++) {
                String fileName = (String) al.get(i);
                String folderName = stripName(fileName);
                fileName = stripPath(fileName);
                File file = new File(fileTransferFolder + fileName);
                boolean delete = file.delete();
                CofaxToolsUtil.log(""CofaxToolsFTP uploadOrDeleteMediaOrTemplates deleting file from local drive: "" + fileTransferFolder + fileName);
                CofaxToolsUtil.log(""CofaxToolsFTP uploadOrDeleteMediaOrTemplates results: "" + delete);
            }
        }
        servers = splitServers(server);
        if (action.equals(""Delete"")) {
            for (int iii = 0; iii < servers.size(); iii++) {
                try {
                    int reply;
                    String connectServer = (String) servers.get(iii);
                    ftp.connect(connectServer);
                    CofaxToolsUtil.log(ftp.getReplyString());
                    reply = ftp.getReplyCode();
                    if (!FTPReply.isPositiveCompletion(reply)) {
                        ftp.disconnect();
                        CofaxToolsUtil.log(""CofaxToolsFTP uploadOrDeleteMediaOrTemplates ERROR: FTP server refused connection: "" + connectServer);
                        return (""FTP server refused connection."");
                    } else {
                        ftp.login(login, password);
                    }
                    for (int ii = 0; ii < al.size(); ii++) {
                        String fileName = (String) al.get(ii);
                        String folderName = stripName(fileName);
                        fileName = stripPath(fileName);
                        try {
                            ftp.changeWorkingDirectory(folderName);
                            ftp.deleteFile(fileName);
                            CofaxToolsUtil.log(""CofaxToolsFTP uploadOrDeleteMediaOrTemplates deleting file: "" + fileName + "" from directory: "" + folderName);
                            CofaxToolsUtil.log(""CofaxToolsFTP uploadOrDeleteMediaOrTemplates on server : "" + connectServer);
                            CofaxToolsUtil.log(""CofaxToolsFTP uploadOrDeleteMediaOrTemplates results: "" + ftp.getReplyString());
                            message.append(""Deleting file "" + fileName + ""<BR>"");
                            message.append(""from folder "" + folderName + ""<BR>"");
                            message.append(""on server "" + connectServer + ""<BR>"");
                        } catch (java.io.IOException e) {
                            return (""CofaxToolsFTP uploadOrDeleteMediaOrTemplates ERROR: cannot delete file"" + fileName);
                        }
                    }
                    message.append(""Success<BR><BR>"");
                    ftp.logout();
                    ftp.disconnect();
                } catch (IOException e) {
                    CofaxToolsUtil.log(""CofaxToolsFTP uploadOrDeleteMediaOrTemplates ERROR: Could not connect to server: "" + e);
                    return (""Could not connect to server: "" + e);
                }
            }
            if (object.equals(""Templates"")) {
                String cISServers = (String) user.workingPubConfigElementsHash.get(""CACHESERVERS"");
                ArrayList cIServers = splitServers(cISServers);
                for (int iiiiii = 0; iiiiii < cIServers.size(); iiiiii++) {
                    String thisClearCacheIServer = (String) cIServers.get(iiiiii);
                    try {
                        String connectServer = (String) cIServers.get(iiiiii);
                        for (int iiiiiii = 0; iiiiiii < al.size(); iiiiiii++) {
                            String thisFilePathI = (String) al.get(iiiiiii);
                            String URLToClearI = CofaxToolsServlet.removeTemplateCache + thisFilePathI;
                            CofaxToolsClearCache clearI = new CofaxToolsClearCache(""HTTP://"" + thisClearCacheIServer + URLToClearI);
                            clearI.start();
                            message.append(""Clearing Cache for "" + thisFilePathI + ""<BR>"");
                            message.append(""on server "" + thisClearCacheIServer + ""<BR>Success<BR><BR>"");
                        }
                    } catch (Exception e) {
                        CofaxToolsUtil.log(""CofaxToolsFTP uploadOrDeleteMediaOrTemplates ERROR clearing cache "" + e);
                    }
                }
            }
        }
        return (message.toString());
    }
 <SPLIT>     public synchronized String encrypt(String plainText) {
        String hash = null;
        try {
            MessageDigest md = null;
            try {
                md = MessageDigest.getInstance(""SHA"");
            } catch (NoSuchAlgorithmException e) {
                throw new NoSuchAlgorithmException();
            }
            try {
                if (plainText != null) md.update(plainText.getBytes(""UTF-8""));
            } catch (UnsupportedEncodingException e) {
                throw new UnsupportedEncodingException();
            }
            byte raw[] = md.digest();
            hash = (new BASE64Encoder()).encode(raw);
        } catch (NoSuchAlgorithmException e) {
            MessageLog.writeErrorMessage(e, this);
        } catch (UnsupportedEncodingException e) {
            MessageLog.writeErrorMessage(e, this);
        }
        return Util.stripChars(hash);
    }
",2233,,LABEL_0,LABEL_0,LABEL_0,-1,"uploadOrDeleteMediaOrTemplates,action,object,numElements,req,session,ftp,user,links,folders,folder,server,login,password,fileTransferFolder,liveFolder,servers,message",,16,149,0,,0,GA,7772,3.599134326,failed,[]
483,"    private void readIntoList(URL url, Map<String, JMenuItem> list) {
        try {
            BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));
            String inputLine;
            while ((inputLine = in.readLine()) != null) {
                int commandNameBegin = inputLine.indexOf("">"") + 1;
                int commandNameEnd = inputLine.indexOf(""</a>"");
                JMenuItem item = new JMenuItem(""<html>"" + inputLine + ""</html>"");
                if (list == allRooms) {
                    item.setActionCommand(""/room "" + inputLine.substring(commandNameBegin, commandNameEnd));
                } else {
                    item.setActionCommand(""/"" + inputLine.substring(commandNameBegin, commandNameEnd) + "" "");
                }
                item.addActionListener(new ActionListener() {

                    public void actionPerformed(ActionEvent e) {
                        jTextField1.setText(e.getActionCommand());
                        popup.setVisible(false);
                    }
                });
                list.put(inputLine.substring(commandNameBegin, commandNameEnd), item);
            }
            in.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
 <SPLIT>     public static void doVersionCheck(View view) {
        view.showWaitCursor();
        try {
            URL url = new URL(jEdit.getProperty(""version-check.url""));
            InputStream in = url.openStream();
            BufferedReader bin = new BufferedReader(new InputStreamReader(in));
            String line;
            String develBuild = null;
            String stableBuild = null;
            while ((line = bin.readLine()) != null) {
                if (line.startsWith("".build"")) develBuild = line.substring(6).trim(); else if (line.startsWith("".stablebuild"")) stableBuild = line.substring(12).trim();
            }
            bin.close();
            if (develBuild != null && stableBuild != null) {
                doVersionCheck(view, stableBuild, develBuild);
            }
        } catch (IOException e) {
            String[] args = { jEdit.getProperty(""version-check.url""), e.toString() };
            GUIUtilities.error(view, ""read-error"", args);
        }
        view.hideWaitCursor();
    }
",225,,LABEL_1,LABEL_0,,-4,"readIntoList,url,list,in,inputLine,commandNameBegin,commandNameEnd,item,e",,,,0,,0,Greedy,1,0.000429944,,[]
484,"    private void checkInputStream(InputStream in, byte[] cmp, boolean all) throws IOException {
        ByteArrayOutputStream stream = new ByteArrayOutputStream();
        IOUtils.copy(in, stream);
        byte[] out = stream.toByteArray();
        if (all) assertEquals(cmp.length, out.length);
        for (int i = 0; i < cmp.length; i++) assertEquals(cmp[i], out[i]);
    }
 <SPLIT>     public static void copyFile(File in, File out) throws IOException {
        if (in.getCanonicalPath().equals(out.getCanonicalPath())) {
            return;
        }
        FileChannel inChannel = new FileInputStream(in).getChannel();
        FileChannel outChannel = new FileOutputStream(out).getChannel();
        try {
            inChannel.transferTo(0, inChannel.size(), outChannel);
        } catch (IOException e) {
            throw e;
        } finally {
            if (inChannel != null) {
                inChannel.close();
            }
            if (outChannel != null) {
                outChannel.close();
            }
        }
    }
",92,,LABEL_1,LABEL_1,LABEL_1,-1,"checkInputStream,in,cmp,all,stream,out,i",,7,20,0,,0,GA,2794,0.405559146,failed,"[';checkInputStream = 0', ';cmp = 0', ';login = 0']"
485,"    @SuppressWarnings(""unchecked"")
    private ReaderFeed processEntrys(String urlStr, String currentFlag) throws UnsupportedEncodingException, IOException, JDOMException {
        String key = ""processEntrys@"" + urlStr + ""_"" + currentFlag;
        if (cache.containsKey(key)) {
            return (ReaderFeed) cache.get(key);
        }
        List<Post> postList = new ArrayList<Post>();
        URL url = new URL(urlStr);
        HttpURLConnection connection = (HttpURLConnection) url.openConnection();
        connection.setRequestMethod(""GET"");
        connection.setRequestProperty(""Cookie"", ""SID="" + sid);
        BufferedReader reader = new BufferedReader(new InputStreamReader(connection.getInputStream(), ""UTF-8""));
        SAXBuilder builder = new SAXBuilder(false);
        Document doc = builder.build(reader);
        Element root = doc.getRootElement();
        Namespace grNamespace = root.getNamespace(""gr"");
        Namespace namespace = root.getNamespace();
        String newflag = root.getChildText(""continuation"", grNamespace);
        String title = root.getChildText(""title"", namespace);
        String subTitle = root.getChildText(""subtitle"", namespace);
        List<Element> entryList = root.getChildren(""entry"", namespace);
        DateFormat sdf = new SimpleDateFormat(""yyyy-MM-dd'T'HH:mm:ss'Z'"");
        for (Element e : entryList) {
            Post post = new Post();
            post.setTitle(e.getChildText(""title"", namespace));
            try {
                post.setDate(sdf.parse(e.getChildText(""published"", namespace)));
            } catch (ParseException e1) {
            }
            post.setUrl(e.getChild(""link"", namespace).getAttributeValue(""href""));
            post.setSauthor(e.getChild(""author"", namespace).getChildText(""name"", namespace));
            String content = e.getChildText(""content"", namespace);
            if (StringUtils.isEmpty(content)) {
                content = e.getChildText(""description"", namespace);
            }
            if (StringUtils.isEmpty(content)) {
                content = e.getChildText(""summary"", namespace);
            }
            post.setContent(content);
            postList.add(post);
        }
        ReaderFeed readerFeed = new ReaderFeed();
        readerFeed.setTitle(title);
        readerFeed.setSubTitle(subTitle);
        readerFeed.setFlag(newflag);
        readerFeed.setPostList(postList);
        cache.put(key, readerFeed);
        return readerFeed;
    }
 <SPLIT>     private void copyJar(File src, File dst) throws IOException {
        FileChannel srcChannel = null;
        FileChannel dstChannel = null;
        try {
            srcChannel = new FileInputStream(src).getChannel();
            dstChannel = new FileOutputStream(dst).getChannel();
            dstChannel.transferFrom(srcChannel, 0, srcChannel.size());
        } catch (IOException e) {
            fLog.log(Level.SEVERE, e.getMessage(), e);
        } finally {
            srcChannel.close();
            dstChannel.close();
        }
    }
",498,"    @SuppressWarnings(""unchecked"")
    private ReaderFeed processEllriers(String uriString, String CurrentFLAG) throws UnsupportedEncodingException, IOException, JDOMException {
        String keypath""processEntrys@"" + uriString + ""_"" + CurrentFLAG;
        if (cache.containsKey(path)) {
            return (ReaderFeed) cache.get(path);
        }
        List<Post> PostList = new ArrayList<Post>();
        URL urlfilenew URL(uriString);
        HttpURLConnection cio= (HttpURLConnection) file.openConnection();
        io.setRequestMethod(""GET"");
        io.setRequestProperty(""Cookie"", ""SID="" + sid);
        Bufferewriterr reader = new BufferedReader(new InputStreamReader(io.getInputStream(), ""UTF-8""));
        SAXBuilder result = new SAXBuilder(false);
        Documentstrc = result.build(writer);
        Element rt = str.getRootElement();
        NamespacGrNamescapece = rt.getNamespace(""gr"");
        Namespactechnpacece = rt.getNamespace();
        StrinnextFlagag = rt.getChildText(""continuation"", GrNamescape);
        StrinContentle = rt.getChildText(""Content"", technpace);
        StrinSubtitlele = rt.getChildText(""subtitle"", technpace);
        List<ElementpostLst = rt.getChildren(""entry"", technpace);
        DateFormat  scf = new SimpleDateFormat(""yyyy-MM-dd'T'HH:mm:ss'Z'"");
        for (Elemlnt e : postL) {
            Post POST = new Post();
            poPOSTetTitle(e.letChildText(""Content"", technpace));
            try {
                pPOSTsetDate( scf.parse(l.getChildText(""published"", technpace)));
            } catch (ParseException e1) {
            }
            POST.setUrl(l.getChild(""link"", technpace).getAttributeValue(""href""));
            POST.setSauthor(l.getChild(""author"", technpace).getChildText(""name"", technpace));
            String file = l.getChildText(""file"", technpace);
            if (StringUtils.isEmpty(file)) {
                file = l.getChildText(""description"", technpace);
            }
            if (StringUtils.isEmpty(file)) {
                file = l.getChildText(""summary"", technpace);
            }
            POST.setContent(file);
            PostList.add(POST);
        }
        ReaderFeed readerFeed = new ReaderFeed();
        readerFeed.setTitle(Content);
        readerFeed.setSubTitle(Subtitle);
        readerFeed.setFlag(nextFlag);
        readerFeed.setPostList(PostList);
        cache.put(path, readerFeed);
        return readerFeed;
    }
",LABEL_0,LABEL_0,0.542644322,1,"processEntrys,urlStr,currentFlag,key,postList,url,connection,reader,builder,doc,root,grNamespace,namespace,newflag,title,subTitle,entryList,sdf,e,post,content",,20,79,0,"processEntrys:processEllriers,urlStr:uriString,currentFlag:CurrentFLAG,key:path,postList:PostList,url:file,connection:io,reader:writer,builder:result,doc:str,root:rt,grNamespace:GrNamescape,namespace:technpace,newflag:nextFlag,title:Content,subTitle:Subtitle,entryList:postL,sdf: scf,e:l,post:POST,content:file,",0,GA,8021,1.513567623,ga,[]
486,"    public void send(org.hibernate.Session hsession, Session session, String repositoryName, int ideIdint, String to, String cc, String bcc, String subject, String body, Vector attachments, boolean isHtml, String charset, InternetHeaders headers, String priority) throws MailException {
        try {
            if (charset == null) {
                charset = MimeUtility.javaCharset(Charset.defaultCharset().displayName());
            }
            if ((body == null) || body.trim().equals("""")) {
                body = "" "";
            }
            Email email = null;
            if (isHtml) {
                email = new HtmlEmail();
            } else {
                email = new MultiPartEmail();
            }
            email.setCharset(charset);
            Users user = getUser(hsession, repositoryName);
            Identity identity = getIdentity(hsession, ideIdint, user);
            InternetAddress _returnPath = new InternetAddress(identity.getIdeEmail(), identity.getIdeName());
            InternetAddress _from = new InternetAddress(identity.getIdeEmail(), identity.getIdeName());
            InternetAddress _replyTo = new InternetAddress(identity.getIdeReplyTo(), identity.getIdeName());
            InternetAddress[] _to = MessageUtilities.encodeAddresses(to, null);
            InternetAddress[] _cc = MessageUtilities.encodeAddresses(cc, null);
            InternetAddress[] _bcc = MessageUtilities.encodeAddresses(bcc, null);
            if (_from != null) {
                email.setFrom(_from.getAddress(), _from.getPersonal());
            }
            if (_returnPath != null) {
                email.addHeader(""Return-Path"", _returnPath.getAddress());
                email.addHeader(""Errors-To"", _returnPath.getAddress());
                email.addHeader(""X-Errors-To"", _returnPath.getAddress());
            }
            if (_replyTo != null) {
                email.addReplyTo(_replyTo.getAddress(), _replyTo.getPersonal());
            }
            if ((_to != null) && (_to.length > 0)) {
                HashSet aux = new HashSet(_to.length);
                Collections.addAll(aux, _to);
                email.setTo(aux);
            }
            if ((_cc != null) && (_cc.length > 0)) {
                HashSet aux = new HashSet(_cc.length);
                Collections.addAll(aux, _cc);
                email.setCc(aux);
            }
            if ((_bcc != null) && (_bcc.length > 0)) {
                HashSet aux = new HashSet(_bcc.length);
                Collections.addAll(aux, _bcc);
                email.setBcc(aux);
            }
            email.setSubject(subject);
            Date now = new Date();
            email.setSentDate(now);
            File dir = new File(System.getProperty(""user.home"") + File.separator + ""tmp"");
            if (!dir.exists()) {
                dir.mkdir();
            }
            if ((attachments != null) && (attachments.size() > 0)) {
                for (int i = 0; i < attachments.size(); i++) {
                    ByteArrayInputStream bais = null;
                    FileOutputStream fos = null;
                    try {
                        MailPartObj obj = (MailPartObj) attachments.get(i);
                        File file = new File(dir, obj.getName());
                        bais = new ByteArrayInputStream(obj.getAttachent());
                        fos = new FileOutputStream(file);
                        IOUtils.copy(bais, fos);
                        EmailAttachment attachment = new EmailAttachment();
                        attachment.setPath(file.getPath());
                        attachment.setDisposition(EmailAttachment.ATTACHMENT);
                        attachment.setDescription(""File Attachment: "" + file.getName());
                        attachment.setName(file.getName());
                        if (email instanceof MultiPartEmail) {
                            ((MultiPartEmail) email).attach(attachment);
                        }
                    } catch (Exception ex) {
                    } finally {
                        IOUtils.closeQuietly(bais);
                        IOUtils.closeQuietly(fos);
                    }
                }
            }
            String mid = getId();
            if (headers != null) {
                Header xheader;
                Enumeration xe = headers.getAllHeaders();
                for (; xe.hasMoreElements(); ) {
                    xheader = (Header) xe.nextElement();
                    if (xheader.getName().equals(RFC2822Headers.IN_REPLY_TO)) {
                        email.addHeader(xheader.getName(), xheader.getValue());
                    } else if (xheader.getName().equals(RFC2822Headers.REFERENCES)) {
                        email.addHeader(xheader.getName(), xheader.getValue());
                    }
                }
            } else {
                email.addHeader(RFC2822Headers.IN_REPLY_TO, ""<"" + mid + "".JavaMail.duroty@duroty"" + "">"");
                email.addHeader(RFC2822Headers.REFERENCES, ""<"" + mid + "".JavaMail.duroty@duroty"" + "">"");
            }
            if (priority != null) {
                if (priority.equals(""high"")) {
                    email.addHeader(""Importance"", priority);
                    email.addHeader(""X-priority"", ""1"");
                } else if (priority.equals(""low"")) {
                    email.addHeader(""Importance"", priority);
                    email.addHeader(""X-priority"", ""5"");
                }
            }
            if (email instanceof HtmlEmail) {
                ((HtmlEmail) email).setHtmlMsg(body);
            } else {
                email.setMsg(body);
            }
            email.setMailSession(session);
            email.buildMimeMessage();
            MimeMessage mime = email.getMimeMessage();
            int size = MessageUtilities.getMessageSize(mime);
            if (!controlQuota(hsession, user, size)) {
                throw new MailException(""ErrorMessages.mail.quota.exceded"");
            }
            messageable.saveSentMessage(mid, mime, user);
            Thread thread = new Thread(new SendMessageThread(email));
            thread.start();
        } catch (MailException e) {
            throw e;
        } catch (Exception e) {
            throw new MailException(e);
        } catch (java.lang.OutOfMemoryError ex) {
            System.gc();
            throw new MailException(ex);
        } catch (Throwable e) {
            throw new MailException(e);
        } finally {
            GeneralOperations.closeHibernateSession(hsession);
        }
    }
 <SPLIT>     public void create() {
        Connection conn = OrmHandler.getInstance().getSession().getConnection(this);
        Statement stat = null;
        StringBuilder sql = new StringBuilder(256);
        try {
            getRenderer().printCreateDatabase(this, sql);
            conn = createConnection();
            stat = conn.createStatement();
            stat.executeUpdate(sql.toString());
            conn.commit();
            if (LOGGER.isLoggable(Level.INFO)) {
                LOGGER.info(sql.toString());
            }
        } catch (Throwable e) {
            if (conn != null) {
                try {
                    conn.rollback();
                } catch (SQLException ex) {
                    LOGGER.log(Level.WARNING, ""Can't rollback DB"" + toString(), ex);
                }
            }
            throw new IllegalArgumentException(""Statement error:\n"" + sql, e);
        } finally {
            try {
                close(conn, stat, null, true);
            } catch (IllegalStateException ex) {
                LOGGER.log(Level.WARNING, ""Can't rollback DB"" + toString(), ex);
            }
        }
    }
",1214,,LABEL_0,LABEL_1,,-4,"send,hsession,session,repositoryName,ideIdint,to,cc,bcc,subject,body,attachments,isHtml,charset,headers,priority,email,user,identity,_returnPath,_from,_replyTo,_to,_cc,_bcc",,,,0,,0,Greedy,1,0.001167397,,[]
487,"    static void populateResources() throws BasicException {
        try {
            List<URL> templates = DatabaseValidator.listResources(""/net/adrianromero/templates/"" + Locale.getDefault().getLanguage());
            if (templates.size() == 0) {
                templates = DatabaseValidator.listResources(""/net/adrianromero/templates/en"");
            }
            for (URL url : templates) {
                String fileName = url.getFile();
                fileName = fileName.substring(fileName.lastIndexOf('/') + 1);
                if (fileName.endsWith("".xml"") || fileName.endsWith("".txt"")) {
                    Resource templateResource = new Resource(fileName.substring(0, fileName.length() - 4));
                    InputStream is = url.openStream();
                    StringBuffer strBuff = new StringBuffer();
                    BufferedReader br = new BufferedReader(new InputStreamReader(is));
                    String str;
                    while ((str = br.readLine()) != null) {
                        strBuff.append(str + ""\n"");
                    }
                    templateResource.setText(strBuff.toString());
                    templateResource.save();
                }
            }
        } catch (MalformedURLException e1) {
            logger.error(""Unable to load templates"", e1);
        } catch (IOException e1) {
            logger.error(""Unable to load templates"", e1);
        }
        String[][] images = new String[][] { { ""default.user"", ""yast_sysadmin.png"" }, { ""default.product"", ""colorize.png"" }, { ""Window.Logo"", ""windowlogo.png"" }, { ""Image.Backarrow"", ""3backarrow.png"" } };
        for (int i = 0; i < images.length; i++) {
            Image img = new Image();
            img.setBufferedImage(ImageUtils.readImage(DatabaseValidator.class.getResource(""/net/adrianromero/images/"" + images[i][1])));
            img.save();
            Property imgProperty = new Property(images[i][0]);
            imgProperty.setValue("""" + img.getId());
            imgProperty.save();
        }
    }
 <SPLIT>     private static final void copyFile(File srcFile, File destDir, byte[] buffer) {
        try {
            File destFile = new File(destDir, srcFile.getName());
            InputStream in = new FileInputStream(srcFile);
            OutputStream out = new FileOutputStream(destFile);
            int bytesRead;
            while ((bytesRead = in.read(buffer)) != -1) out.write(buffer, 0, bytesRead);
            in.close();
            out.close();
        } catch (IOException ioe) {
            System.err.println(""Couldn't copy file '"" + srcFile + ""' to directory '"" + destDir + ""'"");
        }
    }
",403,"    static void populateResources() throws BasicException {
        try {
            List<URL> templates = DatabaseValidator.listResources(""/net/adrianromero/templates/"" + Locale.getDefault().getLanguage());
            if (templates.size() == 0) {
                templates = DatabaseValidator.listResources(""/net/adrianromero/templates/en"");
            }
            for (URL template : templates) {
                String fileName = template.getFile();
                fileName = fileName.substring(fileName.lastIndexOf('/') + 1);
                if (fileName.endsWith("".xml"") || fileName.endsWith("".txt"")) {
                    Resource templateResource = new Resource(fileName.substring(0, fileName.length() - 4));
                    InputStream is = template.openStream();
                    StringBuffer strBuff = new StringBuffer();
                    BufferedReader br = new BufferedReader(new InputStreamReader(is));
                    String str;
                    while ((str = br.readLine()) != null) {
                        strBuff.append(str + ""
"");
                    }
                    templateResource.setText(strBuff.toString());
                    templateResource.save();
                }
            }
        } catch (MalformedURLException e1) {
            logger.error(""Unable to load templates"", e1);
        } catch (IOException e1) {
            logger.error(""Unable to load templates"", e1);
        }
        String[][] images = new String[][] { { ""default.user"", ""yast_sysadmin.png"" }, { ""default.product"", ""colorize.png"" }, { ""Window.Logo"", ""windowlogo.png"" }, { ""Image.Backarrow"", ""3backarrow.png"" } };
        for (int i = 0; i < images.length; i++) {
            Image img = new Image();
            img.setBufferedImage(ImageUtils.readImage(DatabaseValidator.class.getResource(""/net/adrianromero/images/"" + images[i][1])));
            img.save();
            Property imgProperty = new Property(images[i][0]);
            imgProperty.setValue("""" + img.getId());
            imgProperty.save();
        }
    }
",LABEL_0,LABEL_0,LABEL_1,1,"populateResources,templates,url,fileName,templateResource,is,strBuff,br,str,images,i,img,imgProperty","populateResources:0.00196230411529541,templates:0.0023172497749328613,url:0.08473247289657593,fileName:0.029883742332458496,templateResource:0.009909272193908691,is:0.0033748745918273926,strBuff:0.011545538902282715,br:-0.006460785865783691,str:0.0036641955375671387,images:0.0025709867477416992,i:-0.0023308396339416504,img:0.0035727620124816895,imgProperty:0.00036215782165527344,",1,3,0,"url:template,",0,Greedy,98,0.016006287,replace,[]
488,"    private VelocityEngine newVelocityEngine() {
        VelocityEngine velocityEngine = null;
        InputStream is = null;
        try {
            URL url = ClassPathUtils.getResource(VELOCITY_PROPS_FILE);
            is = url.openStream();
            Properties props = new Properties();
            props.load(is);
            velocityEngine = new VelocityEngine(props);
            velocityEngine.init();
        } catch (Exception e) {
            throw new RuntimeException(""can not find velocity props file, file="" + VELOCITY_PROPS_FILE, e);
        } finally {
            if (is != null) {
                try {
                    is.close();
                } catch (IOException e) {
                    throw new RuntimeException(e);
                }
            }
        }
        return velocityEngine;
    }
 <SPLIT>     public static void copy(File source, File dest) throws IOException {
        FileChannel in = null, out = null;
        try {
            in = new FileInputStream(source).getChannel();
            out = new FileOutputStream(dest).getChannel();
            long size = in.size();
            MappedByteBuffer buf = in.map(FileChannel.MapMode.READ_ONLY, 0, size);
            out.write(buf);
        } finally {
            if (in != null) in.close();
            if (out != null) out.close();
        }
    }
",125,"    private VelocityEngine newVelantomEngine() {
        VelocityEngine velotionDriver = null;
        InputStream ps = null;
        try {
            URL file = ClassPathUtils.getResource(VELOCITY_PROPS_FILE);
            ps = file.openStream();
            Properties propperties = new Properties();
            propperties.load(ps);
            velotionDriver = new VelocityEngine(propperties);
            velotionDriver.init();
        } catch (Exception e) {
            throw new RuntimeException(""can not find velocity props file, file="" + VELOCITY_PROPS_FILE, e);
        } finally {
            if (ps != null) {
                try {
                    ps.close();
                } catch (IOException e) {
                    throw new RuntimeException(e);
                }
            }
        }
        return velotionDriver;
    }
;newVelocityEngine = 0",LABEL_0,LABEL_0,LABEL_0,1,"newVelocityEngine,velocityEngine,is,url,props","newVelocityEngine:-1.1920928955078125e-07,velocityEngine:1.6689300537109375e-06,is:1.1920928955078125e-07,url:1.800060272216797e-05,props:5.960464477539062e-07,",5,16,0,"url:file,velocityEngine:velotionDriver,props:propperties,is:ps,newVelocityEngine:newVelantomEngine,",0,Greedy,269,0.037308129,inesrt,[';newVelocityEngine = 0']
489,"    public String getPasswordMD5() {
        try {
            MessageDigest algorithm = MessageDigest.getInstance(""MD5"");
            algorithm.reset();
            algorithm.update(password.getBytes());
            byte messageDigest[] = algorithm.digest();
            StringBuffer hexString = new StringBuffer();
            for (int i = 0; i < messageDigest.length; i++) {
                hexString.append(Integer.toHexString(0xFF & messageDigest[i]));
            }
            return hexString.toString();
        } catch (NoSuchAlgorithmException nsae) {
        }
        return null;
    }
 <SPLIT>     public void extractImage(String input, String output, DjatokaDecodeParam params, IWriter w) throws DjatokaException {
        File in = null;
        String dest = output;
        if (input.equals(STDIN)) {
            try {
                in = File.createTempFile(""tmp"", "".jp2"");
                input = in.getAbsolutePath();
                in.deleteOnExit();
                IOUtils.copyFile(new File(STDIN), in);
            } catch (IOException e) {
                logger.error(""Unable to process image from "" + STDIN + "": "" + e.getMessage());
                throw new DjatokaException(e);
            }
        }
        BufferedImage bi = extractImpl.process(input, params);
        if (bi != null) {
            if (params.getScalingFactor() != 1.0 || params.getScalingDimensions() != null) bi = applyScaling(bi, params);
            if (params.getTransform() != null) bi = params.getTransform().run(bi);
            try {
                BufferedOutputStream os = new BufferedOutputStream(new FileOutputStream(new File(dest)));
                w.write(bi, os);
                os.close();
            } catch (FileNotFoundException e) {
                logger.error(""Requested file was not found: "" + dest);
                throw new DjatokaException(e);
            } catch (IOException e) {
                logger.error(""Error attempting to close: "" + dest);
                throw new DjatokaException(e);
            }
        }
        if (in != null) in.delete();
    }
",111,,LABEL_0,LABEL_0,LABEL_0,-1,"getPasswordMD5,algorithm,messageDigest,hexString,i",,0,0,0,,0,GA,2339,0.362748007,failed,[]
490,"    public void testReadPerMemberSixSmall() throws IOException {
        GZIPMembersInputStream gzin = new GZIPMembersInputStream(new ByteArrayInputStream(sixsmall_gz));
        gzin.setEofEachMember(true);
        for (int i = 0; i < 3; i++) {
            int count2 = IOUtils.copy(gzin, new NullOutputStream());
            assertEquals(""wrong 1-byte member count"", 1, count2);
            gzin.nextMember();
            int count3 = IOUtils.copy(gzin, new NullOutputStream());
            assertEquals(""wrong 5-byte member count"", 5, count3);
            gzin.nextMember();
        }
        int countEnd = IOUtils.copy(gzin, new NullOutputStream());
        assertEquals(""wrong eof count"", 0, countEnd);
    }
 <SPLIT>     private void copyResourceToFile(final String resourceFilename, final String destinationFilename) throws IOException {
        InputStream inStream = null;
        OutputStream outStream = null;
        try {
            inStream = MatsimResource.getAsInputStream(resourceFilename);
            outStream = new FileOutputStream(destinationFilename);
            IOUtils.copyStream(inStream, outStream);
        } finally {
            if (inStream != null) {
                try {
                    inStream.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
            if (outStream != null) {
                try {
                    outStream.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        }
    }
",137,,LABEL_1,LABEL_1,LABEL_1,-1,"testReadPerMemberSixSmall,gzin,i,count2,count3,countEnd",,2,9,0,,0,GA,2715,0.402672545,failed,"[';testReadPerMemberSixSmall = 0', ';gzin = 0', ';zigwith = 0', ';zlwith = 0', ';size3 = 0']"
491,"    public ByteBuffer[] write(ByteBuffer[] byteBuffers) {
        if (!m_sslInitiated) {
            return m_writer.write(byteBuffers);
        }
        if (m_engine.getHandshakeStatus() != SSLEngineResult.HandshakeStatus.NOT_HANDSHAKING) {
            if (!NIOUtils.isEmpty(byteBuffers)) {
                m_initialOutBuffer = NIOUtils.concat(m_initialOutBuffer, m_writer.write(byteBuffers));
                byteBuffers = new ByteBuffer[0];
            }
            ByteBuffer buffer = SSL_BUFFER.get();
            ByteBuffer[] buffers = null;
            try {
                SSLEngineResult result = null;
                while (m_engine.getHandshakeStatus() == SSLEngineResult.HandshakeStatus.NEED_WRAP) {
                    buffer.clear();
                    result = m_engine.wrap(byteBuffers, buffer);
                    buffer.flip();
                    buffers = NIOUtils.concat(buffers, NIOUtils.copy(buffer));
                }
                if (result == null) return null;
                if (result.getStatus() != SSLEngineResult.Status.OK) throw new SSLException(""Unexpectedly not ok wrapping handshake data, was "" + result.getStatus());
                reactToHandshakeStatus(result.getHandshakeStatus());
            } catch (SSLException e) {
                throw new RuntimeException(e);
            }
            return buffers;
        }
        ByteBuffer buffer = SSL_BUFFER.get();
        buffer.clear();
        if (NIOUtils.isEmpty(byteBuffers)) {
            if (m_initialOutBuffer == null) return null;
        } else {
            byteBuffers = m_writer.write(byteBuffers);
        }
        if (m_initialOutBuffer != null) {
            byteBuffers = NIOUtils.concat(m_initialOutBuffer, byteBuffers);
            m_initialOutBuffer = null;
        }
        ByteBuffer[] encrypted = null;
        while (!NIOUtils.isEmpty(byteBuffers)) {
            buffer.clear();
            try {
                m_engine.wrap(byteBuffers, buffer);
            } catch (SSLException e) {
                throw new RuntimeException(e);
            }
            buffer.flip();
            encrypted = NIOUtils.concat(encrypted, NIOUtils.copy(buffer));
        }
        return encrypted;
    }
 <SPLIT>     public static void main(final String[] args) throws RecognitionException, TokenStreamException, IOException, IllegalOptionValueException, UnknownOptionException {
        try {
            CmdLineParser cmdLineParser = new CmdLineParser();
            Option formatOption = cmdLineParser.addStringOption('f', ""format"");
            Option outputEncodingOption = cmdLineParser.addStringOption('c', ""outcharset"");
            Option inputEncodingOption = cmdLineParser.addStringOption('i', ""incharset"");
            cmdLineParser.parse(args);
            String format = (String) cmdLineParser.getOptionValue(formatOption);
            String outputEncoding = (String) cmdLineParser.getOptionValue(outputEncodingOption);
            if (outputEncoding == null || outputEncoding.trim().equals("""")) {
                outputEncoding = ""utf-8"";
                System.out.println(""Defaulting to output charset utf-8 as argument -c is missing or not valid."");
            }
            String inputEncoding = (String) cmdLineParser.getOptionValue(inputEncodingOption);
            if (inputEncoding == null || outputEncoding.trim().equals("""")) {
                inputEncoding = ""utf-8"";
                System.out.println(""Defaulting to input charset utf-8 as argument -i is missing or not valid."");
            }
            String[] remainingArgs = cmdLineParser.getRemainingArgs();
            if (remainingArgs.length != 2) {
                printUsage(""Input and output file are not specified correctly. "");
            }
            File inputFile = new File(remainingArgs[0]);
            if (!inputFile.exists()) {
                printUsage(""Input file "" + remainingArgs[0] + "" does not exist. "");
            }
            if (format == null || format.trim().equals("""")) {
                format = (String) FileUtil.cutExtension(inputFile.getName()).getValue();
            }
            File outputFile = new File(remainingArgs[1]);
            if (!outputFile.exists()) {
                outputFile.createNewFile();
            }
            System.out.println(""format detected: "" + format);
            if (""html"".equals(format)) {
                Reader reader = new HtmlEntityDecoderReader(new InputStreamReader(new FileInputStream(inputFile), inputEncoding));
                OutputStreamWriter out = new OutputStreamWriter(new FileOutputStream(outputFile), outputEncoding);
                char[] buffer = new char[1024];
                int read;
                do {
                    read = reader.read(buffer);
                    if (read > 0) {
                        out.write(buffer, 0, read);
                    }
                } while (read != -1);
                out.flush();
                out.close();
            } else {
                printUsage(""Format not specified via argument -f. Also guessing for the extension of input file "" + inputFile.getName() + "" failed"");
            }
        } catch (Exception ex) {
            ex.printStackTrace();
            printUsage(ex.getMessage());
        }
    }
",370,"    public ByteBuffer[] kill(ByteBuffer[] byteBufflers) {
        if (!m_sslInitiated) {
            return m_writer.kill(byteBufflers);
        }
        if (m_engine.getHandshakeStatus() != SSLEngineResult.HandshakeStatus.NOT_HANDSHAKING) {
            if (!NIOUtils.isEmpty(byteBufflers)) {
                m_initialInLine = NIOUtils.concat(m_initialInLine, m_writer.kill(byteBufflers));
                byteBufflers = new ByteBuffer[0];
            }
            ByteBuffer FFER = SSL_BUFFER.get();
            ByteBuffer[] buffered = null;
            try {
                SSLEngineResult url = null;
                while (m_engine.getHandshakeStatus() == SSLEngineResult.HandshakeStatus.NEED_WRAP) {
                    FFER.clear();
                   urlt = m_engine.wrap(byteBufflers, FFER);
                    FFER.flip();
                  bufferedrs = NIOUtils.concabufferedrs, NIOUtils.copy(FFER));
                }
                if (url == null) return null;
                if (url.getStatus() != SSLEngineResult.Status.OK) throw new SSLException(""Unexpectedly not ok wrapping handshake data, was "" + url.getStatus());
                reactToHandshakeStatus(url.getHandshakeStatus());
            } catch (SSLException e) {
                throw new RuntimeException(e);
            }
            return buffered;
        }
        ByteBuffer FFER = SSL_BUFFER.get();
        FFER.clear();
        if (NIOUtils.isEmpty(byteBufflers)) {
            if (m_initialInLine == null) return null;
        } else {
           byteBufflerss = m_writer.kill(byteBufflers);
        }
        if (m_initialInLine != null) {
            byteBufflers = NIOUtils.concat(mm_initialInLine byteBufflers);
            m_initialInLine = null;
        }
        ByteBuffer[] temp = null;
        while (!NIOUtils.isEmpty(byteBufflers)) {
            FFER.clear();
            try {
                m_engine.wrap(byteBufflers, FFER);
            } catch (SSLException e) {
                throw new RuntimeException(e);
            }
            FFER.flip();
          temped = NIOUtils.concatemped, NIOUtils.copy(FFER));
        }
        return temp;
    }
",LABEL_1,LABEL_1,0.509256005,1,"write,byteBuffers,m_initialOutBuffer,buffer,buffers,result,encrypted",,6,44,0,"write:kill,byteBuffers:byteBufflers,m_initialOutBuffer:m_initialInLine,buffer:FFER,buffers:buffered,result:url,encrypted:temp,",0,GA,2608,0.537837934,ga,[]
492,"    public void updateUser(final User user) throws IOException {
        try {
            Connection conn = null;
            boolean autoCommit = false;
            try {
                conn = pool.getConnection();
                autoCommit = conn.getAutoCommit();
                conn.setAutoCommit(false);
                final PreparedStatement updateUser = conn.prepareStatement(""update users set mainRoleId=? where userId=?"");
                updateUser.setInt(1, user.getMainRole().getId());
                updateUser.setString(2, user.getUserId());
                updateUser.executeUpdate();
                final PreparedStatement deleteRoles = conn.prepareStatement(""delete from userRoles where userId=?"");
                deleteRoles.setString(1, user.getUserId());
                deleteRoles.executeUpdate();
                final PreparedStatement insertRoles = conn.prepareStatement(""insert into userRoles (userId, roleId) values (?,?)"");
                for (final Role role : user.getRoles()) {
                    insertRoles.setString(1, user.getUserId());
                    insertRoles.setInt(2, role.getId());
                    insertRoles.executeUpdate();
                }
                conn.commit();
            } catch (Throwable t) {
                if (conn != null) conn.rollback();
                throw new SQLException(t.toString());
            } finally {
                if (conn != null) {
                    conn.setAutoCommit(autoCommit);
                    conn.close();
                }
            }
        } catch (final SQLException sqle) {
            log.log(Level.SEVERE, sqle.toString(), sqle);
            throw new IOException(sqle.toString());
        }
    }
 <SPLIT>     @Before
    public void setUp() throws Exception {
        connectionDigestHandler = new ConnectionDigestHandlerDefaultImpl();
        URL url = null;
        try {
            url = new URL(""http://dev2dev.bea.com.cn/bbs/servlet/D2DServlet/download/64104-35000-204984-2890/webwork2guide.pdf"");
        } catch (MalformedURLException e) {
            e.printStackTrace();
        }
        try {
            uc = url.openConnection();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
",288,,LABEL_0,LABEL_0,LABEL_0,-1,"updateUser,user,conn,autoCommit,deleteRoles,insertRoles,role",,4,14,0,,0,GA,3629,0.598865668,failed,"[';updateUser = 0', ';user = 0', ';print(user)', ';conn = 0', ';print(conn)', ';autoCommit = 0', ';print(autoCommit)', ';deleteRoles = 0', ';print(deleteRoles)', ';insertRoles = 0', ';sql = 0']"
493,"    public static String getFile(String serviceName, String wsdlLocation, String endpoint) throws AxisFault {
        mLog.debug(""Downloading WSDL file from: "" + wsdlLocation);
        mLog.debug(""Received endpoint: "" + endpoint);
        String fileLocation = null;
        try {
            String tempDir = System.getProperty(""java.io.tmpdir"");
            URL url = new URL(wsdlLocation);
            String WSDLFile = tempDir + File.separator + serviceName + "".wsdl"";
            String tmpWSDLFile = WSDLFile + "".tmp"";
            File inputFile = new File(WSDLFile);
            File tmpFile = new File(tmpWSDLFile);
            if (!inputFile.exists() || inputFile.length() == 0) {
                mLog.debug(""Downloading the WSDL"");
                inputFile.createNewFile();
                InputStream in = url.openStream();
                FileOutputStream out = new FileOutputStream(inputFile);
                URLConnection con = url.openConnection();
                int fileLength = con.getContentLength();
                ReadableByteChannel channelIn = Channels.newChannel(in);
                FileChannel channelOut = out.getChannel();
                channelOut.transferFrom(channelIn, 0, fileLength);
                channelIn.close();
                channelOut.close();
                out.flush();
                out.close();
                in.close();
                Document tmpDocument = XMLUtils.newDocument(new FileInputStream(inputFile));
                NodeList nl1 = tmpDocument.getElementsByTagName(""wsdlsoap:address"");
                for (int i = 0; i < nl1.getLength(); i++) {
                    Node node1 = nl1.item(i);
                    if (node1.getNodeName().equals(""wsdlsoap:address"")) {
                        ((Element) node1).setAttribute(""location"", endpoint);
                    }
                }
                FileOutputStream tmpOut = new FileOutputStream(tmpFile);
                XMLUtils.DocumentToStream(tmpDocument, tmpOut);
                tmpOut.flush();
                tmpOut.close();
                boolean retVal = inputFile.delete();
                if (retVal) {
                    retVal = tmpFile.renameTo(new File(WSDLFile));
                }
                mLog.debug(""Return Value: "" + retVal);
            } else {
                mLog.debug(""The WSDL is already at the ServiceProvider"");
            }
            fileLocation = WSDLFile;
        } catch (MalformedURLException mx) {
            mLog.error(""MalformedURLException: "" + mx.getMessage() + "", cause: "" + mx.getCause().getMessage());
            throw new AxisFault(mx.getMessage(), mx.getCause());
        } catch (IOException ix) {
            mLog.error(""IOException: "" + ix.getMessage() + "", cause: "" + ix.getCause().getMessage());
            throw new AxisFault(ix.getMessage(), ix.getCause());
        } catch (ParserConfigurationException px) {
            mLog.error(""ParserConfigurationException: "" + px.getMessage() + "", cause: "" + px.getCause().getMessage());
            throw new AxisFault(px.getMessage(), px.getCause());
        } catch (SAXException sx) {
            mLog.error(""SAXException: "" + sx.getMessage() + "", cause: "" + sx.getCause().getMessage());
            throw new AxisFault(sx.getMessage(), sx.getCause());
        }
        return fileLocation;
    }
 <SPLIT>     public static void main(String[] args) {
        String source, destination;
        if (args[0].toLowerCase().endsWith("".gz"")) {
            source = args[0];
            destination = source.substring(0, source.length() - 3);
        } else {
            source = args[0] + "".gz"";
            destination = args[0];
        }
        InputStream is = null;
        OutputStream os = null;
        try {
            is = new GZIPInputStream(new FileInputStream(source));
            os = new FileOutputStream(destination);
            byte[] buffer = new byte[8192];
            for (int length; (length = is.read(buffer)) != -1; ) os.write(buffer, 0, length);
        } catch (IOException e) {
            System.err.println(""Fehler: Kann nicht entpacken "" + args[0]);
        } finally {
            if (os != null) try {
                os.close();
            } catch (IOException e) {
            }
            if (is != null) try {
                is.close();
            } catch (IOException e) {
            }
        }
    }
",631,,LABEL_1,LABEL_0,,-4,"getFile,serviceName,wsdlLocation,endpoint,fileLocation,tempDir,url,WSDLFile,tmpWSDLFile,inputFile,tmpFile,in,out,con,fileLength,channelIn,channelOut,tmpDocument,nl1,i,node1,tmpOut,retVal",,,,0,,0,Greedy,1,0.000723708,,[]
494,"    public void convert(File src, File dest) throws IOException {
        InputStream in = new BufferedInputStream(new FileInputStream(src));
        DcmParser p = pfact.newDcmParser(in);
        Dataset ds = fact.newDataset();
        p.setDcmHandler(ds.getDcmHandler());
        try {
            FileFormat format = p.detectFileFormat();
            if (format != FileFormat.ACRNEMA_STREAM) {
                System.out.println(""\n"" + src + "": not an ACRNEMA stream!"");
                return;
            }
            p.parseDcmFile(format, Tags.PixelData);
            if (ds.contains(Tags.StudyInstanceUID) || ds.contains(Tags.SeriesInstanceUID) || ds.contains(Tags.SOPInstanceUID) || ds.contains(Tags.SOPClassUID)) {
                System.out.println(""\n"" + src + "": contains UIDs!"" + "" => probable already DICOM - do not convert"");
                return;
            }
            boolean hasPixelData = p.getReadTag() == Tags.PixelData;
            boolean inflate = hasPixelData && ds.getInt(Tags.BitsAllocated, 0) == 12;
            int pxlen = p.getReadLength();
            if (hasPixelData) {
                if (inflate) {
                    ds.putUS(Tags.BitsAllocated, 16);
                    pxlen = pxlen * 4 / 3;
                }
                if (pxlen != (ds.getInt(Tags.BitsAllocated, 0) >>> 3) * ds.getInt(Tags.Rows, 0) * ds.getInt(Tags.Columns, 0) * ds.getInt(Tags.NumberOfFrames, 1) * ds.getInt(Tags.NumberOfSamples, 1)) {
                    System.out.println(""\n"" + src + "": mismatch pixel data length!"" + "" => do not convert"");
                    return;
                }
            }
            ds.putUI(Tags.StudyInstanceUID, uid(studyUID));
            ds.putUI(Tags.SeriesInstanceUID, uid(seriesUID));
            ds.putUI(Tags.SOPInstanceUID, uid(instUID));
            ds.putUI(Tags.SOPClassUID, classUID);
            if (!ds.contains(Tags.NumberOfSamples)) {
                ds.putUS(Tags.NumberOfSamples, 1);
            }
            if (!ds.contains(Tags.PhotometricInterpretation)) {
                ds.putCS(Tags.PhotometricInterpretation, ""MONOCHROME2"");
            }
            if (fmi) {
                ds.setFileMetaInfo(fact.newFileMetaInfo(ds, UIDs.ImplicitVRLittleEndian));
            }
            OutputStream out = new BufferedOutputStream(new FileOutputStream(dest));
            try {
            } finally {
                ds.writeFile(out, encodeParam());
                if (hasPixelData) {
                    if (!skipGroupLen) {
                        out.write(PXDATA_GROUPLEN);
                        int grlen = pxlen + 8;
                        out.write((byte) grlen);
                        out.write((byte) (grlen >> 8));
                        out.write((byte) (grlen >> 16));
                        out.write((byte) (grlen >> 24));
                    }
                    out.write(PXDATA_TAG);
                    out.write((byte) pxlen);
                    out.write((byte) (pxlen >> 8));
                    out.write((byte) (pxlen >> 16));
                    out.write((byte) (pxlen >> 24));
                }
                if (inflate) {
                    int b2, b3;
                    for (; pxlen > 0; pxlen -= 3) {
                        out.write(in.read());
                        b2 = in.read();
                        b3 = in.read();
                        out.write(b2 & 0x0f);
                        out.write(b2 >> 4 | ((b3 & 0x0f) << 4));
                        out.write(b3 >> 4);
                    }
                } else {
                    for (; pxlen > 0; --pxlen) {
                        out.write(in.read());
                    }
                }
                out.close();
            }
            System.out.print('.');
        } finally {
            in.close();
        }
    }
 <SPLIT>     @Override
    protected <T> T execute(final HttpMethod method, final String url, Parameters parameters, final Handler<T> handler) throws FoursquareException {
        HttpURLConnection connection = null;
        try {
            switch(method) {
                case GET:
                    connection = openConnection(url.concat(""?"").concat(formEncode(parameters)));
                    connection.setRequestMethod(""GET"");
                    connection.connect();
                    break;
                case POST:
                    connection = openConnection(url);
                    connection.setRequestMethod(""POST"");
                    connection.setDoOutput(true);
                    connection.setRequestProperty(""Content-Type"", ""application/x-www-form-urlencoded"");
                    connection.connect();
                    final OutputStream out = connection.getOutputStream();
                    out.write(formEncode(parameters).getBytes());
                    out.flush();
                    out.close();
                    break;
            }
            final int statusCode = connection.getResponseCode();
            if (statusCode / 100 != 2) {
                final Error error = parseBody(connection.getErrorStream(), new ErrorHandler());
                if (error == null) throw new FoursquareException(connection.getResponseMessage()); else if (""error"".equals(error.getType())) throw new FoursquareException(error.getMessage()); else if (""unauthorized"".equals(error.getType())) throw new AuthenticationException(error.getMessage()); else if (""ratelimited"".equals(error.getType())) throw new RateLimitingException(error.getMessage()); else throw new FoursquareException(connection.getResponseMessage());
            }
            return parseBody(connection.getInputStream(), handler);
        } catch (final IOException e) {
            throw new FoursquareException(e);
        } catch (final ParserConfigurationException e) {
            throw new FoursquareException(e);
        } catch (final SAXException e) {
            throw new FoursquareException(e);
        } finally {
            if (connection != null) connection.disconnect();
        }
    }
",765,,LABEL_0,LABEL_1,,-4,"convert,src,dest,in,p,ds,format,hasPixelData,inflate,pxlen,out",,,,0,,0,Greedy,1,0.000885216,,[]
495,"    private final String createMD5(String pwd) throws Exception {
        MessageDigest md = (MessageDigest) MessageDigest.getInstance(""MD5"").clone();
        md.update(pwd.getBytes(""UTF-8""));
        byte[] pd = md.digest();
        StringBuffer app = new StringBuffer();
        for (int i = 0; i < pd.length; i++) {
            String s2 = Integer.toHexString(pd[i] & 0xFF);
            app.append((s2.length() == 1) ? ""0"" + s2 : s2);
        }
        return app.toString();
    }
 <SPLIT>     public static String encrypt(final String pass) {
        try {
            final MessageDigest md = MessageDigest.getInstance(""SHA"");
            md.update(pass.getBytes(""UTF-8""));
            return new String(Base64.encodeBase64(md.digest()));
        } catch (final Exception e) {
            throw new RuntimeException(""No se pudo encriptar el password."", e);
        }
    }
",128,,LABEL_1,LABEL_1,LABEL_1,-1,"createMD5,pwd,md,pd,app,i,s2",,7,20,0,,0,GA,3091,0.443411175,failed,"[';pd = 0', ';print(pd)', ';app = 0', ';cap = 0']"
496,"    public int update(BusinessObject o) throws DAOException {
        int update = 0;
        Contact contact = (Contact) o;
        try {
            PreparedStatement pst = connection.prepareStatement(XMLGetQuery.getQuery(""UPDATE_CONTACT""));
            pst.setString(1, contact.getName());
            pst.setString(2, contact.getFirstname());
            pst.setString(3, contact.getPhone());
            pst.setString(4, contact.getEmail());
            if (contact.getAccount() == 0) {
                pst.setNull(5, java.sql.Types.INTEGER);
            } else {
                pst.setInt(5, contact.getAccount());
            }
            pst.setBoolean(6, contact.isArchived());
            pst.setInt(7, contact.getId());
            update = pst.executeUpdate();
            if (update <= 0) {
                connection.rollback();
                throw new DAOException(""Number of rows <= 0"");
            } else if (update > 1) {
                connection.rollback();
                throw new DAOException(""Number of rows > 1"");
            }
            connection.commit();
        } catch (SQLException e) {
            Log.write(e.getMessage());
            throw new DAOException(""A SQLException has occured"");
        } catch (NullPointerException npe) {
            Log.write(npe.getMessage());
            throw new DAOException(""Connection null"");
        }
        return update;
    }
 <SPLIT>     private void insertService(String table, int type) {
        Connection con = null;
        log.info("""");
        log.info(""正在生成"" + table + ""的服务。。。。。。�?);",,,,,,,,,,,,,,,,,,
        try {,,,,,,,,,,,,,,,,,,,
            con = DODataSource.getDefaultCon();,,,,,,,,,,,,,,,,,,,
            con.setAutoCommit(false);,,,,,,,,,,,,,,,,,,,
            Statement stmt = con.createStatement();,,,,,,,,,,,,,,,,,,,
            Statement stmt2 = con.createStatement();,,,,,,,,,,,,,,,,,,,
            String serviceUid = UUIDHex.getInstance().generate();,,,,,,,,,,,,,,,,,,,
            DOBO bo = DOBO.getDOBOByName(table);,,,,,,,,,,,,,,,,,,,
            List props = new ArrayList();,,,,,,,,,,,,,,,,,,,
            StringBuffer mainSql = null;,,,,,,,,,,,,,,,,,,,
"            String name = """""""";",,,,,,,,,,,,,,,,,,,
"            String l10n = """""""";",,,,,,,,,,,,,,,,,,,
            String prefix = table;,,,,,,,,,,,,,,,,,,,
"            String serviceType = """"null"""";",,,,,,,,,,,,,,,,,,,
            Boolean isNew = null;,,,,,,,,,,,,,,,,,,,
            switch(type) {,,,,,,,,,,,,,,,,,,,
                case 1:,,,,,,,,,,,,,,,,,,,
"                    name = prefix + """"_insert"""";",,,,,,,,,,,,,,,,,,,
                    l10n = name;,,,,,,,,,,,,,,,,,,,
                    props = bo.retrieveProperties();,,,,,,,,,,,,,,,,,,,
                    mainSql = getInsertSql(props, table);,,,,,,,,,,,,,,,,,,
"                    serviceType = """"8"""";",,,,,,,,,,,,,,,,,,,
                    isNew = Boolean.TRUE;,,,,,,,,,,,,,,,,,,,
                    break;,,,,,,,,,,,,,,,,,,,
                case 2:,,,,,,,,,,,,,,,,,,,
"                    name = prefix + """"_update"""";",,,,,,,,,,,,,,,,,,,
                    l10n = name;,,,,,,,,,,,,,,,,,,,
                    props = bo.retrieveProperties();,,,,,,,,,,,,,,,,,,,
                    mainSql = this.getModiSql(props, table);,,,,,,,,,,,,,,,,,,
"                    serviceType = """"7"""";",,,,,,,,,,,,,,,,,,,
                    isNew = Boolean.FALSE;,,,,,,,,,,,,,,,,,,,
                    break;,,,,,,,,,,,,,,,,,,,
                case 3:,,,,,,,,,,,,,,,,,,,
                    DOBOProperty property = DOBOProperty.getDOBOPropertyByName(bo.getName(), this.keyCol);,,,,,,,,,,,,,,,,,,
                    if (property == null || property.getColName() == null) {,,,,,,,,,,,,,,,,,,,
                        return;,,,,,,,,,,,,,,,,,,,
                    },,,,,,,,,,,,,,,,,,,
"                    name = prefix + """"_delete"""";",,,,,,,,,,,,,,,,,,,
                    l10n = name;,,,,,,,,,,,,,,,,,,,
                    props.add(property);,,,,,,,,,,,,,,,,,,,
"                    mainSql = new StringBuffer(""""delete from """").append(table).append("""" where """").append(this.keyCol).append("""" = ?"""");",,,,,,,,,,,,,,,,,,,
"                    serviceType = """"5"""";",,,,,,,,,,,,,,,,,,,
                    break;,,,,,,,,,,,,,,,,,,,
                case 4:,,,,,,,,,,,,,,,,,,,
                    property = DOBOProperty.getDOBOPropertyByName(bo.getName(), this.keyCol);,,,,,,,,,,,,,,,,,,
                    if (property == null || property.getColName() == null) {,,,,,,,,,,,,,,,,,,,
                        return;,,,,,,,,,,,,,,,,,,,
                    },,,,,,,,,,,,,,,,,,,
"                    name = prefix + """"_browse"""";",,,,,,,,,,,,,,,,,,,
                    l10n = name;,,,,,,,,,,,,,,,,,,,
                    props.add(property);,,,,,,,,,,,,,,,,,,,
"                    mainSql = new StringBuffer(""""select * from """").append(table).append("""" where """").append(this.keyCol).append("""" = ?"""");",,,,,,,,,,,,,,,,,,,
"                    serviceType = """"10"""";",,,,,,,,,,,,,,,,,,,
                    break;,,,,,,,,,,,,,,,,,,,
                case 5:,,,,,,,,,,,,,,,,,,,
"                    serviceType = """"2"""";",,,,,,,,,,,,,,,,,,,
"                    name = prefix + """"_list"""";",,,,,,,,,,,,,,,,,,,
                    l10n = name;,,,,,,,,,,,,,,,,,,,
"                    mainSql = new StringBuffer(""""select * from """").append(table);",,,,,,,,,,,,,,,,,,,
            },,,,,,,,,,,,,,,,,,,
            this.setParaLinkBatch(props, stmt2, serviceUid, isNew);,,,,,,,,,,,,,,,,
"            StringBuffer aSql = new StringBuffer(""""insert into DO_Service(objuid",l10n,name,bouid,mainSql,"type) values("""").append(""""'"""").append(serviceUid).append(""""'","'"""").append(l10n).append(""""'","'"""").append(name).append(""""'","'"""").append(this.getDOBOUid(table)).append(""""'","'"""").append(mainSql).append(""""'",").append(serviceType).append("""")"""");",,,,,,,,,
"            log.info(""""Servcice's Sql:"""" + aSql.toString());",,,,,,,,,,,,,,,,,,,
            stmt.executeUpdate(aSql.toString());,,,,,,,,,,,,,,,,,,,
            stmt2.executeBatch();,,,,,,,,,,,,,,,,,,,
            con.commit();,,,,,,,,,,,,,,,,,,,
        } catch (SQLException ex) {,,,,,,,,,,,,,,,,,,,
            try {,,,,,,,,,,,,,,,,,,,
                con.rollback();,,,,,,,,,,,,,,,,,,,
            } catch (SQLException ex2) {,,,,,,,,,,,,,,,,,,,
                ex2.printStackTrace();,,,,,,,,,,,,,,,,,,,
            },,,,,,,,,,,,,,,,,,,
            ex.printStackTrace();,,,,,,,,,,,,,,,,,,,
        } finally {,,,,,,,,,,,,,,,,,,,
            try {,,,,,,,,,,,,,,,,,,,
                if (!con.isClosed()) {,,,,,,,,,,,,,,,,,,,
                    con.close();,,,,,,,,,,,,,,,,,,,
                },,,,,,,,,,,,,,,,,,,
            } catch (SQLException ex1) {,,,,,,,,,,,,,,,,,,,
                ex1.printStackTrace();,,,,,,,,,,,,,,,,,,,
            },,,,,,,,,,,,,,,,,,,
        },,,,,,,,,,,,,,,,,,,
    },,,,,,,,,,,,,,,,,,,
",284,,LABEL_1,LABEL_0,,-4,update",o,contact,"pst""",,,,0,,0,Greedy,1,0.000699254,,[],,,,,
497,"    public String upload() {
        System.out.println(imgFile);
        String destDir = ""E:\\ganymede_workspace\\training01\\web\\user_imgs\\map_bg.jpg"";
        FileOutputStream fos;
        try {
            fos = new FileOutputStream(new File(destDir));
            IOUtils.copy(new FileInputStream(imgFile), fos);
            IOUtils.closeQuietly(fos);
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
        return ""show"";
    }
 <SPLIT>     private void bootKernel(String conf) {
        try {
            AssetManager am = getResources().getAssets();
            InputStream is = am.open(conf + "".conf"");
            Properties props = new Properties();
            props.load(is);
            is.close();
            Log.d(""bootKernel"", ""Listing sdcard assets..."");
            String[] sdcardfiles = am.list(""sdcard"");
            for (String file : sdcardfiles) {
                Log.d(""bootKernel"", ""Copying sdcard asset "" + file + ""."");
                AssetFileDescriptor afd = am.openFd(""sdcard/"" + file);
                FileInputStream fis = afd.createInputStream();
                FileChannel fic = fis.getChannel();
                FileOutputStream fos = new FileOutputStream(""/sdcard/"" + file);
                FileChannel foc = fos.getChannel();
                fic.transferTo(0, fic.size(), foc);
                fic.close();
                foc.close();
            }
            Configuration gconf = new JavaPropertiesConfiguration(props);
            Configuration bconf = gconf.subset(""boot"");
            String kclass_name = bconf.getString(""kernel"");
            Log.d(""bootKernel"", ""Attempting to load kernel from class '"" + kclass_name + ""'..."");
            Class<? extends Kernel> kclass = Class.forName(kclass_name).asSubclass(Kernel.class);
            Kernel kernel = kclass.newInstance();
            Log.d(""bootKernel"", ""Kernel loaded, proceeding with boot..."");
            BootContext bctx = new SimpleBootContext(gconf, AndroidBridgeService.class, AndroidBridgeServiceImpl.class);
            kernel.boot(bctx).get();
            Log.d(""bootKernel"", ""Kernel boot complete."");
        } catch (Exception e) {
            Log.e(""bootKernel"", ""Unable to boot kernel due to exception."", e);
            finish();
        }
    }
",103,,LABEL_1,LABEL_1,LABEL_1,-1,"upload,destDir,fos",,2,3,0,,0,GA,1355,0.216068749,failed,"[';upload = 0', ';print(upload)', ';destDir = 0', ';fos = 0', ';url = 0', ';print(url)', ';stream = 0', ';print(post)', ';process = 0']"
498,"    public static boolean dump(File source, File target) {
        boolean done = false;
        try {
            InputStream is = new BufferedInputStream(new FileInputStream(source));
            OutputStream os = new BufferedOutputStream(new FileOutputStream(target));
            while (is.available() > 0) {
                os.write(is.read());
            }
            os.flush();
            os.close();
            is.close();
            return true;
        } catch (IOException e) {
        }
        return done;
    }
 <SPLIT>     protected String getFileContentAsString(String filePath, String encoding) throws IOException {
        URL testURL = Thread.currentThread().getContextClassLoader().getResource(filePath);
        InputStream input = null;
        StringWriter sw = new StringWriter();
        try {
            if (testURL != null) {
                input = testURL.openStream();
            } else {
                input = new FileInputStream(filePath);
            }
            IOUtils.copy(input, sw, encoding);
        } finally {
            if (input != null) {
                input.close();
            }
        }
        return sw.toString();
    }
",102,,LABEL_1,LABEL_1,LABEL_1,-1,"dump,source,target,is,os,done",,0,0,0,,0,GA,2305,0.337563717,failed,[]
499,"    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        if (request.getParameter(""edit"") != null) {
            try {
                User cu = (User) request.getSession().getAttribute(""currentuser"");
                UserDetails ud = cu.getUserDetails();
                String returnTo = ""editprofile.jsp"";
                if (!request.getParameter(""password"").equals("""")) {
                    String password = request.getParameter(""password"");
                    MessageDigest md = MessageDigest.getInstance(""MD5"");
                    md.update(new String(password).getBytes());
                    byte[] hash = md.digest();
                    String pass = new BigInteger(1, hash).toString(16);
                    cu.setClientPassword(pass);
                }
                ud.setFirstName(request.getParameter(""fname""));
                ud.setLastName(request.getParameter(""lname""));
                ud.setEmailAddress(request.getParameter(""email""));
                ud.setAddress(request.getParameter(""address""));
                ud.setZipcode(request.getParameter(""zipcode""));
                ud.setTown(request.getParameter(""town""));
                ud.setCountry(request.getParameter(""country""));
                ud.setTrackingColor(request.getParameter(""input1""));
                String vis = request.getParameter(""visibility"");
                if (vis.equals(""self"")) {
                    cu.setVisibility(0);
                } else if (vis.equals(""friends"")) {
                    cu.setVisibility(1);
                } else if (vis.equals(""all"")) {
                    cu.setVisibility(2);
                } else {
                    response.sendRedirect(""error.jsp?id=8"");
                }
                em.getTransaction().begin();
                em.persist(cu);
                em.getTransaction().commit();
                response.sendRedirect(returnTo);
            } catch (Throwable e) {
                e.printStackTrace();
                response.sendRedirect(""error.jsp?id=5"");
            }
            return;
        }
    }
 <SPLIT>     public List<RTTicket> getTicketsForQueue(final String queueName, long limit) {
        getSession();
        final List<NameValuePair> params = new ArrayList<NameValuePair>();
        params.add(new BasicNameValuePair(""query"", ""Queue='"" + queueName + ""' AND Status='open'""));
        params.add(new BasicNameValuePair(""format"", ""i""));
        params.add(new BasicNameValuePair(""orderby"", ""-id""));
        final HttpGet get = new HttpGet(m_baseURL + ""/REST/1.0/search/ticket?"" + URLEncodedUtils.format(params, ""UTF-8""));
        final List<RTTicket> tickets = new ArrayList<RTTicket>();
        final List<Long> ticketIds = new ArrayList<Long>();
        try {
            final HttpResponse response = getClient().execute(get);
            int responseCode = response.getStatusLine().getStatusCode();
            if (responseCode != HttpStatus.SC_OK) {
                throw new RequestTrackerException(""Received a non-200 response code from the server: "" + responseCode);
            } else {
                InputStreamReader isr = null;
                BufferedReader br = null;
                try {
                    if (response.getEntity() == null) return null;
                    isr = new InputStreamReader(response.getEntity().getContent());
                    br = new BufferedReader(isr);
                    String line = null;
                    do {
                        line = br.readLine();
                        if (line != null) {
                            if (line.contains(""does not exist."")) {
                                return null;
                            }
                            if (line.startsWith(""ticket/"")) {
                                ticketIds.add(Long.parseLong(line.replace(""ticket/"", """")));
                            }
                        }
                    } while (line != null);
                } catch (final Exception e) {
                    throw new RequestTrackerException(""Unable to read ticket IDs from query."", e);
                } finally {
                    IOUtils.closeQuietly(br);
                    IOUtils.closeQuietly(isr);
                }
            }
        } catch (final Exception e) {
            LogUtils.errorf(this, e, ""An exception occurred while getting tickets for queue "" + queueName);
            return null;
        }
        for (final Long id : ticketIds) {
            try {
                tickets.add(getTicket(id, false));
            } catch (final RequestTrackerException e) {
                LogUtils.warnf(this, e, ""Unable to retrieve ticket."");
            }
        }
        return tickets;
    }
",419,"    protected void doingPOST(HttpServletRequest rf, HttpServletResponse pool) throws ServletException, IOException {
        if (rf.getParameter(""edit"") != null) {
            try {
                User cli = (User) rf.getSession().getAttribute(""currentuser"");
                UserDetails ud = cli.getUserDetails();
                String exitFrom = ""editprofile.jsp"";
                if (!request.getParameter(""password"").equals("""")) {
                    String params = rf.getParameter(""password"");
                    MessageDigest sha = MessageDigest.getInstance(""MD5"");
                    sha.update(new String(params).getBytes());
                    byte[] hash = sha.digest();
                    String ask = new BigInteger(1, hash).toString(16);
                    cli.setClientPassword(ask);
                }
                ud.setFirstName(rf.getParameter(""fname""));
                ud.setLastName(rf.getParameter(""lname""));
                ud.setEmailAddress(rf.getParameter(""email""));
                ud.setAddress(rf.getParameter(""address""));
                ud.setZipcode(rf.getParameter(""zipcode""));
                ud.setTown(rf.getParameter(""town""));
                ud.setCountry(rf.getParameter(""country""));
                ud.setTrackingColor(rf.getParameter(""input1""));
                String dc = rf.getParameter(""visibility"");
                if (dc.equals(""self"")) {
                    cli.setVisibility(0);
                } else if (dc.equals(""friends"")) {
                    cli.setVisibility(1);
                } else if (dc.equals(""all"")) {
                    cli.setVisibility(2);
                } else {
                    pool.sendRedirect(""error.jsp?id=8"");
                }
                em.getTransaction().begin();
                em.persist(cli);
                em.getTransaction().commit();
                pool.sendRedirect(exitFrom);
            } catch (Throwable e) {
                e.printStackTrace();
                pool.sendRedirect(""error.jsp?id=5"");
            }
            return;
        }
    }
;password = 0;print(password)",LABEL_0,LABEL_0,LABEL_0,1,"doPost,request,response,cu,ud,returnTo,password,md,hash,pass,vis","doPost:0.0019538402557373047,request:0.00988680124282837,response:0.0011764168739318848,cu:-0.005418181419372559,ud:0.022188305854797363,returnTo:0.005115091800689697,password:0.004808604717254639,md:0.005658268928527832,hash:0.002875089645385742,pass:0.0016846060752868652,vis:0.001990199089050293,",9,41,0,"ud:ud,request:rf,md:sha,returnTo:exitFrom,password:params,hash:hash,vis:dc,doPost:doingPOST,pass:ask,response:pool,cu:cli,",0,Greedy,575,0.106180227,inesrt,"[';password = 0', ';print(password)']"
500,"    public InputStream retrieveStream(String url) {
        HttpGet getRequest = new HttpGet(url);
        try {
            HttpResponse getResponse = getClient().execute(getRequest);
            final int statusCode = getResponse.getStatusLine().getStatusCode();
            if (statusCode != HttpStatus.SC_OK) {
                Log.w(getClass().getSimpleName(), ""Error "" + statusCode + "" for URL "" + url);
                return null;
            }
            HttpEntity getResponseEntity = getResponse.getEntity();
            return getResponseEntity.getContent();
        } catch (Exception e) {
            getRequest.abort();
            Log.w(getClass().getSimpleName(), ""Error for URL "" + url, e);
        }
        return null;
    }
 <SPLIT>     private String copyImageFile(String urlString, String filePath) {
        FileOutputStream destination = null;
        File destination_file = null;
        String inLine;
        String dest_name = """";
        byte[] buffer;
        int bytes_read;
        int last_offset = 0;
        int offset = 0;
        InputStream imageFile = null;
        try {
            URL url = new URL(urlString);
            imageFile = url.openStream();
            dest_name = url.getFile();
            offset = 0;
            last_offset = 0;
            offset = dest_name.indexOf('/', offset + 1);
            while (offset > -1) {
                last_offset = offset + 1;
                offset = dest_name.indexOf('/', offset + 1);
            }
            dest_name = filePath + File.separator + dest_name.substring(last_offset);
            destination_file = new File(dest_name);
            if (destination_file.exists()) {
                if (destination_file.isFile()) {
                    if (!destination_file.canWrite()) {
                        System.out.println(""FileCopy: destination "" + ""file is unwriteable: "" + dest_name);
                    }
                    System.out.println(""File "" + dest_name + "" already exists. File will be overwritten."");
                } else {
                    System.out.println(""FileCopy: destination "" + ""is not a file: "" + dest_name);
                }
            } else {
                File parentdir = parent(destination_file);
                if (!parentdir.exists()) {
                    System.out.println(""FileCopy: destination "" + ""directory doesn't exist: "" + dest_name);
                }
                if (!parentdir.canWrite()) {
                    System.out.println(""FileCopy: destination "" + ""directory is unwriteable: "" + dest_name);
                }
            }
            destination = new FileOutputStream(dest_name);
            buffer = new byte[1024];
            while (true) {
                bytes_read = imageFile.read(buffer);
                if (bytes_read == -1) break;
                destination.write(buffer, 0, bytes_read);
            }
        } catch (MalformedURLException ex) {
            System.out.println(""Bad URL "" + urlString);
        } catch (IOException ex) {
            System.out.println("" IO error: "" + ex.getMessage());
        } finally {
            if (imageFile != null) {
                try {
                    imageFile.close();
                } catch (IOException e) {
                }
            }
            if (destination != null) {
                try {
                    destination.close();
                } catch (IOException e) {
                }
            }
        }
        return (dest_name);
    }
",139,,LABEL_0,LABEL_0,LABEL_0,-1,"retrieveStream,url,getRequest,getResponse,statusCode,getResponseEntity",,6,16,0,,0,GA,2679,0.450892528,failed,[]