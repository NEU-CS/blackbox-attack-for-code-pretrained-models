Index,Original Code,Program Length,Adversarial Code,True Label,Original Prediction,Adv Prediction,Is Success,Extracted Names,Importance Score,Greedy No. Changed Names,Greedy No. Changed Tokens,Replaced Names,GA No. Changed Names,GA No. Changed Tokens,Attack Type,Query Times,Time Cost,Suc Type,Insert Words
0,"    protected void doSetInput(IEditorInput input, IProgressMonitor monitor) throws CoreException {
        IWorkspaceRoot root = ResourcesPlugin.getWorkspace().getRoot();
        IFileFormat format = null;
        Object source = null;
        InputStream in = null;
        try {
            IPath path;
            if (input instanceof IStorageEditorInput) {
                IStorage s = ((IStorageEditorInput) input).getStorage();
                in = s.getContents();
                if (s instanceof IFile) {
                    IFile file = (IFile) s;
                    path = file.getRawLocation();
                    if (root.exists(path)) {
                        path = root.getLocation().append(path);
                    }
                    source = path.toFile();
                }
            } else if (input instanceof IPathEditorInput) {
                path = ((IPathEditorInput) input).getPath();
                source = path.toFile();
            } else if (input instanceof IURIEditorInput) {
                URI uri = ((IURIEditorInput) input).getURI();
                if (URIUtil.isFileURI(uri)) {
                    source = URIUtil.toFile(uri);
                } else {
                    URL url = URIUtil.toURL(uri);
                    in = url.openStream();
                }
            }
            if (source == null) {
                if (!in.markSupported()) {
                    in = new BufferedInputStream(in);
                }
                in.mark(10);
                source = in;
            }
            IContentDescription cd = Platform.getContentTypeManager().getDescriptionFor(in, input.getName(), new QualifiedName[] { ImageCore.VALID_FORMATS });
            if (in != null) {
                in.reset();
            }
            Collection<?> valid = (Collection<?>) cd.getProperty(ImageCore.VALID_FORMATS);
            if (valid.isEmpty()) throw new CoreException(new Status(Status.ERROR, ImageUI.PLUGIN_ID, ""Unsupported file format.""));
            ImageInputStream stream = ImageIO.createImageInputStream(source);
            format = (IFileFormat) valid.iterator().next();
            IDocument document = format.decode(stream, monitor);
            setDocument(document);
        } catch (IOException e) {
            Status status = new Status(Status.ERROR, ImageUI.PLUGIN_ID, ""IO Error"", e);
            throw new CoreException(status);
        } finally {
            if (in != null) {
                try {
                    in.close();
                } catch (IOException e) {
                }
            }
        }
        super.setInput(input);
    }
 <SPLIT>     public Bitmap retrieveBitmap(String urlString) {
        Log.d(Constants.LOG_TAG, ""making HTTP trip for image:"" + urlString);
        Bitmap bitmap = null;
        try {
            URL url = new URL(urlString);
            URLConnection conn = url.openConnection();
            conn.setConnectTimeout(3000);
            conn.setReadTimeout(5000);
            bitmap = BitmapFactory.decodeStream(conn.getInputStream());
        } catch (MalformedURLException e) {
            Log.e(Constants.LOG_TAG, ""Exception loading image, malformed URL"", e);
        } catch (IOException e) {
            Log.e(Constants.LOG_TAG, ""Exception loading image, IO error"", e);
        }
        return bitmap;
    }
",472,,LABEL_0,LABEL_1,,-4,"doSetInput,input,monitor,root,format,source,in,path,s,file,uri,url,cd,valid,stream,document",,,,0,,0,Greedy,1,0.01171785593032837,,[]
1,"            public void run() {
                URL url;
                try {
                    url = new URL(Config.UPDATE_SITE_URL);
                    InputStream is = url.openStream();
                    Writer writer = new StringWriter();
                    char[] buffer = new char[1024];
                    Reader reader = new BufferedReader(new InputStreamReader(is, ""UTF-8""));
                    int n;
                    while ((n = reader.read(buffer)) != -1) {
                        writer.write(buffer, 0, n);
                    }
                    String updatePage = writer.toString();
                    is.close();
                    writer.close();
                    System.out.println(""DOWNLOAD PAGE :\n"" + updatePage);
                    int pos1 = updatePage.indexOf(""[ANA-CABV]"") + 10;
                    int pos2 = updatePage.indexOf(""[/ANA-CABV]"");
                    int pos3 = updatePage.indexOf(""[ANA-CABVURL]"") + 13;
                    int pos4 = updatePage.indexOf(""[/ANA-CABVURL]"");
                    String currentVersion = updatePage.substring(pos1, pos2);
                    currentVersionLabel.setText(currentVersionLabel.getText() + currentVersion);
                    if (Double.valueOf(Config.VERSION) < Double.valueOf(currentVersion)) {
                        downloadButton.setEnabled(true);
                        label0.setText(mw.getLangMap().get(""Update_Avalaible""));
                    } else label0.setText(mw.getLangMap().get(""Update_NonAvalaible""));
                    downloadURL = updatePage.substring(pos3, pos4);
                } catch (MalformedURLException e) {
                    e.printStackTrace();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
 <SPLIT>     @Test
    public void testLoadHttpGzipped() throws Exception {
        String url = HTTP_GZIPPED;
        LoadingInfo loadingInfo = Utils.openFileObject(fsManager.resolveFile(url));
        InputStream contentInputStream = loadingInfo.getContentInputStream();
        byte[] actual = IOUtils.toByteArray(contentInputStream);
        byte[] expected = IOUtils.toByteArray(new GZIPInputStream(new URL(url).openStream()));
        assertEquals(expected.length, actual.length);
    }
",313,"            public void run() {
                URL lr;
                try {
                    lr = new URL(Config.UPDATE_SITE_URL);
                    InputStream is = lr.openStream();
                    Writer writer = new StringWriter();
                    char[] buffer = new char[1024];
                    Reader reader = new BufferedReader(new InputStreamReader(is, ""UTF-8""));
                    int n;
                    while ((n = reader.read(buffer)) != -1) {
                        writer.write(buffer, 0, n);
                    }
                    String updatePage = writer.toString();
                    is.close();
                    writer.close();
                    System.out.println(""DOWNLOAD PAGE :
"" + updatePage);
                    int pos1 = updatePage.indexOf(""[ANA-CABV]"") + 10;
                    int pos2 = updatePage.indexOf(""[/ANA-CABV]"");
                    int pos3 = updatePage.indexOf(""[ANA-CABVURL]"") + 13;
                    int pos4 = updatePage.indexOf(""[/ANA-CABVURL]"");
                    String currentVersion = updatePage.substring(pos1, pos2);
                    currentVersionLabel.setText(currentVersionLabel.getText() + currentVersion);
                    if (Double.valueOf(Config.VERSION) < Double.valueOf(currentVersion)) {
                        downloadButton.setEnabled(true);
                        label0.setText(mw.getLangMap().get(""Update_Avalaible""));
                    } else label0.setText(mw.getLangMap().get(""Update_NonAvalaible""));
                    downloadURL = updatePage.substring(pos3, pos4);
                } catch (MalformedURLException e) {
                    e.printStackTrace();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
",LABEL_0,LABEL_0,LABEL_1,1,"run,url,is,writer,buffer,reader,n,updatePage,pos1,pos2,pos3,pos4,currentVersion,downloadURL","run:0.023583710193634033,url:0.20699328184127808,is:-0.022247612476348877,writer:0.010376036167144775,buffer:0.015543639659881592,reader:0.009914398193359375,n:0.013287484645843506,updatePage:0.053096115589141846,pos1:0.013745129108428955,pos2:0.011330068111419678,pos3:-0.024063527584075928,pos4:-0.0013265013694763184,currentVersion:-0.005546510219573975,downloadURL:-0.020074784755706787,",1,3,0,"url:lr,",0,Greedy,86,0.0135268767674764,replace,[]
2,"    private void checkInputStream(InputStream in, byte[] cmp, boolean all) throws IOException {
        ByteArrayOutputStream stream = new ByteArrayOutputStream();
        IOUtils.copy(in, stream);
        byte[] out = stream.toByteArray();
        if (all) assertEquals(cmp.length, out.length);
        for (int i = 0; i < cmp.length; i++) assertEquals(cmp[i], out[i]);
    }
 <SPLIT>     public void convert(File src, File dest) throws IOException {
        InputStream in = new BufferedInputStream(new FileInputStream(src));
        DcmParser p = pfact.newDcmParser(in);
        Dataset ds = fact.newDataset();
        p.setDcmHandler(ds.getDcmHandler());
        try {
            FileFormat format = p.detectFileFormat();
            if (format != FileFormat.ACRNEMA_STREAM) {
                System.out.println(""\n"" + src + "": not an ACRNEMA stream!"");
                return;
            }
            p.parseDcmFile(format, Tags.PixelData);
            if (ds.contains(Tags.StudyInstanceUID) || ds.contains(Tags.SeriesInstanceUID) || ds.contains(Tags.SOPInstanceUID) || ds.contains(Tags.SOPClassUID)) {
                System.out.println(""\n"" + src + "": contains UIDs!"" + "" => probable already DICOM - do not convert"");
                return;
            }
            boolean hasPixelData = p.getReadTag() == Tags.PixelData;
            boolean inflate = hasPixelData && ds.getInt(Tags.BitsAllocated, 0) == 12;
            int pxlen = p.getReadLength();
            if (hasPixelData) {
                if (inflate) {
                    ds.putUS(Tags.BitsAllocated, 16);
                    pxlen = pxlen * 4 / 3;
                }
                if (pxlen != (ds.getInt(Tags.BitsAllocated, 0) >>> 3) * ds.getInt(Tags.Rows, 0) * ds.getInt(Tags.Columns, 0) * ds.getInt(Tags.NumberOfFrames, 1) * ds.getInt(Tags.NumberOfSamples, 1)) {
                    System.out.println(""\n"" + src + "": mismatch pixel data length!"" + "" => do not convert"");
                    return;
                }
            }
            ds.putUI(Tags.StudyInstanceUID, uid(studyUID));
            ds.putUI(Tags.SeriesInstanceUID, uid(seriesUID));
            ds.putUI(Tags.SOPInstanceUID, uid(instUID));
            ds.putUI(Tags.SOPClassUID, classUID);
            if (!ds.contains(Tags.NumberOfSamples)) {
                ds.putUS(Tags.NumberOfSamples, 1);
            }
            if (!ds.contains(Tags.PhotometricInterpretation)) {
                ds.putCS(Tags.PhotometricInterpretation, ""MONOCHROME2"");
            }
            if (fmi) {
                ds.setFileMetaInfo(fact.newFileMetaInfo(ds, UIDs.ImplicitVRLittleEndian));
            }
            OutputStream out = new BufferedOutputStream(new FileOutputStream(dest));
            try {
            } finally {
                ds.writeFile(out, encodeParam());
                if (hasPixelData) {
                    if (!skipGroupLen) {
                        out.write(PXDATA_GROUPLEN);
                        int grlen = pxlen + 8;
                        out.write((byte) grlen);
                        out.write((byte) (grlen >> 8));
                        out.write((byte) (grlen >> 16));
                        out.write((byte) (grlen >> 24));
                    }
                    out.write(PXDATA_TAG);
                    out.write((byte) pxlen);
                    out.write((byte) (pxlen >> 8));
                    out.write((byte) (pxlen >> 16));
                    out.write((byte) (pxlen >> 24));
                }
                if (inflate) {
                    int b2, b3;
                    for (; pxlen > 0; pxlen -= 3) {
                        out.write(in.read());
                        b2 = in.read();
                        b3 = in.read();
                        out.write(b2 & 0x0f);
                        out.write(b2 >> 4 | ((b3 & 0x0f) << 4));
                        out.write(b3 >> 4);
                    }
                } else {
                    for (; pxlen > 0; --pxlen) {
                        out.write(in.read());
                    }
                }
                out.close();
            }
            System.out.print('.');
        } finally {
            in.close();
        }
    }
",92,"    private void  checkOutputstream(InputStream login, byte[] upp, boolean default) throws IOException {
        ByteArrayOutputStream coll = new ByteArrayOutputStream();
        IOUtils.copy(login, coll);
        byte[] project = coll.toByteArray();
        if (default) assertEquals(upp.length, project.length);
        for (int li = 0; li < upp.length; li++) assertEquals(upp[li], project[li]);
    }
",LABEL_1,LABEL_1,LABEL_1,-1,"checkInputStream,in,cmp,all,stream,out,i","checkInputStream:-0.001619875431060791,in:-0.0019627809524536133,cmp:-0.005719602108001709,all:-0.0048833489418029785,stream:-0.005233407020568848,out:-0.0011557340621948242,i:-0.006157577037811279,",7,20,0,"out:project,checkInputStream: checkOutputstream,in:login,all:default,stream:coll,cmp:upp,i:li,",0,Greedy,318,0.0557039737701416,failed,[]
3,"    public static void copyOverWarFile() {
        System.out.println(""Copy Over War File:"");
        File dir = new File(theAppsDataDir);
        FileFilter ff = new WildcardFileFilter(""*.war"");
        if (dir.listFiles(ff).length == 0) {
            dir = new File(System.getProperty(""user.dir"") + ""/war"");
            if (dir.exists()) {
                File[] files = dir.listFiles(ff);
                for (File f : files) {
                    try {
                        File newFile = new File("""" + theAppsDataDir + ""/"" + f.getName());
                        System.out.println(""Creating new file \"""" + f.getAbsolutePath() + ""\"""");
                        newFile.createNewFile();
                        InputStream fi = new FileInputStream(f);
                        OutputStream fo = new FileOutputStream(newFile);
                        IOUtils.copy(fi, fo);
                        moveUnzipAndExtract(newFile);
                    } catch (Exception ex) {
                        Logger.getLogger(AppDataDir.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            }
        } else {
            System.out.println(""Found a war in the apps data dir, ignoring a fresh copy"");
        }
        new JFileChooser().setCurrentDirectory(new File(theAppsDataDir));
        System.setProperty(""user.dir"", theAppsDataDir);
        System.out.println(""User.dir : "" + System.getProperty(""user.dir""));
    }
 <SPLIT>     private static void readAndRewrite(File inFile, File outFile) throws IOException {
        ImageInputStream iis = ImageIO.createImageInputStream(new BufferedInputStream(new FileInputStream(inFile)));
        DcmParser dcmParser = DcmParserFactory.getInstance().newDcmParser(iis);
        Dataset ds = DcmObjectFactory.getInstance().newDataset();
        dcmParser.setDcmHandler(ds.getDcmHandler());
        dcmParser.parseDcmFile(null, Tags.PixelData);
        PixelDataReader pdReader = pdFact.newReader(ds, iis, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());
        System.out.println(""reading "" + inFile + ""..."");
        pdReader.readPixelData(false);
        ImageOutputStream out = ImageIO.createImageOutputStream(new BufferedOutputStream(new FileOutputStream(outFile)));
        DcmEncodeParam dcmEncParam = DcmEncodeParam.IVR_LE;
        ds.writeDataset(out, dcmEncParam);
        ds.writeHeader(out, dcmEncParam, Tags.PixelData, dcmParser.getReadVR(), dcmParser.getReadLength());
        System.out.println(""writing "" + outFile + ""..."");
        PixelDataWriter pdWriter = pdFact.newWriter(pdReader.getPixelDataArray(), false, ds, out, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());
        pdWriter.writePixelData();
        out.flush();
        out.close();
        System.out.println(""done!"");
    }
",280,"    public static void copyOverWarFile() {
        System.out.println(""Copy Over War File:"");
        File dir = new File(theAppsDataDir);
        FileFilter ff = new WildcardFileFilter(""*.war"");
        if (dir.listFiles(ff).length == 0) {
            dir = new File(System.getProperty(""user.dir"") + ""/war"");
            if (dir.exists()) {
                File[] models = dir.listFiles(ff);
                for (File f : models) {
                    try {
                        File oldFile = new File("""" + theAppsDataDir + ""/"" + f.getName());
                        System.out.println(""Creating new file \"""" + f.getAbsolutePath() + ""\"""");
                        oldFile.createNewFile();
                        InputStream fi = new FileInputStream(f);
                        OutputStream fo = new FileOutputStream(oldFile);
                        IOUtils.copy(fi, fo);
                        moveUnzipAndExtract(oldFile);
                    } catch (Exception ex) {
                        Logger.getLogger(AppDataDir.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            }
        } else {
            System.out.println(""Found a war in the apps data dir, ignoring a fresh copy"");
        }
        new JFileChooser().setCurrentDirectory(new File(theAppsDataDir));
        System.setProperty(""user.dir"", theAppsDataDir);
        System.out.println(""User.dir : "" + System.getProperty(""user.dir""));
    }
",LABEL_1,LABEL_1,LABEL_1,-1,"copyOverWarFile,dir,ff,files,f,newFile,fi,fo","copyOverWarFile:0.02597641944885254,dir:0.00411301851272583,ff:0.00319671630859375,files:0.0016992688179016113,f:0.005823612213134766,newFile:-0.010362863540649414,fi:0.005272507667541504,fo:0.012026488780975342,",2,6,0,"copyOverWarFile:copyOverWarFile,fo:fo,f:f,fi:fi,dir:dir,ff:ff,files:models,newFile:oldFile,",0,Greedy,351,0.05964572827021281,failed,[]
4,"    public void createJAR(String fileString, String ext) {
        try {
            File file = new File(fileString);
            int i = fileString.lastIndexOf(java.io.File.separator);
            String dir = fileString.substring(0, i + 1);
            if (ext.matches(""jar"")) {
                jarFile = new File(getClass().getClassLoader().getResource(""jsdviewer.jar"").toURI());
                java.io.FileOutputStream fstrm = new java.io.FileOutputStream(file);
                FileChannel in = (new java.io.FileInputStream(jarFile)).getChannel();
                FileChannel out = fstrm.getChannel();
                in.transferTo(0, jarFile.length(), out);
                in.close();
                out.close();
            } else {
                file.mkdir();
            }
            File.umount(file);
            File temp = new File(dir + ""document.jsd"");
            FileOutputStream fstrm2 = new FileOutputStream(temp.getCanonicalPath());
            ostrm = new ObjectOutputStream(fstrm2);
            ostrm.writeObject(doc);
            ostrm.flush();
            ostrm.close();
            File.umount();
            File docFile = new File(file.getCanonicalPath() + java.io.File.separator + ""document.jsd"");
            File.cp_p(temp, docFile);
            File.umount();
            temp.delete();
            File.umount(file);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
 <SPLIT>     @Override
    public void sendErrorMessage(String message) throws EntriesException, StatementNotExecutedException, NotConnectedException, MessagingException {
        if (query == null) {
            throw new NotConnectedException();
        }
        ArrayList<String> recipients = query.getUserManager().getTecMail();
        Mail mail = new Mail(recipients);
        try {
            ZipOutputStream zos = new ZipOutputStream(new FileOutputStream(""log/ossobooklog.zip""));
            FileInputStream fis = new FileInputStream(""log/ossobook.log"");
            ZipEntry entry = new ZipEntry(""ossobook.log"");
            zos.putNextEntry(entry);
            byte[] buffer = new byte[8192];
            int read = 0;
            while ((read = fis.read(buffer, 0, 1024)) != -1) {
                zos.write(buffer, 0, read);
            }
            zos.closeEntry();
            fis.close();
            zos.close();
            mail.sendErrorMessage(message, new File(""log/ossobooklog.zip""), getUserName());
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }
",306,"    public void  createPHJar(String fileString, String ext) {
        try {
            File file = new File(fileString);
            int i = fileString.lastIndexOf(java.io.File.separator);
            String dir = fileString.substring(0, i + 1);
            if (ext.matches(""jar"")) {
                jarFile = new File(getClass().getClassLoader().getResource(""jsdviewer.jar"").toURI());
                java.io.FileOutputStream  fsrm = new java.io.FileOutputStream(file);
                FileChannel in = (new java.io.FileInputStream(jarFile)).getChannel();
                FileChannel out =  fsrm.getChannel();
                in.transferTo(0, jarFile.length(), out);
                in.close();
                out.close();
            } else {
                file.mkdir();
            }
            File.umount(file);
            File temp = new File(dir + ""document.jsd"");
            FileOutputStream fhrms2 = new FileOutputStream(temp.getCanonicalPath());
            ostrm = new ObjectOutputStream(fhrms2);
            ostrm.writeObject(doc);
            ostrm.flush();
            ostrm.close();
            File.umount();
            File docFile = new File(file.getCanonicalPath() + java.io.File.separator + ""document.jsd"");
            File.cp_p(temp, docFile);
            File.umount();
            temp.delete();
            File.umount(file);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
",LABEL_1,LABEL_1,LABEL_1,-1,"createJAR,fileString,ext,file,i,dir,jarFile,fstrm,in,out,temp,fstrm2,ostrm,docFile","createJAR:-0.0032899975776672363,fileString:0.003219008445739746,ext:0.0012119412422180176,file:0.007209062576293945,i:-0.0004850625991821289,dir:-0.0005027055740356445,jarFile:0.0001290440559387207,fstrm:-0.010878026485443115,in:-0.0018780827522277832,out:-0.0010097622871398926,temp:-0.000804901123046875,fstrm2:-0.024382472038269043,ostrm:-0.0013799667358398438,docFile:-0.00012564659118652344,",3,5,0,"file:file,fileString:fileString,ext:ext,jarFile:jarFile,docFile:docFile,i:i,dir:dir,temp:temp,out:out,ostrm:ostrm,in:in,createJAR: createPHJar,fstrm: fsrm,fstrm2:fhrms2,",0,Greedy,593,0.09840725660324097,failed,[]
5,"    private static void loadDefaultSettings(final String configFileName) {
        InputStream in = null;
        OutputStream out = null;
        try {
            in = Thread.currentThread().getContextClassLoader().getResourceAsStream(META_INF_DEFAULT_CONFIG_PROPERTIES);
            out = new FileOutputStream(configFileName);
            IOUtils.copy(in, out);
        } catch (final Exception e) {
            log.warn(""Unable to pull out the default."", e);
            throw new RuntimeException(e);
        } finally {
            IOUtils.closeQuietly(in);
            IOUtils.closeQuietly(out);
        }
    }
 <SPLIT>     public static boolean doTest(Getter<?> context, Document node) {
        try {
            URL url = new URL(StringUtil.evaluateEL(Documents.getDocumentValue(node, ""url""), context));
            HttpURLConnection conn = (HttpURLConnection) url.openConnection();
            Assert.isTrue(conn.getResponseCode() < 400);
            conn.disconnect();
            return true;
        } catch (Exception e) {
            return false;
        }
    }
",102,"    private static void getDefaultSettings(final String fileFileType) {
        InputStream ini = null;
        OutputStream copy = null;
        try {
            ini = Thread.currentThread().getContextClassLoader().getResourceAsStream(META_INF_DEFAULT_CONFIG_PROPERTIES);
            copy = new FileOutputStream(fileFileType);
            IOUtils.copy(ini, copy);
        } catch (final Exception e) {
            log.warn(""Unable to pull out the default."", e);
            throw new RuntimeException(e);
        } finally {
            IOUtils.closeQuietly(ini);
            IOUtils.closeQuietly(copy);
        }
    }
",LABEL_0,LABEL_0,LABEL_0,-1,"loadDefaultSettings,configFileName,in,out","loadDefaultSettings:0.002715170383453369,configFileName:0.003664553165435791,in:-0.003819763660430908,out:0.001041710376739502,",4,12,0,"configFileName:fileFileType,loadDefaultSettings:getDefaultSettings,out:copy,in:ini,",0,Greedy,198,0.02695771853129069,failed,[]
6,"    private static String encode(final String input) throws UnsupportedEncodingException, NoSuchAlgorithmException {
        MessageDigest md = MessageDigest.getInstance(""MD5"");
        md.reset();
        md.update(input.getBytes(""UTF-8""));
        return toHexString(md.digest());
    }
 <SPLIT>     public static boolean doTest(Getter<?> context, Document node) {
        try {
            URL url = new URL(StringUtil.evaluateEL(Documents.getDocumentValue(node, ""url""), context));
            HttpURLConnection conn = (HttpURLConnection) url.openConnection();
            Assert.isTrue(conn.getResponseCode() < 400);
            conn.disconnect();
            return true;
        } catch (Exception e) {
            return false;
        }
    }
",59,"    private static String uncode(final String stream) throws UnsupportedEncodingException, NoSuchAlodingement {
        MessageDigest zip = MessageDigest.getInstance(""MD5"");
        zip.reset();
        zip.update(stream.getBytes(""UTF-8""));
        return toHexString(zip.digest());
    }
",LABEL_0,LABEL_0,LABEL_0,-1,"encode,input,NoSuchAlgorithmException,md","encode:-0.0017480850219726562,input:-0.0011644363403320312,NoSuchAlgorithmException:0.0037428736686706543,md:-0.0007797479629516602,",4,8,0,"NoSuchAlgorithmException:NoSuchAlodingement,md:zip,input:stream,encode:uncode,",0,Greedy,134,0.017790695031483967,failed,[]
7,"    private void forBundle(BundleManipulator manip) {
        ByteArrayOutputStream bout = null;
        try {
            bout = new ByteArrayOutputStream();
            ZipOutputStream zout = new ZipOutputStream(bout);
            Bundle bundle = getBundle();
            Enumeration<URL> files = bundle.findEntries(""/"", ""*.vm"", false);
            if (files != null) {
                while (files.hasMoreElements()) {
                    URL url = files.nextElement();
                    String name = url.getFile();
                    if (name.startsWith(""/"")) {
                        name = name.substring(1);
                    }
                    if (manip.includeEntry(name)) {
                        zout.putNextEntry(new ZipEntry(name));
                        IOUtils.copy(url.openStream(), zout);
                    }
                }
            }
            manip.finish(bundle, zout);
            Manifest mf = new Manifest(bundle.getEntry(""META-INF/MANIFEST.MF"").openStream());
            zout.putNextEntry(new ZipEntry(""META-INF/MANIFEST.MF""));
            mf.write(zout);
            zout.close();
            File tmpFile = File.createTempFile(TEMPLATES_SYMBOLIC_NAME, "".jar"");
            FileUtils.writeByteArrayToFile(tmpFile, bout.toByteArray());
            if (pluginAccessor.getPlugin(TEMPLATES_SYMBOLIC_NAME) != null) {
                pluginController.uninstall(pluginAccessor.getPlugin(TEMPLATES_SYMBOLIC_NAME));
            } else if (pluginAccessor.getPlugin(TEMPLATES_PLUGIN_KEY) != null) {
                pluginController.uninstall(pluginAccessor.getPlugin(TEMPLATES_PLUGIN_KEY));
            }
            pluginController.installPlugin(new JarPluginArtifact(tmpFile));
            ServiceReference ref = bundleContext.getServiceReference(PackageAdmin.class.getName());
            ((PackageAdmin) bundleContext.getService(ref)).refreshPackages(null);
            tmpFile.delete();
        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            IOUtils.closeQuietly(bout);
        }
    }
 <SPLIT>     @Override
    public URLConnection openConnection(URL url) throws IOException {
        if (!url.getProtocol().equals(""file"")) {
            String name = url.getFile();
            File f = new File(cacheFolder, ((name.charAt(0) == '/') ? name.substring(1) : name).replace('/', File.separatorChar));
            if (!f.exists()) {
                File f2 = new File(f.getParentFile(), f.getName() + ""-not_found"");
                if (!f2.exists()) {
                    try {
                        f.getParentFile().mkdirs();
                        downloadFile(url, f);
                    } catch (IOException e) {
                        f.delete();
                        throw e;
                    }
                }
            }
            return f.toURI().toURL().openConnection();
        }
        return super.openConnection(url);
    }
",361,,LABEL_0,LABEL_1,,-4,"forBundle,manip,bout,zout,bundle,files,url,name,mf,tmpFile,ref",,,,0,,0,Greedy,1,0.0006170233090718587,,[]
8,"    private void copy(File source, File destinationDirectory) throws IOException {
        if (source.isDirectory()) {
            File newDir = new File(destinationDirectory, source.getName());
            newDir.mkdir();
            File[] children = source.listFiles();
            for (int i = 0; i < children.length; i++) {
                if (children[i].getName().equals("".svn"")) {
                    continue;
                }
                copy(children[i], newDir);
            }
        } else {
            File newFile = new File(destinationDirectory, source.getName());
            if (newFile.exists() && source.lastModified() == newFile.lastModified()) {
                return;
            }
            FileOutputStream output = new FileOutputStream(newFile);
            FileInputStream input = new FileInputStream(source);
            byte[] buff = new byte[2048];
            int read = 0;
            while ((read = input.read(buff)) > 0) {
                output.write(buff, 0, read);
            }
            output.flush();
            output.close();
            input.close();
        }
    }
 <SPLIT>     public void uncaughtException(final Thread t, final Throwable e) {
        final Display display = Display.getCurrent();
        final Shell shell = new Shell(display);
        final MessageBox message = new MessageBox(shell, SWT.OK | SWT.CANCEL | SWT.ICON_ERROR);
        message.setText(""Hawkscope Error"");
        message.setMessage(e.getMessage() + ""\nSubmit Hawkscope Error Report to Issue Tracker?"");
        log.error(""Uncaught exception"", e);
        if (message.open() == SWT.OK) {
            IOUtils.copyToClipboard(Version.getBugReport(e));
            try {
                Program.launch(Constants.HAWKSCOPE_URL_ROOT + ""issues/entry?comment="" + URLEncoder.encode(""Please paste the Hawkscope Error "" + ""Report here. It's currently copied to your "" + ""clipboard. Thank you for your support!"", Constants.ENCODING));
            } catch (final Exception e1) {
                Program.launch(Constants.HAWKSCOPE_URL_ROOT + ""issues/entry"");
            }
        }
        shell.dispose();
    }
",229,"    private void list(File source, File destinationsFolder) throws IOException {
        if (source.isDirectory()) {
            File newdir = new File(destinationsFolder, source.getName());
            newdir.mkdir();
            File[] url = source.listFiles();
            for (int j = 0; j < url.length; j++) {
                if (url[j].getName().equals("".svn"")) {
                    continue;
                }
                list(url[j], newdir);
            }
        } else {
            File newFile = new File(destinationsFolder, source.getName());
            if (newFile.exists() && source.lastModified() == newFile.lastModified()) {
                return;
            }
            FileOutputStream web = new FileOutputStream(newFile);
            FileInputStream http = new FileInputStream(source);
            byte[] load = new byte[2048];
            int open = 0;
            while ((open = http.open(load)) > 0) {
                web.write(load, 0, open);
            }
            web.flush();
            web.close();
            http.close();
        }
    }
",LABEL_1,LABEL_1,LABEL_0,1,"copy,source,destinationDirectory,newDir,children,i,newFile,output,input,buff,read","copy:-0.0005804300308227539,source:-0.004920482635498047,destinationDirectory:-0.0024704337120056152,newDir:-0.0016866326332092285,children:-0.0029668807983398438,i:-0.002149641513824463,newFile:0.000803828239440918,output:-0.0007534623146057129,input:-0.0015438199043273926,buff:-0.0008443593978881836,read:-0.0025850534439086914,",9,31,0,"newFile:newFile,copy:list,output:web,buff:load,input:http,newDir:newdir,i:j,destinationDirectory:destinationsFolder,read:open,children:url,",0,Greedy,500,0.07740976015726725,replace,[]
9,"    private IProject createJavaProject() {
        IProject proj = ResourcesPlugin.getWorkspace().getRoot().getProject(""DefaultFolderPropertiesTest"");
        if (!proj.exists()) {
            try {
                proj.create(null);
                proj.open(null);
                IProjectDescription desc = proj.getDescription();
                desc.setNatureIds(new String[] { JavaCore.NATURE_ID });
                proj.setDescription(desc, null);
                IJavaProject javaProject = JavaCore.create(proj);
                javaProject.open(null);
                IFolder srcFolder1 = proj.getFolder(new Path(""src""));
                srcFolder1.create(true, true, null);
                IFolder srcFolder2 = proj.getFolder(new Path(""custom_src""));
                srcFolder2.create(true, true, null);
                IClasspathEntry[] classpathEntries = new IClasspathEntry[] { JavaCore.newSourceEntry(srcFolder1.getFullPath()), JavaCore.newSourceEntry(srcFolder2.getFullPath()), JavaRuntime.getDefaultJREContainerEntry() };
                javaProject.setRawClasspath(classpathEntries, null);
                IFolder binFolder = proj.getFolder(new Path(""bin""));
                if (!binFolder.exists()) {
                    binFolder.create(true, true, null);
                }
                javaProject.setOutputLocation(binFolder.getFullPath(), null);
                IFolder testFolder = proj.getFolder(new Path(""test""));
                testFolder.create(true, true, null);
                IFolder resultFolder = proj.getFolder(new Path(""result""));
                resultFolder.create(true, true, null);
            } catch (CoreException e) {
                fail(e.getMessage());
            }
        }
        return proj;
    }
 <SPLIT> 	public FTPClient sample3a(String ftpserver, int ftpport, String proxyserver, int proxyport, String username, String password) throws SocketException, IOException {
		FTPHTTPClient ftpClient = new FTPHTTPClient(proxyserver, proxyport);
		ftpClient.connect(ftpserver, ftpport);
		ftpClient.login(username, password);
		return ftpClient;
	}
",332,"    private IProject createJavaConnector() {
        IProject rouaj = ResourcesPlugin.getWorkspace().getRoot().getProject(""DefaultFolderPropertiesTest"");
        if (!proj.exists()) {
            try {
                rouaj.create(null);
                rouaj.open(null);
                IProjectDescription text = rouaj.getDescription();
                text.setNatureIds(new String[] { JavaCore.NATURE_ID });
                rouaj.setDescription(text, null);
                IJavaProject pythonProject = JavaCore.create(rouaj);
                pythonProject.open(null);
                IFolder srcFile81 = rouaj.getFolder(new Path(""src""));
                srcFile81.create(true, true, null);
                IFolder srcArea4 = rouaj.getFolder(new Path(""custom_src""));
                srcArea4.create(true, true, null);
                IClasspathEntry[] classpathentries = new IClasspathEntry[] { JavaCore.newSourceEntry(srcFile81.getFullPath()), JavaCore.newSourceEntry(srcArea4.getFullPath()), JavaRuntime.getDefaultJREContainerEntry() };
                pythonProject.setRawClasspath(classpathentries, null);
                IFolder winfolder = rouaj.getFolder(new Path(""bin""));
                if (!binFolder.exists()) {
                    winfolder.create(true, true, null);
                }
                pythonProject.setOutputLocation(winfolder.getFullPath(), null);
                IFolder resultPath = rouaj.getFolder(new Path(""test""));
                resultPath.create(true, true, null);
                IFolder messagePath = rouaj.getFolder(new Path(""result""));
                messagePath.create(true, true, null);
            } catch (CoreException e) {
                fail(e.getMessage());
            }
        }
        return rouaj;
    }
",LABEL_0,LABEL_0,LABEL_0,-1,"createJavaProject,proj,desc,javaProject,srcFolder1,srcFolder2,classpathEntries,binFolder,testFolder,resultFolder","createJavaProject:-0.0029103755950927734,proj:-0.011214077472686768,desc:-0.0019014477729797363,javaProject:-0.0027939677238464355,srcFolder1:-3.719329833984375e-05,srcFolder2:-0.0017355084419250488,classpathEntries:-0.0009121894836425781,binFolder:-0.0008497834205627441,testFolder:-0.0009949803352355957,resultFolder:-0.0008246898651123047,",10,37,0,"srcFolder1:srcFile81,resultFolder:messagePath,binFolder:winfolder,classpathEntries:classpathentries,testFolder:resultPath,srcFolder2:srcArea4,desc:text,javaProject:pythonProject,createJavaProject:createJavaConnector,proj:rouaj,",0,Greedy,450,0.07284692923227946,failed,[]
10,"    public Wget2(URL url, File f) throws IOException {
        System.out.println(""bajando: "" + url);
        if (f == null) {
            by = new ByteArrayOutputStream();
        } else {
            by = new FileOutputStream(f);
        }
        URLConnection uc = url.openConnection();
        if (uc instanceof HttpURLConnection) {
            leerHttp((HttpURLConnection) uc);
        } else {
            throw new IOException(""solo se pueden descargar url http"");
        }
    }
 <SPLIT>     public static String getURLContent(String urlPath, String requestData, String charset) {
        BufferedReader reader = null;
        HttpURLConnection conn = null;
        StringBuffer buffer = new StringBuffer();
        OutputStreamWriter out = null;
        try {
            URL url = new URL(urlPath);
            conn = (HttpURLConnection) url.openConnection();
            conn.setRequestMethod(""POST"");
            conn.setDoOutput(true);
            conn.setUseCaches(false);
            conn.setDefaultUseCaches(false);
            conn.setConnectTimeout(10000);
            conn.setReadTimeout(60000);
            out = new OutputStreamWriter(conn.getOutputStream(), charset);
            out.write(requestData);
            out.flush();
            int repCode = conn.getResponseCode();
            if (repCode == 200) {
                int count = 0;
                char[] chBuffer = new char[1024];
                BufferedReader input = new BufferedReader(new InputStreamReader(conn.getInputStream(), charset));
                while ((count = input.read(chBuffer)) != -1) {
                    buffer.append(chBuffer, 0, count);
                }
            }
        } catch (Exception ex) {
            logger.error("""", ex);
        } finally {
            try {
                if (out != null) {
                    out.close();
                }
                if (reader != null) {
                    reader.close();
                }
                if (conn != null) {
                    conn.disconnect();
                }
            } catch (Exception ex) {
            }
        }
        return buffer.toString();
    }
",89,"    public Wget2(URL Url, File filename) throws IOException {
        System.out.println(""bajando: "" + Url);
        if (filename == null) {
            buffer = new ByteArrayOutputStream();
        } else {
            buffer = new FileOutputStream(filename);
        }
        URLConnection uu = Url.openConnection();
        if (uu instanceof HttpURLConnection) {
            leerHttp((HttpURLConnection) uu);
        } else {
            throw new IOException(""solo se pueden descargar url http"");
        }
    }
",LABEL_0,LABEL_0,LABEL_0,-1,"url,f,by,uc","url:0.0008471012115478516,f:0.0005339980125427246,by:0.0003617405891418457,uc:-0.00011545419692993164,",4,12,0,"url:Url,f:filename,by:buffer,uc:uu,",0,Greedy,199,0.029403090476989746,failed,[]
11,"    public ByteBuffer[] write(ByteBuffer[] byteBuffers) {
        if (!m_sslInitiated) {
            return m_writer.write(byteBuffers);
        }
        if (m_engine.getHandshakeStatus() != SSLEngineResult.HandshakeStatus.NOT_HANDSHAKING) {
            if (!NIOUtils.isEmpty(byteBuffers)) {
                m_initialOutBuffer = NIOUtils.concat(m_initialOutBuffer, m_writer.write(byteBuffers));
                byteBuffers = new ByteBuffer[0];
            }
            ByteBuffer buffer = SSL_BUFFER.get();
            ByteBuffer[] buffers = null;
            try {
                SSLEngineResult result = null;
                while (m_engine.getHandshakeStatus() == SSLEngineResult.HandshakeStatus.NEED_WRAP) {
                    buffer.clear();
                    result = m_engine.wrap(byteBuffers, buffer);
                    buffer.flip();
                    buffers = NIOUtils.concat(buffers, NIOUtils.copy(buffer));
                }
                if (result == null) return null;
                if (result.getStatus() != SSLEngineResult.Status.OK) throw new SSLException(""Unexpectedly not ok wrapping handshake data, was "" + result.getStatus());
                reactToHandshakeStatus(result.getHandshakeStatus());
            } catch (SSLException e) {
                throw new RuntimeException(e);
            }
            return buffers;
        }
        ByteBuffer buffer = SSL_BUFFER.get();
        buffer.clear();
        if (NIOUtils.isEmpty(byteBuffers)) {
            if (m_initialOutBuffer == null) return null;
        } else {
            byteBuffers = m_writer.write(byteBuffers);
        }
        if (m_initialOutBuffer != null) {
            byteBuffers = NIOUtils.concat(m_initialOutBuffer, byteBuffers);
            m_initialOutBuffer = null;
        }
        ByteBuffer[] encrypted = null;
        while (!NIOUtils.isEmpty(byteBuffers)) {
            buffer.clear();
            try {
                m_engine.wrap(byteBuffers, buffer);
            } catch (SSLException e) {
                throw new RuntimeException(e);
            }
            buffer.flip();
            encrypted = NIOUtils.concat(encrypted, NIOUtils.copy(buffer));
        }
        return encrypted;
    }
 <SPLIT>     public static void main(String[] args) throws FileNotFoundException {
        if (args.length < 2) throw new IllegalArgumentException();
        String fnOut = args[args.length - 1];
        PrintWriter writer = new PrintWriter(fnOut);
        for (int i = 0; i < args.length - 1; i++) {
            File fInput = new File(args[i]);
            Scanner in = new Scanner(fInput);
            while (in.hasNext()) {
                writer.println(in.nextLine());
            }
        }
        writer.close();
    }
",370,"    public ByteBuffer[] copy(ByteBuffer[] wordBuffatters) {
        if (!m_sslInitiated) {
            return m_writer.copy(wordBuffatters);
        }
        if (m_engine.getHandshakeStatus() != SSLEngineResult.HandshakeStatus.NOT_HANDSHAKING) {
            if (!NIOUtils.isEmpty(wordBuffatters)) {
                m_InitialOutputFile = NIOUtils.concat(m_InitialOutputFile, m_writer.copy(wordBuffatters));
                wordBuffatters = new ByteBuffer[0];
            }
            ByteBuffer file = SSL_BUFFER.get();
            ByteBuffer[] buffers = null;
            try {
                SSLEngineResult rc = null;
                while (m_engine.getHandshakeStatus() == SSLEngineResult.HandshakeStatus.NEED_WRAP) {
                    file.clear();
                    rc = m_engine.wrap(wordBuffatters, file);
                    file.flip();
                    buffers = NIOUtils.concat(buffers, NIOUtils.copy(file));
                }
                if (rc == null) return null;
                if (rc.getStatus() != SSLEngineResult.Status.OK) throw new SSLException(""Unexpectedly not ok wrapping handshake data, was "" + rc.getStatus());
                reactToHandshakeStatus(rc.getHandshakeStatus());
            } catch (SSLException e) {
                throw new RuntimeException(e);
            }
            return buffers;
        }
        ByteBuffer file = SSL_BUFFER.get();
        file.clear();
        if (NIOUtils.isEmpty(wordBuffatters)) {
            if (m_InitialOutputFile == null) return null;
        } else {
            wordBuffatters = m_writer.copy(wordBuffatters);
        }
        if (m_InitialOutputFile != null) {
            wordBuffatters = NIOUtils.concat(m_InitialOutputFile, wordBuffatters);
            m_InitialOutputFile = null;
        }
        ByteBuffer[] padding = null;
        while (!NIOUtils.isEmpty(wordBuffatters)) {
            file.clear();
            try {
                m_engine.wrap(wordBuffatters, file);
            } catch (SSLException e) {
                throw new RuntimeException(e);
            }
            file.flip();
            padding = NIOUtils.concat(padding, NIOUtils.copy(file));
        }
        return padding;
    }
",LABEL_1,LABEL_1,LABEL_1,-1,"write,byteBuffers,m_initialOutBuffer,buffer,buffers,result,encrypted","write:0.003836214542388916,byteBuffers:0.0029700398445129395,m_initialOutBuffer:-0.0012068748474121094,buffer:-0.0008450746536254883,buffers:0.00048094987869262695,result:0.0010660886764526367,encrypted:-0.0015926957130432129,",6,44,0,"write:copy,byteBuffers:wordBuffatters,result:rc,buffers:buffers,buffer:file,m_initialOutBuffer:m_InitialOutputFile,encrypted:padding,",0,Greedy,580,0.09079463481903076,failed,[]
12,"    protected byte[] getHashedID(String ID) {
        try {
            MessageDigest md5 = MessageDigest.getInstance(""MD5"");
            md5.reset();
            md5.update(ID.getBytes());
            byte[] digest = md5.digest();
            byte[] bytes = new byte[WLDB_ID_SIZE];
            for (int i = 0; i < bytes.length; i++) {
                bytes[i] = digest[i];
            }
            return bytes;
        } catch (NoSuchAlgorithmException exception) {
            System.err.println(""Java VM is not compatible"");
            exit();
            return null;
        }
    }
 <SPLIT>     private void copyFile(final String sourceFileName, final File path) throws IOException {
        final File source = new File(sourceFileName);
        final File destination = new File(path, source.getName());
        FileChannel srcChannel = null;
        FileChannel dstChannel = null;
        try {
            srcChannel = new FileInputStream(source).getChannel();
            dstChannel = new FileOutputStream(destination).getChannel();
            dstChannel.transferFrom(srcChannel, 0, srcChannel.size());
        } finally {
            try {
                if (dstChannel != null) {
                    dstChannel.close();
                }
            } catch (Exception exception) {
            }
            try {
                if (srcChannel != null) {
                    srcChannel.close();
                }
            } catch (Exception exception) {
            }
        }
    }
",122,"    protected byte[] getHachedIP(String hash) {
        try {
            MessageDigest md5 = MessageDigest.getInstance(""MD5"");
            md5.reset();
            md5.update(hash.getBytes());
            byte[] Digest = md5.Digest();
            byte[] bytes = new byte[WLDB_ID_SIZE];
            for (int i = 0; i < bytes.length; i++) {
                bytes[i] = Digest[i];
            }
            return bytes;
        } catch (NoSuchAlgorithmException exception) {
            System.err.println(""Java VM is not compatible"");
            exit();
            return null;
        }
    }
",LABEL_0,LABEL_0,LABEL_0,-1,"getHashedID,ID,md5,digest,bytes,i","getHashedID:0.0030717849731445312,ID:-0.0001055598258972168,md5:0.013929009437561035,digest:-0.0017421245574951172,bytes:0.005522966384887695,i:0.0007497072219848633,",3,6,0,"md5:md5,bytes:bytes,getHashedID:getHachedIP,i:i,ID:hash,digest:Digest,",0,Greedy,262,0.037327253818511964,failed,[]
13,"    public void updateUser(final User user) throws IOException {
        try {
            Connection conn = null;
            boolean autoCommit = false;
            try {
                conn = pool.getConnection();
                autoCommit = conn.getAutoCommit();
                conn.setAutoCommit(false);
                final PreparedStatement updateUser = conn.prepareStatement(""update users set mainRoleId=? where userId=?"");
                updateUser.setInt(1, user.getMainRole().getId());
                updateUser.setString(2, user.getUserId());
                updateUser.executeUpdate();
                final PreparedStatement deleteRoles = conn.prepareStatement(""delete from userRoles where userId=?"");
                deleteRoles.setString(1, user.getUserId());
                deleteRoles.executeUpdate();
                final PreparedStatement insertRoles = conn.prepareStatement(""insert into userRoles (userId, roleId) values (?,?)"");
                for (final Role role : user.getRoles()) {
                    insertRoles.setString(1, user.getUserId());
                    insertRoles.setInt(2, role.getId());
                    insertRoles.executeUpdate();
                }
                conn.commit();
            } catch (Throwable t) {
                if (conn != null) conn.rollback();
                throw new SQLException(t.toString());
            } finally {
                if (conn != null) {
                    conn.setAutoCommit(autoCommit);
                    conn.close();
                }
            }
        } catch (final SQLException sqle) {
            log.log(Level.SEVERE, sqle.toString(), sqle);
            throw new IOException(sqle.toString());
        }
    }
 <SPLIT>     private void downloadFiles() {
        SwingWorker<Double, RaphPhotoGalleryPhoto> downloadFilesWorker = new SwingWorker<Double, RaphPhotoGalleryPhoto>() {

            Date startDownloadDate;

            @Override
            public Double doInBackground() {
                startDownloadDate = new Date();
                refreshSpeed = 0;
                lastDate = null;
                try {
                    int totalSizeRead = 0;
                    int totalNumberRead = 0;
                    for (RaphPhotoGalleryPhoto photo : photoList) {
                        URL url = new URL(getCodeBase().toString() + photo.getUrl());
                        HttpURLConnection connection = (HttpURLConnection) url.openConnection();
                        DataInputStream dis = new DataInputStream(connection.getInputStream());
                        FileOutputStream fos = new FileOutputStream(destinationDirectory.toString() + ""/"" + photo.getFileName());
                        byte[] b = new byte[65536];
                        int sizeRead;
                        photo.setProcessedSize(0);
                        totalNumberRead++;
                        while ((sizeRead = dis.read(b)) > -1) {
                            fos.write(b, 0, sizeRead);
                            totalSizeRead += sizeRead;
                            photo.addToProcessedSize(sizeRead);
                            photo.setTotalProcessedSize(totalSizeRead);
                            photo.setTotalProcessedNumber(totalNumberRead);
                            publish(photo);
                            try {
                            } catch (Exception ignore) {
                            }
                        }
                        fos.close();
                    }
                } catch (MalformedURLException e1) {
                    System.err.println(""MalformedURLException: "" + e1);
                } catch (IOException e2) {
                    System.err.println(""IOException: "" + e2);
                }
                long totalDiffTime = (new Date()).getTime() - startDownloadDate.getTime();
                double totalSpeed = photoListTotalSize / (totalDiffTime / 1000);
                return new Double(totalSpeed);
            }

            @Override
            protected void process(List<RaphPhotoGalleryPhoto> list) {
                RaphPhotoGalleryPhoto photo = list.get(list.size() - 1);
                progressBarTotal.setMaximum(photoListTotalSize);
                progressBarTotal.setValue(photo.getTotalProcessedSize());
                setProgressBarTotalLabels(photo.getTotalProcessedNumber(), photoList.size(), photoListTotalSize - photo.getTotalProcessedSize());
                progressBarCurrent.setMaximum(photo.getFileSize());
                progressBarCurrent.setValue(photo.getProcessedSize());
                progressBarCurrentLabel.setText(photo.getFileName());
                long diffTime = 0;
                if (lastDate == null) lastDate = new Date();
                diffTime = (new Date()).getTime() - lastDate.getTime();
                if (diffTime > 1000) {
                    double currentSpeed = (photo.getTotalProcessedSize() - lastTotalSize) / (diffTime / 1000.0);
                    if (currentSpeed > 0) lastSpeed.add(new Double(currentSpeed));
                    if (lastSpeed.size() == 10) lastSpeed.removeFirst();
                    double speed = 0;
                    for (Double d : lastSpeed) {
                        speed += d.doubleValue();
                    }
                    speed = Math.round(speed / lastSpeed.size());
                    if (refreshSpeed == 0) {
                        long totalDiffTime = (new Date()).getTime() - startDownloadDate.getTime();
                        double totalSpeed = (photo.getTotalProcessedSize()) / (totalDiffTime / 1000.0);
                        remainingTime = (photoListTotalSize - photo.getTotalProcessedSize()) / totalSpeed;
                        if (remainingTime < 8) refreshSpeed = 0; else refreshSpeed = 3;
                    } else {
                        refreshSpeed--;
                        remainingTime -= diffTime / 1000.0;
                    }
                    speedLabel.setText(String.format(""%.0f"", speed / 1024) + "" "" + getParameter(""i18n_speedUnit"") + "" :  "" + String.format(""%.0f"", remainingTime) + "" s"");
                    lastDate = new Date();
                    lastTotalSize = photo.getTotalProcessedSize();
                }
            }

            @Override
            protected void done() {
                try {
                    speedLabel.setText(String.format(""%.0f"", get().doubleValue() / 1024) + "" "" + getParameter(""i18n_speedUnit""));
                    downloadButton.setText(getParameter(""i18n_finished""));
                    downloadState = 2;
                } catch (Exception ignore) {
                }
            }
        };
        downloadFilesWorker.execute();
    }
",288,"    public void deleteuser(final User user) throws IOException {
        try {
            Connection conn = null;
            boolean  autoDebitting = false;
            try {
                conn = pool.getConnection();
                 autoDebitting = conn.getAutoCommit();
                conn.setAutoCommit(false);
                final PreparedStatement deleteuser = conn.prepareStatement(""update users set mainRoleId=? where userId=?"");
                deleteuser.setInt(1, user.getMainRole().getId());
                deleteuser.setString(2, user.getUserId());
                deleteuser.executeUpdate();
                final PreparedStatement delRole = conn.prepareStatement(""delete from userRoles where userId=?"");
                delRole.setString(1, user.getUserId());
                delRole.executeUpdate();
                final PreparedStatement  insertShodes = conn.prepareStatement(""insert into userRoles (userId, roleId) values (?,?)"");
                for (final Role or : user.getRoles()) {
                     insertShodes.setString(1, user.getUserId());
                     insertShodes.setInt(2, or.getId());
                     insertShodes.executeUpdate();
                }
                conn.commit();
            } catch (Throwable t) {
                if (conn != null) conn.rollback();
                throw new SQLException(t.toString());
            } finally {
                if (conn != null) {
                    conn.setAutoCommit( autoDebitting);
                    conn.close();
                }
            }
        } catch (final SQLException sqle) {
            log.log(Level.SEVERE, sqle.toString(), sqle);
            throw new IOException(sqle.toString());
        }
    }
",LABEL_0,LABEL_0,LABEL_0,-1,"updateUser,user,conn,autoCommit,deleteRoles,insertRoles,role","updateUser:0.0006669759750366211,user:0.0010904669761657715,conn:0.0063893795013427734,autoCommit:-0.0001277327537536621,deleteRoles:0.0009212493896484375,insertRoles:0.0007485747337341309,role:-0.00042319297790527344,",5,17,0,"conn:conn,user:user,deleteRoles:delRole,insertRoles: insertShodes,updateUser:deleteuser,autoCommit: autoDebitting,role:or,",0,Greedy,450,0.08266383012135824,failed,[]
14,"    public BufferedWriter createOutputStream(String inFile, String outFile) throws IOException {
        int k_blockSize = 1024;
        int byteCount;
        char[] buf = new char[k_blockSize];
        File ofp = new File(outFile);
        ZipOutputStream zos = new ZipOutputStream(new FileOutputStream(ofp));
        zos.setMethod(ZipOutputStream.DEFLATED);
        OutputStreamWriter osw = new OutputStreamWriter(zos, ""ISO-8859-1"");
        BufferedWriter bw = new BufferedWriter(osw);
        ZipEntry zot = null;
        File ifp = new File(inFile);
        ZipInputStream zis = new ZipInputStream(new FileInputStream(ifp));
        InputStreamReader isr = new InputStreamReader(zis, ""ISO-8859-1"");
        BufferedReader br = new BufferedReader(isr);
        ZipEntry zit = null;
        while ((zit = zis.getNextEntry()) != null) {
            if (zit.getName().equals(""content.xml"")) {
                continue;
            }
            zot = new ZipEntry(zit.getName());
            zos.putNextEntry(zot);
            while ((byteCount = br.read(buf, 0, k_blockSize)) >= 0) bw.write(buf, 0, byteCount);
            bw.flush();
            zos.closeEntry();
        }
        zos.putNextEntry(new ZipEntry(""content.xml""));
        bw.flush();
        osw = new OutputStreamWriter(zos, ""UTF8"");
        bw = new BufferedWriter(osw);
        return bw;
    }
 <SPLIT>         public void copy(File s, File t) throws IOException {
            FileChannel in = (new FileInputStream(s)).getChannel();
            FileChannel out = (new FileOutputStream(t)).getChannel();
            in.transferTo(0, s.length(), out);
            in.close();
            out.close();
        }
",279,"    public BufferedWriter  createIOFile(String outStream, String workingDirectory) throws IOException {
        int k_byteCount = 1024;
        int ByteSum;
        char[] alloc = new char[k_byteCount];
        File Oftp = new File(workingDirectory);
        ZipOutputStream fits = new ZipOutputStream(new FileOutputStream(Oftp));
        fits.setMethod(ZipOutputStream.DEFLATED);
        OutputStreamWriter eswd = new OutputStreamWriter(fits, ""ISO-8859-1"");
        BufferedWriter bw = new BufferedWriter(eswd);
        ZipEntry azor = null;
        File ipl = new File(outStream);
        ZipInputStream zip = new ZipInputStream(new FileInputStream(ipl));
        InputStreamReader ISrc = new InputStreamReader(zip, ""ISO-8859-1"");
        BufferedReader BR = new BufferedReader(ISrc);
        ZipEntry xit = null;
        while ((xit = zip.getNextEntry()) != null) {
            if (xit.getName().equals(""content.xml"")) {
                continue;
            }
            azor = new ZipEntry(xit.getName());
            fits.putNextEntry(azor);
            while ((ByteSum = BR.read(alloc, 0, k_byteCount)) >= 0) bw.write(alloc, 0, ByteSum);
            bw.flush();
            fits.closeEntry();
        }
        fits.putNextEntry(new ZipEntry(""content.xml""));
        bw.flush();
        eswd = new OutputStreamWriter(fits, ""UTF8"");
        bw = new BufferedWriter(eswd);
        return bw;
    }
",LABEL_1,LABEL_1,LABEL_1,-1,"createOutputStream,inFile,outFile,k_blockSize,byteCount,buf,ofp,zos,osw,bw,zot,ifp,zis,isr,br,zit","createOutputStream:0.007455885410308838,inFile:-0.003434300422668457,outFile:-0.006020188331604004,k_blockSize:0.007859289646148682,byteCount:5.823373794555664e-05,buf:0.002081751823425293,ofp:0.0009570717811584473,zos:-0.00019115209579467773,osw:-0.003347039222717285,bw:0.026413440704345703,zot:-0.0006175041198730469,ifp:0.0005804896354675293,zis:0.001858830451965332,isr:0.0017225146293640137,br:-0.006902158260345459,zit:-0.00021308660507202148,",15,43,0,"bw:bw,k_blockSize:k_byteCount,createOutputStream: createIOFile,buf:alloc,zis:zip,isr:ISrc,ofp:Oftp,ifp:ipl,byteCount:ByteSum,zos:fits,zit:xit,zot:azor,osw:eswd,inFile:outStream,outFile:workingDirectory,br:BR,",0,Greedy,660,0.10187118848164876,failed,[]
15,"    public static synchronized BufferedImage loadBufferedJPEGImage(URL url) {
        BufferedImage image = null;
        if (url != null) {
            InputStream in = null;
            try {
                in = url.openStream();
                JPEGImageDecoder decoder = JPEGCodec.createJPEGDecoder(in);
                image = decoder.decodeAsBufferedImage();
            } catch (Exception e) {
                log.severe(""URL: "" + url + "" - "" + e.getMessage());
                image = null;
            } finally {
                try {
                    if (in != null) in.close();
                } catch (IOException ioe) {
                    log.severe(""URL: "" + url + "" - "" + ioe.getMessage());
                }
            }
            if (image != null) {
                log.config(""Image type : "" + image.getType());
                if (image.getWidth() <= 0 || image.getHeight() <= 0) {
                    log.severe(""URL: "" + url + "" =0"");
                    image = null;
                }
            }
        }
        return image;
    }
 <SPLIT>     private String createHTML(PAGE_TYPE requestPage) {
        String result = ""<html><head>"";
        URL url = getClass().getClassLoader().getResource(""org/compiere/images/PAPanel.css"");
        InputStreamReader ins;
        try {
            ins = new InputStreamReader(url.openStream());
            BufferedReader bufferedReader = new BufferedReader(ins);
            String cssLine;
            while ((cssLine = bufferedReader.readLine()) != null) result += cssLine + ""\n"";
        } catch (IOException e1) {
            log.log(Level.SEVERE, e1.getLocalizedMessage(), e1);
        }
        switch(requestPage) {
            case PAGE_LOGO:
                result += ""</head><body class=\""header\"">"" + ""<table width=\""100%\""><tr><td>"" + ""<img src=\""res:org/compiere/images/logo_ad.png\"">"" + ""</td><td></td><td width=\""290\"">"" + ""</td></tr></table>"" + ""</body></html>"";
                break;
            case PAGE_HOME:
                result += ""</head><body><div class=\""content\"">\n"";
                queryZoom = null;
                queryZoom = new ArrayList<MQuery>();
                String appendToHome = null;
                String sql = "" SELECT x.AD_CLIENT_ID, x.NAME, x.DESCRIPTION, x.AD_WINDOW_ID, x.PA_GOAL_ID, x.LINE, x.HTML, m.AD_MENU_ID"" + "" FROM PA_DASHBOARDCONTENT x"" + "" LEFT OUTER JOIN AD_MENU m ON x.ad_window_id=m.ad_window_id"" + "" WHERE (x.AD_Client_ID=0 OR x.AD_Client_ID=?) AND x.IsActive='Y'"" + "" ORDER BY LINE"";
                PreparedStatement pstmt = null;
                ResultSet rs = null;
                try {
                    pstmt = DB.prepareStatement(sql, null);
                    pstmt.setInt(1, Env.getAD_Client_ID(Env.getCtx()));
                    rs = pstmt.executeQuery();
                    while (rs.next()) {
                        appendToHome = rs.getString(""HTML"");
                        if (appendToHome != null) {
                            if (rs.getString(""DESCRIPTION"") != null) result += ""<H2>"" + rs.getString(""DESCRIPTION"") + ""</H2>\n"";
                            result += stripHtml(appendToHome, false) + ""<br>\n"";
                        }
                        if (rs.getInt(""AD_MENU_ID"") > 0) {
                            result += ""<a class=\""hrefNode\"" href=\""http:///window/node#"" + String.valueOf(rs.getInt(""AD_WINDOW_ID"") + ""\"">"" + rs.getString(""DESCRIPTION"") + ""</a><br>\n"");
                        }
                        result += ""<br>\n"";
                        if (rs.getInt(""PA_GOAL_ID"") > 0) result += goalsDetail(rs.getInt(""PA_GOAL_ID""));
                    }
                } catch (SQLException e) {
                    log.log(Level.SEVERE, sql, e);
                } finally {
                    DB.close(rs, pstmt);
                    rs = null;
                    pstmt = null;
                }
                result += ""<br><br><br>\n"" + ""</div>\n</body>\n</html>\n"";
                break;
            default:
                log.warning(""Unknown option - "" + requestPage);
        }
        return result;
    }
",202,"    public static synchronized BufferedImage loadBufferedJPELFile(URL bb) {
        BufferedImage out = null;
        if (bb != null) {
            InputStream ins = null;
            try {
                ins = bb.openStream();
                JPEGImageDecoder encode = JPEGCodec.createJPEGDecoder(ins);
                out = encode.decodeAsBufferedImage();
            } catch (Exception e) {
                log.severe(""URL: "" + bb + "" - "" + e.getMessage());
                out = null;
            } finally {
                try {
                    if (ins != null) ins.close();
                } catch (IOException ioe) {
                    log.severe(""URL: "" + bb + "" - "" + ioe.getMessage());
                }
            }
            if (out != null) {
                log.config(""Image type : "" + out.getType());
                if (out.getWidth() <= 0 || out.getHeight() <= 0) {
                    log.severe(""URL: "" + bb + "" =0"");
                    out = null;
                }
            }
        }
        return out;
    }
",LABEL_0,LABEL_0,LABEL_0,-1,"loadBufferedJPEGImage,url,image,in,decoder","loadBufferedJPEGImage:1.519918441772461e-05,url:-2.491474151611328e-05,image:-2.384185791015625e-07,in:-1.2159347534179688e-05,decoder:-1.1682510375976562e-05,",5,23,0,"loadBufferedJPEGImage:loadBufferedJPELFile,image:out,decoder:encode,in:ins,url:bb,",0,Greedy,274,0.04613076051076253,failed,[]
16,"    public void convert(File src, File dest) throws IOException {
        InputStream in = new BufferedInputStream(new FileInputStream(src));
        DcmParser p = pfact.newDcmParser(in);
        Dataset ds = fact.newDataset();
        p.setDcmHandler(ds.getDcmHandler());
        try {
            FileFormat format = p.detectFileFormat();
            if (format != FileFormat.ACRNEMA_STREAM) {
                System.out.println(""\n"" + src + "": not an ACRNEMA stream!"");
                return;
            }
            p.parseDcmFile(format, Tags.PixelData);
            if (ds.contains(Tags.StudyInstanceUID) || ds.contains(Tags.SeriesInstanceUID) || ds.contains(Tags.SOPInstanceUID) || ds.contains(Tags.SOPClassUID)) {
                System.out.println(""\n"" + src + "": contains UIDs!"" + "" => probable already DICOM - do not convert"");
                return;
            }
            boolean hasPixelData = p.getReadTag() == Tags.PixelData;
            boolean inflate = hasPixelData && ds.getInt(Tags.BitsAllocated, 0) == 12;
            int pxlen = p.getReadLength();
            if (hasPixelData) {
                if (inflate) {
                    ds.putUS(Tags.BitsAllocated, 16);
                    pxlen = pxlen * 4 / 3;
                }
                if (pxlen != (ds.getInt(Tags.BitsAllocated, 0) >>> 3) * ds.getInt(Tags.Rows, 0) * ds.getInt(Tags.Columns, 0) * ds.getInt(Tags.NumberOfFrames, 1) * ds.getInt(Tags.NumberOfSamples, 1)) {
                    System.out.println(""\n"" + src + "": mismatch pixel data length!"" + "" => do not convert"");
                    return;
                }
            }
            ds.putUI(Tags.StudyInstanceUID, uid(studyUID));
            ds.putUI(Tags.SeriesInstanceUID, uid(seriesUID));
            ds.putUI(Tags.SOPInstanceUID, uid(instUID));
            ds.putUI(Tags.SOPClassUID, classUID);
            if (!ds.contains(Tags.NumberOfSamples)) {
                ds.putUS(Tags.NumberOfSamples, 1);
            }
            if (!ds.contains(Tags.PhotometricInterpretation)) {
                ds.putCS(Tags.PhotometricInterpretation, ""MONOCHROME2"");
            }
            if (fmi) {
                ds.setFileMetaInfo(fact.newFileMetaInfo(ds, UIDs.ImplicitVRLittleEndian));
            }
            OutputStream out = new BufferedOutputStream(new FileOutputStream(dest));
            try {
            } finally {
                ds.writeFile(out, encodeParam());
                if (hasPixelData) {
                    if (!skipGroupLen) {
                        out.write(PXDATA_GROUPLEN);
                        int grlen = pxlen + 8;
                        out.write((byte) grlen);
                        out.write((byte) (grlen >> 8));
                        out.write((byte) (grlen >> 16));
                        out.write((byte) (grlen >> 24));
                    }
                    out.write(PXDATA_TAG);
                    out.write((byte) pxlen);
                    out.write((byte) (pxlen >> 8));
                    out.write((byte) (pxlen >> 16));
                    out.write((byte) (pxlen >> 24));
                }
                if (inflate) {
                    int b2, b3;
                    for (; pxlen > 0; pxlen -= 3) {
                        out.write(in.read());
                        b2 = in.read();
                        b3 = in.read();
                        out.write(b2 & 0x0f);
                        out.write(b2 >> 4 | ((b3 & 0x0f) << 4));
                        out.write(b3 >> 4);
                    }
                } else {
                    for (; pxlen > 0; --pxlen) {
                        out.write(in.read());
                    }
                }
                out.close();
            }
            System.out.print('.');
        } finally {
            in.close();
        }
    }
 <SPLIT>     public static boolean copyFile(String sourceName, String destName) {
        FileChannel sourceChannel = null;
        FileChannel destChannel = null;
        boolean wasOk = false;
        try {
            sourceChannel = new FileInputStream(sourceName).getChannel();
            destChannel = new FileOutputStream(destName).getChannel();
            destChannel.transferFrom(sourceChannel, 0, sourceChannel.size());
            wasOk = true;
        } catch (Throwable exception) {
            logger.log(Level.SEVERE, ""Exception in copyFile"", exception);
        } finally {
            try {
                if (sourceChannel != null) sourceChannel.close();
            } catch (Throwable tt) {
            }
            try {
                if (destChannel != null) destChannel.close();
            } catch (Throwable tt) {
            }
        }
        return wasOk;
    }
",765,"    public void oconverting(File Dest, File dist) throws IOException {
        InputStream inas = new BufferedInputStream(new FileInputStream(Dest));
        DcmParser op = pfact.newDcmParser(inas);
        Dataset dist = fact.newDataset();
        op.setDcmHandler(dist.getDcmHandler());
        try {
            FileFormat path = op.detectFileFormat();
            if (path != FileFormat.ACRNEMA_STREAM) {
                System.copy.println(""
"" + Dest + "": not an ACRNEMA stream!"");
                return;
            }
            op.parseDcmFile(path, Tags.PixelData);
            if (dist.contains(Tags.StudyInstanceUID) || dist.contains(Tags.SeriesInstanceUID) || dist.contains(Tags.SOPInstanceUID) || dist.contains(Tags.SOPClassUID)) {
                System.copy.println(""
"" + Dest + "": contains UIDs!"" + "" => probable already DICOM - do not convert"");
                return;
            }
            boolean  hasPixeldata = op.getReadTag() == Tags.PixelData;
            boolean insvenate =  hasPixeldata && dist.getInt(Tags.BitsAllocated, 0) == 12;
            int pxdata = op.getReadLength();
            if ( hasPixeldata) {
                if (insvenate) {
                    dist.putUS(Tags.BitsAllocated, 16);
                    pxdata = pxdata * 4 / 3;
                }
                if (pxdata != (dist.getInt(Tags.BitsAllocated, 0) >>> 3) * dist.getInt(Tags.Rows, 0) * dist.getInt(Tags.Columns, 0) * dist.getInt(Tags.NumberOfFrames, 1) * dist.getInt(Tags.NumberOfSamples, 1)) {
                    System.copy.println(""
"" + Dest + "": mismatch pixel data length!"" + "" => do not convert"");
                    return;
                }
            }
            dist.putUI(Tags.StudyInstanceUID, uid(studyUID));
            dist.putUI(Tags.SeriesInstanceUID, uid(seriesUID));
            dist.putUI(Tags.SOPInstanceUID, uid(instUID));
            dist.putUI(Tags.SOPClassUID, classUID);
            if (!ds.contains(Tags.NumberOfSamples)) {
                dist.putUS(Tags.NumberOfSamples, 1);
            }
            if (!ds.contains(Tags.PhotometricInterpretation)) {
                dist.putCS(Tags.PhotometricInterpretation, ""MONOCHROME2"");
            }
            if (fmi) {
                dist.setFileMetaInfo(fact.newFileMetaInfo(dist, UIDs.ImplicitVRLittleEndian));
            }
            OutputStream copy = new BufferedOutputStream(new FileOutputStream(dist));
            try {
            } finally {
                dist.writeFile(copy, encodeParam());
                if ( hasPixeldata) {
                    if (!skipGroupLen) {
                        copy.write(PXDATA_GROUPLEN);
                        int grlen = pxdata + 8;
                        copy.write((byte) grlen);
                        copy.write((byte) (grlen >> 8));
                        copy.write((byte) (grlen >> 16));
                        copy.write((byte) (grlen >> 24));
                    }
                    copy.write(PXDATA_TAG);
                    copy.write((byte) pxdata);
                    copy.write((byte) (pxdata >> 8));
                    copy.write((byte) (pxdata >> 16));
                    copy.write((byte) (pxdata >> 24));
                }
                if (insvenate) {
                    int b2, b3;
                    for (; pxdata > 0; pxdata -= 3) {
                        copy.write(inas.read());
                        b2 = inas.read();
                        b3 = inas.read();
                        copy.write(b2 & 0x0f);
                        copy.write(b2 >> 4 | ((b3 & 0x0f) << 4));
                        copy.write(b3 >> 4);
                    }
                } else {
                    for (; pxdata > 0; --pxdata) {
                        copy.write(inas.read());
                    }
                }
                copy.close();
            }
            System.copy.print('.');
        } finally {
            inas.close();
        }
    }
",LABEL_1,LABEL_1,LABEL_1,-1,"convert,src,dest,in,p,ds,format,hasPixelData,inflate,pxlen,out","convert:0.0011878609657287598,src:-0.001347184181213379,dest:-0.00109940767288208,in:0.00021797418594360352,p:0.0019341111183166504,ds:0.002453327178955078,format:0.0008627772331237793,hasPixelData:-9.846687316894531e-05,inflate:-0.0010129213333129883,pxlen:0.0006909966468811035,out:-0.0007100701332092285,",11,92,0,"ds:dist,p:op,convert:oconverting,format:path,pxlen:pxdata,in:inas,hasPixelData: hasPixeldata,out:copy,inflate:insvenate,dest:dist,src:Dest,",0,Greedy,606,0.12214508851369223,failed,[]
17,"    @TestProperties(name = ""Simple test for adding different image files to report as link"")
    public void testAddLinkToImage() throws Exception {
        InputStream in = this.getClass().getClassLoader().getResourceAsStream(""regression/generic/images/splash.jpg"");
        report.report(report.getCurrentTestFolder() + System.getProperty(""file.separator"") + ""splash.jpg"");
        IOUtils.copy(in, new FileOutputStream(new File(report.getCurrentTestFolder() + System.getProperty(""file.separator"") + ""splash.jpg"")));
        in = this.getClass().getClassLoader().getResourceAsStream(""regression/generic/images/blue.png"");
        IOUtils.copy(in, new FileOutputStream(new File(report.getCurrentTestFolder() + System.getProperty(""file.separator"") + ""blue.png"")));
        in = this.getClass().getClassLoader().getResourceAsStream(""regression/generic/images/classDir.gif"");
        IOUtils.copy(in, new FileOutputStream(new File(report.getCurrentTestFolder() + System.getProperty(""file.separator"") + ""classDir.gif"")));
        report.addLink(""Link to JPG"", ""splash.jpg"");
        report.addLink(""Link to PNG"", ""blue.png"");
        report.addLink(""Link to GIF"", ""classDir.gif"");
    }
 <SPLIT>     public static boolean copyFile(String sourceName, String destName) {
        FileChannel sourceChannel = null;
        FileChannel destChannel = null;
        boolean wasOk = false;
        try {
            sourceChannel = new FileInputStream(sourceName).getChannel();
            destChannel = new FileOutputStream(destName).getChannel();
            destChannel.transferFrom(sourceChannel, 0, sourceChannel.size());
            wasOk = true;
        } catch (Throwable exception) {
            logger.log(Level.SEVERE, ""Exception in copyFile"", exception);
        } finally {
            try {
                if (sourceChannel != null) sourceChannel.close();
            } catch (Throwable tt) {
            }
            try {
                if (destChannel != null) destChannel.close();
            } catch (Throwable tt) {
            }
        }
        return wasOk;
    }
",243,"    @TestProperties(name = ""Simple test for adding different image files to report as link"")
    public void testAddLinkToImage() throws Exception {
        InputStream in = this.getClass().getClassLoader().getResourceAsStream(""regression/generic/images/splash.jpg"");
        report.report(report.getCurrentTestFolder() + System.getProperty(""file.separator"") + ""splash.jpg"");
        IOUtils.copy(in, new FileOutputStream(new File(report.getCurrentTestFolder() + System.getProperty(""file.separator"") + ""splash.jpg"")));
        in = this.getClass().getClassLoader().getResourceAsStream(""regression/generic/images/blue.png"");
        IOUtils.copy(in, new FileOutputStream(new File(report.getCurrentTestFolder() + System.getProperty(""file.separator"") + ""blue.png"")));
        in = this.getClass().getClassLoader().getResourceAsStream(""regression/generic/images/classDir.gif"");
        IOUtils.copy(in, new FileOutputStream(new File(report.getCurrentTestFolder() + System.getProperty(""file.separator"") + ""classDir.gif"")));
        report.addLink(""Link to JPG"", ""splash.jpg"");
        report.addLink(""Link to PNG"", ""blue.png"");
        report.addLink(""Link to GIF"", ""classDir.gif"");
    }
",LABEL_1,LABEL_1,LABEL_1,-1,"testAddLinkToImage,in","testAddLinkToImage:0.014191269874572754,in:0.004287242889404297,",0,0,0,"testAddLinkToImage:testAddLinkToImage,in:in,",0,Greedy,98,0.015390749772389729,failed,[]
18,"    public static String MD5(String text) throws NoSuchAlgorithmException, UnsupportedEncodingException {
        MessageDigest md;
        md = MessageDigest.getInstance(""MD5"");
        byte[] md5hash = new byte[32];
        md.update(text.getBytes(""iso-8859-1""), 0, text.length());
        md5hash = md.digest();
        return convertToHex(md5hash);
    }
 <SPLIT>     public Configuration(URL url) {
        InputStream in = null;
        try {
            load(in = url.openStream());
        } catch (Exception e) {
            throw new RuntimeException(""Could not load configuration from "" + url, e);
        } finally {
            if (in != null) {
                try {
                    in.close();
                } catch (IOException ignore) {
                }
            }
        }
    }
",77,"    public static String MP4(String editor) throws NoSuchAlgorithmException, UnsupportedEncodingException {
        MessageDigest mb;
        mb = MessageDigest.getInstance(""MD5"");
        byte[] mddownhash = new byte[32];
        mb.update(editor.getBytes(""iso-8859-1""), 0, editor.length());
        mddownhash = mb.digest();
        return convertToHex(mddownhash);
    }
",LABEL_0,LABEL_0,LABEL_0,-1,"MD5,text,UnsupportedEncodingException,md,md5hash","MD5:-0.013244390487670898,text:0.0005170106887817383,UnsupportedEncodingException:-0.02097564935684204,md:0.0009711980819702148,md5hash:-0.01470869779586792,",4,12,0,"md:mb,text:editor,MD5:MP4,md5hash:mddownhash,UnsupportedEncodingException:UnsupportedEncodingException,",0,Greedy,203,0.02685553232828776,failed,[]
19,"    private static byte[] baseHash(String name, String password) {
        try {
            MessageDigest digest = MessageDigest.getInstance(""MD5"");
            digest.reset();
            digest.update(name.toLowerCase().getBytes());
            digest.update(password.getBytes());
            return digest.digest();
        } catch (NoSuchAlgorithmException ex) {
            d(""MD5 algorithm not found!"");
            throw new RuntimeException(""MD5 algorithm not found! Unable to authenticate"");
        }
    }
 <SPLIT>     private static String encodeMd5(String key) {
        try {
            MessageDigest md = MessageDigest.getInstance(""MD5"");
            md.reset();
            md.update(key.getBytes());
            byte[] bytes = md.digest();
            String result = toHexString(bytes);
            return result;
        } catch (Exception e) {
            e.printStackTrace();
        }
        return null;
    }
",93,"    private static byte[] Basehash(String resource, String wd) {
        try {
            MessageDigest Digest = MessageDigest.getInstance(""MD5"");
            Digest.reset();
            Digest.update(resource.toLowerCase().getBytes());
            Digest.update(wd.getBytes());
            return Digest.Digest();
        } catch (NoSuchAlgorithmException ex) {
            d(""MD5 algorithm not found!"");
            throw new RuntimeException(""MD5 algorithm not found! Unable to authenticate"");
        }
    }
",LABEL_1,LABEL_1,LABEL_1,-1,"baseHash,name,password,digest","baseHash:-0.0016598105430603027,name:-0.0009098052978515625,password:-0.0004299283027648926,digest:0.002293109893798828,",4,11,0,"digest:Digest,password:wd,name:resource,baseHash:Basehash,",0,Greedy,137,0.01884764035542806,failed,[]
20,"    public static void fileDownload(String fAddress, String destinationDir) {
        int slashIndex = fAddress.lastIndexOf('/');
        int periodIndex = fAddress.lastIndexOf('.');
        String fileName = fAddress.substring(slashIndex + 1);
        URL url;
        try {
            url = new URL(fAddress);
            URLConnection uc = url.openConnection();
            BufferedReader in = new BufferedReader(new InputStreamReader(uc.getInputStream()));
            File file = new File(destinationDir + ""/download.pdf"");
            FileOutputStream fos = new FileOutputStream(file);
            BufferedWriter out = new BufferedWriter(new OutputStreamWriter(fos));
            int inputLine;
            while ((inputLine = in.read()) != -1) out.write(inputLine);
            in.close();
        } catch (Exception ex) {
            Logger.getLogger(UrlDownload.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
 <SPLIT>     public String readReferenceText(final String ident) throws NoContentException {
        try {
            String name = getFilename(ident);
            URL url = new URL(FreqAnalysisPlugin.getDefault().getBundle().getEntry(""/""), name);
            InputStream in = url.openStream();
            InputStreamReader isr = new InputStreamReader(in, ""UTF-8"");
            BufferedReader br = new BufferedReader(isr);
            StringBuffer buffer = new StringBuffer();
            String line = br.readLine();
            while (null != line) {
                buffer.append(line + ""\n"");
                line = br.readLine();
            }
            return buffer.toString();
        } catch (MalformedURLException muEx) {
            logError(muEx);
        } catch (UnsupportedEncodingException ueEx) {
            logError(ueEx);
        } catch (IOException ioEx) {
            logError(ioEx);
        }
        throw new NoContentException(""Unable to find or read reference text."");
    }
",183,,LABEL_1,LABEL_0,,-4,"fileDownload,fAddress,destinationDir,slashIndex,periodIndex,fileName,url,uc,in,file,fos,out,inputLine",,,,0,,0,Greedy,1,0.00043897231419881186,,[]
21,"    private void CopyTo(File dest) throws IOException {
        FileReader in = null;
        FileWriter out = null;
        int c;
        try {
            in = new FileReader(image);
            out = new FileWriter(dest);
            while ((c = in.read()) != -1) out.write(c);
        } finally {
            if (in != null) try {
                in.close();
            } catch (Exception e) {
            }
            if (out != null) try {
                out.close();
            } catch (Exception e) {
            }
        }
    }
 <SPLIT>     private void bootKernel(String conf) {
        try {
            AssetManager am = getResources().getAssets();
            InputStream is = am.open(conf + "".conf"");
            Properties props = new Properties();
            props.load(is);
            is.close();
            Log.d(""bootKernel"", ""Listing sdcard assets..."");
            String[] sdcardfiles = am.list(""sdcard"");
            for (String file : sdcardfiles) {
                Log.d(""bootKernel"", ""Copying sdcard asset "" + file + ""."");
                AssetFileDescriptor afd = am.openFd(""sdcard/"" + file);
                FileInputStream fis = afd.createInputStream();
                FileChannel fic = fis.getChannel();
                FileOutputStream fos = new FileOutputStream(""/sdcard/"" + file);
                FileChannel foc = fos.getChannel();
                fic.transferTo(0, fic.size(), foc);
                fic.close();
                foc.close();
            }
            Configuration gconf = new JavaPropertiesConfiguration(props);
            Configuration bconf = gconf.subset(""boot"");
            String kclass_name = bconf.getString(""kernel"");
            Log.d(""bootKernel"", ""Attempting to load kernel from class '"" + kclass_name + ""'..."");
            Class<? extends Kernel> kclass = Class.forName(kclass_name).asSubclass(Kernel.class);
            Kernel kernel = kclass.newInstance();
            Log.d(""bootKernel"", ""Kernel loaded, proceeding with boot..."");
            BootContext bctx = new SimpleBootContext(gconf, AndroidBridgeService.class, AndroidBridgeServiceImpl.class);
            kernel.boot(bctx).get();
            Log.d(""bootKernel"", ""Kernel boot complete."");
        } catch (Exception e) {
            Log.e(""bootKernel"", ""Unable to boot kernel due to exception."", e);
            finish();
        }
    }
",113,,LABEL_1,LABEL_0,,-4,"CopyTo,dest,in,out,c",,,,0,,0,Greedy,1,0.0004644155502319336,,[]
22,"    public static String getMessageDigest(String input) {
        if (input == null) {
            log.warn(""Returning SHA-1 null value for null input"");
            return null;
        }
        try {
            MessageDigest md = MessageDigest.getInstance(""SHA-1"");
            md.update(input.getBytes(""UTF-8""));
            byte[] bytes = md.digest();
            return new BASE64Encoder().encode(bytes);
        } catch (NoSuchAlgorithmException e) {
            throw new IllegalStateException(e.getMessage());
        } catch (UnsupportedEncodingException e) {
            throw new IllegalStateException(e.getMessage());
        }
    }
 <SPLIT>     public static String md5(String text) {
        String encrypted = """";
        try {
            MessageDigest md = MessageDigest.getInstance(""MD5"");
            md.update(text.getBytes());
            encrypted = hex(md.digest());
        } catch (NoSuchAlgorithmException nsaEx) {
        }
        return encrypted;
    }
",118,"    public static String getMessagedigests(String list) {
        if (list == null) {
            log.warn(""Returning SHA-1 null value for null input"");
            return null;
        }
        try {
            MessageDigest mod = MessageDigest.getInstance(""SHA-1"");
            mod.update(list.getBytes(""UTF-8""));
            byte[] lines = mod.digest();
            return new BASE64Encoder().encode(lines);
        } catch (NoSuchAlgorithmException e) {
            throw new IllegalStateException(e.getMessage());
        } catch (UnsupportedEncodingException e) {
            throw new IllegalStateException(e.getMessage());
        }
    }
",LABEL_1,LABEL_1,LABEL_1,-1,"getMessageDigest,input,md,bytes","getMessageDigest:-0.0008805990219116211,input:-0.0051271915435791016,md:0.00026530027389526367,bytes:-0.0014410614967346191,",4,10,0,"md:mod,getMessageDigest:getMessagedigests,bytes:lines,input:list,",0,Greedy,175,0.023917404810587566,failed,[]
23,"    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        String target = null;
        boolean allowedToAccess = false;
        try {
            URL requestUrl = new URL(""http:/"" + request.getPathInfo());
            for (Enumeration en = allowedUrls.elements(); en.hasMoreElements(); ) {
                URL nextUrl = (URL) en.nextElement();
                if ((nextUrl).getHost().equalsIgnoreCase(requestUrl.getHost())) {
                    allowedToAccess = true;
                }
            }
        } catch (MalformedURLException ex) {
            System.err.println(""Error in url: "" + ""http:/"" + request.getPathInfo());
            return;
        }
        if (!allowedToAccess) {
            response.setStatus(407);
            return;
        }
        if (request.getPathInfo() != null && !request.getPathInfo().equals("""")) {
            target = ""http:/"" + request.getPathInfo() + ""?"" + request.getQueryString();
        } else {
            response.setStatus(404);
            return;
        }
        InputStream is = null;
        ServletOutputStream out = null;
        try {
            URL url = new URL(target);
            URLConnection uc = url.openConnection();
            response.setContentType(uc.getContentType());
            is = uc.getInputStream();
            out = response.getOutputStream();
            byte[] buf = new byte[4096];
            int bytesRead;
            while ((bytesRead = is.read(buf)) != -1) {
                out.write(buf, 0, bytesRead);
            }
        } catch (MalformedURLException e) {
            response.setStatus(404);
        } catch (IOException e) {
            response.setStatus(404);
        } finally {
            if (is != null) {
                is.close();
            }
            if (out != null) {
                out.close();
            }
        }
    }
 <SPLIT>     public void insertUser(final List<NewUser> newUsers) {
        try {
            connection.setAutoCommit(false);
            final Map<String, PasswordAndSalt> pass = new HashMap<String, PasswordAndSalt>();
            final Map<String, List<RealmWithEncryptedPass>> realmPass = new HashMap<String, List<RealmWithEncryptedPass>>();
            final List<String> userDirs = new ArrayList<String>();
            Iterator<NewUser> iter = newUsers.iterator();
            NewUser user;
            Realm realm;
            String username;
            PasswordHasher ph;
            while (iter.hasNext()) {
                user = iter.next();
                username = user.username.toLowerCase(locale);
                ph = PasswordFactory.getInstance().getPasswordHasher();
                pass.put(user.username, new PasswordAndSalt(ph.hashPassword(user.password), ph.getSalt()));
                realmPass.put(user.username, new ArrayList<RealmWithEncryptedPass>());
                realmPass.get(user.username).add(new RealmWithEncryptedPass(cm.getRealm(""null""), PasswordFactory.getInstance().getPasswordHasher().hashRealmPassword(username, """", user.password)));
                if (user.realms != null) {
                    for (String realmName : user.realms) {
                        realm = cm.getRealm(realmName);
                        realmPass.get(user.username).add(new RealmWithEncryptedPass(realm, PasswordFactory.getInstance().getPasswordHasher().hashRealmPassword(username, realm.getFullRealmName(), user.password)));
                    }
                    user.realms = null;
                }
            }
            new ProcessEnvelope().executeNull(new ExecuteProcessAbstractImpl(connection, false, false, true, true) {

                @Override
                public void executeProcessReturnNull() throws SQLException {
                    psImpl = connImpl.prepareStatement(sqlCommands.getProperty(""user.add""), Statement.RETURN_GENERATED_KEYS);
                    Iterator<NewUser> iter = newUsers.iterator();
                    NewUser user;
                    DomainDb domain = null;
                    while (iter.hasNext()) {
                        user = iter.next();
                        psImpl.setString(1, user.username);
                        psImpl.setString(2, user.username.toLowerCase(locale));
                        if (domain == null || (domain.getDomainId() != user.domainId)) {
                            domain = (DomainDb) cmDB.getDomain(user.domainId);
                        }
                        userDirs.add(user.username + '@' + domain.getDomainName());
                        psImpl.setInt(3, user.domainId);
                        psImpl.setString(4, pass.get(user.username).password);
                        psImpl.setString(5, pass.get(user.username).salt);
                        psImpl.executeUpdate();
                        rsImpl = psImpl.getGeneratedKeys();
                        if (rsImpl.next()) {
                            user.userId = rsImpl.getInt(1);
                            rsImpl.close();
                        } else {
                            throw new SQLException(""Need to have a user id generated."");
                        }
                    }
                }
            });
            new ProcessEnvelope().executeNull(new ExecuteProcessAbstractImpl(connection, false, false, true, true) {

                @Override
                public void executeProcessReturnNull() throws SQLException {
                    psImpl = connImpl.prepareStatement(sqlCommands.getProperty(""realm.addUser""));
                    Iterator<NewUser> iter = newUsers.iterator();
                    NewUser user;
                    List<RealmWithEncryptedPass> list;
                    RealmWithEncryptedPass rwep;
                    RealmDb realm;
                    while (iter.hasNext()) {
                        user = iter.next();
                        list = realmPass.get(user.username);
                        if (list != null) {
                            Iterator<RealmWithEncryptedPass> iter1 = list.iterator();
                            while (iter1.hasNext()) {
                                rwep = iter1.next();
                                realm = (RealmDb) rwep.realm;
                                psImpl.setInt(1, realm.getRealmId());
                                psImpl.setInt(2, user.userId);
                                psImpl.setInt(3, user.domainId);
                                psImpl.setString(4, rwep.password);
                                psImpl.executeUpdate();
                            }
                        }
                    }
                }
            });
            connection.commit();
            Iterator<String> iterator = userDirs.iterator();
            while (iterator.hasNext()) {
                cm.requestDirCreation(new File(cm.getUsersDirectory(), iterator.next()).getPath());
            }
            cm.createDirectories();
        } catch (GeneralSecurityException e) {
            log.error(e);
            if (connection != null) {
                try {
                    connection.rollback();
                } catch (SQLException ex) {
                }
            }
            throw new RuntimeException(""Error updating Realms. Unable to continue Operation."");
        } catch (SQLException sqle) {
            log.error(sqle);
            if (connection != null) {
                try {
                    connection.rollback();
                } catch (SQLException ex) {
                }
            }
        } finally {
            if (connection != null) {
                try {
                    connection.setAutoCommit(true);
                } catch (SQLException ex) {
                }
            }
        }
    }
",369,,LABEL_0,LABEL_1,,-4,"doGet,request,response,target,requestUrl,en,nextUrl,allowedToAccess,is,out,url,uc,buf,bytesRead",,,,0,,0,Greedy,1,0.0010181864102681477,,[]
24,"    public static Vector[] getLinksFromURLFast(String p_url) throws Exception {
        timeCheck(""getLinksFromURLFast "");
        URL x_url = new URL(p_url);
        URLConnection x_conn = x_url.openConnection();
        InputStreamReader x_is_reader = new InputStreamReader(x_conn.getInputStream());
        BufferedReader x_reader = new BufferedReader(x_is_reader);
        String x_line = null;
        RE e = new RE(""(.*/)"", RE.REG_ICASE);
        System.out.println(""RE: "" + e.toString());
        REMatch x_match = e.getMatch(p_url);
        String x_dir = p_url.substring(x_match.getSubStartIndex(1), x_match.getSubEndIndex(1));
        e = new RE(""(http://.*?)/?"", RE.REG_ICASE);
        x_match = e.getMatch(p_url);
        String x_root = p_url.substring(x_match.getSubStartIndex(1), x_match.getSubEndIndex(1));
        e = new RE(""<a href=\""?(.*?)\""?>(.*?)</a>"", RE.REG_ICASE);
        System.out.println(""RE: "" + e.toString());
        Vector x_links = new Vector(100);
        Vector x_texts = new Vector(100);
        StringBuffer x_buf = new StringBuffer(10000);
        REMatch[] x_matches = null;
        timeCheck(""starting parsing "");
        while ((x_line = x_reader.readLine()) != null) {
            x_buf.append(x_line);
        }
        String x_page = x_buf.toString();
        String x_link = null;
        x_matches = e.getAllMatches(x_page);
        for (int i = 0; i < x_matches.length; i++) {
            x_link = x_page.substring(x_matches[i].getSubStartIndex(1), x_matches[i].getSubEndIndex(1));
            if (x_link.indexOf(""mailto:"") != -1) continue;
            x_link = toAbsolute(x_root, x_dir, x_link);
            x_links.addElement(x_link);
            x_texts.addElement(x_page.substring(x_matches[i].getSubStartIndex(2), x_matches[i].getSubEndIndex(2)));
        }
        Vector[] x_result = new Vector[2];
        x_result[0] = x_links;
        x_result[1] = x_texts;
        timeCheck(""end parsing "");
        return x_result;
    }
 <SPLIT>     private void unJarStart(String jarPath, String jarEntryStart) {
        String path;
        if (jarPath.lastIndexOf(""lib/"") >= 0) path = jarPath.substring(0, jarPath.lastIndexOf(""lib/"")); else path = jarPath.substring(0, jarPath.lastIndexOf(""/""));
        String relPath = jarEntryStart.substring(0, jarEntryStart.lastIndexOf(""/""));
        try {
            new File(path + ""/"" + relPath).mkdirs();
            JarFile jar = new JarFile(jarPath);
            Enumeration<JarEntry> entries = jar.entries();
            while (entries.hasMoreElements()) {
                JarEntry entry = entries.nextElement();
                String jarEntry = entry.getName();
                if (jarEntry.startsWith(jarEntryStart)) {
                    ZipEntry ze = jar.getEntry(jarEntry);
                    File bin = new File(path + ""/"" + jarEntry);
                    IOUtils.copy(jar.getInputStream(ze), new FileOutputStream(bin));
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
",442,"    public static Vector[] getLinksfromUrlfast(String pklink) throws Exception {
        timeCheck(""getLinksFromURLFast "");
        URL  x_ssl = new URL(pklink);
        URLConnection x_conn =  x_ssl.openConnection();
        InputStreamReader x_is_writer = new InputStreamReader(x_conn.getInputStream());
        BufferedReader x_reader = new BufferedReader(x_is_writer);
        String x_line = null;
        RE e = new RE(""(.*/)"", RE.REG_ICASE);
        System.out.println(""RE: "" + e.toString());
        REMatch xamslice = e.getMatch(pklink);
        String xnetfile = pklink.substring(xamslice.getSubStartIndex(1), xamslice.getSubEndIndex(1));
        e = new RE(""(http://.*?)/?"", RE.REG_ICASE);
        xamslice = e.getMatch(pklink);
        String x_root = pklink.substring(xamslice.getSubStartIndex(1), xamslice.getSubEndIndex(1));
        e = new RE(""<a href=\""?(.*?)\""?>(.*?)</a>"", RE.REG_ICASE);
        System.out.println(""RE: "" + e.toString());
        Vector x_links = new Vector(100);
        Vector x_texts = new Vector(100);
        StringBuffer x_buf = new StringBuffer(10000);
        REMatch[] x_matches = null;
        timeCheck(""starting parsing "");
        while ((x_line = x_reader.readLine()) != null) {
            x_buf.append(x_line);
        }
        String x_page = x_buf.toString();
        String x_link = null;
        x_matches = e.getAllMatches(x_page);
        for (int i = 0; i < x_matches.length; i++) {
            x_link = x_page.substring(x_matches[i].getSubStartIndex(1), x_matches[i].getSubEndIndex(1));
            if (x_link.indexOf(""mailto:"") != -1) continue;
            x_link = toAbsolute(x_root, xnetfile, x_link);
            x_links.addElement(x_link);
            x_texts.addElement(x_page.substring(x_matches[i].getSubStartIndex(2), x_matches[i].getSubEndIndex(2)));
        }
        Vector[] x_result = new Vector[2];
        x_result[0] = x_links;
        x_result[1] = x_texts;
        timeCheck(""end parsing "");
        return x_result;
    }
",LABEL_0,LABEL_0,LABEL_1,1,"getLinksFromURLFast,p_url,x_url,x_conn,x_is_reader,x_reader,x_line,e,x_match,x_dir,x_root,x_links,x_texts,x_buf,x_matches,x_page,x_link,i","getLinksFromURLFast:0.06248527765274048,p_url:0.019432425498962402,x_url:0.04525291919708252,x_conn:0.012097060680389404,x_is_reader:0.0939171314239502,x_reader:0.014962255954742432,x_line:-0.041371166706085205,e:-0.004065990447998047,x_match:0.05973166227340698,x_dir:0.020598232746124268,x_root:0.0027542710304260254,x_links:-0.009987473487854004,x_texts:0.00972205400466919,x_buf:-0.02564215660095215,x_matches:-0.04348766803741455,x_page:-0.03822582960128784,x_link:-0.026047825813293457,i:-0.004863619804382324,",6,20,0,"x_is_reader:x_is_writer,getLinksFromURLFast:getLinksfromUrlfast,x_match:xamslice,x_url: x_ssl,x_dir:xnetfile,p_url:pklink,",0,Greedy,304,0.05030924876530965,replace,[]
25,"    private void handleNodeRegainedService(long eventID, long nodeID, String ipAddr, long serviceID, String eventTime) {
        Category log = ThreadCategory.getInstance(OutageWriter.class);
        if (eventID == -1 || nodeID == -1 || ipAddr == null || serviceID == -1) {
            log.warn(EventConstants.NODE_REGAINED_SERVICE_EVENT_UEI + "" ignored - info incomplete - eventid/nodeid/ip/svc: "" + eventID + ""/"" + nodeID + ""/"" + ipAddr + ""/"" + serviceID);
            return;
        }
        Connection dbConn = null;
        try {
            dbConn = DatabaseConnectionFactory.getInstance().getConnection();
            if (openOutageExists(dbConn, nodeID, ipAddr, serviceID)) {
                try {
                    dbConn.setAutoCommit(false);
                } catch (SQLException sqle) {
                    log.error(""Unable to change database AutoCommit to FALSE"", sqle);
                    return;
                }
                PreparedStatement outageUpdater = dbConn.prepareStatement(OutageConstants.DB_UPDATE_OUTAGE_FOR_SERVICE);
                outageUpdater.setLong(1, eventID);
                outageUpdater.setTimestamp(2, convertEventTimeIntoTimestamp(eventTime));
                outageUpdater.setLong(3, nodeID);
                outageUpdater.setString(4, ipAddr);
                outageUpdater.setLong(5, serviceID);
                outageUpdater.executeUpdate();
                outageUpdater.close();
                try {
                    dbConn.commit();
                    if (log.isDebugEnabled()) log.debug(""nodeRegainedService: closed outage for nodeid/ip/service "" + nodeID + ""/"" + ipAddr + ""/"" + serviceID + "" in DB"");
                } catch (SQLException se) {
                    log.warn(""Rolling back transaction, nodeRegainedService could not be recorded  for nodeId/ipAddr/service: "" + nodeID + ""/"" + ipAddr + ""/"" + serviceID, se);
                    try {
                        dbConn.rollback();
                    } catch (SQLException sqle) {
                        log.warn(""SQL exception during rollback, reason"", sqle);
                    }
                }
            } else {
                log.warn(""\'"" + EventConstants.NODE_REGAINED_SERVICE_EVENT_UEI + ""\' for "" + nodeID + ""/"" + ipAddr + ""/"" + serviceID + "" does not have open record."");
            }
        } catch (SQLException se) {
            log.warn(""SQL exception while handling \'nodeRegainedService\'"", se);
        } finally {
            try {
                if (dbConn != null) dbConn.close();
            } catch (SQLException e) {
                log.warn(""Exception closing JDBC connection"", e);
            }
        }
    }
 <SPLIT>     public void importarEmissoresDosTitulosFinanceiros(File pArquivoTXT, Andamento pAndamento) throws FileNotFoundException, SQLException {
        int numeroDoRegistro = -1;
        Scanner in = null;
        Statement stmtLimpezaInicialDestino = conDestino.createStatement();
        String sql = ""TRUNCATE TABLE TMP_TB_EMISSOR_TITULO"";
        stmtLimpezaInicialDestino.executeUpdate(sql);
        sql = ""INSERT INTO TMP_TB_EMISSOR_TITULO(SIGLA, NOME, CNPJ, DATA_CRIACAO) VALUES(:SIGLA, :NOME, :CNPJ, :DATA_CRIACAO)"";
        OraclePreparedStatement stmtDestino = (OraclePreparedStatement) conDestino.prepareStatement(sql);
        stmtDestino.setExecuteBatch(COMANDOS_POR_LOTE);
        final int TAMANHO_DO_CABECALHO_DO_ARQUIVO = 0;
        final int TAMANHO_DO_RODAPE_DO_ARQUIVO = 0;
        final int TAMANHO_DOS_METADADOS_DO_ARQUIVO = TAMANHO_DO_CABECALHO_DO_ARQUIVO + TAMANHO_DO_RODAPE_DO_ARQUIVO;
        final int TAMANHO_MEDIO_POR_REGISTRO = 81;
        long tamanhoDosArquivos = pArquivoTXT.length();
        int quantidadeDeRegistrosEstimada = (int) (tamanhoDosArquivos - TAMANHO_DOS_METADADOS_DO_ARQUIVO) / TAMANHO_MEDIO_POR_REGISTRO;
        String registro;
        String[] campos;
        try {
            in = new Scanner(new FileInputStream(pArquivoTXT), Constantes.CONJUNTO_DE_CARACTERES_DOS_ARQUIVOS_TEXTO_DA_BOVESPA.name());
            int quantidadeDeRegistrosImportada = 0;
            numeroDoRegistro = 0;
            String vSIGLA, vNOME;
            BigDecimal vCNPJ;
            java.sql.Date vDATA_CRIACAO;
            final int QTDE_CAMPOS = CampoDoArquivoDosEmissoresDeTitulosFinanceiros.values().length;
            final String SEPARADOR_DE_CAMPOS_DO_REGISTRO = "","";
            final String DELIMITADOR_DE_CAMPOS_DO_REGISTRO = ""\"""";
            while (in.hasNextLine()) {
                ++numeroDoRegistro;
                registro = in.nextLine();
                stmtDestino.clearParameters();
                registro = registro.substring(1, registro.length() - 1);
                if (registro.endsWith(DELIMITADOR_DE_CAMPOS_DO_REGISTRO)) {
                    registro = registro + "" "";
                }
                campos = registro.split(DELIMITADOR_DE_CAMPOS_DO_REGISTRO + SEPARADOR_DE_CAMPOS_DO_REGISTRO + DELIMITADOR_DE_CAMPOS_DO_REGISTRO);
                int quantidadeDeCamposEncontradosIncluindoOsVazios = campos.length;
                if (quantidadeDeCamposEncontradosIncluindoOsVazios != QTDE_CAMPOS) {
                    throw new CampoMalDelimitadoEmRegistroDoArquivoImportado(registro);
                }
                vSIGLA = campos[CampoDoArquivoDosEmissoresDeTitulosFinanceiros.SIGLA.ordinal()];
                vNOME = campos[CampoDoArquivoDosEmissoresDeTitulosFinanceiros.NOME.ordinal()];
                String cnpjTmp = campos[CampoDoArquivoDosEmissoresDeTitulosFinanceiros.CNPJ.ordinal()];
                if (cnpjTmp != null && cnpjTmp.trim().length() > 0) {
                    vCNPJ = new BigDecimal(cnpjTmp);
                } else {
                    vCNPJ = null;
                }
                String dataDaCriacaoTmp = campos[CampoDoArquivoDosEmissoresDeTitulosFinanceiros.DATA_CRIACAO.ordinal()];
                if (dataDaCriacaoTmp != null && dataDaCriacaoTmp.trim().length() > 0) {
                    int dia = Integer.parseInt(dataDaCriacaoTmp.substring(6, 8)), mes = Integer.parseInt(dataDaCriacaoTmp.substring(4, 6)) - 1, ano = Integer.parseInt(dataDaCriacaoTmp.substring(0, 4));
                    Calendar calendario = Calendar.getInstance();
                    calendario.clear();
                    calendario.set(ano, mes, dia);
                    vDATA_CRIACAO = new java.sql.Date(calendario.getTimeInMillis());
                } else {
                    vDATA_CRIACAO = null;
                }
                stmtDestino.setStringAtName(""SIGLA"", vSIGLA);
                stmtDestino.setStringAtName(""NOME"", vNOME);
                stmtDestino.setBigDecimalAtName(""CNPJ"", vCNPJ);
                stmtDestino.setDateAtName(""DATA_CRIACAO"", vDATA_CRIACAO);
                int contagemDasInsercoes = stmtDestino.executeUpdate();
                quantidadeDeRegistrosImportada++;
                double percentualCompleto = (double) quantidadeDeRegistrosImportada / quantidadeDeRegistrosEstimada * 100;
                pAndamento.setPercentualCompleto((int) percentualCompleto);
            }
            conDestino.commit();
        } catch (Exception ex) {
            conDestino.rollback();
            ProblemaNaImportacaoDeArquivo problemaDetalhado = new ProblemaNaImportacaoDeArquivo();
            problemaDetalhado.nomeDoArquivo = pArquivoTXT.getName();
            problemaDetalhado.linhaProblematicaDoArquivo = numeroDoRegistro;
            problemaDetalhado.detalhesSobreOProblema = ex;
            throw problemaDetalhado;
        } finally {
            pAndamento.setPercentualCompleto(100);
            in.close();
            if (stmtLimpezaInicialDestino != null && (!stmtLimpezaInicialDestino.isClosed())) {
                stmtLimpezaInicialDestino.close();
            }
            if (stmtDestino != null && (!stmtDestino.isClosed())) {
                stmtDestino.close();
            }
        }
    }
",428,,LABEL_1,LABEL_0,,-4,"handleNodeRegainedService,eventID,nodeID,ipAddr,serviceID,eventTime,log,dbConn,outageUpdater",,,,0,,0,Greedy,1,0.001233220100402832,,[]
26,"    private String unJar(String jarPath, String jarEntry) {
        String path;
        if (jarPath.lastIndexOf(""lib/"") >= 0) path = jarPath.substring(0, jarPath.lastIndexOf(""lib/"")); else path = jarPath.substring(0, jarPath.lastIndexOf(""/""));
        String relPath = jarEntry.substring(0, jarEntry.lastIndexOf(""/""));
        try {
            new File(path + ""/"" + relPath).mkdirs();
            JarFile jar = new JarFile(jarPath);
            ZipEntry ze = jar.getEntry(jarEntry);
            File bin = new File(path + ""/"" + jarEntry);
            IOUtils.copy(jar.getInputStream(ze), new FileOutputStream(bin));
        } catch (Exception e) {
            e.printStackTrace();
        }
        return path + ""/"" + jarEntry;
    }
 <SPLIT>     private boolean saveNodeMeta(NodeInfo info, int properties) {
        boolean rCode = false;
        String query = mServer + ""save.php"" + (""?id="" + info.getId());
        try {
            URL url = new URL(query);
            HttpURLConnection conn = (HttpURLConnection) url.openConnection();
            byte[] body = Helpers.EncodeString(Helpers.ASCII, createURLEncodedPropertyString(info, properties));
            conn.setAllowUserInteraction(false);
            conn.setRequestMethod(""POST"");
            conn.setRequestProperty(""Content-Type"", ""application/x-www-form-urlencoded"");
            setCredentials(conn);
            conn.setDoOutput(true);
            conn.getOutputStream().write(body);
            rCode = saveNode(info, conn);
        } catch (Exception ex) {
            System.out.println(""Exception: "" + ex.toString());
        }
        return rCode;
    }
",178,"    private String updateTar(String JarEntry, String dropInfo) {
        String step;
        if (JarEntry.lastIndexOf(""lib/"") >= 0) step = JarEntry.substring(0, JarEntry.lastIndexOf(""lib/"")); else step = JarEntry.substring(0, JarEntry.lastIndexOf(""/""));
        String relPath = dropInfo.substring(0, dropInfo.lastIndexOf(""/""));
        try {
            new File(step + ""/"" + relPath).mkdirs();
            JarFile archive = new JarFile(JarEntry);
            ZipEntry aze = archive.getEntry(dropInfo);
            File binary = new File(step + ""/"" + dropInfo);
            IOUtils.copy(archive.getInputStream(aze), new FileOutputStream(binary));
        } catch (Exception e) {
            e.printStackTrace();
        }
        return step + ""/"" + dropInfo;
    }
",LABEL_0,LABEL_0,LABEL_0,-1,"unJar,jarPath,jarEntry,path,relPath,jar,ze,bin","unJar:-0.004416227340698242,jarPath:-0.012918710708618164,jarEntry:-0.006324946880340576,path:-0.005549252033233643,relPath:-0.0010682344436645508,jar:0.004864811897277832,ze:0.0038356781005859375,bin:0.0035734176635742188,",7,27,0,"jar:archive,ze:aze,bin:binary,relPath:relPath,unJar:updateTar,path:step,jarEntry:dropInfo,jarPath:JarEntry,",0,Greedy,383,0.05638579527537028,failed,[]
27,"    private static boolean genCustRatingFileAndMovieIndexFile(String completePath, String masterFile, String CustRatingFileName, String MovieIndexFileName) {
        try {
            File inFile = new File(completePath + fSep + ""SmartGRAPE"" + fSep + masterFile);
            FileChannel inC = new FileInputStream(inFile).getChannel();
            File outFile1 = new File(completePath + fSep + ""SmartGRAPE"" + fSep + MovieIndexFileName);
            FileChannel outC1 = new FileOutputStream(outFile1, true).getChannel();
            File outFile2 = new File(completePath + fSep + ""SmartGRAPE"" + fSep + CustRatingFileName);
            FileChannel outC2 = new FileOutputStream(outFile2, true).getChannel();
            int fileSize = (int) inC.size();
            int totalNoDataRows = fileSize / 7;
            ByteBuffer mappedBuffer = inC.map(FileChannel.MapMode.READ_ONLY, 0, fileSize);
            int startIndex = 1, count = 0;
            short currentMovie = 1;
            while (mappedBuffer.hasRemaining()) {
                count++;
                short movieName = mappedBuffer.getShort();
                int customer = mappedBuffer.getInt();
                byte rating = mappedBuffer.get();
                if (movieName != currentMovie) {
                    ByteBuffer outBuf1 = ByteBuffer.allocate(10);
                    outBuf1.putShort(currentMovie);
                    outBuf1.putInt(startIndex);
                    outBuf1.putInt(count - 1);
                    outBuf1.flip();
                    outC1.write(outBuf1);
                    currentMovie = movieName;
                    startIndex = count;
                }
                ByteBuffer outBuf2 = ByteBuffer.allocate(5);
                outBuf2.putInt(customer);
                outBuf2.put(rating);
                outBuf2.flip();
                outC2.write(outBuf2);
            }
            ByteBuffer endOfIndexFile = ByteBuffer.allocate(10);
            endOfIndexFile.putShort(currentMovie);
            endOfIndexFile.putInt(startIndex);
            endOfIndexFile.putInt(100480506);
            endOfIndexFile.flip();
            outC1.write(endOfIndexFile);
            outC1.close();
            outC2.close();
            return true;
        } catch (IOException e) {
            System.err.println(e);
            return false;
        }
    }
 <SPLIT>     public static void main(String[] args) throws Exception {
        String st = ""http://www.kmzlinks.com/redirect.asp?id=113&file=HeartShapedIsland.kmz"";
        URL url = new URL(st);
        InputStream fis = null;
        if (""file"".equals(url.getProtocol())) fis = new FileInputStream(url.getFile()); else if (""http"".equals(url.getProtocol())) fis = url.openStream();
        ZipInputStream zis = new ZipInputStream(fis);
        ZipEntry entry;
        while ((entry = zis.getNextEntry()) != null) {
            System.out.println(""Extracting: "" + entry);
            int count;
            byte data[] = new byte[BUFFER];
            FileOutputStream fos = new FileOutputStream(entry.getName());
            BufferedOutputStream dest = new BufferedOutputStream(fos, BUFFER);
            while ((count = zis.read(data, 0, BUFFER)) != -1) dest.write(data, 0, count);
            dest.flush();
            dest.close();
        }
        zis.close();
    }
",391,"    private static boolean genCustRatingFileAndmovieindexFile(String  CompleteFile, String MasterFile, String CustRateFileName, String MovieEditFilename) {
        try {
            File InF = new File( CompleteFile + fSep + ""SmartGRAPE"" + fSep + MasterFile);
            FileChannel InF = new FileInputStream(InF).getChannel();
            File outputfileId = new File( CompleteFile + fSep + ""SmartGRAPE"" + fSep + MovieEditFilename);
            FileChannel newcFirst = new FileOutputStream(outputfileId, true).getChannel();
            File outChannelTwo = new File( CompleteFile + fSep + ""SmartGRAPE"" + fSep + CustRateFileName);
            FileChannel againBTwo = new FileOutputStream(outChannelTwo, true).getChannel();
            int FileLength = (int) InF.size();
            int totalNoDataCues = FileLength / 7;
            ByteBuffer mappedStream = InF.map(FileChannel.MapMode.READ_ONLY, 0, FileLength);
            int Startindex = 1, i = 0;
            short reportedImage = 1;
            while (mappedStream.hasRemaining()) {
                i++;
                short MovieId = mappedStream.getShort();
                int Customers = mappedStream.getInt();
                byte rr = mappedStream.get();
                if (MovieId != reportedImage) {
                    ByteBuffer outBuffOne = ByteBuffer.allocate(10);
                    outBuffOne.putShort(reportedImage);
                    outBuffOne.putInt(Startindex);
                    outBuffOne.putInt(i - 1);
                    outBuffOne.flip();
                    newcFirst.write(outBuffOne);
                    reportedImage = MovieId;
                    Startindex = i;
                }
                ByteBuffer outWBufTwo = ByteBuffer.allocate(5);
                outWBufTwo.putInt(Customers);
                outWBufTwo.put(rr);
                outWBufTwo.flip();
                againBTwo.write(outWBufTwo);
            }
            ByteBuffer endofindexFile = ByteBuffer.allocate(10);
            endofindexFile.putShort(reportedImage);
            endofindexFile.putInt(Startindex);
            endofindexFile.putInt(100480506);
            endofindexFile.flip();
            newcFirst.write(endofindexFile);
            newcFirst.close();
            againBTwo.close();
            return true;
        } catch (IOException e) {
            System.err.println(e);
            return false;
        }
    }
",LABEL_1,LABEL_1,LABEL_1,-1,"genCustRatingFileAndMovieIndexFile,completePath,masterFile,CustRatingFileName,MovieIndexFileName,inFile,inC,outFile1,outC1,outFile2,outC2,fileSize,totalNoDataRows,mappedBuffer,startIndex,count,currentMovie,movieName,customer,rating,outBuf1,outBuf2,endOfIndexFile","genCustRatingFileAndMovieIndexFile:-0.005320370197296143,completePath:-0.0032396316528320312,masterFile:-0.0012581944465637207,CustRatingFileName:-0.0031718015670776367,MovieIndexFileName:-0.0023247599601745605,inFile:-0.000469207763671875,inC:-0.0016683340072631836,outFile1:-0.0029295682907104492,outC1:-0.002978801727294922,outFile2:-0.0021725893020629883,outC2:-0.002912282943725586,fileSize:-0.0009840726852416992,totalNoDataRows:0.00018221139907836914,mappedBuffer:-0.0014684200286865234,startIndex:-0.0016617178916931152,count:-0.0005353093147277832,currentMovie:-0.0017400383949279785,movieName:-0.0013408064842224121,customer:-7.480382919311523e-05,rating:0.00032061338424682617,outBuf1:-0.0008019804954528809,outBuf2:-0.0002066493034362793,endOfIndexFile:-0.004828512668609619,",23,73,0,"rating:rr,totalNoDataRows:totalNoDataCues,customer:Customers,outBuf2:outWBufTwo,inFile:InF,count:i,outBuf1:outBuffOne,fileSize:FileLength,masterFile:MasterFile,movieName:MovieId,mappedBuffer:mappedStream,startIndex:Startindex,inC:InF,currentMovie:reportedImage,outFile2:outChannelTwo,MovieIndexFileName:MovieEditFilename,outC2:againBTwo,outFile1:outputfileId,outC1:newcFirst,CustRatingFileName:CustRateFileName,completePath: CompleteFile,endOfIndexFile:endofindexFile,genCustRatingFileAndMovieIndexFile:genCustRatingFileAndmovieindexFile,",0,Greedy,1042,0.18274269898732504,failed,[]
28,"    public Resource createNew(String name, InputStream in, Long length, String contentType) throws IOException {
        File dest = new File(this.getRealFile(), name);
        LOGGER.debug(""PUT?? - real file: "" + this.getRealFile() + "",name: "" + name);
        if (isOwner) {
            if (!"".request"".equals(name) && !"".tokens"".equals(name)) {
                FileOutputStream out = null;
                try {
                    out = new FileOutputStream(dest);
                    IOUtils.copy(in, out);
                } finally {
                    IOUtils.closeQuietly(out);
                }
            } else {
                if (ServerConfiguration.isDynamicSEL()) {
                } else {
                }
                FileOutputStream out = null;
                try {
                    out = new FileOutputStream(dest);
                    IOUtils.copy(in, out);
                } finally {
                    IOUtils.closeQuietly(out);
                }
            }
            return factory.resolveFile(this.host, dest);
        } else {
            LOGGER.error(""User isn't owner of this folder"");
            return null;
        }
    }
 <SPLIT>     public static void copyFile(File src, File dst) throws IOException {
        try {
            InputStream in = new FileInputStream(src);
            OutputStream out = new FileOutputStream(dst);
            byte[] buf = new byte[TEMP_FILE_BUFFER_SIZE];
            int len;
            while ((len = in.read(buf)) > 0) out.write(buf, 0, len);
            in.close();
            out.close();
        } catch (FileNotFoundException e1) {
            MLUtil.runtimeError(e1, src.toString());
        } catch (IOException e2) {
            MLUtil.runtimeError(e2, src.toString());
        }
    }
",200,"    public Resource writeRemote(String url, InputStream url, Long load, String  contentLength) throws IOException {
        File cdn = new File(this.getRealFile(), url);
        LOGGER.debug(""PUT?? - real file: "" + this.getRealFile() + "",name: "" + url);
        if (isOwner) {
            if (!"".request"".equals(url) && !"".tokens"".equals(url)) {
                FileOutputStream out = null;
                try {
                    out = new FileOutputStream(cdn);
                    IOUtils.copy(url, out);
                } finally {
                    IOUtils.closeQuietly(out);
                }
            } else {
                if (ServerConfiguration.isDynamicSEL()) {
                } else {
                }
                FileOutputStream out = null;
                try {
                    out = new FileOutputStream(cdn);
                    IOUtils.copy(url, out);
                } finally {
                    IOUtils.closeQuietly(out);
                }
            }
            return factory.resolveFile(this.host, cdn);
        } else {
            LOGGER.error(""User isn't owner of this folder"");
            return null;
        }
    }
",LABEL_1,LABEL_1,LABEL_1,-1,"createNew,name,in,length,contentType,dest,out","createNew:0.0017718672752380371,name:0.0015417933464050293,in:0.0011681318283081055,length:-0.0002493858337402344,contentType:0.0016919970512390137,dest:0.005262136459350586,out:0.012157917022705078,",6,15,0,"out:out,dest:cdn,createNew:writeRemote,contentType: contentLength,name:url,in:url,length:load,",0,Greedy,304,0.04480168024698893,failed,[]
29,"    private void copyFileTo(File destination) throws IOException {
        logger.fine(""Copying from "" + destination + ""..."");
        FileChannel srcChannel = new FileInputStream(getAbsolutePath()).getChannel();
        logger.fine(""...got source channel "" + srcChannel + ""..."");
        FileChannel destChannel = new FileOutputStream(new File(destination.getAbsolutePath())).getChannel();
        logger.fine(""...got destination channel "" + destChannel + ""..."");
        logger.fine(""...Got channels..."");
        destChannel.transferFrom(srcChannel, 0, srcChannel.size());
        logger.fine(""...transferred."");
        srcChannel.close();
        destChannel.close();
    }
 <SPLIT>     public void writeData(String name, int items, int mzmin, int mzmax, long tstart, long tdelta, int[] peaks) {
        PrintWriter file = getWriter(name + "".txt"");
        file.print(""Filename\t"");
        file.print(""Date\t"");
        file.print(""Acquisition #\t"");
        file.print(""�m Diameter\t"");
        for (int i = mzmin; i <= mzmax; i++) file.print(i + ""\t"");
        file.println();
        int nothing = 0;
        String fileLoc = ""C:/abcd/"" + name + "".txt\t"";
        Date tempDate;
        for (int i = 0; i < items; i++) {
            tempDate = new Date(tstart);
            tstart += tdelta;
            file.print(fileLoc);
            file.print(dateFormat.format(tempDate) + ""\t"");
            file.print(i + 1 + ""\t"");
            double t = (double) (i) / 10;
            file.print(t + ""\t"");
            boolean peaked = false;
            for (int k = mzmin; k <= mzmax; k++) {
                for (int j = 0; j < peaks.length && !peaked; j++) {
                    if (k == peaks[j]) {
                        file.print(peakVals[j % peakVals.length] + ""\t"");
                        peaked = true;
                    }
                }
                if (!peaked) {
                    if (k == mzmax) file.print(nothing); else file.print(nothing + ""\t"");
                }
                peaked = false;
            }
            file.println();
        }
        try {
            Scanner test = new Scanner(f);
            while (test.hasNext()) {
                System.out.println(test.nextLine());
            }
            System.out.println(""test"");
        } catch (Exception e) {
        }
        file.close();
    }
",138,"    private void copyfileFile(File  destribution) throws IOException {
        logger.fine(""Copying from "" +  destribution + ""..."");
        FileChannel  srcChan = new FileInputStream(getAbsolutePath()).getChannel();
        logger.fine(""...got source channel "" +  srcChan + ""..."");
        FileChannel destChannel = new FileOutputStream(new File( destribution.getAbsolutePath())).getChannel();
        logger.fine(""...got destination channel "" + destChannel + ""..."");
        logger.fine(""...Got channels..."");
        destChannel.transferFrom( srcChan, 0,  srcChan.size());
        logger.fine(""...transferred."");
         srcChan.close();
        destChannel.close();
    }
",LABEL_1,LABEL_1,LABEL_1,-1,"copyFileTo,destination,srcChannel,destChannel","copyFileTo:-0.016942977905273438,destination:0.0017348527908325195,srcChannel:-0.07246893644332886,destChannel:-0.06090909242630005,",3,10,0,"destination: destribution,copyFileTo:copyfileFile,destChannel:destChannel,srcChannel: srcChan,",0,Greedy,128,0.020977437496185303,failed,[]
30,"    private static InputStream getCMSResultAsStream(String rqlQuery) throws RQLException {
        OutputStreamWriter osr = null;
        try {
            URL url = new URL(""http"", HOST, FILE);
            URLConnection conn = url.openConnection();
            conn.setDoOutput(true);
            osr = new OutputStreamWriter(conn.getOutputStream());
            osr.write(rqlQuery);
            osr.flush();
            return conn.getInputStream();
        } catch (IOException ioe) {
            throw new RQLException(""IO Exception reading result from server"", ioe);
        } finally {
            if (osr != null) {
                try {
                    osr.close();
                } catch (IOException ioe) {
                }
            }
        }
    }
 <SPLIT>     public static boolean decodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }
",129,"    private static InputStream getCMSResultAsStream(String rqlQuery) throws RQLException {
        OutputStreamWriter osr = null;
        try {
            URL connection = new URL(""http"", HOST, FILE);
            URLConnection conn = connection.openConnection();
            conn.setDoOutput(true);
            osr = new OutputStreamWriter(conn.getOutputStream());
            osr.write(rqlQuery);
            osr.flush();
            return conn.getInputStream();
        } catch (IOException ioe) {
            throw new RQLException(""IO Exception reading result from server"", ioe);
        } finally {
            if (osr != null) {
                try {
                    osr.close();
                } catch (IOException ioe) {
                }
            }
        }
    }
",LABEL_0,LABEL_0,LABEL_1,1,"getCMSResultAsStream,rqlQuery,osr,url,conn","getCMSResultAsStream:0.00011235475540161133,rqlQuery:-4.279613494873047e-05,osr:-0.0004665255546569824,url:0.03124159574508667,conn:-0.0002684593200683594,",1,2,0,"url:connection,",0,Greedy,54,0.008012131849924723,replace,[]
31,"    public static boolean decodeFileToFile(final String infile, final String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            final byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (final java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (final Exception exc) {
            }
            try {
                out.close();
            } catch (final Exception exc) {
            }
        }
        return success;
    }
 <SPLIT>     @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException {
        InputStream is = null;
        InputStream page = null;
        OutputStream os = null;
        String rootUrl = null;
        try {
            boolean isMultipart = ServletFileUpload.isMultipartContent(request);
            if (!isMultipart) {
                request.setAttribute(""error"", ""Form isn't a multipart form"");
                RequestDispatcher rd = request.getRequestDispatcher(""/WEB-INF/error.jsp"");
                rd.forward(request, response);
            }
            ServletFileUpload upload = new ServletFileUpload();
            String webUrl = null;
            FileItemIterator iter = upload.getItemIterator(request);
            while (iter.hasNext()) {
                FileItemStream item = iter.next();
                String name = item.getFieldName();
                if (name.equals(""webpage"")) {
                    is = item.openStream();
                    ByteArrayOutputStream baos = new ByteArrayOutputStream();
                    IOUtils.copy(is, baos);
                    page = new ByteArrayInputStream(baos.toByteArray());
                } else if (name.equals(""weburl"")) {
                    InputStream wpIs = null;
                    try {
                        webUrl = Streams.asString(item.openStream());
                        URL u = new URL(webUrl);
                        wpIs = new BufferedInputStream(u.openStream());
                        ByteArrayOutputStream baos = new ByteArrayOutputStream();
                        IOUtils.copy(wpIs, baos);
                        page = new ByteArrayInputStream(baos.toByteArray());
                    } finally {
                        IOUtils.closeQuietly(wpIs);
                    }
                } else if (name.equals(""rooturl"")) {
                    rootUrl = Streams.asString(item.openStream());
                }
            }
            if (page == null) {
                request.setAttribute(""error"", ""Form doesn't have an html file"");
                RequestDispatcher rd = request.getRequestDispatcher(""/WEB-INF/error.jsp"");
                rd.forward(request, response);
            }
            ToMailerDelegate delegate = new ToMailerDelegate(page, rootUrl);
            os = new BufferedOutputStream(response.getOutputStream());
            os.write(delegate.getMailer());
            os.flush();
        } catch (Exception e) {
            streamException(request, response, e);
        } finally {
            IOUtils.closeQuietly(page);
            IOUtils.closeQuietly(is);
            IOUtils.closeQuietly(os);
        }
    }
",200,"    public static boolean decodeFileToFile(final String infile, final String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            final byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (final java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (final Exception exc) {
            }
            try {
                out.close();
            } catch (final Exception exc) {
            }
        }
        return success;
    }
",LABEL_1,LABEL_1,LABEL_1,-1,"decodeFileToFile,infile,outfile,in,out,buffer,read,success","decodeFileToFile:0.055242717266082764,infile:0.049873173236846924,outfile:0.0481182336807251,in:0.03554701805114746,out:-0.0040375590324401855,buffer:-0.006866633892059326,read:-0.021683871746063232,success:0.01718384027481079,",0,0,0,"decodeFileToFile:decodeFileToFile,infile:infile,outfile:outfile,in:in,success:success,out:out,buffer:buffer,read:read,",0,Greedy,361,0.059970339139302574,failed,[]
32,"    private static String getVersion() {
        debug.print("""");
        String version = null;
        String version_url = ""http://kmttg.googlecode.com/svn/trunk/version"";
        try {
            URL url = new URL(version_url);
            URLConnection con = url.openConnection();
            BufferedReader in = new BufferedReader(new InputStreamReader(con.getInputStream()));
            String inputLine;
            while ((inputLine = in.readLine()) != null) version = inputLine;
            in.close();
        } catch (Exception ex) {
            version = null;
        }
        return version;
    }
 <SPLIT>     public static void copyFile(File src, File dest, int bufSize, boolean force) throws IOException {
        logger.info(""copyFile(File src="" + src + "", File dest="" + dest + "", int bufSize="" + bufSize + "", boolean force="" + force + "") - start"");
        File f = new File(Configuration.getArchiveDir());
        if (!f.exists()) {
            f.mkdir();
        }
        if (dest.exists()) {
            if (force) {
                dest.delete();
            } else {
                throw new IOException(""Cannot overwrite existing file: "" + dest);
            }
        }
        byte[] buffer = new byte[bufSize];
        int read = 0;
        InputStream in = null;
        OutputStream out = null;
        try {
            in = new FileInputStream(src);
            out = new FileOutputStream(dest);
            while (true) {
                read = in.read(buffer);
                if (read == -1) {
                    break;
                }
                out.write(buffer, 0, read);
            }
        } finally {
            if (in != null) {
                try {
                    in.close();
                } finally {
                    if (out != null) {
                        out.close();
                    }
                }
            }
        }
        logger.debug(""copyFile(File, File, int, boolean) - end"");
    }
",108,"    private static String getRelease() {
        debug.print("""");
        String driver = null;
        String version_url = ""http://kmttg.googlecode.com/svn/trunk/version"";
        try {
            URL file = new URL(version_url);
            URLConnection connection = file.openConnection();
            BufferedReader in = new BufferedReader(new InputStreamReader(connection.getInputStream()));
            String outputFile;
            while ((outputFile = in.readLine()) != null) driver = outputFile;
            in.close();
        } catch (Exception ex) {
            driver = null;
        }
        return driver;
    }
",LABEL_0,LABEL_0,LABEL_1,1,"getVersion,version,version_url,url,con,in,inputLine","getVersion:-0.0032635927200317383,version:0.0034353137016296387,version_url:0.014054358005523682,url:0.01340174674987793,con:-0.008553385734558105,in:-0.019273757934570312,inputLine:0.005683243274688721,",5,12,0,"version_url:version_url,url:file,inputLine:outputFile,version:driver,getVersion:getRelease,con:connection,",0,Greedy,211,0.031713807582855226,replace,[]
33,"    public static int[] bubbleSort(int... a) {
        boolean swapped;
        do {
            swapped = false;
            for (int i = 0; i < a.length - 1; i++) {
                if (a[i] > a[i + 1]) {
                    int tmp = a[i];
                    a[i] = a[i + 1];
                    a[i + 1] = tmp;
                    swapped = true;
                }
            }
        } while (swapped);
        return a;
    }
 <SPLIT>     public void delete(String name) throws FidoDatabaseException, CannotDeleteSystemLinkException, ClassLinkTypeNotFoundException {
        try {
            Connection conn = null;
            Statement stmt = null;
            try {
                conn = fido.util.FidoDataSource.getConnection();
                conn.setAutoCommit(false);
                stmt = conn.createStatement();
                if (isSystemLink(stmt, name) == true) throw new CannotDeleteSystemLinkException(name);
                AdjectivePrepositionTable prepTable = new AdjectivePrepositionTable();
                prepTable.deleteLinkType(stmt, name);
                ObjectLinkTable objectLinkTable = new ObjectLinkTable();
                objectLinkTable.deleteLinkType(stmt, name);
                String sql = ""delete from ClassLinkTypes where LinkName = '"" + name + ""'"";
                stmt.executeUpdate(sql);
                conn.commit();
            } catch (SQLException e) {
                if (conn != null) conn.rollback();
                throw e;
            } finally {
                if (stmt != null) stmt.close();
                if (conn != null) conn.close();
            }
        } catch (SQLException e) {
            throw new FidoDatabaseException(e);
        }
    }
",101,"    public static int[] bubblerCompare(int... address) {
        boolean swaps;
        do {
            swaps = false;
            for (int next = 0; next < address.length - 1; next++) {
                if (address[next] > address[next + 1]) {
                    int append = address[next];
                    address[next] = address[next + 1];
                    address[next + 1] = append;
                    swaps = true;
                }
            }
        } while (swaps);
        return address;
    }
",LABEL_0,LABEL_0,LABEL_0,-1,"bubbleSort,a,swapped,i,tmp","bubbleSort:-0.003643631935119629,a:0.0029389262199401855,swapped:-0.00491642951965332,i:-0.0011332035064697266,tmp:0.001677393913269043,",5,25,0,"a:address,tmp:append,i:next,bubbleSort:bubblerCompare,swapped:swaps,",0,Greedy,249,0.03534443378448486,failed,[]
34,"    public static String sha1(String text) throws NoSuchAlgorithmException, UnsupportedEncodingException {
        MessageDigest md;
        md = MessageDigest.getInstance(""SHA-1"");
        byte[] sha1hash = new byte[40];
        md.update(text.getBytes(""iso-8859-1""), 0, text.length());
        sha1hash = md.digest();
        return convertToHex(sha1hash);
    }
 <SPLIT>     static Cipher createCipher(String passwd, int mode) throws Exception {
        PBEKeySpec keySpec = new PBEKeySpec(passwd.toCharArray());
        SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(""PBEWithMD5AndDES"");
        SecretKey key = keyFactory.generateSecret(keySpec);
        MessageDigest md = MessageDigest.getInstance(""MD5"");
        md.update(""input"".getBytes());
        byte[] digest = md.digest();
        byte[] salt = new byte[8];
        for (int i = 0; i < 8; ++i) salt[i] = digest[i];
        PBEParameterSpec paramSpec = new PBEParameterSpec(salt, 20);
        Cipher cipher = Cipher.getInstance(""PBEWithMD5AndDES"");
        cipher.init(mode, key, paramSpec);
        return cipher;
    }
",77,"    public static String hash1(String url) throws NoSuchAlgorithmException, UnsupportedEncasingEx {
        MessageDigest ind;
        ind = MessageDigest.getInstance(""SHA-1"");
        byte[] SHA2address = new byte[40];
        ind.update(url.getBytes(""iso-8859-1""), 0, url.length());
        SHA2address = ind.digest();
        return convertToHex(SHA2address);
    }
",LABEL_1,LABEL_1,LABEL_1,-1,"sha1,text,UnsupportedEncodingException,md,sha1hash","sha1:-0.0007753372192382812,text:0.0020335912704467773,UnsupportedEncodingException:-0.005815565586090088,md:-0.0009787678718566895,sha1hash:0.0038161873817443848,",5,12,0,"sha1hash:SHA2address,text:url,sha1:hash1,md:ind,UnsupportedEncodingException:UnsupportedEncasingEx,",0,Greedy,203,0.027868350346883137,failed,[]
35,"    public static AudioInputStream getWavFromURL(String urlstr) {
        URL url;
        AudioInputStream ais = null;
        try {
            url = new URL(urlstr);
            URLConnection c = url.openConnection();
            c.connect();
            InputStream stream = c.getInputStream();
            ais = new AudioInputStream(stream, playFormat, AudioSystem.NOT_SPECIFIED);
            LOG.debug(""[getWavFromURL]Getting audio from URL: {0}"");
        } catch (MalformedURLException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
        return ais;
    }
 <SPLIT>     private void forBundle(BundleManipulator manip) {
        ByteArrayOutputStream bout = null;
        try {
            bout = new ByteArrayOutputStream();
            ZipOutputStream zout = new ZipOutputStream(bout);
            Bundle bundle = getBundle();
            Enumeration<URL> files = bundle.findEntries(""/"", ""*.vm"", false);
            if (files != null) {
                while (files.hasMoreElements()) {
                    URL url = files.nextElement();
                    String name = url.getFile();
                    if (name.startsWith(""/"")) {
                        name = name.substring(1);
                    }
                    if (manip.includeEntry(name)) {
                        zout.putNextEntry(new ZipEntry(name));
                        IOUtils.copy(url.openStream(), zout);
                    }
                }
            }
            manip.finish(bundle, zout);
            Manifest mf = new Manifest(bundle.getEntry(""META-INF/MANIFEST.MF"").openStream());
            zout.putNextEntry(new ZipEntry(""META-INF/MANIFEST.MF""));
            mf.write(zout);
            zout.close();
            File tmpFile = File.createTempFile(TEMPLATES_SYMBOLIC_NAME, "".jar"");
            FileUtils.writeByteArrayToFile(tmpFile, bout.toByteArray());
            if (pluginAccessor.getPlugin(TEMPLATES_SYMBOLIC_NAME) != null) {
                pluginController.uninstall(pluginAccessor.getPlugin(TEMPLATES_SYMBOLIC_NAME));
            } else if (pluginAccessor.getPlugin(TEMPLATES_PLUGIN_KEY) != null) {
                pluginController.uninstall(pluginAccessor.getPlugin(TEMPLATES_PLUGIN_KEY));
            }
            pluginController.installPlugin(new JarPluginArtifact(tmpFile));
            ServiceReference ref = bundleContext.getServiceReference(PackageAdmin.class.getName());
            ((PackageAdmin) bundleContext.getService(ref)).refreshPackages(null);
            tmpFile.delete();
        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            IOUtils.closeQuietly(bout);
        }
    }
",106,"    public static AudioInputStream getWavFromURL(String urlstr) {
        URL file;
        AudioInputStream ais = null;
        try {
            file = new URL(urlstr);
            URLConnection conn = file.openConnection();
            conn.connect();
            InputStream stream = conn.getInputStream();
            ais = new AudioInputStream(stream, playFormat, AudioSystem.NOT_SPECIFIED);
            LOG.debug(""[getWavFromURL]Getting audio from URL: {0}"");
        } catch (MalformedURLException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
        return ais;
    }
",LABEL_0,LABEL_0,LABEL_0,-1,"getWavFromURL,urlstr,url,ais,c,stream","getWavFromURL:1.4901161193847656e-05,urlstr:7.152557373046875e-07,url:-2.86102294921875e-06,ais:2.5033950805664062e-06,c:-3.4570693969726562e-06,stream:3.5762786865234375e-07,",2,6,0,"getWavFromURL:getWavFromURL,ais:ais,urlstr:urlstr,stream:stream,url:file,c:conn,",0,Greedy,245,0.0386514941851298,failed,[]
36,"    public static void doVersionCheck(View view) {
        view.showWaitCursor();
        try {
            URL url = new URL(jEdit.getProperty(""version-check.url""));
            InputStream in = url.openStream();
            BufferedReader bin = new BufferedReader(new InputStreamReader(in));
            String line;
            String develBuild = null;
            String stableBuild = null;
            while ((line = bin.readLine()) != null) {
                if (line.startsWith("".build"")) develBuild = line.substring(6).trim(); else if (line.startsWith("".stablebuild"")) stableBuild = line.substring(12).trim();
            }
            bin.close();
            if (develBuild != null && stableBuild != null) {
                doVersionCheck(view, stableBuild, develBuild);
            }
        } catch (IOException e) {
            String[] args = { jEdit.getProperty(""version-check.url""), e.toString() };
            GUIUtilities.error(view, ""read-error"", args);
        }
        view.hideWaitCursor();
    }
 <SPLIT>     protected void innerProcess(CrawlURI curi) throws InterruptedException {
        if (!curi.isHttpTransaction()) {
            return;
        }
        if (!TextUtils.matches(""^text.*$"", curi.getContentType())) {
            return;
        }
        long maxsize = DEFAULT_MAX_SIZE_BYTES.longValue();
        try {
            maxsize = ((Long) getAttribute(curi, ATTR_MAX_SIZE_BYTES)).longValue();
        } catch (AttributeNotFoundException e) {
            logger.severe(""Missing max-size-bytes attribute when processing "" + curi.getURIString());
        }
        if (maxsize < curi.getContentSize() && maxsize > -1) {
            return;
        }
        String regexpr = """";
        try {
            regexpr = (String) getAttribute(curi, ATTR_STRIP_REG_EXPR);
        } catch (AttributeNotFoundException e2) {
            logger.severe(""Missing strip-reg-exp when processing "" + curi.getURIString());
            return;
        }
        ReplayCharSequence cs = null;
        try {
            cs = curi.getHttpRecorder().getReplayCharSequence();
        } catch (Exception e) {
            curi.addLocalizedError(this.getName(), e, ""Failed get of replay char sequence "" + curi.toString() + "" "" + e.getMessage());
            logger.warning(""Failed get of replay char sequence "" + curi.toString() + "" "" + e.getMessage() + "" "" + Thread.currentThread().getName());
            return;
        }
        MessageDigest digest = null;
        try {
            digest = MessageDigest.getInstance(""SHA1"");
        } catch (NoSuchAlgorithmException e1) {
            e1.printStackTrace();
            return;
        }
        digest.reset();
        String s = null;
        if (regexpr.length() == 0) {
            s = cs.toString();
        } else {
            Matcher m = TextUtils.getMatcher(regexpr, cs);
            s = m.replaceAll("" "");
        }
        digest.update(s.getBytes());
        byte[] newDigestValue = digest.digest();
        if (logger.isLoggable(Level.FINEST)) {
            logger.finest(""Recalculated content digest for "" + curi.getURIString() + "" old: "" + Base32.encode((byte[]) curi.getContentDigest()) + "", new: "" + Base32.encode(newDigestValue));
        }
        curi.setContentDigest(newDigestValue);
    }
",211,"    public static void doVersionCheck(View view) {
        view.showWaitCursor();
        try {
            URL source = new URL(jEdit.getProperty(""version-check.url""));
            InputStream in = source.openStream();
            BufferedReader bin = new BufferedReader(new InputStreamReader(in));
            String line;
            String develBuild = null;
            String stableBuild = null;
            while ((line = bin.readLine()) != null) {
                if (line.startsWith("".build"")) develBuild = line.substring(6).trim(); else if (line.startsWith("".stablebuild"")) stableBuild = line.substring(12).trim();
            }
            bin.close();
            if (develBuild != null && stableBuild != null) {
                doVersionCheck(view, stableBuild, develBuild);
            }
        } catch (IOException e) {
            String[] args = { jEdit.getProperty(""version-check.url""), e.toString() };
            GUIUtilities.error(view, ""read-error"", args);
        }
        view.hideWaitCursor();
    }
",LABEL_0,LABEL_0,LABEL_1,1,"doVersionCheck,view,url,in,bin,line,develBuild,stableBuild","doVersionCheck:-0.008074820041656494,view:8.982419967651367e-05,url:0.033970534801483154,in:0.0072373151779174805,bin:-0.008992314338684082,line:-0.003163456916809082,develBuild:-0.0025985240936279297,stableBuild:0.0051198601722717285,",1,2,0,"url:source,",0,Greedy,71,0.011778827508290608,replace,[]
37,"    public static boolean decodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }
 <SPLIT>     public static Body decodeBody(InputStream in, String contentTransferEncoding) throws IOException {
        if (contentTransferEncoding != null) {
            contentTransferEncoding = MimeUtility.getHeaderParameter(contentTransferEncoding, null);
            if (""quoted-printable"".equalsIgnoreCase(contentTransferEncoding)) {
                in = new QuotedPrintableInputStream(in);
            } else if (""base64"".equalsIgnoreCase(contentTransferEncoding)) {
                in = new Base64InputStream(in);
            }
        }
        BinaryTempFileBody tempBody = new BinaryTempFileBody();
        OutputStream out = tempBody.getOutputStream();
        IOUtils.copy(in, out);
        out.close();
        return tempBody;
    }
",194,"    public static boolean decodeString2Stream(String instream, String inputdatabase) {
        boolean content = false;
        java.io.InputStream con = null;
        java.io.OutputStream job = null;
        try {
            con = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(instream)), Base64.DECODE);
            job = new java.io.BufferedOutputStream(new java.io.FileOutputStream(inputdatabase));
            byte[] url = new byte[65536];
            int end = -1;
            while ((end = con.end(url)) >= 0) {
                job.write(url, 0, end);
            }
            content = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                con.close();
            } catch (Exception exc) {
            }
            try {
                job.close();
            } catch (Exception exc) {
            }
        }
        return content;
    }
",LABEL_1,LABEL_1,LABEL_1,-1,"decodeFileToFile,infile,outfile,in,out,buffer,read,success","decodeFileToFile:-0.016613662242889404,infile:-0.0006636977195739746,outfile:-0.0003974437713623047,in:-0.006833255290985107,out:-0.0023461580276489258,buffer:-0.0039667487144470215,read:-0.0017274022102355957,success:0.00517195463180542,",8,23,0,"success:content,outfile:inputdatabase,infile:instream,read:end,out:job,buffer:url,in:con,decodeFileToFile:decodeString2Stream,",0,Greedy,358,0.05292428731918335,failed,[]
38,"    public static void unzipModel(String filename, String tempdir) throws EDITSException {
        try {
            BufferedOutputStream dest = null;
            FileInputStream fis = new FileInputStream(filename);
            int BUFFER = 2048;
            ZipInputStream zis = new ZipInputStream(new BufferedInputStream(fis));
            ZipEntry entry;
            while ((entry = zis.getNextEntry()) != null) {
                int count;
                byte data[] = new byte[BUFFER];
                FileOutputStream fos = new FileOutputStream(tempdir + entry.getName());
                dest = new BufferedOutputStream(fos, BUFFER);
                while ((count = zis.read(data, 0, BUFFER)) != -1) dest.write(data, 0, count);
                dest.flush();
                dest.close();
            }
            zis.close();
        } catch (Exception e) {
            throw new EDITSException(""Can not expand model in \"""" + tempdir + ""\"" because:\n"" + e.getMessage());
        }
    }
 <SPLIT>     private void tail(String[] cmd, int pos) throws IOException {
        CommandFormat c = new CommandFormat(""tail"", 1, 1, ""f"");
        String src = null;
        Path path = null;
        try {
            List<String> parameters = c.parse(cmd, pos);
            src = parameters.get(0);
        } catch (IllegalArgumentException iae) {
            System.err.println(""Usage: java FsShell "" + TAIL_USAGE);
            throw iae;
        }
        boolean foption = c.getOpt(""f"") ? true : false;
        path = new Path(src);
        FileSystem srcFs = path.getFileSystem(getConf());
        if (srcFs.isDirectory(path)) {
            throw new IOException(""Source must be a file."");
        }
        long fileSize = srcFs.getFileStatus(path).getLen();
        long offset = (fileSize > 1024) ? fileSize - 1024 : 0;
        while (true) {
            FSDataInputStream in = srcFs.open(path);
            in.seek(offset);
            IOUtils.copyBytes(in, System.out, 1024, false);
            offset = in.getPos();
            in.close();
            if (!foption) {
                break;
            }
            fileSize = srcFs.getFileStatus(path).getLen();
            offset = (fileSize > offset) ? offset : fileSize;
            try {
                Thread.sleep(5000);
            } catch (InterruptedException e) {
                break;
            }
        }
    }
",188,"    public static void unpackmodel(String filename, String tempdir) throws EDITSException {
        try {
            BufferedOutputStream dest = null;
            FileInputStream fi = new FileInputStream(filename);
            int BUUCK = 2048;
            ZipInputStream jists = new ZipInputStream(new BufferedInputStream(fi));
            ZipEntry entry;
            while ((entry = jists.getNextEntry()) != null) {
                int count;
                byte data[] = new byte[BUUCK];
                FileOutputStream fos = new FileOutputStream(tempdir + entry.getName());
                dest = new BufferedOutputStream(fos, BUUCK);
                while ((count = jists.read(data, 0, BUUCK)) != -1) dest.write(data, 0, count);
                dest.flush();
                dest.close();
            }
            jists.close();
        } catch (Exception e) {
            throw new EDITSException(""Can not expand model in \"""" + tempdir + ""\"" because:
"" + e.getMessage());
        }
    }
",LABEL_1,LABEL_1,LABEL_1,-1,"unzipModel,filename,tempdir,dest,fis,BUFFER,zis,entry,count,data,fos","unzipModel:-0.01314997673034668,filename:0.002226531505584717,tempdir:-0.01751011610031128,dest:-0.006693661212921143,fis:-0.012918055057525635,BUFFER:-0.0300065279006958,zis:-0.032928287982940674,entry:-0.0024456381797790527,count:-0.002191483974456787,data:-0.0016033053398132324,fos:-0.012860596179962158,",4,11,0,"filename:filename,data:data,count:count,entry:entry,dest:dest,fos:fos,fis:fi,unzipModel:unpackmodel,tempdir:tempdir,BUFFER:BUUCK,zis:jists,",0,Greedy,473,0.07463020881017049,failed,[]
39,"    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        String selectedPage = request.getParameter(""SelectedPage"");
        Page page = null;
        PortalRequest portalRequest = PortalRequest.getCurrentRequest();
        if (selectedPage == null) {
            try {
                Property pageProp = Property.getProperty(""HomePage"");
                selectedPage = pageProp.getValue();
            } catch (PersistentModelException e) {
                myLogger.info(""Page could not be found due to an exception"");
                response.sendError(response.SC_NOT_FOUND);
                return;
            }
        }
        myLogger.info(""Handling Page Request for Page "" + selectedPage);
        try {
            if (page == null) {
                try {
                    page = Page.getPage(Long.parseLong(selectedPage));
                } catch (NumberFormatException e) {
                    List<Page> possiblePage = Page.findByName(selectedPage);
                    if (possiblePage.size() > 0) {
                        page = possiblePage.get(0);
                    } else {
                        response.sendError(response.SC_NOT_FOUND);
                        return;
                    }
                }
            }
            if (!page.isVisibleTo(portalRequest.getCurrentUser())) {
                Property pageProp = Property.getProperty(""HomePage"");
                selectedPage = pageProp.getValue();
                page = Page.getPage(Long.parseLong(selectedPage));
            }
            try {
                Property property = Property.getProperty(""LogPageRequests"");
                if (property.getValue().toLowerCase().equals(""true"")) {
                    String referer = request.getHeader(""Referer"");
                    if (referer == null || referer.indexOf(portalRequest.getRequest().getServerName()) > 0) {
                        referer = "" "";
                    } else {
                        if (referer.length() >= 200) {
                            referer = referer.substring(0, 198);
                        }
                    }
                    PageRequest.createRequest(portalRequest.getCurrentHREF(), page, portalRequest.getCurrentUser(), portalRequest.getRequest().getRemoteAddr(), referer);
                }
            } catch (PersistentModelException e) {
                myLogger.log(Level.WARNING, ""Log Page Requests property was not found."", e);
            }
            if (page.isVisibleTo(portalRequest.getCurrentUser())) {
                HttpSession session = request.getSession();
                if (session != null) {
                    RecentlyViewedManager rvm = (RecentlyViewedManager) session.getAttribute(""ipoint.RecentlyViewedManager"");
                    if (rvm == null) {
                        rvm = new RecentlyViewedManager();
                    }
                    rvm.add(page);
                    session.setAttribute(""ipoint.RecentlyViewedManager"", rvm);
                }
                PageCacheEntry entry = null;
                if (!portalRequest.isPost() && !page.isEditableBy(portalRequest.getCurrentUser())) {
                    try {
                        int pageCacheTime = 60000;
                        try {
                            Property pageCacheTimeProperty = Property.getProperty(""PageCacheTime"");
                            pageCacheTime = Integer.parseInt(pageCacheTimeProperty.getValue());
                            pageCacheTime *= 1000;
                        } catch (PersistentModelException pme) {
                            myLogger.warning(""Ignoring Exception when retrieving PageCacheTime property"");
                        } catch (NumberFormatException nfe) {
                        }
                        entry = PageCacheEntry.find(portalRequest.getCurrentHREF(), page, portalRequest.getCurrentUser(), pageCacheTime);
                    } catch (PersistentModelException e) {
                        myLogger.log(Level.WARNING, ""An error occurred finding a page cache entry"", e);
                    }
                }
                response.setContentType(""text/html"");
                response.setHeader(""Cache-Control"", ""no-cache"");
                boolean processed = false;
                if (entry != null) {
                    String tempFile = entry.getTempFile();
                    File file = new File(tempFile);
                    if (file.exists() && file.isFile() && file.canRead()) {
                        FileReader reader = new FileReader(file);
                        BufferedReader br = new BufferedReader(reader);
                        PrintWriter out = response.getWriter();
                        out.write(""<!-- Starting to output cached page in "" + portalRequest.elapsedTime() + "" ms -->\n"");
                        while (br.ready()) {
                            out.write(br.readLine() + ""\n"");
                        }
                        out.write(""<!-- Cached output produced in "" + portalRequest.elapsedTime() + "" ms -->\n"");
                        reader.close();
                        processed = true;
                        portalRequest.getMBeans().incrementStatistics(ManagementMBeans.StatisticsType.PageTotal, page.getName() + ""-"" + page.getID(), portalRequest.elapsedTime(), true);
                    } else {
                        entry.delete();
                    }
                }
                if (!processed) {
                    PrintWriter out = response.getWriter();
                    out.write(""<!-- Output produced by iPoint Portal -->\n"");
                    PageRenderer renderer = new PageRenderer(page);
                    long startTime = System.currentTimeMillis();
                    request.setAttribute(ELConstants.IPOINT_USER, portalRequest.getCurrentUser());
                    request.setAttribute(ELConstants.IPOINT_PAGE, page);
                    request.setAttribute(ELConstants.IPOINT_TEMPLATE, page.getTemplate());
                    request.setAttribute(ELConstants.IPOINT_PORTAL_PROPERTIES, Property.getPropertiesMap());
                    request.setAttribute(ELConstants.IPOINT_USER_PROPERTIES, portalRequest.getCurrentUser().getProperties());
                    renderer.preProcess();
                    portalRequest.getMBeans().incrementStatistics(ManagementMBeans.StatisticsType.PagePreProcess, page.getName() + ""-"" + page.getID(), System.currentTimeMillis() - startTime, false);
                    long renderStart = System.currentTimeMillis();
                    renderer.render();
                    portalRequest.getMBeans().incrementStatistics(ManagementMBeans.StatisticsType.PageRender, page.getName() + ""-"" + page.getID(), System.currentTimeMillis() - renderStart, false);
                    portalRequest.getMBeans().incrementStatistics(ManagementMBeans.StatisticsType.PageTotal, page.getName() + ""-"" + page.getID(), System.currentTimeMillis() - startTime, false);
                    out.write(""<!-- output produced in "" + PortalRequest.getCurrentRequest().elapsedTime() + "" ms -->\n"");
                    if (!page.isEditableBy(portalRequest.getCurrentUser())) {
                        if (response instanceof CachingResponseWrapper) {
                            CachingResponseWrapper crw = (CachingResponseWrapper) response;
                            crw.flushBuffer();
                            Property tempProperty = Property.getProperty(""UploadLocation"");
                            File tempDirectory = new File(tempProperty.getValue());
                            if (tempDirectory.exists() && tempDirectory.canWrite()) {
                                File file = File.createTempFile(""iPointPage"", "".html"", tempDirectory);
                                try {
                                    FileWriter fw = new FileWriter(file);
                                    fw.write(crw.getOutput());
                                    fw.flush();
                                    fw.close();
                                    PageCacheEntry.create(portalRequest.getCurrentHREF(), page, portalRequest.getCurrentUser(), file.getAbsolutePath());
                                } catch (IOException e) {
                                }
                            } else {
                                myLogger.warning(""Can not write to directory "" + tempProperty.getValue());
                            }
                        }
                    }
                }
            } else {
                myLogger.info(""Current User is Forbidden from seeing this Page"");
                response.sendError(response.SC_FORBIDDEN);
            }
        } catch (PersistentModelException e) {
            myLogger.log(Level.INFO, ""Unable to find page "" + selectedPage, e);
            response.sendError(response.SC_NOT_FOUND);
        } catch (PresentationException pe) {
            pe.printStackTrace();
            throw new ServletException(""Error processing the page"", pe);
        }
    }
 <SPLIT>     @Override
    public String transformSingleFile(X3DEditorSupport.X3dEditor xed) {
        Node[] node = xed.getActivatedNodes();
        X3DDataObject dob = (X3DDataObject) xed.getX3dEditorSupport().getDataObject();
        FileObject mySrc = dob.getPrimaryFile();
        File mySrcF = FileUtil.toFile(mySrc);
        File myOutF = new File(mySrcF.getParentFile(), mySrc.getName() + "".x3dv.gz"");
        TransformListener co = TransformListener.getInstance();
        co.message(NbBundle.getMessage(getClass(), ""Gzip_compression_starting""));
        co.message(NbBundle.getMessage(getClass(), ""Saving_as_"") + myOutF.getAbsolutePath());
        co.moveToFront();
        co.setNode(node[0]);
        try {
            String x3dvFile = ExportClassicVRMLAction.instance.transformSingleFile(xed);
            FileInputStream fis = new FileInputStream(new File(x3dvFile));
            GZIPOutputStream gzos = new GZIPOutputStream(new FileOutputStream(myOutF));
            byte[] buf = new byte[4096];
            int ret;
            while ((ret = fis.read(buf)) > 0) gzos.write(buf, 0, ret);
            gzos.close();
        } catch (Exception ex) {
            co.message(NbBundle.getMessage(getClass(), ""Exception:__"") + ex.getLocalizedMessage());
            return null;
        }
        co.message(NbBundle.getMessage(getClass(), ""Gzip_compression_complete""));
        return myOutF.getAbsolutePath();
    }
",1387,"    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        String selectedPage = request.getParameter(""SelectedPage"");
        Page page = null;
        PortalRequest portalRequest = PortalRequest.getCurrentRequest();
        if (selectedPage == null) {
            try {
                Property agePro = Property.getProperty(""HomePage"");
                selectedPage = agePro.getValue();
            } catch (PersistentModelException e) {
                myLogger.info(""Page could not be found due to an exception"");
                response.sendError(response.SC_NOT_FOUND);
                return;
            }
        }
        myLogger.info(""Handling Page Request for Page "" + selectedPage);
        try {
            if (page == null) {
                try {
                    page = Page.getPage(Long.parseLong(selectedPage));
                } catch (NumberFormatException e) {
                    List<Page> possiblyOrder = Page.findByName(selectedPage);
                    if (possiblyOrder.size() > 0) {
                        page = possiblyOrder.get(0);
                    } else {
                        response.sendError(response.SC_NOT_FOUND);
                        return;
                    }
                }
            }
            if (!page.isVisibleTo(portalRequest.getCurrentUser())) {
                Property agePro = Property.getProperty(""HomePage"");
                selectedPage = agePro.getValue();
                page = Page.getPage(Long.parseLong(selectedPage));
            }
            try {
                Property table = Property.getProperty(""LogPageRequests"");
                if (table.getValue().toLowerCase().equals(""true"")) {
                    String referer = request.getHeader(""Referer"");
                    if (referer == null || referer.indexOf(portalRequest.getRequest().getServerName()) > 0) {
                        referer = "" "";
                    } else {
                        if (referer.length() >= 200) {
                            referer = referer.substring(0, 198);
                        }
                    }
                    PageRequest.createRequest(portalRequest.getCurrentHREF(), page, portalRequest.getCurrentUser(), portalRequest.getRequest().getRemoteAddr(), referer);
                }
            } catch (PersistentModelException e) {
                myLogger.log(Level.WARNING, ""Log Page Requests property was not found."", e);
            }
            if (page.isVisibleTo(portalRequest.getCurrentUser())) {
                HttpSession session = request.getSession();
                if (session != null) {
                    RecentlyViewedManager rvm = (RecentlyViewedManager) session.getAttribute(""ipoint.RecentlyViewedManager"");
                    if (rvm == null) {
                        rvm = new RecentlyViewedManager();
                    }
                    rvm.add(page);
                    session.setAttribute(""ipoint.RecentlyViewedManager"", rvm);
                }
                PageCacheEntry entry = null;
                if (!portalRequest.isPost() && !page.isEditableBy(portalRequest.getCurrentUser())) {
                    try {
                        int pageCacheTime = 60000;
                        try {
                            Property pageCacheTimeProperty = Property.getProperty(""PageCacheTime"");
                            pageCacheTime = Integer.parseInt(pageCacheTimeProperty.getValue());
                            pageCacheTime *= 1000;
                        } catch (PersistentModelException pme) {
                            myLogger.warning(""Ignoring Exception when retrieving PageCacheTime property"");
                        } catch (NumberFormatException nfe) {
                        }
                        entry = PageCacheEntry.find(portalRequest.getCurrentHREF(), page, portalRequest.getCurrentUser(), pageCacheTime);
                    } catch (PersistentModelException e) {
                        myLogger.log(Level.WARNING, ""An error occurred finding a page cache entry"", e);
                    }
                }
                response.setContentType(""text/html"");
                response.setHeader(""Cache-Control"", ""no-cache"");
                boolean processed = false;
                if (entry != null) {
                    String tempFile = entry.getTempFile();
                    File file = new File(tempFile);
                    if (file.exists() && file.isFile() && file.canRead()) {
                        FileReader reader = new FileReader(file);
                        BufferedReader br = new BufferedReader(reader);
                        PrintWriter out = response.getWriter();
                        out.write(""<!-- Starting to output cached page in "" + portalRequest.elapsedTime() + "" ms -->
"");
                        while (br.ready()) {
                            out.write(br.readLine() + ""
"");
                        }
                        out.write(""<!-- Cached output produced in "" + portalRequest.elapsedTime() + "" ms -->
"");
                        reader.close();
                        processed = true;
                        portalRequest.getMBeans().incrementStatistics(ManagementMBeans.StatisticsType.PageTotal, page.getName() + ""-"" + page.getID(), portalRequest.elapsedTime(), true);
                    } else {
                        entry.delete();
                    }
                }
                if (!processed) {
                    PrintWriter out = response.getWriter();
                    out.write(""<!-- Output produced by iPoint Portal -->
"");
                    PageRenderer renderer = new PageRenderer(page);
                    long startTime = System.currentTimeMillis();
                    request.setAttribute(ELConstants.IPOINT_USER, portalRequest.getCurrentUser());
                    request.setAttribute(ELConstants.IPOINT_PAGE, page);
                    request.setAttribute(ELConstants.IPOINT_TEMPLATE, page.getTemplate());
                    request.setAttribute(ELConstants.IPOINT_PORTAL_PROPERTIES, Property.getPropertiesMap());
                    request.setAttribute(ELConstants.IPOINT_USER_PROPERTIES, portalRequest.getCurrentUser().getProperties());
                    renderer.preProcess();
                    portalRequest.getMBeans().incrementStatistics(ManagementMBeans.StatisticsType.PagePreProcess, page.getName() + ""-"" + page.getID(), System.currentTimeMillis() - startTime, false);
                    long renderStart = System.currentTimeMillis();
                    renderer.render();
                    portalRequest.getMBeans().incrementStatistics(ManagementMBeans.StatisticsType.PageRender, page.getName() + ""-"" + page.getID(), System.currentTimeMillis() - renderStart, false);
                    portalRequest.getMBeans().incrementStatistics(ManagementMBeans.StatisticsType.PageTotal, page.getName() + ""-"" + page.getID(), System.currentTimeMillis() - startTime, false);
                    out.write(""<!-- output produced in "" + PortalRequest.getCurrentRequest().elapsedTime() + "" ms -->
"");
                    if (!page.isEditableBy(portalRequest.getCurrentUser())) {
                        if (response instanceof CachingResponseWrapper) {
                            CachingResponseWrapper crw = (CachingResponseWrapper) response;
                            crw.flushBuffer();
                            Property tempProperty = Property.getProperty(""UploadLocation"");
                            File tempDirectory = new File(tempProperty.getValue());
                            if (tempDirectory.exists() && tempDirectory.canWrite()) {
                                File file = File.createTempFile(""iPointPage"", "".html"", tempDirectory);
                                try {
                                    FileWriter fw = new FileWriter(file);
                                    fw.write(crw.getOutput());
                                    fw.flush();
                                    fw.close();
                                    PageCacheEntry.create(portalRequest.getCurrentHREF(), page, portalRequest.getCurrentUser(), file.getAbsolutePath());
                                } catch (IOException e) {
                                }
                            } else {
                                myLogger.warning(""Can not write to directory "" + tempProperty.getValue());
                            }
                        }
                    }
                }
            } else {
                myLogger.info(""Current User is Forbidden from seeing this Page"");
                response.sendError(response.SC_FORBIDDEN);
            }
        } catch (PersistentModelException e) {
            myLogger.log(Level.INFO, ""Unable to find page "" + selectedPage, e);
            response.sendError(response.SC_NOT_FOUND);
        } catch (PresentationException pe) {
            pe.printStackTrace();
            throw new ServletException(""Error processing the page"", pe);
        }
    }
",LABEL_1,LABEL_1,LABEL_0,1,"doGet,request,response,selectedPage,page,portalRequest,pageProp,possiblePage,property,referer,e","doGet:-0.01952463388442993,request:-0.010599255561828613,response:-0.007174313068389893,selectedPage:-0.009533584117889404,page:-0.008262872695922852,portalRequest:-0.007488667964935303,pageProp:-0.00657731294631958,possiblePage:0.0004838109016418457,property:0.001498401165008545,referer:-0.08790993690490723,e:-0.026242733001708984,",3,11,0,"property:table,possiblePage:possiblyOrder,pageProp:agePro,",0,Greedy,256,0.06569970846176147,replace,[]
40,"    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        String senha = """";
        String email = request.getParameter(""EmailLogin"");
        try {
            MessageDigest messageDigest = MessageDigest.getInstance(""MD5"");
            messageDigest.update(request.getParameter(""SenhaLogin"").getBytes(), 0, request.getParameter(""SenhaLogin"").length());
            senha = new BigInteger(1, messageDigest.digest()).toString(16);
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        }
        Usuario usuario = UsuarioBll.getUsuarioByEmailAndSenha(email, senha);
        String redirect = request.getHeader(""REFERER"").replace(""?msg=3"", """").replace(""&msg=3"", """") + ""?&msg=3"";
        if (request.getHeader(""REFERER"").indexOf(""?"") != -1) {
            redirect = request.getHeader(""REFERER"").replace(""?msg=3"", """").replace(""&msg=3"", """") + ""&msg=3"";
        }
        if (usuario.getNome() != null) {
            HttpSession session = request.getSession();
            session.setAttribute(""usuario"", usuario);
            redirect = ""index.jsp"";
        }
        response.sendRedirect(redirect);
    }
 <SPLIT>     public static String encodePassword(String password) {
        MessageDigest md;
        try {
            md = MessageDigest.getInstance(""SHA"");
            md.update(password.getBytes());
            String encodedPassword = new String(md.digest(), new Base64Provider().charsetForName(""x-base64""));
            return encodedPassword;
        } catch (NoSuchAlgorithmException e) {
            return null;
        }
    }
",266,,LABEL_1,LABEL_0,,-4,"doPost,request,response,senha,email,messageDigest,usuario,redirect,session",,,,0,,0,Greedy,1,0.00043506622314453124,,[]
41,"    public static void copyFile(File src, File dst) throws IOException {
        InputStream in = new FileInputStream(src);
        OutputStream out = new FileOutputStream(dst);
        byte[] buf = new byte[1024];
        int len;
        while ((len = in.read(buf)) > 0) out.write(buf, 0, len);
        in.close();
        out.close();
    }
 <SPLIT>     public static String plainToMD(LoggerCollection loggerCol, String input) {
        byte[] byteHash = null;
        MessageDigest md = null;
        StringBuilder md5result = new StringBuilder();
        try {
            md = MessageDigest.getInstance(""MD5"");
            md.reset();
            md.update(input.getBytes());
            byteHash = md.digest();
            for (int i = 0; i < byteHash.length; i++) {
                md5result.append(Integer.toHexString(0xFF & byteHash[i]));
            }
        } catch (NoSuchAlgorithmException ex) {
            loggerCol.logException(CLASSDEBUG, ""de.searchworkorange.lib.misc.hash.MD5Hash"", Level.FATAL, ex);
        }
        return (md5result.toString());
    }
",86,"    public static void CopyStream(File url, File ddest) throws IOException {
        InputStream gin = new FileInputStream(url);
        OutputStream err = new FileOutputStream(ddest);
        byte[] bin = new byte[1024];
        int bin;
        while ((bin = gin.read(bin)) > 0) err.write(bin, 0, bin);
        gin.close();
        err.close();
    }
",LABEL_0,LABEL_0,LABEL_0,-1,"copyFile,src,dst,in,out,buf,len","copyFile:0.02054828405380249,src:-0.0005352497100830078,dst:0.012596726417541504,in:-0.014850258827209473,out:-0.027336478233337402,buf:-0.010288655757904053,len:0.00027751922607421875,",7,17,0,"copyFile:CopyStream,dst:ddest,len:bin,src:url,buf:bin,in:gin,out:err,",0,Greedy,274,0.03812948862711588,failed,[]
42,"    public Configuration(URL url) {
        InputStream in = null;
        try {
            load(in = url.openStream());
        } catch (Exception e) {
            throw new RuntimeException(""Could not load configuration from "" + url, e);
        } finally {
            if (in != null) {
                try {
                    in.close();
                } catch (IOException ignore) {
                }
            }
        }
    }
 <SPLIT>     public static Properties loadAllProperties(String resourceName, ClassLoader classLoader) throws IOException {
        Assert.notNull(resourceName, ""Resource name must not be null"");
        ClassLoader clToUse = classLoader;
        if (clToUse == null) {
            clToUse = ClassUtils.getDefaultClassLoader();
        }
        Properties properties = new Properties();
        Enumeration urls = clToUse.getResources(resourceName);
        while (urls.hasMoreElements()) {
            URL url = (URL) urls.nextElement();
            InputStream is = null;
            try {
                URLConnection con = url.openConnection();
                con.setUseCaches(false);
                is = con.getInputStream();
                properties.load(is);
            } finally {
                if (is != null) {
                    is.close();
                }
            }
        }
        return properties;
    }
",74,"    public Configuration(URL url) {
        InputStream in = null;
        try {
            load(in = url.openStream());
        } catch (Exception e) {
            throw new RuntimeException(""Could not load configuration from "" + url, e);
        } finally {
            if (in != null) {
                try {
                    in.close();
                } catch (IOException ignore) {
                }
            }
        }
    }
",LABEL_0,LABEL_0,LABEL_0,-1,"url,in","url:8.344650268554688e-07,in:-1.6689300537109375e-06,",0,0,0,"url:url,in:in,",0,Greedy,108,0.014787817001342773,failed,[]
43,"    private String getPrefsKey(String key) {
        try {
            if (MD5 == null) MD5 = MessageDigest.getInstance(""MD5"");
            MD5.reset();
            MD5.update(key.getBytes(""UTF-8""));
            byte[] resultBytes = MD5.digest();
            return toHexString(resultBytes);
        } catch (Exception nsae) {
            return key;
        }
    }
 <SPLIT>     public static String generate(String text) throws NoSuchAlgorithmException, UnsupportedEncodingException {
        MessageDigest md;
        md = MessageDigest.getInstance(""SHA-1"");
        byte[] sha1hash = new byte[40];
        md.update(text.getBytes(""iso-8859-1""), 0, text.length());
        sha1hash = md.digest();
        return convertToHex(sha1hash);
    }
",77,"    private String getPrefixedKeys(String base) {
        try {
            if (MET85 == null) MET85 = MessageDigest.getInstance(""MD5"");
            MET85.reset();
            MET85.update(base.getBytes(""UTF-8""));
            byte[] keyByte = MET85.digest();
            return toHexString(keyByte);
        } catch (Exception nsae) {
            return base;
        }
    }
",LABEL_1,LABEL_1,LABEL_1,-1,"getPrefsKey,key,MD5,resultBytes","getPrefsKey:-0.032644808292388916,key:0.008377790451049805,MD5:0.021317481994628906,resultBytes:0.0048340559005737305,",4,12,0,"MD5:MET85,key:base,resultBytes:keyByte,getPrefsKey:getPrefixedKeys,",0,Greedy,153,0.020364864667256673,failed,[]
44,"    public static void copy(File from, File to) {
        boolean result;
        if (from.isDirectory()) {
            File[] subFiles = from.listFiles();
            for (int i = 0; i < subFiles.length; i++) {
                File newDir = new File(to, subFiles[i].getName());
                result = false;
                if (subFiles[i].isDirectory()) {
                    if (newDir.exists()) result = true; else result = newDir.mkdirs();
                } else if (subFiles[i].isFile()) {
                    try {
                        result = newDir.createNewFile();
                    } catch (IOException e) {
                        log.error(""unable to create new file: "" + newDir, e);
                        result = false;
                    }
                }
                if (result) copy(subFiles[i], newDir);
            }
        } else if (from.isFile()) {
            FileInputStream in = null;
            FileOutputStream out = null;
            try {
                in = new FileInputStream(from);
                out = new FileOutputStream(to);
                int fileLength = (int) from.length();
                char charBuff[] = new char[fileLength];
                int len;
                int oneChar;
                while ((oneChar = in.read()) != -1) {
                    out.write(oneChar);
                }
            } catch (FileNotFoundException e) {
                log.error(""File not found!"", e);
            } catch (IOException e) {
                log.error(""Unable to read from file!"", e);
            } finally {
                try {
                    if (in != null) in.close();
                    if (out != null) out.close();
                } catch (IOException e1) {
                    log.error(""Error closing file reader/writer"", e1);
                }
            }
        }
    }
 <SPLIT>     void copyFile(File src, File dst) throws IOException {
        FileChannel inChannel = new FileInputStream(src).getChannel();
        FileChannel outChannel = new FileOutputStream(dst).getChannel();
        try {
            inChannel.transferTo(0, inChannel.size(), outChannel);
        } finally {
            if (inChannel != null) inChannel.close();
            if (outChannel != null) outChannel.close();
        }
    }
",352,"    public static void load(File url, File to) {
        boolean result;
        if (url.isDirectory()) {
            File[] subFiles = url.listFiles();
            for (int id = 0; id < subFiles.length; id++) {
                File newDir = new File(to, subFiles[id].getName());
                result = false;
                if (subFiles[id].isDirectory()) {
                    if (newDir.exists()) result = true; else result = newDir.mkdirs();
                } else if (subFiles[id].isFile()) {
                    try {
                        result = newDir.createNewFile();
                    } catch (IOException e) {
                        log.error(""unable to create new file: "" + newDir, e);
                        result = false;
                    }
                }
                if (result) load(subFiles[id], newDir);
            }
        } else if (url.isFile()) {
            FileInputStream in = null;
            FileOutputStream out = null;
            try {
                in = new FileInputStream(url);
                out = new FileOutputStream(to);
                int fileLength = (int) url.length();
                char charBuff[] = new char[fileLength];
                int len;
                int oneChar;
                while ((oneChar = in.read()) != -1) {
                    out.write(oneChar);
                }
            } catch (FileNotFoundException e) {
                log.error(""File not found!"", e);
            } catch (IOException e) {
                log.error(""Unable to read from file!"", e);
            } finally {
                try {
                    if (in != null) in.close();
                    if (out != null) out.close();
                } catch (IOException e1) {
                    log.error(""Error closing file reader/writer"", e1);
                }
            }
        }
    }
",LABEL_1,LABEL_1,LABEL_0,1,"copy,from,to,result,subFiles,i,newDir,in,out,fileLength,charBuff,len,oneChar","copy:0.0017497539520263672,from:-0.0003388524055480957,to:-0.007378518581390381,result:-0.00036531686782836914,subFiles:-0.044805288314819336,i:0.002352118492126465,newDir:-0.04379075765609741,in:-0.0049822330474853516,out:-0.0023870468139648438,fileLength:-0.018348634243011475,charBuff:-0.009273886680603027,len:-0.001734614372253418,oneChar:-0.02682274580001831,",3,16,0,"i:id,copy:load,from:url,",0,Greedy,213,0.03280340830485026,replace,[]
45,"    private void copyResourceToFile(final String resourceFilename, final String destinationFilename) throws IOException {
        InputStream inStream = null;
        OutputStream outStream = null;
        try {
            inStream = MatsimResource.getAsInputStream(resourceFilename);
            outStream = new FileOutputStream(destinationFilename);
            IOUtils.copyStream(inStream, outStream);
        } finally {
            if (inStream != null) {
                try {
                    inStream.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
            if (outStream != null) {
                try {
                    outStream.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        }
    }
 <SPLIT>     public String digest(String message) throws NoSuchAlgorithmException, EncoderException {
        MessageDigest messageDigest = MessageDigest.getInstance(""SHA-256"");
        messageDigest.update(message.getBytes());
        byte[] raw = messageDigest.digest();
        byte[] chars = new Base64().encode(raw);
        return new String(chars);
    }
",119,"    private void copyResourceToFile(final String resourceFilename, final String destinationFilename) throws IOException {
        InputStream inStream = null;
        OutputStream outStream = null;
        try {
            inStream = MatsimResource.getAsInputStream(resourceFilename);
            outStream = new FileOutputStream(destinationFilename);
            IOUtils.copyStream(inStream, outStream);
        } finally {
            if (inStream != null) {
                try {
                    inStream.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
            if (outStream != null) {
                try {
                    outStream.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        }
    }
",LABEL_0,LABEL_0,LABEL_0,-1,"copyResourceToFile,resourceFilename,destinationFilename,inStream,outStream","copyResourceToFile:-0.0007193684577941895,resourceFilename:6.860494613647461e-05,destinationFilename:0.0019344687461853027,inStream:0.0016915202140808105,outStream:0.000965118408203125,",0,0,0,"destinationFilename:destinationFilename,inStream:inStream,outStream:outStream,resourceFilename:resourceFilename,copyResourceToFile:copyResourceToFile,",0,Greedy,179,0.025451751550038655,failed,[]
46,"        public HttpResponseExchange execute() throws Exception {
            HttpResponseExchange forwardResponse = null;
            int fetchSizeLimit = Config.getInstance().getFetchLimitSize();
            while (null != lastContentRange) {
                forwardRequest.setBody(new byte[0]);
                ContentRangeHeaderValue old = lastContentRange;
                long sendSize = fetchSizeLimit;
                if (old.getInstanceLength() - old.getLastBytePos() - 1 < fetchSizeLimit) {
                    sendSize = (old.getInstanceLength() - old.getLastBytePos() - 1);
                }
                if (sendSize <= 0) {
                    break;
                }
                lastContentRange = new ContentRangeHeaderValue(old.getLastBytePos() + 1, old.getLastBytePos() + sendSize, old.getInstanceLength());
                forwardRequest.setHeader(HttpHeaders.Names.CONTENT_RANGE, lastContentRange);
                forwardRequest.setHeader(HttpHeaders.Names.CONTENT_LENGTH, String.valueOf(sendSize));
                forwardResponse = syncFetch(forwardRequest);
                if (sendSize < fetchSizeLimit) {
                    lastContentRange = null;
                }
            }
            return forwardResponse;
        }
 <SPLIT>     public String get(String url) {
        try {
            HttpGet get = new HttpGet(url);
            HttpResponse response = this.getHttpClient().execute(get);
            HttpEntity entity = response.getEntity();
            if (entity == null) {
                throw new RuntimeException(""response body was empty"");
            }
            return EntityUtils.toString(entity);
        } catch (RuntimeException ex) {
            throw ex;
        } catch (Exception ex) {
            throw new RuntimeException(ex);
        }
    }
",187,"        public HttpResponseExchange  produce() throws Exception {
            HttpResponseExchange  backwardServer = null;
            int faitSizeGlobal = Config.getInstance().getFetchLimitSize();
            while (null != lastResourcerange) {
                forwardRequest.setBody(new byte[0]);
                ContentRangeHeaderValue expected = lastResourcerange;
                long SendSize = faitSizeGlobal;
                if (expected.getInstanceLength() - expected.getLastBytePos() - 1 < faitSizeGlobal) {
                    SendSize = (expected.getInstanceLength() - expected.getLastBytePos() - 1);
                }
                if (SendSize <= 0) {
                    break;
                }
                lastResourcerange = new ContentRangeHeaderValue(expected.getLastBytePos() + 1, expected.getLastBytePos() + SendSize, expected.getInstanceLength());
                forwardRequest.setHeader(HttpHeaders.Names.CONTENT_RANGE, lastResourcerange);
                forwardRequest.setHeader(HttpHeaders.Names.CONTENT_LENGTH, String.valueOf(SendSize));
                 backwardServer = syncFetch(forwardRequest);
                if (SendSize < faitSizeGlobal) {
                    lastResourcerange = null;
                }
            }
            return  backwardServer;
        }
",LABEL_0,LABEL_0,LABEL_0,-1,"execute,forwardResponse,fetchSizeLimit,lastContentRange,old,sendSize","execute:0.01733088493347168,forwardResponse:0.08013832569122314,fetchSizeLimit:0.07437330484390259,lastContentRange:0.07921874523162842,old:-0.0023792386054992676,sendSize:0.03268778324127197,",6,27,0,"forwardResponse: backwardServer,lastContentRange:lastResourcerange,fetchSizeLimit:faitSizeGlobal,sendSize:SendSize,execute: produce,old:expected,",0,Greedy,372,0.05393083095550537,failed,[]
47,"    public void testJPEGRaster() throws MalformedURLException, IOException {
        System.out.println(""JPEGCodec RasterImage:"");
        long start = Calendar.getInstance().getTimeInMillis();
        for (int i = 0; i < images.length; i++) {
            String url = Constants.getDefaultURIMediaConnectorBasePath() + ""albums/hund/"" + images[i];
            InputStream istream = (new URL(url)).openStream();
            JPEGImageDecoder dec = JPEGCodec.createJPEGDecoder(istream);
            Raster raster = dec.decodeAsRaster();
            int width = raster.getWidth();
            int height = raster.getHeight();
            istream.close();
            System.out.println(""w: "" + width + "" - h: "" + height);
        }
        long stop = Calendar.getInstance().getTimeInMillis();
        System.out.println(""zeit: "" + (stop - start));
    }
 <SPLIT>     @Override
    public void writeData(byte[] data, byte[] options, boolean transferMetaData) throws Throwable {
        long startTime = System.currentTimeMillis();
        long transferredBytesNum = 0;
        long elapsedTime = 0;
        Properties opts = PropertiesUtils.deserializeProperties(options);
        String server = opts.getProperty(TRANSFER_OPTION_SERVER);
        String username = opts.getProperty(TRANSFER_OPTION_USERNAME);
        String password = opts.getProperty(TRANSFER_OPTION_PASSWORD);
        String filePath = opts.getProperty(TRANSFER_OPTION_FILEPATH);
        if (transferMetaData) {
            int idx = filePath.lastIndexOf(PATH_SEPARATOR);
            if (idx != -1) {
                String fileName = filePath.substring(idx + 1) + META_DATA_FILE_SUFIX;
                filePath = filePath.substring(0, idx);
                filePath = filePath + PATH_SEPARATOR + fileName;
            } else {
                filePath += META_DATA_FILE_SUFIX;
            }
        }
        URL url = new URL(PROTOCOL_PREFIX + username + "":"" + password + ""@"" + server + filePath + "";type=i"");
        URLConnection urlc = url.openConnection(BackEnd.getProxy(Proxy.Type.SOCKS));
        urlc.setConnectTimeout(Preferences.getInstance().preferredTimeOut * 1000);
        urlc.setReadTimeout(Preferences.getInstance().preferredTimeOut * 1000);
        OutputStream os = urlc.getOutputStream();
        ByteArrayInputStream bis = new ByteArrayInputStream(data);
        byte[] buffer = new byte[1024];
        int br;
        while ((br = bis.read(buffer)) > 0) {
            os.write(buffer, 0, br);
            if (!transferMetaData) {
                transferredBytesNum += br;
                elapsedTime = System.currentTimeMillis() - startTime;
                fireOnProgressEvent(transferredBytesNum, elapsedTime);
            }
        }
        bis.close();
        os.close();
    }
",180,"    public void  testJPEGRotast() throws MalformedURLException, IPception {
        System.out.println(""JPEGCodec RasterImage:"");
        long stage = Calendar.getInstance().getTimeInMillis();
        for (int u = 0; u < images.length; u++) {
            String filename = Constants.getDefaultURIMediaConnectorBasePath() + ""albums/hund/"" + images[u];
            InputStream isteep = (new URL(filename)).openStream();
            JPEGImageDecoder dir = JPEGCodec.createJPEGDecoder(isteep);
            Raster rap = dir.decodeAsRaster();
            int image = rap.getWidth();
            int head = rap.getHeight();
            isteep.close();
            System.out.println(""w: "" + image + "" - h: "" + head);
        }
        long output = Calendar.getInstance().getTimeInMillis();
        System.out.println(""zeit: "" + (output - stage));
    }
",LABEL_0,LABEL_0,LABEL_0,-1,"testJPEGRaster,IOException,start,i,url,istream,dec,raster,width,height,stop","testJPEGRaster:-3.260374069213867e-05,IOException:-3.2961368560791016e-05,start:1.9848346710205078e-05,i:4.565715789794922e-05,url:0.0014219284057617188,istream:-5.030632019042969e-05,dec:-6.318092346191406e-06,raster:1.2278556823730469e-05,width:1.6391277313232422e-05,height:9.417533874511719e-06,stop:3.713369369506836e-05,",11,24,0,"url:filename,i:u,stop:output,start:stage,width:image,raster:rap,height:head,dec:dir,testJPEGRaster: testJPEGRotast,IOException:IPception,istream:isteep,",0,Greedy,427,0.07169907887776693,failed,[]
48,"    public static void copyFile(File dest, File src) throws IOException {
        FileChannel srcChannel = new FileInputStream(src).getChannel();
        FileChannel dstChannel = new FileOutputStream(dest).getChannel();
        dstChannel.transferFrom(srcChannel, 0, srcChannel.size());
        srcChannel.close();
        dstChannel.close();
    }
 <SPLIT>     public void descargarArchivo() {
        try {
            FileInputStream fis = new FileInputStream(resultados.elementAt(materialSelccionado).getRuta());
            FileOutputStream fos = new FileOutputStream(rutaDestinoDescarga);
            FileChannel inChannel = fis.getChannel();
            FileChannel outChannel = fos.getChannel();
            inChannel.transferTo(0, inChannel.size(), outChannel);
            fis.close();
            fos.close();
        } catch (IOException ioe) {
            System.err.println(""Error al Generar Copia del Material\n"" + ioe);
        }
    }
",69,"    public static void  copyfile(File dir, File url) throws IOException {
        FileChannel srcConnection = new FileInputStream(url).getChannel();
        FileChannel dstsConnection = new FileOutputStream(dir).getChannel();
        dstsConnection.transferFrom(srcConnection, 0, srcConnection.size());
        srcConnection.close();
        dstsConnection.close();
    }
",LABEL_1,LABEL_1,LABEL_1,-1,"copyFile,dest,src,srcChannel,dstChannel","copyFile:0.002125561237335205,dest:0.00198972225189209,src:0.003536224365234375,srcChannel:-0.053487539291381836,dstChannel:-0.04460340738296509,",5,12,0,"src:url,copyFile: copyfile,dest:dir,dstChannel:dstsConnection,srcChannel:srcConnection,",0,Greedy,192,0.026051779588063557,failed,[]
49,"    public static GameRecord[] get(String url, float lat, float lon, int count) {
        try {
            HttpURLConnection req = (HttpURLConnection) new URL(url).openConnection();
            req.setRequestMethod(""GET"");
            req.setRequestProperty(GameRecord.GAME_LATITUDE_HEADER, df.format(lat));
            req.setRequestProperty(GameRecord.GAME_LONGITUDE_HEADER, df.format(lon));
            req.setRequestProperty(""X-GameQueryCount"", String.valueOf(count));
            req.connect();
            if (req.getResponseCode() == HttpURLConnection.HTTP_OK) {
                List<GameRecord> gl = new ArrayList<GameRecord>();
                BufferedReader br = new BufferedReader(new InputStreamReader(req.getInputStream()));
                String line;
                while ((line = br.readLine()) != null) {
                    if (!line.startsWith(""#"")) {
                        gl.add(GameRecord.decode(line));
                    }
                }
                return gl.toArray(new GameRecord[gl.size()]);
            } else {
                System.out.println(req.getResponseMessage());
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
        return null;
    }
 <SPLIT> 	public FTPClient sample3a(String ftpserver, int ftpport, String proxyserver, int proxyport, String username, String password) throws SocketException, IOException {
		FTPHTTPClient ftpClient = new FTPHTTPClient(proxyserver, proxyport);
		ftpClient.connect(ftpserver, ftpport);
		ftpClient.login(username, password);
		return ftpClient;
	}
",242,"    public static GameRecord[] debug(String email, float home, float lb, int name) {
        try {
            HttpURLConnection conn = (HttpURLConnection) new URL(email).openConnection();
            conn.setRequestMethod(""GET"");
            conn.setRequestProperty(GameRecord.GAME_LATITUDE_HEADER, df.format(home));
            conn.setRequestProperty(GameRecord.GAME_LONGITUDE_HEADER, df.format(lb));
            conn.setRequestProperty(""X-GameQueryCount"", String.valueOf(name));
            conn.connect();
            if (conn.getResponseCode() == HttpURLConnection.HTTP_OK) {
                List<GameRecord> bl = new ArrayList<GameRecord>();
                BufferedReader buf = new BufferedReader(new InputStreamReader(conn.getInputStream()));
                String line;
                while ((line = buf.readLine()) != null) {
                    if (!line.startsWith(""#"")) {
                        bl.add(GameRecord.decode(line));
                    }
                }
                return bl.toArray(new GameRecord[bl.size()]);
            } else {
                System.out.println(conn.getResponseMessage());
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
        return null;
    }
",LABEL_0,LABEL_0,LABEL_0,-1,"get,url,lat,lon,count,req,gl,br,line","get:0.04277294874191284,url:-0.034220337867736816,lat:0.04480552673339844,lon:0.0730559229850769,count:0.007766306400299072,req:-0.08160489797592163,gl:0.016760170459747314,br:0.026201307773590088,line:-0.016202926635742188,",8,24,0,"lon:lb,lat:home,get:debug,br:buf,gl:bl,count:name,line:line,url:email,req:conn,",0,Greedy,447,0.06691669623057048,failed,[]
50,"    public static String getUniqueKey() {
        String digest = """";
        try {
            final MessageDigest md = MessageDigest.getInstance(""MD5"");
            final String timeVal = """" + (System.currentTimeMillis() + 1);
            String localHost = """";
            try {
                localHost = InetAddress.getLocalHost().toString();
            } catch (UnknownHostException e) {
                println(""Warn: getUniqueKey(), Error trying to get localhost"" + e.getMessage());
            }
            final String randVal = """" + new Random().nextInt();
            final String val = timeVal + localHost + randVal;
            md.reset();
            md.update(val.getBytes());
            digest = toHexString(md.digest());
        } catch (NoSuchAlgorithmException e) {
            println(""Warn: getUniqueKey() "" + e);
        }
        return digest;
    }
 <SPLIT>     private static void unzipEntry(ZipFile zipfile, ZipEntry entry, File outputDir) throws IOException {
        if (entry.isDirectory()) {
            createDir(new File(outputDir, entry.getName()));
            return;
        }
        File outputFile = new File(outputDir, entry.getName());
        if (!outputFile.getParentFile().exists()) {
            createDir(outputFile.getParentFile());
        }
        BufferedInputStream inputStream = new BufferedInputStream(zipfile.getInputStream(entry));
        BufferedOutputStream outputStream = new BufferedOutputStream(new FileOutputStream(outputFile));
        try {
            IOUtils.copy(inputStream, outputStream);
        } finally {
            outputStream.close();
            inputStream.close();
        }
    }
",162,"    public static String getUniqueKey() {
        String longest = """";
        try {
            final MessageDigest v = MessageDigest.getInstance(""MD5"");
            final String timeVal = """" + (System.currentTimeMillis() + 1);
            String remotePort = """";
            try {
                remotePort = InetAddress.getLocalHost().toString();
            } catch (UnknownHostException e) {
                println(""Warn: getUniqueKey(), Error trying to get localhost"" + e.getMessage());
            }
            final String RandBu = """" + new Random().nextInt();
            final String string = timeVal + remotePort + RandBu;
            v.reset();
            v.update(string.getBytes());
            longest = toHexString(v.longest());
        } catch (NoSuchAlgorithmException e) {
            println(""Warn: getUniqueKey() "" + e);
        }
        return longest;
    }
",LABEL_0,LABEL_0,LABEL_0,-1,"getUniqueKey,digest,md,timeVal,localHost,randVal,val","getUniqueKey:-0.0026255249977111816,digest:-0.006495773792266846,md:0.0007737874984741211,timeVal:-0.0017777085304260254,localHost:-1.621246337890625e-05,randVal:-0.0031161904335021973,val:0.0004552602767944336,",5,15,0,"md:v,val:string,localHost:remotePort,timeVal:timeVal,getUniqueKey:getUniqueKey,randVal:RandBu,digest:longest,",0,Greedy,251,0.03749625682830811,failed,[]
51,"    public static void main(String args[]) {
        int temp;
        int[] a1 = { 6, 2, -3, 7, -1, 8, 9, 0 };
        for (int j = 0; j < (a1.length * a1.length); j++) {
            for (int i = 0; i < a1.length - 1; i++) {
                if (a1[i] > a1[i + 1]) {
                    temp = a1[i];
                    a1[i] = a1[i + 1];
                    a1[i + 1] = temp;
                }
            }
        }
        for (int i = 0; i < a1.length; i++) {
            System.out.print("" "" + a1[i]);
        }
    }
 <SPLIT>     public Bitmap retrieveBitmap(String urlString) {
        Log.d(Constants.LOG_TAG, ""making HTTP trip for image:"" + urlString);
        Bitmap bitmap = null;
        try {
            URL url = new URL(urlString);
            URLConnection conn = url.openConnection();
            conn.setConnectTimeout(3000);
            conn.setReadTimeout(5000);
            bitmap = BitmapFactory.decodeStream(conn.getInputStream());
        } catch (MalformedURLException e) {
            Log.e(Constants.LOG_TAG, ""Exception loading image, malformed URL"", e);
        } catch (IOException e) {
            Log.e(Constants.LOG_TAG, ""Exception loading image, IO error"", e);
        }
        return bitmap;
    }
",163,"    public static void main(String args[]) {
        int output;
        int[] a2 = { 6, 2, -3, 7, -1, 8, 9, 0 };
        for (int a = 0; a < (a2.length * a2.length); a++) {
            for (int io = 0; io < a2.length - 1; io++) {
                if (a2[io] > a2[io + 1]) {
                    output = a2[io];
                    a2[io] = a2[io + 1];
                    a2[io + 1] = output;
                }
            }
        }
        for (int io = 0; io < a2.length; io++) {
            System.out.print("" "" + a2[io]);
        }
    }
",LABEL_0,LABEL_0,LABEL_0,-1,"temp,a1,j,i","temp:0.003796815872192383,a1:-0.16162091493606567,j:0.0008764266967773438,i:-0.0046735405921936035,",4,31,0,"temp:output,j:a,i:io,a1:a2,",0,Greedy,280,0.03882680336634318,failed,[]
52,"    public static boolean decodeFileToFile(final String infile, final String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            final byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (final java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (final Exception exc) {
            }
            try {
                out.close();
            } catch (final Exception exc) {
            }
        }
        return success;
    }
 <SPLIT>     public static boolean decodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }
",200,"    public static boolean decodeString2file(final String infile, final String Outfull) {
        boolean follow = false;
        java.io.InputStream login = null;
        java.io.OutputStream post = null;
        try {
            login = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);
            post = new java.io.BufferedOutputStream(new java.io.FileOutputStream(Outfull));
            final byte[] url = new byte[65536];
            int read = -1;
            while ((read = login.read(url)) >= 0) {
                post.write(url, 0, read);
            }
            follow = true;
        } catch (final java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                login.close();
            } catch (final Exception exc) {
            }
            try {
                post.close();
            } catch (final Exception exc) {
            }
        }
        return follow;
    }
",LABEL_1,LABEL_1,LABEL_0,1,"decodeFileToFile,infile,outfile,in,out,buffer,read,success","decodeFileToFile:0.055242717266082764,infile:0.049873173236846924,outfile:0.0481182336807251,in:0.03554701805114746,out:-0.0040375590324401855,buffer:-0.006866633892059326,read:-0.021683871746063232,success:0.01718384027481079,",6,17,0,"decodeFileToFile:decodeString2file,infile:infile,outfile:Outfull,in:login,success:follow,out:post,buffer:url,",0,Greedy,289,0.044207775592803956,replace,[]
53,"    public static String plainToMD(LoggerCollection loggerCol, String input) {
        byte[] byteHash = null;
        MessageDigest md = null;
        StringBuilder md5result = new StringBuilder();
        try {
            md = MessageDigest.getInstance(""MD5"");
            md.reset();
            md.update(input.getBytes());
            byteHash = md.digest();
            for (int i = 0; i < byteHash.length; i++) {
                md5result.append(Integer.toHexString(0xFF & byteHash[i]));
            }
        } catch (NoSuchAlgorithmException ex) {
            loggerCol.logException(CLASSDEBUG, ""de.searchworkorange.lib.misc.hash.MD5Hash"", Level.FATAL, ex);
        }
        return (md5result.toString());
    }
 <SPLIT>     public static boolean downloadFile(String url, String destination) throws Exception {
        BufferedInputStream bi = null;
        BufferedOutputStream bo = null;
        File destfile;
        byte BUFFER[] = new byte[100];
        java.net.URL fileurl;
        URLConnection conn;
        fileurl = new java.net.URL(url);
        conn = fileurl.openConnection();
        long fullsize = conn.getContentLength();
        long onepercent = fullsize / 100;
        MessageFrame.setTotalDownloadSize(fullsize);
        bi = new BufferedInputStream(conn.getInputStream());
        destfile = new File(destination);
        if (!destfile.createNewFile()) {
            destfile.delete();
            destfile.createNewFile();
        }
        bo = new BufferedOutputStream(new FileOutputStream(destfile));
        int read = 0;
        int sum = 0;
        long i = 0;
        while ((read = bi.read(BUFFER)) != -1) {
            bo.write(BUFFER, 0, read);
            sum += read;
            i += read;
            if (i > onepercent) {
                i = 0;
                MessageFrame.setDownloadProgress(sum);
            }
        }
        bi.close();
        bo.close();
        MessageFrame.setDownloadProgress(fullsize);
        return true;
    }
",141,"    public static String  string2Hash(LoggerCollection loggerColumn, String image) {
        byte[] wordArray = null;
        MessageDigest mm = null;
        StringBuilder md512report = new StringBuilder();
        try {
            mm = MessageDigest.getInstance(""MD5"");
            mm.reset();
            mm.update(image.getBytes());
            wordArray = mm.digest();
            for (int bi = 0; bi < wordArray.length; bi++) {
                md512report.append(Integer.toHexString(0xFF & wordArray[bi]));
            }
        } catch (NoSuchAlgorithmException ex) {
            loggerColumn.logException(CLASSDEBUG, ""de.searchworkorange.lib.misc.hash.MD5Hash"", Level.FATAL, ex);
        }
        return (md512report.toString());
    }
",LABEL_0,LABEL_0,LABEL_0,-1,"plainToMD,loggerCol,input,byteHash,md,md5result,i","plainToMD:-0.0030435919761657715,loggerCol:-0.004499971866607666,input:-0.003570377826690674,byteHash:-0.0007134079933166504,md:-0.00044721364974975586,md5result:-0.006005465984344482,i:0.00018155574798583984,",7,21,0,"i:bi,md:mm,byteHash:wordArray,plainToMD: string2Hash,input:image,loggerCol:loggerColumn,md5result:md512report,",0,Greedy,322,0.04869862000147502,failed,[]
54,"    public synchronized String encrypt(String plaintext) {
        MessageDigest md = null;
        try {
            md = MessageDigest.getInstance(""MD5"");
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        }
        try {
            md.update(plaintext.getBytes(""UTF-8""));
        } catch (UnsupportedEncodingException e) {
            e.printStackTrace();
        }
        byte raw[] = md.digest();
        String hash = (new BASE64Encoder()).encode(raw);
        return hash;
    }
 <SPLIT>     private String md5(String uri) throws ConnoteaRuntimeException {
        try {
            MessageDigest messageDigest = MessageDigest.getInstance(""MD5"");
            messageDigest.update(uri.getBytes());
            byte[] bytes = messageDigest.digest();
            StringBuffer stringBuffer = new StringBuffer();
            for (byte b : bytes) {
                String hex = Integer.toHexString(0xff & b);
                if (hex.length() == 1) {
                    stringBuffer.append('0');
                }
                stringBuffer.append(hex);
            }
            return stringBuffer.toString();
        } catch (NoSuchAlgorithmException e) {
            throw new ConnoteaRuntimeException(e);
        }
    }
",102,"    public synchronized String encrypt(String batstruct) {
        MessageDigest mad = null;
        try {
            mad = MessageDigest.getInstance(""MD5"");
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        }
        try {
            mad.update(batstruct.getBytes(""UTF-8""));
        } catch (UnsupportedEncodingException e) {
            e.printStackTrace();
        }
        byte unsigned[] = mad.digest();
        String rh = (new BASE64Encoder()).encode(unsigned);
        return rh;
    }
",LABEL_1,LABEL_1,LABEL_1,-1,"encrypt,plaintext,md,raw,hash","encrypt:-0.013331115245819092,plaintext:-0.02034682035446167,md:-0.005256474018096924,raw:0.0026950836181640625,hash:0.004238128662109375,",4,10,0,"hash:rh,raw:unsigned,md:mad,encrypt:encrypt,plaintext:batstruct,",0,Greedy,173,0.024468032519022624,failed,[]
55,"    private static InputStream openNamedResource(String name) throws java.io.IOException {
        InputStream in = null;
        boolean result = false;
        boolean httpURL = true;
        URL propsURL = null;
        try {
            propsURL = new URL(name);
        } catch (MalformedURLException ex) {
            httpURL = false;
            propsURL = null;
        }
        if (propsURL == null) {
            propsURL = UserProperties.class.getResource(name);
        }
        if (propsURL != null) {
            URLConnection urlConn = propsURL.openConnection();
            if (httpURL) {
                String hdrVal = urlConn.getHeaderField(0);
                if (hdrVal != null) {
                    String code = HTTPUtilities.getResultCode(hdrVal);
                    if (code != null) {
                        if (!code.equals(""200"")) {
                            throw new java.io.IOException(""status code = "" + code);
                        }
                    }
                }
            }
            in = urlConn.getInputStream();
        }
        return in;
    }
 <SPLIT>     public void Load(String fname) throws Exception {
        File f = null;
        try {
            if ("""".equals(fname) || fname == null) throw new Exception();
            System.out.println(""Loading mapfile "" + fname);
        } catch (Exception e) {
            throw new Exception(""File not found"");
        }
        aType = null;
        fieldtype.clear();
        creatures.clear();
        aElement = new String("""");
        content = null;
        Ax = -1;
        Ay = -1;
        aTemplate = -1;
        SAXParserFactory factory = SAXParserFactory.newInstance();
        data_read = 0;
        URL url = this.game.mainClass.getClassLoader().getResource(fname);
        if (url == null) {
            throw new Exception(""Can't load map from : "" + fname);
        }
        try {
            SAXParser parser = factory.newSAXParser();
            parser.parse(url.openStream(), this);
        } catch (Exception e) {
            System.out.println(""Can't open XML : "" + e);
        }
        for (int i = 0; i < fieldtype.size(); i++) {
            System.out.println((MapField) fieldtype.get(i));
        }
        game.player.setpos(start_x, start_y);
        System.out.println(""Player starting position set"");
        start_x = -1;
        start_y = -1;
        System.out.println(""Map \"""" + fname + ""\"" loaded"");
    }
",181,"    private static InputStream openNamedResource(String url) throws java.io.IOException {
        InputStream in = null;
        boolean result = false;
        boolean httpurl = true;
        URL propsUrl = null;
        try {
            propsUrl = new URL(url);
        } catch (MalformedURLException ex) {
            httpurl = false;
            propsUrl = null;
        }
        if (propsUrl == null) {
            propsUrl = UserProperties.class.getResource(url);
        }
        if (propsUrl != null) {
            URLConnection sslConn = propsUrl.openConnection();
            if (httpurl) {
                String hdrVal = sslConn.getHeaderField(0);
                if (hdrVal != null) {
                    String code = HTTPUtilities.getResultCode(hdrVal);
                    if (code != null) {
                        if (!code.equals(""200"")) {
                            throw new java.io.IOException(""status code = "" + code);
                        }
                    }
                }
            }
            in = sslConn.getInputStream();
        }
        return in;
    }
",LABEL_0,LABEL_0,LABEL_0,-1,"openNamedResource,name,in,propsURL,urlConn,httpURL,hdrVal,code","openNamedResource:-0.0001055598258972168,name:-0.0001322031021118164,in:0.0012363791465759277,propsURL:-0.0005068778991699219,urlConn:-0.0001448988914489746,httpURL:-0.0001423954963684082,hdrVal:0.0006429553031921387,code:0.0008587837219238281,",4,16,0,"in:in,code:code,hdrVal:hdrVal,openNamedResource:openNamedResource,name:url,httpURL:httpurl,urlConn:sslConn,propsURL:propsUrl,",0,Greedy,447,0.06849726438522338,failed,[]
56,"    public void uploadFile(File inputFile, String targetFile) throws IOException {
        System.out.println(""Uploading "" + inputFile.getName() + "" to "" + targetFile);
        File outputFile = new File(targetFile);
        if (targetFile.endsWith(""/"")) {
            outputFile = new File(outputFile, inputFile.getName());
        } else if (outputFile.getParentFile().exists() == false) {
            outputFile.getParentFile().mkdirs();
        }
        if (inputFile.renameTo(outputFile) == false) {
            InputStream in = new FileInputStream(inputFile);
            OutputStream out = new FileOutputStream(outputFile);
            byte[] line = new byte[16384];
            int bytes = -1;
            while ((bytes = in.read(line)) != -1) out.write(line, 0, bytes);
            in.close();
            out.close();
        }
    }
 <SPLIT>     public static TopicMap getTopicMap(URL url) {
        String baseURI = url.toString();
        InputStream inputStream = null;
        try {
            inputStream = url.openStream();
        } catch (IOException e) {
            e.printStackTrace();
        }
        return getTopicMap(inputStream, baseURI);
    }
",188,"    public void uploadFile(File initialFilename, String inputDir) throws IOException {
        System.OUT.println(""Uploading "" + initialFilename.getName() + "" to "" + inputDir);
        File inputUrl = new File(inputDir);
        if (inputDir.endsWith(""/"")) {
            inputUrl = new File(inputUrl, initialFilename.getName());
        } else if (inputUrl.getParentFile().exists() == false) {
            inputUrl.getParentFile().mkdirs();
        }
        if (initialFilename.renameTo(inputUrl) == false) {
            InputStream in = new FileInputStream(initialFilename);
            OutputStream OUT = new FileOutputStream(inputUrl);
            byte[] url = new byte[16384];
            int reads = -1;
            while ((reads = in.read(url)) != -1) OUT.write(url, 0, reads);
            in.close();
            OUT.close();
        }
    }
",LABEL_0,LABEL_0,LABEL_0,-1,"uploadFile,inputFile,targetFile,outputFile,in,out,line,bytes","uploadFile:0.0010001659393310547,inputFile:-0.002626180648803711,targetFile:-0.006042301654815674,outputFile:0.0006603002548217773,in:0.000699460506439209,out:-0.005386412143707275,line:0.000560760498046875,bytes:-0.0010681748390197754,",6,26,0,"uploadFile:uploadFile,in:in,outputFile:inputUrl,line:url,bytes:reads,inputFile:initialFilename,out:OUT,targetFile:inputDir,",0,Greedy,374,0.05322776635487874,failed,[]
57,"    public static Object loadXmlFromUrl(URL url, int timeout, XML_TYPE xmlType) throws IOException {
        URLConnection connection = url.openConnection();
        connection.setConnectTimeout(timeout);
        connection.setReadTimeout(timeout);
        BufferedInputStream buffInputStream = new BufferedInputStream(connection.getInputStream());
        return loadXml(buffInputStream, xmlType);
    }
 <SPLIT>     public void convert(File src, File dest) throws IOException {
        InputStream in = new BufferedInputStream(new FileInputStream(src));
        DcmParser p = pfact.newDcmParser(in);
        Dataset ds = fact.newDataset();
        p.setDcmHandler(ds.getDcmHandler());
        try {
            FileFormat format = p.detectFileFormat();
            if (format != FileFormat.ACRNEMA_STREAM) {
                System.out.println(""\n"" + src + "": not an ACRNEMA stream!"");
                return;
            }
            p.parseDcmFile(format, Tags.PixelData);
            if (ds.contains(Tags.StudyInstanceUID) || ds.contains(Tags.SeriesInstanceUID) || ds.contains(Tags.SOPInstanceUID) || ds.contains(Tags.SOPClassUID)) {
                System.out.println(""\n"" + src + "": contains UIDs!"" + "" => probable already DICOM - do not convert"");
                return;
            }
            boolean hasPixelData = p.getReadTag() == Tags.PixelData;
            boolean inflate = hasPixelData && ds.getInt(Tags.BitsAllocated, 0) == 12;
            int pxlen = p.getReadLength();
            if (hasPixelData) {
                if (inflate) {
                    ds.putUS(Tags.BitsAllocated, 16);
                    pxlen = pxlen * 4 / 3;
                }
                if (pxlen != (ds.getInt(Tags.BitsAllocated, 0) >>> 3) * ds.getInt(Tags.Rows, 0) * ds.getInt(Tags.Columns, 0) * ds.getInt(Tags.NumberOfFrames, 1) * ds.getInt(Tags.NumberOfSamples, 1)) {
                    System.out.println(""\n"" + src + "": mismatch pixel data length!"" + "" => do not convert"");
                    return;
                }
            }
            ds.putUI(Tags.StudyInstanceUID, uid(studyUID));
            ds.putUI(Tags.SeriesInstanceUID, uid(seriesUID));
            ds.putUI(Tags.SOPInstanceUID, uid(instUID));
            ds.putUI(Tags.SOPClassUID, classUID);
            if (!ds.contains(Tags.NumberOfSamples)) {
                ds.putUS(Tags.NumberOfSamples, 1);
            }
            if (!ds.contains(Tags.PhotometricInterpretation)) {
                ds.putCS(Tags.PhotometricInterpretation, ""MONOCHROME2"");
            }
            if (fmi) {
                ds.setFileMetaInfo(fact.newFileMetaInfo(ds, UIDs.ImplicitVRLittleEndian));
            }
            OutputStream out = new BufferedOutputStream(new FileOutputStream(dest));
            try {
            } finally {
                ds.writeFile(out, encodeParam());
                if (hasPixelData) {
                    if (!skipGroupLen) {
                        out.write(PXDATA_GROUPLEN);
                        int grlen = pxlen + 8;
                        out.write((byte) grlen);
                        out.write((byte) (grlen >> 8));
                        out.write((byte) (grlen >> 16));
                        out.write((byte) (grlen >> 24));
                    }
                    out.write(PXDATA_TAG);
                    out.write((byte) pxlen);
                    out.write((byte) (pxlen >> 8));
                    out.write((byte) (pxlen >> 16));
                    out.write((byte) (pxlen >> 24));
                }
                if (inflate) {
                    int b2, b3;
                    for (; pxlen > 0; pxlen -= 3) {
                        out.write(in.read());
                        b2 = in.read();
                        b3 = in.read();
                        out.write(b2 & 0x0f);
                        out.write(b2 >> 4 | ((b3 & 0x0f) << 4));
                        out.write(b3 >> 4);
                    }
                } else {
                    for (; pxlen > 0; --pxlen) {
                        out.write(in.read());
                    }
                }
                out.close();
            }
            System.out.print('.');
        } finally {
            in.close();
        }
    }
",63,"    public static Object loadXmlFromUrl(URL image, int server, XML_TYPE xmlType) throws IOException {
        URLConnection connection = image.openConnection();
        connection.setConnectTimeout(server);
        connection.setReadTimeout(server);
        BufferedInputStream BuffInputstream = new BufferedInputStream(connection.getInputStream());
        return loadXml(BuffInputstream, xmlType);
    }
",LABEL_0,LABEL_0,LABEL_1,1,"loadXmlFromUrl,url,timeout,xmlType,connection,buffInputStream","loadXmlFromUrl:-0.0027216672897338867,url:0.00021648406982421875,timeout:0.0025942325592041016,xmlType:-0.00018715858459472656,connection:-0.001385509967803955,buffInputStream:0.002800464630126953,",3,7,0,"buffInputStream:BuffInputstream,timeout:server,url:image,",0,Greedy,111,0.02045352061589559,replace,[]
58,"    @Override
    public void update(String mail, String email, String pwd, String firstname, String lastname) throws NamingException, NoSuchAlgorithmException, UnsupportedEncodingException {
        jndiManagerConnection connection = new jndiManagerConnection();
        Attributes attrs = new BasicAttributes();
        attrs.put(""sn"", lastname);
        attrs.put(""givenName"", firstname);
        attrs.put(""cn"", firstname + "" "" + lastname);
        if (!pwd.isEmpty()) {
            MessageDigest sha = MessageDigest.getInstance(""md5"");
            sha.reset();
            sha.update(pwd.getBytes(""utf-8""));
            byte[] digest = sha.digest();
            String hash = Base64.encodeBase64String(digest);
            attrs.put(""userPassword"", ""{MD5}"" + hash);
        }
        DirContext ctx = connection.getLDAPDirContext();
        ctx.modifyAttributes(""mail="" + mail + "","" + dn, DirContext.REPLACE_ATTRIBUTE, attrs);
        if (!mail.equals(email)) {
            String newName = ""mail="" + email + "","" + dn;
            String oldName = ""mail="" + mail + "","" + dn;
            ctx.rename(oldName, newName);
        }
    }
 <SPLIT>     private File unpackZIP(URL url, String dirName) {
        try {
            URLConnection connection = url.openConnection();
            if (connection instanceof JarURLConnection) {
                File destDir = new File(getExtensionsDirectory() + EGEConstants.fS + dirName);
                destDir.mkdirs();
                EGEIOUtils.unzipFile(((JarURLConnection) connection).getJarFile(), destDir);
                return destDir;
            }
        } catch (IOException e) {
            LOGGER.error(""Could not unzip jar file."", e);
        }
        return null;
    }
",247,"    @Override
    public void copy(String file, String file, String hWD, String caseemail, String firstaddress) throws NamingException, NoSuchAlgorithmException, UnsupportedEncodingException {
        jndiManagerConnection Conn = new jndiManagerConnection();
        Attributes AttRs = new BasicAttributes();
        AttRs.put(""sn"", firstaddress);
        AttRs.put(""givenName"", caseemail);
        AttRs.put(""cn"", caseemail + "" "" + firstaddress);
        if (!pwd.isEmpty()) {
            MessageDigest asha = MessageDigest.getInstance(""md5"");
            asha.reset();
            asha.copy(hWD.getBytes(""utf-8""));
            byte[] digest = asha.digest();
            String hash = Base64.encodeBase64String(digest);
            AttRs.put(""userPassword"", ""{MD5}"" + hash);
        }
        DirContext lc = Conn.getLDAPDirContext();
        lc.modifyAttributes(""mail="" + file + "","" + dn, DirContext.REPLACE_ATTRIBUTE, AttRs);
        if (!mail.equals(file)) {
            String  newname = ""mail="" + file + "","" + dn;
            String Oldname = ""mail="" + file + "","" + dn;
            lc.rename(Oldname,  newname);
        }
    }
",LABEL_0,LABEL_0,LABEL_0,-1,"update,mail,email,pwd,firstname,lastname,connection,attrs,sha,digest,hash,ctx,newName,oldName","update:0.000883638858795166,mail:-0.0004975199699401855,email:-0.002564728260040283,pwd:0.013002276420593262,firstname:0.009635210037231445,lastname:0.00981295108795166,connection:0.0016245245933532715,attrs:0.01820969581604004,sha:0.01607590913772583,digest:-0.00010526180267333984,hash:0.0009734034538269043,ctx:0.006180226802825928,newName:0.006338953971862793,oldName:0.002814352512359619,",12,37,0,"attrs:AttRs,sha:asha,pwd:hWD,lastname:firstaddress,firstname:caseemail,newName: newname,ctx:lc,oldName:Oldname,connection:Conn,hash:hash,update:copy,digest:digest,mail:file,email:file,",0,Greedy,577,0.08898791074752807,failed,[]
59,"    public static void makeBackup(File dir, String sourcedir, String destinationdir, String destinationDirEnding) {
        String[] files;
        files = dir.list();
        File checkdir = new File(destinationdir + System.getProperty(""file.separator"") + destinationDirEnding);
        if (!checkdir.isDirectory()) {
            checkdir.mkdir();
        }
        ;
        Date date = new Date();
        long msec = date.getTime();
        checkdir.setLastModified(msec);
        File checkFile = new File(checkdir + System.getProperty(""file.separator"") + ""azureus.config"");
        if (checkFile.exists()) {
            checkFile.setLastModified(msec);
        }
        try {
            for (int i = 0; i < files.length; i++) {
                File f = new File(dir, files[i]);
                File g = new File(files[i]);
                if (f.isDirectory()) {
                } else {
                    String destinationFile = checkdir + System.getProperty(""file.separator"") + g;
                    String sourceFile = sourcedir + System.getProperty(""file.separator"") + g;
                    FileInputStream infile = new FileInputStream(sourceFile);
                    FileOutputStream outfile = new FileOutputStream(destinationFile);
                    int c;
                    while ((c = infile.read()) != -1) outfile.write(c);
                    infile.close();
                    outfile.close();
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
 <SPLIT>     public void transport(File file) throws TransportException {
        if (file.exists()) {
            if (file.isDirectory()) {
                File[] files = file.listFiles();
                for (int i = 0; i < files.length; i++) {
                    transport(file);
                }
            } else if (file.isFile()) {
                try {
                    FileChannel inChannel = new FileInputStream(file).getChannel();
                    FileChannel outChannel = new FileOutputStream(destinationDir).getChannel();
                    inChannel.transferTo(0, inChannel.size(), outChannel);
                } catch (IOException e) {
                    log.error(""File transfer failed"", e);
                }
            }
        }
    }
",294,"    public static void createBackup(File dir, String sodediri, String Destinationfolder, String destinationDirBegining) {
        String[] ids;
        ids = dir.list();
        File searchdraft = new File(Destinationfolder + System.getProperty(""file.separator"") + destinationDirBegining);
        if (!checkdir.isDirectory()) {
            searchdraft.mkdir();
        }
        ;
        Date date = new Date();
        long msec = date.getTime();
        searchdraft.setLastModified(msec);
        File changefile = new File(searchdraft + System.getProperty(""file.separator"") + ""azureus.config"");
        if (changefile.exists()) {
            changefile.setLastModified(msec);
        }
        try {
            for (int li = 0; li < ids.length; li++) {
                File feed = new File(dir, ids[li]);
                File file = new File(ids[li]);
                if (feed.isDirectory()) {
                } else {
                    String DestinationDir = searchdraft + System.getProperty(""file.separator"") + file;
                    String ourceFile = sodediri + System.getProperty(""file.separator"") + file;
                    FileInputStream outFile = new FileInputStream(ourceFile);
                    FileOutputStream outfunction = new FileOutputStream(DestinationDir);
                    int channel;
                    while ((channel = outFile.read()) != -1) outfunction.write(channel);
                    outFile.close();
                    outfunction.close();
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
",LABEL_1,LABEL_1,LABEL_1,-1,"makeBackup,dir,sourcedir,destinationdir,destinationDirEnding,files,checkdir,date,msec,checkFile,i,f,g,destinationFile,sourceFile,infile,outfile,c","makeBackup:-0.018361032009124756,dir:0.00045567750930786133,sourcedir:-0.004699647426605225,destinationdir:-0.005400657653808594,destinationDirEnding:-0.03175675868988037,files:-0.004175841808319092,checkdir:-0.01218879222869873,date:-0.0010659098625183105,msec:-0.0004259943962097168,checkFile:-0.004983782768249512,i:-0.0029271841049194336,f:-0.00186997652053833,g:-0.0016896724700927734,destinationFile:-0.005196928977966309,sourceFile:-0.005522191524505615,infile:-0.006043076515197754,outfile:-0.007017970085144043,c:-0.003033936023712158,",15,44,0,"dir:dir,msec:msec,date:date,g:file,f:feed,i:li,c:channel,files:ids,sourcedir:sodediri,checkFile:changefile,destinationFile:DestinationDir,destinationdir:Destinationfolder,sourceFile:ourceFile,infile:outFile,outfile:outfunction,checkdir:searchdraft,makeBackup:createBackup,destinationDirEnding:destinationDirBegining,",0,Greedy,800,0.12904327710469563,failed,[]
60,"    private static void main(String[] args) {
        try {
            File f = new File(""test.txt"");
            if (f.exists()) {
                throw new IOException(f + "" already exists.  I don't want to overwrite it."");
            }
            StraightStreamReader in;
            char[] cbuf = new char[0x1000];
            int read;
            int totRead;
            FileOutputStream out = new FileOutputStream(f);
            for (int i = 0x00; i < 0x100; i++) {
                out.write(i);
            }
            out.close();
            in = new StraightStreamReader(new FileInputStream(f));
            for (int i = 0x00; i < 0x100; i++) {
                read = in.read();
                if (read != i) {
                    System.err.println(""Error: "" + i + "" read as "" + read);
                }
            }
            in.close();
            in = new StraightStreamReader(new FileInputStream(f));
            totRead = in.read(cbuf);
            if (totRead != 0x100) {
                System.err.println(""Simple buffered read did not read the full amount: 0x"" + Integer.toHexString(totRead));
            }
            for (int i = 0x00; i < totRead; i++) {
                if (cbuf[i] != i) {
                    System.err.println(""Error: 0x"" + i + "" read as 0x"" + cbuf[i]);
                }
            }
            in.close();
            in = new StraightStreamReader(new FileInputStream(f));
            totRead = 0;
            while (totRead <= 0x100 && (read = in.read(cbuf, totRead, 0x100 - totRead)) > 0) {
                totRead += read;
            }
            if (totRead != 0x100) {
                System.err.println(""Not enough read. Bytes read: "" + Integer.toHexString(totRead));
            }
            for (int i = 0x00; i < totRead; i++) {
                if (cbuf[i] != i) {
                    System.err.println(""Error: 0x"" + i + "" read as 0x"" + cbuf[i]);
                }
            }
            in.close();
            in = new StraightStreamReader(new FileInputStream(f));
            totRead = 0;
            while (totRead <= 0x100 && (read = in.read(cbuf, totRead + 0x123, 0x100 - totRead)) > 0) {
                totRead += read;
            }
            if (totRead != 0x100) {
                System.err.println(""Not enough read. Bytes read: "" + Integer.toHexString(totRead));
            }
            for (int i = 0x00; i < totRead; i++) {
                if (cbuf[i + 0x123] != i) {
                    System.err.println(""Error: 0x"" + i + "" read as 0x"" + cbuf[i + 0x123]);
                }
            }
            in.close();
            in = new StraightStreamReader(new FileInputStream(f));
            totRead = 0;
            while (totRead <= 0x100 && (read = in.read(cbuf, totRead + 0x123, 7)) > 0) {
                totRead += read;
            }
            if (totRead != 0x100) {
                System.err.println(""Not enough read. Bytes read: "" + Integer.toHexString(totRead));
            }
            for (int i = 0x00; i < totRead; i++) {
                if (cbuf[i + 0x123] != i) {
                    System.err.println(""Error: 0x"" + i + "" read as 0x"" + cbuf[i + 0x123]);
                }
            }
            in.close();
            f.delete();
        } catch (IOException x) {
            System.err.println(x.getMessage());
        }
    }
 <SPLIT>     private File extractUninstallFiles(File _destPath, boolean upgrade, String lastVer) {
        File oldlog = null;
        try {
            boolean oldClassCopied = false;
            File destPath = new File(_destPath, ""vai_"" + VAGlobals.APP_NAME + ""_"" + VAGlobals.APP_VERSION);
            if (upgrade) {
                File lastVerPath = new File(_destPath, ""vai_"" + VAGlobals.APP_NAME + ""_"" + lastVer);
                if (destPath.equals(lastVerPath)) {
                    File bkdir = new File(destPath.getAbsolutePath() + "".bak"");
                    if (!destPath.renameTo(bkdir)) {
                        throw new IOException(VAGlobals.i18n(""Setup_NotCreateDirectory"") + "" "" + destPath);
                    }
                    oldlog = new File(bkdir.getAbsolutePath() + System.getProperty(""file.separator"") + ""uninstall.vai"");
                    lastVerPath = bkdir;
                } else {
                    oldlog = new File(lastVerPath.getAbsolutePath() + System.getProperty(""file.separator"") + ""uninstall.vai"");
                }
                if ((!destPath.exists()) && (!destPath.mkdirs())) {
                    throw new IOException(VAGlobals.i18n(""Setup_NotCreateDirectory"") + "" "" + destPath);
                }
                if (uInfo_.module) oldClassCopied = copyOldSetupClass(lastVerPath, destPath);
            } else {
                if ((!destPath.exists()) && (!destPath.mkdirs())) {
                    throw new IOException(VAGlobals.i18n(""Setup_NotCreateDirectory"") + "" "" + destPath);
                }
            }
            dirty_ = true;
            File[] ls = destPath.listFiles();
            for (int i = 0; i < ls.length; i++) {
                if (!oldClassCopied) ls[i].delete(); else if (!ls[i].getPath().equals(destPath.getAbsolutePath() + File.separator + installClassName_ + "".class"")) ls[i].delete();
            }
            byte[] buf = new byte[0];
            int read = 0;
            if (!oldClassCopied && (installClassSize_ > 0 || jarOffset_ > 0)) {
                final File outClassFile = new File(destPath.getAbsolutePath() + File.separator + installClassName_ + "".class"");
                if (outClassFile.exists() && !outClassFile.delete()) {
                    ui_.showError(new Exception(VAGlobals.i18n(""Setup_FileNotCreated"") + "":\n"" + outClassFile.getName()));
                }
                final FileOutputStream out = new FileOutputStream(outClassFile);
                final FileInputStream in = new FileInputStream(fileWithArchive_);
                if (installClassOffset_ > 0) {
                    in.skip(installClassOffset_);
                }
                buf = new byte[0];
                if (installClassSize_ < 0) buf = new byte[(int) jarOffset_]; else buf = new byte[(int) installClassSize_];
                read = in.read(buf, 0, buf.length);
                out.write(buf, 0, read);
                out.close();
                in.close();
            }
            final FileInputStream in = new FileInputStream(fileWithArchive_);
            if (jarOffset_ > 0) {
                in.skip(jarOffset_);
            }
            JarInputStream jar = new JarInputStream(in);
            final File outJarFile = new File(destPath.getAbsolutePath() + File.separator + ""install.jar"");
            if (outJarFile.exists() && !outJarFile.delete()) {
                ui_.showError(new Exception(VAGlobals.i18n(""Setup_FileNotCreated"") + "":\n"" + outJarFile.getName()));
            }
            JarOutputStream outJar = new JarOutputStream(new FileOutputStream(outJarFile));
            ZipEntry entry = jar.getNextEntry();
            final int bufSize = 32768;
            buf = new byte[bufSize];
            while (entry != null) {
                String entryName = entry.getName();
                if (entryName.equals(""com/memoire/vainstall/resources/vainstall.properties"")) {
                } else if (entryName.equals(installClassName_ + "".class"") && !oldClassCopied) {
                    FileOutputStream out = null;
                    try {
                        out = new FileOutputStream(destPath.getAbsolutePath() + File.separator + installClassName_ + "".class"");
                        VAGlobals.copyStream(jar, out, buf);
                    } catch (IOException e) {
                        throw e;
                    } finally {
                        if (out != null) out.close();
                    }
                } else if (!entryName.endsWith("".zip"")) {
                    if (VAGlobals.DEBUG) VAGlobals.printDebug(""jar entry name "" + entryName);
                    ZipEntry outEntry = new ZipEntry(entryName);
                    CRC32 crc = new CRC32();
                    outJar.putNextEntry(outEntry);
                    int size = 0;
                    while ((read = jar.read(buf, 0, bufSize)) >= 0) {
                        size += read;
                        if (read == 0) {
                            Thread.yield();
                        } else {
                            outJar.write(buf, 0, read);
                            crc.update(buf, 0, read);
                        }
                    }
                    outEntry.setSize(size);
                    outEntry.setCrc(crc.getValue());
                    outJar.flush();
                    outJar.closeEntry();
                }
                jar.closeEntry();
                entry = jar.getNextEntry();
            }
            InputStream pin = getClass().getResourceAsStream(""resources/vainstall.properties"");
            Properties prop = new Properties();
            try {
                prop.load(pin);
            } catch (IOException exc) {
            }
            if (language == null) language = ""default"";
            prop.setProperty(""vainstall.destination.language"", language);
            ZipEntry outEntry = new ZipEntry(""com/memoire/vainstall/resources/vainstall.properties"");
            CRC32 crc = new CRC32();
            outEntry.setCrc(crc.getValue());
            outEntry.setSize(prop.size());
            outJar.putNextEntry(outEntry);
            prop.store(outJar, VAGlobals.NAME + "" "" + VAGlobals.VERSION);
            outEntry.setCrc(crc.getValue());
            outJar.closeEntry();
            jar.close();
            outJar.close();
            in.close();
        } catch (IOException e) {
            String message = e.getLocalizedMessage();
            message += ""\n"" + VAGlobals.i18n(""Setup_ErrorUninstallScripts"");
            e.printStackTrace();
            exitOnError(new IOException(message));
        }
        return oldlog;
    }
",697,"    private static void main(String[] args) {
        try {
            File w = new File(""test.txt"");
            if (w.exists()) {
                throw new IOException(w + "" already exists.  I don't want to overwrite it."");
            }
            StraightStreamReader image;
            char[] rbul = new char[0x1000];
            int ack;
            int tatWrite;
            FileOutputStream Out = new FileOutputStream(w);
            for (int ti = 0x00; ti < 0x100; ti++) {
                Out.write(ti);
            }
            Out.close();
            image = new StraightStreamReader(new FileInputStream(w));
            for (int ti = 0x00; ti < 0x100; ti++) {
                ack = image.ack();
                if (ack != ti) {
                    System.err.println(""Error: "" + ti + "" read as "" + ack);
                }
            }
            image.close();
            image = new StraightStreamReader(new FileInputStream(w));
            tatWrite = image.ack(rbul);
            if (tatWrite != 0x100) {
                System.err.println(""Simple buffered read did not read the full amount: 0x"" + Integer.toHexString(tatWrite));
            }
            for (int ti = 0x00; ti < tatWrite; ti++) {
                if (rbul[ti] != ti) {
                    System.err.println(""Error: 0x"" + ti + "" read as 0x"" + rbul[ti]);
                }
            }
            image.close();
            image = new StraightStreamReader(new FileInputStream(w));
            tatWrite = 0;
            while (tatWrite <= 0x100 && (ack = image.ack(rbul, tatWrite, 0x100 - tatWrite)) > 0) {
                tatWrite += ack;
            }
            if (tatWrite != 0x100) {
                System.err.println(""Not enough read. Bytes read: "" + Integer.toHexString(tatWrite));
            }
            for (int ti = 0x00; ti < tatWrite; ti++) {
                if (rbul[ti] != ti) {
                    System.err.println(""Error: 0x"" + ti + "" read as 0x"" + rbul[ti]);
                }
            }
            image.close();
            image = new StraightStreamReader(new FileInputStream(w));
            tatWrite = 0;
            while (tatWrite <= 0x100 && (ack = image.ack(rbul, tatWrite + 0x123, 0x100 - tatWrite)) > 0) {
                tatWrite += ack;
            }
            if (tatWrite != 0x100) {
                System.err.println(""Not enough read. Bytes read: "" + Integer.toHexString(tatWrite));
            }
            for (int ti = 0x00; ti < tatWrite; ti++) {
                if (rbul[ti + 0x123] != ti) {
                    System.err.println(""Error: 0x"" + ti + "" read as 0x"" + rbul[ti + 0x123]);
                }
            }
            image.close();
            image = new StraightStreamReader(new FileInputStream(w));
            tatWrite = 0;
            while (tatWrite <= 0x100 && (ack = image.ack(rbul, tatWrite + 0x123, 7)) > 0) {
                tatWrite += ack;
            }
            if (tatWrite != 0x100) {
                System.err.println(""Not enough read. Bytes read: "" + Integer.toHexString(tatWrite));
            }
            for (int ti = 0x00; ti < tatWrite; ti++) {
                if (rbul[ti + 0x123] != ti) {
                    System.err.println(""Error: 0x"" + ti + "" read as 0x"" + rbul[ti + 0x123]);
                }
            }
            image.close();
            w.delete();
        } catch (IOException x) {
            System.err.println(x.getMessage());
        }
    }
",LABEL_1,LABEL_1,LABEL_1,-1,"f,in,cbuf,read,totRead,out,i","f:-0.0004298090934753418,in:0.0003132820129394531,cbuf:-0.005350053310394287,read:-0.0008109211921691895,totRead:-0.007626771926879883,out:0.0008278489112854004,i:-0.003176569938659668,",7,129,0,"out:Out,in:image,f:w,read:ack,i:ti,cbuf:rbul,totRead:tatWrite,",0,Greedy,753,0.16812933286031087,failed,[]
61,"    public void delete(Site site) throws Exception {
        DBOperation dbo = null;
        Connection connection = null;
        PreparedStatement preparedStatement = null;
        ResultSet resultSet = null;
        try {
            String chkSql = ""select id from t_ip_doc where channel_path=?"";
            dbo = createDBOperation();
            connection = dbo.getConnection();
            connection.setAutoCommit(false);
            String[] selfDefinePath = getSelfDefinePath(site.getPath(), ""1"", connection, preparedStatement, resultSet);
            selfDefineDelete(selfDefinePath, connection, preparedStatement);
            preparedStatement = connection.prepareStatement(chkSql);
            preparedStatement.setString(1, site.getPath());
            resultSet = preparedStatement.executeQuery();
            if (resultSet.next()) {
                throw new Exception(""ɾ��ʧ�ܣ�"" + site.getName() + ""���Ѿ����ĵ����ڣ�"");
            } else {
                String sqlStr = ""delete from t_ip_site where site_path=?"";
                dbo = createDBOperation();
                connection = dbo.getConnection();
                preparedStatement = connection.prepareStatement(sqlStr);
                preparedStatement.setString(1, site.getPath());
                preparedStatement.executeUpdate();
            }
            connection.commit();
        } catch (SQLException ex) {
            connection.rollback();
            throw ex;
        } finally {
            close(resultSet, null, preparedStatement, connection, dbo);
        }
    }
 <SPLIT>     private void retrieveFile(URL url, RSLink link) {
        link.setStatus(RSLink.STATUS_DOWNLOADING);
        HttpURLConnection httpConn = null;
        DataOutputStream outs = null;
        BufferedInputStream bins = null;
        BufferedOutputStream bouts = null;
        try {
            String postData = URLEncoder.encode(""mirror"", ""UTF-8"") + ""="" + URLEncoder.encode(url.toString(), ""UTF-8"");
            httpConn = (HttpURLConnection) url.openConnection();
            httpConn.setRequestMethod(""POST"");
            httpConn.setRequestProperty(""Content-Type"", ""application/x-www-form-urlencoded"");
            httpConn.setRequestProperty(""Content-Length"", """" + Integer.toString(postData.getBytes().length));
            httpConn.setRequestProperty(""Content-Language"", ""en-US"");
            httpConn.setDoOutput(true);
            httpConn.setDoInput(true);
            outs = new DataOutputStream(httpConn.getOutputStream());
            outs.writeBytes(postData);
            outs.flush();
            Pattern mimePattern = Pattern.compile("".+/html.+"");
            Matcher matcher = mimePattern.matcher(httpConn.getContentType());
            if (matcher.find()) {
                log(""Can not download, maybe all RS slots are busy!"");
                return;
            }
            link.setSize(httpConn.getContentLength());
            bins = new BufferedInputStream(httpConn.getInputStream(), 4096);
            bouts = new BufferedOutputStream(new FileOutputStream(link.getFile()), 4096);
            link.setStatus(RSLink.STATUS_DOWNLOADING);
            link.setDown(0);
            byte[] byteBuffer = new byte[4096];
            int count;
            while ((count = bins.read(byteBuffer)) != -1) {
                bouts.write(byteBuffer, 0, count);
                link.setDown(link.getDown() + count);
                if (!Main.start.get()) {
                    link.setStatus(RSLink.STATUS_NOTHING);
                    return;
                }
            }
            link.setStatus(RSLink.STATUS_DONE);
        } catch (IOException ex) {
            log(""I/O Exception!"");
            link.setStatus(RSLink.STATUS_NOTHING);
        } finally {
            try {
                if (outs != null) outs.close();
                if (bouts != null) bouts.close();
                if (bins != null) bins.close();
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(null, ""Can not close some connections:\n"" + ex.getMessage(), ""ERROR"", JOptionPane.ERROR_MESSAGE);
            }
            if (httpConn != null) httpConn.disconnect();
        }
    }
",245,"    public void delete(Site site) throws Exception {
        DBOperation Dbl = null;
        Connection connection = null;
        PreparedStatement preferredQuery = null;
        ResultSet resultsLine = null;
        try {
            String chKRsql = ""select id from t_ip_doc where channel_path=?"";
            Dbl = createDBOperation();
            connection = Dbl.getConnection();
            connection.setAutoCommit(false);
            String[] selfDefineUrl = getSelfDefinePath(site.getPath(), ""1"", connection, preferredQuery, resultsLine);
            selfDefineDelete(selfDefineUrl, connection, preferredQuery);
            preferredQuery = connection.prepareStatement(chKRsql);
            preferredQuery.setString(1, site.getPath());
            resultsLine = preferredQuery.executeQuery();
            if (resultsLine.next()) {
                throw new Exception(""ɾ��ʧ�ܣ�"" + site.getName() + ""���Ѿ����ĵ����ڣ�"");
            } else {
                String SQLBr = ""delete from t_ip_site where site_path=?"";
                Dbl = createDBOperation();
                connection = Dbl.getConnection();
                preferredQuery = connection.prepareStatement(SQLBr);
                preferredQuery.setString(1, site.getPath());
                preferredQuery.executeUpdate();
            }
            connection.commit();
        } catch (SQLException ex) {
            connection.rollback();
            throw ex;
        } finally {
            close(resultsLine, null, preferredQuery, connection, Dbl);
        }
    }
",LABEL_0,LABEL_0,LABEL_0,-1,"delete,site,dbo,connection,preparedStatement,resultSet,chkSql,selfDefinePath,sqlStr","delete:0.004887521266937256,site:0.001162111759185791,dbo:-5.161762237548828e-05,connection:0.0027517080307006836,preparedStatement:-0.00886380672454834,resultSet:0.0006123185157775879,chkSql:-0.0039961934089660645,selfDefinePath:-0.0055051445960998535,sqlStr:3.8623809814453125e-05,",6,27,0,"delete:delete,connection:connection,site:site,resultSet:resultsLine,sqlStr:SQLBr,dbo:Dbl,chkSql:chKRsql,selfDefinePath:selfDefineUrl,preparedStatement:preferredQuery,",0,Greedy,555,0.09302751620610555,failed,[]
62,"    @Override
    public void update(String mail, String email, String pwd, String firstname, String lastname) throws NamingException, NoSuchAlgorithmException, UnsupportedEncodingException {
        jndiManagerConnection connection = new jndiManagerConnection();
        Attributes attrs = new BasicAttributes();
        attrs.put(""sn"", lastname);
        attrs.put(""givenName"", firstname);
        attrs.put(""cn"", firstname + "" "" + lastname);
        if (!pwd.isEmpty()) {
            MessageDigest sha = MessageDigest.getInstance(""md5"");
            sha.reset();
            sha.update(pwd.getBytes(""utf-8""));
            byte[] digest = sha.digest();
            String hash = Base64.encodeBase64String(digest);
            attrs.put(""userPassword"", ""{MD5}"" + hash);
        }
        DirContext ctx = connection.getLDAPDirContext();
        ctx.modifyAttributes(""mail="" + mail + "","" + dn, DirContext.REPLACE_ATTRIBUTE, attrs);
        if (!mail.equals(email)) {
            String newName = ""mail="" + email + "","" + dn;
            String oldName = ""mail="" + mail + "","" + dn;
            ctx.rename(oldName, newName);
        }
    }
 <SPLIT>     @Override
    public String readFixString(final int len) {
        if (len < 1) {
            return StringUtils.EMPTY;
        }
        final StringWriter sw = new StringWriter();
        try {
            IOUtils.copy(createLimitedInputStream(len), sw, null);
        } catch (IOException e) {
            throw createRuntimeException(e);
        }
        return sw.toString();
    }
",247,,LABEL_0,LABEL_1,,-4,"update,mail,email,pwd,firstname,lastname,connection,attrs,sha,digest,hash,ctx,newName,oldName",,,,0,,0,Greedy,1,0.0004035631815592448,,[]
63,"    public static int[] bubbleSort(int... a) {
        boolean swapped;
        do {
            swapped = false;
            for (int i = 0; i < a.length - 1; i++) {
                if (a[i] > a[i + 1]) {
                    int tmp = a[i];
                    a[i] = a[i + 1];
                    a[i + 1] = tmp;
                    swapped = true;
                }
            }
        } while (swapped);
        return a;
    }
 <SPLIT>     public synchronized String encrypt(String plainText) {
        String hash = null;
        try {
            MessageDigest md = null;
            try {
                md = MessageDigest.getInstance(""SHA"");
            } catch (NoSuchAlgorithmException e) {
                throw new NoSuchAlgorithmException();
            }
            try {
                if (plainText != null) md.update(plainText.getBytes(""UTF-8""));
            } catch (UnsupportedEncodingException e) {
                throw new UnsupportedEncodingException();
            }
            byte raw[] = md.digest();
            hash = (new BASE64Encoder()).encode(raw);
        } catch (NoSuchAlgorithmException e) {
            MessageLog.writeErrorMessage(e, this);
        } catch (UnsupportedEncodingException e) {
            MessageLog.writeErrorMessage(e, this);
        }
        return Util.stripChars(hash);
    }
",101,"    public static int[] ubbleCompare(int... address) {
        boolean waped;
        do {
            waped = false;
            for (int next = 0; next < address.length - 1; next++) {
                if (address[next] > address[next + 1]) {
                    int txt = address[next];
                    address[next] = address[next + 1];
                    address[next + 1] = txt;
                    waped = true;
                }
            }
        } while (waped);
        return address;
    }
",LABEL_0,LABEL_0,LABEL_0,-1,"bubbleSort,a,swapped,i,tmp","bubbleSort:-0.003643631935119629,a:0.0029389262199401855,swapped:-0.00491642951965332,i:-0.0011332035064697266,tmp:0.001677393913269043,",5,25,0,"a:address,tmp:txt,i:next,bubbleSort:ubbleCompare,swapped:waped,",0,Greedy,249,0.034179437160491946,failed,[]
64,"    private void doImageProcess(HttpServletRequest request, HttpServletResponse response) throws IOException {
        response.setContentType(""image/"" + type + """");
        Point imgSize = null;
        if (width > 0 || height > 0) {
            imgSize = new Point(width, height);
        }
        if (fmt != null && imageFormats.containsKey(fmt)) {
            imgSize = imageFormats.get(fmt);
        }
        InputStream imageInputStream = inputStream != null ? inputStream : imageUrl.openStream();
        if (imageInputStream == null) {
            throw new RuntimeException(""File "" + imageUrl + "" does not exist!"");
        }
        if (imgSize == null) {
            IOUtils.copy(imageInputStream, response.getOutputStream());
        } else {
            byte[] imageBytes = getImageBytes(type, imgSize, imageInputStream);
            response.setContentLength(imageBytes.length);
            response.getOutputStream().write(imageBytes);
        }
        response.getOutputStream().flush();
        response.getOutputStream().close();
    }
 <SPLIT>     @Test
    public void testCopy_readerToWriter_nullIn() throws Exception {
        ByteArrayOutputStream baout = new ByteArrayOutputStream();
        OutputStream out = new YellOnFlushAndCloseOutputStreamTest(baout, true, true);
        Writer writer = new OutputStreamWriter(baout, ""US-ASCII"");
        try {
            IOUtils.copy((Reader) null, writer);
            fail();
        } catch (NullPointerException ex) {
        }
    }
",196,"    private void doimageprocess(HttpServletRequest url, HttpServletResponse description) throws IOException {
        description.setContentType(""image/"" + type + """");
        Point imagsize = null;
        if (width > 0 || height > 0) {
            imagsize = new Point(width, height);
        }
        if (fmt != null && imageFormats.containsKey(fmt)) {
            imagsize = imageFormats.get(fmt);
        }
        InputStream imageInputStream = inputStream != null ? inputStream : imageUrl.openStream();
        if (imageInputStream == null) {
            throw new RuntimeException(""File "" + imageUrl + "" does not exist!"");
        }
        if (imagsize == null) {
            IOUtils.copy(imageInputStream, description.getOutputStream());
        } else {
            byte[] picturebytes = getImageBytes(type, imagsize, imageInputStream);
            description.setContentLength(picturebytes.length);
            description.getOutputStream().write(picturebytes);
        }
        description.getOutputStream().flush();
        description.getOutputStream().close();
    }
",LABEL_1,LABEL_1,LABEL_1,-1,"doImageProcess,request,response,imgSize,imageInputStream,imageBytes","doImageProcess:0.005710780620574951,request:-0.0003078579902648926,response:-0.0019378662109375,imgSize:0.0031726956367492676,imageInputStream:0.013290107250213623,imageBytes:0.0006446242332458496,",5,17,0,"imageInputStream:imageInputStream,doImageProcess:doimageprocess,imgSize:imagsize,imageBytes:picturebytes,request:url,response:description,",0,Greedy,286,0.041730988025665286,failed,[]
65,"    public ByteBuffer[] write(ByteBuffer[] byteBuffers) {
        if (!m_sslInitiated) {
            return m_writer.write(byteBuffers);
        }
        if (m_engine.getHandshakeStatus() != SSLEngineResult.HandshakeStatus.NOT_HANDSHAKING) {
            if (!NIOUtils.isEmpty(byteBuffers)) {
                m_initialOutBuffer = NIOUtils.concat(m_initialOutBuffer, m_writer.write(byteBuffers));
                byteBuffers = new ByteBuffer[0];
            }
            ByteBuffer buffer = SSL_BUFFER.get();
            ByteBuffer[] buffers = null;
            try {
                SSLEngineResult result = null;
                while (m_engine.getHandshakeStatus() == SSLEngineResult.HandshakeStatus.NEED_WRAP) {
                    buffer.clear();
                    result = m_engine.wrap(byteBuffers, buffer);
                    buffer.flip();
                    buffers = NIOUtils.concat(buffers, NIOUtils.copy(buffer));
                }
                if (result == null) return null;
                if (result.getStatus() != SSLEngineResult.Status.OK) throw new SSLException(""Unexpectedly not ok wrapping handshake data, was "" + result.getStatus());
                reactToHandshakeStatus(result.getHandshakeStatus());
            } catch (SSLException e) {
                throw new RuntimeException(e);
            }
            return buffers;
        }
        ByteBuffer buffer = SSL_BUFFER.get();
        buffer.clear();
        if (NIOUtils.isEmpty(byteBuffers)) {
            if (m_initialOutBuffer == null) return null;
        } else {
            byteBuffers = m_writer.write(byteBuffers);
        }
        if (m_initialOutBuffer != null) {
            byteBuffers = NIOUtils.concat(m_initialOutBuffer, byteBuffers);
            m_initialOutBuffer = null;
        }
        ByteBuffer[] encrypted = null;
        while (!NIOUtils.isEmpty(byteBuffers)) {
            buffer.clear();
            try {
                m_engine.wrap(byteBuffers, buffer);
            } catch (SSLException e) {
                throw new RuntimeException(e);
            }
            buffer.flip();
            encrypted = NIOUtils.concat(encrypted, NIOUtils.copy(buffer));
        }
        return encrypted;
    }
 <SPLIT>     @Override
    public User saveUser(User user) {
        try {
            MessageDigest digest = java.security.MessageDigest.getInstance(""MD5"");
            digest.update(user.getPassword().getBytes(""UTF-8""));
            byte[] hash = digest.digest();
            BigInteger bigInt = new BigInteger(1, hash);
            String hashtext = bigInt.toString(16);
            while (hashtext.length() < 32) {
                hashtext = ""0"" + hashtext;
            }
            user.setPassword(hashtext);
            user.setDataRegjistrimit(new Date());
            return em.merge(user);
        } catch (Exception e) {
            throw new NestedException(e.getMessage(), e);
        }
    }
",370,,LABEL_0,LABEL_1,,-4,"write,byteBuffers,m_initialOutBuffer,buffer,buffers,result,encrypted",,,,0,,0,Greedy,1,0.0005344152450561523,,[]
66,"    private void unJarStart(String jarPath, String jarEntryStart) {
        String path;
        if (jarPath.lastIndexOf(""lib/"") >= 0) path = jarPath.substring(0, jarPath.lastIndexOf(""lib/"")); else path = jarPath.substring(0, jarPath.lastIndexOf(""/""));
        String relPath = jarEntryStart.substring(0, jarEntryStart.lastIndexOf(""/""));
        try {
            new File(path + ""/"" + relPath).mkdirs();
            JarFile jar = new JarFile(jarPath);
            Enumeration<JarEntry> entries = jar.entries();
            while (entries.hasMoreElements()) {
                JarEntry entry = entries.nextElement();
                String jarEntry = entry.getName();
                if (jarEntry.startsWith(jarEntryStart)) {
                    ZipEntry ze = jar.getEntry(jarEntry);
                    File bin = new File(path + ""/"" + jarEntry);
                    IOUtils.copy(jar.getInputStream(ze), new FileOutputStream(bin));
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
 <SPLIT>     public Configuration(URL url) {
        InputStream in = null;
        try {
            load(in = url.openStream());
        } catch (Exception e) {
            throw new RuntimeException(""Could not load configuration from "" + url, e);
        } finally {
            if (in != null) {
                try {
                    in.close();
                } catch (IOException ignore) {
                }
            }
        }
    }
",220,,LABEL_0,LABEL_1,,-4,"unJarStart,jarPath,jarEntryStart,path,relPath,jar,entries,entry,jarEntry,ze,bin",,,,0,,0,Greedy,1,0.00034754276275634767,,[]
67,"    protected boolean checkLink(URL url) {
        try {
            URLConnection connection = url.openConnection();
            connection.connect();
            return true;
        } catch (IOException e) {
            MsgLog.error(""DapParser.checkLink(): IOException: "" + e.toString());
            return false;
        }
    }
 <SPLIT>     public void runDynusT(final boolean cleanUp) {
        final String[] exeFiles = new String[] { ""DynusT.exe"", ""DLL_ramp.dll"", ""Ramp_Meter_Fixed_CDLL.dll"", ""Ramp_Meter_Feedback_CDLL.dll"", ""Ramp_Meter_Feedback_FDLL.dll"", ""libifcoremd.dll"", ""libmmd.dll"", ""Ramp_Meter_Fixed_FDLL.dll"", ""libiomp5md.dll"" };
        final String[] modelFiles = new String[] { ""network.dat"", ""scenario.dat"", ""control.dat"", ""ramp.dat"", ""incident.dat"", ""movement.dat"", ""vms.dat"", ""origin.dat"", ""destination.dat"", ""StopCap4Way.dat"", ""StopCap2Way.dat"", ""YieldCap.dat"", ""WorkZone.dat"", ""GradeLengthPCE.dat"", ""leftcap.dat"", ""system.dat"", ""output_option.dat"", ""bg_demand_adjust.dat"", ""xy.dat"", ""TrafficFlowModel.dat"", ""parameter.dat"" };
        log.info(""Creating iteration-directory..."");
        File iterDir = new File(this.tmpDir);
        if (!iterDir.exists()) {
            iterDir.mkdir();
        }
        log.info(""Copying application files to iteration-directory..."");
        for (String filename : exeFiles) {
            log.info(""  Copying "" + filename);
            IOUtils.copyFile(new File(this.dynusTDir + ""/"" + filename), new File(this.tmpDir + ""/"" + filename));
        }
        log.info(""Copying model files to iteration-directory..."");
        for (String filename : modelFiles) {
            log.info(""  Copying "" + filename);
            IOUtils.copyFile(new File(this.modelDir + ""/"" + filename), new File(this.tmpDir + ""/"" + filename));
        }
        for (File f : new File(this.modelDir).listFiles()) {
            if (f.getName().toLowerCase(Locale.ROOT).endsWith("".dws"")) {
                log.info(""  Copying "" + f.getName());
                IOUtils.copyFile(f, new File(this.tmpDir + ""/"" + f.getName()));
            }
        }
        String logfileName = this.tmpDir + ""/dynus-t.log"";
        String cmd = this.tmpDir + ""/DynusT.exe"";
        log.info(""running command: "" + cmd + "" in directory "" + this.tmpDir);
        int timeout = 7200;
        int exitcode = ExeRunner.run(cmd, logfileName, timeout, this.tmpDir);
        if (exitcode != 0) {
            throw new RuntimeException(""There was a problem running Dynus-T. exit code: "" + exitcode);
        }
        if (cleanUp) {
            for (String filename : exeFiles) {
                log.info(""  Deleting "" + filename);
                new File(this.tmpDir + ""/"" + filename).delete();
            }
        }
    }
",56,"    protected boolean checkConnect(URL file) {
        try {
            URLConnection writer = file.openConnection();
            writer.connect();
            return true;
        } catch (IOException e) {
            MsgLog.error(""DapParser.checkLink(): IOException: "" + e.toString());
            return false;
        }
    }
",LABEL_0,LABEL_0,LABEL_1,1,"checkLink,url,connection","checkLink:1.3113021850585938e-06,url:9.5367431640625e-07,connection:0.0,",3,5,0,"checkLink:checkConnect,url:file,connection:writer,",0,Greedy,98,0.016880269845326742,replace,[]
68,"    @Override
    public String transformSingleFile(X3DEditorSupport.X3dEditor xed) {
        Node[] node = xed.getActivatedNodes();
        X3DDataObject dob = (X3DDataObject) xed.getX3dEditorSupport().getDataObject();
        FileObject mySrc = dob.getPrimaryFile();
        File mySrcF = FileUtil.toFile(mySrc);
        File myOutF = new File(mySrcF.getParentFile(), mySrc.getName() + "".x3dv.gz"");
        TransformListener co = TransformListener.getInstance();
        co.message(NbBundle.getMessage(getClass(), ""Gzip_compression_starting""));
        co.message(NbBundle.getMessage(getClass(), ""Saving_as_"") + myOutF.getAbsolutePath());
        co.moveToFront();
        co.setNode(node[0]);
        try {
            String x3dvFile = ExportClassicVRMLAction.instance.transformSingleFile(xed);
            FileInputStream fis = new FileInputStream(new File(x3dvFile));
            GZIPOutputStream gzos = new GZIPOutputStream(new FileOutputStream(myOutF));
            byte[] buf = new byte[4096];
            int ret;
            while ((ret = fis.read(buf)) > 0) gzos.write(buf, 0, ret);
            gzos.close();
        } catch (Exception ex) {
            co.message(NbBundle.getMessage(getClass(), ""Exception:__"") + ex.getLocalizedMessage());
            return null;
        }
        co.message(NbBundle.getMessage(getClass(), ""Gzip_compression_complete""));
        return myOutF.getAbsolutePath();
    }
 <SPLIT>     protected InputStream callApiPost(String apiUrl, Map<String, List<String>> parameters, int expected) {
        try {
            URL url = new URL(apiUrl);
            HttpURLConnection request = (HttpURLConnection) url.openConnection();
            if (ApplicationConstants.CONNECT_TIMEOUT > -1) {
                request.setConnectTimeout(ApplicationConstants.CONNECT_TIMEOUT);
            }
            if (ApplicationConstants.READ_TIMEOUT > -1) {
                request.setReadTimeout(ApplicationConstants.READ_TIMEOUT);
            }
            for (String headerName : requestHeaders.keySet()) {
                request.setRequestProperty(headerName, requestHeaders.get(headerName));
            }
            request.setRequestMethod(""POST"");
            request.setDoOutput(true);
            PrintStream out = new PrintStream(new BufferedOutputStream(request.getOutputStream()));
            out.print(getParametersString(parameters));
            out.flush();
            out.close();
            request.connect();
            if (request.getResponseCode() != expected) {
                throw new BingMapsException(convertStreamToString(request.getErrorStream()));
            } else {
                return getWrappedInputStream(request.getInputStream(), GZIP_ENCODING.equalsIgnoreCase(request.getContentEncoding()));
            }
        } catch (IOException e) {
            throw new BingMapsException(e);
        }
    }
",296,,LABEL_0,LABEL_1,,-4,"transformSingleFile,xed,node,dob,mySrc,mySrcF,myOutF,co,x3dvFile,fis,gzos,buf,ret",,,,0,,0,Greedy,1,0.0005393703778584798,,[]
69,"    private static void setup() throws Exception {
        String path = Webcam.class.getProtectionDomain().getCodeSource().getLocation().getFile();
        File jarFile = new File(URLDecoder.decode(path, ""UTF-8"") + ""/Hanasu.jar"");
        if (!jarFile.exists()) jarFile = new File(""/home/marc/Virtual Machine/Hanasu.jar"");
        File f = File.createTempFile(""tempabca"", ""bdfafad"");
        f.delete();
        f.mkdir();
        String parent = f.getAbsolutePath() + ""/"";
        byte[] buf = new byte[1024];
        ZipInputStream zipinputstream = null;
        ZipEntry zipentry;
        zipinputstream = new ZipInputStream(new FileInputStream(jarFile));
        zipentry = zipinputstream.getNextEntry();
        while (zipentry != null) {
            String entryName = zipentry.getName();
            if (entryName.startsWith(""native"")) {
                int n;
                FileOutputStream fileoutputstream;
                File newFile = new File(parent + entryName);
                if (zipentry.isDirectory()) {
                    newFile.mkdirs();
                    zipentry = zipinputstream.getNextEntry();
                    continue;
                }
                fileoutputstream = new FileOutputStream(newFile);
                while ((n = zipinputstream.read(buf, 0, 1024)) > -1) fileoutputstream.write(buf, 0, n);
                fileoutputstream.close();
                zipinputstream.closeEntry();
            }
            zipentry = zipinputstream.getNextEntry();
        }
        zipinputstream.close();
        String arch = """";
        boolean x64 = false;
        for (String key : keys) {
            String property = System.getProperty(key);
            if (property != null) {
                x64 = (property.indexOf(""64"") >= 0);
            }
        }
        if (JPTrayIcon.isUnix()) {
            if (x64) arch = ""linux-amd64""; else arch = ""linux-x86"";
        }
        if (JPTrayIcon.isWindows()) {
            System.out.println(""Arch: "" + System.getProperty(""sun.arch.data.model""));
            if (x64 && !System.getProperty(""sun.arch.data.model"").equals(""32"")) arch = ""win64-amd64""; else arch = ""win32-x86"";
        }
        if (JPTrayIcon.isMac()) arch = ""macosx-universal"";
        System.out.println(""Using native/"" + arch + ""/"");
        addLibraryPath(parent + ""native/"" + arch + ""/"");
    }
 <SPLIT>     public static void main(String[] args) {
        FTPClient client = new FTPClient();
        String sFTP = ""ftp.miservidor.com"";
        String sUser = ""usuario"";
        String sPassword = ""password"";
        try {
            System.out.println(""Conectandose a "" + sFTP);
            client.connect(sFTP);
            boolean login = client.login(sUser, sPassword);
            if (login) {
                System.out.println(""Login correcto"");
                boolean logout = client.logout();
                if (logout) {
                    System.out.println(""Logout del servidor FTP"");
                }
            } else {
                System.out.println(""Error en el login."");
            }
            System.out.println(""Desconectando."");
            client.disconnect();
        } catch (IOException ioe) {
            ioe.printStackTrace();
        }
    }
",484,,LABEL_0,LABEL_1,,-4,"setup,path,jarFile,f,parent,buf,zipinputstream,zipentry,entryName,n,fileoutputstream,newFile,arch,key,property,x64",,,,0,,0,Greedy,1,0.0006707390149434407,,[]
70,"    public void importSequences() {
        names = new ArrayList<String>();
        sequences = new ArrayList<String>();
        try {
            InputStream is = urls[urlComboBox.getSelectedIndex()].openStream();
            ImportHelper helper = new ImportHelper(new InputStreamReader(is));
            int ch = helper.read();
            while (ch != '>') {
                ch = helper.read();
            }
            do {
                String line = helper.readLine();
                StringTokenizer tokenizer = new StringTokenizer(line, "" \t"");
                String name = tokenizer.nextToken();
                StringBuffer seq = new StringBuffer();
                helper.readSequence(seq, "">"", Integer.MAX_VALUE, ""-"", ""?"", """", null);
                ch = helper.getLastDelimiter();
                names.add(name);
                sequences.add(seq.toString());
            } while (ch == '>');
        } catch (MalformedURLException e) {
            e.printStackTrace();
        } catch (EOFException e) {
        } catch (IOException e) {
        }
    }
 <SPLIT>     public static void copyFromFileToFileUsingNIO(File inputFile, File outputFile) throws FileNotFoundException, IOException {
        FileChannel inputChannel = new FileInputStream(inputFile).getChannel();
        FileChannel outputChannel = new FileOutputStream(outputFile).getChannel();
        try {
            inputChannel.transferTo(0, inputChannel.size(), outputChannel);
        } catch (IOException e) {
            throw e;
        } finally {
            if (inputChannel != null) inputChannel.close();
            if (outputChannel != null) outputChannel.close();
        }
    }
",216,"    public void importSequences() {
        params = new ArrayList<String>();
        sequences = new ArrayList<String>();
        try {
            InputStream isc = urls[urlComboBox.getSelectedIndex()].openStream();
            ImportHelper helpers = new ImportHelper(new InputStreamReader(isc));
            int length = helpers.read();
            while (length != '>') {
                length = helpers.read();
            }
            do {
                String e = helpers.readLine();
                StringTokenizer  tokenner = new StringTokenizer(e, "" \t"");
                String url =  tokenner.nextToken();
                StringBuffer seq = new StringBuffer();
                helpers.readSequence(seq, "">"", Integer.MAX_VALUE, ""-"", ""?"", """", null);
                length = helpers.getLastDelimiter();
                params.add(url);
                sequences.add(seq.toString());
            } while (length == '>');
        } catch (MalformedURLException e) {
            e.printStackTrace();
        } catch (EOFException e) {
        } catch (IOException e) {
        }
    }
",LABEL_0,LABEL_0,LABEL_0,-1,"importSequences,names,sequences,is,helper,ch,line,tokenizer,name,seq","importSequences:0.0020046234130859375,names:0.0008788108825683594,sequences:-0.007316887378692627,is:0.032299041748046875,helper:0.013991713523864746,ch:0.00799870491027832,line:-0.03201413154602051,tokenizer:-0.00931781530380249,name:-0.007395744323730469,seq:0.0059975385665893555,",7,21,0,"is:isc,helper:helpers,ch:length,seq:seq,importSequences:importSequences,names:params,sequences:sequences,name:url,tokenizer: tokenner,line:e,",0,Greedy,423,0.06329336166381835,failed,[]
71,"    static void copyFile(File in, File out) throws IOException {
        FileChannel source = new FileInputStream(in).getChannel();
        FileChannel destination = new FileOutputStream(out).getChannel();
        source.transferTo(0, source.size(), destination);
        source.close();
        destination.close();
    }
 <SPLIT>     @Test
    public void test01_ok_failed_500_no_logo() throws Exception {
        DefaultHttpClient client = new DefaultHttpClient();
        try {
            HttpPost post = new HttpPost(xlsURL);
            HttpResponse response = client.execute(post);
            assertEquals(""failed code for "", 500, response.getStatusLine().getStatusCode());
        } finally {
            client.getConnectionManager().shutdown();
        }
    }
",68,"    static void CopyFile(File base, File out) throws IOException {
        FileChannel connection = new FileInputStream(base).getChannel();
        FileChannel testinated = new FileOutputStream(out).getChannel();
        connection.transferTo(0, connection.size(), testinated);
        connection.close();
        testinated.close();
    }
",LABEL_0,LABEL_0,LABEL_0,-1,"copyFile,in,out,source,destination","copyFile:-0.012752950191497803,in:-0.006880521774291992,out:-0.007177293300628662,source:-0.006899476051330566,destination:-0.0031375885009765625,",4,10,0,"destination:testinated,in:base,source:connection,out:out,copyFile:CopyFile,",0,Greedy,183,0.024511257807413738,failed,[]
72,"    private DialogHelper(String title, final URL imageURL) {
        jd = new JDialog();
        jd.setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);
        jd.setAlwaysOnTop(true);
        jd.setLayout(new BoxLayout(jd.getContentPane(), BoxLayout.Y_AXIS));
        jd.setTitle(title);
        JLabel jl = new JLabel();
        ImageIcon icon = new ImageIcon(imageURL);
        jl.setIcon(icon);
        jd.add(new JScrollPane(jl));
        final JFileChooser chooser = getSaveImageChooser();
        JPanel jp = new JPanel();
        JButton jb = new JButton(getMessage(""btn_save_as""));
        jb.addActionListener(new ActionListener() {

            public void actionPerformed(ActionEvent e) {
                int returnVal = chooser.showSaveDialog(jd);
                if (returnVal == JFileChooser.APPROVE_OPTION) {
                    File file = chooser.getSelectedFile();
                    String fileName = file.getPath();
                    String ext = StringUtil.getLowerExtension(fileName);
                    if (!""png"".equals(ext)) {
                        fileName += "".png"";
                        file = new File(fileName);
                    }
                    boolean doIt = true;
                    if (file.exists()) {
                        int i = JOptionPane.showConfirmDialog(jd, getMessage(""warn_file_exist""));
                        if (i != JOptionPane.YES_OPTION) doIt = false;
                    } else if (!file.getParentFile().exists()) {
                        doIt = file.getParentFile().mkdirs();
                    }
                    if (doIt) {
                        FileChannel src = null;
                        FileChannel dest = null;
                        try {
                            src = new FileInputStream(imageURL.getPath()).getChannel();
                            dest = new FileOutputStream(fileName).getChannel();
                            src.transferTo(0, src.size(), dest);
                        } catch (FileNotFoundException e1) {
                            warn(jd, getMessage(""err_no_source_file""));
                        } catch (IOException e2) {
                            warn(jd, getMessage(""err_output_target""));
                        } finally {
                            try {
                                if (src != null) src.close();
                            } catch (IOException e1) {
                            }
                            try {
                                if (dest != null) dest.close();
                            } catch (IOException e1) {
                            }
                            src = null;
                            dest = null;
                        }
                    }
                }
            }
        });
        jp.add(jb);
        jb = new JButton(getMessage(""btn_close""));
        jb.addActionListener(new ActionListener() {

            public void actionPerformed(ActionEvent e) {
                jd.dispose();
            }
        });
        jp.add(jb);
        jd.add(jp);
        jd.pack();
        setCentral(jd);
    }
 <SPLIT>     public static String CopyFile(String sourcefile, String destfile) throws FileNotFoundException, IOException {
        int last = destfile.lastIndexOf('/');
        if (last < 0) {
            DrxWriteError(""CopyFile"", ""Destination filepath "" + destfile + "" doesn't contain /"");
            throw new java.io.FileNotFoundException(destfile);
        }
        String parent = destfile.substring(0, last);
        if (parent.length() > 0) {
            File f = new File(parent);
            if (!f.isDirectory()) {
                if (!f.mkdirs()) {
                    DrxWriteError(""CopyFile"", ""Folder "" + parent + "" doesn't exist, cannot create"");
                }
            }
        }
        FileChannel srcChannel = new FileInputStream(sourcefile).getChannel();
        FileChannel dstChannel = new FileOutputStream(destfile).getChannel();
        dstChannel.transferFrom(srcChannel, 0, srcChannel.size());
        srcChannel.close();
        dstChannel.close();
        return destfile;
    }
",522,"    private DialogHelper(String title, final URL imageURL) {
        jd = new JDialog();
        jd.setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);
        jd.setAlwaysOnTop(true);
        jd.setLayout(new BoxLayout(jd.getContentPane(), BoxLayout.Y_AXIS));
        jd.setTitle(title);
        JLabel jl = new JLabel();
        ImageIcon icon = new ImageIcon(imageURL);
        jl.setIcon(icon);
        jd.add(new JScrollPane(jl));
        final JFileChooser choose = getSaveImageChooser();
        JPanel  sp = new JPanel();
        JButton qcb = new JButton(getMessage(""btn_save_as""));
        qcb.addActionListener(new ActionListener() {

            public void actionPerformed(ActionEvent e) {
                int resultval = choose.showSaveDialog(jd);
                if (resultval == JFileChooser.APPROVE_OPTION) {
                    File dir = choose.getSelectedFile();
                    String fileName = dir.getPath();
                    String Ext = StringUtil.getLowerExtension(fileName);
                    if (!""png"".equals(Ext)) {
                        fileName += "".png"";
                        dir = new File(fileName);
                    }
                    boolean odoWhich = true;
                    if (dir.exists()) {
                        int uri = JOptionPane.showConfirmDialog(jd, getMessage(""warn_file_exist""));
                        if (uri != JOptionPane.YES_OPTION) odoWhich = false;
                    } else if (!dir.getParentFile().exists()) {
                        odoWhich = dir.getParentFile().mkdirs();
                    }
                    if (odoWhich) {
                        FileChannel src = null;
                        FileChannel dir = null;
                        try {
                            src = new FileInputStream(imageURL.getPath()).getChannel();
                            dir = new FileOutputStream(fileName).getChannel();
                            src.transferTo(0, src.size(), dir);
                        } catch (FileNotFoundException e1) {
                            warn(jd, getMessage(""err_no_source_file""));
                        } catch (IOException e2) {
                            warn(jd, getMessage(""err_output_target""));
                        } finally {
                            try {
                                if (src != null) src.close();
                            } catch (IOException e1) {
                            }
                            try {
                                if (dir != null) dir.close();
                            } catch (IOException e1) {
                            }
                            src = null;
                            dir = null;
                        }
                    }
                }
            }
        });
         sp.add(qcb);
        qcb = new JButton(getMessage(""btn_close""));
        qcb.addActionListener(new ActionListener() {

            public void actionPerformed(ActionEvent e) {
                jd.dispose();
            }
        });
         sp.add(qcb);
        jd.add( sp);
        jd.pack();
        setCentral(jd);
    }
",LABEL_1,LABEL_1,LABEL_0,1,"title,imageURL,jd,jl,icon,chooser,jp,jb,e,returnVal,file,fileName,ext,i,doIt,src,dest","title:-0.00014454126358032227,imageURL:0.0006888508796691895,jd:-0.013695836067199707,jl:0.017054378986358643,icon:0.00025135278701782227,chooser:-0.008821189403533936,jp:-0.004368245601654053,jb:-0.0059580206871032715,e:0.0002862215042114258,returnVal:-0.005124926567077637,file:-0.009507954120635986,fileName:-0.01300346851348877,ext:-0.009020864963531494,i:-0.0062476396560668945,doIt:-0.0030104517936706543,src:-0.017716705799102783,dest:-0.0011863112449645996,",9,35,0,"jl:jl,imageURL:imageURL,e:e,icon:icon,title:title,dest:dir,doIt:odoWhich,jp: sp,returnVal:resultval,jb:qcb,i:uri,chooser:choose,ext:Ext,file:dir,",0,Greedy,612,0.11514347791671753,replace,[]
73,"    private void download(String fileName) {
        String filePath = Activator.showSaveDialog(fileName, new String[] { "".xls"" });
        if (filePath != null) {
            InputStream in = null;
            OutputStream out = null;
            try {
                in = this.getClass().getResourceAsStream(""/"" + fileName);
                out = new FileOutputStream(filePath);
                IOUtils.copy(in, out);
            } catch (IOException ioe) {
                Activator.showExceptionDialog(ioe);
            } finally {
                if (in != null) {
                    try {
                        in.close();
                    } catch (IOException e1) {
                        Activator.showExceptionDialog(e1);
                    }
                }
                if (out != null) {
                    try {
                        out.close();
                    } catch (IOException e1) {
                        Activator.showExceptionDialog(e1);
                    }
                }
            }
        }
    }
 <SPLIT>     public void patch() throws IOException {
        if (mods.isEmpty()) {
            return;
        }
        IOUtils.copy(new FileInputStream(Paths.getMinecraftJarPath()), new FileOutputStream(new File(Paths.getMinecraftBackupPath())));
        JarFile mcjar = new JarFile(Paths.getMinecraftJarPath());
    }
",164,"    private void download(String FileDirectory) {
        String fileLocation = Activator.showSaveDialog(FileDirectory, new String[] { "".xls"" });
        if (fileLocation != null) {
            InputStream con = null;
            OutputStream url = null;
            try {
                con = this.getClass().getResourceAsStream(""/"" + FileDirectory);
                url = new FileOutputStream(fileLocation);
                IOUtils.copy(con, url);
            } catch (IOException ioe) {
                Activator.showExceptionDialog(ioe);
            } finally {
                if (con != null) {
                    try {
                        con.close();
                    } catch (IOException e1) {
                        Activator.showExceptionDialog(e1);
                    }
                }
                if (url != null) {
                    try {
                        url.close();
                    } catch (IOException e1) {
                        Activator.showExceptionDialog(e1);
                    }
                }
            }
        }
    }
",LABEL_1,LABEL_1,LABEL_1,-1,"download,fileName,filePath,in,out","download:0.0043762922286987305,fileName:0.008355557918548584,filePath:0.0035063624382019043,in:0.014699220657348633,out:0.021734416484832764,",4,16,0,"out:url,in:con,fileName:FileDirectory,download:download,filePath:fileLocation,",0,Greedy,213,0.03008339802424113,failed,[]
74,"    public void Load(String fname) throws Exception {
        File f = null;
        try {
            if ("""".equals(fname) || fname == null) throw new Exception();
            System.out.println(""Loading mapfile "" + fname);
        } catch (Exception e) {
            throw new Exception(""File not found"");
        }
        aType = null;
        fieldtype.clear();
        creatures.clear();
        aElement = new String("""");
        content = null;
        Ax = -1;
        Ay = -1;
        aTemplate = -1;
        SAXParserFactory factory = SAXParserFactory.newInstance();
        data_read = 0;
        URL url = this.game.mainClass.getClassLoader().getResource(fname);
        if (url == null) {
            throw new Exception(""Can't load map from : "" + fname);
        }
        try {
            SAXParser parser = factory.newSAXParser();
            parser.parse(url.openStream(), this);
        } catch (Exception e) {
            System.out.println(""Can't open XML : "" + e);
        }
        for (int i = 0; i < fieldtype.size(); i++) {
            System.out.println((MapField) fieldtype.get(i));
        }
        game.player.setpos(start_x, start_y);
        System.out.println(""Player starting position set"");
        start_x = -1;
        start_y = -1;
        System.out.println(""Map \"""" + fname + ""\"" loaded"");
    }
 <SPLIT>     public DataSet parse() throws SnifflibDatatypeException {
        NumberFormat numformat = NumberFormat.getInstance();
        if (this.headers.size() != this.types.size()) {
            throw new SnifflibDatatypeException(""Different number of headers ("" + this.headers.size() + "") and types("" + this.types.size() + "")."");
        }
        DataSet out = null;
        if (!this.dryrun) {
            out = new DataSet();
        }
        BufferedReader r = null;
        StreamTokenizer tokenizer = null;
        try {
            if (this.isURL) {
                if (this.url2goto == null) {
                    return (null);
                }
                DataInputStream in = null;
                try {
                    in = new DataInputStream(this.url2goto.openStream());
                    System.out.println(""READY TO READ FROM URL:"" + url2goto);
                    r = new BufferedReader(new InputStreamReader(in));
                } catch (Exception err) {
                    throw new RuntimeException(""Problem reading from URL "" + this.url2goto + ""."", err);
                }
            } else {
                if (this.file == null) {
                    throw new RuntimeException(""Data file to be parsed can not be null."");
                }
                if (!this.file.exists()) {
                    throw new RuntimeException(""The file "" + this.file + "" does not exist."");
                }
                r = new BufferedReader(new FileReader(this.file));
            }
            if (this.ignorePreHeaderLines > 0) {
                String strLine;
                int k = 0;
                while ((k < this.ignorePreHeaderLines) && ((strLine = r.readLine()) != null)) {
                    k++;
                }
            }
            tokenizer = new StreamTokenizer(r);
            tokenizer.resetSyntax();
            tokenizer.eolIsSignificant(true);
            tokenizer.parseNumbers();
            if (this.delimiter.equals(""\\t"")) {
                tokenizer.whitespaceChars('\t', '\t');
            }
            if (this.delimiter.equals("","")) {
                tokenizer.whitespaceChars(',', ',');
            }
            tokenizer.quoteChar('""');
            tokenizer.whitespaceChars(' ', ' ');
            boolean readingHeaders = true;
            boolean readingInitialValues = false;
            boolean readingData = false;
            boolean readingScientificNotation = false;
            if (this.headers.size() > 0) {
                readingHeaders = false;
                readingInitialValues = true;
            }
            if (this.types.size() > 0) {
                readingInitialValues = false;
                Class targetclass;
                for (int j = 0; j < this.types.size(); j++) {
                    targetclass = (Class) this.types.get(j);
                    try {
                        this.constructors.add(targetclass.getConstructor(String.class));
                    } catch (java.lang.NoSuchMethodException err) {
                        throw new SnifflibDatatypeException(""Could not find appropriate constructor for "" + targetclass + "". "" + err.getMessage());
                    }
                }
                readingData = true;
            }
            int currentColumn = 0;
            int currentRow = 0;
            this.rowcount = 0;
            boolean advanceField = true;
            while (true) {
                tokenizer.nextToken();
                switch(tokenizer.ttype) {
                    case StreamTokenizer.TT_WORD:
                        {
                            if (readingScientificNotation) {
                                throw new RuntimeException(""Problem reading scientific notation at row "" + currentRow + "" column "" + currentColumn + ""."");
                            }
                            advanceField = true;
                            if (readingHeaders) {
                                this.headers.add(tokenizer.sval);
                            } else {
                                if (readingInitialValues) {
                                    this.types.add(String.class);
                                }
                                if (!this.dryrun) {
                                    if (out.getColumnCount() <= currentColumn) {
                                        out.addColumn((String) this.headers.get(currentColumn), (Class) this.types.get(currentColumn));
                                    }
                                }
                                try {
                                    Constructor construct;
                                    if (currentColumn < this.constructors.size()) {
                                        construct = (Constructor) this.constructors.get(currentColumn);
                                    } else {
                                        Class targetclass = (Class) this.types.get(currentColumn);
                                        construct = targetclass.getConstructor(String.class);
                                        this.constructors.add(construct);
                                    }
                                    try {
                                        try {
                                            try {
                                                if (!this.dryrun) {
                                                    out.setValueAt(construct.newInstance((String) tokenizer.sval), currentRow, currentColumn);
                                                } else if (this.findingTargetValue) {
                                                    if ((this.targetRow == currentRow) && (this.targetColumn == currentColumn)) {
                                                        this.targetValue = construct.newInstance((String) tokenizer.sval);
                                                        r.close();
                                                        return (null);
                                                    }
                                                }
                                            } catch (java.lang.reflect.InvocationTargetException err) {
                                                throw new SnifflibDatatypeException(""Problem constructing 1"" + err.getMessage());
                                            }
                                        } catch (java.lang.IllegalAccessException err) {
                                            throw new SnifflibDatatypeException(""Problem constructing 2"" + err.getMessage());
                                        }
                                    } catch (java.lang.InstantiationException err) {
                                        throw new SnifflibDatatypeException(""Problem constructing 3"" + err.getMessage());
                                    }
                                } catch (java.lang.NoSuchMethodException err) {
                                    throw new SnifflibDatatypeException(""Problem constructing 4"" + err.getMessage());
                                }
                            }
                            break;
                        }
                    case StreamTokenizer.TT_NUMBER:
                        {
                            advanceField = true;
                            if (readingHeaders) {
                                throw new SnifflibDatatypeException(""Expecting string header at row="" + currentRow + "", column="" + currentColumn + ""."");
                            } else {
                                if (readingInitialValues) {
                                    this.types.add(Double.class);
                                }
                                if (!this.dryrun) {
                                    if (out.getColumnCount() <= currentColumn) {
                                        out.addColumn((String) this.headers.get(currentColumn), (Class) this.types.get(currentColumn));
                                    }
                                }
                                try {
                                    Constructor construct;
                                    if (currentColumn < this.constructors.size()) {
                                        construct = (Constructor) this.constructors.get(currentColumn);
                                    } else {
                                        Class targetclass = (Class) this.types.get(currentColumn);
                                        construct = targetclass.getConstructor(double.class);
                                        this.constructors.add(construct);
                                    }
                                    if (readingScientificNotation) {
                                        Double val = this.scientificNumber;
                                        if (!this.dryrun) {
                                            try {
                                                out.setValueAt(new Double(val.doubleValue() * tokenizer.nval), currentRow, currentColumn);
                                            } catch (Exception err) {
                                                throw new SnifflibDatatypeException(""Problem constructing "" + construct.getDeclaringClass() + ""at row "" + currentRow + "" column "" + currentColumn + ""."", err);
                                            }
                                        } else if (this.findingTargetValue) {
                                            if ((this.targetRow == currentRow) && (this.targetColumn == currentColumn)) {
                                                Double NVAL = new Double(tokenizer.nval);
                                                try {
                                                    this.targetValue = numformat.parse(val + ""E"" + NVAL);
                                                } catch (Exception err) {
                                                    throw new RuntimeException(""Problem parsing scientific notation at row="" + currentRow + "" col="" + currentColumn + ""."");
                                                }
                                                tokenizer.nextToken();
                                                if (tokenizer.ttype != 'e') {
                                                    r.close();
                                                    return (null);
                                                } else {
                                                    tokenizer.pushBack();
                                                }
                                            }
                                        }
                                        readingScientificNotation = false;
                                    } else {
                                        try {
                                            this.scientificNumber = new Double(tokenizer.nval);
                                            if (!this.dryrun) {
                                                out.setValueAt(this.scientificNumber, currentRow, currentColumn);
                                            } else if (this.findingTargetValue) {
                                                if ((this.targetRow == currentRow) && (this.targetColumn == currentColumn)) {
                                                    this.targetValue = this.scientificNumber;
                                                    r.close();
                                                    return (null);
                                                }
                                            }
                                        } catch (Exception err) {
                                            throw new SnifflibDatatypeException(""Problem constructing "" + construct.getDeclaringClass() + ""at row "" + currentRow + "" column "" + currentColumn + ""."", err);
                                        }
                                    }
                                } catch (java.lang.NoSuchMethodException err) {
                                    throw new SnifflibDatatypeException(""Problem constructing"" + err.getMessage());
                                }
                            }
                            break;
                        }
                    case StreamTokenizer.TT_EOL:
                        {
                            if (readingHeaders) {
                                readingHeaders = false;
                                readingInitialValues = true;
                            } else {
                                if (readingInitialValues) {
                                    readingInitialValues = false;
                                    readingData = true;
                                }
                            }
                            if (readingData) {
                                currentRow++;
                            }
                            break;
                        }
                    case StreamTokenizer.TT_EOF:
                        {
                            if (readingHeaders) {
                                throw new SnifflibDatatypeException(""End of file reached while reading headers."");
                            }
                            if (readingInitialValues) {
                                throw new SnifflibDatatypeException(""End of file reached while reading initial values."");
                            }
                            if (readingData) {
                                readingData = false;
                            }
                            break;
                        }
                    default:
                        {
                            if (tokenizer.ttype == '""') {
                                advanceField = true;
                                if (readingHeaders) {
                                    this.headers.add(tokenizer.sval);
                                } else {
                                    if (readingInitialValues) {
                                        this.types.add(String.class);
                                    }
                                    if (!this.dryrun) {
                                        if (out.getColumnCount() <= currentColumn) {
                                            out.addColumn((String) this.headers.get(currentColumn), (Class) this.types.get(currentColumn));
                                        }
                                    }
                                    try {
                                        Constructor construct;
                                        if (currentColumn < this.constructors.size()) {
                                            construct = (Constructor) this.constructors.get(currentColumn);
                                        } else {
                                            Class targetclass = (Class) this.types.get(currentColumn);
                                            construct = targetclass.getConstructor(String.class);
                                            this.constructors.add(construct);
                                        }
                                        try {
                                            try {
                                                try {
                                                    if (!this.dryrun) {
                                                        out.setValueAt(construct.newInstance((String) tokenizer.sval), currentRow, currentColumn);
                                                    } else if (this.findingTargetValue) {
                                                        if ((this.targetRow == currentRow) && (this.targetColumn == currentColumn)) {
                                                            this.targetValue = construct.newInstance((String) tokenizer.sval);
                                                            r.close();
                                                            return (null);
                                                        }
                                                    }
                                                } catch (java.lang.reflect.InvocationTargetException err) {
                                                    throw new SnifflibDatatypeException(""Problem constructing 1 "" + err.getMessage());
                                                }
                                            } catch (java.lang.IllegalAccessException err) {
                                                throw new SnifflibDatatypeException(""Problem constructing 2 "" + err.getMessage());
                                            }
                                        } catch (java.lang.InstantiationException err) {
                                            throw new SnifflibDatatypeException(""Problem constructing 3 "" + err.getMessage());
                                        }
                                    } catch (java.lang.NoSuchMethodException err) {
                                        throw new SnifflibDatatypeException(""Problem constructing 4"" + err.getMessage());
                                    }
                                }
                            } else if (tokenizer.ttype == 'e') {
                                Class targetclass = (Class) this.types.get(currentColumn);
                                if (Number.class.isAssignableFrom(targetclass)) {
                                    currentColumn--;
                                    readingScientificNotation = true;
                                    advanceField = false;
                                }
                            } else {
                                advanceField = false;
                            }
                            break;
                        }
                }
                if (tokenizer.ttype == StreamTokenizer.TT_EOF) {
                    break;
                }
                if (advanceField) {
                    currentColumn++;
                    if (!readingHeaders) {
                        if (currentColumn >= this.headers.size()) {
                            currentColumn = 0;
                        }
                    }
                }
            }
            if (!readingHeaders) {
                this.rowcount = currentRow;
            } else {
                this.rowcount = 0;
                readingHeaders = false;
                if (this.ignorePostHeaderLines > 0) {
                    String strLine;
                    int k = 0;
                    while ((k < this.ignorePostHeaderLines) && ((strLine = r.readLine()) != null)) {
                        k++;
                    }
                }
            }
            r.close();
        } catch (java.io.IOException err) {
            throw new SnifflibDatatypeException(err.getMessage());
        }
        if (!this.dryrun) {
            for (int j = 0; j < this.headers.size(); j++) {
                out.setColumnName(j, (String) this.headers.get(j));
            }
        }
        return (out);
    }
",296,"    public void File(String filename) throws Exception {
        File fn = null;
        try {
            if ("""".equals(filename) || filename == null) throw new Exception();
            System.out.println(""Loading mapfile "" + filename);
        } catch (Exception e) {
            throw new Exception(""File not found"");
        }
         aSource = null;
        fieldtype.clear();
        creatures.clear();
        anElement = new String("""");
        script = null;
        orient = -1;
        Vert = -1;
        aTemplate = -1;
        SAXParserFactory filler = SAXParserFactory.newInstance();
        data_reads = 0;
        URL rl = this.game.mainClass.getClassLoader().getResource(filename);
        if (rl == null) {
            throw new Exception(""Can't load map from : "" + filename);
        }
        try {
            SAXParser Parser = filler.newSAXParser();
            Parser.parse(rl.openStream(), this);
        } catch (Exception e) {
            System.out.println(""Can't open XML : "" + e);
        }
        for (int uri = 0; uri < fieldtype.size(); uri++) {
            System.out.println((MapField) fieldtype.get(uri));
        }
        game.player.setpos(startNewx, start_y);
        System.out.println(""Player starting position set"");
        startNewx = -1;
        start_y = -1;
        System.out.println(""Map \"""" + filename + ""\"" loaded"");
    }
",LABEL_0,LABEL_0,LABEL_0,-1,"Load,fname,f,aType,aElement,content,Ax,Ay,aTemplate,factory,data_read,url,parser,i,start_x,start_y","Load:1.3172626495361328e-05,fname:-4.118680953979492e-05,f:3.8564205169677734e-05,aType:-7.271766662597656e-06,aElement:-2.110004425048828e-05,content:-2.9802322387695312e-06,Ax:-3.0994415283203125e-06,Ay:-3.4570693969726562e-06,aTemplate:-9.894371032714844e-06,factory:2.9802322387695312e-06,data_read:-2.944469451904297e-05,url:0.00014168024063110352,parser:-6.288290023803711e-05,i:-7.331371307373047e-06,start_x:1.6391277313232422e-05,start_y:2.014636993408203e-05,",14,28,0,"url:rl,f:fn,start_y:start_y,start_x:startNewx,Load:File,factory:filler,content:script,Ax:orient,Ay:Vert,aType: aSource,i:uri,aTemplate:aTemplate,aElement:anElement,data_read:data_reads,fname:filename,parser:Parser,",0,Greedy,493,0.1544893225034078,failed,[]
75,"    @Test
    public void testCopy_readerToOutputStream_Encoding() throws Exception {
        InputStream in = new ByteArrayInputStream(inData);
        in = new YellOnCloseInputStreamTest(in);
        Reader reader = new InputStreamReader(in, ""US-ASCII"");
        ByteArrayOutputStream baout = new ByteArrayOutputStream();
        OutputStream out = new YellOnFlushAndCloseOutputStreamTest(baout, false, true);
        IOUtils.copy(reader, out, ""UTF16"");
        byte[] bytes = baout.toByteArray();
        bytes = new String(bytes, ""UTF16"").getBytes(""US-ASCII"");
        assertTrue(""Content differs"", Arrays.equals(inData, bytes));
    }
 <SPLIT>     public void send(org.hibernate.Session hsession, Session session, String repositoryName, int ideIdint, String to, String cc, String bcc, String subject, String body, Vector attachments, boolean isHtml, String charset, InternetHeaders headers, String priority) throws MailException {
        try {
            if (charset == null) {
                charset = MimeUtility.javaCharset(Charset.defaultCharset().displayName());
            }
            if ((body == null) || body.trim().equals("""")) {
                body = "" "";
            }
            Email email = null;
            if (isHtml) {
                email = new HtmlEmail();
            } else {
                email = new MultiPartEmail();
            }
            email.setCharset(charset);
            Users user = getUser(hsession, repositoryName);
            Identity identity = getIdentity(hsession, ideIdint, user);
            InternetAddress _returnPath = new InternetAddress(identity.getIdeEmail(), identity.getIdeName());
            InternetAddress _from = new InternetAddress(identity.getIdeEmail(), identity.getIdeName());
            InternetAddress _replyTo = new InternetAddress(identity.getIdeReplyTo(), identity.getIdeName());
            InternetAddress[] _to = MessageUtilities.encodeAddresses(to, null);
            InternetAddress[] _cc = MessageUtilities.encodeAddresses(cc, null);
            InternetAddress[] _bcc = MessageUtilities.encodeAddresses(bcc, null);
            if (_from != null) {
                email.setFrom(_from.getAddress(), _from.getPersonal());
            }
            if (_returnPath != null) {
                email.addHeader(""Return-Path"", _returnPath.getAddress());
                email.addHeader(""Errors-To"", _returnPath.getAddress());
                email.addHeader(""X-Errors-To"", _returnPath.getAddress());
            }
            if (_replyTo != null) {
                email.addReplyTo(_replyTo.getAddress(), _replyTo.getPersonal());
            }
            if ((_to != null) && (_to.length > 0)) {
                HashSet aux = new HashSet(_to.length);
                Collections.addAll(aux, _to);
                email.setTo(aux);
            }
            if ((_cc != null) && (_cc.length > 0)) {
                HashSet aux = new HashSet(_cc.length);
                Collections.addAll(aux, _cc);
                email.setCc(aux);
            }
            if ((_bcc != null) && (_bcc.length > 0)) {
                HashSet aux = new HashSet(_bcc.length);
                Collections.addAll(aux, _bcc);
                email.setBcc(aux);
            }
            email.setSubject(subject);
            Date now = new Date();
            email.setSentDate(now);
            File dir = new File(System.getProperty(""user.home"") + File.separator + ""tmp"");
            if (!dir.exists()) {
                dir.mkdir();
            }
            if ((attachments != null) && (attachments.size() > 0)) {
                for (int i = 0; i < attachments.size(); i++) {
                    ByteArrayInputStream bais = null;
                    FileOutputStream fos = null;
                    try {
                        MailPartObj obj = (MailPartObj) attachments.get(i);
                        File file = new File(dir, obj.getName());
                        bais = new ByteArrayInputStream(obj.getAttachent());
                        fos = new FileOutputStream(file);
                        IOUtils.copy(bais, fos);
                        EmailAttachment attachment = new EmailAttachment();
                        attachment.setPath(file.getPath());
                        attachment.setDisposition(EmailAttachment.ATTACHMENT);
                        attachment.setDescription(""File Attachment: "" + file.getName());
                        attachment.setName(file.getName());
                        if (email instanceof MultiPartEmail) {
                            ((MultiPartEmail) email).attach(attachment);
                        }
                    } catch (Exception ex) {
                    } finally {
                        IOUtils.closeQuietly(bais);
                        IOUtils.closeQuietly(fos);
                    }
                }
            }
            String mid = getId();
            if (headers != null) {
                Header xheader;
                Enumeration xe = headers.getAllHeaders();
                for (; xe.hasMoreElements(); ) {
                    xheader = (Header) xe.nextElement();
                    if (xheader.getName().equals(RFC2822Headers.IN_REPLY_TO)) {
                        email.addHeader(xheader.getName(), xheader.getValue());
                    } else if (xheader.getName().equals(RFC2822Headers.REFERENCES)) {
                        email.addHeader(xheader.getName(), xheader.getValue());
                    }
                }
            } else {
                email.addHeader(RFC2822Headers.IN_REPLY_TO, ""<"" + mid + "".JavaMail.duroty@duroty"" + "">"");
                email.addHeader(RFC2822Headers.REFERENCES, ""<"" + mid + "".JavaMail.duroty@duroty"" + "">"");
            }
            if (priority != null) {
                if (priority.equals(""high"")) {
                    email.addHeader(""Importance"", priority);
                    email.addHeader(""X-priority"", ""1"");
                } else if (priority.equals(""low"")) {
                    email.addHeader(""Importance"", priority);
                    email.addHeader(""X-priority"", ""5"");
                }
            }
            if (email instanceof HtmlEmail) {
                ((HtmlEmail) email).setHtmlMsg(body);
            } else {
                email.setMsg(body);
            }
            email.setMailSession(session);
            email.buildMimeMessage();
            MimeMessage mime = email.getMimeMessage();
            int size = MessageUtilities.getMessageSize(mime);
            if (!controlQuota(hsession, user, size)) {
                throw new MailException(""ErrorMessages.mail.quota.exceded"");
            }
            messageable.saveSentMessage(mid, mime, user);
            Thread thread = new Thread(new SendMessageThread(email));
            thread.start();
        } catch (MailException e) {
            throw e;
        } catch (Exception e) {
            throw new MailException(e);
        } catch (java.lang.OutOfMemoryError ex) {
            System.gc();
            throw new MailException(ex);
        } catch (Throwable e) {
            throw new MailException(e);
        } finally {
            GeneralOperations.closeHibernateSession(hsession);
        }
    }
",123,"    @Test
    public void testCopy_readerToOutputStream_Integode() throws Exception {
        InputStream file = new ByteArrayInputStream(inData);
        file = new YellOnCloseInputStreamTest(file);
        Reader loader = new InputStreamReader(file, ""US-ASCII"");
        ByteArrayOutputStream vaparent = new ByteArrayOutputStream();
        OutputStream parent = new YellOnFlushAndCloseOutputStreamTest(vaparent, false, true);
        IOUtils.copy(loader, parent, ""UTF16"");
        byte[] seconds = vaparent.toByteArray();
        seconds = new String(seconds, ""UTF16"").getBytes(""US-ASCII"");
        assertTrue(""Content differs"", Arrays.equals(inData, seconds));
    }
",LABEL_1,LABEL_1,LABEL_1,-1,"testCopy_readerToOutputStream_Encoding,in,reader,baout,out,bytes","testCopy_readerToOutputStream_Encoding:0.004687607288360596,in:0.0014157891273498535,reader:-0.0003555417060852051,baout:0.007351279258728027,out:3.0338764190673828e-05,bytes:-0.0013374090194702148,",6,16,0,"baout:vaparent,testCopy_readerToOutputStream_Encoding:testCopy_readerToOutputStream_Integode,in:file,out:parent,reader:loader,bytes:seconds,",0,Greedy,242,0.051653977235158285,failed,[]
76,"    public void send(org.hibernate.Session hsession, Session session, String repositoryName, int ideIdint, String to, String cc, String bcc, String subject, String body, Vector attachments, boolean isHtml, String charset, InternetHeaders headers, String priority) throws MailException {
        try {
            if (charset == null) {
                charset = MimeUtility.javaCharset(Charset.defaultCharset().displayName());
            }
            if ((body == null) || body.trim().equals("""")) {
                body = "" "";
            }
            Email email = null;
            if (isHtml) {
                email = new HtmlEmail();
            } else {
                email = new MultiPartEmail();
            }
            email.setCharset(charset);
            Users user = getUser(hsession, repositoryName);
            Identity identity = getIdentity(hsession, ideIdint, user);
            InternetAddress _returnPath = new InternetAddress(identity.getIdeEmail(), identity.getIdeName());
            InternetAddress _from = new InternetAddress(identity.getIdeEmail(), identity.getIdeName());
            InternetAddress _replyTo = new InternetAddress(identity.getIdeReplyTo(), identity.getIdeName());
            InternetAddress[] _to = MessageUtilities.encodeAddresses(to, null);
            InternetAddress[] _cc = MessageUtilities.encodeAddresses(cc, null);
            InternetAddress[] _bcc = MessageUtilities.encodeAddresses(bcc, null);
            if (_from != null) {
                email.setFrom(_from.getAddress(), _from.getPersonal());
            }
            if (_returnPath != null) {
                email.addHeader(""Return-Path"", _returnPath.getAddress());
                email.addHeader(""Errors-To"", _returnPath.getAddress());
                email.addHeader(""X-Errors-To"", _returnPath.getAddress());
            }
            if (_replyTo != null) {
                email.addReplyTo(_replyTo.getAddress(), _replyTo.getPersonal());
            }
            if ((_to != null) && (_to.length > 0)) {
                HashSet aux = new HashSet(_to.length);
                Collections.addAll(aux, _to);
                email.setTo(aux);
            }
            if ((_cc != null) && (_cc.length > 0)) {
                HashSet aux = new HashSet(_cc.length);
                Collections.addAll(aux, _cc);
                email.setCc(aux);
            }
            if ((_bcc != null) && (_bcc.length > 0)) {
                HashSet aux = new HashSet(_bcc.length);
                Collections.addAll(aux, _bcc);
                email.setBcc(aux);
            }
            email.setSubject(subject);
            Date now = new Date();
            email.setSentDate(now);
            File dir = new File(System.getProperty(""user.home"") + File.separator + ""tmp"");
            if (!dir.exists()) {
                dir.mkdir();
            }
            if ((attachments != null) && (attachments.size() > 0)) {
                for (int i = 0; i < attachments.size(); i++) {
                    ByteArrayInputStream bais = null;
                    FileOutputStream fos = null;
                    try {
                        MailPartObj obj = (MailPartObj) attachments.get(i);
                        File file = new File(dir, obj.getName());
                        bais = new ByteArrayInputStream(obj.getAttachent());
                        fos = new FileOutputStream(file);
                        IOUtils.copy(bais, fos);
                        EmailAttachment attachment = new EmailAttachment();
                        attachment.setPath(file.getPath());
                        attachment.setDisposition(EmailAttachment.ATTACHMENT);
                        attachment.setDescription(""File Attachment: "" + file.getName());
                        attachment.setName(file.getName());
                        if (email instanceof MultiPartEmail) {
                            ((MultiPartEmail) email).attach(attachment);
                        }
                    } catch (Exception ex) {
                    } finally {
                        IOUtils.closeQuietly(bais);
                        IOUtils.closeQuietly(fos);
                    }
                }
            }
            String mid = getId();
            if (headers != null) {
                Header xheader;
                Enumeration xe = headers.getAllHeaders();
                for (; xe.hasMoreElements(); ) {
                    xheader = (Header) xe.nextElement();
                    if (xheader.getName().equals(RFC2822Headers.IN_REPLY_TO)) {
                        email.addHeader(xheader.getName(), xheader.getValue());
                    } else if (xheader.getName().equals(RFC2822Headers.REFERENCES)) {
                        email.addHeader(xheader.getName(), xheader.getValue());
                    }
                }
            } else {
                email.addHeader(RFC2822Headers.IN_REPLY_TO, ""<"" + mid + "".JavaMail.duroty@duroty"" + "">"");
                email.addHeader(RFC2822Headers.REFERENCES, ""<"" + mid + "".JavaMail.duroty@duroty"" + "">"");
            }
            if (priority != null) {
                if (priority.equals(""high"")) {
                    email.addHeader(""Importance"", priority);
                    email.addHeader(""X-priority"", ""1"");
                } else if (priority.equals(""low"")) {
                    email.addHeader(""Importance"", priority);
                    email.addHeader(""X-priority"", ""5"");
                }
            }
            if (email instanceof HtmlEmail) {
                ((HtmlEmail) email).setHtmlMsg(body);
            } else {
                email.setMsg(body);
            }
            email.setMailSession(session);
            email.buildMimeMessage();
            MimeMessage mime = email.getMimeMessage();
            int size = MessageUtilities.getMessageSize(mime);
            if (!controlQuota(hsession, user, size)) {
                throw new MailException(""ErrorMessages.mail.quota.exceded"");
            }
            messageable.saveSentMessage(mid, mime, user);
            Thread thread = new Thread(new SendMessageThread(email));
            thread.start();
        } catch (MailException e) {
            throw e;
        } catch (Exception e) {
            throw new MailException(e);
        } catch (java.lang.OutOfMemoryError ex) {
            System.gc();
            throw new MailException(ex);
        } catch (Throwable e) {
            throw new MailException(e);
        } finally {
            GeneralOperations.closeHibernateSession(hsession);
        }
    }
 <SPLIT>     private void extractZipFile(String filename, JTextPane progressText) throws IOException {
        String destinationname = """";
        byte[] buf = new byte[1024];
        ZipInputStream zipinputstream = null;
        ZipEntry zipentry;
        zipinputstream = new ZipInputStream(new FileInputStream(filename));
        while ((zipentry = zipinputstream.getNextEntry()) != null) {
            String entryName = zipentry.getName();
            if (progressText != null) {
                progressText.setText(""extracting "" + entryName);
            }
            int n;
            FileOutputStream fileoutputstream;
            if (zipentry.isDirectory()) {
                (new File(destinationname + entryName)).mkdir();
                continue;
            }
            fileoutputstream = new FileOutputStream(destinationname + entryName);
            while ((n = zipinputstream.read(buf, 0, 1024)) > -1) fileoutputstream.write(buf, 0, n);
            fileoutputstream.close();
            zipinputstream.closeEntry();
        }
        if (progressText != null) {
            progressText.setText(""Files extracted"");
        }
        zipinputstream.close();
    }
",1214,"    public void send(org.hibernate.Session hsession, Session session, String repositoryName, int ideIdint, String to, String cc, String bcc, String subject, String body, Vector Attachments, boolean isHtml, String charset, InternetHeaders headers, String priority) throws MailException {
        try {
            if (charset == null) {
                charset = MimeUtility.javaCharset(Charset.defaultCharset().displayName());
            }
            if ((body == null) || body.trim().equals("""")) {
                body = "" "";
            }
            Email email = null;
            if (isHtml) {
                email = new HtmlEmail();
            } else {
                email = new MultiPartEmail();
            }
            email.setCharset(charset);
            Users user = getUser(hsession, repositoryName);
            Identity identity = getIdentity(hsession, ideIdint, user);
            InternetAddress _returnPath = new InternetAddress(identity.getIdeEmail(), identity.getIdeName());
            InternetAddress _from = new InternetAddress(identity.getIdeEmail(), identity.getIdeName());
            InternetAddress _replyTo = new InternetAddress(identity.getIdeReplyTo(), identity.getIdeName());
            InternetAddress[] _to = MessageUtilities.encodeAddresses(to, null);
            InternetAddress[] _cc = MessageUtilities.encodeAddresses(cc, null);
            InternetAddress[] _bcc = MessageUtilities.encodeAddresses(bcc, null);
            if (_from != null) {
                email.setFrom(_from.getAddress(), _from.getPersonal());
            }
            if (_returnPath != null) {
                email.addHeader(""Return-Path"", _returnPath.getAddress());
                email.addHeader(""Errors-To"", _returnPath.getAddress());
                email.addHeader(""X-Errors-To"", _returnPath.getAddress());
            }
            if (_replyTo != null) {
                email.addReplyTo(_replyTo.getAddress(), _replyTo.getPersonal());
            }
            if ((_to != null) && (_to.length > 0)) {
                HashSet aux = new HashSet(_to.length);
                Collections.addAll(aux, _to);
                email.setTo(aux);
            }
            if ((_cc != null) && (_cc.length > 0)) {
                HashSet aux = new HashSet(_cc.length);
                Collections.addAll(aux, _cc);
                email.setCc(aux);
            }
            if ((_bcc != null) && (_bcc.length > 0)) {
                HashSet aux = new HashSet(_bcc.length);
                Collections.addAll(aux, _bcc);
                email.setBcc(aux);
            }
            email.setSubject(subject);
            Date now = new Date();
            email.setSentDate(now);
            File dir = new File(System.getProperty(""user.home"") + File.separator + ""tmp"");
            if (!dir.exists()) {
                dir.mkdir();
            }
            if ((Attachments != null) && (Attachments.size() > 0)) {
                for (int i = 0; i < Attachments.size(); i++) {
                    ByteArrayInputStream bais = null;
                    FileOutputStream fos = null;
                    try {
                        MailPartObj obj = (MailPartObj) Attachments.get(i);
                        File file = new File(dir, obj.getName());
                        bais = new ByteArrayInputStream(obj.getAttachent());
                        fos = new FileOutputStream(file);
                        IOUtils.copy(bais, fos);
                        EmailAttachment attachment = new EmailAttachment();
                        attachment.setPath(file.getPath());
                        attachment.setDisposition(EmailAttachment.ATTACHMENT);
                        attachment.setDescription(""File Attachment: "" + file.getName());
                        attachment.setName(file.getName());
                        if (email instanceof MultiPartEmail) {
                            ((MultiPartEmail) email).attach(attachment);
                        }
                    } catch (Exception ex) {
                    } finally {
                        IOUtils.closeQuietly(bais);
                        IOUtils.closeQuietly(fos);
                    }
                }
            }
            String mid = getId();
            if (headers != null) {
                Header xheader;
                Enumeration xe = headers.getAllHeaders();
                for (; xe.hasMoreElements(); ) {
                    xheader = (Header) xe.nextElement();
                    if (xheader.getName().equals(RFC2822Headers.IN_REPLY_TO)) {
                        email.addHeader(xheader.getName(), xheader.getValue());
                    } else if (xheader.getName().equals(RFC2822Headers.REFERENCES)) {
                        email.addHeader(xheader.getName(), xheader.getValue());
                    }
                }
            } else {
                email.addHeader(RFC2822Headers.IN_REPLY_TO, ""<"" + mid + "".JavaMail.duroty@duroty"" + "">"");
                email.addHeader(RFC2822Headers.REFERENCES, ""<"" + mid + "".JavaMail.duroty@duroty"" + "">"");
            }
            if (priority != null) {
                if (priority.equals(""high"")) {
                    email.addHeader(""Importance"", priority);
                    email.addHeader(""X-priority"", ""1"");
                } else if (priority.equals(""low"")) {
                    email.addHeader(""Importance"", priority);
                    email.addHeader(""X-priority"", ""5"");
                }
            }
            if (email instanceof HtmlEmail) {
                ((HtmlEmail) email).setHtmlMsg(body);
            } else {
                email.setMsg(body);
            }
            email.setMailSession(session);
            email.buildMimeMessage();
            MimeMessage mime = email.getMimeMessage();
            int size = MessageUtilities.getMessageSize(mime);
            if (!controlQuota(hsession, user, size)) {
                throw new MailException(""ErrorMessages.mail.quota.exceded"");
            }
            messageable.saveSentMessage(mid, mime, user);
            Thread thread = new Thread(new SendMessageThread(email));
            thread.start();
        } catch (MailException e) {
            throw e;
        } catch (Exception e) {
            throw new MailException(e);
        } catch (java.lang.OutOfMemoryError ex) {
            System.gc();
            throw new MailException(ex);
        } catch (Throwable e) {
            throw new MailException(e);
        } finally {
            GeneralOperations.closeHibernateSession(hsession);
        }
    }
",LABEL_1,LABEL_1,LABEL_0,1,"send,hsession,session,repositoryName,ideIdint,to,cc,bcc,subject,body,attachments,isHtml,charset,headers,priority,email,user,identity,_returnPath,_from,_replyTo,_to,_cc,_bcc","send:0.010873258113861084,hsession:-0.000569760799407959,session:-0.0008271932601928711,repositoryName:0.013030052185058594,ideIdint:0.021584510803222656,to:-3.129243850708008e-05,cc:-0.0028647184371948242,bcc:0.00921165943145752,subject:-0.007887959480285645,body:0.0003275871276855469,attachments:0.04658240079879761,isHtml:-0.005133330821990967,charset:-0.02682703733444214,headers:0.005518794059753418,priority:-0.0037707090377807617,email:0.0017246603965759277,user:0.004189491271972656,identity:0.005242288112640381,_returnPath:-0.0034031271934509277,_from:-0.003490447998046875,_replyTo:-0.0026556849479675293,_to:-0.007488846778869629,_cc:-0.0026061534881591797,_bcc:-0.0021290183067321777,",1,5,0,"attachments:Attachments,",0,Greedy,132,0.02411337693532308,replace,[]
77,"    static void copy(String src, String dest) throws IOException {
        InputStream in = null;
        OutputStream out = null;
        try {
            in = new FileInputStream(src);
            out = new FileOutputStream(dest);
            byte[] buf = new byte[1024];
            int n;
            while ((n = in.read(buf)) > 0) out.write(buf, 0, n);
        } finally {
            if (in != null) in.close();
            if (out != null) out.close();
        }
    }
 <SPLIT>     private static File getZipAsFile(DigitalObject digOb) {
        String folderName = randomizeFileName(getFolderNameFromDigObject(digOb));
        File tmpFolder = new File(utils_tmp, folderName);
        File zip = null;
        try {
            FileUtils.forceMkdir(tmpFolder);
            zip = new File(tmpFolder, getFileNameFromDigObject(digOb, null));
            FileOutputStream out = new FileOutputStream(zip);
            IOUtils.copyLarge(digOb.getContent().getInputStream(), out);
            out.close();
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
        return zip;
    }
",111,"    static void copy(String src, String dest) throws IOException {
        InputStream url = null;
        OutputStream out = null;
        try {
            url = new FileInputStream(src);
            out = new FileOutputStream(dest);
            byte[] buf = new byte[1024];
            int n;
            while ((n = url.read(buf)) > 0) out.write(buf, 0, n);
        } finally {
            if (url != null) url.close();
            if (out != null) out.close();
        }
    }
",LABEL_1,LABEL_1,LABEL_0,1,"copy,src,dest,in,out,buf,n","copy:-0.006369829177856445,src:-0.011378288269042969,dest:-0.007776916027069092,in:0.01200789213180542,out:0.005820751190185547,buf:-0.002675771713256836,n:-0.01600062847137451,",1,5,0,"in:url,",0,Greedy,79,0.010752006371816,replace,[]
78,"    public static boolean encodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }
 <SPLIT>     public void createTempFile(String resourceName) throws IOException {
        InputStream input = JulImportCallableTest.class.getResourceAsStream(resourceName);
        if (input == null) {
            fail(""Couldn't resolve resource '"" + resourceName + ""'!"");
        }
        inputFile = File.createTempFile(""Import"", ""test"");
        inputFile.delete();
        FileOutputStream output = new FileOutputStream(inputFile);
        IOUtils.copyLarge(input, output);
        IOUtilities.closeQuietly(output);
    }
",194,"    public static boolean encodeFileToFile(String infile, String outfile) {
        boolean open = false;
        java.io.InputStream cin = null;
        java.io.OutputStream post = null;
        try {
            cin = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);
            post = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] url = new byte[65536];
            int read = -1;
            while ((read = cin.read(url)) >= 0) {
                post.write(url, 0, read);
            }
            open = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                cin.close();
            } catch (Exception exc) {
            }
            try {
                post.close();
            } catch (Exception exc) {
            }
        }
        return open;
    }
",LABEL_1,LABEL_1,LABEL_1,-1,"encodeFileToFile,infile,outfile,in,out,buffer,read,success","encodeFileToFile:0.0010051131248474121,infile:0.01110982894897461,outfile:0.006501972675323486,in:-0.012176811695098877,out:-0.003839433193206787,buffer:-0.001816093921661377,read:-0.0004526376724243164,success:-0.0036259889602661133,",4,14,0,"infile:infile,outfile:outfile,encodeFileToFile:encodeFileToFile,read:read,buffer:url,success:open,out:post,in:cin,",0,Greedy,356,0.05160964330037435,failed,[]
79,"    protected ActionForward doExecute(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {
        ActionMessages errors = new ActionMessages();
        try {
            boolean isMultipart = FileUpload.isMultipartContent(request);
            Mail mailInstance = getMailInstance(request);
            if (isMultipart) {
                Map fields = new HashMap();
                Vector attachments = new Vector();
                List items = diskFileUpload.parseRequest(request);
                Iterator iter = items.iterator();
                while (iter.hasNext()) {
                    FileItem item = (FileItem) iter.next();
                    if (item.isFormField()) {
                        if (item.getFieldName().equals(""forwardAttachments"")) {
                            String[] aux = item.getString().split("":"");
                            MailPartObj part = mailInstance.getAttachment(aux[0], aux[1]);
                            attachments.addElement(part);
                        } else {
                            fields.put(item.getFieldName(), item.getString());
                        }
                    } else {
                        if (!StringUtils.isBlank(item.getName())) {
                            ByteArrayOutputStream baos = null;
                            try {
                                baos = new ByteArrayOutputStream();
                                IOUtils.copy(item.getInputStream(), baos);
                                MailPartObj part = new MailPartObj();
                                part.setAttachent(baos.toByteArray());
                                part.setContentType(item.getContentType());
                                part.setName(item.getName());
                                part.setSize(item.getSize());
                                attachments.addElement(part);
                            } catch (Exception ex) {
                            } finally {
                                IOUtils.closeQuietly(baos);
                            }
                        }
                    }
                }
                String body = """";
                if (fields.get(""taBody"") != null) {
                    body = (String) fields.get(""taBody"");
                } else if (fields.get(""taReplyBody"") != null) {
                    body = (String) fields.get(""taReplyBody"");
                }
                Preferences preferencesInstance = getPreferencesInstance(request);
                Send sendInstance = getSendInstance(request);
                String mid = (String) fields.get(""mid"");
                if (StringUtils.isBlank(mid)) {
                    request.setAttribute(""action"", ""compose"");
                } else {
                    request.setAttribute(""action"", ""reply"");
                }
                Boolean isHtml = null;
                if (StringUtils.isBlank((String) fields.get(""isHtml""))) {
                    isHtml = new Boolean(preferencesInstance.getPreferences().isHtmlMessage());
                } else {
                    isHtml = Boolean.valueOf((String) fields.get(""isHtml""));
                }
                sendInstance.send(mid, Integer.parseInt((String) fields.get(""identity"")), (String) fields.get(""to""), (String) fields.get(""cc""), (String) fields.get(""bcc""), (String) fields.get(""subject""), body, attachments, isHtml.booleanValue(), Charset.defaultCharset().displayName(), (String) fields.get(""priority""));
            } else {
                errors.add(""general"", new ActionMessage(ExceptionCode.ERROR_MESSAGES_PREFIX + ""mail.send"", ""The form is null""));
                request.setAttribute(""exception"", ""The form is null"");
                request.setAttribute(""newLocation"", null);
                doTrace(request, DLog.ERROR, getClass(), ""The form is null"");
            }
        } catch (Exception ex) {
            String errorMessage = ExceptionUtilities.parseMessage(ex);
            if (errorMessage == null) {
                errorMessage = ""NullPointerException"";
            }
            errors.add(""general"", new ActionMessage(ExceptionCode.ERROR_MESSAGES_PREFIX + ""general"", errorMessage));
            request.setAttribute(""exception"", errorMessage);
            doTrace(request, DLog.ERROR, getClass(), errorMessage);
        } finally {
        }
        if (errors.isEmpty()) {
            doTrace(request, DLog.INFO, getClass(), ""OK"");
            return mapping.findForward(Constants.ACTION_SUCCESS_FORWARD);
        } else {
            saveErrors(request, errors);
            return mapping.findForward(Constants.ACTION_FAIL_FORWARD);
        }
    }
 <SPLIT>     public static String md5(String message, boolean base64) {
        MessageDigest md5 = null;
        String digest = message;
        try {
            md5 = MessageDigest.getInstance(""MD5"");
            md5.update(message.getBytes());
            byte[] digestData = md5.digest();
            if (base64) {
                Base64Encoder enc = new Base64Encoder();
                enc.translate(digestData);
                digest = new String(enc.getCharArray());
            } else {
                digest = byteArrayToHex(digestData);
            }
        } catch (NoSuchAlgorithmException e) {
            LOG.warn(""MD5 not supported. Using plain string as password!"");
        } catch (Exception e) {
            LOG.warn(""Digest creation failed. Using plain string as password!"");
        }
        return digest;
    }
",839,,LABEL_0,LABEL_1,,-4,"doExecute,mapping,form,request,response,errors,isMultipart,mailInstance,fields,attachments,items,iter,item,aux,part,baos,body,preferencesInstance",,,,0,,0,Greedy,1,0.0010079542795817058,,[]
80,"    public static String getContent(HttpUriRequest request) throws Exception {
        StringBuffer sb = new StringBuffer();
        HttpClient client = new DefaultHttpClient();
        HttpParams httpParams = client.getParams();
        HttpConnectionParams.setConnectionTimeout(httpParams, 30000);
        HttpConnectionParams.setSoTimeout(httpParams, 50000);
        HttpResponse response = client.execute(request);
        HttpEntity entity = response.getEntity();
        if (entity != null) {
            BufferedReader reader = new BufferedReader(new InputStreamReader(entity.getContent(), ""UTF-8""), 8192);
            String line = null;
            while ((line = reader.readLine()) != null) {
                sb.append(line + ""\n"");
            }
            reader.close();
        }
        return sb.toString();
    }
 <SPLIT>     protected Control createDialogArea(Composite parent) {
        Composite composite = (Composite) super.createDialogArea(parent);
        setTitle(DialogsMessages.getString(""LicenseDialog.Caption""));
        setMessage(DialogsMessages.getString(""LicenseDialog.Explanation""));
        Composite content = new Composite(composite, SWT.NONE);
        content.setLayoutData(new GridData(GridData.FILL_BOTH));
        final int ncol = 1;
        GridLayout layout = new GridLayout(1, false);
        layout.numColumns = ncol;
        content.setLayout(layout);
        Browser browser = null;
        Text text = null;
        try {
            browser = new Browser(content, SWT.NONE);
            browser.setLayoutData(new GridData(GridData.FILL_BOTH));
        } catch (Throwable t) {
            text = new Text(content, SWT.MULTI | SWT.WRAP | SWT.VERTICAL);
            text.setLayoutData(new GridData(GridData.FILL_BOTH));
        }
        URL url = PalobrowserPlugin.getDefault().getBundle().getResource(browser != null ? ""license.html"" : ""license.txt"");
        InputStream in = null;
        BufferedReader r = null;
        StringBuffer sb = new StringBuffer();
        try {
            in = url.openStream();
            r = new BufferedReader(new InputStreamReader(in, ""ISO-8859-1""));
            String line;
            while ((line = r.readLine()) != null) sb.append(line).append(""\r\n"");
        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            if (r != null) {
                try {
                    r.close();
                } catch (IOException e) {
                }
            }
            if (in != null) {
                try {
                    in.close();
                } catch (IOException e) {
                }
            }
        }
        if (browser != null) browser.setText(sb.toString()); else text.setText(sb.toString());
        return composite;
    }
",151,,LABEL_1,LABEL_0,,-4,"getContent,request,sb,client,httpParams,response,entity,reader,line",,,,0,,0,Greedy,1,0.00047252575556437176,,[]
81,"    public static void doVersionCheck(View view) {
        view.showWaitCursor();
        try {
            URL url = new URL(jEdit.getProperty(""version-check.url""));
            InputStream in = url.openStream();
            BufferedReader bin = new BufferedReader(new InputStreamReader(in));
            String line;
            String develBuild = null;
            String stableBuild = null;
            while ((line = bin.readLine()) != null) {
                if (line.startsWith("".build"")) develBuild = line.substring(6).trim(); else if (line.startsWith("".stablebuild"")) stableBuild = line.substring(12).trim();
            }
            bin.close();
            if (develBuild != null && stableBuild != null) {
                doVersionCheck(view, stableBuild, develBuild);
            }
        } catch (IOException e) {
            String[] args = { jEdit.getProperty(""version-check.url""), e.toString() };
            GUIUtilities.error(view, ""read-error"", args);
        }
        view.hideWaitCursor();
    }
 <SPLIT>     KeyStore getKeyStore() throws JarSignerException {
        if (keyStore == null) {
            KeyStore store = null;
            if (providerName == null) {
                try {
                    store = KeyStore.getInstance(this.storeType);
                } catch (KeyStoreException e) {
                    e.printStackTrace();
                }
            } else {
                try {
                    store = KeyStore.getInstance(storeType, providerName);
                } catch (KeyStoreException e) {
                    e.printStackTrace();
                } catch (NoSuchProviderException e) {
                    e.printStackTrace();
                }
            }
            if (storeURI == null) {
                throw new JarSignerException(""Cannot load the keystore "" + "" error con el keystore"");
            }
            try {
                storeURI = storeURI.replace(File.separatorChar, '/');
                URL url = null;
                try {
                    url = new URL(storeURI);
                } catch (java.net.MalformedURLException e) {
                    url = new File(storeURI).toURI().toURL();
                }
                InputStream is = null;
                try {
                    is = url.openStream();
                    store.load(is, storePass);
                } finally {
                    if (is != null) {
                        is.close();
                    }
                }
            } catch (Exception e) {
                throw new JarSignerException(""Cannot load the keystore "" + storeURI, e);
            }
            keyStore = store;
        }
        return keyStore;
    }
",211,"    public static void doBuildCheck(View cache) {
        cache.showWaitCursor();
        try {
            URL uri = new URL(jEdit.getProperty(""version-check.url""));
            InputStream is = uri.openStream();
            BufferedReader file = new BufferedReader(new InputStreamReader(is));
            String line;
            String dellBuild = null;
            String staticBuild = null;
            while ((line = file.readLine()) != null) {
                if (line.startsWith("".build"")) dellBuild = line.substring(6).trim(); else if (line.startsWith("".stablebuild"")) staticBuild = line.substring(12).trim();
            }
            file.close();
            if (dellBuild != null && staticBuild != null) {
                doBuildCheck(cache, staticBuild, dellBuild);
            }
        } catch (IOException e) {
            String[] args = { jEdit.getProperty(""version-check.url""), e.toString() };
            GUIUtilities.error(cache, ""read-error"", args);
        }
        cache.hideWaitCursor();
    }
",LABEL_0,LABEL_0,LABEL_0,-1,"doVersionCheck,view,url,in,bin,line,develBuild,stableBuild","doVersionCheck:-0.008074820041656494,view:8.982419967651367e-05,url:0.033970534801483154,in:0.0072373151779174805,bin:-0.008992314338684082,line:-0.003163456916809082,develBuild:-0.0025985240936279297,stableBuild:0.0051198601722717285,",7,22,0,"url:uri,in:is,stableBuild:staticBuild,view:cache,develBuild:dellBuild,line:line,doVersionCheck:doBuildCheck,bin:file,",0,Greedy,389,0.06112151940663656,failed,[]
82,"    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws IOException {
        String path = request.getPathTranslated().substring(0, request.getPathTranslated().length() - request.getPathInfo().length()) + request.getServletPath() + request.getPathInfo();
        File file = new File(path);
        if (file.exists()) {
            FileInputStream in = new FileInputStream(file);
            IOUtils.copyLarge(in, response.getOutputStream());
            in.close();
        }
    }
 <SPLIT>     private void downloadFile(File target, String s3key) throws IOException, S3ServiceException {
        InputStream in = downloadData(s3key);
        if (in == null) {
            throw new IOException(""No data found"");
        }
        in = new InflaterInputStream(new CryptInputStream(in, cipher, getDataEncryptionKey()));
        File temp = File.createTempFile(""dirsync"", null);
        FileOutputStream fout = new FileOutputStream(temp);
        try {
            IOUtils.copy(in, fout);
            if (target.exists()) {
                target.delete();
            }
            IOUtils.closeQuietly(fout);
            IOUtils.closeQuietly(in);
            FileUtils.moveFile(temp, target);
        } catch (IOException e) {
            fetchStream(in);
            throw e;
        } finally {
            IOUtils.closeQuietly(fout);
            IOUtils.closeQuietly(in);
        }
    }
",110,"    @Override
    protected void doGET(HttpServletRequest url, HttpServletResponse site) throws IOException {
        String url = url.getPathTranslated().substring(0, url.getPathTranslated().length() - url.getPathInfo().length()) + url.getServletPath() + url.getPathInfo();
        File url = new File(url);
        if (url.exists()) {
            FileInputStream lin = new FileInputStream(url);
            IOUtils.copyLarge(lin, site.getOutputStream());
            lin.close();
        }
    }
",LABEL_1,LABEL_1,LABEL_1,-1,"doGet,request,response,path,file,in","doGet:0.0025447607040405273,request:-0.001241922378540039,response:0.0008705258369445801,path:-0.0011973977088928223,file:0.0013544559478759766,in:0.0028648972511291504,",6,17,0,"in:lin,doGet:doGET,file:url,response:site,path:url,request:url,",0,Greedy,254,0.036314610640207926,failed,[]
83,"    public static String md5(String str) {
        if (logger.isDebugEnabled()) {
            logger.debug(""md5(String) - start"");
        }
        try {
            MessageDigest md = MessageDigest.getInstance(""MD5"");
            md.update(str.getBytes());
            byte[] b = md.digest();
            StringBuffer sb = new StringBuffer();
            for (int i = 0; i < b.length; i++) {
                int v = (int) b[i];
                v = v < 0 ? 0x100 + v : v;
                String cc = Integer.toHexString(v);
                if (cc.length() == 1) sb.append('0');
                sb.append(cc);
            }
            String returnString = sb.toString();
            if (logger.isDebugEnabled()) {
                logger.debug(""md5(String) - end"");
            }
            return returnString;
        } catch (Exception e) {
            logger.warn(""md5(String) - exception ignored"", e);
        }
        if (logger.isDebugEnabled()) {
            logger.debug(""md5(String) - end"");
        }
        return """";
    }
 <SPLIT>     public void exportNotesToServer() {
        boolean uploaded = true;
        try {
            File f = new File(UserSettings.getInstance().getNotesFile());
            FileInputStream fis = new FileInputStream(f);
            String urlString = protocol + ""://"" + UserSettings.getInstance().getServerAddress() + UserSettings.getInstance().getServerDir() + f.getName();
            setDefaultAuthenticator();
            URL url = new URL(urlString);
            HttpURLConnection urlc = (HttpURLConnection) url.openConnection();
            urlc.setDoOutput(true);
            urlc.setRequestMethod(""PUT"");
            OutputStream os = urlc.getOutputStream();
            int nextByte = fis.read();
            while (nextByte != -1) {
                os.write(nextByte);
                nextByte = fis.read();
            }
            fis.close();
            os.close();
            if (urlc.getResponseCode() != HttpURLConnection.HTTP_CREATED && urlc.getResponseCode() != HttpURLConnection.HTTP_NO_CONTENT) {
                uploaded = false;
            }
        } catch (SSLHandshakeException e) {
            JOptionPane.showMessageDialog(null, I18N.getInstance().getString(""error.sslcertificateerror""), I18N.getInstance().getString(""error.title""), JOptionPane.ERROR_MESSAGE);
            uploaded = false;
        } catch (Exception e) {
            uploaded = false;
        }
        if (uploaded) {
            JOptionPane.showMessageDialog(null, I18N.getInstance().getString(""info.notesfileuploaded""), I18N.getInstance().getString(""info.title""), JOptionPane.INFORMATION_MESSAGE);
        } else {
            JOptionPane.showMessageDialog(null, I18N.getInstance().getString(""error.notesfilenotuploaded""), I18N.getInstance().getString(""error.title""), JOptionPane.ERROR_MESSAGE);
        }
    }
",222,"    public static String md5(String txt) {
        if (logger.isDebugEnabled()) {
            logger.debug(""md5(String) - start"");
        }
        try {
            MessageDigest md = MessageDigest.getInstance(""MD5"");
            md.update(txt.getBytes());
            byte[] bytes = md.digest();
            StringBuffer sb = new StringBuffer();
            for (int ip = 0; ip < bytes.length; ip++) {
                int q = (int) bytes[ip];
                q = q < 0 ? 0x100 + q : q;
                String ucc = Integer.toHexString(q);
                if (ucc.length() == 1) sb.append('0');
                sb.append(ucc);
            }
            String returnString = sb.toString();
            if (logger.isDebugEnabled()) {
                logger.debug(""md5(String) - end"");
            }
            return returnString;
        } catch (Exception e) {
            logger.warn(""md5(String) - exception ignored"", e);
        }
        if (logger.isDebugEnabled()) {
            logger.debug(""md5(String) - end"");
        }
        return """";
    }
",LABEL_0,LABEL_0,LABEL_0,-1,"md5,str,md,b,sb,i,v,cc,returnString","md5:0.006649494171142578,str:8.594989776611328e-05,md:0.0018134117126464844,b:-0.0008703470230102539,sb:0.00984412431716919,i:-0.0019358396530151367,v:-0.0004571676254272461,cc:0.0017853975296020508,returnString:0.004170119762420654,",5,18,0,"sb:sb,md5:md5,returnString:returnString,md:md,cc:ucc,str:txt,v:q,b:bytes,i:ip,",0,Greedy,394,0.0646244764328003,failed,[]
84,"    public void writeData(String name, int items, int mzmin, int mzmax, long tstart, long tdelta, int[] peaks) {
        PrintWriter file = getWriter(name + "".txt"");
        file.print(""Filename\t"");
        file.print(""Date\t"");
        file.print(""Acquisition #\t"");
        file.print(""�m Diameter\t"");
        for (int i = mzmin; i <= mzmax; i++) file.print(i + ""\t"");
        file.println();
        int nothing = 0;
        String fileLoc = ""C:/abcd/"" + name + "".txt\t"";
        Date tempDate;
        for (int i = 0; i < items; i++) {
            tempDate = new Date(tstart);
            tstart += tdelta;
            file.print(fileLoc);
            file.print(dateFormat.format(tempDate) + ""\t"");
            file.print(i + 1 + ""\t"");
            double t = (double) (i) / 10;
            file.print(t + ""\t"");
            boolean peaked = false;
            for (int k = mzmin; k <= mzmax; k++) {
                for (int j = 0; j < peaks.length && !peaked; j++) {
                    if (k == peaks[j]) {
                        file.print(peakVals[j % peakVals.length] + ""\t"");
                        peaked = true;
                    }
                }
                if (!peaked) {
                    if (k == mzmax) file.print(nothing); else file.print(nothing + ""\t"");
                }
                peaked = false;
            }
            file.println();
        }
        try {
            Scanner test = new Scanner(f);
            while (test.hasNext()) {
                System.out.println(test.nextLine());
            }
            System.out.println(""test"");
        } catch (Exception e) {
        }
        file.close();
    }
 <SPLIT>     public void createTempFile(String resourceName) throws IOException {
        InputStream input = JulImportCallableTest.class.getResourceAsStream(resourceName);
        if (input == null) {
            fail(""Couldn't resolve resource '"" + resourceName + ""'!"");
        }
        inputFile = File.createTempFile(""Import"", ""test"");
        inputFile.delete();
        FileOutputStream output = new FileOutputStream(inputFile);
        IOUtils.copyLarge(input, output);
        IOUtilities.closeQuietly(output);
    }
",398,"    public void writeData(String name, int items, int mzmin, int mzmax, long tstart, long tdelta, int[] peaks) {
        PrintWriter db = getWriter(name + "".txt"");
        db.print(""Filename\t"");
        db.print(""Date\t"");
        db.print(""Acquisition #\t"");
        db.print(""�m Diameter\t"");
        for (int api = mzmin; api <= mzmax; api++) db.print(api + ""\t"");
        db.println();
        int nothing = 0;
        String fileLoc = ""C:/abcd/"" + name + "".txt\t"";
        Date tempDate;
        for (int api = 0; api < items; api++) {
            tempDate = new Date(tstart);
            tstart += tdelta;
            db.print(fileLoc);
            db.print(dateFormat.format(tempDate) + ""\t"");
            db.print(api + 1 + ""\t"");
            double t = (double) (api) / 10;
            db.print(t + ""\t"");
            boolean peaked = false;
            for (int kid = mzmin; kid <= mzmax; kid++) {
                for (int j = 0; j < peaks.length && !peaked; j++) {
                    if (kid == peaks[j]) {
                        db.print(peakVals[j % peakVals.length] + ""\t"");
                        peaked = true;
                    }
                }
                if (!peaked) {
                    if (kid == mzmax) db.print(nothing); else db.print(nothing + ""\t"");
                }
                peaked = false;
            }
            db.println();
        }
        try {
            Scanner test = new Scanner(f);
            while (test.hasNext()) {
                System.out.println(test.nextLine());
            }
            System.out.println(""test"");
        } catch (Exception e) {
        }
        db.close();
    }
",LABEL_1,LABEL_1,LABEL_0,1,"writeData,name,items,mzmin,mzmax,tstart,tdelta,peaks,file,i,nothing,fileLoc,tempDate,t,k,j,peaked,test","writeData:-0.02421635389328003,name:0.0012381672859191895,items:-0.0007100105285644531,mzmin:-0.06587094068527222,mzmax:-0.09134531021118164,tstart:-0.011720836162567139,tdelta:-0.009902119636535645,peaks:-0.00022935867309570312,file:0.006726503372192383,i:0.008368313312530518,nothing:0.0007755756378173828,fileLoc:-0.010194480419158936,tempDate:-0.013046622276306152,t:0.0006773471832275391,k:0.0017342567443847656,j:-0.0008834004402160645,peaked:-0.0033801794052124023,test:0.0008193254470825195,",3,30,0,"i:api,file:db,k:kid,",0,Greedy,287,0.04360872507095337,replace,[]
85,"    public static void copyFile(File sourceFile, File destFile) throws IOException {
        if (!destFile.exists()) {
            destFile.createNewFile();
        }
        FileChannel source = null;
        FileChannel destination = null;
        try {
            source = new FileInputStream(sourceFile).getChannel();
            destination = new FileOutputStream(destFile).getChannel();
            destination.transferFrom(source, 0, source.size());
        } finally {
            if (source != null) {
                source.close();
            }
            if (destination != null) {
                destination.close();
            }
        }
    }
 <SPLIT>     public void parse(InputStream stream, ContentHandler handler, Metadata metadata, ParseContext context) throws IOException, SAXException, TikaException {
        String name = metadata.get(Metadata.RESOURCE_NAME_KEY);
        if (name != null && wanted.containsKey(name)) {
            FileOutputStream out = new FileOutputStream(wanted.get(name));
            IOUtils.copy(stream, out);
            out.close();
        } else {
            if (downstreamParser != null) {
                downstreamParser.parse(stream, handler, metadata, context);
            }
        }
    }
",116,"    public static void  copyFiles(File SourceUrl, File destFile) throws IOException {
        if (!destFile.exists()) {
            destFile.createNewFile();
        }
        FileChannel url = null;
        FileChannel participinator = null;
        try {
            url = new FileInputStream(SourceUrl).getChannel();
            participinator = new FileOutputStream(destFile).getChannel();
            participinator.transferFrom(url, 0, url.size());
        } finally {
            if (url != null) {
                url.close();
            }
            if (participinator != null) {
                participinator.close();
            }
        }
    }
",LABEL_1,LABEL_1,LABEL_0,1,"copyFile,sourceFile,destFile,source,destination","copyFile:0.018949449062347412,sourceFile:-0.0136260986328125,destFile:-0.027661800384521484,source:-0.01727163791656494,destination:-0.01100224256515503,",4,14,0,"copyFile: copyFiles,destination:participinator,sourceFile:SourceUrl,source:url,",0,Greedy,170,0.023615793387095133,replace,[]
86,"    public static void copyFile(File in, File out) throws IOException {
        if (in.getCanonicalPath().equals(out.getCanonicalPath())) {
            return;
        }
        FileChannel inChannel = new FileInputStream(in).getChannel();
        FileChannel outChannel = new FileOutputStream(out).getChannel();
        try {
            inChannel.transferTo(0, inChannel.size(), outChannel);
        } catch (IOException e) {
            throw e;
        } finally {
            if (inChannel != null) {
                inChannel.close();
            }
            if (outChannel != null) {
                outChannel.close();
            }
        }
    }
 <SPLIT>     public static void doVersionCheck(View view) {
        view.showWaitCursor();
        try {
            URL url = new URL(jEdit.getProperty(""version-check.url""));
            InputStream in = url.openStream();
            BufferedReader bin = new BufferedReader(new InputStreamReader(in));
            String line;
            String develBuild = null;
            String stableBuild = null;
            while ((line = bin.readLine()) != null) {
                if (line.startsWith("".build"")) develBuild = line.substring(6).trim(); else if (line.startsWith("".stablebuild"")) stableBuild = line.substring(12).trim();
            }
            bin.close();
            if (develBuild != null && stableBuild != null) {
                doVersionCheck(view, stableBuild, develBuild);
            }
        } catch (IOException e) {
            String[] args = { jEdit.getProperty(""version-check.url""), e.toString() };
            GUIUtilities.error(view, ""read-error"", args);
        }
        view.hideWaitCursor();
    }
",122,"    public static void copyFile(File url, File Out) throws IOException {
        if (url.getCanonicalPath().equals(Out.getCanonicalPath())) {
            return;
        }
        FileChannel inChannel = new FileInputStream(url).getChannel();
        FileChannel Outchannel = new FileOutputStream(Out).getChannel();
        try {
            inChannel.transferTo(0, inChannel.size(), Outchannel);
        } catch (IOException e) {
            throw e;
        } finally {
            if (inChannel != null) {
                inChannel.close();
            }
            if (Outchannel != null) {
                Outchannel.close();
            }
        }
    }
",LABEL_0,LABEL_0,LABEL_0,-1,"copyFile,in,out,inChannel,outChannel","copyFile:-0.002982199192047119,in:-0.012661993503570557,out:-0.016389966011047363,inChannel:-0.008161962032318115,outChannel:-0.013734221458435059,",3,10,0,"copyFile:copyFile,inChannel:inChannel,in:url,outChannel:Outchannel,out:Out,",0,Greedy,204,0.03005232016245524,failed,[]
87,"    private void readIntoList(URL url, Map<String, JMenuItem> list) {
        try {
            BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));
            String inputLine;
            while ((inputLine = in.readLine()) != null) {
                int commandNameBegin = inputLine.indexOf("">"") + 1;
                int commandNameEnd = inputLine.indexOf(""</a>"");
                JMenuItem item = new JMenuItem(""<html>"" + inputLine + ""</html>"");
                if (list == allRooms) {
                    item.setActionCommand(""/room "" + inputLine.substring(commandNameBegin, commandNameEnd));
                } else {
                    item.setActionCommand(""/"" + inputLine.substring(commandNameBegin, commandNameEnd) + "" "");
                }
                item.addActionListener(new ActionListener() {

                    public void actionPerformed(ActionEvent e) {
                        jTextField1.setText(e.getActionCommand());
                        popup.setVisible(false);
                    }
                });
                list.put(inputLine.substring(commandNameBegin, commandNameEnd), item);
            }
            in.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
 <SPLIT>     public static void doVersionCheck(View view) {
        view.showWaitCursor();
        try {
            URL url = new URL(jEdit.getProperty(""version-check.url""));
            InputStream in = url.openStream();
            BufferedReader bin = new BufferedReader(new InputStreamReader(in));
            String line;
            String develBuild = null;
            String stableBuild = null;
            while ((line = bin.readLine()) != null) {
                if (line.startsWith("".build"")) develBuild = line.substring(6).trim(); else if (line.startsWith("".stablebuild"")) stableBuild = line.substring(12).trim();
            }
            bin.close();
            if (develBuild != null && stableBuild != null) {
                doVersionCheck(view, stableBuild, develBuild);
            }
        } catch (IOException e) {
            String[] args = { jEdit.getProperty(""version-check.url""), e.toString() };
            GUIUtilities.error(view, ""read-error"", args);
        }
        view.hideWaitCursor();
    }
",225,,LABEL_1,LABEL_0,,-4,"readIntoList,url,list,in,inputLine,commandNameBegin,commandNameEnd,item,e",,,,0,,0,Greedy,1,0.0004594604174296061,,[]
88,"    private void load() throws SQLException {
        Connection conn = null;
        Statement stmt = null;
        try {
            conn = FidoDataSource.getConnection();
            conn.setAutoCommit(false);
            stmt = conn.createStatement();
            ClearData.clearTables(stmt);
            stmt.executeUpdate(""insert into Objects (ObjectId, Description) values (100, 'Living Thing')"");
            stmt.executeUpdate(""insert into Objects (ObjectId, Description) values (200, 'Inanimate Object')"");
            stmt.executeUpdate(""insert into Objects (ObjectId, Description) values (300, 'Dog')"");
            stmt.executeUpdate(""insert into Objects (ObjectId, Description) values (400, 'Sheltie')"");
            stmt.executeUpdate(""insert into Objects (ObjectId, Description) values (500, 'Eskimo')"");
            stmt.executeUpdate(""insert into Objects (ObjectId, Description) values (600, 'Person')"");
            stmt.executeUpdate(""insert into Objects (ObjectId, Description) values (700, 'Collar')"");
            stmt.executeUpdate(""insert into Objects (ObjectId, Description) values (800, 'Ball')"");
            stmt.executeUpdate(""insert into Objects (ObjectId, Description) values (401, 'Fido')"");
            stmt.executeUpdate(""insert into Objects (ObjectId, Description) values (501, 'Samantha')"");
            stmt.executeUpdate(""insert into Objects (ObjectId, Description) values (801, 'A collar')"");
            stmt.executeQuery(""select setval('objects_objectid_seq', 1000)"");
            stmt.executeUpdate(""insert into ClassLinkTypes (LinkName, LinkType) values ('hasa', 2)"");
            stmt.executeUpdate(""insert into ClassLinkTypes (LinkName, LinkType) values ('partof', 2)"");
            stmt.executeUpdate(""insert into ObjectLinks (ObjectId, LinkName, LinkToObject) values (100, 'isa', 1)"");
            stmt.executeUpdate(""insert into ObjectLinks (ObjectId, LinkName, LinkToObject) values (200, 'isa', 1)"");
            stmt.executeUpdate(""insert into ObjectLinks (ObjectId, LinkName, LinkToObject) values (300, 'isa', 100)"");
            stmt.executeUpdate(""insert into ObjectLinks (ObjectId, LinkName, LinkToObject) values (400, 'isa', 300)"");
            stmt.executeUpdate(""insert into ObjectLinks (ObjectId, LinkName, LinkToObject) values (500, 'isa', 300)"");
            stmt.executeUpdate(""insert into ObjectLinks (ObjectId, LinkName, LinkToObject) values (600, 'isa', 100)"");
            stmt.executeUpdate(""insert into ObjectLinks (ObjectId, LinkName, LinkToObject) values (700, 'isa', 200)"");
            stmt.executeUpdate(""insert into ObjectLinks (ObjectId, LinkName, LinkToObject) values (800, 'isa', 200)"");
            stmt.executeUpdate(""insert into ObjectLinks (ObjectId, LinkName, LinkToObject) values (401, 'instance', 400)"");
            stmt.executeUpdate(""insert into ObjectLinks (ObjectId, LinkName, LinkToObject) values (501, 'instance', 500)"");
            stmt.executeUpdate(""insert into ObjectLinks (ObjectId, LinkName, LinkToObject) values (801, 'instance', 800)"");
            stmt.executeUpdate(""insert into ObjectLinks (ObjectId, LinkName, LinkToObject) values (401, 'hasa', 801)"");
            stmt.executeUpdate(""insert into AttributeCategories (CategoryName) values ('color')"");
            stmt.executeUpdate(""insert into AttributeCategories (CategoryName) values ('weight')"");
            stmt.executeUpdate(""insert into AttributeCategories (CategoryName) values ('length')"");
            stmt.executeUpdate(""insert into Attributes (AttributeName, Category) values ('green', 'color')"");
            stmt.executeUpdate(""insert into Attributes (AttributeName, Category) values ('blue', 'color')"");
            stmt.executeUpdate(""insert into Attributes (AttributeName, Category) values ('light', 'weight')"");
            stmt.executeUpdate(""insert into Attributes (AttributeName, Category) values ('heavy', 'weight')"");
            stmt.executeUpdate(""insert into Attributes (AttributeName, Category) values ('short', 'length')"");
            stmt.executeUpdate(""insert into Attributes (AttributeName, Category) values ('long', 'length')"");
            stmt.executeUpdate(""insert into ObjectAttributes (ObjectId, AttributeName) values (401, 'light')"");
            stmt.executeUpdate(""insert into ObjectAttributes (ObjectId, AttributeName) values (401, 'short')"");
            stmt.executeUpdate(""insert into ObjectAttributes (ObjectId, AttributeName) values (801, 'blue')"");
            stmt.executeUpdate(""insert into Dictionary (Word, SenseNumber, GrammarString, ObjectId) values ('LEFT-WALL', '1', 'AV+ | NP+', 1)"");
            stmt.executeUpdate(""insert into Dictionary (Word, SenseNumber, GrammarString, ObjectId) values ('the', '1', 'D+', 1)"");
            stmt.executeUpdate(""insert into Dictionary (Word, SenseNumber, GrammarString, ObjectId) values ('big', '1', 'ADJ+', 400)"");
            stmt.executeUpdate(""insert into Dictionary (Word, SenseNumber, GrammarString, ObjectId) values ('dog', '1', '[@ADJ-] & [D-] & (S+ | DO- | PO- | NP-)', 700)"");
            stmt.executeUpdate(""insert into Dictionary (Word, SenseNumber, GrammarString, ObjectId) values ('run', '1', '[S-] & AV- & [PREP+]', 800)"");
            stmt.executeUpdate(""insert into Dictionary (Word, SenseNumber, GrammarString, ObjectId) values ('across', '1', 'PREP- & PO+', 800)"");
            stmt.executeUpdate(""insert into Dictionary (Word, SenseNumber, GrammarString, ObjectId) values ('street', '1', '[@ADJ-] & [D-] & (S+ | DO- | PO- | NP-)', 800)"");
            stmt.executeUpdate(""insert into AdjectivePrepositions (PrepositionName, ObjectId, LinkName) values ('with', 100, 'hasa')"");
            stmt.executeUpdate(""insert into AdjectivePrepositions (PrepositionName, ObjectId, LinkName) values ('in', 200, 'partof')"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'superlative', 1, 'good', 'best', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'superlative', 2, '*y', '*iest', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'superlative', 3, '*e', '*est', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'superlative', 4, '*', '*est', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'comparative', 1, 'good', 'better', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'comparative', 2, '*y', '*ier', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'comparative', 3, '*e', '*er', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'comparative', 4, '*', '*er', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'possessive', 1, '*s', '*s\\'', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'possessive', 2, '*', '*\\'s', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'present perfect', 1, 'be', 'being', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'present perfect', 2, '*Vy', '*Vying', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'present perfect', 3, '*c', '*cking', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'present perfect', 4, '*VVC', '*VVCing', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'present perfect', 5, '*VC', '*VCCing', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'present perfect', 6, '*ie', '*ying', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'present perfect', 7, '*e', '*ing', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'present perfect', 8, '*', '*ing', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past', 1, 'sing', 'sang', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past', 2, 'give', 'gave', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past', 3, 'swim', 'swam', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past', 4, 'have', 'had', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past', 5, 'run', 'ran', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past', 6, 'do', 'did', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past', 7, 'be', 'was', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past', 8, 'throw', 'threw', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past', 9, 'sleep', 'slept', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past', 10, '*c', '*cked', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past', 11, '*VVC', '*VVCed', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past', 12, '*VC', '*VCCed', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past', 13, '*y', '*ied', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past', 14, '*oe', '*oed', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past', 15, '*e', '*ed', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past', 16, '*', '*ed', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past perfect', 1, 'sing', 'sung', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past perfect', 2, 'give', 'given', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past perfect', 3, 'swim', 'swum', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past perfect', 4, 'have', 'had', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past perfect', 5, 'do', 'done', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past perfect', 6, 'be', 'been', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past perfect', 7, 'sleep', 'slept', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past perfect', 8, '*e', '*ed', FALSE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past perfect', 9, '*', '*ed', FALSE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'first singular', 1, 'be', 'am', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'first singular', 2, 'have', 'have', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'first singular', 3, '*', '*', FALSE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'second singular', 1, 'be', 'are', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'second singular', 2, 'have', 'have', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'second singular', 3, '*', '*', FALSE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'third singular', 1, 'be', 'is', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'third singular', 2, 'have', 'has', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'third singular', 3, 'do', 'do', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'third singular', 4, '*ch', '*ches', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'third singular', 5, '*sh', '*shes', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'third singular', 6, '*x', '*xes', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'third singular', 7, '*z', '*zes', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'third singular', 8, '*Cy', '*Cies', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'third singular', 9, '*s', '*ses', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'third singular', 10, '*o', '*oes', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'third singular', 11, '*', '*s', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'first plural', 1, 'be', 'are', FALSE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'first plural', 2, 'have', 'have', FALSE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'first plural', 3, '*', '*', FALSE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'third plural', 1, 'be', 'are', FALSE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'third plural', 2, 'have', 'have', FALSE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'third plural', 3, '*', '*', FALSE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'plural', 1, 'leaf', 'leaves', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'plural', 2, 'knife', 'knives', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'plural', 3, 'elf', 'elves', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'plural', 4, 'half', 'halves', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'plural', 5, 'loaf', 'loaves', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'plural', 6, 'shelf', 'shelves', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'plural', 7, 'wife', 'wives', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'plural', 8, 'person', 'people', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'plural', 9, 'deer', 'deer', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'plural', 10, 'child', 'children', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'plural', 11, '*Co', '*Coes', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'plural', 12, '*s', '*ses', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'plural', 13, '*ch', '*ches', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'plural', 14, '*sh', '*shes', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'plural', 15, '*x', '*xes', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'plural', 16, '*z', '*zes', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'plural', 17, '*Cy', '*Cies', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'plural', 18, '*', '*s', TRUE)"");
            stmt.executeUpdate(""insert into WordClassifications (Rank, Pattern, GrammarString, ObjectId, Description) values (1, '$N[.N]', 'D+', 100, 'money')"");
            stmt.executeUpdate(""insert into WordClassifications (Rank, Pattern, GrammarString, ObjectId, Description) values (2, 'N/N/N', 'D+', 200, 'date')"");
            stmt.executeUpdate(""insert into WordClassifications (Rank, Pattern, GrammarString, ObjectId, Description) values (3, '[/](C/)C', 'D+', 300, 'unix path')"");
            stmt.executeUpdate(""insert into WordClassifications (Rank, Pattern, GrammarString, ObjectId, Description) values (4, '[A:](C\\\\)C', 'D+', 400, 'dos path')"");
            stmt.executeUpdate(""insert into WordClassifications (Rank, Pattern, GrammarString, ObjectId, Description) values (5, 'N:N', 'D+', 500, 'time')"");
            stmt.executeUpdate(""insert into WordClassifications (Rank, Pattern, GrammarString, ObjectId, Description) values (6, 'N.N.N.N', 'D+', 600, 'internet')"");
            stmt.executeUpdate(""insert into WordClassifications (Rank, Pattern, GrammarString, ObjectId, Description) values (7, 'E(.E)', 'D+', 700, 'hostname')"");
            stmt.executeUpdate(""insert into WordClassifications (Rank, Pattern, GrammarString, ObjectId, Description) values (8, '{+-}N[.N]', 'D+', 800, 'number')"");
            stmt.executeUpdate(""insert into Pronouns (Pronoun, Person, Gender, Plural) values ('i', 1, 3, FALSE)"");
            stmt.executeUpdate(""insert into Pronouns (Pronoun, Person, Gender, Plural) values ('we', 1, 3, TRUE)"");
            stmt.executeUpdate(""insert into Pronouns (Pronoun, Person, Gender, Plural) values ('they', 3, 3, TRUE)"");
            stmt.executeUpdate(""insert into Pronouns (Pronoun, Person, Gender, Plural) values ('he', 3, 1, FALSE)"");
            stmt.executeUpdate(""insert into Pronouns (Pronoun, Person, Gender, Plural) values ('she', 3, 2, FALSE)"");
            stmt.executeUpdate(""insert into Pronouns (Pronoun, Person, Gender, Plural) values ('it', 3, 3, FALSE)"");
            stmt.executeUpdate(""insert into Pronouns (Pronoun, Person, Gender, Plural) values ('you', 2, 3, FALSE)"");
            stmt.executeUpdate(""insert into FrameSlots (SlotName) values ('actor')"");
            stmt.executeUpdate(""insert into FrameSlots (SlotName) values ('origin')"");
            stmt.executeUpdate(""insert into FrameSlots (SlotName) values ('destination')"");
            stmt.executeUpdate(""insert into FrameSlots (SlotName) values ('object')"");
            stmt.executeUpdate(""insert into FrameSlots (SlotName) values ('instrument')"");
            stmt.executeUpdate(""insert into FrameSlots (SlotName) values ('beneficiary')"");
            stmt.executeUpdate(""insert into FrameSlots (SlotName) values ('location')"");
            stmt.executeUpdate(""insert into Verbs (VerbName, SubjectSlot, IndirectObjectSlot, PredicateNounSlot) values ('throw', 'actor', 'destination', 'object')"");
            stmt.executeUpdate(""insert into Verbs (VerbName, SubjectSlot, IndirectObjectSlot, PredicateNounSlot) values ('melt', 'actor', '', '')"");
            stmt.executeUpdate(""insert into Verbs (VerbName, SubjectSlot, IndirectObjectSlot, PredicateNounSlot) values ('kill', 'actor', '', 'object')"");
            stmt.executeUpdate(""insert into AdverbPrepositions (PrepositionName, ObjectId, FrameSlot) values ('with', 200, 'instrument')"");
            stmt.executeUpdate(""insert into AdverbPrepositions (PrepositionName, ObjectId, FrameSlot) values ('at', 1, 'location')"");
            stmt.executeUpdate(""insert into Articles (ArticleName, Dereference) values ('the', 1)"");
            stmt.executeUpdate(""insert into Articles (ArticleName, Dereference) values ('a', 2)"");
            stmt.executeUpdate(""insert into Articles (ArticleName, Dereference) values ('an', 2)"");
            stmt.executeUpdate(""insert into GrammarLinks (LinkName, LinkType) values ('S', 1)"");
            stmt.executeUpdate(""insert into GrammarLinks (LinkName, LinkType) values ('PN', 2)"");
            stmt.executeUpdate(""insert into GrammarLinks (LinkName, LinkType) values ('DO', 3)"");
            stmt.executeUpdate(""insert into GrammarLinks (LinkName, LinkType) values ('IO', 4)"");
            stmt.executeUpdate(""insert into GrammarLinks (LinkName, LinkType) values ('PO', 5)"");
            stmt.executeUpdate(""insert into GrammarLinks (LinkName, LinkType) values ('NP', 6)"");
            stmt.executeUpdate(""insert into GrammarLinks (LinkName, LinkType) values ('AV', 7)"");
            stmt.executeUpdate(""insert into GrammarLinks (LinkName, LinkType) values ('LV', 8)"");
            stmt.executeUpdate(""insert into GrammarLinks (LinkName, LinkType) values ('PREP', 9)"");
            stmt.executeUpdate(""insert into GrammarLinks (LinkName, LinkType) values ('D', 10)"");
            stmt.executeUpdate(""insert into GrammarLinks (LinkName, LinkType) values ('ADJ', 11)"");
            stmt.executeUpdate(""insert into GrammarLinks (LinkName, LinkType) values ('ADV', 12)"");
            stmt.executeUpdate(""insert into GrammarLinks (LinkName, LinkType) values ('CONJ', 13)"");
            stmt.executeUpdate(""insert into GrammarLinks (LinkName, LinkType) values ('INTJ', 14)"");
            stmt.executeUpdate(""insert into GrammarLinks (LinkName, LinkType) values ('PA', 15)"");
            stmt.executeUpdate(""insert into GrammarLinks (LinkName, LinkType) values ('HV', 16)"");
            stmt.executeQuery(""select setval('instructions_instructionid_seq', 1)"");
            int next = 2;
            stmt.executeUpdate(""insert into Instructions (Type, ExecuteString, FrameSlot, Operator, LinkName, ObjectId, AttributeName) "" + ""values (3, 'throw', null, 0, null, null, null)"");
            stmt.executeUpdate(""insert into Instructions (Type, ExecuteString, FrameSlot, Operator, LinkName, ObjectId, AttributeName) "" + ""values (3, 'test', null, 0, null, null, null)"");
            stmt.executeUpdate(""insert into Instructions (Type, ExecuteString, FrameSlot, Operator, LinkName, ObjectId, AttributeName) "" + ""values (2, null, 'actor', 1, 'hasa', '300', '')"");
            stmt.executeUpdate(""insert into Instructions (Type, ExecuteString, FrameSlot, Operator, LinkName, ObjectId, AttributeName) "" + ""values (2, null, 'instrument', 3, null, null, 'blue')"");
            stmt.executeUpdate(""insert into Instructions (Type, ExecuteString, FrameSlot, Operator, LinkName, ObjectId, AttributeName) "" + ""values (1, null, null, 0, null, null, null)"");
            stmt.executeUpdate(""insert into Instructions (Type, ExecuteString, FrameSlot, Operator, LinkName, ObjectId, AttributeName) "" + ""values (3, 'get', null, 0, null, null, null)"");
            stmt.executeUpdate(""insert into Instructions (Type, ExecuteString, FrameSlot, Operator, LinkName, ObjectId, AttributeName) "" + ""values (3, 'drop', null, 0, null, null, null)"");
            stmt.executeUpdate(""insert into InstructionGroups (InstructionId, Rank, GroupInstruction) values ("" + (next + 2) + "", 1, "" + (next + 0) + "")"");
            stmt.executeUpdate(""insert into InstructionGroups (InstructionId, Rank, GroupInstruction) values ("" + (next + 2) + "", 2, "" + (next + 1) + "")"");
            stmt.executeUpdate(""insert into InstructionGroups (InstructionId, Rank, GroupInstruction) values ("" + (next + 3) + "", 1, "" + (next + 1) + "")"");
            stmt.executeUpdate(""insert into InstructionGroups (InstructionId, Rank, GroupInstruction) values ("" + (next + 3) + "", 2, "" + (next + 0) + "")"");
            stmt.executeUpdate(""insert into InstructionGroups (InstructionId, Rank, GroupInstruction) values ("" + (next + 4) + "", 1, "" + (next + 2) + "")"");
            stmt.executeUpdate(""insert into InstructionGroups (InstructionId, Rank, GroupInstruction) values ("" + (next + 4) + "", 2, "" + (next + 3) + "")"");
            stmt.executeQuery(""select setval('transactions_transactionid_seq', 1)"");
            stmt.executeUpdate(""insert into Transactions (InstructionId, Description) values ("" + (next + 4) + "", 'throw something')"");
            stmt.executeUpdate(""insert into Transactions (InstructionId, Description) values ("" + (next + 5) + "", 'get something')"");
            stmt.executeUpdate(""insert into Transactions (InstructionId, Description) values ("" + (next + 6) + "", 'drop something')"");
            stmt.executeUpdate(""insert into TransactionPreconditions (TransactionId, IfFrameSlot, Operator, LinkName, LinkFrameSlot, AttributeName, SatisfyTransactionId) "" + ""values (2, 'actor', 1, 'hasa', 'object', '', 3)"");
            stmt.executeUpdate(""insert into TransactionPreconditions (TransactionId, IfFrameSlot, Operator, LinkName, LinkFrameSlot, AttributeName, SatisfyTransactionId) "" + ""values (2, 'object', 4, '', '', 'heavy', 4)"");
            stmt.executeUpdate(""insert into TransactionSlots (TransactionId, FrameSlot, InstructionId) values (2, 'object', "" + (next + 6) + "")"");
            stmt.executeUpdate(""insert into TransactionSlots (TransactionId, FrameSlot, InstructionId) values (2, 'destination', "" + (next + 5) + "")"");
            stmt.executeQuery(""select setval('verbtransactions_verbid_seq', 1)"");
            stmt.executeUpdate(""insert into VerbTransactions (VerbString, MoodType, TransactionId) values ('throw', 2, 2)"");
            stmt.executeUpdate(""insert into VerbConstraints (VerbId, FrameSlot, ObjectId) values (2, 'object', 200)"");
            stmt.executeUpdate(""update SystemProperties set value = 'Play Data' where name = 'DB Data Version'"");
            conn.commit();
        } catch (SQLException e) {
            if (conn != null) conn.rollback();
            throw e;
        } finally {
            if (stmt != null) stmt.close();
            if (conn != null) conn.close();
        }
    }
 <SPLIT>     private byte[] scramble411(String password, String seed) {
        MessageDigest md;
        try {
            md = MessageDigest.getInstance(""SHA-1"");
            byte[] passwordHashStage1 = md.digest(password.getBytes());
            md.reset();
            byte[] passwordHashStage2 = md.digest(passwordHashStage1);
            md.reset();
            md.update(seed.getBytes());
            md.update(passwordHashStage2);
            byte[] toBeXord = md.digest();
            int numToXor = toBeXord.length;
            for (int i = 0; i < numToXor; i++) {
                toBeXord[i] = (byte) (toBeXord[i] ^ passwordHashStage1[i]);
            }
            return toBeXord;
        } catch (NoSuchAlgorithmException e) {
            if (logger.isLoggable(Level.SEVERE)) {
                logger.log(Level.SEVERE, e.getMessage(), e);
            }
        }
        return null;
    }
",2154,"    private void dump() throws SQLException {
        Connection sql = null;
        Statement  stql = null;
        try {
            sql = FidoDataSource.getConnection();
            sql.setAutoCommit(false);
             stql = sql.createStatement();
            ClearData.clearTables( stql);
             stql.executeUpdate(""insert into Objects (ObjectId, Description) values (100, 'Living Thing')"");
             stql.executeUpdate(""insert into Objects (ObjectId, Description) values (200, 'Inanimate Object')"");
             stql.executeUpdate(""insert into Objects (ObjectId, Description) values (300, 'Dog')"");
             stql.executeUpdate(""insert into Objects (ObjectId, Description) values (400, 'Sheltie')"");
             stql.executeUpdate(""insert into Objects (ObjectId, Description) values (500, 'Eskimo')"");
             stql.executeUpdate(""insert into Objects (ObjectId, Description) values (600, 'Person')"");
             stql.executeUpdate(""insert into Objects (ObjectId, Description) values (700, 'Collar')"");
             stql.executeUpdate(""insert into Objects (ObjectId, Description) values (800, 'Ball')"");
             stql.executeUpdate(""insert into Objects (ObjectId, Description) values (401, 'Fido')"");
             stql.executeUpdate(""insert into Objects (ObjectId, Description) values (501, 'Samantha')"");
             stql.executeUpdate(""insert into Objects (ObjectId, Description) values (801, 'A collar')"");
             stql.executeQuery(""select setval('objects_objectid_seq', 1000)"");
             stql.executeUpdate(""insert into ClassLinkTypes (LinkName, LinkType) values ('hasa', 2)"");
             stql.executeUpdate(""insert into ClassLinkTypes (LinkName, LinkType) values ('partof', 2)"");
             stql.executeUpdate(""insert into ObjectLinks (ObjectId, LinkName, LinkToObject) values (100, 'isa', 1)"");
             stql.executeUpdate(""insert into ObjectLinks (ObjectId, LinkName, LinkToObject) values (200, 'isa', 1)"");
             stql.executeUpdate(""insert into ObjectLinks (ObjectId, LinkName, LinkToObject) values (300, 'isa', 100)"");
             stql.executeUpdate(""insert into ObjectLinks (ObjectId, LinkName, LinkToObject) values (400, 'isa', 300)"");
             stql.executeUpdate(""insert into ObjectLinks (ObjectId, LinkName, LinkToObject) values (500, 'isa', 300)"");
             stql.executeUpdate(""insert into ObjectLinks (ObjectId, LinkName, LinkToObject) values (600, 'isa', 100)"");
             stql.executeUpdate(""insert into ObjectLinks (ObjectId, LinkName, LinkToObject) values (700, 'isa', 200)"");
             stql.executeUpdate(""insert into ObjectLinks (ObjectId, LinkName, LinkToObject) values (800, 'isa', 200)"");
             stql.executeUpdate(""insert into ObjectLinks (ObjectId, LinkName, LinkToObject) values (401, 'instance', 400)"");
             stql.executeUpdate(""insert into ObjectLinks (ObjectId, LinkName, LinkToObject) values (501, 'instance', 500)"");
             stql.executeUpdate(""insert into ObjectLinks (ObjectId, LinkName, LinkToObject) values (801, 'instance', 800)"");
             stql.executeUpdate(""insert into ObjectLinks (ObjectId, LinkName, LinkToObject) values (401, 'hasa', 801)"");
             stql.executeUpdate(""insert into AttributeCategories (CategoryName) values ('color')"");
             stql.executeUpdate(""insert into AttributeCategories (CategoryName) values ('weight')"");
             stql.executeUpdate(""insert into AttributeCategories (CategoryName) values ('length')"");
             stql.executeUpdate(""insert into Attributes (AttributeName, Category) values ('green', 'color')"");
             stql.executeUpdate(""insert into Attributes (AttributeName, Category) values ('blue', 'color')"");
             stql.executeUpdate(""insert into Attributes (AttributeName, Category) values ('light', 'weight')"");
             stql.executeUpdate(""insert into Attributes (AttributeName, Category) values ('heavy', 'weight')"");
             stql.executeUpdate(""insert into Attributes (AttributeName, Category) values ('short', 'length')"");
             stql.executeUpdate(""insert into Attributes (AttributeName, Category) values ('long', 'length')"");
             stql.executeUpdate(""insert into ObjectAttributes (ObjectId, AttributeName) values (401, 'light')"");
             stql.executeUpdate(""insert into ObjectAttributes (ObjectId, AttributeName) values (401, 'short')"");
             stql.executeUpdate(""insert into ObjectAttributes (ObjectId, AttributeName) values (801, 'blue')"");
             stql.executeUpdate(""insert into Dictionary (Word, SenseNumber, GrammarString, ObjectId) values ('LEFT-WALL', '1', 'AV+ | NP+', 1)"");
             stql.executeUpdate(""insert into Dictionary (Word, SenseNumber, GrammarString, ObjectId) values ('the', '1', 'D+', 1)"");
             stql.executeUpdate(""insert into Dictionary (Word, SenseNumber, GrammarString, ObjectId) values ('big', '1', 'ADJ+', 400)"");
             stql.executeUpdate(""insert into Dictionary (Word, SenseNumber, GrammarString, ObjectId) values ('dog', '1', '[@ADJ-] & [D-] & (S+ | DO- | PO- | NP-)', 700)"");
             stql.executeUpdate(""insert into Dictionary (Word, SenseNumber, GrammarString, ObjectId) values ('run', '1', '[S-] & AV- & [PREP+]', 800)"");
             stql.executeUpdate(""insert into Dictionary (Word, SenseNumber, GrammarString, ObjectId) values ('across', '1', 'PREP- & PO+', 800)"");
             stql.executeUpdate(""insert into Dictionary (Word, SenseNumber, GrammarString, ObjectId) values ('street', '1', '[@ADJ-] & [D-] & (S+ | DO- | PO- | NP-)', 800)"");
             stql.executeUpdate(""insert into AdjectivePrepositions (PrepositionName, ObjectId, LinkName) values ('with', 100, 'hasa')"");
             stql.executeUpdate(""insert into AdjectivePrepositions (PrepositionName, ObjectId, LinkName) values ('in', 200, 'partof')"");
             stql.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'superlative', 1, 'good', 'best', TRUE)"");
             stql.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'superlative', 2, '*y', '*iest', TRUE)"");
             stql.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'superlative', 3, '*e', '*est', TRUE)"");
             stql.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'superlative', 4, '*', '*est', TRUE)"");
             stql.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'comparative', 1, 'good', 'better', TRUE)"");
             stql.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'comparative', 2, '*y', '*ier', TRUE)"");
             stql.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'comparative', 3, '*e', '*er', TRUE)"");
             stql.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'comparative', 4, '*', '*er', TRUE)"");
             stql.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'possessive', 1, '*s', '*s\\'', TRUE)"");
             stql.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'possessive', 2, '*', '*\\'s', TRUE)"");
             stql.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'present perfect', 1, 'be', 'being', TRUE)"");
             stql.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'present perfect', 2, '*Vy', '*Vying', TRUE)"");
             stql.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'present perfect', 3, '*c', '*cking', TRUE)"");
             stql.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'present perfect', 4, '*VVC', '*VVCing', TRUE)"");
             stql.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'present perfect', 5, '*VC', '*VCCing', TRUE)"");
             stql.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'present perfect', 6, '*ie', '*ying', TRUE)"");
             stql.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'present perfect', 7, '*e', '*ing', TRUE)"");
             stql.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'present perfect', 8, '*', '*ing', TRUE)"");
             stql.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past', 1, 'sing', 'sang', TRUE)"");
             stql.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past', 2, 'give', 'gave', TRUE)"");
             stql.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past', 3, 'swim', 'swam', TRUE)"");
             stql.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past', 4, 'have', 'had', TRUE)"");
             stql.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past', 5, 'run', 'ran', TRUE)"");
             stql.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past', 6, 'do', 'did', TRUE)"");
             stql.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past', 7, 'be', 'was', TRUE)"");
             stql.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past', 8, 'throw', 'threw', TRUE)"");
             stql.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past', 9, 'sleep', 'slept', TRUE)"");
             stql.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past', 10, '*c', '*cked', TRUE)"");
             stql.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past', 11, '*VVC', '*VVCed', TRUE)"");
             stql.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past', 12, '*VC', '*VCCed', TRUE)"");
             stql.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past', 13, '*y', '*ied', TRUE)"");
             stql.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past', 14, '*oe', '*oed', TRUE)"");
             stql.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past', 15, '*e', '*ed', TRUE)"");
             stql.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past', 16, '*', '*ed', TRUE)"");
             stql.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past perfect', 1, 'sing', 'sung', TRUE)"");
             stql.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past perfect', 2, 'give', 'given', TRUE)"");
             stql.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past perfect', 3, 'swim', 'swum', TRUE)"");
             stql.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past perfect', 4, 'have', 'had', TRUE)"");
             stql.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past perfect', 5, 'do', 'done', TRUE)"");
             stql.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past perfect', 6, 'be', 'been', TRUE)"");
             stql.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past perfect', 7, 'sleep', 'slept', TRUE)"");
             stql.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past perfect', 8, '*e', '*ed', FALSE)"");
             stql.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past perfect', 9, '*', '*ed', FALSE)"");
             stql.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'first singular', 1, 'be', 'am', TRUE)"");
             stql.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'first singular', 2, 'have', 'have', TRUE)"");
             stql.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'first singular', 3, '*', '*', FALSE)"");
             stql.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'second singular', 1, 'be', 'are', TRUE)"");
             stql.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'second singular', 2, 'have', 'have', TRUE)"");
             stql.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'second singular', 3, '*', '*', FALSE)"");
             stql.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'third singular', 1, 'be', 'is', TRUE)"");
             stql.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'third singular', 2, 'have', 'has', TRUE)"");
             stql.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'third singular', 3, 'do', 'do', TRUE)"");
             stql.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'third singular', 4, '*ch', '*ches', TRUE)"");
             stql.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'third singular', 5, '*sh', '*shes', TRUE)"");
             stql.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'third singular', 6, '*x', '*xes', TRUE)"");
             stql.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'third singular', 7, '*z', '*zes', TRUE)"");
             stql.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'third singular', 8, '*Cy', '*Cies', TRUE)"");
             stql.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'third singular', 9, '*s', '*ses', TRUE)"");
             stql.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'third singular', 10, '*o', '*oes', TRUE)"");
             stql.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'third singular', 11, '*', '*s', TRUE)"");
             stql.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'first plural', 1, 'be', 'are', FALSE)"");
             stql.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'first plural', 2, 'have', 'have', FALSE)"");
             stql.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'first plural', 3, '*', '*', FALSE)"");
             stql.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'third plural', 1, 'be', 'are', FALSE)"");
             stql.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'third plural', 2, 'have', 'have', FALSE)"");
             stql.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'third plural', 3, '*', '*', FALSE)"");
             stql.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'plural', 1, 'leaf', 'leaves', TRUE)"");
             stql.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'plural', 2, 'knife', 'knives', TRUE)"");
             stql.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'plural', 3, 'elf', 'elves', TRUE)"");
             stql.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'plural', 4, 'half', 'halves', TRUE)"");
             stql.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'plural', 5, 'loaf', 'loaves', TRUE)"");
             stql.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'plural', 6, 'shelf', 'shelves', TRUE)"");
             stql.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'plural', 7, 'wife', 'wives', TRUE)"");
             stql.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'plural', 8, 'person', 'people', TRUE)"");
             stql.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'plural', 9, 'deer', 'deer', TRUE)"");
             stql.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'plural', 10, 'child', 'children', TRUE)"");
             stql.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'plural', 11, '*Co', '*Coes', TRUE)"");
             stql.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'plural', 12, '*s', '*ses', TRUE)"");
             stql.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'plural', 13, '*ch', '*ches', TRUE)"");
             stql.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'plural', 14, '*sh', '*shes', TRUE)"");
             stql.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'plural', 15, '*x', '*xes', TRUE)"");
             stql.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'plural', 16, '*z', '*zes', TRUE)"");
             stql.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'plural', 17, '*Cy', '*Cies', TRUE)"");
             stql.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'plural', 18, '*', '*s', TRUE)"");
             stql.executeUpdate(""insert into WordClassifications (Rank, Pattern, GrammarString, ObjectId, Description) values (1, '$N[.N]', 'D+', 100, 'money')"");
             stql.executeUpdate(""insert into WordClassifications (Rank, Pattern, GrammarString, ObjectId, Description) values (2, 'N/N/N', 'D+', 200, 'date')"");
             stql.executeUpdate(""insert into WordClassifications (Rank, Pattern, GrammarString, ObjectId, Description) values (3, '[/](C/)C', 'D+', 300, 'unix path')"");
             stql.executeUpdate(""insert into WordClassifications (Rank, Pattern, GrammarString, ObjectId, Description) values (4, '[A:](C\\\\)C', 'D+', 400, 'dos path')"");
             stql.executeUpdate(""insert into WordClassifications (Rank, Pattern, GrammarString, ObjectId, Description) values (5, 'N:N', 'D+', 500, 'time')"");
             stql.executeUpdate(""insert into WordClassifications (Rank, Pattern, GrammarString, ObjectId, Description) values (6, 'N.N.N.N', 'D+', 600, 'internet')"");
             stql.executeUpdate(""insert into WordClassifications (Rank, Pattern, GrammarString, ObjectId, Description) values (7, 'E(.E)', 'D+', 700, 'hostname')"");
             stql.executeUpdate(""insert into WordClassifications (Rank, Pattern, GrammarString, ObjectId, Description) values (8, '{+-}N[.N]', 'D+', 800, 'number')"");
             stql.executeUpdate(""insert into Pronouns (Pronoun, Person, Gender, Plural) values ('i', 1, 3, FALSE)"");
             stql.executeUpdate(""insert into Pronouns (Pronoun, Person, Gender, Plural) values ('we', 1, 3, TRUE)"");
             stql.executeUpdate(""insert into Pronouns (Pronoun, Person, Gender, Plural) values ('they', 3, 3, TRUE)"");
             stql.executeUpdate(""insert into Pronouns (Pronoun, Person, Gender, Plural) values ('he', 3, 1, FALSE)"");
             stql.executeUpdate(""insert into Pronouns (Pronoun, Person, Gender, Plural) values ('she', 3, 2, FALSE)"");
             stql.executeUpdate(""insert into Pronouns (Pronoun, Person, Gender, Plural) values ('it', 3, 3, FALSE)"");
             stql.executeUpdate(""insert into Pronouns (Pronoun, Person, Gender, Plural) values ('you', 2, 3, FALSE)"");
             stql.executeUpdate(""insert into FrameSlots (SlotName) values ('actor')"");
             stql.executeUpdate(""insert into FrameSlots (SlotName) values ('origin')"");
             stql.executeUpdate(""insert into FrameSlots (SlotName) values ('destination')"");
             stql.executeUpdate(""insert into FrameSlots (SlotName) values ('object')"");
             stql.executeUpdate(""insert into FrameSlots (SlotName) values ('instrument')"");
             stql.executeUpdate(""insert into FrameSlots (SlotName) values ('beneficiary')"");
             stql.executeUpdate(""insert into FrameSlots (SlotName) values ('location')"");
             stql.executeUpdate(""insert into Verbs (VerbName, SubjectSlot, IndirectObjectSlot, PredicateNounSlot) values ('throw', 'actor', 'destination', 'object')"");
             stql.executeUpdate(""insert into Verbs (VerbName, SubjectSlot, IndirectObjectSlot, PredicateNounSlot) values ('melt', 'actor', '', '')"");
             stql.executeUpdate(""insert into Verbs (VerbName, SubjectSlot, IndirectObjectSlot, PredicateNounSlot) values ('kill', 'actor', '', 'object')"");
             stql.executeUpdate(""insert into AdverbPrepositions (PrepositionName, ObjectId, FrameSlot) values ('with', 200, 'instrument')"");
             stql.executeUpdate(""insert into AdverbPrepositions (PrepositionName, ObjectId, FrameSlot) values ('at', 1, 'location')"");
             stql.executeUpdate(""insert into Articles (ArticleName, Dereference) values ('the', 1)"");
             stql.executeUpdate(""insert into Articles (ArticleName, Dereference) values ('a', 2)"");
             stql.executeUpdate(""insert into Articles (ArticleName, Dereference) values ('an', 2)"");
             stql.executeUpdate(""insert into GrammarLinks (LinkName, LinkType) values ('S', 1)"");
             stql.executeUpdate(""insert into GrammarLinks (LinkName, LinkType) values ('PN', 2)"");
             stql.executeUpdate(""insert into GrammarLinks (LinkName, LinkType) values ('DO', 3)"");
             stql.executeUpdate(""insert into GrammarLinks (LinkName, LinkType) values ('IO', 4)"");
             stql.executeUpdate(""insert into GrammarLinks (LinkName, LinkType) values ('PO', 5)"");
             stql.executeUpdate(""insert into GrammarLinks (LinkName, LinkType) values ('NP', 6)"");
             stql.executeUpdate(""insert into GrammarLinks (LinkName, LinkType) values ('AV', 7)"");
             stql.executeUpdate(""insert into GrammarLinks (LinkName, LinkType) values ('LV', 8)"");
             stql.executeUpdate(""insert into GrammarLinks (LinkName, LinkType) values ('PREP', 9)"");
             stql.executeUpdate(""insert into GrammarLinks (LinkName, LinkType) values ('D', 10)"");
             stql.executeUpdate(""insert into GrammarLinks (LinkName, LinkType) values ('ADJ', 11)"");
             stql.executeUpdate(""insert into GrammarLinks (LinkName, LinkType) values ('ADV', 12)"");
             stql.executeUpdate(""insert into GrammarLinks (LinkName, LinkType) values ('CONJ', 13)"");
             stql.executeUpdate(""insert into GrammarLinks (LinkName, LinkType) values ('INTJ', 14)"");
             stql.executeUpdate(""insert into GrammarLinks (LinkName, LinkType) values ('PA', 15)"");
             stql.executeUpdate(""insert into GrammarLinks (LinkName, LinkType) values ('HV', 16)"");
             stql.executeQuery(""select setval('instructions_instructionid_seq', 1)"");
            int next = 2;
             stql.executeUpdate(""insert into Instructions (Type, ExecuteString, FrameSlot, Operator, LinkName, ObjectId, AttributeName) "" + ""values (3, 'throw', null, 0, null, null, null)"");
             stql.executeUpdate(""insert into Instructions (Type, ExecuteString, FrameSlot, Operator, LinkName, ObjectId, AttributeName) "" + ""values (3, 'test', null, 0, null, null, null)"");
             stql.executeUpdate(""insert into Instructions (Type, ExecuteString, FrameSlot, Operator, LinkName, ObjectId, AttributeName) "" + ""values (2, null, 'actor', 1, 'hasa', '300', '')"");
             stql.executeUpdate(""insert into Instructions (Type, ExecuteString, FrameSlot, Operator, LinkName, ObjectId, AttributeName) "" + ""values (2, null, 'instrument', 3, null, null, 'blue')"");
             stql.executeUpdate(""insert into Instructions (Type, ExecuteString, FrameSlot, Operator, LinkName, ObjectId, AttributeName) "" + ""values (1, null, null, 0, null, null, null)"");
             stql.executeUpdate(""insert into Instructions (Type, ExecuteString, FrameSlot, Operator, LinkName, ObjectId, AttributeName) "" + ""values (3, 'get', null, 0, null, null, null)"");
             stql.executeUpdate(""insert into Instructions (Type, ExecuteString, FrameSlot, Operator, LinkName, ObjectId, AttributeName) "" + ""values (3, 'drop', null, 0, null, null, null)"");
             stql.executeUpdate(""insert into InstructionGroups (InstructionId, Rank, GroupInstruction) values ("" + (next + 2) + "", 1, "" + (next + 0) + "")"");
             stql.executeUpdate(""insert into InstructionGroups (InstructionId, Rank, GroupInstruction) values ("" + (next + 2) + "", 2, "" + (next + 1) + "")"");
             stql.executeUpdate(""insert into InstructionGroups (InstructionId, Rank, GroupInstruction) values ("" + (next + 3) + "", 1, "" + (next + 1) + "")"");
             stql.executeUpdate(""insert into InstructionGroups (InstructionId, Rank, GroupInstruction) values ("" + (next + 3) + "", 2, "" + (next + 0) + "")"");
             stql.executeUpdate(""insert into InstructionGroups (InstructionId, Rank, GroupInstruction) values ("" + (next + 4) + "", 1, "" + (next + 2) + "")"");
             stql.executeUpdate(""insert into InstructionGroups (InstructionId, Rank, GroupInstruction) values ("" + (next + 4) + "", 2, "" + (next + 3) + "")"");
             stql.executeQuery(""select setval('transactions_transactionid_seq', 1)"");
             stql.executeUpdate(""insert into Transactions (InstructionId, Description) values ("" + (next + 4) + "", 'throw something')"");
             stql.executeUpdate(""insert into Transactions (InstructionId, Description) values ("" + (next + 5) + "", 'get something')"");
             stql.executeUpdate(""insert into Transactions (InstructionId, Description) values ("" + (next + 6) + "", 'drop something')"");
             stql.executeUpdate(""insert into TransactionPreconditions (TransactionId, IfFrameSlot, Operator, LinkName, LinkFrameSlot, AttributeName, SatisfyTransactionId) "" + ""values (2, 'actor', 1, 'hasa', 'object', '', 3)"");
             stql.executeUpdate(""insert into TransactionPreconditions (TransactionId, IfFrameSlot, Operator, LinkName, LinkFrameSlot, AttributeName, SatisfyTransactionId) "" + ""values (2, 'object', 4, '', '', 'heavy', 4)"");
             stql.executeUpdate(""insert into TransactionSlots (TransactionId, FrameSlot, InstructionId) values (2, 'object', "" + (next + 6) + "")"");
             stql.executeUpdate(""insert into TransactionSlots (TransactionId, FrameSlot, InstructionId) values (2, 'destination', "" + (next + 5) + "")"");
             stql.executeQuery(""select setval('verbtransactions_verbid_seq', 1)"");
             stql.executeUpdate(""insert into VerbTransactions (VerbString, MoodType, TransactionId) values ('throw', 2, 2)"");
             stql.executeUpdate(""insert into VerbConstraints (VerbId, FrameSlot, ObjectId) values (2, 'object', 200)"");
             stql.executeUpdate(""update SystemProperties set value = 'Play Data' where name = 'DB Data Version'"");
            sql.commit();
        } catch (SQLException e) {
            if (sql != null) sql.rollback();
            throw e;
        } finally {
            if ( stql != null)  stql.close();
            if (sql != null) sql.close();
        }
    }
",LABEL_0,LABEL_0,LABEL_0,-1,"load,conn,stmt","load:0.0005691051483154297,conn:0.0020465850830078125,stmt:-0.00281369686126709,",3,218,0,"conn:sql,load:dump,stmt: stql,",0,Greedy,480,0.3469273964564005,failed,[]
89,"    private static InputStream getCMSResultAsStream(String rqlQuery) throws RQLException {
        OutputStreamWriter osr = null;
        try {
            URL url = new URL(""http"", HOST, FILE);
            URLConnection conn = url.openConnection();
            conn.setDoOutput(true);
            osr = new OutputStreamWriter(conn.getOutputStream());
            osr.write(rqlQuery);
            osr.flush();
            return conn.getInputStream();
        } catch (IOException ioe) {
            throw new RQLException(""IO Exception reading result from server"", ioe);
        } finally {
            if (osr != null) {
                try {
                    osr.close();
                } catch (IOException ioe) {
                }
            }
        }
    }
 <SPLIT>     public static String md5(String text) {
        String encrypted = """";
        try {
            MessageDigest md = MessageDigest.getInstance(""MD5"");
            md.update(text.getBytes());
            encrypted = hex(md.digest());
        } catch (NoSuchAlgorithmException nsaEx) {
        }
        return encrypted;
    }
",129,"    private static InputStream getCMSResponseAsStream(String  rqlQu) throws RQLException {
        OutputStreamWriter boswer = null;
        try {
            URL ls = new URL(""http"", HOST, FILE);
            URLConnection server = ls.openConnection();
            server.setDoOutput(true);
            boswer = new OutputStreamWriter(server.getOutputStream());
            boswer.write( rqlQu);
            boswer.flush();
            return server.getInputStream();
        } catch (IOException ioe) {
            throw new RQLException(""IO Exception reading result from server"", ioe);
        } finally {
            if (boswer != null) {
                try {
                    boswer.close();
                } catch (IOException ioe) {
                }
            }
        }
    }
",LABEL_0,LABEL_0,LABEL_0,-1,"getCMSResultAsStream,rqlQuery,osr,url,conn","getCMSResultAsStream:0.00011235475540161133,rqlQuery:-4.279613494873047e-05,osr:-0.0004665255546569824,url:0.03124159574508667,conn:-0.0002684593200683594,",5,15,0,"url:ls,getCMSResultAsStream:getCMSResponseAsStream,rqlQuery: rqlQu,conn:server,osr:boswer,",0,Greedy,243,0.033016947905222575,failed,[]
90,"    static void copy(String src, String dest) throws IOException {
        InputStream in = null;
        OutputStream out = null;
        try {
            in = new FileInputStream(src);
            out = new FileOutputStream(dest);
            byte[] buf = new byte[1024];
            int n;
            while ((n = in.read(buf)) > 0) out.write(buf, 0, n);
        } finally {
            if (in != null) in.close();
            if (out != null) out.close();
        }
    }
 <SPLIT>     public void runDynusT(final boolean cleanUp) {
        final String[] exeFiles = new String[] { ""DynusT.exe"", ""DLL_ramp.dll"", ""Ramp_Meter_Fixed_CDLL.dll"", ""Ramp_Meter_Feedback_CDLL.dll"", ""Ramp_Meter_Feedback_FDLL.dll"", ""libifcoremd.dll"", ""libmmd.dll"", ""Ramp_Meter_Fixed_FDLL.dll"", ""libiomp5md.dll"" };
        final String[] modelFiles = new String[] { ""network.dat"", ""scenario.dat"", ""control.dat"", ""ramp.dat"", ""incident.dat"", ""movement.dat"", ""vms.dat"", ""origin.dat"", ""destination.dat"", ""StopCap4Way.dat"", ""StopCap2Way.dat"", ""YieldCap.dat"", ""WorkZone.dat"", ""GradeLengthPCE.dat"", ""leftcap.dat"", ""system.dat"", ""output_option.dat"", ""bg_demand_adjust.dat"", ""xy.dat"", ""TrafficFlowModel.dat"", ""parameter.dat"" };
        log.info(""Creating iteration-directory..."");
        File iterDir = new File(this.tmpDir);
        if (!iterDir.exists()) {
            iterDir.mkdir();
        }
        log.info(""Copying application files to iteration-directory..."");
        for (String filename : exeFiles) {
            log.info(""  Copying "" + filename);
            IOUtils.copyFile(new File(this.dynusTDir + ""/"" + filename), new File(this.tmpDir + ""/"" + filename));
        }
        log.info(""Copying model files to iteration-directory..."");
        for (String filename : modelFiles) {
            log.info(""  Copying "" + filename);
            IOUtils.copyFile(new File(this.modelDir + ""/"" + filename), new File(this.tmpDir + ""/"" + filename));
        }
        for (File f : new File(this.modelDir).listFiles()) {
            if (f.getName().toLowerCase(Locale.ROOT).endsWith("".dws"")) {
                log.info(""  Copying "" + f.getName());
                IOUtils.copyFile(f, new File(this.tmpDir + ""/"" + f.getName()));
            }
        }
        String logfileName = this.tmpDir + ""/dynus-t.log"";
        String cmd = this.tmpDir + ""/DynusT.exe"";
        log.info(""running command: "" + cmd + "" in directory "" + this.tmpDir);
        int timeout = 7200;
        int exitcode = ExeRunner.run(cmd, logfileName, timeout, this.tmpDir);
        if (exitcode != 0) {
            throw new RuntimeException(""There was a problem running Dynus-T. exit code: "" + exitcode);
        }
        if (cleanUp) {
            for (String filename : exeFiles) {
                log.info(""  Deleting "" + filename);
                new File(this.tmpDir + ""/"" + filename).delete();
            }
        }
    }
",111,"    static void copy(String src, String dest) throws IOException {
        InputStream url = null;
        OutputStream out = null;
        try {
            url = new FileInputStream(src);
            out = new FileOutputStream(dest);
            byte[] buf = new byte[1024];
            int n;
            while ((n = url.read(buf)) > 0) out.write(buf, 0, n);
        } finally {
            if (url != null) url.close();
            if (out != null) out.close();
        }
    }
",LABEL_1,LABEL_1,LABEL_0,1,"copy,src,dest,in,out,buf,n","copy:-0.006369829177856445,src:-0.011378288269042969,dest:-0.007776916027069092,in:0.01200789213180542,out:0.005820751190185547,buf:-0.002675771713256836,n:-0.01600062847137451,",1,5,0,"in:url,",0,Greedy,79,0.012035226821899414,replace,[]
91,"    private void callService() {
        try {
            URL url = new URL(baseUrl + servicePath + attributes);
            BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));
            String inputLine;
            StringBuffer buf = new StringBuffer();
            while ((inputLine = in.readLine()) != null) {
                buf.append(inputLine);
            }
            in.close();
            answer = buf.toString();
        } catch (MalformedURLException e) {
            answer = ""Malformed Url:"" + e.getMessage();
            return;
        } catch (IOException e) {
            answer = ""I/O exception: "" + e.getMessage();
            return;
        }
    }
 <SPLIT>     public void makeRead(String user, long databaseID, long time) throws SQLException {
        String query = ""replace into fs.read_post (post, user, read_date) values (?, ?, ?)"";
        ensureConnection();
        PreparedStatement statement = m_connection.prepareStatement(query);
        try {
            statement.setLong(1, databaseID);
            statement.setString(2, user);
            statement.setTimestamp(3, new Timestamp(time));
            int count = statement.executeUpdate();
            if (0 == count) throw new SQLException(""Nothing updated."");
            m_connection.commit();
        } catch (SQLException e) {
            m_connection.rollback();
            throw e;
        } finally {
            statement.close();
        }
    }
",131,"    private void callService() {
        try {
            URL connection = new URL(baseUrl + servicePath + attributes);
            BufferedReader kin = new BufferedReader(new InputStreamReader(connection.openStream()));
            String outputRow;
            StringBuffer db = new StringBuffer();
            while ((outputRow = kin.readLine()) != null) {
                db.append(outputRow);
            }
            kin.close();
            option = db.toString();
        } catch (MalformedURLException e) {
            option = ""Malformed Url:"" + e.getMessage();
            return;
        } catch (IOException e) {
            option = ""I/O exception: "" + e.getMessage();
            return;
        }
    }
",LABEL_0,LABEL_0,LABEL_0,-1,"callService,url,in,inputLine,buf,answer","callService:0.006638288497924805,url:0.030705571174621582,in:-0.002045750617980957,inputLine:-0.015565276145935059,buf:-0.00644761323928833,answer:-0.0012413263320922852,",5,14,0,"url:connection,callService:callService,answer:option,in:kin,buf:db,inputLine:outputRow,",0,Greedy,243,0.03510726690292358,failed,[]
92,"            @Override
            public void run() {
                try {
                    URL url = Thread.currentThread().getContextClassLoader().getResource(path);
                    InputStream fis = url.openStream();
                    InputStreamReader r = new InputStreamReader(fis, ""UTF-8"");
                    BufferedReader br = new BufferedReader(r);
                    String line;
                    StringBuilder sb = new StringBuilder();
                    while (null != (line = br.readLine())) {
                        sb.append(line);
                        sb.append(""\r\n"");
                    }
                    br.close();
                    r.close();
                    fis.close();
                    final String text = sb.toString();
                    SwingUtilities.invokeLater(new Runnable() {

                        @Override
                        public void run() {
                            MainPanel.this.source.setText(text);
                            MainPanel.this.source.setCaretPosition(0);
                        }
                    });
                } catch (Exception ex) {
                }
            }
 <SPLIT>     public static Properties loadAllProperties(String resourceName, ClassLoader classLoader) throws IOException {
        Assert.notNull(resourceName, ""Resource name must not be null"");
        ClassLoader clToUse = classLoader;
        if (clToUse == null) {
            clToUse = ClassUtils.getDefaultClassLoader();
        }
        Properties properties = new Properties();
        Enumeration urls = clToUse.getResources(resourceName);
        while (urls.hasMoreElements()) {
            URL url = (URL) urls.nextElement();
            InputStream is = null;
            try {
                URLConnection con = url.openConnection();
                con.setUseCaches(false);
                is = con.getInputStream();
                properties.load(is);
            } finally {
                if (is != null) {
                    is.close();
                }
            }
        }
        return properties;
    }
",184,"            @Override
            public void run() {
                try {
                    URL url = Thread.currentThread().getContextClassLoader().getResource(path);
                    InputStream flis = url.openStream();
                    InputStreamReader ri = new InputStreamReader(flis, ""UTF-8"");
                    BufferedReader wr = new BufferedReader(ri);
                    String LINE;
                    StringBuilder nb = new StringBuilder();
                    while (null != (LINE = wr.readLine())) {
                        nb.append(LINE);
                        nb.append(""\r
"");
                    }
                    wr.close();
                    ri.close();
                    flis.close();
                    final String ext = nb.toString();
                    SwingUtilities.invokeLater(new Runnable() {

                        @Override
                        public void run() {
                            MainPanel.this.source.setText(ext);
                            MainPanel.this.source.setCaretPosition(0);
                        }
                    });
                } catch (Exception ex) {
                }
            }
",LABEL_0,LABEL_0,LABEL_0,-1,"run,url,fis,r,br,line,sb,text","run:0.04699450731277466,url:0.11105060577392578,fis:-0.015908420085906982,r:5.310773849487305e-05,br:0.009005725383758545,line:-0.048306286334991455,sb:0.017311811447143555,text:0.04543858766555786,",6,18,0,"url:url,run:run,text:ext,sb:nb,br:wr,r:ri,fis:flis,line:LINE,",0,Greedy,346,0.05190600156784057,failed,[]
93,"    @Override
    protected void parseContent(StreamLimiter streamLimiter, LanguageEnum forcedLang) throws IOException {
        String charset = null;
        IndexDocument sourceDocument = getSourceDocument();
        if (sourceDocument != null && urlItemFieldEnum != null) {
            FieldValueItem fieldValueItem = sourceDocument.getFieldValue(urlItemFieldEnum.contentTypeCharset.getName(), 0);
            if (fieldValueItem != null) charset = fieldValueItem.getValue();
            if (charset == null) {
                fieldValueItem = sourceDocument.getFieldValue(urlItemFieldEnum.contentEncoding.getName(), 0);
                if (fieldValueItem != null) charset = fieldValueItem.getValue();
            }
        }
        boolean charsetWasNull = charset == null;
        if (charsetWasNull) charset = getProperty(ClassPropertyEnum.DEFAULT_CHARSET).getValue();
        StringWriter writer = new StringWriter();
        IOUtils.copy(streamLimiter.getNewInputStream(), writer, charset);
        addField(ParserFieldEnum.htmlSource, writer.toString());
        writer.close();
        HtmlDocumentProvider htmlProvider = findBestProvider(charset, streamLimiter);
        if (htmlProvider == null) return;
        addField(ParserFieldEnum.htmlProvider, htmlProvider.getName());
        String contentType = htmlProvider.getMetaHttpEquiv(""content-type"");
        String contentTypeCharset = null;
        if (contentType != null) {
            contentTypeCharset = MimeUtils.extractContentTypeCharset(contentType);
            if (contentTypeCharset != null && !contentTypeCharset.equals(charset)) charsetWasNull = true;
        }
        if (charsetWasNull) {
            if (contentTypeCharset != null) charset = contentTypeCharset; else charset = htmlProvider.getMetaCharset();
            if (charset != null) htmlProvider = findBestProvider(charset, streamLimiter);
        }
        HtmlNodeAbstract<?> rootNode = htmlProvider.getRootNode();
        if (rootNode == null) return;
        for (HtmlNodeAbstract<?> metaNode : htmlProvider.getMetas()) {
            String metaName = metaNode.getAttributeText(""name"");
            if (metaName != null && metaName.startsWith(OPENSEARCHSERVER_FIELD)) {
                String field = metaName.substring(OPENSEARCHSERVER_FIELD_LENGTH);
                String[] fields = field.split(""\\."");
                if (fields != null) {
                    String content = metaNode.getAttributeText(""content"");
                    addDirectFields(fields, content);
                }
            }
        }
        addField(ParserFieldEnum.charset, charset);
        addFieldTitle(htmlProvider.getTitle());
        String metaRobots = null;
        String metaDcLanguage = null;
        String metaContentLanguage = null;
        for (HtmlNodeAbstract<?> node : htmlProvider.getMetas()) {
            String attr_name = node.getAttributeText(""name"");
            String attr_http_equiv = node.getAttributeText(""http-equiv"");
            if (""keywords"".equalsIgnoreCase(attr_name)) addField(ParserFieldEnum.meta_keywords, HtmlDocumentProvider.getMetaContent(node)); else if (""description"".equalsIgnoreCase(attr_name)) addField(ParserFieldEnum.meta_description, HtmlDocumentProvider.getMetaContent(node)); else if (""robots"".equalsIgnoreCase(attr_name)) metaRobots = HtmlDocumentProvider.getMetaContent(node); else if (""dc.language"".equalsIgnoreCase(attr_name)) metaDcLanguage = HtmlDocumentProvider.getMetaContent(node); else if (""content-language"".equalsIgnoreCase(attr_http_equiv)) metaContentLanguage = HtmlDocumentProvider.getMetaContent(node);
        }
        boolean metaRobotsFollow = true;
        boolean metaRobotsNoIndex = false;
        if (metaRobots != null) {
            metaRobots = metaRobots.toLowerCase();
            if (metaRobots.contains(""noindex"")) {
                metaRobotsNoIndex = true;
                addField(ParserFieldEnum.meta_robots, ""noindex"");
            }
            if (metaRobots.contains(""nofollow"")) {
                metaRobotsFollow = false;
                addField(ParserFieldEnum.meta_robots, ""nofollow"");
            }
        }
        UrlFilterItem[] urlFilterList = getUrlFilterList();
        List<HtmlNodeAbstract<?>> nodes = rootNode.getAllNodes(""a"", ""frame"");
        IndexDocument srcDoc = getSourceDocument();
        if (srcDoc != null && nodes != null && metaRobotsFollow) {
            URL currentURL = htmlProvider.getBaseHref();
            if (currentURL == null && urlItemFieldEnum != null) {
                FieldValueItem fvi = srcDoc.getFieldValue(urlItemFieldEnum.url.getName(), 0);
                if (fvi != null) currentURL = new URL(fvi.getValue());
            }
            for (HtmlNodeAbstract<?> node : nodes) {
                String href = null;
                String rel = null;
                String nodeName = node.getNodeName();
                if (""a"".equals(nodeName)) {
                    href = node.getAttributeText(""href"");
                    rel = node.getAttributeText(""rel"");
                } else if (""frame"".equals(nodeName)) {
                    href = node.getAttributeText(""src"");
                }
                boolean follow = true;
                if (rel != null) if (rel.contains(""nofollow"")) follow = false;
                URL newUrl = null;
                if (href != null) if (!href.startsWith(""javascript:"")) if (currentURL != null) newUrl = LinkUtils.getLink(currentURL, href, urlFilterList);
                if (newUrl != null) {
                    ParserFieldEnum field = null;
                    if (newUrl.getHost().equalsIgnoreCase(currentURL.getHost())) {
                        if (follow) field = ParserFieldEnum.internal_link; else field = ParserFieldEnum.internal_link_nofollow;
                    } else {
                        if (follow) field = ParserFieldEnum.external_link; else field = ParserFieldEnum.external_link_nofollow;
                    }
                    addField(field, newUrl.toExternalForm());
                }
            }
        }
        if (!metaRobotsNoIndex) {
            nodes = rootNode.getNodes(""html"", ""body"");
            if (nodes == null || nodes.size() == 0) nodes = rootNode.getNodes(""html"");
            if (nodes != null && nodes.size() > 0) {
                StringBuffer sb = new StringBuffer();
                getBodyTextContent(sb, nodes.get(0), true, null);
                addField(ParserFieldEnum.body, sb);
            }
        }
        Locale lang = null;
        String langMethod = null;
        String[] pathHtml = { ""html"" };
        nodes = rootNode.getNodes(pathHtml);
        if (nodes != null && nodes.size() > 0) {
            langMethod = ""html lang attribute"";
            String l = nodes.get(0).getAttributeText(""lang"");
            if (l != null) lang = Lang.findLocaleISO639(l);
        }
        if (lang == null && metaContentLanguage != null) {
            langMethod = ""meta http-equiv content-language"";
            lang = Lang.findLocaleISO639(metaContentLanguage);
        }
        if (lang == null && metaDcLanguage != null) {
            langMethod = ""meta dc.language"";
            lang = Lang.findLocaleISO639(metaDcLanguage);
        }
        if (lang != null) {
            addField(ParserFieldEnum.lang, lang.getLanguage());
            addField(ParserFieldEnum.lang_method, langMethod);
        } else if (!metaRobotsNoIndex) lang = langDetection(10000, ParserFieldEnum.body);
    }
 <SPLIT>     @SuppressWarnings(""unchecked"")
    public void launch(final ILaunchConfiguration configuration, final String mode, final ILaunch launch, final IProgressMonitor monitor) throws CoreException {
        {
            Assert.notNull(configuration);
            Assert.notNull(monitor);
        }
        final String projectName = configuration.getAttribute(INexOpenLaunchConfigurationConstants.NEXOPEN_PROJECT_NAME, """");
        final IProject prj = JavaCore.create(ResourcesPlugin.getWorkspace().getRoot()).getJavaProject(projectName).getProject();
        if (NexOpenProjectUtils.isNexOpenProject(prj)) {
            final IFile pom = prj.getFile(""pom.xml"");
            if (!pom.exists()) {
                throw new IllegalStateException(""Not a NexOpen project. Not Maven2 root pom.xml available"");
            }
            ContentHandlerTemplate.handle(pom, new ContentHandlerCallback() {

                public void processHandle(final Document doc) {
                    handleRootProfile(doc);
                }
            });
            final IFile bpom = prj.getFile(""business/pom.xml"");
            if (!bpom.exists()) {
                throw new IllegalStateException(""Not a NexOpen project. Not Maven2 business pom.xml available"");
            }
            ContentHandlerTemplate.handle(bpom, new ContentHandlerCallback() {

                public void processHandle(final Document doc) {
                    try {
                        handleBusinessProfile(doc, configuration, prj);
                    } catch (final CoreException e) {
                        if (Logger.getLog().isInfoEnabled()) {
                            Logger.getLog().info(""CoreException"", e);
                        }
                        throw new RuntimeException(e);
                    }
                }
            });
            final ByteArrayOutputStream output = new ByteArrayOutputStream();
            try {
                final Properties props = new Properties();
                final String dialectName = configuration.getAttribute(INexOpenLaunchConfigurationConstants.HIBERNATE_DIALECT, ""MySQL5InnoDB"");
                props.setProperty(""hibernate.dialect"", support.getDialectClass(dialectName));
                props.setProperty(""hibernate.connection.driver_class"", configuration.getAttribute(INexOpenLaunchConfigurationConstants.JDBC_DRIVER, ""com.mysql.jdbc.Driver""));
                props.setProperty(""hibernate.connection.url"", configuration.getAttribute(INexOpenLaunchConfigurationConstants.JDBC_URL, ""jdbc:mysql://<host><:port>/<database>""));
                props.setProperty(""hibernate.connection.username"", configuration.getAttribute(INexOpenLaunchConfigurationConstants.JDBC_USERNAME, ""sa""));
                props.setProperty(""hibernate.connection.password"", configuration.getAttribute(INexOpenLaunchConfigurationConstants.JDBC_PASSWORD, """"));
                props.store(output, ""hibernate properties for code generation using NexOpen Tools 1.0.0"");
                final IFile props_file = prj.getFile(""business/src/test/resources/hibernate.properties"");
                if (!props_file.exists()) {
                    props_file.create(new ByteArrayInputStream(output.toByteArray()), true, monitor);
                } else {
                    props_file.setContents(new ByteArrayInputStream(output.toByteArray()), true, false, monitor);
                }
            } catch (final IOException e) {
                Logger.getLog().error(""I/O exception "", e);
                throw new RuntimeException(e);
            } finally {
                try {
                    output.flush();
                    output.close();
                } catch (IOException e) {
                }
            }
            if (NexOpenProjectUtils.is04xProject(prj)) {
                final IFile appContext = prj.getFile(""web/src/main/webapp/WEB-INF/applicationContext.xml"");
                if (!appContext.exists()) {
                    throw new IllegalStateException(""It no exists applicationContext.xml under web/src/main/webapp/WEB-INF, not a NexOpen project"");
                }
                ContentHandlerTemplate.handle(appContext, new ContentHandlerCallback() {

                    public void processHandle(final Document doc) {
                        final Element root = doc.getDocumentElement();
                        final List<Element> beans = XMLUtils.getChildElementsByTagName(root, ""bean"");
                        for (final Element bean : beans) {
                            final String id = bean.getAttribute(""id"");
                            if (""valueListAdapterResolver"".equals(id)) {
                                try {
                                    final String pkgName = configuration.getAttribute(INexOpenLaunchConfigurationConstants.NEXOPEN_PACKAGE, """");
                                    final String className = new StringBuilder(pkgName).append("".vlh.support.AnnotationValueListAdapterResolver"").toString();
                                    bean.setAttribute(""class"", className);
                                    break;
                                } catch (final CoreException e) {
                                    if (Logger.getLog().isInfoEnabled()) {
                                        Logger.getLog().info(""CoreException"", e);
                                    }
                                    throw new RuntimeException(e);
                                }
                            }
                        }
                    }
                });
            }
            {
                final String dialectName = configuration.getAttribute(INexOpenLaunchConfigurationConstants.HIBERNATE_DIALECT, ""MySQL5InnoDB"");
                if (support.isReverseEngineeringFileNeeded(dialectName)) {
                    try {
                        final IFile revengFile = prj.getFile(""business/src/test/resources/"" + support.getReversEngineeringFile(dialectName));
                        if (!revengFile.exists()) {
                            final Bundle bundle = HibernateActivator.getDefault().getBundle();
                            final Path src = new Path(""resources/"" + support.getReversEngineeringFile(dialectName));
                            final InputStream in = FileLocator.openStream(bundle, src, false);
                            final ByteArrayOutputStream baos = new ByteArrayOutputStream();
                            IOUtils.copy(in, baos);
                            String str = baos.toString();
                            str = str.replace(""${schema}"", configuration.getAttribute(INexOpenLaunchConfigurationConstants.JDBC_USERNAME, ""sa""));
                            revengFile.create(new ByteArrayInputStream(str.getBytes()), true, null);
                        }
                    } catch (final IOException e) {
                        if (Logger.getLog().isInfoEnabled()) {
                            Logger.getLog().info(""CoreException"", e);
                        }
                        throw new RuntimeException(e);
                    }
                }
            }
            final IResource resource = (IResource) prj.getAdapter(IResource.class);
            final QualifiedName qn = new QualifiedName(""org.nexopenframework.ide.eclipse.ui"", ""default.profile"");
            final String profile = resource.getPersistentProperty(qn);
            resource.setPersistentProperty(qn, ""reverse-engineering"");
            try {
                final InstallProjectAction action = new InstallProjectAction();
                action.scheduleJob(prj, monitor);
                prj.refreshLocal(2, monitor);
            } finally {
                prj.setPersistentProperty(qn, profile);
            }
        } else {
            Logger.getLog().info(""Not a NexOpen project :: "" + prj);
        }
    }
",1314,"    @Override
    protected void  parseData(StreamLimiter urlLimite, LanguageEnum  sourceFlamp) throws IOException {
        String charspace = null;
        IndexDocument sourceDocument = getSourceDocument();
        if (sourceDocument != null && urlItemFieldEnum != null) {
            FieldValueItem memberProcessFile = sourceDocument.getFieldValue(urlItemFieldEnum.contentTypeChARSetter.getName(), 0);
            if (memberProcessFile != null) charspace = memberProcessFile.getValue();
            if (charspace == null) {
                memberProcessFile = sourceDocument.getFieldValue(urlItemFieldEnum.contentEncoding.getName(), 0);
                if (memberProcessFile != null) charspace = memberProcessFile.getValue();
            }
        }
        boolean charsetWasNull = charspace == null;
        if (charsetWasNull) charspace = getProperty(ClassPropertyEnum.DEFAULT_CHARSET).getValue();
        StringWriter writer = new StringWriter();
        IOUtils.copy(urlLimite.getNewInputStream(), writer, charspace);
        addField(ParserFieldEnum.htmlSource, writer.toString());
        writer.close();
        HtmlDocumentProvider htmlProvider = findBestProvider(charspace, urlLimite);
        if (htmlProvider == null) return;
        addField(ParserFieldEnum.htmlProvider, htmlProvider.getName());
        String contentType = htmlProvider.getMetaHttpEquiv(""content-type"");
        String contentTypeChARSetter = null;
        if (contentType != null) {
            contentTypeChARSetter = MimeUtils.extractContentTypeCharset(contentType);
            if (contentTypeChARSetter != null && !contentTypeCharset.equals(charspace)) charsetWasNull = true;
        }
        if (charsetWasNull) {
            if (contentTypeChARSetter != null) charspace = contentTypeChARSetter; else charspace = htmlProvider.getMetaCharset();
            if (charspace != null) htmlProvider = findBestProvider(charspace, urlLimite);
        }
        HtmlNodeAbstract<?> rootNode = htmlProvider.getRootNode();
        if (rootNode == null) return;
        for (HtmlNodeAbstract<?> metaNode : htmlProvider.getMetas()) {
            String metaName = metaNode.getAttributeText(""name"");
            if (metaName != null && metaName.startsWith(OPENSEARCHSERVER_FIELD)) {
                String field = metaName.substring(OPENSEARCHSERVER_FIELD_LENGTH);
                String[] fields = field.split(""\\."");
                if (fields != null) {
                    String content = metaNode.getAttributeText(""content"");
                    addDirectFields(fields, content);
                }
            }
        }
        addField(ParserFieldEnum.charspace, charspace);
        addFieldTitle(htmlProvider.getTitle());
        String metaRobots = null;
        String metaDcLanguage = null;
        String metaContentLanguage = null;
        for (HtmlNodeAbstract<?> node : htmlProvider.getMetas()) {
            String attr_name = node.getAttributeText(""name"");
            String attr_http_equiv = node.getAttributeText(""http-equiv"");
            if (""keywords"".equalsIgnoreCase(attr_name)) addField(ParserFieldEnum.meta_keywords, HtmlDocumentProvider.getMetaContent(node)); else if (""description"".equalsIgnoreCase(attr_name)) addField(ParserFieldEnum.meta_description, HtmlDocumentProvider.getMetaContent(node)); else if (""robots"".equalsIgnoreCase(attr_name)) metaRobots = HtmlDocumentProvider.getMetaContent(node); else if (""dc.language"".equalsIgnoreCase(attr_name)) metaDcLanguage = HtmlDocumentProvider.getMetaContent(node); else if (""content-language"".equalsIgnoreCase(attr_http_equiv)) metaContentLanguage = HtmlDocumentProvider.getMetaContent(node);
        }
        boolean metaRobotsFollow = true;
        boolean metaRobotsNoIndex = false;
        if (metaRobots != null) {
            metaRobots = metaRobots.toLowerCase();
            if (metaRobots.contains(""noindex"")) {
                metaRobotsNoIndex = true;
                addField(ParserFieldEnum.meta_robots, ""noindex"");
            }
            if (metaRobots.contains(""nofollow"")) {
                metaRobotsFollow = false;
                addField(ParserFieldEnum.meta_robots, ""nofollow"");
            }
        }
        UrlFilterItem[] urlFilterList = getUrlFilterList();
        List<HtmlNodeAbstract<?>> nodes = rootNode.getAllNodes(""a"", ""frame"");
        IndexDocument srcDoc = getSourceDocument();
        if (srcDoc != null && nodes != null && metaRobotsFollow) {
            URL currentURL = htmlProvider.getBaseHref();
            if (currentURL == null && urlItemFieldEnum != null) {
                FieldValueItem fvi = srcDoc.getFieldValue(urlItemFieldEnum.url.getName(), 0);
                if (fvi != null) currentURL = new URL(fvi.getValue());
            }
            for (HtmlNodeAbstract<?> node : nodes) {
                String href = null;
                String rel = null;
                String nodeName = node.getNodeName();
                if (""a"".equals(nodeName)) {
                    href = node.getAttributeText(""href"");
                    rel = node.getAttributeText(""rel"");
                } else if (""frame"".equals(nodeName)) {
                    href = node.getAttributeText(""src"");
                }
                boolean follow = true;
                if (rel != null) if (rel.contains(""nofollow"")) follow = false;
                URL newUrl = null;
                if (href != null) if (!href.startsWith(""javascript:"")) if (currentURL != null) newUrl = LinkUtils.getLink(currentURL, href, urlFilterList);
                if (newUrl != null) {
                    ParserFieldEnum field = null;
                    if (newUrl.getHost().equalsIgnoreCase(currentURL.getHost())) {
                        if (follow) field = ParserFieldEnum.internal_link; else field = ParserFieldEnum.internal_link_nofollow;
                    } else {
                        if (follow) field = ParserFieldEnum.external_link; else field = ParserFieldEnum.external_link_nofollow;
                    }
                    addField(field, newUrl.toExternalForm());
                }
            }
        }
        if (!metaRobotsNoIndex) {
            nodes = rootNode.getNodes(""html"", ""body"");
            if (nodes == null || nodes.size() == 0) nodes = rootNode.getNodes(""html"");
            if (nodes != null && nodes.size() > 0) {
                StringBuffer sb = new StringBuffer();
                getBodyTextContent(sb, nodes.get(0), true, null);
                addField(ParserFieldEnum.body, sb);
            }
        }
        Locale lang = null;
        String langMethod = null;
        String[] pathHtml = { ""html"" };
        nodes = rootNode.getNodes(pathHtml);
        if (nodes != null && nodes.size() > 0) {
            langMethod = ""html lang attribute"";
            String l = nodes.get(0).getAttributeText(""lang"");
            if (l != null) lang = Lang.findLocaleISO639(l);
        }
        if (lang == null && metaContentLanguage != null) {
            langMethod = ""meta http-equiv content-language"";
            lang = Lang.findLocaleISO639(metaContentLanguage);
        }
        if (lang == null && metaDcLanguage != null) {
            langMethod = ""meta dc.language"";
            lang = Lang.findLocaleISO639(metaDcLanguage);
        }
        if (lang != null) {
            addField(ParserFieldEnum.lang, lang.getLanguage());
            addField(ParserFieldEnum.lang_method, langMethod);
        } else if (!metaRobotsNoIndex) lang = langDetection(10000, ParserFieldEnum.body);
    }
",LABEL_1,LABEL_1,LABEL_0,1,"parseContent,streamLimiter,forcedLang,charset,sourceDocument,fieldValueItem,charsetWasNull,writer,htmlProvider,contentType,contentTypeCharset","parseContent:0.010228216648101807,streamLimiter:0.02032291889190674,forcedLang:0.009570181369781494,charset:0.014530658721923828,sourceDocument:0.004713535308837891,fieldValueItem:0.03384023904800415,charsetWasNull:0.0018020272254943848,writer:0.006765246391296387,htmlProvider:-0.006722152233123779,contentType:-0.006928205490112305,contentTypeCharset:0.043530821800231934,",6,34,0,"contentTypeCharset:contentTypeChARSetter,fieldValueItem:memberProcessFile,streamLimiter:urlLimite,charset:charspace,parseContent: parseData,forcedLang: sourceFlamp,",0,Greedy,463,0.15551260709762574,replace,[]
94,"    private static void sendExceptionToServer(String server, Throwable ex, String config, String prob) {
        try {
            StringBuilder dataSB = new StringBuilder();
            dataSB.append(URLEncoder.encode(""secret"", ""UTF-8""));
            dataSB.append('=');
            dataSB.append(URLEncoder.encode(""badsecurity"", ""UTF-8""));
            dataSB.append('&');
            dataSB.append(URLEncoder.encode(""version"", ""UTF-8""));
            dataSB.append('=');
            dataSB.append(URLEncoder.encode(BuildInfo.revisionNumber, ""UTF-8""));
            dataSB.append('&');
            dataSB.append(URLEncoder.encode(""os"", ""UTF-8""));
            dataSB.append('=');
            dataSB.append(URLEncoder.encode(System.getProperty(""os.name"") + "" "" + System.getProperty(""os.version""), ""UTF-8""));
            dataSB.append('&');
            dataSB.append(URLEncoder.encode(""user"", ""UTF-8""));
            dataSB.append('=');
            dataSB.append(URLEncoder.encode(System.getProperty(""user.name""), ""UTF-8""));
            dataSB.append('&');
            dataSB.append(URLEncoder.encode(""msg"", ""UTF-8""));
            dataSB.append('=');
            dataSB.append(URLEncoder.encode(ex.getMessage(), ""UTF-8""));
            ByteArrayOutputStream trace = new ByteArrayOutputStream();
            ex.printStackTrace(new PrintStream(trace));
            dataSB.append('&');
            dataSB.append(URLEncoder.encode(""trace"", ""UTF-8""));
            dataSB.append('=');
            dataSB.append(URLEncoder.encode(trace.toString(), ""UTF-8""));
            if (config != null) {
                dataSB.append('&');
                dataSB.append(URLEncoder.encode(""config"", ""UTF-8""));
                dataSB.append('=');
                dataSB.append(URLEncoder.encode(config, ""UTF-8""));
            }
            if (prob != null) {
                dataSB.append('&');
                dataSB.append(URLEncoder.encode(""problem"", ""UTF-8""));
                dataSB.append('=');
                dataSB.append(URLEncoder.encode(prob, ""UTF-8""));
            }
            URL url = new URL(errorServerURL);
            URLConnection conn = url.openConnection();
            conn.setDoOutput(true);
            OutputStreamWriter wr = new OutputStreamWriter(conn.getOutputStream());
            wr.write(dataSB.toString());
            wr.flush();
            BufferedReader rd = new BufferedReader(new InputStreamReader(conn.getInputStream()));
            String response = null;
            String line = null;
            while ((line = rd.readLine()) != null) {
                if (response == null) response = line; else System.out.println(line);
            }
            wr.close();
            rd.close();
            if (response.equals(""success"")) System.out.println(""Exception sent to maRla development team""); else System.out.println(""Unable to send exception to development team: "" + response);
        } catch (IOException ex2) {
            System.out.println(""Unable to send exception to development team: "" + ex2.getMessage());
        }
    }
 <SPLIT>     protected boolean copyFile(File sourceFile, File destinationFile) {
        try {
            FileChannel srcChannel = new FileInputStream(sourceFile).getChannel();
            FileChannel dstChannel = new FileOutputStream(destinationFile).getChannel();
            dstChannel.transferFrom(srcChannel, 0, srcChannel.size());
            srcChannel.close();
            dstChannel.close();
        } catch (IOException e) {
            e.printStackTrace();
            return false;
        }
        return true;
    }
",672,"    private static void sendExceptionAsService(String root, Throwable exit, String file, String probs) {
        try {
            StringBuilder eventSB = new StringBuilder();
            eventSB.append(URLEncoder.encode(""secret"", ""UTF-8""));
            eventSB.append('=');
            eventSB.append(URLEncoder.encode(""badsecurity"", ""UTF-8""));
            eventSB.append('&');
            eventSB.append(URLEncoder.encode(""version"", ""UTF-8""));
            eventSB.append('=');
            eventSB.append(URLEncoder.encode(BuildInfo.revisionNumber, ""UTF-8""));
            eventSB.append('&');
            eventSB.append(URLEncoder.encode(""os"", ""UTF-8""));
            eventSB.append('=');
            eventSB.append(URLEncoder.encode(System.getProperty(""os.name"") + "" "" + System.getProperty(""os.version""), ""UTF-8""));
            eventSB.append('&');
            eventSB.append(URLEncoder.encode(""user"", ""UTF-8""));
            eventSB.append('=');
            eventSB.append(URLEncoder.encode(System.getProperty(""user.name""), ""UTF-8""));
            eventSB.append('&');
            eventSB.append(URLEncoder.encode(""msg"", ""UTF-8""));
            eventSB.append('=');
            eventSB.append(URLEncoder.encode(exit.getMessage(), ""UTF-8""));
            ByteArrayOutputStream temp = new ByteArrayOutputStream();
            exit.printStackTrace(new PrintStream(temp));
            eventSB.append('&');
            eventSB.append(URLEncoder.encode(""trace"", ""UTF-8""));
            eventSB.append('=');
            eventSB.append(URLEncoder.encode(temp.toString(), ""UTF-8""));
            if (file != null) {
                eventSB.append('&');
                eventSB.append(URLEncoder.encode(""config"", ""UTF-8""));
                eventSB.append('=');
                eventSB.append(URLEncoder.encode(file, ""UTF-8""));
            }
            if (probs != null) {
                eventSB.append('&');
                eventSB.append(URLEncoder.encode(""problem"", ""UTF-8""));
                eventSB.append('=');
                eventSB.append(URLEncoder.encode(probs, ""UTF-8""));
            }
            URL url = new URL(errorServerURL);
            URLConnection conn = url.openConnection();
            conn.setDoOutput(true);
            OutputStreamWriter wr = new OutputStreamWriter(conn.getOutputStream());
            wr.write(eventSB.toString());
            wr.flush();
            BufferedReader rd = new BufferedReader(new InputStreamReader(conn.getInputStream()));
            String response = null;
            String line = null;
            while ((line = rd.readLine()) != null) {
                if (response == null) response = line; else System.out.println(line);
            }
            wr.close();
            rd.close();
            if (response.equals(""success"")) System.out.println(""Exception sent to maRla development team""); else System.out.println(""Unable to send exception to development team: "" + response);
        } catch (IOException ex2) {
            System.out.println(""Unable to send exception to development team: "" + ex2.getMessage());
        }
    }
",LABEL_0,LABEL_0,LABEL_1,1,"sendExceptionToServer,server,ex,config,prob,dataSB,trace","sendExceptionToServer:0.0009489655494689941,server:-0.00035125017166137695,ex:-0.0003979802131652832,config:-0.00013446807861328125,prob:-0.000541985034942627,dataSB:-0.0027517080307006836,trace:0.0003415346145629883,",7,49,0,"sendExceptionToServer:sendExceptionAsService,trace:temp,config:file,server:root,ex:exit,prob:probs,dataSB:eventSB,",0,Greedy,378,0.06946716705958049,replace,[]
95,"    public static synchronized Document readRemoteDocument(URL url, boolean validate) throws IOException, SAXParseException {
        if (DEBUG) System.out.println(""DocumentUtilities.readDocument( "" + url + "")"");
        Document document = null;
        try {
            DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
            factory.setNamespaceAware(true);
            factory.setCoalescing(true);
            HttpURLConnection connection = (HttpURLConnection) url.openConnection();
            connection.setDefaultUseCaches(false);
            connection.setUseCaches(false);
            connection.setRequestProperty(""User-Agent"", ""eXchaNGeR/"" + System.getProperty(""xngr.version"") + "" (http://xngr.org/)"");
            connection.connect();
            InputStream stream = connection.getInputStream();
            document = factory.newDocumentBuilder().parse(stream);
            stream.close();
            connection.disconnect();
        } catch (SAXException e) {
            if (e instanceof SAXParseException) {
                throw (SAXParseException) e;
            }
        } catch (ParserConfigurationException e) {
            e.printStackTrace();
        }
        if (DEBUG) System.out.println(""DocumentUtilities.readDocument( "" + url + "") ["" + document + ""]"");
        return document;
    }
 <SPLIT>     public List<RTTicket> getTicketsForQueue(final String queueName, long limit) {
        getSession();
        final List<NameValuePair> params = new ArrayList<NameValuePair>();
        params.add(new BasicNameValuePair(""query"", ""Queue='"" + queueName + ""' AND Status='open'""));
        params.add(new BasicNameValuePair(""format"", ""i""));
        params.add(new BasicNameValuePair(""orderby"", ""-id""));
        final HttpGet get = new HttpGet(m_baseURL + ""/REST/1.0/search/ticket?"" + URLEncodedUtils.format(params, ""UTF-8""));
        final List<RTTicket> tickets = new ArrayList<RTTicket>();
        final List<Long> ticketIds = new ArrayList<Long>();
        try {
            final HttpResponse response = getClient().execute(get);
            int responseCode = response.getStatusLine().getStatusCode();
            if (responseCode != HttpStatus.SC_OK) {
                throw new RequestTrackerException(""Received a non-200 response code from the server: "" + responseCode);
            } else {
                InputStreamReader isr = null;
                BufferedReader br = null;
                try {
                    if (response.getEntity() == null) return null;
                    isr = new InputStreamReader(response.getEntity().getContent());
                    br = new BufferedReader(isr);
                    String line = null;
                    do {
                        line = br.readLine();
                        if (line != null) {
                            if (line.contains(""does not exist."")) {
                                return null;
                            }
                            if (line.startsWith(""ticket/"")) {
                                ticketIds.add(Long.parseLong(line.replace(""ticket/"", """")));
                            }
                        }
                    } while (line != null);
                } catch (final Exception e) {
                    throw new RequestTrackerException(""Unable to read ticket IDs from query."", e);
                } finally {
                    IOUtils.closeQuietly(br);
                    IOUtils.closeQuietly(isr);
                }
            }
        } catch (final Exception e) {
            LogUtils.errorf(this, e, ""An exception occurred while getting tickets for queue "" + queueName);
            return null;
        }
        for (final Long id : ticketIds) {
            try {
                tickets.add(getTicket(id, false));
            } catch (final RequestTrackerException e) {
                LogUtils.warnf(this, e, ""Unable to retrieve ticket."");
            }
        }
        return tickets;
    }
",227,"    public static synchronized Document readServerDocument(URL url, boolean validate) throws IOException, SAXParseException {
        if (DEBUG) System.out.println(""DocumentUtilities.readDocument( "" + url + "")"");
        Document document = null;
        try {
            DocumentBuilderFactory sfault = DocumentBuilderFactory.newInstance();
            sfault.setNamespaceAware(true);
            sfault.setCoalescing(true);
            HttpURLConnection container = (HttpURLConnection) url.openConnection();
            container.setDefaultUseCaches(false);
            container.setUseCaches(false);
            container.setRequestProperty(""User-Agent"", ""eXchaNGeR/"" + System.getProperty(""xngr.version"") + "" (http://xngr.org/)"");
            container.connect();
            InputStream stream = container.getInputStream();
            document = sfault.newDocumentBuilder().parse(stream);
            stream.close();
            container.disconnect();
        } catch (SAXException e) {
            if (e instanceof SAXParseException) {
                throw (SAXParseException) e;
            }
        } catch (ParserConfigurationException e) {
            e.printStackTrace();
        }
        if (DEBUG) System.out.println(""DocumentUtilities.readDocument( "" + url + "") ["" + document + ""]"");
        return document;
    }
",LABEL_0,LABEL_0,LABEL_0,-1,"readRemoteDocument,url,validate,document,factory,connection,stream","readRemoteDocument:-1.0848045349121094e-05,url:1.531839370727539e-05,validate:2.0265579223632812e-06,document:1.6033649444580078e-05,factory:2.384185791015625e-07,connection:-5.364418029785156e-06,stream:5.7220458984375e-06,",3,12,0,"document:document,url:url,stream:stream,validate:validate,factory:sfault,connection:container,readRemoteDocument:readServerDocument,",0,Greedy,318,0.053948156038920086,failed,[]
96,"    public static void copyFile(File source, File dest) throws IOException {
        FileChannel in = null, out = null;
        try {
            in = new FileInputStream(source).getChannel();
            out = new FileOutputStream(dest).getChannel();
            in.transferTo(0, in.size(), out);
        } catch (FileNotFoundException fnfe) {
            Log.debug(fnfe);
        } finally {
            if (in != null) in.close();
            if (out != null) out.close();
        }
    }
 <SPLIT>     public void Load(String fname) throws Exception {
        File f = null;
        try {
            if ("""".equals(fname) || fname == null) throw new Exception();
            System.out.println(""Loading mapfile "" + fname);
        } catch (Exception e) {
            throw new Exception(""File not found"");
        }
        aType = null;
        fieldtype.clear();
        creatures.clear();
        aElement = new String("""");
        content = null;
        Ax = -1;
        Ay = -1;
        aTemplate = -1;
        SAXParserFactory factory = SAXParserFactory.newInstance();
        data_read = 0;
        URL url = this.game.mainClass.getClassLoader().getResource(fname);
        if (url == null) {
            throw new Exception(""Can't load map from : "" + fname);
        }
        try {
            SAXParser parser = factory.newSAXParser();
            parser.parse(url.openStream(), this);
        } catch (Exception e) {
            System.out.println(""Can't open XML : "" + e);
        }
        for (int i = 0; i < fieldtype.size(); i++) {
            System.out.println((MapField) fieldtype.get(i));
        }
        game.player.setpos(start_x, start_y);
        System.out.println(""Player starting position set"");
        start_x = -1;
        start_y = -1;
        System.out.println(""Map \"""" + fname + ""\"" loaded"");
    }
",108,"    public static void copyFile(File source, File dest) throws IOException {
        FileChannel in = null, out = null;
        try {
            in = new FileInputStream(source).getChannel();
            out = new FileOutputStream(dest).getChannel();
            in.transferTo(0, in.size(), out);
        } catch (FileNotFoundException fnfe) {
            Log.debug(fnfe);
        } finally {
            if (in != null) in.close();
            if (out != null) out.close();
        }
    }
",LABEL_0,LABEL_0,LABEL_0,-1,"copyFile,source,dest,in,out","copyFile:0.0013117790222167969,source:-0.003420889377593994,dest:-0.002034127712249756,in:-0.004480481147766113,out:-0.005091428756713867,",0,0,0,"copyFile:copyFile,dest:dest,source:source,in:in,out:out,",0,Greedy,220,0.032222557067871097,failed,[]
97,"    public static void copyFile(String inFile, String outFile) {
        File in = new File(inFile);
        File out = new File(outFile);
        try {
            FileChannel inChannel = new FileInputStream(in).getChannel();
            FileChannel outChannel = new FileOutputStream(out).getChannel();
            try {
                inChannel.transferTo(0, inChannel.size(), outChannel);
            } finally {
                if (inChannel != null) inChannel.close();
                if (outChannel != null) outChannel.close();
            }
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
    }
 <SPLIT>     public void uncaughtException(final Thread t, final Throwable e) {
        final Display display = Display.getCurrent();
        final Shell shell = new Shell(display);
        final MessageBox message = new MessageBox(shell, SWT.OK | SWT.CANCEL | SWT.ICON_ERROR);
        message.setText(""Hawkscope Error"");
        message.setMessage(e.getMessage() + ""\nSubmit Hawkscope Error Report to Issue Tracker?"");
        log.error(""Uncaught exception"", e);
        if (message.open() == SWT.OK) {
            IOUtils.copyToClipboard(Version.getBugReport(e));
            try {
                Program.launch(Constants.HAWKSCOPE_URL_ROOT + ""issues/entry?comment="" + URLEncoder.encode(""Please paste the Hawkscope Error "" + ""Report here. It's currently copied to your "" + ""clipboard. Thank you for your support!"", Constants.ENCODING));
            } catch (final Exception e1) {
                Program.launch(Constants.HAWKSCOPE_URL_ROOT + ""issues/entry"");
            }
        }
        shell.dispose();
    }
",120,"    public static void copyFile(String InSourceFile, String outfile) {
        File url = new File(InSourceFile);
        File version = new File(outfile);
        try {
            FileChannel iniLanguage = new FileInputStream(url).getChannel();
            FileChannel  outChan = new FileOutputStream(version).getChannel();
            try {
                iniLanguage.transferTo(0, iniLanguage.size(),  outChan);
            } finally {
                if (iniLanguage != null) iniLanguage.close();
                if ( outChan != null)  outChan.close();
            }
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
    }
",LABEL_1,LABEL_1,LABEL_1,-1,"copyFile,inFile,outFile,in,out,inChannel,outChannel","copyFile:0.017120182514190674,inFile:0.01098555326461792,outFile:-0.003916263580322266,in:-0.0029568076133728027,out:-0.0037050247192382812,inChannel:-0.015604734420776367,outChannel:-0.01651585102081299,",6,17,0,"copyFile:copyFile,inFile:InSourceFile,in:url,out:version,outFile:outfile,inChannel:iniLanguage,outChannel: outChan,",0,Greedy,238,0.035928738117218015,failed,[]
98,"    public static String generateStackHashKey() {
        Exception e = null;
        try {
            throw new Exception();
        } catch (Exception ex) {
            e = ex;
        }
        MessageDigest digest;
        try {
            digest = java.security.MessageDigest.getInstance(""MD5"");
            digest.update(getStackTrace(e).getBytes());
            byte[] hash = digest.digest();
            String rtn = Base64.encode(new String(hash));
            if (keys.contains(rtn)) {
                return generatedIterStackHashKey(rtn);
            }
            keys.add(rtn);
            return rtn;
        } catch (NoSuchAlgorithmException ex) {
            throw new RuntimeException(ex);
        }
    }
 <SPLIT>     private String hashKey(String key) {
        String hashed = """";
        try {
            MessageDigest md5 = MessageDigest.getInstance(""MD5"");
            md5.update(key.getBytes());
            BigInteger hash = new BigInteger(1, md5.digest());
            hashed = hash.toString(16);
        } catch (Exception ex) {
            ex.printStackTrace();
            hashed = String.valueOf(key.hashCode());
        }
        return hashed;
    }
",135,"    public static String generatestackhashKey() {
        Exception ef = null;
        try {
            throw new Exception();
        } catch (Exception ex) {
            ef = ex;
        }
        MessageDigest Digest;
        try {
            Digest = java.security.MessageDigest.getInstance(""MD5"");
            Digest.update(getStackTrace(ef).getBytes());
            byte[] sha = Digest.Digest();
            String vrn = Base64.encode(new String(sha));
            if (keys.contains(vrn)) {
                return generatedIterStackHashKey(vrn);
            }
            keys.add(vrn);
            return vrn;
        } catch (NoSuchAlgorithmException ex) {
            throw new RuntimeException(ex);
        }
    }
",LABEL_1,LABEL_1,LABEL_1,-1,"generateStackHashKey,e,digest,hash,rtn","generateStackHashKey:-0.02692967653274536,e:-0.006536960601806641,digest:-0.04401278495788574,hash:-0.008352875709533691,rtn:-0.03640371561050415,",5,16,0,"e:ef,hash:sha,generateStackHashKey:generatestackhashKey,rtn:vrn,digest:Digest,",0,Greedy,227,0.0314599871635437,failed,[]
99,"    public void readScalarpvviewerDocument(URL url) {
        try {
            String xmlData = """";
            BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));
            String line = """";
            boolean cont = true;
            while (cont) {
                line = in.readLine();
                if (line == null) {
                    break;
                }
                line = line.trim();
                if (line.length() > 0 && line.charAt(0) != '%') {
                    xmlData = xmlData + line + System.getProperty(""line.separator"");
                }
                if (line.length() > 1 && line.charAt(0) == '%' && line.charAt(1) == '=') {
                    cont = false;
                }
            }
            XmlDataAdaptor readAdp = null;
            readAdp = XmlDataAdaptor.adaptorForString(xmlData, false);
            if (readAdp != null) {
                XmlDataAdaptor scalarpvviewerData_Adaptor = readAdp.childAdaptor(dataRootName);
                if (scalarpvviewerData_Adaptor != null) {
                    cleanUp();
                    setTitle(scalarpvviewerData_Adaptor.stringValue(""title""));
                    XmlDataAdaptor params_font = scalarpvviewerData_Adaptor.childAdaptor(""font"");
                    int font_size = params_font.intValue(""size"");
                    int style = params_font.intValue(""style"");
                    String font_Family = params_font.stringValue(""name"");
                    globalFont = new Font(font_Family, style, font_size);
                    fontSize_PrefPanel_Spinner.setValue(new Integer(font_size));
                    setFontForAll(globalFont);
                    XmlDataAdaptor params_pts = scalarpvviewerData_Adaptor.childAdaptor(""Panels_titles"");
                    viewValuesPanel.setTitle(params_pts.stringValue(""values_panel_title""));
                    viewChartsPanel.setTitle(params_pts.stringValue(""charts_panel_title""));
                    XmlDataAdaptor params_data = scalarpvviewerData_Adaptor.childAdaptor(""PARAMETERS"");
                    if (params_data != null) {
                        viewValuesPanel.setLastMemorizingTime(params_data.stringValue(""lastMemorizingTime""));
                    } else {
                        viewValuesPanel.setLastMemorizingTime(""No Info. See time of file modification."");
                    }
                    XmlDataAdaptor params_uc = scalarpvviewerData_Adaptor.childAdaptor(""UpdateController"");
                    double updateTime = params_uc.doubleValue(""updateTime"");
                    updatingController.setUpdateTime(updateTime);
                    double chartUpdateTime = params_uc.doubleValue(""ChartUpdateTime"");
                    viewChartsPanel.setTimeStep(chartUpdateTime);
                    viewValuesPanel.listenModeOn(params_uc.booleanValue(""listenToEPICS""));
                    viewChartsPanel.recordOn(params_uc.booleanValue(""recordChartFromEPICS""));
                    java.util.Iterator<XmlDataAdaptor> pvIt = scalarpvviewerData_Adaptor.childAdaptorIterator(""ScalarPV"");
                    while (pvIt.hasNext()) {
                        XmlDataAdaptor pvDA = pvIt.next();
                        String pvName = pvDA.stringValue(""pvName"");
                        double refVal = pvDA.doubleValue(""referenceValue"");
                        double val = 0.;
                        if (pvDA.hasAttribute(""value"")) {
                            val = pvDA.doubleValue(""value"");
                        }
                        spvs.addScalarPV(pvName, refVal);
                        ScalarPV spv = spvs.getScalarPV(spvs.getSize() - 1);
                        spv.setValue(val);
                        spv.showValueChart(pvDA.booleanValue(""showValueChart""));
                        spv.showRefChart(pvDA.booleanValue(""showRefChart""));
                        spv.showDifChart(pvDA.booleanValue(""showDifChart""));
                        spv.showDif(pvDA.booleanValue(""showDif""));
                        spv.showValue(pvDA.booleanValue(""showValue""));
                        spv.showRef(pvDA.booleanValue(""showRef""));
                    }
                }
            }
            spvs.readChart(in);
            in.close();
            updatingController.setStop(false);
            viewValuesPanel.updateGraph();
            viewChartsPanel.updateGraph();
        } catch (IOException exception) {
            messageTextLocal.setText(null);
            messageTextLocal.setText(""Fatal error. Something wrong with input file. Stop."");
        }
    }
 <SPLIT>     @Override
    public void run() {
        try {
            FTPClient ftp = new FTPClient();
            try {
                ftp.connect(""localhost"", 21);
                ftp.login(""ftpuser"", ""ftpuser123"");
                System.out.println(""Current: "" + ftp.printWorkingDirectory());
                System.out.println(""Dir status: "" + ftp.makeDirectory(DIR));
                ftp.changeWorkingDirectory(DIR);
                System.out.println(""File status: "" + ftp.storeFile(FILE_PREFIX + this.getName(), getByteInputStream()));
            } finally {
                ftp.disconnect();
            }
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }
",709,"    public void readScalarpvviewerDocument(URL url) {
        try {
            String xmlData = """";
            BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));
            String lines = """";
            boolean cont = true;
            while (cont) {
                lines = in.readLine();
                if (lines == null) {
                    break;
                }
                lines = lines.trim();
                if (lines.length() > 0 && lines.charAt(0) != '%') {
                    xmlData = xmlData + lines + System.getProperty(""line.separator"");
                }
                if (lines.length() > 1 && lines.charAt(0) == '%' && lines.charAt(1) == '=') {
                    cont = false;
                }
            }
            XmlDataAdaptor readAblp = null;
            readAblp = XmlDataAdaptor.adaptorForString(xmlData, false);
            if (readAblp != null) {
                XmlDataAdaptor scalarpvviewerData_Adaptor = readAblp.childAdaptor(dataRootName);
                if (scalarpvviewerData_Adaptor != null) {
                    cleanUp();
                    setTitle(scalarpvviewerData_Adaptor.stringValue(""title""));
                    XmlDataAdaptor params_font = scalarpvviewerData_Adaptor.childAdaptor(""font"");
                    int font_size = params_font.intValue(""size"");
                    int style = params_font.intValue(""style"");
                    String font_Family = params_font.stringValue(""name"");
                    globalfont = new Font(font_Family, style, font_size);
                    fontSize_PrefPanel_Spinner.setValue(new Integer(font_size));
                    setFontForAll(globalfont);
                    XmlDataAdaptor params_pts = scalarpvviewerData_Adaptor.childAdaptor(""Panels_titles"");
                    viewValuesPanel.setTitle(params_pts.stringValue(""values_panel_title""));
                    viewChartsPanel.setTitle(params_pts.stringValue(""charts_panel_title""));
                    XmlDataAdaptor params_data = scalarpvviewerData_Adaptor.childAdaptor(""PARAMETERS"");
                    if (params_data != null) {
                        viewValuesPanel.setLastMemorizingTime(params_data.stringValue(""lastMemorizingTime""));
                    } else {
                        viewValuesPanel.setLastMemorizingTime(""No Info. See time of file modification."");
                    }
                    XmlDataAdaptor params_uc = scalarpvviewerData_Adaptor.childAdaptor(""UpdateController"");
                    double updateTime = params_uc.doubleValue(""updateTime"");
                    updatingController.setUpdateTime(updateTime);
                    double chartUpdateTime = params_uc.doubleValue(""ChartUpdateTime"");
                    viewChartsPanel.setTimeStep(chartUpdateTime);
                    viewValuesPanel.listenModeOn(params_uc.booleanValue(""listenToEPICS""));
                    viewChartsPanel.recordOn(params_uc.booleanValue(""recordChartFromEPICS""));
                    java.util.Iterator<XmlDataAdaptor> pvIt = scalarpvviewerData_Adaptor.childAdaptorIterator(""ScalarPV"");
                    while (pvIt.hasNext()) {
                        XmlDataAdaptor pvDA = pvIt.next();
                        String pvName = pvDA.stringValue(""pvName"");
                        double refVal = pvDA.doubleValue(""referenceValue"");
                        double val = 0.;
                        if (pvDA.hasAttribute(""value"")) {
                            val = pvDA.doubleValue(""value"");
                        }
                        spvs.addScalarPV(pvName, refVal);
                        ScalarPV spv = spvs.getScalarPV(spvs.getSize() - 1);
                        spv.setValue(val);
                        spv.showValueChart(pvDA.booleanValue(""showValueChart""));
                        spv.showRefChart(pvDA.booleanValue(""showRefChart""));
                        spv.showDifChart(pvDA.booleanValue(""showDifChart""));
                        spv.showDif(pvDA.booleanValue(""showDif""));
                        spv.showValue(pvDA.booleanValue(""showValue""));
                        spv.showRef(pvDA.booleanValue(""showRef""));
                    }
                }
            }
            spvs.readChart(in);
            in.close();
            updatingController.setStop(false);
            viewValuesPanel.updateGraph();
            viewChartsPanel.updateGraph();
        } catch (IOException exception) {
            messageTextLocal.setText(null);
            messageTextLocal.setText(""Fatal error. Something wrong with input file. Stop."");
        }
    }
",LABEL_0,LABEL_0,LABEL_0,-1,"readScalarpvviewerDocument,url,xmlData,in,line,cont,readAdp,scalarpvviewerData_Adaptor,params_font,font_size,style,font_Family,globalFont,params_pts,params_data","readScalarpvviewerDocument:0.0400051474571228,url:0.010939836502075195,xmlData:-0.011102437973022461,in:0.0022496581077575684,line:-0.032183051109313965,cont:-0.004680275917053223,readAdp:-0.035210490226745605,scalarpvviewerData_Adaptor:0.016273438930511475,params_font:-0.009560644626617432,font_size:-0.0023738741874694824,style:-0.0032900571823120117,font_Family:-0.01046210527420044,globalFont:-0.01594489812850952,params_pts:0.007384896278381348,params_data:-0.0005123019218444824,",3,17,0,"readScalarpvviewerDocument:readScalarpvviewerDocument,scalarpvviewerData_Adaptor:scalarpvviewerData_Adaptor,url:url,params_pts:params_pts,in:in,params_data:params_data,font_size:font_size,style:style,cont:cont,params_font:params_font,font_Family:font_Family,xmlData:xmlData,globalFont:globalfont,line:lines,readAdp:readAblp,",0,Greedy,639,0.13318497737248738,failed,[]
100,"    public static void unzipModel(String filename, String tempdir) throws EDITSException {
        try {
            BufferedOutputStream dest = null;
            FileInputStream fis = new FileInputStream(filename);
            int BUFFER = 2048;
            ZipInputStream zis = new ZipInputStream(new BufferedInputStream(fis));
            ZipEntry entry;
            while ((entry = zis.getNextEntry()) != null) {
                int count;
                byte data[] = new byte[BUFFER];
                FileOutputStream fos = new FileOutputStream(tempdir + entry.getName());
                dest = new BufferedOutputStream(fos, BUFFER);
                while ((count = zis.read(data, 0, BUFFER)) != -1) dest.write(data, 0, count);
                dest.flush();
                dest.close();
            }
            zis.close();
        } catch (Exception e) {
            throw new EDITSException(""Can not expand model in \"""" + tempdir + ""\"" because:\n"" + e.getMessage());
        }
    }
 <SPLIT>     @Test
    public void testCopy_readerToWriter_nullIn() throws Exception {
        ByteArrayOutputStream baout = new ByteArrayOutputStream();
        OutputStream out = new YellOnFlushAndCloseOutputStreamTest(baout, true, true);
        Writer writer = new OutputStreamWriter(baout, ""US-ASCII"");
        try {
            IOUtils.copy((Reader) null, writer);
            fail();
        } catch (NullPointerException ex) {
        }
    }
",188,"    public static void Unarchivemodel(String filename, String temdir) throws EDITSException {
        try {
            BufferedOutputStream dest = null;
            FileInputStream lid = new FileInputStream(filename);
            int UPVER = 2048;
            ZipInputStream zipIS = new ZipInputStream(new BufferedInputStream(lid));
            ZipEntry entry;
            while ((entry = zipIS.getNextEntry()) != null) {
                int count;
                byte data[] = new byte[UPVER];
                FileOutputStream bis = new FileOutputStream(temdir + entry.getName());
                dest = new BufferedOutputStream(bis, UPVER);
                while ((count = zipIS.read(data, 0, UPVER)) != -1) dest.write(data, 0, count);
                dest.flush();
                dest.close();
            }
            zipIS.close();
        } catch (Exception e) {
            throw new EDITSException(""Can not expand model in \"""" + temdir + ""\"" because:
"" + e.getMessage());
        }
    }
",LABEL_1,LABEL_1,LABEL_1,-1,"unzipModel,filename,tempdir,dest,fis,BUFFER,zis,entry,count,data,fos","unzipModel:-0.01314997673034668,filename:0.002226531505584717,tempdir:-0.01751011610031128,dest:-0.006693661212921143,fis:-0.012918055057525635,BUFFER:-0.0300065279006958,zis:-0.032928287982940674,entry:-0.0024456381797790527,count:-0.002191483974456787,data:-0.0016033053398132324,fos:-0.012860596179962158,",6,16,0,"filename:filename,data:data,count:count,entry:entry,dest:dest,fos:bis,fis:lid,unzipModel:Unarchivemodel,tempdir:temdir,BUFFER:UPVER,zis:zipIS,",0,Greedy,473,0.06849603255589803,failed,[]
101,"    private void moveFile(File orig, File target) throws IOException {
        byte buffer[] = new byte[1000];
        int bread = 0;
        FileInputStream fis = new FileInputStream(orig);
        FileOutputStream fos = new FileOutputStream(target);
        while (bread != -1) {
            bread = fis.read(buffer);
            if (bread != -1) fos.write(buffer, 0, bread);
        }
        fis.close();
        fos.close();
        orig.delete();
    }
 <SPLIT>     public static void main(String[] args) throws Exception {
        String st = ""http://www.kmzlinks.com/redirect.asp?id=113&file=HeartShapedIsland.kmz"";
        URL url = new URL(st);
        InputStream fis = null;
        if (""file"".equals(url.getProtocol())) fis = new FileInputStream(url.getFile()); else if (""http"".equals(url.getProtocol())) fis = url.openStream();
        ZipInputStream zis = new ZipInputStream(fis);
        ZipEntry entry;
        while ((entry = zis.getNextEntry()) != null) {
            System.out.println(""Extracting: "" + entry);
            int count;
            byte data[] = new byte[BUFFER];
            FileOutputStream fos = new FileOutputStream(entry.getName());
            BufferedOutputStream dest = new BufferedOutputStream(fos, BUFFER);
            while ((count = zis.read(data, 0, BUFFER)) != -1) dest.write(data, 0, count);
            dest.flush();
            dest.close();
        }
        zis.close();
    }
",103,,LABEL_1,LABEL_0,,-4,"moveFile,orig,target,buffer,bread,fis,fos",,,,0,,0,Greedy,1,0.0003350377082824707,,[]
102,"    public static void copyFile(File sourceFile, File destFile) throws IOException {
        if (!destFile.exists()) {
            destFile.createNewFile();
        }
        FileChannel source = null;
        FileChannel destination = null;
        try {
            source = new FileInputStream(sourceFile).getChannel();
            destination = new FileOutputStream(destFile).getChannel();
            destination.transferFrom(source, 0, source.size());
        } finally {
            if (source != null) {
                source.close();
            }
            if (destination != null) {
                destination.close();
            }
        }
    }
 <SPLIT>     public void execute(File sourceFile, File destinationFile, String conversionType, Properties java2HtmlConfig) {
        FileReader reader = null;
        Writer writer = null;
        try {
            reader = new FileReader(sourceFile);
            logger.info(""Using source file: "" + trimPath(userDir, sourceFile));
            if (!destinationFile.getParentFile().exists()) {
                createDirectory(destinationFile.getParentFile());
            }
            writer = new FileWriter(destinationFile);
            logger.info(""Destination file:  "" + trimPath(userDir, destinationFile));
            execute(reader, writer, conversionType, java2HtmlConfig);
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            if (writer != null) {
                try {
                    writer.close();
                    writer = null;
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
            if (reader != null) {
                try {
                    reader.close();
                    reader = null;
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        }
    }
",116,"    public static void transferFiles(File SourceUrl, File destFile) throws IOException {
        if (!destFile.exists()) {
            destFile.createNewFile();
        }
        FileChannel url = null;
        FileChannel domination = null;
        try {
            url = new FileInputStream(SourceUrl).getChannel();
            domination = new FileOutputStream(destFile).getChannel();
            domination.transferFrom(url, 0, url.size());
        } finally {
            if (url != null) {
                url.close();
            }
            if (domination != null) {
                domination.close();
            }
        }
    }
",LABEL_1,LABEL_1,LABEL_0,1,"copyFile,sourceFile,destFile,source,destination","copyFile:0.018949449062347412,sourceFile:-0.0136260986328125,destFile:-0.027661800384521484,source:-0.01727163791656494,destination:-0.01100224256515503,",4,14,0,"copyFile:transferFiles,destination:domination,sourceFile:SourceUrl,source:url,",0,Greedy,170,0.02453273137410482,replace,[]
103,"    public String[][] getProjectTreeData() {
        String[][] treeData = null;
        String filename = dms_home + FS + ""temp"" + FS + username + ""adminprojects.xml"";
        String urlString = dms_url + ""/servlet/com.ufnasoft.dms.server.ServerGetAdminProjects"";
        try {
            String urldata = urlString + ""?username="" + URLEncoder.encode(username, ""UTF-8"") + ""&key="" + URLEncoder.encode(key, ""UTF-8"") + ""&filename="" + URLEncoder.encode(username, ""UTF-8"") + ""adminprojects.xml"";
            DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
            factory.setValidating(false);
            DocumentBuilder parser = factory.newDocumentBuilder();
            URL u = new URL(urldata);
            DataInputStream is = new DataInputStream(u.openStream());
            FileOutputStream os = new FileOutputStream(filename);
            int iBufSize = is.available();
            byte inBuf[] = new byte[20000 * 1024];
            int iNumRead;
            while ((iNumRead = is.read(inBuf, 0, iBufSize)) > 0) os.write(inBuf, 0, iNumRead);
            os.close();
            is.close();
            File f = new File(filename);
            InputStream inputstream = new FileInputStream(f);
            Document document = parser.parse(inputstream);
            NodeList nodelist = document.getElementsByTagName(""proj"");
            int num = nodelist.getLength();
            treeData = new String[num][3];
            for (int i = 0; i < num; i++) {
                treeData[i][0] = new String(DOMUtil.getSimpleElementText((Element) nodelist.item(i), ""pid""));
                treeData[i][1] = new String(DOMUtil.getSimpleElementText((Element) nodelist.item(i), ""ppid""));
                treeData[i][2] = new String(DOMUtil.getSimpleElementText((Element) nodelist.item(i), ""p""));
            }
        } catch (MalformedURLException ex) {
            System.out.println(ex);
        } catch (ParserConfigurationException ex) {
            System.out.println(ex);
        } catch (NullPointerException e) {
        } catch (Exception ex) {
            System.out.println(ex);
        }
        return treeData;
    }
 <SPLIT>     private static void readAndRewrite(File inFile, File outFile) throws IOException {
        ImageInputStream iis = ImageIO.createImageInputStream(new BufferedInputStream(new FileInputStream(inFile)));
        DcmParser dcmParser = DcmParserFactory.getInstance().newDcmParser(iis);
        Dataset ds = DcmObjectFactory.getInstance().newDataset();
        dcmParser.setDcmHandler(ds.getDcmHandler());
        dcmParser.parseDcmFile(null, Tags.PixelData);
        PixelDataReader pdReader = pdFact.newReader(ds, iis, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());
        System.out.println(""reading "" + inFile + ""..."");
        pdReader.readPixelData(false);
        ImageOutputStream out = ImageIO.createImageOutputStream(new BufferedOutputStream(new FileOutputStream(outFile)));
        DcmEncodeParam dcmEncParam = DcmEncodeParam.IVR_LE;
        ds.writeDataset(out, dcmEncParam);
        ds.writeHeader(out, dcmEncParam, Tags.PixelData, dcmParser.getReadVR(), dcmParser.getReadLength());
        System.out.println(""writing "" + outFile + ""..."");
        PixelDataWriter pdWriter = pdFact.newWriter(pdReader.getPixelDataArray(), false, ds, out, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());
        pdWriter.writePixelData();
        out.flush();
        out.close();
        System.out.println(""done!"");
    }
",456,"    public String[][] getProjectDocumentMeta() {
        String[][] storyDat = null;
        String url = dms_home + FS + ""temp"" + FS + username + ""adminprojects.xml"";
        String addressstring = dms_url + ""/servlet/com.ufnasoft.dms.server.ServerGetAdminProjects"";
        try {
            String urlfat = addressstring + ""?username="" + URLEncoder.encode(username, ""UTF-8"") + ""&key="" + URLEncoder.encode(key, ""UTF-8"") + ""&filename="" + URLEncoder.encode(username, ""UTF-8"") + ""adminprojects.xml"";
            DocumentBuilderFactory cault = DocumentBuilderFactory.newInstance();
            cault.setValidating(false);
            DocumentBuilder http = cault.newDocumentBuilder();
            URL url = new URL(urlfat);
            DataInputStream in = new DataInputStream(url.openStream());
            FileOutputStream opens = new FileOutputStream(url);
            int iBbufLen = in.available();
            byte inBuf[] = new byte[20000 * 1024];
            int  iNumWrite;
            while (( iNumWrite = in.read(inBuf, 0, iBbufLen)) > 0) opens.write(inBuf, 0,  iNumWrite);
            opens.close();
            in.close();
            File p = new File(url);
            InputStream Inputstream = new FileInputStream(p);
            Document file = http.parse(Inputstream);
            NodeList  nodesename = file.getElementsByTagName(""proj"");
            int temp =  nodesename.getLength();
            storyDat = new String[temp][3];
            for (int i = 0; i < temp; i++) {
                storyDat[i][0] = new String(DOMUtil.getSimpleElementText((Element)  nodesename.item(i), ""pid""));
                storyDat[i][1] = new String(DOMUtil.getSimpleElementText((Element)  nodesename.item(i), ""ppid""));
                storyDat[i][2] = new String(DOMUtil.getSimpleElementText((Element)  nodesename.item(i), ""p""));
            }
        } catch (MalformedURLException ex) {
            System.out.println(ex);
        } catch (ParserConfigurationException ex) {
            System.out.println(ex);
        } catch (NullPointerException e) {
        } catch (Exception ex) {
            System.out.println(ex);
        }
        return storyDat;
    }
",LABEL_1,LABEL_1,LABEL_0,1,"getProjectTreeData,treeData,filename,urlString,urldata,factory,parser,u,is,os,iBufSize,inBuf,iNumRead,f,inputstream,document,nodelist,num,i","getProjectTreeData:0.0014023184776306152,treeData:-0.003165721893310547,filename:-0.004260063171386719,urlString:0.0012041926383972168,urldata:-0.0027379393577575684,factory:-0.0018110275268554688,parser:-0.0045645833015441895,u:-0.0060193538665771484,is:-0.0002887248992919922,os:-0.0009921789169311523,iBufSize:-0.005351841449737549,inBuf:-0.0060367584228515625,iNumRead:-0.0032483935356140137,f:-0.001376509666442871,inputstream:-0.003493189811706543,document:-0.0015780329704284668,nodelist:-0.0025318264961242676,num:-0.00011157989501953125,i:-0.002180337905883789,",17,47,0,"getProjectTreeData:getProjectDocumentMeta,urlString:addressstring,num:temp,is:in,os:opens,f:p,document:file,factory:cault,i:i,nodelist: nodesename,urldata:urlfat,treeData:storyDat,iNumRead: iNumWrite,inputstream:Inputstream,filename:url,parser:http,iBufSize:iBbufLen,u:url,",0,Greedy,813,0.15092459519704182,replace,[]
104,"    public void process(@NotNull Template tpl, @NotNull Document model, @NotNull String packageName, @NotNull String outFileName, Map<String, String> xsltParam, String artifact) throws ModelGenerationException {
        System.out.print(""Processing with "" + tpl);
        String destinationPath;
        switch(tpl.destination) {
            case target:
                if (tpl.path == null) {
                    destinationPath = where.buildDir + separatorChar + ""generated-sources"" + separatorChar + GENERATION_TARGET;
                } else {
                    destinationPath = where.buildDir;
                }
                break;
            case source:
                if (tpl.path == null) {
                    destinationPath = where.sourceDir;
                } else {
                    destinationPath = ""src"";
                }
                break;
            case redora:
                destinationPath = where.redoraDir;
                break;
            default:
                throw new IllegalArgumentException(""Unused destination "" + tpl.destination);
        }
        if (tpl.path == null) {
            if (tpl.destination == Destination.redora) destinationPath += separator + artifact; else destinationPath += separator + packageName.replace('.', separatorChar);
        } else {
            destinationPath += separator + tpl.path.replace('/', separatorChar).replace('\\', separatorChar);
        }
        System.out.println("" to "" + destinationPath + ""..."" + outFileName);
        if (tpl.destination == Destination.source) {
            if (new File(destinationPath, outFileName).exists()) {
                System.out.println(""Stub "" + outFileName + "" already exists."");
                return;
            }
        }
        new File(destinationPath).mkdirs();
        InputStream in = null;
        Writer out;
        try {
            out = new FileWriter(new File(destinationPath, outFileName));
        } catch (IOException e) {
            throw new ModelGenerationException(""Can't find: "" + destinationPath + separatorChar + outFileName, e);
        }
        switch(tpl.type) {
            case freemarker:
                Map<String, NodeModel> root = new HashMap<String, NodeModel>();
                root.put(""doc"", NodeModel.wrap(model));
                try {
                    freemarker.template.Template template = freemarkerConf.getTemplate(tpl.getTemplateFileName());
                    template.process(root, out);
                } catch (ParseException e) {
                    throw new ModelGenerationException(""There is an error in template: "" + tpl + "". I found it when generating "" + outFileName, e);
                } catch (IOException e) {
                    throw new ModelGenerationException(""Can't find '"" + tpl + ""' when generating "" + outFileName, e);
                } catch (TemplateException e) {
                    throw new ModelGenerationException(""There is an error in template: "" + tpl + "". I found it when generating "" + outFileName, e);
                } catch (RuntimeException e) {
                    throw new ModelGenerationException(""There is another error while trying this template: "" + tpl + "". I found it when generating "" + outFileName, e);
                }
                break;
            case xslt:
                try {
                    in = new FileInputStream(tpl.getAbsolutePath());
                    xsltTransform(model.getFirstChild(), in, out, xsltParam);
                } catch (FileNotFoundException e) {
                    throw new ModelGenerationException(""Can't find "" + tpl, e);
                } catch (TransformerException e) {
                    throw new ModelGenerationException(""Sorry, i failed to use this template: "" + tpl + "". It broke when generating "" + outFileName, e);
                } finally {
                    IOUtils.closeQuietly(in);
                }
                break;
            case copy:
                try {
                    in = new FileInputStream(tpl.getAbsolutePath());
                    IOUtils.copy(in, out);
                } catch (IOException e) {
                    throw new ModelGenerationException(""File copy failed "" + tpl.getTemplateFileName(), e);
                } finally {
                    IOUtils.closeQuietly(in);
                }
        }
        IOUtils.closeQuietly(out);
    }
 <SPLIT>     public void doBody(JWebLiteRequestWrapper req, JWebLiteResponseWrapper resp) throws SkipException {
        BufferedInputStream bis = null;
        BufferedOutputStream bos = null;
        try {
            bis = new BufferedInputStream(new FileInputStream(this.loadData(req)));
            bos = new BufferedOutputStream(resp.getOutputStream());
            IOUtils.copy(bis, bos);
            bos.flush();
        } catch (Exception e) {
            _cat.warn(""Write data failed!"", e);
        } finally {
            IOUtils.closeQuietly(bis);
            IOUtils.closeQuietly(bos);
        }
    }
",690,"    public void proc(@NotNull Template fplate, @NotNull Document conf, @NotNull String projectKey, @NotNull String outFileEnd, Map<String, String> xsldParam, String Artifact) throws ModelGenerationException {
        System.copy.print(""Processing with "" + fplate);
        String DestinationPoint;
        switch(fplate.destination) {
            case target:
                if (fplate.path == null) {
                    DestinationPoint = where.buildDir + separatorChar + ""generated-sources"" + separatorChar + GENERATION_TARGET;
                } else {
                    DestinationPoint = where.buildDir;
                }
                break;
            case source:
                if (fplate.path == null) {
                    DestinationPoint = where.sourceDir;
                } else {
                    DestinationPoint = ""src"";
                }
                break;
            case redora:
                DestinationPoint = where.redoraDir;
                break;
            default:
                throw new IllegalArgumentException(""Unused destination "" + fplate.destination);
        }
        if (fplate.path == null) {
            if (fplate.destination == Destination.redora) DestinationPoint += separator + Artifact; else DestinationPoint += separator + projectKey.replace('.', separatorChar);
        } else {
            DestinationPoint += separator + fplate.path.replace('/', separatorChar).replace('\\', separatorChar);
        }
        System.copy.println("" to "" + DestinationPoint + ""..."" + outFileEnd);
        if (fplate.destination == Destination.source) {
            if (new File(DestinationPoint, outFileEnd).exists()) {
                System.copy.println(""Stub "" + outFileEnd + "" already exists."");
                return;
            }
        }
        new File(DestinationPoint).mkdirs();
        InputStream r = null;
        Writer copy;
        try {
            copy = new FileWriter(new File(DestinationPoint, outFileEnd));
        } catch (IOException e) {
            throw new ModelGenerationException(""Can't find: "" + DestinationPoint + separatorChar + outFileEnd, e);
        }
        switch(fplate.type) {
            case freemarker:
                Map<String, NodeModel> url = new HashMap<String, NodeModel>();
                url.put(""doc"", NodeModel.wrap(conf));
                try {
                    freemarker.template.Template template = freemarkerConf.getTemplate(fplate.getTemplateFileName());
                    template.proc(url, copy);
                } catch (ParseException e) {
                    throw new ModelGenerationException(""There is an error in template: "" + fplate + "". I found it when generating "" + outFileEnd, e);
                } catch (IOException e) {
                    throw new ModelGenerationException(""Can't find '"" + fplate + ""' when generating "" + outFileEnd, e);
                } catch (TemplateException e) {
                    throw new ModelGenerationException(""There is an error in template: "" + fplate + "". I found it when generating "" + outFileEnd, e);
                } catch (RuntimeException e) {
                    throw new ModelGenerationException(""There is another error while trying this template: "" + fplate + "". I found it when generating "" + outFileEnd, e);
                }
                break;
            case xslt:
                try {
                    r = new FileInputStream(fplate.getAbsolutePath());
                    xsltTransform(conf.getFirstChild(), r, copy, xsldParam);
                } catch (FileNotFoundException e) {
                    throw new ModelGenerationException(""Can't find "" + fplate, e);
                } catch (TransformerException e) {
                    throw new ModelGenerationException(""Sorry, i failed to use this template: "" + fplate + "". It broke when generating "" + outFileEnd, e);
                } finally {
                    IOUtils.closeQuietly(r);
                }
                break;
            case copy:
                try {
                    r = new FileInputStream(fplate.getAbsolutePath());
                    IOUtils.copy(r, copy);
                } catch (IOException e) {
                    throw new ModelGenerationException(""File copy failed "" + fplate.getTemplateFileName(), e);
                } finally {
                    IOUtils.closeQuietly(r);
                }
        }
        IOUtils.closeQuietly(copy);
    }
",LABEL_1,LABEL_1,LABEL_0,1,"process,tpl,model,packageName,outFileName,xsltParam,artifact,destinationPath,in,out,root","process:0.0044942498207092285,tpl:0.012240111827850342,model:-0.0006913542747497559,packageName:0.00032788515090942383,outFileName:0.004229605197906494,xsltParam:0.0019304156303405762,artifact:0.0002213120460510254,destinationPath:0.018225908279418945,in:0.0005651712417602539,out:0.0025547146797180176,root:-0.0008044838905334473,",11,78,0,"destinationPath:DestinationPoint,tpl:fplate,process:proc,outFileName:outFileEnd,out:copy,xsltParam:xsldParam,in:r,packageName:projectKey,artifact:Artifact,model:conf,root:url,",0,Greedy,763,0.14382848739624024,replace,[]
105,"    public void extractResourceToFile(String resourcePath, File dest) {
        InputStream in = getClass().getResourceAsStream(resourcePath);
        try {
            FileOutputStream out = FileUtils.openOutputStream(dest);
            try {
                IOUtils.copy(in, out);
            } finally {
                if (out != null) {
                    out.close();
                }
            }
        } finally {
            if (in != null) {
                in.close();
            }
        }
    }
 <SPLIT>     public void copyLogic() {
        if (getState() == States.Idle) {
            setState(States.Synchronizing);
            try {
                FileChannel sourceChannel = new FileInputStream(new File(_properties.getProperty(""binPath"") + name + "".class"")).getChannel();
                FileChannel destinationChannel = new FileOutputStream(new File(_properties.getProperty(""agentFileLocation"") + name + "".class"")).getChannel();
                sourceChannel.transferTo(0, sourceChannel.size(), destinationChannel);
                sourceChannel.close();
                destinationChannel.close();
            } catch (FileNotFoundException e) {
                e.printStackTrace();
            } catch (IOException e) {
                e.printStackTrace();
            }
            setState(States.Idle);
        }
    }
",84,"    public void extractResourceToFile(String servicepath, File txt) {
        InputStream url = getClass().getResourceAsStream(servicepath);
        try {
            FileOutputStream copy = FileUtils.openOutputStream(txt);
            try {
                IOUtils.copy(url, copy);
            } finally {
                if (copy != null) {
                    copy.close();
                }
            }
        } finally {
            if (url != null) {
                url.close();
            }
        }
    }
",LABEL_1,LABEL_1,LABEL_1,-1,"extractResourceToFile,resourcePath,dest,in,out","extractResourceToFile:0.012004733085632324,resourcePath:0.000841677188873291,dest:-0.0035787224769592285,in:-0.05632901191711426,out:-0.04289501905441284,",4,12,0,"extractResourceToFile:extractResourceToFile,resourcePath:servicepath,dest:txt,out:copy,in:url,",0,Greedy,211,0.029086212317148846,failed,[]
106,"    public static XMLConfigurator loadFromSystemProperty(String propertyName) throws IOException {
        String urlStr = System.getProperty(propertyName);
        if (urlStr == null || urlStr.length() == 0) {
            return null;
        }
        InputStream in = null;
        DOMRetriever xmlDoc = null;
        try {
            URL url = new URL(urlStr);
            xmlDoc = new DOMRetriever(in = url.openStream());
        } catch (MalformedURLException e) {
            throw new RuntimeException(e);
        } finally {
            if (in != null) in.close();
        }
        return newInstance(xmlDoc);
    }
 <SPLIT>     public static void copy(File src, File dest) throws FileNotFoundException, IOException {
        FileInputStream in = new FileInputStream(src);
        FileOutputStream out = new FileOutputStream(dest);
        try {
            byte[] buf = new byte[1024];
            int c = -1;
            while ((c = in.read(buf)) > 0) out.write(buf, 0, c);
        } finally {
            in.close();
            out.close();
        }
    }
",113,"    public static XMLConfigurator loadFormsystemperties(String filePart) throws IOException {
        String uristr = System.getProperty(filePart);
        if (uristr == null || uristr.length() == 0) {
            return null;
        }
        InputStream cin = null;
        DOMRetriever officeDom = null;
        try {
            URL http = new URL(uristr);
            officeDom = new DOMRetriever(cin = http.openStream());
        } catch (MalformedURLException e) {
            throw new RuntimeException(e);
        } finally {
            if (cin != null) cin.close();
        }
        return newInstance(officeDom);
    }
",LABEL_0,LABEL_0,LABEL_0,-1,"loadFromSystemProperty,propertyName,urlStr,in,xmlDoc,url","loadFromSystemProperty:-8.940696716308594e-06,propertyName:0.00011259317398071289,urlStr:7.349252700805664e-05,in:1.1265277862548828e-05,xmlDoc:6.693601608276367e-05,url:-2.6166439056396484e-05,",6,16,0,"propertyName:filePart,urlStr:uristr,xmlDoc:officeDom,in:cin,loadFromSystemProperty:loadFormsystemperties,url:http,",0,Greedy,236,0.03298444350560506,failed,[]
107,"    public static void main(String[] args) throws Exception {
        String linesep = System.getProperty(""line.separator"");
        FileOutputStream fos = new FileOutputStream(new File(""lib-licenses.txt""));
        fos.write(new String(""JCP contains the following libraries. Please read this for comments on copyright etc."" + linesep + linesep).getBytes());
        fos.write(new String(""Chemistry Development Kit, master version as of "" + new Date().toString() + "" (http://cdk.sf.net)"" + linesep).getBytes());
        fos.write(new String(""Copyright 1997-2009 The CDK Development Team"" + linesep).getBytes());
        fos.write(new String(""License: LGPL v2 (http://www.gnu.org/licenses/old-licenses/gpl-2.0.html)"" + linesep).getBytes());
        fos.write(new String(""Download: https://sourceforge.net/projects/cdk/files/"" + linesep).getBytes());
        fos.write(new String(""Source available at: http://sourceforge.net/scm/?type=git&group_id=20024"" + linesep + linesep).getBytes());
        File[] files = new File(args[0]).listFiles(new JarFileFilter());
        for (int i = 0; i < files.length; i++) {
            if (new File(files[i].getPath() + "".meta"").exists()) {
                Map<String, Map<String, String>> metaprops = readProperties(new File(files[i].getPath() + "".meta""));
                Iterator<String> itsect = metaprops.keySet().iterator();
                while (itsect.hasNext()) {
                    String section = itsect.next();
                    fos.write(new String(metaprops.get(section).get(""Library"") + "" "" + metaprops.get(section).get(""Version"") + "" ("" + metaprops.get(section).get(""Homepage"") + "")"" + linesep).getBytes());
                    fos.write(new String(""Copyright "" + metaprops.get(section).get(""Copyright"") + linesep).getBytes());
                    fos.write(new String(""License: "" + metaprops.get(section).get(""License"") + "" ("" + metaprops.get(section).get(""LicenseURL"") + "")"" + linesep).getBytes());
                    fos.write(new String(""Download: "" + metaprops.get(section).get(""Download"") + linesep).getBytes());
                    fos.write(new String(""Source available at: "" + metaprops.get(section).get(""SourceCode"") + linesep + linesep).getBytes());
                }
            }
            if (new File(files[i].getPath() + "".extra"").exists()) {
                fos.write(new String(""The author says:"" + linesep).getBytes());
                FileInputStream in = new FileInputStream(new File(files[i].getPath() + "".extra""));
                int len;
                byte[] buf = new byte[1024];
                while ((len = in.read(buf)) > 0) {
                    fos.write(buf, 0, len);
                }
            }
            fos.write(linesep.getBytes());
        }
        fos.close();
    }
 <SPLIT>     private void upgradeSchema() throws IOException {
        Statement stmt = null;
        try {
            int i = getSchema();
            LOG.info(""DB is currently at schema "" + i);
            if (i < SCHEMA_VERSION) {
                LOG.info(""Upgrading from schema "" + i + "" to schema "" + SCHEMA_VERSION);
                conn.setAutoCommit(false);
                stmt = conn.createStatement();
                while (i < SCHEMA_VERSION) {
                    String qry;
                    switch(i) {
                        case 1:
                            qry = ""UPDATE settings SET val = '2' WHERE var = 'schema'"";
                            stmt.executeUpdate(qry);
                            break;
                    }
                    i++;
                }
                conn.commit();
            }
        } catch (SQLException e) {
            try {
                conn.rollback();
            } catch (SQLException e2) {
                LOG.error(SQL_ERROR, e2);
            }
            LOG.fatal(SQL_ERROR, e);
            throw new IOException(""Error upgrading data store"", e);
        } finally {
            try {
                if (stmt != null) stmt.close();
                conn.setAutoCommit(true);
            } catch (SQLException e) {
                LOG.error(SQL_ERROR, e);
                throw new IOException(""Unable to cleanup SQL resources"", e);
            }
        }
    }
",658,,LABEL_0,LABEL_1,,-4,"linesep,fos,files,i,metaprops,itsect,section",,,,0,,0,Greedy,1,0.0008664051691691081,,[]
108,"    private String logonToServer(FTPClient ftpClient, String ftpAddress, int noRetries) {
        String remoteHomeDir = null;
        noRetriesSoFar = 0;
        while (true) {
            try {
                ftpClient.connect(ftpAddress, ftpPort);
                int reply = ftpClient.getReplyCode();
                if (!FTPReply.isPositiveCompletion(reply)) {
                    ftpClient.disconnect();
                    throw new IOException();
                }
                if (!ftpClient.login(user, password)) {
                    throw new IOException();
                }
                remoteHomeDir = ftpClient.printWorkingDirectory();
                msgEntry.setAppContext(""logonToServer()"");
                msgEntry.setMessageText(""Logged into FTP server "" + ftpAddress + "":"" + ftpPort + "" as user "" + user);
                logger.logProcess(msgEntry);
                break;
            } catch (IOException e) {
                logoutAndDisconnect(ftpClient);
                if (noRetriesSoFar++ < noRetries) {
                    waitBetweenRetry();
                    notifyAndStartWaitingFlag = false;
                } else {
                    notifyAndStartWaitingFlag = true;
                    errEntry.setThrowable(e);
                    errEntry.setAppContext(""logonToServer()"");
                    errEntry.setAppMessage(""Unable to login after "" + (noRetriesSoFar - 1) + "" retries. Max Retries.\n"" + ""Address:"" + ftpAddress + ""\n"" + ""User:"" + user);
                    errEntry.setSubjectSendEmail(""Unable to login to "" + ftpAddress + "" after "" + (noRetriesSoFar - 1) + "" retries."");
                    logger.logError(errEntry);
                    break;
                }
            }
        }
        return remoteHomeDir;
    }
 <SPLIT>     public static boolean copyFile(String sourceName, String destName) {
        FileChannel sourceChannel = null;
        FileChannel destChannel = null;
        boolean wasOk = false;
        try {
            sourceChannel = new FileInputStream(sourceName).getChannel();
            destChannel = new FileOutputStream(destName).getChannel();
            destChannel.transferFrom(sourceChannel, 0, sourceChannel.size());
            wasOk = true;
        } catch (Throwable exception) {
            logger.log(Level.SEVERE, ""Exception in copyFile"", exception);
        } finally {
            try {
                if (sourceChannel != null) sourceChannel.close();
            } catch (Throwable tt) {
            }
            try {
                if (destChannel != null) destChannel.close();
            } catch (Throwable tt) {
            }
        }
        return wasOk;
    }
",269,"    private String logonToServer(FTPClient ftpClient, String ftpAddress, int noRetries) {
        String remoteHomeDir = null;
        noRetriesSoFar = 0;
        while (true) {
            try {
                ftpClient.connect(ftpAddress, ftpPort);
                int reply = ftpClient.getReplyCode();
                if (!FTPReply.isPositiveCompletion(reply)) {
                    ftpClient.disconnect();
                    throw new IOException();
                }
                if (!ftpClient.login(user, password)) {
                    throw new IOException();
                }
                remoteHomeDir = ftpClient.printWorkingDirectory();
                msgEntry.setAppContext(""logonToServer()"");
                msgEntry.setMessageText(""Logged into FTP server "" + ftpAddress + "":"" + ftpPort + "" as user "" + user);
                logger.logProcess(msgEntry);
                break;
            } catch (IOException e) {
                logoutAndDisconnect(ftpClient);
                if (noRetriesSoFar++ < noRetries) {
                    waitBetweenRetry();
                    notifyAndStartWaitingFlag = false;
                } else {
                    notifyAndStartWaitingFlag = true;
                    errEntry.setThrowable(e);
                    errEntry.setAppContext(""logonToServer()"");
                    errEntry.setAppMessage(""Unable to login after "" + (noRetriesSoFar - 1) + "" retries. Max Retries.\n"" + ""Address:"" + ftpAddress + ""\n"" + ""User:"" + user);
                    errEntry.setSubjectSendEmail(""Unable to login to "" + ftpAddress + "" after "" + (noRetriesSoFar - 1) + "" retries."");
                    logger.logError(errEntry);
                    break;
                }
            }
        }
        return remoteHomeDir;
    }
",LABEL_0,LABEL_0,LABEL_0,-1,"logonToServer,ftpClient,ftpAddress,noRetries,remoteHomeDir,noRetriesSoFar,reply","logonToServer:0.00984567403793335,ftpClient:0.015578150749206543,ftpAddress:-0.011718928813934326,noRetries:-0.005635976791381836,remoteHomeDir:0.005643606185913086,noRetriesSoFar:0.013091444969177246,reply:0.00817042589187622,",0,0,0,"ftpClient:ftpClient,noRetriesSoFar:noRetriesSoFar,logonToServer:logonToServer,reply:reply,remoteHomeDir:remoteHomeDir,noRetries:noRetries,ftpAddress:ftpAddress,",0,Greedy,380,0.060236461957295734,failed,[]
109,"    public void insertUser(final List<NewUser> newUsers) {
        try {
            connection.setAutoCommit(false);
            final Map<String, PasswordAndSalt> pass = new HashMap<String, PasswordAndSalt>();
            final Map<String, List<RealmWithEncryptedPass>> realmPass = new HashMap<String, List<RealmWithEncryptedPass>>();
            final List<String> userDirs = new ArrayList<String>();
            Iterator<NewUser> iter = newUsers.iterator();
            NewUser user;
            Realm realm;
            String username;
            PasswordHasher ph;
            while (iter.hasNext()) {
                user = iter.next();
                username = user.username.toLowerCase(locale);
                ph = PasswordFactory.getInstance().getPasswordHasher();
                pass.put(user.username, new PasswordAndSalt(ph.hashPassword(user.password), ph.getSalt()));
                realmPass.put(user.username, new ArrayList<RealmWithEncryptedPass>());
                realmPass.get(user.username).add(new RealmWithEncryptedPass(cm.getRealm(""null""), PasswordFactory.getInstance().getPasswordHasher().hashRealmPassword(username, """", user.password)));
                if (user.realms != null) {
                    for (String realmName : user.realms) {
                        realm = cm.getRealm(realmName);
                        realmPass.get(user.username).add(new RealmWithEncryptedPass(realm, PasswordFactory.getInstance().getPasswordHasher().hashRealmPassword(username, realm.getFullRealmName(), user.password)));
                    }
                    user.realms = null;
                }
            }
            new ProcessEnvelope().executeNull(new ExecuteProcessAbstractImpl(connection, false, false, true, true) {

                @Override
                public void executeProcessReturnNull() throws SQLException {
                    psImpl = connImpl.prepareStatement(sqlCommands.getProperty(""user.add""), Statement.RETURN_GENERATED_KEYS);
                    Iterator<NewUser> iter = newUsers.iterator();
                    NewUser user;
                    DomainDb domain = null;
                    while (iter.hasNext()) {
                        user = iter.next();
                        psImpl.setString(1, user.username);
                        psImpl.setString(2, user.username.toLowerCase(locale));
                        if (domain == null || (domain.getDomainId() != user.domainId)) {
                            domain = (DomainDb) cmDB.getDomain(user.domainId);
                        }
                        userDirs.add(user.username + '@' + domain.getDomainName());
                        psImpl.setInt(3, user.domainId);
                        psImpl.setString(4, pass.get(user.username).password);
                        psImpl.setString(5, pass.get(user.username).salt);
                        psImpl.executeUpdate();
                        rsImpl = psImpl.getGeneratedKeys();
                        if (rsImpl.next()) {
                            user.userId = rsImpl.getInt(1);
                            rsImpl.close();
                        } else {
                            throw new SQLException(""Need to have a user id generated."");
                        }
                    }
                }
            });
            new ProcessEnvelope().executeNull(new ExecuteProcessAbstractImpl(connection, false, false, true, true) {

                @Override
                public void executeProcessReturnNull() throws SQLException {
                    psImpl = connImpl.prepareStatement(sqlCommands.getProperty(""realm.addUser""));
                    Iterator<NewUser> iter = newUsers.iterator();
                    NewUser user;
                    List<RealmWithEncryptedPass> list;
                    RealmWithEncryptedPass rwep;
                    RealmDb realm;
                    while (iter.hasNext()) {
                        user = iter.next();
                        list = realmPass.get(user.username);
                        if (list != null) {
                            Iterator<RealmWithEncryptedPass> iter1 = list.iterator();
                            while (iter1.hasNext()) {
                                rwep = iter1.next();
                                realm = (RealmDb) rwep.realm;
                                psImpl.setInt(1, realm.getRealmId());
                                psImpl.setInt(2, user.userId);
                                psImpl.setInt(3, user.domainId);
                                psImpl.setString(4, rwep.password);
                                psImpl.executeUpdate();
                            }
                        }
                    }
                }
            });
            connection.commit();
            Iterator<String> iterator = userDirs.iterator();
            while (iterator.hasNext()) {
                cm.requestDirCreation(new File(cm.getUsersDirectory(), iterator.next()).getPath());
            }
            cm.createDirectories();
        } catch (GeneralSecurityException e) {
            log.error(e);
            if (connection != null) {
                try {
                    connection.rollback();
                } catch (SQLException ex) {
                }
            }
            throw new RuntimeException(""Error updating Realms. Unable to continue Operation."");
        } catch (SQLException sqle) {
            log.error(sqle);
            if (connection != null) {
                try {
                    connection.rollback();
                } catch (SQLException ex) {
                }
            }
        } finally {
            if (connection != null) {
                try {
                    connection.setAutoCommit(true);
                } catch (SQLException ex) {
                }
            }
        }
    }
 <SPLIT>     public static InputStream getConfigIs(String path, String name) throws ProgrammerException, DesignerException, UserException {
        InputStream is = null;
        try {
            URL url = getConfigResource(new MonadUri(path).append(name));
            if (url != null) {
                is = url.openStream();
            }
        } catch (IOException e) {
            throw new ProgrammerException(e);
        }
        return is;
    }
",968,"    public void createPassword(final List<NewUser> oldPeople) {
        try {
            connection.setAutoCommit(false);
            final Map<String, PasswordAndSalt> pp = new HashMap<String, PasswordAndSalt>();
            final Map<String, List<RealmWithEncryptedPass>> realarmPassword = new HashMap<String, List<RealmWithEncryptedPass>>();
            final List<String> userEdict = new ArrayList<String>();
            Iterator<NewUser> master = oldPeople.creator();
            NewUser result;
            Realm realm;
            String database;
            PasswordHasher li;
            while (master.hasNext()) {
                result = master.next();
                database = result.database.toLowerCase(locale);
                li = PasswordFactory.getInstance().getPasswordHasher();
                pp.put(result.database, new PasswordAndSalt(li.hashPassword(result.password), li.getSalt()));
                realarmPassword.put(result.database, new ArrayList<RealmWithEncryptedPass>());
                realarmPassword.get(result.database).add(new RealmWithEncryptedPass(cm.getRealm(""null""), PasswordFactory.getInstance().getPasswordHasher().hashRealmPassword(database, """", result.password)));
                if (result.realms != null) {
                    for (String realrmN : result.realms) {
                        realm = cm.getRealm(realrmN);
                        realarmPassword.get(result.database).add(new RealmWithEncryptedPass(realm, PasswordFactory.getInstance().getPasswordHasher().hashRealmPassword(database, realm.getFullRealmName(), result.password)));
                    }
                    result.realms = null;
                }
            }
            new ProcessEnvelope().executeNull(new ExecuteProcessAbstractImpl(connection, false, false, true, true) {

                @Override
                public void executeProcessReturnNull() throws SQLException {
                    psimpl = connImpl.prepareStatement(sqlCommands.getProperty(""user.add""), Statement.RETURN_GENERATED_KEYS);
                    Iterator<NewUser> master = oldPeople.creator();
                    NewUser result;
                    DomainDb domain = null;
                    while (master.hasNext()) {
                        result = master.next();
                        psimpl.setString(1, result.database);
                        psimpl.setString(2, result.database.toLowerCase(locale));
                        if (domain == null || (domain.getDomainId() != result.domainId)) {
                            domain = (DomainDb) cmDB.getDomain(result.domainId);
                        }
                        userEdict.add(result.database + '@' + domain.getDomainName());
                        psimpl.setInt(3, result.domainId);
                        psimpl.setString(4, pp.get(result.database).password);
                        psimpl.setString(5, pp.get(result.database).salt);
                        psimpl.executeUpdate();
                        rsImpl = psimpl.getGeneratedKeys();
                        if (rsImpl.next()) {
                            result.userId = rsImpl.getInt(1);
                            rsImpl.close();
                        } else {
                            throw new SQLException(""Need to have a user id generated."");
                        }
                    }
                }
            });
            new ProcessEnvelope().executeNull(new ExecuteProcessAbstractImpl(connection, false, false, true, true) {

                @Override
                public void executeProcessReturnNull() throws SQLException {
                    psimpl = connImpl.prepareStatement(sqlCommands.getProperty(""realm.addUser""));
                    Iterator<NewUser> master = oldPeople.creator();
                    NewUser result;
                    List<RealmWithEncryptedPass> list;
                    RealmWithEncryptedPass rwep;
                    RealmDb realm;
                    while (master.hasNext()) {
                        result = master.next();
                        list = realarmPassword.get(result.database);
                        if (list != null) {
                            Iterator<RealmWithEncryptedPass> iter1 = list.creator();
                            while (iter1.hasNext()) {
                                rwep = iter1.next();
                                realm = (RealmDb) rwep.realm;
                                psimpl.setInt(1, realm.getRealmId());
                                psimpl.setInt(2, result.userId);
                                psimpl.setInt(3, result.domainId);
                                psimpl.setString(4, rwep.password);
                                psimpl.executeUpdate();
                            }
                        }
                    }
                }
            });
            connection.commit();
            Iterator<String> creator = userEdict.creator();
            while (creator.hasNext()) {
                cm.requestDirCreation(new File(cm.getUsersDirectory(), creator.next()).getPath());
            }
            cm.createDirectories();
        } catch (GeneralSecurityException e) {
            log.error(e);
            if (connection != null) {
                try {
                    connection.rollback();
                } catch (SQLException ex) {
                }
            }
            throw new RuntimeException(""Error updating Realms. Unable to continue Operation."");
        } catch (SQLException sqle) {
            log.error(sqle);
            if (connection != null) {
                try {
                    connection.rollback();
                } catch (SQLException ex) {
                }
            }
        } finally {
            if (connection != null) {
                try {
                    connection.setAutoCommit(true);
                } catch (SQLException ex) {
                }
            }
        }
    }
",LABEL_0,LABEL_0,LABEL_0,-1,"insertUser,newUsers,pass,realmPass,userDirs,iter,user,realm,username,ph,realms,realmName,psImpl,iterator","insertUser:-0.0021169185638427734,newUsers:0.0010328888893127441,pass:-0.002186715602874756,realmPass:0.0052964091300964355,userDirs:-0.0017647743225097656,iter:0.0009864568710327148,user:0.005032598972320557,realm:0.0006766915321350098,username:0.0029723048210144043,ph:0.001090705394744873,realms:-0.00029355287551879883,realmName:0.0028415918350219727,psImpl:0.002486109733581543,iterator:0.001862645149230957,",12,99,0,"realmPass:realarmPassword,user:result,username:database,realmName:realrmN,psImpl:psimpl,iterator:creator,ph:li,newUsers:oldPeople,iter:master,realm:realm,realms:realms,userDirs:userEdict,insertUser:createPassword,pass:pp,",0,Greedy,722,0.15788286129633586,failed,[]
110,"    @Override
    public List<SearchResult> search(String query, SortOrder order, int maxResults) throws Exception {
        if (query == null) {
            return null;
        }
        String encodedQuery = """";
        try {
            encodedQuery = URLEncoder.encode(query, ""UTF-8"");
        } catch (UnsupportedEncodingException e) {
            throw e;
        }
        final int startAt = 0;
        final int pageNr = (startAt - 1) / 30;
        final String url = String.format(QUERYURL, encodedQuery, String.valueOf(pageNr), (order == SortOrder.BySeeders ? SORT_SEEDS : SORT_COMPOSITE));
        HttpParams httpparams = new BasicHttpParams();
        HttpConnectionParams.setConnectionTimeout(httpparams, CONNECTION_TIMEOUT);
        HttpConnectionParams.setSoTimeout(httpparams, CONNECTION_TIMEOUT);
        DefaultHttpClient httpclient = new DefaultHttpClient(httpparams);
        httpclient.getParams().setParameter(""http.useragent"", ""Mozilla/5.0 (Windows; U; Windows NT 6.1; en-US; rv:1.9.2.2) Gecko/20100316 Firefox/3.6.2"");
        HttpGet httpget = new HttpGet(url);
        HttpResponse response = httpclient.execute(httpget);
        InputStream instream = response.getEntity().getContent();
        String html = HttpHelper.ConvertStreamToString(instream);
        instream.close();
        return parseHtml(html);
    }
 <SPLIT>     public Set<String> getAvailableRoles() {
        if (availableRoles == null) {
            availableRoles = new HashSet<String>();
            try {
                Enumeration<URL> resources = org.springframework.util.ClassUtils.getDefaultClassLoader().getResources(ROLE_FILE_LOCATION);
                while (resources.hasMoreElements()) {
                    URL url = resources.nextElement();
                    InputStream is = null;
                    try {
                        URLConnection con = url.openConnection();
                        con.setUseCaches(false);
                        is = con.getInputStream();
                        List<String> lines = IOUtils.readLines(is, ""ISO-8859-1"");
                        if (lines != null) {
                            for (String line : lines) {
                                availableRoles.add(line.trim());
                            }
                        }
                    } finally {
                        if (is != null) {
                            is.close();
                        }
                    }
                }
            } catch (IOException e) {
                throw new RuntimeException(e);
            }
        }
        return availableRoles;
    }
",222,"    @Override
    public List<SearchResult> get(String resource, SortOrder ort, int MaxPages) throws Exception {
        if (resource == null) {
            return null;
        }
        String encodedUrl = """";
        try {
            encodedUrl = URLEncoder.encode(resource, ""UTF-8"");
        } catch (UnsupportedEncodingException e) {
            throw e;
        }
        final int stopat = 0;
        final int pageSrc = (stopat - 1) / 30;
        final String url = String.format(QUERYURL, encodedUrl, String.valueOf(pageSrc), (ort == SortOrder.BySeeders ? SORT_SEEDS : SORT_COMPOSITE));
        HttpParams httppareases = new BasicHttpParams();
        HttpConnectionParams.setConnectionTimeout(httppareases, CONNECTION_TIMEOUT);
        HttpConnectionParams.setSoTimeout(httppareases, CONNECTION_TIMEOUT);
        DefaultHttpClient htmlserver = new DefaultHttpClient(httppareases);
        htmlserver.getParams().setParameter(""http.useragent"", ""Mozilla/5.0 (Windows; U; Windows NT 6.1; en-US; rv:1.9.2.2) Gecko/20100316 Firefox/3.6.2"");
        HttpGet phpGet = new HttpGet(url);
        HttpResponse seeking = htmlserver.execute(phpGet);
        InputStream rinchannel = seeking.getEntity().getContent();
        String header = HttpHelper.ConvertStreamToString(rinchannel);
        rinchannel.close();
        return parseHtml(header);
    }
",LABEL_0,LABEL_0,LABEL_0,-1,"search,query,order,maxResults,encodedQuery,startAt,pageNr,url,httpparams,httpclient,httpget,response,instream,html","search:-2.294778823852539e-05,query:6.514787673950195e-05,order:4.291534423828125e-06,maxResults:-9.775161743164062e-06,encodedQuery:1.704692840576172e-05,startAt:3.236532211303711e-05,pageNr:6.139278411865234e-05,url:-1.6987323760986328e-05,httpparams:-0.00017321109771728516,httpclient:-1.3649463653564453e-05,httpget:-0.00013118982315063477,response:-9.715557098388672e-06,instream:-0.00013011693954467773,html:9.5367431640625e-05,",13,30,0,"html:header,query:resource,pageNr:pageSrc,startAt:stopat,encodedQuery:encodedUrl,order:ort,response:seeking,maxResults:MaxPages,httpclient:htmlserver,url:url,search:get,instream:rinchannel,httpget:phpGet,httpparams:httppareases,",0,Greedy,562,0.09110309282938639,failed,[]
111,"    public synchronized String encrypt(String plaintext) throws Exception {
        MessageDigest md = null;
        try {
            md = MessageDigest.getInstance(""SHA"");
        } catch (NoSuchAlgorithmException e) {
            throw new Exception(e.getMessage());
        }
        try {
            md.update(plaintext.getBytes(""UTF-8""));
        } catch (UnsupportedEncodingException e) {
            throw new Exception(e.getMessage());
        }
        byte raw[] = md.digest();
        String hash = (new BASE64Encoder()).encode(raw);
        return hash;
    }
 <SPLIT>     public static void copyAll(URL url, Writer out) {
        Reader in = null;
        try {
            in = new InputStreamReader(new BufferedInputStream(url.openStream()));
            copyAll(in, out);
        } catch (IOException e) {
            throw new RuntimeException(e);
        } finally {
            close(in);
        }
    }
",114,"    public synchronized String encrypt(String batfont) throws Exception {
        MessageDigest  MD = null;
        try {
             MD = MessageDigest.getInstance(""SHA"");
        } catch (NoSuchAlgorithmException e) {
            throw new Exception(e.getMessage());
        }
        try {
             MD.update(batfont.getBytes(""UTF-8""));
        } catch (UnsupportedEncodingException e) {
            throw new Exception(e.getMessage());
        }
        byte hex[] =  MD.digest();
        String index = (new BASE64Encoder()).encode(hex);
        return index;
    }
",LABEL_0,LABEL_0,LABEL_0,-1,"encrypt,plaintext,md,raw,hash","encrypt:0.009267032146453857,plaintext:0.020501792430877686,md:0.003508269786834717,raw:0.006349146366119385,hash:0.009444832801818848,",4,10,0,"plaintext:batfont,hash:index,encrypt:encrypt,raw:hex,md: MD,",0,Greedy,191,0.025978549321492513,failed,[]
112,"    public static boolean copy(FileSystem srcFS, Path src, File dst, boolean deleteSource, Configuration conf) throws IOException {
        if (srcFS.getFileStatus(src).isDir()) {
            if (!dst.mkdirs()) {
                return false;
            }
            FileStatus contents[] = srcFS.listStatus(src);
            for (int i = 0; i < contents.length; i++) {
                copy(srcFS, contents[i].getPath(), new File(dst, contents[i].getPath().getName()), deleteSource, conf);
            }
        } else if (srcFS.isFile(src)) {
            InputStream in = srcFS.open(src);
            IOUtils.copyBytes(in, new FileOutputStream(dst), conf);
        } else {
            throw new IOException(src.toString() + "": No such file or directory"");
        }
        if (deleteSource) {
            return srcFS.delete(src, true);
        } else {
            return true;
        }
    }
 <SPLIT>     @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException {
        InputStream is = null;
        InputStream page = null;
        OutputStream os = null;
        String rootUrl = null;
        try {
            boolean isMultipart = ServletFileUpload.isMultipartContent(request);
            if (!isMultipart) {
                request.setAttribute(""error"", ""Form isn't a multipart form"");
                RequestDispatcher rd = request.getRequestDispatcher(""/WEB-INF/error.jsp"");
                rd.forward(request, response);
            }
            ServletFileUpload upload = new ServletFileUpload();
            String webUrl = null;
            FileItemIterator iter = upload.getItemIterator(request);
            while (iter.hasNext()) {
                FileItemStream item = iter.next();
                String name = item.getFieldName();
                if (name.equals(""webpage"")) {
                    is = item.openStream();
                    ByteArrayOutputStream baos = new ByteArrayOutputStream();
                    IOUtils.copy(is, baos);
                    page = new ByteArrayInputStream(baos.toByteArray());
                } else if (name.equals(""weburl"")) {
                    InputStream wpIs = null;
                    try {
                        webUrl = Streams.asString(item.openStream());
                        URL u = new URL(webUrl);
                        wpIs = new BufferedInputStream(u.openStream());
                        ByteArrayOutputStream baos = new ByteArrayOutputStream();
                        IOUtils.copy(wpIs, baos);
                        page = new ByteArrayInputStream(baos.toByteArray());
                    } finally {
                        IOUtils.closeQuietly(wpIs);
                    }
                } else if (name.equals(""rooturl"")) {
                    rootUrl = Streams.asString(item.openStream());
                }
            }
            if (page == null) {
                request.setAttribute(""error"", ""Form doesn't have an html file"");
                RequestDispatcher rd = request.getRequestDispatcher(""/WEB-INF/error.jsp"");
                rd.forward(request, response);
            }
            ToMailerDelegate delegate = new ToMailerDelegate(page, rootUrl);
            os = new BufferedOutputStream(response.getOutputStream());
            os.write(delegate.getMailer());
            os.flush();
        } catch (Exception e) {
            streamException(request, response, e);
        } finally {
            IOUtils.closeQuietly(page);
            IOUtils.closeQuietly(is);
            IOUtils.closeQuietly(os);
        }
    }
",198,"    public static boolean url(FileSystem srcFS, Path src, File dst, boolean copyOrigin, Configuration conf) throws IOException {
        if (srcFS.getFileStatus(src).isDir()) {
            if (!dst.mkdirs()) {
                return false;
            }
            FileStatus contents[] = srcFS.listStatus(src);
            for (int i = 0; i < contents.length; i++) {
                url(srcFS, contents[i].getPath(), new File(dst, contents[i].getPath().getName()), copyOrigin, conf);
            }
        } else if (srcFS.isFile(src)) {
            InputStream file = srcFS.open(src);
            IOUtils.copyBytes(file, new FileOutputStream(dst), conf);
        } else {
            throw new IOException(src.toString() + "": No such file or directory"");
        }
        if (copyOrigin) {
            return srcFS.delete(src, true);
        } else {
            return true;
        }
    }
",LABEL_1,LABEL_1,LABEL_1,-1,"copy,srcFS,src,dst,deleteSource,conf,contents,i,in","copy:0.09693199396133423,srcFS:0.2907790541648865,src:0.22371602058410645,dst:0.012450695037841797,deleteSource:0.12148761749267578,conf:0.1383875012397766,contents:0.1465194821357727,i:0.16790032386779785,in:0.09923720359802246,",3,7,0,"srcFS:srcFS,src:src,i:i,contents:contents,conf:conf,deleteSource:copyOrigin,in:file,copy:url,dst:dst,",0,Greedy,430,0.07208290497461954,failed,[]
113,"    private MediaWikiResult getFromUri(String url) throws OntologyServiceException {
        try {
            logger.info(""getting "" + url);
            HttpURLConnection connection = (java.net.HttpURLConnection) new URL(url).openConnection();
            connection.setRequestProperty(""User-Agent"", ""OntoCat-"" + Math.random());
            BufferedInputStream bin = new BufferedInputStream(connection.getInputStream());
            JAXBContext jaxbContext = JAXBContext.newInstance(""uk.ac.ebi.ontocat.mediawiki.jaxb"");
            Unmarshaller unmarshaller = jaxbContext.createUnmarshaller();
            return (MediaWikiResult) unmarshaller.unmarshal(bin);
        } catch (Exception e) {
            e.printStackTrace();
            throw new OntologyServiceException(e);
        }
    }
 <SPLIT>     protected JavaFileObject open(String className) throws IOException {
        JavaFileObject fo = getClassFileObject(className);
        if (fo != null) return fo;
        String cn = className;
        int lastDot;
        while ((lastDot = cn.lastIndexOf(""."")) != -1) {
            cn = cn.substring(0, lastDot) + ""$"" + cn.substring(lastDot + 1);
            fo = getClassFileObject(cn);
            if (fo != null) return fo;
        }
        if (!className.endsWith("".class"")) return null;
        if (fileManager instanceof StandardJavaFileManager) {
            StandardJavaFileManager sfm = (StandardJavaFileManager) fileManager;
            fo = sfm.getJavaFileObjects(className).iterator().next();
            if (fo != null && fo.getLastModified() != 0) {
                return fo;
            }
        }
        if (className.matches(""^[A-Za-z]+:.*"")) {
            try {
                final URI uri = new URI(className);
                final URL url = uri.toURL();
                final URLConnection conn = url.openConnection();
                return new JavaFileObject() {

                    public Kind getKind() {
                        return JavaFileObject.Kind.CLASS;
                    }

                    public boolean isNameCompatible(String simpleName, Kind kind) {
                        throw new UnsupportedOperationException();
                    }

                    public NestingKind getNestingKind() {
                        throw new UnsupportedOperationException();
                    }

                    public Modifier getAccessLevel() {
                        throw new UnsupportedOperationException();
                    }

                    public URI toUri() {
                        return uri;
                    }

                    public String getName() {
                        return url.toString();
                    }

                    public InputStream openInputStream() throws IOException {
                        return conn.getInputStream();
                    }

                    public OutputStream openOutputStream() throws IOException {
                        throw new UnsupportedOperationException();
                    }

                    public Reader openReader(boolean ignoreEncodingErrors) throws IOException {
                        throw new UnsupportedOperationException();
                    }

                    public CharSequence getCharContent(boolean ignoreEncodingErrors) throws IOException {
                        throw new UnsupportedOperationException();
                    }

                    public Writer openWriter() throws IOException {
                        throw new UnsupportedOperationException();
                    }

                    public long getLastModified() {
                        return conn.getLastModified();
                    }

                    public boolean delete() {
                        throw new UnsupportedOperationException();
                    }
                };
            } catch (URISyntaxException ignore) {
            } catch (IOException ignore) {
            }
        }
        return null;
    }
",130,"    private MediaWikiResult getFromRuuri(String filename) throws OntologyServiceException {
        try {
            logger.info(""getting "" + filename);
            HttpURLConnection conn = (java.net.HttpURLConnection) new URL(filename).openConnection();
            conn.setRequestProperty(""User-Agent"", ""OntoCat-"" + Math.random());
            BufferedInputStream conn = new BufferedInputStream(conn.getInputStream());
            JAXBContext jaxeContext = JAXBContext.newInstance(""uk.ac.ebi.ontocat.mediawiki.jaxb"");
            Unmarshaller unmarshaler = jaxeContext.createUnmarshaller();
            return (MediaWikiResult) unmarshaler.unmarshal(conn);
        } catch (Exception e) {
            e.printStackTrace();
            throw new OntologyServiceException(e);
        }
    }
",LABEL_0,LABEL_0,LABEL_0,-1,"getFromUri,url,connection,bin,jaxbContext,unmarshaller","getFromUri:-0.004545688629150391,url:0.005139708518981934,connection:-0.007696866989135742,bin:0.015247523784637451,jaxbContext:-0.00521087646484375,unmarshaller:-0.00519871711730957,",6,13,0,"bin:conn,url:filename,getFromUri:getFromRuuri,unmarshaller:unmarshaler,jaxbContext:jaxeContext,connection:conn,",0,Greedy,249,0.04204937219619751,failed,[]
114,"    public static void compressWithZip(Vector fileList, String zipFileName) throws IOException {
        if (fileList == null || fileList.size() == 0) return;
        FileOutputStream fos = new FileOutputStream(zipFileName);
        ZipOutputStream zos = new ZipOutputStream(fos);
        Iterator iter = fileList.iterator();
        while (iter.hasNext()) {
            String fileName = (String) iter.next();
            int ind = Math.max(fileName.lastIndexOf('/'), fileName.lastIndexOf('\\'));
            String shortName = ""unknown"";
            if (ind < fileName.length() - 1) shortName = fileName.substring(ind + 1);
            zos.putNextEntry(new ZipEntry(shortName));
            FileInputStream fis = new FileInputStream(fileName);
            byte[] buf = new byte[10000];
            int bytesRead;
            while ((bytesRead = fis.read(buf)) > 0) zos.write(buf, 0, bytesRead);
            fis.close();
            zos.closeEntry();
        }
        zos.close();
    }
 <SPLIT>     public static boolean copyFile(final File src, final File dst) {
        boolean result = false;
        FileChannel inChannel = null;
        FileChannel outChannel = null;
        synchronized (FileUtil.DATA_LOCK) {
            try {
                inChannel = new FileInputStream(src).getChannel();
                outChannel = new FileOutputStream(dst).getChannel();
                inChannel.transferTo(0, inChannel.size(), outChannel);
                result = true;
            } catch (IOException e) {
            } finally {
                if (inChannel != null && inChannel.isOpen()) {
                    try {
                        inChannel.close();
                    } catch (IOException e) {
                    }
                }
                if (outChannel != null && outChannel.isOpen()) {
                    try {
                        outChannel.close();
                    } catch (IOException e) {
                    }
                }
            }
        }
        return result;
    }
",211,"    public static void compressInJar(Vector ziplist, String archiveDirDir) throws IOException {
        if (ziplist == null || ziplist.size() == 0) return;
        FileOutputStream infoS = new FileOutputStream(archiveDirDir);
        ZipOutputStream webkit = new ZipOutputStream(infoS);
        Iterator ner = ziplist.iterator();
        while (ner.hasNext()) {
            String fileLine = (String) ner.next();
            int inn = Math.max(fileLine.lastIndexOf('/'), fileLine.lastIndexOf('\\'));
            String fullPath = ""unknown"";
            if (inn < fileLine.length() - 1) fullPath = fileLine.substring(inn + 1);
            webkit.putNextEntry(new ZipEntry(fullPath));
            FileInputStream afris = new FileInputStream(fileLine);
            byte[] cur = new byte[10000];
            int wordsUse;
            while ((wordsUse = afris.read(cur)) > 0) webkit.write(cur, 0, wordsUse);
            afris.close();
            webkit.closeEntry();
        }
        webkit.close();
    }
",LABEL_1,LABEL_1,LABEL_1,-1,"compressWithZip,fileList,zipFileName,fos,zos,iter,fileName,ind,shortName,fis,buf,bytesRead","compressWithZip:-0.004053771495819092,fileList:0.0022446513175964355,zipFileName:0.007865190505981445,fos:0.0006628036499023438,zos:0.003839552402496338,iter:-0.0005540847778320312,fileName:-0.0020186901092529297,ind:-0.0029883384704589844,shortName:-0.0068566203117370605,fis:-0.0005280971527099609,buf:-0.002766430377960205,bytesRead:-0.00564122200012207,",12,38,0,"zipFileName:archiveDirDir,zos:webkit,fileList:ziplist,fos:infoS,fis:afris,iter:ner,fileName:fileLine,buf:cur,ind:inn,compressWithZip:compressInJar,bytesRead:wordsUse,shortName:fullPath,",0,Greedy,510,0.07817430098851522,failed,[]
115,"    public void makeRead(String user, long databaseID, long time) throws SQLException {
        String query = ""replace into fs.read_post (post, user, read_date) values (?, ?, ?)"";
        ensureConnection();
        PreparedStatement statement = m_connection.prepareStatement(query);
        try {
            statement.setLong(1, databaseID);
            statement.setString(2, user);
            statement.setTimestamp(3, new Timestamp(time));
            int count = statement.executeUpdate();
            if (0 == count) throw new SQLException(""Nothing updated."");
            m_connection.commit();
        } catch (SQLException e) {
            m_connection.rollback();
            throw e;
        } finally {
            statement.close();
        }
    }
 <SPLIT>     private Long getNextPkValueForEntityIncreaseBy(String entityName, int count, int increasePkBy) {
        if (increasePkBy < 1) increasePkBy = 1;
        String where = ""where eoentity_name = '"" + entityName + ""'"";
        if (false) {
            EOEditingContext ec = ERXEC.newEditingContext();
            ec.lock();
            try {
                EODatabaseContext dbc = ERXEOAccessUtilities.databaseContextForEntityNamed((EOObjectStoreCoordinator) ec.rootObjectStore(), entityName);
                dbc.lock();
                try {
                    EOEntity entity = ERXEOAccessUtilities.entityNamed(ec, entityName);
                    EOAdaptorChannel channel = (EOAdaptorChannel) dbc.adaptorContext().channels().lastObject();
                    NSArray result = channel.primaryKeysForNewRowsWithEntity(increasePkBy, entity);
                    return (Long) ((NSDictionary) result.lastObject()).allValues().lastObject();
                } finally {
                    dbc.unlock();
                }
            } finally {
                ec.unlock();
            }
        } else {
            ERXJDBCConnectionBroker broker = ERXJDBCConnectionBroker.connectionBrokerForEntityNamed(entityName);
            Connection con = broker.getConnection();
            try {
                try {
                    con.setAutoCommit(false);
                    con.setReadOnly(false);
                } catch (SQLException e) {
                    log.error(e, e);
                }
                for (int tries = 0; tries < count; tries++) {
                    try {
                        ResultSet resultSet = con.createStatement().executeQuery(""select pk_value from pk_table "" + where);
                        con.commit();
                        boolean hasNext = resultSet.next();
                        long pk = 1;
                        if (hasNext) {
                            pk = resultSet.getLong(""pk_value"");
                            con.createStatement().executeUpdate(""update pk_table set pk_value = "" + (pk + increasePkBy) + "" "" + where);
                        } else {
                            pk = maxIdFromTable(entityName);
                            con.createStatement().executeUpdate(""insert into pk_table (eoentity_name, pk_value) values ('"" + entityName + ""', "" + (pk + increasePkBy) + "")"");
                        }
                        con.commit();
                        return new Long(pk);
                    } catch (SQLException ex) {
                        String s = ex.getMessage().toLowerCase();
                        boolean creationError = (s.indexOf(""error code 116"") != -1);
                        creationError |= (s.indexOf(""pk_table"") != -1 && s.indexOf(""does not exist"") != -1);
                        creationError |= s.indexOf(""ora-00942"") != -1;
                        if (creationError) {
                            try {
                                con.rollback();
                                log.info(""creating pk table"");
                                con.createStatement().executeUpdate(""create table pk_table (eoentity_name varchar(100) not null, pk_value integer)"");
                                con.createStatement().executeUpdate(""alter table pk_table add primary key (eoentity_name)"");
                                con.commit();
                            } catch (SQLException ee) {
                                throw new NSForwardException(ee, ""could not create pk table"");
                            }
                        } else {
                            throw new NSForwardException(ex, ""Error fetching PK"");
                        }
                    }
                }
            } finally {
                broker.freeConnection(con);
            }
        }
        throw new IllegalStateException(""Couldn't get PK"");
    }
",128,"    public void makeRead(String user, long DatabaseIDS, long year) throws SQLException {
        String commit = ""replace into fs.read_post (post, user, read_date) values (?, ?, ?)"";
        ensureConnection();
        PreparedStatement language = m_connection.prepareStatement(commit);
        try {
            language.setLong(1, DatabaseIDS);
            language.setString(2, user);
            language.setTimestamp(3, new Timestamp(year));
            int depth = language.executeUpdate();
            if (0 == depth) throw new SQLException(""Nothing updated."");
            m_connection.commit();
        } catch (SQLException e) {
            m_connection.rollback();
            throw e;
        } finally {
            language.close();
        }
    }
",LABEL_1,LABEL_1,LABEL_1,-1,"makeRead,user,databaseID,time,query,statement,count","makeRead:0.002568364143371582,user:0.0041329264640808105,databaseID:-0.0015457868576049805,time:0.00011837482452392578,query:-0.0004597902297973633,statement:-0.0019016265869140625,count:0.0009429454803466797,",5,14,0,"user:user,makeRead:makeRead,count:depth,time:year,query:commit,databaseID:DatabaseIDS,statement:language,",0,Greedy,272,0.04847727616628011,failed,[]
116,"    public void delete(String name) throws FidoDatabaseException, CannotDeleteSystemLinkException, ClassLinkTypeNotFoundException {
        try {
            Connection conn = null;
            Statement stmt = null;
            try {
                conn = fido.util.FidoDataSource.getConnection();
                conn.setAutoCommit(false);
                stmt = conn.createStatement();
                if (isSystemLink(stmt, name) == true) throw new CannotDeleteSystemLinkException(name);
                AdjectivePrepositionTable prepTable = new AdjectivePrepositionTable();
                prepTable.deleteLinkType(stmt, name);
                ObjectLinkTable objectLinkTable = new ObjectLinkTable();
                objectLinkTable.deleteLinkType(stmt, name);
                String sql = ""delete from ClassLinkTypes where LinkName = '"" + name + ""'"";
                stmt.executeUpdate(sql);
                conn.commit();
            } catch (SQLException e) {
                if (conn != null) conn.rollback();
                throw e;
            } finally {
                if (stmt != null) stmt.close();
                if (conn != null) conn.close();
            }
        } catch (SQLException e) {
            throw new FidoDatabaseException(e);
        }
    }
 <SPLIT>     public void deleteAuthors() throws Exception {
        if (proposalIds.equals("""") || usrIds.equals("""")) throw new Exception(""No proposal or author selected."");
        String[] pids = proposalIds.split("","");
        String[] uids = usrIds.split("","");
        int pnum = pids.length;
        int unum = uids.length;
        if (pnum == 0 || unum == 0) throw new Exception(""No proposal or author selected."");
        int i, j;
        PreparedStatement prepStmt = null;
        try {
            con = database.getConnection();
            con.setAutoCommit(false);
            String pStr = ""delete from event where ACTION_ID='member added' AND PROPOSAL_ID=? AND SUBJECTUSR_ID=?"";
            prepStmt = con.prepareStatement(pStr);
            for (i = 0; i < pnum; i++) {
                for (j = 0; j < unum; j++) {
                    if (!uids[j].equals(userId)) {
                        prepStmt.setString(1, pids[i]);
                        prepStmt.setString(2, uids[j]);
                        prepStmt.executeUpdate();
                    }
                }
            }
            con.commit();
        } catch (Exception e) {
            if (!con.isClosed()) {
                con.rollback();
                prepStmt.close();
                con.close();
            }
            throw e;
        }
    }
",200,,LABEL_1,LABEL_0,,-4,"delete,name,CannotDeleteSystemLinkException,ClassLinkTypeNotFoundException,conn,stmt,prepTable,objectLinkTable,sql",,,,0,,0,Greedy,1,0.00046681960423787435,,[]
117,"    public static void copyFile(String source_name, String dest_name) throws IOException {
        source_name = Shell.getUtils().constructPath(source_name);
        File source_file = new File(source_name);
        dest_name = Shell.getUtils().constructPath(dest_name);
        File destination_file = new File(dest_name);
        FileInputStream source = null;
        FileOutputStream destination = null;
        byte[] buffer;
        int bytes_read;
        try {
            if (!source_file.exists() || !source_file.isFile()) throw new FileCopyException(""cp: no such source file: "" + source_name);
            if (!source_file.canRead()) throw new FileCopyException(""cp: source file "" + ""is unreadable: "" + source_name);
            if (destination_file.exists()) {
                if (destination_file.isFile()) {
                    BufferedReader in = new BufferedReader(new InputStreamReader(System.in));
                    String response;
                    if (!destination_file.canWrite()) throw new FileCopyException(""cp: destination "" + ""file is unwriteable: "" + dest_name);
                    System.out.print(""cp: file "" + dest_name + "" already exists. Overwrite it ? (Y/N): "");
                    System.out.flush();
                    response = in.readLine();
                    if (!response.equals(""Y"") && !response.equals(""y"")) throw new FileCopyException(""cp: copy cancelled."");
                } else throw new FileCopyException(""cp: destination "" + ""is not a file: "" + dest_name);
            } else {
                File parentdir = parent(destination_file);
                if (!parentdir.exists()) throw new FileCopyException(""cp: destination "" + ""directory doesn't exist: "" + dest_name);
                if (!parentdir.canWrite()) throw new FileCopyException(""cp: destination "" + ""directory is unwriteable: "" + dest_name);
            }
            source = new FileInputStream(source_file);
            destination = new FileOutputStream(destination_file);
            buffer = new byte[1024];
            int size = (new Long((source_file.length() / 1024) / 50)).intValue();
            int c = 1;
            int written = 0;
            System.out.print(""cp: "");
            while (true) {
                if (written < 50) {
                    if ((c - 1) == size && size != 0) {
                        System.out.print(""#"");
                        c = 1;
                        written++;
                    } else if (size == 0) {
                        int j = 1;
                        if (c > 1) j = (50 / c) - 50; else j = 50 / c;
                        for (int i = 0; i < j; i++) System.out.print(""#"");
                        written += j;
                    }
                }
                bytes_read = source.read(buffer);
                if (bytes_read == -1) break;
                destination.write(buffer, 0, bytes_read);
                c++;
            }
            System.out.println();
        } finally {
            if (source != null) try {
                source.close();
            } catch (IOException e) {
            }
            if (destination != null) try {
                destination.close();
            } catch (IOException e) {
            }
        }
    }
 <SPLIT>     public static void copyFile(File source, File dest) throws IOException {
        if (!dest.exists()) {
            dest.createNewFile();
        }
        FileChannel from = null;
        FileChannel to = null;
        try {
            from = new FileInputStream(source).getChannel();
            to = new FileOutputStream(dest).getChannel();
            to.transferFrom(from, 0, from.size());
        } finally {
            if (from != null) {
                from.close();
            }
            if (to != null) {
                to.close();
            }
        }
    }
",604,"    public static void CopyFile(String src_type, String destFilenamed) throws IOException {
        src_type = Shell.getUtils().constructPath(src_type);
        File sourcefurl = new File(src_type);
        destFilenamed = Shell.getUtils().constructPath(destFilenamed);
        File destention4source = new File(destFilenamed);
        FileInputStream SOURCE = null;
        FileOutputStream Destribution = null;
        byte[] writer;
        int Bytes_found;
        try {
            if (!source_file.exists() || !source_file.isFile()) throw new FileCopyException(""cp: no such source file: "" + src_type);
            if (!source_file.canRead()) throw new FileCopyException(""cp: source file "" + ""is unreadable: "" + src_type);
            if (destention4source.exists()) {
                if (destention4source.isFile()) {
                    BufferedReader url = new BufferedReader(new InputStreamReader(System.url));
                    String onse;
                    if (!destination_file.canWrite()) throw new FileCopyException(""cp: destination "" + ""file is unwriteable: "" + destFilenamed);
                    System.out.print(""cp: file "" + destFilenamed + "" already exists. Overwrite it ? (Y/N): "");
                    System.out.flush();
                    onse = url.readLine();
                    if (!response.equals(""Y"") && !response.equals(""y"")) throw new FileCopyException(""cp: copy cancelled."");
                } else throw new FileCopyException(""cp: destination "" + ""is not a file: "" + destFilenamed);
            } else {
                File Parentdict = parent(destention4source);
                if (!parentdir.exists()) throw new FileCopyException(""cp: destination "" + ""directory doesn't exist: "" + destFilenamed);
                if (!parentdir.canWrite()) throw new FileCopyException(""cp: destination "" + ""directory is unwriteable: "" + destFilenamed);
            }
            SOURCE = new FileInputStream(sourcefurl);
            Destribution = new FileOutputStream(destention4source);
            writer = new byte[1024];
            int size = (new Long((sourcefurl.length() / 1024) / 50)).intValue();
            int c = 1;
            int written = 0;
            System.out.print(""cp: "");
            while (true) {
                if (written < 50) {
                    if ((c - 1) == size && size != 0) {
                        System.out.print(""#"");
                        c = 1;
                        written++;
                    } else if (size == 0) {
                        int j = 1;
                        if (c > 1) j = (50 / c) - 50; else j = 50 / c;
                        for (int i = 0; i < j; i++) System.out.print(""#"");
                        written += j;
                    }
                }
                Bytes_found = SOURCE.read(writer);
                if (Bytes_found == -1) break;
                Destribution.write(writer, 0, Bytes_found);
                c++;
            }
            System.out.println();
        } finally {
            if (SOURCE != null) try {
                SOURCE.close();
            } catch (IOException e) {
            }
            if (Destribution != null) try {
                Destribution.close();
            } catch (IOException e) {
            }
        }
    }
",LABEL_1,LABEL_1,LABEL_1,-1,"copyFile,source_name,dest_name,source_file,destination_file,source,destination,buffer,bytes_read,in,response,parentdir","copyFile:0.010206818580627441,source_name:0.005242764949798584,dest_name:0.02596759796142578,source_file:0.02002018690109253,destination_file:0.012761831283569336,source:0.01148146390914917,destination:0.023322105407714844,buffer:0.002974092960357666,bytes_read:-0.0030089616775512695,in:0.0019698143005371094,response:1.901388168334961e-05,parentdir:0.012111842632293701,",12,62,0,"dest_name:destFilenamed,destination:Destribution,source_file:sourcefurl,destination_file:destention4source,parentdir:Parentdict,source:SOURCE,copyFile:CopyFile,source_name:src_type,buffer:writer,in:url,response:onse,bytes_read:Bytes_found,",0,Greedy,545,0.1050502379735311,failed,[]
118,"    public void extractResourceToFile(String resourcePath, File dest) {
        InputStream in = getClass().getResourceAsStream(resourcePath);
        try {
            FileOutputStream out = FileUtils.openOutputStream(dest);
            try {
                IOUtils.copy(in, out);
            } finally {
                if (out != null) {
                    out.close();
                }
            }
        } finally {
            if (in != null) {
                in.close();
            }
        }
    }
 <SPLIT>     private static void readAndRewrite(File inFile, File outFile) throws IOException {
        ImageInputStream iis = ImageIO.createImageInputStream(new BufferedInputStream(new FileInputStream(inFile)));
        DcmParser dcmParser = DcmParserFactory.getInstance().newDcmParser(iis);
        Dataset ds = DcmObjectFactory.getInstance().newDataset();
        dcmParser.setDcmHandler(ds.getDcmHandler());
        dcmParser.parseDcmFile(null, Tags.PixelData);
        PixelDataReader pdReader = pdFact.newReader(ds, iis, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());
        System.out.println(""reading "" + inFile + ""..."");
        pdReader.readPixelData(false);
        ImageOutputStream out = ImageIO.createImageOutputStream(new BufferedOutputStream(new FileOutputStream(outFile)));
        DcmEncodeParam dcmEncParam = DcmEncodeParam.IVR_LE;
        ds.writeDataset(out, dcmEncParam);
        ds.writeHeader(out, dcmEncParam, Tags.PixelData, dcmParser.getReadVR(), dcmParser.getReadLength());
        System.out.println(""writing "" + outFile + ""..."");
        PixelDataWriter pdWriter = pdFact.newWriter(pdReader.getPixelDataArray(), false, ds, out, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());
        pdWriter.writePixelData();
        out.flush();
        out.close();
        System.out.println(""done!"");
    }
",84,"    public void extractResourceAsFile(String servicepath, File project) {
        InputStream url = getClass().getResourceAsStream(servicepath);
        try {
            FileOutputStream writer = FileUtils.openOutputStream(project);
            try {
                IOUtils.copy(url, writer);
            } finally {
                if (writer != null) {
                    writer.close();
                }
            }
        } finally {
            if (url != null) {
                url.close();
            }
        }
    }
",LABEL_1,LABEL_1,LABEL_1,-1,"extractResourceToFile,resourcePath,dest,in,out","extractResourceToFile:0.012004733085632324,resourcePath:0.000841677188873291,dest:-0.0035787224769592285,in:-0.05632901191711426,out:-0.04289501905441284,",5,13,0,"extractResourceToFile:extractResourceAsFile,resourcePath:servicepath,dest:project,out:writer,in:url,",0,Greedy,211,0.031164451440175375,failed,[]
119,"    private static void sendExceptionToServer(String server, Throwable ex, String config, String prob) {
        try {
            StringBuilder dataSB = new StringBuilder();
            dataSB.append(URLEncoder.encode(""secret"", ""UTF-8""));
            dataSB.append('=');
            dataSB.append(URLEncoder.encode(""badsecurity"", ""UTF-8""));
            dataSB.append('&');
            dataSB.append(URLEncoder.encode(""version"", ""UTF-8""));
            dataSB.append('=');
            dataSB.append(URLEncoder.encode(BuildInfo.revisionNumber, ""UTF-8""));
            dataSB.append('&');
            dataSB.append(URLEncoder.encode(""os"", ""UTF-8""));
            dataSB.append('=');
            dataSB.append(URLEncoder.encode(System.getProperty(""os.name"") + "" "" + System.getProperty(""os.version""), ""UTF-8""));
            dataSB.append('&');
            dataSB.append(URLEncoder.encode(""user"", ""UTF-8""));
            dataSB.append('=');
            dataSB.append(URLEncoder.encode(System.getProperty(""user.name""), ""UTF-8""));
            dataSB.append('&');
            dataSB.append(URLEncoder.encode(""msg"", ""UTF-8""));
            dataSB.append('=');
            dataSB.append(URLEncoder.encode(ex.getMessage(), ""UTF-8""));
            ByteArrayOutputStream trace = new ByteArrayOutputStream();
            ex.printStackTrace(new PrintStream(trace));
            dataSB.append('&');
            dataSB.append(URLEncoder.encode(""trace"", ""UTF-8""));
            dataSB.append('=');
            dataSB.append(URLEncoder.encode(trace.toString(), ""UTF-8""));
            if (config != null) {
                dataSB.append('&');
                dataSB.append(URLEncoder.encode(""config"", ""UTF-8""));
                dataSB.append('=');
                dataSB.append(URLEncoder.encode(config, ""UTF-8""));
            }
            if (prob != null) {
                dataSB.append('&');
                dataSB.append(URLEncoder.encode(""problem"", ""UTF-8""));
                dataSB.append('=');
                dataSB.append(URLEncoder.encode(prob, ""UTF-8""));
            }
            URL url = new URL(errorServerURL);
            URLConnection conn = url.openConnection();
            conn.setDoOutput(true);
            OutputStreamWriter wr = new OutputStreamWriter(conn.getOutputStream());
            wr.write(dataSB.toString());
            wr.flush();
            BufferedReader rd = new BufferedReader(new InputStreamReader(conn.getInputStream()));
            String response = null;
            String line = null;
            while ((line = rd.readLine()) != null) {
                if (response == null) response = line; else System.out.println(line);
            }
            wr.close();
            rd.close();
            if (response.equals(""success"")) System.out.println(""Exception sent to maRla development team""); else System.out.println(""Unable to send exception to development team: "" + response);
        } catch (IOException ex2) {
            System.out.println(""Unable to send exception to development team: "" + ex2.getMessage());
        }
    }
 <SPLIT>     public void Load(String fname) throws Exception {
        File f = null;
        try {
            if ("""".equals(fname) || fname == null) throw new Exception();
            System.out.println(""Loading mapfile "" + fname);
        } catch (Exception e) {
            throw new Exception(""File not found"");
        }
        aType = null;
        fieldtype.clear();
        creatures.clear();
        aElement = new String("""");
        content = null;
        Ax = -1;
        Ay = -1;
        aTemplate = -1;
        SAXParserFactory factory = SAXParserFactory.newInstance();
        data_read = 0;
        URL url = this.game.mainClass.getClassLoader().getResource(fname);
        if (url == null) {
            throw new Exception(""Can't load map from : "" + fname);
        }
        try {
            SAXParser parser = factory.newSAXParser();
            parser.parse(url.openStream(), this);
        } catch (Exception e) {
            System.out.println(""Can't open XML : "" + e);
        }
        for (int i = 0; i < fieldtype.size(); i++) {
            System.out.println((MapField) fieldtype.get(i));
        }
        game.player.setpos(start_x, start_y);
        System.out.println(""Player starting position set"");
        start_x = -1;
        start_y = -1;
        System.out.println(""Map \"""" + fname + ""\"" loaded"");
    }
",672,"    private static void sendExceptionAsService(String root, Throwable exit, String file, String probs) {
        try {
            StringBuilder errorSB = new StringBuilder();
            errorSB.append(URLEncoder.encode(""secret"", ""UTF-8""));
            errorSB.append('=');
            errorSB.append(URLEncoder.encode(""badsecurity"", ""UTF-8""));
            errorSB.append('&');
            errorSB.append(URLEncoder.encode(""version"", ""UTF-8""));
            errorSB.append('=');
            errorSB.append(URLEncoder.encode(BuildInfo.revisionNumber, ""UTF-8""));
            errorSB.append('&');
            errorSB.append(URLEncoder.encode(""os"", ""UTF-8""));
            errorSB.append('=');
            errorSB.append(URLEncoder.encode(System.getProperty(""os.name"") + "" "" + System.getProperty(""os.version""), ""UTF-8""));
            errorSB.append('&');
            errorSB.append(URLEncoder.encode(""user"", ""UTF-8""));
            errorSB.append('=');
            errorSB.append(URLEncoder.encode(System.getProperty(""user.name""), ""UTF-8""));
            errorSB.append('&');
            errorSB.append(URLEncoder.encode(""msg"", ""UTF-8""));
            errorSB.append('=');
            errorSB.append(URLEncoder.encode(exit.getMessage(), ""UTF-8""));
            ByteArrayOutputStream temp = new ByteArrayOutputStream();
            exit.printStackTrace(new PrintStream(temp));
            errorSB.append('&');
            errorSB.append(URLEncoder.encode(""trace"", ""UTF-8""));
            errorSB.append('=');
            errorSB.append(URLEncoder.encode(temp.toString(), ""UTF-8""));
            if (file != null) {
                errorSB.append('&');
                errorSB.append(URLEncoder.encode(""config"", ""UTF-8""));
                errorSB.append('=');
                errorSB.append(URLEncoder.encode(file, ""UTF-8""));
            }
            if (probs != null) {
                errorSB.append('&');
                errorSB.append(URLEncoder.encode(""problem"", ""UTF-8""));
                errorSB.append('=');
                errorSB.append(URLEncoder.encode(probs, ""UTF-8""));
            }
            URL url = new URL(errorServerURL);
            URLConnection conn = url.openConnection();
            conn.setDoOutput(true);
            OutputStreamWriter wr = new OutputStreamWriter(conn.getOutputStream());
            wr.write(errorSB.toString());
            wr.flush();
            BufferedReader rd = new BufferedReader(new InputStreamReader(conn.getInputStream()));
            String response = null;
            String line = null;
            while ((line = rd.readLine()) != null) {
                if (response == null) response = line; else System.out.println(line);
            }
            wr.close();
            rd.close();
            if (response.equals(""success"")) System.out.println(""Exception sent to maRla development team""); else System.out.println(""Unable to send exception to development team: "" + response);
        } catch (IOException ex2) {
            System.out.println(""Unable to send exception to development team: "" + ex2.getMessage());
        }
    }
",LABEL_0,LABEL_0,LABEL_1,1,"sendExceptionToServer,server,ex,config,prob,dataSB,trace","sendExceptionToServer:0.0009489655494689941,server:-0.00035125017166137695,ex:-0.0003979802131652832,config:-0.00013446807861328125,prob:-0.000541985034942627,dataSB:-0.0027517080307006836,trace:0.0003415346145629883,",7,49,0,"sendExceptionToServer:sendExceptionAsService,trace:temp,config:file,server:root,ex:exit,prob:probs,dataSB:errorSB,",0,Greedy,378,0.07233821551005046,replace,[]
120,"    public int updateuser(User u) {
        int i = 0;
        Connection conn = null;
        PreparedStatement pm = null;
        try {
            conn = Pool.getConnection();
            conn.setAutoCommit(false);
            pm = conn.prepareStatement(""update user set username=?,passwd=?,existstate=?,management=? where userid=?"");
            pm.setString(1, u.getUsername());
            pm.setString(2, u.getPasswd());
            pm.setInt(3, u.getExiststate());
            pm.setInt(4, u.getManagement());
            pm.setString(5, u.getUserid());
            i = pm.executeUpdate();
            conn.commit();
            Pool.close(pm);
            Pool.close(conn);
        } catch (Exception e) {
            e.printStackTrace();
            try {
                conn.rollback();
            } catch (SQLException e1) {
                e1.printStackTrace();
            }
            Pool.close(pm);
            Pool.close(conn);
        } finally {
            Pool.close(pm);
            Pool.close(conn);
        }
        return i;
    }
 <SPLIT>     public void add(String language, String tag, String root, String surface) throws FidoDatabaseException, MorphologyTagNotFoundException {
        try {
            Connection conn = null;
            Statement stmt = null;
            try {
                conn = FidoDataSource.getConnection();
                conn.setAutoCommit(false);
                stmt = conn.createStatement();
                if (containsTag(stmt, tag) == false) throw new MorphologyTagNotFoundException(tag);
                if (isRuleUnique(stmt, language, tag, root, surface) == false) return;
                int row;
                if (root.equals(""*"") == true) row = getAppendRowForTag(stmt, language, tag); else if (root.indexOf('*') == -1) row = getFirstRowForTag(stmt, language, tag); else row = getFirstRegularFormForTag(stmt, language, tag);
                boolean use = determineRecognitionUse(root, surface);
                bumpAllRowsDown(stmt, language, tag, row);
                String sql = ""insert into LanguageMorphologies (LanguageName, Rank, Root, Surface, MorphologyTag, Used) "" + ""values ('"" + language + ""', "" + row + "", '"" + root + ""', '"" + surface + ""', '"" + tag + ""', "";
                if (use == true) sql = sql + ""TRUE)""; else sql = sql + ""FALSE)"";
                stmt.executeUpdate(sql);
                conn.commit();
            } catch (SQLException e) {
                if (conn != null) conn.rollback();
                throw e;
            } finally {
                if (stmt != null) stmt.close();
                if (conn != null) conn.close();
            }
        } catch (SQLException e) {
            throw new FidoDatabaseException(e);
        }
    }
",216,,LABEL_1,LABEL_0,,-4,"updateuser,u,i,conn,pm",,,,0,,0,Greedy,1,0.0005246718724568685,,[]
121,"    public static void copy(File in, File out) throws IOException {
        if (in.exists() && in != null && out != null) {
            if (!out.exists()) {
                if (in.isDirectory()) {
                    out.mkdirs();
                } else {
                    out.createNewFile();
                }
            }
            String source = in.isDirectory() ? ""directory"" : ""file"";
            String target = out.isDirectory() ? ""directory"" : ""file"";
            if (!source.equals(target)) {
                throw new IOException(""Can't duplicate "" + source + "" as "" + target);
            } else {
                if (source.equals(""directory"")) {
                    File[] files = in.listFiles();
                    for (File file : files) {
                        copy(file, new File(out, file.getName()));
                    }
                } else {
                    FileChannel inCh = new FileInputStream(in).getChannel();
                    FileChannel outCh = new FileOutputStream(out).getChannel();
                    inCh.transferTo(0, inCh.size(), outCh);
                }
            }
        }
    }
 <SPLIT>     private static void doCopyFile(File srcFile, File destFile, boolean preserveFileDate) throws IOException {
        if (destFile.exists() && destFile.isDirectory()) {
            throw new IOException(""Destination '"" + destFile + ""' exists but is a directory"");
        }
        FileChannel input = new FileInputStream(srcFile).getChannel();
        try {
            FileChannel output = new FileOutputStream(destFile).getChannel();
            try {
                output.transferFrom(input, 0, input.size());
            } finally {
                IOUtil.closeQuietly(output);
            }
        } finally {
            IOUtil.closeQuietly(input);
        }
        if (srcFile.length() != destFile.length()) {
            throw new IOException(""Failed to copy full contents from '"" + srcFile + ""' to '"" + destFile + ""'"");
        }
        if (preserveFileDate) {
            destFile.setLastModified(srcFile.lastModified());
        }
    }
",230,"    public static void upload(File url, File out) throws IOException {
        if (url.exists() && url != null && out != null) {
            if (!out.exists()) {
                if (url.isDirectory()) {
                    out.mkdirs();
                } else {
                    out.createNewFile();
                }
            }
            String source = url.isDirectory() ? ""directory"" : ""file"";
            String target = out.isDirectory() ? ""directory"" : ""file"";
            if (!source.equals(target)) {
                throw new IOException(""Can't duplicate "" + source + "" as "" + target);
            } else {
                if (source.equals(""directory"")) {
                    File[] files = url.listFiles();
                    for (File file : files) {
                        upload(file, new File(out, file.getName()));
                    }
                } else {
                    FileChannel inCh = new FileInputStream(url).getChannel();
                    FileChannel outCh = new FileOutputStream(out).getChannel();
                    inCh.transferTo(0, inCh.size(), outCh);
                }
            }
        }
    }
",LABEL_1,LABEL_1,LABEL_0,1,"copy,in,out,source,target,files,file,inCh,outCh","copy:0.037856101989746094,in:0.014294147491455078,out:0.0007071495056152344,source:-0.0025715231895446777,target:0.005877673625946045,files:-0.007267117500305176,file:-0.0037149786949157715,inCh:-0.00431370735168457,outCh:0.002341628074645996,",2,9,0,"copy:upload,in:url,",0,Greedy,123,0.018748935063680014,replace,[]
122,"    @Override
    public void Start() {
        try {
            Enumeration<URL> resources = Configurator.class.getClassLoader().getResources(IOCContainer.GetApplicationName() + "".config"");
            while (resources.hasMoreElements()) {
                URL url = resources.nextElement();
                if (Logger.logger.isDebugEnabled()) {
                    Logger.logger.debug(""Loading '"" + url + ""'"");
                }
                JSONValue configFileContents = JSONValue.Decode(url.openStream(), url.toString());
                if (configFileContents instanceof JSONObjectValue) {
                    for (Configurable configurable : IOCContainer.LookupAll(Configurable.class)) {
                        JSONValue jsonData = ((JSONObjectValue) configFileContents).GetProperty(configurable.GetConfigSectionName());
                        if (jsonData != null) {
                            if (Logger.logger.isDebugEnabled()) {
                                Logger.logger.debug(""Configurging "" + configurable.getClass() + "" with '"" + jsonData.Encode());
                            }
                            try {
                                configurable.Configure(jsonData);
                            } catch (Throwable th1) {
                                Logger.logger.error(""Caught throwable while configuring "" + configurable.getClass() + "":"" + th1.getMessage() + "". IGNORED."", th1);
                                Logger.logger.error(""[Continued]. Config Data was:"" + jsonData.Encode());
                            }
                        }
                    }
                } else {
                    Logger.logger.error(""'"" + url + ""' does not contain a json object. Skipping and looking for other applciation.config files in classpath ..."");
                }
            }
        } catch (Throwable th) {
            throw new RuntimeException(""Exception while attempting to load application.config:'"" + th.getMessage() + ""'"", th);
        }
    }
 <SPLIT>     private void handleURL() throws JspException, IOException {
        Map in_map = prepareInputMap();
        String in_str = JSONTransformer.serialize(in_map);
        byte[] input = in_str.getBytes(""UTF-8"");
        HttpURLConnection conn = (HttpURLConnection) new URL(url).openConnection();
        conn.setRequestMethod(""POST"");
        conn.setDoOutput(true);
        conn.setDoInput(true);
        conn.setUseCaches(false);
        conn.connect();
        OutputStream os = conn.getOutputStream();
        os.write(input);
        os.close();
        InputStream is = conn.getInputStream();
        InputStreamReader reader = new InputStreamReader(is, ""UTF-8"");
        StringBuffer s_buf = new StringBuffer();
        char[] tmp_buf = new char[1024];
        int count;
        while ((count = reader.read(tmp_buf)) != -1) {
            if (count == 0) continue;
            s_buf.append(tmp_buf, 0, count);
        }
        reader.close();
        Map out_map = null;
        try {
            out_map = JSONTransformer.parseObject(s_buf.toString());
        } catch (ParseException e) {
            returnErrorResult(e.getMessage());
        }
        handleResultMap(out_map);
    }
",313,"    @Override
    public void Process() {
        try {
            Enumeration<URL> lines = Configurator.class.getClassLoader().getResources(IOCContainer.GetApplicationName() + "".config"");
            while (lines.hasMoreElements()) {
                URL path = lines.nextElement();
                if (Logger.logger.isDebugEnabled()) {
                    Logger.logger.debug(""Loading '"" + path + ""'"");
                }
                JSONValue logFileContents = JSONValue.Decode(path.openStream(), path.toString());
                if (logFileContents instanceof JSONObjectValue) {
                    for (Configurable figur : IOCContainer.LookupAll(Configurable.class)) {
                        JSONValue sonVar = ((JSONObjectValue) logFileContents).GetProperty(figur.GetConfigSectionName());
                        if (sonVar != null) {
                            if (Logger.logger.isDebugEnabled()) {
                                Logger.logger.debug(""Configurging "" + figur.getClass() + "" with '"" + sonVar.Encode());
                            }
                            try {
                                figur.Configure(sonVar);
                            } catch (Throwable th1) {
                                Logger.logger.error(""Caught throwable while configuring "" + figur.getClass() + "":"" + th1.getMessage() + "". IGNORED."", th1);
                                Logger.logger.error(""[Continued]. Config Data was:"" + sonVar.Encode());
                            }
                        }
                    }
                } else {
                    Logger.logger.error(""'"" + path + ""' does not contain a json object. Skipping and looking for other applciation.config files in classpath ..."");
                }
            }
        } catch (Throwable th) {
            throw new RuntimeException(""Exception while attempting to load application.config:'"" + th.getMessage() + ""'"", th);
        }
    }
",LABEL_0,LABEL_0,LABEL_0,-1,"Start,resources,url,configFileContents,configurable,jsonData","Start:-0.0036398768424987793,resources:0.012879371643066406,url:-0.02181267738342285,configFileContents:-0.0054438114166259766,configurable:-0.029360949993133545,jsonData:-0.008322298526763916,",6,22,0,"resources:lines,Start:Process,configFileContents:logFileContents,jsonData:sonVar,url:path,configurable:figur,",0,Greedy,306,0.05194257497787476,failed,[]
123,"    static void populateResources() throws BasicException {
        try {
            List<URL> templates = DatabaseValidator.listResources(""/net/adrianromero/templates/"" + Locale.getDefault().getLanguage());
            if (templates.size() == 0) {
                templates = DatabaseValidator.listResources(""/net/adrianromero/templates/en"");
            }
            for (URL url : templates) {
                String fileName = url.getFile();
                fileName = fileName.substring(fileName.lastIndexOf('/') + 1);
                if (fileName.endsWith("".xml"") || fileName.endsWith("".txt"")) {
                    Resource templateResource = new Resource(fileName.substring(0, fileName.length() - 4));
                    InputStream is = url.openStream();
                    StringBuffer strBuff = new StringBuffer();
                    BufferedReader br = new BufferedReader(new InputStreamReader(is));
                    String str;
                    while ((str = br.readLine()) != null) {
                        strBuff.append(str + ""\n"");
                    }
                    templateResource.setText(strBuff.toString());
                    templateResource.save();
                }
            }
        } catch (MalformedURLException e1) {
            logger.error(""Unable to load templates"", e1);
        } catch (IOException e1) {
            logger.error(""Unable to load templates"", e1);
        }
        String[][] images = new String[][] { { ""default.user"", ""yast_sysadmin.png"" }, { ""default.product"", ""colorize.png"" }, { ""Window.Logo"", ""windowlogo.png"" }, { ""Image.Backarrow"", ""3backarrow.png"" } };
        for (int i = 0; i < images.length; i++) {
            Image img = new Image();
            img.setBufferedImage(ImageUtils.readImage(DatabaseValidator.class.getResource(""/net/adrianromero/images/"" + images[i][1])));
            img.save();
            Property imgProperty = new Property(images[i][0]);
            imgProperty.setValue("""" + img.getId());
            imgProperty.save();
        }
    }
 <SPLIT>     public static String getPagina(String strurl) {
        String resp = """";
        Authenticator.setDefault(new Autenticador());
        try {
            URL url = new URL(strurl);
            BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));
            String str;
            while ((str = in.readLine()) != null) {
                resp += str;
            }
            in.close();
        } catch (MalformedURLException e) {
            resp = e.toString();
        } catch (IOException e) {
            resp = e.toString();
        } catch (Exception e) {
            resp = e.toString();
        }
        return resp;
    }
",403,,LABEL_1,LABEL_0,,-4,"populateResources,templates,url,fileName,templateResource,is,strBuff,br,str,images,i,img,imgProperty",,,,0,,0,Greedy,1,0.000597071647644043,,[]
124,"    public static Properties load(String propsName) {
        Properties props = new Properties();
        URL url = ClassLoader.getSystemResource(propsName);
        try {
            props.load(url.openStream());
        } catch (IOException e) {
            e.printStackTrace();
        }
        return props;
    }
 <SPLIT>     @SuppressWarnings(""unchecked"")
    public static void main(String[] args) throws Exception {
        if (args.length != 2) {
            System.out.println(""usage: "" + EvaluatorHelper.class.getName() + "" <output> <data set file>"");
            System.exit(1);
        }
        Helper helper = Helper.getHelper(args[1]);
        Dataset dataset = helper.read(args[1]);
        ZipFile zip = new ZipFile(new File(args[0]), ZipFile.OPEN_READ);
        Enumeration entries = zip.entries();
        Unit<?>[] performance = new Unit<?>[LIMIT];
        int index = 0;
        while (entries.hasMoreElements()) {
            ZipEntry entry = (ZipEntry) entries.nextElement();
            if (entry.getName().endsWith("".out"")) {
                File temp = File.createTempFile(""PARSER"", "".zip"");
                temp.deleteOnExit();
                PrintStream writer = new PrintStream(new FileOutputStream(temp));
                BufferedInputStream reader = new BufferedInputStream(zip.getInputStream(entry));
                byte[] buffer = new byte[4096];
                int read = -1;
                while ((read = reader.read(buffer)) != -1) {
                    writer.write(buffer, 0, read);
                }
                writer.close();
                reader.close();
                BufferedReader outfile = new BufferedReader(new FileReader(temp));
                String line = null;
                RuleParser parser = new RuleParser();
                ProbabilisticRuleList list = new ProbabilisticRuleList();
                while ((line = outfile.readLine()) != null) {
                    if (line.startsWith(""IF"")) {
                        ProbabilisticRule rule = new ProbabilisticRule(dataset.getMetadata());
                        list.add(fill(dataset.getMetadata(), rule, parser.parse(line)));
                    }
                }
                outfile.close();
                PooledPRCurveMeasure measure = new PooledPRCurveMeasure();
                performance[index] = measure.evaluate(dataset, list);
                System.out.println(entry.getName() + "": "" + performance[index]);
                index++;
                if (index >= LIMIT) {
                    break;
                }
            }
        }
        System.out.println(UnitAveragingMode.get(Double.class).average(performance));
    }
",59,"    public static Properties load(String propsName) {
        Properties props = new Properties();
        URL file = ClassLoader.getSystemResource(propsName);
        try {
            props.load(file.openStream());
        } catch (IOException e) {
            e.printStackTrace();
        }
        return props;
    }
",LABEL_0,LABEL_0,LABEL_1,1,"load,propsName,props,url","load:-1.1920928955078125e-06,propsName:0.0,props:3.5762786865234375e-07,url:1.1920928955078125e-06,",1,2,0,"url:file,",0,Greedy,55,0.00846117337544759,replace,[]
125,"    String runScript(String scriptName) {
        String data = """";
        try {
            URL url = new URL(getCodeBase().toString() + scriptName);
            InputStream in = url.openStream();
            BufferedInputStream buffIn = new BufferedInputStream(in);
            do {
                int temp = buffIn.read();
                if (temp == -1) break;
                data = data + (char) temp;
            } while (true);
        } catch (Exception e) {
            data = ""error!"";
        }
        return data;
    }
 <SPLIT>     public void open(String openStr) throws IOException {
        String commProtocol = ""comm:"";
        String rxtxProtocol = ""rxtx:"";
        String netProtocol = ""net:"";
        if (openStr.startsWith(commProtocol)) {
            CommConnection commConnection = CommConnection.open(openStr.substring(commProtocol.length()));
            this.setInputStream(commConnection.getInputStream());
            this.setOutputStream(commConnection.getOutputStream());
        } else if (openStr.startsWith(rxtxProtocol)) {
            RXTXConnection rxtxConnection = RXTXConnection.open(openStr.substring(commProtocol.length()));
            this.setInputStream(rxtxConnection.getInputStream());
            this.setOutputStream(rxtxConnection.getOutputStream());
        } else if (openStr.startsWith(netProtocol)) {
            SocketConnection socketConn = SocketConnection.open(openStr.substring(netProtocol.length()));
            this.setInputStream(socketConn.getInputStream());
            this.setOutputStream(socketConn.getOutputStream());
        } else {
            URL url = new URL(openStr);
            URLConnection urlConn = url.openConnection();
            this.setInputStream(urlConn.getInputStream());
            try {
                this.setOutputStream(urlConn.getOutputStream());
            } catch (UnknownServiceException e) {
            }
        }
    }
",104,"    String execCode(String fileFile) {
        String out = """";
        try {
            URL image = new URL(getCodeBase().toString() + fileFile);
            InputStream din = image.openStream();
            BufferedInputStream Buffin = new BufferedInputStream(din);
            do {
                int test = Buffin.read();
                if (test == -1) break;
                out = out + (char) test;
            } while (true);
        } catch (Exception e) {
            out = ""error!"";
        }
        return out;
    }
",LABEL_0,LABEL_0,LABEL_0,-1,"runScript,scriptName,data,url,in,buffIn,temp","runScript:0.006446182727813721,scriptName:0.0037029385566711426,data:0.0015812516212463379,url:0.008053123950958252,in:0.0004993081092834473,buffIn:-0.0031810998916625977,temp:-4.988908767700195e-05,",7,17,0,"url:image,runScript:execCode,scriptName:fileFile,data:out,in:din,temp:test,buffIn:Buffin,",0,Greedy,269,0.03993089199066162,failed,[]
126,"    public static void copyFile(File srcFile, File destFile) throws IOException {
        if (!(srcFile.exists() && srcFile.isFile())) throw new IllegalArgumentException(""Source file doesn't exist: "" + srcFile.getAbsolutePath());
        if (destFile.exists() && destFile.isDirectory()) throw new IllegalArgumentException(""Destination file is directory: "" + destFile.getAbsolutePath());
        FileInputStream in = new FileInputStream(srcFile);
        FileOutputStream out = new FileOutputStream(destFile);
        byte[] buffer = new byte[4096];
        int no = 0;
        try {
            while ((no = in.read(buffer)) != -1) out.write(buffer, 0, no);
        } finally {
            in.close();
            out.close();
        }
    }
 <SPLIT>     public void listen() {
        String url = ""http://"" + host + "":"" + LISTEN_PORT;
        HttpURLConnection conn = null;
        while (true) {
            try {
                conn = (HttpURLConnection) (new URL(url).openConnection());
            } catch (Exception e) {
                error(""Could not connect to "" + url + ""."", e);
                return;
            }
            BufferedInputStream in = null;
            try {
                conn.connect();
                in = new BufferedInputStream(conn.getInputStream(), LISTEN_BUFFER);
                event(""Connected to stream at "" + url + ""."");
            } catch (Exception e) {
                error(""Could not get stream from "" + url + ""."", e);
                return;
            }
            try {
                byte[] data = new byte[LISTEN_BUFFER];
                for (int i = 0; i < delay; i++) {
                    in.read(data);
                }
            } catch (Exception e) {
                error(""Stream unexpectedly quit from "" + url + ""."", e);
                return;
            }
        }
    }
",156,"    public static void transferfile(File srcDir, File endPath) throws IOException {
        if (!(srcDir.exists() && srcDir.isFile())) throw new IllegalArgumentException(""Source file doesn't exist: "" + srcDir.getAbsolutePath());
        if (endPath.exists() && endPath.isDirectory()) throw new IllegalArgumentException(""Destination file is directory: "" + endPath.getAbsolutePath());
        FileInputStream read = new FileInputStream(srcDir);
        FileOutputStream output = new FileOutputStream(endPath);
        byte[] null = new byte[4096];
        int nothing = 0;
        try {
            while ((nothing = read.read(null)) != -1) output.write(null, 0, nothing);
        } finally {
            read.close();
            output.close();
        }
    }
",LABEL_0,LABEL_0,LABEL_0,-1,"copyFile,srcFile,destFile,in,out,buffer,no","copyFile:0.027403593063354492,srcFile:-0.02292841672897339,destFile:-0.03529268503189087,in:-0.014225482940673828,out:0.01805281639099121,buffer:-0.013295412063598633,no:-0.0005797147750854492,",7,23,0,"copyFile:transferfile,out:output,no:nothing,buffer:null,in:read,srcFile:srcDir,destFile:endPath,",0,Greedy,306,0.04560837745666504,failed,[]
127,"    public FileAttribute getAttribute(URL url) throws VFSException {
        try {
            con = (HttpURLConnection) url.openConnection();
            con.setInstanceFollowRedirects(false);
            int response = con.getResponseCode();
            if (response >= 400) {
                return new DefaultFileAttribute(false, 0, null, FileType.NOT_EXISTS);
            }
            boolean redirect = (response >= 300 && response <= 399);
            if (redirect) {
                String location = con.getHeaderField(""Location"");
                return getAttribute(new URL(url, location));
            }
            return new DefaultFileAttribute(true, con.getContentLength(), new Date(con.getLastModified()), url.toString().endsWith(""/"") ? FileType.DIRECTORY : FileType.FILE);
        } catch (MalformedURLException e) {
            e.printStackTrace();
            throw new WrongPathException(file.getAbsolutePath());
        } catch (IOException e) {
            throw new VFSIOException(""IOException opening "" + file.getAbsolutePath(), e);
        } finally {
            if (con != null) {
                con.disconnect();
            }
        }
    }
 <SPLIT>     public int exists(String fileToCheck) throws IOException {
        FTPClient ftp = new FTPClient();
        int found = 0;
        try {
            int reply = 0;
            ftp.connect(this.endpointURL, this.endpointPort);
            reply = ftp.getReplyCode();
            if (!FTPReply.isPositiveCompletion(reply)) {
                ftp.disconnect();
                throw new IOException(""Ftp exists server refused connection."");
            }
            if (!ftp.login(""anonymous"", """")) {
                ftp.logout();
                throw new IOException(""FTP: server wrong passwd"");
            }
            ftp.enterLocalPassiveMode();
            if (ftp.listNames(fileToCheck) != null) {
                found = 1;
            }
            ftp.logout();
        } catch (Exception e) {
            throw new IOException(e.getMessage());
        }
        return found;
    }
",217,"    public FileAttribute setAttributes(URL Url) throws VFSException {
        try {
            login = (HttpURLConnection) Url.openConnection();
            login.setInstanceFollowRedirects(false);
            int output = login.getResponseCode();
            if (output >= 400) {
                return new DefaultFileAttribute(false, 0, null, FileType.NOT_EXISTS);
            }
            boolean redirect = (output >= 300 && output <= 399);
            if (redirect) {
                String filename = login.getHeaderField(""Location"");
                return setAttributes(new URL(Url, filename));
            }
            return new DefaultFileAttribute(true, login.getContentLength(), new Date(login.getLastModified()), Url.toString().endsWith(""/"") ? FileType.DIRECTORY : FileType.FILE);
        } catch (MalformedURLException e) {
            e.printStackTrace();
            throw new WrongPathException(file.getAbsolutePath());
        } catch (IOException e) {
            throw new VFSIOException(""IOException opening "" + file.getAbsolutePath(), e);
        } finally {
            if (login != null) {
                login.disconnect();
            }
        }
    }
",LABEL_0,LABEL_0,LABEL_0,-1,"getAttribute,url,con,response,redirect,location","getAttribute:-3.6597251892089844e-05,url:-1.3589859008789062e-05,con:-2.0325183868408203e-05,response:7.420778274536133e-05,redirect:1.1801719665527344e-05,location:6.198883056640625e-06,",5,20,0,"response:output,redirect:redirect,location:filename,url:Url,con:login,getAttribute:setAttributes,",0,Greedy,267,0.04171080191930135,failed,[]
128,"    public static void doVersionCheck(View view) {
        view.showWaitCursor();
        try {
            URL url = new URL(jEdit.getProperty(""version-check.url""));
            InputStream in = url.openStream();
            BufferedReader bin = new BufferedReader(new InputStreamReader(in));
            String line;
            String version = null;
            String build = null;
            while ((line = bin.readLine()) != null) {
                if (line.startsWith("".version"")) version = line.substring(8).trim(); else if (line.startsWith("".build"")) build = line.substring(6).trim();
            }
            bin.close();
            if (version != null && build != null) {
                if (jEdit.getBuild().compareTo(build) < 0) newVersionAvailable(view, version, url); else {
                    GUIUtilities.message(view, ""version-check"" + "".up-to-date"", new String[0]);
                }
            }
        } catch (IOException e) {
            String[] args = { jEdit.getProperty(""version-check.url""), e.toString() };
            GUIUtilities.error(view, ""read-error"", args);
        }
        view.hideWaitCursor();
    }
 <SPLIT>     public static String fetchUrl(String urlString) {
        try {
            URL url = new URL(urlString);
            BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream()));
            String line = null;
            StringBuilder builder = new StringBuilder();
            while ((line = reader.readLine()) != null) {
                builder.append(line);
            }
            reader.close();
            return builder.toString();
        } catch (MalformedURLException e) {
        } catch (IOException e) {
        }
        return """";
    }
",250,,LABEL_1,LABEL_0,,-4,"doVersionCheck,view,url,in,bin,line,version,build",,,,0,,0,Greedy,1,0.00040785868962605796,,[]
129,"    @Test
    public void test() throws Exception {
        InputStream is = this.getClass().getResourceAsStream(""originAndDestination.xml"");
        ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
        IOUtils.copy(is, byteArrayOutputStream);
        TrafficModelDefinition def = MDFReader.read(byteArrayOutputStream.toByteArray());
        TrafficSimulationEngine se = new TrafficSimulationEngine();
        se.init(def);
        int linkId = 2;
        int segmentId = 0;
        Map<Integer, Set<Integer>> linkSegments = new HashMap<Integer, Set<Integer>>();
        Set<Integer> segments = new HashSet<Integer>();
        segments.add(segmentId);
        linkSegments.put(linkId, segments);
        FrameProperties frameProperties = new FrameProperties(linkSegments, new HashSet<Integer>());
        se.setFrameProperties(frameProperties);
        for (float time = 0; time < 60 * 10; time += 0.1f) {
            se.step(0.1f);
            for (RoadObject vehicle : se.getDynamicObjects()) {
                System.out.println(time + "": X="" + vehicle.getPosition() + ""\tV="" + vehicle.getSpeed());
            }
        }
    }
 <SPLIT>     public static final synchronized String hash(String data) {
        if (digest == null) {
            try {
                digest = MessageDigest.getInstance(""MD5"");
            } catch (NoSuchAlgorithmException nsae) {
                System.err.println(""Failed to load the MD5 MessageDigest. "" + ""unable to function normally."");
                nsae.printStackTrace();
            }
        }
        digest.update(data.getBytes());
        return encodeHex(digest.digest());
    }
",232,"    @Test
    public void test() throws Exception {
        InputStream id = this.getClass().getResourceAsStream(""originAndDestination.xml"");
        ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
        IOUtils.copy(id, byteArrayOutputStream);
        TrafficModelDefinition md = MDFReader.read(byteArrayOutputStream.toByteArray());
        TrafficSimulationEngine se = new TrafficSimulationEngine();
        se.init(md);
        int lineById = 2;
        int  segmentsID = 0;
        Map<Integer, Set<Integer>> linkSegments = new HashMap<Integer, Set<Integer>>();
        Set<Integer> pegements = new HashSet<Integer>();
        pegements.add( segmentsID);
        linkSegments.put(lineById, pegements);
        FrameProperties frameProperties = new FrameProperties(linkSegments, new HashSet<Integer>());
        se.setFrameProperties(frameProperties);
        for (float data = 0; data < 60 * 10; data += 0.1f) {
            se.step(0.1f);
            for (RoadObject Vehicle : se.getDynamicObjects()) {
                System.out.println(data + "": X="" + Vehicle.getPosition() + ""\tV="" + Vehicle.getSpeed());
            }
        }
    }
",LABEL_0,LABEL_0,LABEL_0,-1,"test,is,byteArrayOutputStream,def,se,linkId,segmentId,linkSegments,segments,frameProperties,time,vehicle","test:0.011898994445800781,is:-0.0012731552124023438,byteArrayOutputStream:0.023087918758392334,def:0.0012799501419067383,se:0.004366517066955566,linkId:0.00030344724655151367,segmentId:0.0010905861854553223,linkSegments:0.008682727813720703,segments:-0.0004538297653198242,frameProperties:0.008084535598754883,time:-0.005247235298156738,vehicle:-0.0022615790367126465,",7,18,0,"byteArrayOutputStream:byteArrayOutputStream,test:test,linkSegments:linkSegments,frameProperties:frameProperties,se:se,def:md,segmentId: segmentsID,linkId:lineById,segments:pegements,is:id,vehicle:Vehicle,time:data,",0,Greedy,491,0.0761301318804423,failed,[]
130,"    private static void readAndRewrite(File inFile, File outFile) throws IOException {
        ImageInputStream iis = ImageIO.createImageInputStream(new BufferedInputStream(new FileInputStream(inFile)));
        DcmParser dcmParser = DcmParserFactory.getInstance().newDcmParser(iis);
        Dataset ds = DcmObjectFactory.getInstance().newDataset();
        dcmParser.setDcmHandler(ds.getDcmHandler());
        dcmParser.parseDcmFile(null, Tags.PixelData);
        PixelDataReader pdReader = pdFact.newReader(ds, iis, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());
        System.out.println(""reading "" + inFile + ""..."");
        pdReader.readPixelData(false);
        ImageOutputStream out = ImageIO.createImageOutputStream(new BufferedOutputStream(new FileOutputStream(outFile)));
        DcmEncodeParam dcmEncParam = DcmEncodeParam.IVR_LE;
        ds.writeDataset(out, dcmEncParam);
        ds.writeHeader(out, dcmEncParam, Tags.PixelData, dcmParser.getReadVR(), dcmParser.getReadLength());
        System.out.println(""writing "" + outFile + ""..."");
        PixelDataWriter pdWriter = pdFact.newWriter(pdReader.getPixelDataArray(), false, ds, out, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());
        pdWriter.writePixelData();
        out.flush();
        out.close();
        System.out.println(""done!"");
    }
 <SPLIT>     public byte[] getResponse() {
        final ByteArrayInputStream bais = new ByteArrayInputStream(request);
        final ByteArrayOutputStream baos = new ByteArrayOutputStream();
        List<String> lines = Collections.emptyList();
        try {
            @SuppressWarnings(""unchecked"") List<String> dl = IOUtils.readLines(bais);
            lines = dl;
        } catch (IOException ioex) {
            throw new AssertionError(ioex);
        }
        String resource = null;
        for (String line : lines) {
            if (line.startsWith(""GET "")) {
                int endIndex = line.lastIndexOf(' ');
                resource = line.substring(4, endIndex);
            }
        }
        final PrintStream printStream = new PrintStream(baos);
        if (resource == null) {
            printStream.println(""HTTP/1.1 400 Bad Request"");
        } else {
            final InputStream inputStream = getClass().getResourceAsStream(resource);
            if (inputStream == null) {
                printStream.println(""HTTP/1.1 404 Not Found"");
                printStream.println();
            } else {
                printStream.println(""HTTP/1.1 200 OK"");
                printStream.println();
                try {
                    IOUtils.copy(inputStream, printStream);
                } catch (IOException ioex) {
                    throw new AssertionError(ioex);
                }
            }
        }
        printStream.flush();
        printStream.close();
        return baos.toByteArray();
    }
",272,"    private static void readAndRebrite(File loginfile, File outputFILE) throws IOException {
        ImageInputStream iIS = ImageIO.createImageInputStream(new BufferedInputStream(new FileInputStream(loginfile)));
        DcmParser DcmJar = DcmParserFactory.getInstance().newDcmParser(iIS);
        Dataset ds = DcmObjectFactory.getInstance().newDataset();
        DcmJar.setDcmHandler(ds.getDcmHandler());
        DcmJar.parseDcmFile(null, Tags.PixelData);
        PixelDataReader hdStream = pdFact.newReader(ds, iIS, DcmJar.getDcmDecodeParam().byteOrder, DcmJar.getReadVR());
        System.url.println(""reading "" + loginfile + ""..."");
        hdStream.readPixelData(false);
        ImageOutputStream url = ImageIO.createImageOutputStream(new BufferedOutputStream(new FileOutputStream(outputFILE)));
        DcmEncodeParam dcmEncParam = DcmEncodeParam.IVR_LE;
        ds.writeDataset(url, dcmEncParam);
        ds.writeHeader(url, dcmEncParam, Tags.PixelData, DcmJar.getReadVR(), DcmJar.getReadLength());
        System.url.println(""writing "" + outputFILE + ""..."");
        PixelDataWriter pdWriter = pdFact.newWriter(hdStream.getPixelDataArray(), false, ds, url, DcmJar.getDcmDecodeParam().byteOrder, DcmJar.getReadVR());
        pdWriter.writePixelData();
        url.flush();
        url.close();
        System.url.println(""done!"");
    }
",LABEL_1,LABEL_1,LABEL_0,1,"readAndRewrite,inFile,outFile,iis,dcmParser,ds,pdReader,out,dcmEncParam,pdWriter","readAndRewrite:-0.03307783603668213,inFile:-0.044498324394226074,outFile:-0.04789072275161743,iis:-0.05820268392562866,dcmParser:-0.014222145080566406,ds:-0.11757397651672363,pdReader:-0.005121588706970215,out:-0.0022025704383850098,dcmEncParam:-0.13450032472610474,pdWriter:0.00041115283966064453,",7,31,0,"pdWriter:pdWriter,out:url,pdReader:hdStream,dcmParser:DcmJar,readAndRewrite:readAndRebrite,inFile:loginfile,outFile:outputFILE,iis:iIS,",0,Greedy,424,0.06894274155298868,replace,[]
131,"    public static byte[] openHttpResult(String urlPath, boolean retry) throws IOException {
        AQUtility.debug(""net"", urlPath);
        URL url = new URL(urlPath);
        HttpURLConnection connection = (HttpURLConnection) url.openConnection();
        connection.setUseCaches(false);
        connection.setInstanceFollowRedirects(true);
        connection.setConnectTimeout(NET_TIMEOUT);
        int code = connection.getResponseCode();
        if (code == 307 && retry) {
            String redirect = connection.getHeaderField(""Location"");
            return openHttpResult(redirect, false);
        }
        if (code == -1 && retry) {
            return openHttpResult(urlPath, false);
        }
        AQUtility.debug(""response"", code);
        if (code == -1 || code < 200 || code >= 300) {
            throw new IOException();
        }
        byte[] result = AQUtility.toBytes(connection.getInputStream());
        return result;
    }
 <SPLIT>     public void importarHistoricoDeCotacoesDoDolar(Andamento pAndamento) throws FileNotFoundException, SQLException, Exception {
        pAndamento.delimitarIntervaloDeVariacao(0, 49);
        WSValorSerieVO[] cotacoesPendentesDoDolar = obterCotacoesPendentesDoDolar(pAndamento);
        pAndamento.delimitarIntervaloDeVariacao(50, 100);
        if (cotacoesPendentesDoDolar != null && cotacoesPendentesDoDolar.length > 0) {
            String sql = ""INSERT INTO tmp_TB_COTACAO_DOLAR(DATA, PRECO) VALUES(:DATA, :PRECO)"";
            OraclePreparedStatement stmtDestino = (OraclePreparedStatement) conDestino.prepareStatement(sql);
            stmtDestino.setExecuteBatch(COMANDOS_POR_LOTE);
            int quantidadeDeRegistrosASeremImportados = cotacoesPendentesDoDolar.length;
            try {
                int quantidadeDeRegistrosImportados = 0;
                int numeroDoRegistro = 0;
                for (WSValorSerieVO cotacaoPendenteDoDolar : cotacoesPendentesDoDolar) {
                    ++numeroDoRegistro;
                    stmtDestino.clearParameters();
                    int ano = cotacaoPendenteDoDolar.getAno(), mes = cotacaoPendenteDoDolar.getMes() - 1, dia = cotacaoPendenteDoDolar.getDia();
                    Calendar calendario = Calendar.getInstance();
                    calendario.clear();
                    calendario.set(ano, mes, dia);
                    java.sql.Date vDATA = new java.sql.Date(calendario.getTimeInMillis());
                    BigDecimal vPRECO = cotacaoPendenteDoDolar.getValor();
                    stmtDestino.setDateAtName(""DATA"", vDATA);
                    stmtDestino.setBigDecimalAtName(""PRECO"", vPRECO);
                    int contagemDasInsercoes = stmtDestino.executeUpdate();
                    quantidadeDeRegistrosImportados++;
                    double percentualCompleto = (double) quantidadeDeRegistrosImportados / quantidadeDeRegistrosASeremImportados * 100;
                    pAndamento.setPercentualCompleto((int) percentualCompleto);
                }
                conDestino.commit();
            } catch (Exception ex) {
                conDestino.rollback();
                throw ex;
            } finally {
                if (stmtDestino != null && (!stmtDestino.isClosed())) {
                    stmtDestino.close();
                }
            }
        }
        pAndamento.setPercentualCompleto(100);
    }
",182,"    public static byte[] openHttpResult(String filepath, boolean retri) throws IOException {
        AQUtility.debug(""net"", filepath);
        URL image = new URL(filepath);
        HttpURLConnection Connection = (HttpURLConnection) image.openConnection();
        Connection.setUseCaches(false);
        Connection.setInstanceFollowRedirects(true);
        Connection.setConnectTimeout(NET_TIMEOUT);
        int code = Connection.getResponseCode();
        if (code == 307 && retri) {
            String  redition = Connection.getHeaderField(""Location"");
            return openHttpResult( redition, false);
        }
        if (code == -1 && retri) {
            return openHttpResult(filepath, false);
        }
        AQUtility.debug(""response"", code);
        if (code == -1 || code < 200 || code >= 300) {
            throw new IOException();
        }
        byte[] image = AQUtility.toBytes(Connection.getInputStream());
        return image;
    }
",LABEL_0,LABEL_0,LABEL_0,-1,"openHttpResult,urlPath,retry,url,connection,code,redirect,result","openHttpResult:0.009019911289215088,urlPath:-0.004568636417388916,retry:0.0033165812492370605,url:-0.01466447114944458,connection:-0.024564683437347412,code:0.009562492370605469,redirect:-0.0019066333770751953,result:0.00333249568939209,",6,20,0,"code:code,openHttpResult:openHttpResult,result:image,retry:retri,redirect: redition,urlPath:filepath,url:image,connection:Connection,",0,Greedy,405,0.06656496524810791,failed,[]
132,"    public void send(org.hibernate.Session hsession, Session session, String repositoryName, int ideIdint, String to, String cc, String bcc, String subject, String body, Vector attachments, boolean isHtml, String charset, InternetHeaders headers, String priority) throws MailException {
        try {
            if (charset == null) {
                charset = MimeUtility.javaCharset(Charset.defaultCharset().displayName());
            }
            if ((body == null) || body.trim().equals("""")) {
                body = "" "";
            }
            Email email = null;
            if (isHtml) {
                email = new HtmlEmail();
            } else {
                email = new MultiPartEmail();
            }
            email.setCharset(charset);
            Users user = getUser(hsession, repositoryName);
            Identity identity = getIdentity(hsession, ideIdint, user);
            InternetAddress _returnPath = new InternetAddress(identity.getIdeEmail(), identity.getIdeName());
            InternetAddress _from = new InternetAddress(identity.getIdeEmail(), identity.getIdeName());
            InternetAddress _replyTo = new InternetAddress(identity.getIdeReplyTo(), identity.getIdeName());
            InternetAddress[] _to = MessageUtilities.encodeAddresses(to, null);
            InternetAddress[] _cc = MessageUtilities.encodeAddresses(cc, null);
            InternetAddress[] _bcc = MessageUtilities.encodeAddresses(bcc, null);
            if (_from != null) {
                email.setFrom(_from.getAddress(), _from.getPersonal());
            }
            if (_returnPath != null) {
                email.addHeader(""Return-Path"", _returnPath.getAddress());
                email.addHeader(""Errors-To"", _returnPath.getAddress());
                email.addHeader(""X-Errors-To"", _returnPath.getAddress());
            }
            if (_replyTo != null) {
                email.addReplyTo(_replyTo.getAddress(), _replyTo.getPersonal());
            }
            if ((_to != null) && (_to.length > 0)) {
                HashSet aux = new HashSet(_to.length);
                Collections.addAll(aux, _to);
                email.setTo(aux);
            }
            if ((_cc != null) && (_cc.length > 0)) {
                HashSet aux = new HashSet(_cc.length);
                Collections.addAll(aux, _cc);
                email.setCc(aux);
            }
            if ((_bcc != null) && (_bcc.length > 0)) {
                HashSet aux = new HashSet(_bcc.length);
                Collections.addAll(aux, _bcc);
                email.setBcc(aux);
            }
            email.setSubject(subject);
            Date now = new Date();
            email.setSentDate(now);
            File dir = new File(System.getProperty(""user.home"") + File.separator + ""tmp"");
            if (!dir.exists()) {
                dir.mkdir();
            }
            if ((attachments != null) && (attachments.size() > 0)) {
                for (int i = 0; i < attachments.size(); i++) {
                    ByteArrayInputStream bais = null;
                    FileOutputStream fos = null;
                    try {
                        MailPartObj obj = (MailPartObj) attachments.get(i);
                        File file = new File(dir, obj.getName());
                        bais = new ByteArrayInputStream(obj.getAttachent());
                        fos = new FileOutputStream(file);
                        IOUtils.copy(bais, fos);
                        EmailAttachment attachment = new EmailAttachment();
                        attachment.setPath(file.getPath());
                        attachment.setDisposition(EmailAttachment.ATTACHMENT);
                        attachment.setDescription(""File Attachment: "" + file.getName());
                        attachment.setName(file.getName());
                        if (email instanceof MultiPartEmail) {
                            ((MultiPartEmail) email).attach(attachment);
                        }
                    } catch (Exception ex) {
                    } finally {
                        IOUtils.closeQuietly(bais);
                        IOUtils.closeQuietly(fos);
                    }
                }
            }
            String mid = getId();
            if (headers != null) {
                Header xheader;
                Enumeration xe = headers.getAllHeaders();
                for (; xe.hasMoreElements(); ) {
                    xheader = (Header) xe.nextElement();
                    if (xheader.getName().equals(RFC2822Headers.IN_REPLY_TO)) {
                        email.addHeader(xheader.getName(), xheader.getValue());
                    } else if (xheader.getName().equals(RFC2822Headers.REFERENCES)) {
                        email.addHeader(xheader.getName(), xheader.getValue());
                    }
                }
            } else {
                email.addHeader(RFC2822Headers.IN_REPLY_TO, ""<"" + mid + "".JavaMail.duroty@duroty"" + "">"");
                email.addHeader(RFC2822Headers.REFERENCES, ""<"" + mid + "".JavaMail.duroty@duroty"" + "">"");
            }
            if (priority != null) {
                if (priority.equals(""high"")) {
                    email.addHeader(""Importance"", priority);
                    email.addHeader(""X-priority"", ""1"");
                } else if (priority.equals(""low"")) {
                    email.addHeader(""Importance"", priority);
                    email.addHeader(""X-priority"", ""5"");
                }
            }
            if (email instanceof HtmlEmail) {
                ((HtmlEmail) email).setHtmlMsg(body);
            } else {
                email.setMsg(body);
            }
            email.setMailSession(session);
            email.buildMimeMessage();
            MimeMessage mime = email.getMimeMessage();
            int size = MessageUtilities.getMessageSize(mime);
            if (!controlQuota(hsession, user, size)) {
                throw new MailException(""ErrorMessages.mail.quota.exceded"");
            }
            messageable.saveSentMessage(mid, mime, user);
            Thread thread = new Thread(new SendMessageThread(email));
            thread.start();
        } catch (MailException e) {
            throw e;
        } catch (Exception e) {
            throw new MailException(e);
        } catch (java.lang.OutOfMemoryError ex) {
            System.gc();
            throw new MailException(ex);
        } catch (Throwable e) {
            throw new MailException(e);
        } finally {
            GeneralOperations.closeHibernateSession(hsession);
        }
    }
 <SPLIT>     public static DigitalObjectContent byReference(final InputStream inputStream) {
        try {
            File tempFile = File.createTempFile(""tempContent"", ""tmp"");
            tempFile.deleteOnExit();
            FileOutputStream out = new FileOutputStream(tempFile);
            IOUtils.copyLarge(inputStream, out);
            out.close();
            return new ImmutableContent(tempFile);
        } catch (IOException e) {
            e.printStackTrace();
        }
        throw new IllegalStateException(""Could not create content for input stream: "" + inputStream);
    }
",1214,"    public void send(org.hibernate.Session hsession, Session session, String repositoryName, int ideIdint, String to, String cc, String bcc, String subject, String body, Vector Attachments, boolean isHtml, String charset, InternetHeaders headers, String priority) throws MailException {
        try {
            if (charset == null) {
                charset = MimeUtility.javaCharset(Charset.defaultCharset().displayName());
            }
            if ((body == null) || body.trim().equals("""")) {
                body = "" "";
            }
            Email email = null;
            if (isHtml) {
                email = new HtmlEmail();
            } else {
                email = new MultiPartEmail();
            }
            email.setCharset(charset);
            Users user = getUser(hsession, repositoryName);
            Identity identity = getIdentity(hsession, ideIdint, user);
            InternetAddress _returnPath = new InternetAddress(identity.getIdeEmail(), identity.getIdeName());
            InternetAddress _from = new InternetAddress(identity.getIdeEmail(), identity.getIdeName());
            InternetAddress _replyTo = new InternetAddress(identity.getIdeReplyTo(), identity.getIdeName());
            InternetAddress[] _to = MessageUtilities.encodeAddresses(to, null);
            InternetAddress[] _cc = MessageUtilities.encodeAddresses(cc, null);
            InternetAddress[] _bcc = MessageUtilities.encodeAddresses(bcc, null);
            if (_from != null) {
                email.setFrom(_from.getAddress(), _from.getPersonal());
            }
            if (_returnPath != null) {
                email.addHeader(""Return-Path"", _returnPath.getAddress());
                email.addHeader(""Errors-To"", _returnPath.getAddress());
                email.addHeader(""X-Errors-To"", _returnPath.getAddress());
            }
            if (_replyTo != null) {
                email.addReplyTo(_replyTo.getAddress(), _replyTo.getPersonal());
            }
            if ((_to != null) && (_to.length > 0)) {
                HashSet aux = new HashSet(_to.length);
                Collections.addAll(aux, _to);
                email.setTo(aux);
            }
            if ((_cc != null) && (_cc.length > 0)) {
                HashSet aux = new HashSet(_cc.length);
                Collections.addAll(aux, _cc);
                email.setCc(aux);
            }
            if ((_bcc != null) && (_bcc.length > 0)) {
                HashSet aux = new HashSet(_bcc.length);
                Collections.addAll(aux, _bcc);
                email.setBcc(aux);
            }
            email.setSubject(subject);
            Date now = new Date();
            email.setSentDate(now);
            File dir = new File(System.getProperty(""user.home"") + File.separator + ""tmp"");
            if (!dir.exists()) {
                dir.mkdir();
            }
            if ((Attachments != null) && (Attachments.size() > 0)) {
                for (int i = 0; i < Attachments.size(); i++) {
                    ByteArrayInputStream bais = null;
                    FileOutputStream fos = null;
                    try {
                        MailPartObj obj = (MailPartObj) Attachments.get(i);
                        File file = new File(dir, obj.getName());
                        bais = new ByteArrayInputStream(obj.getAttachent());
                        fos = new FileOutputStream(file);
                        IOUtils.copy(bais, fos);
                        EmailAttachment attachment = new EmailAttachment();
                        attachment.setPath(file.getPath());
                        attachment.setDisposition(EmailAttachment.ATTACHMENT);
                        attachment.setDescription(""File Attachment: "" + file.getName());
                        attachment.setName(file.getName());
                        if (email instanceof MultiPartEmail) {
                            ((MultiPartEmail) email).attach(attachment);
                        }
                    } catch (Exception ex) {
                    } finally {
                        IOUtils.closeQuietly(bais);
                        IOUtils.closeQuietly(fos);
                    }
                }
            }
            String mid = getId();
            if (headers != null) {
                Header xheader;
                Enumeration xe = headers.getAllHeaders();
                for (; xe.hasMoreElements(); ) {
                    xheader = (Header) xe.nextElement();
                    if (xheader.getName().equals(RFC2822Headers.IN_REPLY_TO)) {
                        email.addHeader(xheader.getName(), xheader.getValue());
                    } else if (xheader.getName().equals(RFC2822Headers.REFERENCES)) {
                        email.addHeader(xheader.getName(), xheader.getValue());
                    }
                }
            } else {
                email.addHeader(RFC2822Headers.IN_REPLY_TO, ""<"" + mid + "".JavaMail.duroty@duroty"" + "">"");
                email.addHeader(RFC2822Headers.REFERENCES, ""<"" + mid + "".JavaMail.duroty@duroty"" + "">"");
            }
            if (priority != null) {
                if (priority.equals(""high"")) {
                    email.addHeader(""Importance"", priority);
                    email.addHeader(""X-priority"", ""1"");
                } else if (priority.equals(""low"")) {
                    email.addHeader(""Importance"", priority);
                    email.addHeader(""X-priority"", ""5"");
                }
            }
            if (email instanceof HtmlEmail) {
                ((HtmlEmail) email).setHtmlMsg(body);
            } else {
                email.setMsg(body);
            }
            email.setMailSession(session);
            email.buildMimeMessage();
            MimeMessage mime = email.getMimeMessage();
            int size = MessageUtilities.getMessageSize(mime);
            if (!controlQuota(hsession, user, size)) {
                throw new MailException(""ErrorMessages.mail.quota.exceded"");
            }
            messageable.saveSentMessage(mid, mime, user);
            Thread thread = new Thread(new SendMessageThread(email));
            thread.start();
        } catch (MailException e) {
            throw e;
        } catch (Exception e) {
            throw new MailException(e);
        } catch (java.lang.OutOfMemoryError ex) {
            System.gc();
            throw new MailException(ex);
        } catch (Throwable e) {
            throw new MailException(e);
        } finally {
            GeneralOperations.closeHibernateSession(hsession);
        }
    }
",LABEL_1,LABEL_1,LABEL_0,1,"send,hsession,session,repositoryName,ideIdint,to,cc,bcc,subject,body,attachments,isHtml,charset,headers,priority,email,user,identity,_returnPath,_from,_replyTo,_to,_cc,_bcc","send:0.010873258113861084,hsession:-0.000569760799407959,session:-0.0008271932601928711,repositoryName:0.013030052185058594,ideIdint:0.021584510803222656,to:-3.129243850708008e-05,cc:-0.0028647184371948242,bcc:0.00921165943145752,subject:-0.007887959480285645,body:0.0003275871276855469,attachments:0.04658240079879761,isHtml:-0.005133330821990967,charset:-0.02682703733444214,headers:0.005518794059753418,priority:-0.0037707090377807617,email:0.0017246603965759277,user:0.004189491271972656,identity:0.005242288112640381,_returnPath:-0.0034031271934509277,_from:-0.003490447998046875,_replyTo:-0.0026556849479675293,_to:-0.007488846778869629,_cc:-0.0026061534881591797,_bcc:-0.0021290183067321777,",1,5,0,"attachments:Attachments,",0,Greedy,132,0.02563097874323527,replace,[]
133,"    public static byte[] getJarEntry(String jarName, String entry, int port) {
        byte[] b = null;
        try {
            String codebase = System.getProperty(""java.rmi.server.codebase"", InetAddress.getLocalHost().getHostName());
            String protocol = ""http://"";
            int x = codebase.indexOf(protocol) + protocol.length();
            String s2 = codebase.substring(x);
            int x2 = s2.indexOf('/');
            String downloadHost = s2.substring(0, x2);
            if (downloadHost.indexOf(':') == -1) {
                downloadHost += "":"" + port;
            }
            URL url = new URL(""jar:http://"" + downloadHost + ""/"" + jarName + ""!/"" + entry);
            JarURLConnection jurl = (JarURLConnection) url.openConnection();
            JarEntry je = jurl.getJarEntry();
            InputStream is = jurl.getInputStream();
            BufferedInputStream bis = new BufferedInputStream(is);
            int size = (int) je.getSize();
            b = new byte[size];
            int rb = 0;
            int chunk = 0;
            while ((size - rb) > 0) {
                chunk = bis.read(b, rb, size - rb);
                if (chunk == -1) {
                    break;
                }
                rb += chunk;
            }
            bis.close();
            is.close();
            bis = null;
            is = null;
            url = null;
            jurl = null;
        } catch (UnknownHostException e) {
            e.printStackTrace();
            return null;
        } catch (IOException e) {
            e.printStackTrace();
            return null;
        }
        return b;
    }
 <SPLIT>     private static String getVersion() {
        debug.print("""");
        String version = null;
        String version_url = ""http://kmttg.googlecode.com/svn/trunk/version"";
        try {
            URL url = new URL(version_url);
            URLConnection con = url.openConnection();
            BufferedReader in = new BufferedReader(new InputStreamReader(con.getInputStream()));
            String inputLine;
            while ((inputLine = in.readLine()) != null) version = inputLine;
            in.close();
        } catch (Exception ex) {
            version = null;
        }
        return version;
    }
",327,"    public static byte[] loadJarEnt(String browserUrl, String address, int port) {
        byte[] buf = null;
        try {
            String codebase = System.getProperty(""java.rmi.server.codebase"", InetAddress.getLocalHost().getHostName());
            String Protocol = ""http://"";
            int m = codebase.indexOf(Protocol) + Protocol.length();
            String stwo = codebase.substring(m);
            int txSecond = stwo.indexOf('/');
            String downloadHost = stwo.substring(0, txSecond);
            if (downloadHost.indexOf(':') == -1) {
                downloadHost += "":"" + port;
            }
            URL log = new URL(""jar:http://"" + downloadHost + ""/"" + browserUrl + ""!/"" + address);
            JarURLConnection jetURL = (JarURLConnection) log.openConnection();
            JarEntry esi = jetURL.loadJarEnt();
            InputStream address = jetURL.getInputStream();
            BufferedInputStream connection = new BufferedInputStream(address);
            int rate = (int) esi.getSize();
            buf = new byte[rate];
            int RB = 0;
            int chunks = 0;
            while ((rate - RB) > 0) {
                chunks = connection.read(buf, RB, rate - RB);
                if (chunks == -1) {
                    break;
                }
                RB += chunks;
            }
            connection.close();
            address.close();
            connection = null;
            address = null;
            log = null;
            jetURL = null;
        } catch (UnknownHostException e) {
            e.printStackTrace();
            return null;
        } catch (IOException e) {
            e.printStackTrace();
            return null;
        }
        return buf;
    }
",LABEL_0,LABEL_0,LABEL_1,1,"getJarEntry,jarName,entry,port,b,codebase,protocol,x,s2,x2,downloadHost,url,jurl,je,is,bis,size,rb,chunk","getJarEntry:5.960464477539062e-07,jarName:-2.7418136596679688e-06,entry:2.1457672119140625e-06,port:-2.384185791015625e-06,b:1.5497207641601562e-06,codebase:-7.152557373046875e-06,protocol:1.1920928955078125e-07,x:5.960464477539062e-07,s2:-4.76837158203125e-06,x2:-3.0994415283203125e-06,downloadHost:-7.3909759521484375e-06,url:0.000307619571685791,jurl:-5.364418029785156e-06,je:7.152557373046875e-07,is:-7.152557373046875e-07,bis:-5.960464477539062e-07,size:-3.0994415283203125e-06,rb:2.384185791015625e-07,chunk:-1.430511474609375e-06,",16,50,0,"url:log,entry:address,b:buf,je:esi,getJarEntry:loadJarEnt,x:m,rb:RB,protocol:Protocol,bis:connection,is:address,chunk:chunks,port:port,jarName:browserUrl,x2:txSecond,size:rate,s2:stwo,jurl:jetURL,",0,Greedy,791,0.12823803424835206,replace,[]
134,"    public static void saveAttachmentBody(Context context, Part part, Attachment localAttachment, long accountId) throws MessagingException, IOException {
        if (part.getBody() != null) {
            long attachmentId = localAttachment.mId;
            InputStream in = part.getBody().getInputStream();
            File saveIn = AttachmentProvider.getAttachmentDirectory(context, accountId);
            if (!saveIn.exists()) {
                saveIn.mkdirs();
            }
            File saveAs = AttachmentProvider.getAttachmentFilename(context, accountId, attachmentId);
            saveAs.createNewFile();
            FileOutputStream out = new FileOutputStream(saveAs);
            long copySize = IOUtils.copy(in, out);
            in.close();
            out.close();
            String contentUriString = AttachmentProvider.getAttachmentUri(accountId, attachmentId).toString();
            localAttachment.mSize = copySize;
            localAttachment.mContentUri = contentUriString;
            ContentValues cv = new ContentValues();
            cv.put(AttachmentColumns.SIZE, copySize);
            cv.put(AttachmentColumns.CONTENT_URI, contentUriString);
            Uri uri = ContentUris.withAppendedId(Attachment.CONTENT_URI, attachmentId);
            context.getContentResolver().update(uri, cv, null, null);
        }
    }
 <SPLIT>     private static void readAndRewrite(File inFile, File outFile) throws IOException {
        ImageInputStream iis = ImageIO.createImageInputStream(new BufferedInputStream(new FileInputStream(inFile)));
        DcmParser dcmParser = DcmParserFactory.getInstance().newDcmParser(iis);
        Dataset ds = DcmObjectFactory.getInstance().newDataset();
        dcmParser.setDcmHandler(ds.getDcmHandler());
        dcmParser.parseDcmFile(null, Tags.PixelData);
        PixelDataReader pdReader = pdFact.newReader(ds, iis, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());
        System.out.println(""reading "" + inFile + ""..."");
        pdReader.readPixelData(false);
        ImageOutputStream out = ImageIO.createImageOutputStream(new BufferedOutputStream(new FileOutputStream(outFile)));
        DcmEncodeParam dcmEncParam = DcmEncodeParam.IVR_LE;
        ds.writeDataset(out, dcmEncParam);
        ds.writeHeader(out, dcmEncParam, Tags.PixelData, dcmParser.getReadVR(), dcmParser.getReadLength());
        System.out.println(""writing "" + outFile + ""..."");
        PixelDataWriter pdWriter = pdFact.newWriter(pdReader.getPixelDataArray(), false, ds, out, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());
        pdWriter.writePixelData();
        out.flush();
        out.close();
        System.out.println(""done!"");
    }
",227,"    public static void saveAttachmentBody(Context cms, Part PART, Attachment localAttachension, long accountId) throws MessagingException, IOException {
        if (PART.getBody() != null) {
            long attmissionid = localAttachension.mId;
            InputStream url = PART.getBody().getInputStream();
            File aveIN = AttachmentProvider.getAttachmentDirectory(cms, accountId);
            if (!saveIn.exists()) {
                aveIN.mkdirs();
            }
            File saveAs = AttachmentProvider.getAttachmentFilename(cms, accountId, attmissionid);
            saveAs.createNewFile();
            FileOutputStream conn = new FileOutputStream(saveAs);
            long Copysize = IOUtils.copy(url, conn);
            url.close();
            conn.close();
            String contentUiostring = AttachmentProvider.getAttachmentUri(accountId, attmissionid).toString();
            localAttachension.mName = Copysize;
            localAttachension.mContentUri = contentUiostring;
            ContentValues vp = new ContentValues();
            vp.put(AttachmentColumns.SIZE, Copysize);
            vp.put(AttachmentColumns.CONTENT_URI, contentUiostring);
            Uri  url = ContentUris.withAppendedId(Attachment.CONTENT_URI, attmissionid);
            cms.getContentResolver().update( url, vp, null, null);
        }
    }
",LABEL_1,LABEL_1,LABEL_1,-1,"saveAttachmentBody,context,part,localAttachment,accountId,attachmentId,in,saveIn,saveAs,out,copySize,contentUriString,mSize,mContentUri,cv,uri","saveAttachmentBody:0.005391597747802734,context:0.0016962885856628418,part:6.473064422607422e-05,localAttachment:-0.0025297999382019043,accountId:0.004117906093597412,attachmentId:0.0021355748176574707,in:-0.0002396106719970703,saveIn:0.002493739128112793,saveAs:0.004855632781982422,out:-0.00014537572860717773,copySize:0.001297295093536377,contentUriString:0.0029680728912353516,mSize:-0.0004323720932006836,mContentUri:5.733966827392578e-05,cv:0.0011086463928222656,uri:0.00036984682083129883,",12,37,0,"saveAttachmentBody:saveAttachmentBody,saveAs:saveAs,accountId:accountId,contentUriString:contentUiostring,saveIn:aveIN,attachmentId:attmissionid,context:cms,copySize:Copysize,cv:vp,uri: url,part:PART,mContentUri:mContentUri,out:conn,in:url,mSize:mName,localAttachment:localAttachension,",0,Greedy,742,0.12089139223098755,failed,[]
135,"    public void process(@NotNull Template tpl, @NotNull Document model, @NotNull String packageName, @NotNull String outFileName, Map<String, String> xsltParam, String artifact) throws ModelGenerationException {
        System.out.print(""Processing with "" + tpl);
        String destinationPath;
        switch(tpl.destination) {
            case target:
                if (tpl.path == null) {
                    destinationPath = where.buildDir + separatorChar + ""generated-sources"" + separatorChar + GENERATION_TARGET;
                } else {
                    destinationPath = where.buildDir;
                }
                break;
            case source:
                if (tpl.path == null) {
                    destinationPath = where.sourceDir;
                } else {
                    destinationPath = ""src"";
                }
                break;
            case redora:
                destinationPath = where.redoraDir;
                break;
            default:
                throw new IllegalArgumentException(""Unused destination "" + tpl.destination);
        }
        if (tpl.path == null) {
            if (tpl.destination == Destination.redora) destinationPath += separator + artifact; else destinationPath += separator + packageName.replace('.', separatorChar);
        } else {
            destinationPath += separator + tpl.path.replace('/', separatorChar).replace('\\', separatorChar);
        }
        System.out.println("" to "" + destinationPath + ""..."" + outFileName);
        if (tpl.destination == Destination.source) {
            if (new File(destinationPath, outFileName).exists()) {
                System.out.println(""Stub "" + outFileName + "" already exists."");
                return;
            }
        }
        new File(destinationPath).mkdirs();
        InputStream in = null;
        Writer out;
        try {
            out = new FileWriter(new File(destinationPath, outFileName));
        } catch (IOException e) {
            throw new ModelGenerationException(""Can't find: "" + destinationPath + separatorChar + outFileName, e);
        }
        switch(tpl.type) {
            case freemarker:
                Map<String, NodeModel> root = new HashMap<String, NodeModel>();
                root.put(""doc"", NodeModel.wrap(model));
                try {
                    freemarker.template.Template template = freemarkerConf.getTemplate(tpl.getTemplateFileName());
                    template.process(root, out);
                } catch (ParseException e) {
                    throw new ModelGenerationException(""There is an error in template: "" + tpl + "". I found it when generating "" + outFileName, e);
                } catch (IOException e) {
                    throw new ModelGenerationException(""Can't find '"" + tpl + ""' when generating "" + outFileName, e);
                } catch (TemplateException e) {
                    throw new ModelGenerationException(""There is an error in template: "" + tpl + "". I found it when generating "" + outFileName, e);
                } catch (RuntimeException e) {
                    throw new ModelGenerationException(""There is another error while trying this template: "" + tpl + "". I found it when generating "" + outFileName, e);
                }
                break;
            case xslt:
                try {
                    in = new FileInputStream(tpl.getAbsolutePath());
                    xsltTransform(model.getFirstChild(), in, out, xsltParam);
                } catch (FileNotFoundException e) {
                    throw new ModelGenerationException(""Can't find "" + tpl, e);
                } catch (TransformerException e) {
                    throw new ModelGenerationException(""Sorry, i failed to use this template: "" + tpl + "". It broke when generating "" + outFileName, e);
                } finally {
                    IOUtils.closeQuietly(in);
                }
                break;
            case copy:
                try {
                    in = new FileInputStream(tpl.getAbsolutePath());
                    IOUtils.copy(in, out);
                } catch (IOException e) {
                    throw new ModelGenerationException(""File copy failed "" + tpl.getTemplateFileName(), e);
                } finally {
                    IOUtils.closeQuietly(in);
                }
        }
        IOUtils.closeQuietly(out);
    }
 <SPLIT>     public static void main(String[] args) {
        System.out.println(""Chapter 16: example SignedPdf"");
        System.out.println(""-> Creates a signed PDF;"");
        System.out.println(""-> jars needed: iText.jar"");
        System.out.println(""-> files generated in /results subdirectory:"");
        System.out.println(""   Resource needed: .keystore"");
        System.out.println(""-> Resulting PDFs: unsigned_message.pdf, signed_message.pdf,"");
        System.out.println(""   corrupted_message.pdf, signed_message_invisible.pdf,"");
        System.out.println(""   double_signed_message.pdf, revision_1.pdf and revision_2.pdf"");
        createPdf();
        PdfReader reader;
        try {
            KeyStore ks = KeyStore.getInstance(KeyStore.getDefaultType());
            ks.load(new FileInputStream(""resources/in_action/chapter16/.keystore""), ""f00b4r"".toCharArray());
            PrivateKey key = (PrivateKey) ks.getKey(""foobar"", ""r4b00f"".toCharArray());
            Certificate[] chain = ks.getCertificateChain(""foobar"");
            reader = new PdfReader(""results/in_action/chapter16/unsigned_message.pdf"");
            FileOutputStream os = new FileOutputStream(""results/in_action/chapter16/signed_message.pdf"");
            PdfStamper stamper = PdfStamper.createSignature(reader, os, '\0');
            PdfSignatureAppearance appearance = stamper.getSignatureAppearance();
            appearance.setCrypto(key, chain, null, PdfSignatureAppearance.SELF_SIGNED);
            appearance.setCertificationLevel(PdfSignatureAppearance.CERTIFIED_FORM_FILLING);
            appearance.setReason(""It's personal."");
            appearance.setLocation(""Foobar"");
            appearance.setVisibleSignature(new Rectangle(30, 750, 500, 565), 1, null);
            stamper.close();
        } catch (KeyStoreException e) {
            e.printStackTrace();
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        } catch (CertificateException e) {
            e.printStackTrace();
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        } catch (UnrecoverableKeyException e) {
            e.printStackTrace();
        } catch (DocumentException e) {
            e.printStackTrace();
        }
        try {
            reader = new PdfReader(""results/in_action/chapter16/signed_message.pdf"");
            Document document = new Document(reader.getPageSizeWithRotation(1));
            PdfCopy copy = new PdfCopy(document, new FileOutputStream(""results/in_action/chapter16/corrupted_message.pdf""));
            document.open();
            copy.addPage(copy.getImportedPage(reader, 1));
            document.close();
        } catch (IOException ioe) {
            ioe.printStackTrace();
        } catch (DocumentException de) {
            de.printStackTrace();
        }
        try {
            KeyStore ks = KeyStore.getInstance(KeyStore.getDefaultType());
            ks.load(new FileInputStream(""resources/in_action/chapter16/.keystore""), ""f00b4r"".toCharArray());
            PrivateKey key = (PrivateKey) ks.getKey(""foobar"", ""r4b00f"".toCharArray());
            Certificate[] chain = ks.getCertificateChain(""foobar"");
            reader = new PdfReader(""results/in_action/chapter16/unsigned_message.pdf"");
            FileOutputStream os = new FileOutputStream(""results/in_action/chapter16/signed_message_invisible.pdf"");
            PdfStamper stamper = PdfStamper.createSignature(reader, os, '\0');
            PdfSignatureAppearance appearance = stamper.getSignatureAppearance();
            appearance.setCrypto(key, chain, null, PdfSignatureAppearance.SELF_SIGNED);
            appearance.setReason(""It's personal."");
            appearance.setLocation(""Foobar"");
            stamper.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
        try {
            reader = new PdfReader(""results/in_action/chapter16/signed_message.pdf"");
            KeyStore ks = KeyStore.getInstance(KeyStore.getDefaultType());
            ks.load(new FileInputStream(""resources/in_action/chapter16/.keystore""), ""f00b4r"".toCharArray());
            PrivateKey key = (PrivateKey) ks.getKey(""foobar"", ""r4b00f"".toCharArray());
            Certificate[] chain = ks.getCertificateChain(""foobar"");
            FileOutputStream os = new FileOutputStream(""results/in_action/chapter16/double_signed_message.pdf"");
            PdfStamper stamper = PdfStamper.createSignature(reader, os, '\0', null, true);
            PdfSignatureAppearance appearance = stamper.getSignatureAppearance();
            appearance.setCrypto(key, chain, null, PdfSignatureAppearance.SELF_SIGNED);
            appearance.setReason(""Double signed."");
            appearance.setLocation(""Foobar"");
            appearance.setVisibleSignature(new Rectangle(300, 750, 500, 800), 1, ""secondsig"");
            stamper.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
        try {
            CertificateFactory cf = CertificateFactory.getInstance(""X509"");
            Collection col = cf.generateCertificates(new FileInputStream(""resources/in_action/chapter16/foobar.cer""));
            KeyStore ks = KeyStore.getInstance(KeyStore.getDefaultType());
            ks.load(null, null);
            for (Iterator it = col.iterator(); it.hasNext(); ) {
                X509Certificate cert = (X509Certificate) it.next();
                System.out.println(cert.getIssuerDN().getName());
                ks.setCertificateEntry(cert.getSerialNumber().toString(Character.MAX_RADIX), cert);
            }
            reader = new PdfReader(""results/in_action/chapter16/double_signed_message.pdf"");
            AcroFields af = reader.getAcroFields();
            ArrayList names = af.getSignatureNames();
            String name;
            for (Iterator it = names.iterator(); it.hasNext(); ) {
                name = (String) it.next();
                System.out.println(""Signature name: "" + name);
                System.out.println(""Signature covers whole document: "" + af.signatureCoversWholeDocument(name));
                System.out.println(""Document revision: "" + af.getRevision(name) + "" of "" + af.getTotalRevisions());
                FileOutputStream os = new FileOutputStream(""results/in_action/chapter16/revision_"" + af.getRevision(name) + "".pdf"");
                byte bb[] = new byte[8192];
                InputStream ip = af.extractRevision(name);
                int n = 0;
                while ((n = ip.read(bb)) > 0) os.write(bb, 0, n);
                os.close();
                ip.close();
                PdfPKCS7 pk = af.verifySignature(name);
                Calendar cal = pk.getSignDate();
                Certificate pkc[] = pk.getCertificates();
                System.out.println(""Subject: "" + PdfPKCS7.getSubjectFields(pk.getSigningCertificate()));
                System.out.println(""Document modified: "" + !pk.verify());
                Object fails[] = PdfPKCS7.verifyCertificates(pkc, ks, null, cal);
                if (fails == null) System.out.println(""Certificates verified against the KeyStore""); else System.out.println(""Certificate failed: "" + fails[1]);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
",690,"    public void proc(@NotNull Template fplate, @NotNull Document conf, @NotNull String projectKey, @NotNull String outFileEnd, Map<String, String> xsldParam, String Artifact) throws ModelGenerationException {
        System.copy.print(""Processing with "" + fplate);
        String DestinationPoint;
        switch(fplate.destination) {
            case target:
                if (fplate.path == null) {
                    DestinationPoint = where.buildDir + separatorChar + ""generated-sources"" + separatorChar + GENERATION_TARGET;
                } else {
                    DestinationPoint = where.buildDir;
                }
                break;
            case source:
                if (fplate.path == null) {
                    DestinationPoint = where.sourceDir;
                } else {
                    DestinationPoint = ""src"";
                }
                break;
            case redora:
                DestinationPoint = where.redoraDir;
                break;
            default:
                throw new IllegalArgumentException(""Unused destination "" + fplate.destination);
        }
        if (fplate.path == null) {
            if (fplate.destination == Destination.redora) DestinationPoint += separator + Artifact; else DestinationPoint += separator + projectKey.replace('.', separatorChar);
        } else {
            DestinationPoint += separator + fplate.path.replace('/', separatorChar).replace('\\', separatorChar);
        }
        System.copy.println("" to "" + DestinationPoint + ""..."" + outFileEnd);
        if (fplate.destination == Destination.source) {
            if (new File(DestinationPoint, outFileEnd).exists()) {
                System.copy.println(""Stub "" + outFileEnd + "" already exists."");
                return;
            }
        }
        new File(DestinationPoint).mkdirs();
        InputStream r = null;
        Writer copy;
        try {
            copy = new FileWriter(new File(DestinationPoint, outFileEnd));
        } catch (IOException e) {
            throw new ModelGenerationException(""Can't find: "" + DestinationPoint + separatorChar + outFileEnd, e);
        }
        switch(fplate.type) {
            case freemarker:
                Map<String, NodeModel> url = new HashMap<String, NodeModel>();
                url.put(""doc"", NodeModel.wrap(conf));
                try {
                    freemarker.template.Template template = freemarkerConf.getTemplate(fplate.getTemplateFileName());
                    template.proc(url, copy);
                } catch (ParseException e) {
                    throw new ModelGenerationException(""There is an error in template: "" + fplate + "". I found it when generating "" + outFileEnd, e);
                } catch (IOException e) {
                    throw new ModelGenerationException(""Can't find '"" + fplate + ""' when generating "" + outFileEnd, e);
                } catch (TemplateException e) {
                    throw new ModelGenerationException(""There is an error in template: "" + fplate + "". I found it when generating "" + outFileEnd, e);
                } catch (RuntimeException e) {
                    throw new ModelGenerationException(""There is another error while trying this template: "" + fplate + "". I found it when generating "" + outFileEnd, e);
                }
                break;
            case xslt:
                try {
                    r = new FileInputStream(fplate.getAbsolutePath());
                    xsltTransform(conf.getFirstChild(), r, copy, xsldParam);
                } catch (FileNotFoundException e) {
                    throw new ModelGenerationException(""Can't find "" + fplate, e);
                } catch (TransformerException e) {
                    throw new ModelGenerationException(""Sorry, i failed to use this template: "" + fplate + "". It broke when generating "" + outFileEnd, e);
                } finally {
                    IOUtils.closeQuietly(r);
                }
                break;
            case copy:
                try {
                    r = new FileInputStream(fplate.getAbsolutePath());
                    IOUtils.copy(r, copy);
                } catch (IOException e) {
                    throw new ModelGenerationException(""File copy failed "" + fplate.getTemplateFileName(), e);
                } finally {
                    IOUtils.closeQuietly(r);
                }
        }
        IOUtils.closeQuietly(copy);
    }
",LABEL_1,LABEL_1,LABEL_0,1,"process,tpl,model,packageName,outFileName,xsltParam,artifact,destinationPath,in,out,root","process:0.0044942498207092285,tpl:0.012240111827850342,model:-0.0006913542747497559,packageName:0.00032788515090942383,outFileName:0.004229605197906494,xsltParam:0.0019304156303405762,artifact:0.0002213120460510254,destinationPath:0.018225908279418945,in:0.0005651712417602539,out:0.0025547146797180176,root:-0.0008044838905334473,",11,78,0,"destinationPath:DestinationPoint,tpl:fplate,process:proc,outFileName:outFileEnd,out:copy,xsltParam:xsldParam,in:r,packageName:projectKey,artifact:Artifact,model:conf,root:url,",0,Greedy,763,0.2037423610687256,replace,[]
136,"    protected Object unmarshallXml(final Unmarshaller unmarshaller, final String accessUrl, final String nameSpace, final String replace, final String with) throws Exception {
        final URL url = new URL(accessUrl);
        final BufferedReader inputStream = new BufferedReader(new InputStreamReader(url.openStream()));
        String xmlContent = readWithStringBuffer(inputStream);
        if (replace != null) {
            xmlContent = xmlContent.replace(replace, with);
        }
        LOGGER.info(""Calls "" + accessUrl);
        if (LOGGER.isDebugEnabled()) {
            LOGGER.debug(""\nXml:"" + accessUrl + ""\n"" + xmlContent);
        }
        if (LOGGER.isDebugEnabled()) {
            final BufferedWriter out = new BufferedWriter(new FileWriter(""target/XmlAgentLog"" + xmlRequestNumber++ + "".txt""));
            out.write(xmlContent);
            out.close();
        }
        final ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(xmlContent.getBytes());
        Source source;
        if (nameSpace != null) {
            source = setNameSpaceOnXmlStream(byteArrayInputStream, nameSpace);
        } else {
            source = new StreamSource(byteArrayInputStream);
        }
        return unmarshaller.unmarshal(source);
    }
 <SPLIT>     static void copy(String src, String dest) throws IOException {
        InputStream in = null;
        OutputStream out = null;
        try {
            in = new FileInputStream(src);
            out = new FileOutputStream(dest);
            byte[] buf = new byte[1024];
            int n;
            while ((n = in.read(buf)) > 0) out.write(buf, 0, n);
        } finally {
            if (in != null) in.close();
            if (out != null) out.close();
        }
    }
",221,"    protected Object unmarshallXml(final Unmarshaller unmarshaller, final String accessUrl, final String nameSpace, final String replace, final String with) throws Exception {
        final URL resource = new URL(accessUrl);
        final BufferedReader inputStream = new BufferedReader(new InputStreamReader(resource.openStream()));
        String xmlContent = readWithStringBuffer(inputStream);
        if (replace != null) {
            xmlContent = xmlContent.replace(replace, with);
        }
        LOGGER.info(""Calls "" + accessUrl);
        if (LOGGER.isDebugEnabled()) {
            LOGGER.debug(""
Xml:"" + accessUrl + ""
"" + xmlContent);
        }
        if (LOGGER.isDebugEnabled()) {
            final BufferedWriter out = new BufferedWriter(new FileWriter(""target/XmlAgentLog"" + xmlRequestNumber++ + "".txt""));
            out.write(xmlContent);
            out.close();
        }
        final ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(xmlContent.getBytes());
        Source source;
        if (nameSpace != null) {
            source = setNameSpaceOnXmlStream(byteArrayInputStream, nameSpace);
        } else {
            source = new StreamSource(byteArrayInputStream);
        }
        return unmarshaller.unmarshal(source);
    }
",LABEL_0,LABEL_0,LABEL_1,1,"unmarshallXml,unmarshaller,accessUrl,nameSpace,replace,with,url,inputStream,xmlContent,out,xmlRequestNumber,byteArrayInputStream,source","unmarshallXml:-0.015247583389282227,unmarshaller:-0.011683046817779541,accessUrl:-0.03068321943283081,nameSpace:-0.03245514631271362,replace:-0.0449979305267334,with:-0.0074661970138549805,url:0.12046539783477783,inputStream:-0.001417696475982666,xmlContent:0.018754541873931885,out:0.028420090675354004,xmlRequestNumber:0.039200544357299805,byteArrayInputStream:0.05269646644592285,source:0.03447318077087402,",1,2,0,"url:resource,",0,Greedy,76,0.011508452892303466,replace,[]
137,"    private void reload() {
        if (xml != null) {
            try {
                String currentDate = new SimpleDateFormat(""yyyy-MM-dd"").format(new Date());
                if (currentDate.equalsIgnoreCase(exchangeRateDate)) {
                    return;
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
        XPath xpath = null;
        try {
            DocumentBuilderFactory docBuilderFactory = DocumentBuilderFactory.newInstance();
            DocumentBuilder docBuilder = docBuilderFactory.newDocumentBuilder();
            URLConnection conn = null;
            URL url = new URL(""http://www.ecb.int/stats/eurofxref/eurofxref-daily.xml"");
            conn = url.openConnection();
            xml = docBuilder.parse(conn.getInputStream());
            xpath = XPathFactory.newInstance().newXPath();
            exchangeRateDate = xpath.evaluate(""/Envelope/Cube/Cube/@time"", xml);
            xpath = XPathFactory.newInstance().newXPath();
            NodeList currenciesNode = (NodeList) xpath.evaluate(""/Envelope/Cube/Cube/Cube[@currency]"", xml, XPathConstants.NODESET);
            currencies = new String[currenciesNode.getLength()];
            for (int i = 0; i < currencies.length; i++) {
                currencies[i] = currenciesNode.item(i).getAttributes().getNamedItem(""currency"").getTextContent();
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
 <SPLIT>     @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException {
        InputStream is = null;
        InputStream page = null;
        OutputStream os = null;
        String rootUrl = null;
        try {
            boolean isMultipart = ServletFileUpload.isMultipartContent(request);
            if (!isMultipart) {
                request.setAttribute(""error"", ""Form isn't a multipart form"");
                RequestDispatcher rd = request.getRequestDispatcher(""/WEB-INF/error.jsp"");
                rd.forward(request, response);
            }
            ServletFileUpload upload = new ServletFileUpload();
            String webUrl = null;
            FileItemIterator iter = upload.getItemIterator(request);
            while (iter.hasNext()) {
                FileItemStream item = iter.next();
                String name = item.getFieldName();
                if (name.equals(""webpage"")) {
                    is = item.openStream();
                    ByteArrayOutputStream baos = new ByteArrayOutputStream();
                    IOUtils.copy(is, baos);
                    page = new ByteArrayInputStream(baos.toByteArray());
                } else if (name.equals(""weburl"")) {
                    InputStream wpIs = null;
                    try {
                        webUrl = Streams.asString(item.openStream());
                        URL u = new URL(webUrl);
                        wpIs = new BufferedInputStream(u.openStream());
                        ByteArrayOutputStream baos = new ByteArrayOutputStream();
                        IOUtils.copy(wpIs, baos);
                        page = new ByteArrayInputStream(baos.toByteArray());
                    } finally {
                        IOUtils.closeQuietly(wpIs);
                    }
                } else if (name.equals(""rooturl"")) {
                    rootUrl = Streams.asString(item.openStream());
                }
            }
            if (page == null) {
                request.setAttribute(""error"", ""Form doesn't have an html file"");
                RequestDispatcher rd = request.getRequestDispatcher(""/WEB-INF/error.jsp"");
                rd.forward(request, response);
            }
            ToMailerDelegate delegate = new ToMailerDelegate(page, rootUrl);
            os = new BufferedOutputStream(response.getOutputStream());
            os.write(delegate.getMailer());
            os.flush();
        } catch (Exception e) {
            streamException(request, response, e);
        } finally {
            IOUtils.closeQuietly(page);
            IOUtils.closeQuietly(is);
            IOUtils.closeQuietly(os);
        }
    }
",255,"    private void reloading() {
        if (xml != null) {
            try {
                String currentDate = new SimpleDateFormat(""yyyy-MM-dd"").format(new Date());
                if (currentDate.equalsIgnoreCase(exchangeRateDate)) {
                    return;
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
        XPath txPath = null;
        try {
            DocumentBuilderFactory docBuilderFactory = DocumentBuilderFactory.newInstance();
            DocumentBuilder fileBuilder = docBuilderFactory.newDocumentBuilder();
            URLConnection ann = null;
            URL file = new URL(""http://www.ecb.int/stats/eurofxref/eurofxref-daily.xml"");
            ann = file.openConnection();
            xml = fileBuilder.parse(ann.getInputStream());
            txPath = XPathFactory.newInstance().newXPath();
            exchangeRateDate = txPath.evaluate(""/Envelope/Cube/Cube/@time"", xml);
            txPath = XPathFactory.newInstance().newXPath();
            NodeList currenciesDocument = (NodeList) txPath.evaluate(""/Envelope/Cube/Cube/Cube[@currency]"", xml, XPathConstants.NODESET);
            currency = new String[currenciesDocument.getLength()];
            for (int chi = 0; chi < currency.length; chi++) {
                currency[chi] = currenciesDocument.item(chi).getAttributes().getNamedItem(""currency"").getTextContent();
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
",LABEL_0,LABEL_0,LABEL_1,1,"reload,currentDate,xpath,docBuilderFactory,docBuilder,conn,url,xml,exchangeRateDate,currenciesNode,currencies,i","reload:1.1920928955078125e-07,currentDate:1.9073486328125e-06,xpath:1.5497207641601562e-06,docBuilderFactory:8.58306884765625e-06,docBuilder:2.5033950805664062e-06,conn:-7.152557373046875e-07,url:2.6226043701171875e-06,xml:-2.1457672119140625e-06,exchangeRateDate:6.556510925292969e-06,currenciesNode:8.344650268554688e-07,currencies:1.1920928955078125e-07,i:3.5762786865234375e-07,",8,24,0,"docBuilderFactory:docBuilderFactory,exchangeRateDate:exchangeRateDate,url:file,docBuilder:fileBuilder,currentDate:currentDate,xpath:txPath,currenciesNode:currenciesDocument,i:chi,reload:reloading,currencies:currency,conn:ann,",0,Greedy,474,0.08461457888285319,replace,[]
138,"    @Test
    public void test_validate_tag_getTopAlbums() {
        try {
            SchemaFactory factory = SchemaFactory.newInstance(""http://www.w3.org/2001/XMLSchema"");
            File schemaLocation = new File(""tes.xsd"");
            Schema schema = factory.newSchema(schemaLocation);
            Validator validator = schema.newValidator();
            URL url = new URL(""http://ws.audioscrobbler.com/2.0/?method=tag.gettopalbums&tag=disco&api_key=b25b959554ed76058ac220b7b2e0a026"");
            InputStream inputStream = url.openStream();
            Source source = new StreamSource(inputStream);
            validator.validate(source);
        } catch (IOException ex) {
            Logger.getLogger(GetTopAlbums_Test.class.getName()).log(Level.SEVERE, null, ex);
            assertFalse(""File not found"", true);
        } catch (SAXException ex) {
            Logger.getLogger(GetTopAlbums_Test.class.getName()).log(Level.SEVERE, null, ex);
            assertFalse(""Schema did not validate"", true);
        }
        assertTrue(true);
    }
 <SPLIT>     public static void main(String[] args) {
        FTPClient client = new FTPClient();
        FileOutputStream fos = null;
        try {
            client.connect(""192.168.1.10"");
            client.login(""a"", ""123456"");
            String filename = ""i.exe"";
            fos = new FileOutputStream(filename);
            client.retrieveFile(""/"" + filename, fos);
        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            try {
                if (fos != null) {
                    fos.close();
                }
                client.disconnect();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }
",176,"    @Test
    public void test_validate_tag_getTopArtalbumls() {
        try {
            SchemaFactory pictionary = SchemaFactory.newInstance(""http://www.w3.org/2001/XMLSchema"");
            File schemePath = new File(""tes.xsd"");
            Schema masmma = pictionary.newSchema(schemePath);
            Validator Validator = masmma.newValidator();
            URL file = new URL(""http://ws.audioscrobbler.com/2.0/?method=tag.gettopalbums&tag=disco&api_key=b25b959554ed76058ac220b7b2e0a026"");
            InputStream InputFile = file.openStream();
            Source slave = new StreamSource(InputFile);
            Validator.validate(slave);
        } catch (IOException ex) {
            Logger.getLogger(GetTopAlbums_Test.class.getName()).log(Level.SEVERE, null, ex);
            assertFalse(""File not found"", true);
        } catch (SAXException ex) {
            Logger.getLogger(GetTopAlbums_Test.class.getName()).log(Level.SEVERE, null, ex);
            assertFalse(""Schema did not validate"", true);
        }
        assertTrue(true);
    }
",LABEL_0,LABEL_0,LABEL_0,-1,"test_validate_tag_getTopAlbums,factory,schemaLocation,schema,validator,url,inputStream,source","test_validate_tag_getTopAlbums:4.291534423828125e-06,factory:3.2186508178710938e-06,schemaLocation:-2.384185791015625e-07,schema:1.0728836059570312e-06,validator:-1.430511474609375e-06,url:0.0037932991981506348,inputStream:-2.1457672119140625e-06,source:-2.6226043701171875e-06,",8,15,0,"url:file,test_validate_tag_getTopAlbums:test_validate_tag_getTopArtalbumls,factory:pictionary,schema:masmma,schemaLocation:schemePath,validator:Validator,inputStream:InputFile,source:slave,",0,Greedy,256,0.04051707983016968,failed,[]
139,"    public String sendRequest(java.lang.String servletName, java.lang.String request) {
        String reqxml = """";
        org.jdom.Document retdoc = null;
        String myurl = java.util.prefs.Preferences.systemRoot().get(""serverurl"", """");
        String myport = java.util.prefs.Preferences.systemRoot().get(""portno"", ""8080"");
        if (this.serverURL == null) {
            try {
                java.net.URL codebase = newgen.presentation.NewGenMain.getAppletInstance().getCodeBase();
                if (codebase != null) serverURL = codebase.getHost(); else serverURL = ""localhost"";
            } catch (Exception exp) {
                exp.printStackTrace();
                serverURL = ""localhost"";
            }
            newgen.presentation.component.IPAddressPortNoDialog ipdig = new newgen.presentation.component.IPAddressPortNoDialog(myurl, myport);
            ipdig.show();
            serverURL = myurl = ipdig.getIPAddress();
            myport = ipdig.getPortNo();
            java.util.prefs.Preferences.systemRoot().put(""serverurl"", serverURL);
            java.util.prefs.Preferences.systemRoot().put(""portno"", myport);
            System.out.println(serverURL);
        }
        try {
            System.out.println(""http://"" + serverURL + "":"" + myport + ""/newgenlibctxt/"" + servletName);
            java.net.URL url = new java.net.URL(""http://"" + serverURL + "":"" + myport + ""/newgenlibctxt/"" + servletName);
            java.net.URLConnection urlconn = (java.net.URLConnection) url.openConnection();
            urlconn.setDoOutput(true);
            urlconn.setRequestProperty(""Content-type"", ""text/xml; charset=UTF-8"");
            java.io.OutputStream os = urlconn.getOutputStream();
            String req1xml = request;
            java.util.zip.CheckedOutputStream cos = new java.util.zip.CheckedOutputStream(os, new java.util.zip.Adler32());
            java.util.zip.GZIPOutputStream gop = new java.util.zip.GZIPOutputStream(cos);
            java.io.OutputStreamWriter dos = new java.io.OutputStreamWriter(gop, ""UTF-8"");
            System.out.println(req1xml);
            dos.write(req1xml);
            dos.flush();
            dos.close();
            System.out.println(""url conn: "" + urlconn.getContentEncoding() + ""  "" + urlconn.getContentType());
            java.io.InputStream ios = urlconn.getInputStream();
            java.util.zip.CheckedInputStream cis = new java.util.zip.CheckedInputStream(ios, new java.util.zip.Adler32());
            java.util.zip.GZIPInputStream gip = new java.util.zip.GZIPInputStream(cis);
            java.io.InputStreamReader br = new java.io.InputStreamReader(gip, ""UTF-8"");
            retdoc = (new org.jdom.input.SAXBuilder()).build(br);
        } catch (java.net.ConnectException conexp) {
            javax.swing.JOptionPane.showMessageDialog(null, newgen.presentation.NewGenMain.getAppletInstance().getMyResource().getString(""ConnectExceptionMessage""), ""Critical error"", javax.swing.JOptionPane.ERROR_MESSAGE);
        } catch (Exception exp) {
            exp.printStackTrace(System.out);
        }
        System.out.println(reqxml);
        return """";
    }
 <SPLIT>     public void create() {
        Connection conn = OrmHandler.getInstance().getSession().getConnection(this);
        Statement stat = null;
        StringBuilder sql = new StringBuilder(256);
        try {
            getRenderer().printCreateDatabase(this, sql);
            conn = createConnection();
            stat = conn.createStatement();
            stat.executeUpdate(sql.toString());
            conn.commit();
            if (LOGGER.isLoggable(Level.INFO)) {
                LOGGER.info(sql.toString());
            }
        } catch (Throwable e) {
            if (conn != null) {
                try {
                    conn.rollback();
                } catch (SQLException ex) {
                    LOGGER.log(Level.WARNING, ""Can't rollback DB"" + toString(), ex);
                }
            }
            throw new IllegalArgumentException(""Statement error:\n"" + sql, e);
        } finally {
            try {
                close(conn, stat, null, true);
            } catch (IllegalStateException ex) {
                LOGGER.log(Level.WARNING, ""Can't rollback DB"" + toString(), ex);
            }
        }
    }
",698,"    public String sendRequest(java.lang.String servletsVersion, java.lang.String request) {
        String requestdocument = """";
        org.jdom.Document  resultdoc = null;
        String yourUrl = java.util.prefs.Preferences.systemRoot().get(""serverurl"", """");
        String someport = java.util.prefs.Preferences.systemRoot().get(""portno"", ""8080"");
        if (this.siteurl == null) {
            try {
                java.net.URL Codeurl = newgen.presentation.NewGenMain.getAppletInstance().getCodeBase();
                if (Codeurl != null) siteurl = Codeurl.getHost(); else siteurl = ""localhost"";
            } catch (Exception exp) {
                exp.printStackTrace();
                siteurl = ""localhost"";
            }
            newgen.presentation.component.IPAddressPortNoDialog ipsdig = new newgen.presentation.component.IPAddressPortNoDialog(yourUrl, someport);
            ipsdig.show();
            siteurl = yourUrl = ipsdig.getIPAddress();
            someport = ipsdig.getPortNo();
            java.util.prefs.Preferences.systemRoot().put(""serverurl"", siteurl);
            java.util.prefs.Preferences.systemRoot().put(""portno"", someport);
            System.out.println(siteurl);
        }
        try {
            System.out.println(""http://"" + siteurl + "":"" + someport + ""/newgenlibctxt/"" + servletsVersion);
            java.net.URL twitter = new java.net.URL(""http://"" + siteurl + "":"" + someport + ""/newgenlibctxt/"" + servletsVersion);
            java.net.URLConnection flconnection = (java.net.URLConnection) twitter.openConnection();
            flconnection.setDoOutput(true);
            flconnection.setRequestProperty(""Content-type"", ""text/xml; charset=UTF-8"");
            java.io.OutputStream ls = flconnection.getOutputStream();
            String request2x = request;
            java.util.zip.CheckedOutputStream cos = new java.util.zip.CheckedOutputStream(ls, new java.util.zip.Adler32());
            java.util.zip.GZIPOutputStream gop = new java.util.zip.GZIPOutputStream(cos);
            java.io.OutputStreamWriter dos = new java.io.OutputStreamWriter(gop, ""UTF-8"");
            System.out.println(request2x);
            dos.write(request2x);
            dos.flush();
            dos.close();
            System.out.println(""url conn: "" + flconnection.getContentEncoding() + ""  "" + flconnection.getContentType());
            java.io.InputStream ios = flconnection.getInputStream();
            java.util.zip.CheckedInputStream cis = new java.util.zip.CheckedInputStream(ios, new java.util.zip.Adler32());
            java.util.zip.GZIPInputStream gip = new java.util.zip.GZIPInputStream(cis);
            java.io.InputStreamReader br = new java.io.InputStreamReader(gip, ""UTF-8"");
             resultdoc = (new org.jdom.input.SAXBuilder()).build(br);
        } catch (java.net.ConnectException conexp) {
            javax.swing.JOptionPane.showMessageDialog(null, newgen.presentation.NewGenMain.getAppletInstance().getMyResource().getString(""ConnectExceptionMessage""), ""Critical error"", javax.swing.JOptionPane.ERROR_MESSAGE);
        } catch (Exception exp) {
            exp.printStackTrace(System.out);
        }
        System.out.println(requestdocument);
        return """";
    }
",LABEL_0,LABEL_0,LABEL_0,-1,"sendRequest,servletName,request,reqxml,retdoc,myurl,myport,codebase,serverURL,ipdig,url,urlconn,os,req1xml,cos","sendRequest:0.001162707805633545,servletName:-0.11757344007492065,request:0.004757404327392578,reqxml:-0.03022754192352295,retdoc:-0.0034713149070739746,myurl:-0.06675928831100464,myport:-0.10341674089431763,codebase:-0.003626108169555664,serverURL:-0.12284940481185913,ipdig:-0.06217384338378906,url:-0.05414998531341553,urlconn:-0.1393754482269287,os:-0.007066845893859863,req1xml:0.00069427490234375,cos:-0.022886574268341064,",12,47,0,"request:request,sendRequest:sendRequest,req1xml:request2x,retdoc: resultdoc,codebase:Codeurl,os:ls,cos:cos,reqxml:requestdocument,url:twitter,ipdig:ipsdig,myurl:yourUrl,myport:someport,servletName:servletsVersion,serverURL:siteurl,urlconn:flconnection,",0,Greedy,525,0.11322938203811646,failed,[]
140,"    public static void doVersionCheck(View view) {
        view.showWaitCursor();
        try {
            URL url = new URL(jEdit.getProperty(""version-check.url""));
            InputStream in = url.openStream();
            BufferedReader bin = new BufferedReader(new InputStreamReader(in));
            String line;
            String version = null;
            String build = null;
            while ((line = bin.readLine()) != null) {
                if (line.startsWith("".version"")) version = line.substring(8).trim(); else if (line.startsWith("".build"")) build = line.substring(6).trim();
            }
            bin.close();
            if (version != null && build != null) {
                if (jEdit.getBuild().compareTo(build) < 0) newVersionAvailable(view, version, url); else {
                    GUIUtilities.message(view, ""version-check"" + "".up-to-date"", new String[0]);
                }
            }
        } catch (IOException e) {
            String[] args = { jEdit.getProperty(""version-check.url""), e.toString() };
            GUIUtilities.error(view, ""read-error"", args);
        }
        view.hideWaitCursor();
    }
 <SPLIT>     public static void main(String[] args) {
        File srcDir = new File(args[0]);
        File dstDir = new File(args[1]);
        File[] srcFiles = srcDir.listFiles();
        for (File f : srcFiles) {
            if (f.isDirectory()) continue;
            try {
                FileChannel srcChannel = new FileInputStream(f).getChannel();
                FileChannel dstChannel = new FileOutputStream(dstDir.getAbsolutePath() + System.getProperty(""file.separator"") + f.getName()).getChannel();
                ByteBuffer buffer = ByteBuffer.allocate(1024);
                int nr = 0;
                srcChannel.position(nr);
                nr += srcChannel.read(buffer);
                while (nr < f.length()) {
                    buffer.flip();
                    dstChannel.write(buffer);
                    buffer.clear();
                    nr += srcChannel.read(buffer);
                }
                srcChannel.close();
                dstChannel.close();
            } catch (IOException e) {
            }
        }
    }
",250,"    public static void doVersionCheck(View image) {
        image.showWaitCursor();
        try {
            URL file = new URL(jEdit.getProperty(""version-check.url""));
            InputStream file = file.openStream();
            BufferedReader bin = new BufferedReader(new InputStreamReader(file));
            String lc;
            String driver = null;
            String home = null;
            while ((lc = bin.readLine()) != null) {
                if (lc.startsWith("".version"")) driver = lc.substring(8).trim(); else if (lc.startsWith("".build"")) home = lc.substring(6).trim();
            }
            bin.close();
            if (driver != null && home != null) {
                if (jEdit.getBuild().compareTo(home) < 0) newVersionAvailable(image, driver, file); else {
                    GUIUtilities.message(image, ""version-check"" + "".up-to-date"", new String[0]);
                }
            }
        } catch (IOException e) {
            String[] args = { jEdit.getProperty(""version-check.url""), e.toString() };
            GUIUtilities.error(image, ""read-error"", args);
        }
        image.hideWaitCursor();
    }
",LABEL_0,LABEL_0,LABEL_1,1,"doVersionCheck,view,url,in,bin,line,version,build","doVersionCheck:-0.017462491989135742,view:0.0038990378379821777,url:0.02626866102218628,in:0.003448307514190674,bin:-0.010680139064788818,line:-0.008902251720428467,version:-0.0014491677284240723,build:0.0005995035171508789,",6,25,0,"url:file,view:image,in:file,build:home,version:driver,line:lc,",0,Greedy,345,0.0530884583791097,replace,[]
141,"    public static File copyFile(File fileToCopy, File copiedFile) {
        BufferedInputStream in = null;
        BufferedOutputStream outWriter = null;
        if (!copiedFile.exists()) {
            try {
                copiedFile.createNewFile();
            } catch (IOException e1) {
                e1.printStackTrace();
                return null;
            }
        }
        try {
            in = new BufferedInputStream(new FileInputStream(fileToCopy), 4096);
            outWriter = new BufferedOutputStream(new FileOutputStream(copiedFile), 4096);
            int c;
            while ((c = in.read()) != -1) outWriter.write(c);
            in.close();
            outWriter.close();
        } catch (FileNotFoundException e) {
            e.printStackTrace();
            return null;
        } catch (IOException e) {
            e.printStackTrace();
            return null;
        }
        return copiedFile;
    }
 <SPLIT>     public final int wordFrequency(String word) {
        String replWebQuery = webQuery.replaceFirst(""WORDREPLACE"", word);
        try {
            URL url = new URL(replWebQuery);
            String content = url.toString();
            BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));
            String inputLine;
            while ((inputLine = in.readLine()) != null) {
                if (inputLine.matches(nrResultsPattern)) {
                    int fr = matchedLine(inputLine);
                    if (fr >= 0) {
                        return fr;
                    }
                }
            }
        } catch (MalformedURLException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
        return 0;
    }
",163,"    public static File copyFile(File fileToCopy, File copiedFile) {
        BufferedInputStream in = null;
        BufferedOutputStream outWriter = null;
        if (!copiedFile.exists()) {
            try {
                copiedFile.createNewFile();
            } catch (IOException e1) {
                e1.printStackTrace();
                return null;
            }
        }
        try {
            in = new BufferedInputStream(new FileInputStream(fileToCopy), 4096);
            outWriter = new BufferedOutputStream(new FileOutputStream(copiedFile), 4096);
            int c;
            while ((c = in.read()) != -1) outWriter.write(c);
            in.close();
            outWriter.close();
        } catch (FileNotFoundException e) {
            e.printStackTrace();
            return null;
        } catch (IOException e) {
            e.printStackTrace();
            return null;
        }
        return copiedFile;
    }
",LABEL_0,LABEL_0,LABEL_0,-1,"copyFile,fileToCopy,copiedFile,in,outWriter,c","copyFile:-0.004420816898345947,fileToCopy:-0.002444922924041748,copiedFile:0.08810293674468994,in:-0.016421139240264893,outWriter:0.031153738498687744,c:-0.0003737211227416992,",0,0,0,"copiedFile:copiedFile,outWriter:outWriter,c:c,fileToCopy:fileToCopy,copyFile:copyFile,in:in,",0,Greedy,320,0.04580657084782918,failed,[]
142,"    @Override
    public InputStream getResourceByClassName(String className) {
        URL url = resourceFetcher.getResource(""/fisce_scripts/"" + className + "".class"");
        if (url == null) {
            return null;
        } else {
            try {
                return url.openStream();
            } catch (IOException e) {
                return null;
            }
        }
    }
 <SPLIT>     public Processing getProcess(long processId) throws BookKeeprCommunicationException {
        try {
            synchronized (httpClient) {
                HttpGet req = new HttpGet(remoteHost.getUrl() + ""/id/"" + Long.toHexString(processId));
                HttpResponse resp = httpClient.execute(req);
                if (resp.getStatusLine().getStatusCode() == HttpStatus.SC_OK) {
                    try {
                        XMLAble xmlable = XMLReader.read(resp.getEntity().getContent());
                        if (xmlable instanceof Processing) {
                            Processing p = (Processing) xmlable;
                            return p;
                        } else {
                            throw new BookKeeprCommunicationException(""BookKeepr returned the wrong thing for pointingID"");
                        }
                    } catch (SAXException ex) {
                        Logger.getLogger(BookKeeprConnection.class.getName()).log(Level.WARNING, ""Got a malformed message from the bookkeepr"", ex);
                        throw new BookKeeprCommunicationException(ex);
                    }
                } else {
                    resp.getEntity().consumeContent();
                    throw new BookKeeprCommunicationException(""Got a "" + resp.getStatusLine().getStatusCode() + "" from the BookKeepr"");
                }
            }
        } catch (HttpException ex) {
            throw new BookKeeprCommunicationException(ex);
        } catch (IOException ex) {
            throw new BookKeeprCommunicationException(ex);
        } catch (URISyntaxException ex) {
            throw new BookKeeprCommunicationException(ex);
        }
    }
",64,"    @Override
    public InputStream getResourceByclassString(String classname) {
        URL http = resourceFetcher.getResource(""/fisce_scripts/"" + classname + "".class"");
        if (http == null) {
            return null;
        } else {
            try {
                return http.openStream();
            } catch (IOException e) {
                return null;
            }
        }
    }
",LABEL_0,LABEL_0,LABEL_0,-1,"getResourceByClassName,className,url","getResourceByClassName:7.152557373046875e-07,className:9.5367431640625e-07,url:-3.5762786865234375e-07,",3,6,0,"className:classname,getResourceByClassName:getResourceByclassString,url:http,",0,Greedy,98,0.014476486047108968,failed,[]
143,"    public static void copyFile(File src, File dest, int bufSize, boolean force) throws IOException {
        logger.info(""copyFile(File src="" + src + "", File dest="" + dest + "", int bufSize="" + bufSize + "", boolean force="" + force + "") - start"");
        File f = new File(Configuration.getArchiveDir());
        if (!f.exists()) {
            f.mkdir();
        }
        if (dest.exists()) {
            if (force) {
                dest.delete();
            } else {
                throw new IOException(""Cannot overwrite existing file: "" + dest);
            }
        }
        byte[] buffer = new byte[bufSize];
        int read = 0;
        InputStream in = null;
        OutputStream out = null;
        try {
            in = new FileInputStream(src);
            out = new FileOutputStream(dest);
            while (true) {
                read = in.read(buffer);
                if (read == -1) {
                    break;
                }
                out.write(buffer, 0, read);
            }
        } finally {
            if (in != null) {
                try {
                    in.close();
                } finally {
                    if (out != null) {
                        out.close();
                    }
                }
            }
        }
        logger.debug(""copyFile(File, File, int, boolean) - end"");
    }
 <SPLIT>     private void Submit2URL(URL url) throws Exception {
        HttpURLConnection urlc = null;
        try {
            urlc = (HttpURLConnection) url.openConnection();
            urlc.setRequestMethod(""GET"");
            urlc.setDoOutput(true);
            urlc.setDoInput(true);
            urlc.setUseCaches(false);
            urlc.setAllowUserInteraction(false);
            if (urlc.getResponseCode() != 200) {
                InputStream in = null;
                Reader reader = null;
                try {
                    in = urlc.getInputStream();
                    reader = new InputStreamReader(in, ""UTF-8"");
                    int read = 0;
                    char[] buf = new char[1024];
                    String error = null;
                    while ((read = reader.read(buf)) >= 0) {
                        if (error == null) error = new String(buf, 0, read); else error += new String(buf, 0, read);
                    }
                    throw new NpsException(error, ErrorHelper.SYS_UNKOWN);
                } finally {
                    if (reader != null) try {
                        reader.close();
                    } catch (Exception e1) {
                    }
                    if (in != null) try {
                        in.close();
                    } catch (Exception e1) {
                    }
                }
            }
        } finally {
            if (urlc != null) try {
                urlc.disconnect();
            } catch (Exception e1) {
            }
        }
    }
",249,,LABEL_0,LABEL_1,,-4,"copyFile,src,dest,bufSize,force,f,buffer,read,in,out",,,,0,,0,Greedy,1,0.00047536691029866535,,[]
144,"    public String getPasswordMD5() {
        try {
            MessageDigest algorithm = MessageDigest.getInstance(""MD5"");
            algorithm.reset();
            algorithm.update(password.getBytes());
            byte messageDigest[] = algorithm.digest();
            StringBuffer hexString = new StringBuffer();
            for (int i = 0; i < messageDigest.length; i++) {
                hexString.append(Integer.toHexString(0xFF & messageDigest[i]));
            }
            return hexString.toString();
        } catch (NoSuchAlgorithmException nsae) {
        }
        return null;
    }
 <SPLIT>     private boolean authenticate(Module module) throws Exception {
        SecureRandom rand = SecureRandom.getInstance(""SHA1PRNG"");
        rand.setSeed(System.currentTimeMillis());
        byte[] challenge = new byte[16];
        rand.nextBytes(challenge);
        String b64 = Util.base64(challenge);
        Util.writeASCII(out, RSYNCD_AUTHREQD + b64 + ""\n"");
        String reply = Util.readLine(in);
        if (reply.indexOf("" "") < 0) {
            Util.writeASCII(out, AT_ERROR + "": bad response\n"");
            if (remoteVersion < 25) Util.writeASCII(out, RSYNCD_EXIT + ""\n"");
            socket.close();
            throw new IOException(""bad response"");
        }
        String user = reply.substring(0, reply.indexOf("" ""));
        String response = reply.substring(reply.indexOf("" "") + 1);
        if (!module.users.contains(user)) {
            Util.writeASCII(out, AT_ERROR + "": user "" + user + "" not allowed\n"");
            if (remoteVersion < 25) Util.writeASCII(out, RSYNCD_EXIT + ""\n"");
            socket.close();
            throw new IOException(""user "" + user + "" not allowed"");
        }
        LineNumberReader secrets = new LineNumberReader(new FileReader(module.secretsFile));
        MessageDigest md4 = MessageDigest.getInstance(""BrokenMD4"");
        String line;
        while ((line = secrets.readLine()) != null) {
            if (line.startsWith(user + "":"")) {
                String passwd = line.substring(line.lastIndexOf("":"") + 1);
                md4.update(new byte[4]);
                md4.update(passwd.getBytes(""US-ASCII""));
                md4.update(b64.getBytes(""US-ASCII""));
                String hash = Util.base64(md4.digest());
                if (hash.equals(response)) {
                    secrets.close();
                    return true;
                } else {
                    Util.writeASCII(out, AT_ERROR + "": auth failed on module "" + module.name + ""\n"");
                    if (remoteVersion < 25) Util.writeASCII(out, RSYNCD_EXIT + ""\n"");
                    socket.close();
                    secrets.close();
                    logger.error(""auth failed on module "" + module.name);
                    return false;
                }
            }
        }
        Util.writeASCII(out, AT_ERROR + "": auth failed on module "" + module.name + ""\n"");
        if (remoteVersion < 25) Util.writeASCII(out, RSYNCD_EXIT + ""\n"");
        socket.close();
        secrets.close();
        logger.error(""auth failed on module "" + module.name);
        return false;
    }
",111,"    public String getPasswordMD256() {
        try {
            MessageDigest Alignment = MessageDigest.getInstance(""MD5"");
            Alignment.reset();
            Alignment.update(password.getBytes());
            byte  messageDigEST[] = Alignment.digest();
            StringBuffer byteString = new StringBuffer();
            for (int uri = 0; uri <  messageDigEST.length; uri++) {
                byteString.append(Integer.toHexString(0xFF &  messageDigEST[uri]));
            }
            return byteString.toString();
        } catch (NoSuchAlgorithmException nsae) {
        }
        return null;
    }
",LABEL_1,LABEL_1,LABEL_1,-1,"getPasswordMD5,algorithm,messageDigest,hexString,i","getPasswordMD5:0.005020737648010254,algorithm:-1.9490718841552734e-05,messageDigest:-0.0014430880546569824,hexString:-0.0007001161575317383,i:8.940696716308594e-06,",5,15,0,"getPasswordMD5:getPasswordMD256,i:uri,algorithm:Alignment,hexString:byteString,messageDigest: messageDigEST,",0,Greedy,223,0.03708563248316447,failed,[]
145,"    public NodeId generateTopicId(String topicName) {
        MessageDigest md = null;
        try {
            md = MessageDigest.getInstance(""SHA"");
        } catch (NoSuchAlgorithmException e) {
            System.err.println(""No SHA support!"");
        }
        if (m_ready) System.out.println(""Scribe is ready at"" + getNodeId() + "" , topic is "" + topicName);
        md.update(topicName.getBytes());
        byte[] digest = md.digest();
        NodeId newId = new NodeId(digest);
        return newId;
    }
 <SPLIT>     public static byte[] getSystemStateHash() {
        MessageDigest sha1;
        try {
            sha1 = MessageDigest.getInstance(""SHA1"");
        } catch (Exception e) {
            throw new Error(""Error in RandomSeed, no sha1 hash"");
        }
        sha1.update((byte) System.currentTimeMillis());
        sha1.update((byte) Runtime.getRuntime().totalMemory());
        sha1.update((byte) Runtime.getRuntime().freeMemory());
        sha1.update(stackDump(new Throwable()));
        try {
            Properties props = System.getProperties();
            Enumeration names = props.propertyNames();
            while (names.hasMoreElements()) {
                String name = (String) names.nextElement();
                sha1.update(name.getBytes());
                sha1.update(props.getProperty(name).getBytes());
            }
        } catch (Throwable t) {
            sha1.update(stackDump(t));
        }
        sha1.update((byte) System.currentTimeMillis());
        try {
            sha1.update(InetAddress.getLocalHost().toString().getBytes());
        } catch (Throwable t) {
            sha1.update(stackDump(t));
        }
        sha1.update((byte) System.currentTimeMillis());
        Runtime.getRuntime().gc();
        sha1.update((byte) Runtime.getRuntime().freeMemory());
        sha1.update((byte) System.currentTimeMillis());
        return sha1.digest();
    }
",106,"    public NodeId generatetopicID(String topName) {
        MessageDigest ld = null;
        try {
            ld = MessageDigest.getInstance(""SHA"");
        } catch (NoSuchAlgorithmException e) {
            System.err.println(""No SHA support!"");
        }
        if (m_ready) System.out.println(""Scribe is ready at"" + getNodeId() + "" , topic is "" + topName);
        ld.update(topName.getBytes());
        byte[] dest = ld.dest();
        NodeId NewID = new NodeId(dest);
        return NewID;
    }
",LABEL_1,LABEL_1,LABEL_1,-1,"generateTopicId,topicName,md,digest,newId","generateTopicId:-0.0057029128074646,topicName:-0.0066339969635009766,md:-0.003546595573425293,digest:-0.0001227259635925293,newId:-0.0054506659507751465,",5,13,0,"digest:dest,md:ld,newId:NewID,generateTopicId:generatetopicID,topicName:topName,",0,Greedy,165,0.025656787554423015,failed,[]
146,"    private byte[] scramble411(String password, String seed) {
        MessageDigest md;
        try {
            md = MessageDigest.getInstance(""SHA-1"");
            byte[] passwordHashStage1 = md.digest(password.getBytes());
            md.reset();
            byte[] passwordHashStage2 = md.digest(passwordHashStage1);
            md.reset();
            md.update(seed.getBytes());
            md.update(passwordHashStage2);
            byte[] toBeXord = md.digest();
            int numToXor = toBeXord.length;
            for (int i = 0; i < numToXor; i++) {
                toBeXord[i] = (byte) (toBeXord[i] ^ passwordHashStage1[i]);
            }
            return toBeXord;
        } catch (NoSuchAlgorithmException e) {
            if (logger.isLoggable(Level.SEVERE)) {
                logger.log(Level.SEVERE, e.getMessage(), e);
            }
        }
        return null;
    }
 <SPLIT>     public static void copy(File srcPath, File dstPath) throws IOException {
        if (srcPath.isDirectory()) {
            if (!dstPath.exists()) {
                boolean result = dstPath.mkdir();
                if (!result) throw new IOException(""Unable to create directoy: "" + dstPath);
            }
            String[] files = srcPath.list();
            for (String file : files) {
                copy(new File(srcPath, file), new File(dstPath, file));
            }
        } else {
            if (srcPath.exists()) {
                FileChannel in = null;
                FileChannel out = null;
                try {
                    in = new FileInputStream(srcPath).getChannel();
                    out = new FileOutputStream(dstPath).getChannel();
                    long size = in.size();
                    MappedByteBuffer buf = in.map(FileChannel.MapMode.READ_ONLY, 0, size);
                    out.write(buf);
                } finally {
                    if (in != null) in.close();
                    if (out != null) out.close();
                }
            }
        }
    }
",187,"    private byte[] scramble123(String email, String Salt) {
        MessageDigest  MD;
        try {
             MD = MessageDigest.getInstance(""SHA-1"");
            byte[] passwordHashstage4 =  MD.digest(email.getBytes());
             MD.reset();
            byte[] passwordSumStageTwo =  MD.digest(passwordHashstage4);
             MD.reset();
             MD.update(Salt.getBytes());
             MD.update(passwordSumStageTwo);
            byte[] toBeZORD =  MD.digest();
            int numToxOR = toBeZORD.length;
            for (int k = 0; k < numToxOR; k++) {
                toBeZORD[k] = (byte) (toBeZORD[k] ^ passwordHashstage4[k]);
            }
            return toBeZORD;
        } catch (NoSuchAlgorithmException e) {
            if (logger.isLoggable(Level.SEVERE)) {
                logger.log(Level.SEVERE, e.getMessage(), e);
            }
        }
        return null;
    }
",LABEL_0,LABEL_0,LABEL_0,-1,"scramble411,password,seed,md,passwordHashStage1,passwordHashStage2,toBeXord,numToXor,i","scramble411:0.018268465995788574,password:0.0014000535011291504,seed:0.005726337432861328,md:0.0034201741218566895,passwordHashStage1:0.046634554862976074,passwordHashStage2:0.031903624534606934,toBeXord:0.07000881433486938,numToXor:0.024500668048858643,i:-0.002034604549407959,",9,32,0,"toBeXord:toBeZORD,passwordHashStage1:passwordHashstage4,passwordHashStage2:passwordSumStageTwo,numToXor:numToxOR,scramble411:scramble123,seed:Salt,md: MD,password:email,i:k,",0,Greedy,414,0.0636771281560262,failed,[]
147,"    private static void main(String[] args) {
        try {
            File f = new File(""test.txt"");
            if (f.exists()) {
                throw new IOException(f + "" already exists.  I don't want to overwrite it."");
            }
            StraightStreamReader in;
            char[] cbuf = new char[0x1000];
            int read;
            int totRead;
            FileOutputStream out = new FileOutputStream(f);
            for (int i = 0x00; i < 0x100; i++) {
                out.write(i);
            }
            out.close();
            in = new StraightStreamReader(new FileInputStream(f));
            for (int i = 0x00; i < 0x100; i++) {
                read = in.read();
                if (read != i) {
                    System.err.println(""Error: "" + i + "" read as "" + read);
                }
            }
            in.close();
            in = new StraightStreamReader(new FileInputStream(f));
            totRead = in.read(cbuf);
            if (totRead != 0x100) {
                System.err.println(""Simple buffered read did not read the full amount: 0x"" + Integer.toHexString(totRead));
            }
            for (int i = 0x00; i < totRead; i++) {
                if (cbuf[i] != i) {
                    System.err.println(""Error: 0x"" + i + "" read as 0x"" + cbuf[i]);
                }
            }
            in.close();
            in = new StraightStreamReader(new FileInputStream(f));
            totRead = 0;
            while (totRead <= 0x100 && (read = in.read(cbuf, totRead, 0x100 - totRead)) > 0) {
                totRead += read;
            }
            if (totRead != 0x100) {
                System.err.println(""Not enough read. Bytes read: "" + Integer.toHexString(totRead));
            }
            for (int i = 0x00; i < totRead; i++) {
                if (cbuf[i] != i) {
                    System.err.println(""Error: 0x"" + i + "" read as 0x"" + cbuf[i]);
                }
            }
            in.close();
            in = new StraightStreamReader(new FileInputStream(f));
            totRead = 0;
            while (totRead <= 0x100 && (read = in.read(cbuf, totRead + 0x123, 0x100 - totRead)) > 0) {
                totRead += read;
            }
            if (totRead != 0x100) {
                System.err.println(""Not enough read. Bytes read: "" + Integer.toHexString(totRead));
            }
            for (int i = 0x00; i < totRead; i++) {
                if (cbuf[i + 0x123] != i) {
                    System.err.println(""Error: 0x"" + i + "" read as 0x"" + cbuf[i + 0x123]);
                }
            }
            in.close();
            in = new StraightStreamReader(new FileInputStream(f));
            totRead = 0;
            while (totRead <= 0x100 && (read = in.read(cbuf, totRead + 0x123, 7)) > 0) {
                totRead += read;
            }
            if (totRead != 0x100) {
                System.err.println(""Not enough read. Bytes read: "" + Integer.toHexString(totRead));
            }
            for (int i = 0x00; i < totRead; i++) {
                if (cbuf[i + 0x123] != i) {
                    System.err.println(""Error: 0x"" + i + "" read as 0x"" + cbuf[i + 0x123]);
                }
            }
            in.close();
            f.delete();
        } catch (IOException x) {
            System.err.println(x.getMessage());
        }
    }
 <SPLIT>     public void buildSiteForEdit(String sBasePath, String sOutputPath, String sCtrlPath, String sMenuPath, String sIntegradorPath, String sSelPageOptions, Properties oEnvironmentProps, Properties oUserProps) throws IOException, DOMException, TransformerException, TransformerConfigurationException, MalformedURLException {
        Transformer oTransformer;
        StreamResult oStreamResult;
        StreamSource oStreamSrcXML;
        StringWriter oStrWritter;
        InputStream oXMLStream = null;
        String sTransformed;
        StringBuffer oPostTransform;
        String sKey;
        String sMedia;
        Object sVal;
        Page oCurrentPage;
        int iCloseHead, iOpenBody, iCloseBody;
        int iReaded;
        char CharBuffer[] = new char[8192];
        String sCharBuffer;
        long lElapsed = 0;
        final String sSep = System.getProperty(""file.separator"");
        if (DebugFile.trace) {
            lElapsed = System.currentTimeMillis();
            DebugFile.writeln(""Begin Pageset.buildSiteForEdit("" + sBasePath + "","" + sOutputPath + "","" + sCtrlPath + "","" + sMenuPath + "")"");
            DebugFile.incIdent();
        }
        FileSystem oFS = new FileSystem();
        Vector vPages = pages();
        if (!sBasePath.endsWith(sSep)) sBasePath += sSep;
        String sWebServer = oEnvironmentProps.getProperty(""webserver"", """");
        if (DebugFile.trace && sWebServer.length() == 0) DebugFile.writeln(""WARNING: webserver property not set at EnvironmentProperties"");
        if (!sWebServer.endsWith(""/"")) sWebServer += ""/"";
        Node oContainers = oMSite.seekChildByName(oMSite.getRootNode().getFirstChild(), ""containers"");
        if (oContainers == null) {
            if (DebugFile.trace) DebugFile.writeln(""ERROR: <containers> node not found."");
            throw new DOMException(DOMException.NOT_FOUND_ERR, ""<containers> node not found"");
        }
        if (DebugFile.trace) DebugFile.writeln(""new FileInputStream("" + (sURI.startsWith(""file://"") ? sURI.substring(7) : sURI) + "")"");
        for (int c = 0; c < vPages.size(); c++) {
            oCurrentPage = (Page) vPages.get(c);
            oXMLStream = new FileInputStream(sURI.startsWith(""file://"") ? sURI.substring(7) : sURI);
            oStreamSrcXML = new StreamSource(oXMLStream);
            oStrWritter = new StringWriter();
            oStreamResult = new StreamResult(oStrWritter);
            try {
                oTransformer = StylesheetCache.newTransformer(sBasePath + ""xslt"" + sSep + ""templates"" + sSep + oMSite.name() + sSep + oCurrentPage.template());
                sMedia = oTransformer.getOutputProperty(OutputKeys.MEDIA_TYPE);
                if (DebugFile.trace) DebugFile.writeln(OutputKeys.MEDIA_TYPE + ""="" + sMedia);
                if (null == sMedia) sMedia = ""html""; else sMedia = sMedia.substring(sMedia.indexOf('/') + 1);
                if (null == oCurrentPage.getTitle()) throw new NullPointerException(""Page "" + String.valueOf(c) + "" title is null"");
                if (DebugFile.trace) DebugFile.writeln(""Page.filePath("" + sOutputPath + oCurrentPage.getTitle().replace(' ', '_') + ""."" + sMedia + "")"");
                oCurrentPage.filePath(sOutputPath + oCurrentPage.getTitle().replace(' ', '_') + ""."" + sMedia);
                StylesheetCache.setParameters(oTransformer, oEnvironmentProps);
                StylesheetCache.setParameters(oTransformer, oUserProps);
                oTransformer.setParameter(""param_page"", ((Page) (vPages.get(c))).getTitle());
                oTransformer.transform(oStreamSrcXML, oStreamResult);
            } catch (TransformerConfigurationException e) {
                oLastXcpt = e;
                sMedia = null;
                SourceLocator sl = e.getLocator();
                if (DebugFile.trace) {
                    if (sl == null) {
                        DebugFile.writeln(""ERROR TransformerConfigurationException "" + e.getMessage());
                    } else {
                        DebugFile.writeln(""ERROR TransformerConfigurationException "" + e.getMessage() + "" line="" + String.valueOf(sl.getLineNumber()) + "" column="" + String.valueOf(sl.getColumnNumber()));
                    }
                }
            } catch (TransformerException e) {
                oLastXcpt = e;
                sMedia = null;
                if (DebugFile.trace) DebugFile.writeln(""ERROR TransformerException "" + e.getMessageAndLocation());
            }
            oTransformer = null;
            oStreamResult = null;
            sTransformed = oStrWritter.toString();
            if (DebugFile.trace) DebugFile.writeln(""transformation length="" + String.valueOf(sTransformed.length()));
            if (sTransformed.length() > 0) {
                iCloseHead = sTransformed.indexOf(""</head"");
                if (iCloseHead < 0) iCloseHead = sTransformed.indexOf(""</HEAD"");
                iOpenBody = sTransformed.indexOf(""<body"", iCloseHead);
                if (iOpenBody < 0) iOpenBody = sTransformed.indexOf(""<BODY"", iCloseHead);
                iCloseBody = sTransformed.indexOf("">"", iOpenBody + 5);
                for (char s = sTransformed.charAt(iCloseBody + 1); s == '\r' || s == '\n' || s == ' ' || s == '\t'; s = sTransformed.charAt(++iCloseBody)) ;
                oPostTransform = new StringBuffer(sTransformed.length() + 4096);
                oPostTransform.append(sTransformed.substring(0, iCloseHead));
                oPostTransform.append(""\n<script language=\""JavaScript\"" src=\"""" + sMenuPath + ""\""></script>"");
                oPostTransform.append(""\n<script language=\""JavaScript\"" src=\"""" + sIntegradorPath + ""\""></script>\n"");
                oPostTransform.append(sTransformed.substring(iCloseHead, iCloseHead + 7));
                oPostTransform.append(sTransformed.substring(iOpenBody, iCloseBody));
                try {
                    sCharBuffer = oFS.readfilestr(sCtrlPath, ""UTF-8"");
                    if (DebugFile.trace) DebugFile.writeln(String.valueOf(sCharBuffer.length()) + "" characters readed"");
                } catch (com.enterprisedt.net.ftp.FTPException ftpe) {
                    throw new IOException(ftpe.getMessage());
                }
                try {
                    if (DebugFile.trace) DebugFile.writeln(""Gadgets.replace("" + sCtrlPath + "",http://demo.hipergate.com/,"" + sWebServer + "")"");
                    Gadgets.replace(sCharBuffer, ""http://demo.hipergate.com/"", sWebServer);
                } catch (org.apache.oro.text.regex.MalformedPatternException e) {
                }
                oPostTransform.append(""<!--Begin "" + sCtrlPath + ""-->\n"");
                oPostTransform.append(sCharBuffer);
                sCharBuffer = null;
                oPostTransform.append(""\n<!--End "" + sCtrlPath + ""-->\n"");
                oPostTransform.append(sTransformed.substring(iCloseBody));
            } else {
                oPostTransform = new StringBuffer(""Page "" + ((Page) vPages.get(c)).getTitle() + "" could not be rendered."");
                if (oLastXcpt != null) oPostTransform.append(""<BR>"" + oLastXcpt.getMessageAndLocation());
            }
            if (DebugFile.trace) DebugFile.writeln(""new FileWriter("" + sOutputPath + oCurrentPage.getTitle().replace(' ', '_') + ""_."" + sMedia + "")"");
            if (sSelPageOptions.length() == 0) oFS.writefilestr(sOutputPath + oCurrentPage.getTitle().replace(' ', '_') + ""_."" + sMedia, oPostTransform.toString(), ""UTF-8""); else try {
                oFS.writefilestr(sOutputPath + oCurrentPage.getTitle().replace(' ', '_') + ""_."" + sMedia, Gadgets.replace(oPostTransform.toString(), "":selPageOptions"", sSelPageOptions), ""UTF-8"");
            } catch (Exception e) {
            }
            oPostTransform = null;
            sTransformed = null;
        }
        oXMLStream.close();
        if (DebugFile.trace) {
            DebugFile.writeln(""done in "" + String.valueOf(System.currentTimeMillis() - lElapsed) + "" miliseconds"");
            DebugFile.decIdent();
            DebugFile.writeln(""End Pageset.buildSiteForEdit()"");
        }
    }
",697,"    private static void main(String[] args) {
        try {
            File w = new File(""test.txt"");
            if (w.exists()) {
                throw new IOException(w + "" already exists.  I don't want to overwrite it."");
            }
            StraightStreamReader image;
            char[] rbul = new char[0x1000];
            int ack;
            int tatWrite;
            FileOutputStream Out = new FileOutputStream(w);
            for (int ti = 0x00; ti < 0x100; ti++) {
                Out.write(ti);
            }
            Out.close();
            image = new StraightStreamReader(new FileInputStream(w));
            for (int ti = 0x00; ti < 0x100; ti++) {
                ack = image.ack();
                if (ack != ti) {
                    System.err.println(""Error: "" + ti + "" read as "" + ack);
                }
            }
            image.close();
            image = new StraightStreamReader(new FileInputStream(w));
            tatWrite = image.ack(rbul);
            if (tatWrite != 0x100) {
                System.err.println(""Simple buffered read did not read the full amount: 0x"" + Integer.toHexString(tatWrite));
            }
            for (int ti = 0x00; ti < tatWrite; ti++) {
                if (rbul[ti] != ti) {
                    System.err.println(""Error: 0x"" + ti + "" read as 0x"" + rbul[ti]);
                }
            }
            image.close();
            image = new StraightStreamReader(new FileInputStream(w));
            tatWrite = 0;
            while (tatWrite <= 0x100 && (ack = image.ack(rbul, tatWrite, 0x100 - tatWrite)) > 0) {
                tatWrite += ack;
            }
            if (tatWrite != 0x100) {
                System.err.println(""Not enough read. Bytes read: "" + Integer.toHexString(tatWrite));
            }
            for (int ti = 0x00; ti < tatWrite; ti++) {
                if (rbul[ti] != ti) {
                    System.err.println(""Error: 0x"" + ti + "" read as 0x"" + rbul[ti]);
                }
            }
            image.close();
            image = new StraightStreamReader(new FileInputStream(w));
            tatWrite = 0;
            while (tatWrite <= 0x100 && (ack = image.ack(rbul, tatWrite + 0x123, 0x100 - tatWrite)) > 0) {
                tatWrite += ack;
            }
            if (tatWrite != 0x100) {
                System.err.println(""Not enough read. Bytes read: "" + Integer.toHexString(tatWrite));
            }
            for (int ti = 0x00; ti < tatWrite; ti++) {
                if (rbul[ti + 0x123] != ti) {
                    System.err.println(""Error: 0x"" + ti + "" read as 0x"" + rbul[ti + 0x123]);
                }
            }
            image.close();
            image = new StraightStreamReader(new FileInputStream(w));
            tatWrite = 0;
            while (tatWrite <= 0x100 && (ack = image.ack(rbul, tatWrite + 0x123, 7)) > 0) {
                tatWrite += ack;
            }
            if (tatWrite != 0x100) {
                System.err.println(""Not enough read. Bytes read: "" + Integer.toHexString(tatWrite));
            }
            for (int ti = 0x00; ti < tatWrite; ti++) {
                if (rbul[ti + 0x123] != ti) {
                    System.err.println(""Error: 0x"" + ti + "" read as 0x"" + rbul[ti + 0x123]);
                }
            }
            image.close();
            w.delete();
        } catch (IOException x) {
            System.err.println(x.getMessage());
        }
    }
",LABEL_1,LABEL_1,LABEL_1,-1,"f,in,cbuf,read,totRead,out,i","f:-0.0004298090934753418,in:0.0003132820129394531,cbuf:-0.005350053310394287,read:-0.0008109211921691895,totRead:-0.007626771926879883,out:0.0008278489112854004,i:-0.003176569938659668,",7,129,0,"out:Out,in:image,f:w,read:ack,i:ti,cbuf:rbul,totRead:tatWrite,",0,Greedy,753,0.18621504306793213,failed,[]
148,"    public static boolean encodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }
 <SPLIT>     public void insertJobLog(String userId, String[] checkId, String checkType, String objType) throws Exception {
        DBOperation dbo = null;
        Connection connection = null;
        PreparedStatement preStm = null;
        String sql = ""insert into COFFICE_JOBLOG_CHECKAUTH (USER_ID,CHECK_ID,CHECK_TYPE,OBJ_TYPE) values (?,?,?,?)"";
        String cleanSql = ""delete from COFFICE_JOBLOG_CHECKAUTH where "" + ""user_id = '"" + userId + ""' and check_type = '"" + checkType + ""' and obj_type = '"" + objType + ""'"";
        try {
            dbo = createDBOperation();
            connection = dbo.getConnection();
            connection.setAutoCommit(false);
            preStm = connection.prepareStatement(cleanSql);
            int dCount = preStm.executeUpdate();
            String sHaveIns = "","";
            preStm = connection.prepareStatement(sql);
            for (int j = 0; j < checkId.length; j++) {
                if (sHaveIns.indexOf("","" + checkId[j] + "","") < 0) {
                    preStm.setInt(1, Integer.parseInt(userId));
                    preStm.setInt(2, Integer.parseInt(checkId[j]));
                    preStm.setInt(3, Integer.parseInt(checkType));
                    preStm.setInt(4, Integer.parseInt(objType));
                    preStm.executeUpdate();
                    sHaveIns += checkId[j] + "","";
                }
            }
            connection.commit();
        } catch (Exception ex) {
            log.debug((new Date().toString()) + "" ������Ȩ��ʧ��! "");
            try {
                connection.rollback();
            } catch (SQLException e) {
                throw e;
            }
            throw ex;
        } finally {
            close(null, null, preStm, connection, dbo);
        }
    }
",194,"    public static boolean encodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream isin = null;
        java.io.OutputStream ou = null;
        try {
            isin = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);
            ou = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = isin.read(buffer)) >= 0) {
                ou.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                isin.close();
            } catch (Exception exc) {
            }
            try {
                ou.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }
",LABEL_0,LABEL_0,LABEL_0,-1,"encodeFileToFile,infile,outfile,in,out,buffer,read,success","encodeFileToFile:0.0010051131248474121,infile:0.01110982894897461,outfile:0.006501972675323486,in:-0.012176811695098877,out:-0.003839433193206787,buffer:-0.001816093921661377,read:-0.0004526376724243164,success:-0.0036259889602661133,",2,8,0,"infile:infile,outfile:outfile,encodeFileToFile:encodeFileToFile,read:read,buffer:buffer,success:success,out:ou,in:isin,",0,Greedy,356,0.05702505111694336,failed,[]
149,"    public static int createEmptyCart() {
        int SHOPPING_ID = 0;
        Connection con = null;
        try {
            con = getConnection();
        } catch (java.lang.Exception ex) {
            ex.printStackTrace();
        }
        try {
            PreparedStatement insert_cart = null;
            SHOPPING_ID = Integer.parseInt(Sequence.getSequenceNumber(""shopping_cart""));
            insert_cart = con.prepareStatement(""INSERT INTO shopping_cart (sc_id, sc_time) VALUES ( ? , NOW() )"");
            insert_cart.setInt(1, SHOPPING_ID);
            insert_cart.executeUpdate();
            con.commit();
            insert_cart.close();
            returnConnection(con);
        } catch (java.lang.Exception ex) {
            try {
                con.rollback();
                ex.printStackTrace();
            } catch (Exception se) {
                System.err.println(""Transaction rollback failed."");
            }
        }
        return SHOPPING_ID;
    }
 <SPLIT>     @Override
    public byte[] download(URI uri) throws NetworkException {
        log.info(""download: "" + uri);
        HttpGet httpGet = new HttpGet(uri.toString());
        try {
            HttpResponse httpResponse = httpClient.execute(httpGet);
            return EntityUtils.toByteArray(httpResponse.getEntity());
        } catch (IOException e) {
            throw new NetworkException(e);
        } finally {
            httpGet.abort();
        }
    }
",159,"    public static int createEmptyCart() {
        int SHOPPING_ID = 0;
        Connection con = null;
        try {
            con = getConnection();
        } catch (java.lang.Exception ex) {
            ex.printStackTrace();
        }
        try {
            PreparedStatement insert_cart = null;
            SHOPPING_ID = Integer.parseInt(Sequence.getSequenceNumber(""shopping_cart""));
            insert_cart = con.prepareStatement(""INSERT INTO shopping_cart (sc_id, sc_time) VALUES ( ? , NOW() )"");
            insert_cart.setInt(1, SHOPPING_ID);
            insert_cart.executeUpdate();
            con.commit();
            insert_cart.close();
            returnConnection(con);
        } catch (java.lang.Exception ex) {
            try {
                con.rollback();
                ex.printStackTrace();
            } catch (Exception se) {
                System.err.println(""Transaction rollback failed."");
            }
        }
        return SHOPPING_ID;
    }
",LABEL_0,LABEL_0,LABEL_0,-1,"createEmptyCart,SHOPPING_ID,con,insert_cart","createEmptyCart:0.01147758960723877,SHOPPING_ID:0.002725541591644287,con:0.0022705793380737305,insert_cart:0.0010963678359985352,",0,0,0,"createEmptyCart:createEmptyCart,SHOPPING_ID:SHOPPING_ID,con:con,insert_cart:insert_cart,",0,Greedy,158,0.023057981332143148,failed,[]
150,"    @Override
    public String readFixString(final int len) {
        if (len < 1) {
            return StringUtils.EMPTY;
        }
        final StringWriter sw = new StringWriter();
        try {
            IOUtils.copy(createLimitedInputStream(len), sw, null);
        } catch (IOException e) {
            throw createRuntimeException(e);
        }
        return sw.toString();
    }
 <SPLIT>     private void tail(String[] cmd, int pos) throws IOException {
        CommandFormat c = new CommandFormat(""tail"", 1, 1, ""f"");
        String src = null;
        Path path = null;
        try {
            List<String> parameters = c.parse(cmd, pos);
            src = parameters.get(0);
        } catch (IllegalArgumentException iae) {
            System.err.println(""Usage: java FsShell "" + TAIL_USAGE);
            throw iae;
        }
        boolean foption = c.getOpt(""f"") ? true : false;
        path = new Path(src);
        FileSystem srcFs = path.getFileSystem(getConf());
        if (srcFs.isDirectory(path)) {
            throw new IOException(""Source must be a file."");
        }
        long fileSize = srcFs.getFileStatus(path).getLen();
        long offset = (fileSize > 1024) ? fileSize - 1024 : 0;
        while (true) {
            FSDataInputStream in = srcFs.open(path);
            in.seek(offset);
            IOUtils.copyBytes(in, System.out, 1024, false);
            offset = in.getPos();
            in.close();
            if (!foption) {
                break;
            }
            fileSize = srcFs.getFileStatus(path).getLen();
            offset = (fileSize > offset) ? offset : fileSize;
            try {
                Thread.sleep(5000);
            } catch (InterruptedException e) {
                break;
            }
        }
    }
",72,"    @Override
    public String readFixString(final int len) {
        if (len < 1) {
            return StringUtils.EMPTY;
        }
        final StringWriter sw = new StringWriter();
        try {
            IOUtils.copy(createLimitedInputStream(len), sw, null);
        } catch (IOException e) {
            throw createRuntimeException(e);
        }
        return sw.toString();
    }
",LABEL_1,LABEL_1,LABEL_1,-1,"readFixString,len,sw","readFixString:-0.005166888236999512,len:0.00024276971817016602,sw:-0.0013394951820373535,",0,0,0,"len:len,sw:sw,readFixString:readFixString,",0,Greedy,117,0.017469151814778646,failed,[]
151,"    private String hashKey(String key) {
        String hashed = """";
        try {
            MessageDigest md5 = MessageDigest.getInstance(""MD5"");
            md5.update(key.getBytes());
            BigInteger hash = new BigInteger(1, md5.digest());
            hashed = hash.toString(16);
        } catch (Exception ex) {
            ex.printStackTrace();
            hashed = String.valueOf(key.hashCode());
        }
        return hashed;
    }
 <SPLIT>     public static String getMessageDigest(String[] inputs) {
        if (inputs.length == 0) return null;
        try {
            MessageDigest sha = MessageDigest.getInstance(""SHA-1"");
            for (String input : inputs) sha.update(input.getBytes());
            byte[] hash = sha.digest();
            String CPass = """";
            int h = 0;
            String s = """";
            for (int i = 0; i < 20; i++) {
                h = hash[i];
                if (h < 0) h += 256;
                s = Integer.toHexString(h);
                if (s.length() < 2) CPass = CPass.concat(""0"");
                CPass = CPass.concat(s);
            }
            CPass = CPass.toUpperCase();
            return CPass;
        } catch (NoSuchAlgorithmException e) {
            throw new IllegalStateException(e.getMessage());
        }
    }
",95,"    private String HashKey(String KEY) {
        String hashing = """";
        try {
            MessageDigest MD62 = MessageDigest.getInstance(""MD5"");
            MD62.update(KEY.getBytes());
            BigInteger num = new BigInteger(1, MD62.digest());
            hashing = num.toString(16);
        } catch (Exception ex) {
            ex.printStackTrace();
            hashing = String.valueOf(KEY.hashCode());
        }
        return hashing;
    }
",LABEL_1,LABEL_1,LABEL_1,-1,"hashKey,key,hashed,md5,hash","hashKey:0.0019147992134094238,key:0.0023990273475646973,hashed:-0.004914641380310059,md5:0.002890646457672119,hash:0.0018596649169921875,",5,13,0,"md5:MD62,key:KEY,hashKey:HashKey,hash:num,hashed:hashing,",0,Greedy,184,0.026428596178690592,failed,[]
152,"        private void copy(File inputFile, File outputFile) throws Exception {
            FileReader in = new FileReader(inputFile);
            FileWriter out = new FileWriter(outputFile);
            int c;
            while ((c = in.read()) != -1) out.write(c);
            in.close();
            out.close();
        }
 <SPLIT>     private final String createMD5(String pwd) throws Exception {
        MessageDigest md = (MessageDigest) MessageDigest.getInstance(""MD5"").clone();
        md.update(pwd.getBytes(""UTF-8""));
        byte[] pd = md.digest();
        StringBuffer app = new StringBuffer();
        for (int i = 0; i < pd.length; i++) {
            String s2 = Integer.toHexString(pd[i] & 0xFF);
            app.append((s2.length() == 1) ? ""0"" + s2 : s2);
        }
        return app.toString();
    }
",70,"        private void php(File inputFile, File inputFilename) throws Exception {
            FileReader login = new FileReader(inputFile);
            FileWriter out = new FileWriter(inputFilename);
            int code;
            while ((code = login.read()) != -1) out.write(code);
            login.close();
            out.close();
        }
",LABEL_0,LABEL_0,LABEL_1,1,"copy,inputFile,outputFile,in,out,c","copy:-0.00027817487716674805,inputFile:-0.013863444328308105,outputFile:-0.011390507221221924,in:-0.010463714599609375,out:-0.023537397384643555,c:-0.0028967857360839844,",4,9,0,"copy:php,c:code,in:login,outputFile:inputFilename,",0,Greedy,162,0.021738711992899576,replace,[]
153,"    public void convert(File src, File dest) throws IOException {
        InputStream in = new BufferedInputStream(new FileInputStream(src));
        DcmParser p = pfact.newDcmParser(in);
        Dataset ds = fact.newDataset();
        p.setDcmHandler(ds.getDcmHandler());
        try {
            FileFormat format = p.detectFileFormat();
            if (format != FileFormat.ACRNEMA_STREAM) {
                System.out.println(""\n"" + src + "": not an ACRNEMA stream!"");
                return;
            }
            p.parseDcmFile(format, Tags.PixelData);
            if (ds.contains(Tags.StudyInstanceUID) || ds.contains(Tags.SeriesInstanceUID) || ds.contains(Tags.SOPInstanceUID) || ds.contains(Tags.SOPClassUID)) {
                System.out.println(""\n"" + src + "": contains UIDs!"" + "" => probable already DICOM - do not convert"");
                return;
            }
            boolean hasPixelData = p.getReadTag() == Tags.PixelData;
            boolean inflate = hasPixelData && ds.getInt(Tags.BitsAllocated, 0) == 12;
            int pxlen = p.getReadLength();
            if (hasPixelData) {
                if (inflate) {
                    ds.putUS(Tags.BitsAllocated, 16);
                    pxlen = pxlen * 4 / 3;
                }
                if (pxlen != (ds.getInt(Tags.BitsAllocated, 0) >>> 3) * ds.getInt(Tags.Rows, 0) * ds.getInt(Tags.Columns, 0) * ds.getInt(Tags.NumberOfFrames, 1) * ds.getInt(Tags.NumberOfSamples, 1)) {
                    System.out.println(""\n"" + src + "": mismatch pixel data length!"" + "" => do not convert"");
                    return;
                }
            }
            ds.putUI(Tags.StudyInstanceUID, uid(studyUID));
            ds.putUI(Tags.SeriesInstanceUID, uid(seriesUID));
            ds.putUI(Tags.SOPInstanceUID, uid(instUID));
            ds.putUI(Tags.SOPClassUID, classUID);
            if (!ds.contains(Tags.NumberOfSamples)) {
                ds.putUS(Tags.NumberOfSamples, 1);
            }
            if (!ds.contains(Tags.PhotometricInterpretation)) {
                ds.putCS(Tags.PhotometricInterpretation, ""MONOCHROME2"");
            }
            if (fmi) {
                ds.setFileMetaInfo(fact.newFileMetaInfo(ds, UIDs.ImplicitVRLittleEndian));
            }
            OutputStream out = new BufferedOutputStream(new FileOutputStream(dest));
            try {
            } finally {
                ds.writeFile(out, encodeParam());
                if (hasPixelData) {
                    if (!skipGroupLen) {
                        out.write(PXDATA_GROUPLEN);
                        int grlen = pxlen + 8;
                        out.write((byte) grlen);
                        out.write((byte) (grlen >> 8));
                        out.write((byte) (grlen >> 16));
                        out.write((byte) (grlen >> 24));
                    }
                    out.write(PXDATA_TAG);
                    out.write((byte) pxlen);
                    out.write((byte) (pxlen >> 8));
                    out.write((byte) (pxlen >> 16));
                    out.write((byte) (pxlen >> 24));
                }
                if (inflate) {
                    int b2, b3;
                    for (; pxlen > 0; pxlen -= 3) {
                        out.write(in.read());
                        b2 = in.read();
                        b3 = in.read();
                        out.write(b2 & 0x0f);
                        out.write(b2 >> 4 | ((b3 & 0x0f) << 4));
                        out.write(b3 >> 4);
                    }
                } else {
                    for (; pxlen > 0; --pxlen) {
                        out.write(in.read());
                    }
                }
                out.close();
            }
            System.out.print('.');
        } finally {
            in.close();
        }
    }
 <SPLIT>     public static void CopyFile(String in, String out) throws Exception {
        FileChannel sourceChannel = new FileInputStream(new File(in)).getChannel();
        FileChannel destinationChannel = new FileOutputStream(new File(out)).getChannel();
        sourceChannel.transferTo(0, sourceChannel.size(), destinationChannel);
        sourceChannel.close();
        destinationChannel.close();
    }
",765,"    public void oconverting(File Dest, File dist) throws IOException {
        InputStream inas = new BufferedInputStream(new FileInputStream(Dest));
        DcmParser op = pfact.newDcmParser(inas);
        Dataset dist = fact.newDataset();
        op.setDcmHandler(dist.getDcmHandler());
        try {
            FileFormat path = op.detectFileFormat();
            if (path != FileFormat.ACRNEMA_STREAM) {
                System.copy.println(""
"" + Dest + "": not an ACRNEMA stream!"");
                return;
            }
            op.parseDcmFile(path, Tags.PixelData);
            if (dist.contains(Tags.StudyInstanceUID) || dist.contains(Tags.SeriesInstanceUID) || dist.contains(Tags.SOPInstanceUID) || dist.contains(Tags.SOPClassUID)) {
                System.copy.println(""
"" + Dest + "": contains UIDs!"" + "" => probable already DICOM - do not convert"");
                return;
            }
            boolean  hasPixeldata = op.getReadTag() == Tags.PixelData;
            boolean insvenate =  hasPixeldata && dist.getInt(Tags.BitsAllocated, 0) == 12;
            int pxdata = op.getReadLength();
            if ( hasPixeldata) {
                if (insvenate) {
                    dist.putUS(Tags.BitsAllocated, 16);
                    pxdata = pxdata * 4 / 3;
                }
                if (pxdata != (dist.getInt(Tags.BitsAllocated, 0) >>> 3) * dist.getInt(Tags.Rows, 0) * dist.getInt(Tags.Columns, 0) * dist.getInt(Tags.NumberOfFrames, 1) * dist.getInt(Tags.NumberOfSamples, 1)) {
                    System.copy.println(""
"" + Dest + "": mismatch pixel data length!"" + "" => do not convert"");
                    return;
                }
            }
            dist.putUI(Tags.StudyInstanceUID, uid(studyUID));
            dist.putUI(Tags.SeriesInstanceUID, uid(seriesUID));
            dist.putUI(Tags.SOPInstanceUID, uid(instUID));
            dist.putUI(Tags.SOPClassUID, classUID);
            if (!ds.contains(Tags.NumberOfSamples)) {
                dist.putUS(Tags.NumberOfSamples, 1);
            }
            if (!ds.contains(Tags.PhotometricInterpretation)) {
                dist.putCS(Tags.PhotometricInterpretation, ""MONOCHROME2"");
            }
            if (fmi) {
                dist.setFileMetaInfo(fact.newFileMetaInfo(dist, UIDs.ImplicitVRLittleEndian));
            }
            OutputStream copy = new BufferedOutputStream(new FileOutputStream(dist));
            try {
            } finally {
                dist.writeFile(copy, encodeParam());
                if ( hasPixeldata) {
                    if (!skipGroupLen) {
                        copy.write(PXDATA_GROUPLEN);
                        int grlen = pxdata + 8;
                        copy.write((byte) grlen);
                        copy.write((byte) (grlen >> 8));
                        copy.write((byte) (grlen >> 16));
                        copy.write((byte) (grlen >> 24));
                    }
                    copy.write(PXDATA_TAG);
                    copy.write((byte) pxdata);
                    copy.write((byte) (pxdata >> 8));
                    copy.write((byte) (pxdata >> 16));
                    copy.write((byte) (pxdata >> 24));
                }
                if (insvenate) {
                    int b2, b3;
                    for (; pxdata > 0; pxdata -= 3) {
                        copy.write(inas.read());
                        b2 = inas.read();
                        b3 = inas.read();
                        copy.write(b2 & 0x0f);
                        copy.write(b2 >> 4 | ((b3 & 0x0f) << 4));
                        copy.write(b3 >> 4);
                    }
                } else {
                    for (; pxdata > 0; --pxdata) {
                        copy.write(inas.read());
                    }
                }
                copy.close();
            }
            System.copy.print('.');
        } finally {
            inas.close();
        }
    }
",LABEL_1,LABEL_1,LABEL_1,-1,"convert,src,dest,in,p,ds,format,hasPixelData,inflate,pxlen,out","convert:0.0011878609657287598,src:-0.001347184181213379,dest:-0.00109940767288208,in:0.00021797418594360352,p:0.0019341111183166504,ds:0.002453327178955078,format:0.0008627772331237793,hasPixelData:-9.846687316894531e-05,inflate:-0.0010129213333129883,pxlen:0.0006909966468811035,out:-0.0007100701332092285,",11,92,0,"ds:dist,p:op,convert:oconverting,format:path,pxlen:pxdata,in:inas,hasPixelData: hasPixeldata,out:copy,inflate:insvenate,dest:dist,src:Dest,",0,Greedy,606,0.12014617919921874,failed,[]
154,"    public void uploadFile(File inputFile, String targetFile) throws IOException {
        System.out.println(""Uploading "" + inputFile.getName() + "" to "" + targetFile);
        File outputFile = new File(targetFile);
        if (targetFile.endsWith(""/"")) {
            outputFile = new File(outputFile, inputFile.getName());
        } else if (outputFile.getParentFile().exists() == false) {
            outputFile.getParentFile().mkdirs();
        }
        if (inputFile.renameTo(outputFile) == false) {
            InputStream in = new FileInputStream(inputFile);
            OutputStream out = new FileOutputStream(outputFile);
            byte[] line = new byte[16384];
            int bytes = -1;
            while ((bytes = in.read(line)) != -1) out.write(line, 0, bytes);
            in.close();
            out.close();
        }
    }
 <SPLIT>     public static void extractFile(String input, String output) throws ZipException, IOException {
        FileReader reader = new FileReader(input);
        InputStream in = reader.getInputStream();
        OutputStream out = new FileOutputStream(new File(output));
        byte[] buf = new byte[512];
        int len;
        while ((len = in.read(buf)) > 0) out.write(buf, 0, len);
        reader.close();
        out.close();
    }
",188,"    public void  uploadfile(File inputFile, String targetFile) throws IOException {
        System.out.println(""Uploading "" + inputFile.getName() + "" to "" + targetFile);
        File OutputFolder = new File(targetFile);
        if (targetFile.endsWith(""/"")) {
            OutputFolder = new File(OutputFolder, inputFile.getName());
        } else if (OutputFolder.getParentFile().exists() == false) {
            OutputFolder.getParentFile().mkdirs();
        }
        if (inputFile.renameTo(OutputFolder) == false) {
            InputStream url = new FileInputStream(inputFile);
            OutputStream out = new FileOutputStream(OutputFolder);
            byte[] line = new byte[16384];
            int bytes = -1;
            while ((bytes = url.read(line)) != -1) out.write(line, 0, bytes);
            url.close();
            out.close();
        }
    }
",LABEL_1,LABEL_1,LABEL_0,1,"uploadFile,inputFile,targetFile,outputFile,in,out,line,bytes","uploadFile:0.0010001659393310547,inputFile:-0.002626180648803711,targetFile:-0.006042301654815674,outputFile:0.0006603002548217773,in:0.000699460506439209,out:-0.005386412143707275,line:0.000560760498046875,bytes:-0.0010681748390197754,",3,11,0,"uploadFile: uploadfile,in:url,outputFile:OutputFolder,",0,Greedy,148,0.021178917090098063,replace,[]
155,"    public boolean resourceExists(String location) {
        if ((location == null) || (location.length() == 0)) {
            return false;
        }
        try {
            URL url = buildURL(location);
            URLConnection cxn = url.openConnection();
            InputStream is = null;
            try {
                byte[] byteBuffer = new byte[2048];
                is = cxn.getInputStream();
                while (is.read(byteBuffer, 0, 2048) >= 0) ;
                return true;
            } finally {
                if (is != null) {
                    is.close();
                }
            }
        } catch (IOException ex) {
            return false;
        }
    }
 <SPLIT>     public synchronized String encrypt(String plaintext) throws NoSuchAlgorithmException, UnsupportedEncodingException {
        MessageDigest md = null;
        md = MessageDigest.getInstance(""SHA"");
        md.update(plaintext.getBytes(""UTF-8""));
        byte raw[] = md.digest();
        String hash = (new BASE64Encoder()).encode(raw);
        return hash;
    }
",126,"    public boolean  fileexits(String connection) {
        if ((connection == null) || (connection.length() == 0)) {
            return false;
        }
        try {
            URL image = buildURL(connection);
            URLConnection Cxn = image.openConnection();
            InputStream in = null;
            try {
                byte[] ByteBuff = new byte[2048];
                in = Cxn.getInputStream();
                while (in.read(ByteBuff, 0, 2048) >= 0) ;
                return true;
            } finally {
                if (in != null) {
                    in.close();
                }
            }
        } catch (IOException ex) {
            return false;
        }
    }
",LABEL_0,LABEL_0,LABEL_0,-1,"resourceExists,location,url,cxn,is,byteBuffer","resourceExists:0.0002256631851196289,location:5.7220458984375e-06,url:9.894371032714844e-06,cxn:3.4570693969726562e-06,is:6.413459777832031e-05,byteBuffer:1.1205673217773438e-05,",6,16,0,"resourceExists: fileexits,is:in,byteBuffer:ByteBuff,url:image,location:connection,cxn:Cxn,",0,Greedy,252,0.03443394104639689,failed,[]
156,"    public static boolean decodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }
 <SPLIT>     public void writeData(String name, int items, int mzmin, int mzmax, long tstart, long tdelta, int[] peaks) {
        PrintWriter file = getWriter(name + "".txt"");
        file.print(""Filename\t"");
        file.print(""Date\t"");
        file.print(""Acquisition #\t"");
        file.print(""�m Diameter\t"");
        for (int i = mzmin; i <= mzmax; i++) file.print(i + ""\t"");
        file.println();
        int nothing = 0;
        String fileLoc = ""C:/abcd/"" + name + "".txt\t"";
        Date tempDate;
        for (int i = 0; i < items; i++) {
            tempDate = new Date(tstart);
            tstart += tdelta;
            file.print(fileLoc);
            file.print(dateFormat.format(tempDate) + ""\t"");
            file.print(i + 1 + ""\t"");
            double t = (double) (i) / 10;
            file.print(t + ""\t"");
            boolean peaked = false;
            for (int k = mzmin; k <= mzmax; k++) {
                for (int j = 0; j < peaks.length && !peaked; j++) {
                    if (k == peaks[j]) {
                        file.print(peakVals[j % peakVals.length] + ""\t"");
                        peaked = true;
                    }
                }
                if (!peaked) {
                    if (k == mzmax) file.print(nothing); else file.print(nothing + ""\t"");
                }
                peaked = false;
            }
            file.println();
        }
        try {
            Scanner test = new Scanner(f);
            while (test.hasNext()) {
                System.out.println(test.nextLine());
            }
            System.out.println(""test"");
        } catch (Exception e) {
        }
        file.close();
    }
",194,"    public static boolean decodeString2String(String Instream, String outputfilename) {
        boolean open = false;
        java.io.InputStream conn = null;
        java.io.OutputStream copy = null;
        try {
            conn = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(Instream)), Base64.DECODE);
            copy = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outputfilename));
            byte[] url = new byte[65536];
            int  write = -1;
            while (( write = conn. write(url)) >= 0) {
                copy.write(url, 0,  write);
            }
            open = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                conn.close();
            } catch (Exception exc) {
            }
            try {
                copy.close();
            } catch (Exception exc) {
            }
        }
        return open;
    }
",LABEL_1,LABEL_1,LABEL_1,-1,"decodeFileToFile,infile,outfile,in,out,buffer,read,success","decodeFileToFile:-0.016613662242889404,infile:-0.0006636977195739746,outfile:-0.0003974437713623047,in:-0.006833255290985107,out:-0.0023461580276489258,buffer:-0.0039667487144470215,read:-0.0017274022102355957,success:0.00517195463180542,",8,23,0,"success:open,outfile:outputfilename,infile:Instream,read: write,out:copy,buffer:url,in:conn,decodeFileToFile:decodeString2String,",0,Greedy,358,0.05736746390660604,failed,[]
157,"    @TestProperties(name = ""Simple test for adding different image files to report as link"")
    public void testAddLinkToImage() throws Exception {
        InputStream in = this.getClass().getClassLoader().getResourceAsStream(""regression/generic/images/splash.jpg"");
        report.report(report.getCurrentTestFolder() + System.getProperty(""file.separator"") + ""splash.jpg"");
        IOUtils.copy(in, new FileOutputStream(new File(report.getCurrentTestFolder() + System.getProperty(""file.separator"") + ""splash.jpg"")));
        in = this.getClass().getClassLoader().getResourceAsStream(""regression/generic/images/blue.png"");
        IOUtils.copy(in, new FileOutputStream(new File(report.getCurrentTestFolder() + System.getProperty(""file.separator"") + ""blue.png"")));
        in = this.getClass().getClassLoader().getResourceAsStream(""regression/generic/images/classDir.gif"");
        IOUtils.copy(in, new FileOutputStream(new File(report.getCurrentTestFolder() + System.getProperty(""file.separator"") + ""classDir.gif"")));
        report.addLink(""Link to JPG"", ""splash.jpg"");
        report.addLink(""Link to PNG"", ""blue.png"");
        report.addLink(""Link to GIF"", ""classDir.gif"");
    }
 <SPLIT>     @Test
    public void testCopy_readerToWriter_nullIn() throws Exception {
        ByteArrayOutputStream baout = new ByteArrayOutputStream();
        OutputStream out = new YellOnFlushAndCloseOutputStreamTest(baout, true, true);
        Writer writer = new OutputStreamWriter(baout, ""US-ASCII"");
        try {
            IOUtils.copy((Reader) null, writer);
            fail();
        } catch (NullPointerException ex) {
        }
    }
",243,"    @TestProperties(name = ""Simple test for adding different image files to report as link"")
    public void testAddLinkToImage() throws Exception {
        InputStream in = this.getClass().getClassLoader().getResourceAsStream(""regression/generic/images/splash.jpg"");
        report.report(report.getCurrentTestFolder() + System.getProperty(""file.separator"") + ""splash.jpg"");
        IOUtils.copy(in, new FileOutputStream(new File(report.getCurrentTestFolder() + System.getProperty(""file.separator"") + ""splash.jpg"")));
        in = this.getClass().getClassLoader().getResourceAsStream(""regression/generic/images/blue.png"");
        IOUtils.copy(in, new FileOutputStream(new File(report.getCurrentTestFolder() + System.getProperty(""file.separator"") + ""blue.png"")));
        in = this.getClass().getClassLoader().getResourceAsStream(""regression/generic/images/classDir.gif"");
        IOUtils.copy(in, new FileOutputStream(new File(report.getCurrentTestFolder() + System.getProperty(""file.separator"") + ""classDir.gif"")));
        report.addLink(""Link to JPG"", ""splash.jpg"");
        report.addLink(""Link to PNG"", ""blue.png"");
        report.addLink(""Link to GIF"", ""classDir.gif"");
    }
",LABEL_1,LABEL_1,LABEL_1,-1,"testAddLinkToImage,in","testAddLinkToImage:0.014191269874572754,in:0.004287242889404297,",0,0,0,"testAddLinkToImage:testAddLinkToImage,in:in,",0,Greedy,98,0.014963650703430175,failed,[]
158,"    public String readRemoteFile() throws IOException {
        String response = """";
        boolean eof = false;
        URL url = new URL(StaticData.remoteFile);
        InputStream is = url.openStream();
        BufferedReader br = new BufferedReader(new InputStreamReader(is));
        String s;
        s = br.readLine();
        response = s;
        while (!eof) {
            try {
                s = br.readLine();
                if (s == null) {
                    eof = true;
                    br.close();
                } else response += s;
            } catch (EOFException eo) {
                eof = true;
            } catch (IOException e) {
                System.out.println(""IO Error : "" + e.getMessage());
            }
        }
        return response;
    }
 <SPLIT>     public String md5(String plainText) throws NoSuchAlgorithmException {
        MessageDigest md = MessageDigest.getInstance(""MD5"");
        md.update(plainText.getBytes());
        byte[] digest = md.digest();
        StringBuffer hexString = new StringBuffer();
        for (int i = 0; i < digest.length; i++) {
            plainText = Integer.toHexString(0xFF & digest[i]);
            if (plainText.length() < 2) {
                plainText = ""0"" + plainText;
            }
            hexString.append(plainText);
        }
        return hexString.toString();
    }
",149,"    public String loadremotefile() throws IOException {
        String resource = """";
        boolean eif = false;
        URL uri = new URL(StaticData.remoteFile);
        InputStream out = uri.openStream();
        BufferedReader http = new BufferedReader(new InputStreamReader(out));
        String string;
        string = http.readLine();
        resource = string;
        while (!eof) {
            try {
                string = http.readLine();
                if (string == null) {
                    eif = true;
                    http.close();
                } else resource += string;
            } catch (EOFException eo) {
                eif = true;
            } catch (IOException e) {
                System.out.println(""IO Error : "" + e.getMessage());
            }
        }
        return resource;
    }
",LABEL_0,LABEL_0,LABEL_0,-1,"readRemoteFile,response,url,is,br,s,eof","readRemoteFile:0.05943816900253296,response:-0.020358622074127197,url:-0.006808578968048096,is:-0.01108616590499878,br:-0.005028486251831055,s:-0.006797671318054199,eof:-0.1649845838546753,",7,23,0,"readRemoteFile:loadremotefile,br:http,s:string,url:uri,is:out,response:resource,eof:eif,",0,Greedy,323,0.046351953347524004,failed,[]
159,"    protected void doTransfer(HttpServletRequest request, HttpServletResponse response, String method) throws ServletException, IOException {
        ServletContext servletContext = this.getServletConfig().getServletContext();
        WebApplicationContext wac = WebApplicationContextUtils.getRequiredWebApplicationContext(servletContext);
        String szUrl = request.getParameter(""url"");
        System.out.println(szUrl);
        URL url;
        InputStream is = null;
        ServletOutputStream sout = null;
        try {
            url = new URL(szUrl);
            HttpURLConnection con = (HttpURLConnection) url.openConnection();
            Enumeration hNames = request.getHeaderNames();
            while (hNames.hasMoreElements()) {
                String txt = hNames.nextElement().toString();
                con.setRequestProperty(txt, request.getHeader(txt));
            }
            con.setRequestProperty(""host"", url.getHost());
            con.setRequestProperty(""refer"", szUrl);
            con.setRequestMethod(method);
            con.setDoOutput(true);
            con.setDoInput(true);
            InputStreamReader inBody = new InputStreamReader(request.getInputStream());
            char bufCh[] = new char[1024];
            int r;
            OutputStreamWriter outReq = new OutputStreamWriter(con.getOutputStream());
            while ((r = inBody.read(bufCh)) != -1) {
                System.out.println(bufCh);
                outReq.write(bufCh, 0, r);
            }
            outReq.flush();
            outReq.close();
            inBody.close();
            System.out.println(con.getResponseCode());
            System.out.println(con.getResponseMessage());
            if (con.getResponseCode() == con.HTTP_OK) {
                response.setContentType(con.getContentType());
                response.addHeader(""Content-Encoding"", con.getContentEncoding());
                sout = response.getOutputStream();
                is = con.getInputStream();
                byte buff[] = new byte[1024];
                while ((r = is.read(buff)) != -1) {
                    sout.write(buff, 0, r);
                    System.out.print(buff);
                }
                sout.flush();
                is.close();
                sout.close();
            } else {
                response.sendError(con.getResponseCode(), con.getResponseMessage());
            }
        } catch (MalformedURLException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
 <SPLIT>     public static String retrieveData(URL url) throws IOException {
        URLConnection connection = url.openConnection();
        connection.setRequestProperty(""User-agent"", ""MZmine 2"");
        InputStream is = connection.getInputStream();
        if (is == null) {
            throw new IOException(""Could not establish a connection to "" + url);
        }
        StringBuffer buffer = new StringBuffer();
        try {
            InputStreamReader reader = new InputStreamReader(is, ""UTF-8"");
            char[] cb = new char[1024];
            int amtRead = reader.read(cb);
            while (amtRead > 0) {
                buffer.append(cb, 0, amtRead);
                amtRead = reader.read(cb);
            }
        } catch (UnsupportedEncodingException e) {
            e.printStackTrace();
        }
        is.close();
        return buffer.toString();
    }
",484,"    protected void makeTransfer(HttpServletRequest QUEST, HttpServletResponse en, String send) throws ServletException, IOException {
        ServletContext servleCurrent = this.getServletConfig().getServletContext();
        WebApplicationContext wAC = WebApplicationContextUtils.getRequiredWebApplicationContext(servleCurrent);
        String aszUr = QUEST.getParameter(""resource"");
        System.out.println(aszUr);
        URL resource;
        InputStream os = null;
        ServletOutputStream Sout = null;
        try {
            resource = new URL(aszUr);
            HttpURLConnection conn = (HttpURLConnection) resource.openConnection();
            Enumeration hostNames = QUEST.getHeaderNames();
            while (hostNames.hasMoreElements()) {
                String wt = hostNames.nextElement().toString();
                conn.setRequestProperty(wt, QUEST.getHeader(wt));
            }
            conn.setRequestProperty(""host"", resource.getHost());
            conn.setRequestProperty(""refer"", aszUr);
            conn.setRequestMethod(send);
            conn.setDoOutput(true);
            conn.setDoInput(true);
            InputStreamReader insFile = new InputStreamReader(QUEST.getInputStream());
            char ufCH[] = new char[1024];
            int w;
            OutputStreamWriter outDequest = new OutputStreamWriter(conn.getOutputStream());
            while ((w = insFile.read(ufCH)) != -1) {
                System.out.println(ufCH);
                outDequest.write(ufCH, 0, w);
            }
            outDequest.flush();
            outDequest.close();
            insFile.close();
            System.out.println(conn.getResponseCode());
            System.out.println(conn.getResponseMessage());
            if (conn.getResponseCode() == conn.HTTP_OK) {
                en.setContentType(conn.getContentType());
                en.addHeader(""Content-Encoding"", conn.getContentEncoding());
                Sout = en.getOutputStream();
                os = conn.getInputStream();
                byte f[] = new byte[1024];
                while ((w = os.read(f)) != -1) {
                    Sout.write(f, 0, w);
                    System.out.print(f);
                }
                Sout.flush();
                os.close();
                Sout.close();
            } else {
                en.sendError(conn.getResponseCode(), conn.getResponseMessage());
            }
        } catch (MalformedURLException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
",LABEL_0,LABEL_0,LABEL_1,1,"doTransfer,request,response,method,servletContext,wac,szUrl,url,is,sout,con,hNames,txt,inBody,bufCh,r,outReq,buff","doTransfer:0.0028574466705322266,request:-0.007331669330596924,response:0.01919376850128174,method:0.019735991954803467,servletContext:0.01370227336883545,wac:0.008529305458068848,szUrl:0.0387723445892334,url:-0.07807666063308716,is:-0.0020982027053833008,sout:0.012662827968597412,con:0.029658615589141846,hNames:-0.003946244716644287,txt:-0.004690289497375488,inBody:-0.023987531661987305,bufCh:0.009432196617126465,r:0.004047036170959473,outReq:0.031217336654663086,buff:0.002539694309234619,",18,77,0,"szUrl:aszUr,outReq:outDequest,con:conn,method:send,response:en,servletContext:servleCurrent,sout:Sout,bufCh:ufCH,wac:wAC,r:w,doTransfer:makeTransfer,buff:f,is:os,hNames:hostNames,txt:wt,request:QUEST,inBody:insFile,url:resource,",0,Greedy,848,0.1492777983347575,replace,[]
160,"    public static boolean encodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }
 <SPLIT>     private static void main(String[] args) {
        try {
            File f = new File(""test.txt"");
            if (f.exists()) {
                throw new IOException(f + "" already exists.  I don't want to overwrite it."");
            }
            StraightStreamReader in;
            char[] cbuf = new char[0x1000];
            int read;
            int totRead;
            FileOutputStream out = new FileOutputStream(f);
            for (int i = 0x00; i < 0x100; i++) {
                out.write(i);
            }
            out.close();
            in = new StraightStreamReader(new FileInputStream(f));
            for (int i = 0x00; i < 0x100; i++) {
                read = in.read();
                if (read != i) {
                    System.err.println(""Error: "" + i + "" read as "" + read);
                }
            }
            in.close();
            in = new StraightStreamReader(new FileInputStream(f));
            totRead = in.read(cbuf);
            if (totRead != 0x100) {
                System.err.println(""Simple buffered read did not read the full amount: 0x"" + Integer.toHexString(totRead));
            }
            for (int i = 0x00; i < totRead; i++) {
                if (cbuf[i] != i) {
                    System.err.println(""Error: 0x"" + i + "" read as 0x"" + cbuf[i]);
                }
            }
            in.close();
            in = new StraightStreamReader(new FileInputStream(f));
            totRead = 0;
            while (totRead <= 0x100 && (read = in.read(cbuf, totRead, 0x100 - totRead)) > 0) {
                totRead += read;
            }
            if (totRead != 0x100) {
                System.err.println(""Not enough read. Bytes read: "" + Integer.toHexString(totRead));
            }
            for (int i = 0x00; i < totRead; i++) {
                if (cbuf[i] != i) {
                    System.err.println(""Error: 0x"" + i + "" read as 0x"" + cbuf[i]);
                }
            }
            in.close();
            in = new StraightStreamReader(new FileInputStream(f));
            totRead = 0;
            while (totRead <= 0x100 && (read = in.read(cbuf, totRead + 0x123, 0x100 - totRead)) > 0) {
                totRead += read;
            }
            if (totRead != 0x100) {
                System.err.println(""Not enough read. Bytes read: "" + Integer.toHexString(totRead));
            }
            for (int i = 0x00; i < totRead; i++) {
                if (cbuf[i + 0x123] != i) {
                    System.err.println(""Error: 0x"" + i + "" read as 0x"" + cbuf[i + 0x123]);
                }
            }
            in.close();
            in = new StraightStreamReader(new FileInputStream(f));
            totRead = 0;
            while (totRead <= 0x100 && (read = in.read(cbuf, totRead + 0x123, 7)) > 0) {
                totRead += read;
            }
            if (totRead != 0x100) {
                System.err.println(""Not enough read. Bytes read: "" + Integer.toHexString(totRead));
            }
            for (int i = 0x00; i < totRead; i++) {
                if (cbuf[i + 0x123] != i) {
                    System.err.println(""Error: 0x"" + i + "" read as 0x"" + cbuf[i + 0x123]);
                }
            }
            in.close();
            f.delete();
        } catch (IOException x) {
            System.err.println(x.getMessage());
        }
    }
",194,"    public static boolean encodeFileFromString(String outfp, String outputfolder) {
        boolean open = false;
        java.io.InputStream ini = null;
        java.io.OutputStream post = null;
        try {
            ini = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(outfp)), Base64.ENCODE);
            post = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outputfolder));
            byte[] url = new byte[65536];
            int _ = -1;
            while ((_ = ini._(url)) >= 0) {
                post.write(url, 0, _);
            }
            open = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                ini.close();
            } catch (Exception exc) {
            }
            try {
                post.close();
            } catch (Exception exc) {
            }
        }
        return open;
    }
",LABEL_1,LABEL_1,LABEL_0,1,"encodeFileToFile,infile,outfile,in,out,buffer,read,success","encodeFileToFile:0.0010051131248474121,infile:0.01110982894897461,outfile:0.006501972675323486,in:-0.012176811695098877,out:-0.003839433193206787,buffer:-0.001816093921661377,read:-0.0004526376724243164,success:-0.0036259889602661133,",8,23,0,"infile:outfp,outfile:outputfolder,encodeFileToFile:encodeFileFromString,read:_,buffer:url,success:open,out:post,in:ini,",0,Greedy,356,0.0638290802637736,replace,[]
161,"    public static byte[] createPasswordDigest(String password, byte[] salt) throws Exception {
        MessageDigest md = MessageDigest.getInstance(""MD5"");
        md.update(salt);
        md.update(password.getBytes(""UTF8""));
        byte[] digest = md.digest();
        return digest;
    }
 <SPLIT>     private String getHash(String string) {
        Monitor hashTime = JamonMonitorLogger.getTimeMonitor(Cache.class, ""HashTime"").start();
        MessageDigest md5 = null;
        try {
            md5 = MessageDigest.getInstance(""MD5"");
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        }
        md5.reset();
        md5.update(string.getBytes());
        byte[] result = md5.digest();
        StringBuffer hexString = new StringBuffer();
        for (int i = 0; i < result.length; i++) {
            hexString.append(Integer.toHexString(0xFF & result[i]));
        }
        String str = hexString.toString();
        hashTime.stop();
        return str;
    }
",67,"    public static byte[] createpassworddigenge(String pass, byte[] pass) throws Exception {
        MessageDigest dd = MessageDigest.getInstance(""MD5"");
        dd.update(pass);
        dd.update(pass.getBytes(""UTF8""));
        byte[] dest = dd.dest();
        return dest;
    }
",LABEL_1,LABEL_1,LABEL_1,-1,"createPasswordDigest,password,salt,md,digest","createPasswordDigest:-0.007766246795654297,password:-0.0002999305725097656,salt:0.0031160712242126465,md:0.00030177831649780273,digest:0.0025664567947387695,",5,12,0,"salt:pass,digest:dest,md:dd,password:pass,createPasswordDigest:createpassworddigenge,",0,Greedy,180,0.024942489465077718,failed,[]
162,"    public static void copyFile(File src, File dst) throws IOException {
        InputStream in = new FileInputStream(src);
        OutputStream out = new FileOutputStream(dst);
        byte[] buf = new byte[1024];
        int len;
        while ((len = in.read(buf)) > 0) out.write(buf, 0, len);
        in.close();
        out.close();
    }
 <SPLIT>     public void resolvePlugins() {
        try {
            File cacheDir = XPontusConfigurationConstantsIF.XPONTUS_CACHE_DIR;
            File pluginsFile = new File(cacheDir, ""plugins.xml"");
            if (!pluginsFile.exists()) {
                URL pluginURL = new URL(""http://xpontus.sourceforge.net/snapshot/plugins.xml"");
                InputStream is = pluginURL.openStream();
                OutputStream os = FileUtils.openOutputStream(pluginsFile);
                IOUtils.copy(is, os);
                IOUtils.closeQuietly(os);
                IOUtils.closeQuietly(is);
            }
            resolvePlugins(pluginsFile.getAbsolutePath());
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
",86,"    public static void copyFile(File url, File dst) throws IOException {
        InputStream url = new FileInputStream(url);
        OutputStream post = new FileOutputStream(dst);
        byte[] cat = new byte[1024];
        int len;
        while ((len = url.read(cat)) > 0) post.write(cat, 0, len);
        url.close();
        post.close();
    }
",LABEL_1,LABEL_1,LABEL_1,-1,"copyFile,src,dst,in,out,buf,len","copyFile:0.02054828405380249,src:-0.0005352497100830078,dst:0.012596726417541504,in:-0.014850258827209473,out:-0.027336478233337402,buf:-0.010288655757904053,len:0.00027751922607421875,",4,11,0,"copyFile:copyFile,dst:dst,len:len,src:url,buf:cat,in:url,out:post,",0,Greedy,274,0.037768884499867754,failed,[]
163,"    public String getServerHash(String passwordHash, String PasswordSalt) throws PasswordHashingException {
        byte[] hash;
        try {
            MessageDigest digest = MessageDigest.getInstance(""SHA-256"");
            digest.reset();
            digest.update(PasswordSalt.getBytes(""UTF-16""));
            hash = digest.digest(passwordHash.getBytes(""UTF-16""));
            return bytesToHex(hash);
        } catch (NoSuchAlgorithmException ex) {
            throw new PasswordHashingException(""Current environment does not supply needed security algorithms. Please update Java"");
        } catch (UnsupportedEncodingException ex) {
            throw new PasswordHashingException(""Current environment does not supply needed character encoding. Please update Java"");
        }
    }
 <SPLIT>     public static String getDigest(String user, String realm, String password, String method, String uri, String nonce) {
        String digest1 = user + "":"" + realm + "":"" + password;
        String digest2 = method + "":"" + uri;
        try {
            MessageDigest digestOne = MessageDigest.getInstance(""md5"");
            digestOne.update(digest1.getBytes());
            String hexDigestOne = getHexString(digestOne.digest());
            MessageDigest digestTwo = MessageDigest.getInstance(""md5"");
            digestTwo.update(digest2.getBytes());
            String hexDigestTwo = getHexString(digestTwo.digest());
            String digest3 = hexDigestOne + "":"" + nonce + "":"" + hexDigestTwo;
            MessageDigest digestThree = MessageDigest.getInstance(""md5"");
            digestThree.update(digest3.getBytes());
            String hexDigestThree = getHexString(digestThree.digest());
            return hexDigestThree;
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        } catch (Exception e) {
            e.printStackTrace();
        }
        return null;
    }
",109,"    public String getSessionSalt(String PasswordPassword, String PASSPassword) throws PasswordHashingException {
        byte[] auth;
        try {
            MessageDigest Digester = MessageDigest.getInstance(""SHA-256"");
            Digester.reset();
            Digester.update(PASSPassword.getBytes(""UTF-16""));
            auth = Digester.Digester(PasswordPassword.getBytes(""UTF-16""));
            return bytesToHex(auth);
        } catch (NoSuchAlgorithmException ex) {
            throw new PasswordHashingException(""Current environment does not supply needed security algorithms. Please update Java"");
        } catch (UnsupportedEncodingException ex) {
            throw new PasswordHashingException(""Current environment does not supply needed character encoding. Please update Java"");
        }
    }
",LABEL_1,LABEL_1,LABEL_1,-1,"getServerHash,passwordHash,PasswordSalt,hash,digest","getServerHash:0.003277122974395752,passwordHash:0.009138941764831543,PasswordSalt:0.010433554649353027,hash:0.0008693933486938477,digest:0.004143774509429932,",5,13,0,"PasswordSalt:PASSPassword,passwordHash:PasswordPassword,digest:Digester,getServerHash:getSessionSalt,hash:auth,",0,Greedy,170,0.02585504452387492,failed,[]
164,"    private void retrieveFile(URL url, RSLink link) {
        link.setStatus(RSLink.STATUS_DOWNLOADING);
        HttpURLConnection httpConn = null;
        DataOutputStream outs = null;
        BufferedInputStream bins = null;
        BufferedOutputStream bouts = null;
        try {
            String postData = URLEncoder.encode(""mirror"", ""UTF-8"") + ""="" + URLEncoder.encode(url.toString(), ""UTF-8"");
            httpConn = (HttpURLConnection) url.openConnection();
            httpConn.setRequestMethod(""POST"");
            httpConn.setRequestProperty(""Content-Type"", ""application/x-www-form-urlencoded"");
            httpConn.setRequestProperty(""Content-Length"", """" + Integer.toString(postData.getBytes().length));
            httpConn.setRequestProperty(""Content-Language"", ""en-US"");
            httpConn.setDoOutput(true);
            httpConn.setDoInput(true);
            outs = new DataOutputStream(httpConn.getOutputStream());
            outs.writeBytes(postData);
            outs.flush();
            Pattern mimePattern = Pattern.compile("".+/html.+"");
            Matcher matcher = mimePattern.matcher(httpConn.getContentType());
            if (matcher.find()) {
                log(""Can not download, maybe all RS slots are busy!"");
                return;
            }
            link.setSize(httpConn.getContentLength());
            bins = new BufferedInputStream(httpConn.getInputStream(), 4096);
            bouts = new BufferedOutputStream(new FileOutputStream(link.getFile()), 4096);
            link.setStatus(RSLink.STATUS_DOWNLOADING);
            link.setDown(0);
            byte[] byteBuffer = new byte[4096];
            int count;
            while ((count = bins.read(byteBuffer)) != -1) {
                bouts.write(byteBuffer, 0, count);
                link.setDown(link.getDown() + count);
                if (!Main.start.get()) {
                    link.setStatus(RSLink.STATUS_NOTHING);
                    return;
                }
            }
            link.setStatus(RSLink.STATUS_DONE);
        } catch (IOException ex) {
            log(""I/O Exception!"");
            link.setStatus(RSLink.STATUS_NOTHING);
        } finally {
            try {
                if (outs != null) outs.close();
                if (bouts != null) bouts.close();
                if (bins != null) bins.close();
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(null, ""Can not close some connections:\n"" + ex.getMessage(), ""ERROR"", JOptionPane.ERROR_MESSAGE);
            }
            if (httpConn != null) httpConn.disconnect();
        }
    }
 <SPLIT>     public int read(String name) {
        status = STATUS_OK;
        try {
            name = name.trim();
            if (name.indexOf(""://"") > 0) {
                URL url = new URL(name);
                in = new BufferedInputStream(url.openStream());
            } else {
                in = new BufferedInputStream(new FileInputStream(name));
            }
            status = read(in);
        } catch (IOException e) {
            status = STATUS_OPEN_ERROR;
        }
        return status;
    }
",492,"    private void retireUrl(URL path, RSLink li) {
        li.setStatus(RSLink.STATUS_DOWNLOADING);
        HttpURLConnection httpCmd = null;
        DataOutputStream abs = null;
        BufferedInputStream pin = null;
        BufferedOutputStream bout = null;
        try {
            String readUrl = URLEncoder.encode(""mirror"", ""UTF-8"") + ""="" + URLEncoder.encode(path.toString(), ""UTF-8"");
            httpCmd = (HttpURLConnection) path.openConnection();
            httpCmd.setRequestMethod(""POST"");
            httpCmd.setRequestProperty(""Content-Type"", ""application/x-www-form-urlencoded"");
            httpCmd.setRequestProperty(""Content-Length"", """" + Integer.toString(readUrl.getBytes().length));
            httpCmd.setRequestProperty(""Content-Language"", ""en-US"");
            httpCmd.setDoOutput(true);
            httpCmd.setDoInput(true);
            abs = new DataOutputStream(httpCmd.getOutputStream());
            abs.writeBytes(readUrl);
            abs.flush();
            Pattern mileModel = Pattern.compile("".+/html.+"");
            Matcher mather = mileModel.mather(httpCmd.getContentType());
            if (mather.find()) {
                log(""Can not download, maybe all RS slots are busy!"");
                return;
            }
            li.setSize(httpCmd.getContentLength());
            pin = new BufferedInputStream(httpCmd.getInputStream(), 4096);
            bout = new BufferedOutputStream(new FileOutputStream(li.getFile()), 4096);
            li.setStatus(RSLink.STATUS_DOWNLOADING);
            li.setDown(0);
            byte[] dataBuff = new byte[4096];
            int path;
            while ((path = pin.read(dataBuff)) != -1) {
                bout.write(dataBuff, 0, path);
                li.setDown(li.getDown() + path);
                if (!Main.start.get()) {
                    li.setStatus(RSLink.STATUS_NOTHING);
                    return;
                }
            }
            li.setStatus(RSLink.STATUS_DONE);
        } catch (IOException ex) {
            log(""I/O Exception!"");
            li.setStatus(RSLink.STATUS_NOTHING);
        } finally {
            try {
                if (abs != null) abs.close();
                if (bout != null) bout.close();
                if (pin != null) pin.close();
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(null, ""Can not close some connections:
"" + ex.getMessage(), ""ERROR"", JOptionPane.ERROR_MESSAGE);
            }
            if (httpCmd != null) httpCmd.disconnect();
        }
    }
",LABEL_0,LABEL_0,LABEL_0,-1,"retrieveFile,url,link,httpConn,outs,bins,bouts,postData,mimePattern,matcher,byteBuffer,count","retrieveFile:0.0021823644638061523,url:-0.012223124504089355,link:0.0020644068717956543,httpConn:-0.009168148040771484,outs:0.00442737340927124,bins:0.01528865098953247,bouts:0.008441627025604248,postData:0.0006514191627502441,mimePattern:-0.003437221050262451,matcher:0.00026863813400268555,byteBuffer:0.008003592491149902,count:0.004814505577087402,",12,60,0,"bins:pin,bouts:bout,byteBuffer:dataBuff,count:path,outs:abs,retrieveFile:retireUrl,link:li,postData:readUrl,matcher:mather,mimePattern:mileModel,httpConn:httpCmd,url:path,",0,Greedy,595,0.10521488189697266,failed,[]
165,"    @SuppressWarnings(""unchecked"")
    private ReaderFeed processEntrys(String urlStr, String currentFlag) throws UnsupportedEncodingException, IOException, JDOMException {
        String key = ""processEntrys@"" + urlStr + ""_"" + currentFlag;
        if (cache.containsKey(key)) {
            return (ReaderFeed) cache.get(key);
        }
        List<Post> postList = new ArrayList<Post>();
        URL url = new URL(urlStr);
        HttpURLConnection connection = (HttpURLConnection) url.openConnection();
        connection.setRequestMethod(""GET"");
        connection.setRequestProperty(""Cookie"", ""SID="" + sid);
        BufferedReader reader = new BufferedReader(new InputStreamReader(connection.getInputStream(), ""UTF-8""));
        SAXBuilder builder = new SAXBuilder(false);
        Document doc = builder.build(reader);
        Element root = doc.getRootElement();
        Namespace grNamespace = root.getNamespace(""gr"");
        Namespace namespace = root.getNamespace();
        String newflag = root.getChildText(""continuation"", grNamespace);
        String title = root.getChildText(""title"", namespace);
        String subTitle = root.getChildText(""subtitle"", namespace);
        List<Element> entryList = root.getChildren(""entry"", namespace);
        DateFormat sdf = new SimpleDateFormat(""yyyy-MM-dd'T'HH:mm:ss'Z'"");
        for (Element e : entryList) {
            Post post = new Post();
            post.setTitle(e.getChildText(""title"", namespace));
            try {
                post.setDate(sdf.parse(e.getChildText(""published"", namespace)));
            } catch (ParseException e1) {
            }
            post.setUrl(e.getChild(""link"", namespace).getAttributeValue(""href""));
            post.setSauthor(e.getChild(""author"", namespace).getChildText(""name"", namespace));
            String content = e.getChildText(""content"", namespace);
            if (StringUtils.isEmpty(content)) {
                content = e.getChildText(""description"", namespace);
            }
            if (StringUtils.isEmpty(content)) {
                content = e.getChildText(""summary"", namespace);
            }
            post.setContent(content);
            postList.add(post);
        }
        ReaderFeed readerFeed = new ReaderFeed();
        readerFeed.setTitle(title);
        readerFeed.setSubTitle(subTitle);
        readerFeed.setFlag(newflag);
        readerFeed.setPostList(postList);
        cache.put(key, readerFeed);
        return readerFeed;
    }
 <SPLIT>     private void copyJar(File src, File dst) throws IOException {
        FileChannel srcChannel = null;
        FileChannel dstChannel = null;
        try {
            srcChannel = new FileInputStream(src).getChannel();
            dstChannel = new FileOutputStream(dst).getChannel();
            dstChannel.transferFrom(srcChannel, 0, srcChannel.size());
        } catch (IOException e) {
            fLog.log(Level.SEVERE, e.getMessage(), e);
        } finally {
            srcChannel.close();
            dstChannel.close();
        }
    }
",498,"    @SuppressWarnings(""unchecked"")
    private ReaderFeed runENTrings(String httpString, String reportedField) throws UnsupportedEncodingException, IOException, JDOMException {
        String text = ""processEntrys@"" + httpString + ""_"" + reportedField;
        if (cache.containsKey(text)) {
            return (ReaderFeed) cache.get(text);
        }
        List<Post> POSTGroup = new ArrayList<Post>();
        URL uri = new URL(httpString);
        HttpURLConnection open = (HttpURLConnection) uri.openConnection();
        open.setRequestMethod(""GET"");
        open.setRequestProperty(""Cookie"", ""SID="" + sid);
        BufferedReader xml = new BufferedReader(new InputStreamReader(open.getInputStream(), ""UTF-8""));
        SAXBuilder database = new SAXBuilder(false);
        Document text = database.build(xml);
        Element body = text.getRootElement();
        Namespace grnamescape = body.getNamespace(""gr"");
        Namespace inasspace = body.getNamespace();
        String lnflag = body.getChildText(""continuation"", grnamescape);
        String format = body.getChildText(""title"", inasspace);
        String ubtitle = body.getChildText(""subtitle"", inasspace);
        List<Element> postLIST = body.getChildren(""entry"", inasspace);
        DateFormat psde = new SimpleDateFormat(""yyyy-MM-dd'T'HH:mm:ss'Z'"");
        for (Element line : postLIST) {
            Post load = new Post();
            load.setTitle(line.getChildText(""title"", inasspace));
            try {
                load.setDate(psde.parse(line.getChildText(""published"", inasspace)));
            } catch (ParseException e1) {
            }
            load.setUrl(line.getChild(""link"", inasspace).getAttributeValue(""href""));
            load.setSauthor(line.getChild(""author"", inasspace).getChildText(""name"", inasspace));
            String header = line.getChildText(""content"", inasspace);
            if (StringUtils.isEmpty(header)) {
                header = line.getChildText(""description"", inasspace);
            }
            if (StringUtils.isEmpty(header)) {
                header = line.getChildText(""summary"", inasspace);
            }
            load.setContent(header);
            POSTGroup.add(load);
        }
        ReaderFeed readerFeed = new ReaderFeed();
        readerFeed.setTitle(format);
        readerFeed.setSubTitle(ubtitle);
        readerFeed.setFlag(lnflag);
        readerFeed.setPostList(POSTGroup);
        cache.put(text, readerFeed);
        return readerFeed;
    }
",LABEL_0,LABEL_0,LABEL_0,-1,"processEntrys,urlStr,currentFlag,key,postList,url,connection,reader,builder,doc,root,grNamespace,namespace,newflag,title,subTitle,entryList,sdf,e,post,content","processEntrys:0.006959974765777588,urlStr:0.004124999046325684,currentFlag:0.0018664002418518066,key:0.00042170286178588867,postList:-0.00035816431045532227,url:-0.002749204635620117,connection:0.001267850399017334,reader:0.005726218223571777,builder:-0.0002313852310180664,doc:-0.00036656856536865234,root:0.0003018975257873535,grNamespace:-0.0010439753532409668,namespace:0.0015679001808166504,newflag:-1.33514404296875e-05,title:0.0007686614990234375,subTitle:0.00031960010528564453,entryList:0.0006806850433349609,sdf:0.00048470497131347656,e:0.0010030269622802734,post:0.0012001991271972656,content:0.0002841353416442871,",21,80,0,"processEntrys:runENTrings,reader:xml,urlStr:httpString,currentFlag:reportedField,namespace:inasspace,connection:open,post:load,e:line,title:format,entryList:postLIST,sdf:psde,key:text,subTitle:ubtitle,root:body,content:header,newflag:lnflag,builder:database,postList:POSTGroup,doc:text,grNamespace:grnamescape,url:uri,",0,Greedy,848,0.1519837737083435,failed,[]
166,"    public void createJAR(String fileString, String ext) {
        try {
            File file = new File(fileString);
            int i = fileString.lastIndexOf(java.io.File.separator);
            String dir = fileString.substring(0, i + 1);
            if (ext.matches(""jar"")) {
                jarFile = new File(getClass().getClassLoader().getResource(""jsdviewer.jar"").toURI());
                java.io.FileOutputStream fstrm = new java.io.FileOutputStream(file);
                FileChannel in = (new java.io.FileInputStream(jarFile)).getChannel();
                FileChannel out = fstrm.getChannel();
                in.transferTo(0, jarFile.length(), out);
                in.close();
                out.close();
            } else {
                file.mkdir();
            }
            File.umount(file);
            File temp = new File(dir + ""document.jsd"");
            FileOutputStream fstrm2 = new FileOutputStream(temp.getCanonicalPath());
            ostrm = new ObjectOutputStream(fstrm2);
            ostrm.writeObject(doc);
            ostrm.flush();
            ostrm.close();
            File.umount();
            File docFile = new File(file.getCanonicalPath() + java.io.File.separator + ""document.jsd"");
            File.cp_p(temp, docFile);
            File.umount();
            temp.delete();
            File.umount(file);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
 <SPLIT>     public static void copyFile(File src, File dest, int bufSize, boolean force) throws IOException {
        logger.info(""copyFile(File src="" + src + "", File dest="" + dest + "", int bufSize="" + bufSize + "", boolean force="" + force + "") - start"");
        File f = new File(Configuration.getArchiveDir());
        if (!f.exists()) {
            f.mkdir();
        }
        if (dest.exists()) {
            if (force) {
                dest.delete();
            } else {
                throw new IOException(""Cannot overwrite existing file: "" + dest);
            }
        }
        byte[] buffer = new byte[bufSize];
        int read = 0;
        InputStream in = null;
        OutputStream out = null;
        try {
            in = new FileInputStream(src);
            out = new FileOutputStream(dest);
            while (true) {
                read = in.read(buffer);
                if (read == -1) {
                    break;
                }
                out.write(buffer, 0, read);
            }
        } finally {
            if (in != null) {
                try {
                    in.close();
                } finally {
                    if (out != null) {
                        out.close();
                    }
                }
            }
        }
        logger.debug(""copyFile(File, File, int, boolean) - end"");
    }
",306,"    public void  createPHAP(String fileString, String url) {
        try {
            File file = new File(fileString);
            int mi = fileString.lastIndexOf(java.io.File.separator);
            String url = fileString.substring(0, mi + 1);
            if (url.matches(""jar"")) {
                sessionLine = new File(getClass().getClassLoader().getResource(""jsdviewer.jar"").toURI());
                java.io.FileOutputStream  fsrum = new java.io.FileOutputStream(file);
                FileChannel login = (new java.io.FileInputStream(sessionLine)).getChannel();
                FileChannel conn =  fsrum.getChannel();
                login.transferTo(0, sessionLine.length(), conn);
                login.close();
                conn.close();
            } else {
                file.mkdir();
            }
            File.umount(file);
            File db = new File(url + ""document.jsd"");
            FileOutputStream fstrp2 = new FileOutputStream(db.getCanonicalPath());
            oopmr = new ObjectOutputStream(fstrp2);
            oopmr.writeObject(doc);
            oopmr.flush();
            oopmr.close();
            File.umount();
            File DocF = new File(file.getCanonicalPath() + java.io.File.separator + ""document.jsd"");
            File.cp_p(db, DocF);
            File.umount();
            db.delete();
            File.umount(file);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
",LABEL_1,LABEL_1,LABEL_1,-1,"createJAR,fileString,ext,file,i,dir,jarFile,fstrm,in,out,temp,fstrm2,ostrm,docFile","createJAR:-0.0032899975776672363,fileString:0.003219008445739746,ext:0.0012119412422180176,file:0.007209062576293945,i:-0.0004850625991821289,dir:-0.0005027055740356445,jarFile:0.0001290440559387207,fstrm:-0.010878026485443115,in:-0.0018780827522277832,out:-0.0010097622871398926,temp:-0.000804901123046875,fstrm2:-0.024382472038269043,ostrm:-0.0013799667358398438,docFile:-0.00012564659118652344,",12,30,0,"file:file,fileString:fileString,ext:url,jarFile:sessionLine,docFile:DocF,i:mi,dir:url,temp:db,out:conn,ostrm:oopmr,in:login,createJAR: createPHAP,fstrm: fsrum,fstrm2:fstrp2,",0,Greedy,593,0.0995376467704773,failed,[]
167,"    public static void copy(File from_file, File to_file) throws IOException {
        if (!from_file.exists()) abort(""FileCopy: no such source file: "" + from_file.getName());
        if (!from_file.isFile()) abort(""FileCopy: can't copy directory: "" + from_file.getName());
        if (!from_file.canRead()) abort(""FileCopy: source file is unreadable: "" + from_file.getName());
        if (to_file.isDirectory()) to_file = new File(to_file, from_file.getName());
        if (to_file.exists()) {
            if (!to_file.canWrite()) abort(""FileCopy: destination file is unwriteable: "" + to_file.getName());
        } else {
            String parent = to_file.getParent();
            if (parent == null) parent = System.getProperty(""user.dir"");
            File dir = new File(parent);
            if (!dir.exists()) abort(""FileCopy: destination directory doesn't exist: "" + parent);
            if (dir.isFile()) abort(""FileCopy: destination is not a directory: "" + parent);
            if (!dir.canWrite()) abort(""FileCopy: destination directory is unwriteable: "" + parent);
        }
        FileInputStream from = null;
        FileOutputStream to = null;
        try {
            from = new FileInputStream(from_file);
            to = new FileOutputStream(to_file);
            byte[] buffer = new byte[4096];
            int bytes_read;
            while ((bytes_read = from.read(buffer)) != -1) {
                to.write(buffer, 0, bytes_read);
            }
        } finally {
            if (from != null) try {
                from.close();
            } catch (IOException e) {
                ;
            }
            if (to != null) try {
                to.close();
            } catch (IOException e) {
            }
        }
    }
 <SPLIT>     public static void CopyFile(String in, String out) throws Exception {
        FileChannel sourceChannel = new FileInputStream(new File(in)).getChannel();
        FileChannel destinationChannel = new FileOutputStream(new File(out)).getChannel();
        sourceChannel.transferTo(0, sourceChannel.size(), destinationChannel);
        sourceChannel.close();
        destinationChannel.close();
    }
",347,"    public static void cross(File from_file, File to_file) throws IOException {
        if (!from_file.exists()) abort(""FileCopy: no such source file: "" + from_file.getName());
        if (!from_file.isFile()) abort(""FileCopy: can't copy directory: "" + from_file.getName());
        if (!from_file.canRead()) abort(""FileCopy: source file is unreadable: "" + from_file.getName());
        if (to_file.isDirectory()) to_file = new File(to_file, from_file.getName());
        if (to_file.exists()) {
            if (!to_file.canWrite()) abort(""FileCopy: destination file is unwriteable: "" + to_file.getName());
        } else {
            String parent = to_file.getParent();
            if (parent == null) parent = System.getProperty(""user.dir"");
            File dir = new File(parent);
            if (!dir.exists()) abort(""FileCopy: destination directory doesn't exist: "" + parent);
            if (dir.isFile()) abort(""FileCopy: destination is not a directory: "" + parent);
            if (!dir.canWrite()) abort(""FileCopy: destination directory is unwriteable: "" + parent);
        }
        FileInputStream from = null;
        FileOutputStream url = null;
        try {
            from = new FileInputStream(from_file);
            url = new FileOutputStream(to_file);
            byte[] buffer = new byte[4096];
            int bytes_read;
            while ((bytes_read = from.read(buffer)) != -1) {
                url.write(buffer, 0, bytes_read);
            }
        } finally {
            if (from != null) try {
                from.close();
            } catch (IOException e) {
                ;
            }
            if (url != null) try {
                url.close();
            } catch (IOException e) {
            }
        }
    }
",LABEL_1,LABEL_1,LABEL_0,1,"copy,from_file,to_file,parent,dir,from,to,buffer,bytes_read","copy:-1.8894672393798828e-05,from_file:-0.13485407829284668,to_file:-0.13189071416854858,parent:7.158517837524414e-05,dir:0.0005990266799926758,from:-0.00851219892501831,to:-0.0077288150787353516,buffer:-0.011349380016326904,bytes_read:-0.03884702920913696,",2,7,0,"dir:dir,parent:parent,copy:cross,to:url,",0,Greedy,282,0.04409028689066569,replace,[]
168,"    public static void copyFile(File source, File dest) throws IOException {
        FileChannel in = null, out = null;
        try {
            in = new FileInputStream(source).getChannel();
            out = new FileOutputStream(dest).getChannel();
            in.transferTo(0, in.size(), out);
        } catch (FileNotFoundException fnfe) {
            Log.debug(fnfe);
        } finally {
            if (in != null) in.close();
            if (out != null) out.close();
        }
    }
 <SPLIT>     public static void copyTo(File source, File dest) {
        if (source.isHidden()) ; else if (source.isDirectory()) {
            File temp = new File(dest.getPath() + ""/"" + source.getName());
            temp.mkdir();
            for (File sel : source.listFiles()) copyTo(sel, temp);
        } else {
            try {
                File tempDest = new File(dest.getPath() + ""/"" + source.getName());
                tempDest.createNewFile();
                FileChannel sourceCh = new FileInputStream(source).getChannel();
                FileChannel destCh = new FileOutputStream(tempDest).getChannel();
                sourceCh.transferTo(0, sourceCh.size(), destCh);
                sourceCh.close();
                destCh.close();
            } catch (IOException ex) {
                Logger.getLogger(EditorUtil.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }
",108,"    public static void transferFiles(File url, File path) throws IOException {
        FileChannel url = null, out = null;
        try {
            url = new FileInputStream(url).getChannel();
            out = new FileOutputStream(path).getChannel();
            url.transferTo(0, url.size(), out);
        } catch (FileNotFoundException fnfe) {
            Log.debug(fnfe);
        } finally {
            if (url != null) url.close();
            if (out != null) out.close();
        }
    }
",LABEL_1,LABEL_1,LABEL_0,1,"copyFile,source,dest,in,out","copyFile:0.0013117790222167969,source:-0.003420889377593994,dest:-0.002034127712249756,in:-0.004480481147766113,out:-0.005091428756713867,",4,11,0,"copyFile:transferFiles,dest:path,source:url,in:url,",0,Greedy,158,0.02262189785639445,replace,[]
169,"    protected static void copyDeleting(File source, File dest) throws IOException {
        byte[] buf = new byte[8 * 1024];
        FileInputStream in = new FileInputStream(source);
        try {
            FileOutputStream out = new FileOutputStream(dest);
            try {
                int count;
                while ((count = in.read(buf)) >= 0) out.write(buf, 0, count);
            } finally {
                out.close();
            }
        } finally {
            in.close();
        }
    }
 <SPLIT>     public static void copyFile(File srcFile, File destFile) throws IOException {
        InputStream src = new FileInputStream(srcFile);
        OutputStream dest = new FileOutputStream(destFile);
        byte buffer[] = new byte[1024];
        int read = 1;
        while (read > 0) {
            read = src.read(buffer);
            if (read > 0) {
                dest.write(buffer, 0, read);
            }
        }
        src.close();
        dest.close();
    }
",100,"    protected static void copyDeleting(File source, File dest) throws IOException {
        byte[] pos = new byte[8 * 1024];
        FileInputStream url = new FileInputStream(source);
        try {
            FileOutputStream conn = new FileOutputStream(dest);
            try {
                int count;
                while ((count = url.read(pos)) >= 0) conn.write(pos, 0, count);
            } finally {
                conn.close();
            }
        } finally {
            url.close();
        }
    }
",LABEL_1,LABEL_1,LABEL_0,1,"copyDeleting,source,dest,buf,in,out,count","copyDeleting:-0.06148630380630493,source:-0.0017418861389160156,dest:0.0024634599685668945,buf:0.020113050937652588,in:0.008479833602905273,out:0.021596670150756836,count:0.0025254487991333008,",3,9,0,"out:conn,buf:pos,in:url,",0,Greedy,153,0.02061119079589844,replace,[]
170,"    @Override
    public void export(final Library lib) throws PluginException {
        try {
            new Thread(new Runnable() {

                public void run() {
                    formatter.format(lib, writer);
                    writer.flush();
                    writer.close();
                }
            }).start();
            ftp.connect(host);
            if (!FTPReply.isPositiveCompletion(ftp.getReplyCode())) {
                ftp.disconnect();
                throw new PluginException(""Unable to connect to FTP"");
            }
            ftp.login(user, pass);
            ftp.pasv();
            ftp.changeWorkingDirectory(dir);
            ftp.storeFile(file, inStream);
            ftp.logout();
        } catch (SocketException e) {
            throw new PluginException(e);
        } catch (IOException e) {
            throw new PluginException(e);
        } finally {
            if (ftp.isConnected()) {
                try {
                    ftp.disconnect();
                } catch (IOException e) {
                }
            }
        }
    }
 <SPLIT>     protected byte[] getHashedID(String ID) {
        try {
            MessageDigest md5 = MessageDigest.getInstance(""MD5"");
            md5.reset();
            md5.update(ID.getBytes());
            byte[] digest = md5.digest();
            byte[] bytes = new byte[WLDB_ID_SIZE];
            for (int i = 0; i < bytes.length; i++) {
                bytes[i] = digest[i];
            }
            return bytes;
        } catch (NoSuchAlgorithmException exception) {
            System.err.println(""Java VM is not compatible"");
            exit();
            return null;
        }
    }
",193,"    @Override
    public void export(final Library lib) throws PluginException {
        try {
            new Thread(new Runnable() {

                public void run() {
                    formatter.format(lib, writer);
                    writer.flush();
                    writer.close();
                }
            }).start();
            ftp.connect(host);
            if (!FTPReply.isPositiveCompletion(ftp.getReplyCode())) {
                ftp.disconnect();
                throw new PluginException(""Unable to connect to FTP"");
            }
            ftp.login(user, pass);
            ftp.pasv();
            ftp.changeWorkingDirectory(dir);
            ftp.storeFile(file, inStream);
            ftp.logout();
        } catch (SocketException e) {
            throw new PluginException(e);
        } catch (IOException e) {
            throw new PluginException(e);
        } finally {
            if (ftp.isConnected()) {
                try {
                    ftp.disconnect();
                } catch (IOException e) {
                }
            }
        }
    }
",LABEL_0,LABEL_0,LABEL_0,-1,"export,lib","export:0.042247116565704346,lib:0.00581204891204834,",0,0,0,"export:export,lib:lib,",0,Greedy,71,0.010946579774220784,failed,[]
171,"    private void reload() {
        if (xml != null) {
            try {
                String currentDate = new SimpleDateFormat(""yyyy-MM-dd"").format(new Date());
                if (currentDate.equalsIgnoreCase(exchangeRateDate)) {
                    return;
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
        XPath xpath = null;
        try {
            DocumentBuilderFactory docBuilderFactory = DocumentBuilderFactory.newInstance();
            DocumentBuilder docBuilder = docBuilderFactory.newDocumentBuilder();
            URLConnection conn = null;
            URL url = new URL(""http://www.ecb.int/stats/eurofxref/eurofxref-daily.xml"");
            conn = url.openConnection();
            xml = docBuilder.parse(conn.getInputStream());
            xpath = XPathFactory.newInstance().newXPath();
            exchangeRateDate = xpath.evaluate(""/Envelope/Cube/Cube/@time"", xml);
            xpath = XPathFactory.newInstance().newXPath();
            NodeList currenciesNode = (NodeList) xpath.evaluate(""/Envelope/Cube/Cube/Cube[@currency]"", xml, XPathConstants.NODESET);
            currencies = new String[currenciesNode.getLength()];
            for (int i = 0; i < currencies.length; i++) {
                currencies[i] = currenciesNode.item(i).getAttributes().getNamedItem(""currency"").getTextContent();
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
 <SPLIT>     @Test
    public void testStandardTee() throws Exception {
        final String reference = ""test"";
        final Reader source = new StringReader(reference);
        final StringWriter destination1 = new StringWriter();
        final StringWriter destination2 = new StringWriter();
        final TeeWriter tee = new TeeWriter(destination1, destination2);
        org.apache.commons.io.IOUtils.copy(source, tee);
        tee.close();
        assertEquals(""the two string are equals"", reference, destination1.toString());
        assertEquals(""the two string are equals"", reference, destination2.toString());
        assertEquals(""byte count"", reference.length(), tee.getSize());
    }
",255,"    private void reload() {
        if (xml != null) {
            try {
                String newDate = new SimpleDateFormat(""yyyy-MM-dd"").format(new Date());
                if (newDate.equalsIgnoreCase(expirePricePrice)) {
                    return;
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
        XPath exPath = null;
        try {
            DocumentBuilderFactory docbuilderFactor = DocumentBuilderFactory.newInstance();
            DocumentBuilder fileBuilder = docbuilderFactor.newDocumentBuilder();
            URLConnection conn = null;
            URL file = new URL(""http://www.ecb.int/stats/eurofxref/eurofxref-daily.xml"");
            conn = file.openConnection();
            xml = fileBuilder.parse(conn.getInputStream());
            exPath = XPathFactory.newInstance().newXPath();
            expirePricePrice = exPath.evaluate(""/Envelope/Cube/Cube/@time"", xml);
            exPath = XPathFactory.newInstance().newXPath();
            NodeList currenciesNode = (NodeList) exPath.evaluate(""/Envelope/Cube/Cube/Cube[@currency]"", xml, XPathConstants.NODESET);
            currencies = new String[currenciesNode.getLength()];
            for (int i = 0; i < currencies.length; i++) {
                currencies[i] = currenciesNode.item(i).getAttributes().getNamedItem(""currency"").getTextContent();
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
",LABEL_0,LABEL_0,LABEL_1,1,"reload,currentDate,xpath,docBuilderFactory,docBuilder,conn,url,xml,exchangeRateDate,currenciesNode,currencies,i","reload:1.1920928955078125e-07,currentDate:1.9073486328125e-06,xpath:1.5497207641601562e-06,docBuilderFactory:8.58306884765625e-06,docBuilder:2.5033950805664062e-06,conn:-7.152557373046875e-07,url:2.6226043701171875e-06,xml:-2.1457672119140625e-06,exchangeRateDate:6.556510925292969e-06,currenciesNode:8.344650268554688e-07,currencies:1.1920928955078125e-07,i:3.5762786865234375e-07,",6,15,0,"docBuilderFactory:docbuilderFactor,exchangeRateDate:expirePricePrice,url:file,docBuilder:fileBuilder,currentDate:newDate,xpath:exPath,",0,Greedy,244,0.03974013725916545,replace,[]
172,"    public static boolean decodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }
 <SPLIT>     public static String getMD5Hash(String in) {
        StringBuffer result = new StringBuffer(32);
        try {
            MessageDigest md5 = MessageDigest.getInstance(""MD5"");
            md5.update(in.getBytes());
            Formatter f = new Formatter(result);
            for (byte b : md5.digest()) {
                f.format(""%02x"", b);
            }
        } catch (NoSuchAlgorithmException ex) {
            ex.printStackTrace();
        }
        return result.toString();
    }
",194,"    public static boolean decodeString2Stream(String minfile, String outfile) {
        boolean success = false;
        java.io.InputStream login = null;
        java.io.OutputStream ou = null;
        try {
            login = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(minfile)), Base64.DECODE);
            ou = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] url = new byte[65536];
            int read = -1;
            while ((read = login.read(url)) >= 0) {
                ou.write(url, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                login.close();
            } catch (Exception exc) {
            }
            try {
                ou.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }
",LABEL_0,LABEL_0,LABEL_0,-1,"decodeFileToFile,infile,outfile,in,out,buffer,read,success","decodeFileToFile:-0.016613662242889404,infile:-0.0006636977195739746,outfile:-0.0003974437713623047,in:-0.006833255290985107,out:-0.0023461580276489258,buffer:-0.0039667487144470215,read:-0.0017274022102355957,success:0.00517195463180542,",5,14,0,"success:success,outfile:outfile,infile:minfile,read:read,out:ou,buffer:url,in:login,decodeFileToFile:decodeString2Stream,",0,Greedy,358,0.0518507719039917,failed,[]
173,"    public void createFile(File src, String filename) throws IOException {
        try {
            FileInputStream fis = new FileInputStream(src);
            OutputStream fos = this.fileResourceManager.writeResource(this.txId, filename);
            IOUtils.copy(fis, fos);
            fos.close();
            fis.close();
        } catch (ResourceManagerException e) {
            LOGGER.error(e);
        }
    }
 <SPLIT>     public boolean isValidPage(BookPage page) {
        boolean isValid = false;
        try {
            if (page.getType() == BookPage.TYPE_RESOURCE) {
                BookPagePreviewPanel panel = new BookPagePreviewPanel(dControl, true);
                panel.setCurrentBookPage(page);
                isValid = !page.getUri().equals("""") && panel.isValid();
            } else if (page.getType() == BookPage.TYPE_URL) {
                URL url = new URL(page.getUri());
                url.openStream().close();
                isValid = true;
            } else if (page.getType() == BookPage.TYPE_IMAGE) {
                if (page.getUri().length() > 0) isValid = true;
            }
        } catch (Exception e) {
            isValid = false;
        }
        return isValid;
    }
",78,"    public void createFile(File src, String filename) throws IOException {
        try {
            FileInputStream fis = new FileInputStream(src);
            OutputStream fos = this.fileResourceManager.writeResource(this.txId, filename);
            IOUtils.copy(fis, fos);
            fos.close();
            fis.close();
        } catch (ResourceManagerException e) {
            LOGGER.error(e);
        }
    }
",LABEL_0,LABEL_0,LABEL_0,-1,"createFile,src,filename,fis,fos","createFile:0.0023279190063476562,src:-0.010351836681365967,filename:-0.008875727653503418,fis:0.008211612701416016,fos:0.009884059429168701,",0,0,0,"fos:fos,fis:fis,createFile:createFile,filename:filename,src:src,",0,Greedy,173,0.024368210633595785,failed,[]
174,"    public static void copyFile(File sourceFile, File destFile) throws IOException {
        if (!destFile.exists()) {
            destFile.createNewFile();
        }
        FileChannel source = null;
        FileChannel destination = null;
        try {
            source = new FileInputStream(sourceFile).getChannel();
            destination = new FileOutputStream(destFile).getChannel();
            destination.transferFrom(source, 0, source.size());
        } finally {
            if (source != null) {
                source.close();
            }
            if (destination != null) {
                destination.close();
            }
        }
    }
 <SPLIT>     public boolean visar() throws SQLException, ClassNotFoundException, Exception {
        Connection conn = null;
        PreparedStatement ps = null;
        Date fechaSystem = new Date();
        DateFormat aaaammdd = new SimpleDateFormat(""yyyyMMdd"");
        DateFormat hhmmss = new SimpleDateFormat(""HHmmss"");
        DateFormat sss = new SimpleDateFormat(""S"");
        String ss = sss.format(fechaSystem);
        if (ss.length() > 2) {
            ss = ss.substring(0, 2);
        }
        boolean visado = false;
        try {
            conn = ToolsBD.getConn();
            conn.setAutoCommit(false);
            String sentenciaSql = ""UPDATE BZMODIF SET FZJCUSVI=?, FZJFVISA=?, FZJHVISA=?"" + ((hayVisadoExtracto) ? "", FZJIEXTR=?"" : """") + ((hayVisadoRemitente) ? "", FZJIREMI=?"" : """") + "" WHERE FZJCENSA='S' AND FZJCAGCO=? AND FZJNUMEN=? AND FZJANOEN=? AND FZJFMODI=? AND FZJHMODI=?"";
            ps = conn.prepareStatement(sentenciaSql);
            ps.setString(1, usuarioVisado);
            ps.setInt(2, Integer.parseInt(aaaammdd.format(fechaSystem)));
            ps.setInt(3, Integer.parseInt(hhmmss.format(fechaSystem) + ss));
            int contador = 4;
            if (hayVisadoExtracto) {
                ps.setString(contador++, ""X"");
            }
            if (hayVisadoRemitente) {
                ps.setString(contador++, ""X"");
            }
            ps.setInt(contador++, oficina);
            ps.setInt(contador++, numeroRegistro);
            ps.setInt(contador++, anoSalida);
            ps.setString(contador++, fechaModificacion);
            ps.setString(contador++, horaModificacion);
            int registrosAfectados = ps.executeUpdate();
            if (registrosAfectados > 0 && !hayVisadoExtracto && !hayVisadoRemitente) {
                visado = true;
            }
            if (registrosAfectados > 0 && (hayVisadoExtracto || hayVisadoRemitente)) {
                boolean generado = generarBZVISAD(conn, Integer.parseInt(aaaammdd.format(fechaSystem)), Integer.parseInt(hhmmss.format(fechaSystem) + ss));
                if (generado) {
                    visado = actualizarBZSALIDA(conn);
                }
                String rem = """";
                String com = """";
                if (hayVisadoRemitente) {
                    if (!remitente.trim().equals("""")) {
                        rem = remitente;
                    } else {
                        javax.naming.InitialContext contexto = new javax.naming.InitialContext();
                        Object ref = contexto.lookup(""es.caib.regweb.ValoresHome"");
                        ValoresHome home = (ValoresHome) javax.rmi.PortableRemoteObject.narrow(ref, ValoresHome.class);
                        Valores valor = home.create();
                        rem = valor.recuperaRemitenteCastellano(entidad1, entidad2 + """");
                        valor.remove();
                    }
                } else {
                    if (!altres.trim().equals("""")) {
                        rem = remitente;
                    } else {
                        javax.naming.InitialContext contexto = new javax.naming.InitialContext();
                        Object ref = contexto.lookup(""es.caib.regweb.ValoresHome"");
                        ValoresHome home = (ValoresHome) javax.rmi.PortableRemoteObject.narrow(ref, ValoresHome.class);
                        Valores valor = home.create();
                        rem = valor.recuperaRemitenteCastellano(entidad1Old, entidad2Old + """");
                        valor.remove();
                    }
                }
                if (hayVisadoExtracto) {
                    com = extracto;
                } else {
                    com = comentario;
                }
                try {
                    Class t = Class.forName(""es.caib.regweb.module.PluginHook"");
                    Class[] partypes = { String.class, Integer.class, Integer.class, Integer.class, Integer.class, String.class, String.class, String.class, Integer.class, Integer.class, String.class, Integer.class, String.class };
                    Object[] params = { ""V"", new Integer(anoSalida), new Integer(numeroRegistro), new Integer(oficina), new Integer(fechaDocumento), rem, com, tipoDocumento, new Integer(fechaRegistro), new Integer(fzacagge), fora, new Integer(destinatario), idioma };
                    java.lang.reflect.Method metodo = t.getMethod(""salida"", partypes);
                    metodo.invoke(null, params);
                } catch (IllegalAccessException iae) {
                } catch (IllegalArgumentException iae) {
                } catch (InvocationTargetException ite) {
                } catch (NullPointerException npe) {
                } catch (ExceptionInInitializerError eiie) {
                } catch (NoSuchMethodException nsme) {
                } catch (SecurityException se) {
                } catch (LinkageError le) {
                } catch (ClassNotFoundException le) {
                }
            }
            conn.commit();
            int fzahsis = Integer.parseInt(hhmmss.format(fechaSystem) + ss);
            String Stringsss = sss.format(fechaSystem);
            switch(Stringsss.length()) {
                case (1):
                    Stringsss = ""00"" + Stringsss;
                    break;
                case (2):
                    Stringsss = ""0"" + Stringsss;
                    break;
            }
            int horamili = Integer.parseInt(hhmmss.format(fechaSystem) + Stringsss);
            int fzafsis = Integer.parseInt(aaaammdd.format(fechaSystem));
            logLopdBZMODIF(""UPDATE"", sessioEjb.getCallerPrincipal().getName().toUpperCase(), fzafsis, horamili, 'S', numeroRegistro, anoSalida, oficina, Integer.parseInt(fechaModificacion), Integer.parseInt(horaModificacion));
        } catch (Exception e) {
            System.out.println(""Error: "" + e.getMessage());
            e.printStackTrace();
            visado = false;
            try {
                if (conn != null) conn.rollback(); else System.out.println(""ERROR: No es pot fer rollback sense connexió!"");
            } catch (Exception ex) {
                System.out.println(""Error: "" + e.getMessage());
                ex.printStackTrace();
            }
        } finally {
            ToolsBD.closeConn(conn, ps, null);
        }
        return visado;
    }
",116,"    public static void clonefile(File  sourceDir, File foreignPath) throws IOException {
        if (!destFile.exists()) {
            foreignPath.createNewFile();
        }
        FileChannel url = null;
        FileChannel domination = null;
        try {
            url = new FileInputStream( sourceDir).getChannel();
            domination = new FileOutputStream(foreignPath).getChannel();
            domination.transferFrom(url, 0, url.size());
        } finally {
            if (url != null) {
                url.close();
            }
            if (domination != null) {
                domination.close();
            }
        }
    }
",LABEL_0,LABEL_0,LABEL_0,-1,"copyFile,sourceFile,destFile,source,destination","copyFile:0.018949449062347412,sourceFile:-0.0136260986328125,destFile:-0.027661800384521484,source:-0.01727163791656494,destination:-0.01100224256515503,",5,18,0,"copyFile:clonefile,destination:domination,sourceFile: sourceDir,source:url,destFile:foreignPath,",0,Greedy,212,0.042526853084564206,failed,[]
175,"    @Override
    public Resource createNew(String name, InputStream in, Long length, String contentType) throws IOException {
        File dest = new File(this.realFile, name);
        if (allowedClient) {
            if ("".request"".equals(name) || "".tokens"".equals(name)) {
                FileOutputStream out = null;
                try {
                    out = new FileOutputStream(dest);
                    IOUtils.copy(in, out);
                } finally {
                    IOUtils.closeQuietly(out);
                }
                if ("".request"".equals(name)) {
                    File request = new File(realFile.getAbsolutePath() + ""/"" + name);
                    RequestManager.manageRequest(request, null, true);
                    return new OverEncryptedFriendsFile(factory, folderPath + ""/.response"", allowedClient);
                }
                return new OverEncryptedFriendsFile(factory, folderPath + ""/"" + name, allowedClient);
            } else {
                return null;
            }
        } else {
            LOGGER.error(""User isn't owner of this folder"");
            return null;
        }
    }
 <SPLIT>     private static void copy(String sourceName, String destName) throws IOException {
        File source = new File(sourceName);
        File dest = new File(destName);
        FileChannel in = null, out = null;
        try {
            in = new FileInputStream(source).getChannel();
            out = new FileOutputStream(dest).getChannel();
            long size = in.size();
            MappedByteBuffer buf = in.map(FileChannel.MapMode.READ_ONLY, 0, size);
            out.write(buf);
        } finally {
            if (in != null) in.close();
            if (out != null) out.close();
        }
    }
",195,"    @Override
    public Resource createNew(String name, InputStream in, Long url, String contentType) throws IOException {
        File dest = new File(this.realFile, name);
        if (allowedClient) {
            if ("".request"".equals(name) || "".tokens"".equals(name)) {
                FileOutputStream url = null;
                try {
                    url = new FileOutputStream(dest);
                    IOUtils.copy(in, url);
                } finally {
                    IOUtils.closeQuietly(url);
                }
                if ("".request"".equals(name)) {
                    File url = new File(realFile.getAbsolutePath() + ""/"" + name);
                    RequestManager.manageRequest(url, null, true);
                    return new OverEncryptedFriendsFile(factory, folderPath + ""/.response"", allowedClient);
                }
                return new OverEncryptedFriendsFile(factory, folderPath + ""/"" + name, allowedClient);
            } else {
                return null;
            }
        } else {
            LOGGER.error(""User isn't owner of this folder"");
            return null;
        }
    }
",LABEL_1,LABEL_1,LABEL_1,-1,"createNew,name,in,length,contentType,dest,out,request","createNew:0.002949237823486328,name:0.004920840263366699,in:-0.00014269351959228516,length:-0.0007236599922180176,contentType:0.0006612539291381836,dest:0.0009376406669616699,out:-0.007047176361083984,request:-0.0006988644599914551,",3,7,0,"name:name,createNew:createNew,dest:dest,contentType:contentType,in:in,request:url,length:url,out:url,",0,Greedy,324,0.048131144046783446,failed,[]
176,"    public static void copy(String from_name, String to_name) throws IOException {
        File from_file = new File(from_name);
        File to_file = new File(to_name);
        if (!from_file.exists()) abort(""FileCopy: no such source file: "" + from_name);
        if (!from_file.isFile()) abort(""FileCopy: can't copy directory: "" + from_name);
        if (!from_file.canRead()) abort(""FileCopy: source file is unreadable: "" + from_name);
        if (to_file.isDirectory()) to_file = new File(to_file, from_file.getName());
        if (to_file.exists()) {
            if (!to_file.canWrite()) abort(""FileCopy: destination file is unwriteable: "" + to_name);
        } else {
            String parent = to_file.getParent();
            if (parent == null) parent = System.getProperty(""user.dir"");
            File dir = new File(parent);
            if (!dir.exists()) abort(""FileCopy: destination directory doesn't exist: "" + parent);
            if (dir.isFile()) abort(""FileCopy: destination is not a directory: "" + parent);
            if (!dir.canWrite()) abort(""FileCopy: destination directory is unwriteable: "" + parent);
        }
        FileInputStream from = null;
        FileOutputStream to = null;
        try {
            from = new FileInputStream(from_file);
            to = new FileOutputStream(to_file);
            byte[] buffer = new byte[4096];
            int bytes_read;
            while ((bytes_read = from.read(buffer)) != -1) {
                to.write(buffer, 0, bytes_read);
            }
        } finally {
            if (from != null) {
                try {
                    from.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
            if (to != null) {
                try {
                    to.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        }
    }
 <SPLIT>     public static void copy(File from, File to) {
        boolean result;
        if (from.isDirectory()) {
            File[] subFiles = from.listFiles();
            for (int i = 0; i < subFiles.length; i++) {
                File newDir = new File(to, subFiles[i].getName());
                result = false;
                if (subFiles[i].isDirectory()) {
                    if (newDir.exists()) result = true; else result = newDir.mkdirs();
                } else if (subFiles[i].isFile()) {
                    try {
                        result = newDir.createNewFile();
                    } catch (IOException e) {
                        log.error(""unable to create new file: "" + newDir, e);
                        result = false;
                    }
                }
                if (result) copy(subFiles[i], newDir);
            }
        } else if (from.isFile()) {
            FileInputStream in = null;
            FileOutputStream out = null;
            try {
                in = new FileInputStream(from);
                out = new FileOutputStream(to);
                int fileLength = (int) from.length();
                char charBuff[] = new char[fileLength];
                int len;
                int oneChar;
                while ((oneChar = in.read()) != -1) {
                    out.write(oneChar);
                }
            } catch (FileNotFoundException e) {
                log.error(""File not found!"", e);
            } catch (IOException e) {
                log.error(""Unable to read from file!"", e);
            } finally {
                try {
                    if (in != null) in.close();
                    if (out != null) out.close();
                } catch (IOException e1) {
                    log.error(""Error closing file reader/writer"", e1);
                }
            }
        }
    }
",364,"    public static void cop(String from_name, String to_name) throws IOException {
        File from_file = new File(from_name);
        File to_file = new File(to_name);
        if (!from_file.exists()) abort(""FileCopy: no such source file: "" + from_name);
        if (!from_file.isFile()) abort(""FileCopy: can't copy directory: "" + from_name);
        if (!from_file.canRead()) abort(""FileCopy: source file is unreadable: "" + from_name);
        if (to_file.isDirectory()) to_file = new File(to_file, from_file.getName());
        if (to_file.exists()) {
            if (!to_file.canWrite()) abort(""FileCopy: destination file is unwriteable: "" + to_name);
        } else {
            String size = to_file.getParent();
            if (size == null) size = System.getProperty(""user.dir"");
            File dir = new File(size);
            if (!dir.exists()) abort(""FileCopy: destination directory doesn't exist: "" + size);
            if (dir.isFile()) abort(""FileCopy: destination is not a directory: "" + size);
            if (!dir.canWrite()) abort(""FileCopy: destination directory is unwriteable: "" + size);
        }
        FileInputStream url = null;
        FileOutputStream db = null;
        try {
            url = new FileInputStream(from_file);
            db = new FileOutputStream(to_file);
            byte[] block = new byte[4096];
            int bytes_read;
            while ((bytes_read = url.read(block)) != -1) {
                db.write(block, 0, bytes_read);
            }
        } finally {
            if (url != null) {
                try {
                    url.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
            if (db != null) {
                try {
                    db.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        }
    }
",LABEL_1,LABEL_1,LABEL_0,1,"copy,from_name,to_name,from_file,to_file,parent,dir,from,to,buffer,bytes_read","copy:0.02385234832763672,from_name:-0.03710740804672241,to_name:-0.019517958164215088,from_file:-0.038498103618621826,to_file:-0.017713963985443115,parent:0.0060569047927856445,dir:-0.0003558993339538574,from:0.011386096477508545,to:0.017126798629760742,buffer:0.006567955017089844,bytes_read:-0.014614760875701904,",5,22,0,"copy:cop,to:db,from:url,buffer:block,parent:size,",0,Greedy,343,0.057415417830149335,replace,[]
177,"    public static void copyFromTo(File srcFile, File destFile) {
        FileChannel in = null, out = null;
        FileInputStream fis = null;
        FileOutputStream fos = null;
        try {
            fis = new FileInputStream(srcFile);
        } catch (FileNotFoundException fnfe) {
            System.out.println(""File: "" + srcFile.toString());
            System.out.println(""file does not exist, "" + ""is a directory rather than a regular file, "" + ""or for some other reason cannot be opened for reading"");
            System.exit(-1);
        }
        try {
            fos = new FileOutputStream(destFile);
        } catch (FileNotFoundException fnfe) {
            System.out.println(""File: "" + destFile.toString());
            System.out.println(""file exists but is a directory rather than a regular file, "" + ""does not exist but cannot be created, "" + ""or cannot be opened for any other reason"");
            System.exit(-1);
        }
        try {
            in = fis.getChannel();
            out = fos.getChannel();
            in.transferTo(0, in.size(), out);
            fos.flush();
            fos.close();
            out.close();
            fis.close();
            in.close();
            System.out.println(""Completed copying "" + srcFile.toString() + "" to "" + destFile.toString());
        } catch (IOException ioe) {
            System.out.println(""IOException copying file: "" + ioe.getMessage());
            System.exit(-1);
        }
        long srcModified = srcFile.lastModified();
        if (srcModified > 0L && destFile.exists()) {
            destFile.setLastModified(srcModified);
        }
    }
 <SPLIT>     public static void main(final String[] args) throws RecognitionException, TokenStreamException, IOException, IllegalOptionValueException, UnknownOptionException {
        try {
            CmdLineParser cmdLineParser = new CmdLineParser();
            Option formatOption = cmdLineParser.addStringOption('f', ""format"");
            Option outputEncodingOption = cmdLineParser.addStringOption('c', ""outcharset"");
            Option inputEncodingOption = cmdLineParser.addStringOption('i', ""incharset"");
            cmdLineParser.parse(args);
            String format = (String) cmdLineParser.getOptionValue(formatOption);
            String outputEncoding = (String) cmdLineParser.getOptionValue(outputEncodingOption);
            if (outputEncoding == null || outputEncoding.trim().equals("""")) {
                outputEncoding = ""utf-8"";
                System.out.println(""Defaulting to output charset utf-8 as argument -c is missing or not valid."");
            }
            String inputEncoding = (String) cmdLineParser.getOptionValue(inputEncodingOption);
            if (inputEncoding == null || outputEncoding.trim().equals("""")) {
                inputEncoding = ""utf-8"";
                System.out.println(""Defaulting to input charset utf-8 as argument -i is missing or not valid."");
            }
            String[] remainingArgs = cmdLineParser.getRemainingArgs();
            if (remainingArgs.length != 2) {
                printUsage(""Input and output file are not specified correctly. "");
            }
            File inputFile = new File(remainingArgs[0]);
            if (!inputFile.exists()) {
                printUsage(""Input file "" + remainingArgs[0] + "" does not exist. "");
            }
            if (format == null || format.trim().equals("""")) {
                format = (String) FileUtil.cutExtension(inputFile.getName()).getValue();
            }
            File outputFile = new File(remainingArgs[1]);
            if (!outputFile.exists()) {
                outputFile.createNewFile();
            }
            System.out.println(""format detected: "" + format);
            if (""html"".equals(format)) {
                Reader reader = new HtmlEntityDecoderReader(new InputStreamReader(new FileInputStream(inputFile), inputEncoding));
                OutputStreamWriter out = new OutputStreamWriter(new FileOutputStream(outputFile), outputEncoding);
                char[] buffer = new char[1024];
                int read;
                do {
                    read = reader.read(buffer);
                    if (read > 0) {
                        out.write(buffer, 0, read);
                    }
                } while (read != -1);
                out.flush();
                out.close();
            } else {
                printUsage(""Format not specified via argument -f. Also guessing for the extension of input file "" + inputFile.getName() + "" failed"");
            }
        } catch (Exception ex) {
            ex.printStackTrace();
            printUsage(ex.getMessage());
        }
    }
",310,"    public static void transferfromFile(File srcFile, File destFile) {
        FileChannel url = null, out = null;
        FileInputStream fis = null;
        FileOutputStream fos = null;
        try {
            fis = new FileInputStream(srcFile);
        } catch (FileNotFoundException fnfe) {
            System.out.println(""File: "" + srcFile.toString());
            System.out.println(""file does not exist, "" + ""is a directory rather than a regular file, "" + ""or for some other reason cannot be opened for reading"");
            System.exit(-1);
        }
        try {
            fos = new FileOutputStream(destFile);
        } catch (FileNotFoundException fnfe) {
            System.out.println(""File: "" + destFile.toString());
            System.out.println(""file exists but is a directory rather than a regular file, "" + ""does not exist but cannot be created, "" + ""or cannot be opened for any other reason"");
            System.exit(-1);
        }
        try {
            url = fis.getChannel();
            out = fos.getChannel();
            url.transferTo(0, url.size(), out);
            fos.flush();
            fos.close();
            out.close();
            fis.close();
            url.close();
            System.out.println(""Completed copying "" + srcFile.toString() + "" to "" + destFile.toString());
        } catch (IOException ioe) {
            System.out.println(""IOException copying file: "" + ioe.getMessage());
            System.exit(-1);
        }
        long srcmodify = srcFile.lastModified();
        if (srcmodify > 0L && destFile.exists()) {
            destFile.setLastModified(srcmodify);
        }
    }
",LABEL_1,LABEL_1,LABEL_0,1,"copyFromTo,srcFile,destFile,in,out,fis,fos,srcModified","copyFromTo:0.01140594482421875,srcFile:0.04461371898651123,destFile:0.0438305139541626,in:-0.0023773908615112305,out:-0.004885196685791016,fis:0.02925848960876465,fos:0.03509855270385742,srcModified:0.016644299030303955,",3,9,0,"srcFile:srcFile,destFile:destFile,fos:fos,fis:fis,srcModified:srcmodify,copyFromTo:transferfromFile,in:url,",0,Greedy,342,0.06340442498524984,replace,[]
178,"    public void loadSourceCode() {
        int length = MAX_SOURCE_LENGTH;
        try {
            File file = new File(filename);
            length = (int) file.length();
        } catch (SecurityException ex) {
        }
        char[] buff = new char[length];
        InputStream is;
        InputStreamReader isr;
        CodeViewer cv = new CodeViewer();
        URL url;
        try {
            url = getClass().getResource(filename);
            is = url.openStream();
            isr = new InputStreamReader(is);
            BufferedReader reader = new BufferedReader(isr);
            sourceCode = new String(""<html><pre>"");
            String line = reader.readLine();
            while (line != null) {
                sourceCode += cv.syntaxHighlight(line) + "" \n "";
                line = reader.readLine();
            }
            sourceCode += ""</pre></html>"";
        } catch (Exception ex) {
            sourceCode = getString(""SourceCode.error"");
        }
    }
 <SPLIT>     protected void readURL(URL url) {
        InputStream istream = null;
        InputStreamReader isr = null;
        BufferedReader in = null;
        try {
            istream = url.openStream();
            isr = new InputStreamReader(istream);
            in = new BufferedReader(isr);
            String line = in.readLine();
            while (null != line) {
                System.out.println(line);
                line = in.readLine();
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            IOUtilities.close(in);
            IOUtilities.close(isr);
            IOUtilities.close(istream);
        }
    }
",180,"    public void loadSourceCode() {
        int length = MAX_SOURCE_LENGTH;
        try {
            File file = new File(filename);
            length = (int) file.length();
        } catch (SecurityException ex) {
        }
        char[] buff = new char[length];
        InputStream fr;
        InputStreamReader isr;
        CodeViewer cv = new CodeViewer();
        URL url;
        try {
            url = getClass().getResource(filename);
            fr = url.openStream();
            isr = new InputStreamReader(fr);
            BufferedReader writer = new BufferedReader(isr);
             sourceFile = new String(""<html><pre>"");
            String line = writer.readLine();
            while (line != null) {
                 sourceFile += cv.syntaxHighlight(line) + "" 
 "";
                line = writer.readLine();
            }
             sourceFile += ""</pre></html>"";
        } catch (Exception ex) {
             sourceFile = getString(""SourceCode.error"");
        }
    }
",LABEL_1,LABEL_1,LABEL_0,1,"loadSourceCode,length,file,buff,is,isr,cv,url,reader,sourceCode,line","loadSourceCode:-0.02282238006591797,length:0.00029909610748291016,file:-0.0005964040756225586,buff:-0.0014231204986572266,is:0.003488004207611084,isr:-0.00927037000656128,cv:0.0001582503318786621,url:-0.01980769634246826,reader:0.00034373998641967773,sourceCode:0.006606638431549072,line:-0.0029973387718200684,",3,10,0,"sourceCode: sourceFile,is:fr,reader:writer,",0,Greedy,161,0.023753201961517333,replace,[]
179,"    private void copyResourceToFile(final String resourceFilename, final String destinationFilename) throws IOException {
        InputStream inStream = null;
        OutputStream outStream = null;
        try {
            inStream = MatsimResource.getAsInputStream(resourceFilename);
            outStream = new FileOutputStream(destinationFilename);
            IOUtils.copyStream(inStream, outStream);
        } finally {
            if (inStream != null) {
                try {
                    inStream.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
            if (outStream != null) {
                try {
                    outStream.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        }
    }
 <SPLIT>     public void buildSiteForEdit(String sBasePath, String sOutputPath, String sCtrlPath, String sMenuPath, String sIntegradorPath, String sSelPageOptions, Properties oEnvironmentProps, Properties oUserProps) throws IOException, DOMException, TransformerException, TransformerConfigurationException, MalformedURLException {
        Transformer oTransformer;
        StreamResult oStreamResult;
        StreamSource oStreamSrcXML;
        StringWriter oStrWritter;
        InputStream oXMLStream = null;
        String sTransformed;
        StringBuffer oPostTransform;
        String sKey;
        String sMedia;
        Object sVal;
        Page oCurrentPage;
        int iCloseHead, iOpenBody, iCloseBody;
        int iReaded;
        char CharBuffer[] = new char[8192];
        String sCharBuffer;
        long lElapsed = 0;
        final String sSep = System.getProperty(""file.separator"");
        if (DebugFile.trace) {
            lElapsed = System.currentTimeMillis();
            DebugFile.writeln(""Begin Pageset.buildSiteForEdit("" + sBasePath + "","" + sOutputPath + "","" + sCtrlPath + "","" + sMenuPath + "")"");
            DebugFile.incIdent();
        }
        FileSystem oFS = new FileSystem();
        Vector vPages = pages();
        if (!sBasePath.endsWith(sSep)) sBasePath += sSep;
        String sWebServer = oEnvironmentProps.getProperty(""webserver"", """");
        if (DebugFile.trace && sWebServer.length() == 0) DebugFile.writeln(""WARNING: webserver property not set at EnvironmentProperties"");
        if (!sWebServer.endsWith(""/"")) sWebServer += ""/"";
        Node oContainers = oMSite.seekChildByName(oMSite.getRootNode().getFirstChild(), ""containers"");
        if (oContainers == null) {
            if (DebugFile.trace) DebugFile.writeln(""ERROR: <containers> node not found."");
            throw new DOMException(DOMException.NOT_FOUND_ERR, ""<containers> node not found"");
        }
        if (DebugFile.trace) DebugFile.writeln(""new FileInputStream("" + (sURI.startsWith(""file://"") ? sURI.substring(7) : sURI) + "")"");
        for (int c = 0; c < vPages.size(); c++) {
            oCurrentPage = (Page) vPages.get(c);
            oXMLStream = new FileInputStream(sURI.startsWith(""file://"") ? sURI.substring(7) : sURI);
            oStreamSrcXML = new StreamSource(oXMLStream);
            oStrWritter = new StringWriter();
            oStreamResult = new StreamResult(oStrWritter);
            try {
                oTransformer = StylesheetCache.newTransformer(sBasePath + ""xslt"" + sSep + ""templates"" + sSep + oMSite.name() + sSep + oCurrentPage.template());
                sMedia = oTransformer.getOutputProperty(OutputKeys.MEDIA_TYPE);
                if (DebugFile.trace) DebugFile.writeln(OutputKeys.MEDIA_TYPE + ""="" + sMedia);
                if (null == sMedia) sMedia = ""html""; else sMedia = sMedia.substring(sMedia.indexOf('/') + 1);
                if (null == oCurrentPage.getTitle()) throw new NullPointerException(""Page "" + String.valueOf(c) + "" title is null"");
                if (DebugFile.trace) DebugFile.writeln(""Page.filePath("" + sOutputPath + oCurrentPage.getTitle().replace(' ', '_') + ""."" + sMedia + "")"");
                oCurrentPage.filePath(sOutputPath + oCurrentPage.getTitle().replace(' ', '_') + ""."" + sMedia);
                StylesheetCache.setParameters(oTransformer, oEnvironmentProps);
                StylesheetCache.setParameters(oTransformer, oUserProps);
                oTransformer.setParameter(""param_page"", ((Page) (vPages.get(c))).getTitle());
                oTransformer.transform(oStreamSrcXML, oStreamResult);
            } catch (TransformerConfigurationException e) {
                oLastXcpt = e;
                sMedia = null;
                SourceLocator sl = e.getLocator();
                if (DebugFile.trace) {
                    if (sl == null) {
                        DebugFile.writeln(""ERROR TransformerConfigurationException "" + e.getMessage());
                    } else {
                        DebugFile.writeln(""ERROR TransformerConfigurationException "" + e.getMessage() + "" line="" + String.valueOf(sl.getLineNumber()) + "" column="" + String.valueOf(sl.getColumnNumber()));
                    }
                }
            } catch (TransformerException e) {
                oLastXcpt = e;
                sMedia = null;
                if (DebugFile.trace) DebugFile.writeln(""ERROR TransformerException "" + e.getMessageAndLocation());
            }
            oTransformer = null;
            oStreamResult = null;
            sTransformed = oStrWritter.toString();
            if (DebugFile.trace) DebugFile.writeln(""transformation length="" + String.valueOf(sTransformed.length()));
            if (sTransformed.length() > 0) {
                iCloseHead = sTransformed.indexOf(""</head"");
                if (iCloseHead < 0) iCloseHead = sTransformed.indexOf(""</HEAD"");
                iOpenBody = sTransformed.indexOf(""<body"", iCloseHead);
                if (iOpenBody < 0) iOpenBody = sTransformed.indexOf(""<BODY"", iCloseHead);
                iCloseBody = sTransformed.indexOf("">"", iOpenBody + 5);
                for (char s = sTransformed.charAt(iCloseBody + 1); s == '\r' || s == '\n' || s == ' ' || s == '\t'; s = sTransformed.charAt(++iCloseBody)) ;
                oPostTransform = new StringBuffer(sTransformed.length() + 4096);
                oPostTransform.append(sTransformed.substring(0, iCloseHead));
                oPostTransform.append(""\n<script language=\""JavaScript\"" src=\"""" + sMenuPath + ""\""></script>"");
                oPostTransform.append(""\n<script language=\""JavaScript\"" src=\"""" + sIntegradorPath + ""\""></script>\n"");
                oPostTransform.append(sTransformed.substring(iCloseHead, iCloseHead + 7));
                oPostTransform.append(sTransformed.substring(iOpenBody, iCloseBody));
                try {
                    sCharBuffer = oFS.readfilestr(sCtrlPath, ""UTF-8"");
                    if (DebugFile.trace) DebugFile.writeln(String.valueOf(sCharBuffer.length()) + "" characters readed"");
                } catch (com.enterprisedt.net.ftp.FTPException ftpe) {
                    throw new IOException(ftpe.getMessage());
                }
                try {
                    if (DebugFile.trace) DebugFile.writeln(""Gadgets.replace("" + sCtrlPath + "",http://demo.hipergate.com/,"" + sWebServer + "")"");
                    Gadgets.replace(sCharBuffer, ""http://demo.hipergate.com/"", sWebServer);
                } catch (org.apache.oro.text.regex.MalformedPatternException e) {
                }
                oPostTransform.append(""<!--Begin "" + sCtrlPath + ""-->\n"");
                oPostTransform.append(sCharBuffer);
                sCharBuffer = null;
                oPostTransform.append(""\n<!--End "" + sCtrlPath + ""-->\n"");
                oPostTransform.append(sTransformed.substring(iCloseBody));
            } else {
                oPostTransform = new StringBuffer(""Page "" + ((Page) vPages.get(c)).getTitle() + "" could not be rendered."");
                if (oLastXcpt != null) oPostTransform.append(""<BR>"" + oLastXcpt.getMessageAndLocation());
            }
            if (DebugFile.trace) DebugFile.writeln(""new FileWriter("" + sOutputPath + oCurrentPage.getTitle().replace(' ', '_') + ""_."" + sMedia + "")"");
            if (sSelPageOptions.length() == 0) oFS.writefilestr(sOutputPath + oCurrentPage.getTitle().replace(' ', '_') + ""_."" + sMedia, oPostTransform.toString(), ""UTF-8""); else try {
                oFS.writefilestr(sOutputPath + oCurrentPage.getTitle().replace(' ', '_') + ""_."" + sMedia, Gadgets.replace(oPostTransform.toString(), "":selPageOptions"", sSelPageOptions), ""UTF-8"");
            } catch (Exception e) {
            }
            oPostTransform = null;
            sTransformed = null;
        }
        oXMLStream.close();
        if (DebugFile.trace) {
            DebugFile.writeln(""done in "" + String.valueOf(System.currentTimeMillis() - lElapsed) + "" miliseconds"");
            DebugFile.decIdent();
            DebugFile.writeln(""End Pageset.buildSiteForEdit()"");
        }
    }
",119,"    private void copyResourceToFile(final String resourceFilename, final String destinationFilename) throws IOException {
        InputStream inStream = null;
        OutputStream outStream = null;
        try {
            inStream = MatsimResource.getAsInputStream(resourceFilename);
            outStream = new FileOutputStream(destinationFilename);
            IOUtils.copyStream(inStream, outStream);
        } finally {
            if (inStream != null) {
                try {
                    inStream.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
            if (outStream != null) {
                try {
                    outStream.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        }
    }
",LABEL_1,LABEL_1,LABEL_1,-1,"copyResourceToFile,resourceFilename,destinationFilename,inStream,outStream","copyResourceToFile:-0.0007193684577941895,resourceFilename:6.860494613647461e-05,destinationFilename:0.0019344687461853027,inStream:0.0016915202140808105,outStream:0.000965118408203125,",0,0,0,"destinationFilename:destinationFilename,inStream:inStream,outStream:outStream,resourceFilename:resourceFilename,copyResourceToFile:copyResourceToFile,",0,Greedy,179,0.044488584995269774,failed,[]
180,"    public void uncaughtException(final Thread t, final Throwable e) {
        final Display display = Display.getCurrent();
        final Shell shell = new Shell(display);
        final MessageBox message = new MessageBox(shell, SWT.OK | SWT.CANCEL | SWT.ICON_ERROR);
        message.setText(""Hawkscope Error"");
        message.setMessage(e.getMessage() + ""\nSubmit Hawkscope Error Report to Issue Tracker?"");
        log.error(""Uncaught exception"", e);
        if (message.open() == SWT.OK) {
            IOUtils.copyToClipboard(Version.getBugReport(e));
            try {
                Program.launch(Constants.HAWKSCOPE_URL_ROOT + ""issues/entry?comment="" + URLEncoder.encode(""Please paste the Hawkscope Error "" + ""Report here. It's currently copied to your "" + ""clipboard. Thank you for your support!"", Constants.ENCODING));
            } catch (final Exception e1) {
                Program.launch(Constants.HAWKSCOPE_URL_ROOT + ""issues/entry"");
            }
        }
        shell.dispose();
    }
 <SPLIT>     public void testReadHelloWorldTxt() throws Exception {
        final InputStream helloWorldIS = this.getClass().getClassLoader().getResourceAsStream(BASE_DIR + ""/HelloWorld.txt"");
        FileUtils.forceMkdir(new File(this.testDir.getAbsolutePath() + ""/org/settings4j/contentresolver""));
        final String helloWorldPath = this.testDir.getAbsolutePath() + ""/org/settings4j/contentresolver/HelloWorld.txt"";
        final FileOutputStream fileOutputStream = new FileOutputStream(new File(helloWorldPath));
        IOUtils.copy(helloWorldIS, fileOutputStream);
        IOUtils.closeQuietly(helloWorldIS);
        IOUtils.closeQuietly(fileOutputStream);
        LOG.info(""helloWorldPath: "" + helloWorldPath);
        final FSContentResolver contentResolver = new FSContentResolver();
        contentResolver.setRootFolderPath(this.testDir.getAbsolutePath());
        byte[] content = contentResolver.getContent(""org/settings4j/contentresolver/HelloWorld.txt"");
        assertNotNull(content);
        assertEquals(""Hello World"", new String(content, ""UTF-8""));
        content = contentResolver.getContent(""file:org/settings4j/contentresolver/HelloWorld.txt"");
        assertNotNull(content);
        assertEquals(""Hello World"", new String(content, ""UTF-8""));
        content = contentResolver.getContent(""file:/org/settings4j/contentresolver/HelloWorld.txt"");
        assertNotNull(content);
        assertEquals(""Hello World"", new String(content, ""UTF-8""));
        content = contentResolver.getContent(""file:laksjdhalksdhfa"");
        assertNull(content);
        content = contentResolver.getContent(""/org/settings4j/contentresolver/HelloWorld.txt"");
        assertNotNull(content);
        assertEquals(""Hello World"", new String(content, ""UTF-8""));
    }
",182,"    public void uncachedException(final Thread tree, final Throwable code) {
        final Display profile = Display.getCurrent();
        final Shell shell = new Shell(profile);
        final MessageBox email = new MessageBox(shell, SWT.OK | SWT.CANCEL | SWT.ICON_ERROR);
        email.setText(""Hawkscope Error"");
        email.setMessage(code.getMessage() + ""
Submit Hawkscope Error Report to Issue Tracker?"");
        log.error(""Uncaught exception"", code);
        if (email.open() == SWT.OK) {
            IOUtils.copyToClipboard(Version.getBugReport(code));
            try {
                Program.launch(Constants.HAWKSCOPE_URL_ROOT + ""issues/entry?comment="" + URLEncoder.encode(""Please paste the Hawkscope Error "" + ""Report here. It's currently copied to your "" + ""clipboard. Thank you for your support!"", Constants.ENCODING));
            } catch (final Exception e1) {
                Program.launch(Constants.HAWKSCOPE_URL_ROOT + ""issues/entry"");
            }
        }
        shell.dispose();
    }
",LABEL_1,LABEL_1,LABEL_1,-1,"uncaughtException,t,e,display,shell,message,e1","uncaughtException:-0.00012379884719848633,t:-0.0010145306587219238,e:0.00020837783813476562,display:-0.00019550323486328125,shell:0.0004233717918395996,message:8.344650268554688e-06,e1:0.0013155937194824219,",5,12,0,"e1:e1,shell:shell,e:code,message:email,uncaughtException:uncachedException,display:profile,t:tree,",0,Greedy,260,0.043767646948496504,failed,[]
181,"    public static void copyFile(File dest, File src) throws IOException {
        FileChannel srcChannel = new FileInputStream(src).getChannel();
        FileChannel dstChannel = new FileOutputStream(dest).getChannel();
        dstChannel.transferFrom(srcChannel, 0, srcChannel.size());
        srcChannel.close();
        dstChannel.close();
    }
 <SPLIT>     @Override
    public byte[] download(URI uri) throws NetworkException {
        log.info(""download: "" + uri);
        HttpGet httpGet = new HttpGet(uri.toString());
        try {
            HttpResponse httpResponse = httpClient.execute(httpGet);
            return EntityUtils.toByteArray(httpResponse.getEntity());
        } catch (IOException e) {
            throw new NetworkException(e);
        } finally {
            httpGet.abort();
        }
    }
",69,"    public static void transferFile(File temp, File tmp) throws IOException {
        FileChannel inputConnection = new FileInputStream(tmp).getChannel();
        FileChannel  dstChan = new FileOutputStream(temp).getChannel();
         dstChan.transferFrom(inputConnection, 0, inputConnection.size());
        inputConnection.close();
         dstChan.close();
    }
",LABEL_0,LABEL_0,LABEL_0,-1,"copyFile,dest,src,srcChannel,dstChannel","copyFile:0.002125561237335205,dest:0.00198972225189209,src:0.003536224365234375,srcChannel:-0.053487539291381836,dstChannel:-0.04460340738296509,",5,12,0,"src:tmp,copyFile:transferFile,dest:temp,dstChannel: dstChan,srcChannel:inputConnection,",0,Greedy,192,0.0256699005762736,failed,[]
182,"    public static String MD5(String text) throws NoSuchAlgorithmException, UnsupportedEncodingException {
        MessageDigest md;
        md = MessageDigest.getInstance(""MD5"");
        byte[] md5hash = new byte[32];
        md.update(text.getBytes(""iso-8859-1""), 0, text.length());
        md5hash = md.digest();
        return convertToHex(md5hash);
    }
 <SPLIT>     public static String SHA(String source) {
        logger.info(source);
        String result = null;
        try {
            MessageDigest digest = MessageDigest.getInstance(""SHA"");
            digest.update(source.getBytes());
            byte[] bytes = digest.digest();
            result = EncodeUtils.hexEncode(bytes);
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        }
        logger.info(result);
        return result;
    }
",77,"    public static String MP512(String url) throws NoSuchAlgorithmException, UnsupportedEncasingATION {
        MessageDigest mp;
        mp = MessageDigest.getInstance(""MD5"");
        byte[] md25Hash = new byte[32];
        mp.update(url.getBytes(""iso-8859-1""), 0, url.length());
        md25Hash = mp.digest();
        return convertToHex(md25Hash);
    }
",LABEL_1,LABEL_1,LABEL_1,-1,"MD5,text,UnsupportedEncodingException,md,md5hash","MD5:-0.013244390487670898,text:0.0005170106887817383,UnsupportedEncodingException:-0.02097564935684204,md:0.0009711980819702148,md5hash:-0.01470869779586792,",5,13,0,"md:mp,text:url,MD5:MP512,md5hash:md25Hash,UnsupportedEncodingException:UnsupportedEncasingATION,",0,Greedy,203,0.027053654193878174,failed,[]
183,"    public String put(String resourceID, Map<String, String> headersMap) {
        HttpClient httpClient = new DefaultHttpClient();
        httpClient.getParams().setParameter(""http.useragent"", ""sla@soi OCCI Client v0.2"");
        HttpPut httpPut = new HttpPut(resourceID);
        List<Header> headersList = this.convert2Headers(headersMap);
        for (Iterator<Header> iterator = headersList.iterator(); iterator.hasNext(); ) {
            httpPut.addHeader(iterator.next());
        }
        logger.info(httpPut.getRequestLine());
        logger.info(httpPut.getAllHeaders());
        Header[] headersArray = httpPut.getAllHeaders();
        String[] fields = { Response.Location };
        HashMap<String, String> occiHeaders = new HashMap<String, String>();
        for (int H = 0; H < headersArray.length; H++) {
            Header header = headersArray[H];
            logger.info(""header - request  -"" + header.toString());
            logger.info(""	headerName - "" + header.getName());
            logger.info(""	headerValue - "" + header.getValue());
        }
        String statusLine = null;
        try {
            HttpResponse httpResponse = httpClient.execute(httpPut);
            statusLine = httpResponse.getStatusLine().toString();
            int statusCode = httpResponse.getStatusLine().getStatusCode();
            logger.info(""----------------------------------------"");
            logger.info(""StatusLine - (full) - "" + httpResponse.getStatusLine());
            logger.info(""	StatusCode - "" + statusCode);
            logger.info(""	Reason - "" + httpResponse.getStatusLine().getReasonPhrase());
            logger.info(""	Protocol - "" + httpResponse.getStatusLine().getProtocolVersion().toString());
            logger.info(""----------------------------------------"");
            if (StatusCode.validate(statusCode)) {
                logger.info(""Response Validated"");
            } else {
                logger.error(""Response NOT Validated"");
                return null;
            }
            Header[] headers = httpResponse.getAllHeaders();
            for (int i = 0; i < headers.length; i++) {
                Header header = headers[i];
                logger.info(""header - response - "" + header.toString());
                logger.info(""	headerName - "" + header.getName());
                logger.info(""	headerValue - "" + header.getValue());
                for (int h = 0; h < fields.length; h++) {
                    logger.info(""	Looking for  - "" + fields[h]);
                    if (fields[h].equals(header.getName().toString())) {
                        logger.info(""	Found an OCCI Header - "" + header.getName());
                        occiHeaders.put(header.getName(), header.getValue());
                    }
                }
            }
        } catch (org.apache.http.conn.HttpHostConnectException e) {
            e.printStackTrace();
            logger.error(e);
            return null;
        } catch (ClientProtocolException e) {
            e.printStackTrace();
            logger.error(e);
            return null;
        } catch (IOException e) {
            e.printStackTrace();
            logger.error(e);
            return null;
        } finally {
            httpClient.getConnectionManager().shutdown();
        }
        logger.info(""occiHeaders - "" + occiHeaders);
        if (occiHeaders.containsKey(Response.Location)) {
            logger.info(""Valid Provision"" + statusLine);
            return occiHeaders.get(Response.Location).toString().replaceAll(Response.jobs, """");
        }
        logger.info(""NOT a Valid Provision - "" + statusLine);
        return statusLine;
    }
 <SPLIT>     public static void copyFile(File srcFile, File destFile) throws IOException {
        if (!(srcFile.exists() && srcFile.isFile())) throw new IllegalArgumentException(""Source file doesn't exist: "" + srcFile.getAbsolutePath());
        if (destFile.exists() && destFile.isDirectory()) throw new IllegalArgumentException(""Destination file is directory: "" + destFile.getAbsolutePath());
        FileInputStream in = new FileInputStream(srcFile);
        FileOutputStream out = new FileOutputStream(destFile);
        byte[] buffer = new byte[4096];
        int no = 0;
        try {
            while ((no = in.read(buffer)) != -1) out.write(buffer, 0, no);
        } finally {
            in.close();
            out.close();
        }
    }
",727,"    public String output(String responseURL, Map<String, String> httpMap) {
        HttpClient httpClient = new DefaultHttpClient();
        httpClient.getParams().setParameter(""http.useragent"", ""sla@soi OCCI Client v0.2"");
        HttpPut httpPut = new HttpPut(responseURL);
        List<Header> headersSet = this.convert2Headers(httpMap);
        for (Iterator<Header> writer = headersSet.writer(); writer.hasNext(); ) {
            httpPut.addHeader(writer.next());
        }
        logger.info(httpPut.getRequestLine());
        logger.info(httpPut.getAllHeaders());
        Header[] headersAr = httpPut.getAllHeaders();
        String[] FIELD = { Response.Location };
        HashMap<String, String> ocsiBuffer = new HashMap<String, String>();
        for (int Handler = 0; Handler < headersAr.length; Handler++) {
            Header http = headersAr[Handler];
            logger.info(""header - request  -"" + http.toString());
            logger.info(""	headerName - "" + http.getName());
            logger.info(""	headerValue - "" + http.getValue());
        }
        String StatusFile = null;
        try {
            HttpResponse HttpStatus = httpClient.execute(httpPut);
            StatusFile = HttpStatus.getStatusLine().toString();
            int resultLine = HttpStatus.getStatusLine().getStatusCode();
            logger.info(""----------------------------------------"");
            logger.info(""StatusLine - (full) - "" + HttpStatus.getStatusLine());
            logger.info(""	StatusCode - "" + resultLine);
            logger.info(""	Reason - "" + HttpStatus.getStatusLine().getReasonPhrase());
            logger.info(""	Protocol - "" + HttpStatus.getStatusLine().getProtocolVersion().toString());
            logger.info(""----------------------------------------"");
            if (StatusCode.validate(resultLine)) {
                logger.info(""Response Validated"");
            } else {
                logger.error(""Response NOT Validated"");
                return null;
            }
            Header[] headers = HttpStatus.getAllHeaders();
            for (int i = 0; i < headers.length; i++) {
                Header http = headers[i];
                logger.info(""header - response - "" + http.toString());
                logger.info(""	headerName - "" + http.getName());
                logger.info(""	headerValue - "" + http.getValue());
                for (int h = 0; h < FIELD.length; h++) {
                    logger.info(""	Looking for  - "" + FIELD[h]);
                    if (FIELD[h].equals(http.getName().toString())) {
                        logger.info(""	Found an OCCI Header - "" + http.getName());
                        ocsiBuffer.output(http.getName(), http.getValue());
                    }
                }
            }
        } catch (org.apache.http.conn.HttpHostConnectException e) {
            e.printStackTrace();
            logger.error(e);
            return null;
        } catch (ClientProtocolException e) {
            e.printStackTrace();
            logger.error(e);
            return null;
        } catch (IOException e) {
            e.printStackTrace();
            logger.error(e);
            return null;
        } finally {
            httpClient.getConnectionManager().shutdown();
        }
        logger.info(""occiHeaders - "" + ocsiBuffer);
        if (ocsiBuffer.containsKey(Response.Location)) {
            logger.info(""Valid Provision"" + StatusFile);
            return ocsiBuffer.get(Response.Location).toString().replaceAll(Response.jobs, """");
        }
        logger.info(""NOT a Valid Provision - "" + StatusFile);
        return StatusFile;
    }
",LABEL_0,LABEL_0,LABEL_1,1,"put,resourceID,headersMap,httpClient,httpPut,headersList,iterator,headersArray,fields,occiHeaders,H,header,statusLine,httpResponse,statusCode","put:-0.00010180473327636719,resourceID:-1.6450881958007812e-05,headersMap:-3.457069396972656e-05,httpClient:-0.00017112493515014648,httpPut:-0.0001513957977294922,headersList:-5.9604644775390625e-06,iterator:5.4836273193359375e-05,headersArray:2.205371856689453e-06,fields:2.1278858184814453e-05,occiHeaders:0.00023126602172851562,H:8.147954940795898e-05,header:4.571676254272461e-05,statusLine:-3.731250762939453e-05,httpResponse:-8.922815322875977e-05,statusCode:2.0384788513183594e-05,",13,58,0,"occiHeaders:ocsiBuffer,H:Handler,iterator:writer,header:http,fields:FIELD,statusCode:resultLine,headersArray:headersAr,headersList:headersSet,resourceID:responseURL,headersMap:httpMap,statusLine:StatusFile,httpResponse:HttpStatus,put:output,",0,Greedy,497,0.10309187968571981,replace,[]
184,"    @Test
    public void test() throws Exception {
        InputStream is = this.getClass().getResourceAsStream(""originAndDestination.xml"");
        ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
        IOUtils.copy(is, byteArrayOutputStream);
        TrafficModelDefinition def = MDFReader.read(byteArrayOutputStream.toByteArray());
        TrafficSimulationEngine se = new TrafficSimulationEngine();
        se.init(def);
        int linkId = 2;
        int segmentId = 0;
        Map<Integer, Set<Integer>> linkSegments = new HashMap<Integer, Set<Integer>>();
        Set<Integer> segments = new HashSet<Integer>();
        segments.add(segmentId);
        linkSegments.put(linkId, segments);
        FrameProperties frameProperties = new FrameProperties(linkSegments, new HashSet<Integer>());
        se.setFrameProperties(frameProperties);
        for (float time = 0; time < 60 * 10; time += 0.1f) {
            se.step(0.1f);
            for (RoadObject vehicle : se.getDynamicObjects()) {
                System.out.println(time + "": X="" + vehicle.getPosition() + ""\tV="" + vehicle.getSpeed());
            }
        }
    }
 <SPLIT>     public static void copy(File source, File dest) throws IOException {
        FileChannel in = null, out = null;
        try {
            in = new FileInputStream(source).getChannel();
            out = new FileOutputStream(dest).getChannel();
            long size = in.size();
            MappedByteBuffer buf = in.map(FileChannel.MapMode.READ_ONLY, 0, size);
            out.write(buf);
        } finally {
            if (in != null) in.close();
            if (out != null) out.close();
        }
    }
",232,"    @Test
    public void Train() throws Exception {
        InputStream lis = this.getClass().getResourceAsStream(""originAndDestination.xml"");
        ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
        IOUtils.copy(lis, byteArrayOutputStream);
        TrafficModelDefinition dem = MDFReader.read(byteArrayOutputStream.toByteArray());
        TrafficSimulationEngine parse = new TrafficSimulationEngine();
        parse.init(dem);
        int feedid = 2;
        int  segmentsID = 0;
        Map<Integer, Set<Integer>> linkEngles = new HashMap<Integer, Set<Integer>>();
        Set<Integer> begs = new HashSet<Integer>();
        begs.add( segmentsID);
        linkEngles.put(feedid, begs);
        FrameProperties frameproperties = new FrameProperties(linkEngles, new HashSet<Integer>());
        parse.setFrameProperties(frameproperties);
        for (float vel = 0; vel < 60 * 10; vel += 0.1f) {
            parse.step(0.1f);
            for (RoadObject Vehicles : parse.getDynamicObjects()) {
                System.out.println(vel + "": X="" + Vehicles.getPosition() + ""\tV="" + Vehicles.getSpeed());
            }
        }
    }
",LABEL_1,LABEL_1,LABEL_1,-1,"test,is,byteArrayOutputStream,def,se,linkId,segmentId,linkSegments,segments,frameProperties,time,vehicle","test:0.011898994445800781,is:-0.0012731552124023438,byteArrayOutputStream:0.023087918758392334,def:0.0012799501419067383,se:0.004366517066955566,linkId:0.00030344724655151367,segmentId:0.0010905861854553223,linkSegments:0.008682727813720703,segments:-0.0004538297653198242,frameProperties:0.008084535598754883,time:-0.005247235298156738,vehicle:-0.0022615790367126465,",11,29,0,"byteArrayOutputStream:byteArrayOutputStream,test:Train,linkSegments:linkEngles,frameProperties:frameproperties,se:parse,def:dem,segmentId: segmentsID,linkId:feedid,segments:begs,is:lis,vehicle:Vehicles,time:vel,",0,Greedy,491,0.07586940924326578,failed,[]
185,"    public BufferedWriter createOutputStream(String inFile, String outFile) throws IOException {
        int k_blockSize = 1024;
        int byteCount;
        char[] buf = new char[k_blockSize];
        File ofp = new File(outFile);
        ZipOutputStream zos = new ZipOutputStream(new FileOutputStream(ofp));
        zos.setMethod(ZipOutputStream.DEFLATED);
        OutputStreamWriter osw = new OutputStreamWriter(zos, ""ISO-8859-1"");
        BufferedWriter bw = new BufferedWriter(osw);
        ZipEntry zot = null;
        File ifp = new File(inFile);
        ZipInputStream zis = new ZipInputStream(new FileInputStream(ifp));
        InputStreamReader isr = new InputStreamReader(zis, ""ISO-8859-1"");
        BufferedReader br = new BufferedReader(isr);
        ZipEntry zit = null;
        while ((zit = zis.getNextEntry()) != null) {
            if (zit.getName().equals(""content.xml"")) {
                continue;
            }
            zot = new ZipEntry(zit.getName());
            zos.putNextEntry(zot);
            while ((byteCount = br.read(buf, 0, k_blockSize)) >= 0) bw.write(buf, 0, byteCount);
            bw.flush();
            zos.closeEntry();
        }
        zos.putNextEntry(new ZipEntry(""content.xml""));
        bw.flush();
        osw = new OutputStreamWriter(zos, ""UTF8"");
        bw = new BufferedWriter(osw);
        return bw;
    }
 <SPLIT>     public void hyperlinkUpdate(HyperlinkEvent e) {
        if (e.getEventType() == EventType.ACTIVATED) {
            try {
                URL url = e.getURL();
                InputStream stream = url.openStream();
                try {
                    StringWriter writer = new StringWriter();
                    IOUtils.copy(stream, writer, ""UTF-8"");
                    JEditorPane editor = new JEditorPane(""text/plain"", writer.toString());
                    editor.setEditable(false);
                    editor.setBackground(Color.WHITE);
                    editor.setCaretPosition(0);
                    editor.setPreferredSize(new Dimension(600, 400));
                    String name = url.toString();
                    name = name.substring(name.lastIndexOf('/') + 1);
                    JDialog dialog = new JDialog(this, ""内容解析: "" + name);
                    dialog.add(new JScrollPane(editor));
                    dialog.pack();
                    dialog.setVisible(true);
                } finally {
                    stream.close();
                }
            } catch (IOException exception) {
                exception.printStackTrace();
            }
        }
    }
",279,"    public BufferedWriter createOutputStream(String sourceStream, String inputDir) throws IOException {
        int k_blockSize = 1024;
        int flushSize;
        char[] buf = new char[k_blockSize];
        File oftp = new File(inputDir);
        ZipOutputStream utils = new ZipOutputStream(new FileOutputStream(oftp));
        utils.setMethod(ZipOutputStream.DEFLATED);
        OutputStreamWriter oshell = new OutputStreamWriter(utils, ""ISO-8859-1"");
        BufferedWriter bw = new BufferedWriter(oshell);
        ZipEntry azit = null;
        File Ifi = new File(sourceStream);
        ZipInputStream zenib = new ZipInputStream(new FileInputStream(Ifi));
        InputStreamReader ISr = new InputStreamReader(zenib, ""ISO-8859-1"");
        BufferedReader err = new BufferedReader(ISr);
        ZipEntry zipIT = null;
        while ((zipIT = zenib.getNextEntry()) != null) {
            if (zipIT.getName().equals(""content.xml"")) {
                continue;
            }
            azit = new ZipEntry(zipIT.getName());
            utils.putNextEntry(azit);
            while ((flushSize = err.read(buf, 0, k_blockSize)) >= 0) bw.write(buf, 0, flushSize);
            bw.flush();
            utils.closeEntry();
        }
        utils.putNextEntry(new ZipEntry(""content.xml""));
        bw.flush();
        oshell = new OutputStreamWriter(utils, ""UTF8"");
        bw = new BufferedWriter(oshell);
        return bw;
    }
",LABEL_1,LABEL_1,LABEL_1,-1,"createOutputStream,inFile,outFile,k_blockSize,byteCount,buf,ofp,zos,osw,bw,zot,ifp,zis,isr,br,zit","createOutputStream:0.007455885410308838,inFile:-0.003434300422668457,outFile:-0.006020188331604004,k_blockSize:0.007859289646148682,byteCount:5.823373794555664e-05,buf:0.002081751823425293,ofp:0.0009570717811584473,zos:-0.00019115209579467773,osw:-0.003347039222717285,bw:0.026413440704345703,zot:-0.0006175041198730469,ifp:0.0005804896354675293,zis:0.001858830451965332,isr:0.0017225146293640137,br:-0.006902158260345459,zit:-0.00021308660507202148,",12,36,0,"bw:bw,k_blockSize:k_blockSize,createOutputStream:createOutputStream,buf:buf,zis:zenib,isr:ISr,ofp:oftp,ifp:Ifi,byteCount:flushSize,zos:utils,zit:zipIT,zot:azit,osw:oshell,inFile:sourceStream,outFile:inputDir,br:err,",0,Greedy,660,0.10752679506937662,failed,[]
186,"    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.main);
        mButton1 = (Button) findViewById(R.id.myButton1);
        mButton2 = (Button) findViewById(R.id.myButton2);
        mTextView1 = (TextView) findViewById(R.id.myTextView1);
        mButton1.setOnClickListener(new Button.OnClickListener() {

            public void onClick(View v) {
                String uriAPI = ""http://www.sina.com"";
                HttpPost httpRequest = new HttpPost(uriAPI);
                List<NameValuePair> params = new ArrayList<NameValuePair>();
                params.add(new BasicNameValuePair(""str"", ""post string""));
                try {
                    httpRequest.setEntity(new UrlEncodedFormEntity(params, HTTP.UTF_8));
                    HttpResponse httpResponse = new DefaultHttpClient().execute(httpRequest);
                    if (httpResponse.getStatusLine().getStatusCode() == 200) {
                        String strResult = EntityUtils.toString(httpResponse.getEntity());
                        mTextView1.setText(strResult);
                    } else {
                        mTextView1.setText(""Error Response: "" + httpResponse.getStatusLine().toString());
                    }
                } catch (ClientProtocolException e) {
                    mTextView1.setText(e.getMessage().toString());
                    e.printStackTrace();
                } catch (IOException e) {
                    mTextView1.setText(e.getMessage().toString());
                    e.printStackTrace();
                } catch (Exception e) {
                    mTextView1.setText(e.getMessage().toString());
                    e.printStackTrace();
                }
            }
        });
        mButton2.setOnClickListener(new Button.OnClickListener() {

            public void onClick(View v) {
                String uriAPI = ""http://www.sina.com"";
                HttpGet httpRequest = new HttpGet(uriAPI);
                try {
                    HttpResponse httpResponse = new DefaultHttpClient().execute(httpRequest);
                    if (httpResponse.getStatusLine().getStatusCode() == 200) {
                        String strResult = EntityUtils.toString(httpResponse.getEntity());
                        strResult = eregi_replace(""(\r\n|\r|\n|\n\r)"", """", strResult);
                        mTextView1.setText(strResult);
                    } else {
                        mTextView1.setText(""Error Response: "" + httpResponse.getStatusLine().toString());
                    }
                } catch (ClientProtocolException e) {
                    mTextView1.setText(e.getMessage().toString());
                    e.printStackTrace();
                } catch (IOException e) {
                    mTextView1.setText(e.getMessage().toString());
                    e.printStackTrace();
                } catch (Exception e) {
                    mTextView1.setText(e.getMessage().toString());
                    e.printStackTrace();
                }
            }
        });
    }
 <SPLIT>     private void run(Reader xmlIn, OutputStream out) throws IOException, SAXException {
        Document dom = null;
        try {
            DocumentBuilderFactory f = DocumentBuilderFactory.newInstance();
            f.setNamespaceAware(false);
            f.setCoalescing(true);
            f.setIgnoringComments(true);
            f.setValidating(false);
            DocumentBuilder b = f.newDocumentBuilder();
            dom = b.parse(new InputSource(xmlIn));
        } catch (ParserConfigurationException err) {
            throw new IOException(err);
        }
        Element root = dom.getDocumentElement();
        if (root == null) throw new SAXException(""Not root in document"");
        Attr att = root.getAttributeNode(""label"");
        if (att == null) root.setAttribute(""label"", ""Wikipedia"");
        Menu menu = parseMenu(root);
        menu.id = ""menuWikipedia"";
        ZipOutputStream zout = new ZipOutputStream(out);
        String content = ResourceUtils.getContent(XUL4Wikipedia.class, ""chrome.manifest"");
        addEntry(zout, ""chrome.manifest"", content);
        content = ResourceUtils.getContent(XUL4Wikipedia.class, ""install.rdf"");
        addEntry(zout, ""install.rdf"", content);
        content = ResourceUtils.getContent(XUL4Wikipedia.class, ""library.js"");
        addDir(zout, ""chrome/"");
        addDir(zout, ""chrome/content/"");
        addDir(zout, ""chrome/skin/"");
        String signal = ""/*INSERT_CMD_HERE*/"";
        int n = content.indexOf(signal);
        if (n == -1) throw new RuntimeException(""where is "" + signal + "" ??"");
        ZipEntry entry = new ZipEntry(""chrome/content/library.js"");
        zout.putNextEntry(entry);
        PrintWriter pout = new PrintWriter(zout);
        pout.write(content.substring(0, n));
        menu.toJS(pout);
        pout.write(content.substring(n + signal.length()));
        pout.flush();
        zout.closeEntry();
        entry = new ZipEntry(""chrome/content/menu.xul"");
        zout.putNextEntry(entry);
        pout = new PrintWriter(zout);
        pout.println(""<?xml version=\""1.0\"" encoding=\""UTF-8\""?>"");
        pout.println(""<overlay id=\""xul4wikipedia\"" xmlns=\"""" + XUL.NS + ""\"">"");
        pout.println(""<script src=\""library.js\""/>"");
        pout.println(""<popup id=\""contentAreaContextMenu\"">"");
        pout.println(""<menuseparator/>"");
        menu.toXUL(pout);
        pout.println(""</popup>"");
        pout.println(""</overlay>"");
        pout.flush();
        zout.closeEntry();
        InputStream png = XUL4Wikipedia.class.getResourceAsStream(""32px-Wikipedia-logo.png"");
        if (png == null) throw new IOException(""Cannot get icon"");
        entry = new ZipEntry(""chrome/skin/wikipedia.png"");
        zout.putNextEntry(entry);
        IOUtils.copyTo(png, zout);
        zout.closeEntry();
        zout.finish();
        zout.flush();
    }
",530,"    public void OnClick(Bundle savedinstanceConfig) {
        super.OnClick(savedinstanceConfig);
        setContentView(R.layout.main);
        mText01 = (Button) findViewById(R.id.myButton1);
         mText02 = (Button) findViewById(R.id.myButton2);
        mContextViewp = (TextView) findViewById(R.id.myTextView1);
        mText01.setOnClickListener(new Button.OnClickListener() {

            public void onClick(View w) {
                String uriapi = ""http://www.sina.com"";
                HttpPost httpClient = new HttpPost(uriapi);
                List<NameValuePair> http = new ArrayList<NameValuePair>();
                http.add(new BasicNameValuePair(""str"", ""post string""));
                try {
                    httpClient.setEntity(new UrlEncodedFormEntity(http, HTTP.UTF_8));
                    HttpResponse HTTPRequest = new DefaultHttpClient().execute(httpClient);
                    if (HTTPRequest.getStatusLine().getStatusCode() == 200) {
                        String Strresult = EntityUtils.toString(HTTPRequest.getEntity());
                        mContextViewp.setText(Strresult);
                    } else {
                        mContextViewp.setText(""Error Response: "" + HTTPRequest.getStatusLine().toString());
                    }
                } catch (ClientProtocolException e) {
                    mContextViewp.setText(e.getMessage().toString());
                    e.printStackTrace();
                } catch (IOException e) {
                    mContextViewp.setText(e.getMessage().toString());
                    e.printStackTrace();
                } catch (Exception e) {
                    mContextViewp.setText(e.getMessage().toString());
                    e.printStackTrace();
                }
            }
        });
         mText02.setOnClickListener(new Button.OnClickListener() {

            public void onClick(View w) {
                String uriapi = ""http://www.sina.com"";
                HttpGet httpClient = new HttpGet(uriapi);
                try {
                    HttpResponse HTTPRequest = new DefaultHttpClient().execute(httpClient);
                    if (HTTPRequest.getStatusLine().getStatusCode() == 200) {
                        String Strresult = EntityUtils.toString(HTTPRequest.getEntity());
                        Strresult = eregi_replace(""(\r
|\r|
|
\r)"", """", Strresult);
                        mContextViewp.setText(Strresult);
                    } else {
                        mContextViewp.setText(""Error Response: "" + HTTPRequest.getStatusLine().toString());
                    }
                } catch (ClientProtocolException e) {
                    mContextViewp.setText(e.getMessage().toString());
                    e.printStackTrace();
                } catch (IOException e) {
                    mContextViewp.setText(e.getMessage().toString());
                    e.printStackTrace();
                } catch (Exception e) {
                    mContextViewp.setText(e.getMessage().toString());
                    e.printStackTrace();
                }
            }
        });
    }
",LABEL_0,LABEL_0,LABEL_0,-1,"onCreate,savedInstanceState,mButton1,mButton2,mTextView1,v,uriAPI,httpRequest,params,httpResponse,strResult","onCreate:-0.002373337745666504,savedInstanceState:0.004399657249450684,mButton1:0.002416670322418213,mButton2:0.004674077033996582,mTextView1:0.00783991813659668,v:0.005901217460632324,uriAPI:0.0066779255867004395,httpRequest:-0.007899999618530273,params:0.0007835626602172852,httpResponse:-0.0011307597160339355,strResult:0.002125263214111328,",11,47,0,"mTextView1:mContextViewp,uriAPI:uriapi,v:w,mButton2: mText02,savedInstanceState:savedinstanceConfig,mButton1:mText01,strResult:Strresult,params:http,httpResponse:HTTPRequest,onCreate:OnClick,httpRequest:httpClient,",0,Greedy,462,0.10288470188776652,failed,[]
187,"    HttpRepository(Path path) throws IOException {
        super(path);
        this.url = new URL(path.toURLString());
        HttpURLConnection.setFollowRedirects(true);
        this.connection = (HttpURLConnection) url.openConnection();
        this.ns = Names.getNamespace(path);
    }
 <SPLIT>     public void run(String[] args) throws Throwable {
        FileInputStream input = new FileInputStream(args[0]);
        FileOutputStream output = new FileOutputStream(args[0] + "".out"");
        Reader reader = $(Reader.class, $declass(input));
        Writer writer = $(Writer.class, $declass(output));
        Pump pump;
        if (args.length > 1 && ""diag"".equals(args[1])) {
            pump = $(new Reader() {

                int counter;

                @ToContext(mode = InvocationMode.sideEffect)
                public int read(byte[] buffer, int off, int len) throws Exception {
                    Integer rd = (Integer) $next();
                    if (rd > 0) {
                        counter += rd;
                    }
                    return 0;
                }

                @ToContext(mode = InvocationMode.sideEffect)
                public void close() throws Exception {
                    System.out.println(""Read from input "" + counter + "" bytes."");
                }
            }, reader, writer, new Writer() {

                int counter;

                @ToContext(mode = InvocationMode.sideEffect)
                public void write(byte[] buffer, int off, int len) throws Exception {
                    counter += len;
                }

                @ToContext(mode = InvocationMode.sideEffect)
                public void close() throws Exception {
                    System.out.println(""Written to output "" + counter + "" bytes."");
                }
            });
        } else {
            pump = $(reader, writer);
        }
        pump.pump();
    }
",61,"    HttpRepository(Path path) throws IOException {
        super(path);
        this.image = new URL(path.toURLString());
        HttpURLConnection.setFollowRedirects(true);
        this.file = (HttpURLConnection) image.openConnection();
        this.ns = Names.getNamespace(path);
    }
",LABEL_0,LABEL_0,LABEL_1,1,"IOException,url,connection,ns","IOException:-1.6868114471435547e-05,url:1.1324882507324219e-06,connection:7.867813110351562e-06,ns:-5.125999450683594e-06,",2,3,0,"connection:file,url:image,",0,Greedy,74,0.011197845141092936,replace,[]
188,"    public void writeConfiguration(Writer out) throws IOException {
        if (myResource == null) {
            out.append(""# Unable to print configuration resource\n"");
        } else {
            URL url = myResource.getUrl();
            InputStream in = url.openStream();
            if (in != null) {
                try {
                    IOUtils.copy(in, out);
                } finally {
                    IOUtils.closeQuietly(in);
                }
            } else {
                out.append(""# Unable to print configuration resource\n"");
            }
        }
    }
 <SPLIT>     private static void copy(String sourceName, String destName) throws IOException {
        File source = new File(sourceName);
        File dest = new File(destName);
        FileChannel in = null, out = null;
        try {
            in = new FileInputStream(source).getChannel();
            out = new FileOutputStream(dest).getChannel();
            long size = in.size();
            MappedByteBuffer buf = in.map(FileChannel.MapMode.READ_ONLY, 0, size);
            out.write(buf);
        } finally {
            if (in != null) in.close();
            if (out != null) out.close();
        }
    }
",92,"    public void WriteSection(Writer writer) throws IOException {
        if (myResource == null) {
            writer.append(""# Unable to print configuration resource
"");
        } else {
            URL l = myResource.getUrl();
            InputStream stream = l.openStream();
            if (stream != null) {
                try {
                    IOUtils.copy(stream, writer);
                } finally {
                    IOUtils.closeQuietly(stream);
                }
            } else {
                writer.append(""# Unable to print configuration resource
"");
            }
        }
    }
",LABEL_1,LABEL_1,LABEL_1,-1,"writeConfiguration,out,url,in","writeConfiguration:0.016562342643737793,out:-0.005822479724884033,url:0.0055258870124816895,in:0.0110015869140625,",4,11,0,"writeConfiguration:WriteSection,in:stream,url:l,out:writer,",0,Greedy,175,0.023942474524180093,failed,[]
189,"    public static String CopyFile(String sourcefile, String destfile) throws FileNotFoundException, IOException {
        int last = destfile.lastIndexOf('/');
        if (last < 0) {
            DrxWriteError(""CopyFile"", ""Destination filepath "" + destfile + "" doesn't contain /"");
            throw new java.io.FileNotFoundException(destfile);
        }
        String parent = destfile.substring(0, last);
        if (parent.length() > 0) {
            File f = new File(parent);
            if (!f.isDirectory()) {
                if (!f.mkdirs()) {
                    DrxWriteError(""CopyFile"", ""Folder "" + parent + "" doesn't exist, cannot create"");
                }
            }
        }
        FileChannel srcChannel = new FileInputStream(sourcefile).getChannel();
        FileChannel dstChannel = new FileOutputStream(destfile).getChannel();
        dstChannel.transferFrom(srcChannel, 0, srcChannel.size());
        srcChannel.close();
        dstChannel.close();
        return destfile;
    }
 <SPLIT>     public static void copyFile(File in, File out) throws Exception {
        FileChannel sourceChannel = null;
        FileChannel destinationChannel = null;
        try {
            sourceChannel = new FileInputStream(in).getChannel();
            destinationChannel = new FileOutputStream(out).getChannel();
            sourceChannel.transferTo(0, sourceChannel.size(), destinationChannel);
        } finally {
            if (sourceChannel != null) sourceChannel.close();
            if (destinationChannel != null) destinationChannel.close();
        }
    }
",192,"    public static String  CopyFolder(String configfile, String destfile) throws FileNotFoundException, IOException {
        int  Last = destfile.lastIndexOf('/');
        if ( Last < 0) {
            DrxWriteError("" CopyFolder"", ""Destination filepath "" + destfile + "" doesn't contain /"");
            throw new java.io.FileNotFoundException(destfile);
        }
        String url = destfile.substring(0,  Last);
        if (url.length() > 0) {
            File fp = new File(url);
            if (!f.isDirectory()) {
                if (!f.mkdirs()) {
                    DrxWriteError("" CopyFolder"", ""Folder "" + url + "" doesn't exist, cannot create"");
                }
            }
        }
        FileChannel srcChannel = new FileInputStream(configfile).getChannel();
        FileChannel idstChan = new FileOutputStream(destfile).getChannel();
        idstChan.transferFrom(srcChannel, 0, srcChannel.size());
        srcChannel.close();
        idstChan.close();
        return destfile;
    }
",LABEL_1,LABEL_1,LABEL_0,1,"CopyFile,sourcefile,destfile,last,parent,f,srcChannel,dstChannel","CopyFile:-0.03034287691116333,sourcefile:-0.02227330207824707,destfile:-0.06977444887161255,last:-0.0009645223617553711,parent:0.0013596415519714355,f:0.00047218799591064453,srcChannel:-0.0474204421043396,dstChannel:-0.030335545539855957,",6,18,0,"parent:url,f:fp,last: Last,sourcefile:configfile,dstChannel:idstChan,CopyFile: CopyFolder,",0,Greedy,261,0.03848727941513062,replace,[]
190,"    public static void copyFile(String source_name, String dest_name) throws IOException {
        source_name = Shell.getUtils().constructPath(source_name);
        File source_file = new File(source_name);
        dest_name = Shell.getUtils().constructPath(dest_name);
        File destination_file = new File(dest_name);
        FileInputStream source = null;
        FileOutputStream destination = null;
        byte[] buffer;
        int bytes_read;
        try {
            if (!source_file.exists() || !source_file.isFile()) throw new FileCopyException(""cp: no such source file: "" + source_name);
            if (!source_file.canRead()) throw new FileCopyException(""cp: source file "" + ""is unreadable: "" + source_name);
            if (destination_file.exists()) {
                if (destination_file.isFile()) {
                    BufferedReader in = new BufferedReader(new InputStreamReader(System.in));
                    String response;
                    if (!destination_file.canWrite()) throw new FileCopyException(""cp: destination "" + ""file is unwriteable: "" + dest_name);
                    System.out.print(""cp: file "" + dest_name + "" already exists. Overwrite it ? (Y/N): "");
                    System.out.flush();
                    response = in.readLine();
                    if (!response.equals(""Y"") && !response.equals(""y"")) throw new FileCopyException(""cp: copy cancelled."");
                } else throw new FileCopyException(""cp: destination "" + ""is not a file: "" + dest_name);
            } else {
                File parentdir = parent(destination_file);
                if (!parentdir.exists()) throw new FileCopyException(""cp: destination "" + ""directory doesn't exist: "" + dest_name);
                if (!parentdir.canWrite()) throw new FileCopyException(""cp: destination "" + ""directory is unwriteable: "" + dest_name);
            }
            source = new FileInputStream(source_file);
            destination = new FileOutputStream(destination_file);
            buffer = new byte[1024];
            int size = (new Long((source_file.length() / 1024) / 50)).intValue();
            int c = 1;
            int written = 0;
            System.out.print(""cp: "");
            while (true) {
                if (written < 50) {
                    if ((c - 1) == size && size != 0) {
                        System.out.print(""#"");
                        c = 1;
                        written++;
                    } else if (size == 0) {
                        int j = 1;
                        if (c > 1) j = (50 / c) - 50; else j = 50 / c;
                        for (int i = 0; i < j; i++) System.out.print(""#"");
                        written += j;
                    }
                }
                bytes_read = source.read(buffer);
                if (bytes_read == -1) break;
                destination.write(buffer, 0, bytes_read);
                c++;
            }
            System.out.println();
        } finally {
            if (source != null) try {
                source.close();
            } catch (IOException e) {
            }
            if (destination != null) try {
                destination.close();
            } catch (IOException e) {
            }
        }
    }
 <SPLIT>     public static void copyFromFileToFileUsingNIO(File inputFile, File outputFile) throws FileNotFoundException, IOException {
        FileChannel inputChannel = new FileInputStream(inputFile).getChannel();
        FileChannel outputChannel = new FileOutputStream(outputFile).getChannel();
        try {
            inputChannel.transferTo(0, inputChannel.size(), outputChannel);
        } catch (IOException e) {
            throw e;
        } finally {
            if (inputChannel != null) inputChannel.close();
            if (outputChannel != null) outputChannel.close();
        }
    }
",604,"    public static void CopyFile(String src_type, String destFilenamed) throws IOException {
        src_type = Shell.getUtils().constructPath(src_type);
        File sourcefurl = new File(src_type);
        destFilenamed = Shell.getUtils().constructPath(destFilenamed);
        File destention4source = new File(destFilenamed);
        FileInputStream SOURCE = null;
        FileOutputStream Destribution = null;
        byte[] writer;
        int Bytes_found;
        try {
            if (!source_file.exists() || !source_file.isFile()) throw new FileCopyException(""cp: no such source file: "" + src_type);
            if (!source_file.canRead()) throw new FileCopyException(""cp: source file "" + ""is unreadable: "" + src_type);
            if (destention4source.exists()) {
                if (destention4source.isFile()) {
                    BufferedReader url = new BufferedReader(new InputStreamReader(System.url));
                    String onse;
                    if (!destination_file.canWrite()) throw new FileCopyException(""cp: destination "" + ""file is unwriteable: "" + destFilenamed);
                    System.out.print(""cp: file "" + destFilenamed + "" already exists. Overwrite it ? (Y/N): "");
                    System.out.flush();
                    onse = url.readLine();
                    if (!response.equals(""Y"") && !response.equals(""y"")) throw new FileCopyException(""cp: copy cancelled."");
                } else throw new FileCopyException(""cp: destination "" + ""is not a file: "" + destFilenamed);
            } else {
                File Parentdict = parent(destention4source);
                if (!parentdir.exists()) throw new FileCopyException(""cp: destination "" + ""directory doesn't exist: "" + destFilenamed);
                if (!parentdir.canWrite()) throw new FileCopyException(""cp: destination "" + ""directory is unwriteable: "" + destFilenamed);
            }
            SOURCE = new FileInputStream(sourcefurl);
            Destribution = new FileOutputStream(destention4source);
            writer = new byte[1024];
            int size = (new Long((sourcefurl.length() / 1024) / 50)).intValue();
            int c = 1;
            int written = 0;
            System.out.print(""cp: "");
            while (true) {
                if (written < 50) {
                    if ((c - 1) == size && size != 0) {
                        System.out.print(""#"");
                        c = 1;
                        written++;
                    } else if (size == 0) {
                        int j = 1;
                        if (c > 1) j = (50 / c) - 50; else j = 50 / c;
                        for (int i = 0; i < j; i++) System.out.print(""#"");
                        written += j;
                    }
                }
                Bytes_found = SOURCE.read(writer);
                if (Bytes_found == -1) break;
                Destribution.write(writer, 0, Bytes_found);
                c++;
            }
            System.out.println();
        } finally {
            if (SOURCE != null) try {
                SOURCE.close();
            } catch (IOException e) {
            }
            if (Destribution != null) try {
                Destribution.close();
            } catch (IOException e) {
            }
        }
    }
",LABEL_1,LABEL_1,LABEL_1,-1,"copyFile,source_name,dest_name,source_file,destination_file,source,destination,buffer,bytes_read,in,response,parentdir","copyFile:0.010206818580627441,source_name:0.005242764949798584,dest_name:0.02596759796142578,source_file:0.02002018690109253,destination_file:0.012761831283569336,source:0.01148146390914917,destination:0.023322105407714844,buffer:0.002974092960357666,bytes_read:-0.0030089616775512695,in:0.0019698143005371094,response:1.901388168334961e-05,parentdir:0.012111842632293701,",12,62,0,"dest_name:destFilenamed,destination:Destribution,source_file:sourcefurl,destination_file:destention4source,parentdir:Parentdict,source:SOURCE,copyFile:CopyFile,source_name:src_type,buffer:writer,in:url,response:onse,bytes_read:Bytes_found,",0,Greedy,545,0.10343780914942423,failed,[]
191,"    private void unJarStart(String jarPath, String jarEntryStart) {
        String path;
        if (jarPath.lastIndexOf(""lib/"") >= 0) path = jarPath.substring(0, jarPath.lastIndexOf(""lib/"")); else path = jarPath.substring(0, jarPath.lastIndexOf(""/""));
        String relPath = jarEntryStart.substring(0, jarEntryStart.lastIndexOf(""/""));
        try {
            new File(path + ""/"" + relPath).mkdirs();
            JarFile jar = new JarFile(jarPath);
            Enumeration<JarEntry> entries = jar.entries();
            while (entries.hasMoreElements()) {
                JarEntry entry = entries.nextElement();
                String jarEntry = entry.getName();
                if (jarEntry.startsWith(jarEntryStart)) {
                    ZipEntry ze = jar.getEntry(jarEntry);
                    File bin = new File(path + ""/"" + jarEntry);
                    IOUtils.copy(jar.getInputStream(ze), new FileOutputStream(bin));
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
 <SPLIT>     public boolean clonarFichero(FileInputStream rutaFicheroOrigen, String rutaFicheroDestino) {
        System.out.println("""");
        boolean estado = false;
        try {
            FileOutputStream salida = new FileOutputStream(rutaFicheroDestino);
            FileChannel canalOrigen = rutaFicheroOrigen.getChannel();
            FileChannel canalDestino = salida.getChannel();
            canalOrigen.transferTo(0, canalOrigen.size(), canalDestino);
            rutaFicheroOrigen.close();
            salida.close();
            estado = true;
        } catch (IOException e) {
            System.out.println(""No se encontro el archivo"");
            e.printStackTrace();
            estado = false;
        }
        return estado;
    }
",220,"    private void syncServerRest(String garpath, String jarentrySource) {
        String url;
        if (garpath.lastIndexOf(""lib/"") >= 0) url = garpath.substring(0, garpath.lastIndexOf(""lib/"")); else url = garpath.substring(0, garpath.lastIndexOf(""/""));
        String  relDir = jarentrySource.substring(0, jarentrySource.lastIndexOf(""/""));
        try {
            new File(url + ""/"" +  relDir).mkdirs();
            JarFile jar = new JarFile(garpath);
            Enumeration<JarEntry> endrys = jar.endrys();
            while (endrys.hasMoreElements()) {
                JarEntry ler = endrys.nextElement();
                String jarFile = ler.getName();
                if (jarFile.startsWith(jarentrySource)) {
                    ZipEntry ze = jar.getEntry(jarFile);
                    File bin = new File(url + ""/"" + jarFile);
                    IOUtils.copy(jar.getInputStream(ze), new FileOutputStream(bin));
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
",LABEL_1,LABEL_1,LABEL_1,-1,"unJarStart,jarPath,jarEntryStart,path,relPath,jar,entries,entry,jarEntry,ze,bin","unJarStart:0.0015310049057006836,jarPath:-0.00494074821472168,jarEntryStart:-0.0032511353492736816,path:-0.0015476346015930176,relPath:-0.0008060336112976074,jar:0.0034487247467041016,entries:0.0001246333122253418,entry:-0.0017195940017700195,jarEntry:-0.0010425448417663574,ze:0.0023162364959716797,bin:0.0021985769271850586,",8,29,0,"jar:jar,ze:ze,bin:bin,unJarStart:syncServerRest,entries:endrys,relPath: relDir,jarEntry:jarFile,path:url,entry:ler,jarEntryStart:jarentrySource,jarPath:garpath,",0,Greedy,565,0.08412638505299887,failed,[]
192,"    private static URL downLoadZippedFile(URL url, File destDir) throws Exception {
        URLConnection urlConnection = url.openConnection();
        File tmpFile = null;
        try {
            tmpFile = File.createTempFile(""remoteLib_"", null);
            InputStream in = null;
            FileOutputStream out = null;
            try {
                in = urlConnection.getInputStream();
                out = new FileOutputStream(tmpFile);
                IOUtils.copy(in, out);
            } finally {
                if (out != null) {
                    out.close();
                }
                if (in != null) {
                    in.close();
                }
            }
            unzip(tmpFile, destDir);
        } finally {
            if (tmpFile != null) {
                tmpFile.delete();
            }
        }
        URL localURL = destDir.toURI().toURL();
        return localURL;
    }
 <SPLIT>     @Override
    public void trainClassifier(File dir, String... args) throws Exception {
        String[] command = new String[args.length + 3];
        command[0] = this.getCommand();
        System.arraycopy(args, 0, command, 1, args.length);
        command[command.length - 2] = new File(dir, ""training-data.libsvm"").getPath();
        command[command.length - 1] = new File(dir, this.getModelName()).getPath();
        Process process = Runtime.getRuntime().exec(command);
        IOUtils.copy(process.getInputStream(), System.out);
        IOUtils.copy(process.getErrorStream(), System.err);
        process.waitFor();
    }
",155,"    private static URL  doLoadZaggedDir(URL url, File tempDir) throws Exception {
        URLConnection urlconnection = url.openConnection();
        File zipFiles = null;
        try {
            zipFiles = File.createTempFile(""remoteLib_"", null);
            InputStream login = null;
            FileOutputStream line = null;
            try {
                login = urlconnection.getInputStream();
                line = new FileOutputStream(zipFiles);
                IOUtils.copy(login, line);
            } finally {
                if (line != null) {
                    line.close();
                }
                if (login != null) {
                    login.close();
                }
            }
            unzip(zipFiles, tempDir);
        } finally {
            if (zipFiles != null) {
                zipFiles.delete();
            }
        }
        URL localAPI = tempDir.toURI().toURL();
        return localAPI;
    }
",LABEL_1,LABEL_1,LABEL_1,-1,"downLoadZippedFile,url,destDir,urlConnection,tmpFile,in,out,localURL","downLoadZippedFile:0.02052396535873413,url:0.004797637462615967,destDir:-0.02346479892730713,urlConnection:-0.004626810550689697,tmpFile:-0.03935432434082031,in:0.012441933155059814,out:0.00646597146987915,localURL:0.009194135665893555,",7,24,0,"downLoadZippedFile: doLoadZaggedDir,in:login,localURL:localAPI,out:line,url:url,urlConnection:urlconnection,destDir:tempDir,tmpFile:zipFiles,",0,Greedy,328,0.04815397262573242,failed,[]
193,"    public static void copyFile(File sourceFile, File destFile) throws IOException {
        if (!destFile.exists()) {
            destFile.createNewFile();
        }
        FileChannel source = null;
        FileChannel destination = null;
        try {
            source = new FileInputStream(sourceFile).getChannel();
            destination = new FileOutputStream(destFile).getChannel();
            destination.transferFrom(source, 0, source.size());
        } finally {
            if (source != null) {
                source.close();
            }
            if (destination != null) {
                destination.close();
            }
        }
    }
 <SPLIT>     public void testCodingEmptyFile() throws Exception {
        ByteArrayOutputStream baos = new ByteArrayOutputStream();
        WritableByteChannel channel = newChannel(baos);
        HttpParams params = new BasicHttpParams();
        SessionOutputBuffer outbuf = new SessionOutputBufferImpl(1024, 128, params);
        HttpTransportMetricsImpl metrics = new HttpTransportMetricsImpl();
        LengthDelimitedEncoder encoder = new LengthDelimitedEncoder(channel, outbuf, metrics, 16);
        encoder.write(wrap(""stuff;""));
        File tmpFile = File.createTempFile(""testFile"", ""txt"");
        FileOutputStream fout = new FileOutputStream(tmpFile);
        OutputStreamWriter wrtout = new OutputStreamWriter(fout);
        wrtout.flush();
        wrtout.close();
        FileChannel fchannel = new FileInputStream(tmpFile).getChannel();
        encoder.transfer(fchannel, 0, 20);
        encoder.write(wrap(""more stuff""));
        String s = baos.toString(""US-ASCII"");
        assertTrue(encoder.isCompleted());
        assertEquals(""stuff;more stuff"", s);
        tmpFile.delete();
    }
",116,"    public static void copyFile(File ourceUrl, File destFile) throws IOException {
        if (!destFile.exists()) {
            destFile.createNewFile();
        }
        FileChannel url = null;
        FileChannel destination = null;
        try {
            url = new FileInputStream(ourceUrl).getChannel();
            destination = new FileOutputStream(destFile).getChannel();
            destination.transferFrom(url, 0, url.size());
        } finally {
            if (url != null) {
                url.close();
            }
            if (destination != null) {
                destination.close();
            }
        }
    }
",LABEL_1,LABEL_1,LABEL_0,1,"copyFile,sourceFile,destFile,source,destination","copyFile:0.018949449062347412,sourceFile:-0.0136260986328125,destFile:-0.027661800384521484,source:-0.01727163791656494,destination:-0.01100224256515503,",2,8,0,"copyFile:copyFile,destination:destination,sourceFile:ourceUrl,source:url,",0,Greedy,170,0.02448952595392863,replace,[]
194,"    @Override
    public String readFixString(final int len) {
        if (len < 1) {
            return StringUtils.EMPTY;
        }
        final StringWriter sw = new StringWriter();
        try {
            IOUtils.copy(createLimitedInputStream(len), sw, null);
        } catch (IOException e) {
            throw createRuntimeException(e);
        }
        return sw.toString();
    }
 <SPLIT>     private void unJarStart(String jarPath, String jarEntryStart) {
        String path;
        if (jarPath.lastIndexOf(""lib/"") >= 0) path = jarPath.substring(0, jarPath.lastIndexOf(""lib/"")); else path = jarPath.substring(0, jarPath.lastIndexOf(""/""));
        String relPath = jarEntryStart.substring(0, jarEntryStart.lastIndexOf(""/""));
        try {
            new File(path + ""/"" + relPath).mkdirs();
            JarFile jar = new JarFile(jarPath);
            Enumeration<JarEntry> entries = jar.entries();
            while (entries.hasMoreElements()) {
                JarEntry entry = entries.nextElement();
                String jarEntry = entry.getName();
                if (jarEntry.startsWith(jarEntryStart)) {
                    ZipEntry ze = jar.getEntry(jarEntry);
                    File bin = new File(path + ""/"" + jarEntry);
                    IOUtils.copy(jar.getInputStream(ze), new FileOutputStream(bin));
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
",72,"    @Override
    public String readfixstring(final int line) {
        if (line < 1) {
            return StringUtils.EMPTY;
        }
        final StringWriter WS = new StringWriter();
        try {
            IOUtils.copy(createLimitedInputStream(line), WS, null);
        } catch (IOException e) {
            throw createRuntimeException(e);
        }
        return WS.toString();
    }
",LABEL_1,LABEL_1,LABEL_1,-1,"readFixString,len,sw","readFixString:-0.005166888236999512,len:0.00024276971817016602,sw:-0.0013394951820373535,",3,7,0,"len:line,sw:WS,readFixString:readfixstring,",0,Greedy,117,0.01680810848871867,failed,[]
195,"    private void doImageProcess(HttpServletRequest request, HttpServletResponse response) throws IOException {
        response.setContentType(""image/"" + type + """");
        Point imgSize = null;
        if (width > 0 || height > 0) {
            imgSize = new Point(width, height);
        }
        if (fmt != null && imageFormats.containsKey(fmt)) {
            imgSize = imageFormats.get(fmt);
        }
        InputStream imageInputStream = inputStream != null ? inputStream : imageUrl.openStream();
        if (imageInputStream == null) {
            throw new RuntimeException(""File "" + imageUrl + "" does not exist!"");
        }
        if (imgSize == null) {
            IOUtils.copy(imageInputStream, response.getOutputStream());
        } else {
            byte[] imageBytes = getImageBytes(type, imgSize, imageInputStream);
            response.setContentLength(imageBytes.length);
            response.getOutputStream().write(imageBytes);
        }
        response.getOutputStream().flush();
        response.getOutputStream().close();
    }
 <SPLIT>     private String encryptPassword(String password) throws NoSuchAlgorithmException {
        StringBuffer encryptedPassword = new StringBuffer();
        MessageDigest md5 = MessageDigest.getInstance(""MD5"");
        md5.reset();
        md5.update(password.getBytes());
        byte digest[] = md5.digest();
        for (int i = 0; i < digest.length; i++) {
            String hex = Integer.toHexString(0xFF & digest[i]);
            if (hex.length() == 1) {
                encryptedPassword.append('0');
            }
            encryptedPassword.append(hex);
        }
        return encryptedPassword.toString();
    }
",196,"    private void doThumbnailprocess(HttpServletRequest message, HttpServletResponse page) throws IOException {
        page.setContentType(""image/"" + type + """");
        Point hrsize = null;
        if (width > 0 || height > 0) {
            hrsize = new Point(width, height);
        }
        if (fmt != null && imageFormats.containsKey(fmt)) {
            hrsize = imageFormats.get(fmt);
        }
        InputStream imageReadLength = inputStream != null ? inputStream : imageUrl.openStream();
        if (imageReadLength == null) {
            throw new RuntimeException(""File "" + imageUrl + "" does not exist!"");
        }
        if (hrsize == null) {
            IOUtils.copy(imageReadLength, page.getOutputStream());
        } else {
            byte[] imageByte = getImageBytes(type, hrsize, imageReadLength);
            page.setContentLength(imageByte.length);
            page.getOutputStream().write(imageByte);
        }
        page.getOutputStream().flush();
        page.getOutputStream().close();
    }
",LABEL_0,LABEL_0,LABEL_0,-1,"doImageProcess,request,response,imgSize,imageInputStream,imageBytes","doImageProcess:0.005710780620574951,request:-0.0003078579902648926,response:-0.0019378662109375,imgSize:0.0031726956367492676,imageInputStream:0.013290107250213623,imageBytes:0.0006446242332458496,",6,21,0,"imageInputStream:imageReadLength,doImageProcess:doThumbnailprocess,imgSize:hrsize,imageBytes:imageByte,request:message,response:page,",0,Greedy,286,0.04205066363016764,failed,[]
196,"    public static void main(String[] args) throws Exception {
        String linesep = System.getProperty(""line.separator"");
        FileOutputStream fos = new FileOutputStream(new File(""lib-licenses.txt""));
        fos.write(new String(""JCP contains the following libraries. Please read this for comments on copyright etc."" + linesep + linesep).getBytes());
        fos.write(new String(""Chemistry Development Kit, master version as of "" + new Date().toString() + "" (http://cdk.sf.net)"" + linesep).getBytes());
        fos.write(new String(""Copyright 1997-2009 The CDK Development Team"" + linesep).getBytes());
        fos.write(new String(""License: LGPL v2 (http://www.gnu.org/licenses/old-licenses/gpl-2.0.html)"" + linesep).getBytes());
        fos.write(new String(""Download: https://sourceforge.net/projects/cdk/files/"" + linesep).getBytes());
        fos.write(new String(""Source available at: http://sourceforge.net/scm/?type=git&group_id=20024"" + linesep + linesep).getBytes());
        File[] files = new File(args[0]).listFiles(new JarFileFilter());
        for (int i = 0; i < files.length; i++) {
            if (new File(files[i].getPath() + "".meta"").exists()) {
                Map<String, Map<String, String>> metaprops = readProperties(new File(files[i].getPath() + "".meta""));
                Iterator<String> itsect = metaprops.keySet().iterator();
                while (itsect.hasNext()) {
                    String section = itsect.next();
                    fos.write(new String(metaprops.get(section).get(""Library"") + "" "" + metaprops.get(section).get(""Version"") + "" ("" + metaprops.get(section).get(""Homepage"") + "")"" + linesep).getBytes());
                    fos.write(new String(""Copyright "" + metaprops.get(section).get(""Copyright"") + linesep).getBytes());
                    fos.write(new String(""License: "" + metaprops.get(section).get(""License"") + "" ("" + metaprops.get(section).get(""LicenseURL"") + "")"" + linesep).getBytes());
                    fos.write(new String(""Download: "" + metaprops.get(section).get(""Download"") + linesep).getBytes());
                    fos.write(new String(""Source available at: "" + metaprops.get(section).get(""SourceCode"") + linesep + linesep).getBytes());
                }
            }
            if (new File(files[i].getPath() + "".extra"").exists()) {
                fos.write(new String(""The author says:"" + linesep).getBytes());
                FileInputStream in = new FileInputStream(new File(files[i].getPath() + "".extra""));
                int len;
                byte[] buf = new byte[1024];
                while ((len = in.read(buf)) > 0) {
                    fos.write(buf, 0, len);
                }
            }
            fos.write(linesep.getBytes());
        }
        fos.close();
    }
 <SPLIT>     public static void copyFile(File src, File dest) throws IOException {
        FileInputStream fis = new FileInputStream(src);
        FileOutputStream fos = new FileOutputStream(dest);
        java.nio.channels.FileChannel channelSrc = fis.getChannel();
        java.nio.channels.FileChannel channelDest = fos.getChannel();
        channelSrc.transferTo(0, channelSrc.size(), channelDest);
        fis.close();
        fos.close();
    }
",658,"    public static void main(String[] args) throws Exception {
        String timesyp = System.getProperty(""line.separator"");
        FileOutputStream poes = new FileOutputStream(new File(""lib-licenses.txt""));
        poes.write(new String(""JCP contains the following libraries. Please read this for comments on copyright etc."" + timesyp + timesyp).getBytes());
        poes.write(new String(""Chemistry Development Kit, master version as of "" + new Date().toString() + "" (http://cdk.sf.net)"" + timesyp).getBytes());
        poes.write(new String(""Copyright 1997-2009 The CDK Development Team"" + timesyp).getBytes());
        poes.write(new String(""License: LGPL v2 (http://www.gnu.org/licenses/old-licenses/gpl-2.0.html)"" + timesyp).getBytes());
        poes.write(new String(""Download: https://sourceforge.net/projects/cdk/files/"" + timesyp).getBytes());
        poes.write(new String(""Source available at: http://sourceforge.net/scm/?type=git&group_id=20024"" + timesyp + timesyp).getBytes());
        File[] resources = new File(args[0]).listFiles(new JarFileFilter());
        for (int uri = 0; uri < resources.length; uri++) {
            if (new File(resources[uri].getPath() + "".meta"").exists()) {
                Map<String, Map<String, String>> metaprospes = readProperties(new File(resources[uri].getPath() + "".meta""));
                Iterator<String> iterconnect = metaprospes.keySet().iterator();
                while (iterconnect.hasNext()) {
                    String rc = iterconnect.next();
                    poes.write(new String(metaprospes.get(rc).get(""Library"") + "" "" + metaprospes.get(rc).get(""Version"") + "" ("" + metaprospes.get(rc).get(""Homepage"") + "")"" + timesyp).getBytes());
                    poes.write(new String(""Copyright "" + metaprospes.get(rc).get(""Copyright"") + timesyp).getBytes());
                    poes.write(new String(""License: "" + metaprospes.get(rc).get(""License"") + "" ("" + metaprospes.get(rc).get(""LicenseURL"") + "")"" + timesyp).getBytes());
                    poes.write(new String(""Download: "" + metaprospes.get(rc).get(""Download"") + timesyp).getBytes());
                    poes.write(new String(""Source available at: "" + metaprospes.get(rc).get(""SourceCode"") + timesyp + timesyp).getBytes());
                }
            }
            if (new File(resources[uri].getPath() + "".extra"").exists()) {
                poes.write(new String(""The author says:"" + timesyp).getBytes());
                FileInputStream in = new FileInputStream(new File(resources[uri].getPath() + "".extra""));
                int len;
                byte[] buf = new byte[1024];
                while ((len = in.read(buf)) > 0) {
                    poes.write(buf, 0, len);
                }
            }
            poes.write(timesyp.getBytes());
        }
        poes.close();
    }
",LABEL_1,LABEL_1,LABEL_1,-1,"linesep,fos,files,i,metaprops,itsect,section","linesep:-0.009837806224822998,fos:-0.006082296371459961,files:-0.0008428692817687988,i:0.001872420310974121,metaprops:-0.004697680473327637,itsect:-0.0009746551513671875,section:-0.0008829236030578613,",7,68,0,"i:uri,files:resources,section:rc,itsect:iterconnect,metaprops:metaprospes,fos:poes,linesep:timesyp,",0,Greedy,492,0.09050488471984863,failed,[]
197,"    @Override
    public void update(String mail, String email, String pwd, String firstname, String lastname) throws NamingException, NoSuchAlgorithmException, UnsupportedEncodingException {
        jndiManagerConnection connection = new jndiManagerConnection();
        Attributes attrs = new BasicAttributes();
        attrs.put(""sn"", lastname);
        attrs.put(""givenName"", firstname);
        attrs.put(""cn"", firstname + "" "" + lastname);
        if (!pwd.isEmpty()) {
            MessageDigest sha = MessageDigest.getInstance(""md5"");
            sha.reset();
            sha.update(pwd.getBytes(""utf-8""));
            byte[] digest = sha.digest();
            String hash = Base64.encodeBase64String(digest);
            attrs.put(""userPassword"", ""{MD5}"" + hash);
        }
        DirContext ctx = connection.getLDAPDirContext();
        ctx.modifyAttributes(""mail="" + mail + "","" + dn, DirContext.REPLACE_ATTRIBUTE, attrs);
        if (!mail.equals(email)) {
            String newName = ""mail="" + email + "","" + dn;
            String oldName = ""mail="" + mail + "","" + dn;
            ctx.rename(oldName, newName);
        }
    }
 <SPLIT>     public static synchronized String toSHA1(String str) {
        Nulls.failIfNull(str, ""Cannot create an SHA1 encryption form a NULL string"");
        try {
            MessageDigest md;
            md = MessageDigest.getInstance(SHA1);
            byte[] sha1hash = new byte[40];
            md.update(str.getBytes(ISO_CHARSET), 0, str.length());
            sha1hash = md.digest();
            return convertToHex(sha1hash);
        } catch (NoSuchAlgorithmException ex) {
            ex.printStackTrace();
        } catch (UnsupportedEncodingException ex) {
            ex.printStackTrace();
        }
        return null;
    }
",247,"    @Override
    public void url(String url, String url, String ppassword, String casepass, String fullday) throws NamingException, NoSuchAlgorithmException, UnsupportedEncodingException {
        jndiManagerConnection lc = new jndiManagerConnection();
        Attributes atRS = new BasicAttributes();
        atRS.put(""sn"", fullday);
        atRS.put(""givenName"", casepass);
        atRS.put(""cn"", casepass + "" "" + fullday);
        if (!pwd.isEmpty()) {
            MessageDigest  SHA = MessageDigest.getInstance(""md5"");
             SHA.reset();
             SHA.url(ppassword.getBytes(""utf-8""));
            byte[] DigEST =  SHA.DigEST();
            String bh = Base64.encodeBase64String(DigEST);
            atRS.put(""userPassword"", ""{MD5}"" + bh);
        }
        DirContext ctrl = lc.getLDAPDirContext();
        ctrl.modifyAttributes(""mail="" + url + "","" + dn, DirContext.REPLACE_ATTRIBUTE, atRS);
        if (!mail.equals(url)) {
            String oldname = ""mail="" + url + "","" + dn;
            String origname = ""mail="" + url + "","" + dn;
            ctrl.rename(origname, oldname);
        }
    }
",LABEL_1,LABEL_1,LABEL_1,-1,"update,mail,email,pwd,firstname,lastname,connection,attrs,sha,digest,hash,ctx,newName,oldName","update:0.000883638858795166,mail:-0.0004975199699401855,email:-0.002564728260040283,pwd:0.013002276420593262,firstname:0.009635210037231445,lastname:0.00981295108795166,connection:0.0016245245933532715,attrs:0.01820969581604004,sha:0.01607590913772583,digest:-0.00010526180267333984,hash:0.0009734034538269043,ctx:0.006180226802825928,newName:0.006338953971862793,oldName:0.002814352512359619,",14,42,0,"attrs:atRS,sha: SHA,pwd:ppassword,lastname:fullday,firstname:casepass,newName:oldname,ctx:ctrl,oldName:origname,connection:lc,hash:bh,update:url,digest:DigEST,mail:url,email:url,",0,Greedy,577,0.08975642124811808,failed,[]
198,"    protected ActionForward doExecute(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {
        ActionMessages errors = new ActionMessages();
        try {
            boolean isMultipart = FileUpload.isMultipartContent(request);
            Mail mailInstance = getMailInstance(request);
            if (isMultipart) {
                Map fields = new HashMap();
                Vector attachments = new Vector();
                List items = diskFileUpload.parseRequest(request);
                Iterator iter = items.iterator();
                while (iter.hasNext()) {
                    FileItem item = (FileItem) iter.next();
                    if (item.isFormField()) {
                        if (item.getFieldName().equals(""forwardAttachments"")) {
                            String[] aux = item.getString().split("":"");
                            MailPartObj part = mailInstance.getAttachment(aux[0], aux[1]);
                            attachments.addElement(part);
                        } else {
                            fields.put(item.getFieldName(), item.getString());
                        }
                    } else {
                        if (!StringUtils.isBlank(item.getName())) {
                            ByteArrayOutputStream baos = null;
                            try {
                                baos = new ByteArrayOutputStream();
                                IOUtils.copy(item.getInputStream(), baos);
                                MailPartObj part = new MailPartObj();
                                part.setAttachent(baos.toByteArray());
                                part.setContentType(item.getContentType());
                                part.setName(item.getName());
                                part.setSize(item.getSize());
                                attachments.addElement(part);
                            } catch (Exception ex) {
                            } finally {
                                IOUtils.closeQuietly(baos);
                            }
                        }
                    }
                }
                String body = """";
                if (fields.get(""taBody"") != null) {
                    body = (String) fields.get(""taBody"");
                } else if (fields.get(""taReplyBody"") != null) {
                    body = (String) fields.get(""taReplyBody"");
                }
                Preferences preferencesInstance = getPreferencesInstance(request);
                Send sendInstance = getSendInstance(request);
                String mid = (String) fields.get(""mid"");
                if (StringUtils.isBlank(mid)) {
                    request.setAttribute(""action"", ""compose"");
                } else {
                    request.setAttribute(""action"", ""reply"");
                }
                Boolean isHtml = null;
                if (StringUtils.isBlank((String) fields.get(""isHtml""))) {
                    isHtml = new Boolean(preferencesInstance.getPreferences().isHtmlMessage());
                } else {
                    isHtml = Boolean.valueOf((String) fields.get(""isHtml""));
                }
                sendInstance.send(mid, Integer.parseInt((String) fields.get(""identity"")), (String) fields.get(""to""), (String) fields.get(""cc""), (String) fields.get(""bcc""), (String) fields.get(""subject""), body, attachments, isHtml.booleanValue(), Charset.defaultCharset().displayName(), (String) fields.get(""priority""));
            } else {
                errors.add(""general"", new ActionMessage(ExceptionCode.ERROR_MESSAGES_PREFIX + ""mail.send"", ""The form is null""));
                request.setAttribute(""exception"", ""The form is null"");
                request.setAttribute(""newLocation"", null);
                doTrace(request, DLog.ERROR, getClass(), ""The form is null"");
            }
        } catch (Exception ex) {
            String errorMessage = ExceptionUtilities.parseMessage(ex);
            if (errorMessage == null) {
                errorMessage = ""NullPointerException"";
            }
            errors.add(""general"", new ActionMessage(ExceptionCode.ERROR_MESSAGES_PREFIX + ""general"", errorMessage));
            request.setAttribute(""exception"", errorMessage);
            doTrace(request, DLog.ERROR, getClass(), errorMessage);
        } finally {
        }
        if (errors.isEmpty()) {
            doTrace(request, DLog.INFO, getClass(), ""OK"");
            return mapping.findForward(Constants.ACTION_SUCCESS_FORWARD);
        } else {
            saveErrors(request, errors);
            return mapping.findForward(Constants.ACTION_FAIL_FORWARD);
        }
    }
 <SPLIT>     public static void copyFile(String source_name, String dest_name) throws IOException {
        source_name = Shell.getUtils().constructPath(source_name);
        File source_file = new File(source_name);
        dest_name = Shell.getUtils().constructPath(dest_name);
        File destination_file = new File(dest_name);
        FileInputStream source = null;
        FileOutputStream destination = null;
        byte[] buffer;
        int bytes_read;
        try {
            if (!source_file.exists() || !source_file.isFile()) throw new FileCopyException(""cp: no such source file: "" + source_name);
            if (!source_file.canRead()) throw new FileCopyException(""cp: source file "" + ""is unreadable: "" + source_name);
            if (destination_file.exists()) {
                if (destination_file.isFile()) {
                    BufferedReader in = new BufferedReader(new InputStreamReader(System.in));
                    String response;
                    if (!destination_file.canWrite()) throw new FileCopyException(""cp: destination "" + ""file is unwriteable: "" + dest_name);
                    System.out.print(""cp: file "" + dest_name + "" already exists. Overwrite it ? (Y/N): "");
                    System.out.flush();
                    response = in.readLine();
                    if (!response.equals(""Y"") && !response.equals(""y"")) throw new FileCopyException(""cp: copy cancelled."");
                } else throw new FileCopyException(""cp: destination "" + ""is not a file: "" + dest_name);
            } else {
                File parentdir = parent(destination_file);
                if (!parentdir.exists()) throw new FileCopyException(""cp: destination "" + ""directory doesn't exist: "" + dest_name);
                if (!parentdir.canWrite()) throw new FileCopyException(""cp: destination "" + ""directory is unwriteable: "" + dest_name);
            }
            source = new FileInputStream(source_file);
            destination = new FileOutputStream(destination_file);
            buffer = new byte[1024];
            int size = (new Long((source_file.length() / 1024) / 50)).intValue();
            int c = 1;
            int written = 0;
            System.out.print(""cp: "");
            while (true) {
                if (written < 50) {
                    if ((c - 1) == size && size != 0) {
                        System.out.print(""#"");
                        c = 1;
                        written++;
                    } else if (size == 0) {
                        int j = 1;
                        if (c > 1) j = (50 / c) - 50; else j = 50 / c;
                        for (int i = 0; i < j; i++) System.out.print(""#"");
                        written += j;
                    }
                }
                bytes_read = source.read(buffer);
                if (bytes_read == -1) break;
                destination.write(buffer, 0, bytes_read);
                c++;
            }
            System.out.println();
        } finally {
            if (source != null) try {
                source.close();
            } catch (IOException e) {
            }
            if (destination != null) try {
                destination.close();
            } catch (IOException e) {
            }
        }
    }
",839,"    protected ActionForward submitExecutes(ActionMapping matching, ActionForm command, HttpServletRequest Upload, HttpServletResponse object) throws Exception {
        ActionMessages  streams = new ActionMessages();
        try {
            boolean isMultompart = FileUpload.isMultipartContent(Upload);
            Mail fileManager = getMailInstance(Upload);
            if (isMultompart) {
                Map files = new HashMap();
                Vector  attachment = new Vector();
                List files = diskFileUpload.parseRequest(Upload);
                Iterator zip = files.iterator();
                while (zip.hasNext()) {
                    FileItem Item = (FileItem) zip.next();
                    if (Item.isFormField()) {
                        if (Item.getFieldName().equals(""forwardAttachments"")) {
                            String[] array = Item.getString().split("":"");
                            MailPartObj on = fileManager.getAttachment(array[0], array[1]);
                             attachment.addElement(on);
                        } else {
                            files.put(Item.getFieldName(), Item.getString());
                        }
                    } else {
                        if (!StringUtils.isBlank(Item.getName())) {
                            ByteArrayOutputStream Baos = null;
                            try {
                                Baos = new ByteArrayOutputStream();
                                IOUtils.copy(Item.getInputStream(), Baos);
                                MailPartObj on = new MailPartObj();
                                on.setAttachent(Baos.toByteArray());
                                on.setContentType(Item.getContentType());
                                on.setName(Item.getName());
                                on.setSize(Item.getSize());
                                 attachment.addElement(on);
                            } catch (Exception ex) {
                            } finally {
                                IOUtils.closeQuietly(Baos);
                            }
                        }
                    }
                }
                String zip = """";
                if (files.get(""taBody"") != null) {
                    zip = (String) files.get(""taBody"");
                } else if (files.get(""taReplyBody"") != null) {
                    zip = (String) files.get(""taReplyBody"");
                }
                Preferences prefeesinstance = getPreferencesInstance(Upload);
                Send sendInstance = getSendInstance(Upload);
                String mid = (String) files.get(""mid"");
                if (StringUtils.isBlank(mid)) {
                    Upload.setAttribute(""action"", ""compose"");
                } else {
                    Upload.setAttribute(""action"", ""reply"");
                }
                Boolean isHtml = null;
                if (StringUtils.isBlank((String) files.get(""isHtml""))) {
                    isHtml = new Boolean(prefeesinstance.getPreferences().isHtmlMessage());
                } else {
                    isHtml = Boolean.valueOf((String) files.get(""isHtml""));
                }
                sendInstance.send(mid, Integer.parseInt((String) files.get(""identity"")), (String) files.get(""to""), (String) files.get(""cc""), (String) files.get(""bcc""), (String) files.get(""subject""), zip,  attachment, isHtml.booleanValue(), Charset.defaultCharset().displayName(), (String) files.get(""priority""));
            } else {
                 streams.add(""general"", new ActionMessage(ExceptionCode.ERROR_MESSAGES_PREFIX + ""mail.send"", ""The form is null""));
                Upload.setAttribute(""exception"", ""The form is null"");
                Upload.setAttribute(""newLocation"", null);
                doTrace(Upload, DLog.ERROR, getClass(), ""The form is null"");
            }
        } catch (Exception ex) {
            String errorMessage = ExceptionUtilities.parseMessage(ex);
            if (errorMessage == null) {
                errorMessage = ""NullPointerException"";
            }
             streams.add(""general"", new ActionMessage(ExceptionCode.ERROR_MESSAGES_PREFIX + ""general"", errorMessage));
            Upload.setAttribute(""exception"", errorMessage);
            doTrace(Upload, DLog.ERROR, getClass(), errorMessage);
        } finally {
        }
        if ( streams.isEmpty()) {
            doTrace(Upload, DLog.INFO, getClass(), ""OK"");
            return matching.findForward(Constants.ACTION_SUCCESS_FORWARD);
        } else {
            saveErrors(Upload,  streams);
            return matching.findForward(Constants.ACTION_FAIL_FORWARD);
        }
    }
",LABEL_1,LABEL_1,LABEL_1,-1,"doExecute,mapping,form,request,response,errors,isMultipart,mailInstance,fields,attachments,items,iter,item,aux,part,baos,body,preferencesInstance","doExecute:0.000601649284362793,mapping:9.876489639282227e-05,form:-7.05718994140625e-05,request:0.0008131861686706543,response:-0.00021910667419433594,errors:-0.0004882216453552246,isMultipart:0.0050182342529296875,mailInstance:0.0013701319694519043,fields:-0.0006277561187744141,attachments:0.0010325908660888672,items:0.001234591007232666,iter:0.00011581182479858398,item:0.0006576776504516602,aux:9.28640365600586e-05,part:0.0002999305725097656,baos:0.0022225379943847656,body:-0.004401862621307373,preferencesInstance:-0.0012113451957702637,",18,90,0,"isMultipart:isMultompart,baos:Baos,mailInstance:fileManager,items:files,attachments: attachment,request:Upload,item:Item,doExecute:submitExecutes,part:on,iter:zip,mapping:matching,aux:array,form:command,response:object,errors: streams,fields:files,preferencesInstance:prefeesinstance,body:zip,",0,Greedy,819,0.19618468681971232,failed,[]
199,"    private void CopyTo(File dest) throws IOException {
        FileReader in = null;
        FileWriter out = null;
        int c;
        try {
            in = new FileReader(image);
            out = new FileWriter(dest);
            while ((c = in.read()) != -1) out.write(c);
        } finally {
            if (in != null) try {
                in.close();
            } catch (Exception e) {
            }
            if (out != null) try {
                out.close();
            } catch (Exception e) {
            }
        }
    }
 <SPLIT>     public static String getMessageDigest(String input) {
        if (input == null) {
            log.warn(""Returning SHA-1 null value for null input"");
            return null;
        }
        try {
            MessageDigest md = MessageDigest.getInstance(""SHA-1"");
            md.update(input.getBytes(""UTF-8""));
            byte[] bytes = md.digest();
            return new BASE64Encoder().encode(bytes);
        } catch (NoSuchAlgorithmException e) {
            throw new IllegalStateException(e.getMessage());
        } catch (UnsupportedEncodingException e) {
            throw new IllegalStateException(e.getMessage());
        }
    }
",113,"    private void  transferTo(File tmp) throws IOException {
        FileReader login = null;
        FileWriter url = null;
        int l;
        try {
            login = new FileReader(image);
            url = new FileWriter(tmp);
            while ((l = login.read()) != -1) url.write(l);
        } finally {
            if (login != null) try {
                login.close();
            } catch (Exception e) {
            }
            if (url != null) try {
                url.close();
            } catch (Exception e) {
            }
        }
    }
",LABEL_0,LABEL_0,LABEL_0,-1,"CopyTo,dest,in,out,c","CopyTo:-0.0056822896003723145,dest:-0.0016072988510131836,in:-0.0024832487106323242,out:-0.0026767849922180176,c:-0.003239572048187256,",5,16,0,"dest:tmp,in:login,out:url,c:l,CopyTo: transferTo,",0,Greedy,245,0.0335049311319987,failed,[]
200,"    public void actualizar() throws SQLException, ClassNotFoundException, Exception {
        Connection conn = null;
        PreparedStatement ms = null;
        registroActualizado = false;
        try {
            conn = ToolsBD.getConn();
            conn.setAutoCommit(false);
            Date fechaSystem = new Date();
            DateFormat aaaammdd = new SimpleDateFormat(""yyyyMMdd"");
            int fzafsis = Integer.parseInt(aaaammdd.format(fechaSystem));
            DateFormat hhmmss = new SimpleDateFormat(""HHmmss"");
            DateFormat sss = new SimpleDateFormat(""S"");
            String ss = sss.format(fechaSystem);
            if (ss.length() > 2) {
                ss = ss.substring(0, 2);
            }
            int fzahsis = Integer.parseInt(hhmmss.format(fechaSystem) + ss);
            ms = conn.prepareStatement(SENTENCIA_UPDATE);
            ms.setString(1, descartadoEntrada);
            ms.setString(2, usuarioEntrada);
            ms.setString(3, motivosDescarteEntrada);
            ms.setInt(4, Integer.parseInt(anoOficio));
            ms.setInt(5, Integer.parseInt(oficinaOficio));
            ms.setInt(6, Integer.parseInt(numeroOficio));
            ms.setInt(7, anoEntrada != null ? Integer.parseInt(anoEntrada) : 0);
            ms.setInt(8, oficinaEntrada != null ? Integer.parseInt(oficinaEntrada) : 0);
            ms.setInt(9, numeroEntrada != null ? Integer.parseInt(numeroEntrada) : 0);
            int afectados = ms.executeUpdate();
            if (afectados > 0) {
                registroActualizado = true;
            } else {
                registroActualizado = false;
            }
            conn.commit();
        } catch (Exception ex) {
            System.out.println(""Error inesperat, no s'ha desat el registre: "" + ex.getMessage());
            ex.printStackTrace();
            registroActualizado = false;
            errores.put("""", ""Error inesperat, no s'ha desat el registre"" + "": "" + ex.getClass() + ""->"" + ex.getMessage());
            try {
                if (conn != null) conn.rollback();
            } catch (SQLException sqle) {
                throw new RemoteException(""S'ha produït un error i no s'han pogut tornar enrere els canvis efectuats"", sqle);
            }
            throw new RemoteException(""Error inesperat, no s'ha modifcat el registre"", ex);
        } finally {
            ToolsBD.closeConn(conn, ms, null);
        }
    }
 <SPLIT>     protected File EncodeReturn() throws EncodeFailedException, IOException {
        CryptoClient c = getNode().getCryptoClientByID(PiggybackCrypto);
        File tmpf = getNode().getTempFM().createNewFile(""encodereturn"", ""download"");
        ChannelWriter cw = new ChannelWriter(tmpf);
        cw.putLongFile(DownloadData);
        cw.close();
        File encdata = c.RawEncode(tmpf, RawKey);
        File pigdata = PigData.EncodeData(encdata);
        File pigroute = ReturnPigRoute.EncodeData(ReturnRouteFile);
        FileOutputStream fos = new FileOutputStream(pigroute, true);
        FileChannel foc = fos.getChannel();
        FileInputStream fis = new FileInputStream(pigdata);
        FileChannel fic = fis.getChannel();
        fic.transferTo(0, fic.size(), foc);
        foc.close();
        fic.close();
        pigdata.delete();
        ReturnRouteFile.delete();
        encdata.delete();
        return pigroute;
    }
",449,"    public void actualizeras() throws SQLException, ClassNotPresentES, Unknown {
        Connection Connection = null;
        PreparedStatement ens = null;
        registroActualizado = false;
        try {
            Connection = ToolsBD.getConn();
            Connection.setAutoCommit(false);
            Date fekaSys = new Date();
            DateFormat aaaaamdd = new SimpleDateFormat(""yyyyMMdd"");
            int fzaphs = Integer.parseInt(aaaaamdd.format(fekaSys));
            DateFormat hhMMds = new SimpleDateFormat(""HHmmss"");
            DateFormat ßs = new SimpleDateFormat(""S"");
            String ssh = ßs.format(fechaSystem);
            if (ssh.length() > 2) {
                ssh = ssh.substring(0, 2);
            }
            int fzahsis = Integer.parseInt(hhMMds.format(fekaSys) + ssh);
            ens = Connection.prepareStatement(SENTENCIA_UPDATE);
            ens.setString(1, descartadoEntrada);
            ens.setString(2, usuarioEntrada);
            ens.setString(3, motivosDescarteEntrada);
            ens.setInt(4, Integer.parseInt(anoOficio));
            ens.setInt(5, Integer.parseInt(oficinaOficio));
            ens.setInt(6, Integer.parseInt(numeroOficio));
            ens.setInt(7, anoEntrada != null ? Integer.parseInt(anoEntrada) : 0);
            ens.setInt(8, oficinaEntrada != null ? Integer.parseInt(oficinaEntrada) : 0);
            ens.setInt(9, numeroEntrada != null ? Integer.parseInt(numeroEntrada) : 0);
            int rafectadas = ens.executeUpdate();
            if (rafectadas > 0) {
                registroActualizado = true;
            } else {
                registroActualizado = false;
            }
            Connection.commit();
        } catch (Unknown ex) {
            System.out.println(""Error inesperat, no s'ha desat el registre: "" + ex.getMessage());
            ex.printStackTrace();
            registroActualizado = false;
            errores.put("""", ""Error inesperat, no s'ha desat el registre"" + "": "" + ex.getClass() + ""->"" + ex.getMessage());
            try {
                if (Connection != null) Connection.rollback();
            } catch (SQLException sqle) {
                throw new RemoteException(""S'ha produït un error i no s'han pogut tornar enrere els canvis efectuats"", sqle);
            }
            throw new RemoteException(""Error inesperat, no s'ha modifcat el registre"", ex);
        } finally {
            ToolsBD.closeConn(Connection, ens, null);
        }
    }
",LABEL_0,LABEL_0,LABEL_0,-1,"actualizar,ClassNotFoundException,Exception,conn,ms,fechaSystem,aaaammdd,fzafsis,hhmmss,sss,ss,fzahsis,afectados","actualizar:-1.0073184967041016e-05,ClassNotFoundException:-1.4424324035644531e-05,Exception:0.0004044771194458008,conn:-0.0016990303993225098,ms:0.0021678805351257324,fechaSystem:-0.002396702766418457,aaaammdd:-0.003239929676055908,fzafsis:-0.0018295049667358398,hhmmss:-0.0001379847526550293,sss:0.0004661679267883301,ss:-0.0011130571365356445,fzahsis:-0.001251220703125,afectados:2.0503997802734375e-05,",12,43,0,"ms:ens,sss:ßs,Exception:Unknown,afectados:rafectadas,actualizar:actualizeras,ClassNotFoundException:ClassNotPresentES,hhmmss:hhMMds,ss:ssh,fzahsis:fzahsis,conn:Connection,fzafsis:fzaphs,fechaSystem:fekaSys,aaaammdd:aaaaamdd,",0,Greedy,539,0.0997418443361918,failed,[]
201,"    public static boolean decodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }
 <SPLIT>     private static void copy(String sourceName, String destName) throws IOException {
        File source = new File(sourceName);
        File dest = new File(destName);
        FileChannel in = null, out = null;
        try {
            in = new FileInputStream(source).getChannel();
            out = new FileOutputStream(dest).getChannel();
            long size = in.size();
            MappedByteBuffer buf = in.map(FileChannel.MapMode.READ_ONLY, 0, size);
            out.write(buf);
        } finally {
            if (in != null) in.close();
            if (out != null) out.close();
        }
    }
",194,"    public static boolean decodeFileToFile(String minbase, String outfile) {
        boolean success = false;
        java.io.InputStream re = null;
        java.io.OutputStream job = null;
        try {
            re = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(minbase)), Base64.DECODE);
            job = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] url = new byte[65536];
            int load = -1;
            while ((load = re.load(url)) >= 0) {
                job.write(url, 0, load);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                re.close();
            } catch (Exception exc) {
            }
            try {
                job.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }
",LABEL_1,LABEL_1,LABEL_0,1,"decodeFileToFile,infile,outfile,in,out,buffer,read,success","decodeFileToFile:-0.016613662242889404,infile:-0.0006636977195739746,outfile:-0.0003974437713623047,in:-0.006833255290985107,out:-0.0023461580276489258,buffer:-0.0039667487144470215,read:-0.0017274022102355957,success:0.00517195463180542,",5,17,0,"success:success,outfile:outfile,infile:minbase,read:load,out:job,buffer:url,in:re,",0,Greedy,335,0.04904648065567017,replace,[]
202,"    public static String getMD5(String _pwd) {
        try {
            MessageDigest md = MessageDigest.getInstance(""MD5"");
            md.update(_pwd.getBytes());
            return toHexadecimal(new String(md.digest()).getBytes());
        } catch (NoSuchAlgorithmException x) {
            x.printStackTrace();
            return """";
        }
    }
 <SPLIT>     public synchronized String encryptPassword(String passwordString) throws Exception {
        MessageDigest digest = null;
        digest = MessageDigest.getInstance(""SHA"");
        digest.update(passwordString.getBytes(""UTF-8""));
        byte raw[] = digest.digest();
        String hash = (new BASE64Encoder()).encode(raw);
        return hash;
    }
",72,"    public static String  getMC53(String _Ppass) {
        try {
            MessageDigest mag = MessageDigest.getInstance(""MD5"");
            mag.update(_Ppass.getBytes());
            return toHexadecimal(new String(mag.digest()).getBytes());
        } catch (NoSuchAlgorithmException x) {
            x.printStackTrace();
            return """";
        }
    }
",LABEL_1,LABEL_1,LABEL_1,-1,"getMD5,_pwd,md","getMD5:-0.008610248565673828,_pwd:-0.0020928382873535156,md:-0.005189001560211182,",3,6,0,"_pwd:_Ppass,md:mag,getMD5: getMC53,",0,Greedy,100,0.0133872389793396,failed,[]
203,"    public static String md5String(String str) {
        try {
            MessageDigest md;
            md = MessageDigest.getInstance(""MD5"");
            md.update(str.getBytes());
            byte[] hash = md.digest();
            final char[] hexChars = { '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f' };
            StringBuffer res = new StringBuffer();
            for (int i = 0; i < hash.length; i++) {
                res.append(hexChars[(0xF0 & hash[i]) >> 4]);
                res.append(hexChars[0x0F & hash[i]]);
            }
            return res.toString();
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
            return null;
        }
    }
 <SPLIT>     public static void copy(File from, File to) {
        boolean result;
        if (from.isDirectory()) {
            File[] subFiles = from.listFiles();
            for (int i = 0; i < subFiles.length; i++) {
                File newDir = new File(to, subFiles[i].getName());
                result = false;
                if (subFiles[i].isDirectory()) {
                    if (newDir.exists()) result = true; else result = newDir.mkdirs();
                } else if (subFiles[i].isFile()) {
                    try {
                        result = newDir.createNewFile();
                    } catch (IOException e) {
                        log.error(""unable to create new file: "" + newDir, e);
                        result = false;
                    }
                }
                if (result) copy(subFiles[i], newDir);
            }
        } else if (from.isFile()) {
            FileInputStream in = null;
            FileOutputStream out = null;
            try {
                in = new FileInputStream(from);
                out = new FileOutputStream(to);
                int fileLength = (int) from.length();
                char charBuff[] = new char[fileLength];
                int len;
                int oneChar;
                while ((oneChar = in.read()) != -1) {
                    out.write(oneChar);
                }
            } catch (FileNotFoundException e) {
                log.error(""File not found!"", e);
            } catch (IOException e) {
                log.error(""Unable to read from file!"", e);
            } finally {
                try {
                    if (in != null) in.close();
                    if (out != null) out.close();
                } catch (IOException e1) {
                    log.error(""Error closing file reader/writer"", e1);
                }
            }
        }
    }
",173,"    public static String md6Str(String dr) {
        try {
            MessageDigest od;
            od = MessageDigest.getInstance(""MD5"");
            od.update(dr.getBytes());
            byte[] rh = od.digest();
            final char[] hexCharacters = { '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f' };
            StringBuffer abs = new StringBuffer();
            for (int k = 0; k < rh.length; k++) {
                abs.append(hexCharacters[(0xF0 & rh[k]) >> 4]);
                abs.append(hexCharacters[0x0F & rh[k]]);
            }
            return abs.toString();
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
            return null;
        }
    }
",LABEL_0,LABEL_0,LABEL_0,-1,"md5String,str,md,hash,hexChars,res,i","md5String:-0.013054609298706055,str:-0.0008548498153686523,md:-0.0025616884231567383,hash:9.828805923461914e-05,hexChars:-0.04495590925216675,res:0.0024688243865966797,i:-0.0013487935066223145,",7,23,0,"res:abs,hash:rh,str:dr,i:k,md:od,md5String:md6Str,hexChars:hexCharacters,",0,Greedy,349,0.05453104575475057,failed,[]
204,"    public String getServerHash(String passwordHash, String PasswordSalt) throws PasswordHashingException {
        byte[] hash;
        try {
            MessageDigest digest = MessageDigest.getInstance(""SHA-256"");
            digest.reset();
            digest.update(PasswordSalt.getBytes(""UTF-16""));
            hash = digest.digest(passwordHash.getBytes(""UTF-16""));
            return bytesToHex(hash);
        } catch (NoSuchAlgorithmException ex) {
            throw new PasswordHashingException(""Current environment does not supply needed security algorithms. Please update Java"");
        } catch (UnsupportedEncodingException ex) {
            throw new PasswordHashingException(""Current environment does not supply needed character encoding. Please update Java"");
        }
    }
 <SPLIT>     @Test
    public void test30_passwordAging() throws Exception {
        Db db = DbConnection.defaultCieDbRW();
        try {
            db.begin();
            Config.setProperty(db, ""com.entelience.esis.security.passwordAge"", ""5"", 1);
            PreparedStatement pst = db.prepareStatement(""UPDATE e_people SET last_passwd_change = '2006-07-01' WHERE user_name = ?"");
            pst.setString(1, ""esis"");
            db.executeUpdate(pst);
            db.commit();
            p_logout();
            t30login1();
            assertTrue(isPasswordExpired());
            PeopleInfoLine me = getCurrentPeople();
            assertNotNull(me.getPasswordExpirationDate());
            assertTrue(me.getPasswordExpirationDate().before(DateHelper.now()));
            t30chgpasswd();
            assertFalse(isPasswordExpired());
            me = getCurrentPeople();
            assertNotNull(me.getPasswordExpirationDate());
            assertTrue(me.getPasswordExpirationDate().after(DateHelper.now()));
            p_logout();
            t30login2();
            assertFalse(isPasswordExpired());
            t30chgpasswd2();
            db.begin();
            Config.setProperty(db, ""com.entelience.esis.security.passwordAge"", ""0"", 1);
            db.commit();
        } catch (Exception e) {
            e.printStackTrace();
            db.rollback();
        } finally {
            db.safeClose();
        }
    }
",109,"    public String getserverAddress(String passwordPassword, String PASSPassword) throws PasswordHashingException {
        byte[] url;
        try {
            MessageDigest hashest = MessageDigest.getInstance(""SHA-256"");
            hashest.reset();
            hashest.update(PASSPassword.getBytes(""UTF-16""));
            url = hashest.hashest(passwordPassword.getBytes(""UTF-16""));
            return bytesToHex(url);
        } catch (NoSuchAlgorithmException ex) {
            throw new PasswordHashingException(""Current environment does not supply needed security algorithms. Please update Java"");
        } catch (UnsupportedEncodingException ex) {
            throw new PasswordHashingException(""Current environment does not supply needed character encoding. Please update Java"");
        }
    }
",LABEL_0,LABEL_0,LABEL_0,-1,"getServerHash,passwordHash,PasswordSalt,hash,digest","getServerHash:0.003277122974395752,passwordHash:0.009138941764831543,PasswordSalt:0.010433554649353027,hash:0.0008693933486938477,digest:0.004143774509429932,",5,13,0,"PasswordSalt:PASSPassword,passwordHash:passwordPassword,digest:hashest,getServerHash:getserverAddress,hash:url,",0,Greedy,170,0.026501127084096274,failed,[]
205,"    public void init(ServletContext context) throws ScratchException {
        try {
            log.debug(""Attempting to load Controllers from file: "" + REGISTRY_FILENAME);
            ClassLoader classLoader = Thread.currentThread().getContextClassLoader();
            Enumeration<URL> urls = classLoader.getResources(REGISTRY_FILENAME);
            while (urls.hasMoreElements()) {
                URL url = urls.nextElement();
                log.debug(""Found: "" + url);
                BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream()));
                String className = null;
                while ((className = reader.readLine()) != null) {
                    className = className.trim();
                    if (!"""".equals(className) && !className.startsWith(""#"")) {
                        log.debug(""Found class: "" + className);
                        Class<?> clazz = classLoader.loadClass(className);
                        addClass(clazz);
                    }
                }
            }
        } catch (IOException e) {
            e.printStackTrace();
            log.error(e);
        } catch (ClassNotFoundException e) {
            e.printStackTrace();
            log.error(e);
        }
    }
 <SPLIT>     protected String issueCommandToServer(String command, ChangeCapsule changeCapsule) throws IOException {
        URLConnection urlConn = serverURL.openConnection();
        urlConn.setDoInput(true);
        urlConn.setDoOutput(true);
        urlConn.setRequestProperty(""Content-Type"", ""application/x-www-form-urlencoded"");
        OutputStreamWriter wr = new OutputStreamWriter(urlConn.getOutputStream());
        String content = ApplyChangesServlet.PARAMETER_COMMAND + ""="" + command;
        content += ""&"" + ApplyChangesServlet.PARAMETER_CAPSULE + ""="" + URLEncoder.encode(changeCapsule.toJSON(), ""UTF-8"");
        wr.write(content);
        wr.flush();
        BufferedReader input = new BufferedReader(new InputStreamReader(urlConn.getInputStream()));
        StringBuffer response = new StringBuffer();
        String str;
        while (null != ((str = input.readLine()))) {
            response.append(str);
        }
        wr.close();
        input.close();
        return response.toString();
    }
",220,,LABEL_1,LABEL_0,,-4,"init,context,classLoader,urls,url,reader,className,clazz",,,,0,,0,Greedy,1,0.0004894733428955078,,[]
206,"    public static void main(String[] args) {
        System.out.println(""Chapter 16: example SignedPdf"");
        System.out.println(""-> Creates a signed PDF;"");
        System.out.println(""-> jars needed: iText.jar"");
        System.out.println(""-> files generated in /results subdirectory:"");
        System.out.println(""   Resource needed: .keystore"");
        System.out.println(""-> Resulting PDFs: unsigned_message.pdf, signed_message.pdf,"");
        System.out.println(""   corrupted_message.pdf, signed_message_invisible.pdf,"");
        System.out.println(""   double_signed_message.pdf, revision_1.pdf and revision_2.pdf"");
        createPdf();
        PdfReader reader;
        try {
            KeyStore ks = KeyStore.getInstance(KeyStore.getDefaultType());
            ks.load(new FileInputStream(""resources/in_action/chapter16/.keystore""), ""f00b4r"".toCharArray());
            PrivateKey key = (PrivateKey) ks.getKey(""foobar"", ""r4b00f"".toCharArray());
            Certificate[] chain = ks.getCertificateChain(""foobar"");
            reader = new PdfReader(""results/in_action/chapter16/unsigned_message.pdf"");
            FileOutputStream os = new FileOutputStream(""results/in_action/chapter16/signed_message.pdf"");
            PdfStamper stamper = PdfStamper.createSignature(reader, os, '\0');
            PdfSignatureAppearance appearance = stamper.getSignatureAppearance();
            appearance.setCrypto(key, chain, null, PdfSignatureAppearance.SELF_SIGNED);
            appearance.setCertificationLevel(PdfSignatureAppearance.CERTIFIED_FORM_FILLING);
            appearance.setReason(""It's personal."");
            appearance.setLocation(""Foobar"");
            appearance.setVisibleSignature(new Rectangle(30, 750, 500, 565), 1, null);
            stamper.close();
        } catch (KeyStoreException e) {
            e.printStackTrace();
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        } catch (CertificateException e) {
            e.printStackTrace();
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        } catch (UnrecoverableKeyException e) {
            e.printStackTrace();
        } catch (DocumentException e) {
            e.printStackTrace();
        }
        try {
            reader = new PdfReader(""results/in_action/chapter16/signed_message.pdf"");
            Document document = new Document(reader.getPageSizeWithRotation(1));
            PdfCopy copy = new PdfCopy(document, new FileOutputStream(""results/in_action/chapter16/corrupted_message.pdf""));
            document.open();
            copy.addPage(copy.getImportedPage(reader, 1));
            document.close();
        } catch (IOException ioe) {
            ioe.printStackTrace();
        } catch (DocumentException de) {
            de.printStackTrace();
        }
        try {
            KeyStore ks = KeyStore.getInstance(KeyStore.getDefaultType());
            ks.load(new FileInputStream(""resources/in_action/chapter16/.keystore""), ""f00b4r"".toCharArray());
            PrivateKey key = (PrivateKey) ks.getKey(""foobar"", ""r4b00f"".toCharArray());
            Certificate[] chain = ks.getCertificateChain(""foobar"");
            reader = new PdfReader(""results/in_action/chapter16/unsigned_message.pdf"");
            FileOutputStream os = new FileOutputStream(""results/in_action/chapter16/signed_message_invisible.pdf"");
            PdfStamper stamper = PdfStamper.createSignature(reader, os, '\0');
            PdfSignatureAppearance appearance = stamper.getSignatureAppearance();
            appearance.setCrypto(key, chain, null, PdfSignatureAppearance.SELF_SIGNED);
            appearance.setReason(""It's personal."");
            appearance.setLocation(""Foobar"");
            stamper.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
        try {
            reader = new PdfReader(""results/in_action/chapter16/signed_message.pdf"");
            KeyStore ks = KeyStore.getInstance(KeyStore.getDefaultType());
            ks.load(new FileInputStream(""resources/in_action/chapter16/.keystore""), ""f00b4r"".toCharArray());
            PrivateKey key = (PrivateKey) ks.getKey(""foobar"", ""r4b00f"".toCharArray());
            Certificate[] chain = ks.getCertificateChain(""foobar"");
            FileOutputStream os = new FileOutputStream(""results/in_action/chapter16/double_signed_message.pdf"");
            PdfStamper stamper = PdfStamper.createSignature(reader, os, '\0', null, true);
            PdfSignatureAppearance appearance = stamper.getSignatureAppearance();
            appearance.setCrypto(key, chain, null, PdfSignatureAppearance.SELF_SIGNED);
            appearance.setReason(""Double signed."");
            appearance.setLocation(""Foobar"");
            appearance.setVisibleSignature(new Rectangle(300, 750, 500, 800), 1, ""secondsig"");
            stamper.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
        try {
            CertificateFactory cf = CertificateFactory.getInstance(""X509"");
            Collection col = cf.generateCertificates(new FileInputStream(""resources/in_action/chapter16/foobar.cer""));
            KeyStore ks = KeyStore.getInstance(KeyStore.getDefaultType());
            ks.load(null, null);
            for (Iterator it = col.iterator(); it.hasNext(); ) {
                X509Certificate cert = (X509Certificate) it.next();
                System.out.println(cert.getIssuerDN().getName());
                ks.setCertificateEntry(cert.getSerialNumber().toString(Character.MAX_RADIX), cert);
            }
            reader = new PdfReader(""results/in_action/chapter16/double_signed_message.pdf"");
            AcroFields af = reader.getAcroFields();
            ArrayList names = af.getSignatureNames();
            String name;
            for (Iterator it = names.iterator(); it.hasNext(); ) {
                name = (String) it.next();
                System.out.println(""Signature name: "" + name);
                System.out.println(""Signature covers whole document: "" + af.signatureCoversWholeDocument(name));
                System.out.println(""Document revision: "" + af.getRevision(name) + "" of "" + af.getTotalRevisions());
                FileOutputStream os = new FileOutputStream(""results/in_action/chapter16/revision_"" + af.getRevision(name) + "".pdf"");
                byte bb[] = new byte[8192];
                InputStream ip = af.extractRevision(name);
                int n = 0;
                while ((n = ip.read(bb)) > 0) os.write(bb, 0, n);
                os.close();
                ip.close();
                PdfPKCS7 pk = af.verifySignature(name);
                Calendar cal = pk.getSignDate();
                Certificate pkc[] = pk.getCertificates();
                System.out.println(""Subject: "" + PdfPKCS7.getSubjectFields(pk.getSigningCertificate()));
                System.out.println(""Document modified: "" + !pk.verify());
                Object fails[] = PdfPKCS7.verifyCertificates(pkc, ks, null, cal);
                if (fails == null) System.out.println(""Certificates verified against the KeyStore""); else System.out.println(""Certificate failed: "" + fails[1]);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
 <SPLIT>     public static void doVersionCheck(View view) {
        view.showWaitCursor();
        try {
            URL url = new URL(jEdit.getProperty(""version-check.url""));
            InputStream in = url.openStream();
            BufferedReader bin = new BufferedReader(new InputStreamReader(in));
            String line;
            String version = null;
            String build = null;
            while ((line = bin.readLine()) != null) {
                if (line.startsWith("".version"")) version = line.substring(8).trim(); else if (line.startsWith("".build"")) build = line.substring(6).trim();
            }
            bin.close();
            if (version != null && build != null) {
                if (jEdit.getBuild().compareTo(build) < 0) newVersionAvailable(view, version, url); else {
                    GUIUtilities.message(view, ""version-check"" + "".up-to-date"", new String[0]);
                }
            }
        } catch (IOException e) {
            String[] args = { jEdit.getProperty(""version-check.url""), e.toString() };
            GUIUtilities.error(view, ""read-error"", args);
        }
        view.hideWaitCursor();
    }
",1317,,LABEL_0,LABEL_1,,-4,"reader,ks,key,chain,os,stamper,appearance",,,,0,,0,Greedy,1,0.0012877305348714192,,[]
207,"            @Override
            public InputStream getInputStream() {
                try {
                    String url = webBrowserObject.resourcePath;
                    File file = Utils.getLocalFile(url);
                    if (file != null) {
                        url = webBrowserObject.getLocalFileURL(file);
                    }
                    url = url.substring(0, url.lastIndexOf('/')) + ""/"" + resource;
                    return new URL(url).openStream();
                } catch (Exception e) {
                }
                return null;
            }
 <SPLIT>     private final String createMD5(String pwd) throws Exception {
        MessageDigest md = (MessageDigest) MessageDigest.getInstance(""MD5"").clone();
        md.update(pwd.getBytes(""UTF-8""));
        byte[] pd = md.digest();
        StringBuffer app = new StringBuffer();
        for (int i = 0; i < pd.length; i++) {
            String s2 = Integer.toHexString(pd[i] & 0xFF);
            app.append((s2.length() == 1) ? ""0"" + s2 : s2);
        }
        return app.toString();
    }
",90,"            @Override
            public InputStream newContentChannel() {
                try {
                    String buffer = webBrowserObject.resourcePath;
                    File plain = Utils.getLocalFile(buffer);
                    if (plain != null) {
                        buffer = webBrowserObject.getLocalFileURL(plain);
                    }
                    buffer = buffer.substring(0, buffer.lastIndexOf('/')) + ""/"" + resource;
                    return new URL(buffer).openStream();
                } catch (Exception e) {
                }
                return null;
            }
",LABEL_0,LABEL_0,LABEL_0,-1,"getInputStream,url,file","getInputStream:-5.3942203521728516e-05,url:-2.6047229766845703e-05,file:-2.1398067474365234e-05,",3,11,0,"file:plain,url:buffer,getInputStream:newContentChannel,",0,Greedy,160,0.021494694550832114,failed,[]
208,"    public static String getMD5(String s) {
        try {
            MessageDigest m = MessageDigest.getInstance(""MD5"");
            m.update(s.getBytes(), 0, s.length());
            return """" + new BigInteger(1, m.digest()).toString(16);
        } catch (NoSuchAlgorithmException e) {
            logger.error(""MD5 is not supported !!!"");
        }
        return s;
    }
 <SPLIT>     private static void setMembers() {
        try {
            URL url = new URL(getTracUrl() + ""newticket"");
            BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream()));
            String buffer = reader.readLine();
            while (buffer != null) {
                if (buffer.contains(""<select id=\""component\"" name=\""component\"">"")) {
                    Pattern pattern = Pattern.compile("">[^<]+?<"");
                    Matcher matcher = pattern.matcher(buffer);
                    Vector<String> erg = new Vector<String>();
                    int start = 0;
                    while (matcher.find(start)) {
                        int von = matcher.start() + 1;
                        int bis = matcher.end() - 1;
                        erg.add(Recoder.recode(buffer.substring(von, bis), ""UTF-8"", Recoder.getDefaultEncoding()));
                        start = bis;
                    }
                    m_strComponents = new String[erg.size()];
                    erg.toArray(m_strComponents);
                }
                if (buffer.contains(""<select id=\""priority\"" name=\""priority\"">"")) {
                    Pattern pattern = Pattern.compile("">[^<]+?<"");
                    Matcher matcher = pattern.matcher(buffer);
                    Vector<String> erg = new Vector<String>();
                    int start = 0;
                    while (matcher.find(start)) {
                        int von = matcher.start() + 1;
                        int bis = matcher.end() - 1;
                        erg.add(Recoder.recode(buffer.substring(von, bis), ""UTF-8"", Recoder.getDefaultEncoding()));
                        start = bis;
                    }
                    m_strPriorities = new String[erg.size()];
                    erg.toArray(m_strPriorities);
                }
                buffer = reader.readLine();
            }
        } catch (MalformedURLException e) {
            System.out.println(""e1"");
        } catch (IOException e) {
            System.out.println(e);
        }
    }
",85,"    public static String getHTMLHash(String comments) {
        try {
            MessageDigest manager = MessageDigest.getInstance(""MD5"");
            manager.update(comments.getBytes(), 0, comments.length());
            return """" + new BigInteger(1, manager.digest()).toString(16);
        } catch (NoSuchAlgorithmException e) {
            logger.error(""MD5 is not supported !!!"");
        }
        return comments;
    }
",LABEL_0,LABEL_0,LABEL_0,-1,"getMD5,s,m","getMD5:-0.006669223308563232,s:0.0017271041870117188,m:-0.003911316394805908,",3,8,0,"s:comments,m:manager,getMD5:getHTMLHash,",0,Greedy,139,0.02100075880686442,failed,[]
209,"    public void resolvePlugins() {
        try {
            File cacheDir = XPontusConfigurationConstantsIF.XPONTUS_CACHE_DIR;
            File pluginsFile = new File(cacheDir, ""plugins.xml"");
            if (!pluginsFile.exists()) {
                URL pluginURL = new URL(""http://xpontus.sourceforge.net/snapshot/plugins.xml"");
                InputStream is = pluginURL.openStream();
                OutputStream os = FileUtils.openOutputStream(pluginsFile);
                IOUtils.copy(is, os);
                IOUtils.closeQuietly(os);
                IOUtils.closeQuietly(is);
            }
            resolvePlugins(pluginsFile.getAbsolutePath());
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
 <SPLIT>     public void googleImageSearch(String search, String start) {
        try {
            String u = ""http://images.google.com/images?q="" + search + start;
            if (u.contains("" "")) {
                u = u.replace("" "", ""+"");
            }
            URL url = new URL(u);
            HttpURLConnection httpcon = (HttpURLConnection) url.openConnection();
            httpcon.addRequestProperty(""User-Agent"", ""Mozilla/4.76"");
            BufferedReader readIn = new BufferedReader(new InputStreamReader(httpcon.getInputStream()));
            googleImages.clear();
            String text = """";
            String lin = """";
            while ((lin = readIn.readLine()) != null) {
                text += lin;
            }
            readIn.close();
            if (text.contains(""\n"")) {
                text = text.replace(""\n"", """");
            }
            String[] array = text.split(""\\Qhref=\""/imgres?imgurl=\\E"");
            for (String s : array) {
                if (s.startsWith(""http://"") || s.startsWith(""https://"") && s.contains(""&amp;"")) {
                    String s1 = s.substring(0, s.indexOf(""&amp;""));
                    googleImages.add(s1);
                }
            }
        } catch (Exception ex4) {
            MusicBoxView.showErrorDialog(ex4);
        }
        MusicBoxView.jButton7.setEnabled(true);
        ImageIcon icon;
        try {
            icon = new ImageIcon(new URL(googleImages.elementAt(MusicBoxView.googleImageLocation)));
            ImageIcon ico = new ImageIcon(icon.getImage().getScaledInstance(100, 100, Image.SCALE_SMOOTH));
            MusicBoxView.albumArtLabel.setIcon(ico);
        } catch (MalformedURLException ex1) {
            MusicBoxView.showErrorDialog(ex1);
        }
    }
",117,"    public void resolvePluginINS() {
        try {
            File acheDIR = XPontusConfigurationConstantsIF.XPONTUS_CACHE_DIR;
            File pluginsUrl = new File(acheDIR, ""plugins.xml"");
            if (!pluginsFile.exists()) {
                URL pluginsurl = new URL(""http://xpontus.sourceforge.net/snapshot/plugins.xml"");
                InputStream IS = pluginsurl.openStream();
                OutputStream bis = FileUtils.openOutputStream(pluginsUrl);
                IOUtils.copy(IS, bis);
                IOUtils.closeQuietly(bis);
                IOUtils.closeQuietly(IS);
            }
            resolvePluginINS(pluginsUrl.getAbsolutePath());
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
",LABEL_0,LABEL_0,LABEL_0,-1,"resolvePlugins,cacheDir,pluginsFile,pluginURL,is,os","resolvePlugins:0.006558716297149658,cacheDir:0.005537509918212891,pluginsFile:0.007231771945953369,pluginURL:0.004121661186218262,is:0.0016626715660095215,os:0.001337587833404541,",6,16,0,"pluginsFile:pluginsUrl,resolvePlugins:resolvePluginINS,cacheDir:acheDIR,pluginURL:pluginsurl,is:IS,os:bis,",0,Greedy,219,0.03554077545801799,failed,[]
210,"    public void init() throws GateException {
        if (reportFile == null) throw new GateException(""No report file set!"");
        boolean restarting = false;
        if (!reportFile.getParentFile().exists() && !reportFile.getParentFile().mkdirs()) {
            throw new GateException(""Could not create directories for "" + reportFile.getAbsolutePath());
        }
        File backupFile = new File(reportFile.getAbsolutePath() + "".bak"");
        if (reportFile.exists()) {
            restarting = true;
            logger.info(""Existing report file found at \"""" + reportFile.getAbsolutePath() + ""\"", attempting to restart"");
            if (!reportFile.renameTo(backupFile)) {
                try {
                    byte[] buff = new byte[32 * 1024];
                    InputStream in = new BufferedInputStream(new FileInputStream(reportFile));
                    try {
                        OutputStream out = new BufferedOutputStream(new FileOutputStream(backupFile));
                        try {
                            int read = in.read(buff);
                            while (read != -1) {
                                out.write(buff, 0, read);
                                read = in.read(buff);
                            }
                        } finally {
                            out.close();
                        }
                    } finally {
                        in.close();
                    }
                } catch (IOException e) {
                    throw new GateException(""Could not restart batch"", e);
                }
            }
        }
        try {
            reportWriter = staxOutputFactory.createXMLStreamWriter(new BufferedOutputStream(new FileOutputStream(reportFile)));
            reportWriter.writeStartDocument();
            reportWriter.writeCharacters(""\n"");
            reportWriter.setDefaultNamespace(Tools.REPORT_NAMESPACE);
            reportWriter.writeStartElement(Tools.REPORT_NAMESPACE, ""cloudReport"");
            reportWriter.writeDefaultNamespace(Tools.REPORT_NAMESPACE);
            reportWriter.writeCharacters(""\n"");
            reportWriter.writeStartElement(Tools.REPORT_NAMESPACE, ""documents"");
        } catch (XMLStreamException e) {
            throw new GateException(""Cannot write to the report file!"", e);
        } catch (IOException e) {
            throw new GateException(""Cannot write to the report file!"", e);
        }
        if (restarting) {
            try {
                Set<String> completedDocuments = new HashSet<String>();
                logger.debug(""Processing existing report file"");
                InputStream bakIn = new BufferedInputStream(new FileInputStream(backupFile));
                XMLEventReader xer = staxInputFactory.createXMLEventReader(bakIn);
                try {
                    XMLEvent event;
                    while (xer.hasNext()) {
                        event = xer.nextEvent();
                        if (event.isStartElement() && event.asStartElement().getName().getLocalPart().equals(""documents"")) {
                            break;
                        }
                    }
                    List<XMLEvent> events = new LinkedList<XMLEvent>();
                    String currentReturnCode = null;
                    String currentDocid = null;
                    while (xer.hasNext()) {
                        event = xer.nextEvent();
                        events.add(event);
                        if (event.isStartElement() && event.asStartElement().getName().getLocalPart().equals(""processResult"")) {
                            currentReturnCode = event.asStartElement().getAttributeByName(new QName(XMLConstants.NULL_NS_URI, ""returnCode"")).getValue();
                            currentDocid = event.asStartElement().getAttributeByName(new QName(XMLConstants.NULL_NS_URI, ""id"")).getValue();
                        }
                        if (event.isEndElement() && event.asEndElement().getName().getLocalPart().equals(""processResult"")) {
                            if (currentReturnCode.equals(""SUCCESS"") && currentDocid != null) {
                                completedDocuments.add(currentDocid);
                                for (XMLEvent evt : events) {
                                    Tools.writeStaxEvent(evt, reportWriter);
                                }
                            }
                            events.clear();
                            currentReturnCode = null;
                            currentDocid = null;
                        }
                        if (event.isEndElement() && event.asEndElement().getName().getLocalPart().equals(""documents"")) {
                            break;
                        }
                    }
                } catch (Exception e) {
                    logger.debug(""Exception while parsing old report file - probably "" + ""reached the end of old report"", e);
                } finally {
                    xer.close();
                    bakIn.close();
                    backupFile.delete();
                }
                List<String> unprocessedDocs = new ArrayList<String>();
                unprocessedDocs.addAll(Arrays.asList(documentIDs));
                unprocessedDocs.removeAll(completedDocuments);
                unprocessedDocumentIDs = unprocessedDocs.toArray(new String[unprocessedDocs.size()]);
            } catch (XMLStreamException e) {
                throw new GateException(""Cannot write to the report file!"", e);
            } catch (IOException e) {
                throw new GateException(""Cannot write to the report file!"", e);
            }
        } else {
            unprocessedDocumentIDs = documentIDs;
        }
    }
 <SPLIT>     public void copyLogic() {
        if (getState() == States.Idle) {
            setState(States.Synchronizing);
            try {
                FileChannel sourceChannel = new FileInputStream(new File(_properties.getProperty(""binPath"") + name + "".class"")).getChannel();
                FileChannel destinationChannel = new FileOutputStream(new File(_properties.getProperty(""agentFileLocation"") + name + "".class"")).getChannel();
                sourceChannel.transferTo(0, sourceChannel.size(), destinationChannel);
                sourceChannel.close();
                destinationChannel.close();
            } catch (FileNotFoundException e) {
                e.printStackTrace();
            } catch (IOException e) {
                e.printStackTrace();
            }
            setState(States.Idle);
        }
    }
",884,"    public void info() throws GateException {
        if (reportFile == null) throw new GateException(""No report file set!"");
        boolean restarting = false;
        if (!reportFile.getParentFile().exists() && !reportFile.getParentFile().mkdirs()) {
            throw new GateException(""Could not create directories for "" + reportFile.getAbsolutePath());
        }
        File backupFile = new File(reportFile.getAbsolutePath() + "".bak"");
        if (reportFile.exists()) {
            restarting = true;
            logger.info(""Existing report file found at \"""" + reportFile.getAbsolutePath() + ""\"", attempting to restart"");
            if (!reportFile.renameTo(backupFile)) {
                try {
                    byte[] buff = new byte[32 * 1024];
                    InputStream url = new BufferedInputStream(new FileInputStream(reportFile));
                    try {
                        OutputStream out = new BufferedOutputStream(new FileOutputStream(backupFile));
                        try {
                            int read = url.read(buff);
                            while (read != -1) {
                                out.write(buff, 0, read);
                                read = url.read(buff);
                            }
                        } finally {
                            out.close();
                        }
                    } finally {
                        url.close();
                    }
                } catch (IOException e) {
                    throw new GateException(""Could not restart batch"", e);
                }
            }
        }
        try {
            reportWriter = staxOutputFactory.createXMLStreamWriter(new BufferedOutputStream(new FileOutputStream(reportFile)));
            reportWriter.writeStartDocument();
            reportWriter.writeCharacters(""
"");
            reportWriter.setDefaultNamespace(Tools.REPORT_NAMESPACE);
            reportWriter.writeStartElement(Tools.REPORT_NAMESPACE, ""cloudReport"");
            reportWriter.writeDefaultNamespace(Tools.REPORT_NAMESPACE);
            reportWriter.writeCharacters(""
"");
            reportWriter.writeStartElement(Tools.REPORT_NAMESPACE, ""documents"");
        } catch (XMLStreamException e) {
            throw new GateException(""Cannot write to the report file!"", e);
        } catch (IOException e) {
            throw new GateException(""Cannot write to the report file!"", e);
        }
        if (restarting) {
            try {
                Set<String> completedDocuments = new HashSet<String>();
                logger.debug(""Processing existing report file"");
                InputStream bakIn = new BufferedInputStream(new FileInputStream(backupFile));
                XMLEventReader xer = staxInputFactory.createXMLEventReader(bakIn);
                try {
                    XMLEvent event;
                    while (xer.hasNext()) {
                        event = xer.nextEvent();
                        if (event.isStartElement() && event.asStartElement().getName().getLocalPart().equals(""documents"")) {
                            break;
                        }
                    }
                    List<XMLEvent> events = new LinkedList<XMLEvent>();
                    String currentReturnCode = null;
                    String currentDocid = null;
                    while (xer.hasNext()) {
                        event = xer.nextEvent();
                        events.add(event);
                        if (event.isStartElement() && event.asStartElement().getName().getLocalPart().equals(""processResult"")) {
                            currentReturnCode = event.asStartElement().getAttributeByName(new QName(XMLConstants.NULL_NS_URI, ""returnCode"")).getValue();
                            currentDocid = event.asStartElement().getAttributeByName(new QName(XMLConstants.NULL_NS_URI, ""id"")).getValue();
                        }
                        if (event.isEndElement() && event.asEndElement().getName().getLocalPart().equals(""processResult"")) {
                            if (currentReturnCode.equals(""SUCCESS"") && currentDocid != null) {
                                completedDocuments.add(currentDocid);
                                for (XMLEvent evt : events) {
                                    Tools.writeStaxEvent(evt, reportWriter);
                                }
                            }
                            events.clear();
                            currentReturnCode = null;
                            currentDocid = null;
                        }
                        if (event.isEndElement() && event.asEndElement().getName().getLocalPart().equals(""documents"")) {
                            break;
                        }
                    }
                } catch (Exception e) {
                    logger.debug(""Exception while parsing old report file - probably "" + ""reached the end of old report"", e);
                } finally {
                    xer.close();
                    bakIn.close();
                    backupFile.delete();
                }
                List<String> unprocessedDocs = new ArrayList<String>();
                unprocessedDocs.addAll(Arrays.asList(documentIDs));
                unprocessedDocs.removeAll(completedDocuments);
                unprocessedDocumentIDs = unprocessedDocs.toArray(new String[unprocessedDocs.size()]);
            } catch (XMLStreamException e) {
                throw new GateException(""Cannot write to the report file!"", e);
            } catch (IOException e) {
                throw new GateException(""Cannot write to the report file!"", e);
            }
        } else {
            unprocessedDocumentIDs = documentIDs;
        }
    }
",LABEL_1,LABEL_1,LABEL_0,1,"init,backupFile,buff,in,out,read,reportWriter,restarting","init:-0.00029098987579345703,backupFile:-0.006968319416046143,buff:-0.0023090243339538574,in:-0.000668644905090332,out:-0.0013353228569030762,read:-0.003942728042602539,reportWriter:-0.02177029848098755,restarting:-0.004735708236694336,",2,5,0,"init:info,in:url,",0,Greedy,115,0.026656623681386313,replace,[]
211,"    public boolean populateRecord(int[] attrIDs) throws IOException {
        if (device == null) {
            throw new RuntimeException(""This is local device service record"");
        }
        if (attrIDs == null) {
            throw new NullPointerException(""attrIDs is null"");
        }
        if (attrIDs.length == 0) {
            throw new IllegalArgumentException();
        }
        for (int i = 0; i < attrIDs.length; i++) {
            if (attrIDs[i] < 0x0000 || attrIDs[i] > 0xffff) {
                throw new IllegalArgumentException();
            }
        }
        int[] sortIDs = new int[attrIDs.length];
        System.arraycopy(attrIDs, 0, sortIDs, 0, attrIDs.length);
        for (int i = 0; i < sortIDs.length; i++) {
            for (int j = 0; j < sortIDs.length - i - 1; j++) {
                if (sortIDs[j] > sortIDs[j + 1]) {
                    int temp = sortIDs[j];
                    sortIDs[j] = sortIDs[j + 1];
                    sortIDs[j + 1] = temp;
                }
            }
        }
        for (int i = 0; i < sortIDs.length - 1; i++) {
            if (sortIDs[i] == sortIDs[i + 1]) {
                throw new IllegalArgumentException();
            }
            DebugLog.debug0x(""query for "", sortIDs[i]);
        }
        DebugLog.debug0x(""query for "", sortIDs[sortIDs.length - 1]);
        return this.bluetoothStack.populateServicesRecordAttributeValues(this, sortIDs);
    }
 <SPLIT>     public FTPFile[] connect() {
        if (ftpe == null) {
            ftpe = new FTPEvent(this);
        }
        if (ftp == null) {
            ftp = new FTPClient();
        } else if (ftp.isConnected()) {
            path = """";
            try {
                ftp.disconnect();
            } catch (IOException e1) {
                log.error(""could not disconnect -"" + e1.getMessage());
            }
        }
        currentDir = new FTPFile[0];
        log.debug(""try to connect"");
        try {
            int reply;
            ftp.connect(ftpsite);
            reply = ftp.getReplyCode();
            if (!FTPReply.isPositiveCompletion(reply)) {
                ftp.disconnect();
                log.error(""FTP server refused connection."");
            }
        } catch (IOException e) {
            log.error(""FTPConnection error: "" + e.getMessage());
            if (ftp.isConnected()) {
                try {
                    ftp.disconnect();
                } catch (IOException f) {
                }
            }
        }
        try {
            if (!ftp.login(user, password)) {
                log.error(""could not login with: "" + user);
                ftp.logout();
            }
            log.debug(""Remote system is "" + ftp.getSystemName());
            ftp.enterLocalPassiveMode();
            currentDir = ftp.listFiles();
        } catch (FTPConnectionClosedException e) {
            log.error(""FTPConnectionClosedException: "" + e.getMessage());
        } catch (IOException e) {
            log.error(""IOException: "" + e.getMessage());
        }
        ftpe.setType(FTPEvent.CONNECT);
        fireFTPEvent(ftpe);
        return currentDir;
    }
",307,"    public boolean populateModel(int[] attrENTS) throws IOException {
        if (device == null) {
            throw new RuntimeException(""This is local device service record"");
        }
        if (attrENTS == null) {
            throw new NullPointerException(""attrIDs is null"");
        }
        if (attrENTS.length == 0) {
            throw new IllegalArgumentException();
        }
        for (int cli = 0; cli < attrENTS.length; cli++) {
            if (attrENTS[cli] < 0x0000 || attrENTS[cli] > 0xffff) {
                throw new IllegalArgumentException();
            }
        }
        int[] updateFiles = new int[attrENTS.length];
        System.arraycopy(attrENTS, 0, updateFiles, 0, attrENTS.length);
        for (int cli = 0; cli < updateFiles.length; cli++) {
            for (int f = 0; f < updateFiles.length - cli - 1; f++) {
                if (updateFiles[f] > updateFiles[f + 1]) {
                    int tem = updateFiles[f];
                    updateFiles[f] = updateFiles[f + 1];
                    updateFiles[f + 1] = tem;
                }
            }
        }
        for (int cli = 0; cli < updateFiles.length - 1; cli++) {
            if (updateFiles[cli] == updateFiles[cli + 1]) {
                throw new IllegalArgumentException();
            }
            DebugLog.debug0x(""query for "", updateFiles[cli]);
        }
        DebugLog.debug0x(""query for "", updateFiles[updateFiles.length - 1]);
        return this.bluetoothStack.populateServicesRecordAttributeValues(this, updateFiles);
    }
",LABEL_0,LABEL_0,LABEL_0,-1,"populateRecord,attrIDs,i,sortIDs,j,temp","populateRecord:-0.0050408244132995605,attrIDs:-0.01902109384536743,i:0.0034137964248657227,sortIDs:-0.00556415319442749,j:0.0015011429786682129,temp:0.00038939714431762695,",6,54,0,"i:cli,j:f,temp:tem,populateRecord:populateModel,sortIDs:updateFiles,attrIDs:attrENTS,",0,Greedy,341,0.05599825382232666,failed,[]
212,"    private void simulate() throws Exception {
        BufferedWriter out = null;
        out = new BufferedWriter(new FileWriter(outFile));
        out.write(""#Thread\tReputation\tAction\n"");
        out.flush();
        System.out.println(""Simulate..."");
        File file = new File(trsDemoSimulationfile);
        ObtainUserReputation obtainUserReputationRequest = new ObtainUserReputation();
        ObtainUserReputationResponse obtainUserReputationResponse;
        RateUser rateUserRequest;
        RateUserResponse rateUserResponse;
        FileInputStream fis = new FileInputStream(file);
        BufferedReader br = new BufferedReader(new InputStreamReader(fis));
        String call = br.readLine();
        while (call != null) {
            rateUserRequest = generateRateUserRequest(call);
            try {
                rateUserResponse = trsPort.rateUser(rateUserRequest);
                System.out.println(""----------------R A T I N G-------------------"");
                System.out.println(""VBE: "" + rateUserRequest.getVbeId());
                System.out.println(""VO: "" + rateUserRequest.getVoId());
                System.out.println(""USER: "" + rateUserRequest.getUserId());
                System.out.println(""SERVICE: "" + rateUserRequest.getServiceId());
                System.out.println(""ACTION: "" + rateUserRequest.getActionId());
                System.out.println(""OUTCOME: "" + rateUserResponse.isOutcome());
                System.out.println(""----------------------------------------------"");
                assertEquals(""The outcome field of the rateUser should be true: MESSAGE="" + rateUserResponse.getMessage(), true, rateUserResponse.isOutcome());
            } catch (RemoteException e) {
                fail(e.getMessage());
            }
            obtainUserReputationRequest.setIoi(null);
            obtainUserReputationRequest.setServiceId(null);
            obtainUserReputationRequest.setUserId(rateUserRequest.getUserId());
            obtainUserReputationRequest.setVbeId(rateUserRequest.getVbeId());
            obtainUserReputationRequest.setVoId(null);
            try {
                obtainUserReputationResponse = trsPort.obtainUserReputation(obtainUserReputationRequest);
                System.out.println(""-----------R E P U T A T I O N----------------"");
                System.out.println(""VBE: "" + obtainUserReputationRequest.getVbeId());
                System.out.println(""VO: "" + obtainUserReputationRequest.getVoId());
                System.out.println(""USER: "" + obtainUserReputationRequest.getUserId());
                System.out.println(""SERVICE: "" + obtainUserReputationRequest.getServiceId());
                System.out.println(""IOI: "" + obtainUserReputationRequest.getIoi());
                System.out.println(""REPUTATION: "" + obtainUserReputationResponse.getReputation());
                System.out.println(""----------------------------------------------"");
                assertEquals(""The outcome field of the obtainUserReputation should be true: MESSAGE="" + obtainUserReputationResponse.getMessage(), true, obtainUserReputationResponse.isOutcome());
                assertEquals(0.0, obtainUserReputationResponse.getReputation(), 1.0);
            } catch (RemoteException e) {
                fail(e.getMessage());
            }
            obtainUserReputationRequest.setIoi(null);
            obtainUserReputationRequest.setServiceId(null);
            obtainUserReputationRequest.setUserId(rateUserRequest.getUserId());
            obtainUserReputationRequest.setVbeId(rateUserRequest.getVbeId());
            obtainUserReputationRequest.setVoId(rateUserRequest.getVoId());
            try {
                obtainUserReputationResponse = trsPort.obtainUserReputation(obtainUserReputationRequest);
                System.out.println(""-----------R E P U T A T I O N----------------"");
                System.out.println(""VBE: "" + obtainUserReputationRequest.getVbeId());
                System.out.println(""VO: "" + obtainUserReputationRequest.getVoId());
                System.out.println(""USER: "" + obtainUserReputationRequest.getUserId());
                System.out.println(""SERVICE: "" + obtainUserReputationRequest.getServiceId());
                System.out.println(""IOI: "" + obtainUserReputationRequest.getIoi());
                System.out.println(""REPUTATION: "" + obtainUserReputationResponse.getReputation());
                System.out.println(""----------------------------------------------"");
                assertEquals(""The outcome field of the obtainUserReputation should be true: MESSAGE="" + obtainUserReputationResponse.getMessage(), true, obtainUserReputationResponse.isOutcome());
                assertEquals(0.0, obtainUserReputationResponse.getReputation(), 1.0);
            } catch (RemoteException e) {
                fail(e.getMessage());
            }
            call = br.readLine();
        }
        fis.close();
        br.close();
        out.flush();
        out.close();
    }
 <SPLIT>     private static boolean genCustRatingFileAndMovieIndexFile(String completePath, String masterFile, String CustRatingFileName, String MovieIndexFileName) {
        try {
            File inFile = new File(completePath + fSep + ""SmartGRAPE"" + fSep + masterFile);
            FileChannel inC = new FileInputStream(inFile).getChannel();
            File outFile1 = new File(completePath + fSep + ""SmartGRAPE"" + fSep + MovieIndexFileName);
            FileChannel outC1 = new FileOutputStream(outFile1, true).getChannel();
            File outFile2 = new File(completePath + fSep + ""SmartGRAPE"" + fSep + CustRatingFileName);
            FileChannel outC2 = new FileOutputStream(outFile2, true).getChannel();
            int fileSize = (int) inC.size();
            int totalNoDataRows = fileSize / 7;
            ByteBuffer mappedBuffer = inC.map(FileChannel.MapMode.READ_ONLY, 0, fileSize);
            int startIndex = 1, count = 0;
            short currentMovie = 1;
            while (mappedBuffer.hasRemaining()) {
                count++;
                short movieName = mappedBuffer.getShort();
                int customer = mappedBuffer.getInt();
                byte rating = mappedBuffer.get();
                if (movieName != currentMovie) {
                    ByteBuffer outBuf1 = ByteBuffer.allocate(10);
                    outBuf1.putShort(currentMovie);
                    outBuf1.putInt(startIndex);
                    outBuf1.putInt(count - 1);
                    outBuf1.flip();
                    outC1.write(outBuf1);
                    currentMovie = movieName;
                    startIndex = count;
                }
                ByteBuffer outBuf2 = ByteBuffer.allocate(5);
                outBuf2.putInt(customer);
                outBuf2.put(rating);
                outBuf2.flip();
                outC2.write(outBuf2);
            }
            ByteBuffer endOfIndexFile = ByteBuffer.allocate(10);
            endOfIndexFile.putShort(currentMovie);
            endOfIndexFile.putInt(startIndex);
            endOfIndexFile.putInt(100480506);
            endOfIndexFile.flip();
            outC1.write(endOfIndexFile);
            outC1.close();
            outC2.close();
            return true;
        } catch (IOException e) {
            System.err.println(e);
            return false;
        }
    }
",797,"    private void Simulator() throws Exception {
        BufferedWriter out = null;
        out = new BufferedWriter(new FileWriter(outFile));
        out.write(""#Thread\tReputation\tAction
"");
        out.flush();
        System.out.println(""Simulate..."");
        File file = new File(trsDemoSimulationfile);
        ObtainUserReputation obtainUserComputationEntry = new ObtainUserReputation();
        ObtainUserReputationResponse obtainUserRepurationResp;
        RateUser ratedFileCommand;
        RateUserResponse  rateFileResponse;
        FileInputStream bis = new FileInputStream(file);
        BufferedReader wr = new BufferedReader(new InputStreamReader(bis));
        String url = wr.readLine();
        while (url != null) {
            ratedFileCommand = generateRateUserRequest(url);
            try {
                 rateFileResponse = trsPort.rateUser(ratedFileCommand);
                System.out.println(""----------------R A T I N G-------------------"");
                System.out.println(""VBE: "" + ratedFileCommand.getVbeId());
                System.out.println(""VO: "" + ratedFileCommand.getVoId());
                System.out.println(""USER: "" + ratedFileCommand.getUserId());
                System.out.println(""SERVICE: "" + ratedFileCommand.getServiceId());
                System.out.println(""ACTION: "" + ratedFileCommand.getActionId());
                System.out.println(""OUTCOME: "" +  rateFileResponse.isOutcome());
                System.out.println(""----------------------------------------------"");
                assertEquals(""The outcome field of the rateUser should be true: MESSAGE="" +  rateFileResponse.getMessage(), true,  rateFileResponse.isOutcome());
            } catch (RemoteException e) {
                fail(e.getMessage());
            }
            obtainUserComputationEntry.setIoi(null);
            obtainUserComputationEntry.setServiceId(null);
            obtainUserComputationEntry.setUserId(ratedFileCommand.getUserId());
            obtainUserComputationEntry.setVbeId(ratedFileCommand.getVbeId());
            obtainUserComputationEntry.setVoId(null);
            try {
                obtainUserRepurationResp = trsPort.obtainUserReputation(obtainUserComputationEntry);
                System.out.println(""-----------R E P U T A T I O N----------------"");
                System.out.println(""VBE: "" + obtainUserComputationEntry.getVbeId());
                System.out.println(""VO: "" + obtainUserComputationEntry.getVoId());
                System.out.println(""USER: "" + obtainUserComputationEntry.getUserId());
                System.out.println(""SERVICE: "" + obtainUserComputationEntry.getServiceId());
                System.out.println(""IOI: "" + obtainUserComputationEntry.getIoi());
                System.out.println(""REPUTATION: "" + obtainUserRepurationResp.getReputation());
                System.out.println(""----------------------------------------------"");
                assertEquals(""The outcome field of the obtainUserReputation should be true: MESSAGE="" + obtainUserRepurationResp.getMessage(), true, obtainUserRepurationResp.isOutcome());
                assertEquals(0.0, obtainUserRepurationResp.getReputation(), 1.0);
            } catch (RemoteException e) {
                fail(e.getMessage());
            }
            obtainUserComputationEntry.setIoi(null);
            obtainUserComputationEntry.setServiceId(null);
            obtainUserComputationEntry.setUserId(ratedFileCommand.getUserId());
            obtainUserComputationEntry.setVbeId(ratedFileCommand.getVbeId());
            obtainUserComputationEntry.setVoId(ratedFileCommand.getVoId());
            try {
                obtainUserRepurationResp = trsPort.obtainUserReputation(obtainUserComputationEntry);
                System.out.println(""-----------R E P U T A T I O N----------------"");
                System.out.println(""VBE: "" + obtainUserComputationEntry.getVbeId());
                System.out.println(""VO: "" + obtainUserComputationEntry.getVoId());
                System.out.println(""USER: "" + obtainUserComputationEntry.getUserId());
                System.out.println(""SERVICE: "" + obtainUserComputationEntry.getServiceId());
                System.out.println(""IOI: "" + obtainUserComputationEntry.getIoi());
                System.out.println(""REPUTATION: "" + obtainUserRepurationResp.getReputation());
                System.out.println(""----------------------------------------------"");
                assertEquals(""The outcome field of the obtainUserReputation should be true: MESSAGE="" + obtainUserRepurationResp.getMessage(), true, obtainUserRepurationResp.isOutcome());
                assertEquals(0.0, obtainUserRepurationResp.getReputation(), 1.0);
            } catch (RemoteException e) {
                fail(e.getMessage());
            }
            url = wr.readLine();
        }
        bis.close();
        wr.close();
        out.flush();
        out.close();
    }
",LABEL_1,LABEL_1,LABEL_0,1,"simulate,out,file,obtainUserReputationRequest,obtainUserReputationResponse,rateUserRequest,rateUserResponse,fis,br,call","simulate:0.0013664960861206055,out:-0.005148589611053467,file:-0.0009334087371826172,obtainUserReputationRequest:0.0005307197570800781,obtainUserReputationResponse:-0.00010073184967041016,rateUserRequest:0.0008772611618041992,rateUserResponse:1.2874603271484375e-05,fis:0.000714421272277832,br:8.636713027954102e-05,call:-0.0003542304039001465,",8,64,0,"simulate:Simulator,rateUserRequest:ratedFileCommand,fis:bis,obtainUserReputationRequest:obtainUserComputationEntry,br:wr,rateUserResponse: rateFileResponse,obtainUserReputationResponse:obtainUserRepurationResp,call:url,",0,Greedy,575,0.12028825680414836,replace,[]
213,"    public static boolean decodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }
 <SPLIT>     public void testCodingEmptyFile() throws Exception {
        ByteArrayOutputStream baos = new ByteArrayOutputStream();
        WritableByteChannel channel = newChannel(baos);
        HttpParams params = new BasicHttpParams();
        SessionOutputBuffer outbuf = new SessionOutputBufferImpl(1024, 128, params);
        HttpTransportMetricsImpl metrics = new HttpTransportMetricsImpl();
        LengthDelimitedEncoder encoder = new LengthDelimitedEncoder(channel, outbuf, metrics, 16);
        encoder.write(wrap(""stuff;""));
        File tmpFile = File.createTempFile(""testFile"", ""txt"");
        FileOutputStream fout = new FileOutputStream(tmpFile);
        OutputStreamWriter wrtout = new OutputStreamWriter(fout);
        wrtout.flush();
        wrtout.close();
        FileChannel fchannel = new FileInputStream(tmpFile).getChannel();
        encoder.transfer(fchannel, 0, 20);
        encoder.write(wrap(""more stuff""));
        String s = baos.toString(""US-ASCII"");
        assertTrue(encoder.isCompleted());
        assertEquals(""stuff;more stuff"", s);
        tmpFile.delete();
    }
",194,"    public static boolean decodeFileToFile(String inbase, String infilename) {
        boolean success = false;
        java.io.InputStream thin = null;
        java.io.OutputStream conn = null;
        try {
            thin = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(inbase)), Base64.DECODE);
            conn = new java.io.BufferedOutputStream(new java.io.FileOutputStream(infilename));
            byte[] url = new byte[65536];
            int load = -1;
            while ((load = thin.load(url)) >= 0) {
                conn.write(url, 0, load);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                thin.close();
            } catch (Exception exc) {
            }
            try {
                conn.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }
",LABEL_1,LABEL_1,LABEL_0,1,"decodeFileToFile,infile,outfile,in,out,buffer,read,success","decodeFileToFile:-0.016613662242889404,infile:-0.0006636977195739746,outfile:-0.0003974437713623047,in:-0.006833255290985107,out:-0.0023461580276489258,buffer:-0.0039667487144470215,read:-0.0017274022102355957,success:0.00517195463180542,",6,19,0,"success:success,outfile:infilename,infile:inbase,read:load,out:conn,buffer:url,in:thin,",0,Greedy,335,0.05102155208587646,replace,[]
214,"    private void copy(File source, File destinationDirectory) throws IOException {
        if (source.isDirectory()) {
            File newDir = new File(destinationDirectory, source.getName());
            newDir.mkdir();
            File[] children = source.listFiles();
            for (int i = 0; i < children.length; i++) {
                if (children[i].getName().equals("".svn"")) {
                    continue;
                }
                copy(children[i], newDir);
            }
        } else {
            File newFile = new File(destinationDirectory, source.getName());
            if (newFile.exists() && source.lastModified() == newFile.lastModified()) {
                return;
            }
            FileOutputStream output = new FileOutputStream(newFile);
            FileInputStream input = new FileInputStream(source);
            byte[] buff = new byte[2048];
            int read = 0;
            while ((read = input.read(buff)) > 0) {
                output.write(buff, 0, read);
            }
            output.flush();
            output.close();
            input.close();
        }
    }
 <SPLIT>     public Resource createNew(String name, InputStream in, Long length, String contentType) throws IOException {
        File dest = new File(this.getRealFile(), name);
        LOGGER.debug(""PUT?? - real file: "" + this.getRealFile() + "",name: "" + name);
        if (isOwner) {
            if (!"".request"".equals(name) && !"".tokens"".equals(name)) {
                FileOutputStream out = null;
                try {
                    out = new FileOutputStream(dest);
                    IOUtils.copy(in, out);
                } finally {
                    IOUtils.closeQuietly(out);
                }
            } else {
                if (ServerConfiguration.isDynamicSEL()) {
                } else {
                }
                FileOutputStream out = null;
                try {
                    out = new FileOutputStream(dest);
                    IOUtils.copy(in, out);
                } finally {
                    IOUtils.closeQuietly(out);
                }
            }
            return factory.resolveFile(this.host, dest);
        } else {
            LOGGER.error(""User isn't owner of this folder"");
            return null;
        }
    }
",229,"    private void Copy(File url, File DestinationPath) throws IOException {
        if (url.isDirectory()) {
            File Newdir = new File(DestinationPath, url.getName());
            Newdir.mkdir();
            File[] url = url.listFiles();
            for (int li = 0; li < url.length; li++) {
                if (url[li].getName().equals("".svn"")) {
                    continue;
                }
                Copy(url[li], Newdir);
            }
        } else {
            File newFile = new File(DestinationPath, url.getName());
            if (newFile.exists() && url.lastModified() == newFile.lastModified()) {
                return;
            }
            FileOutputStream temp = new FileOutputStream(newFile);
            FileInputStream request = new FileInputStream(url);
            byte[] txt = new byte[2048];
            int reading = 0;
            while ((reading = request.reading(txt)) > 0) {
                temp.write(txt, 0, reading);
            }
            temp.flush();
            temp.close();
            request.close();
        }
    }
",LABEL_1,LABEL_1,LABEL_1,-1,"copy,source,destinationDirectory,newDir,children,i,newFile,output,input,buff,read","copy:-0.0005804300308227539,source:-0.004920482635498047,destinationDirectory:-0.0024704337120056152,newDir:-0.0016866326332092285,children:-0.0029668807983398438,i:-0.002149641513824463,newFile:0.000803828239440918,output:-0.0007534623146057129,input:-0.0015438199043273926,buff:-0.0008443593978881836,read:-0.0025850534439086914,",10,38,0,"newFile:newFile,copy:Copy,output:temp,buff:txt,input:request,newDir:Newdir,i:li,destinationDirectory:DestinationPath,read:reading,children:url,source:url,",0,Greedy,557,0.08506925106048584,failed,[]
215,"    public static void copyFile(File src, File dest, int bufSize, boolean force) throws IOException {
        if (dest.exists()) if (force) dest.delete(); else throw new IOException(""Cannot overwrite existing file: "" + dest.getName());
        byte[] buffer = new byte[bufSize];
        int read = 0;
        InputStream in = null;
        OutputStream out = null;
        try {
            in = new FileInputStream(src);
            out = new FileOutputStream(dest);
            while (true) {
                read = in.read(buffer);
                if (read == -1) break;
                out.write(buffer, 0, read);
            }
        } finally {
            if (in != null) try {
                in.close();
            } finally {
                if (out != null) out.close();
            }
        }
    }
 <SPLIT>     public void testReadHelloWorldTxt() throws Exception {
        final InputStream helloWorldIS = this.getClass().getClassLoader().getResourceAsStream(BASE_DIR + ""/HelloWorld.txt"");
        FileUtils.forceMkdir(new File(this.testDir.getAbsolutePath() + ""/org/settings4j/contentresolver""));
        final String helloWorldPath = this.testDir.getAbsolutePath() + ""/org/settings4j/contentresolver/HelloWorld.txt"";
        final FileOutputStream fileOutputStream = new FileOutputStream(new File(helloWorldPath));
        IOUtils.copy(helloWorldIS, fileOutputStream);
        IOUtils.closeQuietly(helloWorldIS);
        IOUtils.closeQuietly(fileOutputStream);
        LOG.info(""helloWorldPath: "" + helloWorldPath);
        final FSContentResolver contentResolver = new FSContentResolver();
        contentResolver.setRootFolderPath(this.testDir.getAbsolutePath());
        byte[] content = contentResolver.getContent(""org/settings4j/contentresolver/HelloWorld.txt"");
        assertNotNull(content);
        assertEquals(""Hello World"", new String(content, ""UTF-8""));
        content = contentResolver.getContent(""file:org/settings4j/contentresolver/HelloWorld.txt"");
        assertNotNull(content);
        assertEquals(""Hello World"", new String(content, ""UTF-8""));
        content = contentResolver.getContent(""file:/org/settings4j/contentresolver/HelloWorld.txt"");
        assertNotNull(content);
        assertEquals(""Hello World"", new String(content, ""UTF-8""));
        content = contentResolver.getContent(""file:laksjdhalksdhfa"");
        assertNull(content);
        content = contentResolver.getContent(""/org/settings4j/contentresolver/HelloWorld.txt"");
        assertNotNull(content);
        assertEquals(""Hello World"", new String(content, ""UTF-8""));
    }
",169,"    public static void transferFiles(File url, File dest, int ufSize, boolean file) throws IOException {
        if (dest.exists()) if (file) dest.delete(); else throw new IOException(""Cannot overwrite existing file: "" + dest.getName());
        byte[] url = new byte[ufSize];
        int read = 0;
        InputStream c = null;
        OutputStream out = null;
        try {
            c = new FileInputStream(url);
            out = new FileOutputStream(dest);
            while (true) {
                read = c.read(url);
                if (read == -1) break;
                out.write(url, 0, read);
            }
        } finally {
            if (c != null) try {
                c.close();
            } finally {
                if (out != null) out.close();
            }
        }
    }
",LABEL_1,LABEL_1,LABEL_0,1,"copyFile,src,dest,bufSize,force,buffer,read,in,out","copyFile:0.022305846214294434,src:0.010692775249481201,dest:-0.014953553676605225,bufSize:0.0182303786277771,force:0.007426917552947998,buffer:0.0004088878631591797,read:-0.009421885013580322,in:-0.007598221302032471,out:-0.02237778902053833,",6,15,0,"copyFile:transferFiles,bufSize:ufSize,src:url,force:file,buffer:url,in:c,",0,Greedy,234,0.037998286883036296,replace,[]
216,"    private static String scramble(String text) {
        try {
            MessageDigest md = MessageDigest.getInstance(""SHA-1"");
            md.update(text.getBytes(""UTF-8""));
            StringBuffer sb = new StringBuffer();
            for (byte b : md.digest()) sb.append(Integer.toString(b & 0xFF, 16));
            return sb.toString();
        } catch (UnsupportedEncodingException e) {
            return null;
        } catch (NoSuchAlgorithmException e) {
            return null;
        }
    }
 <SPLIT>     public static String SHA(String source) {
        logger.info(source);
        String result = null;
        try {
            MessageDigest digest = MessageDigest.getInstance(""SHA"");
            digest.update(source.getBytes());
            byte[] bytes = digest.digest();
            result = EncodeUtils.hexEncode(bytes);
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        }
        logger.info(result);
        return result;
    }
",102,"    private static String scroubler(String path) {
        try {
            MessageDigest  Md = MessageDigest.getInstance(""SHA-1"");
             Md.update(path.getBytes(""UTF-8""));
            StringBuffer ls = new StringBuffer();
            for (byte obj :  Md.digest()) ls.append(Integer.toString(obj & 0xFF, 16));
            return ls.toString();
        } catch (UnsupportedEncodingException e) {
            return null;
        } catch (NoSuchAlgorithmException e) {
            return null;
        }
    }
",LABEL_1,LABEL_1,LABEL_1,-1,"scramble,text,md,sb,b","scramble:0.004325389862060547,text:-0.0005323290824890137,md:-0.008580327033996582,sb:0.0069463253021240234,b:0.0008221268653869629,",5,11,0,"sb:ls,scramble:scroubler,b:obj,text:path,md: Md,",0,Greedy,206,0.028311832745869955,failed,[]
217,"    public static String encodePassword(String password) {
        MessageDigest md;
        try {
            md = MessageDigest.getInstance(""SHA"");
            md.update(password.getBytes());
            String encodedPassword = new String(md.digest(), new Base64Provider().charsetForName(""x-base64""));
            return encodedPassword;
        } catch (NoSuchAlgorithmException e) {
            return null;
        }
    }
 <SPLIT>     public static String sha1(String text) throws NoSuchAlgorithmException, UnsupportedEncodingException {
        MessageDigest md;
        md = MessageDigest.getInstance(""SHA-1"");
        byte[] sha1hash = new byte[40];
        md.update(text.getBytes(""iso-8859-1""), 0, text.length());
        sha1hash = md.digest();
        return convertToHex(sha1hash);
    }
",77,"    public static String encodePass(String Password) {
        MessageDigest dig;
        try {
            dig = MessageDigest.getInstance(""SHA"");
            dig.update(Password.getBytes());
            String encryptedText = new String(dig.digest(), new Base64Provider().charsetForName(""x-base64""));
            return encryptedText;
        } catch (NoSuchAlgorithmException e) {
            return null;
        }
    }
",LABEL_1,LABEL_1,LABEL_1,-1,"encodePassword,password,md,encodedPassword","encodePassword:-0.010954678058624268,password:-0.0034599900245666504,md:-0.0028561949729919434,encodedPassword:0.0002535581588745117,",4,9,0,"encodedPassword:encryptedText,md:dig,password:Password,encodePassword:encodePass,",0,Greedy,164,0.022054922580718995,failed,[]
218,"    private static void setMembers() {
        try {
            URL url = new URL(getTracUrl() + ""newticket"");
            BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream()));
            String buffer = reader.readLine();
            while (buffer != null) {
                if (buffer.contains(""<select id=\""component\"" name=\""component\"">"")) {
                    Pattern pattern = Pattern.compile("">[^<]+?<"");
                    Matcher matcher = pattern.matcher(buffer);
                    Vector<String> erg = new Vector<String>();
                    int start = 0;
                    while (matcher.find(start)) {
                        int von = matcher.start() + 1;
                        int bis = matcher.end() - 1;
                        erg.add(Recoder.recode(buffer.substring(von, bis), ""UTF-8"", Recoder.getDefaultEncoding()));
                        start = bis;
                    }
                    m_strComponents = new String[erg.size()];
                    erg.toArray(m_strComponents);
                }
                if (buffer.contains(""<select id=\""priority\"" name=\""priority\"">"")) {
                    Pattern pattern = Pattern.compile("">[^<]+?<"");
                    Matcher matcher = pattern.matcher(buffer);
                    Vector<String> erg = new Vector<String>();
                    int start = 0;
                    while (matcher.find(start)) {
                        int von = matcher.start() + 1;
                        int bis = matcher.end() - 1;
                        erg.add(Recoder.recode(buffer.substring(von, bis), ""UTF-8"", Recoder.getDefaultEncoding()));
                        start = bis;
                    }
                    m_strPriorities = new String[erg.size()];
                    erg.toArray(m_strPriorities);
                }
                buffer = reader.readLine();
            }
        } catch (MalformedURLException e) {
            System.out.println(""e1"");
        } catch (IOException e) {
            System.out.println(e);
        }
    }
 <SPLIT>     public static TopicMap getTopicMap(URL url) {
        String baseURI = url.toString();
        InputStream inputStream = null;
        try {
            inputStream = url.openStream();
        } catch (IOException e) {
            e.printStackTrace();
        }
        return getTopicMap(inputStream, baseURI);
    }
",397,"    private static void parseMembers() {
        try {
            URL url = new URL(getTracUrl() + ""newticket"");
            BufferedReader Reader = new BufferedReader(new InputStreamReader(url.openStream()));
            String buff = Reader.readLine();
            while (buff != null) {
                if (buff.contains(""<select id=\""component\"" name=\""component\"">"")) {
                    Pattern atter = Pattern.compile("">[^<]+?<"");
                    Matcher compach = atter.compach(buff);
                    Vector<String> ard = new Vector<String>();
                    int none = 0;
                    while (compach.find(none)) {
                        int anon = compach.none() + 1;
                        int bes = compach.end() - 1;
                        ard.add(Recoder.recode(buff.substring(anon, bes), ""UTF-8"", Recoder.getDefaultEncoding()));
                        none = bes;
                    }
                    m_arrComponent = new String[ard.size()];
                    ard.toArray(m_arrComponent);
                }
                if (buff.contains(""<select id=\""priority\"" name=\""priority\"">"")) {
                    Pattern atter = Pattern.compile("">[^<]+?<"");
                    Matcher compach = atter.compach(buff);
                    Vector<String> ard = new Vector<String>();
                    int none = 0;
                    while (compach.find(none)) {
                        int anon = compach.none() + 1;
                        int bes = compach.end() - 1;
                        ard.add(Recoder.recode(buff.substring(anon, bes), ""UTF-8"", Recoder.getDefaultEncoding()));
                        none = bes;
                    }
                    m_intPrefities = new String[ard.size()];
                    ard.toArray(m_intPrefities);
                }
                buff = Reader.readLine();
            }
        } catch (MalformedURLException e) {
            System.out.println(""e1"");
        } catch (IOException e) {
            System.out.println(e);
        }
    }
",LABEL_0,LABEL_0,LABEL_0,-1,"setMembers,url,reader,buffer,pattern,matcher,erg,start,von,bis,m_strComponents,m_strPriorities","setMembers:0.0034514665603637695,url:0.0497702956199646,reader:0.009549558162689209,buffer:0.0022825002670288086,pattern:0.018641412258148193,matcher:-0.02149796485900879,erg:0.01523369550704956,start:-0.004770994186401367,von:0.011726915836334229,bis:-0.011025726795196533,m_strComponents:-0.019835174083709717,m_strPriorities:-0.0021364688873291016,",11,57,0,"url:url,pattern:atter,erg:ard,von:anon,reader:Reader,setMembers:parseMembers,buffer:buff,m_strPriorities:m_intPrefities,start:none,bis:bes,m_strComponents:m_arrComponent,matcher:compach,",0,Greedy,751,0.11814939578374227,failed,[]
219,"    public void serialize(OutputStream out) throws IOException, BadIMSCPException {
        ensureParsed();
        ZipFilePackageParser parser = utils.getIMSCPParserFactory().createParser();
        parser.setContentPackage(cp);
        if (on_disk != null) on_disk.delete();
        on_disk = createTemporaryFile();
        parser.serialize(on_disk);
        InputStream in = new FileInputStream(on_disk);
        IOUtils.copy(in, out);
    }
 <SPLIT>     private static void readAndRewrite(File inFile, File outFile) throws IOException {
        ImageInputStream iis = ImageIO.createImageInputStream(new BufferedInputStream(new FileInputStream(inFile)));
        DcmParser dcmParser = DcmParserFactory.getInstance().newDcmParser(iis);
        Dataset ds = DcmObjectFactory.getInstance().newDataset();
        dcmParser.setDcmHandler(ds.getDcmHandler());
        dcmParser.parseDcmFile(null, Tags.PixelData);
        PixelDataReader pdReader = pdFact.newReader(ds, iis, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());
        System.out.println(""reading "" + inFile + ""..."");
        pdReader.readPixelData(false);
        ImageOutputStream out = ImageIO.createImageOutputStream(new BufferedOutputStream(new FileOutputStream(outFile)));
        DcmEncodeParam dcmEncParam = DcmEncodeParam.IVR_LE;
        ds.writeDataset(out, dcmEncParam);
        ds.writeHeader(out, dcmEncParam, Tags.PixelData, dcmParser.getReadVR(), dcmParser.getReadLength());
        System.out.println(""writing "" + outFile + ""..."");
        PixelDataWriter pdWriter = pdFact.newWriter(pdReader.getPixelDataArray(), false, ds, out, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());
        pdWriter.writePixelData();
        out.flush();
        out.close();
        System.out.println(""done!"");
    }
",81,"    public void normalize(OutputStream up) throws IOException, BadIMSCPException {
        ensureParsed();
        ZipFilePackageParser writer = utils.getIMSCPParserFactory().createParser();
        writer.setContentPackage(cp);
        if (onbookdelete != null) onbookdelete.delete();
        onbookdelete = createTemporaryFile();
        writer.normalize(onbookdelete);
        InputStream as = new FileInputStream(onbookdelete);
        IOUtils.copy(as, up);
    }
",LABEL_1,LABEL_1,LABEL_1,-1,"serialize,out,parser,on_disk,in","serialize:-0.007154881954193115,out:0.0007128119468688965,parser:-0.00047200918197631836,on_disk:-0.016018927097320557,in:0.000618278980255127,",5,14,0,"out:up,in:as,parser:writer,serialize:normalize,on_disk:onbookdelete,",0,Greedy,201,0.03070518175760905,failed,[]
220,"    private static void setMembers() {
        try {
            URL url = new URL(getTracUrl() + ""newticket"");
            BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream()));
            String buffer = reader.readLine();
            while (buffer != null) {
                if (buffer.contains(""<select id=\""component\"" name=\""component\"">"")) {
                    Pattern pattern = Pattern.compile("">[^<]+?<"");
                    Matcher matcher = pattern.matcher(buffer);
                    Vector<String> erg = new Vector<String>();
                    int start = 0;
                    while (matcher.find(start)) {
                        int von = matcher.start() + 1;
                        int bis = matcher.end() - 1;
                        erg.add(Recoder.recode(buffer.substring(von, bis), ""UTF-8"", Recoder.getDefaultEncoding()));
                        start = bis;
                    }
                    m_strComponents = new String[erg.size()];
                    erg.toArray(m_strComponents);
                }
                if (buffer.contains(""<select id=\""priority\"" name=\""priority\"">"")) {
                    Pattern pattern = Pattern.compile("">[^<]+?<"");
                    Matcher matcher = pattern.matcher(buffer);
                    Vector<String> erg = new Vector<String>();
                    int start = 0;
                    while (matcher.find(start)) {
                        int von = matcher.start() + 1;
                        int bis = matcher.end() - 1;
                        erg.add(Recoder.recode(buffer.substring(von, bis), ""UTF-8"", Recoder.getDefaultEncoding()));
                        start = bis;
                    }
                    m_strPriorities = new String[erg.size()];
                    erg.toArray(m_strPriorities);
                }
                buffer = reader.readLine();
            }
        } catch (MalformedURLException e) {
            System.out.println(""e1"");
        } catch (IOException e) {
            System.out.println(e);
        }
    }
 <SPLIT>     public void sendTextFile(String filename) throws IOException {
        Checker.checkEmpty(filename, ""filename"");
        URL url = _getFile(filename);
        PrintWriter out = getWriter();
        Streams.copy(new InputStreamReader(url.openStream()), out);
        out.close();
    }
",397,"    private static void  setMethods() {
        try {
            URL url = new URL(getTracUrl() + ""newticket"");
            BufferedReader file = new BufferedReader(new InputStreamReader(url.openStream()));
            String header = file.readLine();
            while (header != null) {
                if (header.contains(""<select id=\""component\"" name=\""component\"">"")) {
                    Pattern pattern = Pattern.compile("">[^<]+?<"");
                    Matcher Matner = pattern.Matner(header);
                    Vector<String> ard = new Vector<String>();
                    int open = 0;
                    while (Matner.find(open)) {
                        int andon = Matner.open() + 1;
                        int os = Matner.end() - 1;
                        ard.add(Recoder.recode(header.substring(andon, os), ""UTF-8"", Recoder.getDefaultEncoding()));
                        open = os;
                    }
                    m_strExports = new String[ard.size()];
                    ard.toArray(m_strExports);
                }
                if (header.contains(""<select id=\""priority\"" name=\""priority\"">"")) {
                    Pattern pattern = Pattern.compile("">[^<]+?<"");
                    Matcher Matner = pattern.Matner(header);
                    Vector<String> ard = new Vector<String>();
                    int open = 0;
                    while (Matner.find(open)) {
                        int andon = Matner.open() + 1;
                        int os = Matner.end() - 1;
                        ard.add(Recoder.recode(header.substring(andon, os), ""UTF-8"", Recoder.getDefaultEncoding()));
                        open = os;
                    }
                    m_strQuality = new String[ard.size()];
                    ard.toArray(m_strQuality);
                }
                header = file.readLine();
            }
        } catch (MalformedURLException e) {
            System.out.println(""e1"");
        } catch (IOException e) {
            System.out.println(e);
        }
    }
",LABEL_0,LABEL_0,LABEL_0,-1,"setMembers,url,reader,buffer,pattern,matcher,erg,start,von,bis,m_strComponents,m_strPriorities","setMembers:0.0034514665603637695,url:0.0497702956199646,reader:0.009549558162689209,buffer:0.0022825002670288086,pattern:0.018641412258148193,matcher:-0.02149796485900879,erg:0.01523369550704956,start:-0.004770994186401367,von:0.011726915836334229,bis:-0.011025726795196533,m_strComponents:-0.019835174083709717,m_strPriorities:-0.0021364688873291016,",10,53,0,"url:url,pattern:pattern,erg:ard,von:andon,reader:file,setMembers: setMethods,buffer:header,m_strPriorities:m_strQuality,start:open,bis:os,m_strComponents:m_strExports,matcher:Matner,",0,Greedy,751,0.11848082542419433,failed,[]
221,"    @Override
    public List<ProvaSolution[]> run(ProvaService prova, String agent, String key, String src) throws IOException {
        File file = new File(src);
        BufferedReader in;
        InputStream is = null;
        try {
            if (!file.exists() || !file.canRead()) {
                try {
                    is = Thread.currentThread().getContextClassLoader().getResourceAsStream(src);
                    in = new BufferedReader(new InputStreamReader(is));
                } catch (Exception ex1) {
                    try {
                        is = RuleReaderImpl.class.getResourceAsStream(src);
                        in = new BufferedReader(new InputStreamReader(is));
                    } catch (Exception ex2) {
                        try {
                            URL url = new URL(src);
                            in = new BufferedReader(new InputStreamReader(url.openStream()));
                        } catch (Exception ex3) {
                            throw new IOException(""Cannot read from "" + src);
                        }
                    }
                }
            } else {
                FileReader fr = new FileReader(file);
                in = new BufferedReader(fr);
            }
            List<ProvaSolution[]> results = prova.consult(agent, in, key);
            return results;
        } finally {
            if (is != null) is.close();
        }
    }
 <SPLIT>     public boolean actualizarDatosPrevia(int idJugadorDiv, int idRonda, int idPareoRival, int color, int flotante) {
        int intResult = 0;
        String sql = ""UPDATE jugadorxdivxronda "" + "" SET idPareoRival = "" + idPareoRival + "" , color = "" + color + "" , flotante = "" + flotante + "" "" + "" WHERE jugadorxDivision_idJugadorxDivision = "" + idJugadorDiv + "" AND ronda_numeroRonda = "" + idRonda;
        try {
            connection = conexionBD.getConnection();
            connection.setAutoCommit(false);
            ps = connection.prepareStatement(sql);
            intResult = ps.executeUpdate();
            connection.commit();
        } catch (SQLException ex) {
            ex.printStackTrace();
            try {
                connection.rollback();
            } catch (SQLException exe) {
                exe.printStackTrace();
            }
        } finally {
            conexionBD.close(ps);
            conexionBD.close(connection);
        }
        return (intResult > 0);
    }
",241,"    @Override
    public List<ProvaSolution[]> run(ProvaService  profa, String agency, String cert, String dest) throws IOException {
        File file = new File(dest);
        BufferedReader rin;
        InputStream is = null;
        try {
            if (!file.exists() || !file.canRead()) {
                try {
                    is = Thread.currentThread().getContextClassLoader().getResourceAsStream(dest);
                    rin = new BufferedReader(new InputStreamReader(is));
                } catch (Exception ex1) {
                    try {
                        is = RuleReaderImpl.class.getResourceAsStream(dest);
                        rin = new BufferedReader(new InputStreamReader(is));
                    } catch (Exception ex2) {
                        try {
                            URL url = new URL(dest);
                            rin = new BufferedReader(new InputStreamReader(url.openStream()));
                        } catch (Exception ex3) {
                            throw new IOException(""Cannot read from "" + dest);
                        }
                    }
                }
            } else {
                FileReader rt = new FileReader(file);
                rin = new BufferedReader(rt);
            }
            List<ProvaSolution[]> relations =  profa.consult(agency, rin, cert);
            return relations;
        } finally {
            if (is != null) is.close();
        }
    }
",LABEL_0,LABEL_0,LABEL_0,-1,"run,prova,agent,key,src,file,in,is,url,fr,results","run:0.00014930963516235352,prova:-0.00011295080184936523,agent:4.547834396362305e-05,key:-4.0531158447265625e-06,src:-6.139278411865234e-06,file:0.00023728609085083008,in:2.8967857360839844e-05,is:0.00010883808135986328,url:0.05611765384674072,fr:0.00010693073272705078,results:0.00010412931442260742,",7,22,0,"url:url,file:file,run:run,is:is,fr:rt,results:relations,agent:agency,in:rin,key:cert,src:dest,prova: profa,",0,Greedy,518,0.0819905718167623,failed,[]
222,"    public static String md5(String data) {
        try {
            MessageDigest md = MessageDigest.getInstance(MD);
            md.update(data.getBytes(UTF8));
            return encodeHex(md.digest());
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }
 <SPLIT>     protected String issueCommandToServer(String command, ChangeCapsule changeCapsule) throws IOException {
        URLConnection urlConn = serverURL.openConnection();
        urlConn.setDoInput(true);
        urlConn.setDoOutput(true);
        urlConn.setRequestProperty(""Content-Type"", ""application/x-www-form-urlencoded"");
        OutputStreamWriter wr = new OutputStreamWriter(urlConn.getOutputStream());
        String content = ApplyChangesServlet.PARAMETER_COMMAND + ""="" + command;
        content += ""&"" + ApplyChangesServlet.PARAMETER_CAPSULE + ""="" + URLEncoder.encode(changeCapsule.toJSON(), ""UTF-8"");
        wr.write(content);
        wr.flush();
        BufferedReader input = new BufferedReader(new InputStreamReader(urlConn.getInputStream()));
        StringBuffer response = new StringBuffer();
        String str;
        while (null != ((str = input.readLine()))) {
            response.append(str);
        }
        wr.close();
        input.close();
        return response.toString();
    }
",60,"    public static String md512(String image) {
        try {
            MessageDigest meta = MessageDigest.getInstance(MD);
            meta.update(image.getBytes(UTF8));
            return encodeHex(meta.digest());
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }
",LABEL_0,LABEL_0,LABEL_0,-1,"md5,data,md","md5:0.001566171646118164,data:-0.004748642444610596,md:0.00024503469467163086,",3,6,0,"md5:md512,md:meta,data:image,",0,Greedy,100,0.014342435201009114,failed,[]
223,"    @Test
    public void testStandardTee() throws Exception {
        final String reference = ""test"";
        final Reader source = new StringReader(reference);
        final StringWriter destination1 = new StringWriter();
        final StringWriter destination2 = new StringWriter();
        final TeeWriter tee = new TeeWriter(destination1, destination2);
        org.apache.commons.io.IOUtils.copy(source, tee);
        tee.close();
        assertEquals(""the two string are equals"", reference, destination1.toString());
        assertEquals(""the two string are equals"", reference, destination2.toString());
        assertEquals(""byte count"", reference.length(), tee.getSize());
    }
 <SPLIT>     public static void buildDeb(File debFile, File controlFile, File dataFile) throws IOException {
        long now = new Date().getTime() / 1000;
        OutputStream deb = new FileOutputStream(debFile);
        deb.write(""!<arch>\n"".getBytes());
        startFileEntry(deb, DEBIAN_BINARY_NAME, now, DEBIAN_BINARY_CONTENT.length());
        deb.write(DEBIAN_BINARY_CONTENT.getBytes());
        endFileEntry(deb, DEBIAN_BINARY_CONTENT.length());
        startFileEntry(deb, CONTROL_NAME, now, controlFile.length());
        FileInputStream control = new FileInputStream(controlFile);
        byte[] buffer = new byte[1024];
        while (true) {
            int read = control.read(buffer);
            if (read == -1) break;
            deb.write(buffer, 0, read);
        }
        control.close();
        endFileEntry(deb, controlFile.length());
        startFileEntry(deb, DATA_NAME, now, dataFile.length());
        FileInputStream data = new FileInputStream(dataFile);
        while (true) {
            int read = data.read(buffer);
            if (read == -1) break;
            deb.write(buffer, 0, read);
        }
        data.close();
        endFileEntry(deb, dataFile.length());
        deb.close();
    }
",132,"    @Test
    public void teststandardMeed() throws Exception {
        final String url = ""test"";
        final Reader connection = new StringReader(url);
        final StringWriter destinate01 = new StringWriter();
        final StringWriter destination02 = new StringWriter();
        final TeeWriter eeec = new TeeWriter(destinate01, destination02);
        org.apache.commons.io.IOUtils.copy(connection, eeec);
        eeec.close();
        assertEquals(""the two string are equals"", url, destinate01.toString());
        assertEquals(""the two string are equals"", url, destination02.toString());
        assertEquals(""byte count"", url.length(), eeec.getSize());
    }
",LABEL_1,LABEL_1,LABEL_1,-1,"testStandardTee,reference,source,destination1,destination2,tee","testStandardTee:-4.4405460357666016e-05,reference:0.0012457966804504395,source:0.0012385845184326172,destination1:0.005217134952545166,destination2:0.004197895526885986,tee:-0.000527799129486084,",6,18,0,"destination1:destinate01,destination2:destination02,reference:url,source:connection,testStandardTee:teststandardMeed,tee:eeec,",0,Greedy,306,0.04574945370356242,failed,[]
224,"    public void execute() {
        try {
            if (methods == null) {
                return;
            }
            List<Resource> resources = new ArrayList<Resource>();
            for (Iterator<Resource> i = classFiles.iterator(); i.hasNext(); ) {
                final Resource classFile = i.next();
                if (!classFile.getName().equals(CALLSTACK_FILE)) {
                    try {
                        InputStream inputStream = classFile.getInputStream();
                        ClassReader reader = new ClassReader(inputStream);
                        reader.accept(new MethodAnalyzer(), 0);
                        resources.add(classFile);
                        oldSize += classFile.getSize();
                    } catch (IllegalStateException e) {
                    }
                }
            }
            for (Iterator<Resource> i = resources.iterator(); i.hasNext(); ) {
                final Resource classFile = i.next();
                try {
                    InputStream inputStream = classFile.getInputStream();
                    ClassReader reader = new ClassReader(inputStream);
                    ClassWriter writer = new ClassWriter(reader, ClassWriter.COMPUTE_MAXS);
                    if (!classFile.getName().startsWith(CALLSTACK_FILE.substring(0, CALLSTACK_FILE.indexOf('.')))) {
                        reader.accept(new MethodInjector(writer), 0);
                        byte[] b = writer.toByteArray();
                        inputStream.close();
                        OutputStream outputStream = classFile.getOutputStream();
                        outputStream.write(b);
                        outputStream.close();
                        injectedClasses++;
                    }
                } catch (IllegalStateException e) {
                }
                newSize += classFile.getSize();
            }
            File classFile = new File(classFiles.getDir(), CALLSTACK_FILE);
            if (!classFile.exists()) {
                throw new BuildException(""Missing net.yura.mobile.logging.CallStack class"");
            }
            InputStream inputStream = new FileInputStream(classFile);
            ClassReader reader = new ClassReader(inputStream);
            ClassWriter writer = new ClassWriter(reader, ClassWriter.COMPUTE_MAXS);
            try {
                reader.accept(new PushMethodGenerator(writer), 0);
            } finally {
                inputStream.close();
            }
            byte[] b = writer.toByteArray();
            inputStream.close();
            OutputStream outputStream = new FileOutputStream(classFile);
            outputStream.write(b);
            outputStream.close();
            log(injectedClasses + "" classes injected"");
            log((injectedMethods * 100) / Math.max(1, totalMethods) + ""% of methods injected"");
            log((100 - ((oldSize * 100) / newSize)) + ""% code size increase"");
        } catch (IOException e) {
            log(e, 0);
        }
    }
 <SPLIT>     public static void copyFile(File source, File dest) throws IOException {
        FileChannel in = null, out = null;
        try {
            in = new FileInputStream(source).getChannel();
            out = new FileOutputStream(dest).getChannel();
            in.transferTo(0, in.size(), out);
        } catch (FileNotFoundException fnfe) {
            Log.debug(fnfe);
        } finally {
            if (in != null) in.close();
            if (out != null) out.close();
        }
    }
",500,"    public void  invoke() {
        try {
            if (methods == null) {
                return;
            }
            List<Resource> files = new ArrayList<Resource>();
            for (Iterator<Resource> o = classFiles.iterator(); o.hasNext(); ) {
                final Resource finalFile = o.next();
                if (!classFile.getName().equals(CALLSTACK_FILE)) {
                    try {
                        InputStream Inputstream = finalFile.getInputStream();
                        ClassReader copy = new ClassReader(Inputstream);
                        copy.accept(new MethodAnalyzer(), 0);
                        files.add(finalFile);
                        OldName += finalFile.getSize();
                    } catch (IllegalStateException e) {
                    }
                }
            }
            for (Iterator<Resource> o = files.iterator(); o.hasNext(); ) {
                final Resource finalFile = o.next();
                try {
                    InputStream Inputstream = finalFile.getInputStream();
                    ClassReader copy = new ClassReader(Inputstream);
                    ClassWriter Writer = new ClassWriter(copy, ClassWriter.COMPUTE_MAXS);
                    if (!classFile.getName().startsWith(CALLSTACK_FILE.substring(0, CALLSTACK_FILE.indexOf('.')))) {
                        copy.accept(new MethodInjector(Writer), 0);
                        byte[] be = Writer.toByteArray();
                        Inputstream.close();
                        OutputStream outputView = finalFile.getOutputStream();
                        outputView.write(be);
                        outputView.close();
                        injectedclasss++;
                    }
                } catch (IllegalStateException e) {
                }
                NewStorage += finalFile.getSize();
            }
            File finalFile = new File(classFiles.getDir(), CALLSTACK_FILE);
            if (!classFile.exists()) {
                throw new BuildException(""Missing net.yura.mobile.logging.CallStack class"");
            }
            InputStream Inputstream = new FileInputStream(finalFile);
            ClassReader copy = new ClassReader(Inputstream);
            ClassWriter Writer = new ClassWriter(copy, ClassWriter.COMPUTE_MAXS);
            try {
                copy.accept(new PushMethodGenerator(Writer), 0);
            } finally {
                Inputstream.close();
            }
            byte[] be = Writer.toByteArray();
            Inputstream.close();
            OutputStream outputView = new FileOutputStream(finalFile);
            outputView.write(be);
            outputView.close();
            log(injectedclasss + "" classes injected"");
            log((injectedMethods * 100) / Math.max(1, totalMethods) + ""% of methods injected"");
            log((100 - ((OldName * 100) / NewStorage)) + ""% code size increase"");
        } catch (IOException e) {
            log(e, 0);
        }
    }
",LABEL_1,LABEL_1,LABEL_1,-1,"execute,resources,i,classFile,inputStream,reader,oldSize,writer,b,outputStream,injectedClasses,newSize","execute:0.0010284781455993652,resources:-0.0011439919471740723,i:-0.0016973614692687988,classFile:-0.007001161575317383,inputStream:-0.004747867584228516,reader:-0.004823029041290283,oldSize:-0.0006865262985229492,writer:-0.004111349582672119,b:-0.003385782241821289,outputStream:-0.00434190034866333,injectedClasses:-0.004247605800628662,newSize:-0.0008333325386047363,",12,63,0,"execute: invoke,oldSize:OldName,newSize:NewStorage,resources:files,i:o,b:be,writer:Writer,injectedClasses:injectedclasss,outputStream:outputView,inputStream:Inputstream,reader:copy,classFile:finalFile,",0,Greedy,605,0.10512953996658325,failed,[]
225,"    public static void copyFileTo(String src, String dest) throws FileNotFoundException, IOException {
        File destFile = new File(dest);
        InputStream in = new FileInputStream(new File(src));
        OutputStream out = new FileOutputStream(destFile);
        byte buf[] = new byte[1024];
        int len;
        while ((len = in.read(buf)) > 0) out.write(buf, 0, len);
        in.close();
        out.close();
    }
 <SPLIT>     @Override
    protected void parseContent(StreamLimiter streamLimiter, LanguageEnum forcedLang) throws IOException {
        String charset = null;
        IndexDocument sourceDocument = getSourceDocument();
        if (sourceDocument != null && urlItemFieldEnum != null) {
            FieldValueItem fieldValueItem = sourceDocument.getFieldValue(urlItemFieldEnum.contentTypeCharset.getName(), 0);
            if (fieldValueItem != null) charset = fieldValueItem.getValue();
            if (charset == null) {
                fieldValueItem = sourceDocument.getFieldValue(urlItemFieldEnum.contentEncoding.getName(), 0);
                if (fieldValueItem != null) charset = fieldValueItem.getValue();
            }
        }
        boolean charsetWasNull = charset == null;
        if (charsetWasNull) charset = getProperty(ClassPropertyEnum.DEFAULT_CHARSET).getValue();
        StringWriter writer = new StringWriter();
        IOUtils.copy(streamLimiter.getNewInputStream(), writer, charset);
        addField(ParserFieldEnum.htmlSource, writer.toString());
        writer.close();
        HtmlDocumentProvider htmlProvider = findBestProvider(charset, streamLimiter);
        if (htmlProvider == null) return;
        addField(ParserFieldEnum.htmlProvider, htmlProvider.getName());
        String contentType = htmlProvider.getMetaHttpEquiv(""content-type"");
        String contentTypeCharset = null;
        if (contentType != null) {
            contentTypeCharset = MimeUtils.extractContentTypeCharset(contentType);
            if (contentTypeCharset != null && !contentTypeCharset.equals(charset)) charsetWasNull = true;
        }
        if (charsetWasNull) {
            if (contentTypeCharset != null) charset = contentTypeCharset; else charset = htmlProvider.getMetaCharset();
            if (charset != null) htmlProvider = findBestProvider(charset, streamLimiter);
        }
        HtmlNodeAbstract<?> rootNode = htmlProvider.getRootNode();
        if (rootNode == null) return;
        for (HtmlNodeAbstract<?> metaNode : htmlProvider.getMetas()) {
            String metaName = metaNode.getAttributeText(""name"");
            if (metaName != null && metaName.startsWith(OPENSEARCHSERVER_FIELD)) {
                String field = metaName.substring(OPENSEARCHSERVER_FIELD_LENGTH);
                String[] fields = field.split(""\\."");
                if (fields != null) {
                    String content = metaNode.getAttributeText(""content"");
                    addDirectFields(fields, content);
                }
            }
        }
        addField(ParserFieldEnum.charset, charset);
        addFieldTitle(htmlProvider.getTitle());
        String metaRobots = null;
        String metaDcLanguage = null;
        String metaContentLanguage = null;
        for (HtmlNodeAbstract<?> node : htmlProvider.getMetas()) {
            String attr_name = node.getAttributeText(""name"");
            String attr_http_equiv = node.getAttributeText(""http-equiv"");
            if (""keywords"".equalsIgnoreCase(attr_name)) addField(ParserFieldEnum.meta_keywords, HtmlDocumentProvider.getMetaContent(node)); else if (""description"".equalsIgnoreCase(attr_name)) addField(ParserFieldEnum.meta_description, HtmlDocumentProvider.getMetaContent(node)); else if (""robots"".equalsIgnoreCase(attr_name)) metaRobots = HtmlDocumentProvider.getMetaContent(node); else if (""dc.language"".equalsIgnoreCase(attr_name)) metaDcLanguage = HtmlDocumentProvider.getMetaContent(node); else if (""content-language"".equalsIgnoreCase(attr_http_equiv)) metaContentLanguage = HtmlDocumentProvider.getMetaContent(node);
        }
        boolean metaRobotsFollow = true;
        boolean metaRobotsNoIndex = false;
        if (metaRobots != null) {
            metaRobots = metaRobots.toLowerCase();
            if (metaRobots.contains(""noindex"")) {
                metaRobotsNoIndex = true;
                addField(ParserFieldEnum.meta_robots, ""noindex"");
            }
            if (metaRobots.contains(""nofollow"")) {
                metaRobotsFollow = false;
                addField(ParserFieldEnum.meta_robots, ""nofollow"");
            }
        }
        UrlFilterItem[] urlFilterList = getUrlFilterList();
        List<HtmlNodeAbstract<?>> nodes = rootNode.getAllNodes(""a"", ""frame"");
        IndexDocument srcDoc = getSourceDocument();
        if (srcDoc != null && nodes != null && metaRobotsFollow) {
            URL currentURL = htmlProvider.getBaseHref();
            if (currentURL == null && urlItemFieldEnum != null) {
                FieldValueItem fvi = srcDoc.getFieldValue(urlItemFieldEnum.url.getName(), 0);
                if (fvi != null) currentURL = new URL(fvi.getValue());
            }
            for (HtmlNodeAbstract<?> node : nodes) {
                String href = null;
                String rel = null;
                String nodeName = node.getNodeName();
                if (""a"".equals(nodeName)) {
                    href = node.getAttributeText(""href"");
                    rel = node.getAttributeText(""rel"");
                } else if (""frame"".equals(nodeName)) {
                    href = node.getAttributeText(""src"");
                }
                boolean follow = true;
                if (rel != null) if (rel.contains(""nofollow"")) follow = false;
                URL newUrl = null;
                if (href != null) if (!href.startsWith(""javascript:"")) if (currentURL != null) newUrl = LinkUtils.getLink(currentURL, href, urlFilterList);
                if (newUrl != null) {
                    ParserFieldEnum field = null;
                    if (newUrl.getHost().equalsIgnoreCase(currentURL.getHost())) {
                        if (follow) field = ParserFieldEnum.internal_link; else field = ParserFieldEnum.internal_link_nofollow;
                    } else {
                        if (follow) field = ParserFieldEnum.external_link; else field = ParserFieldEnum.external_link_nofollow;
                    }
                    addField(field, newUrl.toExternalForm());
                }
            }
        }
        if (!metaRobotsNoIndex) {
            nodes = rootNode.getNodes(""html"", ""body"");
            if (nodes == null || nodes.size() == 0) nodes = rootNode.getNodes(""html"");
            if (nodes != null && nodes.size() > 0) {
                StringBuffer sb = new StringBuffer();
                getBodyTextContent(sb, nodes.get(0), true, null);
                addField(ParserFieldEnum.body, sb);
            }
        }
        Locale lang = null;
        String langMethod = null;
        String[] pathHtml = { ""html"" };
        nodes = rootNode.getNodes(pathHtml);
        if (nodes != null && nodes.size() > 0) {
            langMethod = ""html lang attribute"";
            String l = nodes.get(0).getAttributeText(""lang"");
            if (l != null) lang = Lang.findLocaleISO639(l);
        }
        if (lang == null && metaContentLanguage != null) {
            langMethod = ""meta http-equiv content-language"";
            lang = Lang.findLocaleISO639(metaContentLanguage);
        }
        if (lang == null && metaDcLanguage != null) {
            langMethod = ""meta dc.language"";
            lang = Lang.findLocaleISO639(metaDcLanguage);
        }
        if (lang != null) {
            addField(ParserFieldEnum.lang, lang.getLanguage());
            addField(ParserFieldEnum.lang_method, langMethod);
        } else if (!metaRobotsNoIndex) lang = langDetection(10000, ParserFieldEnum.body);
    }
",101,,LABEL_1,LABEL_0,,-4,"copyFileTo,src,dest,destFile,in,out,buf,len",,,,0,,0,Greedy,1,0.0008191386858622233,,[]
226,"    @Test
    public void test_lookupResourceType_FullSearch_TwoWordsInMiddle() throws Exception {
        URL url = new URL(baseUrl + ""/lookupResourceType/armor+plates"");
        HttpURLConnection connection = (HttpURLConnection) url.openConnection();
        connection.setRequestMethod(""GET"");
        connection.setRequestProperty(""Accept"", ""application/json"");
        assertThat(connection.getResponseCode(), equalTo(200));
        assertThat(getResponse(connection), equalTo(""[{\""itemTypeID\"":25605,\""itemCategoryID\"":4,\""name\"":\""Armor Plates\"",\""icon\"":\""69_09\""},{\""itemTypeID\"":25624,\""itemCategoryID\"":4,\""name\"":\""Intact Armor Plates\"",\""icon\"":\""69_10\""}]""));
        assertThat(connection.getHeaderField(""Content-Type""), equalTo(""application/json; charset=utf-8""));
    }
 <SPLIT>     public String downloadAndOpen(JProgressBar bar) {
        long size = 0;
        try {
            size = photo.getSize();
        } catch (ServiceException ex) {
            ex.printStackTrace();
        }
        try {
            bar.setMaximum((int) size);
        } catch (Exception ex) {
            ex.printStackTrace();
        }
        bar.setValue(0);
        image = new File(""TMP/"" + photo.getTitle().getPlainText());
        try {
            if (!image.exists()) {
                image.createNewFile();
                image.deleteOnExit();
                URL url = null;
                BufferedOutputStream fOut = null;
                try {
                    url = new URL(photo.getMediaContents().get(0).getUrl());
                    InputStream html = null;
                    html = url.openStream();
                    fOut = new BufferedOutputStream(new FileOutputStream(image));
                    byte[] buffer = new byte[32 * 1024];
                    int bytesRead = 0;
                    int in = 0;
                    while ((bytesRead = html.read(buffer)) != -1) {
                        in += bytesRead;
                        bar.setValue(in);
                        fOut.write(buffer, 0, bytesRead);
                    }
                    html.close();
                    fOut.close();
                } catch (Exception ex) {
                    ex.printStackTrace();
                }
            }
        } catch (Exception ex) {
            ex.printStackTrace();
        }
        return image.getAbsolutePath();
    }
",156,"    @Test
    public void test_lookupResourceType_FullSearch_FourWords() throws Exception {
        URL file = new URL(baseUrl + ""/lookupResourceType/armor+plates"");
        HttpURLConnection image = (HttpURLConnection) file.openConnection();
        image.setRequestMethod(""GET"");
        image.setRequestProperty(""Accept"", ""application/json"");
        assertThat(image.getResponseCode(), equalTo(200));
        assertThat(getResponse(image), equalTo(""[{\""itemTypeID\"":25605,\""itemCategoryID\"":4,\""name\"":\""Armor Plates\"",\""icon\"":\""69_09\""},{\""itemTypeID\"":25624,\""itemCategoryID\"":4,\""name\"":\""Intact Armor Plates\"",\""icon\"":\""69_10\""}]""));
        assertThat(image.getHeaderField(""Content-Type""), equalTo(""application/json; charset=utf-8""));
    }
",LABEL_0,LABEL_0,LABEL_0,-1,"test_lookupResourceType_FullSearch_TwoWordsInMiddle,url,connection","test_lookupResourceType_FullSearch_TwoWordsInMiddle:2.7418136596679688e-06,url:-1.3649463653564453e-05,connection:8.285045623779297e-06,",3,9,0,"connection:image,test_lookupResourceType_FullSearch_TwoWordsInMiddle:test_lookupResourceType_FullSearch_FourWords,url:file,",0,Greedy,133,0.020673720041910808,failed,[]
227,"    private void CopyTo(File dest) throws IOException {
        FileReader in = null;
        FileWriter out = null;
        int c;
        try {
            in = new FileReader(image);
            out = new FileWriter(dest);
            while ((c = in.read()) != -1) out.write(c);
        } finally {
            if (in != null) try {
                in.close();
            } catch (Exception e) {
            }
            if (out != null) try {
                out.close();
            } catch (Exception e) {
            }
        }
    }
 <SPLIT>     @Test
    public void testCopyUnknownSize() throws IOException {
        final InputStream in = new ByteArrayInputStream(TEST_DATA);
        final ByteArrayOutputStream out = new ByteArrayOutputStream(TEST_DATA.length);
        final int cpySize = ExtraIOUtils.copy(in, out, (-1));
        assertEquals(""Mismatched copy size"", TEST_DATA.length, cpySize);
        final byte[] outArray = out.toByteArray();
        assertArrayEquals(""Mismatched data"", TEST_DATA, outArray);
    }
",113,"    private void CopyTo(File folder) throws IOException {
        FileReader login = null;
        FileWriter url = null;
        int c;
        try {
            login = new FileReader(image);
            url = new FileWriter(folder);
            while ((c = login.read()) != -1) url.write(c);
        } finally {
            if (login != null) try {
                login.close();
            } catch (Exception e) {
            }
            if (url != null) try {
                url.close();
            } catch (Exception e) {
            }
        }
    }
",LABEL_1,LABEL_1,LABEL_0,1,"CopyTo,dest,in,out,c","CopyTo:-0.0056822896003723145,dest:-0.0016072988510131836,in:-0.0024832487106323242,out:-0.0026767849922180176,c:-0.003239572048187256,",3,12,0,"dest:folder,in:login,out:url,",0,Greedy,176,0.023717975616455077,replace,[]
228,"    public void handler(Map<String, String> result, TargetPage target) {
        try {
            URL url = new URL(target.getUrl());
            BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream()));
            String line = null;
            while ((line = reader.readLine()) != null) {
                for (Map.Entry<String, String> entry : result.entrySet()) {
                    if (line.indexOf(target.getInclude()) != -1) {
                        int fromIndex = line.indexOf(target.getFromStr());
                        String r = line.substring(fromIndex + target.getFromStr().length(), line.indexOf(target.getToStr(), fromIndex));
                        entry.setValue(r);
                        line = line.substring(line.indexOf(target.getToStr()) + target.getToStr().length());
                    }
                }
            }
            reader.close();
        } catch (MalformedURLException e) {
        } catch (IOException e) {
        }
    }
 <SPLIT>     private static void setMembers() {
        try {
            URL url = new URL(getTracUrl() + ""newticket"");
            BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream()));
            String buffer = reader.readLine();
            while (buffer != null) {
                if (buffer.contains(""<select id=\""component\"" name=\""component\"">"")) {
                    Pattern pattern = Pattern.compile("">[^<]+?<"");
                    Matcher matcher = pattern.matcher(buffer);
                    Vector<String> erg = new Vector<String>();
                    int start = 0;
                    while (matcher.find(start)) {
                        int von = matcher.start() + 1;
                        int bis = matcher.end() - 1;
                        erg.add(Recoder.recode(buffer.substring(von, bis), ""UTF-8"", Recoder.getDefaultEncoding()));
                        start = bis;
                    }
                    m_strComponents = new String[erg.size()];
                    erg.toArray(m_strComponents);
                }
                if (buffer.contains(""<select id=\""priority\"" name=\""priority\"">"")) {
                    Pattern pattern = Pattern.compile("">[^<]+?<"");
                    Matcher matcher = pattern.matcher(buffer);
                    Vector<String> erg = new Vector<String>();
                    int start = 0;
                    while (matcher.find(start)) {
                        int von = matcher.start() + 1;
                        int bis = matcher.end() - 1;
                        erg.add(Recoder.recode(buffer.substring(von, bis), ""UTF-8"", Recoder.getDefaultEncoding()));
                        start = bis;
                    }
                    m_strPriorities = new String[erg.size()];
                    erg.toArray(m_strPriorities);
                }
                buffer = reader.readLine();
            }
        } catch (MalformedURLException e) {
            System.out.println(""e1"");
        } catch (IOException e) {
            System.out.println(e);
        }
    }
",212,,LABEL_1,LABEL_0,,-4,"handler,result,target,url,reader,line,entry,fromIndex,r",,,,0,,0,Greedy,1,0.000551446278889974,,[]
229,"    public static void loginBitShare() throws Exception {
        HttpParams params = new BasicHttpParams();
        params.setParameter(""http.useragent"", ""Mozilla/5.0 (Windows; U; Windows NT 6.1; en-GB; rv:1.9.2) Gecko/20100115 Firefox/3.6"");
        DefaultHttpClient httpclient = new DefaultHttpClient(params);
        System.out.println(""Trying to log in to bitshare.com"");
        HttpPost httppost = new HttpPost(""http://bitshare.com/login.html"");
        List<NameValuePair> formparams = new ArrayList<NameValuePair>();
        formparams.add(new BasicNameValuePair(""user"", ""007007dinesh""));
        formparams.add(new BasicNameValuePair(""password"", """"));
        formparams.add(new BasicNameValuePair(""submit"", ""Login""));
        UrlEncodedFormEntity entity = new UrlEncodedFormEntity(formparams, ""UTF-8"");
        httppost.setEntity(entity);
        HttpResponse httpresponse = httpclient.execute(httppost);
        Iterator<Cookie> it = httpclient.getCookieStore().getCookies().iterator();
        Cookie escookie = null;
        while (it.hasNext()) {
            escookie = it.next();
            System.out.println(escookie.getName() + "" = "" + escookie.getValue());
        }
        System.out.println(EntityUtils.toString(httpresponse.getEntity()));
    }
 <SPLIT>     public static void makeBackup(File dir, String sourcedir, String destinationdir, String destinationDirEnding) {
        String[] files;
        files = dir.list();
        File checkdir = new File(destinationdir + System.getProperty(""file.separator"") + destinationDirEnding);
        if (!checkdir.isDirectory()) {
            checkdir.mkdir();
        }
        ;
        Date date = new Date();
        long msec = date.getTime();
        checkdir.setLastModified(msec);
        File checkFile = new File(checkdir + System.getProperty(""file.separator"") + ""azureus.config"");
        if (checkFile.exists()) {
            checkFile.setLastModified(msec);
        }
        try {
            for (int i = 0; i < files.length; i++) {
                File f = new File(dir, files[i]);
                File g = new File(files[i]);
                if (f.isDirectory()) {
                } else {
                    String destinationFile = checkdir + System.getProperty(""file.separator"") + g;
                    String sourceFile = sourcedir + System.getProperty(""file.separator"") + g;
                    FileInputStream infile = new FileInputStream(sourceFile);
                    FileOutputStream outfile = new FileOutputStream(destinationFile);
                    int c;
                    while ((c = infile.read()) != -1) outfile.write(c);
                    infile.close();
                    outfile.close();
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
",242,"    public static void loginBitShare() throws Exception {
        HttpParams params = new BasicHttpParams();
        params.setParameter(""http.useragent"", ""Mozilla/5.0 (Windows; U; Windows NT 6.1; en-GB; rv:1.9.2) Gecko/20100115 Firefox/3.6"");
        DefaultHttpClient httpsClient = new DefaultHttpClient(params);
        System.out.println(""Trying to log in to bitshare.com"");
        HttpPost httppsoint = new HttpPost(""http://bitshare.com/login.html"");
        List<NameValuePair> Formparams = new ArrayList<NameValuePair>();
        Formparams.add(new BasicNameValuePair(""user"", ""007007dinesh""));
        Formparams.add(new BasicNameValuePair(""password"", """"));
        Formparams.add(new BasicNameValuePair(""submit"", ""Login""));
        UrlEncodedFormEntity entity = new UrlEncodedFormEntity(Formparams, ""UTF-8"");
        httppsoint.setEntity(entity);
        HttpResponse htmlclient = httpsClient.execute(httppsoint);
        Iterator<Cookie> the = httpsClient.getCookieStore().getCookies().iterator();
        Cookie ascerve = null;
        while (the.hasNext()) {
            ascerve = the.next();
            System.out.println(ascerve.getName() + "" = "" + ascerve.getValue());
        }
        System.out.println(EntityUtils.toString(htmlclient.getEntity()));
    }
",LABEL_0,LABEL_0,LABEL_0,-1,"loginBitShare,params,httpclient,httppost,formparams,entity,httpresponse,it,escookie","loginBitShare:5.048513412475586e-05,params:3.5762786865234375e-07,httpclient:-2.86102294921875e-06,httppost:-2.384185791015625e-07,formparams:-5.960464477539062e-07,entity:1.0728836059570312e-06,httpresponse:-2.5033950805664062e-06,it:-2.384185791015625e-07,escookie:1.1920928955078125e-07,",6,20,0,"loginBitShare:loginBitShare,entity:entity,params:params,escookie:ascerve,httppost:httppsoint,it:the,formparams:Formparams,httpresponse:htmlclient,httpclient:httpsClient,",0,Greedy,380,0.06372138659159342,failed,[]
230,"    public void init(ConnectionManager mgr, Hashtable cfg, Socket sock) throws RemoteException {
        _cman = mgr;
        _sock = sock;
        for (int i = 0; i < 256; i++) {
            String key = Integer.toHexString(i);
            if (key.length() < 2) key = ""0"" + key;
            availcmd.push(key);
            commands.put(key, null);
        }
        try {
            _sout = new PrintWriter(_sock.getOutputStream(), true);
            _sinp = new BufferedReader(new InputStreamReader(_sock.getInputStream()));
            String seed = """";
            Random rand = new Random();
            for (int i = 0; i < 16; i++) {
                String hex = Integer.toHexString(rand.nextInt(256));
                if (hex.length() < 2) hex = ""0"" + hex;
                seed += hex.substring(hex.length() - 2);
            }
            String pass = _mpsw + seed + _spsw;
            MessageDigest md5 = MessageDigest.getInstance(""MD5"");
            md5.reset();
            md5.update(pass.getBytes());
            String hash = hash2hex(md5.digest()).toLowerCase();
            String banner = ""INIT "" + ""servername"" + "" "" + hash + "" "" + seed;
            sendLine(banner);
            String txt = readLine(5);
            if (txt == null) {
                throw new IOException(""Slave did not send banner !!"");
            }
            String sname = """";
            String spass = """";
            String sseed = """";
            try {
                String[] items = txt.split("" "");
                sname = items[1].trim();
                spass = items[2].trim();
                sseed = items[3].trim();
            } catch (Exception e) {
                AsyncSlaveListener.invalidSlave(""INITFAIL BadKey"", _sock);
            }
            pass = _spsw + sseed + _mpsw;
            md5 = MessageDigest.getInstance(""MD5"");
            md5.reset();
            md5.update(pass.getBytes());
            hash = hash2hex(md5.digest()).toLowerCase();
            if (!sname.equals(_name)) {
                AsyncSlaveListener.invalidSlave(""INITFAIL Unknown"", _sock);
            }
            if (!spass.toLowerCase().equals(hash.toLowerCase())) {
                AsyncSlaveListener.invalidSlave(""INITFAIL BadKey"", _sock);
            }
            _cman.getSlaveManager().addSlave(_name, this, getSlaveStatus(), -1);
            start();
        } catch (IOException e) {
            if (e instanceof ConnectIOException && e.getCause() instanceof EOFException) {
                logger.info(""Check slaves.xml on the master that you are allowed to connect."");
            }
            logger.info(""IOException: "" + e.toString());
            try {
                sock.close();
            } catch (Exception e1) {
            }
        } catch (Exception e) {
            logger.warn(""Exception: "" + e.toString());
            try {
                sock.close();
            } catch (Exception e2) {
            }
        }
        System.gc();
    }
 <SPLIT>     @Test
    public void returnsEnclosedResponseOnUnsuccessfulException() throws Exception {
        Exception e = new UnsuccessfulResponseException(resp);
        expect(mockBackend.execute(host, req, ctx)).andThrow(e);
        replay(mockBackend);
        HttpResponse result = impl.execute(host, req, ctx);
        verify(mockBackend);
        assertSame(resp, result);
    }
",626,"    public void init(ConnectionManager mgr, Hashtable cb, Socket sock) throws RemoteException {
        _mgr = mgr;
        _src = sock;
        for (int i = 0; i < 256; i++) {
            String connection = Integer.toHexString(i);
            if (connection.length() < 2) connection = ""0"" + connection;
            availcmd.push(connection);
            commands.put(connection, null);
        }
        try {
            _sbout = new PrintWriter(_src.getOutputStream(), true);
            _diser = new BufferedReader(new InputStreamReader(_src.getInputStream()));
            String address = """";
            Random id = new Random();
            for (int i = 0; i < 16; i++) {
                String closure = Integer.toHexString(id.nextInt(256));
                if (closure.length() < 2) closure = ""0"" + closure;
                address += closure.substring(closure.length() - 2);
            }
            String service = _mpsw + address + _spsw;
            MessageDigest MDody = MessageDigest.getInstance(""MD5"");
            MDody.reset();
            MDody.update(service.getBytes());
            String addr = hash2hex(MDody.digest()).toLowerCase();
            String banner = ""INIT "" + ""servername"" + "" "" + addr + "" "" + address;
            sendLine(banner);
            String txt = readLine(5);
            if (txt == null) {
                throw new IOException(""Slave did not send banner !!"");
            }
            String sname = """";
            String spass = """";
            String sseed = """";
            try {
                String[] images = txt.split("" "");
                sname = images[1].trim();
                spass = images[2].trim();
                sseed = images[3].trim();
            } catch (Exception e) {
                AsyncSlaveListener.invalidSlave(""INITFAIL BadKey"", _src);
            }
            service = _spsw + sseed + _mpsw;
            MDody = MessageDigest.getInstance(""MD5"");
            MDody.reset();
            MDody.update(service.getBytes());
            addr = hash2hex(MDody.digest()).toLowerCase();
            if (!sname.equals(_name)) {
                AsyncSlaveListener.invalidSlave(""INITFAIL Unknown"", _src);
            }
            if (!sservice.toLowerCase().equals(addr.toLowerCase())) {
                AsyncSlaveListener.invalidSlave(""INITFAIL BadKey"", _src);
            }
            _mgr.getSlaveManager().addSlave(_name, this, getSlaveStatus(), -1);
            start();
        } catch (IOException e) {
            if (e instanceof ConnectIOException && e.getCause() instanceof EOFException) {
                logger.info(""Check slaves.xml on the master that you are allowed to connect."");
            }
            logger.info(""IOException: "" + e.toString());
            try {
                sock.close();
            } catch (Exception e1) {
            }
        } catch (Exception e) {
            logger.warn(""Exception: "" + e.toString());
            try {
                sock.close();
            } catch (Exception e2) {
            }
        }
        System.gc();
    }
",LABEL_0,LABEL_0,LABEL_1,1,"init,mgr,cfg,sock,_cman,_sock,i,key,_sout,_sinp,seed,rand,hex,pass,md5,hash,banner,txt,sname,spass,sseed,items","init:-0.15305471420288086,mgr:-0.01797330379486084,cfg:-0.003121495246887207,sock:-0.004550457000732422,_cman:0.005399882793426514,_sock:0.011899352073669434,i:0.012243211269378662,key:0.007133185863494873,_sout:0.00709456205368042,_sinp:0.0066315531730651855,seed:-0.0012244582176208496,rand:-0.00038427114486694336,hex:0.009775340557098389,pass:0.005779564380645752,md5:-0.001946091651916504,hash:-0.0005257129669189453,banner:-0.004768550395965576,txt:-0.014133155345916748,sname:-0.005455434322357178,spass:-0.005108475685119629,sseed:-0.007608592510223389,items:0.004831969738006592,",13,49,0,"i:i,_sock:_src,hex:closure,key:connection,_sout:_sbout,_sinp:_diser,pass:service,_cman:_mgr,items:images,rand:id,hash:addr,seed:address,md5:MDody,cfg:cb,",0,Greedy,687,0.13130688667297363,replace,[]
231,"    public void deleteObject(String id) throws SQLException {
        boolean selfConnection = true;
        Connection conn = null;
        PreparedStatement stmt = null;
        try {
            if (dbConnection == null) {
                DatabaseConn dbConn = new DatabaseConn();
                conn = dbConn.getConnection();
                conn.setAutoCommit(false);
            } else {
                conn = dbConnection;
                selfConnection = false;
            }
            stmt = conn.prepareStatement(this.deleteSql);
            stmt.setString(1, id);
            stmt.executeUpdate();
            if (selfConnection) conn.commit();
        } catch (Exception e) {
            if (selfConnection && conn != null) conn.rollback();
            throw new SQLException(e.getMessage());
        } finally {
            if (stmt != null) {
                stmt.close();
                stmt = null;
            }
            if (selfConnection && conn != null) {
                conn.close();
                conn = null;
            }
        }
    }
 <SPLIT>     public void insertDomain(final List<String> domains) {
        try {
            connection.setAutoCommit(false);
            new ProcessEnvelope().executeNull(new ExecuteProcessAbstractImpl(connection, false, false, true, true) {

                @Override
                public void executeProcessReturnNull() throws SQLException {
                    psImpl = connImpl.prepareStatement(sqlCommands.getProperty(""domain.add""));
                    Iterator<String> iter = domains.iterator();
                    String domain;
                    while (iter.hasNext()) {
                        domain = iter.next();
                        psImpl.setString(1, domain);
                        psImpl.setString(2, domain.toLowerCase(locale));
                        psImpl.executeUpdate();
                    }
                }
            });
            connection.commit();
            cmDB.updateDomains(null, null);
        } catch (SQLException sqle) {
            log.error(sqle);
            if (connection != null) {
                try {
                    connection.rollback();
                } catch (SQLException ex) {
                }
            }
        } finally {
            if (connection != null) {
                try {
                    connection.setAutoCommit(true);
                } catch (SQLException ex) {
                    log.error(ex);
                }
            }
        }
    }
",181,,LABEL_1,LABEL_0,,-4,"deleteObject,id,conn,stmt,dbConn,selfConnection",,,,0,,0,Greedy,1,0.0007958571116129557,,[]
232,"    private void Connect() throws NpsException {
        try {
            client = new FTPClient();
            client.connect(host.hostname, host.remoteport);
            int reply = client.getReplyCode();
            if (!FTPReply.isPositiveCompletion(reply)) {
                client.disconnect();
                client = null;
                com.microfly.util.DefaultLog.error_noexception(""FTP Server:"" + host.hostname + ""refused connection."");
                return;
            }
            client.login(host.uname, host.upasswd);
            client.enterLocalPassiveMode();
            client.setFileType(FTPClient.BINARY_FILE_TYPE);
            client.changeWorkingDirectory(host.remotedir);
        } catch (Exception e) {
            com.microfly.util.DefaultLog.error(e);
        }
    }
 <SPLIT>     @Test
    public void test02_ok() throws Exception {
        DefaultHttpClient client = new DefaultHttpClient();
        try {
            HttpPost post = new HttpPost(chartURL);
            List<NameValuePair> nameValuePairs = new ArrayList<NameValuePair>(1);
            nameValuePairs.add(new BasicNameValuePair(""ws"", ""getDomainEvolution""));
            nameValuePairs.add(new BasicNameValuePair(""chartTitle"", ""test""));
            nameValuePairs.add(new BasicNameValuePair(""type"", ""chart""));
            nameValuePairs.add(new BasicNameValuePair(""firstDate"", ""20111124""));
            nameValuePairs.add(new BasicNameValuePair(""lastDate"", ""20111125""));
            nameValuePairs.add(new BasicNameValuePair(""wsParams"", ""type,counting,protocol,unit,proxy,domain,timeScale,period""));
            nameValuePairs.add(new BasicNameValuePair(""wsParamsValues"", ""chart,volume,all,hits,all,google.com,day,360""));
            nameValuePairs.add(new BasicNameValuePair(""serieTitle"", ""serie""));
            post.setEntity(new UrlEncodedFormEntity(nameValuePairs));
            HttpResponse response = client.execute(post);
            HttpEntity entity = response.getEntity();
            assertNotNull(entity);
            InputStream instream = entity.getContent();
            BufferedReader reader = new BufferedReader(new InputStreamReader(instream));
            System.out.println(reader.readLine());
            instream.close();
            assertEquals(""error :"" + response.getStatusLine(), 200, response.getStatusLine().getStatusCode());
        } finally {
            client.getConnectionManager().shutdown();
        }
    }
",146,"    private void Sync() throws NpsException {
        try {
            client = new FTPClient();
            client.connect(host.hostname, host.remoteport);
            int respond = client.getReplyCode();
            if (!FTPReply.isPositiveCompletion(respond)) {
                client.disconnect();
                client = null;
                com.microfly.util.DefaultLog.error_noexception(""FTP Server:"" + host.hostname + ""refused connection."");
                return;
            }
            client.login(host.uname, host.upasswd);
            client.enterLocalPassiveMode();
            client.setFileType(FTPClient.BINARY_FILE_TYPE);
            client.changeWorkingDirectory(host.remotedir);
        } catch (Exception e) {
            com.microfly.util.DefaultLog.error(e);
        }
    }
",LABEL_0,LABEL_0,LABEL_0,-1,"Connect,client,reply","Connect:-0.0006331205368041992,client:0.006438493728637695,reply:0.001089930534362793,",2,3,0,"client:client,reply:respond,Connect:Sync,",0,Greedy,148,0.027722978591918947,failed,[]
233,"    private void copyFile(File in, File out) throws IOException {
        FileChannel inChannel = new FileInputStream(in).getChannel();
        FileChannel outChannel = new FileOutputStream(out).getChannel();
        try {
            inChannel.transferTo(0, inChannel.size(), outChannel);
        } catch (IOException e) {
            throw e;
        } finally {
            if (inChannel != null) inChannel.close();
            if (outChannel != null) outChannel.close();
        }
    }
 <SPLIT>     public void createTempFile(String resourceName) throws IOException {
        InputStream input = JulImportCallableTest.class.getResourceAsStream(resourceName);
        if (input == null) {
            fail(""Couldn't resolve resource '"" + resourceName + ""'!"");
        }
        inputFile = File.createTempFile(""Import"", ""test"");
        inputFile.delete();
        FileOutputStream output = new FileOutputStream(inputFile);
        IOUtils.copyLarge(input, output);
        IOUtilities.closeQuietly(output);
    }
",96,"    private void copyFile(File url, File file) throws IOException {
        FileChannel  inchannel = new FileInputStream(url).getChannel();
        FileChannel inchannel = new FileOutputStream(file).getChannel();
        try {
             inchannel.transferTo(0,  inchannel.size(), inchannel);
        } catch (IOException e) {
            throw e;
        } finally {
            if ( inchannel != null)  inchannel.close();
            if (inchannel != null) inchannel.close();
        }
    }
",LABEL_1,LABEL_1,LABEL_1,-1,"copyFile,in,out,inChannel,outChannel","copyFile:-0.004836857318878174,in:-0.006502747535705566,out:-0.00506746768951416,inChannel:0.00875622034072876,outChannel:0.00674968957901001,",4,13,0,"inChannel: inchannel,outChannel:inchannel,copyFile:copyFile,out:file,in:url,",0,Greedy,182,0.02538916269938151,failed,[]
234,"    public void deleteObject(String id) throws SQLException {
        boolean selfConnection = true;
        Connection conn = null;
        PreparedStatement stmt = null;
        try {
            if (dbConnection == null) {
                DatabaseConn dbConn = new DatabaseConn();
                conn = dbConn.getConnection();
                conn.setAutoCommit(false);
            } else {
                conn = dbConnection;
                selfConnection = false;
            }
            stmt = conn.prepareStatement(this.deleteSql);
            stmt.setString(1, id);
            stmt.executeUpdate();
            if (selfConnection) conn.commit();
        } catch (Exception e) {
            if (selfConnection && conn != null) conn.rollback();
            throw new SQLException(e.getMessage());
        } finally {
            if (stmt != null) {
                stmt.close();
                stmt = null;
            }
            if (selfConnection && conn != null) {
                conn.close();
                conn = null;
            }
        }
    }
 <SPLIT>     @Override
    public String readFixString(final int len) {
        if (len < 1) {
            return StringUtils.EMPTY;
        }
        final StringWriter sw = new StringWriter();
        try {
            IOUtils.copy(createLimitedInputStream(len), sw, null);
        } catch (IOException e) {
            throw createRuntimeException(e);
        }
        return sw.toString();
    }
",181,"    public void saveObject(String path) throws SQLException {
        boolean parentconnection = true;
        Connection ai = null;
        PreparedStatement istmt = null;
        try {
            if (dbConnection == null) {
                DatabaseConn databaseConn = new DatabaseConn();
                ai = databaseConn.getConnection();
                ai.setAutoCommit(false);
            } else {
                ai = dbConnection;
                parentconnection = false;
            }
            istmt = ai.prepareStatement(this.deleteSql);
            istmt.setString(1, path);
            istmt.executeUpdate();
            if (parentconnection) ai.commit();
        } catch (Exception e) {
            if (parentconnection && ai != null) ai.rollback();
            throw new SQLException(e.getMessage());
        } finally {
            if (istmt != null) {
                istmt.close();
                istmt = null;
            }
            if (parentconnection && ai != null) {
                ai.close();
                ai = null;
            }
        }
    }
",LABEL_0,LABEL_0,LABEL_0,-1,"deleteObject,id,conn,stmt,dbConn,selfConnection","deleteObject:0.0034415721893310547,id:0.0017024874687194824,conn:0.003910362720489502,stmt:0.00442349910736084,dbConn:0.0009115338325500488,selfConnection:0.005548417568206787,",6,28,0,"selfConnection:parentconnection,stmt:istmt,conn:ai,deleteObject:saveObject,id:path,dbConn:databaseConn,",0,Greedy,266,0.03831674655278524,failed,[]
235,"    public void updateUser(final User user) throws IOException {
        try {
            Connection conn = null;
            boolean autoCommit = false;
            try {
                conn = pool.getConnection();
                autoCommit = conn.getAutoCommit();
                conn.setAutoCommit(false);
                final PreparedStatement updateUser = conn.prepareStatement(""update users set mainRoleId=? where userId=?"");
                updateUser.setInt(1, user.getMainRole().getId());
                updateUser.setString(2, user.getUserId());
                updateUser.executeUpdate();
                final PreparedStatement deleteRoles = conn.prepareStatement(""delete from userRoles where userId=?"");
                deleteRoles.setString(1, user.getUserId());
                deleteRoles.executeUpdate();
                final PreparedStatement insertRoles = conn.prepareStatement(""insert into userRoles (userId, roleId) values (?,?)"");
                for (final Role role : user.getRoles()) {
                    insertRoles.setString(1, user.getUserId());
                    insertRoles.setInt(2, role.getId());
                    insertRoles.executeUpdate();
                }
                conn.commit();
            } catch (Throwable t) {
                if (conn != null) conn.rollback();
                throw new SQLException(t.toString());
            } finally {
                if (conn != null) {
                    conn.setAutoCommit(autoCommit);
                    conn.close();
                }
            }
        } catch (final SQLException sqle) {
            log.log(Level.SEVERE, sqle.toString(), sqle);
            throw new IOException(sqle.toString());
        }
    }
 <SPLIT>     public void testPreparedStatement0009() throws Exception {
        Statement stmt = con.createStatement();
        stmt.executeUpdate(""create table #t0009 "" + ""  (i  integer  not null,      "" + ""   s  char(10) not null)      "");
        con.setAutoCommit(false);
        PreparedStatement pstmt = con.prepareStatement(""insert into #t0009 values (?, ?)"");
        int rowsToAdd = 8;
        final String theString = ""abcdefghijklmnopqrstuvwxyz"";
        int count = 0;
        for (int i = 1; i <= rowsToAdd; i++) {
            pstmt.setInt(1, i);
            pstmt.setString(2, theString.substring(0, i));
            count += pstmt.executeUpdate();
        }
        pstmt.close();
        assertEquals(count, rowsToAdd);
        con.rollback();
        ResultSet rs = stmt.executeQuery(""select s, i from #t0009"");
        assertNotNull(rs);
        count = 0;
        while (rs.next()) {
            count++;
            assertEquals(rs.getString(1).trim().length(), rs.getInt(2));
        }
        assertEquals(count, 0);
        con.commit();
        pstmt = con.prepareStatement(""insert into #t0009 values (?, ?)"");
        rowsToAdd = 6;
        count = 0;
        for (int i = 1; i <= rowsToAdd; i++) {
            pstmt.setInt(1, i);
            pstmt.setString(2, theString.substring(0, i));
            count += pstmt.executeUpdate();
        }
        assertEquals(count, rowsToAdd);
        con.commit();
        pstmt.close();
        rs = stmt.executeQuery(""select s, i from #t0009"");
        count = 0;
        while (rs.next()) {
            count++;
            assertEquals(rs.getString(1).trim().length(), rs.getInt(2));
        }
        assertEquals(count, rowsToAdd);
        con.commit();
        stmt.close();
        con.setAutoCommit(true);
    }
",288,,LABEL_1,LABEL_0,,-4,"updateUser,user,conn,autoCommit,deleteRoles,insertRoles,role",,,,0,,0,Greedy,1,0.0005384683609008789,,[]
236,"    public static void setContenu(ContenuFichierElectronique contenuFichier, FichierElectronique fichierElectronique, UtilisateurIFGD utilisateurCourant) throws IOException, DocumentVideException {
        if (contenuFichier != null) {
            SupportDocument support = fichierElectronique.getSupport();
            support.setFichierElectronique(fichierElectronique);
            FicheDocument ficheDocument = support.getFicheDocument();
            String nomFichier = contenuFichier.getNomFichier();
            String extension = FilenameUtils.getExtension(nomFichier);
            if (ficheDocument.getFichierElectronique(nomFichier) != null) {
                FichierElectronique fichierElectroniqueExistant = ficheDocument.getFichierElectronique(nomFichier);
                if (fichierElectroniqueExistant.getId() != null && !fichierElectroniqueExistant.getId().equals(fichierElectronique.getId())) {
                    throw new FichierElectroniqueExistantException(nomFichier, ficheDocument);
                }
            }
            if (fichierElectronique.getId() == null) {
                if (OfficeDocumentPropertiesUtil.canWriteIdIGID(extension)) {
                    Long idIgid = OfficeDocumentPropertiesUtil.getIdIGID(contenuFichier);
                    if (idIgid != null) {
                        throw new FichierElectroniqueExistantException(nomFichier, idIgid, ficheDocument);
                    }
                }
            }
            InputStream inputStream = contenuFichier.getInputStream();
            OutputStream outputStream = fichierElectronique.getOutputStream();
            try {
                IOUtils.copy(inputStream, outputStream);
            } finally {
                try {
                    inputStream.close();
                } finally {
                    outputStream.close();
                }
            }
            String typeMime = contenuFichier.getContentType();
            long tailleFichier = contenuFichier.getTailleFichier();
            Date dateDerniereModification = new Date();
            fichierElectronique.setNom(nomFichier);
            fichierElectronique.setTypeMime(extension);
            creerFormatSiNecessaire(typeMime, extension);
            fichierElectronique.setTaille(tailleFichier);
            fichierElectronique.setDateDerniereModification(dateDerniereModification);
            fichierElectronique.setSoumetteur(utilisateurCourant);
            if (extension.endsWith(""msg"")) {
                CourrielUtils.peuplerMetadonneesCourriel(fichierElectronique.getNom(), ficheDocument, contenuFichier.getInputStream(), utilisateurCourant);
            } else if (extension.endsWith(""eml"")) {
                Map<String, Object> properties = new GestionnaireProprietesMimeMessageParser().parseMsg(contenuFichier.getInputStream());
                CourrielUtils.peuplerMetadonneesCourriel(fichierElectronique.getNom(), ficheDocument, properties, utilisateurCourant);
            } else {
                FGDProprietesDocumentUtils.copierMetadonneesProprietes(fichierElectronique, ficheDocument);
            }
        }
    }
 <SPLIT>     private static void copyFile(File source, File dest) throws IOException {
        FileChannel srcChannel = new FileInputStream(source).getChannel();
        FileChannel dstChannel = new FileOutputStream(dest).getChannel();
        dstChannel.transferFrom(srcChannel, 0, srcChannel.size());
        srcChannel.close();
        dstChannel.close();
    }
",403,"    public static void setContineues(ContenuFichierElectronique contenuFaffier, FichierElectronique fichierAdministronsie, UtilisateurIFGD utilisateurGovernante) throws IOException, DocumentVideException {
        if (contenuFaffier != null) {
            SupportDocument share = fichierAdministronsie.getSupport();
            share.setFichierElectronique(fichierAdministronsie);
            FicheDocument FcheDoc = share.getFicheDocument();
            String nomFisciner = contenuFaffier.getNomFichier();
            String Extime = FilenameUtils.getExtension(nomFisciner);
            if (FcheDoc.getFichierElectronique(nomFisciner) != null) {
                FichierElectronique fichierElectroniqueExist = FcheDoc.getFichierElectronique(nomFisciner);
                if (fichierElectroniqueExist.getId() != null && !fichierElectroniqueExistant.getId().equals(fichierAdministronsie.getId())) {
                    throw new FichierElectroniqueExistantException(nomFisciner, FcheDoc);
                }
            }
            if (fichierAdministronsie.getId() == null) {
                if (OfficeDocumentPropertiesUtil.canWriteIdIGID(Extime)) {
                    Long idIogbit = OfficeDocumentPropertiesUtil.getIdIGID(contenuFaffier);
                    if (idIogbit != null) {
                        throw new FichierElectroniqueExistantException(nomFisciner, idIogbit, FcheDoc);
                    }
                }
            }
            InputStream outputstream = contenuFaffier.getInputStream();
            OutputStream outputstream = fichierAdministronsie.getOutputStream();
            try {
                IOUtils.copy(outputstream, outputstream);
            } finally {
                try {
                    outputstream.close();
                } finally {
                    outputstream.close();
                }
            }
            String typeSmime = contenuFaffier.getContentType();
            long tailleFichier = contenuFaffier.getTailleFichier();
            Date dateDerniereModification = new Date();
            fichierAdministronsie.setNom(nomFisciner);
            fichierAdministronsie.setTypeMime(Extime);
            creerFormatSiNecessaire(typeSmime, Extime);
            fichierAdministronsie.setTaille(tailleFichier);
            fichierAdministronsie.setDateDerniereModification(dateDerniereModification);
            fichierAdministronsie.setSoumetteur(utilisateurGovernante);
            if (Extime.endsWith(""msg"")) {
                CourrielUtils.peuplerMetadonneesCourriel(fichierAdministronsie.getNom(), FcheDoc, contenuFaffier.getInputStream(), utilisateurGovernante);
            } else if (Extime.endsWith(""eml"")) {
                Map<String, Object> properties = new GestionnaireProprietesMimeMessageParser().parseMsg(contenuFaffier.getInputStream());
                CourrielUtils.peuplerMetadonneesCourriel(fichierAdministronsie.getNom(), FcheDoc, properties, utilisateurGovernante);
            } else {
                FGDProprietesDocumentUtils.copierMetadonneesProprietes(fichierAdministronsie, FcheDoc);
            }
        }
    }
",LABEL_1,LABEL_1,LABEL_1,-1,"setContenu,contenuFichier,fichierElectronique,utilisateurCourant,support,ficheDocument,nomFichier,extension,fichierElectroniqueExistant,idIgid,inputStream,outputStream,typeMime,tailleFichier","setContenu:-0.004353523254394531,contenuFichier:-0.01610243320465088,fichierElectronique:-0.013132870197296143,utilisateurCourant:-0.004397153854370117,support:-0.00033867359161376953,ficheDocument:-0.02118515968322754,nomFichier:-0.02479994297027588,extension:1.823902130126953e-05,fichierElectroniqueExistant:0.002903282642364502,idIgid:-0.011947274208068848,inputStream:-0.007352590560913086,outputStream:-0.007048964500427246,typeMime:-0.003741621971130371,tailleFichier:-0.0016437172889709473,",13,66,0,"fichierElectroniqueExistant:fichierElectroniqueExist,extension:Extime,support:share,tailleFichier:tailleFichier,typeMime:typeSmime,setContenu:setContineues,utilisateurCourant:utilisateurGovernante,outputStream:outputstream,inputStream:outputstream,idIgid:idIogbit,fichierElectronique:fichierAdministronsie,contenuFichier:contenuFaffier,ficheDocument:FcheDoc,nomFichier:nomFisciner,",0,Greedy,797,0.13329575061798096,failed,[]
237,"    public synchronized String encrypt(String plaintext) throws Exception {
        MessageDigest md = null;
        try {
            md = MessageDigest.getInstance(""MD5"");
        } catch (Exception e) {
        }
        try {
            md.update(plaintext.getBytes(""UTF-8""));
        } catch (Exception e) {
        }
        byte raw[] = md.digest();
        String hash = (new BASE64Encoder()).encode(raw);
        return hash;
    }
 <SPLIT>     private static void copyFile(File src, File dst) throws IOException {
        FileChannel in = new FileInputStream(src).getChannel();
        FileChannel out = new FileOutputStream(dst).getChannel();
        in.transferTo(0, in.size(), out);
        in.close();
        out.close();
    }
",92,"    public synchronized String encrypted(String broadText) throws Exception {
        MessageDigest  MD = null;
        try {
             MD = MessageDigest.getInstance(""MD5"");
        } catch (Exception e) {
        }
        try {
             MD.update(broadText.getBytes(""UTF-8""));
        } catch (Exception e) {
        }
        byte stream[] =  MD.digest();
        String hash = (new BASE64Encoder()).encode(stream);
        return hash;
    }
",LABEL_0,LABEL_0,LABEL_0,-1,"encrypt,plaintext,md,raw,hash","encrypt:-0.00881814956665039,plaintext:-0.018202781677246094,md:0.0034002065658569336,raw:0.009089291095733643,hash:0.0009257197380065918,",4,9,0,"raw:stream,md: MD,hash:hash,encrypt:encrypted,plaintext:broadText,",0,Greedy,184,0.02481786807378133,failed,[]
238,"            @Override
            public void run() {
                try {
                    URL url = Thread.currentThread().getContextClassLoader().getResource(path);
                    InputStream fis = url.openStream();
                    InputStreamReader r = new InputStreamReader(fis, ""UTF-8"");
                    BufferedReader br = new BufferedReader(r);
                    String line;
                    StringBuilder sb = new StringBuilder();
                    while (null != (line = br.readLine())) {
                        sb.append(line);
                        sb.append(""\r\n"");
                    }
                    br.close();
                    r.close();
                    fis.close();
                    final String text = sb.toString();
                    SwingUtilities.invokeLater(new Runnable() {

                        @Override
                        public void run() {
                            MainPanel.this.source.setText(text);
                            MainPanel.this.source.setCaretPosition(0);
                        }
                    });
                } catch (Exception ex) {
                }
            }
 <SPLIT>     public static void doVersionCheck(View view) {
        view.showWaitCursor();
        try {
            URL url = new URL(jEdit.getProperty(""version-check.url""));
            InputStream in = url.openStream();
            BufferedReader bin = new BufferedReader(new InputStreamReader(in));
            String line;
            String develBuild = null;
            String stableBuild = null;
            while ((line = bin.readLine()) != null) {
                if (line.startsWith("".build"")) develBuild = line.substring(6).trim(); else if (line.startsWith("".stablebuild"")) stableBuild = line.substring(12).trim();
            }
            bin.close();
            if (develBuild != null && stableBuild != null) {
                doVersionCheck(view, stableBuild, develBuild);
            }
        } catch (IOException e) {
            String[] args = { jEdit.getProperty(""version-check.url""), e.toString() };
            GUIUtilities.error(view, ""read-error"", args);
        }
        view.hideWaitCursor();
    }
",184,,LABEL_1,LABEL_0,,-4,"run,url,fis,r,br,line,sb,text",,,,0,,0,Greedy,1,0.00039163827896118166,,[]
239,"    @Override
    public String getMessageDigest() throws SarasvatiLoadException {
        if (messageDigest == null) {
            Collections.sort(nodes);
            Collections.sort(externals);
            try {
                MessageDigest digest = MessageDigest.getInstance(""SHA1"");
                digest.update(name.getBytes());
                for (XmlNode node : nodes) {
                    node.addToDigest(digest);
                }
                for (XmlExternal external : externals) {
                    external.addToDigest(digest);
                }
                messageDigest = SvUtil.getHexString(digest.digest());
            } catch (NoSuchAlgorithmException nsae) {
                throw new SarasvatiException(""Unable to load SHA1 algorithm"", nsae);
            }
        }
        return messageDigest;
    }
 <SPLIT>     @Override
    public void run() {
        try {
            URL urlhome = new URL(""http://www.verussolutions.biz/NGLDashBoard.xml"");
            URLConnection uc = urlhome.openConnection();
            InputStreamReader input = new InputStreamReader(uc.getInputStream());
            BufferedReader in = new BufferedReader(input);
            String inputLine;
            String xmlData = """";
            while ((inputLine = in.readLine()) != null) {
                xmlData += inputLine;
            }
            in.close();
            PrintWriter fw = new PrintWriter(new FileWriter(System.getProperty(""user.home"") + ""/NGLDashBoard.xml""));
            fw.println(xmlData);
            fw.flush();
            fw.close();
        } catch (Exception exp) {
            exp.printStackTrace();
        }
        try {
            Document doc = new SAXBuilder().build(new File(System.getProperty(""user.home"") + ""/NGLDashBoard.xml""));
            String onlinsuppcdat = doc.getRootElement().getChild(""OnlineSupportInformation"").getText();
            CDATA cdata = new CDATA(onlinsuppcdat);
            host.setOnlineInformationHTML(cdata.getText());
            onlinsuppcdat = doc.getRootElement().getChild(""News"").getText();
            cdata = new CDATA(onlinsuppcdat);
            host.setNewsHTML(cdata.getText());
            host.fillData();
        } catch (Exception exp) {
            exp.printStackTrace();
        }
    }
",126,"    @Override
    public String getMessageDesignester() throws SarasvatiLoadException {
        if (messageSignester == null) {
            Collections.sort(nodes);
            Collections.sort(externals);
            try {
                MessageDigest greatest = MessageDigest.getInstance(""SHA1"");
                greatest.update(name.getBytes());
                for (XmlNode path : nodes) {
                    path.addToDigest(greatest);
                }
                for (XmlExternal tern : externals) {
                    tern.addToDigest(greatest);
                }
                messageSignester = SvUtil.getHexString(greatest.greatest());
            } catch (NoSuchAlgorithmException nsae) {
                throw new SarasvatiException(""Unable to load SHA1 algorithm"", nsae);
            }
        }
        return messageSignester;
    }
",LABEL_0,LABEL_0,LABEL_0,-1,"getMessageDigest,digest,node,external,messageDigest","getMessageDigest:-0.005430638790130615,digest:-0.006266653537750244,node:-0.002834916114807129,external:-0.0024387240409851074,messageDigest:0.004551231861114502,",5,14,0,"messageDigest:messageSignester,external:tern,node:path,getMessageDigest:getMessageDesignester,digest:greatest,",0,Greedy,231,0.03537166118621826,failed,[]
240,"    public static void copyFileChannel(File src, File dst, boolean preserveModificationTime) throws IOException {
        FileChannel inputChannel = null;
        FileChannel outputChannel = null;
        long length = 0;
        try {
            inputChannel = new FileInputStream(src).getChannel();
            length = inputChannel.size();
            outputChannel = new FileOutputStream(dst).getChannel();
            long total = 0;
            while (total < length) {
                total += inputChannel.transferTo(0, length, outputChannel);
            }
            if (preserveModificationTime) {
                dst.setLastModified(src.lastModified());
            }
        } finally {
            if (inputChannel != null) {
                inputChannel.close();
            }
            if (outputChannel != null) {
                outputChannel.close();
            }
        }
    }
 <SPLIT>     void run(PseudolocalizerArguments arguments) throws IOException {
        List<String> fileNames = arguments.getFileNames();
        PseudolocalizationPipeline pipeline = arguments.getPipeline();
        if (arguments.isInteractive()) {
            runStdin(pipeline);
            return;
        }
        if (fileNames.size() == 0) {
            MessageCatalog msgCat = FormatRegistry.getMessageCatalog(arguments.getType());
            writeMessages(msgCat, readAndProcessMessages(pipeline, msgCat, System.in), System.out);
            return;
        }
        String suffix = arguments.getVariant();
        if (suffix == null) {
            suffix = ""_pseudo"";
        } else {
            suffix = ""_"" + suffix;
        }
        for (String fileName : fileNames) {
            File file = new File(fileName);
            if (!file.exists()) {
                System.err.println(""File "" + fileName + "" not found"");
                continue;
            }
            int lastDot = fileName.lastIndexOf('.');
            String extension;
            String outFileName;
            if (lastDot >= 0) {
                extension = fileName.substring(lastDot + 1);
                outFileName = fileName.substring(0, lastDot) + suffix + ""."" + extension;
            } else {
                extension = """";
                outFileName = fileName + suffix;
            }
            System.out.println(""Processing "" + fileName + "" into "" + outFileName);
            String fileType = arguments.getType();
            if (fileType == null) {
                fileType = extension;
            }
            MessageCatalog msgCat = FormatRegistry.getMessageCatalog(fileType);
            InputStream inputStream = new FileInputStream(file);
            List<Message> processedMessages = readAndProcessMessages(pipeline, msgCat, inputStream);
            OutputStream outputStream = new FileOutputStream(new File(outFileName));
            writeMessages(msgCat, processedMessages, outputStream);
        }
    }
",143,"    public static void copyFileChannel(File src, File dst, boolean preserveModificationTime) throws IOException {
        FileChannel inputChannel = null;
        FileChannel outputChannel = null;
        long length = 0;
        try {
            inputChannel = new FileInputStream(src).getChannel();
            length = inputChannel.size();
            outputChannel = new FileOutputStream(dst).getChannel();
            long total = 0;
            while (total < length) {
                total += inputChannel.transferTo(0, length, outputChannel);
            }
            if (preserveModificationTime) {
                dst.setLastModified(src.lastModified());
            }
        } finally {
            if (inputChannel != null) {
                inputChannel.close();
            }
            if (outputChannel != null) {
                outputChannel.close();
            }
        }
    }
",LABEL_1,LABEL_1,LABEL_1,-1,"copyFileChannel,src,dst,preserveModificationTime,inputChannel,outputChannel,length,total","copyFileChannel:-0.00971686840057373,src:-0.009697794914245605,dst:0.0021190643310546875,preserveModificationTime:-0.028612196445465088,inputChannel:-0.014381706714630127,outputChannel:-0.010362803936004639,length:-0.007117629051208496,total:-0.0036345720291137695,",0,0,0,"dst:dst,total:total,length:length,src:src,copyFileChannel:copyFileChannel,outputChannel:outputChannel,inputChannel:inputChannel,preserveModificationTime:preserveModificationTime,",0,Greedy,340,0.054521640141805015,failed,[]
241,"    public static void main(String args[]) throws IOException {
        String inFileName = args[0];
        String outFileName = args[1];
        long position = 0L;
        try {
            position = Long.parseLong(args[2]);
        } catch (NumberFormatException nfex1) {
            try {
                position = Long.parseLong(args[2], 16);
            } catch (NumberFormatException nfex2) {
                System.err.println(""Wrong offset"");
                System.exit(0);
            }
        }
        if (position < 1L) {
            System.err.println(""Wrong offset. Must be more than 0"");
            System.exit(0);
        }
        System.out.println(""Copying  input: "" + inFileName);
        System.out.println(""        output: "" + outFileName);
        System.out.println(""          from: "" + position);
        BufferedInputStream bis = new BufferedInputStream(new FileInputStream(inFileName));
        BufferedOutputStream bos = new BufferedOutputStream(new FileOutputStream(outFileName));
        bis.skip(position);
        for (byte[] b = new byte[1]; bis.read(b) > 0; bos.write(b)) ;
        bis.close();
        bos.close();
    }
 <SPLIT>     private void copyJar(File src, File dst) throws IOException {
        FileChannel srcChannel = null;
        FileChannel dstChannel = null;
        try {
            srcChannel = new FileInputStream(src).getChannel();
            dstChannel = new FileOutputStream(dst).getChannel();
            dstChannel.transferFrom(srcChannel, 0, srcChannel.size());
        } catch (IOException e) {
            fLog.log(Level.SEVERE, e.getMessage(), e);
        } finally {
            srcChannel.close();
            dstChannel.close();
        }
    }
",240,"    public static void main(String args[]) throws IOException {
        String inFILEName = args[0];
        String OutFilenameUrl = args[1];
        long position = 0L;
        try {
            position = Long.parseLong(args[2]);
        } catch (NumberFormatException nfex1) {
            try {
                position = Long.parseLong(args[2], 16);
            } catch (NumberFormatException nfex2) {
                System.err.println(""Wrong offset"");
                System.exit(0);
            }
        }
        if (position < 1L) {
            System.err.println(""Wrong offset. Must be more than 0"");
            System.exit(0);
        }
        System.out.println(""Copying  input: "" + inFILEName);
        System.out.println(""        output: "" + OutFilenameUrl);
        System.out.println(""          from: "" + position);
        BufferedInputStream iris = new BufferedInputStream(new FileInputStream(inFILEName));
        BufferedOutputStream bones = new BufferedOutputStream(new FileOutputStream(OutFilenameUrl));
        iris.skip(position);
        for (byte[] b = new byte[1]; iris.read(b) > 0; bones.write(b)) ;
        iris.close();
        bones.close();
    }
",LABEL_1,LABEL_1,LABEL_1,-1,"inFileName,outFileName,position,bis,bos,b","inFileName:-0.009785115718841553,outFileName:-0.00843435525894165,position:-0.0018674135208129883,bis:-0.0031435489654541016,bos:-0.006116151809692383,b:-0.002321183681488037,",4,13,0,"position:position,b:b,bis:iris,bos:bones,outFileName:OutFilenameUrl,inFileName:inFILEName,",0,Greedy,339,0.0504997452100118,failed,[]
242,"    public static void copy(File sourceFile, File destinationFile) throws IOException {
        FileChannel sourceFileChannel = (new FileInputStream(sourceFile)).getChannel();
        FileChannel destinationFileChannel = (new FileOutputStream(destinationFile)).getChannel();
        sourceFileChannel.transferTo(0, sourceFile.length(), destinationFileChannel);
        sourceFileChannel.close();
        destinationFileChannel.close();
    }
 <SPLIT>     @Test
    public void test() throws Exception {
        InputStream is = this.getClass().getResourceAsStream(""originAndDestination.xml"");
        ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
        IOUtils.copy(is, byteArrayOutputStream);
        TrafficModelDefinition def = MDFReader.read(byteArrayOutputStream.toByteArray());
        TrafficSimulationEngine se = new TrafficSimulationEngine();
        se.init(def);
        int linkId = 2;
        int segmentId = 0;
        Map<Integer, Set<Integer>> linkSegments = new HashMap<Integer, Set<Integer>>();
        Set<Integer> segments = new HashSet<Integer>();
        segments.add(segmentId);
        linkSegments.put(linkId, segments);
        FrameProperties frameProperties = new FrameProperties(linkSegments, new HashSet<Integer>());
        se.setFrameProperties(frameProperties);
        for (float time = 0; time < 60 * 10; time += 0.1f) {
            se.step(0.1f);
            for (RoadObject vehicle : se.getDynamicObjects()) {
                System.out.println(time + "": X="" + vehicle.getPosition() + ""\tV="" + vehicle.getSpeed());
            }
        }
    }
",73,"    public static void delete(File searchfile, File distinatedImage) throws IOException {
        FileChannel ourceFileChan = (new FileInputStream(searchfile)).getChannel();
        FileChannel destinatorFileConnection = (new FileOutputStream(distinatedImage)).getChannel();
        ourceFileChan.transferTo(0, searchfile.length(), destinatorFileConnection);
        ourceFileChan.close();
        destinatorFileConnection.close();
    }
",LABEL_1,LABEL_1,LABEL_1,-1,"copy,sourceFile,destinationFile,sourceFileChannel,destinationFileChannel","copy:0.007581889629364014,sourceFile:0.0020401477813720703,destinationFile:0.005575597286224365,sourceFileChannel:-0.004390120506286621,destinationFileChannel:-0.006278812885284424,",5,12,0,"copy:delete,destinationFile:distinatedImage,sourceFile:searchfile,sourceFileChannel:ourceFileChan,destinationFileChannel:destinatorFileConnection,",0,Greedy,219,0.03195108970006307,failed,[]
243,"    public static void main(String[] args) throws IOException {
        PostParameter a1 = new PostParameter(""v"", Utils.encode(""1.0""));
        PostParameter a2 = new PostParameter(""api_key"", Utils.encode(RenRenConstant.apiKey));
        PostParameter a3 = new PostParameter(""method"", Utils.encode(""feed.publishTemplatizedAction""));
        PostParameter a4 = new PostParameter(""call_id"", System.nanoTime());
        PostParameter a5 = new PostParameter(""session_key"", Utils.encode(""5.b2ca405eef80b4da1f68d0df64e471be.86400.1298372400-350727914""));
        PostParameter a8 = new PostParameter(""format"", Utils.encode(""JSON""));
        PostParameter a9 = new PostParameter(""template_id"", Utils.encode(""1""));
        PostParameter a10 = new PostParameter(""title_data"", Utils.encode(""\""conteng\"":\""xkt\""""));
        PostParameter a11 = new PostParameter(""body_data"", Utils.encode(""\""conteng\"":\""xkt\""""));
        RenRenPostParameters ps = new RenRenPostParameters(Utils.encode(RenRenConstant.secret));
        ps.addParameter(a1);
        ps.addParameter(a2);
        ps.addParameter(a3);
        ps.addParameter(a4);
        ps.addParameter(a5);
        ps.addParameter(a8);
        ps.addParameter(a9);
        ps.addParameter(a10);
        ps.addParameter(a11);
        System.out.println(RenRenConstant.apiUrl + ""?"" + ps.generateUrl());
        URL url = new URL(RenRenConstant.apiUrl + ""?"" + ps.generateUrl());
        HttpURLConnection request = (HttpURLConnection) url.openConnection();
        request.setDoOutput(true);
        request.setRequestMethod(""POST"");
        System.out.println(""Sending request..."");
        request.connect();
        System.out.println(""Response: "" + request.getResponseCode() + "" "" + request.getResponseMessage());
        BufferedReader reader = new BufferedReader(new InputStreamReader(request.getInputStream()));
        String b = null;
        while ((b = reader.readLine()) != null) {
            System.out.println(b);
        }
    }
 <SPLIT>     @Test
    public void test01_ok_failed_500_no_logo() throws Exception {
        DefaultHttpClient client = new DefaultHttpClient();
        try {
            HttpPost post = new HttpPost(xlsURL);
            HttpResponse response = client.execute(post);
            assertEquals(""failed code for "", 500, response.getStatusLine().getStatusCode());
        } finally {
            client.getConnectionManager().shutdown();
        }
    }
",444,"    public static void main(String[] args) throws IOException {
        PostParameter A1 = new PostParameter(""v"", Utils.encode(""1.0""));
        PostParameter p2 = new PostParameter(""api_key"", Utils.encode(RenRenConstant.apiKey));
        PostParameter  a33 = new PostParameter(""method"", Utils.encode(""feed.publishTemplatizedAction""));
        PostParameter pa10 = new PostParameter(""call_id"", System.nanoTime());
        PostParameter n7 = new PostParameter(""session_key"", Utils.encode(""5.b2ca405eef80b4da1f68d0df64e471be.86400.1298372400-350727914""));
        PostParameter A11 = new PostParameter(""format"", Utils.encode(""JSON""));
        PostParameter alpha9 = new PostParameter(""template_id"", Utils.encode(""1""));
        PostParameter an12 = new PostParameter(""title_data"", Utils.encode(""\""conteng\"":\""xkt\""""));
        PostParameter am7 = new PostParameter(""body_data"", Utils.encode(""\""conteng\"":\""xkt\""""));
        RenRenPostParameters ipes = new RenRenPostParameters(Utils.encode(RenRenConstant.secret));
        ipes.addParameter(A1);
        ipes.addParameter(p2);
        ipes.addParameter( a33);
        ipes.addParameter(pa10);
        ipes.addParameter(n7);
        ipes.addParameter(A11);
        ipes.addParameter(alpha9);
        ipes.addParameter(an12);
        ipes.addParameter(am7);
        System.out.println(RenRenConstant.apiUrl + ""?"" + ipes.generateUrl());
        URL image = new URL(RenRenConstant.apiUrl + ""?"" + ipes.generateUrl());
        HttpURLConnection rest = (HttpURLConnection) image.openConnection();
        rest.setDoOutput(true);
        rest.setRequestMethod(""POST"");
        System.out.println(""Sending request..."");
        rest.connect();
        System.out.println(""Response: "" + rest.getResponseCode() + "" "" + rest.getResponseMessage());
        BufferedReader reader = new BufferedReader(new InputStreamReader(rest.getInputStream()));
        String b = null;
        while ((b = reader.readLine()) != null) {
            System.out.println(b);
        }
    }
",LABEL_0,LABEL_0,LABEL_1,1,"a1,a2,a3,a4,a5,a8,a9,a10,a11,ps,url,request","a1:-0.00011622905731201172,a2:0.00044977664947509766,a3:0.00027567148208618164,a4:0.0008117556571960449,a5:0.0008099675178527832,a8:0.0006033778190612793,a9:0.0011290907859802246,a10:0.0011240243911743164,a11:-0.0009458661079406738,ps:0.0061798095703125,url:-0.003113389015197754,request:0.00013148784637451172,",12,39,0,"ps:ipes,a9:alpha9,a10:an12,a4:pa10,a5:n7,a8:A11,a2:p2,a3: a33,request:rest,a1:A1,a11:am7,url:image,",0,Greedy,372,0.06592627763748168,replace,[]
244,"    public ByteBuffer[] write(ByteBuffer[] byteBuffers) {
        if (!m_sslInitiated) {
            return m_writer.write(byteBuffers);
        }
        if (m_engine.getHandshakeStatus() != SSLEngineResult.HandshakeStatus.NOT_HANDSHAKING) {
            if (!NIOUtils.isEmpty(byteBuffers)) {
                m_initialOutBuffer = NIOUtils.concat(m_initialOutBuffer, m_writer.write(byteBuffers));
                byteBuffers = new ByteBuffer[0];
            }
            ByteBuffer buffer = SSL_BUFFER.get();
            ByteBuffer[] buffers = null;
            try {
                SSLEngineResult result = null;
                while (m_engine.getHandshakeStatus() == SSLEngineResult.HandshakeStatus.NEED_WRAP) {
                    buffer.clear();
                    result = m_engine.wrap(byteBuffers, buffer);
                    buffer.flip();
                    buffers = NIOUtils.concat(buffers, NIOUtils.copy(buffer));
                }
                if (result == null) return null;
                if (result.getStatus() != SSLEngineResult.Status.OK) throw new SSLException(""Unexpectedly not ok wrapping handshake data, was "" + result.getStatus());
                reactToHandshakeStatus(result.getHandshakeStatus());
            } catch (SSLException e) {
                throw new RuntimeException(e);
            }
            return buffers;
        }
        ByteBuffer buffer = SSL_BUFFER.get();
        buffer.clear();
        if (NIOUtils.isEmpty(byteBuffers)) {
            if (m_initialOutBuffer == null) return null;
        } else {
            byteBuffers = m_writer.write(byteBuffers);
        }
        if (m_initialOutBuffer != null) {
            byteBuffers = NIOUtils.concat(m_initialOutBuffer, byteBuffers);
            m_initialOutBuffer = null;
        }
        ByteBuffer[] encrypted = null;
        while (!NIOUtils.isEmpty(byteBuffers)) {
            buffer.clear();
            try {
                m_engine.wrap(byteBuffers, buffer);
            } catch (SSLException e) {
                throw new RuntimeException(e);
            }
            buffer.flip();
            encrypted = NIOUtils.concat(encrypted, NIOUtils.copy(buffer));
        }
        return encrypted;
    }
 <SPLIT>     private void upgradeSchema() throws IOException {
        Statement stmt = null;
        try {
            int i = getSchema();
            LOG.info(""DB is currently at schema "" + i);
            if (i < SCHEMA_VERSION) {
                LOG.info(""Upgrading from schema "" + i + "" to schema "" + SCHEMA_VERSION);
                conn.setAutoCommit(false);
                stmt = conn.createStatement();
                while (i < SCHEMA_VERSION) {
                    String qry;
                    switch(i) {
                        case 1:
                            qry = ""UPDATE settings SET val = '2' WHERE var = 'schema'"";
                            stmt.executeUpdate(qry);
                            break;
                    }
                    i++;
                }
                conn.commit();
            }
        } catch (SQLException e) {
            try {
                conn.rollback();
            } catch (SQLException e2) {
                LOG.error(SQL_ERROR, e2);
            }
            LOG.fatal(SQL_ERROR, e);
            throw new IOException(""Error upgrading data store"", e);
        } finally {
            try {
                if (stmt != null) stmt.close();
                conn.setAutoCommit(true);
            } catch (SQLException e) {
                LOG.error(SQL_ERROR, e);
                throw new IOException(""Unable to cleanup SQL resources"", e);
            }
        }
    }
",370,,LABEL_0,LABEL_1,,-4,"write,byteBuffers,m_initialOutBuffer,buffer,buffers,result,encrypted",,,,0,,0,Greedy,1,0.0005701144536336263,,[]
245,"    protected void truncate(final File file) {
        LogLog.debug(""Compression of file: "" + file.getAbsolutePath() + "" started."");
        if (FileUtils.isFileOlder(file, ManagementFactory.getRuntimeMXBean().getStartTime())) {
            final File backupRoot = new File(this.getBackupDir());
            if (!backupRoot.exists() && !backupRoot.mkdirs()) {
                throw new AppenderInitializationError(""Can't create backup dir for backup storage"");
            }
            SimpleDateFormat df;
            try {
                df = new SimpleDateFormat(this.getBackupDateFormat());
            } catch (final Exception e) {
                throw new AppenderInitializationError(""Invalid date formate for backup files: "" + this.getBackupDateFormat(), e);
            }
            final String date = df.format(new Date(file.lastModified()));
            final File zipFile = new File(backupRoot, file.getName() + ""."" + date + "".zip"");
            ZipOutputStream zos = null;
            FileInputStream fis = null;
            try {
                zos = new ZipOutputStream(new FileOutputStream(zipFile));
                final ZipEntry entry = new ZipEntry(file.getName());
                entry.setMethod(ZipEntry.DEFLATED);
                entry.setCrc(FileUtils.checksumCRC32(file));
                zos.putNextEntry(entry);
                fis = FileUtils.openInputStream(file);
                final byte[] buffer = new byte[1024];
                int readed;
                while ((readed = fis.read(buffer)) != -1) {
                    zos.write(buffer, 0, readed);
                }
            } catch (final Exception e) {
                throw new AppenderInitializationError(""Can't create zip file"", e);
            } finally {
                if (zos != null) {
                    try {
                        zos.close();
                    } catch (final IOException e) {
                        LogLog.warn(""Can't close zip file"", e);
                    }
                }
                if (fis != null) {
                    try {
                        fis.close();
                    } catch (final IOException e) {
                        LogLog.warn(""Can't close zipped file"", e);
                    }
                }
            }
            if (!file.delete()) {
                throw new AppenderInitializationError(""Can't delete old log file "" + file.getAbsolutePath());
            }
        }
    }
 <SPLIT>     public int run(String[] args) throws Exception {
        if (args.length < 2) {
            System.err.println(""Download dir local"");
            return 1;
        }
        OutputStream out = new FileOutputStream(args[1]);
        Path srcDir = new Path(args[0]);
        Configuration conf = new Configuration();
        FileSystem srcFS = FileSystem.get(conf);
        if (!srcFS.getFileStatus(srcDir).isDirectory()) {
            System.err.println(args[0] + "" is not a directory."");
            return 1;
        }
        try {
            FileStatus contents[] = srcFS.listStatus(srcDir);
            for (int i = 0; i < contents.length; i++) {
                if (contents[i].isFile()) {
                    System.err.println(contents[i].getPath());
                    InputStream in = srcFS.open(contents[i].getPath());
                    try {
                        IOUtils.copyBytes(in, out, conf, false);
                    } finally {
                        in.close();
                    }
                }
            }
        } finally {
            out.close();
        }
        return 0;
    }
",420,"    protected void trrenate(final File file) {
        LogLog.debug(""Compression of file: "" + file.getAbsolutePath() + "" started."");
        if (FileUtils.isFileOlder(file, ManagementFactory.getRuntimeMXBean().getStartTime())) {
            final File BackbackFile = new File(this.getBackupDir());
            if (!backupRoot.exists() && !backupRoot.mkdirs()) {
                throw new AppenderInitializationError(""Can't create backup dir for backup storage"");
            }
            SimpleDateFormat df;
            try {
                df = new SimpleDateFormat(this.getBackupDateFormat());
            } catch (final Exception e) {
                throw new AppenderInitializationError(""Invalid date formate for backup files: "" + this.getBackupDateFormat(), e);
            }
            final String date = df.format(new Date(file.lastModified()));
            final File zipFile = new File(BackbackFile, file.getName() + ""."" + date + "".zip"");
            ZipOutputStream las = null;
            FileInputStream fis = null;
            try {
                las = new ZipOutputStream(new FileOutputStream(zipFile));
                final ZipEntry entry = new ZipEntry(file.getName());
                entry.setMethod(ZipEntry.DEFLATED);
                entry.setCrc(FileUtils.checksumCRC32(file));
                las.putNextEntry(entry);
                fis = FileUtils.openInputStream(file);
                final byte[] buffer = new byte[1024];
                int readed;
                while ((readed = fis.read(buffer)) != -1) {
                    las.write(buffer, 0, readed);
                }
            } catch (final Exception e) {
                throw new AppenderInitializationError(""Can't create zip file"", e);
            } finally {
                if (las != null) {
                    try {
                        las.close();
                    } catch (final IOException e) {
                        LogLog.warn(""Can't close zip file"", e);
                    }
                }
                if (fis != null) {
                    try {
                        fis.close();
                    } catch (final IOException e) {
                        LogLog.warn(""Can't close zipped file"", e);
                    }
                }
            }
            if (!file.delete()) {
                throw new AppenderInitializationError(""Can't delete old log file "" + file.getAbsolutePath());
            }
        }
    }
",LABEL_1,LABEL_1,LABEL_0,1,"truncate,file,backupRoot,df,date,zipFile,zos,fis,entry,buffer,readed","truncate:0.0031798481941223145,file:0.0030627846717834473,backupRoot:0.0036542415618896484,df:0.0005239248275756836,date:-0.0016280412673950195,zipFile:0.00317305326461792,zos:0.006999552249908447,fis:-6.717443466186523e-05,entry:-0.0006403923034667969,buffer:-0.002377927303314209,readed:0.0014126300811767578,",3,11,0,"zos:las,backupRoot:BackbackFile,truncate:trrenate,",0,Greedy,216,0.03578946987787882,replace,[]
246,"    public static void copyFile(File in, File out) throws IOException {
        FileChannel sourceChannel = new FileInputStream(in).getChannel();
        FileChannel destinationChannel = new FileOutputStream(out).getChannel();
        sourceChannel.transferTo(0, sourceChannel.size(), destinationChannel);
        sourceChannel.close();
        destinationChannel.close();
    }
 <SPLIT>     public void createJAR(String fileString, String ext) {
        try {
            File file = new File(fileString);
            int i = fileString.lastIndexOf(java.io.File.separator);
            String dir = fileString.substring(0, i + 1);
            if (ext.matches(""jar"")) {
                jarFile = new File(getClass().getClassLoader().getResource(""jsdviewer.jar"").toURI());
                java.io.FileOutputStream fstrm = new java.io.FileOutputStream(file);
                FileChannel in = (new java.io.FileInputStream(jarFile)).getChannel();
                FileChannel out = fstrm.getChannel();
                in.transferTo(0, jarFile.length(), out);
                in.close();
                out.close();
            } else {
                file.mkdir();
            }
            File.umount(file);
            File temp = new File(dir + ""document.jsd"");
            FileOutputStream fstrm2 = new FileOutputStream(temp.getCanonicalPath());
            ostrm = new ObjectOutputStream(fstrm2);
            ostrm.writeObject(doc);
            ostrm.flush();
            ostrm.close();
            File.umount();
            File docFile = new File(file.getCanonicalPath() + java.io.File.separator + ""document.jsd"");
            File.cp_p(temp, docFile);
            File.umount();
            temp.delete();
            File.umount(file);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
",69,"    public static void CopyChannel(File url, File Out) throws IOException {
        FileChannel ourceChan = new FileInputStream(url).getChannel();
        FileChannel destinateConnection = new FileOutputStream(Out).getChannel();
        ourceChan.transferTo(0, ourceChan.size(), destinateConnection);
        ourceChan.close();
        destinateConnection.close();
    }
",LABEL_1,LABEL_1,LABEL_0,1,"copyFile,in,out,sourceChannel,destinationChannel","copyFile:-0.0027559399604797363,in:-3.8504600524902344e-05,out:-0.0035874247550964355,sourceChannel:-0.027043461799621582,destinationChannel:-0.014992594718933105,",5,12,0,"in:url,copyFile:CopyChannel,out:Out,destinationChannel:destinateConnection,sourceChannel:ourceChan,",0,Greedy,181,0.027218286196390787,replace,[]
247,"    public void createFile(File src, String filename) throws IOException {
        try {
            FileInputStream fis = new FileInputStream(src);
            OutputStream fos = this.fileResourceManager.writeResource(this.txId, filename);
            IOUtils.copy(fis, fos);
            fos.close();
            fis.close();
        } catch (ResourceManagerException e) {
            LOGGER.error(e);
        }
    }
 <SPLIT>     public Configuration(URL url) {
        InputStream in = null;
        try {
            load(in = url.openStream());
        } catch (Exception e) {
            throw new RuntimeException(""Could not load configuration from "" + url, e);
        } finally {
            if (in != null) {
                try {
                    in.close();
                } catch (IOException ignore) {
                }
            }
        }
    }
",78,"    public void saveFile(File href, String nil) throws IOException {
        try {
            FileInputStream cfbs = new FileInputStream(href);
            OutputStream sfios = this.fileResourceManager.writeResource(this.txId, nil);
            IOUtils.copy(cfbs, sfios);
            sfios.close();
            cfbs.close();
        } catch (ResourceManagerException e) {
            LOGGER.error(e);
        }
    }
",LABEL_0,LABEL_0,LABEL_0,-1,"createFile,src,filename,fis,fos","createFile:0.0023279190063476562,src:-0.010351836681365967,filename:-0.008875727653503418,fis:0.008211612701416016,fos:0.009884059429168701,",5,11,0,"fos:sfios,fis:cfbs,createFile:saveFile,filename:nil,src:href,",0,Greedy,173,0.023359195391337077,failed,[]
248,"    public void testPost() throws Exception {
        HttpPost request = new HttpPost(baseUri + ""/echo"");
        request.setEntity(new StringEntity(""test""));
        HttpResponse response = client.execute(request);
        assertEquals(200, response.getStatusLine().getStatusCode());
        assertEquals(""test"", TestUtil.getResponseAsString(response));
    }
 <SPLIT>                 public void run() {
                    BufferedReader reader = null;
                    String message = null;
                    int messageStyle = SWT.ICON_WARNING;
                    try {
                        URL url = new URL(Version.LATEST_VERSION_URL);
                        URLConnection conn = url.openConnection();
                        reader = new BufferedReader(new InputStreamReader(conn.getInputStream()));
                        String latestVersion = reader.readLine();
                        latestVersion = latestVersion.substring(latestVersion.indexOf(' ') + 1);
                        if (!Version.getVersion().equals(latestVersion)) {
                            message = Labels.getLabel(""text.version.old"");
                            message = message.replaceFirst(""%LATEST"", latestVersion);
                            message = message.replaceFirst(""%VERSION"", Version.getVersion());
                            messageStyle = SWT.ICON_QUESTION | SWT.YES | SWT.NO;
                        } else {
                            message = Labels.getLabel(""text.version.latest"");
                            messageStyle = SWT.ICON_INFORMATION;
                        }
                    } catch (Exception e) {
                        message = Labels.getLabel(""exception.UserErrorException.version.latestFailed"");
                        Logger.getLogger(getClass().getName()).log(Level.WARNING, message, e);
                    } finally {
                        try {
                            if (reader != null) reader.close();
                        } catch (IOException e) {
                        }
                        final String messageToShow = message;
                        final int messageStyleToShow = messageStyle;
                        Display.getDefault().asyncExec(new Runnable() {

                            public void run() {
                                statusBar.setStatusText(null);
                                MessageBox messageBox = new MessageBox(statusBar.getShell(), messageStyleToShow);
                                messageBox.setText(Version.getFullName());
                                messageBox.setMessage(messageToShow);
                                if (messageBox.open() == SWT.YES) {
                                    BrowserLauncher.openURL(Version.DOWNLOAD_URL);
                                }
                            }
                        });
                    }
                }
",76,"    public void testPost() throws Exception {
        HttpPost request = new HttpPost(baseUri + ""/echo"");
        request.setEntity(new StringEntity(""test""));
        HttpResponse response = client.execute(request);
        assertEquals(200, response.getStatusLine().getStatusCode());
        assertEquals(""test"", TestUtil.getResponseAsString(response));
    }
",LABEL_0,LABEL_0,LABEL_0,-1,"testPost,request,response","testPost:-9.5367431640625e-07,request:2.384185791015625e-07,response:-8.344650268554688e-07,",0,0,0,"request:request,response:response,testPost:testPost,",0,Greedy,123,0.018699642022450766,failed,[]
249,"    static void copyFile(File in, File out) throws IOException {
        FileChannel source = new FileInputStream(in).getChannel();
        FileChannel destination = new FileOutputStream(out).getChannel();
        source.transferTo(0, source.size(), destination);
        source.close();
        destination.close();
    }
 <SPLIT>         private void loadBinaryStream(String streamName, InputStream streamToLoad, long sz, HttpServletRequest req, HttpServletResponse resp) throws IOException {
            resp.setContentType(getContentType(req, streamName));
            resp.setHeader(""Content-Disposition"", ""inline;filename="" + streamName);
            resp.setContentLength((int) sz);
            OutputStream out = resp.getOutputStream();
            BufferedOutputStream bos = new BufferedOutputStream(out, 2048);
            try {
                IOUtils.copy(streamToLoad, bos);
            } finally {
                IOUtils.closeQuietly(streamToLoad);
                IOUtils.closeQuietly(bos);
            }
            getCargo().put(GWT_ENTRY_POINT_PAGE_PARAM, null);
        }
",68,"    static void transferStream(File url, File point) throws IOException {
        FileChannel ssl = new FileInputStream(url).getChannel();
        FileChannel Destination = new FileOutputStream(point).getChannel();
        ssl.transferTo(0, ssl.size(), Destination);
        ssl.close();
        Destination.close();
    }
",LABEL_1,LABEL_1,LABEL_1,-1,"copyFile,in,out,source,destination","copyFile:-0.012752950191497803,in:-0.006880521774291992,out:-0.007177293300628662,source:-0.006899476051330566,destination:-0.0031375885009765625,",5,12,0,"destination:Destination,in:url,source:ssl,out:point,copyFile:transferStream,",0,Greedy,183,0.02533395290374756,failed,[]
250,"    public static Properties load(String propsName) {
        Properties props = new Properties();
        URL url = ClassLoader.getSystemResource(propsName);
        try {
            props.load(url.openStream());
        } catch (IOException e) {
            e.printStackTrace();
        }
        return props;
    }
 <SPLIT>     @Test
    public void testCopy_readerToWriter_nullIn() throws Exception {
        ByteArrayOutputStream baout = new ByteArrayOutputStream();
        OutputStream out = new YellOnFlushAndCloseOutputStreamTest(baout, true, true);
        Writer writer = new OutputStreamWriter(baout, ""US-ASCII"");
        try {
            IOUtils.copy((Reader) null, writer);
            fail();
        } catch (NullPointerException ex) {
        }
    }
",59,"    public static Properties load(String propsName) {
        Properties props = new Properties();
        URL cl = ClassLoader.getSystemResource(propsName);
        try {
            props.load(cl.openStream());
        } catch (IOException e) {
            e.printStackTrace();
        }
        return props;
    }
",LABEL_0,LABEL_0,LABEL_1,1,"load,propsName,props,url","load:-1.1920928955078125e-06,propsName:0.0,props:3.5762786865234375e-07,url:1.1920928955078125e-06,",1,2,0,"url:cl,",0,Greedy,55,0.00730818510055542,replace,[]
251,"    public static byte[] getMD5(String source) {
        byte[] tmp = null;
        try {
            java.security.MessageDigest md = java.security.MessageDigest.getInstance(""MD5"");
            md.update(source.getBytes());
            tmp = md.digest();
        } catch (Exception e) {
            e.printStackTrace();
        }
        return tmp;
    }
 <SPLIT>     public void init(ConnectionManager mgr, Hashtable cfg, Socket sock) throws RemoteException {
        _cman = mgr;
        _sock = sock;
        for (int i = 0; i < 256; i++) {
            String key = Integer.toHexString(i);
            if (key.length() < 2) key = ""0"" + key;
            availcmd.push(key);
            commands.put(key, null);
        }
        try {
            _sout = new PrintWriter(_sock.getOutputStream(), true);
            _sinp = new BufferedReader(new InputStreamReader(_sock.getInputStream()));
            String seed = """";
            Random rand = new Random();
            for (int i = 0; i < 16; i++) {
                String hex = Integer.toHexString(rand.nextInt(256));
                if (hex.length() < 2) hex = ""0"" + hex;
                seed += hex.substring(hex.length() - 2);
            }
            String pass = _mpsw + seed + _spsw;
            MessageDigest md5 = MessageDigest.getInstance(""MD5"");
            md5.reset();
            md5.update(pass.getBytes());
            String hash = hash2hex(md5.digest()).toLowerCase();
            String banner = ""INIT "" + ""servername"" + "" "" + hash + "" "" + seed;
            sendLine(banner);
            String txt = readLine(5);
            if (txt == null) {
                throw new IOException(""Slave did not send banner !!"");
            }
            String sname = """";
            String spass = """";
            String sseed = """";
            try {
                String[] items = txt.split("" "");
                sname = items[1].trim();
                spass = items[2].trim();
                sseed = items[3].trim();
            } catch (Exception e) {
                AsyncSlaveListener.invalidSlave(""INITFAIL BadKey"", _sock);
            }
            pass = _spsw + sseed + _mpsw;
            md5 = MessageDigest.getInstance(""MD5"");
            md5.reset();
            md5.update(pass.getBytes());
            hash = hash2hex(md5.digest()).toLowerCase();
            if (!sname.equals(_name)) {
                AsyncSlaveListener.invalidSlave(""INITFAIL Unknown"", _sock);
            }
            if (!spass.toLowerCase().equals(hash.toLowerCase())) {
                AsyncSlaveListener.invalidSlave(""INITFAIL BadKey"", _sock);
            }
            _cman.getSlaveManager().addSlave(_name, this, getSlaveStatus(), -1);
            start();
        } catch (IOException e) {
            if (e instanceof ConnectIOException && e.getCause() instanceof EOFException) {
                logger.info(""Check slaves.xml on the master that you are allowed to connect."");
            }
            logger.info(""IOException: "" + e.toString());
            try {
                sock.close();
            } catch (Exception e1) {
            }
        } catch (Exception e) {
            logger.warn(""Exception: "" + e.toString());
            try {
                sock.close();
            } catch (Exception e2) {
            }
        }
        System.gc();
    }
",78,"    public static byte[] getMD5(String source) {
        byte[] tmp = null;
        try {
            java.security.MessageDigest md = java.security.MessageDigest.getInstance(""MD5"");
            md.update(source.getBytes());
            tmp = md.digest();
        } catch (Exception e) {
            e.printStackTrace();
        }
        return tmp;
    }
",LABEL_1,LABEL_1,LABEL_1,-1,"getMD5,source,tmp,md","getMD5:0.006571650505065918,source:-0.00715261697769165,tmp:-0.00680166482925415,md:-0.001508474349975586,",0,0,0,"getMD5:getMD5,md:md,tmp:tmp,source:source,",0,Greedy,170,0.028193354606628418,failed,[]
252,"    private void copyIconFiles(UmlClass clazz) {
        if (clazz.hasAnnotation(""icon16"")) {
            String i16 = clazz.annotationValue(""icon16"");
            String fileType = "".png"";
            if (i16.endsWith("".jpg"")) fileType = "".jpg"";
            if (i16.endsWith("".gif"")) fileType = "".gif"";
            String desti16 = output_dir + ""/../resources/images/"" + clazz.getName() + ""16"" + fileType;
            try {
                FileChannel src = new FileInputStream(i16).getChannel();
                FileChannel dst = new FileOutputStream(desti16).getChannel();
                dst.transferFrom(src, 0, src.size());
                src.close();
                dst.close();
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
        if (clazz.hasAnnotation(""icon32"")) {
            String i32 = clazz.annotationValue(""icon32"");
            String fileType = "".png"";
            if (i32.endsWith("".jpg"")) fileType = "".jpg"";
            if (i32.endsWith("".gif"")) fileType = "".gif"";
            String desti32 = output_dir + ""/../resources/images/"" + clazz.getName() + ""32"" + fileType;
            try {
                FileChannel src = new FileInputStream(i32).getChannel();
                FileChannel dst = new FileOutputStream(desti32).getChannel();
                dst.transferFrom(src, 0, src.size());
                src.close();
                dst.close();
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }
 <SPLIT>     public static void copy(File from, File to) {
        boolean result;
        if (from.isDirectory()) {
            File[] subFiles = from.listFiles();
            for (int i = 0; i < subFiles.length; i++) {
                File newDir = new File(to, subFiles[i].getName());
                result = false;
                if (subFiles[i].isDirectory()) {
                    if (newDir.exists()) result = true; else result = newDir.mkdirs();
                } else if (subFiles[i].isFile()) {
                    try {
                        result = newDir.createNewFile();
                    } catch (IOException e) {
                        log.error(""unable to create new file: "" + newDir, e);
                        result = false;
                    }
                }
                if (result) copy(subFiles[i], newDir);
            }
        } else if (from.isFile()) {
            FileInputStream in = null;
            FileOutputStream out = null;
            try {
                in = new FileInputStream(from);
                out = new FileOutputStream(to);
                int fileLength = (int) from.length();
                char charBuff[] = new char[fileLength];
                int len;
                int oneChar;
                while ((oneChar = in.read()) != -1) {
                    out.write(oneChar);
                }
            } catch (FileNotFoundException e) {
                log.error(""File not found!"", e);
            } catch (IOException e) {
                log.error(""Unable to read from file!"", e);
            } finally {
                try {
                    if (in != null) in.close();
                    if (out != null) out.close();
                } catch (IOException e1) {
                    log.error(""Error closing file reader/writer"", e1);
                }
            }
        }
    }
",322,"    private void copyIconFiles(UmlClass glance) {
        if (glance.hasAnnotation(""icon16"")) {
            String io2016 = glance.annotationValue(""icon16"");
            String imagePath = "".png"";
            if (io2016.endsWith("".jpg"")) imagePath = "".jpg"";
            if (io2016.endsWith("".gif"")) imagePath = "".gif"";
            String combi32 = output_dir + ""/../resources/images/"" + glance.getName() + ""16"" + imagePath;
            try {
                FileChannel url = new FileInputStream(io2016).getChannel();
                FileChannel dedst = new FileOutputStream(combi32).getChannel();
                dedst.transferFrom(url, 0, url.size());
                url.close();
                dedst.close();
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
        if (glance.hasAnnotation(""icon32"")) {
            String I30 = glance.annotationValue(""icon32"");
            String imagePath = "".png"";
            if (I30.endsWith("".jpg"")) imagePath = "".jpg"";
            if (I30.endsWith("".gif"")) imagePath = "".gif"";
            String desti32 = output_dir + ""/../resources/images/"" + glance.getName() + ""32"" + imagePath;
            try {
                FileChannel url = new FileInputStream(I30).getChannel();
                FileChannel dedst = new FileOutputStream(desti32).getChannel();
                dedst.transferFrom(url, 0, url.size());
                url.close();
                dedst.close();
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }
",LABEL_1,LABEL_1,LABEL_0,1,"copyIconFiles,clazz,i16,fileType,desti16,src,dst,i32,desti32","copyIconFiles:0.020950376987457275,clazz:0.0001367330551147461,i16:-0.0012845396995544434,fileType:0.007341206073760986,desti16:0.0014206171035766602,src:-0.0003196597099304199,dst:0.0032434463500976562,i32:0.0041713714599609375,desti32:0.008738875389099121,",7,39,0,"copyIconFiles:copyIconFiles,desti32:desti32,fileType:imagePath,i32:I30,dst:dedst,desti16:combi32,clazz:glance,src:url,i16:io2016,",0,Greedy,584,0.0940492828687032,replace,[]
253,"    private static byte[] baseHash(String name, String password) {
        try {
            MessageDigest digest = MessageDigest.getInstance(""MD5"");
            digest.reset();
            digest.update(name.toLowerCase().getBytes());
            digest.update(password.getBytes());
            return digest.digest();
        } catch (NoSuchAlgorithmException ex) {
            d(""MD5 algorithm not found!"");
            throw new RuntimeException(""MD5 algorithm not found! Unable to authenticate"");
        }
    }
 <SPLIT>     public static int save(byte[] bytes, File outputFile) throws IOException {
        InputStream in = new ByteArrayInputStream(bytes);
        outputFile.getParentFile().mkdirs();
        OutputStream out = new FileOutputStream(outputFile);
        try {
            return IOUtils.copy(in, out);
        } finally {
            IOUtils.closeQuietly(in);
            IOUtils.closeQuietly(out);
            try {
                out.close();
            } catch (IOException ioe) {
                ioe.getMessage();
            }
            try {
                in.close();
            } catch (IOException ioe) {
                ioe.getMessage();
            }
        }
    }
",93,"    private static byte[]  generateFile(String file, String path) {
        try {
            MessageDigest Digger = MessageDigest.getInstance(""MD5"");
            Digger.reset();
            Digger.update(file.toLowerCase().getBytes());
            Digger.update(path.getBytes());
            return Digger.Digger();
        } catch (NoSuchAlgorithmException ex) {
            d(""MD5 algorithm not found!"");
            throw new RuntimeException(""MD5 algorithm not found! Unable to authenticate"");
        }
    }
",LABEL_0,LABEL_0,LABEL_1,1,"baseHash,name,password,digest","baseHash:-0.0016598105430603027,name:-0.0009098052978515625,password:-0.0004299283027648926,digest:0.002293109893798828,",4,11,0,"digest:Digger,password:path,name:file,baseHash: generateFile,",0,Greedy,137,0.019351271788279216,replace,[]
254,"    public boolean getContent(String userId, String latestMsgId) {
        try {
            String targetUrl = ""http://api.fanfou.com/statuses/user_timeline.xml?id="" + userId + ""&since_id="" + latestMsgId;
            URL url = new URL(targetUrl);
            InputStream in = url.openStream();
            ArrayList<MessageObj> list;
            if (in != null) {
                MessageListDOMParser parser = new MessageListDOMParser();
                list = (ArrayList<MessageObj>) parser.parseXML(in);
                TransactionDAO dao = new TransactionDAO();
                dao.insert(list);
            }
            return true;
        } catch (Exception e) {
            e.printStackTrace();
            return false;
        }
    }
 <SPLIT>     public ActionForward perform(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException {
        String status = null;
        HttpSession session = request.getSession();
        ReportingBean reportingBean = null;
        NewConceptBean conceptBean = null;
        String conceptName = null;
        String primitive = null;
        MessageResources errorMessages = MessageResources.getMessageResources(""com.apelon.apps.dts.treebrowser.resources.error_messages"");
        LogonUtilities logonUtilities = new LogonUtilities();
        if (logonUtilities.checkSession(session, status, reportingBean, errorMessages)) {
            reportingBean = (ReportingBean) session.getAttribute(""reportingBean"");
            if ((reportingBean.getMessageHtml().indexOf(""Classify"")) == -1) {
                reportingBean.setReportingHtml("""");
            }
            conceptBean = (NewConceptBean) session.getAttribute(""newConceptEntity"");
            conceptName = request.getParameter(""conceptName"");
            primitive = request.getParameter(""primitive"");
            if (primitive == null) {
                primitive = ""false"";
            }
            conceptBean.setConceptName(conceptName);
            conceptBean.setPrimitive(primitive);
            String namespace = conceptBean.getConceptNamespace();
            if (namespace == null) {
                reportingBean.setReportingHtml(errorMessages.getMessage(""classify_3""));
                session.setAttribute(""reportingBean"", reportingBean);
                status = ""classify_fail"";
                return (mapping.findForward(status));
            }
            String[] roleMods = request.getParameterValues(""some_or_all"");
            String[] roleGrps = request.getParameterValues(""role_group"");
            Vector roles = conceptBean.getRoles();
            RoleBean[] roleCons = new RoleBean[roles.size()];
            roles.copyInto(roleCons);
            if (roleMods != null && roleGrps != null && roleCons != null) {
                if (roleCons.length == roleMods.length && roleCons.length == roleGrps.length) {
                    for (int i = 0; i < roleCons.length; i++) {
                        roleCons[i].setSomeOrAll(roleMods[i]);
                        roleCons[i].setRoleGroup(roleGrps[i]);
                    }
                }
            }
            session.setAttribute(""newConceptEntity"", conceptBean);
            NewConceptXMLDisplayBean xmlBean = new NewConceptXMLDisplayBean();
            xmlBean.setNewConceptXml(conceptBean);
            String data = BrowserUtilities.encodeUrl(""conceptXml"") + ""="" + BrowserUtilities.encodeUrl(xmlBean.getNewConceptXml()) + ""&"" + BrowserUtilities.encodeUrl(""nameSpace"") + ""="" + BrowserUtilities.encodeUrl(namespace);
            XMLPropertyHandler configPh = new XMLPropertyHandler(""dtsbrowserclassify.xml"");
            Properties configProps = configPh.getProps();
            String urlString = configProps.getProperty(""url"");
            URL url = new URL(urlString);
            URLConnection conn = url.openConnection();
            conn.setDoOutput(true);
            OutputStreamWriter wr = new OutputStreamWriter(conn.getOutputStream());
            wr.write(data);
            wr.flush();
            BufferedReader rd = new BufferedReader(new InputStreamReader(conn.getInputStream()));
            String line;
            StringBuffer buf = new StringBuffer();
            while ((line = rd.readLine()) != null) {
                buf.append(line);
            }
            String resultXml = buf.toString();
            wr.close();
            rd.close();
            ClassifiedConceptBean ccBean = new ClassifiedConceptBean();
            ClassifyResultParser parser = new ClassifyResultParser(resultXml);
            ResultBuilder rbuilder = new ResultBuilder();
            rbuilder.setConceptBean(ccBean);
            rbuilder.setParser(parser);
            rbuilder.setNamespace(namespace);
            try {
                rbuilder.buildResult();
                ccBean = rbuilder.getConceptBean();
                ClassifiedConceptDisplayBean displayBean = new ClassifiedConceptDisplayBean();
                displayBean.setNewConceptHtml(ccBean);
                session.setAttribute(""classifyResult"", ccBean);
                session.setAttribute(""classifyDisplayResult"", displayBean);
                status = ""success"";
            } catch (Exception e) {
                Categories.dataServer().error(StackTracePrinter.getStackTrace(e));
                reportingBean.setReportingHtml(errorMessages.getMessage(""classify_1"") + e.getMessage());
                session.setAttribute(""reportingBean"", reportingBean);
                status = ""classify_fail"";
            }
        }
        return (mapping.findForward(status));
    }
",120,"    public boolean getContent(String USERName, String latestMsgId) {
        try {
            String targetUrl = ""http://api.fanfou.com/statuses/user_timeline.xml?id="" + USERName + ""&since_id="" + latestMsgId;
            URL uri = new URL(targetUrl);
            InputStream in = uri.openStream();
            ArrayList<MessageObj> tx;
            if (in != null) {
                MessageListDOMParser writer = new MessageListDOMParser();
                tx = (ArrayList<MessageObj>) writer.parseXML(in);
                TransactionDAO  daos = new TransactionDAO();
                 daos.insert(tx);
            }
            return true;
        } catch (Exception e) {
            e.printStackTrace();
            return false;
        }
    }
",LABEL_0,LABEL_0,LABEL_1,1,"getContent,userId,latestMsgId,targetUrl,url,in,list,parser,dao","getContent:-9.21487808227539e-05,userId:2.962350845336914e-05,latestMsgId:-0.00022590160369873047,targetUrl:2.384185791015625e-07,url:0.0046364665031433105,in:-7.468461990356445e-05,list:5.322694778442383e-05,parser:3.9577484130859375e-05,dao:3.266334533691406e-05,",5,11,0,"url:uri,list:tx,parser:writer,dao: daos,userId:USERName,",0,Greedy,187,0.03668247063954671,replace,[]
255,"    public static void writeFileToFile(File fin, File fout, boolean append) throws IOException {
        FileChannel inChannel = new FileInputStream(fin).getChannel();
        FileChannel outChannel = new FileOutputStream(fout, append).getChannel();
        try {
            inChannel.transferTo(0, inChannel.size(), outChannel);
        } finally {
            if (inChannel != null) try {
                inChannel.close();
            } catch (IOException ex) {
            }
            if (outChannel != null) try {
                outChannel.close();
            } catch (IOException ex) {
            }
        }
    }
 <SPLIT>     public static String generate(boolean secure, boolean sep) throws UnknownHostException {
        MessageDigest messagedigest;
        StringBuilder stringbuffer = new StringBuilder();
        try {
            messagedigest = MessageDigest.getInstance(""MD5"");
        } catch (NoSuchAlgorithmException nosuchalgorithmexception) {
            throw new RuntimeException(nosuchalgorithmexception);
        }
        StringBuffer stringbuffer2;
        InetAddress inetaddress = InetAddress.getLocalHost();
        long l = System.currentTimeMillis();
        long l1 = 0L;
        if (secure) l1 = _secureRand.nextLong(); else l1 = _rand.nextLong();
        stringbuffer.append(inetaddress.toString());
        stringbuffer.append("":"");
        stringbuffer.append(Long.toString(l));
        stringbuffer.append("":"");
        stringbuffer.append(Long.toString(l1));
        messagedigest.update(stringbuffer.toString().getBytes());
        byte abyte0[] = messagedigest.digest();
        StringBuffer stringbuffer1 = new StringBuffer();
        for (int i = 0; i < abyte0.length; i++) {
            int j = abyte0[i] & 0xff;
            if (j < 16) stringbuffer1.append('0');
            stringbuffer1.append(Integer.toHexString(j));
        }
        String s = stringbuffer1.toString();
        stringbuffer2 = new StringBuffer();
        if (sep) {
            stringbuffer2.append(s.substring(0, 8));
            stringbuffer2.append(""-"");
            stringbuffer2.append(s.substring(8, 12));
            stringbuffer2.append(""-"");
            stringbuffer2.append(s.substring(12, 16));
            stringbuffer2.append(""-"");
            stringbuffer2.append(s.substring(16, 20));
            stringbuffer2.append(""-"");
            stringbuffer2.append(s.substring(20));
            return stringbuffer2.toString();
        } else {
            return s;
        }
    }
",112,"    public static void writeFileAndStream(File ln, File bin, boolean password) throws IOException {
        FileChannel inConnection = new FileInputStream(ln).getChannel();
        FileChannel inChan = new FileOutputStream(bin, password).getChannel();
        try {
            inConnection.transferTo(0, inConnection.size(), inChan);
        } finally {
            if (inConnection != null) try {
                inConnection.close();
            } catch (IOException ex) {
            }
            if (inChan != null) try {
                inChan.close();
            } catch (IOException ex) {
            }
        }
    }
",LABEL_0,LABEL_0,LABEL_0,-1,"writeFileToFile,fin,fout,append,inChannel,outChannel","writeFileToFile:0.009620368480682373,fin:-0.0013808608055114746,fout:0.008579432964324951,append:0.006154656410217285,inChannel:0.014569461345672607,outChannel:-0.0008341073989868164,",6,16,0,"inChannel:inConnection,writeFileToFile:writeFileAndStream,fout:bin,append:password,outChannel:inChan,fin:ln,",0,Greedy,203,0.03325985272725423,failed,[]
256,"    public void writeConfiguration(Writer out) throws IOException {
        if (myResource == null) {
            out.append(""# Unable to print configuration resource\n"");
        } else {
            URL url = myResource.getUrl();
            InputStream in = url.openStream();
            if (in != null) {
                try {
                    IOUtils.copy(in, out);
                } finally {
                    IOUtils.closeQuietly(in);
                }
            } else {
                out.append(""# Unable to print configuration resource\n"");
            }
        }
    }
 <SPLIT>     private void compress(String outputFile, ArrayList<String> inputFiles, PrintWriter log, boolean compress) throws Exception {
        String absPath = getAppConfig().getPathConfig().getAbsoluteServerPath();
        log.println(""Concat files into: "" + outputFile);
        OutputStream out = new FileOutputStream(absPath + outputFile);
        byte[] buffer = new byte[4096];
        int readBytes;
        for (String file : inputFiles) {
            log.println("" Read: "" + file);
            InputStream in = new FileInputStream(absPath + file);
            while ((readBytes = in.read(buffer)) != -1) {
                out.write(buffer, 0, readBytes);
            }
            in.close();
        }
        out.close();
        if (compress) {
            long normalSize = new File(absPath + outputFile).length();
            ProcessBuilder builder = new ProcessBuilder(""java"", ""-jar"", ""WEB-INF/yuicompressor.jar"", outputFile, ""-o"", outputFile, ""--line-break"", ""4000"");
            builder.directory(new File(absPath));
            Process process = builder.start();
            process.waitFor();
            long minSize = new File(absPath + outputFile).length();
            long diff = normalSize - minSize;
            double percentage = Math.floor((double) diff / normalSize * 1000.0) / 10.0;
            double diffSize = (Math.floor(diff / 1024.0 * 10.0) / 10.0);
            log.println(""Result: "" + percentage + "" % ("" + diffSize + "" KB)"");
        }
    }
",92,"    public void saveReport(Writer line) throws IOException {
        if (myResource == null) {
            line.append(""# Unable to print configuration resource
"");
        } else {
            URL url = myResource.getUrl();
            InputStream stream = url.openStream();
            if (stream != null) {
                try {
                    IOUtils.copy(stream, line);
                } finally {
                    IOUtils.closeQuietly(stream);
                }
            } else {
                line.append(""# Unable to print configuration resource
"");
            }
        }
    }
",LABEL_1,LABEL_1,LABEL_1,-1,"writeConfiguration,out,url,in","writeConfiguration:0.016562342643737793,out:-0.005822479724884033,url:0.0055258870124816895,in:0.0110015869140625,",3,9,0,"writeConfiguration:saveReport,in:stream,url:url,out:line,",0,Greedy,175,0.026053643226623534,failed,[]
257,"    @Override
    protected URLConnection openConnection(URL url, Proxy proxy) throws IOException {
        if ((url == null) || (proxy == null)) {
            throw new IllegalArgumentException(Messages.getString(""luni.1B""));
        }
        return new HttpsURLConnectionImpl(url, getDefaultPort(), proxy);
    }
 <SPLIT>     public void testReadPerMemberSixSmall() throws IOException {
        GZIPMembersInputStream gzin = new GZIPMembersInputStream(new ByteArrayInputStream(sixsmall_gz));
        gzin.setEofEachMember(true);
        for (int i = 0; i < 3; i++) {
            int count2 = IOUtils.copy(gzin, new NullOutputStream());
            assertEquals(""wrong 1-byte member count"", 1, count2);
            gzin.nextMember();
            int count3 = IOUtils.copy(gzin, new NullOutputStream());
            assertEquals(""wrong 5-byte member count"", 5, count3);
            gzin.nextMember();
        }
        int countEnd = IOUtils.copy(gzin, new NullOutputStream());
        assertEquals(""wrong eof count"", 0, countEnd);
    }
",60,"    @Override
    protected URLConnection initConnector(URL file, Proxy port) throws IOException {
        if ((file == null) || (port == null)) {
            throw new IllegalArgumentException(Messages.getString(""luni.1B""));
        }
        return new HttpsURLConnectionImpl(file, getDefaultPort(), port);
    }
",LABEL_0,LABEL_0,LABEL_0,-1,"openConnection,url,proxy","openConnection:0.0,url:-2.384185791015625e-06,proxy:1.6689300537109375e-06,",3,7,0,"proxy:port,openConnection:initConnector,url:file,",0,Greedy,109,0.015092090765635172,failed,[]
258,"    public static void main(String[] argv) {
        if (1 < argv.length) {
            File[] sources = Source(argv[0]);
            if (null != sources) {
                for (File src : sources) {
                    File[] targets = Target(src, argv);
                    if (null != targets) {
                        final long srclen = src.length();
                        try {
                            FileChannel source = new FileInputStream(src).getChannel();
                            try {
                                for (File tgt : targets) {
                                    FileChannel target = new FileOutputStream(tgt).getChannel();
                                    try {
                                        source.transferTo(0L, srclen, target);
                                    } finally {
                                        target.close();
                                    }
                                    System.out.printf(""Updated %s\n"", tgt.getPath());
                                    File[] deletes = Delete(src, tgt);
                                    if (null != deletes) {
                                        for (File del : deletes) {
                                            if (SVN) {
                                                if (SvnDelete(del)) System.out.printf(""Deleted %s\n"", del.getPath()); else System.out.printf(""Failed to delete %s\n"", del.getPath());
                                            } else if (del.delete()) System.out.printf(""Deleted %s\n"", del.getPath()); else System.out.printf(""Failed to delete %s\n"", del.getPath());
                                        }
                                    }
                                    if (SVN) SvnAdd(tgt);
                                }
                            } finally {
                                source.close();
                            }
                        } catch (Exception exc) {
                            exc.printStackTrace();
                            System.exit(1);
                        }
                    }
                }
                System.exit(0);
            } else {
                System.err.printf(""Source file(s) not found in '%s'\n"", argv[0]);
                System.exit(1);
            }
        } else {
            usage();
            System.exit(1);
        }
    }
 <SPLIT>     public String[][] getProjectTreeData() {
        String[][] treeData = null;
        String filename = dms_home + FS + ""temp"" + FS + username + ""adminprojects.xml"";
        String urlString = dms_url + ""/servlet/com.ufnasoft.dms.server.ServerGetAdminProjects"";
        try {
            String urldata = urlString + ""?username="" + URLEncoder.encode(username, ""UTF-8"") + ""&key="" + URLEncoder.encode(key, ""UTF-8"") + ""&filename="" + URLEncoder.encode(username, ""UTF-8"") + ""adminprojects.xml"";
            DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
            factory.setValidating(false);
            DocumentBuilder parser = factory.newDocumentBuilder();
            URL u = new URL(urldata);
            DataInputStream is = new DataInputStream(u.openStream());
            FileOutputStream os = new FileOutputStream(filename);
            int iBufSize = is.available();
            byte inBuf[] = new byte[20000 * 1024];
            int iNumRead;
            while ((iNumRead = is.read(inBuf, 0, iBufSize)) > 0) os.write(inBuf, 0, iNumRead);
            os.close();
            is.close();
            File f = new File(filename);
            InputStream inputstream = new FileInputStream(f);
            Document document = parser.parse(inputstream);
            NodeList nodelist = document.getElementsByTagName(""proj"");
            int num = nodelist.getLength();
            treeData = new String[num][3];
            for (int i = 0; i < num; i++) {
                treeData[i][0] = new String(DOMUtil.getSimpleElementText((Element) nodelist.item(i), ""pid""));
                treeData[i][1] = new String(DOMUtil.getSimpleElementText((Element) nodelist.item(i), ""ppid""));
                treeData[i][2] = new String(DOMUtil.getSimpleElementText((Element) nodelist.item(i), ""p""));
            }
        } catch (MalformedURLException ex) {
            System.out.println(ex);
        } catch (ParserConfigurationException ex) {
            System.out.println(ex);
        } catch (NullPointerException e) {
        } catch (Exception ex) {
            System.out.println(ex);
        }
        return treeData;
    }
",370,"    public static void main(String[] argv) {
        if (1 < argv.length) {
            File[] sources = Source(argv[0]);
            if (null != sources) {
                for (File src : sources) {
                    File[] targets = Target(src, argv);
                    if (null != targets) {
                        final long srclen = src.length();
                        try {
                            FileChannel source = new FileInputStream(src).getChannel();
                            try {
                                for (File tgt : targets) {
                                    FileChannel url = new FileOutputStream(tgt).getChannel();
                                    try {
                                        source.transferTo(0L, srclen, url);
                                    } finally {
                                        url.close();
                                    }
                                    System.out.printf(""Updated %s
"", tgt.getPath());
                                    File[] deletes = Delete(src, tgt);
                                    if (null != deletes) {
                                        for (File ul : deletes) {
                                            if (SVN) {
                                                if (SvnDelete(ul)) System.out.printf(""Deleted %s
"", del.getPath()); else System.out.printf(""Failed to delete %s
"", ul.getPath());
                                            } else if (ul.delete()) System.out.printf(""Deleted %s
"", del.getPath()); else System.out.printf(""Failed to delete %s
"", ul.getPath());
                                        }
                                    }
                                    if (SVN) SvnAdd(tgt);
                                }
                            } finally {
                                source.close();
                            }
                        } catch (Exception exc) {
                            exc.printStackTrace();
                            System.exit(1);
                        }
                    }
                }
                System.exit(0);
            } else {
                System.err.printf(""Source file(s) not found in '%s'
"", argv[0]);
                System.exit(1);
            }
        } else {
            usage();
            System.exit(1);
        }
    }
",LABEL_1,LABEL_1,LABEL_1,-1,"argv,sources,targets,srclen,source,tgt,target,deletes,del","argv:0.09520459175109863,sources:0.003284633159637451,targets:0.004257380962371826,srclen:0.038629233837127686,source:0.005202651023864746,tgt:0.09790164232254028,target:0.0018990635871887207,deletes:0.05648928880691528,del:0.00039327144622802734,",2,10,0,"tgt:tgt,argv:argv,deletes:deletes,srclen:srclen,source:source,targets:targets,sources:sources,target:url,del:ul,",0,Greedy,460,0.08382141590118408,failed,[]
259,"    public void importarSetor(File pArquivoXLS, String pCabecalhoSetor, Andamento pAndamento) throws FileNotFoundException, IOException, SQLException, InvalidFormatException {
        int iLinha = -1;
        Statement stmtLimpezaInicialDestino = null;
        OraclePreparedStatement stmtDestino = null;
        try {
            Workbook arquivo = WorkbookFactory.create(new FileInputStream(pArquivoXLS));
            Sheet plan1 = arquivo.getSheetAt(0);
            int QUANTIDADE_DE_REGISTROS_DE_CABECALHO = 7;
            int QUANTIDADE_DE_REGISTROS_DE_RODAPE = 14;
            int QUANTIDADE_DE_REGISTROS_DE_METADADOS = QUANTIDADE_DE_REGISTROS_DE_CABECALHO + QUANTIDADE_DE_REGISTROS_DE_RODAPE;
            int quantidadeDeRegistrosEstimada = plan1.getPhysicalNumberOfRows() - QUANTIDADE_DE_REGISTROS_DE_METADADOS;
            String vSetor = """", vSubsetor = """", vSegmento = """";
            LinhaDaPlanilhaDosSetores registroAtual;
            int vPapeisPorSegmento = 0;
            stmtLimpezaInicialDestino = conDestino.createStatement();
            String sql = ""TRUNCATE TABLE TMP_TB_SETOR_SUBSETOR_SEGMENTO"";
            stmtLimpezaInicialDestino.executeUpdate(sql);
            sql = ""INSERT INTO TMP_TB_SETOR_SUBSETOR_SEGMENTO(SIGLA_EMPRESA, NOME_SETOR, NOME_SUBSETOR, NOME_SEGMENTO) VALUES(:SIGLA_EMPRESA, :NOME_SETOR, :NOME_SUBSETOR, :NOME_SEGMENTO)"";
            stmtDestino = (OraclePreparedStatement) conDestino.prepareStatement(sql);
            stmtDestino.setExecuteBatch(COMANDOS_POR_LOTE);
            int quantidadeDeRegistrosImportados = 0;
            iLinha = 8;
            while (true) {
                registroAtual = new LinhaDaPlanilhaDosSetores(plan1.getRow(iLinha));
                if (registroAtual.nomeDoSetor.length() > 0 && !registroAtual.nomeDoSetor.equalsIgnoreCase(pCabecalhoSetor)) {
                    if (registroAtual.nomeDoSubsetor.equalsIgnoreCase("""")) {
                        break;
                    } else {
                        vSetor = registroAtual.nomeDoSetor;
                        vSubsetor = null;
                        vSegmento = null;
                    }
                }
                if (registroAtual.nomeDoSubsetor.length() > 0 && !registroAtual.nomeDoSetor.equalsIgnoreCase(pCabecalhoSetor)) {
                    vSubsetor = registroAtual.nomeDoSubsetor;
                    vSegmento = null;
                }
                String nomeDoSegmento = registroAtual.nomeDoSegmentoOuDaEmpresa;
                if (nomeDoSegmento.length() > 0 && !registroAtual.nomeDoSetor.equalsIgnoreCase(pCabecalhoSetor) && registroAtual.siglaDaEmpresa.equals("""")) {
                    if (vSegmento != null && vPapeisPorSegmento == 0) {
                        vSegmento = vSegmento + "" "" + nomeDoSegmento;
                    } else {
                        vSegmento = nomeDoSegmento;
                    }
                    vPapeisPorSegmento = 0;
                }
                String nomeDaEmpresa = registroAtual.nomeDoSegmentoOuDaEmpresa;
                if (registroAtual.siglaDaEmpresa.length() == 4 && !registroAtual.nomeDoSetor.equalsIgnoreCase(pCabecalhoSetor) && !nomeDaEmpresa.equals("""")) {
                    String vCodneg = registroAtual.siglaDaEmpresa;
                    stmtDestino.clearParameters();
                    stmtDestino.setStringAtName(""SIGLA_EMPRESA"", vCodneg);
                    stmtDestino.setStringAtName(""NOME_SETOR"", vSetor);
                    stmtDestino.setStringAtName(""NOME_SUBSETOR"", vSubsetor);
                    stmtDestino.setStringAtName(""NOME_SEGMENTO"", vSegmento);
                    int contagemDasInsercoes = stmtDestino.executeUpdate();
                    quantidadeDeRegistrosImportados++;
                    vPapeisPorSegmento++;
                }
                iLinha++;
                double percentualCompleto = (double) quantidadeDeRegistrosImportados / quantidadeDeRegistrosEstimada * 100;
                pAndamento.setPercentualCompleto((int) percentualCompleto);
            }
            conDestino.commit();
        } catch (Exception ex) {
            conDestino.rollback();
            ProblemaNaImportacaoDeArquivo problemaDetalhado = new ProblemaNaImportacaoDeArquivo();
            problemaDetalhado.nomeDoArquivo = pArquivoXLS.getName();
            problemaDetalhado.linhaProblematicaDoArquivo = iLinha;
            problemaDetalhado.detalhesSobreOProblema = ex;
            throw problemaDetalhado;
        } finally {
            pAndamento.setPercentualCompleto(100);
            if (stmtLimpezaInicialDestino != null && (!stmtLimpezaInicialDestino.isClosed())) {
                stmtLimpezaInicialDestino.close();
            }
            if (stmtDestino != null && (!stmtDestino.isClosed())) {
                stmtDestino.close();
            }
        }
    }
 <SPLIT>     private void getRandomGUID(boolean secure) {
        MessageDigest md5 = null;
        StringBuffer sbValueBeforeMD5 = new StringBuffer();
        try {
            md5 = MessageDigest.getInstance(""MD5"");
        } catch (NoSuchAlgorithmException e) {
            System.out.println(""Error: "" + e);
        }
        try {
            long time = System.currentTimeMillis();
            long rand = 0;
            if (secure) {
                rand = mySecureRand.nextLong();
            } else {
                rand = myRand.nextLong();
            }
            sbValueBeforeMD5.append(s_id);
            sbValueBeforeMD5.append("":"");
            sbValueBeforeMD5.append(Long.toString(time));
            sbValueBeforeMD5.append("":"");
            sbValueBeforeMD5.append(Long.toString(rand));
            valueBeforeMD5 = sbValueBeforeMD5.toString();
            md5.update(valueBeforeMD5.getBytes());
            byte[] array = md5.digest();
            StringBuffer sb = new StringBuffer();
            for (int j = 0; j < array.length; ++j) {
                int b = array[j] & 0xFF;
                if (b < 0x10) sb.append('0');
                sb.append(Integer.toHexString(b));
            }
            valueAfterMD5 = sb.toString();
        } catch (Exception e) {
            System.out.println(""Error:"" + e);
        }
    }
",602,"    public void  importTarSetutor(File pArquivoEXCL, String pCabecalhaSetor, Andamento pAndietono) throws FileNotFoundException, IOException, SQLException, InvalidFormatException {
        int NumPlanha = -1;
        Statement stmtLimpezaIniciaDestination = null;
        OraclePreparedStatement stmtRestinos = null;
        try {
            Workbook Arqoso = WorkbookFactory.create(new FileInputStream(pArquivoEXCL));
            Sheet productName = Arqoso.getSheetAt(0);
            int QUANTIDADE_DE_REGISTRONS__ = 7;
            int QUANTIDADE_DE_REGISTROS_DE_RODAPE = 14;
            int QUANTIDADE_DE_REGISTRATES_ = QUANTIDADE_DE_REGISTRONS__ + QUANTIDADE_DE_REGISTROS_DE_RODAPE;
            int quantidadeDeRegistrosEstimadas = productName.getPhysicalNumberOfRows() - QUANTIDADE_DE_REGISTRATES_;
            String vSelecte = """", vSubjectors = """", vGmentor = """";
            LinhaDaPlanilhaDosSetores Registrosational;
            int vPapeisPorSegamentos = 0;
            stmtLimpezaIniciaDestination = conDestino.createStatement();
            String statement = ""TRUNCATE TABLE TMP_TB_SETOR_SUBSETOR_SEGMENTO"";
            stmtLimpezaIniciaDestination.executeUpdate(statement);
            statement = ""INSERT INTO TMP_TB_SETOR_SUBSETOR_SEGMENTO(SIGLA_EMPRESA, NOME_SETOR, NOME_SUBSETOR, NOME_SEGMENTO) VALUES(:SIGLA_EMPRESA, :NOME_SETOR, :NOME_SUBSETOR, :NOME_SEGMENTO)"";
            stmtRestinos = (OraclePreparedStatement) conDestino.prepareStatement(statement);
            stmtRestinos.setExecuteBatch(COMANDOS_POR_LOTE);
            int quantidadeDeRegistrosImportados = 0;
            NumPlanha = 8;
            while (true) {
                Registrosational = new LinhaDaPlanilhaDosSetores(productName.getRow(NumPlanha));
                if (Registrosational.nomeDoSetor.length() > 0 && !registroAtual.nomeDoSetor.equalsIgnoreCase(pCabecalhaSetor)) {
                    if (Registrosational.nomeDoSubsetor.equalsIgnoreCase("""")) {
                        break;
                    } else {
                        vSelecte = Registrosational.nomeDoSetor;
                        vSubjectors = null;
                        vGmentor = null;
                    }
                }
                if (Registrosational.nomeDoSubsetor.length() > 0 && !registroAtual.nomeDoSetor.equalsIgnoreCase(pCabecalhaSetor)) {
                    vSubjectors = Registrosational.nomeDoSubsetor;
                    vGmentor = null;
                }
                String nomeDoSegmento = Registrosational.nomeDoSegmentoOuDaEmpresa;
                if (nomeDoSegmento.length() > 0 && !registroAtual.nomeDoSetor.equalsIgnoreCase(pCabecalhaSetor) && Registrosational.siglaDaEmpresa.equals("""")) {
                    if (vGmentor != null && vPapeisPorSegamentos == 0) {
                        vGmentor = vGmentor + "" "" + nomeDoSegmento;
                    } else {
                        vGmentor = nomeDoSegmento;
                    }
                    vPapeisPorSegamentos = 0;
                }
                String nomeDaEmpresa = Registrosational.nomeDoSegmentoOuDaEmpresa;
                if (Registrosational.siglaDaEmpresa.length() == 4 && !registroAtual.nomeDoSetor.equalsIgnoreCase(pCabecalhaSetor) && !nomeDaEmpresa.equals("""")) {
                    String vCodneg = Registrosational.siglaDaEmpresa;
                    stmtRestinos.clearParameters();
                    stmtRestinos.setStringAtName(""SIGLA_EMPRESA"", vCodneg);
                    stmtRestinos.setStringAtName(""NOME_SETOR"", vSelecte);
                    stmtRestinos.setStringAtName(""NOME_SUBSETOR"", vSubjectors);
                    stmtRestinos.setStringAtName(""NOME_SEGMENTO"", vGmentor);
                    int contagemDasInsercoes = stmtRestinos.executeUpdate();
                    quantidadeDeRegistrosImportados++;
                    vPapeisPorSegamentos++;
                }
                NumPlanha++;
                double percentualCompleto = (double) quantidadeDeRegistrosImportados / quantidadeDeRegistrosEstimadas * 100;
                pAndietono.setPercentualCompleto((int) percentualCompleto);
            }
            conDestino.commit();
        } catch (Exception ex) {
            conDestino.rollback();
            ProblemaNaImportacaoDeArquivo problemaDetalhado = new ProblemaNaImportacaoDeArquivo();
            problemaDetalhado.nomeDoArquivo = pArquivoEXCL.getName();
            problemaDetalhado.linhaProblematicaDoArquivo = NumPlanha;
            problemaDetalhado.detalhesSobreOProblema = ex;
            throw problemaDetalhado;
        } finally {
            pAndietono.setPercentualCompleto(100);
            if (stmtLimpezaIniciaDestination != null && (!stmtLimpezaInicialDestino.isClosed())) {
                stmtLimpezaIniciaDestination.close();
            }
            if (stmtRestinos != null && (!stmtDestino.isClosed())) {
                stmtRestinos.close();
            }
        }
    }
",LABEL_0,LABEL_0,LABEL_0,-1,"importarSetor,pArquivoXLS,pCabecalhoSetor,pAndamento,iLinha,stmtLimpezaInicialDestino,stmtDestino,arquivo,plan1,QUANTIDADE_DE_REGISTROS_DE_CABECALHO,QUANTIDADE_DE_REGISTROS_DE_RODAPE,QUANTIDADE_DE_REGISTROS_DE_METADADOS,quantidadeDeRegistrosEstimada,vSetor,vSubsetor,vSegmento,registroAtual,vPapeisPorSegmento,sql","importarSetor:0.0012183189392089844,pArquivoXLS:0.007101714611053467,pCabecalhoSetor:0.0021260976791381836,pAndamento:0.0024390816688537598,iLinha:0.0029355883598327637,stmtLimpezaInicialDestino:0.00037485361099243164,stmtDestino:-0.0008680820465087891,arquivo:0.0049073100090026855,plan1:0.003544628620147705,QUANTIDADE_DE_REGISTROS_DE_CABECALHO:0.003356456756591797,QUANTIDADE_DE_REGISTROS_DE_RODAPE:0.009845316410064697,QUANTIDADE_DE_REGISTROS_DE_METADADOS:0.006431221961975098,quantidadeDeRegistrosEstimada:-0.0019011497497558594,vSetor:0.0037941336631774902,vSubsetor:0.0033370256423950195,vSegmento:0.0037083029747009277,registroAtual:0.0008003711700439453,vPapeisPorSegmento:0.0031459927558898926,sql:-0.0011192560195922852,",18,85,0,"QUANTIDADE_DE_REGISTROS_DE_RODAPE:QUANTIDADE_DE_REGISTROS_DE_RODAPE,pArquivoXLS:pArquivoEXCL,QUANTIDADE_DE_REGISTROS_DE_METADADOS:QUANTIDADE_DE_REGISTRATES_,arquivo:Arqoso,vSetor:vSelecte,vSegmento:vGmentor,plan1:productName,QUANTIDADE_DE_REGISTROS_DE_CABECALHO:QUANTIDADE_DE_REGISTRONS__,vSubsetor:vSubjectors,vPapeisPorSegmento:vPapeisPorSegamentos,iLinha:NumPlanha,pAndamento:pAndietono,pCabecalhoSetor:pCabecalhaSetor,importarSetor: importTarSetutor,registroAtual:Registrosational,stmtLimpezaInicialDestino:stmtLimpezaIniciaDestination,stmtDestino:stmtRestinos,sql:statement,quantidadeDeRegistrosEstimada:quantidadeDeRegistrosEstimadas,",0,Greedy,627,0.14604971806208292,failed,[]
260,"    private static void copyFile(File in, File out) {
        try {
            FileChannel sourceChannel = new FileInputStream(in).getChannel();
            FileChannel destinationChannel = new FileOutputStream(out).getChannel();
            sourceChannel.transferTo(0, sourceChannel.size(), destinationChannel);
            sourceChannel.close();
            destinationChannel.close();
        } catch (IOException ex) {
            ex.printStackTrace();
        }
    }
 <SPLIT>     public void setImg() {
        JFileChooser jFileChooser1 = new JFileChooser();
        String separator = """";
        if (JFileChooser.APPROVE_OPTION == jFileChooser1.showOpenDialog(this.getFatherFrame())) {
            setPath(jFileChooser1.getSelectedFile().getPath());
            separator = jFileChooser1.getSelectedFile().separator;
            File dirImg = new File(""."" + separator + ""images"");
            if (!dirImg.exists()) {
                dirImg.mkdir();
            }
            int index = getPath().lastIndexOf(separator);
            String imgName = getPath().substring(index);
            String newPath = dirImg + imgName;
            try {
                File inputFile = new File(getPath());
                File outputFile = new File(newPath);
                if (!inputFile.getCanonicalPath().equals(outputFile.getCanonicalPath())) {
                    FileInputStream in = new FileInputStream(inputFile);
                    FileOutputStream out = new FileOutputStream(outputFile);
                    int c;
                    while ((c = in.read()) != -1) out.write(c);
                    in.close();
                    out.close();
                }
            } catch (Exception ex) {
                ex.printStackTrace();
                LogHandler.log(ex.getMessage(), Level.INFO, ""LOG_MSG"", isLoggingEnabled());
                JOptionPane.showMessageDialog(null, ex.getMessage().substring(0, Math.min(ex.getMessage().length(), getFatherPanel().MAX_DIALOG_MSG_SZ)) + ""-"" + getClass(), ""Set image"", JOptionPane.ERROR_MESSAGE);
            }
            setPath(newPath);
            bckImg = new ImageIcon(getPath());
        }
    }
",83,"    private static void copyFile(File url, File conn) {
        try {
            FileChannel targetStream = new FileInputStream(url).getChannel();
            FileChannel DestinationFile = new FileOutputStream(conn).getChannel();
            targetStream.transferTo(0, targetStream.size(), DestinationFile);
            targetStream.close();
            DestinationFile.close();
        } catch (IOException ex) {
            ex.printStackTrace();
        }
    }
",LABEL_1,LABEL_1,LABEL_1,-1,"copyFile,in,out,sourceChannel,destinationChannel","copyFile:-0.003632843494415283,in:-0.013080418109893799,out:-0.019147872924804688,sourceChannel:0.0068991780281066895,destinationChannel:0.010837793350219727,",4,11,0,"destinationChannel:DestinationFile,sourceChannel:targetStream,copyFile:copyFile,in:url,out:conn,",0,Greedy,188,0.0288055419921875,failed,[]
261,"    public void executeUpdateTransaction(List queries) throws SQLException {
        assert connection != null;
        boolean autoCommit = connection.getAutoCommit();
        connection.setAutoCommit(false);
        try {
            Iterator iterator = queries.iterator();
            while (iterator.hasNext()) {
                String query = (String) iterator.next();
                Statement statement = connection.createStatement();
                statement.executeUpdate(query);
            }
            connection.commit();
            connection.setAutoCommit(autoCommit);
        } catch (SQLException e) {
            connection.rollback();
            throw new SQLException(e.getMessage());
        }
    }
 <SPLIT>     @Test
    public void testCopy_readerToWriter_nullIn() throws Exception {
        ByteArrayOutputStream baout = new ByteArrayOutputStream();
        OutputStream out = new YellOnFlushAndCloseOutputStreamTest(baout, true, true);
        Writer writer = new OutputStreamWriter(baout, ""US-ASCII"");
        try {
            IOUtils.copy((Reader) null, writer);
            fail();
        } catch (NullPointerException ex) {
        }
    }
",120,"    public void  executeUpdateStatement(List comperies) throws SQLException {
        assert connection != null;
        boolean autocommmit = connection.getAutoCommit();
        connection.setAutoCommit(false);
        try {
            Iterator stream = comperies.stream();
            while (stream.hasNext()) {
                String name = (String) stream.next();
                Statement unit = connection.createStatement();
                unit.executeUpdate(name);
            }
            connection.commit();
            connection.setAutoCommit(autocommmit);
        } catch (SQLException e) {
            connection.rollback();
            throw new SQLException(e.getMessage());
        }
    }
",LABEL_0,LABEL_0,LABEL_0,-1,"executeUpdateTransaction,queries,autoCommit,iterator,query,statement","executeUpdateTransaction:-0.007576107978820801,queries:-0.003961443901062012,autoCommit:-0.004903137683868408,iterator:0.0056359171867370605,query:0.00031441450119018555,statement:0.0011959075927734375,",6,13,0,"iterator:stream,statement:unit,query:name,queries:comperies,autoCommit:autocommmit,executeUpdateTransaction: executeUpdateStatement,",0,Greedy,242,0.033841212590535484,failed,[]
262,"    protected static void copyDeleting(File source, File dest) throws IOException {
        byte[] buf = new byte[8 * 1024];
        FileInputStream in = new FileInputStream(source);
        try {
            FileOutputStream out = new FileOutputStream(dest);
            try {
                int count;
                while ((count = in.read(buf)) >= 0) out.write(buf, 0, count);
            } finally {
                out.close();
            }
        } finally {
            in.close();
        }
    }
 <SPLIT>     public static void copyFile(File srcFile, File destFile) throws IOException {
        if (!(srcFile.exists() && srcFile.isFile())) throw new IllegalArgumentException(""Source file doesn't exist: "" + srcFile.getAbsolutePath());
        if (destFile.exists() && destFile.isDirectory()) throw new IllegalArgumentException(""Destination file is directory: "" + destFile.getAbsolutePath());
        FileInputStream in = new FileInputStream(srcFile);
        FileOutputStream out = new FileOutputStream(destFile);
        byte[] buffer = new byte[4096];
        int no = 0;
        try {
            while ((no = in.read(buffer)) != -1) out.write(buffer, 0, no);
        } finally {
            in.close();
            out.close();
        }
    }
",100,"    protected static void copyDeleting(File source, File thin) throws IOException {
        byte[] src = new byte[8 * 1024];
        FileInputStream url = new FileInputStream(source);
        try {
            FileOutputStream writer = new FileOutputStream(thin);
            try {
                int close;
                while ((close = url.read(src)) >= 0) writer.write(src, 0, close);
            } finally {
                writer.close();
            }
        } finally {
            url.close();
        }
    }
",LABEL_1,LABEL_1,LABEL_0,1,"copyDeleting,source,dest,buf,in,out,count","copyDeleting:-0.06148630380630493,source:-0.0017418861389160156,dest:0.0024634599685668945,buf:0.020113050937652588,in:0.008479833602905273,out:0.021596670150756836,count:0.0025254487991333008,",5,14,0,"out:writer,buf:src,in:url,count:close,dest:thin,",0,Greedy,237,0.03321715593338013,replace,[]
263,"    private static void copyFiles(String strPath, String dstPath) throws Exception {
        File src = new File(strPath);
        File dest = new File(dstPath);
        if (src.isDirectory()) {
            dest.mkdirs();
            String list[] = src.list();
            for (int i = 0; i < list.length; i++) {
                String dest1 = dest.getAbsolutePath() + ""\\"" + list[i];
                String src1 = src.getAbsolutePath() + ""\\"" + list[i];
                copyFiles(src1, dest1);
            }
        } else {
            FileChannel sourceChannel = new FileInputStream(src).getChannel();
            FileChannel targetChannel = new FileOutputStream(dest).getChannel();
            sourceChannel.transferTo(0, sourceChannel.size(), targetChannel);
            sourceChannel.close();
            targetChannel.close();
        }
    }
 <SPLIT>     private void bootKernel(String conf) {
        try {
            AssetManager am = getResources().getAssets();
            InputStream is = am.open(conf + "".conf"");
            Properties props = new Properties();
            props.load(is);
            is.close();
            Log.d(""bootKernel"", ""Listing sdcard assets..."");
            String[] sdcardfiles = am.list(""sdcard"");
            for (String file : sdcardfiles) {
                Log.d(""bootKernel"", ""Copying sdcard asset "" + file + ""."");
                AssetFileDescriptor afd = am.openFd(""sdcard/"" + file);
                FileInputStream fis = afd.createInputStream();
                FileChannel fic = fis.getChannel();
                FileOutputStream fos = new FileOutputStream(""/sdcard/"" + file);
                FileChannel foc = fos.getChannel();
                fic.transferTo(0, fic.size(), foc);
                fic.close();
                foc.close();
            }
            Configuration gconf = new JavaPropertiesConfiguration(props);
            Configuration bconf = gconf.subset(""boot"");
            String kclass_name = bconf.getString(""kernel"");
            Log.d(""bootKernel"", ""Attempting to load kernel from class '"" + kclass_name + ""'..."");
            Class<? extends Kernel> kclass = Class.forName(kclass_name).asSubclass(Kernel.class);
            Kernel kernel = kclass.newInstance();
            Log.d(""bootKernel"", ""Kernel loaded, proceeding with boot..."");
            BootContext bctx = new SimpleBootContext(gconf, AndroidBridgeService.class, AndroidBridgeServiceImpl.class);
            kernel.boot(bctx).get();
            Log.d(""bootKernel"", ""Kernel boot complete."");
        } catch (Exception e) {
            Log.e(""bootKernel"", ""Unable to boot kernel due to exception."", e);
            finish();
        }
    }
",178,,LABEL_1,LABEL_0,,-4,"copyFiles,strPath,dstPath,src,dest,list,i,dest1,src1,sourceChannel,targetChannel",,,,0,,0,Greedy,1,0.0004429737726847331,,[]
264,"    public Reader getGETReader_bak(URL url) {
        Reader reader = null;
        if (Navigator.isVerbose()) System.out.println(""Web3DService.getGETReader caching "" + url);
        int contentLength = -1;
        URLConnection urlc;
        try {
            urlc = url.openConnection();
            urlc.setReadTimeout(Navigator.TIME_OUT);
            if (getEncoding() != null) {
                urlc.setRequestProperty(""Authorization"", ""Basic "" + getEncoding());
            }
            urlc.connect();
            String content_type = urlc.getContentType();
            if (content_type == null || content_type.equalsIgnoreCase(""x-world/x-vrml"") || content_type.equalsIgnoreCase(""model/vrml"") || content_type.equalsIgnoreCase(""model/vrml;charset=ISO-8859-1"")) {
                InputStream is = urlc.getInputStream();
                DataInputStream d = new DataInputStream(is);
                contentLength = urlc.getContentLength();
                byte[] content = new byte[contentLength];
                if (d != null) {
                    d.readFully(content, 0, contentLength);
                }
                is.close();
                d.close();
                ByteArrayInputStream bais = new ByteArrayInputStream(content);
                reader = new InputStreamReader(bais);
            } else if (content_type.equalsIgnoreCase(""model/vrml.gzip"")) {
                InputStream is = urlc.getInputStream();
                BufferedInputStream bis = new BufferedInputStream(is);
                GZIPInputStream gis = new GZIPInputStream(bis);
                StringBuffer sb = new StringBuffer();
                BufferedReader zipReader = new BufferedReader(new InputStreamReader(gis));
                char chars[] = new char[10240];
                int len = 0;
                contentLength = 0;
                while ((len = zipReader.read(chars, 0, chars.length)) >= 0) {
                    sb.append(chars, 0, len);
                    contentLength += len;
                }
                chars = null;
                gis.close();
                zipReader.close();
                bis.close();
                is.close();
                reader = new StringReader(sb.toString());
            } else if (content_type.equalsIgnoreCase(""model/vrml.encrypted"")) {
                InputStream is = urlc.getInputStream();
                StringBuffer sb = new StringBuffer();
                Cipher pbeCipher = createCipher();
                if (pbeCipher != null) {
                    CipherInputStream cis = new CipherInputStream(is, pbeCipher);
                    BufferedReader bufReader = new BufferedReader(new InputStreamReader(cis));
                    char chars[] = new char[1024];
                    int len = 0;
                    contentLength = 0;
                    while ((len = bufReader.read(chars, 0, chars.length)) >= 0) {
                        sb.append(chars, 0, len);
                        contentLength += len;
                    }
                    chars = null;
                    cis.close();
                    bufReader.close();
                    reader = new StringReader(sb.toString());
                }
            } else if (content_type.equalsIgnoreCase(""model/vrml.gzip.encrypted"")) {
                InputStream is = urlc.getInputStream();
                StringBuffer sb = new StringBuffer();
                Cipher pbeCipher = createCipher();
                if (pbeCipher != null) {
                    CipherInputStream cis = new CipherInputStream(is, pbeCipher);
                    GZIPInputStream gis = new GZIPInputStream(cis);
                    BufferedReader bufReader = new BufferedReader(new InputStreamReader(gis));
                    char chars[] = new char[1024];
                    int len = 0;
                    contentLength = 0;
                    while ((len = bufReader.read(chars, 0, chars.length)) >= 0) {
                        sb.append(chars, 0, len);
                        contentLength += len;
                    }
                    chars = null;
                    bufReader.close();
                    gis.close();
                    cis.close();
                    reader = new StringReader(sb.toString());
                }
            } else if (content_type.equalsIgnoreCase(""text/html;charset=utf-8"")) {
                System.out.println(""text/html;charset=utf-8"");
            } else {
                System.err.println(""ContentNegotiator.startLoading unsupported MIME type: "" + content_type);
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
        return reader;
    }
 <SPLIT>     public static KeyStore createKeyStore(final URL url, final String password) throws KeyStoreException, NoSuchAlgorithmException, CertificateException, IOException {
        if (url == null) throw new IllegalArgumentException(""Keystore url may not be null"");
        LOG.debug(""Initializing key store"");
        KeyStore keystore = null;
        if (url.getFile().endsWith("".p12"")) keystore = KeyStore.getInstance(""pkcs12""); else keystore = KeyStore.getInstance(KeyStore.getDefaultType());
        keystore.load(url.openStream(), password != null ? password.toCharArray() : null);
        return keystore;
    }
",771,"    public Reader getGETReader_cunk(URL resource) {
        Reader writer = null;
        if (Navigator.isVerbose()) System.out.println(""Web3DService.getGETReader caching "" + resource);
        int Contentlength = -1;
        URLConnection Urle;
        try {
            Urle = resource.openConnection();
            Urle.setReadTimeout(Navigator.TIME_OUT);
            if (getEncoding() != null) {
                Urle.setRequestProperty(""Authorization"", ""Basic "" + getEncoding());
            }
            Urle.connect();
            String Content_block = Urle.getContentType();
            if (Content_block == null || Content_block.equalsIgnoreCase(""x-world/x-vrml"") || Content_block.equalsIgnoreCase(""model/vrml"") || Content_block.equalsIgnoreCase(""model/vrml;charset=ISO-8859-1"")) {
                InputStream os = Urle.getInputStream();
                DataInputStream l = new DataInputStream(os);
                Contentlength = Urle.getContentLength();
                byte[] address = new byte[Contentlength];
                if (l != null) {
                    l.readFully(address, 0, Contentlength);
                }
                os.close();
                l.close();
                ByteArrayInputStream hai = new ByteArrayInputStream(address);
                writer = new InputStreamReader(hai);
            } else if (Content_block.equalsIgnoreCase(""model/vrml.gzip"")) {
                InputStream os = Urle.getInputStream();
                BufferedInputStream cos = new BufferedInputStream(os);
                GZIPInputStream  gris = new GZIPInputStream(cos);
                StringBuffer orb = new StringBuffer();
                BufferedReader  zipWriter = new BufferedReader(new InputStreamReader( gris));
                char charts[] = new char[10240];
                int la = 0;
                Contentlength = 0;
                while ((la =  zipWriter.read(charts, 0, charts.length)) >= 0) {
                    orb.append(charts, 0, la);
                    Contentlength += la;
                }
                charts = null;
                 gris.close();
                 zipWriter.close();
                cos.close();
                os.close();
                writer = new StringReader(orb.toString());
            } else if (Content_block.equalsIgnoreCase(""model/vrml.encrypted"")) {
                InputStream os = Urle.getInputStream();
                StringBuffer orb = new StringBuffer();
                Cipher pbeCipher = createCipher();
                if (pbeCipher != null) {
                    CipherInputStream cis = new CipherInputStream(os, pbeCipher);
                    BufferedReader bufReader = new BufferedReader(new InputStreamReader(cis));
                    char charts[] = new char[1024];
                    int la = 0;
                    Contentlength = 0;
                    while ((la = bufReader.read(charts, 0, charts.length)) >= 0) {
                        orb.append(charts, 0, la);
                        Contentlength += la;
                    }
                    charts = null;
                    cis.close();
                    bufReader.close();
                    writer = new StringReader(orb.toString());
                }
            } else if (Content_block.equalsIgnoreCase(""model/vrml.gzip.encrypted"")) {
                InputStream os = Urle.getInputStream();
                StringBuffer orb = new StringBuffer();
                Cipher pbeCipher = createCipher();
                if (pbeCipher != null) {
                    CipherInputStream cis = new CipherInputStream(os, pbeCipher);
                    GZIPInputStream  gris = new GZIPInputStream(cis);
                    BufferedReader bufReader = new BufferedReader(new InputStreamReader( gris));
                    char charts[] = new char[1024];
                    int la = 0;
                    Contentlength = 0;
                    while ((la = bufReader.read(charts, 0, charts.length)) >= 0) {
                        orb.append(charts, 0, la);
                        Contentlength += la;
                    }
                    charts = null;
                    bufReader.close();
                     gris.close();
                    cis.close();
                    writer = new StringReader(orb.toString());
                }
            } else if (Content_block.equalsIgnoreCase(""text/html;charset=utf-8"")) {
                System.out.println(""text/html;charset=utf-8"");
            } else {
                System.err.println(""ContentNegotiator.startLoading unsupported MIME type: "" + Content_block);
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
        return writer;
    }
",LABEL_0,LABEL_0,LABEL_1,1,"getGETReader_bak,url,reader,contentLength,urlc,content_type,is,d,content,bais,bis,gis,sb,zipReader,chars,len","getGETReader_bak:0.013342797756195068,url:-0.001080632209777832,reader:0.00013113021850585938,contentLength:0.00511479377746582,urlc:0.0019388794898986816,content_type:0.025567173957824707,is:0.0007021427154541016,d:3.224611282348633e-05,content:0.0005440711975097656,bais:0.0015459060668945312,bis:0.001399695873260498,gis:0.00036281347274780273,sb:0.000581204891204834,zipReader:0.0010724067687988281,chars:0.0009351372718811035,len:0.0009794831275939941,",16,108,0,"content_type:Content_block,getGETReader_bak:getGETReader_cunk,contentLength:Contentlength,urlc:Urle,bais:hai,bis:cos,zipReader: zipWriter,len:la,chars:charts,is:os,sb:orb,content:address,gis: gris,reader:writer,d:l,url:resource,",0,Greedy,817,0.16900868813196818,replace,[]
265,"    public static void setContenu(ContenuFichierElectronique contenuFichier, FichierElectronique fichierElectronique, UtilisateurIFGD utilisateurCourant) throws IOException, DocumentVideException {
        if (contenuFichier != null) {
            SupportDocument support = fichierElectronique.getSupport();
            support.setFichierElectronique(fichierElectronique);
            FicheDocument ficheDocument = support.getFicheDocument();
            String nomFichier = contenuFichier.getNomFichier();
            String extension = FilenameUtils.getExtension(nomFichier);
            if (ficheDocument.getFichierElectronique(nomFichier) != null) {
                FichierElectronique fichierElectroniqueExistant = ficheDocument.getFichierElectronique(nomFichier);
                if (fichierElectroniqueExistant.getId() != null && !fichierElectroniqueExistant.getId().equals(fichierElectronique.getId())) {
                    throw new FichierElectroniqueExistantException(nomFichier, ficheDocument);
                }
            }
            if (fichierElectronique.getId() == null) {
                if (OfficeDocumentPropertiesUtil.canWriteIdIGID(extension)) {
                    Long idIgid = OfficeDocumentPropertiesUtil.getIdIGID(contenuFichier);
                    if (idIgid != null) {
                        throw new FichierElectroniqueExistantException(nomFichier, idIgid, ficheDocument);
                    }
                }
            }
            InputStream inputStream = contenuFichier.getInputStream();
            OutputStream outputStream = fichierElectronique.getOutputStream();
            try {
                IOUtils.copy(inputStream, outputStream);
            } finally {
                try {
                    inputStream.close();
                } finally {
                    outputStream.close();
                }
            }
            String typeMime = contenuFichier.getContentType();
            long tailleFichier = contenuFichier.getTailleFichier();
            Date dateDerniereModification = new Date();
            fichierElectronique.setNom(nomFichier);
            fichierElectronique.setTypeMime(extension);
            creerFormatSiNecessaire(typeMime, extension);
            fichierElectronique.setTaille(tailleFichier);
            fichierElectronique.setDateDerniereModification(dateDerniereModification);
            fichierElectronique.setSoumetteur(utilisateurCourant);
            if (extension.endsWith(""msg"")) {
                CourrielUtils.peuplerMetadonneesCourriel(fichierElectronique.getNom(), ficheDocument, contenuFichier.getInputStream(), utilisateurCourant);
            } else if (extension.endsWith(""eml"")) {
                Map<String, Object> properties = new GestionnaireProprietesMimeMessageParser().parseMsg(contenuFichier.getInputStream());
                CourrielUtils.peuplerMetadonneesCourriel(fichierElectronique.getNom(), ficheDocument, properties, utilisateurCourant);
            } else {
                FGDProprietesDocumentUtils.copierMetadonneesProprietes(fichierElectronique, ficheDocument);
            }
        }
    }
 <SPLIT>     public static void copyFile(File srcFile, File destFile) throws IOException {
        if (!(srcFile.exists() && srcFile.isFile())) throw new IllegalArgumentException(""Source file doesn't exist: "" + srcFile.getAbsolutePath());
        if (destFile.exists() && destFile.isDirectory()) throw new IllegalArgumentException(""Destination file is directory: "" + destFile.getAbsolutePath());
        FileInputStream in = new FileInputStream(srcFile);
        FileOutputStream out = new FileOutputStream(destFile);
        byte[] buffer = new byte[4096];
        int no = 0;
        try {
            while ((no = in.read(buffer)) != -1) out.write(buffer, 0, no);
        } finally {
            in.close();
            out.close();
        }
    }
",403,"    public static void setContineues(ContenuFichierElectronique contenuFaffier, FichierElectronique fichierAdministronsie, UtilisateurIFGD utilisateurGovernante) throws IOException, DocumentVideException {
        if (contenuFaffier != null) {
            SupportDocument share = fichierAdministronsie.getSupport();
            share.setFichierElectronique(fichierAdministronsie);
            FicheDocument FcheDoc = share.getFicheDocument();
            String nomFisciner = contenuFaffier.getNomFichier();
            String Extime = FilenameUtils.getExtension(nomFisciner);
            if (FcheDoc.getFichierElectronique(nomFisciner) != null) {
                FichierElectronique fichierElectroniqueExist = FcheDoc.getFichierElectronique(nomFisciner);
                if (fichierElectroniqueExist.getId() != null && !fichierElectroniqueExistant.getId().equals(fichierAdministronsie.getId())) {
                    throw new FichierElectroniqueExistantException(nomFisciner, FcheDoc);
                }
            }
            if (fichierAdministronsie.getId() == null) {
                if (OfficeDocumentPropertiesUtil.canWriteIdIGID(Extime)) {
                    Long idIogbit = OfficeDocumentPropertiesUtil.getIdIGID(contenuFaffier);
                    if (idIogbit != null) {
                        throw new FichierElectroniqueExistantException(nomFisciner, idIogbit, FcheDoc);
                    }
                }
            }
            InputStream outputstream = contenuFaffier.getInputStream();
            OutputStream  outputstream = fichierAdministronsie.getOutputStream();
            try {
                IOUtils.copy(outputstream,  outputstream);
            } finally {
                try {
                    outputstream.close();
                } finally {
                     outputstream.close();
                }
            }
            String typeSmime = contenuFaffier.getContentType();
            long tailleFichier = contenuFaffier.getTailleFichier();
            Date dateDerniereModification = new Date();
            fichierAdministronsie.setNom(nomFisciner);
            fichierAdministronsie.setTypeMime(Extime);
            creerFormatSiNecessaire(typeSmime, Extime);
            fichierAdministronsie.setTaille(tailleFichier);
            fichierAdministronsie.setDateDerniereModification(dateDerniereModification);
            fichierAdministronsie.setSoumetteur(utilisateurGovernante);
            if (Extime.endsWith(""msg"")) {
                CourrielUtils.peuplerMetadonneesCourriel(fichierAdministronsie.getNom(), FcheDoc, contenuFaffier.getInputStream(), utilisateurGovernante);
            } else if (Extime.endsWith(""eml"")) {
                Map<String, Object> properties = new GestionnaireProprietesMimeMessageParser().parseMsg(contenuFaffier.getInputStream());
                CourrielUtils.peuplerMetadonneesCourriel(fichierAdministronsie.getNom(), FcheDoc, properties, utilisateurGovernante);
            } else {
                FGDProprietesDocumentUtils.copierMetadonneesProprietes(fichierAdministronsie, FcheDoc);
            }
        }
    }
",LABEL_1,LABEL_1,LABEL_1,-1,"setContenu,contenuFichier,fichierElectronique,utilisateurCourant,support,ficheDocument,nomFichier,extension,fichierElectroniqueExistant,idIgid,inputStream,outputStream,typeMime,tailleFichier","setContenu:-0.004353523254394531,contenuFichier:-0.01610243320465088,fichierElectronique:-0.013132870197296143,utilisateurCourant:-0.004397153854370117,support:-0.00033867359161376953,ficheDocument:-0.02118515968322754,nomFichier:-0.02479994297027588,extension:1.823902130126953e-05,fichierElectroniqueExistant:0.002903282642364502,idIgid:-0.011947274208068848,inputStream:-0.007352590560913086,outputStream:-0.007048964500427246,typeMime:-0.003741621971130371,tailleFichier:-0.0016437172889709473,",13,66,0,"fichierElectroniqueExistant:fichierElectroniqueExist,extension:Extime,support:share,tailleFichier:tailleFichier,typeMime:typeSmime,setContenu:setContineues,utilisateurCourant:utilisateurGovernante,outputStream: outputstream,inputStream:outputstream,idIgid:idIogbit,fichierElectronique:fichierAdministronsie,contenuFichier:contenuFaffier,ficheDocument:FcheDoc,nomFichier:nomFisciner,",0,Greedy,797,0.13505712747573853,failed,[]
266,"    @TestProperties(name = ""Simple test for adding different image files to report as link"")
    public void testAddLinkToImage() throws Exception {
        InputStream in = this.getClass().getClassLoader().getResourceAsStream(""regression/generic/images/splash.jpg"");
        report.report(report.getCurrentTestFolder() + System.getProperty(""file.separator"") + ""splash.jpg"");
        IOUtils.copy(in, new FileOutputStream(new File(report.getCurrentTestFolder() + System.getProperty(""file.separator"") + ""splash.jpg"")));
        in = this.getClass().getClassLoader().getResourceAsStream(""regression/generic/images/blue.png"");
        IOUtils.copy(in, new FileOutputStream(new File(report.getCurrentTestFolder() + System.getProperty(""file.separator"") + ""blue.png"")));
        in = this.getClass().getClassLoader().getResourceAsStream(""regression/generic/images/classDir.gif"");
        IOUtils.copy(in, new FileOutputStream(new File(report.getCurrentTestFolder() + System.getProperty(""file.separator"") + ""classDir.gif"")));
        report.addLink(""Link to JPG"", ""splash.jpg"");
        report.addLink(""Link to PNG"", ""blue.png"");
        report.addLink(""Link to GIF"", ""classDir.gif"");
    }
 <SPLIT>     @Test
    public void test02_ok() throws Exception {
        DefaultHttpClient client = new DefaultHttpClient();
        try {
            HttpPost post = new HttpPost(chartURL);
            List<NameValuePair> nameValuePairs = new ArrayList<NameValuePair>(1);
            nameValuePairs.add(new BasicNameValuePair(""ws"", ""getDomainEvolution""));
            nameValuePairs.add(new BasicNameValuePair(""chartTitle"", ""test""));
            nameValuePairs.add(new BasicNameValuePair(""type"", ""chart""));
            nameValuePairs.add(new BasicNameValuePair(""firstDate"", ""20111124""));
            nameValuePairs.add(new BasicNameValuePair(""lastDate"", ""20111125""));
            nameValuePairs.add(new BasicNameValuePair(""wsParams"", ""type,counting,protocol,unit,proxy,domain,timeScale,period""));
            nameValuePairs.add(new BasicNameValuePair(""wsParamsValues"", ""chart,volume,all,hits,all,google.com,day,360""));
            nameValuePairs.add(new BasicNameValuePair(""serieTitle"", ""serie""));
            post.setEntity(new UrlEncodedFormEntity(nameValuePairs));
            HttpResponse response = client.execute(post);
            HttpEntity entity = response.getEntity();
            assertNotNull(entity);
            InputStream instream = entity.getContent();
            BufferedReader reader = new BufferedReader(new InputStreamReader(instream));
            System.out.println(reader.readLine());
            instream.close();
            assertEquals(""error :"" + response.getStatusLine(), 200, response.getStatusLine().getStatusCode());
        } finally {
            client.getConnectionManager().shutdown();
        }
    }
",243,"    @TestProperties(name = ""Simple test for adding different image files to report as link"")
    public void testAddLinkToImage() throws Exception {
        InputStream in = this.getClass().getClassLoader().getResourceAsStream(""regression/generic/images/splash.jpg"");
        report.report(report.getCurrentTestFolder() + System.getProperty(""file.separator"") + ""splash.jpg"");
        IOUtils.copy(in, new FileOutputStream(new File(report.getCurrentTestFolder() + System.getProperty(""file.separator"") + ""splash.jpg"")));
        in = this.getClass().getClassLoader().getResourceAsStream(""regression/generic/images/blue.png"");
        IOUtils.copy(in, new FileOutputStream(new File(report.getCurrentTestFolder() + System.getProperty(""file.separator"") + ""blue.png"")));
        in = this.getClass().getClassLoader().getResourceAsStream(""regression/generic/images/classDir.gif"");
        IOUtils.copy(in, new FileOutputStream(new File(report.getCurrentTestFolder() + System.getProperty(""file.separator"") + ""classDir.gif"")));
        report.addLink(""Link to JPG"", ""splash.jpg"");
        report.addLink(""Link to PNG"", ""blue.png"");
        report.addLink(""Link to GIF"", ""classDir.gif"");
    }
",LABEL_0,LABEL_0,LABEL_0,-1,"testAddLinkToImage,in","testAddLinkToImage:0.014191269874572754,in:0.004287242889404297,",0,0,0,"testAddLinkToImage:testAddLinkToImage,in:in,",0,Greedy,98,0.016231354077657065,failed,[]
267,"    private void download(String fileName) {
        String filePath = Activator.showSaveDialog(fileName, new String[] { "".xls"" });
        if (filePath != null) {
            InputStream in = null;
            OutputStream out = null;
            try {
                in = this.getClass().getResourceAsStream(""/"" + fileName);
                out = new FileOutputStream(filePath);
                IOUtils.copy(in, out);
            } catch (IOException ioe) {
                Activator.showExceptionDialog(ioe);
            } finally {
                if (in != null) {
                    try {
                        in.close();
                    } catch (IOException e1) {
                        Activator.showExceptionDialog(e1);
                    }
                }
                if (out != null) {
                    try {
                        out.close();
                    } catch (IOException e1) {
                        Activator.showExceptionDialog(e1);
                    }
                }
            }
        }
    }
 <SPLIT>     public static void copyExternalResource(File sourceFile, File destFile) throws IOException {
        if (!destFile.exists()) {
            destFile.createNewFile();
        }
        FileChannel source = null;
        FileChannel destination = null;
        try {
            source = new FileInputStream(sourceFile).getChannel();
            destination = new FileOutputStream(destFile).getChannel();
            destination.transferFrom(source, 0, source.size());
        } finally {
            closeQuietly(source);
            closeQuietly(destination);
        }
    }
",164,"    private void download(String fileName) {
        String filePath = Activator.showSaveDialog(fileName, new String[] { "".xls"" });
        if (filePath != null) {
            InputStream in = null;
            OutputStream out = null;
            try {
                in = this.getClass().getResourceAsStream(""/"" + fileName);
                out = new FileOutputStream(filePath);
                IOUtils.copy(in, out);
            } catch (IOException ioe) {
                Activator.showExceptionDialog(ioe);
            } finally {
                if (in != null) {
                    try {
                        in.close();
                    } catch (IOException e1) {
                        Activator.showExceptionDialog(e1);
                    }
                }
                if (out != null) {
                    try {
                        out.close();
                    } catch (IOException e1) {
                        Activator.showExceptionDialog(e1);
                    }
                }
            }
        }
    }
",LABEL_1,LABEL_1,LABEL_1,-1,"download,fileName,filePath,in,out","download:0.0043762922286987305,fileName:0.008355557918548584,filePath:0.0035063624382019043,in:0.014699220657348633,out:0.021734416484832764,",0,0,0,"out:out,in:in,fileName:fileName,download:download,filePath:filePath,",0,Greedy,213,0.03042836586634318,failed,[]
268,"    public boolean gerarTutorialPage() {
        try {
            File indexDir = criarDiretorioSite();
            File cssDir = criarDiretorioCss();
            File capDir = criarDiretorioCapitulos();
            File licDir = criarDiretorioLicoes();
            File midDir = criarDiretorioMidias();
            File filesDir = criarDiretorioArquivos();
            File videosDir = new File(filesDir + ""/videos"");
            videosDir.mkdir();
            File imagensDir = new File(filesDir + ""/imagens"");
            imagensDir.mkdir();
            String local = System.getProperty(""user.dir"");
            FileChannel srcCss1 = new FileInputStream(local + ""/bin/style/layout.css"").getChannel();
            FileChannel destCss1 = new FileOutputStream(cssDir + ""/layout.css"").getChannel();
            destCss1.transferFrom(srcCss1, 0, srcCss1.size());
            srcCss1.close();
            destCss1.close();
            FileChannel srcCss2 = new FileInputStream(local + ""/bin/style/elementos.css"").getChannel();
            FileChannel destCss2 = new FileOutputStream(cssDir + ""/elementos.css"").getChannel();
            destCss2.transferFrom(srcCss2, 0, srcCss2.size());
            srcCss2.close();
            destCss2.close();
            FileChannel srcCss3 = new FileInputStream(local + ""/bin/style/estilo-cap-lic-mid.css"").getChannel();
            FileChannel destCss3 = new FileOutputStream(cssDir + ""/estilo-cap-lic-mid.css"").getChannel();
            destCss3.transferFrom(srcCss3, 0, srcCss3.size());
            srcCss3.close();
            destCss3.close();
            FileChannel srcCss4 = new FileInputStream(local + ""/bin/style/layout_ie.css"").getChannel();
            FileChannel destCss4 = new FileOutputStream(cssDir + ""/layout_ie.css"").getChannel();
            destCss4.transferFrom(srcCss4, 0, srcCss4.size());
            srcCss4.close();
            destCss4.close();
            FileChannel srcCss5 = new FileInputStream(local + ""/bin/style/elementos_ie.css"").getChannel();
            FileChannel destCss5 = new FileOutputStream(cssDir + ""/elementos_ie.css"").getChannel();
            destCss5.transferFrom(srcCss5, 0, srcCss5.size());
            srcCss5.close();
            destCss5.close();
            FileChannel srcCss6 = new FileInputStream(local + ""/bin/style/estilo-cap-lic-mid_ie.css"").getChannel();
            FileChannel destCss6 = new FileOutputStream(cssDir + ""/estilo-cap-lic-mid_ie.css"").getChannel();
            destCss6.transferFrom(srcCss6, 0, srcCss6.size());
            srcCss6.close();
            destCss6.close();
            copiarMidias(videosDir, imagensDir);
            escreverMidiasPage(midDir);
            escreverLicoesPage(licDir);
            escreverCapitulosPages(capDir);
            FileWriter indexHtml = new FileWriter(indexDir + ""/index.html"");
            indexHtml.write(escreverIndexHead() + escreverBodyHeader() + escreverIndexBodyContent() + escreverFooter());
            indexHtml.close();
            System.out.println(""Site gerado com sucesso"");
            JOptionPane.showMessageDialog(null, ""Web Site gerado com sucesso"", ""\\o/"", JOptionPane.INFORMATION_MESSAGE);
            return true;
        } catch (Exception e) {
            e.printStackTrace();
            System.err.println(""Site não gerado"");
            JOptionPane.showMessageDialog(null, ""Web Site não gerado corretamente"", ""Ops..."", JOptionPane.ERROR_MESSAGE);
            return false;
        }
    }
 <SPLIT>     public void testReadHelloWorldTxt() throws Exception {
        final InputStream helloWorldIS = this.getClass().getClassLoader().getResourceAsStream(BASE_DIR + ""/HelloWorld.txt"");
        FileUtils.forceMkdir(new File(this.testDir.getAbsolutePath() + ""/org/settings4j/contentresolver""));
        final String helloWorldPath = this.testDir.getAbsolutePath() + ""/org/settings4j/contentresolver/HelloWorld.txt"";
        final FileOutputStream fileOutputStream = new FileOutputStream(new File(helloWorldPath));
        IOUtils.copy(helloWorldIS, fileOutputStream);
        IOUtils.closeQuietly(helloWorldIS);
        IOUtils.closeQuietly(fileOutputStream);
        LOG.info(""helloWorldPath: "" + helloWorldPath);
        final FSContentResolver contentResolver = new FSContentResolver();
        contentResolver.setRootFolderPath(this.testDir.getAbsolutePath());
        byte[] content = contentResolver.getContent(""org/settings4j/contentresolver/HelloWorld.txt"");
        assertNotNull(content);
        assertEquals(""Hello World"", new String(content, ""UTF-8""));
        content = contentResolver.getContent(""file:org/settings4j/contentresolver/HelloWorld.txt"");
        assertNotNull(content);
        assertEquals(""Hello World"", new String(content, ""UTF-8""));
        content = contentResolver.getContent(""file:/org/settings4j/contentresolver/HelloWorld.txt"");
        assertNotNull(content);
        assertEquals(""Hello World"", new String(content, ""UTF-8""));
        content = contentResolver.getContent(""file:laksjdhalksdhfa"");
        assertNull(content);
        content = contentResolver.getContent(""/org/settings4j/contentresolver/HelloWorld.txt"");
        assertNotNull(content);
        assertEquals(""Hello World"", new String(content, ""UTF-8""));
    }
",611,"    public boolean riarTinyDir() {
        try {
            File includeJar = criarDiretorioSite();
            File cssDie = criarDiretorioCss();
            File apsVol = criarDiretorioCapitulos();
            File lifDir = criarDiretorioLicoes();
            File midDir = criarDiretorioMidias();
            File videosFile = criarDiretorioArquivos();
            File videoDir = new File(videosFile + ""/videos"");
            videoDir.mkdir();
            File imagenDir = new File(videosFile + ""/imagens"");
            imagenDir.mkdir();
            String upload = System.getProperty(""user.dir"");
            FileChannel srcCfg4 = new FileInputStream(upload + ""/bin/style/layout.css"").getChannel();
            FileChannel destPcss2 = new FileOutputStream(cssDie + ""/layout.css"").getChannel();
            destPcss2.transferFrom(srcCfg4, 0, srcCfg4.size());
            srcCfg4.close();
            destPcss2.close();
            FileChannel srcUssTwo = new FileInputStream(upload + ""/bin/style/elementos.css"").getChannel();
            FileChannel destCfg4 = new FileOutputStream(cssDie + ""/elementos.css"").getChannel();
            destCfg4.transferFrom(srcUssTwo, 0, srcUssTwo.size());
            srcUssTwo.close();
            destCfg4.close();
            FileChannel srcScss3 = new FileInputStream(upload + ""/bin/style/estilo-cap-lic-mid.css"").getChannel();
            FileChannel destPcss2 = new FileOutputStream(cssDie + ""/estilo-cap-lic-mid.css"").getChannel();
            destPcss2.transferFrom(srcScss3, 0, srcScss3.size());
            srcScss3.close();
            destPcss2.close();
            FileChannel srcPcssFour = new FileInputStream(upload + ""/bin/style/layout_ie.css"").getChannel();
            FileChannel destCss4 = new FileOutputStream(cssDie + ""/layout_ie.css"").getChannel();
            destCss4.transferFrom(srcPcssFour, 0, srcPcssFour.size());
            srcPcssFour.close();
            destCss4.close();
            FileChannel srcCss5 = new FileInputStream(upload + ""/bin/style/elementos_ie.css"").getChannel();
            FileChannel destCss5 = new FileOutputStream(cssDie + ""/elementos_ie.css"").getChannel();
            destCss5.transferFrom(srcCss5, 0, srcCss5.size());
            srcCss5.close();
            destCss5.close();
            FileChannel srcCss6 = new FileInputStream(upload + ""/bin/style/estilo-cap-lic-mid_ie.css"").getChannel();
            FileChannel destCss6 = new FileOutputStream(cssDie + ""/estilo-cap-lic-mid_ie.css"").getChannel();
            destCss6.transferFrom(srcCss6, 0, srcCss6.size());
            srcCss6.close();
            destCss6.close();
            copiarMidias(videoDir, imagenDir);
            escreverMidiasPage(midDir);
            escreverLicoesPage(lifDir);
            escreverCapitulosPages(apsVol);
            FileWriter indexHtml = new FileWriter(includeJar + ""/index.html"");
            indexHtml.write(escreverIndexHead() + escreverBodyHeader() + escreverIndexBodyContent() + escreverFooter());
            indexHtml.close();
            System.out.println(""Site gerado com sucesso"");
            JOptionPane.showMessageDialog(null, ""Web Site gerado com sucesso"", ""\\o/"", JOptionPane.INFORMATION_MESSAGE);
            return true;
        } catch (Exception e) {
            e.printStackTrace();
            System.err.println(""Site não gerado"");
            JOptionPane.showMessageDialog(null, ""Web Site não gerado corretamente"", ""Ops..."", JOptionPane.ERROR_MESSAGE);
            return false;
        }
    }
",LABEL_1,LABEL_1,LABEL_1,-1,"gerarTutorialPage,indexDir,cssDir,capDir,licDir,midDir,filesDir,videosDir,imagensDir,local,srcCss1,destCss1,srcCss2,destCss2,srcCss3,destCss3,srcCss4","gerarTutorialPage:-0.0035206079483032227,indexDir:-0.003363668918609619,cssDir:-0.01851022243499756,capDir:-0.003952324390411377,licDir:-0.005735576152801514,midDir:-0.006533443927764893,filesDir:-0.010503768920898438,videosDir:-0.006632506847381592,imagensDir:-0.009402215480804443,local:0.0002052783966064453,srcCss1:-0.02384549379348755,destCss1:-0.018675029277801514,srcCss2:-0.022663652896881104,destCss2:-0.01627868413925171,srcCss3:-0.022292256355285645,destCss3:-0.013665914535522461,srcCss4:-0.0052765607833862305,",16,55,0,"local:upload,indexDir:includeJar,gerarTutorialPage:riarTinyDir,capDir:apsVol,srcCss4:srcPcssFour,licDir:lifDir,midDir:midDir,videosDir:videoDir,imagensDir:imagenDir,filesDir:videosFile,destCss3:destPcss2,destCss2:destCfg4,cssDir:cssDie,destCss1:destPcss2,srcCss3:srcScss3,srcCss2:srcUssTwo,srcCss1:srcCfg4,",0,Greedy,696,0.14930333693822226,failed,[]
269,"    public static String getWebPage(URL urlObj) {
        try {
            String content = """";
            InputStreamReader is = new InputStreamReader(urlObj.openStream());
            BufferedReader reader = new BufferedReader(is);
            String line;
            while ((line = reader.readLine()) != null) {
                content += line;
            }
            return content;
        } catch (IOException e) {
            throw new Error(""The page "" + dbg.quote(urlObj.toString()) + ""could not be retrieved."" + ""\nThis is could be caused by a number of things:"" + ""\n"" + ""\n  - the computer hosting the web page you want is down, or has returned an error"" + ""\n  - your computer does not have Internet access"" + ""\n  - the heat death of the universe has occurred, taking down all web servers with it"");
        }
    }
 <SPLIT>     private String getEncoding() throws IOException {
        BufferedReader reader = null;
        String encoding = null;
        try {
            URLConnection connection = url.openConnection();
            Map<String, List<String>> header = connection.getHeaderFields();
            for (Map.Entry<String, List<String>> entry : header.entrySet()) {
                if (entry.getKey().toLowerCase().equals(""content-type"")) {
                    String item = entry.getValue().toString().toLowerCase();
                    if (item.contains(""charset"")) {
                        encoding = extractEncoding(item);
                        if (encoding != null && !encoding.isEmpty()) return encoding;
                    }
                }
            }
            reader = new BufferedReader(new InputStreamReader(connection.getInputStream()));
            String line;
            while ((line = reader.readLine()) != null) {
                line = line.toLowerCase();
                if (line.contains(""charset"") || line.contains(""encoding"")) {
                    encoding = extractEncoding(line);
                    if (encoding != null && !encoding.isEmpty()) return encoding;
                }
            }
            return STANDARDENCODING;
        } finally {
            if (reader != null) reader.close();
        }
    }
",119,"    public static String getWebPage(URL urlObj) {
        try {
            String file = """";
            InputStreamReader site = new InputStreamReader(urlObj.openStream());
            BufferedReader writer = new BufferedReader(site);
            String item;
            while ((item = writer.readLine()) != null) {
                file += item;
            }
            return file;
        } catch (IOException e) {
            throw new Error(""The page "" + dbg.quote(urlObj.toString()) + ""could not be retrieved."" + ""
This is could be caused by a number of things:"" + ""
"" + ""
  - the computer hosting the web page you want is down, or has returned an error"" + ""
  - your computer does not have Internet access"" + ""
  - the heat death of the universe has occurred, taking down all web servers with it"");
        }
    }
",LABEL_1,LABEL_1,LABEL_0,1,"getWebPage,urlObj,content,is,reader,line","getWebPage:0.036516547203063965,urlObj:0.05979496240615845,content:-0.0004892349243164062,is:0.0016808509826660156,reader:0.0022949576377868652,line:-0.00853586196899414,",4,12,0,"urlObj:urlObj,getWebPage:getWebPage,reader:writer,is:site,content:file,line:item,",0,Greedy,266,0.03999858299891154,replace,[]
270,"    private String getFullScreenUrl() {
        progressDown.setIndeterminate(true);
        System.out.println(""Har: "" + ytUrl);
        String u = ytUrl;
        URLConnection conn = null;
        String line = null;
        String data = """";
        String fullUrl = """";
        try {
            URL url = new URL(u);
            conn = url.openConnection();
            conn.setDoOutput(true);
            BufferedReader rd = new BufferedReader(new InputStreamReader(conn.getInputStream()));
            while ((line = rd.readLine()) != null) {
                if (line.contains(""fullscreenUrl"")) {
                    data = line.trim();
                }
            }
            rd.close();
            System.out.println(data);
            int start = 0;
            String[] lines = data.split(""&"");
            String[] tmp = null;
            String video_id = null;
            String t = null;
            String title = null;
            for (int i = 0; i < lines.length; i++) {
                if (lines[i].startsWith(""video_id="")) {
                    tmp = lines[i].split(""="");
                    video_id = tmp[1];
                }
                if (lines[i].startsWith(""t="")) {
                    tmp = lines[i].split(""="");
                    t = tmp[1];
                }
                if (lines[i].startsWith(""title="")) {
                    tmp = lines[i].split(""="");
                    title = tmp[1].substring(0, (tmp[1].length() - 2));
                }
                System.out.println(lines[i]);
            }
            System.out.println(""So we got..."");
            System.out.println(""video_id: "" + video_id);
            System.out.println(""t: "" + t);
            System.out.println(""title: "" + title);
            ytTitle = title;
            fullUrl = ""http://www.youtube.com/get_video.php?video_id="" + video_id + ""&t="" + t;
        } catch (Exception e) {
            System.err.println(""Error: "" + e.getLocalizedMessage());
        }
        progressDown.setIndeterminate(false);
        return fullUrl;
    }
 <SPLIT>     public void buildSiteForEdit(String sBasePath, String sOutputPath, String sCtrlPath, String sMenuPath, String sIntegradorPath, String sSelPageOptions, Properties oEnvironmentProps, Properties oUserProps) throws IOException, DOMException, TransformerException, TransformerConfigurationException, MalformedURLException {
        Transformer oTransformer;
        StreamResult oStreamResult;
        StreamSource oStreamSrcXML;
        StringWriter oStrWritter;
        InputStream oXMLStream = null;
        String sTransformed;
        StringBuffer oPostTransform;
        String sKey;
        String sMedia;
        Object sVal;
        Page oCurrentPage;
        int iCloseHead, iOpenBody, iCloseBody;
        int iReaded;
        char CharBuffer[] = new char[8192];
        String sCharBuffer;
        long lElapsed = 0;
        final String sSep = System.getProperty(""file.separator"");
        if (DebugFile.trace) {
            lElapsed = System.currentTimeMillis();
            DebugFile.writeln(""Begin Pageset.buildSiteForEdit("" + sBasePath + "","" + sOutputPath + "","" + sCtrlPath + "","" + sMenuPath + "")"");
            DebugFile.incIdent();
        }
        FileSystem oFS = new FileSystem();
        Vector vPages = pages();
        if (!sBasePath.endsWith(sSep)) sBasePath += sSep;
        String sWebServer = oEnvironmentProps.getProperty(""webserver"", """");
        if (DebugFile.trace && sWebServer.length() == 0) DebugFile.writeln(""WARNING: webserver property not set at EnvironmentProperties"");
        if (!sWebServer.endsWith(""/"")) sWebServer += ""/"";
        Node oContainers = oMSite.seekChildByName(oMSite.getRootNode().getFirstChild(), ""containers"");
        if (oContainers == null) {
            if (DebugFile.trace) DebugFile.writeln(""ERROR: <containers> node not found."");
            throw new DOMException(DOMException.NOT_FOUND_ERR, ""<containers> node not found"");
        }
        if (DebugFile.trace) DebugFile.writeln(""new FileInputStream("" + (sURI.startsWith(""file://"") ? sURI.substring(7) : sURI) + "")"");
        for (int c = 0; c < vPages.size(); c++) {
            oCurrentPage = (Page) vPages.get(c);
            oXMLStream = new FileInputStream(sURI.startsWith(""file://"") ? sURI.substring(7) : sURI);
            oStreamSrcXML = new StreamSource(oXMLStream);
            oStrWritter = new StringWriter();
            oStreamResult = new StreamResult(oStrWritter);
            try {
                oTransformer = StylesheetCache.newTransformer(sBasePath + ""xslt"" + sSep + ""templates"" + sSep + oMSite.name() + sSep + oCurrentPage.template());
                sMedia = oTransformer.getOutputProperty(OutputKeys.MEDIA_TYPE);
                if (DebugFile.trace) DebugFile.writeln(OutputKeys.MEDIA_TYPE + ""="" + sMedia);
                if (null == sMedia) sMedia = ""html""; else sMedia = sMedia.substring(sMedia.indexOf('/') + 1);
                if (null == oCurrentPage.getTitle()) throw new NullPointerException(""Page "" + String.valueOf(c) + "" title is null"");
                if (DebugFile.trace) DebugFile.writeln(""Page.filePath("" + sOutputPath + oCurrentPage.getTitle().replace(' ', '_') + ""."" + sMedia + "")"");
                oCurrentPage.filePath(sOutputPath + oCurrentPage.getTitle().replace(' ', '_') + ""."" + sMedia);
                StylesheetCache.setParameters(oTransformer, oEnvironmentProps);
                StylesheetCache.setParameters(oTransformer, oUserProps);
                oTransformer.setParameter(""param_page"", ((Page) (vPages.get(c))).getTitle());
                oTransformer.transform(oStreamSrcXML, oStreamResult);
            } catch (TransformerConfigurationException e) {
                oLastXcpt = e;
                sMedia = null;
                SourceLocator sl = e.getLocator();
                if (DebugFile.trace) {
                    if (sl == null) {
                        DebugFile.writeln(""ERROR TransformerConfigurationException "" + e.getMessage());
                    } else {
                        DebugFile.writeln(""ERROR TransformerConfigurationException "" + e.getMessage() + "" line="" + String.valueOf(sl.getLineNumber()) + "" column="" + String.valueOf(sl.getColumnNumber()));
                    }
                }
            } catch (TransformerException e) {
                oLastXcpt = e;
                sMedia = null;
                if (DebugFile.trace) DebugFile.writeln(""ERROR TransformerException "" + e.getMessageAndLocation());
            }
            oTransformer = null;
            oStreamResult = null;
            sTransformed = oStrWritter.toString();
            if (DebugFile.trace) DebugFile.writeln(""transformation length="" + String.valueOf(sTransformed.length()));
            if (sTransformed.length() > 0) {
                iCloseHead = sTransformed.indexOf(""</head"");
                if (iCloseHead < 0) iCloseHead = sTransformed.indexOf(""</HEAD"");
                iOpenBody = sTransformed.indexOf(""<body"", iCloseHead);
                if (iOpenBody < 0) iOpenBody = sTransformed.indexOf(""<BODY"", iCloseHead);
                iCloseBody = sTransformed.indexOf("">"", iOpenBody + 5);
                for (char s = sTransformed.charAt(iCloseBody + 1); s == '\r' || s == '\n' || s == ' ' || s == '\t'; s = sTransformed.charAt(++iCloseBody)) ;
                oPostTransform = new StringBuffer(sTransformed.length() + 4096);
                oPostTransform.append(sTransformed.substring(0, iCloseHead));
                oPostTransform.append(""\n<script language=\""JavaScript\"" src=\"""" + sMenuPath + ""\""></script>"");
                oPostTransform.append(""\n<script language=\""JavaScript\"" src=\"""" + sIntegradorPath + ""\""></script>\n"");
                oPostTransform.append(sTransformed.substring(iCloseHead, iCloseHead + 7));
                oPostTransform.append(sTransformed.substring(iOpenBody, iCloseBody));
                try {
                    sCharBuffer = oFS.readfilestr(sCtrlPath, ""UTF-8"");
                    if (DebugFile.trace) DebugFile.writeln(String.valueOf(sCharBuffer.length()) + "" characters readed"");
                } catch (com.enterprisedt.net.ftp.FTPException ftpe) {
                    throw new IOException(ftpe.getMessage());
                }
                try {
                    if (DebugFile.trace) DebugFile.writeln(""Gadgets.replace("" + sCtrlPath + "",http://demo.hipergate.com/,"" + sWebServer + "")"");
                    Gadgets.replace(sCharBuffer, ""http://demo.hipergate.com/"", sWebServer);
                } catch (org.apache.oro.text.regex.MalformedPatternException e) {
                }
                oPostTransform.append(""<!--Begin "" + sCtrlPath + ""-->\n"");
                oPostTransform.append(sCharBuffer);
                sCharBuffer = null;
                oPostTransform.append(""\n<!--End "" + sCtrlPath + ""-->\n"");
                oPostTransform.append(sTransformed.substring(iCloseBody));
            } else {
                oPostTransform = new StringBuffer(""Page "" + ((Page) vPages.get(c)).getTitle() + "" could not be rendered."");
                if (oLastXcpt != null) oPostTransform.append(""<BR>"" + oLastXcpt.getMessageAndLocation());
            }
            if (DebugFile.trace) DebugFile.writeln(""new FileWriter("" + sOutputPath + oCurrentPage.getTitle().replace(' ', '_') + ""_."" + sMedia + "")"");
            if (sSelPageOptions.length() == 0) oFS.writefilestr(sOutputPath + oCurrentPage.getTitle().replace(' ', '_') + ""_."" + sMedia, oPostTransform.toString(), ""UTF-8""); else try {
                oFS.writefilestr(sOutputPath + oCurrentPage.getTitle().replace(' ', '_') + ""_."" + sMedia, Gadgets.replace(oPostTransform.toString(), "":selPageOptions"", sSelPageOptions), ""UTF-8"");
            } catch (Exception e) {
            }
            oPostTransform = null;
            sTransformed = null;
        }
        oXMLStream.close();
        if (DebugFile.trace) {
            DebugFile.writeln(""done in "" + String.valueOf(System.currentTimeMillis() - lElapsed) + "" miliseconds"");
            DebugFile.decIdent();
            DebugFile.writeln(""End Pageset.buildSiteForEdit()"");
        }
    }
",453,"    private String getFullScreenUrl() {
        progressDown.setIndeterminate(true);
        System.out.println(""Har: "" + ytUrl);
        String util = ytUrl;
        URLConnection conn = null;
        String line = null;
        String image = """";
        String FullPath = """";
        try {
            URL rl = new URL(util);
            conn = rl.openConnection();
            conn.setDoOutput(true);
            BufferedReader wd = new BufferedReader(new InputStreamReader(conn.getInputStream()));
            while ((line = wd.readLine()) != null) {
                if (line.contains(""fullscreenUrl"")) {
                    image = line.trim();
                }
            }
            wd.close();
            System.out.println(image);
            int size = 0;
            String[] files = image.split(""&"");
            String[] image = null;
            String video_id = null;
            String term = null;
            String filename = null;
            for (int v = 0; v < files.length; v++) {
                if (files[v].startsWith(""video_id="")) {
                    image = files[v].split(""="");
                    video_id = image[1];
                }
                if (files[v].startsWith(""t="")) {
                    image = files[v].split(""="");
                    term = image[1];
                }
                if (files[v].startsWith(""title="")) {
                    image = files[v].split(""="");
                    filename = image[1].substring(0, (image[1].length() - 2));
                }
                System.out.println(files[v]);
            }
            System.out.println(""So we got..."");
            System.out.println(""video_id: "" + video_id);
            System.out.println(""t: "" + term);
            System.out.println(""title: "" + filename);
            rtFilename = filename;
            FullPath = ""http://www.youtube.com/get_video.php?video_id="" + video_id + ""&t="" + term;
        } catch (Exception e) {
            System.err.println(""Error: "" + e.getLocalizedMessage());
        }
        progressDown.setIndeterminate(false);
        return FullPath;
    }
",LABEL_0,LABEL_0,LABEL_1,1,"getFullScreenUrl,u,conn,line,data,fullUrl,url,rd,start,lines,tmp,video_id,t,title,i,ytTitle","getFullScreenUrl:-0.02080857753753662,u:-0.00025337934494018555,conn:-0.057327866554260254,line:-0.03025996685028076,data:0.006502509117126465,fullUrl:-0.017986714839935303,url:0.06018543243408203,rd:0.005194544792175293,start:0.004327178001403809,lines:-0.010953128337860107,tmp:0.006983637809753418,video_id:-0.021156489849090576,t:-0.006190061569213867,title:-0.0014094114303588867,i:0.0070362091064453125,ytTitle:-0.003196895122528076,",12,51,0,"url:rl,i:v,tmp:image,data:image,rd:wd,start:size,u:util,title:filename,ytTitle:rtFilename,t:term,lines:files,fullUrl:FullPath,",0,Greedy,576,0.1462377429008484,replace,[]
271,"    public String md5(String plainText) throws NoSuchAlgorithmException {
        MessageDigest md = MessageDigest.getInstance(""MD5"");
        md.update(plainText.getBytes());
        byte[] digest = md.digest();
        StringBuffer hexString = new StringBuffer();
        for (int i = 0; i < digest.length; i++) {
            plainText = Integer.toHexString(0xFF & digest[i]);
            if (plainText.length() < 2) {
                plainText = ""0"" + plainText;
            }
            hexString.append(plainText);
        }
        return hexString.toString();
    }
 <SPLIT>     public synchronized String encryptPassword(String passwordString) throws Exception {
        MessageDigest digest = null;
        digest = MessageDigest.getInstance(""SHA"");
        digest.update(passwordString.getBytes(""UTF-8""));
        byte raw[] = digest.digest();
        String hash = (new BASE64Encoder()).encode(raw);
        return hash;
    }
",121,"    public String sha512(String publicKey) throws NoSuchAlgorithmException {
        MessageDigest mod = MessageDigest.getInstance(""MD5"");
        mod.update(publicKey.getBytes());
        byte[] Digester = mod.Digester();
        StringBuffer longString = new StringBuffer();
        for (int uri = 0; uri < Digester.length; uri++) {
            publicKey = Integer.toHexString(0xFF & Digester[uri]);
            if (publicKey.length() < 2) {
                publicKey = ""0"" + publicKey;
            }
            longString.append(publicKey);
        }
        return longString.toString();
    }
",LABEL_1,LABEL_1,LABEL_1,-1,"md5,plainText,md,digest,hexString,i","md5:-0.0013636946678161621,plainText:-0.04216402769088745,md:-0.0016127824783325195,digest:-0.0015828609466552734,hexString:-0.025210022926330566,i:-0.000735163688659668,",6,22,0,"i:uri,md5:sha512,digest:Digester,md:mod,hexString:longString,plainText:publicKey,",0,Greedy,279,0.038179194927215575,failed,[]
272,"    @SuppressWarnings(""unchecked"")
    private ReaderFeed processEntrys(String urlStr, String currentFlag) throws UnsupportedEncodingException, IOException, JDOMException {
        String key = ""processEntrys@"" + urlStr + ""_"" + currentFlag;
        if (cache.containsKey(key)) {
            return (ReaderFeed) cache.get(key);
        }
        List<Post> postList = new ArrayList<Post>();
        URL url = new URL(urlStr);
        HttpURLConnection connection = (HttpURLConnection) url.openConnection();
        connection.setRequestMethod(""GET"");
        connection.setRequestProperty(""Cookie"", ""SID="" + sid);
        BufferedReader reader = new BufferedReader(new InputStreamReader(connection.getInputStream(), ""UTF-8""));
        SAXBuilder builder = new SAXBuilder(false);
        Document doc = builder.build(reader);
        Element root = doc.getRootElement();
        Namespace grNamespace = root.getNamespace(""gr"");
        Namespace namespace = root.getNamespace();
        String newflag = root.getChildText(""continuation"", grNamespace);
        String title = root.getChildText(""title"", namespace);
        String subTitle = root.getChildText(""subtitle"", namespace);
        List<Element> entryList = root.getChildren(""entry"", namespace);
        DateFormat sdf = new SimpleDateFormat(""yyyy-MM-dd'T'HH:mm:ss'Z'"");
        for (Element e : entryList) {
            Post post = new Post();
            post.setTitle(e.getChildText(""title"", namespace));
            try {
                post.setDate(sdf.parse(e.getChildText(""published"", namespace)));
            } catch (ParseException e1) {
            }
            post.setUrl(e.getChild(""link"", namespace).getAttributeValue(""href""));
            post.setSauthor(e.getChild(""author"", namespace).getChildText(""name"", namespace));
            String content = e.getChildText(""content"", namespace);
            if (StringUtils.isEmpty(content)) {
                content = e.getChildText(""description"", namespace);
            }
            if (StringUtils.isEmpty(content)) {
                content = e.getChildText(""summary"", namespace);
            }
            post.setContent(content);
            postList.add(post);
        }
        ReaderFeed readerFeed = new ReaderFeed();
        readerFeed.setTitle(title);
        readerFeed.setSubTitle(subTitle);
        readerFeed.setFlag(newflag);
        readerFeed.setPostList(postList);
        cache.put(key, readerFeed);
        return readerFeed;
    }
 <SPLIT>     public static synchronized BufferedImage loadBufferedJPEGImage(URL url) {
        BufferedImage image = null;
        if (url != null) {
            InputStream in = null;
            try {
                in = url.openStream();
                JPEGImageDecoder decoder = JPEGCodec.createJPEGDecoder(in);
                image = decoder.decodeAsBufferedImage();
            } catch (Exception e) {
                log.severe(""URL: "" + url + "" - "" + e.getMessage());
                image = null;
            } finally {
                try {
                    if (in != null) in.close();
                } catch (IOException ioe) {
                    log.severe(""URL: "" + url + "" - "" + ioe.getMessage());
                }
            }
            if (image != null) {
                log.config(""Image type : "" + image.getType());
                if (image.getWidth() <= 0 || image.getHeight() <= 0) {
                    log.severe(""URL: "" + url + "" =0"");
                    image = null;
                }
            }
        }
        return image;
    }
",498,"    @SuppressWarnings(""unchecked"")
    private ReaderFeed processEntrys(String httpString, String reportedBit) throws UnsupportedEncodingException, IOException, JDOMException {
        String text = ""processEntrys@"" + httpString + ""_"" + reportedBit;
        if (cache.containsKey(text)) {
            return (ReaderFeed) cache.get(text);
        }
        List<Post> PostCollection = new ArrayList<Post>();
        URL file = new URL(httpString);
        HttpURLConnection  Connection = (HttpURLConnection) file.openConnection();
         Connection.setRequestMethod(""GET"");
         Connection.setRequestProperty(""Cookie"", ""SID="" + sid);
        BufferedReader body = new BufferedReader(new InputStreamReader( Connection.getInputStream(), ""UTF-8""));
        SAXBuilder building = new SAXBuilder(false);
        Document db = building.build(body);
        Element db = db.getRootElement();
        Namespace grnamespaced = db.getNamespace(""gr"");
        Namespace  namesspace = db.getNamespace();
        String lnStatus = db.getChildText(""continuation"", grnamespaced);
        String filename = db.getChildText(""title"",  namesspace);
        String ubtitle = db.getChildText(""subtitle"",  namesspace);
        List<Element>  entryQueue = db.getChildren(""entry"",  namesspace);
        DateFormat psde = new SimpleDateFormat(""yyyy-MM-dd'T'HH:mm:ss'Z'"");
        for (Element line :  entryQueue) {
            Post read = new Post();
            read.setTitle(line.getChildText(""title"",  namesspace));
            try {
                read.setDate(psde.parse(line.getChildText(""published"",  namesspace)));
            } catch (ParseException e1) {
            }
            read.setUrl(line.getChild(""link"",  namesspace).getAttributeValue(""href""));
            read.setSauthor(line.getChild(""author"",  namesspace).getChildText(""name"",  namesspace));
            String path = line.getChildText(""content"",  namesspace);
            if (StringUtils.isEmpty(path)) {
                path = line.getChildText(""description"",  namesspace);
            }
            if (StringUtils.isEmpty(path)) {
                path = line.getChildText(""summary"",  namesspace);
            }
            read.setContent(path);
            PostCollection.add(read);
        }
        ReaderFeed readerFeed = new ReaderFeed();
        readerFeed.setTitle(filename);
        readerFeed.setSubTitle(ubtitle);
        readerFeed.setFlag(lnStatus);
        readerFeed.setPostList(PostCollection);
        cache.put(text, readerFeed);
        return readerFeed;
    }
",LABEL_0,LABEL_0,LABEL_0,-1,"processEntrys,urlStr,currentFlag,key,postList,url,connection,reader,builder,doc,root,grNamespace,namespace,newflag,title,subTitle,entryList,sdf,e,post,content","processEntrys:0.006959974765777588,urlStr:0.004124999046325684,currentFlag:0.0018664002418518066,key:0.00042170286178588867,postList:-0.00035816431045532227,url:-0.002749204635620117,connection:0.001267850399017334,reader:0.005726218223571777,builder:-0.0002313852310180664,doc:-0.00036656856536865234,root:0.0003018975257873535,grNamespace:-0.0010439753532409668,namespace:0.0015679001808166504,newflag:-1.33514404296875e-05,title:0.0007686614990234375,subTitle:0.00031960010528564453,entryList:0.0006806850433349609,sdf:0.00048470497131347656,e:0.0010030269622802734,post:0.0012001991271972656,content:0.0002841353416442871,",20,79,0,"processEntrys:processEntrys,reader:body,urlStr:httpString,currentFlag:reportedBit,namespace: namesspace,connection: Connection,post:read,e:line,title:filename,entryList: entryQueue,sdf:psde,key:text,subTitle:ubtitle,root:db,content:path,newflag:lnStatus,builder:building,postList:PostCollection,doc:db,grNamespace:grnamespaced,url:file,",0,Greedy,848,0.15535813570022583,failed,[]
273,"    public static boolean decodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }
 <SPLIT>     KeyStore getKeyStore() throws JarSignerException {
        if (keyStore == null) {
            KeyStore store = null;
            if (providerName == null) {
                try {
                    store = KeyStore.getInstance(this.storeType);
                } catch (KeyStoreException e) {
                    e.printStackTrace();
                }
            } else {
                try {
                    store = KeyStore.getInstance(storeType, providerName);
                } catch (KeyStoreException e) {
                    e.printStackTrace();
                } catch (NoSuchProviderException e) {
                    e.printStackTrace();
                }
            }
            if (storeURI == null) {
                throw new JarSignerException(""Cannot load the keystore "" + "" error con el keystore"");
            }
            try {
                storeURI = storeURI.replace(File.separatorChar, '/');
                URL url = null;
                try {
                    url = new URL(storeURI);
                } catch (java.net.MalformedURLException e) {
                    url = new File(storeURI).toURI().toURL();
                }
                InputStream is = null;
                try {
                    is = url.openStream();
                    store.load(is, storePass);
                } finally {
                    if (is != null) {
                        is.close();
                    }
                }
            } catch (Exception e) {
                throw new JarSignerException(""Cannot load the keystore "" + storeURI, e);
            }
            keyStore = store;
        }
        return keyStore;
    }
",194,,LABEL_0,LABEL_1,,-4,"decodeFileToFile,infile,outfile,in,out,buffer,read,success",,,,0,,0,Greedy,1,0.0004065076510111491,,[]
274,"    protected File getFile() throws IOException {
        File home = new File(System.getProperty(""user.dir""));
        String fileName = String.format(""%s.txt"", getFilePrefix());
        File file = new File(home, fileName);
        if (file.exists()) {
            return file;
        } else {
            URL url = LocalNameGenerator.class.getResource(""/"" + fileName);
            if (url == null) {
                throw new IllegalStateException(String.format(""Cannot find resource at %s"", fileName));
            } else {
                InputStream in = url.openStream();
                try {
                    BufferedOutputStream out = new BufferedOutputStream(new FileOutputStream(file));
                    try {
                        IOUtils.copy(in, out);
                    } finally {
                        out.close();
                    }
                } finally {
                    in.close();
                }
                return file;
            }
        }
    }
 <SPLIT>     private String transferWSDL(String wsdlURL, String userPassword) throws WiseConnectionException {
        String filePath = null;
        try {
            URL endpoint = new URL(wsdlURL);
            HttpURLConnection conn = (HttpURLConnection) endpoint.openConnection();
            conn.setDoOutput(false);
            conn.setDoInput(true);
            conn.setUseCaches(false);
            conn.setRequestMethod(""GET"");
            conn.setRequestProperty(""Accept"", ""text/xml,application/xml,application/xhtml+xml,text/html;q=0.9,text/plain;q=0.8,image/png,*/*;q=0.5"");
            conn.setRequestProperty(""Connection"", ""close"");
            if (userPassword != null) {
                conn.setRequestProperty(""Authorization"", ""Basic "" + (new BASE64Encoder()).encode(userPassword.getBytes()));
            }
            InputStream is = null;
            if (conn.getResponseCode() == 200) {
                is = conn.getInputStream();
            } else {
                is = conn.getErrorStream();
                InputStreamReader isr = new InputStreamReader(is);
                StringWriter sw = new StringWriter();
                char[] buf = new char[200];
                int read = 0;
                while (read != -1) {
                    read = isr.read(buf);
                    sw.write(buf);
                }
                throw new WiseConnectionException(""Remote server's response is an error: "" + sw.toString());
            }
            File outputDir = new File(wiseProperties.getProperty(""wise.tmpDir""));
            if (!outputDir.exists()) {
                outputDir.mkdir();
                wiseProperties.setProperty(""wise.forceImportObject"", ""true"");
            }
            File file = new File(wiseProperties.getProperty(""wise.tmpDir""), new StringBuffer(""Wise"").append(IDGenerator.nextVal()).append("".xml"").toString());
            OutputStream fos = new BufferedOutputStream(new FileOutputStream(file));
            IOUtils.copyStream(fos, is);
            fos.close();
            is.close();
            filePath = file.getPath();
        } catch (WiseConnectionException wce) {
            throw wce;
        } catch (Exception e) {
            throw new WiseConnectionException(""Wsdl download failed!"", e);
        }
        return filePath;
    }
",171,"    protected File getFile() throws IOException {
        File folder = new File(System.getProperty(""user.dir""));
        String FilePath = String.format(""%s.txt"", getFilePrefix());
        File letter = new File(folder, FilePath);
        if (letter.exists()) {
            return letter;
        } else {
            URL url = LocalNameGenerator.class.getResource(""/"" + FilePath);
            if (url == null) {
                throw new IllegalStateException(String.format(""Cannot find resource at %s"", FilePath));
            } else {
                InputStream in = url.openStream();
                try {
                    BufferedOutputStream out = new BufferedOutputStream(new FileOutputStream(letter));
                    try {
                        IOUtils.copy(in, out);
                    } finally {
                        out.close();
                    }
                } finally {
                    in.close();
                }
                return letter;
            }
        }
    }
",LABEL_1,LABEL_1,LABEL_1,-1,"getFile,home,fileName,file,url,in,out","getFile:0.015973925590515137,home:0.00039780139923095703,fileName:0.0029573440551757812,file:-8.422136306762695e-05,url:0.02516251802444458,in:0.004844963550567627,out:0.004465937614440918,",3,11,0,"url:url,getFile:getFile,in:in,out:out,fileName:FilePath,home:folder,file:letter,",0,Greedy,318,0.05200648307800293,failed,[]
275,"    private void unJarStart(String jarPath, String jarEntryStart) {
        String path;
        if (jarPath.lastIndexOf(""lib/"") >= 0) path = jarPath.substring(0, jarPath.lastIndexOf(""lib/"")); else path = jarPath.substring(0, jarPath.lastIndexOf(""/""));
        String relPath = jarEntryStart.substring(0, jarEntryStart.lastIndexOf(""/""));
        try {
            new File(path + ""/"" + relPath).mkdirs();
            JarFile jar = new JarFile(jarPath);
            Enumeration<JarEntry> entries = jar.entries();
            while (entries.hasMoreElements()) {
                JarEntry entry = entries.nextElement();
                String jarEntry = entry.getName();
                if (jarEntry.startsWith(jarEntryStart)) {
                    ZipEntry ze = jar.getEntry(jarEntry);
                    File bin = new File(path + ""/"" + jarEntry);
                    IOUtils.copy(jar.getInputStream(ze), new FileOutputStream(bin));
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
 <SPLIT>     public int run(String[] args) throws Exception {
        if (args.length < 2) {
            System.err.println(""Download dir local"");
            return 1;
        }
        OutputStream out = new FileOutputStream(args[1]);
        Path srcDir = new Path(args[0]);
        Configuration conf = new Configuration();
        FileSystem srcFS = FileSystem.get(conf);
        if (!srcFS.getFileStatus(srcDir).isDirectory()) {
            System.err.println(args[0] + "" is not a directory."");
            return 1;
        }
        try {
            FileStatus contents[] = srcFS.listStatus(srcDir);
            for (int i = 0; i < contents.length; i++) {
                if (contents[i].isFile()) {
                    System.err.println(contents[i].getPath());
                    InputStream in = srcFS.open(contents[i].getPath());
                    try {
                        IOUtils.copyBytes(in, out, conf, false);
                    } finally {
                        in.close();
                    }
                }
            }
        } finally {
            out.close();
        }
        return 0;
    }
",220,"    private void copyJarPath(String javapath, String  jarFileEnd) {
        String ith;
        if (javapath.lastIndexOf(""lib/"") >= 0) ith = javapath.substring(0, javapath.lastIndexOf(""lib/"")); else ith = javapath.substring(0, javapath.lastIndexOf(""/""));
        String RelDir =  jarFileEnd.substring(0,  jarFileEnd.lastIndexOf(""/""));
        try {
            new File(ith + ""/"" + RelDir).mkdirs();
            JarFile url = new JarFile(javapath);
            Enumeration<JarEntry> antry = url.antry();
            while (antry.hasMoreElements()) {
                JarEntry parse = antry.nextElement();
                String javaEnt = parse.getName();
                if (javaEnt.startsWith( jarFileEnd)) {
                    ZipEntry sl = url.getEntry(javaEnt);
                    File login = new File(ith + ""/"" + javaEnt);
                    IOUtils.copy(url.getInputStream(sl), new FileOutputStream(login));
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
",LABEL_1,LABEL_1,LABEL_1,-1,"unJarStart,jarPath,jarEntryStart,path,relPath,jar,entries,entry,jarEntry,ze,bin","unJarStart:0.0015310049057006836,jarPath:-0.00494074821472168,jarEntryStart:-0.0032511353492736816,path:-0.0015476346015930176,relPath:-0.0008060336112976074,jar:0.0034487247467041016,entries:0.0001246333122253418,entry:-0.0017195940017700195,jarEntry:-0.0010425448417663574,ze:0.0023162364959716797,bin:0.0021985769271850586,",11,37,0,"jar:url,ze:sl,bin:login,unJarStart:copyJarPath,entries:antry,relPath:RelDir,jarEntry:javaEnt,path:ith,entry:parse,jarEntryStart: jarFileEnd,jarPath:javapath,",0,Greedy,565,0.086170494556427,failed,[]
276,"    protected void doTransfer(HttpServletRequest request, HttpServletResponse response, String method) throws ServletException, IOException {
        ServletContext servletContext = this.getServletConfig().getServletContext();
        WebApplicationContext wac = WebApplicationContextUtils.getRequiredWebApplicationContext(servletContext);
        String szUrl = request.getParameter(""url"");
        System.out.println(szUrl);
        URL url;
        InputStream is = null;
        ServletOutputStream sout = null;
        try {
            url = new URL(szUrl);
            HttpURLConnection con = (HttpURLConnection) url.openConnection();
            Enumeration hNames = request.getHeaderNames();
            while (hNames.hasMoreElements()) {
                String txt = hNames.nextElement().toString();
                con.setRequestProperty(txt, request.getHeader(txt));
            }
            con.setRequestProperty(""host"", url.getHost());
            con.setRequestProperty(""refer"", szUrl);
            con.setRequestMethod(method);
            con.setDoOutput(true);
            con.setDoInput(true);
            InputStreamReader inBody = new InputStreamReader(request.getInputStream());
            char bufCh[] = new char[1024];
            int r;
            OutputStreamWriter outReq = new OutputStreamWriter(con.getOutputStream());
            while ((r = inBody.read(bufCh)) != -1) {
                System.out.println(bufCh);
                outReq.write(bufCh, 0, r);
            }
            outReq.flush();
            outReq.close();
            inBody.close();
            System.out.println(con.getResponseCode());
            System.out.println(con.getResponseMessage());
            if (con.getResponseCode() == con.HTTP_OK) {
                response.setContentType(con.getContentType());
                response.addHeader(""Content-Encoding"", con.getContentEncoding());
                sout = response.getOutputStream();
                is = con.getInputStream();
                byte buff[] = new byte[1024];
                while ((r = is.read(buff)) != -1) {
                    sout.write(buff, 0, r);
                    System.out.print(buff);
                }
                sout.flush();
                is.close();
                sout.close();
            } else {
                response.sendError(con.getResponseCode(), con.getResponseMessage());
            }
        } catch (MalformedURLException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
 <SPLIT>     private boolean authenticate(Module module) throws Exception {
        SecureRandom rand = SecureRandom.getInstance(""SHA1PRNG"");
        rand.setSeed(System.currentTimeMillis());
        byte[] challenge = new byte[16];
        rand.nextBytes(challenge);
        String b64 = Util.base64(challenge);
        Util.writeASCII(out, RSYNCD_AUTHREQD + b64 + ""\n"");
        String reply = Util.readLine(in);
        if (reply.indexOf("" "") < 0) {
            Util.writeASCII(out, AT_ERROR + "": bad response\n"");
            if (remoteVersion < 25) Util.writeASCII(out, RSYNCD_EXIT + ""\n"");
            socket.close();
            throw new IOException(""bad response"");
        }
        String user = reply.substring(0, reply.indexOf("" ""));
        String response = reply.substring(reply.indexOf("" "") + 1);
        if (!module.users.contains(user)) {
            Util.writeASCII(out, AT_ERROR + "": user "" + user + "" not allowed\n"");
            if (remoteVersion < 25) Util.writeASCII(out, RSYNCD_EXIT + ""\n"");
            socket.close();
            throw new IOException(""user "" + user + "" not allowed"");
        }
        LineNumberReader secrets = new LineNumberReader(new FileReader(module.secretsFile));
        MessageDigest md4 = MessageDigest.getInstance(""BrokenMD4"");
        String line;
        while ((line = secrets.readLine()) != null) {
            if (line.startsWith(user + "":"")) {
                String passwd = line.substring(line.lastIndexOf("":"") + 1);
                md4.update(new byte[4]);
                md4.update(passwd.getBytes(""US-ASCII""));
                md4.update(b64.getBytes(""US-ASCII""));
                String hash = Util.base64(md4.digest());
                if (hash.equals(response)) {
                    secrets.close();
                    return true;
                } else {
                    Util.writeASCII(out, AT_ERROR + "": auth failed on module "" + module.name + ""\n"");
                    if (remoteVersion < 25) Util.writeASCII(out, RSYNCD_EXIT + ""\n"");
                    socket.close();
                    secrets.close();
                    logger.error(""auth failed on module "" + module.name);
                    return false;
                }
            }
        }
        Util.writeASCII(out, AT_ERROR + "": auth failed on module "" + module.name + ""\n"");
        if (remoteVersion < 25) Util.writeASCII(out, RSYNCD_EXIT + ""\n"");
        socket.close();
        secrets.close();
        logger.error(""auth failed on module "" + module.name);
        return false;
    }
",484,"    protected void makeTransfer(HttpServletRequest Request, HttpServletResponse response, String method) throws ServletException, IOException {
        ServletContext servletContext = this.getServletConfig().getServletContext();
        WebApplicationContext wae = WebApplicationContextUtils.getRequiredWebApplicationContext(servletContext);
        String szUrl = Request.getParameter(""ur"");
        System.out.println(szUrl);
        URL ur;
        InputStream os = null;
        ServletOutputStream Sout = null;
        try {
            ur = new URL(szUrl);
            HttpURLConnection con = (HttpURLConnection) ur.openConnection();
            Enumeration hrFiles = Request.getHeaderNames();
            while (hrFiles.hasMoreElements()) {
                String gz = hrFiles.nextElement().toString();
                con.setRequestProperty(gz, Request.getHeader(gz));
            }
            con.setRequestProperty(""host"", ur.getHost());
            con.setRequestProperty(""refer"", szUrl);
            con.setRequestMethod(method);
            con.setDoOutput(true);
            con.setDoInput(true);
            InputStreamReader insFile = new InputStreamReader(Request.getInputStream());
            char ufCH[] = new char[1024];
            int w;
            OutputStreamWriter outReq = new OutputStreamWriter(con.getOutputStream());
            while ((w = insFile.read(ufCH)) != -1) {
                System.out.println(ufCH);
                outReq.write(ufCH, 0, w);
            }
            outReq.flush();
            outReq.close();
            insFile.close();
            System.out.println(con.getResponseCode());
            System.out.println(con.getResponseMessage());
            if (con.getResponseCode() == con.HTTP_OK) {
                response.setContentType(con.getContentType());
                response.addHeader(""Content-Encoding"", con.getContentEncoding());
                Sout = response.getOutputStream();
                os = con.getInputStream();
                byte  Buff[] = new byte[1024];
                while ((w = os.read( Buff)) != -1) {
                    Sout.write( Buff, 0, w);
                    System.out.print( Buff);
                }
                Sout.flush();
                os.close();
                Sout.close();
            } else {
                response.sendError(con.getResponseCode(), con.getResponseMessage());
            }
        } catch (MalformedURLException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
",LABEL_0,LABEL_0,LABEL_1,1,"doTransfer,request,response,method,servletContext,wac,szUrl,url,is,sout,con,hNames,txt,inBody,bufCh,r,outReq,buff","doTransfer:0.0028574466705322266,request:-0.007331669330596924,response:0.01919376850128174,method:0.019735991954803467,servletContext:0.01370227336883545,wac:0.008529305458068848,szUrl:0.0387723445892334,url:-0.07807666063308716,is:-0.0020982027053833008,sout:0.012662827968597412,con:0.029658615589141846,hNames:-0.003946244716644287,txt:-0.004690289497375488,inBody:-0.023987531661987305,bufCh:0.009432196617126465,r:0.004047036170959473,outReq:0.031217336654663086,buff:0.002539694309234619,",12,43,0,"szUrl:szUrl,outReq:outReq,con:con,method:method,response:response,servletContext:servletContext,sout:Sout,bufCh:ufCH,wac:wae,r:w,doTransfer:makeTransfer,buff: Buff,is:os,hNames:hrFiles,txt:gz,request:Request,inBody:insFile,url:ur,",0,Greedy,848,0.1641840696334839,replace,[]
277,"    @TestProperties(name = ""Simple test for adding different image files to report as link"")
    public void testAddLinkToImage() throws Exception {
        InputStream in = this.getClass().getClassLoader().getResourceAsStream(""regression/generic/images/splash.jpg"");
        report.report(report.getCurrentTestFolder() + System.getProperty(""file.separator"") + ""splash.jpg"");
        IOUtils.copy(in, new FileOutputStream(new File(report.getCurrentTestFolder() + System.getProperty(""file.separator"") + ""splash.jpg"")));
        in = this.getClass().getClassLoader().getResourceAsStream(""regression/generic/images/blue.png"");
        IOUtils.copy(in, new FileOutputStream(new File(report.getCurrentTestFolder() + System.getProperty(""file.separator"") + ""blue.png"")));
        in = this.getClass().getClassLoader().getResourceAsStream(""regression/generic/images/classDir.gif"");
        IOUtils.copy(in, new FileOutputStream(new File(report.getCurrentTestFolder() + System.getProperty(""file.separator"") + ""classDir.gif"")));
        report.addLink(""Link to JPG"", ""splash.jpg"");
        report.addLink(""Link to PNG"", ""blue.png"");
        report.addLink(""Link to GIF"", ""classDir.gif"");
    }
 <SPLIT>     private static void recurseFiles(File root, File file, ZipArchiveOutputStream zaos, boolean absolute) throws IOException {
        if (file.isDirectory()) {
            File[] files = file.listFiles();
            for (File file2 : files) {
                recurseFiles(root, file2, zaos, absolute);
            }
        } else if ((!file.getName().endsWith("".zip"")) && (!file.getName().endsWith("".ZIP""))) {
            String filename = null;
            if (absolute) {
                filename = file.getAbsolutePath().substring(root.getAbsolutePath().length());
            } else {
                filename = file.getName();
            }
            ZipArchiveEntry zae = new ZipArchiveEntry(filename);
            zae.setSize(file.length());
            zaos.putArchiveEntry(zae);
            FileInputStream fis = new FileInputStream(file);
            IOUtils.copy(fis, zaos);
            zaos.closeArchiveEntry();
        }
    }
",243,"    @TestProperties(name = ""Simple test for adding different image files to report as link"")
    public void testAddLinkOfLink() throws Exception {
        InputStream path = this.getClass().getClassLoader().getResourceAsStream(""regression/generic/images/splash.jpg"");
        report.report(report.getCurrentTestFolder() + System.getProperty(""file.separator"") + ""splash.jpg"");
        IOUtils.copy(path, new FileOutputStream(new File(report.getCurrentTestFolder() + System.getProperty(""file.separator"") + ""splash.jpg"")));
        path = this.getClass().getClassLoader().getResourceAsStream(""regression/generic/images/blue.png"");
        IOUtils.copy(path, new FileOutputStream(new File(report.getCurrentTestFolder() + System.getProperty(""file.separator"") + ""blue.png"")));
        path = this.getClass().getClassLoader().getResourceAsStream(""regression/generic/images/classDir.gif"");
        IOUtils.copy(path, new FileOutputStream(new File(report.getCurrentTestFolder() + System.getProperty(""file.separator"") + ""classDir.gif"")));
        report.addLink(""Link to JPG"", ""splash.jpg"");
        report.addLink(""Link to PNG"", ""blue.png"");
        report.addLink(""Link to GIF"", ""classDir.gif"");
    }
",LABEL_1,LABEL_1,LABEL_1,-1,"testAddLinkToImage,in","testAddLinkToImage:0.014191269874572754,in:0.004287242889404297,",2,7,0,"testAddLinkToImage:testAddLinkOfLink,in:path,",0,Greedy,98,0.015505659580230712,failed,[]
278,"    public static void main(final String args[]) {
        if (args.length < 2 || (args.length == 3 && !""-d"".equals(args[0]))) {
            System.out.println(""Usage: AdapterGenerator [Options] <PrologFile> <ClassPath>"");
            System.out.println(""       where the framework is the first element in the class path"");
            System.out.println(""Options: -d Enables the generation of debug output"");
            return;
        }
        boolean debug = args.length == 3;
        File prologFile = new File(debug ? args[1] : args[0]);
        if (!prologFile.isFile()) {
            System.out.println(""The given file does not exist."");
            return;
        }
        File targetFile = new File(prologFile.getParentFile(), prologFile.getName().substring(0, prologFile.getName().lastIndexOf(""."")) + "".jar"");
        String source;
        try {
            source = FileUtils.readFileToString(prologFile);
        } catch (IOException ex) {
            System.out.println(""Error reading file: "" + ex.getMessage());
            return;
        }
        Parser myParser = new PrologParserImpl();
        PrologProgram myProgram;
        try {
            myProgram = (PrologProgram) myParser.parse(source);
        } catch (Exception ex) {
            System.out.println(""Could not parse file: "" + ex.getMessage());
            return;
        }
        try {
            FactVisitor myVisitor = new FactVisitor();
            myVisitor.visit(myProgram);
            Map<String, TypeGenerationInfo> adapterLayer = myVisitor.getAdapterLayer();
            if (adapterLayer.size() == 0) {
                System.out.println(""No adapters to generate, "" + ""did you forget to run the comeback rules?"");
                return;
            }
            URLClassLoader classLoader = createClassLoaderFromClassPath(debug ? args[2] : args[1]);
            ClassWriter adapterWriter = new ClassWriter(new JarEntryWriter(targetFile));
            AdapterAnnotationGenerator annotationGenerator = new AdapterAnnotationGenerator();
            Type annotationType = Type.getObjectType(""net/sourceforge/comeback/Adapter"");
            adapterWriter.writeClass(annotationType.getClassName(), annotationGenerator.createAnnotation(annotationType));
            AdapterLookupGenerator lookupWriter = new AdapterLookupGenerator(Type.getObjectType(""net/sourceforge/comeback/Adapters""), annotationType);
            GenerationContext context = new GenerationContext(adapterLayer, classLoader, annotationType, lookupWriter, adapterWriter);
            context.setGenerateDebugOutput(debug);
            Iterator<TypeGenerationInfo> iterator = adapterLayer.values().iterator();
            while (iterator.hasNext()) {
                TypeGenerationInfo info = iterator.next();
                context.generateAdapter(info);
            }
            ByteArrayOutputStream serialized = new ByteArrayOutputStream();
            ObjectOutputStream out = new ObjectOutputStream(serialized);
            out.writeObject(adapterLayer);
            out.close();
            adapterWriter.writeResource(""net/sourceforge/comeback/adapterlayer.ser"", serialized.toByteArray());
            String[] sharedClassesPrefixes = new String[2];
            Assembler assembler = new Assembler(adapterWriter);
            PatternClassFilter filter = new PatternClassFilter();
            URL url = Main.class.getResource(""/"" + Main.class.getName().replace('.', '/') + "".class"");
            JarURLConnection connection = (JarURLConnection) url.openConnection();
            sharedClassesPrefixes[0] = assembler.assemble(connection.getJarFile(), filter);
            filter = new PatternClassFilter();
            url = Type.class.getResource(""/"" + Type.class.getName().replace('.', '/') + "".class"");
            connection = (JarURLConnection) url.openConnection();
            sharedClassesPrefixes[1] = assembler.assemble(connection.getJarFile(), filter);
            String tmp = debug ? args[2] : args[1];
            adapterWriter.writeClass(lookupWriter.getType().getClassName(), lookupWriter.createAdapterLookup(adapterLayer.values(), tmp.substring(tmp.lastIndexOf(File.pathSeparator) + 1), sharedClassesPrefixes));
            adapterWriter.close();
        } catch (Throwable e) {
            e.printStackTrace();
            return;
        }
    }
 <SPLIT>     public static String load(String id) {
        String xml = """";
        if (id.length() < 5) return """";
        try {
            working = true;
            URL url = new URL(""http://pastebin.com/download.php?i="" + id);
            URLConnection conn = url.openConnection();
            BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream()));
            xml = """";
            String str;
            while ((str = reader.readLine()) != null) {
                xml += str;
            }
            reader.close();
            working = false;
            return xml.toString();
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(null, "" Load error"");
        }
        working = false;
        return xml;
    }
",764,,LABEL_0,LABEL_1,,-4,"debug,prologFile,targetFile,source,myParser,myProgram,myVisitor,adapterLayer,classLoader,adapterWriter,annotationGenerator,out",,,,0,,0,Greedy,1,0.0009802023569742838,,[]
279,"    public BufferedWriter createOutputStream(String inFile, String outFile) throws IOException {
        int k_blockSize = 1024;
        int byteCount;
        char[] buf = new char[k_blockSize];
        File ofp = new File(outFile);
        ZipOutputStream zos = new ZipOutputStream(new FileOutputStream(ofp));
        zos.setMethod(ZipOutputStream.DEFLATED);
        OutputStreamWriter osw = new OutputStreamWriter(zos, ""ISO-8859-1"");
        BufferedWriter bw = new BufferedWriter(osw);
        ZipEntry zot = null;
        File ifp = new File(inFile);
        ZipInputStream zis = new ZipInputStream(new FileInputStream(ifp));
        InputStreamReader isr = new InputStreamReader(zis, ""ISO-8859-1"");
        BufferedReader br = new BufferedReader(isr);
        ZipEntry zit = null;
        while ((zit = zis.getNextEntry()) != null) {
            if (zit.getName().equals(""content.xml"")) {
                continue;
            }
            zot = new ZipEntry(zit.getName());
            zos.putNextEntry(zot);
            while ((byteCount = br.read(buf, 0, k_blockSize)) >= 0) bw.write(buf, 0, byteCount);
            bw.flush();
            zos.closeEntry();
        }
        zos.putNextEntry(new ZipEntry(""content.xml""));
        bw.flush();
        osw = new OutputStreamWriter(zos, ""UTF8"");
        bw = new BufferedWriter(osw);
        return bw;
    }
 <SPLIT>     public boolean actualizarDatosPrevia(int idJugadorDiv, int idRonda, int idPareoRival, int color, int flotante) {
        int intResult = 0;
        String sql = ""UPDATE jugadorxdivxronda "" + "" SET idPareoRival = "" + idPareoRival + "" , color = "" + color + "" , flotante = "" + flotante + "" "" + "" WHERE jugadorxDivision_idJugadorxDivision = "" + idJugadorDiv + "" AND ronda_numeroRonda = "" + idRonda;
        try {
            connection = conexionBD.getConnection();
            connection.setAutoCommit(false);
            ps = connection.prepareStatement(sql);
            intResult = ps.executeUpdate();
            connection.commit();
        } catch (SQLException ex) {
            ex.printStackTrace();
            try {
                connection.rollback();
            } catch (SQLException exe) {
                exe.printStackTrace();
            }
        } finally {
            conexionBD.close(ps);
            conexionBD.close(connection);
        }
        return (intResult > 0);
    }
",279,,LABEL_0,LABEL_1,,-4,"createOutputStream,inFile,outFile,k_blockSize,byteCount,buf,ofp,zos,osw,bw,zot,ifp,zis,isr,br,zit",,,,0,,0,Greedy,1,0.00042332013448079426,,[]
280,"    public byte[] getDigest(OMAttribute attribute, String digestAlgorithm) throws OMException {
        byte[] digest = new byte[0];
        if (!(attribute.getLocalName().equals(""xmlns"") || attribute.getLocalName().startsWith(""xmlns:""))) try {
            MessageDigest md = MessageDigest.getInstance(digestAlgorithm);
            md.update((byte) 0);
            md.update((byte) 0);
            md.update((byte) 0);
            md.update((byte) 2);
            md.update(getExpandedName(attribute).getBytes(""UnicodeBigUnmarked""));
            md.update((byte) 0);
            md.update((byte) 0);
            md.update(attribute.getAttributeValue().getBytes(""UnicodeBigUnmarked""));
            digest = md.digest();
        } catch (NoSuchAlgorithmException e) {
            throw new OMException(e);
        } catch (UnsupportedEncodingException e) {
            throw new OMException(e);
        }
        return digest;
    }
 <SPLIT>     public static byte[] createPasswordDigest(String password, byte[] salt) throws Exception {
        MessageDigest md = MessageDigest.getInstance(""MD5"");
        md.update(salt);
        md.update(password.getBytes(""UTF8""));
        byte[] digest = md.digest();
        return digest;
    }
",206,"    public byte[] getDigest(OMAttribute attribute, String digestAlgorithm) throws OMException {
        byte[] digest = new byte[0];
        if (!(attribute.getLocalName().equals(""xmlns"") || attribute.getLocalName().startsWith(""xmlns:""))) try {
            MessageDigest md = MessageDigest.getInstance(digestAlgorithm);
            md.update((byte) 0);
            md.update((byte) 0);
            md.update((byte) 0);
            md.update((byte) 2);
            md.update(getExpandedName(attribute).getBytes(""UnicodeBigUnmarked""));
            md.update((byte) 0);
            md.update((byte) 0);
            md.update(attribute.getAttributeValue().getBytes(""UnicodeBigUnmarked""));
            digest = md.digest();
        } catch (NoSuchAlgorithmException e) {
            throw new OMException(e);
        } catch (UnsupportedEncodingException e) {
            throw new OMException(e);
        }
        return digest;
    }
",LABEL_1,LABEL_1,LABEL_1,-1,"getDigest,attribute,digestAlgorithm,digest,md","getDigest:0.008352696895599365,attribute:0.0012525320053100586,digestAlgorithm:0.013950705528259277,digest:-0.0013017058372497559,md:0.002448558807373047,",0,0,0,"digestAlgorithm:digestAlgorithm,getDigest:getDigest,md:md,attribute:attribute,digest:digest,",0,Greedy,234,0.03356029589970907,failed,[]
281,"    public boolean gerarTutorialPage() {
        try {
            File indexDir = criarDiretorioSite();
            File cssDir = criarDiretorioCss();
            File capDir = criarDiretorioCapitulos();
            File licDir = criarDiretorioLicoes();
            File midDir = criarDiretorioMidias();
            File filesDir = criarDiretorioArquivos();
            File videosDir = new File(filesDir + ""/videos"");
            videosDir.mkdir();
            File imagensDir = new File(filesDir + ""/imagens"");
            imagensDir.mkdir();
            String local = System.getProperty(""user.dir"");
            FileChannel srcCss1 = new FileInputStream(local + ""/bin/style/layout.css"").getChannel();
            FileChannel destCss1 = new FileOutputStream(cssDir + ""/layout.css"").getChannel();
            destCss1.transferFrom(srcCss1, 0, srcCss1.size());
            srcCss1.close();
            destCss1.close();
            FileChannel srcCss2 = new FileInputStream(local + ""/bin/style/elementos.css"").getChannel();
            FileChannel destCss2 = new FileOutputStream(cssDir + ""/elementos.css"").getChannel();
            destCss2.transferFrom(srcCss2, 0, srcCss2.size());
            srcCss2.close();
            destCss2.close();
            FileChannel srcCss3 = new FileInputStream(local + ""/bin/style/estilo-cap-lic-mid.css"").getChannel();
            FileChannel destCss3 = new FileOutputStream(cssDir + ""/estilo-cap-lic-mid.css"").getChannel();
            destCss3.transferFrom(srcCss3, 0, srcCss3.size());
            srcCss3.close();
            destCss3.close();
            FileChannel srcCss4 = new FileInputStream(local + ""/bin/style/layout_ie.css"").getChannel();
            FileChannel destCss4 = new FileOutputStream(cssDir + ""/layout_ie.css"").getChannel();
            destCss4.transferFrom(srcCss4, 0, srcCss4.size());
            srcCss4.close();
            destCss4.close();
            FileChannel srcCss5 = new FileInputStream(local + ""/bin/style/elementos_ie.css"").getChannel();
            FileChannel destCss5 = new FileOutputStream(cssDir + ""/elementos_ie.css"").getChannel();
            destCss5.transferFrom(srcCss5, 0, srcCss5.size());
            srcCss5.close();
            destCss5.close();
            FileChannel srcCss6 = new FileInputStream(local + ""/bin/style/estilo-cap-lic-mid_ie.css"").getChannel();
            FileChannel destCss6 = new FileOutputStream(cssDir + ""/estilo-cap-lic-mid_ie.css"").getChannel();
            destCss6.transferFrom(srcCss6, 0, srcCss6.size());
            srcCss6.close();
            destCss6.close();
            copiarMidias(videosDir, imagensDir);
            escreverMidiasPage(midDir);
            escreverLicoesPage(licDir);
            escreverCapitulosPages(capDir);
            FileWriter indexHtml = new FileWriter(indexDir + ""/index.html"");
            indexHtml.write(escreverIndexHead() + escreverBodyHeader() + escreverIndexBodyContent() + escreverFooter());
            indexHtml.close();
            System.out.println(""Site gerado com sucesso"");
            JOptionPane.showMessageDialog(null, ""Web Site gerado com sucesso"", ""\\o/"", JOptionPane.INFORMATION_MESSAGE);
            return true;
        } catch (Exception e) {
            e.printStackTrace();
            System.err.println(""Site não gerado"");
            JOptionPane.showMessageDialog(null, ""Web Site não gerado corretamente"", ""Ops..."", JOptionPane.ERROR_MESSAGE);
            return false;
        }
    }
 <SPLIT>     public void convert(File src, File dest) throws IOException {
        InputStream in = new BufferedInputStream(new FileInputStream(src));
        DcmParser p = pfact.newDcmParser(in);
        Dataset ds = fact.newDataset();
        p.setDcmHandler(ds.getDcmHandler());
        try {
            FileFormat format = p.detectFileFormat();
            if (format != FileFormat.ACRNEMA_STREAM) {
                System.out.println(""\n"" + src + "": not an ACRNEMA stream!"");
                return;
            }
            p.parseDcmFile(format, Tags.PixelData);
            if (ds.contains(Tags.StudyInstanceUID) || ds.contains(Tags.SeriesInstanceUID) || ds.contains(Tags.SOPInstanceUID) || ds.contains(Tags.SOPClassUID)) {
                System.out.println(""\n"" + src + "": contains UIDs!"" + "" => probable already DICOM - do not convert"");
                return;
            }
            boolean hasPixelData = p.getReadTag() == Tags.PixelData;
            boolean inflate = hasPixelData && ds.getInt(Tags.BitsAllocated, 0) == 12;
            int pxlen = p.getReadLength();
            if (hasPixelData) {
                if (inflate) {
                    ds.putUS(Tags.BitsAllocated, 16);
                    pxlen = pxlen * 4 / 3;
                }
                if (pxlen != (ds.getInt(Tags.BitsAllocated, 0) >>> 3) * ds.getInt(Tags.Rows, 0) * ds.getInt(Tags.Columns, 0) * ds.getInt(Tags.NumberOfFrames, 1) * ds.getInt(Tags.NumberOfSamples, 1)) {
                    System.out.println(""\n"" + src + "": mismatch pixel data length!"" + "" => do not convert"");
                    return;
                }
            }
            ds.putUI(Tags.StudyInstanceUID, uid(studyUID));
            ds.putUI(Tags.SeriesInstanceUID, uid(seriesUID));
            ds.putUI(Tags.SOPInstanceUID, uid(instUID));
            ds.putUI(Tags.SOPClassUID, classUID);
            if (!ds.contains(Tags.NumberOfSamples)) {
                ds.putUS(Tags.NumberOfSamples, 1);
            }
            if (!ds.contains(Tags.PhotometricInterpretation)) {
                ds.putCS(Tags.PhotometricInterpretation, ""MONOCHROME2"");
            }
            if (fmi) {
                ds.setFileMetaInfo(fact.newFileMetaInfo(ds, UIDs.ImplicitVRLittleEndian));
            }
            OutputStream out = new BufferedOutputStream(new FileOutputStream(dest));
            try {
            } finally {
                ds.writeFile(out, encodeParam());
                if (hasPixelData) {
                    if (!skipGroupLen) {
                        out.write(PXDATA_GROUPLEN);
                        int grlen = pxlen + 8;
                        out.write((byte) grlen);
                        out.write((byte) (grlen >> 8));
                        out.write((byte) (grlen >> 16));
                        out.write((byte) (grlen >> 24));
                    }
                    out.write(PXDATA_TAG);
                    out.write((byte) pxlen);
                    out.write((byte) (pxlen >> 8));
                    out.write((byte) (pxlen >> 16));
                    out.write((byte) (pxlen >> 24));
                }
                if (inflate) {
                    int b2, b3;
                    for (; pxlen > 0; pxlen -= 3) {
                        out.write(in.read());
                        b2 = in.read();
                        b3 = in.read();
                        out.write(b2 & 0x0f);
                        out.write(b2 >> 4 | ((b3 & 0x0f) << 4));
                        out.write(b3 >> 4);
                    }
                } else {
                    for (; pxlen > 0; --pxlen) {
                        out.write(in.read());
                    }
                }
                out.close();
            }
            System.out.print('.');
        } finally {
            in.close();
        }
    }
",611,"    public boolean riarTinyDir() {
        try {
            File includeJar = criarDiretorioSite();
            File cssDie = criarDiretorioCss();
            File apsVol = criarDiretorioCapitulos();
            File lifDir = criarDiretorioLicoes();
            File midDir = criarDiretorioMidias();
            File videosFile = criarDiretorioArquivos();
            File videoDir = new File(videosFile + ""/videos"");
            videoDir.mkdir();
            File imagenDir = new File(videosFile + ""/imagens"");
            imagenDir.mkdir();
            String upload = System.getProperty(""user.dir"");
            FileChannel srcCfg4 = new FileInputStream(upload + ""/bin/style/layout.css"").getChannel();
            FileChannel destPcss2 = new FileOutputStream(cssDie + ""/layout.css"").getChannel();
            destPcss2.transferFrom(srcCfg4, 0, srcCfg4.size());
            srcCfg4.close();
            destPcss2.close();
            FileChannel srcUssTwo = new FileInputStream(upload + ""/bin/style/elementos.css"").getChannel();
            FileChannel destCfg4 = new FileOutputStream(cssDie + ""/elementos.css"").getChannel();
            destCfg4.transferFrom(srcUssTwo, 0, srcUssTwo.size());
            srcUssTwo.close();
            destCfg4.close();
            FileChannel srcScss3 = new FileInputStream(upload + ""/bin/style/estilo-cap-lic-mid.css"").getChannel();
            FileChannel destPcss2 = new FileOutputStream(cssDie + ""/estilo-cap-lic-mid.css"").getChannel();
            destPcss2.transferFrom(srcScss3, 0, srcScss3.size());
            srcScss3.close();
            destPcss2.close();
            FileChannel srcPcssFour = new FileInputStream(upload + ""/bin/style/layout_ie.css"").getChannel();
            FileChannel destCss4 = new FileOutputStream(cssDie + ""/layout_ie.css"").getChannel();
            destCss4.transferFrom(srcPcssFour, 0, srcPcssFour.size());
            srcPcssFour.close();
            destCss4.close();
            FileChannel srcCss5 = new FileInputStream(upload + ""/bin/style/elementos_ie.css"").getChannel();
            FileChannel destCss5 = new FileOutputStream(cssDie + ""/elementos_ie.css"").getChannel();
            destCss5.transferFrom(srcCss5, 0, srcCss5.size());
            srcCss5.close();
            destCss5.close();
            FileChannel srcCss6 = new FileInputStream(upload + ""/bin/style/estilo-cap-lic-mid_ie.css"").getChannel();
            FileChannel destCss6 = new FileOutputStream(cssDie + ""/estilo-cap-lic-mid_ie.css"").getChannel();
            destCss6.transferFrom(srcCss6, 0, srcCss6.size());
            srcCss6.close();
            destCss6.close();
            copiarMidias(videoDir, imagenDir);
            escreverMidiasPage(midDir);
            escreverLicoesPage(lifDir);
            escreverCapitulosPages(apsVol);
            FileWriter indexHtml = new FileWriter(includeJar + ""/index.html"");
            indexHtml.write(escreverIndexHead() + escreverBodyHeader() + escreverIndexBodyContent() + escreverFooter());
            indexHtml.close();
            System.out.println(""Site gerado com sucesso"");
            JOptionPane.showMessageDialog(null, ""Web Site gerado com sucesso"", ""\\o/"", JOptionPane.INFORMATION_MESSAGE);
            return true;
        } catch (Exception e) {
            e.printStackTrace();
            System.err.println(""Site não gerado"");
            JOptionPane.showMessageDialog(null, ""Web Site não gerado corretamente"", ""Ops..."", JOptionPane.ERROR_MESSAGE);
            return false;
        }
    }
",LABEL_1,LABEL_1,LABEL_1,-1,"gerarTutorialPage,indexDir,cssDir,capDir,licDir,midDir,filesDir,videosDir,imagensDir,local,srcCss1,destCss1,srcCss2,destCss2,srcCss3,destCss3,srcCss4","gerarTutorialPage:-0.0035206079483032227,indexDir:-0.003363668918609619,cssDir:-0.01851022243499756,capDir:-0.003952324390411377,licDir:-0.005735576152801514,midDir:-0.006533443927764893,filesDir:-0.010503768920898438,videosDir:-0.006632506847381592,imagensDir:-0.009402215480804443,local:0.0002052783966064453,srcCss1:-0.02384549379348755,destCss1:-0.018675029277801514,srcCss2:-0.022663652896881104,destCss2:-0.01627868413925171,srcCss3:-0.022292256355285645,destCss3:-0.013665914535522461,srcCss4:-0.0052765607833862305,",16,55,0,"local:upload,indexDir:includeJar,gerarTutorialPage:riarTinyDir,capDir:apsVol,srcCss4:srcPcssFour,licDir:lifDir,midDir:midDir,videosDir:videoDir,imagensDir:imagenDir,filesDir:videosFile,destCss3:destPcss2,destCss2:destCfg4,cssDir:cssDie,destCss1:destPcss2,srcCss3:srcScss3,srcCss2:srcUssTwo,srcCss1:srcCfg4,",0,Greedy,696,0.1627092957496643,failed,[]
282,"    public void updateUser(final User user) throws IOException {
        try {
            Connection conn = null;
            boolean autoCommit = false;
            try {
                conn = pool.getConnection();
                autoCommit = conn.getAutoCommit();
                conn.setAutoCommit(false);
                final PreparedStatement updateUser = conn.prepareStatement(""update users set mainRoleId=? where userId=?"");
                updateUser.setInt(1, user.getMainRole().getId());
                updateUser.setString(2, user.getUserId());
                updateUser.executeUpdate();
                final PreparedStatement deleteRoles = conn.prepareStatement(""delete from userRoles where userId=?"");
                deleteRoles.setString(1, user.getUserId());
                deleteRoles.executeUpdate();
                final PreparedStatement insertRoles = conn.prepareStatement(""insert into userRoles (userId, roleId) values (?,?)"");
                for (final Role role : user.getRoles()) {
                    insertRoles.setString(1, user.getUserId());
                    insertRoles.setInt(2, role.getId());
                    insertRoles.executeUpdate();
                }
                conn.commit();
            } catch (Throwable t) {
                if (conn != null) conn.rollback();
                throw new SQLException(t.toString());
            } finally {
                if (conn != null) {
                    conn.setAutoCommit(autoCommit);
                    conn.close();
                }
            }
        } catch (final SQLException sqle) {
            log.log(Level.SEVERE, sqle.toString(), sqle);
            throw new IOException(sqle.toString());
        }
    }
 <SPLIT>     public final int wordFrequency(String word) {
        String replWebQuery = webQuery.replaceFirst(""WORDREPLACE"", word);
        try {
            URL url = new URL(replWebQuery);
            String content = url.toString();
            BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));
            String inputLine;
            while ((inputLine = in.readLine()) != null) {
                if (inputLine.matches(nrResultsPattern)) {
                    int fr = matchedLine(inputLine);
                    if (fr >= 0) {
                        return fr;
                    }
                }
            }
        } catch (MalformedURLException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
        return 0;
    }
",288,"    public void UpdateWord(final User user) throws IOException {
        try {
            Connection conn = null;
            boolean autoCited = false;
            try {
                conn = pool.getConnection();
                autoCited = conn.getAutoCommit();
                conn.setAutoCommit(false);
                final PreparedStatement UpdateWord = conn.prepareStatement(""update users set mainRoleId=? where userId=?"");
                UpdateWord.setInt(1, user.getMainRole().getId());
                UpdateWord.setString(2, user.getUserId());
                UpdateWord.executeUpdate();
                final PreparedStatement deleteRoles = conn.prepareStatement(""delete from userRoles where userId=?"");
                deleteRoles.setString(1, user.getUserId());
                deleteRoles.executeUpdate();
                final PreparedStatement updateLles = conn.prepareStatement(""insert into userRoles (userId, roleId) values (?,?)"");
                for (final Role resource : user.getRoles()) {
                    updateLles.setString(1, user.getUserId());
                    updateLles.setInt(2, resource.getId());
                    updateLles.executeUpdate();
                }
                conn.commit();
            } catch (Throwable t) {
                if (conn != null) conn.rollback();
                throw new SQLException(t.toString());
            } finally {
                if (conn != null) {
                    conn.setAutoCommit(autoCited);
                    conn.close();
                }
            }
        } catch (final SQLException sqle) {
            log.log(Level.SEVERE, sqle.toString(), sqle);
            throw new IOException(sqle.toString());
        }
    }
",LABEL_0,LABEL_0,LABEL_0,-1,"updateUser,user,conn,autoCommit,deleteRoles,insertRoles,role","updateUser:0.0006669759750366211,user:0.0010904669761657715,conn:0.0063893795013427734,autoCommit:-0.0001277327537536621,deleteRoles:0.0009212493896484375,insertRoles:0.0007485747337341309,role:-0.00042319297790527344,",4,14,0,"conn:conn,user:user,deleteRoles:deleteRoles,insertRoles:updateLles,updateUser:UpdateWord,autoCommit:autoCited,role:resource,",0,Greedy,450,0.06940192778905233,failed,[]
283,"    public static boolean encodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }
 <SPLIT>     public static void copy(File src, File dest) throws FileNotFoundException, IOException {
        FileInputStream in = new FileInputStream(src);
        FileOutputStream out = new FileOutputStream(dest);
        try {
            byte[] buf = new byte[1024];
            int c = -1;
            while ((c = in.read(buf)) > 0) out.write(buf, 0, c);
        } finally {
            in.close();
            out.close();
        }
    }
",194,"    public static boolean encodeFile2String(String Infiles, String outname) {
        boolean open = false;
        java.io.InputStream login = null;
        java.io.OutputStream net = null;
        try {
            login = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(Infiles)), Base64.ENCODE);
            net = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outname));
            byte[] url = new byte[65536];
            int  copy = -1;
            while (( copy = login. copy(url)) >= 0) {
                net.write(url, 0,  copy);
            }
            open = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                login.close();
            } catch (Exception exc) {
            }
            try {
                net.close();
            } catch (Exception exc) {
            }
        }
        return open;
    }
",LABEL_1,LABEL_1,LABEL_1,-1,"encodeFileToFile,infile,outfile,in,out,buffer,read,success","encodeFileToFile:0.0010051131248474121,infile:0.01110982894897461,outfile:0.006501972675323486,in:-0.012176811695098877,out:-0.003839433193206787,buffer:-0.001816093921661377,read:-0.0004526376724243164,success:-0.0036259889602661133,",8,23,0,"infile:Infiles,outfile:outname,encodeFileToFile:encodeFile2String,read: copy,buffer:url,success:open,out:net,in:login,",0,Greedy,356,0.0513772447903951,failed,[]
284,"    protected String doRawRequest(String postData) throws IOException {
        URL url = new URL(SERVICE_URL);
        URLConnection conn = url.openConnection();
        conn.setDoOutput(true);
        OutputStreamWriter wr = new OutputStreamWriter(conn.getOutputStream());
        wr.write(postData);
        wr.flush();
        BufferedReader rd = new BufferedReader(new InputStreamReader(conn.getInputStream()));
        StringBuffer sb = new StringBuffer();
        String line;
        while ((line = rd.readLine()) != null) {
            sb.append(line);
        }
        wr.close();
        rd.close();
        return sb.toString();
    }
 <SPLIT>     private static FrameworkFactory getFrameworkFactory() throws Exception {
        URL url = Main.class.getClassLoader().getResource(""META-INF/services/org.osgi.framework.launch.FrameworkFactory"");
        if (url != null) {
            BufferedReader br = new BufferedReader(new InputStreamReader(url.openStream()));
            try {
                for (String s = br.readLine(); s != null; s = br.readLine()) {
                    s = s.trim();
                    if ((s.length() > 0) && (s.charAt(0) != '#')) {
                        return (FrameworkFactory) Class.forName(s).newInstance();
                    }
                }
            } finally {
                if (br != null) br.close();
            }
        }
        throw new Exception(""Could not find framework factory."");
    }
",133,,LABEL_0,LABEL_1,,-4,"doRawRequest,postData,url,conn,wr,rd,sb,line",,,,0,,0,Greedy,1,0.0003502368927001953,,[]
285,"    public static boolean decodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }
 <SPLIT>     public static void createTar(File directoryToPack, File targetTarFile) throws IOException {
        if (directoryToPack == null) {
            throw new NullPointerException(""The parameter 'directoryToPack' must not be null"");
        }
        if (targetTarFile == null) {
            throw new NullPointerException(""The parameter 'targetTarFile' must not be null"");
        }
        if (!directoryToPack.exists() || !directoryToPack.isDirectory()) {
            throw new IllegalArgumentException(""The target file '"" + directoryToPack + ""' does not exist or is not a directory."");
        }
        if (targetTarFile.exists()) {
            log.warn(""The target file '"" + targetTarFile + ""' already exists. Will overwrite"");
        }
        log.debug(""Creating tar from all files in directory '"" + directoryToPack + ""'"");
        byte buffer[] = new byte[BUFFER_SIZE];
        FileOutputStream targetOutput = new FileOutputStream(targetTarFile);
        TarOutputStream targetOutputTar = new TarOutputStream(targetOutput);
        try {
            List<File> fileList = collectFiles(directoryToPack);
            for (Iterator<File> iter = fileList.iterator(); iter.hasNext(); ) {
                File file = iter.next();
                if (file == null || !file.exists() || file.isDirectory()) {
                    log.info(""The file '"" + file + ""' is ignored - is a directory or non-existent"");
                    continue;
                }
                if (file.equals(targetTarFile)) {
                    log.debug(""Skipping file: '"" + file + ""' - is the tar file itself"");
                    continue;
                }
                log.debug(""Adding to archive: file='"" + file + ""', archive='"" + targetTarFile + ""'"");
                String filePathInTar = getFilePathInTar(file, directoryToPack);
                log.debug(""File path in tar: '"" + filePathInTar + ""' (file="" + file + "")"");
                TarEntry tarAdd = new TarEntry(file);
                tarAdd.setModTime(file.lastModified());
                tarAdd.setName(filePathInTar);
                targetOutputTar.putNextEntry(tarAdd);
                if (file.isFile()) {
                    FileInputStream in = new FileInputStream(file);
                    try {
                        while (true) {
                            int nRead = in.read(buffer, 0, buffer.length);
                            if (nRead <= 0) break;
                            targetOutputTar.write(buffer, 0, nRead);
                        }
                    } finally {
                        StreamUtil.tryCloseStream(in);
                    }
                }
                targetOutputTar.closeEntry();
            }
        } finally {
            StreamUtil.tryCloseStream(targetOutputTar);
            StreamUtil.tryCloseStream(targetOutput);
        }
        log.info(""Tar Archive created successfully '"" + targetTarFile + ""'"");
    }
",194,"    public static boolean decodeString2Stream(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream conn = null;
        java.io.OutputStream Out = null;
        try {
            conn = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);
            Out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] url = new byte[65536];
            int _ = -1;
            while ((_ = conn._(url)) >= 0) {
                Out.write(url, 0, _);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                conn.close();
            } catch (Exception exc) {
            }
            try {
                Out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }
",LABEL_1,LABEL_1,LABEL_0,1,"decodeFileToFile,infile,outfile,in,out,buffer,read,success","decodeFileToFile:-0.016613662242889404,infile:-0.0006636977195739746,outfile:-0.0003974437713623047,in:-0.006833255290985107,out:-0.0023461580276489258,buffer:-0.0039667487144470215,read:-0.0017274022102355957,success:0.00517195463180542,",5,16,0,"success:success,outfile:outfile,infile:infile,read:_,out:Out,buffer:url,in:conn,decodeFileToFile:decodeString2Stream,",0,Greedy,358,0.060741337140401204,replace,[]
286,"    public String getServerHash(String passwordHash, String PasswordSalt) throws PasswordHashingException {
        byte[] hash;
        try {
            MessageDigest digest = MessageDigest.getInstance(""SHA-256"");
            digest.reset();
            digest.update(PasswordSalt.getBytes(""UTF-16""));
            hash = digest.digest(passwordHash.getBytes(""UTF-16""));
            return bytesToHex(hash);
        } catch (NoSuchAlgorithmException ex) {
            throw new PasswordHashingException(""Current environment does not supply needed security algorithms. Please update Java"");
        } catch (UnsupportedEncodingException ex) {
            throw new PasswordHashingException(""Current environment does not supply needed character encoding. Please update Java"");
        }
    }
 <SPLIT>     private JSONObject executeHttpGet(String uri) throws Exception {
        HttpGet req = new HttpGet(uri);
        HttpClient client = new DefaultHttpClient();
        HttpResponse resLogin = client.execute(req);
        BufferedReader r = new BufferedReader(new InputStreamReader(resLogin.getEntity().getContent()));
        StringBuilder sb = new StringBuilder();
        String s = null;
        while ((s = r.readLine()) != null) {
            sb.append(s);
        }
        return new JSONObject(sb.toString());
    }
",109,"    public String getserverAddress(String  passwordhash, String  passwordPassword) throws PasswordHashingException {
        byte[] copy;
        try {
            MessageDigest generester = MessageDigest.getInstance(""SHA-256"");
            generester.reset();
            generester.update( passwordPassword.getBytes(""UTF-16""));
            copy = generester.generester( passwordhash.getBytes(""UTF-16""));
            return bytesToHex(copy);
        } catch (NoSuchAlgorithmException ex) {
            throw new PasswordHashingException(""Current environment does not supply needed security algorithms. Please update Java"");
        } catch (UnsupportedEncodingException ex) {
            throw new PasswordHashingException(""Current environment does not supply needed character encoding. Please update Java"");
        }
    }
",LABEL_0,LABEL_0,LABEL_0,-1,"getServerHash,passwordHash,PasswordSalt,hash,digest","getServerHash:0.003277122974395752,passwordHash:0.009138941764831543,PasswordSalt:0.010433554649353027,hash:0.0008693933486938477,digest:0.004143774509429932,",5,13,0,"PasswordSalt: passwordPassword,passwordHash: passwordhash,digest:generester,getServerHash:getserverAddress,hash:copy,",0,Greedy,170,0.02431941032409668,failed,[]
287,"    protected void doTransfer(HttpServletRequest request, HttpServletResponse response, String method) throws ServletException, IOException {
        ServletContext servletContext = this.getServletConfig().getServletContext();
        WebApplicationContext wac = WebApplicationContextUtils.getRequiredWebApplicationContext(servletContext);
        String szUrl = request.getParameter(""url"");
        System.out.println(szUrl);
        URL url;
        InputStream is = null;
        ServletOutputStream sout = null;
        try {
            url = new URL(szUrl);
            HttpURLConnection con = (HttpURLConnection) url.openConnection();
            Enumeration hNames = request.getHeaderNames();
            while (hNames.hasMoreElements()) {
                String txt = hNames.nextElement().toString();
                con.setRequestProperty(txt, request.getHeader(txt));
            }
            con.setRequestProperty(""host"", url.getHost());
            con.setRequestProperty(""refer"", szUrl);
            con.setRequestMethod(method);
            con.setDoOutput(true);
            con.setDoInput(true);
            InputStreamReader inBody = new InputStreamReader(request.getInputStream());
            char bufCh[] = new char[1024];
            int r;
            OutputStreamWriter outReq = new OutputStreamWriter(con.getOutputStream());
            while ((r = inBody.read(bufCh)) != -1) {
                System.out.println(bufCh);
                outReq.write(bufCh, 0, r);
            }
            outReq.flush();
            outReq.close();
            inBody.close();
            System.out.println(con.getResponseCode());
            System.out.println(con.getResponseMessage());
            if (con.getResponseCode() == con.HTTP_OK) {
                response.setContentType(con.getContentType());
                response.addHeader(""Content-Encoding"", con.getContentEncoding());
                sout = response.getOutputStream();
                is = con.getInputStream();
                byte buff[] = new byte[1024];
                while ((r = is.read(buff)) != -1) {
                    sout.write(buff, 0, r);
                    System.out.print(buff);
                }
                sout.flush();
                is.close();
                sout.close();
            } else {
                response.sendError(con.getResponseCode(), con.getResponseMessage());
            }
        } catch (MalformedURLException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
 <SPLIT>     private static boolean setBundleInfoName(String location, List<BundleInfo> list) {
        try {
            URL url = new URL(location);
            BufferedReader br = new BufferedReader(new InputStreamReader(url.openStream(), ""UTF-8""));
            while (true) {
                String line = br.readLine();
                if (line == null) {
                    break;
                }
                int pos1 = line.indexOf('=');
                if (pos1 < 0) {
                    continue;
                }
                String bundleSymbolicName = line.substring(0, pos1);
                String bundleName = line.substring(pos1 + 1);
                for (BundleInfo info : list) {
                    if (info.bundleSymbolicName.equals(bundleSymbolicName)) {
                        info.bundleName = bundleName;
                        break;
                    }
                }
            }
            return true;
        } catch (IOException e) {
            e.printStackTrace();
        }
        return false;
    }
",484,,LABEL_1,LABEL_0,,-4,"doTransfer,request,response,method,servletContext,wac,szUrl,url,is,sout,con,hNames,txt,inBody,bufCh,r,outReq,buff",,,,0,,0,Greedy,1,0.0006268024444580078,,[]
288,"    public static Vector[] getLinksFromURLFast(String p_url) throws Exception {
        timeCheck(""getLinksFromURLFast "");
        URL x_url = new URL(p_url);
        URLConnection x_conn = x_url.openConnection();
        InputStreamReader x_is_reader = new InputStreamReader(x_conn.getInputStream());
        BufferedReader x_reader = new BufferedReader(x_is_reader);
        String x_line = null;
        RE e = new RE(""(.*/)"", RE.REG_ICASE);
        System.out.println(""RE: "" + e.toString());
        REMatch x_match = e.getMatch(p_url);
        String x_dir = p_url.substring(x_match.getSubStartIndex(1), x_match.getSubEndIndex(1));
        e = new RE(""(http://.*?)/?"", RE.REG_ICASE);
        x_match = e.getMatch(p_url);
        String x_root = p_url.substring(x_match.getSubStartIndex(1), x_match.getSubEndIndex(1));
        e = new RE(""<a href=\""?(.*?)\""?>(.*?)</a>"", RE.REG_ICASE);
        System.out.println(""RE: "" + e.toString());
        Vector x_links = new Vector(100);
        Vector x_texts = new Vector(100);
        StringBuffer x_buf = new StringBuffer(10000);
        REMatch[] x_matches = null;
        timeCheck(""starting parsing "");
        while ((x_line = x_reader.readLine()) != null) {
            x_buf.append(x_line);
        }
        String x_page = x_buf.toString();
        String x_link = null;
        x_matches = e.getAllMatches(x_page);
        for (int i = 0; i < x_matches.length; i++) {
            x_link = x_page.substring(x_matches[i].getSubStartIndex(1), x_matches[i].getSubEndIndex(1));
            if (x_link.indexOf(""mailto:"") != -1) continue;
            x_link = toAbsolute(x_root, x_dir, x_link);
            x_links.addElement(x_link);
            x_texts.addElement(x_page.substring(x_matches[i].getSubStartIndex(2), x_matches[i].getSubEndIndex(2)));
        }
        Vector[] x_result = new Vector[2];
        x_result[0] = x_links;
        x_result[1] = x_texts;
        timeCheck(""end parsing "");
        return x_result;
    }
 <SPLIT>     protected ActionForward doExecute(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {
        ActionMessages errors = new ActionMessages();
        try {
            boolean isMultipart = FileUpload.isMultipartContent(request);
            Mail mailInstance = getMailInstance(request);
            if (isMultipart) {
                Map fields = new HashMap();
                Vector attachments = new Vector();
                List items = diskFileUpload.parseRequest(request);
                Iterator iter = items.iterator();
                while (iter.hasNext()) {
                    FileItem item = (FileItem) iter.next();
                    if (item.isFormField()) {
                        if (item.getFieldName().equals(""forwardAttachments"")) {
                            String[] aux = item.getString().split("":"");
                            MailPartObj part = mailInstance.getAttachment(aux[0], aux[1]);
                            attachments.addElement(part);
                        } else {
                            fields.put(item.getFieldName(), item.getString());
                        }
                    } else {
                        if (!StringUtils.isBlank(item.getName())) {
                            ByteArrayOutputStream baos = null;
                            try {
                                baos = new ByteArrayOutputStream();
                                IOUtils.copy(item.getInputStream(), baos);
                                MailPartObj part = new MailPartObj();
                                part.setAttachent(baos.toByteArray());
                                part.setContentType(item.getContentType());
                                part.setName(item.getName());
                                part.setSize(item.getSize());
                                attachments.addElement(part);
                            } catch (Exception ex) {
                            } finally {
                                IOUtils.closeQuietly(baos);
                            }
                        }
                    }
                }
                String body = """";
                if (fields.get(""taBody"") != null) {
                    body = (String) fields.get(""taBody"");
                } else if (fields.get(""taReplyBody"") != null) {
                    body = (String) fields.get(""taReplyBody"");
                }
                Preferences preferencesInstance = getPreferencesInstance(request);
                Send sendInstance = getSendInstance(request);
                String mid = (String) fields.get(""mid"");
                if (StringUtils.isBlank(mid)) {
                    request.setAttribute(""action"", ""compose"");
                } else {
                    request.setAttribute(""action"", ""reply"");
                }
                Boolean isHtml = null;
                if (StringUtils.isBlank((String) fields.get(""isHtml""))) {
                    isHtml = new Boolean(preferencesInstance.getPreferences().isHtmlMessage());
                } else {
                    isHtml = Boolean.valueOf((String) fields.get(""isHtml""));
                }
                sendInstance.send(mid, Integer.parseInt((String) fields.get(""identity"")), (String) fields.get(""to""), (String) fields.get(""cc""), (String) fields.get(""bcc""), (String) fields.get(""subject""), body, attachments, isHtml.booleanValue(), Charset.defaultCharset().displayName(), (String) fields.get(""priority""));
            } else {
                errors.add(""general"", new ActionMessage(ExceptionCode.ERROR_MESSAGES_PREFIX + ""mail.send"", ""The form is null""));
                request.setAttribute(""exception"", ""The form is null"");
                request.setAttribute(""newLocation"", null);
                doTrace(request, DLog.ERROR, getClass(), ""The form is null"");
            }
        } catch (Exception ex) {
            String errorMessage = ExceptionUtilities.parseMessage(ex);
            if (errorMessage == null) {
                errorMessage = ""NullPointerException"";
            }
            errors.add(""general"", new ActionMessage(ExceptionCode.ERROR_MESSAGES_PREFIX + ""general"", errorMessage));
            request.setAttribute(""exception"", errorMessage);
            doTrace(request, DLog.ERROR, getClass(), errorMessage);
        } finally {
        }
        if (errors.isEmpty()) {
            doTrace(request, DLog.INFO, getClass(), ""OK"");
            return mapping.findForward(Constants.ACTION_SUCCESS_FORWARD);
        } else {
            saveErrors(request, errors);
            return mapping.findForward(Constants.ACTION_FAIL_FORWARD);
        }
    }
",442,"    public static Vector[] getLinksfromUrlfast(String eklink) throws Exception {
        timeCheck(""getLinksFromURLFast "");
        URL  x_ssl = new URL(eklink);
        URLConnection x_conn =  x_ssl.openConnection();
        InputStreamReader x_is_writer = new InputStreamReader(x_conn.getInputStream());
        BufferedReader x_reader = new BufferedReader(x_is_writer);
        String x_line = null;
        RE e = new RE(""(.*/)"", RE.REG_ICASE);
        System.out.println(""RE: "" + e.toString());
        REMatch xamslice = e.getMatch(eklink);
        String xnetfile = eklink.substring(xamslice.getSubStartIndex(1), xamslice.getSubEndIndex(1));
        e = new RE(""(http://.*?)/?"", RE.REG_ICASE);
        xamslice = e.getMatch(eklink);
        String x_root = eklink.substring(xamslice.getSubStartIndex(1), xamslice.getSubEndIndex(1));
        e = new RE(""<a href=\""?(.*?)\""?>(.*?)</a>"", RE.REG_ICASE);
        System.out.println(""RE: "" + e.toString());
        Vector x_links = new Vector(100);
        Vector x_texts = new Vector(100);
        StringBuffer x_buf = new StringBuffer(10000);
        REMatch[] x_matches = null;
        timeCheck(""starting parsing "");
        while ((x_line = x_reader.readLine()) != null) {
            x_buf.append(x_line);
        }
        String x_page = x_buf.toString();
        String x_link = null;
        x_matches = e.getAllMatches(x_page);
        for (int i = 0; i < x_matches.length; i++) {
            x_link = x_page.substring(x_matches[i].getSubStartIndex(1), x_matches[i].getSubEndIndex(1));
            if (x_link.indexOf(""mailto:"") != -1) continue;
            x_link = toAbsolute(x_root, xnetfile, x_link);
            x_links.addElement(x_link);
            x_texts.addElement(x_page.substring(x_matches[i].getSubStartIndex(2), x_matches[i].getSubEndIndex(2)));
        }
        Vector[] x_result = new Vector[2];
        x_result[0] = x_links;
        x_result[1] = x_texts;
        timeCheck(""end parsing "");
        return x_result;
    }
",LABEL_0,LABEL_0,LABEL_1,1,"getLinksFromURLFast,p_url,x_url,x_conn,x_is_reader,x_reader,x_line,e,x_match,x_dir,x_root,x_links,x_texts,x_buf,x_matches,x_page,x_link,i","getLinksFromURLFast:0.06248527765274048,p_url:0.019432425498962402,x_url:0.04525291919708252,x_conn:0.012097060680389404,x_is_reader:0.0939171314239502,x_reader:0.014962255954742432,x_line:-0.041371166706085205,e:-0.004065990447998047,x_match:0.05973166227340698,x_dir:0.020598232746124268,x_root:0.0027542710304260254,x_links:-0.009987473487854004,x_texts:0.00972205400466919,x_buf:-0.02564215660095215,x_matches:-0.04348766803741455,x_page:-0.03822582960128784,x_link:-0.026047825813293457,i:-0.004863619804382324,",6,20,0,"x_is_reader:x_is_writer,getLinksFromURLFast:getLinksfromUrlfast,x_match:xamslice,x_url: x_ssl,x_dir:xnetfile,p_url:eklink,",0,Greedy,304,0.05642596483230591,replace,[]
289,"    private static void copyFiles(String strPath, String dstPath) throws Exception {
        File src = new File(strPath);
        File dest = new File(dstPath);
        if (src.isDirectory()) {
            dest.mkdirs();
            String list[] = src.list();
            for (int i = 0; i < list.length; i++) {
                String dest1 = dest.getAbsolutePath() + ""\\"" + list[i];
                String src1 = src.getAbsolutePath() + ""\\"" + list[i];
                copyFiles(src1, dest1);
            }
        } else {
            FileChannel sourceChannel = new FileInputStream(src).getChannel();
            FileChannel targetChannel = new FileOutputStream(dest).getChannel();
            sourceChannel.transferTo(0, sourceChannel.size(), targetChannel);
            sourceChannel.close();
            targetChannel.close();
        }
    }
 <SPLIT>     private void copyResourceToFile(final String resourceFilename, final String destinationFilename) throws IOException {
        InputStream inStream = null;
        OutputStream outStream = null;
        try {
            inStream = MatsimResource.getAsInputStream(resourceFilename);
            outStream = new FileOutputStream(destinationFilename);
            IOUtils.copyStream(inStream, outStream);
        } finally {
            if (inStream != null) {
                try {
                    inStream.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
            if (outStream != null) {
                try {
                    outStream.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        }
    }
",178,"    private static void Copyfiles(String strPath, String fstspath) throws Exception {
        File url = new File(strPath);
        File txt = new File(fstspath);
        if (url.isDirectory()) {
            txt.mkdirs();
            String url[] = url.url();
            for (int uri = 0; uri < url.length; uri++) {
                String Dest2 = txt.getAbsolutePath() + ""\\"" + url[uri];
                String  src2 = url.getAbsolutePath() + ""\\"" + url[uri];
                Copyfiles( src2, Dest2);
            }
        } else {
            FileChannel sourceChannel = new FileInputStream(url).getChannel();
            FileChannel targetChannel = new FileOutputStream(txt).getChannel();
            sourceChannel.transferTo(0, sourceChannel.size(), targetChannel);
            sourceChannel.close();
            targetChannel.close();
        }
    }
",LABEL_1,LABEL_1,LABEL_1,-1,"copyFiles,strPath,dstPath,src,dest,list,i,dest1,src1,sourceChannel,targetChannel","copyFiles:0.027552008628845215,strPath:0.03182196617126465,dstPath:0.024495422840118408,src:-0.005796313285827637,dest:0.00369417667388916,list:0.001238107681274414,i:0.001722097396850586,dest1:0.024918198585510254,src1:0.02665102481842041,sourceChannel:0.058276474475860596,targetChannel:0.03866851329803467,",8,27,0,"sourceChannel:sourceChannel,targetChannel:targetChannel,strPath:strPath,copyFiles:Copyfiles,src1: src2,dest1:Dest2,dstPath:fstspath,dest:txt,i:uri,list:url,src:url,",0,Greedy,447,0.06510078509648641,failed,[]
290,"    public static String hashPasswordForOldMD5(String password) {
        try {
            MessageDigest md = MessageDigest.getInstance(""MD5"");
            md.update(password.getBytes(""UTF-8""));
            byte messageDigest[] = md.digest();
            StringBuffer hexString = new StringBuffer();
            for (int i = 0; i < messageDigest.length; i++) {
                String hex = Integer.toHexString(0xFF & messageDigest[i]);
                if (hex.length() == 1) {
                    hexString.append('0');
                }
                hexString.append(hex);
            }
            return hexString.toString();
        } catch (NoSuchAlgorithmException nsae) {
            throw new IllegalStateException(nsae.getMessage());
        } catch (UnsupportedEncodingException uee) {
            throw new IllegalStateException(uee.getMessage());
        }
    }
 <SPLIT>     public void patch() throws IOException {
        if (mods.isEmpty()) {
            return;
        }
        IOUtils.copy(new FileInputStream(Paths.getMinecraftJarPath()), new FileOutputStream(new File(Paths.getMinecraftBackupPath())));
        JarFile mcjar = new JarFile(Paths.getMinecraftJarPath());
    }
",161,"    public static String  hashPasswordForOldMC3(String wd) {
        try {
            MessageDigest metadata = MessageDigest.getInstance(""MD5"");
            metadata.update(wd.getBytes(""UTF-8""));
            byte messageDigest[] = metadata.digest();
            StringBuffer sumFile = new StringBuffer();
            for (int m = 0; m < messageDigest.length; m++) {
                String hex = Integer.toHexString(0xFF & messageDigest[m]);
                if (hex.length() == 1) {
                    sumFile.append('0');
                }
                sumFile.append(hex);
            }
            return sumFile.toString();
        } catch (NoSuchAlgorithmException nsae) {
            throw new IllegalStateException(nsae.getMessage());
        } catch (UnsupportedEncodingException uee) {
            throw new IllegalStateException(uee.getMessage());
        }
    }
",LABEL_0,LABEL_0,LABEL_0,-1,"hashPasswordForOldMD5,password,md,messageDigest,hexString,i,hex","hashPasswordForOldMD5:-0.013837456703186035,password:-0.001348257064819336,md:-0.00183868408203125,messageDigest:-0.028916120529174805,hexString:-0.031089186668395996,i:-0.00481492280960083,hex:0.0008857250213623047,",5,14,0,"hex:hex,password:wd,md:metadata,i:m,hashPasswordForOldMD5: hashPasswordForOldMC3,messageDigest:messageDigest,hexString:sumFile,",0,Greedy,324,0.04559613863627116,failed,[]
291,"    public static void main(String[] args) throws Exception {
        String st = ""http://www.kmzlinks.com/redirect.asp?id=113&file=HeartShapedIsland.kmz"";
        URL url = new URL(st);
        InputStream fis = null;
        if (""file"".equals(url.getProtocol())) fis = new FileInputStream(url.getFile()); else if (""http"".equals(url.getProtocol())) fis = url.openStream();
        ZipInputStream zis = new ZipInputStream(fis);
        ZipEntry entry;
        while ((entry = zis.getNextEntry()) != null) {
            System.out.println(""Extracting: "" + entry);
            int count;
            byte data[] = new byte[BUFFER];
            FileOutputStream fos = new FileOutputStream(entry.getName());
            BufferedOutputStream dest = new BufferedOutputStream(fos, BUFFER);
            while ((count = zis.read(data, 0, BUFFER)) != -1) dest.write(data, 0, count);
            dest.flush();
            dest.close();
        }
        zis.close();
    }
 <SPLIT>     public static void copyTo(File source, File dest) {
        if (source.isHidden()) ; else if (source.isDirectory()) {
            File temp = new File(dest.getPath() + ""/"" + source.getName());
            temp.mkdir();
            for (File sel : source.listFiles()) copyTo(sel, temp);
        } else {
            try {
                File tempDest = new File(dest.getPath() + ""/"" + source.getName());
                tempDest.createNewFile();
                FileChannel sourceCh = new FileInputStream(source).getChannel();
                FileChannel destCh = new FileOutputStream(tempDest).getChannel();
                sourceCh.transferTo(0, sourceCh.size(), destCh);
                sourceCh.close();
                destCh.close();
            } catch (IOException ex) {
                Logger.getLogger(EditorUtil.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }
",215,,LABEL_1,LABEL_0,,-4,"st,url,fis,zis,entry,count,data,fos,dest",,,,0,,0,Greedy,1,0.00040313800175984703,,[]
292,"    public static String eventHash(String eventstr) {
        try {
            if (md == null) {
                md = MessageDigest.getInstance(""MD5"");
            }
            md.update(eventstr.getBytes(""utf-8""));
            byte[] theDigest = md.digest();
            return new BASE64Encoder().encode(theDigest);
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        } catch (UnsupportedEncodingException e) {
            e.printStackTrace();
        }
        return null;
    }
 <SPLIT>     public SRWGuiClient(String initialURL) {
        super(""Simple Swing Browser"");
        this.initialURL = initialURL;
        addWindowListener(new ExitListener());
        WindowUtilities.setNativeLookAndFeel();
        JPanel topPanel = new JPanel();
        topPanel.setBackground(Color.lightGray);
        homeButton = new JIconButton(""home.gif"");
        homeButton.addActionListener(this);
        JLabel urlLabel = new JLabel(""URL:"");
        urlField = new JTextField(30);
        urlField.setText(initialURL);
        urlField.addActionListener(this);
        topPanel.add(homeButton);
        topPanel.add(urlLabel);
        topPanel.add(urlField);
        getContentPane().add(topPanel, BorderLayout.NORTH);
        try {
            URL url = new URL(initialURL);
            BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));
            boolean xml = true;
            String inputLine;
            StringBuffer content = new StringBuffer(), stylesheet = null;
            Transformer transformer = null;
            inputLine = in.readLine();
            if (inputLine == null) {
                System.out.println(""No input read from URL: "" + initialURL);
                return;
            }
            if (!inputLine.startsWith(""<?xml "")) {
                xml = false;
                content.append(inputLine);
            }
            if (xml) {
                inputLine = in.readLine();
                if (inputLine.startsWith(""<?xml-stylesheet "")) {
                    int offset = inputLine.indexOf(""href="");
                    String href = (inputLine.substring(inputLine.indexOf(""href="") + 6));
                    href = href.substring(0, href.indexOf('""'));
                    System.out.println(""href="" + href);
                    url = new URL(url, href);
                    String stylesheetURL = url.toString();
                    System.out.println(""stylesheet URL="" + url.toString());
                    transformer = (Transformer) transformers.get(stylesheetURL);
                    if (transformer == null) {
                        BufferedReader sheetIn = new BufferedReader(new InputStreamReader(url.openStream()));
                        sheetIn.readLine();
                        stylesheet = new StringBuffer();
                        while ((inputLine = sheetIn.readLine()) != null) stylesheet.append(inputLine).append('\n');
                        System.out.println(stylesheet.toString());
                        TransformerFactory tFactory = TransformerFactory.newInstance();
                        StreamSource xslSource = new StreamSource(new StringReader(stylesheet.toString()));
                        transformer = tFactory.newTransformer(xslSource);
                        transformers.put(stylesheetURL, transformer);
                    }
                }
            }
            while ((inputLine = in.readLine()) != null) content.append(inputLine).append('\n');
            htmlPane = new JEditorPane();
            if (transformer != null) {
                StringReader stringRecordReader = new StringReader(content.toString());
                StringWriter xmlRecordWriter = new StringWriter();
                StreamSource streamXMLRecord = new StreamSource(stringRecordReader);
                transformer.transform(streamXMLRecord, new StreamResult(xmlRecordWriter));
                String html = xmlRecordWriter.toString();
                int i = html.indexOf('>');
                html = ""<html>"" + html.substring(html.indexOf('>') + 1);
                System.out.println(html);
                htmlPane.setContentType(""text/html"");
                htmlPane.setText(""<html><head><META http-equiv=\""Content-Type\"" content=\""text/html; charset=UTF-8\""><title>GSAFD Thesaurus</title></head><body><center><h2>GSAFD Thesaurus</h2></center><p>A thesaurus of genre terms to support the \""Guidelines on Subject Access to Individual Works of Fiction , Drama\"" (GSAFD)</p><table cellspacing=\""5\"" width=\""100%\""><tr><td><h3>Search</h3><p></p></td><td valign=\""top\""><h3>Browse</h3></td></tr></table></body></html>"");
            } else htmlPane.setText(content.toString());
            htmlPane.setEditable(false);
            htmlPane.addHyperlinkListener(this);
            JScrollPane scrollPane = new JScrollPane(htmlPane);
            getContentPane().add(scrollPane, BorderLayout.CENTER);
        } catch (IOException ioe) {
            warnUser(""Can't build HTML pane for "" + initialURL + "": "" + ioe);
        } catch (TransformerException e) {
        }
        Dimension screenSize = getToolkit().getScreenSize();
        int width = screenSize.width * 8 / 10;
        int height = screenSize.height * 8 / 10;
        setBounds(width / 8, height / 8, width, height);
        setVisible(true);
    }
",98,"    public static String byteDig(String errorsource) {
        try {
            if (rpm == null) {
                rpm = MessageDigest.getInstance(""MD5"");
            }
            rpm.update(errorsource.getBytes(""utf-8""));
            byte[] theHashest = rpm.digest();
            return new BASE64Encoder().encode(theHashest);
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        } catch (UnsupportedEncodingException e) {
            e.printStackTrace();
        }
        return null;
    }
",LABEL_0,LABEL_0,LABEL_0,-1,"eventHash,eventstr,md,theDigest","eventHash:-0.0034068822860717773,eventstr:-0.0014830231666564941,md:-0.004706263542175293,theDigest:0.0011650323867797852,",4,9,0,"theDigest:theHashest,eventstr:errorsource,eventHash:byteDig,md:rpm,",0,Greedy,125,0.024408539136250813,failed,[]
293,"    @Override
    public Content getContent(Object principal, ContentPath path, Version version, Map<String, Object> properties) throws ContentException {
        String uniqueName = path.getBaseName();
        URL url = buildURL(uniqueName);
        URLContent content = new URLContent(url, this.getName(), uniqueName);
        content.setUniqueName(uniqueName);
        content.setReadable(true);
        content.setWritable(writable);
        content.setExists(true);
        try {
            URLConnection connection = url.openConnection();
            String mimeType = connection.getContentType();
            content.setMimeType(mimeType);
            content.setWritable(true);
        } catch (IOException ex) {
            throw new ContentException(""unable to obtain mime type of "" + url, ex);
        }
        return content;
    }
 <SPLIT>     private void loadProperties() {
        if (properties == null) {
            properties = new Properties();
            try {
                URL url = getClass().getResource(propsFile);
                properties.load(url.openStream());
            } catch (IOException ioe) {
                ioe.printStackTrace();
            }
        }
    }
",148,"    @Override
    public Content loadResource(Object pricipipal, ContentPath property, Version vision, Map<String, Object> Pro) throws ContentException {
        String UniquePath = property.getBaseName();
        URL error = buildURL(UniquePath);
        URLContent create = new URLContent(error, this.getName(), UniquePath);
        create.setUniqueName(UniquePath);
        create.setReadable(true);
        create.setWritable(writable);
        create.setExists(true);
        try {
            URLConnection response = error.openConnection();
            String miveInfo = response.getContentType();
            create.setMimeType(miveInfo);
            create.setWritable(true);
        } catch (IOException ex) {
            throw new ContentException(""unable to obtain mime type of "" + error, ex);
        }
        return create;
    }
",LABEL_0,LABEL_0,LABEL_0,-1,"getContent,principal,path,version,properties,uniqueName,url,content,connection,mimeType","getContent:2.384185791015625e-07,principal:0.0,path:-1.1920928955078125e-07,version:2.384185791015625e-07,properties:-3.5762786865234375e-07,uniqueName:-5.960464477539062e-07,url:-2.384185791015625e-07,content:-1.430511474609375e-06,connection:1.0728836059570312e-06,mimeType:1.3113021850585938e-06,",10,26,0,"mimeType:miveInfo,connection:response,getContent:loadResource,version:vision,principal:pricipipal,path:property,url:error,properties:Pro,uniqueName:UniquePath,content:create,",0,Greedy,379,0.05354510148366292,failed,[]
294,"    private int addIDs(PeakListRow row, String name) {
        {
            BufferedReader in = null;
            try {
                String urlName = ""http://gmd.mpimp-golm.mpg.de/search.aspx?query="" + name;
                URL url = new URL(urlName);
                in = new BufferedReader(new InputStreamReader(url.openStream()));
                String inputLine, score = ""0"";
                while ((inputLine = in.readLine()) != null) {
                    String metaboliteID = """";
                    if (inputLine.contains(""href=\""Metabolites/"")) {
                        String[] dataScore = inputLine.split(""</td><td>"");
                        score = dataScore[0].substring(dataScore[0].indexOf(""<td>"") + 4);
                        metaboliteID = inputLine.substring(inputLine.indexOf(""href=\""Metabolites/"") + 18, inputLine.indexOf(""aspx\"">"") + 4);
                        urlName = ""http://gmd.mpimp-golm.mpg.de/Metabolites/"" + metaboliteID;
                        inputLine = in.readLine();
                        inputLine = in.readLine();
                        String[] data = inputLine.split(""</td><td>"");
                        String molecularWeight = data[data.length - 1].replaceAll(""&nbsp;"", """");
                        row.setVar(GCGCColumnName.MOLWEIGHT.getSetFunctionName(), molecularWeight);
                        break;
                    } else if (inputLine.contains(""href=\""Analytes/"")) {
                        String[] dataScore = inputLine.split(""</td><td>"");
                        score = dataScore[0].substring(dataScore[0].indexOf(""<td>"") + 4);
                        metaboliteID = inputLine.substring(inputLine.indexOf(""href=\""Analytes/"") + 15, inputLine.indexOf(""aspx\"">"") + 4);
                        urlName = ""http://gmd.mpimp-golm.mpg.de/Analytes/"" + metaboliteID;
                        inputLine = in.readLine();
                        inputLine = in.readLine();
                        String[] data = inputLine.split(""</td><td>"");
                        String molecularWeight = data[data.length - 1].replaceAll(""&nbsp;"", """");
                        row.setVar(GCGCColumnName.MOLWEIGHT.getSetFunctionName(), molecularWeight);
                        break;
                    } else if (inputLine.contains(""href=\""ReferenceSubstances/"")) {
                        String[] dataScore = inputLine.split(""</td><td>"");
                        score = dataScore[0].substring(dataScore[0].indexOf(""<td>"") + 4);
                        metaboliteID = inputLine.substring(inputLine.indexOf(""href=\""ReferenceSubstances/"") + 26, inputLine.indexOf(""aspx\"">"") + 4);
                        urlName = ""http://gmd.mpimp-golm.mpg.de/ReferenceSubstances/"" + metaboliteID;
                        inputLine = in.readLine();
                        inputLine = in.readLine();
                        String[] data = inputLine.split(""</td><td>"");
                        String molecularWeight = data[data.length - 1].replaceAll(""&nbsp;"", """");
                        row.setVar(GCGCColumnName.MOLWEIGHT.getSetFunctionName(), molecularWeight);
                        break;
                    }
                }
                in.close();
                urlName = searchMetabolite(urlName);
                if (urlName != null && urlName.contains("".aspx"")) {
                    url = new URL(urlName);
                    in = new BufferedReader(new InputStreamReader(url.openStream()));
                    while ((inputLine = in.readLine()) != null) {
                        if (inputLine.contains(""<meta http-equiv=\""keywords\"" content="")) {
                            String line = inputLine.substring(inputLine.indexOf(""<meta http-equiv=\""keywords\"" content="") + 37, inputLine.indexOf(""\"" /></head>""));
                            String[] names = line.split("", "");
                            for (String id : names) {
                                if (id.contains(""PubChem"")) {
                                    id = id.substring(id.indexOf(""PubChem"") + 8);
                                    String pubChem = (String) row.getVar(GCGCColumnName.PUBCHEM.getGetFunctionName());
                                    if (pubChem.length() == 0) {
                                        pubChem += id;
                                    } else {
                                        pubChem += "", "" + id;
                                    }
                                    row.setVar(GCGCColumnName.PUBCHEM.getSetFunctionName(), pubChem);
                                } else if (id.contains(""ChEBI"")) {
                                    id = id.substring(id.indexOf(""ChEBI:"") + 6);
                                    row.setVar(GCGCColumnName.ChEBI.getSetFunctionName(), id);
                                } else if (id.contains(""KEGG"")) {
                                    id = id.substring(id.indexOf(""KEGG:"") + 6);
                                    row.setVar(GCGCColumnName.KEGG.getSetFunctionName(), id);
                                } else if (id.contains(""CAS"")) {
                                    id = id.substring(id.indexOf(""CAS:"") + 5);
                                    row.setVar(GCGCColumnName.CAS2.getSetFunctionName(), id);
                                } else if (id.contains(""ChemSpider"") || id.contains(""MAPMAN"") || id.contains(""Beilstein:"")) {
                                } else {
                                    String synonym = (String) row.getVar(GCGCColumnName.SYNONYM.getGetFunctionName());
                                    if (synonym.length() == 0) {
                                        synonym += id;
                                    } else {
                                        synonym += "" // "" + id;
                                    }
                                    synonym = synonym.replaceAll(""&amp;#39;"", ""'"");
                                    row.setVar(GCGCColumnName.SYNONYM.getSetFunctionName(), synonym);
                                }
                            }
                            break;
                        }
                    }
                    in.close();
                }
                return Integer.parseInt(score);
            } catch (IOException ex) {
                Logger.getLogger(GetGolmIDsTask.class.getName()).log(Level.SEVERE, null, ex);
                return 0;
            }
        }
    }
 <SPLIT>     public static String POST(String url, String[][] props) throws IOException {
        HttpURLConnection conn = (HttpURLConnection) new URL(url).openConnection();
        conn.setRequestMethod(""POST"");
        for (int i = 0; i < props.length; ++i) {
            conn.addRequestProperty(props[i][0], props[i][1]);
        }
        conn.connect();
        try {
            return new String((byte[]) conn.getContent());
        } finally {
            conn.disconnect();
        }
    }
",1116,"    private int addIDs(PeakListRow view, String filename) {
        {
            BufferedReader file = null;
            try {
                String urlName = ""http://gmd.mpimp-golm.mpg.de/search.aspx?query="" + filename;
                URL out = new URL(urlName);
                file = new BufferedReader(new InputStreamReader(out.openStream()));
                String inputLine, score = ""0"";
                while ((inputLine = file.readLine()) != null) {
                    String metaboliteID = """";
                    if (inputLine.contains(""href=\""Metabolites/"")) {
                        String[] dataScore = inputLine.split(""</td><td>"");
                        score = dataScore[0].substring(dataScore[0].indexOf(""<td>"") + 4);
                        metaboliteID = inputLine.substring(inputLine.indexOf(""href=\""Metabolites/"") + 18, inputLine.indexOf(""aspx\"">"") + 4);
                        urlName = ""http://gmd.mpimp-golm.mpg.de/Metabolites/"" + metaboliteID;
                        inputLine = file.readLine();
                        inputLine = file.readLine();
                        String[] data = inputLine.split(""</td><td>"");
                        String molecularWeight = data[data.length - 1].replaceAll(""&nbsp;"", """");
                        view.setVar(GCGCColumnName.MOLWEIGHT.getSetFunctionName(), molecularWeight);
                        break;
                    } else if (inputLine.contains(""href=\""Analytes/"")) {
                        String[] dataScore = inputLine.split(""</td><td>"");
                        score = dataScore[0].substring(dataScore[0].indexOf(""<td>"") + 4);
                        metaboliteID = inputLine.substring(inputLine.indexOf(""href=\""Analytes/"") + 15, inputLine.indexOf(""aspx\"">"") + 4);
                        urlName = ""http://gmd.mpimp-golm.mpg.de/Analytes/"" + metaboliteID;
                        inputLine = file.readLine();
                        inputLine = file.readLine();
                        String[] data = inputLine.split(""</td><td>"");
                        String molecularWeight = data[data.length - 1].replaceAll(""&nbsp;"", """");
                        view.setVar(GCGCColumnName.MOLWEIGHT.getSetFunctionName(), molecularWeight);
                        break;
                    } else if (inputLine.contains(""href=\""ReferenceSubstances/"")) {
                        String[] dataScore = inputLine.split(""</td><td>"");
                        score = dataScore[0].substring(dataScore[0].indexOf(""<td>"") + 4);
                        metaboliteID = inputLine.substring(inputLine.indexOf(""href=\""ReferenceSubstances/"") + 26, inputLine.indexOf(""aspx\"">"") + 4);
                        urlName = ""http://gmd.mpimp-golm.mpg.de/ReferenceSubstances/"" + metaboliteID;
                        inputLine = file.readLine();
                        inputLine = file.readLine();
                        String[] data = inputLine.split(""</td><td>"");
                        String molecularWeight = data[data.length - 1].replaceAll(""&nbsp;"", """");
                        view.setVar(GCGCColumnName.MOLWEIGHT.getSetFunctionName(), molecularWeight);
                        break;
                    }
                }
                file.close();
                urlName = searchMetabolite(urlName);
                if (urlName != null && urlName.contains("".aspx"")) {
                    out = new URL(urlName);
                    file = new BufferedReader(new InputStreamReader(out.openStream()));
                    while ((inputLine = file.readLine()) != null) {
                        if (inputLine.contains(""<meta http-equiv=\""keywords\"" content="")) {
                            String line = inputLine.substring(inputLine.indexOf(""<meta http-equiv=\""keywords\"" content="") + 37, inputLine.indexOf(""\"" /></head>""));
                            String[] names = line.split("", "");
                            for (String id : names) {
                                if (id.contains(""PubChem"")) {
                                    id = id.substring(id.indexOf(""PubChem"") + 8);
                                    String pubChem = (String) view.getVar(GCGCColumnName.PUBCHEM.getGetFunctionName());
                                    if (pubChem.length() == 0) {
                                        pubChem += id;
                                    } else {
                                        pubChem += "", "" + id;
                                    }
                                    view.setVar(GCGCColumnName.PUBCHEM.getSetFunctionName(), pubChem);
                                } else if (id.contains(""ChEBI"")) {
                                    id = id.substring(id.indexOf(""ChEBI:"") + 6);
                                    view.setVar(GCGCColumnName.ChEBI.getSetFunctionName(), id);
                                } else if (id.contains(""KEGG"")) {
                                    id = id.substring(id.indexOf(""KEGG:"") + 6);
                                    view.setVar(GCGCColumnName.KEGG.getSetFunctionName(), id);
                                } else if (id.contains(""CAS"")) {
                                    id = id.substring(id.indexOf(""CAS:"") + 5);
                                    view.setVar(GCGCColumnName.CAS2.getSetFunctionName(), id);
                                } else if (id.contains(""ChemSpider"") || id.contains(""MAPMAN"") || id.contains(""Beilstein:"")) {
                                } else {
                                    String synonym = (String) view.getVar(GCGCColumnName.SYNONYM.getGetFunctionName());
                                    if (synonym.length() == 0) {
                                        synonym += id;
                                    } else {
                                        synonym += "" // "" + id;
                                    }
                                    synonym = synonym.replaceAll(""&amp;#39;"", ""'"");
                                    view.setVar(GCGCColumnName.SYNONYM.getSetFunctionName(), synonym);
                                }
                            }
                            break;
                        }
                    }
                    file.close();
                }
                return Integer.parseInt(score);
            } catch (IOException ex) {
                Logger.getLogger(GetGolmIDsTask.class.getName()).log(Level.SEVERE, null, ex);
                return 0;
            }
        }
    }
",LABEL_0,LABEL_0,LABEL_1,1,"addIDs,row,name,in,urlName,url,inputLine,score,metaboliteID,dataScore,data,molecularWeight","addIDs:-0.009128272533416748,row:0.005328178405761719,name:0.006120204925537109,in:0.007250368595123291,urlName:0.00022917985916137695,url:0.012613773345947266,inputLine:0.0028218626976013184,score:0.001256704330444336,metaboliteID:-0.002181708812713623,dataScore:0.004675388336181641,data:-0.0010676980018615723,molecularWeight:0.0032203197479248047,",4,30,0,"url:out,in:file,name:filename,row:view,",0,Greedy,289,0.06370766957600911,replace,[]
295,"    public static String getMD5(String s) {
        try {
            MessageDigest m = MessageDigest.getInstance(""MD5"");
            m.update(s.getBytes(), 0, s.length());
            return """" + new BigInteger(1, m.digest()).toString(16);
        } catch (NoSuchAlgorithmException e) {
            logger.error(""MD5 is not supported !!!"");
        }
        return s;
    }
 <SPLIT>     public static String toMd5(String str) {
        MessageDigest messageDigest = null;
        try {
            messageDigest = MessageDigest.getInstance(""MD5"");
            messageDigest.reset();
            messageDigest.update(str.getBytes(""UTF-8""));
        } catch (NoSuchAlgorithmException e) {
            System.out.println(""NoSuchAlgorithmException caught!"");
            System.exit(-1);
        } catch (UnsupportedEncodingException e) {
            e.printStackTrace();
        }
        byte[] byteArray = messageDigest.digest();
        StringBuffer md5StrBuff = new StringBuffer();
        for (int i = 0; i < byteArray.length; i++) {
            if (Integer.toHexString(0xFF & byteArray[i]).length() == 1) md5StrBuff.append(""0"").append(Integer.toHexString(0xFF & byteArray[i])); else md5StrBuff.append(Integer.toHexString(0xFF & byteArray[i]));
        }
        return md5StrBuff.toString();
    }
",85,"    public static String getMDHash(String ows) {
        try {
            MessageDigest mu = MessageDigest.getInstance(""MD5"");
            mu.update(ows.getBytes(), 0, ows.length());
            return """" + new BigInteger(1, mu.digest()).toString(16);
        } catch (NoSuchAlgorithmException e) {
            logger.error(""MD5 is not supported !!!"");
        }
        return ows;
    }
",LABEL_1,LABEL_1,LABEL_1,-1,"getMD5,s,m","getMD5:-0.006669223308563232,s:0.0017271041870117188,m:-0.003911316394805908,",3,8,0,"s:ows,m:mu,getMD5:getMDHash,",0,Greedy,139,0.019493488470713298,failed,[]
296,"    public static boolean decodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }
 <SPLIT>     public static void copyFile(File src, File dst) throws IOException {
        try {
            InputStream in = new FileInputStream(src);
            OutputStream out = new FileOutputStream(dst);
            byte[] buf = new byte[TEMP_FILE_BUFFER_SIZE];
            int len;
            while ((len = in.read(buf)) > 0) out.write(buf, 0, len);
            in.close();
            out.close();
        } catch (FileNotFoundException e1) {
            MLUtil.runtimeError(e1, src.toString());
        } catch (IOException e2) {
            MLUtil.runtimeError(e2, src.toString());
        }
    }
",194,"    public static boolean decodeString2Stream(String instream, String outpath) {
        boolean success = false;
        java.io.InputStream conn = null;
        java.io.OutputStream copy = null;
        try {
            conn = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(instream)), Base64.DECODE);
            copy = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outpath));
            byte[] url = new byte[65536];
            int write = -1;
            while ((write = conn.write(url)) >= 0) {
                copy.write(url, 0, write);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                conn.close();
            } catch (Exception exc) {
            }
            try {
                copy.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }
",LABEL_1,LABEL_1,LABEL_1,-1,"decodeFileToFile,infile,outfile,in,out,buffer,read,success","decodeFileToFile:-0.016613662242889404,infile:-0.0006636977195739746,outfile:-0.0003974437713623047,in:-0.006833255290985107,out:-0.0023461580276489258,buffer:-0.0039667487144470215,read:-0.0017274022102355957,success:0.00517195463180542,",7,20,0,"success:success,outfile:outpath,infile:instream,read:write,out:copy,buffer:url,in:conn,decodeFileToFile:decodeString2Stream,",0,Greedy,358,0.05273979107538859,failed,[]
297,"    public void reset(int currentPilot) {
        try {
            PreparedStatement psta = jdbc.prepareStatement(""DELETE FROM component_prop "" + ""WHERE pilot_id = ? "");
            psta.setInt(1, currentPilot);
            psta.executeUpdate();
            jdbc.commit();
        } catch (SQLException e) {
            jdbc.rollback();
            log.debug(e);
        }
    }
 <SPLIT>     private String getHash(String string) {
        Monitor hashTime = JamonMonitorLogger.getTimeMonitor(Cache.class, ""HashTime"").start();
        MessageDigest md5 = null;
        try {
            md5 = MessageDigest.getInstance(""MD5"");
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        }
        md5.reset();
        md5.update(string.getBytes());
        byte[] result = md5.digest();
        StringBuffer hexString = new StringBuffer();
        for (int i = 0; i < result.length; i++) {
            hexString.append(Integer.toHexString(0xFF & result[i]));
        }
        String str = hexString.toString();
        hashTime.stop();
        return str;
    }
",70,"    public void save(int currentPortacket) {
        try {
            PreparedStatement pesa = jdbc.prepareStatement(""DELETE FROM component_prop "" + ""WHERE pilot_id = ? "");
            pesa.setInt(1, currentPortacket);
            pesa.executeUpdate();
            jdbc.commit();
        } catch (SQLException e) {
            jdbc.rollback();
            log.debug(e);
        }
    }
",LABEL_0,LABEL_0,LABEL_0,-1,"reset,currentPilot,psta","reset:-0.0048787593841552734,currentPilot:-0.008105099201202393,psta:-0.015658140182495117,",3,6,0,"reset:save,currentPilot:currentPortacket,psta:pesa,",0,Greedy,111,0.01576251188913981,failed,[]
298,"    private static File getZipAsFile(DigitalObject digOb) {
        String folderName = randomizeFileName(getFolderNameFromDigObject(digOb));
        File tmpFolder = new File(utils_tmp, folderName);
        File zip = null;
        try {
            FileUtils.forceMkdir(tmpFolder);
            zip = new File(tmpFolder, getFileNameFromDigObject(digOb, null));
            FileOutputStream out = new FileOutputStream(zip);
            IOUtils.copyLarge(digOb.getContent().getInputStream(), out);
            out.close();
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
        return zip;
    }
 <SPLIT>     public static void extractFile(String input, String output) throws ZipException, IOException {
        FileReader reader = new FileReader(input);
        InputStream in = reader.getInputStream();
        OutputStream out = new FileOutputStream(new File(output));
        byte[] buf = new byte[512];
        int len;
        while ((len = in.read(buf)) > 0) out.write(buf, 0, len);
        reader.close();
        out.close();
    }
",124,"    private static File getZipAtFile(DigitalObject ditOb) {
        String FolderPath = randomizeFileName(getFolderNameFromDigObject(ditOb));
        File  tmpDir = new File(utils_tmp, FolderPath);
        File url = null;
        try {
            FileUtils.forceMkdir( tmpDir);
            url = new File( tmpDir, getFileNameFromDigObject(ditOb, null));
            FileOutputStream url = new FileOutputStream(url);
            IOUtils.copyLarge(ditOb.getContent().getInputStream(), url);
            url.close();
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
        return url;
    }
",LABEL_1,LABEL_1,LABEL_1,-1,"getZipAsFile,digOb,folderName,tmpFolder,zip,out","getZipAsFile:-0.022022783756256104,digOb:0.005592226982116699,folderName:0.003986835479736328,tmpFolder:0.00545346736907959,zip:0.013314783573150635,out:-0.0010573863983154297,",6,17,0,"zip:url,digOb:ditOb,tmpFolder: tmpDir,folderName:FolderPath,out:url,getZipAsFile:getZipAtFile,",0,Greedy,211,0.0297897736231486,failed,[]
299,"    protected void innerProcess(ProcessorURI curi) throws InterruptedException {
        Pattern regexpr = curi.get(this, STRIP_REG_EXPR);
        ReplayCharSequence cs = null;
        try {
            cs = curi.getRecorder().getReplayCharSequence();
        } catch (Exception e) {
            curi.getNonFatalFailures().add(e);
            logger.warning(""Failed get of replay char sequence "" + curi.toString() + "" "" + e.getMessage() + "" "" + Thread.currentThread().getName());
            return;
        }
        MessageDigest digest = null;
        try {
            try {
                digest = MessageDigest.getInstance(SHA1);
            } catch (NoSuchAlgorithmException e1) {
                e1.printStackTrace();
                return;
            }
            digest.reset();
            String s = null;
            if (regexpr != null) {
                s = cs.toString();
            } else {
                Matcher m = regexpr.matcher(cs);
                s = m.replaceAll("" "");
            }
            digest.update(s.getBytes());
            byte[] newDigestValue = digest.digest();
            curi.setContentDigest(SHA1, newDigestValue);
        } finally {
            if (cs != null) {
                try {
                    cs.close();
                } catch (IOException ioe) {
                    logger.warning(TextUtils.exceptionToString(""Failed close of ReplayCharSequence."", ioe));
                }
            }
        }
    }
 <SPLIT>     public PTask stop(PTask task, SyrupConnection con) throws Exception {
        PreparedStatement s = null;
        ResultSet result = null;
        try {
            s = con.prepareStatementFromCache(sqlImpl().sqlStatements().checkWorkerStatement());
            s.setString(1, task.key());
            result = s.executeQuery();
            con.commit();
            if (result.next()) {
                String url = result.getString(""worker"");
                InputStream i = null;
                try {
                    Object b = new URL(url).getContent();
                    if (b instanceof InputStream) {
                        i = (InputStream) b;
                        byte[] bb = new byte[256];
                        int ll = i.read(bb);
                        String k = new String(bb, 0, ll);
                        if (k.equals(task.key())) {
                            return task;
                        }
                    }
                } catch (Exception e) {
                } finally {
                    if (i != null) {
                        i.close();
                    }
                }
                PreparedStatement s2 = null;
                s2 = con.prepareStatementFromCache(sqlImpl().sqlStatements().resetWorkerStatement());
                s2.setString(1, task.key());
                s2.executeUpdate();
                task = sqlImpl().queryFunctions().readPTask(task.key(), con);
                sqlImpl().loggingFunctions().log(task.key(), LogEntry.STOPPED, con);
                con.commit();
            }
        } finally {
            con.rollback();
            close(result);
        }
        return task;
    }
",264,"    protected void subprocess(ProcessorURI cgui) throws InterruptedException {
        Pattern Regexpr = cgui.get(this, STRIP_REG_EXPR);
        ReplayCharSequence icks = null;
        try {
            icks = cgui.getRecorder().getReplayCharSequence();
        } catch (Exception e) {
            cgui.getNonFatalFailures().add(e);
            logger.warning(""Failed get of replay char sequence "" + cgui.toString() + "" "" + e.getMessage() + "" "" + Thread.currentThread().getName());
            return;
        }
        MessageDigest  diggest = null;
        try {
            try {
                 diggest = MessageDigest.getInstance(SHA1);
            } catch (NoSuchAlgorithmException e1) {
                e1.printStackTrace();
                return;
            }
             diggest.reset();
            String bs = null;
            if (Regexpr != null) {
                bs = icks.toString();
            } else {
                Matcher fm = Regexpr.matcher(icks);
                bs = fm.replaceAll("" "");
            }
             diggest.update(bs.getBytes());
            byte[] newDigeterValue =  diggest. diggest();
            cgui.setContentDigest(SHA1, newDigeterValue);
        } finally {
            if (icks != null) {
                try {
                    icks.close();
                } catch (IOException ioe) {
                    logger.warning(TextUtils.exceptionToString(""Failed close of ReplayCharSequence."", ioe));
                }
            }
        }
    }
",LABEL_0,LABEL_0,LABEL_0,-1,"innerProcess,curi,regexpr,cs,digest,s,m,newDigestValue","innerProcess:-0.008788466453552246,curi:-0.01861119270324707,regexpr:-0.003161311149597168,cs:0.001320183277130127,digest:0.003556966781616211,s:-0.0008766055107116699,m:0.0004336237907409668,newDigestValue:-0.019699513912200928,",8,30,0,"digest: diggest,cs:icks,m:fm,s:bs,regexpr:Regexpr,innerProcess:subprocess,curi:cgui,newDigestValue:newDigeterValue,",0,Greedy,388,0.06370737552642822,failed,[]
300,"    public void updateUser(User portalUserBean, AuthSession authSession) {
        DatabaseAdapter dbDyn = null;
        PreparedStatement ps = null;
        try {
            dbDyn = DatabaseAdapter.getInstance();
            String sql = ""update WM_LIST_USER "" + ""set    FIRST_NAME=?,MIDDLE_NAME=?,LAST_NAME=?, "" + ""       ADDRESS=?,TELEPHONE=?,EMAIL=? "" + ""where  ID_USER=? and is_deleted=0 and  ID_FIRM in "";
            switch(dbDyn.getFamaly()) {
                case DatabaseManager.MYSQL_FAMALY:
                    String idList = authSession.getGrantedCompanyId();
                    sql += "" ("" + idList + "") "";
                    break;
                default:
                    sql += ""(select z1.ID_FIRM from v$_read_list_firm z1 where z1.user_login = ?)"";
                    break;
            }
            ps = dbDyn.prepareStatement(sql);
            int num = 1;
            ps.setString(num++, portalUserBean.getFirstName());
            ps.setString(num++, portalUserBean.getMiddleName());
            ps.setString(num++, portalUserBean.getLastName());
            ps.setString(num++, portalUserBean.getAddress());
            ps.setString(num++, portalUserBean.getPhone());
            ps.setString(num++, portalUserBean.getEmail());
            ps.setLong(num++, portalUserBean.getUserId());
            switch(dbDyn.getFamaly()) {
                case DatabaseManager.MYSQL_FAMALY:
                    break;
                default:
                    ps.setString(num++, authSession.getUserLogin());
                    break;
            }
            int i1 = ps.executeUpdate();
            if (log.isDebugEnabled()) log.debug(""Count of updated record - "" + i1);
            dbDyn.commit();
        } catch (Exception e) {
            try {
                if (dbDyn != null) {
                    dbDyn.rollback();
                }
            } catch (Exception e001) {
            }
            String es = ""Error update of portal user"";
            log.error(es, e);
            throw new IllegalStateException(es, e);
        } finally {
            DatabaseManager.close(dbDyn, ps);
            dbDyn = null;
            ps = null;
        }
    }
 <SPLIT>     private static void doCopyFile(File srcFile, File destFile, boolean preserveFileDate) throws IOException {
        if (destFile.exists() && destFile.isDirectory()) {
            throw new IOException(""Destination '"" + destFile + ""' exists but is a directory"");
        }
        FileChannel input = new FileInputStream(srcFile).getChannel();
        try {
            FileChannel output = new FileOutputStream(destFile).getChannel();
            try {
                output.transferFrom(input, 0, input.size());
            } finally {
                IOUtil.closeQuietly(output);
            }
        } finally {
            IOUtil.closeQuietly(input);
        }
        if (srcFile.length() != destFile.length()) {
            throw new IOException(""Failed to copy full contents from '"" + srcFile + ""' to '"" + destFile + ""'"");
        }
        if (preserveFileDate) {
            destFile.setLastModified(srcFile.lastModified());
        }
    }
",358,"    public void UpdateAccount(User portalFileBeane, AuthSession authSession) {
        DatabaseAdapter dbSyn = null;
        PreparedStatement sp = null;
        try {
            dbSyn = DatabaseAdapter.getInstance();
            String sql = ""update WM_LIST_USER "" + ""set    FIRST_NAME=?,MIDDLE_NAME=?,LAST_NAME=?, "" + ""       ADDRESS=?,TELEPHONE=?,EMAIL=? "" + ""where  ID_USER=? and is_deleted=0 and  ID_FIRM in "";
            switch(dbSyn.getFamaly()) {
                case DatabaseManager.MYSQL_FAMALY:
                    String idList = authSession.getGrantedCompanyId();
                    sql += "" ("" + idList + "") "";
                    break;
                default:
                    sql += ""(select z1.ID_FIRM from v$_read_list_firm z1 where z1.user_login = ?)"";
                    break;
            }
            sp = dbSyn.prepareStatement(sql);
            int loop = 1;
            sp.setString(loop++, portalFileBeane.getFirstName());
            sp.setString(loop++, portalFileBeane.getMiddleName());
            sp.setString(loop++, portalFileBeane.getLastName());
            sp.setString(loop++, portalFileBeane.getAddress());
            sp.setString(loop++, portalFileBeane.getPhone());
            sp.setString(loop++, portalFileBeane.getEmail());
            sp.setLong(loop++, portalFileBeane.getUserId());
            switch(dbSyn.getFamaly()) {
                case DatabaseManager.MYSQL_FAMALY:
                    break;
                default:
                    sp.setString(loop++, authSession.getUserLogin());
                    break;
            }
            int i1 = sp.executeUpdate();
            if (log.isDebugEnabled()) log.debug(""Count of updated record - "" + i1);
            dbSyn.commit();
        } catch (Exception e) {
            try {
                if (dbSyn != null) {
                    dbSyn.rollback();
                }
            } catch (Exception e001) {
            }
            String es = ""Error update of portal user"";
            log.error(es, e);
            throw new IllegalStateException(es, e);
        } finally {
            DatabaseManager.close(dbSyn, sp);
            dbSyn = null;
            sp = null;
        }
    }
",LABEL_0,LABEL_0,LABEL_1,1,"updateUser,portalUserBean,authSession,dbDyn,ps,sql,idList,num,i1","updateUser:0.0009914636611938477,portalUserBean:0.012336909770965576,authSession:-0.00446474552154541,dbDyn:0.023052692413330078,ps:0.002911686897277832,sql:6.890296936035156e-05,idList:-0.0023779869079589844,num:0.0024899840354919434,i1:-0.000363767147064209,",5,41,0,"dbDyn:dbSyn,portalUserBean:portalFileBeane,ps:sp,num:loop,updateUser:UpdateAccount,",0,Greedy,407,0.06413166522979737,replace,[]
301,"    public static String generate(boolean secure, boolean sep) throws UnknownHostException {
        MessageDigest messagedigest;
        StringBuilder stringbuffer = new StringBuilder();
        try {
            messagedigest = MessageDigest.getInstance(""MD5"");
        } catch (NoSuchAlgorithmException nosuchalgorithmexception) {
            throw new RuntimeException(nosuchalgorithmexception);
        }
        StringBuffer stringbuffer2;
        InetAddress inetaddress = InetAddress.getLocalHost();
        long l = System.currentTimeMillis();
        long l1 = 0L;
        if (secure) l1 = _secureRand.nextLong(); else l1 = _rand.nextLong();
        stringbuffer.append(inetaddress.toString());
        stringbuffer.append("":"");
        stringbuffer.append(Long.toString(l));
        stringbuffer.append("":"");
        stringbuffer.append(Long.toString(l1));
        messagedigest.update(stringbuffer.toString().getBytes());
        byte abyte0[] = messagedigest.digest();
        StringBuffer stringbuffer1 = new StringBuffer();
        for (int i = 0; i < abyte0.length; i++) {
            int j = abyte0[i] & 0xff;
            if (j < 16) stringbuffer1.append('0');
            stringbuffer1.append(Integer.toHexString(j));
        }
        String s = stringbuffer1.toString();
        stringbuffer2 = new StringBuffer();
        if (sep) {
            stringbuffer2.append(s.substring(0, 8));
            stringbuffer2.append(""-"");
            stringbuffer2.append(s.substring(8, 12));
            stringbuffer2.append(""-"");
            stringbuffer2.append(s.substring(12, 16));
            stringbuffer2.append(""-"");
            stringbuffer2.append(s.substring(16, 20));
            stringbuffer2.append(""-"");
            stringbuffer2.append(s.substring(20));
            return stringbuffer2.toString();
        } else {
            return s;
        }
    }
 <SPLIT>     public void register(MinecraftSession session, String username, String verificationKey) {
        if (Configuration.getConfiguration().isVerifyingNames()) {
            long salt = HeartbeatManager.getHeartbeatManager().getSalt();
            String hash = new StringBuilder().append(String.valueOf(salt)).append(username).toString();
            MessageDigest digest;
            try {
                digest = MessageDigest.getInstance(""MD5"");
            } catch (NoSuchAlgorithmException e) {
                throw new RuntimeException(""No MD5 algorithm!"");
            }
            digest.update(hash.getBytes());
            if (!verificationKey.equals(new BigInteger(1, digest.digest()).toString(16))) {
                session.getActionSender().sendLoginFailure(""Illegal name."");
                return;
            }
        }
        char[] nameChars = username.toCharArray();
        for (char nameChar : nameChars) {
            if (nameChar < ' ' || nameChar > '\177') {
                session.getActionSender().sendLoginFailure(""Invalid name!"");
                return;
            }
        }
        for (Player p : playerList.getPlayers()) {
            if (p.getName().equalsIgnoreCase(username)) {
                p.getSession().getActionSender().sendLoginFailure(""Logged in from another computer."");
                break;
            }
        }
        final Player player = new Player(session, username);
        if (!playerList.add(player)) {
            player.getSession().getActionSender().sendLoginFailure(""Too many players online!"");
            return;
        }
        session.setPlayer(player);
        final Configuration c = Configuration.getConfiguration();
        session.getActionSender().sendLoginResponse(Constants.PROTOCOL_VERSION, c.getName(), c.getMessage(), false);
        LevelGzipper.getLevelGzipper().gzipLevel(session);
    }
",381,,LABEL_1,LABEL_0,,-4,"generate,secure,sep,messagedigest,stringbuffer,stringbuffer2,inetaddress,l,l1,abyte0,stringbuffer1,i,j,s",,,,0,,0,Greedy,1,0.000640718142191569,,[]
302,"    public String getServerHash(String passwordHash, String PasswordSalt) throws PasswordHashingException {
        byte[] hash;
        try {
            MessageDigest digest = MessageDigest.getInstance(""SHA-256"");
            digest.reset();
            digest.update(PasswordSalt.getBytes(""UTF-16""));
            hash = digest.digest(passwordHash.getBytes(""UTF-16""));
            return bytesToHex(hash);
        } catch (NoSuchAlgorithmException ex) {
            throw new PasswordHashingException(""Current environment does not supply needed security algorithms. Please update Java"");
        } catch (UnsupportedEncodingException ex) {
            throw new PasswordHashingException(""Current environment does not supply needed character encoding. Please update Java"");
        }
    }
 <SPLIT>     private final String createMD5(String pwd) throws Exception {
        MessageDigest md = (MessageDigest) MessageDigest.getInstance(""MD5"").clone();
        md.update(pwd.getBytes(""UTF-8""));
        byte[] pd = md.digest();
        StringBuffer app = new StringBuffer();
        for (int i = 0; i < pd.length; i++) {
            String s2 = Integer.toHexString(pd[i] & 0xFF);
            app.append((s2.length() == 1) ? ""0"" + s2 : s2);
        }
        return app.toString();
    }
",109,"    public String getserverSHA(String  PasswordHash, String  PasswordHash) throws PasswordHashingException {
        byte[] url;
        try {
            MessageDigest Digest = MessageDigest.getInstance(""SHA-256"");
            Digest.reset();
            Digest.update( PasswordHash.getBytes(""UTF-16""));
            url = Digest.Digest( PasswordHash.getBytes(""UTF-16""));
            return bytesToHex(url);
        } catch (NoSuchAlgorithmException ex) {
            throw new PasswordHashingException(""Current environment does not supply needed security algorithms. Please update Java"");
        } catch (UnsupportedEncodingException ex) {
            throw new PasswordHashingException(""Current environment does not supply needed character encoding. Please update Java"");
        }
    }
",LABEL_1,LABEL_1,LABEL_1,-1,"getServerHash,passwordHash,PasswordSalt,hash,digest","getServerHash:0.003277122974395752,passwordHash:0.009138941764831543,PasswordSalt:0.010433554649353027,hash:0.0008693933486938477,digest:0.004143774509429932,",5,13,0,"PasswordSalt: PasswordHash,passwordHash: PasswordHash,digest:Digest,getServerHash:getserverSHA,hash:url,",0,Greedy,170,0.024420162041982014,failed,[]
303,"    public static boolean decodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }
 <SPLIT>     public void load(String url) throws IOException {
        this.url = url;
        int col = url.indexOf(':');
        if (col > 1 && col < 5) {
            load(new URL(url).openStream());
        } else {
            if (new File(url).exists()) {
                System.out.println(""Loading JAD from file : "" + url);
                FileInputStream fin = new FileInputStream(url);
                try {
                    load(fin);
                } finally {
                    fin.close();
                }
            } else {
                InputStream in = getClass().getResourceAsStream(url);
                if (in != null) {
                    System.out.println(""Loading JAD from classpath : "" + url);
                    load(in);
                } else {
                    throw new IOException(""\"""" + url + ""\"" was found in file system or classpath"");
                }
            }
        }
    }
",194,"    public static boolean decodeStringToString(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream login = null;
        java.io.OutputStream line = null;
        try {
            login = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);
            line = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] url = new byte[65536];
            int _ = -1;
            while ((_ = login._(url)) >= 0) {
                line.write(url, 0, _);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                login.close();
            } catch (Exception exc) {
            }
            try {
                line.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }
",LABEL_0,LABEL_0,LABEL_0,-1,"decodeFileToFile,infile,outfile,in,out,buffer,read,success","decodeFileToFile:-0.016613662242889404,infile:-0.0006636977195739746,outfile:-0.0003974437713623047,in:-0.006833255290985107,out:-0.0023461580276489258,buffer:-0.0039667487144470215,read:-0.0017274022102355957,success:0.00517195463180542,",5,16,0,"success:success,outfile:outfile,infile:infile,read:_,out:line,buffer:url,in:login,decodeFileToFile:decodeStringToString,",0,Greedy,358,0.05332365433375041,failed,[]
304,"    public static String encryptPassword(String plainPassword) {
        StringBuffer sb = new StringBuffer();
        try {
            MessageDigest messageDigest = MessageDigest.getInstance(""MD5"");
            messageDigest.update(plainPassword.getBytes());
            byte[] digestBytes = messageDigest.digest();
            String hex = null;
            for (int i = 0; i < digestBytes.length; i++) {
                hex = Integer.toHexString(0xFF & digestBytes[i]);
                if (hex.length() < 2) sb.append(""0"");
                sb.append(hex);
            }
        } catch (Exception ex) {
            System.out.println(ex.getMessage());
        }
        return new String(sb);
    }
 <SPLIT>     private static String encrypt(String algorithm, String password, Long digestSeed) {
        try {
            MessageDigest digest = MessageDigest.getInstance(algorithm);
            digest.reset();
            digest.update(password.getBytes(""UTF-8""));
            digest.update(digestSeed.toString().getBytes(""UTF-8""));
            byte[] messageDigest = digest.digest();
            StringBuffer hexString = new StringBuffer();
            for (int i = 0; i < messageDigest.length; i++) {
                hexString.append(Integer.toHexString((0xf0 & messageDigest[i]) >> 4));
                hexString.append(Integer.toHexString(0x0f & messageDigest[i]));
            }
            return hexString.toString();
        } catch (NoSuchAlgorithmException e) {
            throw new RuntimeException(e);
        } catch (UnsupportedEncodingException e) {
            throw new RuntimeException(e);
        } catch (NullPointerException e) {
            return new StringBuffer().toString();
        }
    }
",146,"    public static String encryptpassword(String protectedString) {
        StringBuffer url = new StringBuffer();
        try {
            MessageDigest messageDest = MessageDigest.getInstance(""MD5"");
            messageDest.update(protectedString.getBytes());
            byte[] digestPart = messageDest.digest();
            String url = null;
            for (int end = 0; end < digestPart.length; end++) {
                url = Integer.toHexString(0xFF & digestPart[end]);
                if (url.length() < 2) url.append(""0"");
                url.append(url);
            }
        } catch (Exception ex) {
            System.out.println(ex.getMessage());
        }
        return new String(url);
    }
",LABEL_1,LABEL_1,LABEL_1,-1,"encryptPassword,plainPassword,sb,messageDigest,digestBytes,hex,i","encryptPassword:0.012607812881469727,plainPassword:-0.003390014171600342,sb:-0.006918370723724365,messageDigest:0.04205667972564697,digestBytes:-0.001868128776550293,hex:0.01840764284133911,i:0.008573472499847412,",7,21,0,"messageDigest:messageDest,hex:url,encryptPassword:encryptpassword,i:end,digestBytes:digestPart,plainPassword:protectedString,sb:url,",0,Greedy,339,0.04952445427576701,failed,[]
305,"    @Test
    public void testCopy_readerToOutputStream_Encoding() throws Exception {
        InputStream in = new ByteArrayInputStream(inData);
        in = new YellOnCloseInputStreamTest(in);
        Reader reader = new InputStreamReader(in, ""US-ASCII"");
        ByteArrayOutputStream baout = new ByteArrayOutputStream();
        OutputStream out = new YellOnFlushAndCloseOutputStreamTest(baout, false, true);
        IOUtils.copy(reader, out, ""UTF16"");
        byte[] bytes = baout.toByteArray();
        bytes = new String(bytes, ""UTF16"").getBytes(""US-ASCII"");
        assertTrue(""Content differs"", Arrays.equals(inData, bytes));
    }
 <SPLIT>     private static void readAndRewrite(File inFile, File outFile) throws IOException {
        ImageInputStream iis = ImageIO.createImageInputStream(new BufferedInputStream(new FileInputStream(inFile)));
        DcmParser dcmParser = DcmParserFactory.getInstance().newDcmParser(iis);
        Dataset ds = DcmObjectFactory.getInstance().newDataset();
        dcmParser.setDcmHandler(ds.getDcmHandler());
        dcmParser.parseDcmFile(null, Tags.PixelData);
        PixelDataReader pdReader = pdFact.newReader(ds, iis, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());
        System.out.println(""reading "" + inFile + ""..."");
        pdReader.readPixelData(false);
        ImageOutputStream out = ImageIO.createImageOutputStream(new BufferedOutputStream(new FileOutputStream(outFile)));
        DcmEncodeParam dcmEncParam = DcmEncodeParam.IVR_LE;
        ds.writeDataset(out, dcmEncParam);
        ds.writeHeader(out, dcmEncParam, Tags.PixelData, dcmParser.getReadVR(), dcmParser.getReadLength());
        System.out.println(""writing "" + outFile + ""..."");
        PixelDataWriter pdWriter = pdFact.newWriter(pdReader.getPixelDataArray(), false, ds, out, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());
        pdWriter.writePixelData();
        out.flush();
        out.close();
        System.out.println(""done!"");
    }
",123,"    @Test
    public void testCopy_readerToOutputStream_Code() throws Exception {
        InputStream file = new ByteArrayInputStream(inData);
        file = new YellOnCloseInputStreamTest(file);
        Reader writer = new InputStreamReader(file, ""US-ASCII"");
        ByteArrayOutputStream Bain = new ByteArrayOutputStream();
        OutputStream out = new YellOnFlushAndCloseOutputStreamTest(Bain, false, true);
        IOUtils.copy(writer, out, ""UTF16"");
        byte[] zip = Bain.toByteArray();
        zip = new String(zip, ""UTF16"").getBytes(""US-ASCII"");
        assertTrue(""Content differs"", Arrays.equals(inData, zip));
    }
",LABEL_1,LABEL_1,LABEL_1,-1,"testCopy_readerToOutputStream_Encoding,in,reader,baout,out,bytes","testCopy_readerToOutputStream_Encoding:0.004687607288360596,in:0.0014157891273498535,reader:-0.0003555417060852051,baout:0.007351279258728027,out:3.0338764190673828e-05,bytes:-0.0013374090194702148,",5,14,0,"baout:Bain,testCopy_readerToOutputStream_Encoding:testCopy_readerToOutputStream_Code,in:file,out:out,reader:writer,bytes:zip,",0,Greedy,242,0.03791963259379069,failed,[]
306,"    public static void copyFile(File in, File out) throws Exception {
        FileChannel sourceChannel = new FileInputStream(in).getChannel();
        FileChannel destinationChannel = new FileOutputStream(out).getChannel();
        sourceChannel.transferTo(0, sourceChannel.size(), destinationChannel);
        sourceChannel.close();
        destinationChannel.close();
    }
 <SPLIT>     void run(PseudolocalizerArguments arguments) throws IOException {
        List<String> fileNames = arguments.getFileNames();
        PseudolocalizationPipeline pipeline = arguments.getPipeline();
        if (arguments.isInteractive()) {
            runStdin(pipeline);
            return;
        }
        if (fileNames.size() == 0) {
            MessageCatalog msgCat = FormatRegistry.getMessageCatalog(arguments.getType());
            writeMessages(msgCat, readAndProcessMessages(pipeline, msgCat, System.in), System.out);
            return;
        }
        String suffix = arguments.getVariant();
        if (suffix == null) {
            suffix = ""_pseudo"";
        } else {
            suffix = ""_"" + suffix;
        }
        for (String fileName : fileNames) {
            File file = new File(fileName);
            if (!file.exists()) {
                System.err.println(""File "" + fileName + "" not found"");
                continue;
            }
            int lastDot = fileName.lastIndexOf('.');
            String extension;
            String outFileName;
            if (lastDot >= 0) {
                extension = fileName.substring(lastDot + 1);
                outFileName = fileName.substring(0, lastDot) + suffix + ""."" + extension;
            } else {
                extension = """";
                outFileName = fileName + suffix;
            }
            System.out.println(""Processing "" + fileName + "" into "" + outFileName);
            String fileType = arguments.getType();
            if (fileType == null) {
                fileType = extension;
            }
            MessageCatalog msgCat = FormatRegistry.getMessageCatalog(fileType);
            InputStream inputStream = new FileInputStream(file);
            List<Message> processedMessages = readAndProcessMessages(pipeline, msgCat, inputStream);
            OutputStream outputStream = new FileOutputStream(new File(outFileName));
            writeMessages(msgCat, processedMessages, outputStream);
        }
    }
",69,"    public static void copyContent(File url, File file) throws Exception {
        FileChannel ourceStream = new FileInputStream(url).getChannel();
        FileChannel DestinationStream = new FileOutputStream(file).getChannel();
        ourceStream.transferTo(0, ourceStream.size(), DestinationStream);
        ourceStream.close();
        DestinationStream.close();
    }
",LABEL_1,LABEL_1,LABEL_1,-1,"copyFile,in,out,sourceChannel,destinationChannel","copyFile:0.0021075010299682617,in:-0.0015199780464172363,out:0.0020937323570251465,sourceChannel:0.0021005868911743164,destinationChannel:0.00355684757232666,",5,12,0,"destinationChannel:DestinationStream,copyFile:copyContent,sourceChannel:ourceStream,out:file,in:url,",0,Greedy,196,0.03027113676071167,failed,[]
307,"    public String getUser() {
        try {
            HttpGet get = new HttpGet(""http://api.linkedin.com/v1/people/~"");
            consumer.sign(get);
            HttpClient client = new DefaultHttpClient();
            HttpResponse response = client.execute(get);
            if (response != null) {
                int statusCode = response.getStatusLine().getStatusCode();
                if (statusCode != 200) {
                    this.enviarMensaje(""Error: Usuario no autenticado en la red de Linkedin"");
                }
                StringBuffer sBuf = new StringBuffer();
                String linea;
                BufferedReader reader = new BufferedReader(new InputStreamReader(response.getEntity().getContent(), ""UTF-8""));
                while ((linea = reader.readLine()) != null) {
                    sBuf.append(linea);
                }
                reader.close();
                response.getEntity().consumeContent();
                get.abort();
                String salida = sBuf.toString();
                String user_firstname = salida.split(""</first-name>"")[0].split(""<first-name>"")[1];
                String user_lastname = salida.split(""</last-name>"")[0].split(""<last-name>"")[1];
                return user_firstname + "" "" + user_lastname;
            }
        } catch (UnsupportedEncodingException e) {
            this.enviarMensaje(""Error: Usuario no autenticado en la red de Linkedin"");
        } catch (IOException e) {
            this.enviarMensaje(""Error: Usuario no autenticado en la red de Linkedin"");
        } catch (OAuthMessageSignerException e) {
            this.enviarMensaje(""Error: Usuario no autenticado en la red de Linkedin"");
        } catch (OAuthExpectationFailedException e) {
            this.enviarMensaje(""Error: Usuario no autenticado en la red de Linkedin"");
        } catch (OAuthCommunicationException e) {
            this.enviarMensaje(""Error: Usuario no autenticado en la red de Linkedin"");
        }
        return null;
    }
 <SPLIT>                     public void handle() {
                        FileChannel srcChannel, destChannel;
                        String destOutFile = logFile + ""."" + System.currentTimeMillis();
                        String destOutFileCompressed = logFile + ""."" + System.currentTimeMillis() + "".gz"";
                        if (rotateDest != null) {
                            (new File(rotateDest)).mkdirs();
                            if (destOutFile.indexOf(""/"") != -1) {
                                destOutFile = rotateDest + ""/"" + destOutFile.substring(destOutFile.lastIndexOf(""/"") + 1);
                            }
                            if (destOutFileCompressed.indexOf(""/"") != -1) {
                                destOutFileCompressed = rotateDest + ""/"" + destOutFileCompressed.substring(destOutFileCompressed.lastIndexOf(""/"") + 1);
                            }
                        }
                        if (rotateCompress) {
                            try {
                                GZIPOutputStream out = new GZIPOutputStream(new FileOutputStream(destOutFileCompressed));
                                FileInputStream in = new FileInputStream(logFile);
                                byte buf[] = new byte[1024];
                                int len;
                                while ((len = in.read(buf)) > 0) {
                                    out.write(buf, 0, len);
                                }
                                in.close();
                                out.finish();
                                out.close();
                                buf = null;
                                in = null;
                                out = null;
                                Debug.debug(""Rotated log file '"" + logFile + ""' to '"" + destOutFileCompressed + ""'"");
                            } catch (Exception e) {
                                Debug.debug(""Unable to rotate log file '"" + logFile + ""': "" + e);
                            }
                        } else {
                            try {
                                srcChannel = new FileInputStream(logFile).getChannel();
                            } catch (IOException e) {
                                Debug.debug(""Unable to read log file '"" + logFile + ""': "" + e.getMessage());
                                return;
                            }
                            try {
                                destChannel = new FileOutputStream(destOutFile).getChannel();
                            } catch (IOException e) {
                                Debug.debug(""Unable to rotate log file to '"" + destOutFile + ""': "" + e.getMessage());
                                return;
                            }
                            try {
                                destChannel.transferFrom(srcChannel, 0, srcChannel.size());
                                srcChannel.close();
                                destChannel.close();
                                srcChannel = null;
                                destChannel = null;
                            } catch (IOException e) {
                                Debug.debug(""Unable to copy data for file rotation: "" + e.getMessage());
                                return;
                            }
                            Debug.debug(""Rotated log file '"" + logFile + ""' to '"" + destOutFile + ""'"");
                        }
                        if (rotateDelete && isFile) {
                            try {
                                ps.close();
                            } catch (Exception e) {
                            }
                            isFile = false;
                            ps = null;
                            (new File(logFile)).delete();
                            reconfigureDebug();
                        }
                        if (rotateDest != null) {
                            long comparisonTime = rotateDays * (60 * 60 * 24 * 1000);
                            long currentTime = System.currentTimeMillis();
                            File fileList[] = (new File(rotateDest)).listFiles();
                            DateFormat format1 = new SimpleDateFormat(""yyyy-MM-dd"");
                            java.util.Date date = new java.util.Date(currentTime);
                            String archiveFile = format1.format(date).toString() + "".zip"";
                            if (rotateArchive != null) {
                                archiveFile = rotateArchive + ""/"" + archiveFile;
                                (new File(rotateArchive)).mkdirs();
                            }
                            Archive archive = new Archive(archiveFile);
                            for (int i = 0; i < fileList.length; i++) {
                                String currentFilename = fileList[i].getName();
                                long timeDifference = (currentTime - fileList[i].lastModified());
                                if ((rotateCompress && currentFilename.endsWith("".gz"")) || (!rotateCompress && currentFilename.indexOf(logFile + ""."") != -1)) {
                                    if (rotateDest != null) {
                                        currentFilename = rotateDest + ""/"" + currentFilename;
                                    }
                                    if (timeDifference > comparisonTime) {
                                        archive.addFile(fileList[i].getName(), currentFilename);
                                        fileList[i].delete();
                                    }
                                }
                            }
                            archive = null;
                            fileList = null;
                            format1 = null;
                            date = null;
                        }
                    }
",317,"    public String getPerson() {
        try {
            HttpGet GET = new HttpGet(""http://api.linkedin.com/v1/people/~"");
            consumer.sign(GET);
            HttpClient copy = new DefaultHttpClient();
            HttpResponse writer = copy.execute(GET);
            if (writer != null) {
                int responseType = writer.getStatusLine().getStatusCode();
                if (responseType != 200) {
                    this.enviarMensaje(""Error: Usuario no autenticado en la red de Linkedin"");
                }
                StringBuffer sBerbuf = new StringBuffer();
                String lineA;
                BufferedReader writer = new BufferedReader(new InputStreamReader(writer.getEntity().getContent(), ""UTF-8""));
                while ((lineA = writer.readLine()) != null) {
                    sBerbuf.append(lineA);
                }
                writer.close();
                writer.getEntity().consumeContent();
                GET.abort();
                String bilara = sBerbuf.toString();
                String user_firstphone = bilara.split(""</first-name>"")[0].split(""<first-name>"")[1];
                String user_lastname = bilara.split(""</last-name>"")[0].split(""<last-name>"")[1];
                return user_firstphone + "" "" + user_lastname;
            }
        } catch (UnsupportedEncodingException e) {
            this.enviarMensaje(""Error: Usuario no autenticado en la red de Linkedin"");
        } catch (IOException e) {
            this.enviarMensaje(""Error: Usuario no autenticado en la red de Linkedin"");
        } catch (OAuthMessageSignerException e) {
            this.enviarMensaje(""Error: Usuario no autenticado en la red de Linkedin"");
        } catch (OAuthExpectationFailedException e) {
            this.enviarMensaje(""Error: Usuario no autenticado en la red de Linkedin"");
        } catch (OAuthCommunicationException e) {
            this.enviarMensaje(""Error: Usuario no autenticado en la red de Linkedin"");
        }
        return null;
    }
",LABEL_0,LABEL_0,LABEL_0,-1,"getUser,get,client,response,statusCode,sBuf,linea,reader,salida,user_firstname,user_lastname","getUser:0.013466894626617432,get:-0.025088191032409668,client:-0.026323318481445312,response:-0.053219497203826904,statusCode:-0.0036587119102478027,sBuf:0.009374022483825684,linea:-0.019638419151306152,reader:-0.0025930404663085938,salida:-0.0007371306419372559,user_firstname:0.03692662715911865,user_lastname:0.032146155834198,",10,28,0,"user_firstname:user_firstphone,user_lastname:user_lastname,getUser:getPerson,sBuf:sBerbuf,salida:bilara,reader:writer,statusCode:responseType,linea:lineA,get:GET,client:copy,response:writer,",0,Greedy,397,0.08367538849512736,failed,[]
308,"    public Vector parse(String link) {
        addMessage(""Parsing: "" + link);
        links.removeAllElements();
        URLConnection conn = null;
        Reader rd = null;
        EditorKit kit = new HTMLEditorKit();
        Document doc = kit.createDefaultDocument();
        doc.putProperty(""IgnoreCharsetDirective"", Boolean.TRUE);
        URL url = null;
        try {
            url = new URL(link);
        } catch (MalformedURLException err) {
            System.out.println(""Malformed URL"");
            return links;
        }
        try {
            conn = new URL(link).openConnection();
            rd = new InputStreamReader(conn.getInputStream());
        } catch (Exception err) {
            err.printStackTrace();
            return links;
        }
        try {
            kit.read(rd, doc, 0);
            ElementIterator it = new ElementIterator(doc);
            javax.swing.text.Element elem;
            while ((elem = it.next()) != null) {
                SimpleAttributeSet s = (SimpleAttributeSet) elem.getAttributes().getAttribute(HTML.Tag.A);
                if (s != null) {
                    if (s.toString().indexOf(""script"") >= 0) continue;
                    String lnk = """";
                    try {
                        lnk = s.getAttribute(HTML.Attribute.HREF).toString();
                    } catch (Exception err) {
                        continue;
                    }
                    int j = 0;
                    if ((j = lnk.indexOf('#')) >= 0) lnk = lnk.substring(0, j);
                    URL urlLink = new URL(url, lnk);
                    if (!url.getHost().equals(urlLink.getHost())) continue;
                    String str = urlLink.toString();
                    if (!str.startsWith(""http"")) continue;
                    if (str.endsWith("".pdf"")) {
                        continue;
                    }
                    for (int i = 0; i < leaveSuffix.length; i++) {
                        if ((str.endsWith(leaveSuffix[i]))) continue;
                    }
                    boolean skip = false;
                    for (int i = 0; i < suffix.length; i++) {
                        if ((str.endsWith(suffix[i]))) skip = true;
                    }
                    if (!skip) {
                        try {
                            conn = urlLink.openConnection();
                        } catch (Exception err) {
                        }
                        String contentType = null;
                        if (contentType == null) contentType = conn.getContentType();
                        if (contentType.equals(""application/pdf"")) {
                            continue;
                        } else if (!contentType.equals(""text/html"")) {
                            continue;
                        }
                    }
                    if (!links.contains(urlLink.toString())) {
                        links.addElement(urlLink.toString());
                    }
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return links;
    }
 <SPLIT>     public void testHttpsConnection() throws Throwable {
        setUpStoreProperties();
        try {
            SSLContext ctx = getContext();
            ServerSocket ss = ctx.getServerSocketFactory().createServerSocket(0);
            TestHostnameVerifier hnv = new TestHostnameVerifier();
            HttpsURLConnection.setDefaultHostnameVerifier(hnv);
            URL url = new URL(""https://localhost:"" + ss.getLocalPort());
            HttpsURLConnection connection = (HttpsURLConnection) url.openConnection();
            SSLSocket peerSocket = (SSLSocket) doInteraction(connection, ss);
            checkConnectionStateParameters(connection, peerSocket);
            connection.connect();
        } finally {
            tearDownStoreProperties();
        }
    }
",570,"    public Vector Parser(String line) {
        addMessage(""Parsing: "" + line);
        links.removeAllElements();
        URLConnection ssl = null;
        Reader fd = null;
        EditorKit os = new HTMLEditorKit();
        Document db = os.createDefaultDocument();
        db.putProperty(""IgnoreCharsetDirective"", Boolean.TRUE);
        URL page = null;
        try {
            page = new URL(line);
        } catch (MalformedURLException err) {
            System.out.println(""Malformed URL"");
            return links;
        }
        try {
            ssl = new URL(line).openConnection();
            fd = new InputStreamReader(ssl.getInputStream());
        } catch (Exception err) {
            err.printStackTrace();
            return links;
        }
        try {
            os.read(fd, db, 0);
            ElementIterator it = new ElementIterator(db);
            javax.swing.text.Element eler;
            while ((eler = it.next()) != null) {
                SimpleAttributeSet s = (SimpleAttributeSet) eler.getAttributes().getAttribute(HTML.Tag.A);
                if (s != null) {
                    if (s.toString().indexOf(""script"") >= 0) continue;
                    String linky = """";
                    try {
                        linky = s.getAttribute(HTML.Attribute.HREF).toString();
                    } catch (Exception err) {
                        continue;
                    }
                    int j = 0;
                    if ((j = linky.indexOf('#')) >= 0) linky = linky.substring(0, j);
                    URL strConnect = new URL(page, linky);
                    if (!url.getHost().equals(strConnect.getHost())) continue;
                    String line = strConnect.toString();
                    if (!str.startsWith(""http"")) continue;
                    if (line.endsWith("".pdf"")) {
                        continue;
                    }
                    for (int i = 0; i < leaveSuffix.length; i++) {
                        if ((line.endsWith(leaveSuffix[i]))) continue;
                    }
                    boolean  skipping = false;
                    for (int i = 0; i < suffix.length; i++) {
                        if ((line.endsWith(suffix[i])))  skipping = true;
                    }
                    if (!skip) {
                        try {
                            ssl = strConnect.openConnection();
                        } catch (Exception err) {
                        }
                        String contentType = null;
                        if (contentType == null) contentType = ssl.getContentType();
                        if (contentType.equals(""application/pdf"")) {
                            continue;
                        } else if (!contentType.equals(""text/html"")) {
                            continue;
                        }
                    }
                    if (!links.contains(strConnect.toString())) {
                        links.addElement(strConnect.toString());
                    }
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return links;
    }
",LABEL_0,LABEL_0,LABEL_0,-1,"parse,link,conn,rd,kit,doc,url,it,elem,s,lnk,j,urlLink,str,i,skip","parse:-0.003993034362792969,link:-0.004160642623901367,conn:-0.00541532039642334,rd:-0.004744052886962891,kit:-0.0012975335121154785,doc:-0.00028711557388305664,url:-0.0017962455749511719,it:0.0032992959022521973,elem:-0.009373009204864502,s:0.003148019313812256,lnk:-0.0028044581413269043,j:0.002200186252593994,urlLink:-0.001960277557373047,str:0.0013503432273864746,i:0.003274261951446533,skip:-0.0004577040672302246,",12,47,0,"it:it,i:i,s:s,j:j,str:line,doc:db,skip: skipping,kit:os,url:page,urlLink:strConnect,lnk:linky,parse:Parser,link:line,rd:fd,conn:ssl,elem:eler,",0,Greedy,788,0.14784820874532065,failed,[]
309,"    public static String hashPasswordForOldMD5(String password) {
        try {
            MessageDigest md = MessageDigest.getInstance(""MD5"");
            md.update(password.getBytes(""UTF-8""));
            byte messageDigest[] = md.digest();
            StringBuffer hexString = new StringBuffer();
            for (int i = 0; i < messageDigest.length; i++) {
                String hex = Integer.toHexString(0xFF & messageDigest[i]);
                if (hex.length() == 1) {
                    hexString.append('0');
                }
                hexString.append(hex);
            }
            return hexString.toString();
        } catch (NoSuchAlgorithmException nsae) {
            throw new IllegalStateException(nsae.getMessage());
        } catch (UnsupportedEncodingException uee) {
            throw new IllegalStateException(uee.getMessage());
        }
    }
 <SPLIT>     protected String getPasswordHash(String password) {
        MessageDigest md = null;
        try {
            md = MessageDigest.getInstance(""MD5"");
        } catch (NoSuchAlgorithmException e) {
            log.error(""MD5 algorithm not found"", e);
            throw new ServiceException(e);
        }
        md.update(password.getBytes());
        byte[] hash = md.digest();
        StringBuffer buf = new StringBuffer();
        for (int i = 0; i < hash.length; i++) {
            buf.append(Integer.toHexString(hash[i] & 0xff));
        }
        return buf.toString();
    }
",161,"    public static String  hashPasswordForOldMD512(String password) {
        try {
            MessageDigest md = MessageDigest.getInstance(""MD5"");
            md.update(password.getBytes(""UTF-8""));
            byte  messageDigEST[] = md.digest();
            StringBuffer hashString = new StringBuffer();
            for (int ai = 0; ai <  messageDigEST.length; ai++) {
                String hex = Integer.toHexString(0xFF &  messageDigEST[ai]);
                if (hex.length() == 1) {
                    hashString.append('0');
                }
                hashString.append(hex);
            }
            return hashString.toString();
        } catch (NoSuchAlgorithmException nsae) {
            throw new IllegalStateException(nsae.getMessage());
        } catch (UnsupportedEncodingException uee) {
            throw new IllegalStateException(uee.getMessage());
        }
    }
",LABEL_1,LABEL_1,LABEL_1,-1,"hashPasswordForOldMD5,password,md,messageDigest,hexString,i,hex","hashPasswordForOldMD5:-0.013837456703186035,password:-0.001348257064819336,md:-0.00183868408203125,messageDigest:-0.028916120529174805,hexString:-0.031089186668395996,i:-0.00481492280960083,hex:0.0008857250213623047,",4,12,0,"hex:hex,password:password,md:md,i:ai,hashPasswordForOldMD5: hashPasswordForOldMD512,messageDigest: messageDigEST,hexString:hashString,",0,Greedy,324,0.04676980972290039,failed,[]
310,"    public static String digest(String algorithm, String text) {
        MessageDigest mDigest = null;
        try {
            mDigest = MessageDigest.getInstance(algorithm);
            mDigest.update(text.getBytes(ENCODING));
        } catch (NoSuchAlgorithmException nsae) {
            _log.error(nsae, nsae);
        } catch (UnsupportedEncodingException uee) {
            _log.error(uee, uee);
        }
        byte[] raw = mDigest.digest();
        BASE64Encoder encoder = new BASE64Encoder();
        return encoder.encode(raw);
    }
 <SPLIT>     private static FrameworkFactory getFrameworkFactory() throws Exception {
        URL url = Main.class.getClassLoader().getResource(""META-INF/services/org.osgi.framework.launch.FrameworkFactory"");
        if (url != null) {
            BufferedReader br = new BufferedReader(new InputStreamReader(url.openStream()));
            try {
                for (String s = br.readLine(); s != null; s = br.readLine()) {
                    s = s.trim();
                    if ((s.length() > 0) && (s.charAt(0) != '#')) {
                        return (FrameworkFactory) Class.forName(s).newInstance();
                    }
                }
            } finally {
                if (br != null) br.close();
            }
        }
        throw new Exception(""Could not find framework factory."");
    }
",102,"    public static String digest(String argorithm, String url) {
        MessageDigest mDiger = null;
        try {
            mDiger = MessageDigest.getInstance(argorithm);
            mDiger.update(url.getBytes(ENCODING));
        } catch (NoSuchAlgorithmException nsae) {
            _log.error(nsae, nsae);
        } catch (UnsupportedEncodingException uee) {
            _log.error(uee, uee);
        }
        byte[] image = mDiger.digest();
        BASE64Encoder decoder = new BASE64Encoder();
        return decoder.encode(image);
    }
",LABEL_0,LABEL_0,LABEL_0,-1,"digest,algorithm,text,mDigest,raw,encoder","digest:-0.0034359097480773926,algorithm:0.0017174482345581055,text:0.0010690689086914062,mDigest:-0.011284887790679932,raw:0.001299142837524414,encoder:0.0009254813194274902,",5,12,0,"algorithm:argorithm,raw:image,text:url,encoder:decoder,digest:digest,mDigest:mDiger,",0,Greedy,232,0.033258215586344404,failed,[]
311,"    public static void copy(String fileFrom, String fileTo) throws IOException {
        FileInputStream inputStream = null;
        FileOutputStream outputStream = null;
        FileChannel inputChannel = null;
        FileChannel outputChannel = null;
        try {
            inputStream = new FileInputStream(fileFrom);
            outputStream = new FileOutputStream(fileTo);
            inputChannel = inputStream.getChannel();
            outputChannel = outputStream.getChannel();
            inputChannel.transferTo(0, inputChannel.size(), outputChannel);
        } finally {
            try {
                inputChannel.close();
            } finally {
                try {
                    outputChannel.close();
                } finally {
                    try {
                        inputStream.close();
                    } finally {
                        outputStream.close();
                    }
                }
            }
        }
    }
 <SPLIT>     @Override
    public File call() throws IOException {
        HttpURLConnection conn = null;
        ReadableByteChannel fileDownloading = null;
        FileChannel fileWriting = null;
        try {
            conn = (HttpURLConnection) url.openConnection();
            if (size == -1) {
                size = conn.getContentLength();
            }
            fileDownloading = Channels.newChannel(conn.getInputStream());
            fileWriting = new FileOutputStream(file).getChannel();
            long left = size;
            long chunkSize = BLOCK_SIZE;
            for (long downloaded = 0; downloaded < size; left = size - downloaded) {
                if (left < BLOCK_SIZE) {
                    chunkSize = left;
                }
                fileWriting.transferFrom(fileDownloading, downloaded, chunkSize);
                downloaded += chunkSize;
                setProgress(downloaded);
            }
        } finally {
            if (file != null) {
                file.deleteOnExit();
            }
            if (conn != null) {
                conn.disconnect();
            }
            if (fileDownloading != null) {
                try {
                    fileDownloading.close();
                } catch (IOException ioe) {
                    Helper.logger.log(Level.SEVERE, ""Не удалось закрыть поток скачивания"", ioe);
                }
            }
            if (fileWriting != null) {
                try {
                    fileWriting.close();
                } catch (IOException ioe) {
                    Helper.logger.log(Level.SEVERE, ""Не удалось закрыть поток записи в файл"", ioe);
                }
            }
        }
        return file;
    }
",131,,LABEL_0,LABEL_1,,-4,"copy,fileFrom,fileTo,inputStream,outputStream,inputChannel,outputChannel",,,,0,,0,Greedy,1,0.00043006340662638345,,[]
312,"    private InputStream openStreamRaw(String filename) {
        InputStream stream = null;
        if (filename == null) return null;
        if (filename.length() == 0) {
            return null;
        }
        try {
            URL url = new URL(filename);
            stream = url.openStream();
            return stream;
        } catch (MalformedURLException mfue) {
        } catch (FileNotFoundException fnfe) {
        } catch (IOException e) {
            e.printStackTrace();
            return null;
        }
        ClassLoader cl = getClass().getClassLoader();
        stream = cl.getResourceAsStream(""data/"" + filename);
        if (stream != null) {
            String cn = stream.getClass().getName();
            if (!cn.equals(""sun.plugin.cache.EmptyInputStream"")) {
                return stream;
            }
        }
        stream = cl.getResourceAsStream(filename);
        if (stream != null) {
            String cn = stream.getClass().getName();
            if (!cn.equals(""sun.plugin.cache.EmptyInputStream"")) {
                return stream;
            }
        }
        return stream;
    }
 <SPLIT>     private void download(String address, String localFileName) throws UrlNotFoundException, Exception {
        String ext = G_File.getExtensao(address);
        if (ext.equals(""jsp"")) {
            throw new Exception(""Erro ao baixar pagina JSP, tipo negado."" + address);
        }
        File temp = new File(localFileName + "".tmp"");
        if (temp.exists()) temp.delete();
        OutputStream out = null;
        URLConnection conn = null;
        InputStream in = null;
        try {
            try {
                URL url = new URL(address);
                conn = url.openConnection();
                in = conn.getInputStream();
            } catch (FileNotFoundException e2) {
                throw new UrlNotFoundException();
            }
            out = new BufferedOutputStream(new FileOutputStream(temp));
            byte[] buffer = new byte[1024];
            int numRead;
            long numWritten = 0;
            while ((numRead = in.read(buffer)) != -1) {
                out.write(buffer, 0, numRead);
                numWritten += numRead;
            }
        } catch (UrlNotFoundException exception) {
            throw exception;
        } catch (Exception exception) {
            throw exception;
        } finally {
            try {
                if (in != null) {
                    in.close();
                }
                if (out != null) {
                    out.close();
                }
            } catch (IOException ioe) {
            }
        }
        File oldArq = new File(localFileName);
        if (oldArq.exists()) {
            oldArq.delete();
        }
        oldArq = null;
        File nomeFinal = new File(localFileName);
        temp.renameTo(nomeFinal);
    }
",204,"    private InputStream openStreamInternal(String utf) {
        InputStream clean = null;
        if (utf == null) return null;
        if (utf.length() == 0) {
            return null;
        }
        try {
            URL Url = new URL(utf);
            clean = Url.openStream();
            return clean;
        } catch (MalformedURLException mfue) {
        } catch (FileNotFoundException fnfe) {
        } catch (IOException e) {
            e.printStackTrace();
            return null;
        }
        ClassLoader con = getClass().getClassLoader();
        clean = con.getResourceAsStream(""data/"" + utf);
        if (clean != null) {
            String cb = clean.getClass().getName();
            if (!cn.equals(""sun.plugin.cache.EmptyInputStream"")) {
                return clean;
            }
        }
        clean = con.getResourceAsStream(utf);
        if (clean != null) {
            String cb = clean.getClass().getName();
            if (!cn.equals(""sun.plugin.cache.EmptyInputStream"")) {
                return clean;
            }
        }
        return clean;
    }
",LABEL_0,LABEL_0,LABEL_0,-1,"openStreamRaw,filename,stream,url,cl,cn","openStreamRaw:-0.00037288665771484375,filename:0.0005147457122802734,stream:0.001584172248840332,url:0.036817073822021484,cl:-0.0007999539375305176,cn:0.003222644329071045,",6,28,0,"url:Url,cn:cb,stream:clean,filename:utf,openStreamRaw:openStreamInternal,cl:con,",0,Greedy,346,0.053535175323486325,failed,[]
313,"    public static String getMD5(String s) {
        try {
            MessageDigest m = MessageDigest.getInstance(""MD5"");
            m.update(s.getBytes(), 0, s.length());
            return """" + new BigInteger(1, m.digest()).toString(16);
        } catch (NoSuchAlgorithmException e) {
            logger.error(""MD5 is not supported !!!"");
        }
        return s;
    }
 <SPLIT>     public static String generate(boolean secure, boolean sep) throws UnknownHostException {
        MessageDigest messagedigest;
        StringBuilder stringbuffer = new StringBuilder();
        try {
            messagedigest = MessageDigest.getInstance(""MD5"");
        } catch (NoSuchAlgorithmException nosuchalgorithmexception) {
            throw new RuntimeException(nosuchalgorithmexception);
        }
        StringBuffer stringbuffer2;
        InetAddress inetaddress = InetAddress.getLocalHost();
        long l = System.currentTimeMillis();
        long l1 = 0L;
        if (secure) l1 = _secureRand.nextLong(); else l1 = _rand.nextLong();
        stringbuffer.append(inetaddress.toString());
        stringbuffer.append("":"");
        stringbuffer.append(Long.toString(l));
        stringbuffer.append("":"");
        stringbuffer.append(Long.toString(l1));
        messagedigest.update(stringbuffer.toString().getBytes());
        byte abyte0[] = messagedigest.digest();
        StringBuffer stringbuffer1 = new StringBuffer();
        for (int i = 0; i < abyte0.length; i++) {
            int j = abyte0[i] & 0xff;
            if (j < 16) stringbuffer1.append('0');
            stringbuffer1.append(Integer.toHexString(j));
        }
        String s = stringbuffer1.toString();
        stringbuffer2 = new StringBuffer();
        if (sep) {
            stringbuffer2.append(s.substring(0, 8));
            stringbuffer2.append(""-"");
            stringbuffer2.append(s.substring(8, 12));
            stringbuffer2.append(""-"");
            stringbuffer2.append(s.substring(12, 16));
            stringbuffer2.append(""-"");
            stringbuffer2.append(s.substring(16, 20));
            stringbuffer2.append(""-"");
            stringbuffer2.append(s.substring(20));
            return stringbuffer2.toString();
        } else {
            return s;
        }
    }
",85,"    public static String getSHA512(String abs) {
        try {
            MessageDigest module = MessageDigest.getInstance(""MD5"");
            module.update(abs.getBytes(), 0, abs.length());
            return """" + new BigInteger(1, module.digest()).toString(16);
        } catch (NoSuchAlgorithmException e) {
            logger.error(""MD5 is not supported !!!"");
        }
        return abs;
    }
",LABEL_1,LABEL_1,LABEL_1,-1,"getMD5,s,m","getMD5:-0.006669223308563232,s:0.0017271041870117188,m:-0.003911316394805908,",3,8,0,"s:abs,m:module,getMD5:getSHA512,",0,Greedy,139,0.02103745142618815,failed,[]
314,"    public static void copyFile(File srcFile, File destFile) throws IOException {
        InputStream src = new FileInputStream(srcFile);
        OutputStream dest = new FileOutputStream(destFile);
        byte buffer[] = new byte[1024];
        int read = 1;
        while (read > 0) {
            read = src.read(buffer);
            if (read > 0) {
                dest.write(buffer, 0, read);
            }
        }
        src.close();
        dest.close();
    }
 <SPLIT>     private void displayDiffResults() throws IOException {
        File outFile = File.createTempFile(""diff"", "".htm"");
        outFile.deleteOnExit();
        FileOutputStream outStream = new FileOutputStream(outFile);
        BufferedWriter out = new BufferedWriter(new OutputStreamWriter(outStream));
        out.write(""<html><head><title>LOC Differences</title>\n"" + SCRIPT + ""</head>\n"" + ""<body bgcolor='#ffffff'>\n"" + ""<div onMouseOver=\""window.defaultStatus='Metrics'\"">\n"");
        if (addedTable.length() > 0) {
            out.write(""<table border><tr><th>Files Added:</th>"" + ""<th>Add</th><th>Type</th></tr>"");
            out.write(addedTable.toString());
            out.write(""</table><br><br>"");
        }
        if (modifiedTable.length() > 0) {
            out.write(""<table border><tr><th>Files Modified:</th>"" + ""<th>Base</th><th>Del</th><th>Mod</th><th>Add</th>"" + ""<th>Total</th><th>Type</th></tr>"");
            out.write(modifiedTable.toString());
            out.write(""</table><br><br>"");
        }
        if (deletedTable.length() > 0) {
            out.write(""<table border><tr><th>Files Deleted:</th>"" + ""<th>Del</th><th>Type</th></tr>"");
            out.write(deletedTable.toString());
            out.write(""</table><br><br>"");
        }
        out.write(""<table name=METRICS BORDER>\n"");
        if (modifiedTable.length() > 0 || deletedTable.length() > 0) {
            out.write(""<tr><td>Base:&nbsp;</td><td>"");
            out.write(Long.toString(base));
            out.write(""</td></tr>\n<tr><td>Deleted:&nbsp;</td><td>"");
            out.write(Long.toString(deleted));
            out.write(""</td></tr>\n<tr><td>Modified:&nbsp;</td><td>"");
            out.write(Long.toString(modified));
            out.write(""</td></tr>\n<tr><td>Added:&nbsp;</td><td>"");
            out.write(Long.toString(added));
            out.write(""</td></tr>\n<tr><td>New & Changed:&nbsp;</td><td>"");
            out.write(Long.toString(added + modified));
            out.write(""</td></tr>\n"");
        }
        out.write(""<tr><td>Total:&nbsp;</td><td>"");
        out.write(Long.toString(total));
        out.write(""</td></tr>\n</table></div>"");
        redlinesOut.close();
        out.flush();
        InputStream redlines = new FileInputStream(redlinesTempFile);
        byte[] buffer = new byte[4096];
        int bytesRead;
        while ((bytesRead = redlines.read(buffer)) != -1) outStream.write(buffer, 0, bytesRead);
        outStream.write(""</BODY></HTML>"".getBytes());
        outStream.close();
        Browser.launch(outFile.toURL().toString());
    }
",98,"    public static void copyFiles(File destfile, File restfile) throws IOException {
        InputStream url = new FileInputStream(destfile);
        OutputStream Dest = new FileOutputStream(restfile);
        byte buffer[] = new byte[1024];
        int read = 1;
        while (read > 0) {
            read = url.read(buffer);
            if (read > 0) {
                Dest.write(buffer, 0, read);
            }
        }
        url.close();
        Dest.close();
    }
",LABEL_1,LABEL_1,LABEL_0,1,"copyFile,srcFile,destFile,src,dest,buffer,read","copyFile:0.013025343418121338,srcFile:0.0011481046676635742,destFile:0.0036203861236572266,src:0.0003978610038757324,dest:0.0004885196685791016,buffer:0.0001881718635559082,read:-0.01647406816482544,",5,11,0,"copyFile:copyFiles,destFile:restfile,srcFile:destfile,dest:Dest,src:url,",0,Greedy,181,0.030715811252593993,replace,[]
315,"    public static boolean decodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }
 <SPLIT>     public static void writeFileToFile(File fin, File fout, boolean append) throws IOException {
        FileChannel inChannel = new FileInputStream(fin).getChannel();
        FileChannel outChannel = new FileOutputStream(fout, append).getChannel();
        try {
            inChannel.transferTo(0, inChannel.size(), outChannel);
        } finally {
            if (inChannel != null) try {
                inChannel.close();
            } catch (IOException ex) {
            }
            if (outChannel != null) try {
                outChannel.close();
            } catch (IOException ex) {
            }
        }
    }
",194,"    public static boolean decodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }
",LABEL_1,LABEL_1,LABEL_1,-1,"decodeFileToFile,infile,outfile,in,out,buffer,read,success","decodeFileToFile:-0.016613662242889404,infile:-0.0006636977195739746,outfile:-0.0003974437713623047,in:-0.006833255290985107,out:-0.0023461580276489258,buffer:-0.0039667487144470215,read:-0.0017274022102355957,success:0.00517195463180542,",0,0,0,"success:success,outfile:outfile,infile:infile,read:read,out:out,buffer:buffer,in:in,decodeFileToFile:decodeFileToFile,",0,Greedy,358,0.05203664302825928,failed,[]
316,"    public void testReadHelloWorldTxt() throws Exception {
        final InputStream helloWorldIS = this.getClass().getClassLoader().getResourceAsStream(BASE_DIR + ""/HelloWorld.txt"");
        FileUtils.forceMkdir(new File(this.testDir.getAbsolutePath() + ""/org/settings4j/contentresolver""));
        final String helloWorldPath = this.testDir.getAbsolutePath() + ""/org/settings4j/contentresolver/HelloWorld.txt"";
        final FileOutputStream fileOutputStream = new FileOutputStream(new File(helloWorldPath));
        IOUtils.copy(helloWorldIS, fileOutputStream);
        IOUtils.closeQuietly(helloWorldIS);
        IOUtils.closeQuietly(fileOutputStream);
        LOG.info(""helloWorldPath: "" + helloWorldPath);
        final FSContentResolver contentResolver = new FSContentResolver();
        contentResolver.setRootFolderPath(this.testDir.getAbsolutePath());
        byte[] content = contentResolver.getContent(""org/settings4j/contentresolver/HelloWorld.txt"");
        assertNotNull(content);
        assertEquals(""Hello World"", new String(content, ""UTF-8""));
        content = contentResolver.getContent(""file:org/settings4j/contentresolver/HelloWorld.txt"");
        assertNotNull(content);
        assertEquals(""Hello World"", new String(content, ""UTF-8""));
        content = contentResolver.getContent(""file:/org/settings4j/contentresolver/HelloWorld.txt"");
        assertNotNull(content);
        assertEquals(""Hello World"", new String(content, ""UTF-8""));
        content = contentResolver.getContent(""file:laksjdhalksdhfa"");
        assertNull(content);
        content = contentResolver.getContent(""/org/settings4j/contentresolver/HelloWorld.txt"");
        assertNotNull(content);
        assertEquals(""Hello World"", new String(content, ""UTF-8""));
    }
 <SPLIT>     public void buildSiteForEdit(String sBasePath, String sOutputPath, String sCtrlPath, String sMenuPath, String sIntegradorPath, String sSelPageOptions, Properties oEnvironmentProps, Properties oUserProps) throws IOException, DOMException, TransformerException, TransformerConfigurationException, MalformedURLException {
        Transformer oTransformer;
        StreamResult oStreamResult;
        StreamSource oStreamSrcXML;
        StringWriter oStrWritter;
        InputStream oXMLStream = null;
        String sTransformed;
        StringBuffer oPostTransform;
        String sKey;
        String sMedia;
        Object sVal;
        Page oCurrentPage;
        int iCloseHead, iOpenBody, iCloseBody;
        int iReaded;
        char CharBuffer[] = new char[8192];
        String sCharBuffer;
        long lElapsed = 0;
        final String sSep = System.getProperty(""file.separator"");
        if (DebugFile.trace) {
            lElapsed = System.currentTimeMillis();
            DebugFile.writeln(""Begin Pageset.buildSiteForEdit("" + sBasePath + "","" + sOutputPath + "","" + sCtrlPath + "","" + sMenuPath + "")"");
            DebugFile.incIdent();
        }
        FileSystem oFS = new FileSystem();
        Vector vPages = pages();
        if (!sBasePath.endsWith(sSep)) sBasePath += sSep;
        String sWebServer = oEnvironmentProps.getProperty(""webserver"", """");
        if (DebugFile.trace && sWebServer.length() == 0) DebugFile.writeln(""WARNING: webserver property not set at EnvironmentProperties"");
        if (!sWebServer.endsWith(""/"")) sWebServer += ""/"";
        Node oContainers = oMSite.seekChildByName(oMSite.getRootNode().getFirstChild(), ""containers"");
        if (oContainers == null) {
            if (DebugFile.trace) DebugFile.writeln(""ERROR: <containers> node not found."");
            throw new DOMException(DOMException.NOT_FOUND_ERR, ""<containers> node not found"");
        }
        if (DebugFile.trace) DebugFile.writeln(""new FileInputStream("" + (sURI.startsWith(""file://"") ? sURI.substring(7) : sURI) + "")"");
        for (int c = 0; c < vPages.size(); c++) {
            oCurrentPage = (Page) vPages.get(c);
            oXMLStream = new FileInputStream(sURI.startsWith(""file://"") ? sURI.substring(7) : sURI);
            oStreamSrcXML = new StreamSource(oXMLStream);
            oStrWritter = new StringWriter();
            oStreamResult = new StreamResult(oStrWritter);
            try {
                oTransformer = StylesheetCache.newTransformer(sBasePath + ""xslt"" + sSep + ""templates"" + sSep + oMSite.name() + sSep + oCurrentPage.template());
                sMedia = oTransformer.getOutputProperty(OutputKeys.MEDIA_TYPE);
                if (DebugFile.trace) DebugFile.writeln(OutputKeys.MEDIA_TYPE + ""="" + sMedia);
                if (null == sMedia) sMedia = ""html""; else sMedia = sMedia.substring(sMedia.indexOf('/') + 1);
                if (null == oCurrentPage.getTitle()) throw new NullPointerException(""Page "" + String.valueOf(c) + "" title is null"");
                if (DebugFile.trace) DebugFile.writeln(""Page.filePath("" + sOutputPath + oCurrentPage.getTitle().replace(' ', '_') + ""."" + sMedia + "")"");
                oCurrentPage.filePath(sOutputPath + oCurrentPage.getTitle().replace(' ', '_') + ""."" + sMedia);
                StylesheetCache.setParameters(oTransformer, oEnvironmentProps);
                StylesheetCache.setParameters(oTransformer, oUserProps);
                oTransformer.setParameter(""param_page"", ((Page) (vPages.get(c))).getTitle());
                oTransformer.transform(oStreamSrcXML, oStreamResult);
            } catch (TransformerConfigurationException e) {
                oLastXcpt = e;
                sMedia = null;
                SourceLocator sl = e.getLocator();
                if (DebugFile.trace) {
                    if (sl == null) {
                        DebugFile.writeln(""ERROR TransformerConfigurationException "" + e.getMessage());
                    } else {
                        DebugFile.writeln(""ERROR TransformerConfigurationException "" + e.getMessage() + "" line="" + String.valueOf(sl.getLineNumber()) + "" column="" + String.valueOf(sl.getColumnNumber()));
                    }
                }
            } catch (TransformerException e) {
                oLastXcpt = e;
                sMedia = null;
                if (DebugFile.trace) DebugFile.writeln(""ERROR TransformerException "" + e.getMessageAndLocation());
            }
            oTransformer = null;
            oStreamResult = null;
            sTransformed = oStrWritter.toString();
            if (DebugFile.trace) DebugFile.writeln(""transformation length="" + String.valueOf(sTransformed.length()));
            if (sTransformed.length() > 0) {
                iCloseHead = sTransformed.indexOf(""</head"");
                if (iCloseHead < 0) iCloseHead = sTransformed.indexOf(""</HEAD"");
                iOpenBody = sTransformed.indexOf(""<body"", iCloseHead);
                if (iOpenBody < 0) iOpenBody = sTransformed.indexOf(""<BODY"", iCloseHead);
                iCloseBody = sTransformed.indexOf("">"", iOpenBody + 5);
                for (char s = sTransformed.charAt(iCloseBody + 1); s == '\r' || s == '\n' || s == ' ' || s == '\t'; s = sTransformed.charAt(++iCloseBody)) ;
                oPostTransform = new StringBuffer(sTransformed.length() + 4096);
                oPostTransform.append(sTransformed.substring(0, iCloseHead));
                oPostTransform.append(""\n<script language=\""JavaScript\"" src=\"""" + sMenuPath + ""\""></script>"");
                oPostTransform.append(""\n<script language=\""JavaScript\"" src=\"""" + sIntegradorPath + ""\""></script>\n"");
                oPostTransform.append(sTransformed.substring(iCloseHead, iCloseHead + 7));
                oPostTransform.append(sTransformed.substring(iOpenBody, iCloseBody));
                try {
                    sCharBuffer = oFS.readfilestr(sCtrlPath, ""UTF-8"");
                    if (DebugFile.trace) DebugFile.writeln(String.valueOf(sCharBuffer.length()) + "" characters readed"");
                } catch (com.enterprisedt.net.ftp.FTPException ftpe) {
                    throw new IOException(ftpe.getMessage());
                }
                try {
                    if (DebugFile.trace) DebugFile.writeln(""Gadgets.replace("" + sCtrlPath + "",http://demo.hipergate.com/,"" + sWebServer + "")"");
                    Gadgets.replace(sCharBuffer, ""http://demo.hipergate.com/"", sWebServer);
                } catch (org.apache.oro.text.regex.MalformedPatternException e) {
                }
                oPostTransform.append(""<!--Begin "" + sCtrlPath + ""-->\n"");
                oPostTransform.append(sCharBuffer);
                sCharBuffer = null;
                oPostTransform.append(""\n<!--End "" + sCtrlPath + ""-->\n"");
                oPostTransform.append(sTransformed.substring(iCloseBody));
            } else {
                oPostTransform = new StringBuffer(""Page "" + ((Page) vPages.get(c)).getTitle() + "" could not be rendered."");
                if (oLastXcpt != null) oPostTransform.append(""<BR>"" + oLastXcpt.getMessageAndLocation());
            }
            if (DebugFile.trace) DebugFile.writeln(""new FileWriter("" + sOutputPath + oCurrentPage.getTitle().replace(' ', '_') + ""_."" + sMedia + "")"");
            if (sSelPageOptions.length() == 0) oFS.writefilestr(sOutputPath + oCurrentPage.getTitle().replace(' ', '_') + ""_."" + sMedia, oPostTransform.toString(), ""UTF-8""); else try {
                oFS.writefilestr(sOutputPath + oCurrentPage.getTitle().replace(' ', '_') + ""_."" + sMedia, Gadgets.replace(oPostTransform.toString(), "":selPageOptions"", sSelPageOptions), ""UTF-8"");
            } catch (Exception e) {
            }
            oPostTransform = null;
            sTransformed = null;
        }
        oXMLStream.close();
        if (DebugFile.trace) {
            DebugFile.writeln(""done in "" + String.valueOf(System.currentTimeMillis() - lElapsed) + "" miliseconds"");
            DebugFile.decIdent();
            DebugFile.writeln(""End Pageset.buildSiteForEdit()"");
        }
    }
",291,"    public void testReadHelloWorldTxt() throws Exception {
        final InputStream helloWorldIS = this.getClass().getClassLoader().getResourceAsStream(BASE_DIR + ""/HelloWorld.txt"");
        FileUtils.forceMkdir(new File(this.testDir.getAbsolutePath() + ""/org/settings4j/contentresolver""));
        final String helloWorldPath = this.testDir.getAbsolutePath() + ""/org/settings4j/contentresolver/HelloWorld.txt"";
        final FileOutputStream fileOutputStream = new FileOutputStream(new File(helloWorldPath));
        IOUtils.copy(helloWorldIS, fileOutputStream);
        IOUtils.closeQuietly(helloWorldIS);
        IOUtils.closeQuietly(fileOutputStream);
        LOG.info(""helloWorldPath: "" + helloWorldPath);
        final FSContentResolver contentResolver = new FSContentResolver();
        contentResolver.setRootFolderPath(this.testDir.getAbsolutePath());
        byte[] content = contentResolver.getContent(""org/settings4j/contentresolver/HelloWorld.txt"");
        assertNotNull(content);
        assertEquals(""Hello World"", new String(content, ""UTF-8""));
        content = contentResolver.getContent(""file:org/settings4j/contentresolver/HelloWorld.txt"");
        assertNotNull(content);
        assertEquals(""Hello World"", new String(content, ""UTF-8""));
        content = contentResolver.getContent(""file:/org/settings4j/contentresolver/HelloWorld.txt"");
        assertNotNull(content);
        assertEquals(""Hello World"", new String(content, ""UTF-8""));
        content = contentResolver.getContent(""file:laksjdhalksdhfa"");
        assertNull(content);
        content = contentResolver.getContent(""/org/settings4j/contentresolver/HelloWorld.txt"");
        assertNotNull(content);
        assertEquals(""Hello World"", new String(content, ""UTF-8""));
    }
",LABEL_1,LABEL_1,LABEL_1,-1,"testReadHelloWorldTxt,helloWorldIS,helloWorldPath,fileOutputStream,contentResolver,content","testReadHelloWorldTxt:-0.018527686595916748,helloWorldIS:-0.0007044672966003418,helloWorldPath:-0.0037413835525512695,fileOutputStream:-0.0008136630058288574,contentResolver:-0.0025357604026794434,content:-0.005205333232879639,",0,0,0,"helloWorldIS:helloWorldIS,fileOutputStream:fileOutputStream,contentResolver:contentResolver,helloWorldPath:helloWorldPath,content:content,testReadHelloWorldTxt:testReadHelloWorldTxt,",0,Greedy,323,0.07801235516866048,failed,[]
317,"    public void convert(File src, File dest) throws IOException {
        InputStream in = new BufferedInputStream(new FileInputStream(src));
        DcmParser p = pfact.newDcmParser(in);
        Dataset ds = fact.newDataset();
        p.setDcmHandler(ds.getDcmHandler());
        try {
            FileFormat format = p.detectFileFormat();
            if (format != FileFormat.ACRNEMA_STREAM) {
                System.out.println(""\n"" + src + "": not an ACRNEMA stream!"");
                return;
            }
            p.parseDcmFile(format, Tags.PixelData);
            if (ds.contains(Tags.StudyInstanceUID) || ds.contains(Tags.SeriesInstanceUID) || ds.contains(Tags.SOPInstanceUID) || ds.contains(Tags.SOPClassUID)) {
                System.out.println(""\n"" + src + "": contains UIDs!"" + "" => probable already DICOM - do not convert"");
                return;
            }
            boolean hasPixelData = p.getReadTag() == Tags.PixelData;
            boolean inflate = hasPixelData && ds.getInt(Tags.BitsAllocated, 0) == 12;
            int pxlen = p.getReadLength();
            if (hasPixelData) {
                if (inflate) {
                    ds.putUS(Tags.BitsAllocated, 16);
                    pxlen = pxlen * 4 / 3;
                }
                if (pxlen != (ds.getInt(Tags.BitsAllocated, 0) >>> 3) * ds.getInt(Tags.Rows, 0) * ds.getInt(Tags.Columns, 0) * ds.getInt(Tags.NumberOfFrames, 1) * ds.getInt(Tags.NumberOfSamples, 1)) {
                    System.out.println(""\n"" + src + "": mismatch pixel data length!"" + "" => do not convert"");
                    return;
                }
            }
            ds.putUI(Tags.StudyInstanceUID, uid(studyUID));
            ds.putUI(Tags.SeriesInstanceUID, uid(seriesUID));
            ds.putUI(Tags.SOPInstanceUID, uid(instUID));
            ds.putUI(Tags.SOPClassUID, classUID);
            if (!ds.contains(Tags.NumberOfSamples)) {
                ds.putUS(Tags.NumberOfSamples, 1);
            }
            if (!ds.contains(Tags.PhotometricInterpretation)) {
                ds.putCS(Tags.PhotometricInterpretation, ""MONOCHROME2"");
            }
            if (fmi) {
                ds.setFileMetaInfo(fact.newFileMetaInfo(ds, UIDs.ImplicitVRLittleEndian));
            }
            OutputStream out = new BufferedOutputStream(new FileOutputStream(dest));
            try {
            } finally {
                ds.writeFile(out, encodeParam());
                if (hasPixelData) {
                    if (!skipGroupLen) {
                        out.write(PXDATA_GROUPLEN);
                        int grlen = pxlen + 8;
                        out.write((byte) grlen);
                        out.write((byte) (grlen >> 8));
                        out.write((byte) (grlen >> 16));
                        out.write((byte) (grlen >> 24));
                    }
                    out.write(PXDATA_TAG);
                    out.write((byte) pxlen);
                    out.write((byte) (pxlen >> 8));
                    out.write((byte) (pxlen >> 16));
                    out.write((byte) (pxlen >> 24));
                }
                if (inflate) {
                    int b2, b3;
                    for (; pxlen > 0; pxlen -= 3) {
                        out.write(in.read());
                        b2 = in.read();
                        b3 = in.read();
                        out.write(b2 & 0x0f);
                        out.write(b2 >> 4 | ((b3 & 0x0f) << 4));
                        out.write(b3 >> 4);
                    }
                } else {
                    for (; pxlen > 0; --pxlen) {
                        out.write(in.read());
                    }
                }
                out.close();
            }
            System.out.print('.');
        } finally {
            in.close();
        }
    }
 <SPLIT>     public boolean import_hints(String filename) {
        int pieceId;
        int i, col, row;
        int rotation;
        int number;
        boolean byurl = true;
        e2piece temppiece;
        String lineread;
        StringTokenizer tok;
        BufferedReader entree;
        try {
            if (byurl == true) {
                URL url = new URL(baseURL, filename);
                InputStream in = url.openStream();
                entree = new BufferedReader(new InputStreamReader(in));
            } else {
                entree = new BufferedReader(new FileReader(filename));
            }
            pieceId = 0;
            lineread = entree.readLine();
            tok = new StringTokenizer(lineread, "" "");
            number = Integer.parseInt(tok.nextToken());
            for (i = 0; i < number; i++) {
                lineread = entree.readLine();
                if (lineread == null) {
                    break;
                }
                tok = new StringTokenizer(lineread, "" "");
                pieceId = Integer.parseInt(tok.nextToken());
                col = Integer.parseInt(tok.nextToken()) - 1;
                row = Integer.parseInt(tok.nextToken()) - 1;
                rotation = Integer.parseInt(tok.nextToken());
                System.out.println(""placing hint piece : "" + pieceId);
                place_piece_at(pieceId, col, row, 0);
                temppiece = board.get_piece_at(col, row);
                temppiece.reset_rotation();
                temppiece.rotate(rotation);
                temppiece.set_as_hint();
            }
            return true;
        } catch (IOException err) {
            return false;
        }
    }
",765,,LABEL_0,LABEL_1,,-4,"convert,src,dest,in,p,ds,format,hasPixelData,inflate,pxlen,out",,,,0,,0,Greedy,1,0.0008969386418660482,,[]
318,"    public void parse(ParserEvent event) {
        logger.debug(""parse() called for link "" + event.getLink().getURI());
        if (event.getLink().getURI().matches(itemFilter)) {
            logger.debug(""Content "" + event.getLink().getURI() + "" matched"");
            Statement stmt = null;
            ResultSet rs = null;
            long checksum1 = 0;
            try {
                URL url = new URL(event.getLink().getURI());
                checksum1 = url.openConnection().getLastModified();
            } catch (MalformedURLException mfe) {
                logger.error(""Malformed url "" + event.getLink().getURI() + "" - "" + mfe.getMessage());
                return;
            } catch (IOException ioe) {
                logger.error(""Couldn't read "" + event.getLink().getURI() + "" - "" + ioe.getMessage());
                return;
            }
            if ((checksum1 == 0) || (checksum1 == 1)) {
                Adler32 adler32 = new Adler32();
                NodeList nodes = (NodeList) event.getPageData().getData();
                adler32.update(nodes.toHtml().getBytes());
                checksum1 = adler32.getValue();
            }
            try {
                stmt = conn.createStatement();
                rs = stmt.executeQuery(""SELECT * FROM documents WHERE url='"" + event.getLink().getURI() + ""'"");
                if (rs.first()) {
                    long checksum2 = rs.getLong(""checksum"");
                    if (checksum1 == checksum2) {
                        stmt.executeUpdate(""UPDATE documents SET checked="" + String.valueOf(System.currentTimeMillis()) + "" WHERE id="" + rs.getString(""id""));
                    } else {
                        stmt.executeUpdate(""UPDATE documents SET checksum="" + checksum1 + "", checked="" + String.valueOf(System.currentTimeMillis()) + "" WHERE id="" + rs.getString(""id""));
                    }
                } else {
                    stmt.executeUpdate(""INSERT INTO documents VALUES "" + ""(DEFAULT, '"" + event.getLink().getURI() + ""', "" + checksum1 + "", '"" + providerId + ""', "" + String.valueOf(System.currentTimeMillis()) + "")"");
                }
            } catch (SQLException e) {
                logger.error(""Could't perform database query or update - "" + e.getMessage());
            } finally {
                if (rs != null) {
                    try {
                        rs.close();
                    } catch (SQLException sqlEx) {
                    }
                    rs = null;
                }
                if (stmt != null) {
                    try {
                        stmt.close();
                    } catch (SQLException sqlEx) {
                    }
                    stmt = null;
                }
            }
        }
    }
 <SPLIT>     public static String getMD5(String _pwd) {
        try {
            MessageDigest md = MessageDigest.getInstance(""MD5"");
            md.update(_pwd.getBytes());
            return toHexadecimal(new String(md.digest()).getBytes());
        } catch (NoSuchAlgorithmException x) {
            x.printStackTrace();
            return """";
        }
    }
",536,"    public void Parser(ParserEvent open) {
        logger.debug(""parse() called for link "" + open.getLink().getURI());
        if (open.getLink().getURI().matches(itemFilter)) {
            logger.debug(""Content "" + open.getLink().getURI() + "" matched"");
            Statement rql = null;
            ResultSet mr = null;
            long checksumOnce = 0;
            try {
                URL uri = new URL(open.getLink().getURI());
                checksumOnce = uri.openConnection().getLastModified();
            } catch (MalformedURLException mfe) {
                logger.error(""Malformed url "" + open.getLink().getURI() + "" - "" + mfe.getMessage());
                return;
            } catch (IOException ioe) {
                logger.error(""Couldn't read "" + open.getLink().getURI() + "" - "" + ioe.getMessage());
                return;
            }
            if ((checksumOnce == 0) || (checksumOnce == 1)) {
                Adler32 aclr16 = new Adler32();
                NodeList Node = (NodeList) open.getPageData().getData();
                aclr16.update(Node.toHtml().getBytes());
                checksumOnce = aclr16.getValue();
            }
            try {
                rql = conn.createStatement();
                mr = rql.executeQuery(""SELECT * FROM documents WHERE url='"" + open.getLink().getURI() + ""'"");
                if (mr.first()) {
                    long checksha82 = mr.getLong(""checksum"");
                    if (checksumOnce == checksha82) {
                        rql.executeUpdate(""UPDATE documents SET checked="" + String.valueOf(System.currentTimeMillis()) + "" WHERE id="" + mr.getString(""id""));
                    } else {
                        rql.executeUpdate(""UPDATE documents SET checksum="" + checksumOnce + "", checked="" + String.valueOf(System.currentTimeMillis()) + "" WHERE id="" + mr.getString(""id""));
                    }
                } else {
                    rql.executeUpdate(""INSERT INTO documents VALUES "" + ""(DEFAULT, '"" + open.getLink().getURI() + ""', "" + checksumOnce + "", '"" + providerId + ""', "" + String.valueOf(System.currentTimeMillis()) + "")"");
                }
            } catch (SQLException e) {
                logger.error(""Could't perform database query or update - "" + e.getMessage());
            } finally {
                if (mr != null) {
                    try {
                        mr.close();
                    } catch (SQLException sqlEx) {
                    }
                    mr = null;
                }
                if (rql != null) {
                    try {
                        rql.close();
                    } catch (SQLException sqlEx) {
                    }
                    rql = null;
                }
            }
        }
    }
",LABEL_0,LABEL_0,LABEL_0,-1,"parse,event,stmt,rs,checksum1,url,adler32,nodes,checksum2","parse:3.0994415283203125e-06,event:-2.014636993408203e-05,stmt:1.7821788787841797e-05,rs:-5.0067901611328125e-06,checksum1:-0.0001620650291442871,url:0.03880107402801514,adler32:-9.334087371826172e-05,nodes:1.9609928131103516e-05,checksum2:8.58306884765625e-06,",9,47,0,"url:uri,nodes:Node,stmt:rql,checksum2:checksha82,parse:Parser,rs:mr,event:open,adler32:aclr16,checksum1:checksumOnce,",0,Greedy,487,0.08739660580952963,failed,[]
319,"    private String encryptPassword(String password) throws NoSuchAlgorithmException {
        StringBuffer encryptedPassword = new StringBuffer();
        MessageDigest md5 = MessageDigest.getInstance(""MD5"");
        md5.reset();
        md5.update(password.getBytes());
        byte digest[] = md5.digest();
        for (int i = 0; i < digest.length; i++) {
            String hex = Integer.toHexString(0xFF & digest[i]);
            if (hex.length() == 1) {
                encryptedPassword.append('0');
            }
            encryptedPassword.append(hex);
        }
        return encryptedPassword.toString();
    }
 <SPLIT>     public static String encrypt(String text) {
        char[] toEncrypt = text.toCharArray();
        StringBuffer hexString = new StringBuffer();
        try {
            MessageDigest dig = MessageDigest.getInstance(""MD5"");
            dig.reset();
            String pw = """";
            for (int i = 0; i < toEncrypt.length; i++) {
                pw += toEncrypt[i];
            }
            dig.update(pw.getBytes());
            byte[] digest = dig.digest();
            int digestLength = digest.length;
            for (int i = 0; i < digestLength; i++) {
                hexString.append(hexDigit(digest[i]));
            }
        } catch (java.security.NoSuchAlgorithmException ae) {
            ae.printStackTrace();
        }
        return hexString.toString();
    }
",127,"    private String encryptSecret(String username) throws NoSuchAlgorithmException {
        StringBuffer ryptedPassword = new StringBuffer();
        MessageDigest md45 = MessageDigest.getInstance(""MD5"");
        md45.reset();
        md45.update(username.getBytes());
        byte Digenge[] = md45.Digenge();
        for (int ri = 0; ri < Digenge.length; ri++) {
            String text = Integer.toHexString(0xFF & Digenge[ri]);
            if (text.length() == 1) {
                ryptedPassword.append('0');
            }
            ryptedPassword.append(text);
        }
        return ryptedPassword.toString();
    }
",LABEL_1,LABEL_1,LABEL_1,-1,"encryptPassword,password,encryptedPassword,md5,digest,i,hex","encryptPassword:0.009777188301086426,password:-0.00011599063873291016,encryptedPassword:0.02683281898498535,md5:0.037380218505859375,digest:0.002936840057373047,i:0.0024393796920776367,hex:0.000946044921875,",7,22,0,"md5:md45,encryptedPassword:ryptedPassword,encryptPassword:encryptSecret,digest:Digenge,i:ri,hex:text,password:username,",0,Greedy,281,0.040934193134307864,failed,[]
320,"    public String put(String resourceID, Map<String, String> headersMap) {
        HttpClient httpClient = new DefaultHttpClient();
        httpClient.getParams().setParameter(""http.useragent"", ""sla@soi OCCI Client v0.2"");
        HttpPut httpPut = new HttpPut(resourceID);
        List<Header> headersList = this.convert2Headers(headersMap);
        for (Iterator<Header> iterator = headersList.iterator(); iterator.hasNext(); ) {
            httpPut.addHeader(iterator.next());
        }
        logger.info(httpPut.getRequestLine());
        logger.info(httpPut.getAllHeaders());
        Header[] headersArray = httpPut.getAllHeaders();
        String[] fields = { Response.Location };
        HashMap<String, String> occiHeaders = new HashMap<String, String>();
        for (int H = 0; H < headersArray.length; H++) {
            Header header = headersArray[H];
            logger.info(""header - request  -"" + header.toString());
            logger.info(""	headerName - "" + header.getName());
            logger.info(""	headerValue - "" + header.getValue());
        }
        String statusLine = null;
        try {
            HttpResponse httpResponse = httpClient.execute(httpPut);
            statusLine = httpResponse.getStatusLine().toString();
            int statusCode = httpResponse.getStatusLine().getStatusCode();
            logger.info(""----------------------------------------"");
            logger.info(""StatusLine - (full) - "" + httpResponse.getStatusLine());
            logger.info(""	StatusCode - "" + statusCode);
            logger.info(""	Reason - "" + httpResponse.getStatusLine().getReasonPhrase());
            logger.info(""	Protocol - "" + httpResponse.getStatusLine().getProtocolVersion().toString());
            logger.info(""----------------------------------------"");
            if (StatusCode.validate(statusCode)) {
                logger.info(""Response Validated"");
            } else {
                logger.error(""Response NOT Validated"");
                return null;
            }
            Header[] headers = httpResponse.getAllHeaders();
            for (int i = 0; i < headers.length; i++) {
                Header header = headers[i];
                logger.info(""header - response - "" + header.toString());
                logger.info(""	headerName - "" + header.getName());
                logger.info(""	headerValue - "" + header.getValue());
                for (int h = 0; h < fields.length; h++) {
                    logger.info(""	Looking for  - "" + fields[h]);
                    if (fields[h].equals(header.getName().toString())) {
                        logger.info(""	Found an OCCI Header - "" + header.getName());
                        occiHeaders.put(header.getName(), header.getValue());
                    }
                }
            }
        } catch (org.apache.http.conn.HttpHostConnectException e) {
            e.printStackTrace();
            logger.error(e);
            return null;
        } catch (ClientProtocolException e) {
            e.printStackTrace();
            logger.error(e);
            return null;
        } catch (IOException e) {
            e.printStackTrace();
            logger.error(e);
            return null;
        } finally {
            httpClient.getConnectionManager().shutdown();
        }
        logger.info(""occiHeaders - "" + occiHeaders);
        if (occiHeaders.containsKey(Response.Location)) {
            logger.info(""Valid Provision"" + statusLine);
            return occiHeaders.get(Response.Location).toString().replaceAll(Response.jobs, """");
        }
        logger.info(""NOT a Valid Provision - "" + statusLine);
        return statusLine;
    }
 <SPLIT>     private String File2String(String directory, String filename) {
        String line;
        InputStream in = null;
        try {
            File f = new File(filename);
            System.out.println(""File On:>>>>>>>>>> "" + f.getCanonicalPath());
            in = new FileInputStream(f);
        } catch (FileNotFoundException ex) {
            in = null;
        } catch (IOException ex) {
            in = null;
        }
        try {
            if (in == null) {
                filename = directory + ""/"" + filename;
                java.net.URL urlFile = ClassLoader.getSystemResource(filename);
                if (urlFile == null) {
                    System.out.println(""Integrated Chips list file not found: "" + filename);
                    System.exit(-1);
                }
                in = urlFile.openStream();
            }
            BufferedReader reader = new BufferedReader(new InputStreamReader(in));
            StringBuffer xmlText = new StringBuffer();
            while ((line = reader.readLine()) != null) {
                xmlText.append(line);
            }
            reader.close();
            return xmlText.toString();
        } catch (FileNotFoundException ex) {
            System.out.println(""Integrated Chips list file not found"");
            System.exit(-1);
        } catch (IOException ex) {
            ex.printStackTrace();
            System.exit(-1);
        }
        return null;
    }
",727,"    public String output(String responseURL, Map<String, String> httpMap) {
        HttpClient httpClient = new DefaultHttpClient();
        httpClient.getParams().setParameter(""http.useragent"", ""sla@soi OCCI Client v0.2"");
        HttpPut httpPut = new HttpPut(responseURL);
        List<Header> headersSet = this.convert2Headers(httpMap);
        for (Iterator<Header> writer = headersSet.writer(); writer.hasNext(); ) {
            httpPut.addHeader(writer.next());
        }
        logger.info(httpPut.getRequestLine());
        logger.info(httpPut.getAllHeaders());
        Header[]  headersAr = httpPut.getAllHeaders();
        String[] FIELD = { Response.Location };
        HashMap<String, String> ocsiBuffer = new HashMap<String, String>();
        for (int Handler = 0; Handler <  headersAr.length; Handler++) {
            Header http =  headersAr[Handler];
            logger.info(""header - request  -"" + http.toString());
            logger.info(""	headerName - "" + http.getName());
            logger.info(""	headerValue - "" + http.getValue());
        }
        String StatusFile = null;
        try {
            HttpResponse HttpStatus = httpClient.execute(httpPut);
            StatusFile = HttpStatus.getStatusLine().toString();
            int resultLine = HttpStatus.getStatusLine().getStatusCode();
            logger.info(""----------------------------------------"");
            logger.info(""StatusLine - (full) - "" + HttpStatus.getStatusLine());
            logger.info(""	StatusCode - "" + resultLine);
            logger.info(""	Reason - "" + HttpStatus.getStatusLine().getReasonPhrase());
            logger.info(""	Protocol - "" + HttpStatus.getStatusLine().getProtocolVersion().toString());
            logger.info(""----------------------------------------"");
            if (StatusCode.validate(resultLine)) {
                logger.info(""Response Validated"");
            } else {
                logger.error(""Response NOT Validated"");
                return null;
            }
            Header[] headers = HttpStatus.getAllHeaders();
            for (int i = 0; i < headers.length; i++) {
                Header http = headers[i];
                logger.info(""header - response - "" + http.toString());
                logger.info(""	headerName - "" + http.getName());
                logger.info(""	headerValue - "" + http.getValue());
                for (int h = 0; h < FIELD.length; h++) {
                    logger.info(""	Looking for  - "" + FIELD[h]);
                    if (FIELD[h].equals(http.getName().toString())) {
                        logger.info(""	Found an OCCI Header - "" + http.getName());
                        ocsiBuffer.output(http.getName(), http.getValue());
                    }
                }
            }
        } catch (org.apache.http.conn.HttpHostConnectException e) {
            e.printStackTrace();
            logger.error(e);
            return null;
        } catch (ClientProtocolException e) {
            e.printStackTrace();
            logger.error(e);
            return null;
        } catch (IOException e) {
            e.printStackTrace();
            logger.error(e);
            return null;
        } finally {
            httpClient.getConnectionManager().shutdown();
        }
        logger.info(""occiHeaders - "" + ocsiBuffer);
        if (ocsiBuffer.containsKey(Response.Location)) {
            logger.info(""Valid Provision"" + StatusFile);
            return ocsiBuffer.get(Response.Location).toString().replaceAll(Response.jobs, """");
        }
        logger.info(""NOT a Valid Provision - "" + StatusFile);
        return StatusFile;
    }
",LABEL_0,LABEL_0,LABEL_1,1,"put,resourceID,headersMap,httpClient,httpPut,headersList,iterator,headersArray,fields,occiHeaders,H,header,statusLine,httpResponse,statusCode","put:-0.00010180473327636719,resourceID:-1.6450881958007812e-05,headersMap:-3.457069396972656e-05,httpClient:-0.00017112493515014648,httpPut:-0.0001513957977294922,headersList:-5.9604644775390625e-06,iterator:5.4836273193359375e-05,headersArray:2.205371856689453e-06,fields:2.1278858184814453e-05,occiHeaders:0.00023126602172851562,H:8.147954940795898e-05,header:4.571676254272461e-05,statusLine:-3.731250762939453e-05,httpResponse:-8.922815322875977e-05,statusCode:2.0384788513183594e-05,",13,58,0,"occiHeaders:ocsiBuffer,H:Handler,iterator:writer,header:http,fields:FIELD,statusCode:resultLine,headersArray: headersAr,headersList:headersSet,resourceID:responseURL,headersMap:httpMap,statusLine:StatusFile,httpResponse:HttpStatus,put:output,",0,Greedy,497,0.10515689055124919,replace,[]
321,"    public static void copyFile(File sourceFile, File destFile) throws IOException {
        if (!destFile.exists()) {
            destFile.createNewFile();
        }
        FileChannel source = null;
        FileChannel destination = null;
        try {
            source = new FileInputStream(sourceFile).getChannel();
            destination = new FileOutputStream(destFile).getChannel();
            destination.transferFrom(source, 0, source.size());
        } finally {
            if (source != null) {
                source.close();
            }
            if (destination != null) {
                destination.close();
            }
        }
    }
 <SPLIT>     public Configuration(URL url) {
        InputStream in = null;
        try {
            load(in = url.openStream());
        } catch (Exception e) {
            throw new RuntimeException(""Could not load configuration from "" + url, e);
        } finally {
            if (in != null) {
                try {
                    in.close();
                } catch (IOException ignore) {
                }
            }
        }
    }
",116,"    public static void cloneFiles(File sourceUrl, File  destDir) throws IOException {
        if (!destFile.exists()) {
             destDir.createNewFile();
        }
        FileChannel api = null;
        FileChannel domination = null;
        try {
            api = new FileInputStream(sourceUrl).getChannel();
            domination = new FileOutputStream( destDir).getChannel();
            domination.transferFrom(api, 0, api.size());
        } finally {
            if (api != null) {
                api.close();
            }
            if (domination != null) {
                domination.close();
            }
        }
    }
",LABEL_0,LABEL_0,LABEL_0,-1,"copyFile,sourceFile,destFile,source,destination","copyFile:0.018949449062347412,sourceFile:-0.0136260986328125,destFile:-0.027661800384521484,source:-0.01727163791656494,destination:-0.01100224256515503,",5,18,0,"copyFile:cloneFiles,destination:domination,sourceFile:sourceUrl,source:api,destFile: destDir,",0,Greedy,212,0.02872146765391032,failed,[]
322,"    public static String str2md5(String str) {
        try {
            MessageDigest alga = MessageDigest.getInstance(MESSAGE_DIGEST_TYPE);
            alga.update(str.getBytes());
            byte[] digesta = alga.digest();
            return byte2hex(digesta);
        } catch (NoSuchAlgorithmException ex) {
            return str;
        }
    }
 <SPLIT>     private void streamContains(String in, InputStream stream) throws IOException {
        ByteArrayOutputStream baos = new ByteArrayOutputStream();
        IOUtils.copy(stream, baos);
        byte[] bytes = baos.toByteArray();
        String cmp = new String(bytes, ""UTF-8"");
        assertTrue(cmp.contains(in));
        baos.close();
    }
",62,"    public static String str_MD5(String exp) {
        try {
            MessageDigest  alda = MessageDigest.getInstance(MESSAGE_DIGEST_TYPE);
             alda.update(exp.getBytes());
            byte[] codsta =  alda.digest();
            return byte2hex(codsta);
        } catch (NoSuchAlgorithmException ex) {
            return exp;
        }
    }
",LABEL_0,LABEL_0,LABEL_0,-1,"str2md5,str,alga,digesta","str2md5:0.02447366714477539,str:-0.003274202346801758,alga:0.015168249607086182,digesta:0.008762240409851074,",4,9,0,"str2md5:str_MD5,alga: alda,digesta:codsta,str:exp,",0,Greedy,142,0.018943289915720623,failed,[]
323,"    public static String doCrypt(String text) throws NoSuchAlgorithmException, UnsupportedEncodingException {
        MessageDigest md;
        md = MessageDigest.getInstance(""SHA-1"");
        byte[] sha1hash = new byte[40];
        md.update(text.getBytes(""UTF-8""), 0, text.length());
        sha1hash = md.digest();
        return convertToHex(sha1hash);
    }
 <SPLIT>     public static final String encryptPassword(String loginName, String password) {
        try {
            MessageDigest md5 = MessageDigest.getInstance(""MD5"");
            md5.update(loginName.toUpperCase().getBytes(""UTF-8""));
            md5.update(password.getBytes(""UTF-8""));
            byte[] ba = md5.digest();
            return byte2hex(ba);
        } catch (Exception e) {
            return password;
        }
    }
",77,"    public static String  runDec(String url) throws NoSuchAlgorithmException, UnsupportedEncasingEx {
        MessageDigest mad;
        mad = MessageDigest.getInstance(""SHA-1"");
        byte[] SHA1sha = new byte[40];
        mad.update(url.getBytes(""UTF-8""), 0, url.length());
        SHA1sha = mad.digest();
        return convertToHex(SHA1sha);
    }
",LABEL_1,LABEL_1,LABEL_1,-1,"doCrypt,text,UnsupportedEncodingException,md,sha1hash","doCrypt:-0.011585235595703125,text:0.001398324966430664,UnsupportedEncodingException:-0.017033517360687256,md:-0.0003440380096435547,sha1hash:-0.01726400852203369,",5,12,0,"text:url,md:mad,doCrypt: runDec,UnsupportedEncodingException:UnsupportedEncasingEx,sha1hash:SHA1sha,",0,Greedy,200,0.026600996653238933,failed,[]
324,"            @Override
            public InputStream getInputStream() {
                try {
                    String url = webBrowserObject.resourcePath;
                    File file = Utils.getLocalFile(url);
                    if (file != null) {
                        url = webBrowserObject.getLocalFileURL(file);
                    }
                    url = url.substring(0, url.lastIndexOf('/')) + ""/"" + resource;
                    return new URL(url).openStream();
                } catch (Exception e) {
                }
                return null;
            }
 <SPLIT>     public static File copyFile(File fileToCopy, File copiedFile) {
        BufferedInputStream in = null;
        BufferedOutputStream outWriter = null;
        if (!copiedFile.exists()) {
            try {
                copiedFile.createNewFile();
            } catch (IOException e1) {
                e1.printStackTrace();
                return null;
            }
        }
        try {
            in = new BufferedInputStream(new FileInputStream(fileToCopy), 4096);
            outWriter = new BufferedOutputStream(new FileOutputStream(copiedFile), 4096);
            int c;
            while ((c = in.read()) != -1) outWriter.write(c);
            in.close();
            outWriter.close();
        } catch (FileNotFoundException e) {
            e.printStackTrace();
            return null;
        } catch (IOException e) {
            e.printStackTrace();
            return null;
        }
        return copiedFile;
    }
",90,"            @Override
            public InputStream getInputStream() {
                try {
                    String path = webBrowserObject.resourcePath;
                    File live = Utils.getLocalFile(path);
                    if (live != null) {
                        path = webBrowserObject.getLocalFileURL(live);
                    }
                    path = path.substring(0, path.lastIndexOf('/')) + ""/"" + resource;
                    return new URL(path).openStream();
                } catch (Exception e) {
                }
                return null;
            }
",LABEL_0,LABEL_0,LABEL_1,1,"getInputStream,url,file","getInputStream:-5.3942203521728516e-05,url:-2.6047229766845703e-05,file:-2.1398067474365234e-05,",2,10,0,"file:live,url:path,",0,Greedy,137,0.01856547196706136,replace,[]
325,"    public static void copyFileChannel(File src, File dst, boolean preserveModificationTime) throws IOException {
        FileChannel inputChannel = null;
        FileChannel outputChannel = null;
        long length = 0;
        try {
            inputChannel = new FileInputStream(src).getChannel();
            length = inputChannel.size();
            outputChannel = new FileOutputStream(dst).getChannel();
            long total = 0;
            while (total < length) {
                total += inputChannel.transferTo(0, length, outputChannel);
            }
            if (preserveModificationTime) {
                dst.setLastModified(src.lastModified());
            }
        } finally {
            if (inputChannel != null) {
                inputChannel.close();
            }
            if (outputChannel != null) {
                outputChannel.close();
            }
        }
    }
 <SPLIT>     public static void copyFile(File src, File dst) throws IOException {
        try {
            InputStream in = new FileInputStream(src);
            OutputStream out = new FileOutputStream(dst);
            byte[] buf = new byte[TEMP_FILE_BUFFER_SIZE];
            int len;
            while ((len = in.read(buf)) > 0) out.write(buf, 0, len);
            in.close();
            out.close();
        } catch (FileNotFoundException e1) {
            MLUtil.runtimeError(e1, src.toString());
        } catch (IOException e2) {
            MLUtil.runtimeError(e2, src.toString());
        }
    }
",143,"    public static void transferfileChan(File url, File dst, boolean preserveModificationTime) throws IOException {
        FileChannel inputChannel = null;
        FileChannel outStream = null;
        long php = 0;
        try {
            inputChannel = new FileInputStream(url).getChannel();
            php = inputChannel.size();
            outStream = new FileOutputStream(dst).getChannel();
            long total = 0;
            while (total < php) {
                total += inputChannel.transferTo(0, php, outStream);
            }
            if (preserveModificationTime) {
                dst.setLastModified(url.lastModified());
            }
        } finally {
            if (inputChannel != null) {
                inputChannel.close();
            }
            if (outStream != null) {
                outStream.close();
            }
        }
    }
",LABEL_1,LABEL_1,LABEL_0,1,"copyFileChannel,src,dst,preserveModificationTime,inputChannel,outputChannel,length,total","copyFileChannel:-0.00971686840057373,src:-0.009697794914245605,dst:0.0021190643310546875,preserveModificationTime:-0.028612196445465088,inputChannel:-0.014381706714630127,outputChannel:-0.010362803936004639,length:-0.007117629051208496,total:-0.0036345720291137695,",4,13,0,"dst:dst,total:total,length:php,src:url,copyFileChannel:transferfileChan,outputChannel:outStream,",0,Greedy,263,0.03783191839853923,replace,[]
326,"    private static void copyFile(File source, File dest) throws IOException {
        FileChannel srcChannel = new FileInputStream(source).getChannel();
        FileChannel dstChannel = new FileOutputStream(dest).getChannel();
        dstChannel.transferFrom(srcChannel, 0, srcChannel.size());
        srcChannel.close();
        dstChannel.close();
    }
 <SPLIT>     private static void copy(String sourceName, String destName) throws IOException {
        File source = new File(sourceName);
        File dest = new File(destName);
        FileChannel in = null, out = null;
        try {
            in = new FileInputStream(source).getChannel();
            out = new FileOutputStream(dest).getChannel();
            long size = in.size();
            MappedByteBuffer buf = in.map(FileChannel.MapMode.READ_ONLY, 0, size);
            out.write(buf);
        } finally {
            if (in != null) in.close();
            if (out != null) out.close();
        }
    }
",69,"    private static void Copyfile(File Source, File file) throws IOException {
        FileChannel destchannel = new FileInputStream(Source).getChannel();
        FileChannel dstStream = new FileOutputStream(file).getChannel();
        dstStream.transferFrom(destchannel, 0, destchannel.size());
        destchannel.close();
        dstStream.close();
    }
",LABEL_1,LABEL_1,LABEL_1,-1,"copyFile,source,dest,srcChannel,dstChannel","copyFile:0.0002753138542175293,source:-0.0017085075378417969,dest:0.0031111836433410645,srcChannel:-0.04123407602310181,dstChannel:-0.03242897987365723,",5,12,0,"dest:file,copyFile:Copyfile,source:Source,dstChannel:dstStream,srcChannel:destchannel,",0,Greedy,192,0.026197683811187745,failed,[]
327,"    public static void copy(File srcPath, File dstPath) throws IOException {
        if (srcPath.isDirectory()) {
            if (!dstPath.exists()) {
                boolean result = dstPath.mkdir();
                if (!result) throw new IOException(""Unable to create directoy: "" + dstPath);
            }
            String[] files = srcPath.list();
            for (String file : files) {
                copy(new File(srcPath, file), new File(dstPath, file));
            }
        } else {
            if (srcPath.exists()) {
                FileChannel in = null;
                FileChannel out = null;
                try {
                    in = new FileInputStream(srcPath).getChannel();
                    out = new FileOutputStream(dstPath).getChannel();
                    long size = in.size();
                    MappedByteBuffer buf = in.map(FileChannel.MapMode.READ_ONLY, 0, size);
                    out.write(buf);
                } finally {
                    if (in != null) in.close();
                    if (out != null) out.close();
                }
            }
        }
    }
 <SPLIT>     public static void copyFile(File source, File dest) throws IOException {
        if (!dest.exists()) {
            dest.createNewFile();
        }
        FileChannel from = null;
        FileChannel to = null;
        try {
            from = new FileInputStream(source).getChannel();
            to = new FileOutputStream(dest).getChannel();
            to.transferFrom(from, 0, from.size());
        } finally {
            if (from != null) {
                from.close();
            }
            if (to != null) {
                to.close();
            }
        }
    }
",212,"    public static void opy(File srcPath, File dstPath) throws IOException {
        if (srcPath.isDirectory()) {
            if (!dstPath.exists()) {
                boolean result = dstPath.mkdir();
                if (!result) throw new IOException(""Unable to create directoy: "" + dstPath);
            }
            String[] files = srcPath.list();
            for (String file : files) {
                opy(new File(srcPath, file), new File(dstPath, file));
            }
        } else {
            if (srcPath.exists()) {
                FileChannel url = null;
                FileChannel out = null;
                try {
                    url = new FileInputStream(srcPath).getChannel();
                    out = new FileOutputStream(dstPath).getChannel();
                    long size = url.size();
                    MappedByteBuffer buf = url.map(FileChannel.MapMode.READ_ONLY, 0, size);
                    out.write(buf);
                } finally {
                    if (url != null) url.close();
                    if (out != null) out.close();
                }
            }
        }
    }
",LABEL_1,LABEL_1,LABEL_0,1,"copy,srcPath,dstPath,result,files,file,in,out,size,buf","copy:0.012529850006103516,srcPath:-0.017370402812957764,dstPath:-0.02093982696533203,result:0.0008275508880615234,files:0.0020189285278320312,file:-0.005045056343078613,in:0.006811678409576416,out:-0.002709805965423584,size:0.0001404285430908203,buf:0.00045049190521240234,",2,8,0,"copy:opy,in:url,",0,Greedy,142,0.020470873514811198,replace,[]
328,"    public BufferedWriter createOutputStream(String inFile, String outFile) throws IOException {
        int k_blockSize = 1024;
        int byteCount;
        char[] buf = new char[k_blockSize];
        File ofp = new File(outFile);
        ZipOutputStream zos = new ZipOutputStream(new FileOutputStream(ofp));
        zos.setMethod(ZipOutputStream.DEFLATED);
        OutputStreamWriter osw = new OutputStreamWriter(zos, ""ISO-8859-1"");
        BufferedWriter bw = new BufferedWriter(osw);
        ZipEntry zot = null;
        File ifp = new File(inFile);
        ZipInputStream zis = new ZipInputStream(new FileInputStream(ifp));
        InputStreamReader isr = new InputStreamReader(zis, ""ISO-8859-1"");
        BufferedReader br = new BufferedReader(isr);
        ZipEntry zit = null;
        while ((zit = zis.getNextEntry()) != null) {
            if (zit.getName().equals(""content.xml"")) {
                continue;
            }
            zot = new ZipEntry(zit.getName());
            zos.putNextEntry(zot);
            while ((byteCount = br.read(buf, 0, k_blockSize)) >= 0) bw.write(buf, 0, byteCount);
            bw.flush();
            zos.closeEntry();
        }
        zos.putNextEntry(new ZipEntry(""content.xml""));
        bw.flush();
        osw = new OutputStreamWriter(zos, ""UTF8"");
        bw = new BufferedWriter(osw);
        return bw;
    }
 <SPLIT>     public static KeyStore createKeyStore(final URL url, final String password) throws KeyStoreException, NoSuchAlgorithmException, CertificateException, IOException {
        if (url == null) throw new IllegalArgumentException(""Keystore url may not be null"");
        LOG.debug(""Initializing key store"");
        KeyStore keystore = null;
        if (url.getFile().endsWith("".p12"")) keystore = KeyStore.getInstance(""pkcs12""); else keystore = KeyStore.getInstance(KeyStore.getDefaultType());
        keystore.load(url.openStream(), password != null ? password.toCharArray() : null);
        return keystore;
    }
",279,,LABEL_0,LABEL_1,,-4,"createOutputStream,inFile,outFile,k_blockSize,byteCount,buf,ofp,zos,osw,bw,zot,ifp,zis,isr,br,zit",,,,0,,0,Greedy,1,0.0004275123278299967,,[]
329,"    public static String CopyFile(String sourcefile, String destfile) throws FileNotFoundException, IOException {
        int last = destfile.lastIndexOf('/');
        if (last < 0) {
            DrxWriteError(""CopyFile"", ""Destination filepath "" + destfile + "" doesn't contain /"");
            throw new java.io.FileNotFoundException(destfile);
        }
        String parent = destfile.substring(0, last);
        if (parent.length() > 0) {
            File f = new File(parent);
            if (!f.isDirectory()) {
                if (!f.mkdirs()) {
                    DrxWriteError(""CopyFile"", ""Folder "" + parent + "" doesn't exist, cannot create"");
                }
            }
        }
        FileChannel srcChannel = new FileInputStream(sourcefile).getChannel();
        FileChannel dstChannel = new FileOutputStream(destfile).getChannel();
        dstChannel.transferFrom(srcChannel, 0, srcChannel.size());
        srcChannel.close();
        dstChannel.close();
        return destfile;
    }
 <SPLIT>     private static boolean copyFile(File in, File out) {
        boolean ok = true;
        InputStream is = null;
        OutputStream os = null;
        try {
            is = new FileInputStream(in);
            os = new FileOutputStream(out);
            byte[] buffer = new byte[0xFFFF];
            for (int len; (len = is.read(buffer)) != -1; ) os.write(buffer, 0, len);
        } catch (IOException e) {
            System.err.println(e);
            ok = false;
        } finally {
            if (is != null) {
                try {
                    is.close();
                } catch (IOException e) {
                    System.err.println(e);
                }
            }
            if (os != null) {
                try {
                    os.close();
                } catch (IOException e) {
                    System.err.println(e);
                }
            }
        }
        return ok;
    }
",192,"    public static String CopyFile(String sourcelog, String destfile) throws FileNotFoundException, IOException {
        int  Last = destfile.lastIndexOf('/');
        if ( Last < 0) {
            DrxWriteError(""CopyFile"", ""Destination filepath "" + destfile + "" doesn't contain /"");
            throw new java.io.FileNotFoundException(destfile);
        }
        String url = destfile.substring(0,  Last);
        if (url.length() > 0) {
            File fp = new File(url);
            if (!f.isDirectory()) {
                if (!f.mkdirs()) {
                    DrxWriteError(""CopyFile"", ""Folder "" + url + "" doesn't exist, cannot create"");
                }
            }
        }
        FileChannel srcChannel = new FileInputStream(sourcelog).getChannel();
        FileChannel drcChannel = new FileOutputStream(destfile).getChannel();
        drcChannel.transferFrom(srcChannel, 0, srcChannel.size());
        srcChannel.close();
        drcChannel.close();
        return destfile;
    }
",LABEL_1,LABEL_1,LABEL_0,1,"CopyFile,sourcefile,destfile,last,parent,f,srcChannel,dstChannel","CopyFile:-0.03034287691116333,sourcefile:-0.02227330207824707,destfile:-0.06977444887161255,last:-0.0009645223617553711,parent:0.0013596415519714355,f:0.00047218799591064453,srcChannel:-0.0474204421043396,dstChannel:-0.030335545539855957,",5,15,0,"parent:url,f:fp,last: Last,sourcefile:sourcelog,dstChannel:drcChannel,",0,Greedy,247,0.037076469262441,replace,[]
330,"    public static byte[] fetchURLData(String url, String proxyHost, int proxyPort) throws IOException {
        HttpURLConnection con = null;
        InputStream is = null;
        try {
            URL u = new URL(url);
            if (url.startsWith(""file://"")) {
                is = new BufferedInputStream(u.openStream());
            } else {
                Proxy proxy;
                if (proxyHost != null) {
                    proxy = new Proxy(Type.HTTP, new InetSocketAddress(proxyHost, proxyPort));
                } else {
                    proxy = Proxy.NO_PROXY;
                }
                con = (HttpURLConnection) u.openConnection(proxy);
                con.addRequestProperty(""User-Agent"", ""Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/536.6 (KHTML, like Gecko) Chrome/20.0.1092.0 Safari/536.6"");
                con.addRequestProperty(""Accept-Charset"", ""UTF-8"");
                con.addRequestProperty(""Accept-Language"", ""en-US,en"");
                con.addRequestProperty(""Accept"", ""text/html,image/*"");
                con.setDoInput(true);
                con.setDoOutput(false);
                con.connect();
                is = new BufferedInputStream(con.getInputStream());
            }
            ByteArrayOutputStream baos = new ByteArrayOutputStream();
            IOUtils.copy(is, baos);
            return baos.toByteArray();
        } finally {
            IOUtils.closeQuietly(is);
            if (con != null) {
                con.disconnect();
            }
        }
    }
 <SPLIT>     public static boolean decodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }
",253,,LABEL_1,LABEL_0,,-4,"fetchURLData,url,proxyHost,proxyPort,con,is,u,proxy,baos",,,,0,,0,Greedy,1,0.00046373605728149413,,[]
331,"    public void testNetworkHTTP() {
        Log.v(""Test"", ""[*] testNetworkHTTP()"");
        URL url = null;
        HttpURLConnection urlConnection = null;
        try {
            url = new URL(""http://code.google.com/p/droidbox/"");
            urlConnection = (HttpURLConnection) url.openConnection();
            BufferedReader rd = new BufferedReader(new InputStreamReader(urlConnection.getInputStream()));
            @SuppressWarnings(""unused"") String line = """";
            while ((line = rd.readLine()) != null) ;
            url = new URL(""http://pjlantz.com/imei.php?imei="" + hashedImei);
            urlConnection = (HttpURLConnection) url.openConnection();
            rd = new BufferedReader(new InputStreamReader(urlConnection.getInputStream()));
            while ((line = rd.readLine()) != null) ;
            url = new URL(""http://pjlantz.com/phone.php?phone="" + phoneNbr);
            urlConnection = (HttpURLConnection) url.openConnection();
            rd = new BufferedReader(new InputStreamReader(urlConnection.getInputStream()));
            while ((line = rd.readLine()) != null) ;
            url = new URL(""http://pjlantz.com/msg.php?msg="" + msg.replace("" "", ""+""));
            urlConnection = (HttpURLConnection) url.openConnection();
            rd = new BufferedReader(new InputStreamReader(urlConnection.getInputStream()));
            url = new URL(""http://pjlantz.com/file.php?file="" + fileContent.replace("" "", ""+""));
            urlConnection = (HttpURLConnection) url.openConnection();
            rd = new BufferedReader(new InputStreamReader(urlConnection.getInputStream()));
            while ((line = rd.readLine()) != null) ;
            url = new URL(""http://pjlantz.com/app.php?installed="" + installedApps.replace("" "", ""+""));
            urlConnection = (HttpURLConnection) url.openConnection();
            rd = new BufferedReader(new InputStreamReader(urlConnection.getInputStream()));
            while ((line = rd.readLine()) != null) ;
        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            urlConnection.disconnect();
        }
    }
 <SPLIT>     private byte[] scramble411(String password, String seed) {
        MessageDigest md;
        try {
            md = MessageDigest.getInstance(""SHA-1"");
            byte[] passwordHashStage1 = md.digest(password.getBytes());
            md.reset();
            byte[] passwordHashStage2 = md.digest(passwordHashStage1);
            md.reset();
            md.update(seed.getBytes());
            md.update(passwordHashStage2);
            byte[] toBeXord = md.digest();
            int numToXor = toBeXord.length;
            for (int i = 0; i < numToXor; i++) {
                toBeXord[i] = (byte) (toBeXord[i] ^ passwordHashStage1[i]);
            }
            return toBeXord;
        } catch (NoSuchAlgorithmException e) {
            if (logger.isLoggable(Level.SEVERE)) {
                logger.log(Level.SEVERE, e.getMessage(), e);
            }
        }
        return null;
    }
",410,"    public void testNetworkHTTP() {
        Log.v(""Test"", ""[*] testNetworkHTTP()"");
        URL Url = null;
        HttpURLConnection emailClient = null;
        try {
            Url = new URL(""http://code.google.com/p/droidbox/"");
            emailClient = (HttpURLConnection) Url.openConnection();
            BufferedReader rd = new BufferedReader(new InputStreamReader(emailClient.getInputStream()));
            @SuppressWarnings(""unused"") String line = """";
            while ((line = rd.readLine()) != null) ;
            Url = new URL(""http://pjlantz.com/imei.php?imei="" + hashedImei);
            emailClient = (HttpURLConnection) Url.openConnection();
            rd = new BufferedReader(new InputStreamReader(emailClient.getInputStream()));
            while ((line = rd.readLine()) != null) ;
            Url = new URL(""http://pjlantz.com/phone.php?phone="" + phoneNbr);
            emailClient = (HttpURLConnection) Url.openConnection();
            rd = new BufferedReader(new InputStreamReader(emailClient.getInputStream()));
            while ((line = rd.readLine()) != null) ;
            Url = new URL(""http://pjlantz.com/msg.php?msg="" + msg.replace("" "", ""+""));
            emailClient = (HttpURLConnection) Url.openConnection();
            rd = new BufferedReader(new InputStreamReader(emailClient.getInputStream()));
            Url = new URL(""http://pjlantz.com/file.php?file="" + fileContent.replace("" "", ""+""));
            emailClient = (HttpURLConnection) Url.openConnection();
            rd = new BufferedReader(new InputStreamReader(emailClient.getInputStream()));
            while ((line = rd.readLine()) != null) ;
            Url = new URL(""http://pjlantz.com/app.php?installed="" + installedApps.replace("" "", ""+""));
            emailClient = (HttpURLConnection) Url.openConnection();
            rd = new BufferedReader(new InputStreamReader(emailClient.getInputStream()));
            while ((line = rd.readLine()) != null) ;
        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            emailClient.disconnect();
        }
    }
",LABEL_0,LABEL_0,LABEL_0,-1,"testNetworkHTTP,url,urlConnection,rd,line","testNetworkHTTP:-0.008873403072357178,url:-0.010075926780700684,urlConnection:-0.01174461841583252,rd:0.005769848823547363,line:0.0017117857933044434,",2,27,0,"rd:rd,line:line,testNetworkHTTP:testNetworkHTTP,url:Url,urlConnection:emailClient,",0,Greedy,404,0.06460070212682088,failed,[]
332,"    private void copyFile(File in, File out) throws IOException {
        FileChannel inChannel = new FileInputStream(in).getChannel();
        FileChannel outChannel = new FileOutputStream(out).getChannel();
        try {
            inChannel.transferTo(0, inChannel.size(), outChannel);
        } catch (IOException e) {
            throw e;
        } finally {
            if (inChannel != null) inChannel.close();
            if (outChannel != null) outChannel.close();
        }
    }
 <SPLIT>     private void copyJar(File src, File dst) throws IOException {
        FileChannel srcChannel = null;
        FileChannel dstChannel = null;
        try {
            srcChannel = new FileInputStream(src).getChannel();
            dstChannel = new FileOutputStream(dst).getChannel();
            dstChannel.transferFrom(srcChannel, 0, srcChannel.size());
        } catch (IOException e) {
            fLog.log(Level.SEVERE, e.getMessage(), e);
        } finally {
            srcChannel.close();
            dstChannel.close();
        }
    }
",96,"    private void transferfile(File url, File file) throws IOException {
        FileChannel  inchannel = new FileInputStream(url).getChannel();
        FileChannel outConnection = new FileOutputStream(file).getChannel();
        try {
             inchannel.transferTo(0,  inchannel.size(), outConnection);
        } catch (IOException e) {
            throw e;
        } finally {
            if ( inchannel != null)  inchannel.close();
            if (outConnection != null) outConnection.close();
        }
    }
",LABEL_1,LABEL_1,LABEL_1,-1,"copyFile,in,out,inChannel,outChannel","copyFile:-0.004836857318878174,in:-0.006502747535705566,out:-0.00506746768951416,inChannel:0.00875622034072876,outChannel:0.00674968957901001,",5,14,0,"inChannel: inchannel,outChannel:outConnection,copyFile:transferfile,out:file,in:url,",0,Greedy,182,0.025380516052246095,failed,[]
333,"    public static void main(String[] args) throws FileNotFoundException {
        if (args.length < 2) throw new IllegalArgumentException();
        String fnOut = args[args.length - 1];
        PrintWriter writer = new PrintWriter(fnOut);
        for (int i = 0; i < args.length - 1; i++) {
            File fInput = new File(args[i]);
            Scanner in = new Scanner(fInput);
            while (in.hasNext()) {
                writer.println(in.nextLine());
            }
        }
        writer.close();
    }
 <SPLIT>     public static synchronized String toSHA1(String str) {
        Nulls.failIfNull(str, ""Cannot create an SHA1 encryption form a NULL string"");
        try {
            MessageDigest md;
            md = MessageDigest.getInstance(SHA1);
            byte[] sha1hash = new byte[40];
            md.update(str.getBytes(ISO_CHARSET), 0, str.length());
            sha1hash = md.digest();
            return convertToHex(sha1hash);
        } catch (NoSuchAlgorithmException ex) {
            ex.printStackTrace();
        } catch (UnsupportedEncodingException ex) {
            ex.printStackTrace();
        }
        return null;
    }
",118,"    public static void main(String[] args) throws FileNotFoundException {
        if (args.length < 2) throw new IllegalArgumentException();
        String lsOut = args[args.length - 1];
        PrintWriter driver = new PrintWriter(lsOut);
        for (int id = 0; id < args.length - 1; id++) {
            File  finput = new File(args[id]);
            Scanner login = new Scanner( finput);
            while (login.hasNext()) {
                driver.println(login.nextLine());
            }
        }
        driver.close();
    }
",LABEL_0,LABEL_0,LABEL_0,-1,"fnOut,writer,i,fInput,in","fnOut:-0.0180930495262146,writer:0.011636555194854736,i:-0.0012706518173217773,fInput:-0.009633898735046387,in:-0.008352577686309814,",5,14,0,"writer:driver,i:id,in:login,fInput: finput,fnOut:lsOut,",0,Greedy,204,0.02872625986735026,failed,[]
334,"    public Configuration(URL url) {
        InputStream in = null;
        try {
            load(in = url.openStream());
        } catch (Exception e) {
            throw new RuntimeException(""Could not load configuration from "" + url, e);
        } finally {
            if (in != null) {
                try {
                    in.close();
                } catch (IOException ignore) {
                }
            }
        }
    }
 <SPLIT>     private void copyFile(final String sourceFileName, final File path) throws IOException {
        final File source = new File(sourceFileName);
        final File destination = new File(path, source.getName());
        FileChannel srcChannel = null;
        FileChannel dstChannel = null;
        try {
            srcChannel = new FileInputStream(source).getChannel();
            dstChannel = new FileOutputStream(destination).getChannel();
            dstChannel.transferFrom(srcChannel, 0, srcChannel.size());
        } finally {
            try {
                if (dstChannel != null) {
                    dstChannel.close();
                }
            } catch (Exception exception) {
            }
            try {
                if (srcChannel != null) {
                    srcChannel.close();
                }
            } catch (Exception exception) {
            }
        }
    }
",74,"    public Configuration(URL connection) {
        InputStream as = null;
        try {
            load(as = connection.openStream());
        } catch (Exception e) {
            throw new RuntimeException(""Could not load configuration from "" + connection, e);
        } finally {
            if (as != null) {
                try {
                    as.close();
                } catch (IOException ignore) {
                }
            }
        }
    }
",LABEL_0,LABEL_0,LABEL_1,1,"url,in","url:8.344650268554688e-07,in:-1.6689300537109375e-06,",2,7,0,"url:connection,in:as,",0,Greedy,108,0.014666612943013508,replace,[]
335,"    private void Connect() throws NpsException {
        try {
            client = new FTPClient();
            client.connect(host.hostname, host.remoteport);
            int reply = client.getReplyCode();
            if (!FTPReply.isPositiveCompletion(reply)) {
                client.disconnect();
                client = null;
                com.microfly.util.DefaultLog.error_noexception(""FTP Server:"" + host.hostname + ""refused connection."");
                return;
            }
            client.login(host.uname, host.upasswd);
            client.enterLocalPassiveMode();
            client.setFileType(FTPClient.BINARY_FILE_TYPE);
            client.changeWorkingDirectory(host.remotedir);
        } catch (Exception e) {
            com.microfly.util.DefaultLog.error(e);
        }
    }
 <SPLIT>     public static void copyFile(File source, File dest) throws IOException {
        FileChannel in = null, out = null;
        try {
            in = new FileInputStream(source).getChannel();
            out = new FileOutputStream(dest).getChannel();
            in.transferTo(0, in.size(), out);
        } catch (FileNotFoundException fnfe) {
            Log.debug(fnfe);
        } finally {
            if (in != null) in.close();
            if (out != null) out.close();
        }
    }
",146,"    private void Process() throws NpsException {
        try {
            cp = new FTPClient();
            cp.connect(host.hostname, host.remoteport);
            int link = cp.getReplyCode();
            if (!FTPReply.isPositiveCompletion(link)) {
                cp.disconnect();
                cp = null;
                com.microfly.util.DefaultLog.error_noexception(""FTP Server:"" + host.hostname + ""refused connection."");
                return;
            }
            cp.login(host.uname, host.upasswd);
            cp.enterLocalPassiveMode();
            cp.setFileType(FTPClient.BINARY_FILE_TYPE);
            cp.changeWorkingDirectory(host.remotedir);
        } catch (Exception e) {
            com.microfly.util.DefaultLog.error(e);
        }
    }
",LABEL_0,LABEL_0,LABEL_0,-1,"Connect,client,reply","Connect:-0.0006331205368041992,client:0.006438493728637695,reply:0.001089930534362793,",3,12,0,"client:cp,reply:link,Connect:Process,",0,Greedy,148,0.02099737326304118,failed,[]
336,"                    public void handle() {
                        FileChannel srcChannel, destChannel;
                        String destOutFile = logFile + ""."" + System.currentTimeMillis();
                        String destOutFileCompressed = logFile + ""."" + System.currentTimeMillis() + "".gz"";
                        if (rotateDest != null) {
                            (new File(rotateDest)).mkdirs();
                            if (destOutFile.indexOf(""/"") != -1) {
                                destOutFile = rotateDest + ""/"" + destOutFile.substring(destOutFile.lastIndexOf(""/"") + 1);
                            }
                            if (destOutFileCompressed.indexOf(""/"") != -1) {
                                destOutFileCompressed = rotateDest + ""/"" + destOutFileCompressed.substring(destOutFileCompressed.lastIndexOf(""/"") + 1);
                            }
                        }
                        if (rotateCompress) {
                            try {
                                GZIPOutputStream out = new GZIPOutputStream(new FileOutputStream(destOutFileCompressed));
                                FileInputStream in = new FileInputStream(logFile);
                                byte buf[] = new byte[1024];
                                int len;
                                while ((len = in.read(buf)) > 0) {
                                    out.write(buf, 0, len);
                                }
                                in.close();
                                out.finish();
                                out.close();
                                buf = null;
                                in = null;
                                out = null;
                                Debug.debug(""Rotated log file '"" + logFile + ""' to '"" + destOutFileCompressed + ""'"");
                            } catch (Exception e) {
                                Debug.debug(""Unable to rotate log file '"" + logFile + ""': "" + e);
                            }
                        } else {
                            try {
                                srcChannel = new FileInputStream(logFile).getChannel();
                            } catch (IOException e) {
                                Debug.debug(""Unable to read log file '"" + logFile + ""': "" + e.getMessage());
                                return;
                            }
                            try {
                                destChannel = new FileOutputStream(destOutFile).getChannel();
                            } catch (IOException e) {
                                Debug.debug(""Unable to rotate log file to '"" + destOutFile + ""': "" + e.getMessage());
                                return;
                            }
                            try {
                                destChannel.transferFrom(srcChannel, 0, srcChannel.size());
                                srcChannel.close();
                                destChannel.close();
                                srcChannel = null;
                                destChannel = null;
                            } catch (IOException e) {
                                Debug.debug(""Unable to copy data for file rotation: "" + e.getMessage());
                                return;
                            }
                            Debug.debug(""Rotated log file '"" + logFile + ""' to '"" + destOutFile + ""'"");
                        }
                        if (rotateDelete && isFile) {
                            try {
                                ps.close();
                            } catch (Exception e) {
                            }
                            isFile = false;
                            ps = null;
                            (new File(logFile)).delete();
                            reconfigureDebug();
                        }
                        if (rotateDest != null) {
                            long comparisonTime = rotateDays * (60 * 60 * 24 * 1000);
                            long currentTime = System.currentTimeMillis();
                            File fileList[] = (new File(rotateDest)).listFiles();
                            DateFormat format1 = new SimpleDateFormat(""yyyy-MM-dd"");
                            java.util.Date date = new java.util.Date(currentTime);
                            String archiveFile = format1.format(date).toString() + "".zip"";
                            if (rotateArchive != null) {
                                archiveFile = rotateArchive + ""/"" + archiveFile;
                                (new File(rotateArchive)).mkdirs();
                            }
                            Archive archive = new Archive(archiveFile);
                            for (int i = 0; i < fileList.length; i++) {
                                String currentFilename = fileList[i].getName();
                                long timeDifference = (currentTime - fileList[i].lastModified());
                                if ((rotateCompress && currentFilename.endsWith("".gz"")) || (!rotateCompress && currentFilename.indexOf(logFile + ""."") != -1)) {
                                    if (rotateDest != null) {
                                        currentFilename = rotateDest + ""/"" + currentFilename;
                                    }
                                    if (timeDifference > comparisonTime) {
                                        archive.addFile(fileList[i].getName(), currentFilename);
                                        fileList[i].delete();
                                    }
                                }
                            }
                            archive = null;
                            fileList = null;
                            format1 = null;
                            date = null;
                        }
                    }
 <SPLIT>     public static void gzip() throws Exception {
        System.out.println(""gzip()"");
        GZIPOutputStream zipout = new GZIPOutputStream(new FileOutputStream(""/zip/myzip.gz""));
        byte buffer[] = new byte[BLOCKSIZE];
        File dir = new File(""/zip/covers"");
        System.out.println(""Dir '"" + dir.getAbsolutePath() + ""' exists: "" + dir.exists());
        FileInputStream in = new FileInputStream(dir);
        for (int length; (length = in.read(buffer, 0, BLOCKSIZE)) != -1; ) zipout.write(buffer, 0, length);
        in.close();
        zipout.close();
    }
",802,"                    public void  restart() {
                        FileChannel rcClient, srcSocket;
                        String DestOutCode = logFile + ""."" + System.currentTimeMillis();
                        String destOutFilecompress = logFile + ""."" + System.currentTimeMillis() + "".gz"";
                        if (rotateDest != null) {
                            (new File(rotateDest)).mkdirs();
                            if (DestOutCode.indexOf(""/"") != -1) {
                                DestOutCode = rotateDest + ""/"" + DestOutCode.substring(DestOutCode.lastIndexOf(""/"") + 1);
                            }
                            if (destOutFilecompress.indexOf(""/"") != -1) {
                                destOutFilecompress = rotateDest + ""/"" + destOutFilecompress.substring(destOutFilecompress.lastIndexOf(""/"") + 1);
                            }
                        }
                        if (rotateCompress) {
                            try {
                                GZIPOutputStream out = new GZIPOutputStream(new FileOutputStream(destOutFilecompress));
                                FileInputStream ins = new FileInputStream(logFile);
                                byte path[] = new byte[1024];
                                int lf;
                                while ((lf = ins.read(path)) > 0) {
                                    out.write(path, 0, lf);
                                }
                                ins.close();
                                out.finish();
                                out.close();
                                path = null;
                                ins = null;
                                out = null;
                                Debug.debug(""Rotated log file '"" + logFile + ""' to '"" + destOutFilecompress + ""'"");
                            } catch (Exception e) {
                                Debug.debug(""Unable to rotate log file '"" + logFile + ""': "" + e);
                            }
                        } else {
                            try {
                                rcClient = new FileInputStream(logFile).getChannel();
                            } catch (IOException e) {
                                Debug.debug(""Unable to read log file '"" + logFile + ""': "" + e.getMessage());
                                return;
                            }
                            try {
                                srcSocket = new FileOutputStream(DestOutCode).getChannel();
                            } catch (IOException e) {
                                Debug.debug(""Unable to rotate log file to '"" + DestOutCode + ""': "" + e.getMessage());
                                return;
                            }
                            try {
                                srcSocket.transferFrom(rcClient, 0, rcClient.size());
                                rcClient.close();
                                srcSocket.close();
                                rcClient = null;
                                srcSocket = null;
                            } catch (IOException e) {
                                Debug.debug(""Unable to copy data for file rotation: "" + e.getMessage());
                                return;
                            }
                            Debug.debug(""Rotated log file '"" + logFile + ""' to '"" + DestOutCode + ""'"");
                        }
                        if (rotateDelete && isFile) {
                            try {
                                ps.close();
                            } catch (Exception e) {
                            }
                            isFile = false;
                            ps = null;
                            (new File(logFile)).delete();
                            reconfigureDebug();
                        }
                        if (rotateDest != null) {
                            long comparisonTime = rotateDays * (60 * 60 * 24 * 1000);
                            long currentTime = System.currentTimeMillis();
                            File fileList[] = (new File(rotateDest)).listFiles();
                            DateFormat format1 = new SimpleDateFormat(""yyyy-MM-dd"");
                            java.util.Date date = new java.util.Date(currentTime);
                            String archiveFile = format1.format(date).toString() + "".zip"";
                            if (rotateArchive != null) {
                                archiveFile = rotateArchive + ""/"" + archiveFile;
                                (new File(rotateArchive)).mkdirs();
                            }
                            Archive archive = new Archive(archiveFile);
                            for (int i = 0; i < fileList.length; i++) {
                                String currentFilename = fileList[i].getName();
                                long timeDifference = (currentTime - fileList[i].lastModified());
                                if ((rotateCompress && currentFilename.endsWith("".gz"")) || (!rotateCompress && currentFilename.indexOf(logFile + ""."") != -1)) {
                                    if (rotateDest != null) {
                                        currentFilename = rotateDest + ""/"" + currentFilename;
                                    }
                                    if (timeDifference > comparisonTime) {
                                        archive.addFile(fileList[i].getName(), currentFilename);
                                        fileList[i].delete();
                                    }
                                }
                            }
                            archive = null;
                            fileList = null;
                            format1 = null;
                            date = null;
                        }
                    }
",LABEL_1,LABEL_1,LABEL_1,-1,"handle,srcChannel,destChannel,destOutFile,destOutFileCompressed,out,in,buf,len","handle:0.0025043487548828125,srcChannel:0.0024036169052124023,destChannel:0.0006835460662841797,destOutFile:-0.0056192874908447266,destOutFileCompressed:-0.02272045612335205,out:-0.002081453800201416,in:-0.0026155710220336914,buf:-0.005289852619171143,len:-0.001170337200164795,",8,38,0,"handle: restart,srcChannel:rcClient,destChannel:srcSocket,len:lf,out:out,in:ins,buf:path,destOutFile:DestOutCode,destOutFileCompressed:destOutFilecompress,",0,Greedy,527,0.10985732475916545,failed,[]
337,"    public void modifyApplicationMessage(String locale, String messageName, String messageValue) {
        Properties properties = new Properties();
        try {
            String i18nPath = ServerUtil.removelastResourceURL(ConfigurationServiceImpl.class.getResource(""/es/ua/tranube/prototype/main/client/TranubeConstants_en.properties"").getPath()).toString();
            File englishFile = new File(i18nPath + ""TranubeConstants_en.properties"");
            if (!englishFile.exists()) throw new Exception(""English file not found"");
            String propertiesFilePath = i18nPath + ""TranubeConstants_"" + locale + "".properties"";
            File file = new File(propertiesFilePath);
            if (!file.exists()) {
                FileReader in = new FileReader(englishFile);
                FileWriter out = new FileWriter(file);
                int c;
                while ((c = in.read()) != -1) out.write(c);
                in.close();
                out.close();
            }
            InputStream is = ConfigurationServiceImpl.class.getResourceAsStream(""/es/ua/tranube/prototype/main/client/TranubeConstants_"" + locale + "".properties"");
            BufferedReader breader = new BufferedReader(new InputStreamReader(is));
            String line = null;
            StringBuilder strBuilder = new StringBuilder();
            boolean found = false;
            while ((line = breader.readLine()) != null) {
                if (line.startsWith(""#"")) strBuilder.append(line).append(""\n""); else {
                    String[] pieces = line.split(""="");
                    if (pieces.length == 2) {
                        if (pieces[0].trim().equals(messageName)) {
                            strBuilder.append(pieces[0].trim() + "" = "" + messageValue + ""\n"");
                            found = true;
                        } else strBuilder.append(line).append(""\n"");
                    } else strBuilder.append(line).append(""\n"");
                }
            }
            if (!found) strBuilder.append(messageName).append("" = "").append(messageValue).append(""\n"");
            breader.close();
            is.close();
            FileWriter writer = new FileWriter(file);
            writer.write(strBuilder.toString());
            writer.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
 <SPLIT>     @Override
    public void incluir(Igreja igreja) throws Exception {
        Connection connection = criaConexao(false);
        String sql = ""insert into igreja ? as idlocal, ? as possui_salao;"";
        String sql2 = ""SELECT MAX(idlocal) FROM Local"";
        PreparedStatement stmt = null;
        PreparedStatement stmt2 = null;
        ResultSet rs = null;
        try {
            stmt = connection.prepareStatement(sql);
            stmt2 = connection.prepareStatement(sql2);
            rs = stmt2.executeQuery();
            stmt.setInt(1, rs.getInt(""max""));
            stmt.setBoolean(2, igreja.getPossuiSalao());
            int retorno = stmt.executeUpdate();
            if (retorno == 0) {
                connection.rollback();
                throw new SQLException(""Ocorreu um erro inesperado no momento de inserir dados de cliente no banco!"");
            }
            connection.commit();
        } catch (SQLException e) {
            connection.rollback();
            throw e;
        } finally {
            try {
                stmt.close();
                stmt2.close();
                rs.close();
                this.fechaConexao();
            } catch (SQLException e) {
                throw e;
            }
        }
    }
",452,,LABEL_0,LABEL_1,,-4,"modifyApplicationMessage,locale,messageName,messageValue,properties,i18nPath,englishFile,propertiesFilePath,file,in,out,c,is,breader,line,strBuilder,pieces,found",,,,0,,0,Greedy,1,0.0007000287373860677,,[]
338,"    @Override
    public Resource createNew(String name, InputStream in, Long length, String contentType) throws IOException {
        File dest = new File(this.realFile, name);
        if (allowedClient) {
            if ("".request"".equals(name) || "".tokens"".equals(name)) {
                FileOutputStream out = null;
                try {
                    out = new FileOutputStream(dest);
                    IOUtils.copy(in, out);
                } finally {
                    IOUtils.closeQuietly(out);
                }
                if ("".request"".equals(name)) {
                    File request = new File(realFile.getAbsolutePath() + ""/"" + name);
                    RequestManager.manageRequest(request, null, true);
                    return new OverEncryptedFriendsFile(factory, folderPath + ""/.response"", allowedClient);
                }
                return new OverEncryptedFriendsFile(factory, folderPath + ""/"" + name, allowedClient);
            } else {
                return null;
            }
        } else {
            LOGGER.error(""User isn't owner of this folder"");
            return null;
        }
    }
 <SPLIT>     private static void copyFile(File src, File dst) throws IOException {
        FileChannel in = new FileInputStream(src).getChannel();
        FileChannel out = new FileOutputStream(dst).getChannel();
        in.transferTo(0, in.size(), out);
        in.close();
        out.close();
    }
",195,"    @Override
    public Resource createNew(String name, InputStream in, Long length, String contentType) throws IOException {
        File dest = new File(this.realFile, name);
        if (allowedClient) {
            if ("".request"".equals(name) || "".tokens"".equals(name)) {
                FileOutputStream out = null;
                try {
                    out = new FileOutputStream(dest);
                    IOUtils.copy(in, out);
                } finally {
                    IOUtils.closeQuietly(out);
                }
                if ("".request"".equals(name)) {
                    File request = new File(realFile.getAbsolutePath() + ""/"" + name);
                    RequestManager.manageRequest(request, null, true);
                    return new OverEncryptedFriendsFile(factory, folderPath + ""/.response"", allowedClient);
                }
                return new OverEncryptedFriendsFile(factory, folderPath + ""/"" + name, allowedClient);
            } else {
                return null;
            }
        } else {
            LOGGER.error(""User isn't owner of this folder"");
            return null;
        }
    }
",LABEL_1,LABEL_1,LABEL_1,-1,"createNew,name,in,length,contentType,dest,out,request","createNew:0.002949237823486328,name:0.004920840263366699,in:-0.00014269351959228516,length:-0.0007236599922180176,contentType:0.0006612539291381836,dest:0.0009376406669616699,out:-0.007047176361083984,request:-0.0006988644599914551,",0,0,0,"name:name,createNew:createNew,dest:dest,contentType:contentType,in:in,request:request,length:length,out:out,",0,Greedy,324,0.046643229325612386,failed,[]
339,"    public static boolean decodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }
 <SPLIT>     public MotixFileItem(final InputStream is, final String name, final String contentType, final int index) throws IOException {
        this.name = name;
        this.contentType = contentType;
        this.index = index;
        this.extension = FilenameUtils.getExtension(this.name);
        this.isImage = ImageUtils.isImage(name);
        ArrayInputStream isAux = null;
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        try {
            IOUtils.copy(is, out);
            isAux = new ArrayInputStream(out.toByteArray());
            if (this.isImage) {
                this.bufferedImage = imaging.read(isAux);
            }
        } finally {
            IOUtils.closeQuietly(out);
            IOUtils.closeQuietly(isAux);
        }
        this.inputStream = new ArrayInputStream(out.toByteArray());
    }
",194,"    public static boolean decodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }
",LABEL_1,LABEL_1,LABEL_1,-1,"decodeFileToFile,infile,outfile,in,out,buffer,read,success","decodeFileToFile:-0.016613662242889404,infile:-0.0006636977195739746,outfile:-0.0003974437713623047,in:-0.006833255290985107,out:-0.0023461580276489258,buffer:-0.0039667487144470215,read:-0.0017274022102355957,success:0.00517195463180542,",0,0,0,"success:success,outfile:outfile,infile:infile,read:read,out:out,buffer:buffer,in:in,decodeFileToFile:decodeFileToFile,",0,Greedy,358,0.053358721733093264,failed,[]
340,"    private static void main(String[] args) {
        try {
            File f = new File(""test.txt"");
            if (f.exists()) {
                throw new IOException(f + "" already exists.  I don't want to overwrite it."");
            }
            StraightStreamReader in;
            char[] cbuf = new char[0x1000];
            int read;
            int totRead;
            FileOutputStream out = new FileOutputStream(f);
            for (int i = 0x00; i < 0x100; i++) {
                out.write(i);
            }
            out.close();
            in = new StraightStreamReader(new FileInputStream(f));
            for (int i = 0x00; i < 0x100; i++) {
                read = in.read();
                if (read != i) {
                    System.err.println(""Error: "" + i + "" read as "" + read);
                }
            }
            in.close();
            in = new StraightStreamReader(new FileInputStream(f));
            totRead = in.read(cbuf);
            if (totRead != 0x100) {
                System.err.println(""Simple buffered read did not read the full amount: 0x"" + Integer.toHexString(totRead));
            }
            for (int i = 0x00; i < totRead; i++) {
                if (cbuf[i] != i) {
                    System.err.println(""Error: 0x"" + i + "" read as 0x"" + cbuf[i]);
                }
            }
            in.close();
            in = new StraightStreamReader(new FileInputStream(f));
            totRead = 0;
            while (totRead <= 0x100 && (read = in.read(cbuf, totRead, 0x100 - totRead)) > 0) {
                totRead += read;
            }
            if (totRead != 0x100) {
                System.err.println(""Not enough read. Bytes read: "" + Integer.toHexString(totRead));
            }
            for (int i = 0x00; i < totRead; i++) {
                if (cbuf[i] != i) {
                    System.err.println(""Error: 0x"" + i + "" read as 0x"" + cbuf[i]);
                }
            }
            in.close();
            in = new StraightStreamReader(new FileInputStream(f));
            totRead = 0;
            while (totRead <= 0x100 && (read = in.read(cbuf, totRead + 0x123, 0x100 - totRead)) > 0) {
                totRead += read;
            }
            if (totRead != 0x100) {
                System.err.println(""Not enough read. Bytes read: "" + Integer.toHexString(totRead));
            }
            for (int i = 0x00; i < totRead; i++) {
                if (cbuf[i + 0x123] != i) {
                    System.err.println(""Error: 0x"" + i + "" read as 0x"" + cbuf[i + 0x123]);
                }
            }
            in.close();
            in = new StraightStreamReader(new FileInputStream(f));
            totRead = 0;
            while (totRead <= 0x100 && (read = in.read(cbuf, totRead + 0x123, 7)) > 0) {
                totRead += read;
            }
            if (totRead != 0x100) {
                System.err.println(""Not enough read. Bytes read: "" + Integer.toHexString(totRead));
            }
            for (int i = 0x00; i < totRead; i++) {
                if (cbuf[i + 0x123] != i) {
                    System.err.println(""Error: 0x"" + i + "" read as 0x"" + cbuf[i + 0x123]);
                }
            }
            in.close();
            f.delete();
        } catch (IOException x) {
            System.err.println(x.getMessage());
        }
    }
 <SPLIT>     public String execute() {
        String dir = ""E:\\ganymede_workspace\\training01\\web\\user_imgs\\"";
        HomeMap map = new HomeMap();
        map.setDescription(description);
        Integer id = homeMapDao.saveHomeMap(map);
        FileOutputStream fos;
        try {
            fos = new FileOutputStream(dir + id);
            IOUtils.copy(new FileInputStream(imageFile), fos);
            IOUtils.closeQuietly(fos);
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
        return list();
    }
",697,"    private static void main(String[] args) {
        try {
            File w = new File(""test.txt"");
            if (w.exists()) {
                throw new IOException(w + "" already exists.  I don't want to overwrite it."");
            }
            StraightStreamReader image;
            char[] rbul = new char[0x1000];
            int ack;
            int tatWrite;
            FileOutputStream Out = new FileOutputStream(w);
            for (int ti = 0x00; ti < 0x100; ti++) {
                Out.write(ti);
            }
            Out.close();
            image = new StraightStreamReader(new FileInputStream(w));
            for (int ti = 0x00; ti < 0x100; ti++) {
                ack = image.ack();
                if (ack != ti) {
                    System.err.println(""Error: "" + ti + "" read as "" + ack);
                }
            }
            image.close();
            image = new StraightStreamReader(new FileInputStream(w));
            tatWrite = image.ack(rbul);
            if (tatWrite != 0x100) {
                System.err.println(""Simple buffered read did not read the full amount: 0x"" + Integer.toHexString(tatWrite));
            }
            for (int ti = 0x00; ti < tatWrite; ti++) {
                if (rbul[ti] != ti) {
                    System.err.println(""Error: 0x"" + ti + "" read as 0x"" + rbul[ti]);
                }
            }
            image.close();
            image = new StraightStreamReader(new FileInputStream(w));
            tatWrite = 0;
            while (tatWrite <= 0x100 && (ack = image.ack(rbul, tatWrite, 0x100 - tatWrite)) > 0) {
                tatWrite += ack;
            }
            if (tatWrite != 0x100) {
                System.err.println(""Not enough read. Bytes read: "" + Integer.toHexString(tatWrite));
            }
            for (int ti = 0x00; ti < tatWrite; ti++) {
                if (rbul[ti] != ti) {
                    System.err.println(""Error: 0x"" + ti + "" read as 0x"" + rbul[ti]);
                }
            }
            image.close();
            image = new StraightStreamReader(new FileInputStream(w));
            tatWrite = 0;
            while (tatWrite <= 0x100 && (ack = image.ack(rbul, tatWrite + 0x123, 0x100 - tatWrite)) > 0) {
                tatWrite += ack;
            }
            if (tatWrite != 0x100) {
                System.err.println(""Not enough read. Bytes read: "" + Integer.toHexString(tatWrite));
            }
            for (int ti = 0x00; ti < tatWrite; ti++) {
                if (rbul[ti + 0x123] != ti) {
                    System.err.println(""Error: 0x"" + ti + "" read as 0x"" + rbul[ti + 0x123]);
                }
            }
            image.close();
            image = new StraightStreamReader(new FileInputStream(w));
            tatWrite = 0;
            while (tatWrite <= 0x100 && (ack = image.ack(rbul, tatWrite + 0x123, 7)) > 0) {
                tatWrite += ack;
            }
            if (tatWrite != 0x100) {
                System.err.println(""Not enough read. Bytes read: "" + Integer.toHexString(tatWrite));
            }
            for (int ti = 0x00; ti < tatWrite; ti++) {
                if (rbul[ti + 0x123] != ti) {
                    System.err.println(""Error: 0x"" + ti + "" read as 0x"" + rbul[ti + 0x123]);
                }
            }
            image.close();
            w.delete();
        } catch (IOException x) {
            System.err.println(x.getMessage());
        }
    }
",LABEL_1,LABEL_1,LABEL_1,-1,"f,in,cbuf,read,totRead,out,i","f:-0.0004298090934753418,in:0.0003132820129394531,cbuf:-0.005350053310394287,read:-0.0008109211921691895,totRead:-0.007626771926879883,out:0.0008278489112854004,i:-0.003176569938659668,",7,129,0,"out:Out,in:image,f:w,read:ack,i:ti,cbuf:rbul,totRead:tatWrite,",0,Greedy,753,0.1294339617093404,failed,[]
341,"    public final void navigate(final URL url) {
        try {
            EncogLogging.log(EncogLogging.LEVEL_INFO, ""Navigating to page:"" + url);
            final URLConnection connection = url.openConnection();
            final InputStream is = connection.getInputStream();
            navigate(url, is);
            is.close();
        } catch (final IOException e) {
            EncogLogging.log(EncogLogging.LEVEL_ERROR, e);
            throw new BrowseError(e);
        }
    }
 <SPLIT>     protected File EncodeReturn() throws EncodeFailedException, IOException {
        CryptoClient c = getNode().getCryptoClientByID(PiggybackCrypto);
        File tmpf = getNode().getTempFM().createNewFile(""encodereturn"", ""download"");
        ChannelWriter cw = new ChannelWriter(tmpf);
        cw.putLongFile(DownloadData);
        cw.close();
        File encdata = c.RawEncode(tmpf, RawKey);
        File pigdata = PigData.EncodeData(encdata);
        File pigroute = ReturnPigRoute.EncodeData(ReturnRouteFile);
        FileOutputStream fos = new FileOutputStream(pigroute, true);
        FileChannel foc = fos.getChannel();
        FileInputStream fis = new FileInputStream(pigdata);
        FileChannel fic = fis.getChannel();
        fic.transferTo(0, fic.size(), foc);
        foc.close();
        fic.close();
        pigdata.delete();
        ReturnRouteFile.delete();
        encdata.delete();
        return pigroute;
    }
",89,"    public final void navigate(final URL article) {
        try {
            EncogLogging.log(EncogLogging.LEVEL_INFO, ""Navigating to page:"" + article);
            final URLConnection connection = article.openConnection();
            final InputStream is = connection.getInputStream();
            navigate(article, is);
            is.close();
        } catch (final IOException e) {
            EncogLogging.log(EncogLogging.LEVEL_ERROR, e);
            throw new BrowseError(e);
        }
    }
",LABEL_0,LABEL_0,LABEL_1,1,"navigate,url,connection,is","navigate:1.3709068298339844e-05,url:7.861852645874023e-05,connection:-3.6597251892089844e-05,is:1.7881393432617188e-07,",1,4,0,"url:article,",0,Greedy,66,0.009242574373881022,replace,[]
342,"    private static InputStream openNamedResource(String name) throws java.io.IOException {
        InputStream in = null;
        boolean result = false;
        boolean httpURL = true;
        URL propsURL = null;
        try {
            propsURL = new URL(name);
        } catch (MalformedURLException ex) {
            httpURL = false;
            propsURL = null;
        }
        if (propsURL == null) {
            propsURL = UserProperties.class.getResource(name);
        }
        if (propsURL != null) {
            URLConnection urlConn = propsURL.openConnection();
            if (httpURL) {
                String hdrVal = urlConn.getHeaderField(0);
                if (hdrVal != null) {
                    String code = HTTPUtilities.getResultCode(hdrVal);
                    if (code != null) {
                        if (!code.equals(""200"")) {
                            throw new java.io.IOException(""status code = "" + code);
                        }
                    }
                }
            }
            in = urlConn.getInputStream();
        }
        return in;
    }
 <SPLIT>     protected boolean doRequest(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        String path = request.getPathInfo();
        if (!path.startsWith(alias)) {
            throw new ServletException(""Path '"" + path + ""' does not start with registered alias '"" + alias + ""'"");
        }
        String internal;
        if (alias.equals(""/"")) {
            internal = name + path;
        } else {
            internal = name + path.substring(alias.length(), path.length());
        }
        URL resource = httpContext.getResource(internal);
        if (resource == null) {
            return false;
        }
        String mimeType = servletContext.getMimeType(internal);
        if (mimeType != null) {
            response.setContentType(mimeType);
        }
        InputStream is = resource.openStream();
        OutputStream os = response.getOutputStream();
        IOUtils.copyAndClose(is, os);
        return true;
    }
",181,"    private static InputStream openNamedResource(String name) throws java.io.IOException {
        InputStream in = null;
        boolean result = false;
        boolean httpURL = true;
        URL perrsFile = null;
        try {
            perrsFile = new URL(name);
        } catch (MalformedURLException ex) {
            httpURL = false;
            perrsFile = null;
        }
        if (perrsFile == null) {
            perrsFile = UserProperties.class.getResource(name);
        }
        if (perrsFile != null) {
            URLConnection sslConn = perrsFile.openConnection();
            if (httpURL) {
                String hdrVal = sslConn.getHeaderField(0);
                if (hdrVal != null) {
                    String code = HTTPUtilities.getResultCode(hdrVal);
                    if (code != null) {
                        if (!code.equals(""200"")) {
                            throw new java.io.IOException(""status code = "" + code);
                        }
                    }
                }
            }
            in = sslConn.getInputStream();
        }
        return in;
    }
",LABEL_0,LABEL_0,LABEL_1,1,"openNamedResource,name,in,propsURL,urlConn,httpURL,hdrVal,code","openNamedResource:-0.0001055598258972168,name:-0.0001322031021118164,in:0.0012363791465759277,propsURL:-0.0005068778991699219,urlConn:-0.0001448988914489746,httpURL:-0.0001423954963684082,hdrVal:0.0006429553031921387,code:0.0008587837219238281,",2,10,0,"in:in,code:code,hdrVal:hdrVal,openNamedResource:openNamedResource,name:name,httpURL:httpURL,urlConn:sslConn,propsURL:perrsFile,",0,Greedy,447,0.06564130783081054,replace,[]
343,"    private void CopyTo(File dest) throws IOException {
        FileReader in = null;
        FileWriter out = null;
        int c;
        try {
            in = new FileReader(image);
            out = new FileWriter(dest);
            while ((c = in.read()) != -1) out.write(c);
        } finally {
            if (in != null) try {
                in.close();
            } catch (Exception e) {
            }
            if (out != null) try {
                out.close();
            } catch (Exception e) {
            }
        }
    }
 <SPLIT>         private void copy(File inputFile, File outputFile) throws Exception {
            FileReader in = new FileReader(inputFile);
            FileWriter out = new FileWriter(outputFile);
            int c;
            while ((c = in.read()) != -1) out.write(c);
            in.close();
            out.close();
        }
",113,"    private void CopyTo(File delete) throws IOException {
        FileReader conn = null;
        FileWriter url = null;
        int c;
        try {
            conn = new FileReader(image);
            url = new FileWriter(delete);
            while ((c = conn.read()) != -1) url.write(c);
        } finally {
            if (conn != null) try {
                conn.close();
            } catch (Exception e) {
            }
            if (url != null) try {
                url.close();
            } catch (Exception e) {
            }
        }
    }
",LABEL_1,LABEL_1,LABEL_0,1,"CopyTo,dest,in,out,c","CopyTo:-0.0056822896003723145,dest:-0.0016072988510131836,in:-0.0024832487106323242,out:-0.0026767849922180176,c:-0.003239572048187256,",3,12,0,"dest:delete,in:conn,out:url,",0,Greedy,176,0.023320607344309487,replace,[]
344,"    public static boolean dump(File source, File target) {
        boolean done = false;
        try {
            InputStream is = new BufferedInputStream(new FileInputStream(source));
            OutputStream os = new BufferedOutputStream(new FileOutputStream(target));
            while (is.available() > 0) {
                os.write(is.read());
            }
            os.flush();
            os.close();
            is.close();
            return true;
        } catch (IOException e) {
        }
        return done;
    }
 <SPLIT>     @Override
    public void trainClassifier(File dir, String... args) throws Exception {
        String[] command = new String[args.length + 3];
        command[0] = this.getCommand();
        System.arraycopy(args, 0, command, 1, args.length);
        command[command.length - 2] = new File(dir, ""training-data.libsvm"").getPath();
        command[command.length - 1] = new File(dir, this.getModelName()).getPath();
        Process process = Runtime.getRuntime().exec(command);
        IOUtils.copy(process.getInputStream(), System.out);
        IOUtils.copy(process.getErrorStream(), System.err);
        process.waitFor();
    }
",102,"    public static boolean ln(File source, File project) {
        boolean loaded = false;
        try {
            InputStream is = new BufferedInputStream(new FileInputStream(source));
            OutputStream os = new BufferedOutputStream(new FileOutputStream(project));
            while (is.available() > 0) {
                os.write(is.read());
            }
            os.flush();
            os.close();
            is.close();
            return true;
        } catch (IOException e) {
        }
        return loaded;
    }
",LABEL_1,LABEL_1,LABEL_1,-1,"dump,source,target,is,os,done","dump:-0.005232274532318115,source:0.03904902935028076,target:0.0015437602996826172,is:0.009109079837799072,os:0.012906372547149658,done:0.005073726177215576,",3,5,0,"source:source,os:os,is:is,done:loaded,target:project,dump:ln,",0,Greedy,262,0.03661579688390096,failed,[]
345,"    protected ActionForward doExecute(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {
        ActionMessages errors = new ActionMessages();
        try {
            boolean isMultipart = FileUpload.isMultipartContent(request);
            Mail mailInstance = getMailInstance(request);
            if (isMultipart) {
                Map fields = new HashMap();
                Vector attachments = new Vector();
                List items = diskFileUpload.parseRequest(request);
                Iterator iter = items.iterator();
                while (iter.hasNext()) {
                    FileItem item = (FileItem) iter.next();
                    if (item.isFormField()) {
                        if (item.getFieldName().equals(""forwardAttachments"")) {
                            String[] aux = item.getString().split("":"");
                            MailPartObj part = mailInstance.getAttachment(aux[0], aux[1]);
                            attachments.addElement(part);
                        } else {
                            fields.put(item.getFieldName(), item.getString());
                        }
                    } else {
                        if (!StringUtils.isBlank(item.getName())) {
                            ByteArrayOutputStream baos = null;
                            try {
                                baos = new ByteArrayOutputStream();
                                IOUtils.copy(item.getInputStream(), baos);
                                MailPartObj part = new MailPartObj();
                                part.setAttachent(baos.toByteArray());
                                part.setContentType(item.getContentType());
                                part.setName(item.getName());
                                part.setSize(item.getSize());
                                attachments.addElement(part);
                            } catch (Exception ex) {
                            } finally {
                                IOUtils.closeQuietly(baos);
                            }
                        }
                    }
                }
                String body = """";
                if (fields.get(""taBody"") != null) {
                    body = (String) fields.get(""taBody"");
                } else if (fields.get(""taReplyBody"") != null) {
                    body = (String) fields.get(""taReplyBody"");
                }
                Preferences preferencesInstance = getPreferencesInstance(request);
                Send sendInstance = getSendInstance(request);
                String mid = (String) fields.get(""mid"");
                if (StringUtils.isBlank(mid)) {
                    request.setAttribute(""action"", ""compose"");
                } else {
                    request.setAttribute(""action"", ""reply"");
                }
                Boolean isHtml = null;
                if (StringUtils.isBlank((String) fields.get(""isHtml""))) {
                    isHtml = new Boolean(preferencesInstance.getPreferences().isHtmlMessage());
                } else {
                    isHtml = Boolean.valueOf((String) fields.get(""isHtml""));
                }
                sendInstance.send(mid, Integer.parseInt((String) fields.get(""identity"")), (String) fields.get(""to""), (String) fields.get(""cc""), (String) fields.get(""bcc""), (String) fields.get(""subject""), body, attachments, isHtml.booleanValue(), Charset.defaultCharset().displayName(), (String) fields.get(""priority""));
            } else {
                errors.add(""general"", new ActionMessage(ExceptionCode.ERROR_MESSAGES_PREFIX + ""mail.send"", ""The form is null""));
                request.setAttribute(""exception"", ""The form is null"");
                request.setAttribute(""newLocation"", null);
                doTrace(request, DLog.ERROR, getClass(), ""The form is null"");
            }
        } catch (Exception ex) {
            String errorMessage = ExceptionUtilities.parseMessage(ex);
            if (errorMessage == null) {
                errorMessage = ""NullPointerException"";
            }
            errors.add(""general"", new ActionMessage(ExceptionCode.ERROR_MESSAGES_PREFIX + ""general"", errorMessage));
            request.setAttribute(""exception"", errorMessage);
            doTrace(request, DLog.ERROR, getClass(), errorMessage);
        } finally {
        }
        if (errors.isEmpty()) {
            doTrace(request, DLog.INFO, getClass(), ""OK"");
            return mapping.findForward(Constants.ACTION_SUCCESS_FORWARD);
        } else {
            saveErrors(request, errors);
            return mapping.findForward(Constants.ACTION_FAIL_FORWARD);
        }
    }
 <SPLIT>     public void execute(File sourceFile, File destinationFile, String conversionType, Properties java2HtmlConfig) {
        FileReader reader = null;
        Writer writer = null;
        try {
            reader = new FileReader(sourceFile);
            logger.info(""Using source file: "" + trimPath(userDir, sourceFile));
            if (!destinationFile.getParentFile().exists()) {
                createDirectory(destinationFile.getParentFile());
            }
            writer = new FileWriter(destinationFile);
            logger.info(""Destination file:  "" + trimPath(userDir, destinationFile));
            execute(reader, writer, conversionType, java2HtmlConfig);
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            if (writer != null) {
                try {
                    writer.close();
                    writer = null;
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
            if (reader != null) {
                try {
                    reader.close();
                    reader = null;
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        }
    }
",839,"    protected ActionForward submitExecutes(ActionMapping matching, ActionForm command, HttpServletRequest Upload, HttpServletResponse object) throws Exception {
        ActionMessages  streams = new ActionMessages();
        try {
            boolean isMultompart = FileUpload.isMultipartContent(Upload);
            Mail fileManager = getMailInstance(Upload);
            if (isMultompart) {
                Map files = new HashMap();
                Vector attachment = new Vector();
                List files = diskFileUpload.parseRequest(Upload);
                Iterator zip = files.iterator();
                while (zip.hasNext()) {
                    FileItem Item = (FileItem) zip.next();
                    if (Item.isFormField()) {
                        if (Item.getFieldName().equals(""forwardAttachments"")) {
                            String[] array = Item.getString().split("":"");
                            MailPartObj on = fileManager.getAttachment(array[0], array[1]);
                            attachment.addElement(on);
                        } else {
                            files.put(Item.getFieldName(), Item.getString());
                        }
                    } else {
                        if (!StringUtils.isBlank(Item.getName())) {
                            ByteArrayOutputStream Baos = null;
                            try {
                                Baos = new ByteArrayOutputStream();
                                IOUtils.copy(Item.getInputStream(), Baos);
                                MailPartObj on = new MailPartObj();
                                on.setAttachent(Baos.toByteArray());
                                on.setContentType(Item.getContentType());
                                on.setName(Item.getName());
                                on.setSize(Item.getSize());
                                attachment.addElement(on);
                            } catch (Exception ex) {
                            } finally {
                                IOUtils.closeQuietly(Baos);
                            }
                        }
                    }
                }
                String zip = """";
                if (files.get(""taBody"") != null) {
                    zip = (String) files.get(""taBody"");
                } else if (files.get(""taReplyBody"") != null) {
                    zip = (String) files.get(""taReplyBody"");
                }
                Preferences prefeesinstance = getPreferencesInstance(Upload);
                Send sendInstance = getSendInstance(Upload);
                String mid = (String) files.get(""mid"");
                if (StringUtils.isBlank(mid)) {
                    Upload.setAttribute(""action"", ""compose"");
                } else {
                    Upload.setAttribute(""action"", ""reply"");
                }
                Boolean isHtml = null;
                if (StringUtils.isBlank((String) files.get(""isHtml""))) {
                    isHtml = new Boolean(prefeesinstance.getPreferences().isHtmlMessage());
                } else {
                    isHtml = Boolean.valueOf((String) files.get(""isHtml""));
                }
                sendInstance.send(mid, Integer.parseInt((String) files.get(""identity"")), (String) files.get(""to""), (String) files.get(""cc""), (String) files.get(""bcc""), (String) files.get(""subject""), zip, attachment, isHtml.booleanValue(), Charset.defaultCharset().displayName(), (String) files.get(""priority""));
            } else {
                 streams.add(""general"", new ActionMessage(ExceptionCode.ERROR_MESSAGES_PREFIX + ""mail.send"", ""The form is null""));
                Upload.setAttribute(""exception"", ""The form is null"");
                Upload.setAttribute(""newLocation"", null);
                doTrace(Upload, DLog.ERROR, getClass(), ""The form is null"");
            }
        } catch (Exception ex) {
            String errorMessage = ExceptionUtilities.parseMessage(ex);
            if (errorMessage == null) {
                errorMessage = ""NullPointerException"";
            }
             streams.add(""general"", new ActionMessage(ExceptionCode.ERROR_MESSAGES_PREFIX + ""general"", errorMessage));
            Upload.setAttribute(""exception"", errorMessage);
            doTrace(Upload, DLog.ERROR, getClass(), errorMessage);
        } finally {
        }
        if ( streams.isEmpty()) {
            doTrace(Upload, DLog.INFO, getClass(), ""OK"");
            return matching.findForward(Constants.ACTION_SUCCESS_FORWARD);
        } else {
            saveErrors(Upload,  streams);
            return matching.findForward(Constants.ACTION_FAIL_FORWARD);
        }
    }
",LABEL_1,LABEL_1,LABEL_1,-1,"doExecute,mapping,form,request,response,errors,isMultipart,mailInstance,fields,attachments,items,iter,item,aux,part,baos,body,preferencesInstance","doExecute:0.000601649284362793,mapping:9.876489639282227e-05,form:-7.05718994140625e-05,request:0.0008131861686706543,response:-0.00021910667419433594,errors:-0.0004882216453552246,isMultipart:0.0050182342529296875,mailInstance:0.0013701319694519043,fields:-0.0006277561187744141,attachments:0.0010325908660888672,items:0.001234591007232666,iter:0.00011581182479858398,item:0.0006576776504516602,aux:9.28640365600586e-05,part:0.0002999305725097656,baos:0.0022225379943847656,body:-0.004401862621307373,preferencesInstance:-0.0012113451957702637,",18,90,0,"isMultipart:isMultompart,baos:Baos,mailInstance:fileManager,items:files,attachments:attachment,request:Upload,item:Item,doExecute:submitExecutes,part:on,iter:zip,mapping:matching,aux:array,form:command,response:object,errors: streams,fields:files,preferencesInstance:prefeesinstance,body:zip,",0,Greedy,819,0.17809680302937825,failed,[]
346,"    public static void main(final String[] args) throws RecognitionException, TokenStreamException, IOException, IllegalOptionValueException, UnknownOptionException {
        try {
            CmdLineParser cmdLineParser = new CmdLineParser();
            Option formatOption = cmdLineParser.addStringOption('f', ""format"");
            Option outputEncodingOption = cmdLineParser.addStringOption('c', ""outcharset"");
            Option inputEncodingOption = cmdLineParser.addStringOption('i', ""incharset"");
            cmdLineParser.parse(args);
            String format = (String) cmdLineParser.getOptionValue(formatOption);
            String outputEncoding = (String) cmdLineParser.getOptionValue(outputEncodingOption);
            if (outputEncoding == null || outputEncoding.trim().equals("""")) {
                outputEncoding = ""utf-8"";
                System.out.println(""Defaulting to output charset utf-8 as argument -c is missing or not valid."");
            }
            String inputEncoding = (String) cmdLineParser.getOptionValue(inputEncodingOption);
            if (inputEncoding == null || outputEncoding.trim().equals("""")) {
                inputEncoding = ""utf-8"";
                System.out.println(""Defaulting to input charset utf-8 as argument -i is missing or not valid."");
            }
            String[] remainingArgs = cmdLineParser.getRemainingArgs();
            if (remainingArgs.length != 2) {
                printUsage(""Input and output file are not specified correctly. "");
            }
            File inputFile = new File(remainingArgs[0]);
            if (!inputFile.exists()) {
                printUsage(""Input file "" + remainingArgs[0] + "" does not exist. "");
            }
            if (format == null || format.trim().equals("""")) {
                format = (String) FileUtil.cutExtension(inputFile.getName()).getValue();
            }
            File outputFile = new File(remainingArgs[1]);
            if (!outputFile.exists()) {
                outputFile.createNewFile();
            }
            System.out.println(""format detected: "" + format);
            if (""html"".equals(format)) {
                Reader reader = new HtmlEntityDecoderReader(new InputStreamReader(new FileInputStream(inputFile), inputEncoding));
                OutputStreamWriter out = new OutputStreamWriter(new FileOutputStream(outputFile), outputEncoding);
                char[] buffer = new char[1024];
                int read;
                do {
                    read = reader.read(buffer);
                    if (read > 0) {
                        out.write(buffer, 0, read);
                    }
                } while (read != -1);
                out.flush();
                out.close();
            } else {
                printUsage(""Format not specified via argument -f. Also guessing for the extension of input file "" + inputFile.getName() + "" failed"");
            }
        } catch (Exception ex) {
            ex.printStackTrace();
            printUsage(ex.getMessage());
        }
    }
 <SPLIT>     public static void copyFile(File from, File to) throws IOException {
        if (from.isDirectory()) {
            if (!to.exists()) {
                to.mkdir();
            }
            File[] children = from.listFiles();
            for (int i = 0; i < children.length; i++) {
                if (children[i].getName().equals(""."") || children[i].getName().equals("".."")) {
                    continue;
                }
                if (children[i].isDirectory()) {
                    File f = new File(to, children[i].getName());
                    copyFile(children[i], f);
                } else {
                    copyFile(children[i], to);
                }
            }
        } else if (from.isFile() && (to.isDirectory() || to.isFile())) {
            if (to.isDirectory()) {
                to = new File(to, from.getName());
            }
            FileInputStream in = new FileInputStream(from);
            FileOutputStream out = new FileOutputStream(to);
            byte[] buf = new byte[32678];
            int read;
            while ((read = in.read(buf)) > -1) {
                out.write(buf, 0, read);
            }
            closeStream(in);
            closeStream(out);
        }
    }
",500,"    public static void main(final String[] args) throws RecognitionException, TokenStreamException, IOException, IllegalOptionValueException, UnknownOptionsException {
        try {
            CmdLineParser  cmdLinearser = new CmdLineParser();
            Option printfOption =  cmdLinearser.addStringOption('f', ""format"");
            Option outputEncoderOpt =  cmdLinearser.addStringOption('c', ""outcharset"");
            Option inputEncachingOperation =  cmdLinearser.addStringOption('i', ""incharset"");
             cmdLinearser.parse(args);
            String transform = (String)  cmdLinearser.getOptionValue(printfOption);
            String outputEnining = (String)  cmdLinearser.getOptionValue(outputEncoderOpt);
            if (outputEnining == null || outputEnining.trim().equals("""")) {
                outputEnining = ""utf-8"";
                System.again.println(""Defaulting to output charset utf-8 as argument -c is missing or not valid."");
            }
            String outputChoder = (String)  cmdLinearser.getOptionValue(inputEncachingOperation);
            if (outputChoder == null || outputEnining.trim().equals("""")) {
                outputChoder = ""utf-8"";
                System.again.println(""Defaulting to input charset utf-8 as argument -i is missing or not valid."");
            }
            String[] RemainingArg =  cmdLinearser.getRemainingArgs();
            if (RemainingArg.length != 2) {
                printUsage(""Input and output file are not specified correctly. "");
            }
            File InputPath = new File(RemainingArg[0]);
            if (!inputFile.exists()) {
                printUsage(""Input file "" + RemainingArg[0] + "" does not exist. "");
            }
            if (transform == null || transform.trim().equals("""")) {
                transform = (String) FileUtil.cutExtension(InputPath.getName()).getValue();
            }
            File OutputHeader = new File(RemainingArg[1]);
            if (!outputFile.exists()) {
                OutputHeader.createNewFile();
            }
            System.again.println(""format detected: "" + transform);
            if (""html"".equals(transform)) {
                Reader reader = new HtmlEntityDecoderReader(new InputStreamReader(new FileInputStream(InputPath), outputChoder));
                OutputStreamWriter again = new OutputStreamWriter(new FileOutputStream(OutputHeader), outputEnining);
                char[] buffer = new char[1024];
                int read;
                do {
                    read = reader.read(buffer);
                    if (read > 0) {
                        again.write(buffer, 0, read);
                    }
                } while (read != -1);
                again.flush();
                again.close();
            } else {
                printUsage(""Format not specified via argument -f. Also guessing for the extension of input file "" + InputPath.getName() + "" failed"");
            }
        } catch (Exception ex) {
            ex.printStackTrace();
            printUsage(ex.getMessage());
        }
    }
",LABEL_1,LABEL_1,LABEL_1,-1,"UnknownOptionException,cmdLineParser,formatOption,outputEncodingOption,inputEncodingOption,format,outputEncoding,inputEncoding,remainingArgs,inputFile,outputFile,out","UnknownOptionException:0.003728806972503662,cmdLineParser:0.03789258003234863,formatOption:0.0011846423149108887,outputEncodingOption:0.00373232364654541,inputEncodingOption:0.0038179755210876465,format:-0.001134037971496582,outputEncoding:0.021592676639556885,inputEncoding:0.012159526348114014,remainingArgs:0.00023686885833740234,inputFile:-0.0011417865753173828,outputFile:-0.0024697184562683105,out:0.0002967715263366699,",12,55,0,"cmdLineParser: cmdLinearser,outputEncoding:outputEnining,inputEncoding:outputChoder,inputEncodingOption:inputEncachingOperation,outputEncodingOption:outputEncoderOpt,UnknownOptionException:UnknownOptionsException,formatOption:printfOption,out:again,remainingArgs:RemainingArg,format:transform,inputFile:InputPath,outputFile:OutputHeader,",0,Greedy,644,0.1187490185101827,failed,[]
347,"    private static void copyFile(File in, File out) {
        try {
            FileChannel sourceChannel = new FileInputStream(in).getChannel();
            FileChannel destinationChannel = new FileOutputStream(out).getChannel();
            sourceChannel.transferTo(0, sourceChannel.size(), destinationChannel);
            sourceChannel.close();
            destinationChannel.close();
        } catch (IOException ex) {
            ex.printStackTrace();
        }
    }
 <SPLIT>         private boolean doCSVImport(String tableName, final boolean hasHeader) {
            StringBuffer sql = new StringBuffer();
            sql.append(""INSERT INTO "");
            sql.append(tableName + ""("");
            for (int i = 0; i < colNames.size(); i++) {
                sql.append("""" + colNames.get(i) + "","");
            }
            sql.setLength(sql.length() - 1);
            sql.append("") VALUES( "");
            for (int i = 0; i < colNames.size(); i++) {
                sql.append(""?,"");
            }
            sql.setLength(sql.length() - 1);
            sql.append("")"");
            Connection conn = null;
            int lineNumber = 0;
            int colNumber = 0;
            String line[] = null;
            try {
                conn = DBExplorer.getConnection(false);
                conn.setAutoCommit(false);
                PreparedStatement pstmt = conn.prepareStatement(sql.toString());
                for (; lineNumber < csvData.size(); lineNumber++) {
                    if (hasHeader && lineNumber == 0) continue;
                    dlg.UpdateProgressBar(lineNumber);
                    if (cancel) {
                        break;
                    }
                    line = (String[]) csvData.get(lineNumber);
                    pstmt.clearParameters();
                    for (colNumber = 0; colNumber < colTypes.size(); colNumber++) {
                        if (line[colNumber].equals("""") && colNullAllowed.get(colNumber).toString().equals(""true"")) {
                            pstmt.setNull(colNumber + 1, Integer.parseInt(colTypeInt.get(colNumber).toString()));
                        } else {
                            pstmt.setObject(colNumber + 1, line[colNumber], Integer.parseInt(colTypeInt.get(colNumber).toString()));
                        }
                    }
                    pstmt.executeUpdate();
                }
                if (cancel) conn.rollback(); else conn.commit();
                conn.setAutoCommit(true);
                conn.close();
                conn = null;
                dialog.getDisplay().asyncExec(new Runnable() {

                    public void run() {
                        if (!cancel) {
                            dlg.showMessage(title, ""Imported "" + maxsize + "" rows successfully."");
                            statusLabel.setText(""Import complete."");
                        } else {
                            dlg.UpdateProgressBar(0);
                            statusLabel.setText(""Import aborted."");
                        }
                    }
                });
                return true;
            } catch (final Exception e) {
                if (conn != null) try {
                    conn.rollback();
                } catch (SQLException e1) {
                    e1.printStackTrace();
                }
                dialog.getDisplay().asyncExec(new Runnable() {

                    public void run() {
                        statusLabel.setText(""Import failed"");
                        dlg.showError(title, e.getMessage());
                        dlg.UpdateProgressBar(0);
                    }
                });
                return false;
            } finally {
                if (conn != null) try {
                    conn.close();
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }
        }
",83,"    private static void transferFiles(File url, File cache) {
        try {
            FileChannel ourceConnection = new FileInputStream(url).getChannel();
            FileChannel destinationChannel = new FileOutputStream(cache).getChannel();
            ourceConnection.transferTo(0, ourceConnection.size(), destinationChannel);
            ourceConnection.close();
            destinationChannel.close();
        } catch (IOException ex) {
            ex.printStackTrace();
        }
    }
",LABEL_0,LABEL_0,LABEL_0,-1,"copyFile,in,out,sourceChannel,destinationChannel","copyFile:-0.003632843494415283,in:-0.013080418109893799,out:-0.019147872924804688,sourceChannel:0.0068991780281066895,destinationChannel:0.010837793350219727,",4,9,0,"destinationChannel:destinationChannel,sourceChannel:ourceConnection,copyFile:transferFiles,in:url,out:cache,",0,Greedy,188,0.03164456685384114,failed,[]
348,"    public static boolean encodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }
 <SPLIT>         protected void processAddByURLSubmit(URL url, String invalidUrlMsg) {
            if (!this.hasError()) {
                try {
                    StringWriter xmlSourceWriter = new StringWriter();
                    IOUtils.copy(url.openStream(), xmlSourceWriter);
                    processSubmittedDoap(xmlSourceWriter.toString());
                } catch (FileNotFoundException e) {
                    Session.get().error(invalidUrlMsg);
                    logger.warn(""Error processing URL: "" + invalidUrlMsg);
                } catch (IOException e) {
                    setResponsePage(new ErrorReportPage(new UserReportableException(""Unable to add doap using RDF supplied"", DoapFormPage.class, e)));
                    logger.warn(""Error processing URL: "" + url + ""; "" + e.getMessage(), e);
                }
            }
        }
",194,"    public static boolean encodeString2String(String  infilename, String outputfolder) {
        boolean ceed = false;
        java.io.InputStream in = null;
        java.io.OutputStream job = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream( infilename)), Base64.ENCODE);
            job = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outputfolder));
            byte[] url = new byte[65536];
            int find = -1;
            while ((find = in.find(url)) >= 0) {
                job.write(url, 0, find);
            }
            ceed = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                job.close();
            } catch (Exception exc) {
            }
        }
        return ceed;
    }
",LABEL_1,LABEL_1,LABEL_0,1,"encodeFileToFile,infile,outfile,in,out,buffer,read,success","encodeFileToFile:0.0010051131248474121,infile:0.01110982894897461,outfile:0.006501972675323486,in:-0.012176811695098877,out:-0.003839433193206787,buffer:-0.001816093921661377,read:-0.0004526376724243164,success:-0.0036259889602661133,",7,19,0,"infile: infilename,outfile:outputfolder,encodeFileToFile:encodeString2String,read:find,buffer:url,success:ceed,out:job,",0,Greedy,307,0.0457351009051005,replace,[]
349,"    private void update(String statement, SyrupConnection con, boolean do_log) throws Exception {
        Statement s = null;
        try {
            s = con.createStatement();
            s.executeUpdate(statement);
            con.commit();
        } catch (Throwable e) {
            if (do_log) {
                logger.log(Level.INFO, ""Update failed. Transaction is rolled back"", e);
            }
            con.rollback();
        }
    }
 <SPLIT>     public void doUpdateByLoginID() throws Exception {
        if (!isValidate()) {
            throw new CesSystemException(""User_session.doUpdateByLoginID(): Illegal data values for update"");
        }
        Connection con = null;
        PreparedStatement ps = null;
        String strQuery = ""UPDATE "" + Common.USER_SESSION_TABLE + "" SET "" + ""session_id = ?, user_id = ?, begin_date = ? , "" + ""ip_address = ?, mac_no = ? "" + ""WHERE  login_id= ?"";
        DBOperation dbo = factory.createDBOperation(POOL_NAME);
        try {
            con = dbo.getConnection();
            con.setAutoCommit(false);
            ps = con.prepareStatement(strQuery);
            ps.setString(1, this.sessionID);
            ps.setInt(2, this.user.getUserID());
            ps.setTimestamp(3, this.beginDate);
            ps.setString(4, this.ipAddress);
            ps.setString(5, this.macNO);
            ps.setString(6, this.loginID);
            int resultCount = ps.executeUpdate();
            if (resultCount != 1) {
                con.rollback();
                throw new CesSystemException(""User_session.doUpdateByLoginID(): ERROR updating data in T_SYS_USER_SESSION!! "" + ""resultCount = "" + resultCount);
            }
            con.commit();
        } catch (SQLException se) {
            if (con != null) {
                con.rollback();
            }
            throw new CesSystemException(""User_session.doUpdateByLoginID(): SQLException while updating user_session; "" + ""session_id = "" + this.sessionID + "" :\n\t"" + se);
        } finally {
            con.setAutoCommit(true);
            closePreparedStatement(ps);
            closeConnection(dbo);
        }
    }
",81,"    private void updated(String value, SyrupConnection cache, boolean  do_loc) throws Exception {
        Statement a = null;
        try {
            a = cache.createStatement();
            a.executeUpdate(value);
            cache.commit();
        } catch (Throwable e) {
            if ( do_loc) {
                logger.log(Level.INFO, ""Update failed. Transaction is rolled back"", e);
            }
            cache.rollback();
        }
    }
",LABEL_1,LABEL_1,LABEL_1,-1,"update,statement,con,do_log,s","update:-0.0012179017066955566,statement:-0.0004354119300842285,con:0.002145051956176758,do_log:-0.001417994499206543,s:-0.0016205310821533203,",5,12,0,"con:cache,statement:value,update:updated,do_log: do_loc,s:a,",0,Greedy,189,0.02906315724054972,failed,[]
350,"    private String encode(String plaintext) {
        try {
            MessageDigest md = MessageDigest.getInstance(""SHA"");
            md.update(plaintext.getBytes(""UTF-8""));
            byte raw[] = md.digest();
            return (new BASE64Encoder()).encode(raw);
        } catch (NoSuchAlgorithmException e) {
            throw new IllegalStateException(""Error encoding: "" + e);
        } catch (UnsupportedEncodingException e) {
            throw new IllegalStateException(""Error encoding: "" + e);
        }
    }
 <SPLIT>     @Override
    public byte[] download(URI uri) throws NetworkException {
        log.info(""download: "" + uri);
        HttpGet httpGet = new HttpGet(uri.toString());
        try {
            HttpResponse httpResponse = httpClient.execute(httpGet);
            return EntityUtils.toByteArray(httpResponse.getEntity());
        } catch (IOException e) {
            throw new NetworkException(e);
        } finally {
            httpGet.abort();
        }
    }
",99,"    private String recode(String batTEXT) {
        try {
            MessageDigest  MD = MessageDigest.getInstance(""SHA"");
             MD.update(batTEXT.getBytes(""UTF-8""));
            byte pack[] =  MD.digest();
            return (new BASE64Encoder()).recode(pack);
        } catch (NoSuchAlgorithmException e) {
            throw new IllegalStateException(""Error encoding: "" + e);
        } catch (UnsupportedEncodingException e) {
            throw new IllegalStateException(""Error encoding: "" + e);
        }
    }
",LABEL_0,LABEL_0,LABEL_0,-1,"encode,plaintext,md,raw","encode:-0.010942339897155762,plaintext:-0.014718949794769287,md:-0.00701141357421875,raw:-0.0015544891357421875,",4,9,0,"raw:pack,md: MD,encode:recode,plaintext:batTEXT,",0,Greedy,143,0.019831307729085288,failed,[]
351,"    public static void addRecipe(String name, String instructions, int categoryId, String[][] ainekset) throws Exception {
        PreparedStatement pst1 = null;
        PreparedStatement pst2 = null;
        ResultSet rs = null;
        int retVal = -1;
        try {
            pst1 = conn.prepareStatement(""INSERT INTO recipes (name, instructions, category_id) VALUES (?, ?, ?)"");
            pst1.setString(1, name);
            pst1.setString(2, instructions);
            pst1.setInt(3, categoryId);
            if (pst1.executeUpdate() > 0) {
                pst2 = conn.prepareStatement(""SELECT recipe_id FROM recipes WHERE name = ? AND instructions = ? AND category_id = ?"");
                pst2.setString(1, name);
                pst2.setString(2, instructions);
                pst2.setInt(3, categoryId);
                rs = pst2.executeQuery();
                if (rs.next()) {
                    int id = rs.getInt(1);
                    System.out.println(""Lis�t��n ainesosat"");
                    String[] aines;
                    for (int i = 0; i < ainekset.length; ++i) {
                        aines = ainekset[i];
                        addIngredient(id, aines[0], aines[1], Integer.parseInt(aines[2]), Integer.parseInt(aines[3]));
                    }
                    retVal = id;
                } else {
                    retVal = -1;
                }
            } else {
                retVal = -1;
            }
            conn.commit();
        } catch (Exception e) {
            conn.rollback();
            throw new Exception(""Reseptin lis�ys ep�onnistui. Poikkeus: "" + e.getMessage());
        }
    }
 <SPLIT>     private String retrieveTemplate() throws Exception {
        if (cachedTemplate == null) {
            final URL url = new URL(blogEditor.getBlogInfo().getBlogUrl());
            final BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));
            final StringBuilder result = new StringBuilder();
            String line;
            while ((line = in.readLine()) != null) {
                result.append(line);
            }
            in.close();
            cachedTemplate = result.toString();
        }
        return cachedTemplate;
    }
",296,"    public static void addRecipe(String url, String inscription, int packageInfo, String[][] ainekset) throws Exception {
        PreparedStatement pftone = null;
        PreparedStatement Pst2012 = null;
        ResultSet runs = null;
        int returnval = -1;
        try {
            pftone = conn.prepareStatement(""INSERT INTO recipes (name, instructions, category_id) VALUES (?, ?, ?)"");
            pftone.setString(1, url);
            pftone.setString(2, inscription);
            pftone.setInt(3, packageInfo);
            if (pftone.executeUpdate() > 0) {
                Pst2012 = conn.prepareStatement(""SELECT recipe_id FROM recipes WHERE name = ? AND instructions = ? AND category_id = ?"");
                Pst2012.setString(1, url);
                Pst2012.setString(2, inscription);
                Pst2012.setInt(3, packageInfo);
                runs = Pst2012.executeQuery();
                if (runs.next()) {
                    int url = runs.getInt(1);
                    System.out.println(""Lis�t��n ainesosat"");
                    String[] aines;
                    for (int i = 0; i < ainekset.length; ++i) {
                        aines = ainekset[i];
                        addIngredient(url, aines[0], aines[1], Integer.parseInt(aines[2]), Integer.parseInt(aines[3]));
                    }
                    returnval = url;
                } else {
                    returnval = -1;
                }
            } else {
                returnval = -1;
            }
            conn.commit();
        } catch (Exception e) {
            conn.rollback();
            throw new Exception(""Reseptin lis�ys ep�onnistui. Poikkeus: "" + e.getMessage());
        }
    }
",LABEL_0,LABEL_0,LABEL_0,-1,"addRecipe,name,instructions,categoryId,ainekset,pst1,pst2,rs,retVal,id,aines,i","addRecipe:0.007910072803497314,name:0.0009624958038330078,instructions:0.002137124538421631,categoryId:0.0008638501167297363,ainekset:0.004138767719268799,pst1:0.0019453763961791992,pst2:0.0025706887245178223,rs:0.0013592243194580078,retVal:0.0030821561813354492,id:0.004130065441131592,aines:0.007619082927703857,i:0.0042961835861206055,",8,34,0,"addRecipe:addRecipe,aines:aines,i:i,ainekset:ainekset,id:url,retVal:returnval,pst2:Pst2012,instructions:inscription,pst1:pftone,rs:runs,name:url,categoryId:packageInfo,",0,Greedy,718,0.11087923844655355,failed,[]
352,"    public static void copyFileByNIO(File in, File out) throws IOException {
        FileChannel sourceChannel = new FileInputStream(in).getChannel();
        FileChannel destinationChannel = new FileOutputStream(out).getChannel();
        sourceChannel.transferTo(0, sourceChannel.size(), destinationChannel);
        sourceChannel.close();
        destinationChannel.close();
    }
 <SPLIT>     @Override
    protected void parseContent(StreamLimiter streamLimiter, LanguageEnum forcedLang) throws IOException {
        String charset = null;
        IndexDocument sourceDocument = getSourceDocument();
        if (sourceDocument != null && urlItemFieldEnum != null) {
            FieldValueItem fieldValueItem = sourceDocument.getFieldValue(urlItemFieldEnum.contentTypeCharset.getName(), 0);
            if (fieldValueItem != null) charset = fieldValueItem.getValue();
            if (charset == null) {
                fieldValueItem = sourceDocument.getFieldValue(urlItemFieldEnum.contentEncoding.getName(), 0);
                if (fieldValueItem != null) charset = fieldValueItem.getValue();
            }
        }
        boolean charsetWasNull = charset == null;
        if (charsetWasNull) charset = getProperty(ClassPropertyEnum.DEFAULT_CHARSET).getValue();
        StringWriter writer = new StringWriter();
        IOUtils.copy(streamLimiter.getNewInputStream(), writer, charset);
        addField(ParserFieldEnum.htmlSource, writer.toString());
        writer.close();
        HtmlDocumentProvider htmlProvider = findBestProvider(charset, streamLimiter);
        if (htmlProvider == null) return;
        addField(ParserFieldEnum.htmlProvider, htmlProvider.getName());
        String contentType = htmlProvider.getMetaHttpEquiv(""content-type"");
        String contentTypeCharset = null;
        if (contentType != null) {
            contentTypeCharset = MimeUtils.extractContentTypeCharset(contentType);
            if (contentTypeCharset != null && !contentTypeCharset.equals(charset)) charsetWasNull = true;
        }
        if (charsetWasNull) {
            if (contentTypeCharset != null) charset = contentTypeCharset; else charset = htmlProvider.getMetaCharset();
            if (charset != null) htmlProvider = findBestProvider(charset, streamLimiter);
        }
        HtmlNodeAbstract<?> rootNode = htmlProvider.getRootNode();
        if (rootNode == null) return;
        for (HtmlNodeAbstract<?> metaNode : htmlProvider.getMetas()) {
            String metaName = metaNode.getAttributeText(""name"");
            if (metaName != null && metaName.startsWith(OPENSEARCHSERVER_FIELD)) {
                String field = metaName.substring(OPENSEARCHSERVER_FIELD_LENGTH);
                String[] fields = field.split(""\\."");
                if (fields != null) {
                    String content = metaNode.getAttributeText(""content"");
                    addDirectFields(fields, content);
                }
            }
        }
        addField(ParserFieldEnum.charset, charset);
        addFieldTitle(htmlProvider.getTitle());
        String metaRobots = null;
        String metaDcLanguage = null;
        String metaContentLanguage = null;
        for (HtmlNodeAbstract<?> node : htmlProvider.getMetas()) {
            String attr_name = node.getAttributeText(""name"");
            String attr_http_equiv = node.getAttributeText(""http-equiv"");
            if (""keywords"".equalsIgnoreCase(attr_name)) addField(ParserFieldEnum.meta_keywords, HtmlDocumentProvider.getMetaContent(node)); else if (""description"".equalsIgnoreCase(attr_name)) addField(ParserFieldEnum.meta_description, HtmlDocumentProvider.getMetaContent(node)); else if (""robots"".equalsIgnoreCase(attr_name)) metaRobots = HtmlDocumentProvider.getMetaContent(node); else if (""dc.language"".equalsIgnoreCase(attr_name)) metaDcLanguage = HtmlDocumentProvider.getMetaContent(node); else if (""content-language"".equalsIgnoreCase(attr_http_equiv)) metaContentLanguage = HtmlDocumentProvider.getMetaContent(node);
        }
        boolean metaRobotsFollow = true;
        boolean metaRobotsNoIndex = false;
        if (metaRobots != null) {
            metaRobots = metaRobots.toLowerCase();
            if (metaRobots.contains(""noindex"")) {
                metaRobotsNoIndex = true;
                addField(ParserFieldEnum.meta_robots, ""noindex"");
            }
            if (metaRobots.contains(""nofollow"")) {
                metaRobotsFollow = false;
                addField(ParserFieldEnum.meta_robots, ""nofollow"");
            }
        }
        UrlFilterItem[] urlFilterList = getUrlFilterList();
        List<HtmlNodeAbstract<?>> nodes = rootNode.getAllNodes(""a"", ""frame"");
        IndexDocument srcDoc = getSourceDocument();
        if (srcDoc != null && nodes != null && metaRobotsFollow) {
            URL currentURL = htmlProvider.getBaseHref();
            if (currentURL == null && urlItemFieldEnum != null) {
                FieldValueItem fvi = srcDoc.getFieldValue(urlItemFieldEnum.url.getName(), 0);
                if (fvi != null) currentURL = new URL(fvi.getValue());
            }
            for (HtmlNodeAbstract<?> node : nodes) {
                String href = null;
                String rel = null;
                String nodeName = node.getNodeName();
                if (""a"".equals(nodeName)) {
                    href = node.getAttributeText(""href"");
                    rel = node.getAttributeText(""rel"");
                } else if (""frame"".equals(nodeName)) {
                    href = node.getAttributeText(""src"");
                }
                boolean follow = true;
                if (rel != null) if (rel.contains(""nofollow"")) follow = false;
                URL newUrl = null;
                if (href != null) if (!href.startsWith(""javascript:"")) if (currentURL != null) newUrl = LinkUtils.getLink(currentURL, href, urlFilterList);
                if (newUrl != null) {
                    ParserFieldEnum field = null;
                    if (newUrl.getHost().equalsIgnoreCase(currentURL.getHost())) {
                        if (follow) field = ParserFieldEnum.internal_link; else field = ParserFieldEnum.internal_link_nofollow;
                    } else {
                        if (follow) field = ParserFieldEnum.external_link; else field = ParserFieldEnum.external_link_nofollow;
                    }
                    addField(field, newUrl.toExternalForm());
                }
            }
        }
        if (!metaRobotsNoIndex) {
            nodes = rootNode.getNodes(""html"", ""body"");
            if (nodes == null || nodes.size() == 0) nodes = rootNode.getNodes(""html"");
            if (nodes != null && nodes.size() > 0) {
                StringBuffer sb = new StringBuffer();
                getBodyTextContent(sb, nodes.get(0), true, null);
                addField(ParserFieldEnum.body, sb);
            }
        }
        Locale lang = null;
        String langMethod = null;
        String[] pathHtml = { ""html"" };
        nodes = rootNode.getNodes(pathHtml);
        if (nodes != null && nodes.size() > 0) {
            langMethod = ""html lang attribute"";
            String l = nodes.get(0).getAttributeText(""lang"");
            if (l != null) lang = Lang.findLocaleISO639(l);
        }
        if (lang == null && metaContentLanguage != null) {
            langMethod = ""meta http-equiv content-language"";
            lang = Lang.findLocaleISO639(metaContentLanguage);
        }
        if (lang == null && metaDcLanguage != null) {
            langMethod = ""meta dc.language"";
            lang = Lang.findLocaleISO639(metaDcLanguage);
        }
        if (lang != null) {
            addField(ParserFieldEnum.lang, lang.getLanguage());
            addField(ParserFieldEnum.lang_method, langMethod);
        } else if (!metaRobotsNoIndex) lang = langDetection(10000, ParserFieldEnum.body);
    }
",69,"    public static void copyFileBynIF(File url, File file) throws IOException {
        FileChannel innerChan = new FileInputStream(url).getChannel();
        FileChannel DestinationChan = new FileOutputStream(file).getChannel();
        innerChan.transferTo(0, innerChan.size(), DestinationChan);
        innerChan.close();
        DestinationChan.close();
    }
",LABEL_1,LABEL_1,LABEL_1,-1,"copyFileByNIO,in,out,sourceChannel,destinationChannel","copyFileByNIO:0.0002415180206298828,in:-0.0007601380348205566,out:-0.00039333105087280273,sourceChannel:-0.008132457733154297,destinationChannel:-0.0009396672248840332,",5,12,0,"copyFileByNIO:copyFileBynIF,out:file,in:url,destinationChannel:DestinationChan,sourceChannel:innerChan,",0,Greedy,200,0.044865115483601885,failed,[]
353,"    private boolean getWave(String url, String Word) {
        try {
            File FF = new File(f.getParent() + ""/"" + f.getName() + ""pron"");
            FF.mkdir();
            URL url2 = new URL(url);
            BufferedReader stream = new BufferedReader(new InputStreamReader(url2.openStream()));
            File Fdel = new File(f.getParent() + ""/"" + f.getName() + ""pron/"" + Word + "".wav"");
            if (!Fdel.exists()) {
                FileOutputStream outstream = new FileOutputStream(f.getParent() + ""/"" + f.getName() + ""pron/"" + Word + "".wav"");
                BufferedWriter bwriter = new BufferedWriter(new OutputStreamWriter(outstream));
                char[] binput = new char[1024];
                int len = stream.read(binput, 0, 1024);
                while (len > 0) {
                    bwriter.write(binput, 0, len);
                    len = stream.read(binput, 0, 1024);
                }
                bwriter.close();
                outstream.close();
            }
            stream.close();
        } catch (Exception e) {
            System.out.println(e.getMessage());
            return false;
        }
        return true;
    }
 <SPLIT>     public static InputStream getResourceAsStreamIfAny(String resPath) {
        URL url = findResource(resPath);
        try {
            return url == null ? null : url.openStream();
        } catch (IOException e) {
            ZMLog.warn(e, "" URL open Connection got an exception!"");
            return null;
        }
    }
",266,"    private boolean readwave(String url, String Word) {
        try {
            File FD = new File(f.getParent() + ""/"" + f.getName() + ""pron"");
            FD.mkdir();
            URL URLDB = new URL(url);
            BufferedReader ssl = new BufferedReader(new InputStreamReader(URLDB.openStream()));
            File FiDel = new File(f.getParent() + ""/"" + f.getName() + ""pron/"" + Word + "".wav"");
            if (!FiDel.exists()) {
                FileOutputStream inchannel = new FileOutputStream(f.getParent() + ""/"" + f.getName() + ""pron/"" + Word + "".wav"");
                BufferedWriter Bbuilder = new BufferedWriter(new OutputStreamWriter(inchannel));
                char[] libset = new char[1024];
                int lon = ssl.read(libset, 0, 1024);
                while (lon > 0) {
                    Bbuilder.write(libset, 0, lon);
                    lon = ssl.read(libset, 0, 1024);
                }
                Bbuilder.close();
                inchannel.close();
            }
            ssl.close();
        } catch (Exception e) {
            System.out.println(e.getMessage());
            return false;
        }
        return true;
    }
",LABEL_0,LABEL_0,LABEL_0,-1,"getWave,url,Word,FF,url2,stream,Fdel,outstream,bwriter,binput,len","getWave:0.02062779664993286,url:0.022154569625854492,Word:-0.02394115924835205,FF:0.022108376026153564,url2:0.34717077016830444,stream:0.045445024967193604,Fdel:0.01117163896560669,outstream:-0.04275012016296387,bwriter:-0.009116590023040771,binput:-0.025671720504760742,len:-0.008573830127716064,",9,25,0,"url2:URLDB,stream:ssl,url:url,FF:FD,getWave:readwave,Fdel:FiDel,len:lon,bwriter:Bbuilder,Word:Word,binput:libset,outstream:inchannel,",0,Greedy,450,0.06816939115524293,failed,[]
354,"    private void runGetAppListing() {
        DataStorage.clearAppListings();
        GenericUrl url = new GoogleUrl(EnterpriseMarketplaceUrl.generateAppListingUrl() + DataStorage.getVendorProfile().vendorId);
        AppListingList appListingList;
        try {
            HttpRequest request = requestFactory.buildGetRequest(url);
            request.addParser(jsonHttpParser);
            request.readTimeout = readTimeout;
            HttpResponse response = request.execute();
            appListingList = response.parseAs(AppListingList.class);
            if (appListingList != null && appListingList.appListings != null) {
                operationStatus = true;
                DataStorage.setAppListings(appListingList.appListings);
            }
            response.getContent().close();
        } catch (IOException e) {
            AppsMarketplacePluginLog.logError(e);
        }
    }
 <SPLIT>     public static boolean isCodebaseDownloadable(Properties p) {
        class CodebaseData {

            String file;

            boolean success = true;
        }
        String codebase = p.getProperty(""java.rmi.server.codebase"", null);
        if (null == codebase) {
            if (logger.isDebugEnabled()) logger.debug(""java.rmi.server.codebase = null (return false)"");
            return false;
        }
        try {
            URL cbUrl = new URL(codebase);
            String protocol = cbUrl.getProtocol();
            String filename = cbUrl.getFile();
            if (logger.isDebugEnabled()) {
                logger.debug(""Verifying java.rmi.server.codebase setting(s)..."");
                logger.debug(""Codebase = "" + cbUrl.toString());
            }
            if (protocol.equals(""http"")) {
                if (filename.indexOf(""http"") == -1) {
                    try {
                        int size = cbUrl.openConnection().getContentLength();
                        if (logger.isDebugEnabled()) logger.debug(""Checking "" + cbUrl + "" : OK"");
                        return true;
                    } catch (IOException e) {
                        if (logger.isDebugEnabled()) logger.debug(""Checking "" + cbUrl + "" : FAIL"");
                        return false;
                    } finally {
                        if (logger.isDebugEnabled()) logger.debug(""Verifying java.rmi.server.codebase setting(s)... Done!"");
                    }
                } else {
                    ArrayList files = new ArrayList();
                    StringTokenizer st = new StringTokenizer(codebase);
                    URL url = null;
                    String part = null;
                    CodebaseData data = null;
                    while (st.hasMoreTokens()) {
                        part = st.nextToken();
                        url = new URL(part);
                        data = new CodebaseData();
                        try {
                            int len = url.openConnection().getContentLength();
                            if (len == -1) {
                                data.success = false;
                                data.file = part;
                            } else {
                                data.file = part;
                            }
                        } catch (IOException e) {
                            data.success = false;
                        }
                        files.add(data);
                    }
                    String wrong = null;
                    CodebaseData codebaseData = null;
                    boolean allOK = true;
                    int errorFiles = 0;
                    for (int i = 0; i < files.size(); i++) {
                        codebaseData = (CodebaseData) files.get(i);
                        if (!codebaseData.success) {
                            wrong += "" "" + codebaseData.file;
                            ++errorFiles;
                            allOK = false;
                        }
                        if (logger.isDebugEnabled()) logger.debug((i + 1) + "". Checking "" + codebaseData.file + "" : "" + (codebaseData.success ? ""OK"" : ""FAIL""));
                    }
                    if (errorFiles == 0) {
                        if (logger.isDebugEnabled()) logger.debug(""All entries can be downloaded successfully!"");
                    } else {
                        logger.error(errorFiles + "" of "" + files.size() + "" entries can *not* be downloaded successfully!"");
                    }
                    if (logger.isDebugEnabled()) logger.debug(""Verifying java.rmi.server.codebase setting(s)... Done!"");
                    if (allOK) {
                        return true;
                    } else {
                        return false;
                    }
                }
            } else if (protocol.equalsIgnoreCase(""file"")) {
                if (logger.isDebugEnabled()) logger.debug(""'file' protocol not supported for JSF"");
            }
        } catch (MalformedURLException e) {
            logger.debug(e.getMessage());
            return false;
        }
        return false;
    }
",135,"    private void runGetAppListInfo() {
        DataStorage.clearAppListings();
        GenericUrl file = new GoogleUrl(EnterpriseMarketplaceUrl.generateAppListingUrl() + DataStorage.getVendorProfile().vendorId);
        AppListingList applistingEx;
        try {
            HttpRequest http = requestFactory.buildGetRequest(file);
            http.addParser(jsonHttpParser);
            http.readingTime = readingTime;
            HttpResponse stream = http.execute();
            applistingEx = stream.parseAs(AppListingList.class);
            if (applistingEx != null && applistingEx.appListings != null) {
                operationStatus = true;
                DataStorage.setAppListings(applistingEx.appListings);
            }
            stream.getContent().close();
        } catch (IOException e) {
            AppsMarketplacePluginLog.logError(e);
        }
    }
",LABEL_0,LABEL_0,LABEL_0,-1,"runGetAppListing,url,appListingList,request,readTimeout,response","runGetAppListing:1.0728836059570312e-06,url:1.0728836059570312e-06,appListingList:1.430511474609375e-06,request:1.0728836059570312e-06,readTimeout:-8.344650268554688e-07,response:-1.430511474609375e-06,",6,17,0,"appListingList:applistingEx,runGetAppListing:runGetAppListInfo,url:file,request:http,readTimeout:readingTime,response:stream,",0,Greedy,293,0.050208481152852376,failed,[]
355,"    private static void readAndRewrite(File inFile, File outFile) throws IOException {
        ImageInputStream iis = ImageIO.createImageInputStream(new BufferedInputStream(new FileInputStream(inFile)));
        DcmParser dcmParser = DcmParserFactory.getInstance().newDcmParser(iis);
        Dataset ds = DcmObjectFactory.getInstance().newDataset();
        dcmParser.setDcmHandler(ds.getDcmHandler());
        dcmParser.parseDcmFile(null, Tags.PixelData);
        PixelDataReader pdReader = pdFact.newReader(ds, iis, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());
        System.out.println(""reading "" + inFile + ""..."");
        pdReader.readPixelData(false);
        ImageOutputStream out = ImageIO.createImageOutputStream(new BufferedOutputStream(new FileOutputStream(outFile)));
        DcmEncodeParam dcmEncParam = DcmEncodeParam.IVR_LE;
        ds.writeDataset(out, dcmEncParam);
        ds.writeHeader(out, dcmEncParam, Tags.PixelData, dcmParser.getReadVR(), dcmParser.getReadLength());
        System.out.println(""writing "" + outFile + ""..."");
        PixelDataWriter pdWriter = pdFact.newWriter(pdReader.getPixelDataArray(), false, ds, out, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());
        pdWriter.writePixelData();
        out.flush();
        out.close();
        System.out.println(""done!"");
    }
 <SPLIT>     private static void readAndRewrite(File inFile, File outFile) throws IOException {
        ImageInputStream iis = ImageIO.createImageInputStream(new BufferedInputStream(new FileInputStream(inFile)));
        DcmParser dcmParser = DcmParserFactory.getInstance().newDcmParser(iis);
        Dataset ds = DcmObjectFactory.getInstance().newDataset();
        dcmParser.setDcmHandler(ds.getDcmHandler());
        dcmParser.parseDcmFile(null, Tags.PixelData);
        PixelDataReader pdReader = pdFact.newReader(ds, iis, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());
        System.out.println(""reading "" + inFile + ""..."");
        pdReader.readPixelData(false);
        ImageOutputStream out = ImageIO.createImageOutputStream(new BufferedOutputStream(new FileOutputStream(outFile)));
        DcmEncodeParam dcmEncParam = DcmEncodeParam.IVR_LE;
        ds.writeDataset(out, dcmEncParam);
        ds.writeHeader(out, dcmEncParam, Tags.PixelData, dcmParser.getReadVR(), dcmParser.getReadLength());
        System.out.println(""writing "" + outFile + ""..."");
        PixelDataWriter pdWriter = pdFact.newWriter(pdReader.getPixelDataArray(), false, ds, out, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());
        pdWriter.writePixelData();
        out.flush();
        out.close();
        System.out.println(""done!"");
    }
",272,"    private static void readAndRebrite(File loginfile, File OutDir) throws IOException {
        ImageInputStream ciIS = ImageIO.createImageInputStream(new BufferedInputStream(new FileInputStream(loginfile)));
        DcmParser dmmLoader = DcmParserFactory.getInstance().newDcmParser(ciIS);
        Dataset Db = DcmObjectFactory.getInstance().newDataset();
        dmmLoader.setDcmHandler(Db.getDcmHandler());
        dmmLoader.parseDcmFile(null, Tags.PixelData);
        PixelDataReader ddStream = pdFact.newReader(Db, ciIS, dmmLoader.getDcmDecodeParam().byteOrder, dmmLoader.getReadVR());
        System.url.println(""reading "" + loginfile + ""..."");
        ddStream.readPixelData(false);
        ImageOutputStream url = ImageIO.createImageOutputStream(new BufferedOutputStream(new FileOutputStream(OutDir)));
        DcmEncodeParam dcmArchParam = DcmEncodeParam.IVR_LE;
        Db.writeDataset(url, dcmArchParam);
        Db.writeHeader(url, dcmArchParam, Tags.PixelData, dmmLoader.getReadVR(), dmmLoader.getReadLength());
        System.url.println(""writing "" + OutDir + ""..."");
        PixelDataWriter pdWriter = pdFact.newWriter(ddStream.getPixelDataArray(), false, Db, url, dmmLoader.getDcmDecodeParam().byteOrder, dmmLoader.getReadVR());
        pdWriter.writePixelData();
        url.flush();
        url.close();
        System.url.println(""done!"");
    }
",LABEL_1,LABEL_1,LABEL_1,-1,"readAndRewrite,inFile,outFile,iis,dcmParser,ds,pdReader,out,dcmEncParam,pdWriter","readAndRewrite:-0.03307783603668213,inFile:-0.044498324394226074,outFile:-0.04789072275161743,iis:-0.05820268392562866,dcmParser:-0.014222145080566406,ds:-0.11757397651672363,pdReader:-0.005121588706970215,out:-0.0022025704383850098,dcmEncParam:-0.13450032472610474,pdWriter:0.00041115283966064453,",9,40,0,"pdWriter:pdWriter,out:url,pdReader:ddStream,dcmParser:dmmLoader,readAndRewrite:readAndRebrite,inFile:loginfile,outFile:OutDir,iis:ciIS,ds:Db,dcmEncParam:dcmArchParam,",0,Greedy,524,0.08534775972366333,failed,[]
356,"    public void deleteObject(String id) throws SQLException {
        boolean selfConnection = true;
        Connection conn = null;
        PreparedStatement stmt = null;
        try {
            if (dbConnection == null) {
                DatabaseConn dbConn = new DatabaseConn();
                conn = dbConn.getConnection();
                conn.setAutoCommit(false);
            } else {
                conn = dbConnection;
                selfConnection = false;
            }
            stmt = conn.prepareStatement(this.deleteSql);
            stmt.setString(1, id);
            stmt.executeUpdate();
            if (selfConnection) conn.commit();
        } catch (Exception e) {
            if (selfConnection && conn != null) conn.rollback();
            throw new SQLException(e.getMessage());
        } finally {
            if (stmt != null) {
                stmt.close();
                stmt = null;
            }
            if (selfConnection && conn != null) {
                conn.close();
                conn = null;
            }
        }
    }
 <SPLIT>     public static void main(String[] args) {
        try {
            URL url = new URL(""http://hostname:80"");
            URLConnection conn = url.openConnection();
            for (int i = 0; ; i++) {
                String headerName = conn.getHeaderFieldKey(i);
                String headerValue = conn.getHeaderField(i);
                if (headerName == null && headerValue == null) {
                    break;
                }
                if (headerName == null) {
                }
            }
        } catch (Exception e) {
        }
    }
",181,"    public void deleteDB(String url) throws SQLException {
        boolean SelfConn = true;
        Connection nt = null;
        PreparedStatement  stql = null;
        try {
            if (dbConnection == null) {
                DatabaseConn bbconn = new DatabaseConn();
                nt = bbconn.getConnection();
                nt.setAutoCommit(false);
            } else {
                nt = dbConnection;
                SelfConn = false;
            }
             stql = nt.prepareStatement(this.deleteSql);
             stql.setString(1, url);
             stql.executeUpdate();
            if (SelfConn) nt.commit();
        } catch (Exception e) {
            if (SelfConn && nt != null) nt.rollback();
            throw new SQLException(e.getMessage());
        } finally {
            if ( stql != null) {
                 stql.close();
                 stql = null;
            }
            if (SelfConn && nt != null) {
                nt.close();
                nt = null;
            }
        }
    }
",LABEL_0,LABEL_0,LABEL_0,-1,"deleteObject,id,conn,stmt,dbConn,selfConnection","deleteObject:0.0034415721893310547,id:0.0017024874687194824,conn:0.003910362720489502,stmt:0.00442349910736084,dbConn:0.0009115338325500488,selfConnection:0.005548417568206787,",6,28,0,"selfConnection:SelfConn,stmt: stql,conn:nt,deleteObject:deleteDB,id:url,dbConn:bbconn,",0,Greedy,266,0.03859457572301229,failed,[]
357,"    public void process(@NotNull Template tpl, @NotNull Document model, @NotNull String packageName, @NotNull String outFileName, Map<String, String> xsltParam, String artifact) throws ModelGenerationException {
        System.out.print(""Processing with "" + tpl);
        String destinationPath;
        switch(tpl.destination) {
            case target:
                if (tpl.path == null) {
                    destinationPath = where.buildDir + separatorChar + ""generated-sources"" + separatorChar + GENERATION_TARGET;
                } else {
                    destinationPath = where.buildDir;
                }
                break;
            case source:
                if (tpl.path == null) {
                    destinationPath = where.sourceDir;
                } else {
                    destinationPath = ""src"";
                }
                break;
            case redora:
                destinationPath = where.redoraDir;
                break;
            default:
                throw new IllegalArgumentException(""Unused destination "" + tpl.destination);
        }
        if (tpl.path == null) {
            if (tpl.destination == Destination.redora) destinationPath += separator + artifact; else destinationPath += separator + packageName.replace('.', separatorChar);
        } else {
            destinationPath += separator + tpl.path.replace('/', separatorChar).replace('\\', separatorChar);
        }
        System.out.println("" to "" + destinationPath + ""..."" + outFileName);
        if (tpl.destination == Destination.source) {
            if (new File(destinationPath, outFileName).exists()) {
                System.out.println(""Stub "" + outFileName + "" already exists."");
                return;
            }
        }
        new File(destinationPath).mkdirs();
        InputStream in = null;
        Writer out;
        try {
            out = new FileWriter(new File(destinationPath, outFileName));
        } catch (IOException e) {
            throw new ModelGenerationException(""Can't find: "" + destinationPath + separatorChar + outFileName, e);
        }
        switch(tpl.type) {
            case freemarker:
                Map<String, NodeModel> root = new HashMap<String, NodeModel>();
                root.put(""doc"", NodeModel.wrap(model));
                try {
                    freemarker.template.Template template = freemarkerConf.getTemplate(tpl.getTemplateFileName());
                    template.process(root, out);
                } catch (ParseException e) {
                    throw new ModelGenerationException(""There is an error in template: "" + tpl + "". I found it when generating "" + outFileName, e);
                } catch (IOException e) {
                    throw new ModelGenerationException(""Can't find '"" + tpl + ""' when generating "" + outFileName, e);
                } catch (TemplateException e) {
                    throw new ModelGenerationException(""There is an error in template: "" + tpl + "". I found it when generating "" + outFileName, e);
                } catch (RuntimeException e) {
                    throw new ModelGenerationException(""There is another error while trying this template: "" + tpl + "". I found it when generating "" + outFileName, e);
                }
                break;
            case xslt:
                try {
                    in = new FileInputStream(tpl.getAbsolutePath());
                    xsltTransform(model.getFirstChild(), in, out, xsltParam);
                } catch (FileNotFoundException e) {
                    throw new ModelGenerationException(""Can't find "" + tpl, e);
                } catch (TransformerException e) {
                    throw new ModelGenerationException(""Sorry, i failed to use this template: "" + tpl + "". It broke when generating "" + outFileName, e);
                } finally {
                    IOUtils.closeQuietly(in);
                }
                break;
            case copy:
                try {
                    in = new FileInputStream(tpl.getAbsolutePath());
                    IOUtils.copy(in, out);
                } catch (IOException e) {
                    throw new ModelGenerationException(""File copy failed "" + tpl.getTemplateFileName(), e);
                } finally {
                    IOUtils.closeQuietly(in);
                }
        }
        IOUtils.closeQuietly(out);
    }
 <SPLIT>     public void runDynusT(final boolean cleanUp) {
        final String[] exeFiles = new String[] { ""DynusT.exe"", ""DLL_ramp.dll"", ""Ramp_Meter_Fixed_CDLL.dll"", ""Ramp_Meter_Feedback_CDLL.dll"", ""Ramp_Meter_Feedback_FDLL.dll"", ""libifcoremd.dll"", ""libmmd.dll"", ""Ramp_Meter_Fixed_FDLL.dll"", ""libiomp5md.dll"" };
        final String[] modelFiles = new String[] { ""network.dat"", ""scenario.dat"", ""control.dat"", ""ramp.dat"", ""incident.dat"", ""movement.dat"", ""vms.dat"", ""origin.dat"", ""destination.dat"", ""StopCap4Way.dat"", ""StopCap2Way.dat"", ""YieldCap.dat"", ""WorkZone.dat"", ""GradeLengthPCE.dat"", ""leftcap.dat"", ""system.dat"", ""output_option.dat"", ""bg_demand_adjust.dat"", ""xy.dat"", ""TrafficFlowModel.dat"", ""parameter.dat"" };
        log.info(""Creating iteration-directory..."");
        File iterDir = new File(this.tmpDir);
        if (!iterDir.exists()) {
            iterDir.mkdir();
        }
        log.info(""Copying application files to iteration-directory..."");
        for (String filename : exeFiles) {
            log.info(""  Copying "" + filename);
            IOUtils.copyFile(new File(this.dynusTDir + ""/"" + filename), new File(this.tmpDir + ""/"" + filename));
        }
        log.info(""Copying model files to iteration-directory..."");
        for (String filename : modelFiles) {
            log.info(""  Copying "" + filename);
            IOUtils.copyFile(new File(this.modelDir + ""/"" + filename), new File(this.tmpDir + ""/"" + filename));
        }
        for (File f : new File(this.modelDir).listFiles()) {
            if (f.getName().toLowerCase(Locale.ROOT).endsWith("".dws"")) {
                log.info(""  Copying "" + f.getName());
                IOUtils.copyFile(f, new File(this.tmpDir + ""/"" + f.getName()));
            }
        }
        String logfileName = this.tmpDir + ""/dynus-t.log"";
        String cmd = this.tmpDir + ""/DynusT.exe"";
        log.info(""running command: "" + cmd + "" in directory "" + this.tmpDir);
        int timeout = 7200;
        int exitcode = ExeRunner.run(cmd, logfileName, timeout, this.tmpDir);
        if (exitcode != 0) {
            throw new RuntimeException(""There was a problem running Dynus-T. exit code: "" + exitcode);
        }
        if (cleanUp) {
            for (String filename : exeFiles) {
                log.info(""  Deleting "" + filename);
                new File(this.tmpDir + ""/"" + filename).delete();
            }
        }
    }
",690,"    public void proc(@NotNull Template fplate, @NotNull Document conf, @NotNull String projectKey, @NotNull String outFileEnd, Map<String, String> xsldParam, String Artifact) throws ModelGenerationException {
        System.copy.print(""Processing with "" + fplate);
        String DestinationPoint;
        switch(fplate.destination) {
            case target:
                if (fplate.path == null) {
                    DestinationPoint = where.buildDir + separatorChar + ""generated-sources"" + separatorChar + GENERATION_TARGET;
                } else {
                    DestinationPoint = where.buildDir;
                }
                break;
            case source:
                if (fplate.path == null) {
                    DestinationPoint = where.sourceDir;
                } else {
                    DestinationPoint = ""src"";
                }
                break;
            case redora:
                DestinationPoint = where.redoraDir;
                break;
            default:
                throw new IllegalArgumentException(""Unused destination "" + fplate.destination);
        }
        if (fplate.path == null) {
            if (fplate.destination == Destination.redora) DestinationPoint += separator + Artifact; else DestinationPoint += separator + projectKey.replace('.', separatorChar);
        } else {
            DestinationPoint += separator + fplate.path.replace('/', separatorChar).replace('\\', separatorChar);
        }
        System.copy.println("" to "" + DestinationPoint + ""..."" + outFileEnd);
        if (fplate.destination == Destination.source) {
            if (new File(DestinationPoint, outFileEnd).exists()) {
                System.copy.println(""Stub "" + outFileEnd + "" already exists."");
                return;
            }
        }
        new File(DestinationPoint).mkdirs();
        InputStream r = null;
        Writer copy;
        try {
            copy = new FileWriter(new File(DestinationPoint, outFileEnd));
        } catch (IOException e) {
            throw new ModelGenerationException(""Can't find: "" + DestinationPoint + separatorChar + outFileEnd, e);
        }
        switch(fplate.type) {
            case freemarker:
                Map<String, NodeModel> url = new HashMap<String, NodeModel>();
                url.put(""doc"", NodeModel.wrap(conf));
                try {
                    freemarker.template.Template template = freemarkerConf.getTemplate(fplate.getTemplateFileName());
                    template.proc(url, copy);
                } catch (ParseException e) {
                    throw new ModelGenerationException(""There is an error in template: "" + fplate + "". I found it when generating "" + outFileEnd, e);
                } catch (IOException e) {
                    throw new ModelGenerationException(""Can't find '"" + fplate + ""' when generating "" + outFileEnd, e);
                } catch (TemplateException e) {
                    throw new ModelGenerationException(""There is an error in template: "" + fplate + "". I found it when generating "" + outFileEnd, e);
                } catch (RuntimeException e) {
                    throw new ModelGenerationException(""There is another error while trying this template: "" + fplate + "". I found it when generating "" + outFileEnd, e);
                }
                break;
            case xslt:
                try {
                    r = new FileInputStream(fplate.getAbsolutePath());
                    xsltTransform(conf.getFirstChild(), r, copy, xsldParam);
                } catch (FileNotFoundException e) {
                    throw new ModelGenerationException(""Can't find "" + fplate, e);
                } catch (TransformerException e) {
                    throw new ModelGenerationException(""Sorry, i failed to use this template: "" + fplate + "". It broke when generating "" + outFileEnd, e);
                } finally {
                    IOUtils.closeQuietly(r);
                }
                break;
            case copy:
                try {
                    r = new FileInputStream(fplate.getAbsolutePath());
                    IOUtils.copy(r, copy);
                } catch (IOException e) {
                    throw new ModelGenerationException(""File copy failed "" + fplate.getTemplateFileName(), e);
                } finally {
                    IOUtils.closeQuietly(r);
                }
        }
        IOUtils.closeQuietly(copy);
    }
",LABEL_1,LABEL_1,LABEL_0,1,"process,tpl,model,packageName,outFileName,xsltParam,artifact,destinationPath,in,out,root","process:0.0044942498207092285,tpl:0.012240111827850342,model:-0.0006913542747497559,packageName:0.00032788515090942383,outFileName:0.004229605197906494,xsltParam:0.0019304156303405762,artifact:0.0002213120460510254,destinationPath:0.018225908279418945,in:0.0005651712417602539,out:0.0025547146797180176,root:-0.0008044838905334473,",11,78,0,"destinationPath:DestinationPoint,tpl:fplate,process:proc,outFileName:outFileEnd,out:copy,xsltParam:xsldParam,in:r,packageName:projectKey,artifact:Artifact,model:conf,root:url,",0,Greedy,763,0.15554568370183308,replace,[]
358,"    public PTask stop(PTask task, SyrupConnection con) throws Exception {
        PreparedStatement s = null;
        ResultSet result = null;
        try {
            s = con.prepareStatementFromCache(sqlImpl().sqlStatements().checkWorkerStatement());
            s.setString(1, task.key());
            result = s.executeQuery();
            con.commit();
            if (result.next()) {
                String url = result.getString(""worker"");
                InputStream i = null;
                try {
                    Object b = new URL(url).getContent();
                    if (b instanceof InputStream) {
                        i = (InputStream) b;
                        byte[] bb = new byte[256];
                        int ll = i.read(bb);
                        String k = new String(bb, 0, ll);
                        if (k.equals(task.key())) {
                            return task;
                        }
                    }
                } catch (Exception e) {
                } finally {
                    if (i != null) {
                        i.close();
                    }
                }
                PreparedStatement s2 = null;
                s2 = con.prepareStatementFromCache(sqlImpl().sqlStatements().resetWorkerStatement());
                s2.setString(1, task.key());
                s2.executeUpdate();
                task = sqlImpl().queryFunctions().readPTask(task.key(), con);
                sqlImpl().loggingFunctions().log(task.key(), LogEntry.STOPPED, con);
                con.commit();
            }
        } finally {
            con.rollback();
            close(result);
        }
        return task;
    }
 <SPLIT>     public static boolean encodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }
",318,"    public PTask work(PTask Task, SyrupConnection condition) throws Exception {
        PreparedStatement sql = null;
        ResultSet reader = null;
        try {
            sql = condition.prepareStatementFromCache(sqlImpl().sqlStatements().checkWorkerStatement());
            sql.setString(1, Task.key());
            reader = sql.executeQuery();
            condition.commit();
            if (reader.next()) {
                String file = reader.getString(""worker"");
                InputStream io = null;
                try {
                    Object buf = new URL(file).getContent();
                    if (buf instanceof InputStream) {
                        io = (InputStream) buf;
                        byte[] sb = new byte[256];
                        int kl = io.read(sb);
                        String K = new String(sb, 0, kl);
                        if (K.equals(Task.key())) {
                            return Task;
                        }
                    }
                } catch (Exception e) {
                } finally {
                    if (io != null) {
                        io.close();
                    }
                }
                PreparedStatement wstwo = null;
                wstwo = condition.prepareStatementFromCache(sqlImpl().sqlStatements().resetWorkerStatement());
                wstwo.setString(1, Task.key());
                wstwo.executeUpdate();
                Task = sqlImpl().queryFunctions().readPTask(Task.key(), condition);
                sqlImpl().loggingFunctions().log(Task.key(), LogEntry.STOPPED, condition);
                condition.commit();
            }
        } finally {
            condition.rollback();
            close(reader);
        }
        return Task;
    }
",LABEL_0,LABEL_0,LABEL_0,-1,"stop,task,con,s,result,url,i,b,bb,ll,k,s2","stop:0.013985991477966309,task:0.020144224166870117,con:0.023916304111480713,s:0.009202361106872559,result:-0.0037796497344970703,url:0.029224157333374023,i:0.01713252067565918,b:0.0036655664443969727,bb:0.03126966953277588,ll:0.0062522292137146,k:0.004860520362854004,s2:0.038747429847717285,",12,48,0,"s2:wstwo,bb:sb,url:file,con:condition,task:Task,i:io,stop:work,s:sql,ll:kl,k:K,b:buf,result:reader,",0,Greedy,628,0.10074389775594075,failed,[]
359,"    public void init(ServletContext context) throws ScratchException {
        try {
            log.debug(""Attempting to load Controllers from file: "" + REGISTRY_FILENAME);
            ClassLoader classLoader = Thread.currentThread().getContextClassLoader();
            Enumeration<URL> urls = classLoader.getResources(REGISTRY_FILENAME);
            while (urls.hasMoreElements()) {
                URL url = urls.nextElement();
                log.debug(""Found: "" + url);
                BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream()));
                String className = null;
                while ((className = reader.readLine()) != null) {
                    className = className.trim();
                    if (!"""".equals(className) && !className.startsWith(""#"")) {
                        log.debug(""Found class: "" + className);
                        Class<?> clazz = classLoader.loadClass(className);
                        addClass(clazz);
                    }
                }
            }
        } catch (IOException e) {
            e.printStackTrace();
            log.error(e);
        } catch (ClassNotFoundException e) {
            e.printStackTrace();
            log.error(e);
        }
    }
 <SPLIT>     public static void doVersionCheck(View view) {
        view.showWaitCursor();
        try {
            URL url = new URL(jEdit.getProperty(""version-check.url""));
            InputStream in = url.openStream();
            BufferedReader bin = new BufferedReader(new InputStreamReader(in));
            String line;
            String version = null;
            String build = null;
            while ((line = bin.readLine()) != null) {
                if (line.startsWith("".version"")) version = line.substring(8).trim(); else if (line.startsWith("".build"")) build = line.substring(6).trim();
            }
            bin.close();
            if (version != null && build != null) {
                if (jEdit.getBuild().compareTo(build) < 0) newVersionAvailable(view, version, url); else {
                    GUIUtilities.message(view, ""version-check"" + "".up-to-date"", new String[0]);
                }
            }
        } catch (IOException e) {
            String[] args = { jEdit.getProperty(""version-check.url""), e.toString() };
            GUIUtilities.error(view, ""read-error"", args);
        }
        view.hideWaitCursor();
    }
",220,,LABEL_1,LABEL_0,,-4,"init,context,classLoader,urls,url,reader,className,clazz",,,,0,,0,Greedy,1,0.00043869813283284504,,[]
360,"    public void createFile(File src, String filename) throws IOException {
        try {
            FileInputStream fis = new FileInputStream(src);
            OutputStream fos = this.fileResourceManager.writeResource(this.txId, filename);
            IOUtils.copy(fis, fos);
            fos.close();
            fis.close();
        } catch (ResourceManagerException e) {
            LOGGER.error(e);
        }
    }
 <SPLIT>     public static URL addToArchive(Pod pod, ZipOutputStream podArchiveOutputStream, String filename, InputStream source) throws IOException {
        ZipEntry entry = new ZipEntry(filename);
        podArchiveOutputStream.putNextEntry(entry);
        IOUtils.copy(source, podArchiveOutputStream);
        podArchiveOutputStream.closeEntry();
        return PodArchiveResolver.withinPodArchive(pod, filename);
    }
",78,"    public void createFolder(File url, String url) throws IOException {
        try {
            FileInputStream sfris = new FileInputStream(url);
            OutputStream foras = this.fileResourceManager.writeResource(this.txId, url);
            IOUtils.copy(sfris, foras);
            foras.close();
            sfris.close();
        } catch (ResourceManagerException e) {
            LOGGER.error(e);
        }
    }
",LABEL_1,LABEL_1,LABEL_1,-1,"createFile,src,filename,fis,fos","createFile:0.0023279190063476562,src:-0.010351836681365967,filename:-0.008875727653503418,fis:0.008211612701416016,fos:0.009884059429168701,",5,11,0,"fos:foras,fis:sfris,createFile:createFolder,filename:url,src:url,",0,Greedy,173,0.02336935599644979,failed,[]
361,"    public static String toMd5(String str) {
        MessageDigest messageDigest = null;
        try {
            messageDigest = MessageDigest.getInstance(""MD5"");
            messageDigest.reset();
            messageDigest.update(str.getBytes(""UTF-8""));
        } catch (NoSuchAlgorithmException e) {
            System.out.println(""NoSuchAlgorithmException caught!"");
            System.exit(-1);
        } catch (UnsupportedEncodingException e) {
            e.printStackTrace();
        }
        byte[] byteArray = messageDigest.digest();
        StringBuffer md5StrBuff = new StringBuffer();
        for (int i = 0; i < byteArray.length; i++) {
            if (Integer.toHexString(0xFF & byteArray[i]).length() == 1) md5StrBuff.append(""0"").append(Integer.toHexString(0xFF & byteArray[i])); else md5StrBuff.append(Integer.toHexString(0xFF & byteArray[i]));
        }
        return md5StrBuff.toString();
    }
 <SPLIT>     private String md5(String uri) throws ConnoteaRuntimeException {
        try {
            MessageDigest messageDigest = MessageDigest.getInstance(""MD5"");
            messageDigest.update(uri.getBytes());
            byte[] bytes = messageDigest.digest();
            StringBuffer stringBuffer = new StringBuffer();
            for (byte b : bytes) {
                String hex = Integer.toHexString(0xff & b);
                if (hex.length() == 1) {
                    stringBuffer.append('0');
                }
                stringBuffer.append(hex);
            }
            return stringBuffer.toString();
        } catch (NoSuchAlgorithmException e) {
            throw new ConnoteaRuntimeException(e);
        }
    }
",195,"    public static String toMd5(String str) {
        MessageDigest messageDigest = null;
        try {
            messageDigest = MessageDigest.getInstance(""MD5"");
            messageDigest.reset();
            messageDigest.update(str.getBytes(""UTF-8""));
        } catch (NoSuchAlgorithmException e) {
            System.out.println(""NoSuchAlgorithmException caught!"");
            System.exit(-1);
        } catch (UnsupportedEncodingException e) {
            e.printStackTrace();
        }
        byte[] byteArray = messageDigest.digest();
        StringBuffer md5StrBuff = new StringBuffer();
        for (int i = 0; i < byteArray.length; i++) {
            if (Integer.toHexString(0xFF & byteArray[i]).length() == 1) md5StrBuff.append(""0"").append(Integer.toHexString(0xFF & byteArray[i])); else md5StrBuff.append(Integer.toHexString(0xFF & byteArray[i]));
        }
        return md5StrBuff.toString();
    }
",LABEL_1,LABEL_1,LABEL_1,-1,"toMd5,str,messageDigest,byteArray,md5StrBuff,i","toMd5:0.009997963905334473,str:-1.2636184692382812e-05,messageDigest:0.0014216303825378418,byteArray:-0.0054547786712646484,md5StrBuff:0.004602193832397461,i:0.0003924369812011719,",0,0,0,"toMd5:toMd5,md5StrBuff:md5StrBuff,messageDigest:messageDigest,i:i,str:str,byteArray:byteArray,",0,Greedy,347,0.050056862831115725,failed,[]
362,"    private void updateFile(File file) throws FileNotFoundException, IOException {
        File destFile = new File(file.getPath().replace(URL_UNZIPPED_PREFIX + latestVersion, """"));
        FileChannel in = null;
        FileChannel out = null;
        try {
            if (!destFile.exists()) {
                destFile.getParentFile().mkdirs();
                destFile.createNewFile();
            }
            in = new FileInputStream(file).getChannel();
            out = new FileOutputStream(destFile).getChannel();
            in.transferTo(0, in.size(), out);
        } finally {
            if (out != null) out.close();
            if (in != null) in.close();
        }
    }
 <SPLIT>     private static FrameworkFactory getFrameworkFactory() throws Exception {
        URL url = Main.class.getClassLoader().getResource(""META-INF/services/org.osgi.framework.launch.FrameworkFactory"");
        if (url != null) {
            BufferedReader br = new BufferedReader(new InputStreamReader(url.openStream()));
            try {
                for (String s = br.readLine(); s != null; s = br.readLine()) {
                    s = s.trim();
                    if ((s.length() > 0) && (s.charAt(0) != '#')) {
                        return (FrameworkFactory) Class.forName(s).newInstance();
                    }
                }
            } finally {
                if (br != null) br.close();
            }
        }
        throw new Exception(""Could not find framework factory."");
    }
",144,"    private void upFile(File file) throws FileNotFoundException, IOException {
        File  destinationFull = new File(file.getPath().replace(URL_UNZIPPED_PREFIX + latestVersion, """"));
        FileChannel in = null;
        FileChannel url = null;
        try {
            if (!destFile.exists()) {
                 destinationFull.getParentFile().mkdirs();
                 destinationFull.createNewFile();
            }
            in = new FileInputStream(file).getChannel();
            url = new FileOutputStream( destinationFull).getChannel();
            in.transferTo(0, in.size(), url);
        } finally {
            if (url != null) url.close();
            if (in != null) in.close();
        }
    }
",LABEL_0,LABEL_0,LABEL_0,-1,"updateFile,file,IOException,destFile,in,out","updateFile:0.001872420310974121,file:0.00524139404296875,IOException:0.0018610358238220215,destFile:-0.018857181072235107,in:0.01293271780014038,out:0.0016869902610778809,",3,11,0,"in:in,file:file,updateFile:upFile,IOException:IOException,out:url,destFile: destinationFull,",0,Greedy,254,0.03626688321431478,failed,[]
363,"    public static void saveAttachmentBody(Context context, Part part, Attachment localAttachment, long accountId) throws MessagingException, IOException {
        if (part.getBody() != null) {
            long attachmentId = localAttachment.mId;
            InputStream in = part.getBody().getInputStream();
            File saveIn = AttachmentProvider.getAttachmentDirectory(context, accountId);
            if (!saveIn.exists()) {
                saveIn.mkdirs();
            }
            File saveAs = AttachmentProvider.getAttachmentFilename(context, accountId, attachmentId);
            saveAs.createNewFile();
            FileOutputStream out = new FileOutputStream(saveAs);
            long copySize = IOUtils.copy(in, out);
            in.close();
            out.close();
            String contentUriString = AttachmentProvider.getAttachmentUri(accountId, attachmentId).toString();
            localAttachment.mSize = copySize;
            localAttachment.mContentUri = contentUriString;
            ContentValues cv = new ContentValues();
            cv.put(AttachmentColumns.SIZE, copySize);
            cv.put(AttachmentColumns.CONTENT_URI, contentUriString);
            Uri uri = ContentUris.withAppendedId(Attachment.CONTENT_URI, attachmentId);
            context.getContentResolver().update(uri, cv, null, null);
        }
    }
 <SPLIT>     public void convert(File src, File dest) throws IOException {
        InputStream in = new BufferedInputStream(new FileInputStream(src));
        DcmParser p = pfact.newDcmParser(in);
        Dataset ds = fact.newDataset();
        p.setDcmHandler(ds.getDcmHandler());
        try {
            FileFormat format = p.detectFileFormat();
            if (format != FileFormat.ACRNEMA_STREAM) {
                System.out.println(""\n"" + src + "": not an ACRNEMA stream!"");
                return;
            }
            p.parseDcmFile(format, Tags.PixelData);
            if (ds.contains(Tags.StudyInstanceUID) || ds.contains(Tags.SeriesInstanceUID) || ds.contains(Tags.SOPInstanceUID) || ds.contains(Tags.SOPClassUID)) {
                System.out.println(""\n"" + src + "": contains UIDs!"" + "" => probable already DICOM - do not convert"");
                return;
            }
            boolean hasPixelData = p.getReadTag() == Tags.PixelData;
            boolean inflate = hasPixelData && ds.getInt(Tags.BitsAllocated, 0) == 12;
            int pxlen = p.getReadLength();
            if (hasPixelData) {
                if (inflate) {
                    ds.putUS(Tags.BitsAllocated, 16);
                    pxlen = pxlen * 4 / 3;
                }
                if (pxlen != (ds.getInt(Tags.BitsAllocated, 0) >>> 3) * ds.getInt(Tags.Rows, 0) * ds.getInt(Tags.Columns, 0) * ds.getInt(Tags.NumberOfFrames, 1) * ds.getInt(Tags.NumberOfSamples, 1)) {
                    System.out.println(""\n"" + src + "": mismatch pixel data length!"" + "" => do not convert"");
                    return;
                }
            }
            ds.putUI(Tags.StudyInstanceUID, uid(studyUID));
            ds.putUI(Tags.SeriesInstanceUID, uid(seriesUID));
            ds.putUI(Tags.SOPInstanceUID, uid(instUID));
            ds.putUI(Tags.SOPClassUID, classUID);
            if (!ds.contains(Tags.NumberOfSamples)) {
                ds.putUS(Tags.NumberOfSamples, 1);
            }
            if (!ds.contains(Tags.PhotometricInterpretation)) {
                ds.putCS(Tags.PhotometricInterpretation, ""MONOCHROME2"");
            }
            if (fmi) {
                ds.setFileMetaInfo(fact.newFileMetaInfo(ds, UIDs.ImplicitVRLittleEndian));
            }
            OutputStream out = new BufferedOutputStream(new FileOutputStream(dest));
            try {
            } finally {
                ds.writeFile(out, encodeParam());
                if (hasPixelData) {
                    if (!skipGroupLen) {
                        out.write(PXDATA_GROUPLEN);
                        int grlen = pxlen + 8;
                        out.write((byte) grlen);
                        out.write((byte) (grlen >> 8));
                        out.write((byte) (grlen >> 16));
                        out.write((byte) (grlen >> 24));
                    }
                    out.write(PXDATA_TAG);
                    out.write((byte) pxlen);
                    out.write((byte) (pxlen >> 8));
                    out.write((byte) (pxlen >> 16));
                    out.write((byte) (pxlen >> 24));
                }
                if (inflate) {
                    int b2, b3;
                    for (; pxlen > 0; pxlen -= 3) {
                        out.write(in.read());
                        b2 = in.read();
                        b3 = in.read();
                        out.write(b2 & 0x0f);
                        out.write(b2 >> 4 | ((b3 & 0x0f) << 4));
                        out.write(b3 >> 4);
                    }
                } else {
                    for (; pxlen > 0; --pxlen) {
                        out.write(in.read());
                    }
                }
                out.close();
            }
            System.out.print('.');
        } finally {
            in.close();
        }
    }
",227,"    public static void saveAttachmentBody(Context contact, Part PART, Attachment localAttachention, long accountId) throws MessagingException, IOException {
        if (PART.getBody() != null) {
            long attentionid = localAttachention.mId;
            InputStream url = PART.getBody().getInputStream();
            File SaveAs = AttachmentProvider.getAttachmentDirectory(contact, accountId);
            if (!saveIn.exists()) {
                SaveAs.mkdirs();
            }
            File saveAs = AttachmentProvider.getAttachmentFilename(contact, accountId, attentionid);
            saveAs.createNewFile();
            FileOutputStream conn = new FileOutputStream(saveAs);
            long openSIZE = IOUtils.copy(url, conn);
            url.close();
            conn.close();
            String contentIrisUnit = AttachmentProvider.getAttachmentUri(accountId, attentionid).toString();
            localAttachention.pCount = openSIZE;
            localAttachention.mResourceUris = contentIrisUnit;
            ContentValues uv = new ContentValues();
            uv.put(AttachmentColumns.SIZE, openSIZE);
            uv.put(AttachmentColumns.CONTENT_URI, contentIrisUnit);
            Uri  url = ContentUris.withAppendedId(Attachment.CONTENT_URI, attentionid);
            contact.getContentResolver().update( url, uv, null, null);
        }
    }
",LABEL_1,LABEL_1,LABEL_1,-1,"saveAttachmentBody,context,part,localAttachment,accountId,attachmentId,in,saveIn,saveAs,out,copySize,contentUriString,mSize,mContentUri,cv,uri","saveAttachmentBody:0.005391597747802734,context:0.0016962885856628418,part:6.473064422607422e-05,localAttachment:-0.0025297999382019043,accountId:0.004117906093597412,attachmentId:0.0021355748176574707,in:-0.0002396106719970703,saveIn:0.002493739128112793,saveAs:0.004855632781982422,out:-0.00014537572860717773,copySize:0.001297295093536377,contentUriString:0.0029680728912353516,mSize:-0.0004323720932006836,mContentUri:5.733966827392578e-05,cv:0.0011086463928222656,uri:0.00036984682083129883,",13,38,0,"saveAttachmentBody:saveAttachmentBody,saveAs:saveAs,accountId:accountId,contentUriString:contentIrisUnit,saveIn:SaveAs,attachmentId:attentionid,context:contact,copySize:openSIZE,cv:uv,uri: url,part:PART,mContentUri:mResourceUris,out:conn,in:url,mSize:pCount,localAttachment:localAttachention,",0,Greedy,742,0.1371696670850118,failed,[]
364,"    public static void writeFileType(String uriFile, String outputfile, int num) {
        BufferedWriter writer = null;
        String uri = null;
        try {
            int counter = 1;
            writer = new BufferedWriter(new FileWriter(outputfile));
            BufferedReader reader = new BufferedReader(new FileReader(uriFile));
            uri = null;
            while (counter < num) {
                uri = reader.readLine();
                counter++;
            }
            while ((uri = reader.readLine()) != null) {
                try {
                    System.err.println(""working on the ["" + counter + ""]th document."");
                    counter++;
                    URL url = new URL(uri);
                    URLConnection myConnection = url.openConnection();
                    BufferedReader myReader = new BufferedReader(new InputStreamReader(myConnection.getInputStream()));
                    String line = null;
                    boolean hasOWL = false;
                    boolean hasRDFS = false;
                    boolean hasRDF = false;
                    int linecount = 0;
                    while ((line = myReader.readLine()) != null) {
                        if (line.indexOf(""http://www.w3.org/2002/07/owl"") != -1) hasOWL = true; else if (line.indexOf(""http://www.w3.org/2000/01/rdf-schema"") != -1) hasRDFS = true; else if (line.indexOf(""http://www.w3.org/1999/02/22-rdf-syntax-ns"") != -1) hasRDF = true;
                        linecount++;
                        if (linecount > 100) break;
                    }
                    if (hasOWL) writer.write(uri + ""\t"" + OWL); else if (hasRDFS) writer.write(uri + ""\t"" + RDFS); else if (hasRDF) writer.write(uri + ""\t"" + RDF); else writer.write(uri + ""\t"" + UNKNOWN);
                    writer.newLine();
                    writer.flush();
                } catch (Exception e) {
                    e.printStackTrace();
                    try {
                        writer.write(uri + ""\t"" + BROKEN);
                        writer.newLine();
                        writer.flush();
                    } catch (Exception ex) {
                        ex.printStackTrace();
                    }
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
 <SPLIT>     public void init(ServletContext context) throws ScratchException {
        try {
            log.debug(""Attempting to load Controllers from file: "" + REGISTRY_FILENAME);
            ClassLoader classLoader = Thread.currentThread().getContextClassLoader();
            Enumeration<URL> urls = classLoader.getResources(REGISTRY_FILENAME);
            while (urls.hasMoreElements()) {
                URL url = urls.nextElement();
                log.debug(""Found: "" + url);
                BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream()));
                String className = null;
                while ((className = reader.readLine()) != null) {
                    className = className.trim();
                    if (!"""".equals(className) && !className.startsWith(""#"")) {
                        log.debug(""Found class: "" + className);
                        Class<?> clazz = classLoader.loadClass(className);
                        addClass(clazz);
                    }
                }
            }
        } catch (IOException e) {
            e.printStackTrace();
            log.error(e);
        } catch (ClassNotFoundException e) {
            e.printStackTrace();
            log.error(e);
        }
    }
",411,,LABEL_1,LABEL_0,,-4,"writeFileType,uriFile,outputfile,num,writer,uri,counter,reader,url,myConnection,myReader,line,linecount,hasOWL,hasRDFS,hasRDF",,,,0,,0,Greedy,1,0.0006482640902201335,,[]
365,"    static void populateResources() throws BasicException {
        try {
            List<URL> templates = DatabaseValidator.listResources(""/net/adrianromero/templates/"" + Locale.getDefault().getLanguage());
            if (templates.size() == 0) {
                templates = DatabaseValidator.listResources(""/net/adrianromero/templates/en"");
            }
            for (URL url : templates) {
                String fileName = url.getFile();
                fileName = fileName.substring(fileName.lastIndexOf('/') + 1);
                if (fileName.endsWith("".xml"") || fileName.endsWith("".txt"")) {
                    Resource templateResource = new Resource(fileName.substring(0, fileName.length() - 4));
                    InputStream is = url.openStream();
                    StringBuffer strBuff = new StringBuffer();
                    BufferedReader br = new BufferedReader(new InputStreamReader(is));
                    String str;
                    while ((str = br.readLine()) != null) {
                        strBuff.append(str + ""\n"");
                    }
                    templateResource.setText(strBuff.toString());
                    templateResource.save();
                }
            }
        } catch (MalformedURLException e1) {
            logger.error(""Unable to load templates"", e1);
        } catch (IOException e1) {
            logger.error(""Unable to load templates"", e1);
        }
        String[][] images = new String[][] { { ""default.user"", ""yast_sysadmin.png"" }, { ""default.product"", ""colorize.png"" }, { ""Window.Logo"", ""windowlogo.png"" }, { ""Image.Backarrow"", ""3backarrow.png"" } };
        for (int i = 0; i < images.length; i++) {
            Image img = new Image();
            img.setBufferedImage(ImageUtils.readImage(DatabaseValidator.class.getResource(""/net/adrianromero/images/"" + images[i][1])));
            img.save();
            Property imgProperty = new Property(images[i][0]);
            imgProperty.setValue("""" + img.getId());
            imgProperty.save();
        }
    }
 <SPLIT>     private static final void copyFile(File srcFile, File destDir, byte[] buffer) {
        try {
            File destFile = new File(destDir, srcFile.getName());
            InputStream in = new FileInputStream(srcFile);
            OutputStream out = new FileOutputStream(destFile);
            int bytesRead;
            while ((bytesRead = in.read(buffer)) != -1) out.write(buffer, 0, bytesRead);
            in.close();
            out.close();
        } catch (IOException ioe) {
            System.err.println(""Couldn't copy file '"" + srcFile + ""' to directory '"" + destDir + ""'"");
        }
    }
",403,"    static void populateResources() throws BasicException {
        try {
            List<URL> templates = DatabaseValidator.listResources(""/net/adrianromero/templates/"" + Locale.getDefault().getLanguage());
            if (templates.size() == 0) {
                templates = DatabaseValidator.listResources(""/net/adrianromero/templates/en"");
            }
            for (URL template : templates) {
                String fileName = template.getFile();
                fileName = fileName.substring(fileName.lastIndexOf('/') + 1);
                if (fileName.endsWith("".xml"") || fileName.endsWith("".txt"")) {
                    Resource templateResource = new Resource(fileName.substring(0, fileName.length() - 4));
                    InputStream is = template.openStream();
                    StringBuffer strBuff = new StringBuffer();
                    BufferedReader br = new BufferedReader(new InputStreamReader(is));
                    String str;
                    while ((str = br.readLine()) != null) {
                        strBuff.append(str + ""
"");
                    }
                    templateResource.setText(strBuff.toString());
                    templateResource.save();
                }
            }
        } catch (MalformedURLException e1) {
            logger.error(""Unable to load templates"", e1);
        } catch (IOException e1) {
            logger.error(""Unable to load templates"", e1);
        }
        String[][] images = new String[][] { { ""default.user"", ""yast_sysadmin.png"" }, { ""default.product"", ""colorize.png"" }, { ""Window.Logo"", ""windowlogo.png"" }, { ""Image.Backarrow"", ""3backarrow.png"" } };
        for (int i = 0; i < images.length; i++) {
            Image img = new Image();
            img.setBufferedImage(ImageUtils.readImage(DatabaseValidator.class.getResource(""/net/adrianromero/images/"" + images[i][1])));
            img.save();
            Property imgProperty = new Property(images[i][0]);
            imgProperty.setValue("""" + img.getId());
            imgProperty.save();
        }
    }
",LABEL_0,LABEL_0,LABEL_1,1,"populateResources,templates,url,fileName,templateResource,is,strBuff,br,str,images,i,img,imgProperty","populateResources:0.00196230411529541,templates:0.0023172497749328613,url:0.08473247289657593,fileName:0.029883742332458496,templateResource:0.009909272193908691,is:0.0033748745918273926,strBuff:0.011545538902282715,br:-0.006460785865783691,str:0.0036641955375671387,images:0.0025709867477416992,i:-0.0023308396339416504,img:0.0035727620124816895,imgProperty:0.00036215782165527344,",1,3,0,"url:template,",0,Greedy,98,0.01596197287241618,replace,[]
366,"    private static byte[] baseHash(String name, String password) {
        try {
            MessageDigest digest = MessageDigest.getInstance(""MD5"");
            digest.reset();
            digest.update(name.toLowerCase().getBytes());
            digest.update(password.getBytes());
            return digest.digest();
        } catch (NoSuchAlgorithmException ex) {
            d(""MD5 algorithm not found!"");
            throw new RuntimeException(""MD5 algorithm not found! Unable to authenticate"");
        }
    }
 <SPLIT>     public static String createPseudoUUID() {
        try {
            MessageDigest messageDigest = MessageDigest.getInstance(""MD5"");
            messageDigest.update(new UID().toString().getBytes());
            try {
                String localHost = InetAddress.getLocalHost().toString();
                messageDigest.update(localHost.getBytes());
            } catch (UnknownHostException e) {
                throw new OXFException(e);
            }
            byte[] digestBytes = messageDigest.digest();
            StringBuffer sb = new StringBuffer();
            sb.append(toHexString(NumberUtils.readIntBigEndian(digestBytes, 0)));
            sb.append('-');
            sb.append(toHexString(NumberUtils.readShortBigEndian(digestBytes, 4)));
            sb.append('-');
            sb.append(toHexString(NumberUtils.readShortBigEndian(digestBytes, 6)));
            sb.append('-');
            sb.append(toHexString(NumberUtils.readShortBigEndian(digestBytes, 8)));
            sb.append('-');
            sb.append(toHexString(NumberUtils.readShortBigEndian(digestBytes, 10)));
            sb.append(toHexString(NumberUtils.readIntBigEndian(digestBytes, 12)));
            return sb.toString();
        } catch (NoSuchAlgorithmException e) {
            throw new OXFException(e);
        }
    }
",93,"    private static byte[] baseSecret(String resource, String wd) {
        try {
            MessageDigest Digest = MessageDigest.getInstance(""MD5"");
            Digest.reset();
            Digest.update(resource.toLowerCase().getBytes());
            Digest.update(wd.getBytes());
            return Digest.Digest();
        } catch (NoSuchAlgorithmException ex) {
            d(""MD5 algorithm not found!"");
            throw new RuntimeException(""MD5 algorithm not found! Unable to authenticate"");
        }
    }
",LABEL_1,LABEL_1,LABEL_1,-1,"baseHash,name,password,digest","baseHash:-0.0016598105430603027,name:-0.0009098052978515625,password:-0.0004299283027648926,digest:0.002293109893798828,",4,11,0,"digest:Digest,password:wd,name:resource,baseHash:baseSecret,",0,Greedy,137,0.0208354393641154,failed,[]
367,"    private int[] sortRows(int[] rows) {
        for (int i = 0; i < rows.length; i++) {
            for (int j = 0; j < rows.length - 1; j++) {
                if (rows[j] > rows[j + 1]) {
                    int temp = rows[j];
                    rows[j] = rows[j + 1];
                    rows[j + 1] = temp;
                }
            }
        }
        return rows;
    }
 <SPLIT>     public void getWebByUrl(String strUrl, String charset, String fileIndex) {
        try {
            System.out.println(""Getting web by url: "" + strUrl);
            addReport(""Getting web by url: "" + strUrl + ""\n"");
            URL url = new URL(strUrl);
            URLConnection conn = url.openConnection();
            conn.setDoOutput(true);
            InputStream is = null;
            is = url.openStream();
            String filePath = fPath + ""/web"" + fileIndex + "".htm"";
            PrintWriter pw = null;
            FileOutputStream fos = new FileOutputStream(filePath);
            OutputStreamWriter writer = new OutputStreamWriter(fos);
            pw = new PrintWriter(writer);
            BufferedReader bReader = new BufferedReader(new InputStreamReader(is));
            StringBuffer sb = new StringBuffer();
            String rLine = null;
            String tmp_rLine = null;
            while ((rLine = bReader.readLine()) != null) {
                tmp_rLine = rLine;
                int str_len = tmp_rLine.length();
                if (str_len > 0) {
                    sb.append(""\n"" + tmp_rLine);
                    pw.println(tmp_rLine);
                    pw.flush();
                    if (deepUrls.get(strUrl) < webDepth) getUrlByString(tmp_rLine, strUrl);
                }
                tmp_rLine = null;
            }
            is.close();
            pw.close();
            System.out.println(""Get web successfully! "" + strUrl);
            addReport(""Get web successfully! "" + strUrl + ""\n"");
            addWebSuccessed();
        } catch (Exception e) {
            System.out.println(""Get web failed!       "" + strUrl);
            addReport(""Get web failed!       "" + strUrl + ""\n"");
            addWebFailed();
        }
    }
",100,"    private int[] sortSlRow(int[] rank) {
        for (int ind = 0; ind < rank.length; ind++) {
            for (int next = 0; next < rank.length - 1; next++) {
                if (rank[next] > rank[next + 1]) {
                    int offset = rank[next];
                    rank[next] = rank[next + 1];
                    rank[next + 1] = offset;
                }
            }
        }
        return rank;
    }
",LABEL_0,LABEL_0,LABEL_0,-1,"sortRows,rows,i,j,temp","sortRows:0.011480629444122314,rows:0.0040863752365112305,i:7.56382942199707e-05,j:0.00030285120010375977,temp:0.00019419193267822266,",5,25,0,"sortRows:sortSlRow,rows:rank,j:next,temp:offset,i:ind,",0,Greedy,249,0.03711691697438558,failed,[]
368,"    private void upgradeSchema() throws IOException {
        Statement stmt = null;
        try {
            int i = getSchema();
            LOG.info(""DB is currently at schema "" + i);
            if (i < SCHEMA_VERSION) {
                LOG.info(""Upgrading from schema "" + i + "" to schema "" + SCHEMA_VERSION);
                conn.setAutoCommit(false);
                stmt = conn.createStatement();
                while (i < SCHEMA_VERSION) {
                    String qry;
                    switch(i) {
                        case 1:
                            qry = ""UPDATE settings SET val = '2' WHERE var = 'schema'"";
                            stmt.executeUpdate(qry);
                            break;
                    }
                    i++;
                }
                conn.commit();
            }
        } catch (SQLException e) {
            try {
                conn.rollback();
            } catch (SQLException e2) {
                LOG.error(SQL_ERROR, e2);
            }
            LOG.fatal(SQL_ERROR, e);
            throw new IOException(""Error upgrading data store"", e);
        } finally {
            try {
                if (stmt != null) stmt.close();
                conn.setAutoCommit(true);
            } catch (SQLException e) {
                LOG.error(SQL_ERROR, e);
                throw new IOException(""Unable to cleanup SQL resources"", e);
            }
        }
    }
 <SPLIT>     @Override
    protected <T> T execute(final HttpMethod method, final String url, Parameters parameters, final Handler<T> handler) throws FoursquareException {
        HttpURLConnection connection = null;
        try {
            switch(method) {
                case GET:
                    connection = openConnection(url.concat(""?"").concat(formEncode(parameters)));
                    connection.setRequestMethod(""GET"");
                    connection.connect();
                    break;
                case POST:
                    connection = openConnection(url);
                    connection.setRequestMethod(""POST"");
                    connection.setDoOutput(true);
                    connection.setRequestProperty(""Content-Type"", ""application/x-www-form-urlencoded"");
                    connection.connect();
                    final OutputStream out = connection.getOutputStream();
                    out.write(formEncode(parameters).getBytes());
                    out.flush();
                    out.close();
                    break;
            }
            final int statusCode = connection.getResponseCode();
            if (statusCode / 100 != 2) {
                final Error error = parseBody(connection.getErrorStream(), new ErrorHandler());
                if (error == null) throw new FoursquareException(connection.getResponseMessage()); else if (""error"".equals(error.getType())) throw new FoursquareException(error.getMessage()); else if (""unauthorized"".equals(error.getType())) throw new AuthenticationException(error.getMessage()); else if (""ratelimited"".equals(error.getType())) throw new RateLimitingException(error.getMessage()); else throw new FoursquareException(connection.getResponseMessage());
            }
            return parseBody(connection.getInputStream(), handler);
        } catch (final IOException e) {
            throw new FoursquareException(e);
        } catch (final ParserConfigurationException e) {
            throw new FoursquareException(e);
        } catch (final SAXException e) {
            throw new FoursquareException(e);
        } finally {
            if (connection != null) connection.disconnect();
        }
    }
",225,"    private void upgradeSchema() throws IOException {
        Statement stmt = null;
        try {
            int i = getSchema();
            LOG.info(""DB is currently at schema "" + i);
            if (i < SCHEMA_VERSION) {
                LOG.info(""Upgrading from schema "" + i + "" to schema "" + SCHEMA_VERSION);
                conn.setAutoCommit(false);
                stmt = conn.createStatement();
                while (i < SCHEMA_VERSION) {
                    String qry;
                    switch(i) {
                        case 1:
                            qry = ""UPDATE settings SET val = '2' WHERE var = 'schema'"";
                            stmt.executeUpdate(qry);
                            break;
                    }
                    i++;
                }
                conn.commit();
            }
        } catch (SQLException e) {
            try {
                conn.rollback();
            } catch (SQLException e2) {
                LOG.error(SQL_ERROR, e2);
            }
            LOG.fatal(SQL_ERROR, e);
            throw new IOException(""Error upgrading data store"", e);
        } finally {
            try {
                if (stmt != null) stmt.close();
                conn.setAutoCommit(true);
            } catch (SQLException e) {
                LOG.error(SQL_ERROR, e);
                throw new IOException(""Unable to cleanup SQL resources"", e);
            }
        }
    }
",LABEL_0,LABEL_0,LABEL_0,-1,"upgradeSchema,stmt,i,qry","upgradeSchema:-0.002355217933654785,stmt:0.0076795220375061035,i:0.0003762245178222656,qry:0.004021286964416504,",0,0,0,"stmt:stmt,qry:qry,i:i,upgradeSchema:upgradeSchema,",0,Greedy,193,0.03223762114842733,failed,[]
369,"    public static void copy(File in, File out) throws IOException {
        if (in.exists() && in != null && out != null) {
            if (!out.exists()) {
                if (in.isDirectory()) {
                    out.mkdirs();
                } else {
                    out.createNewFile();
                }
            }
            String source = in.isDirectory() ? ""directory"" : ""file"";
            String target = out.isDirectory() ? ""directory"" : ""file"";
            if (!source.equals(target)) {
                throw new IOException(""Can't duplicate "" + source + "" as "" + target);
            } else {
                if (source.equals(""directory"")) {
                    File[] files = in.listFiles();
                    for (File file : files) {
                        copy(file, new File(out, file.getName()));
                    }
                } else {
                    FileChannel inCh = new FileInputStream(in).getChannel();
                    FileChannel outCh = new FileOutputStream(out).getChannel();
                    inCh.transferTo(0, inCh.size(), outCh);
                }
            }
        }
    }
 <SPLIT>     private static void copyFile(File src, File dst) throws IOException {
        FileChannel in = new FileInputStream(src).getChannel();
        FileChannel out = new FileOutputStream(dst).getChannel();
        in.transferTo(0, in.size(), out);
        in.close();
        out.close();
    }
",230,"    public static void opy(File url, File out) throws IOException {
        if (url.exists() && url != null && out != null) {
            if (!out.exists()) {
                if (url.isDirectory()) {
                    out.mkdirs();
                } else {
                    out.createNewFile();
                }
            }
            String source = url.isDirectory() ? ""directory"" : ""file"";
            String target = out.isDirectory() ? ""directory"" : ""file"";
            if (!source.equals(target)) {
                throw new IOException(""Can't duplicate "" + source + "" as "" + target);
            } else {
                if (source.equals(""directory"")) {
                    File[] files = url.listFiles();
                    for (File file : files) {
                        opy(file, new File(out, file.getName()));
                    }
                } else {
                    FileChannel inCh = new FileInputStream(url).getChannel();
                    FileChannel outCh = new FileOutputStream(out).getChannel();
                    inCh.transferTo(0, inCh.size(), outCh);
                }
            }
        }
    }
",LABEL_1,LABEL_1,LABEL_0,1,"copy,in,out,source,target,files,file,inCh,outCh","copy:0.037856101989746094,in:0.014294147491455078,out:0.0007071495056152344,source:-0.0025715231895446777,target:0.005877673625946045,files:-0.007267117500305176,file:-0.0037149786949157715,inCh:-0.00431370735168457,outCh:0.002341628074645996,",2,9,0,"copy:opy,in:url,",0,Greedy,123,0.017934155464172364,replace,[]
370,"    public static void copyFile(File from, File to) throws IOException {
        assert (from != null);
        assert (to != null);
        if (!to.exists()) {
            File parentDir = to.getParentFile();
            if (!parentDir.exists()) parentDir.mkdirs();
            to.createNewFile();
        }
        FileInputStream in = null;
        FileOutputStream out = null;
        try {
            in = new FileInputStream(from);
            try {
                out = new FileOutputStream(to);
                FileChannel ic = in.getChannel();
                try {
                    FileChannel oc = out.getChannel();
                    try {
                        oc.transferFrom(ic, 0, from.length());
                    } finally {
                        if (oc != null) {
                            oc.close();
                        }
                    }
                } finally {
                    if (ic != null) {
                        ic.close();
                    }
                }
            } finally {
                if (out != null) {
                    out.close();
                }
            }
        } finally {
            if (in != null) {
                in.close();
            }
        }
    }
 <SPLIT>     public static void copyFromFileToFileUsingNIO(File inputFile, File outputFile) throws FileNotFoundException, IOException {
        FileChannel inputChannel = new FileInputStream(inputFile).getChannel();
        FileChannel outputChannel = new FileOutputStream(outputFile).getChannel();
        try {
            inputChannel.transferTo(0, inputChannel.size(), outputChannel);
        } catch (IOException e) {
            throw e;
        } finally {
            if (inputChannel != null) inputChannel.close();
            if (outputChannel != null) outputChannel.close();
        }
    }
",210,"    public static void copyFile(File from, File to) throws IOException {
        assert (from != null);
        assert (to != null);
        if (!to.exists()) {
            File parentDir = to.getParentFile();
            if (!parentDir.exists()) parentDir.mkdirs();
            to.createNewFile();
        }
        FileInputStream url = null;
        FileOutputStream plugin = null;
        try {
            url = new FileInputStream(from);
            try {
                plugin = new FileOutputStream(to);
                FileChannel ic = url.getChannel();
                try {
                    FileChannel oc = plugin.getChannel();
                    try {
                        oc.transferFrom(ic, 0, from.length());
                    } finally {
                        if (oc != null) {
                            oc.close();
                        }
                    }
                } finally {
                    if (ic != null) {
                        ic.close();
                    }
                }
            } finally {
                if (plugin != null) {
                    plugin.close();
                }
            }
        } finally {
            if (url != null) {
                url.close();
            }
        }
    }
",LABEL_1,LABEL_1,LABEL_0,1,"copyFile,from,to,parentDir,in,out,ic,oc","copyFile:0.03832447528839111,from:0.009219348430633545,to:0.015011966228485107,parentDir:0.05142998695373535,in:-0.02331489324569702,out:-0.022237062454223633,ic:-0.012739956378936768,oc:0.07305818796157837,",2,10,0,"oc:oc,parentDir:parentDir,copyFile:copyFile,to:to,from:from,ic:ic,out:plugin,in:url,",0,Greedy,385,0.05589000384012858,replace,[]
371,"    public static String generateStackHashKey() {
        Exception e = null;
        try {
            throw new Exception();
        } catch (Exception ex) {
            e = ex;
        }
        MessageDigest digest;
        try {
            digest = java.security.MessageDigest.getInstance(""MD5"");
            digest.update(getStackTrace(e).getBytes());
            byte[] hash = digest.digest();
            String rtn = Base64.encode(new String(hash));
            if (keys.contains(rtn)) {
                return generatedIterStackHashKey(rtn);
            }
            keys.add(rtn);
            return rtn;
        } catch (NoSuchAlgorithmException ex) {
            throw new RuntimeException(ex);
        }
    }
 <SPLIT>     public static String sha1(String text) throws NoSuchAlgorithmException, UnsupportedEncodingException {
        MessageDigest md;
        md = MessageDigest.getInstance(""SHA-1"");
        byte[] sha1hash = new byte[40];
        md.update(text.getBytes(""iso-8859-1""), 0, text.length());
        sha1hash = md.digest();
        return convertToHex(sha1hash);
    }
",135,"    public static String generateStackHashKey() {
        Exception Exception = null;
        try {
            throw new Exception();
        } catch (Exception ex) {
            Exception = ex;
        }
        MessageDigest Digenge;
        try {
            Digenge = java.security.MessageDigest.getInstance(""MD5"");
            Digenge.update(getStackTrace(Exception).getBytes());
            byte[] Hash = Digenge.Digenge();
            String vrn = Base64.encode(new String(Hash));
            if (keys.contains(vrn)) {
                return generatedIterStackHashKey(vrn);
            }
            keys.add(vrn);
            return vrn;
        } catch (NoSuchAlgorithmException ex) {
            throw new RuntimeException(ex);
        }
    }
",LABEL_1,LABEL_1,LABEL_1,-1,"generateStackHashKey,e,digest,hash,rtn","generateStackHashKey:-0.02692967653274536,e:-0.006536960601806641,digest:-0.04401278495788574,hash:-0.008352875709533691,rtn:-0.03640371561050415,",4,15,0,"e:Exception,hash:Hash,generateStackHashKey:generateStackHashKey,rtn:vrn,digest:Digenge,",0,Greedy,227,0.0314255158106486,failed,[]
372,"    public void doBody(JWebLiteRequestWrapper req, JWebLiteResponseWrapper resp) throws SkipException {
        BufferedInputStream bis = null;
        BufferedOutputStream bos = null;
        try {
            bis = new BufferedInputStream(new FileInputStream(this.loadData(req)));
            bos = new BufferedOutputStream(resp.getOutputStream());
            IOUtils.copy(bis, bos);
            bos.flush();
        } catch (Exception e) {
            _cat.warn(""Write data failed!"", e);
        } finally {
            IOUtils.closeQuietly(bis);
            IOUtils.closeQuietly(bos);
        }
    }
 <SPLIT>     @Test
    public void test01_ok_failed_500_no_logo() throws Exception {
        DefaultHttpClient client = new DefaultHttpClient();
        try {
            HttpPost post = new HttpPost(xlsURL);
            HttpResponse response = client.execute(post);
            assertEquals(""failed code for "", 500, response.getStatusLine().getStatusCode());
        } finally {
            client.getConnectionManager().shutdown();
        }
    }
",107,"    public void handleFile(JWebLiteRequestWrapper qt, JWebLiteResponseWrapper Response) throws SkipException {
        BufferedInputStream os = null;
        BufferedOutputStream os = null;
        try {
            os = new BufferedInputStream(new FileInputStream(this.loadData(qt)));
            os = new BufferedOutputStream(Response.getOutputStream());
            IOUtils.copy(os, os);
            os.flush();
        } catch (Exception e) {
            _cat.warn(""Write data failed!"", e);
        } finally {
            IOUtils.closeQuietly(os);
            IOUtils.closeQuietly(os);
        }
    }
",LABEL_0,LABEL_0,LABEL_0,-1,"doBody,req,resp,bis,bos","doBody:0.001208186149597168,req:-0.0007627606391906738,resp:-0.0013869404792785645,bis:-0.0011058449745178223,bos:0.0049857497215271,",5,14,0,"bos:os,doBody:handleFile,req:qt,bis:os,resp:Response,",0,Greedy,209,0.0286196231842041,failed,[]
373,"    public static void compressWithZip(Vector fileList, String zipFileName) throws IOException {
        if (fileList == null || fileList.size() == 0) return;
        FileOutputStream fos = new FileOutputStream(zipFileName);
        ZipOutputStream zos = new ZipOutputStream(fos);
        Iterator iter = fileList.iterator();
        while (iter.hasNext()) {
            String fileName = (String) iter.next();
            int ind = Math.max(fileName.lastIndexOf('/'), fileName.lastIndexOf('\\'));
            String shortName = ""unknown"";
            if (ind < fileName.length() - 1) shortName = fileName.substring(ind + 1);
            zos.putNextEntry(new ZipEntry(shortName));
            FileInputStream fis = new FileInputStream(fileName);
            byte[] buf = new byte[10000];
            int bytesRead;
            while ((bytesRead = fis.read(buf)) > 0) zos.write(buf, 0, bytesRead);
            fis.close();
            zos.closeEntry();
        }
        zos.close();
    }
 <SPLIT>     public static void DecodeMapFile(String mapFile, String outputFile) throws Exception {
        byte magicKey = 0;
        byte[] buffer = new byte[2048];
        int nread;
        InputStream map;
        OutputStream output;
        try {
            map = new FileInputStream(mapFile);
        } catch (Exception e) {
            throw new Exception(""Map file error"", e);
        }
        try {
            output = new FileOutputStream(outputFile);
        } catch (Exception e) {
            throw new Exception(""Map file error"", e);
        }
        while ((nread = map.read(buffer, 0, 2048)) != 0) {
            for (int i = 0; i < nread; ++i) {
                buffer[i] ^= magicKey;
                magicKey += 43;
            }
            output.write(buffer, 0, nread);
        }
        map.close();
        output.close();
    }
",211,"    public static void compresswithJar(Vector FileString, String zipFileName) throws IOException {
        if (FileString == null || FileString.size() == 0) return;
        FileOutputStream FoS = new FileOutputStream(zipFileName);
        ZipOutputStream webkit = new ZipOutputStream(FoS);
        Iterator finder = FileString.iterator();
        while (finder.hasNext()) {
            String pageString = (String) finder.next();
            int j = Math.max(pageString.lastIndexOf('/'), pageString.lastIndexOf('\\'));
            String fullLine = ""unknown"";
            if (j < pageString.length() - 1) fullLine = pageString.substring(j + 1);
            webkit.putNextEntry(new ZipEntry(fullLine));
            FileInputStream gris = new FileInputStream(pageString);
            byte[] lb = new byte[10000];
            int bitsLoad;
            while ((bitsLoad = gris.read(lb)) > 0) webkit.write(lb, 0, bitsLoad);
            gris.close();
            webkit.closeEntry();
        }
        webkit.close();
    }
",LABEL_1,LABEL_1,LABEL_1,-1,"compressWithZip,fileList,zipFileName,fos,zos,iter,fileName,ind,shortName,fis,buf,bytesRead","compressWithZip:-0.004053771495819092,fileList:0.0022446513175964355,zipFileName:0.007865190505981445,fos:0.0006628036499023438,zos:0.003839552402496338,iter:-0.0005540847778320312,fileName:-0.0020186901092529297,ind:-0.0029883384704589844,shortName:-0.0068566203117370605,fis:-0.0005280971527099609,buf:-0.002766430377960205,bytesRead:-0.00564122200012207,",11,36,0,"zipFileName:zipFileName,zos:webkit,fileList:FileString,fos:FoS,fis:gris,iter:finder,fileName:pageString,buf:lb,ind:j,compressWithZip:compresswithJar,bytesRead:bitsLoad,shortName:fullLine,",0,Greedy,510,0.0780481735865275,failed,[]
374,"    private void copyResource() throws Exception {
        URL url = getResource(source);
        InputStream input;
        if (url != null) {
            input = url.openStream();
        } else if (new File(source).exists()) {
            input = new FileInputStream(source);
        } else {
            throw new Exception(""Could not load resource: "" + source);
        }
        OutputStream output = new FileOutputStream(destinationFile());
        int b;
        while ((b = input.read()) != -1) output.write(b);
        input.close();
        output.close();
    }
 <SPLIT>     public static int save(byte[] bytes, File outputFile) throws IOException {
        InputStream in = new ByteArrayInputStream(bytes);
        outputFile.getParentFile().mkdirs();
        OutputStream out = new FileOutputStream(outputFile);
        try {
            return IOUtils.copy(in, out);
        } finally {
            IOUtils.closeQuietly(in);
            IOUtils.closeQuietly(out);
            try {
                out.close();
            } catch (IOException ioe) {
                ioe.getMessage();
            }
            try {
                in.close();
            } catch (IOException ioe) {
                ioe.getMessage();
            }
        }
    }
",123,,LABEL_1,LABEL_0,,-4,"copyResource,url,input,output,b",,,,0,,0,Greedy,1,0.00031046072642008465,,[]
375,"    public void run(String[] args) throws Throwable {
        FileInputStream input = new FileInputStream(args[0]);
        FileOutputStream output = new FileOutputStream(args[0] + "".out"");
        Reader reader = $(Reader.class, $declass(input));
        Writer writer = $(Writer.class, $declass(output));
        Pump pump;
        if (args.length > 1 && ""diag"".equals(args[1])) {
            pump = $(new Reader() {

                int counter;

                @ToContext(mode = InvocationMode.sideEffect)
                public int read(byte[] buffer, int off, int len) throws Exception {
                    Integer rd = (Integer) $next();
                    if (rd > 0) {
                        counter += rd;
                    }
                    return 0;
                }

                @ToContext(mode = InvocationMode.sideEffect)
                public void close() throws Exception {
                    System.out.println(""Read from input "" + counter + "" bytes."");
                }
            }, reader, writer, new Writer() {

                int counter;

                @ToContext(mode = InvocationMode.sideEffect)
                public void write(byte[] buffer, int off, int len) throws Exception {
                    counter += len;
                }

                @ToContext(mode = InvocationMode.sideEffect)
                public void close() throws Exception {
                    System.out.println(""Written to output "" + counter + "" bytes."");
                }
            });
        } else {
            pump = $(reader, writer);
        }
        pump.pump();
    }
 <SPLIT>     public static void sort(float norm_abst[]) {
        float temp;
        for (int i = 0; i < 7; i++) {
            for (int j = 0; j < 7; j++) {
                if (norm_abst[j] > norm_abst[j + 1]) {
                    temp = norm_abst[j];
                    norm_abst[j] = norm_abst[j + 1];
                    norm_abst[j + 1] = temp;
                }
            }
        }
        printFixed(norm_abst[0]);
        print("" "");
        printFixed(norm_abst[1]);
        print("" "");
        printFixed(norm_abst[2]);
        print("" "");
        printFixed(norm_abst[3]);
        print("" "");
        printFixed(norm_abst[4]);
        print("" "");
        printFixed(norm_abst[5]);
        print("" "");
        printFixed(norm_abst[6]);
        print("" "");
        printFixed(norm_abst[7]);
        print(""\n"");
    }
",299,,LABEL_0,LABEL_1,,-4,"run,input,output,reader,writer,pump,counter,buffer,off,len,rd",,,,0,,0,Greedy,1,0.0004752318064371745,,[]
376,"    public static void main(String[] args) {
        String source, destination;
        if (args[0].toLowerCase().endsWith("".gz"")) {
            source = args[0];
            destination = source.substring(0, source.length() - 3);
        } else {
            source = args[0] + "".gz"";
            destination = args[0];
        }
        InputStream is = null;
        OutputStream os = null;
        try {
            is = new GZIPInputStream(new FileInputStream(source));
            os = new FileOutputStream(destination);
            byte[] buffer = new byte[8192];
            for (int length; (length = is.read(buffer)) != -1; ) os.write(buffer, 0, length);
        } catch (IOException e) {
            System.err.println(""Fehler: Kann nicht entpacken "" + args[0]);
        } finally {
            if (os != null) try {
                os.close();
            } catch (IOException e) {
            }
            if (is != null) try {
                is.close();
            } catch (IOException e) {
            }
        }
    }
 <SPLIT>     public void patch() throws IOException {
        if (mods.isEmpty()) {
            return;
        }
        IOUtils.copy(new FileInputStream(Paths.getMinecraftJarPath()), new FileOutputStream(new File(Paths.getMinecraftBackupPath())));
        JarFile mcjar = new JarFile(Paths.getMinecraftJarPath());
    }
",228,"    public static void main(String[] args) {
        String source, destination;
        if (args[0].toLowerCase().endsWith("".gz"")) {
            source = args[0];
            destination = source.substring(0, source.url() - 3);
        } else {
            source = args[0] + "".gz"";
            destination = args[0];
        }
        InputStream oss = null;
        OutputStream os = null;
        try {
            oss = new GZIPInputStream(new FileInputStream(source));
            os = new FileOutputStream(destination);
            byte[] string = new byte[8192];
            for (int url; (url = oss.read(string)) != -1; ) os.write(string, 0, url);
        } catch (IOException e) {
            System.err.println(""Fehler: Kann nicht entpacken "" + args[0]);
        } finally {
            if (os != null) try {
                os.close();
            } catch (IOException e) {
            }
            if (oss != null) try {
                oss.close();
            } catch (IOException e) {
            }
        }
    }
",LABEL_1,LABEL_1,LABEL_0,1,"source,destination,is,os,buffer,length","source:-0.004944980144500732,destination:-0.0034471750259399414,is:0.0015628337860107422,os:3.8683414459228516e-05,buffer:-0.002715170383453369,length:-0.0014650225639343262,",3,12,0,"is:oss,os:os,length:url,buffer:string,",0,Greedy,257,0.03672022422154744,replace,[]
377,"    public static void main(String[] argv) {
        if (1 < argv.length) {
            File[] sources = Source(argv[0]);
            if (null != sources) {
                for (File src : sources) {
                    File[] targets = Target(src, argv);
                    if (null != targets) {
                        final long srclen = src.length();
                        try {
                            FileChannel source = new FileInputStream(src).getChannel();
                            try {
                                for (File tgt : targets) {
                                    FileChannel target = new FileOutputStream(tgt).getChannel();
                                    try {
                                        source.transferTo(0L, srclen, target);
                                    } finally {
                                        target.close();
                                    }
                                    System.out.printf(""Updated %s\n"", tgt.getPath());
                                    File[] deletes = Delete(src, tgt);
                                    if (null != deletes) {
                                        for (File del : deletes) {
                                            if (SVN) {
                                                if (SvnDelete(del)) System.out.printf(""Deleted %s\n"", del.getPath()); else System.out.printf(""Failed to delete %s\n"", del.getPath());
                                            } else if (del.delete()) System.out.printf(""Deleted %s\n"", del.getPath()); else System.out.printf(""Failed to delete %s\n"", del.getPath());
                                        }
                                    }
                                    if (SVN) SvnAdd(tgt);
                                }
                            } finally {
                                source.close();
                            }
                        } catch (Exception exc) {
                            exc.printStackTrace();
                            System.exit(1);
                        }
                    }
                }
                System.exit(0);
            } else {
                System.err.printf(""Source file(s) not found in '%s'\n"", argv[0]);
                System.exit(1);
            }
        } else {
            usage();
            System.exit(1);
        }
    }
 <SPLIT>     protected File EncodeReturn() throws EncodeFailedException, IOException {
        CryptoClient c = getNode().getCryptoClientByID(PiggybackCrypto);
        File tmpf = getNode().getTempFM().createNewFile(""encodereturn"", ""download"");
        ChannelWriter cw = new ChannelWriter(tmpf);
        cw.putLongFile(DownloadData);
        cw.close();
        File encdata = c.RawEncode(tmpf, RawKey);
        File pigdata = PigData.EncodeData(encdata);
        File pigroute = ReturnPigRoute.EncodeData(ReturnRouteFile);
        FileOutputStream fos = new FileOutputStream(pigroute, true);
        FileChannel foc = fos.getChannel();
        FileInputStream fis = new FileInputStream(pigdata);
        FileChannel fic = fis.getChannel();
        fic.transferTo(0, fic.size(), foc);
        foc.close();
        fic.close();
        pigdata.delete();
        ReturnRouteFile.delete();
        encdata.delete();
        return pigroute;
    }
",370,"    public static void main(String[] argv) {
        if (1 < argv.length) {
            File[] vesources = Source(argv[0]);
            if (null != vesources) {
                for (File src : vesources) {
                    File[] Targlets = Target(src, argv);
                    if (null != Targlets) {
                        final long srclen = src.length();
                        try {
                            FileChannel url = new FileInputStream(src).getChannel();
                            try {
                                for (File tgt : Targlets) {
                                    FileChannel url = new FileOutputStream(tgt).getChannel();
                                    try {
                                        url.transferTo(0L, srclen, url);
                                    } finally {
                                        url.close();
                                    }
                                    System.out.printf(""Updated %s
"", tgt.getPath());
                                    File[] deletes = Delete(src, tgt);
                                    if (null != deletes) {
                                        for (File del : deletes) {
                                            if (SVN) {
                                                if (SvnDelete(del)) System.out.printf(""Deleted %s
"", del.getPath()); else System.out.printf(""Failed to delete %s
"", del.getPath());
                                            } else if (del.delete()) System.out.printf(""Deleted %s
"", del.getPath()); else System.out.printf(""Failed to delete %s
"", del.getPath());
                                        }
                                    }
                                    if (SVN) SvnAdd(tgt);
                                }
                            } finally {
                                url.close();
                            }
                        } catch (Exception exc) {
                            exc.printStackTrace();
                            System.exit(1);
                        }
                    }
                }
                System.exit(0);
            } else {
                System.err.printf(""Source file(s) not found in '%s'
"", argv[0]);
                System.exit(1);
            }
        } else {
            usage();
            System.exit(1);
        }
    }
",LABEL_1,LABEL_1,LABEL_0,1,"argv,sources,targets,srclen,source,tgt,target,deletes,del","argv:0.09520459175109863,sources:0.003284633159637451,targets:0.004257380962371826,srclen:0.038629233837127686,source:0.005202651023864746,tgt:0.09790164232254028,target:0.0018990635871887207,deletes:0.05648928880691528,del:0.00039327144622802734,",4,12,0,"tgt:tgt,argv:argv,deletes:deletes,srclen:srclen,source:url,targets:Targlets,sources:vesources,target:url,",0,Greedy,411,0.06888720989227295,replace,[]
378,"    public static String read(ClassLoader classLoader, String name, boolean all) throws IOException {
        if (all) {
            StringMaker sm = new StringMaker();
            Enumeration enu = classLoader.getResources(name);
            while (enu.hasMoreElements()) {
                URL url = (URL) enu.nextElement();
                InputStream is = url.openStream();
                String s = read(is);
                if (s != null) {
                    sm.append(s);
                    sm.append(StringPool.NEW_LINE);
                }
                is.close();
            }
            return sm.toString().trim();
        } else {
            InputStream is = classLoader.getResourceAsStream(name);
            String s = read(is);
            is.close();
            return s;
        }
    }
 <SPLIT>     public static Document ByURL(String urlstr) throws IOException {
        String uri = urlstr;
        URL url = new URL(uri);
        URLConnection connection = url.openConnection();
        InputStream in = connection.getInputStream();
        Reader reader = new InputStreamReader(in);
        InputSource is = new InputSourceImpl(reader, uri);
        System.out.println(is.toString());
        Document document = new Document() {

            @Override
            public Node adoptNode(Node source) throws DOMException {
                return null;
            }

            @Override
            public Attr createAttribute(String name) throws DOMException {
                return null;
            }

            @Override
            public Attr createAttributeNS(String namespaceURI, String qualifiedName) throws DOMException {
                return null;
            }

            @Override
            public CDATASection createCDATASection(String data) throws DOMException {
                return null;
            }

            @Override
            public Comment createComment(String data) {
                return null;
            }

            @Override
            public DocumentFragment createDocumentFragment() {
                return null;
            }

            @Override
            public Element createElement(String tagName) throws DOMException {
                return null;
            }

            @Override
            public Element createElementNS(String namespaceURI, String qualifiedName) throws DOMException {
                return null;
            }

            @Override
            public EntityReference createEntityReference(String name) throws DOMException {
                return null;
            }

            @Override
            public ProcessingInstruction createProcessingInstruction(String target, String data) throws DOMException {
                return null;
            }

            @Override
            public Text createTextNode(String data) {
                return null;
            }

            @Override
            public DocumentType getDoctype() {
                return null;
            }

            @Override
            public Element getDocumentElement() {
                return null;
            }

            @Override
            public String getDocumentURI() {
                return null;
            }

            @Override
            public DOMConfiguration getDomConfig() {
                return null;
            }

            @Override
            public Element getElementById(String elementId) {
                return null;
            }

            @Override
            public NodeList getElementsByTagName(String tagname) {
                return null;
            }

            @Override
            public NodeList getElementsByTagNameNS(String namespaceURI, String localName) {
                return null;
            }

            @Override
            public DOMImplementation getImplementation() {
                return null;
            }

            @Override
            public String getInputEncoding() {
                return null;
            }

            @Override
            public boolean getStrictErrorChecking() {
                return false;
            }

            @Override
            public String getXmlEncoding() {
                return null;
            }

            @Override
            public boolean getXmlStandalone() {
                return false;
            }

            @Override
            public String getXmlVersion() {
                return null;
            }

            @Override
            public Node importNode(Node importedNode, boolean deep) throws DOMException {
                return null;
            }

            @Override
            public void normalizeDocument() {
            }

            @Override
            public Node renameNode(Node n, String namespaceURI, String qualifiedName) throws DOMException {
                return null;
            }

            @Override
            public void setDocumentURI(String documentURI) {
            }

            @Override
            public void setStrictErrorChecking(boolean strictErrorChecking) {
            }

            @Override
            public void setXmlStandalone(boolean xmlStandalone) throws DOMException {
            }

            @Override
            public void setXmlVersion(String xmlVersion) throws DOMException {
            }

            public Node appendChild(Node arg0) throws DOMException {
                return null;
            }

            public Node cloneNode(boolean arg0) {
                return null;
            }

            public short compareDocumentPosition(Node arg0) throws DOMException {
                return 0;
            }

            public NamedNodeMap getAttributes() {
                return null;
            }

            public String getBaseURI() {
                return null;
            }

            public NodeList getChildNodes() {
                return null;
            }

            public Object getFeature(String arg0, String arg1) {
                return null;
            }

            public Node getFirstChild() {
                return null;
            }

            public Node getLastChild() {
                return null;
            }

            public String getLocalName() {
                return null;
            }

            public String getNamespaceURI() {
                return null;
            }

            public Node getNextSibling() {
                return null;
            }

            public String getNodeName() {
                return null;
            }

            public short getNodeType() {
                return 0;
            }

            public String getNodeValue() throws DOMException {
                return null;
            }

            public Document getOwnerDocument() {
                return null;
            }

            public Node getParentNode() {
                return null;
            }

            public String getPrefix() {
                return null;
            }

            public Node getPreviousSibling() {
                return null;
            }

            public String getTextContent() throws DOMException {
                return null;
            }

            public Object getUserData(String arg0) {
                return null;
            }

            public boolean hasAttributes() {
                return false;
            }

            public boolean hasChildNodes() {
                return false;
            }

            public Node insertBefore(Node arg0, Node arg1) throws DOMException {
                return null;
            }

            public boolean isDefaultNamespace(String arg0) {
                return false;
            }

            public boolean isEqualNode(Node arg0) {
                return false;
            }

            public boolean isSameNode(Node arg0) {
                return false;
            }

            public boolean isSupported(String arg0, String arg1) {
                return false;
            }

            public String lookupNamespaceURI(String arg0) {
                return null;
            }

            public String lookupPrefix(String arg0) {
                return null;
            }

            public void normalize() {
            }

            public Node removeChild(Node arg0) throws DOMException {
                return null;
            }

            public Node replaceChild(Node arg0, Node arg1) throws DOMException {
                return null;
            }

            public void setNodeValue(String arg0) throws DOMException {
            }

            public void setPrefix(String arg0) throws DOMException {
            }

            public void setTextContent(String arg0) throws DOMException {
            }

            public Object setUserData(String arg0, Object arg1, UserDataHandler arg2) {
                return null;
            }
        };
        return document;
    }
",153,"    public static String input(ClassLoader ClassReader, String connection, boolean this) throws IOException {
        if (this) {
            StringMaker so = new StringMaker();
            Enumeration anu = ClassReader.getResources(connection);
            while (anu.hasMoreElements()) {
                URL in = (URL) anu.nextElement();
                InputStream us = in.openStream();
                String lines = input(us);
                if (lines != null) {
                    so.append(lines);
                    so.append(StringPool.NEW_LINE);
                }
                us.close();
            }
            return so.toString().trim();
        } else {
            InputStream us = ClassReader.getResourceAsStream(connection);
            String lines = input(us);
            us.close();
            return lines;
        }
    }
",LABEL_0,LABEL_0,LABEL_0,-1,"read,classLoader,name,all,sm,enu,url,is,s","read:-0.002339482307434082,classLoader:-0.0008583664894104004,name:0.000253140926361084,all:0.0005410909652709961,sm:0.0017169713973999023,enu:0.002171814441680908,url:-0.0013676881790161133,is:0.0036374926567077637,s:0.0036479830741882324,",9,31,0,"s:lines,is:us,enu:anu,sm:so,all:this,name:connection,classLoader:ClassReader,url:in,read:input,",0,Greedy,446,0.08861728509267171,failed,[]
379,"    public String generateToken(String code) {
        try {
            MessageDigest md = MessageDigest.getInstance(""SHA1"");
            md.update(code.getBytes());
            byte[] bytes = md.digest();
            return toHex(bytes);
        } catch (NoSuchAlgorithmException e) {
            throw new RuntimeException(""SHA1 missing"");
        }
    }
 <SPLIT>     public static void copy(File from, File to) {
        boolean result;
        if (from.isDirectory()) {
            File[] subFiles = from.listFiles();
            for (int i = 0; i < subFiles.length; i++) {
                File newDir = new File(to, subFiles[i].getName());
                result = false;
                if (subFiles[i].isDirectory()) {
                    if (newDir.exists()) result = true; else result = newDir.mkdirs();
                } else if (subFiles[i].isFile()) {
                    try {
                        result = newDir.createNewFile();
                    } catch (IOException e) {
                        log.error(""unable to create new file: "" + newDir, e);
                        result = false;
                    }
                }
                if (result) copy(subFiles[i], newDir);
            }
        } else if (from.isFile()) {
            FileInputStream in = null;
            FileOutputStream out = null;
            try {
                in = new FileInputStream(from);
                out = new FileOutputStream(to);
                int fileLength = (int) from.length();
                char charBuff[] = new char[fileLength];
                int len;
                int oneChar;
                while ((oneChar = in.read()) != -1) {
                    out.write(oneChar);
                }
            } catch (FileNotFoundException e) {
                log.error(""File not found!"", e);
            } catch (IOException e) {
                log.error(""Unable to read from file!"", e);
            } finally {
                try {
                    if (in != null) in.close();
                    if (out != null) out.close();
                } catch (IOException e1) {
                    log.error(""Error closing file reader/writer"", e1);
                }
            }
        }
    }
",69,"    public String generatedToken(String output) {
        try {
            MessageDigest  MD = MessageDigest.getInstance(""SHA1"");
             MD.update(output.getBytes());
            byte[] les =  MD.digest();
            return toHex(les);
        } catch (NoSuchAlgorithmException e) {
            throw new RuntimeException(""SHA1 missing"");
        }
    }
",LABEL_0,LABEL_0,LABEL_0,-1,"generateToken,code,md,bytes","generateToken:-0.007905840873718262,code:-0.005213916301727295,md:-0.0020903348922729492,bytes:-0.0015252232551574707,",4,8,0,"bytes:les,md: MD,code:output,generateToken:generatedToken,",0,Greedy,153,0.023310542106628418,failed,[]
380,"    public static void copy(File source, File dest) throws IOException {
        FileChannel in = null, out = null;
        try {
            in = new FileInputStream(source).getChannel();
            out = new FileOutputStream(dest).getChannel();
            long size = in.size();
            MappedByteBuffer buf = in.map(FileChannel.MapMode.READ_ONLY, 0, size);
            out.write(buf);
        } finally {
            if (in != null) in.close();
            if (out != null) out.close();
        }
    }
 <SPLIT>     public void patch() throws IOException {
        if (mods.isEmpty()) {
            return;
        }
        IOUtils.copy(new FileInputStream(Paths.getMinecraftJarPath()), new FileOutputStream(new File(Paths.getMinecraftBackupPath())));
        JarFile mcjar = new JarFile(Paths.getMinecraftJarPath());
    }
",113,"    public static void copy(File source, File dest) throws IOException {
        FileChannel url = null, out = null;
        try {
            url = new FileInputStream(source).getChannel();
            out = new FileOutputStream(dest).getChannel();
            long open = url.open();
            MappedByteBuffer fam = url.map(FileChannel.MapMode.READ_ONLY, 0, open);
            out.write(fam);
        } finally {
            if (url != null) url.close();
            if (out != null) out.close();
        }
    }
",LABEL_1,LABEL_1,LABEL_0,1,"copy,source,dest,in,out,size,buf","copy:-0.05936676263809204,source:-0.005732715129852295,dest:-0.008364856243133545,in:-0.004708647727966309,out:-0.013233661651611328,size:0.0020970702171325684,buf:0.00751042366027832,",3,11,0,"buf:fam,size:open,in:url,",0,Greedy,170,0.022670586903889973,replace,[]
381,"    public String put(String resourceID, Map<String, String> headersMap) {
        HttpClient httpClient = new DefaultHttpClient();
        httpClient.getParams().setParameter(""http.useragent"", ""sla@soi OCCI Client v0.2"");
        HttpPut httpPut = new HttpPut(resourceID);
        List<Header> headersList = this.convert2Headers(headersMap);
        for (Iterator<Header> iterator = headersList.iterator(); iterator.hasNext(); ) {
            httpPut.addHeader(iterator.next());
        }
        logger.info(httpPut.getRequestLine());
        logger.info(httpPut.getAllHeaders());
        Header[] headersArray = httpPut.getAllHeaders();
        String[] fields = { Response.Location };
        HashMap<String, String> occiHeaders = new HashMap<String, String>();
        for (int H = 0; H < headersArray.length; H++) {
            Header header = headersArray[H];
            logger.info(""header - request  -"" + header.toString());
            logger.info(""	headerName - "" + header.getName());
            logger.info(""	headerValue - "" + header.getValue());
        }
        String statusLine = null;
        try {
            HttpResponse httpResponse = httpClient.execute(httpPut);
            statusLine = httpResponse.getStatusLine().toString();
            int statusCode = httpResponse.getStatusLine().getStatusCode();
            logger.info(""----------------------------------------"");
            logger.info(""StatusLine - (full) - "" + httpResponse.getStatusLine());
            logger.info(""	StatusCode - "" + statusCode);
            logger.info(""	Reason - "" + httpResponse.getStatusLine().getReasonPhrase());
            logger.info(""	Protocol - "" + httpResponse.getStatusLine().getProtocolVersion().toString());
            logger.info(""----------------------------------------"");
            if (StatusCode.validate(statusCode)) {
                logger.info(""Response Validated"");
            } else {
                logger.error(""Response NOT Validated"");
                return null;
            }
            Header[] headers = httpResponse.getAllHeaders();
            for (int i = 0; i < headers.length; i++) {
                Header header = headers[i];
                logger.info(""header - response - "" + header.toString());
                logger.info(""	headerName - "" + header.getName());
                logger.info(""	headerValue - "" + header.getValue());
                for (int h = 0; h < fields.length; h++) {
                    logger.info(""	Looking for  - "" + fields[h]);
                    if (fields[h].equals(header.getName().toString())) {
                        logger.info(""	Found an OCCI Header - "" + header.getName());
                        occiHeaders.put(header.getName(), header.getValue());
                    }
                }
            }
        } catch (org.apache.http.conn.HttpHostConnectException e) {
            e.printStackTrace();
            logger.error(e);
            return null;
        } catch (ClientProtocolException e) {
            e.printStackTrace();
            logger.error(e);
            return null;
        } catch (IOException e) {
            e.printStackTrace();
            logger.error(e);
            return null;
        } finally {
            httpClient.getConnectionManager().shutdown();
        }
        logger.info(""occiHeaders - "" + occiHeaders);
        if (occiHeaders.containsKey(Response.Location)) {
            logger.info(""Valid Provision"" + statusLine);
            return occiHeaders.get(Response.Location).toString().replaceAll(Response.jobs, """");
        }
        logger.info(""NOT a Valid Provision - "" + statusLine);
        return statusLine;
    }
 <SPLIT>     public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.main);
        mButton1 = (Button) findViewById(R.id.myButton1);
        mButton2 = (Button) findViewById(R.id.myButton2);
        mTextView1 = (TextView) findViewById(R.id.myTextView1);
        mButton1.setOnClickListener(new Button.OnClickListener() {

            public void onClick(View v) {
                String uriAPI = ""http://www.sina.com"";
                HttpPost httpRequest = new HttpPost(uriAPI);
                List<NameValuePair> params = new ArrayList<NameValuePair>();
                params.add(new BasicNameValuePair(""str"", ""post string""));
                try {
                    httpRequest.setEntity(new UrlEncodedFormEntity(params, HTTP.UTF_8));
                    HttpResponse httpResponse = new DefaultHttpClient().execute(httpRequest);
                    if (httpResponse.getStatusLine().getStatusCode() == 200) {
                        String strResult = EntityUtils.toString(httpResponse.getEntity());
                        mTextView1.setText(strResult);
                    } else {
                        mTextView1.setText(""Error Response: "" + httpResponse.getStatusLine().toString());
                    }
                } catch (ClientProtocolException e) {
                    mTextView1.setText(e.getMessage().toString());
                    e.printStackTrace();
                } catch (IOException e) {
                    mTextView1.setText(e.getMessage().toString());
                    e.printStackTrace();
                } catch (Exception e) {
                    mTextView1.setText(e.getMessage().toString());
                    e.printStackTrace();
                }
            }
        });
        mButton2.setOnClickListener(new Button.OnClickListener() {

            public void onClick(View v) {
                String uriAPI = ""http://www.sina.com"";
                HttpGet httpRequest = new HttpGet(uriAPI);
                try {
                    HttpResponse httpResponse = new DefaultHttpClient().execute(httpRequest);
                    if (httpResponse.getStatusLine().getStatusCode() == 200) {
                        String strResult = EntityUtils.toString(httpResponse.getEntity());
                        strResult = eregi_replace(""(\r\n|\r|\n|\n\r)"", """", strResult);
                        mTextView1.setText(strResult);
                    } else {
                        mTextView1.setText(""Error Response: "" + httpResponse.getStatusLine().toString());
                    }
                } catch (ClientProtocolException e) {
                    mTextView1.setText(e.getMessage().toString());
                    e.printStackTrace();
                } catch (IOException e) {
                    mTextView1.setText(e.getMessage().toString());
                    e.printStackTrace();
                } catch (Exception e) {
                    mTextView1.setText(e.getMessage().toString());
                    e.printStackTrace();
                }
            }
        });
    }
",727,"    public String output(String responseURL, Map<String, String> httpMap) {
        HttpClient httpClient = new DefaultHttpClient();
        httpClient.getParams().setParameter(""http.useragent"", ""sla@soi OCCI Client v0.2"");
        HttpPut httpPut = new HttpPut(responseURL);
        List<Header> headersSet = this.convert2Headers(httpMap);
        for (Iterator<Header> writer = headersSet.writer(); writer.hasNext(); ) {
            httpPut.addHeader(writer.next());
        }
        logger.info(httpPut.getRequestLine());
        logger.info(httpPut.getAllHeaders());
        Header[]  headersAr = httpPut.getAllHeaders();
        String[] FIELD = { Response.Location };
        HashMap<String, String> ocsiBuffer = new HashMap<String, String>();
        for (int Handler = 0; Handler <  headersAr.length; Handler++) {
            Header http =  headersAr[Handler];
            logger.info(""header - request  -"" + http.toString());
            logger.info(""	headerName - "" + http.getName());
            logger.info(""	headerValue - "" + http.getValue());
        }
        String StatusFile = null;
        try {
            HttpResponse HttpStatus = httpClient.execute(httpPut);
            StatusFile = HttpStatus.getStatusLine().toString();
            int resultLine = HttpStatus.getStatusLine().getStatusCode();
            logger.info(""----------------------------------------"");
            logger.info(""StatusLine - (full) - "" + HttpStatus.getStatusLine());
            logger.info(""	StatusCode - "" + resultLine);
            logger.info(""	Reason - "" + HttpStatus.getStatusLine().getReasonPhrase());
            logger.info(""	Protocol - "" + HttpStatus.getStatusLine().getProtocolVersion().toString());
            logger.info(""----------------------------------------"");
            if (StatusCode.validate(resultLine)) {
                logger.info(""Response Validated"");
            } else {
                logger.error(""Response NOT Validated"");
                return null;
            }
            Header[] headers = HttpStatus.getAllHeaders();
            for (int i = 0; i < headers.length; i++) {
                Header http = headers[i];
                logger.info(""header - response - "" + http.toString());
                logger.info(""	headerName - "" + http.getName());
                logger.info(""	headerValue - "" + http.getValue());
                for (int h = 0; h < FIELD.length; h++) {
                    logger.info(""	Looking for  - "" + FIELD[h]);
                    if (FIELD[h].equals(http.getName().toString())) {
                        logger.info(""	Found an OCCI Header - "" + http.getName());
                        ocsiBuffer.output(http.getName(), http.getValue());
                    }
                }
            }
        } catch (org.apache.http.conn.HttpHostConnectException e) {
            e.printStackTrace();
            logger.error(e);
            return null;
        } catch (ClientProtocolException e) {
            e.printStackTrace();
            logger.error(e);
            return null;
        } catch (IOException e) {
            e.printStackTrace();
            logger.error(e);
            return null;
        } finally {
            httpClient.getConnectionManager().shutdown();
        }
        logger.info(""occiHeaders - "" + ocsiBuffer);
        if (ocsiBuffer.containsKey(Response.Location)) {
            logger.info(""Valid Provision"" + StatusFile);
            return ocsiBuffer.get(Response.Location).toString().replaceAll(Response.jobs, """");
        }
        logger.info(""NOT a Valid Provision - "" + StatusFile);
        return StatusFile;
    }
",LABEL_0,LABEL_0,LABEL_1,1,"put,resourceID,headersMap,httpClient,httpPut,headersList,iterator,headersArray,fields,occiHeaders,H,header,statusLine,httpResponse,statusCode","put:-0.00010180473327636719,resourceID:-1.6450881958007812e-05,headersMap:-3.457069396972656e-05,httpClient:-0.00017112493515014648,httpPut:-0.0001513957977294922,headersList:-5.9604644775390625e-06,iterator:5.4836273193359375e-05,headersArray:2.205371856689453e-06,fields:2.1278858184814453e-05,occiHeaders:0.00023126602172851562,H:8.147954940795898e-05,header:4.571676254272461e-05,statusLine:-3.731250762939453e-05,httpResponse:-8.922815322875977e-05,statusCode:2.0384788513183594e-05,",13,58,0,"occiHeaders:ocsiBuffer,H:Handler,iterator:writer,header:http,fields:FIELD,statusCode:resultLine,headersArray: headersAr,headersList:headersSet,resourceID:responseURL,headersMap:httpMap,statusLine:StatusFile,httpResponse:HttpStatus,put:output,",0,Greedy,497,0.11553190151850383,replace,[]
382,"    public static boolean decodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }
 <SPLIT>     private static void copyFile(File src, File dst) throws IOException {
        FileChannel in = new FileInputStream(src).getChannel();
        FileChannel out = new FileOutputStream(dst).getChannel();
        in.transferTo(0, in.size(), out);
        in.close();
        out.close();
    }
",194,"    public static boolean decodeFileToString(String minbase, String inputdatabase) {
        boolean success = false;
        java.io.InputStream re = null;
        java.io.OutputStream conn = null;
        try {
            re = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(minbase)), Base64.DECODE);
            conn = new java.io.BufferedOutputStream(new java.io.FileOutputStream(inputdatabase));
            byte[] url = new byte[65536];
            int load = -1;
            while ((load = re.load(url)) >= 0) {
                conn.write(url, 0, load);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                re.close();
            } catch (Exception exc) {
            }
            try {
                conn.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }
",LABEL_1,LABEL_1,LABEL_0,1,"decodeFileToFile,infile,outfile,in,out,buffer,read,success","decodeFileToFile:-0.016613662242889404,infile:-0.0006636977195739746,outfile:-0.0003974437713623047,in:-0.006833255290985107,out:-0.0023461580276489258,buffer:-0.0039667487144470215,read:-0.0017274022102355957,success:0.00517195463180542,",7,20,0,"success:success,outfile:inputdatabase,infile:minbase,read:load,out:conn,buffer:url,in:re,decodeFileToFile:decodeFileToString,",0,Greedy,358,0.051207725207010904,replace,[]
383,"    public static PersistencyParameters parse(String unitName) {
        URL[] persistenceUnits;
        try {
            persistenceUnits = Classpath.search(""META-INF/"", ""persistence.xml"");
        } catch (IOException e) {
            throw new Error(e);
        }
        Set classes = new HashSet();
        for (int i = 0; i < persistenceUnits.length; i++) {
            URL url = persistenceUnits[i];
            try {
                nu.xom.Builder b = new nu.xom.Builder(false);
                Document d = b.build(url.openStream());
                Nodes unitNodes = d.getRootElement().query(""//p:persistence-unit"", new XPathContext(""p"", ""http://java.sun.com/xml/ns/persistence""));
                for (int j = 0; j < unitNodes.size(); j++) {
                    Node unitNode = unitNodes.get(j);
                    Element unitElt = ((Element) unitNode);
                    String uName = unitElt.getAttributeValue(""name"");
                    if (!uName.equals(unitName)) continue;
                    {
                        PersistencyParameters parameters = new PersistencyParameters();
                        Nodes classNodes = unitElt.query(""//p:property"", new XPathContext(""p"", ""http://java.sun.com/xml/ns/persistence""));
                        for (int k = 0; k < classNodes.size(); k++) {
                            Node classNode = classNodes.get(k);
                            if (!(classNode instanceof Element)) continue;
                            Element classElt = (Element) classNode;
                            String elementName = classElt.getAttribute(""name"").getValue();
                            if (elementName.equals(""eclipselink.jdbc.url"")) {
                                String elementValue = classElt.getAttribute(""value"").getValue();
                                parameters.setJdbcUrl(elementValue);
                            } else if (elementName.equals(""eclipselink.jdbc.user"")) {
                                String elementValue = classElt.getAttribute(""value"").getValue();
                                parameters.setDBUserName(elementValue);
                            } else if (elementName.equals(""eclipselink.jdbc.password"")) {
                                String elementValue = classElt.getAttribute(""value"").getValue();
                                parameters.setDBPassword(elementValue);
                            } else if (elementName.equals(""eclipselink.jdbc.driver"")) {
                                String elementValue = classElt.getAttribute(""value"").getValue();
                                parameters.setDBDriverClassName(elementValue);
                            }
                        }
                        return parameters;
                    }
                }
            } catch (Exception x) {
                x.printStackTrace();
                throw new Error(x);
            }
        }
        return null;
    }
 <SPLIT>     public static void main(String[] args) throws Exception {
        FileChannel fc = new FileOutputStream(""data2.txt"").getChannel();
        fc.write(ByteBuffer.wrap(""Some text"".getBytes()));
        fc.close();
        fc = new FileInputStream(""data2.txt"").getChannel();
        ByteBuffer buff = ByteBuffer.allocate(BSIZE);
        fc.read(buff);
        buff.flip();
        System.out.println(buff.asCharBuffer());
        buff.rewind();
        String encoding = System.getProperty(""file.encoding"");
        System.out.println(""Decoded using "" + encoding + "": "" + Charset.forName(encoding).decode(buff));
        fc = new FileOutputStream(""data2.txt"").getChannel();
        fc.write(ByteBuffer.wrap(""Some text"".getBytes(""UTF-16BE"")));
        fc.close();
        fc = new FileInputStream(""data2.txt"").getChannel();
        buff.clear();
        fc.read(buff);
        buff.flip();
        System.out.println(buff.asCharBuffer());
        fc = new FileOutputStream(""data2.txt"").getChannel();
        buff = ByteBuffer.allocate(24);
        buff.asCharBuffer().put(""Some text"");
        fc.write(buff);
        fc.close();
        fc = new FileInputStream(""data2.txt"").getChannel();
        buff.clear();
        fc.read(buff);
        buff.flip();
        System.out.println(buff.asCharBuffer());
    }
",480,"    public static PersistencyParameters  install(String machinePath) {
        URL[] persistenceOperodes;
        try {
            persistenceOperodes = Classpath.search(""META-INF/"", ""persistence.xml"");
        } catch (IOException e) {
            throw new Error(e);
        }
        Set  packages = new HashSet();
        for (int u = 0; u < persistenceOperodes.length; u++) {
            URL element = persistenceOperodes[u];
            try {
                nu.xom.Builder bis = new nu.xom.Builder(false);
                Document dir = bis.build(element.openStream());
                Nodes unitNodes = dir.getRootElement().query(""//p:persistence-unit"", new XPathContext(""p"", ""http://java.sun.com/xml/ns/persistence""));
                for (int bj = 0; bj < unitNodes.size(); bj++) {
                    Node connectionN = unitNodes.get(bj);
                    Element unitElt = ((Element) connectionN);
                    String uPath = unitElt.getAttributeValue(""name"");
                    if (!uName.equals(machinePath)) continue;
                    {
                        PersistencyParameters pumers = new PersistencyParameters();
                        Nodes fieldNinodes = unitElt.query(""//p:property"", new XPathContext(""p"", ""http://java.sun.com/xml/ns/persistence""));
                        for (int dk = 0; dk < fieldNinodes.size(); dk++) {
                            Node busNs = fieldNinodes.get(dk);
                            if (!(busNs instanceof Element)) continue;
                            Element classXld = (Element) busNs;
                            String elementPath = classXld.getAttribute(""name"").getValue();
                            if (elementPath.equals(""eclipselink.jdbc.url"")) {
                                String styleVALUE = classXld.getAttribute(""value"").getValue();
                                pumers.setJdbcUrl(styleVALUE);
                            } else if (elementPath.equals(""eclipselink.jdbc.user"")) {
                                String styleVALUE = classXld.getAttribute(""value"").getValue();
                                pumers.setDBUserName(styleVALUE);
                            } else if (elementPath.equals(""eclipselink.jdbc.password"")) {
                                String styleVALUE = classXld.getAttribute(""value"").getValue();
                                pumers.setDBPassword(styleVALUE);
                            } else if (elementPath.equals(""eclipselink.jdbc.driver"")) {
                                String styleVALUE = classXld.getAttribute(""value"").getValue();
                                pumers.setDBDriverClassName(styleVALUE);
                            }
                        }
                        return pumers;
                    }
                }
            } catch (Exception x) {
                x.printStackTrace();
                throw new Error(x);
            }
        }
        return null;
    }
",LABEL_0,LABEL_0,LABEL_1,1,"parse,unitName,persistenceUnits,classes,i,url,b,d,unitNodes,j,unitNode,unitElt,uName,parameters,classNodes,k,classNode,classElt,elementName,elementValue","parse:2.384185791015625e-07,unitName:1.7285346984863281e-06,persistenceUnits:9.47713851928711e-06,classes:1.3113021850585938e-06,i:5.245208740234375e-06,url:0.00023406744003295898,b:-4.649162292480469e-06,d:1.2516975402832031e-06,unitNodes:-7.092952728271484e-06,j:6.318092346191406e-06,unitNode:6.198883056640625e-06,unitElt:-1.3947486877441406e-05,uName:4.76837158203125e-07,parameters:1.1563301086425781e-05,classNodes:5.602836608886719e-06,k:1.0728836059570312e-05,classNode:1.5020370483398438e-05,classElt:7.510185241699219e-06,elementName:1.3709068298339844e-05,elementValue:1.9550323486328125e-05,",18,61,0,"url:element,elementValue:styleVALUE,classNode:busNs,elementName:elementPath,parameters:pumers,k:dk,persistenceUnits:persistenceOperodes,classElt:classXld,j:bj,unitNode:connectionN,classNodes:fieldNinodes,i:u,unitName:machinePath,classes: packages,d:dir,uName:uPath,parse: install,b:bis,",0,Greedy,761,0.1458195924758911,replace,[]
384,"    public void removeRealm(final List<Integer> realmIds) {
        try {
            connection.setAutoCommit(false);
            new ProcessEnvelope().executeNull(new ExecuteProcessAbstractImpl(connection, false, false, true, true) {

                @Override
                public void executeProcessReturnNull() throws SQLException {
                    psImpl = connImpl.prepareStatement(sqlCommands.getProperty(""realm.remove""));
                    Iterator<Integer> iter = realmIds.iterator();
                    int realmId;
                    while (iter.hasNext()) {
                        realmId = iter.next();
                        psImpl.setInt(1, realmId);
                        psImpl.executeUpdate();
                        cmDB.removeRealm(realmId);
                    }
                }
            });
            connection.commit();
        } catch (SQLException sqle) {
            log.error(sqle);
            if (connection != null) {
                try {
                    connection.rollback();
                } catch (SQLException ex) {
                }
            }
        } finally {
            if (connection != null) {
                try {
                    connection.setAutoCommit(true);
                } catch (SQLException ex) {
                }
            }
        }
    }
 <SPLIT>     public static void buildDeb(File debFile, File controlFile, File dataFile) throws IOException {
        long now = new Date().getTime() / 1000;
        OutputStream deb = new FileOutputStream(debFile);
        deb.write(""!<arch>\n"".getBytes());
        startFileEntry(deb, DEBIAN_BINARY_NAME, now, DEBIAN_BINARY_CONTENT.length());
        deb.write(DEBIAN_BINARY_CONTENT.getBytes());
        endFileEntry(deb, DEBIAN_BINARY_CONTENT.length());
        startFileEntry(deb, CONTROL_NAME, now, controlFile.length());
        FileInputStream control = new FileInputStream(controlFile);
        byte[] buffer = new byte[1024];
        while (true) {
            int read = control.read(buffer);
            if (read == -1) break;
            deb.write(buffer, 0, read);
        }
        control.close();
        endFileEntry(deb, controlFile.length());
        startFileEntry(deb, DATA_NAME, now, dataFile.length());
        FileInputStream data = new FileInputStream(dataFile);
        while (true) {
            int read = data.read(buffer);
            if (read == -1) break;
            deb.write(buffer, 0, read);
        }
        data.close();
        endFileEntry(deb, dataFile.length());
        deb.close();
    }
",202,"    public void delRealM(final List<Integer> realmIds) {
        try {
            connection.setAutoCommit(false);
            new ProcessEnvelope().executeNull(new ExecuteProcessAbstractImpl(connection, false, false, true, true) {

                @Override
                public void executeProcessReturnNull() throws SQLException {
                    dsHelper = connImpl.prepareStatement(sqlCommands.getProperty(""realm.remove""));
                    Iterator<Integer> iterator = realmIds.iterator();
                    int realdmConfig;
                    while (iterator.hasNext()) {
                        realdmConfig = iterator.next();
                        dsHelper.setInt(1, realdmConfig);
                        dsHelper.executeUpdate();
                        cmDB.delRealM(realdmConfig);
                    }
                }
            });
            connection.commit();
        } catch (SQLException sqle) {
            log.error(sqle);
            if (connection != null) {
                try {
                    connection.rollback();
                } catch (SQLException ex) {
                }
            }
        } finally {
            if (connection != null) {
                try {
                    connection.setAutoCommit(true);
                } catch (SQLException ex) {
                }
            }
        }
    }
",LABEL_0,LABEL_0,LABEL_0,-1,"removeRealm,realmIds,psImpl,iter,realmId","removeRealm:-0.002077341079711914,realmIds:0.004496455192565918,psImpl:0.0024716854095458984,iter:-0.0011911392211914062,realmId:-0.00013136863708496094,",4,12,0,"realmIds:realmIds,psImpl:dsHelper,realmId:realdmConfig,iter:iterator,removeRealm:delRealM,",0,Greedy,258,0.04060145219167074,failed,[]
385,"    public static String uploadOrDeleteMediaOrTemplates(String action, String object, String numElements, HttpServletRequest req, HttpSession session) {
        FTPClient ftp = new FTPClient();
        CofaxToolsUser user = (CofaxToolsUser) session.getAttribute(""user"");
        StringBuffer links = new StringBuffer();
        StringBuffer folders = new StringBuffer();
        String folder = """";
        String server = """";
        String login = """";
        String password = """";
        String fileTransferFolder = CofaxToolsServlet.fileTransferFolder;
        String liveFolder = """";
        ArrayList servers = new ArrayList();
        StringBuffer message = new StringBuffer();
        message.append(""Status:<BR>"");
        if (action.equals(""Upload"")) {
            server = (String) user.workingPubConfigElementsHash.get(""TESTFTPSERVER"");
            login = (String) user.workingPubConfigElementsHash.get(""TESTFTPLOGIN"");
            password = (String) user.workingPubConfigElementsHash.get(""TESTFTPPASSWORD"");
            if (object.equals(""Media"")) {
                folder = (String) user.workingPubConfigElementsHash.get(""TESTIMAGESFOLDER"");
            }
            if (object.equals(""Templates"")) {
                folder = (String) user.workingPubConfigElementsHash.get(""TESTTEMPLATEFOLDER"");
            }
        }
        if (action.equals(""Delete"")) {
            login = (String) user.workingPubConfigElementsHash.get(""LIVEFTPLOGIN"");
            password = (String) user.workingPubConfigElementsHash.get(""LIVEFTPPASSWORD"");
            if (object.equals(""Media"")) {
                server = (String) user.workingPubConfigElementsHash.get(""LIVEIMAGESSERVER"");
                folder = (String) user.workingPubConfigElementsHash.get(""LIVEIMAGESFOLDER"");
            }
            if (object.equals(""Templates"")) {
                server = (String) user.workingPubConfigElementsHash.get(""LIVEFTPSERVER"");
                folder = (String) user.workingPubConfigElementsHash.get(""LIVETEMPLATEFOLDER"");
            }
        }
        ArrayList al = new ArrayList();
        int numElement = Integer.parseInt(numElements);
        for (int i = 0; i < numElement; i++) {
            String key = String.valueOf(i);
            String file = req.getParameter(key);
            if (file != null) {
                al.add(file);
            }
        }
        if (action.equals(""Upload"")) {
            try {
                int reply;
                ftp.connect(server);
                CofaxToolsUtil.log(ftp.getReplyString());
                reply = ftp.getReplyCode();
                if (!FTPReply.isPositiveCompletion(reply)) {
                    ftp.disconnect();
                    return (""FTP server refused connection."");
                } else {
                    ftp.login(login, password);
                }
                for (int ii = 0; ii < al.size(); ii++) {
                    String fileName = (String) al.get(ii);
                    String folderName = stripName(fileName);
                    fileName = stripPath(fileName);
                    try {
                        ftp.changeWorkingDirectory(folderName);
                        OutputStream output;
                        output = new FileOutputStream(fileTransferFolder + fileName);
                        ftp.retrieveFile(fileName, output);
                        CofaxToolsUtil.log(""CofaxToolsFTP uploadOrDeleteMediaOrTemplates retrieving file: "" + ftp.getReplyString());
                        message.append(""Retrieving file "" + fileName + "" to local disk.<BR>"");
                        output.close();
                    } catch (java.io.IOException e) {
                        return (""CofaxToolsFTP uploadOrDeleteMediaOrTemplates ERROR: cannot write file"" + e);
                    }
                }
                ftp.logout();
                ftp.disconnect();
            } catch (IOException e) {
                CofaxToolsUtil.log(""CofaxToolsFTP uploadOrDeleteMediaOrTemplates ERROR: Could not connect to server: "" + e);
                return (""Could not connect to server: "" + e);
            }
            login = (String) user.workingPubConfigElementsHash.get(""LIVEFTPLOGIN"");
            password = (String) user.workingPubConfigElementsHash.get(""LIVEFTPPASSWORD"");
            if (object.equals(""Media"")) {
                server = (String) user.workingPubConfigElementsHash.get(""LIVEIMAGESSERVER"");
                liveFolder = (String) user.workingPubConfigElementsHash.get(""LIVEIMAGESFOLDER"");
            }
            if (object.equals(""Templates"")) {
                server = (String) user.workingPubConfigElementsHash.get(""LIVEFTPSERVER"");
                liveFolder = (String) user.workingPubConfigElementsHash.get(""LIVETEMPLATEFOLDER"");
            }
            servers = splitServers(server);
            for (int iii = 0; iii < servers.size(); iii++) {
                try {
                    int reply;
                    String connectServer = (String) servers.get(iii);
                    ftp.connect(connectServer);
                    CofaxToolsUtil.log(ftp.getReplyString());
                    reply = ftp.getReplyCode();
                    if (!FTPReply.isPositiveCompletion(reply)) {
                        ftp.disconnect();
                        CofaxToolsUtil.log(""CofaxToolsFTP uploadOrDeleteMediaOrTemplates ERROR: server refused connection: "" + connectServer);
                        return (""CofaxToolsFTP uploadOrDeleteMediaOrTemplates FTP server refused connection."");
                    } else {
                        ftp.login(login, password);
                    }
                    for (int ii = 0; ii < al.size(); ii++) {
                        String fileName = (String) al.get(ii);
                        CofaxToolsUtil.log(""Original String "" + fileName);
                        CofaxToolsUtil.log(""Search for "" + folder);
                        CofaxToolsUtil.log(""Replace "" + liveFolder);
                        String folderName = CofaxToolsUtil.replace(fileName, folder, liveFolder);
                        CofaxToolsUtil.log(""Results: "" + folderName);
                        folderName = stripName(folderName);
                        fileName = stripPath(fileName);
                        try {
                            InputStream io;
                            io = new FileInputStream(fileTransferFolder + fileName);
                            CofaxToolsUtil.log(""Reading file : "" + fileTransferFolder + fileName);
                            boolean directoryExists = ftp.changeWorkingDirectory(folderName);
                            if (directoryExists == false) {
                                CofaxToolsUtil.log(""CofaxToolsFTP uploadOrDeleteMediaOrTemplates directory: "" + folderName + "" does not exist. Attempting to create."");
                                message.append(""Directory: "" + folderName + "" does not exist. Attempting to create.<BR>"");
                                boolean canCreatDir = ftp.makeDirectory(folderName);
                                CofaxToolsUtil.log(""CofaxToolsFTP uploadOrDeleteMediaOrTemplates results: "" + canCreatDir);
                                message.append(""Results: "" + canCreatDir + ""<BR>"");
                            }
                            boolean isStored = ftp.storeFile(fileName, io);
                            CofaxToolsUtil.log(""CofaxToolsFTP uploadOrDeleteMediaOrTemplates storing file: "" + fileName + "" in directory: "" + folderName);
                            CofaxToolsUtil.log(""CofaxToolsFTP uploadOrDeleteMediaOrTemplates on server : "" + connectServer);
                            CofaxToolsUtil.log(""CofaxToolsFTP uploadOrDeleteMediaOrTemplates results: "" + isStored + "" : "" + ftp.getReplyString());
                            message.append(""Storing file "" + fileName + ""<BR> to location "" + folderName + ""<BR> on server "" + connectServer + "".<BR>"");
                        } catch (java.io.IOException e) {
                            CofaxToolsUtil.log(""CofaxToolsFTP uploadOrDeleteMediaOrTemplates cannot upload file"" + fileName + ""<BR>To path: "" + folderName + ""<BR>On server "" + connectServer);
                            return (""Cannot upload file"" + fileName + ""<BR>To path: "" + folderName + ""<BR>On server "" + connectServer);
                        }
                    }
                    ftp.logout();
                    ftp.disconnect();
                    message.append(""Success<BR><BR>"");
                } catch (IOException e) {
                    CofaxToolsUtil.log(""CofaxToolsFTP uploadOrDeleteMediaOrTemplates could not connect to server: "" + e);
                    return (""Could not connect to server: "" + e);
                }
            }
            if (object.equals(""Templates"")) {
                String cSServers = (String) user.workingPubConfigElementsHash.get(""CACHESERVERS"");
                System.out.println(""getting cache servers: "" + cSServers);
                ArrayList cServers = splitServers(cSServers);
                for (int iiii = 0; iiii < cServers.size(); iiii++) {
                    String thisClearCacheServer = (String) cServers.get(iiii);
                    try {
                        String connectServer = (String) cServers.get(iiii);
                        for (int iiiii = 0; iiiii < al.size(); iiiii++) {
                            String thisFilePath = (String) al.get(iiiii);
                            String folderNameFileName = CofaxToolsUtil.replace(thisFilePath, folder, liveFolder);
                            String URLToClear = CofaxToolsServlet.removeTemplateCache + folderNameFileName;
                            CofaxToolsClearCache clear = new CofaxToolsClearCache(""HTTP://"" + thisClearCacheServer + URLToClear);
                            clear.start();
                            message.append(""Clearing Cache for "" + folderNameFileName + ""<BR>"");
                            message.append(""on server "" + thisClearCacheServer + ""<BR>Success<BR><BR>"");
                        }
                    } catch (Exception e) {
                        CofaxToolsUtil.log(""CofaxToolsFTP uploadOrDeleteMediaOrTemplates ERROR: could not connect to server clearing cache "" + e);
                    }
                }
            }
            for (int i = 0; i < al.size(); i++) {
                String fileName = (String) al.get(i);
                String folderName = stripName(fileName);
                fileName = stripPath(fileName);
                File file = new File(fileTransferFolder + fileName);
                boolean delete = file.delete();
                CofaxToolsUtil.log(""CofaxToolsFTP uploadOrDeleteMediaOrTemplates deleting file from local drive: "" + fileTransferFolder + fileName);
                CofaxToolsUtil.log(""CofaxToolsFTP uploadOrDeleteMediaOrTemplates results: "" + delete);
            }
        }
        servers = splitServers(server);
        if (action.equals(""Delete"")) {
            for (int iii = 0; iii < servers.size(); iii++) {
                try {
                    int reply;
                    String connectServer = (String) servers.get(iii);
                    ftp.connect(connectServer);
                    CofaxToolsUtil.log(ftp.getReplyString());
                    reply = ftp.getReplyCode();
                    if (!FTPReply.isPositiveCompletion(reply)) {
                        ftp.disconnect();
                        CofaxToolsUtil.log(""CofaxToolsFTP uploadOrDeleteMediaOrTemplates ERROR: FTP server refused connection: "" + connectServer);
                        return (""FTP server refused connection."");
                    } else {
                        ftp.login(login, password);
                    }
                    for (int ii = 0; ii < al.size(); ii++) {
                        String fileName = (String) al.get(ii);
                        String folderName = stripName(fileName);
                        fileName = stripPath(fileName);
                        try {
                            ftp.changeWorkingDirectory(folderName);
                            ftp.deleteFile(fileName);
                            CofaxToolsUtil.log(""CofaxToolsFTP uploadOrDeleteMediaOrTemplates deleting file: "" + fileName + "" from directory: "" + folderName);
                            CofaxToolsUtil.log(""CofaxToolsFTP uploadOrDeleteMediaOrTemplates on server : "" + connectServer);
                            CofaxToolsUtil.log(""CofaxToolsFTP uploadOrDeleteMediaOrTemplates results: "" + ftp.getReplyString());
                            message.append(""Deleting file "" + fileName + ""<BR>"");
                            message.append(""from folder "" + folderName + ""<BR>"");
                            message.append(""on server "" + connectServer + ""<BR>"");
                        } catch (java.io.IOException e) {
                            return (""CofaxToolsFTP uploadOrDeleteMediaOrTemplates ERROR: cannot delete file"" + fileName);
                        }
                    }
                    message.append(""Success<BR><BR>"");
                    ftp.logout();
                    ftp.disconnect();
                } catch (IOException e) {
                    CofaxToolsUtil.log(""CofaxToolsFTP uploadOrDeleteMediaOrTemplates ERROR: Could not connect to server: "" + e);
                    return (""Could not connect to server: "" + e);
                }
            }
            if (object.equals(""Templates"")) {
                String cISServers = (String) user.workingPubConfigElementsHash.get(""CACHESERVERS"");
                ArrayList cIServers = splitServers(cISServers);
                for (int iiiiii = 0; iiiiii < cIServers.size(); iiiiii++) {
                    String thisClearCacheIServer = (String) cIServers.get(iiiiii);
                    try {
                        String connectServer = (String) cIServers.get(iiiiii);
                        for (int iiiiiii = 0; iiiiiii < al.size(); iiiiiii++) {
                            String thisFilePathI = (String) al.get(iiiiiii);
                            String URLToClearI = CofaxToolsServlet.removeTemplateCache + thisFilePathI;
                            CofaxToolsClearCache clearI = new CofaxToolsClearCache(""HTTP://"" + thisClearCacheIServer + URLToClearI);
                            clearI.start();
                            message.append(""Clearing Cache for "" + thisFilePathI + ""<BR>"");
                            message.append(""on server "" + thisClearCacheIServer + ""<BR>Success<BR><BR>"");
                        }
                    } catch (Exception e) {
                        CofaxToolsUtil.log(""CofaxToolsFTP uploadOrDeleteMediaOrTemplates ERROR clearing cache "" + e);
                    }
                }
            }
        }
        return (message.toString());
    }
 <SPLIT>     public void get() {
        try {
            int cnt;
            URL url = new URL(urlStr);
            URLConnection conn = url.openConnection();
            conn.setDoInput(true);
            conn.setDoOutput(false);
            InputStream is = conn.getInputStream();
            String filename = new File(url.getFile()).getName();
            FileOutputStream fos = new FileOutputStream(dstDir + File.separator + filename);
            byte[] buffer = new byte[4096];
            while ((cnt = is.read(buffer, 0, buffer.length)) != -1) fos.write(buffer, 0, cnt);
            fos.close();
            is.close();
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }
",2233,"    public static String uploadOrDeleteMediaOrMemplates(String method, String address, String  numelement, HttpServletRequest req, HttpSession http) {
        FTPClient ftp = new FTPClient();
        CofaxToolsUser USER = (CofaxToolsUser) http.getAttribute(""user"");
        StringBuffer lines = new StringBuffer();
        StringBuffer anchers = new StringBuffer();
        String filename = """";
        String filename = """";
        String database = """";
        String filename = """";
        String fileTransferServer = CofaxToolsServlet.fileTransferServer;
        String LiveDirectory = """";
        ArrayList serations = new ArrayList();
        StringBuffer email = new StringBuffer();
        email.append(""Status:<BR>"");
        if (method.equals(""Upload"")) {
            filename = (String) USER.workingPubConfigElementsHash.get(""TESTFTPSERVER"");
            database = (String) USER.workingPubConfigElementsHash.get(""TESTFTPLOGIN"");
            filename = (String) USER.workingPubConfigElementsHash.get(""TESTFTPPASSWORD"");
            if (address.equals(""Media"")) {
                filename = (String) USER.workingPubConfigElementsHash.get(""TESTIMAGESFOLDER"");
            }
            if (address.equals(""Templates"")) {
                filename = (String) USER.workingPubConfigElementsHash.get(""TESTTEMPLATEFOLDER"");
            }
        }
        if (method.equals(""Delete"")) {
            database = (String) USER.workingPubConfigElementsHash.get(""LIVEFTPLOGIN"");
            filename = (String) USER.workingPubConfigElementsHash.get(""LIVEFTPPASSWORD"");
            if (address.equals(""Media"")) {
                filename = (String) USER.workingPubConfigElementsHash.get(""LIVEIMAGESSERVER"");
                filename = (String) USER.workingPubConfigElementsHash.get(""LIVEIMAGESFOLDER"");
            }
            if (address.equals(""Templates"")) {
                filename = (String) USER.workingPubConfigElementsHash.get(""LIVEFTPSERVER"");
                filename = (String) USER.workingPubConfigElementsHash.get(""LIVETEMPLATEFOLDER"");
            }
        }
        ArrayList al = new ArrayList();
        int numElement = Integer.parseInt( numelement);
        for (int i = 0; i < numElement; i++) {
            String key = String.valueOf(i);
            String file = req.getParameter(key);
            if (file != null) {
                al.add(file);
            }
        }
        if (method.equals(""Upload"")) {
            try {
                int reply;
                ftp.connect(filename);
                CofaxToolsUtil.log(ftp.getReplyString());
                reply = ftp.getReplyCode();
                if (!FTPReply.isPositiveCompletion(reply)) {
                    ftp.disconnect();
                    return (""FTP server refused connection."");
                } else {
                    ftp.database(database, filename);
                }
                for (int ii = 0; ii < al.size(); ii++) {
                    String fileName = (String) al.get(ii);
                    String folderName = stripName(fileName);
                    fileName = stripPath(fileName);
                    try {
                        ftp.changeWorkingDirectory(folderName);
                        OutputStream output;
                        output = new FileOutputStream(fileTransferServer + fileName);
                        ftp.retrieveFile(fileName, output);
                        CofaxToolsUtil.log(""CofaxToolsFTP uploadOrDeleteMediaOrTemplates retrieving file: "" + ftp.getReplyString());
                        email.append(""Retrieving file "" + fileName + "" to local disk.<BR>"");
                        output.close();
                    } catch (java.io.IOException e) {
                        return (""CofaxToolsFTP uploadOrDeleteMediaOrTemplates ERROR: cannot write file"" + e);
                    }
                }
                ftp.logout();
                ftp.disconnect();
            } catch (IOException e) {
                CofaxToolsUtil.log(""CofaxToolsFTP uploadOrDeleteMediaOrTemplates ERROR: Could not connect to server: "" + e);
                return (""Could not connect to server: "" + e);
            }
            database = (String) USER.workingPubConfigElementsHash.get(""LIVEFTPLOGIN"");
            filename = (String) USER.workingPubConfigElementsHash.get(""LIVEFTPPASSWORD"");
            if (address.equals(""Media"")) {
                filename = (String) USER.workingPubConfigElementsHash.get(""LIVEIMAGESSERVER"");
                LiveDirectory = (String) USER.workingPubConfigElementsHash.get(""LIVEIMAGESFOLDER"");
            }
            if (address.equals(""Templates"")) {
                filename = (String) USER.workingPubConfigElementsHash.get(""LIVEFTPSERVER"");
                LiveDirectory = (String) USER.workingPubConfigElementsHash.get(""LIVETEMPLATEFOLDER"");
            }
            serations = splitServers(filename);
            for (int iii = 0; iii < serations.size(); iii++) {
                try {
                    int reply;
                    String connectServer = (String) serations.get(iii);
                    ftp.connect(connectServer);
                    CofaxToolsUtil.log(ftp.getReplyString());
                    reply = ftp.getReplyCode();
                    if (!FTPReply.isPositiveCompletion(reply)) {
                        ftp.disconnect();
                        CofaxToolsUtil.log(""CofaxToolsFTP uploadOrDeleteMediaOrTemplates ERROR: server refused connection: "" + connectServer);
                        return (""CofaxToolsFTP uploadOrDeleteMediaOrTemplates FTP server refused connection."");
                    } else {
                        ftp.database(database, filename);
                    }
                    for (int ii = 0; ii < al.size(); ii++) {
                        String fileName = (String) al.get(ii);
                        CofaxToolsUtil.log(""Original String "" + fileName);
                        CofaxToolsUtil.log(""Search for "" + filename);
                        CofaxToolsUtil.log(""Replace "" + LiveDirectory);
                        String folderName = CofaxToolsUtil.replace(fileName, filename, LiveDirectory);
                        CofaxToolsUtil.log(""Results: "" + folderName);
                        folderName = stripName(folderName);
                        fileName = stripPath(fileName);
                        try {
                            InputStream io;
                            io = new FileInputStream(fileTransferServer + fileName);
                            CofaxToolsUtil.log(""Reading file : "" + fileTransferServer + fileName);
                            boolean directoryExists = ftp.changeWorkingDirectory(folderName);
                            if (directoryExists == false) {
                                CofaxToolsUtil.log(""CofaxToolsFTP uploadOrDeleteMediaOrTemplates directory: "" + folderName + "" does not exist. Attempting to create."");
                                email.append(""Directory: "" + folderName + "" does not exist. Attempting to create.<BR>"");
                                boolean canCreatDir = ftp.makeDirectory(folderName);
                                CofaxToolsUtil.log(""CofaxToolsFTP uploadOrDeleteMediaOrTemplates results: "" + canCreatDir);
                                email.append(""Results: "" + canCreatDir + ""<BR>"");
                            }
                            boolean isStored = ftp.storeFile(fileName, io);
                            CofaxToolsUtil.log(""CofaxToolsFTP uploadOrDeleteMediaOrTemplates storing file: "" + fileName + "" in directory: "" + folderName);
                            CofaxToolsUtil.log(""CofaxToolsFTP uploadOrDeleteMediaOrTemplates on server : "" + connectServer);
                            CofaxToolsUtil.log(""CofaxToolsFTP uploadOrDeleteMediaOrTemplates results: "" + isStored + "" : "" + ftp.getReplyString());
                            email.append(""Storing file "" + fileName + ""<BR> to location "" + folderName + ""<BR> on server "" + connectServer + "".<BR>"");
                        } catch (java.io.IOException e) {
                            CofaxToolsUtil.log(""CofaxToolsFTP uploadOrDeleteMediaOrTemplates cannot upload file"" + fileName + ""<BR>To path: "" + folderName + ""<BR>On server "" + connectServer);
                            return (""Cannot upload file"" + fileName + ""<BR>To path: "" + folderName + ""<BR>On server "" + connectServer);
                        }
                    }
                    ftp.logout();
                    ftp.disconnect();
                    email.append(""Success<BR><BR>"");
                } catch (IOException e) {
                    CofaxToolsUtil.log(""CofaxToolsFTP uploadOrDeleteMediaOrTemplates could not connect to server: "" + e);
                    return (""Could not connect to server: "" + e);
                }
            }
            if (address.equals(""Templates"")) {
                String cSServers = (String) USER.workingPubConfigElementsHash.get(""CACHESERVERS"");
                System.out.println(""getting cache servers: "" + cSServers);
                ArrayList cServers = splitServers(cSServers);
                for (int iiii = 0; iiii < cServers.size(); iiii++) {
                    String thisClearCacheServer = (String) cServers.get(iiii);
                    try {
                        String connectServer = (String) cServers.get(iiii);
                        for (int iiiii = 0; iiiii < al.size(); iiiii++) {
                            String thisFilePath = (String) al.get(iiiii);
                            String folderNameFileName = CofaxToolsUtil.replace(thisFilePath, filename, LiveDirectory);
                            String URLToClear = CofaxToolsServlet.removeTemplateCache + folderNameFileName;
                            CofaxToolsClearCache clear = new CofaxToolsClearCache(""HTTP://"" + thisClearCacheServer + URLToClear);
                            clear.start();
                            email.append(""Clearing Cache for "" + folderNameFileName + ""<BR>"");
                            email.append(""on server "" + thisClearCacheServer + ""<BR>Success<BR><BR>"");
                        }
                    } catch (Exception e) {
                        CofaxToolsUtil.log(""CofaxToolsFTP uploadOrDeleteMediaOrTemplates ERROR: could not connect to server clearing cache "" + e);
                    }
                }
            }
            for (int i = 0; i < al.size(); i++) {
                String fileName = (String) al.get(i);
                String folderName = stripName(fileName);
                fileName = stripPath(fileName);
                File file = new File(fileTransferServer + fileName);
                boolean delete = file.delete();
                CofaxToolsUtil.log(""CofaxToolsFTP uploadOrDeleteMediaOrTemplates deleting file from local drive: "" + fileTransferServer + fileName);
                CofaxToolsUtil.log(""CofaxToolsFTP uploadOrDeleteMediaOrTemplates results: "" + delete);
            }
        }
        serations = splitServers(filename);
        if (method.equals(""Delete"")) {
            for (int iii = 0; iii < serations.size(); iii++) {
                try {
                    int reply;
                    String connectServer = (String) serations.get(iii);
                    ftp.connect(connectServer);
                    CofaxToolsUtil.log(ftp.getReplyString());
                    reply = ftp.getReplyCode();
                    if (!FTPReply.isPositiveCompletion(reply)) {
                        ftp.disconnect();
                        CofaxToolsUtil.log(""CofaxToolsFTP uploadOrDeleteMediaOrTemplates ERROR: FTP server refused connection: "" + connectServer);
                        return (""FTP server refused connection."");
                    } else {
                        ftp.database(database, filename);
                    }
                    for (int ii = 0; ii < al.size(); ii++) {
                        String fileName = (String) al.get(ii);
                        String folderName = stripName(fileName);
                        fileName = stripPath(fileName);
                        try {
                            ftp.changeWorkingDirectory(folderName);
                            ftp.deleteFile(fileName);
                            CofaxToolsUtil.log(""CofaxToolsFTP uploadOrDeleteMediaOrTemplates deleting file: "" + fileName + "" from directory: "" + folderName);
                            CofaxToolsUtil.log(""CofaxToolsFTP uploadOrDeleteMediaOrTemplates on server : "" + connectServer);
                            CofaxToolsUtil.log(""CofaxToolsFTP uploadOrDeleteMediaOrTemplates results: "" + ftp.getReplyString());
                            email.append(""Deleting file "" + fileName + ""<BR>"");
                            email.append(""from folder "" + folderName + ""<BR>"");
                            email.append(""on server "" + connectServer + ""<BR>"");
                        } catch (java.io.IOException e) {
                            return (""CofaxToolsFTP uploadOrDeleteMediaOrTemplates ERROR: cannot delete file"" + fileName);
                        }
                    }
                    email.append(""Success<BR><BR>"");
                    ftp.logout();
                    ftp.disconnect();
                } catch (IOException e) {
                    CofaxToolsUtil.log(""CofaxToolsFTP uploadOrDeleteMediaOrTemplates ERROR: Could not connect to server: "" + e);
                    return (""Could not connect to server: "" + e);
                }
            }
            if (address.equals(""Templates"")) {
                String cISServers = (String) USER.workingPubConfigElementsHash.get(""CACHESERVERS"");
                ArrayList cIServers = splitServers(cISServers);
                for (int iiiiii = 0; iiiiii < cIServers.size(); iiiiii++) {
                    String thisClearCacheIServer = (String) cIServers.get(iiiiii);
                    try {
                        String connectServer = (String) cIServers.get(iiiiii);
                        for (int iiiiiii = 0; iiiiiii < al.size(); iiiiiii++) {
                            String thisFilePathI = (String) al.get(iiiiiii);
                            String URLToClearI = CofaxToolsServlet.removeTemplateCache + thisFilePathI;
                            CofaxToolsClearCache clearI = new CofaxToolsClearCache(""HTTP://"" + thisClearCacheIServer + URLToClearI);
                            clearI.start();
                            email.append(""Clearing Cache for "" + thisFilePathI + ""<BR>"");
                            email.append(""on server "" + thisClearCacheIServer + ""<BR>Success<BR><BR>"");
                        }
                    } catch (Exception e) {
                        CofaxToolsUtil.log(""CofaxToolsFTP uploadOrDeleteMediaOrTemplates ERROR clearing cache "" + e);
                    }
                }
            }
        }
        return (email.toString());
    }
",LABEL_0,LABEL_0,LABEL_0,-1,"uploadOrDeleteMediaOrTemplates,action,object,numElements,req,session,ftp,user,links,folders,folder,server,login,password,fileTransferFolder,liveFolder,servers,message","uploadOrDeleteMediaOrTemplates:0.030029237270355225,action:-0.002633988857269287,object:0.0012407898902893066,numElements:0.0005788803100585938,req:-0.003590106964111328,session:6.210803985595703e-05,ftp:0.0006331801414489746,user:0.0010469555854797363,links:0.006353020668029785,folders:-0.002486884593963623,folder:0.0011303424835205078,server:0.0004941821098327637,login:0.001941978931427002,password:-0.0008214116096496582,fileTransferFolder:0.0010407567024230957,liveFolder:-0.00238645076751709,servers:-2.7120113372802734e-05,message:0.002116680145263672,",16,149,0,"uploadOrDeleteMediaOrTemplates:uploadOrDeleteMediaOrMemplates,links:lines,message:email,login:database,object:address,folder:filename,user:USER,fileTransferFolder:fileTransferServer,ftp:ftp,numElements: numelement,server:filename,session:http,servers:serations,password:filename,liveFolder:LiveDirectory,folders:anchers,action:method,req:req,",0,Greedy,798,0.32695986032485963,failed,[]
386,"    private static void readAndRewrite(File inFile, File outFile) throws IOException {
        ImageInputStream iis = ImageIO.createImageInputStream(new BufferedInputStream(new FileInputStream(inFile)));
        DcmParser dcmParser = DcmParserFactory.getInstance().newDcmParser(iis);
        Dataset ds = DcmObjectFactory.getInstance().newDataset();
        dcmParser.setDcmHandler(ds.getDcmHandler());
        dcmParser.parseDcmFile(null, Tags.PixelData);
        PixelDataReader pdReader = pdFact.newReader(ds, iis, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());
        System.out.println(""reading "" + inFile + ""..."");
        pdReader.readPixelData(false);
        ImageOutputStream out = ImageIO.createImageOutputStream(new BufferedOutputStream(new FileOutputStream(outFile)));
        DcmEncodeParam dcmEncParam = DcmEncodeParam.IVR_LE;
        ds.writeDataset(out, dcmEncParam);
        ds.writeHeader(out, dcmEncParam, Tags.PixelData, dcmParser.getReadVR(), dcmParser.getReadLength());
        System.out.println(""writing "" + outFile + ""..."");
        PixelDataWriter pdWriter = pdFact.newWriter(pdReader.getPixelDataArray(), false, ds, out, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());
        pdWriter.writePixelData();
        out.flush();
        out.close();
        System.out.println(""done!"");
    }
 <SPLIT>     private synchronized void loadDDL() throws IOException {
        try {
            conn.createStatement().executeQuery(""SELECT * FROM non_generic_favs"").close();
        } catch (SQLException e) {
            Statement stmt = null;
            if (!e.getMessage().matches(ERR_MISSING_TABLE)) {
                e.printStackTrace(System.out);
                throw new IOException(""Error on initial data store read"");
            }
            String[] qry = { ""CREATE TABLE non_generic_favs (id INT NOT NULL PRIMARY KEY)"", ""CREATE TABLE ignore_chan_favs (id INT NOT NULL PRIMARY KEY, chanlist LONG VARCHAR)"", ""CREATE TABLE settings (var VARCHAR(32) NOT NULL, val VARCHAR(255) NOT NULL, PRIMARY KEY(var))"", ""INSERT INTO settings (var, val) VALUES ('schema', '1')"" };
            try {
                conn.setAutoCommit(false);
                stmt = conn.createStatement();
                for (String q : qry) stmt.executeUpdate(q);
                conn.commit();
            } catch (SQLException e2) {
                try {
                    conn.rollback();
                } catch (SQLException e3) {
                    e3.printStackTrace(System.out);
                }
                e2.printStackTrace(new PrintWriter(System.out));
                throw new IOException(""Error initializing data store"");
            } finally {
                if (stmt != null) {
                    try {
                        stmt.close();
                    } catch (SQLException e4) {
                        e4.printStackTrace(System.out);
                        throw new IOException(""Unable to cleanup data store resources"");
                    }
                }
                try {
                    conn.setAutoCommit(true);
                } catch (SQLException e3) {
                    e3.printStackTrace(System.out);
                    throw new IOException(""Unable to reset data store auto commit"");
                }
            }
        }
        return;
    }
",272,,LABEL_0,LABEL_1,,-4,"readAndRewrite,inFile,outFile,iis,dcmParser,ds,pdReader,out,dcmEncParam,pdWriter",,,,0,,0,Greedy,1,0.0005038658777872722,,[]
387,"    public static void unzipModel(String filename, String tempdir) throws EDITSException {
        try {
            BufferedOutputStream dest = null;
            FileInputStream fis = new FileInputStream(filename);
            int BUFFER = 2048;
            ZipInputStream zis = new ZipInputStream(new BufferedInputStream(fis));
            ZipEntry entry;
            while ((entry = zis.getNextEntry()) != null) {
                int count;
                byte data[] = new byte[BUFFER];
                FileOutputStream fos = new FileOutputStream(tempdir + entry.getName());
                dest = new BufferedOutputStream(fos, BUFFER);
                while ((count = zis.read(data, 0, BUFFER)) != -1) dest.write(data, 0, count);
                dest.flush();
                dest.close();
            }
            zis.close();
        } catch (Exception e) {
            throw new EDITSException(""Can not expand model in \"""" + tempdir + ""\"" because:\n"" + e.getMessage());
        }
    }
 <SPLIT>     private void doImageProcess(HttpServletRequest request, HttpServletResponse response) throws IOException {
        response.setContentType(""image/"" + type + """");
        Point imgSize = null;
        if (width > 0 || height > 0) {
            imgSize = new Point(width, height);
        }
        if (fmt != null && imageFormats.containsKey(fmt)) {
            imgSize = imageFormats.get(fmt);
        }
        InputStream imageInputStream = inputStream != null ? inputStream : imageUrl.openStream();
        if (imageInputStream == null) {
            throw new RuntimeException(""File "" + imageUrl + "" does not exist!"");
        }
        if (imgSize == null) {
            IOUtils.copy(imageInputStream, response.getOutputStream());
        } else {
            byte[] imageBytes = getImageBytes(type, imgSize, imageInputStream);
            response.setContentLength(imageBytes.length);
            response.getOutputStream().write(imageBytes);
        }
        response.getOutputStream().flush();
        response.getOutputStream().close();
    }
",188,"    public static void unpackmodel(String filename, String temdir) throws EDITSException {
        try {
            BufferedOutputStream dat = null;
            FileInputStream fileid = new FileInputStream(filename);
            int UPVER = 2048;
            ZipInputStream dbis = new ZipInputStream(new BufferedInputStream(fileid));
            ZipEntry line;
            while ((line = dbis.getNextEntry()) != null) {
                int end;
                byte load[] = new byte[UPVER];
                FileOutputStream dfops = new FileOutputStream(temdir + line.getName());
                dat = new BufferedOutputStream(dfops, UPVER);
                while ((end = dbis.read(load, 0, UPVER)) != -1) dat.write(load, 0, end);
                dat.flush();
                dat.close();
            }
            dbis.close();
        } catch (Exception e) {
            throw new EDITSException(""Can not expand model in \"""" + temdir + ""\"" because:
"" + e.getMessage());
        }
    }
",LABEL_1,LABEL_1,LABEL_1,-1,"unzipModel,filename,tempdir,dest,fis,BUFFER,zis,entry,count,data,fos","unzipModel:-0.01314997673034668,filename:0.002226531505584717,tempdir:-0.01751011610031128,dest:-0.006693661212921143,fis:-0.012918055057525635,BUFFER:-0.0300065279006958,zis:-0.032928287982940674,entry:-0.0024456381797790527,count:-0.002191483974456787,data:-0.0016033053398132324,fos:-0.012860596179962158,",10,30,0,"filename:filename,data:load,count:end,entry:line,dest:dat,fos:dfops,fis:fileid,unzipModel:unpackmodel,tempdir:temdir,BUFFER:UPVER,zis:dbis,",0,Greedy,473,0.07229245106379191,failed,[]
388,"    public String getServerHash(String passwordHash, String PasswordSalt) throws PasswordHashingException {
        byte[] hash;
        try {
            MessageDigest digest = MessageDigest.getInstance(""SHA-256"");
            digest.reset();
            digest.update(PasswordSalt.getBytes(""UTF-16""));
            hash = digest.digest(passwordHash.getBytes(""UTF-16""));
            return bytesToHex(hash);
        } catch (NoSuchAlgorithmException ex) {
            throw new PasswordHashingException(""Current environment does not supply needed security algorithms. Please update Java"");
        } catch (UnsupportedEncodingException ex) {
            throw new PasswordHashingException(""Current environment does not supply needed character encoding. Please update Java"");
        }
    }
 <SPLIT>     public static String getSHADigest(String password) {
        String digest = null;
        MessageDigest sha = null;
        try {
            sha = MessageDigest.getInstance(""SHA-1"");
            sha.reset();
            sha.update(password.getBytes());
            byte[] pwhash = sha.digest();
            digest = ""{SHA}"" + new String(Base64.encode(pwhash));
        } catch (NoSuchAlgorithmException nsae) {
            CofaxToolsUtil.log(""Algorithme SHA-1 non supporte a la creation du hashage"" + nsae + id);
        }
        return digest;
    }
",109,"    public String getserverSHA(String  PasswordHash, String  Password256) throws PasswordHashingException {
        byte[] url;
        try {
            MessageDigest Digest = MessageDigest.getInstance(""SHA-256"");
            Digest.reset();
            Digest.update( Password256.getBytes(""UTF-16""));
            url = Digest.Digest( PasswordHash.getBytes(""UTF-16""));
            return bytesToHex(url);
        } catch (NoSuchAlgorithmException ex) {
            throw new PasswordHashingException(""Current environment does not supply needed security algorithms. Please update Java"");
        } catch (UnsupportedEncodingException ex) {
            throw new PasswordHashingException(""Current environment does not supply needed character encoding. Please update Java"");
        }
    }
",LABEL_1,LABEL_1,LABEL_1,-1,"getServerHash,passwordHash,PasswordSalt,hash,digest","getServerHash:0.003277122974395752,passwordHash:0.009138941764831543,PasswordSalt:0.010433554649353027,hash:0.0008693933486938477,digest:0.004143774509429932,",5,13,0,"PasswordSalt: Password256,passwordHash: PasswordHash,digest:Digest,getServerHash:getserverSHA,hash:url,",0,Greedy,170,0.024312802155812583,failed,[]
389,"    private void upgradeSchema() throws IOException {
        Statement stmt = null;
        try {
            int i = getSchema();
            LOG.info(""DB is currently at schema "" + i);
            if (i < SCHEMA_VERSION) {
                LOG.info(""Upgrading from schema "" + i + "" to schema "" + SCHEMA_VERSION);
                conn.setAutoCommit(false);
                stmt = conn.createStatement();
                while (i < SCHEMA_VERSION) {
                    String qry;
                    switch(i) {
                        case 1:
                            qry = ""UPDATE settings SET val = '2' WHERE var = 'schema'"";
                            stmt.executeUpdate(qry);
                            break;
                    }
                    i++;
                }
                conn.commit();
            }
        } catch (SQLException e) {
            try {
                conn.rollback();
            } catch (SQLException e2) {
                LOG.error(SQL_ERROR, e2);
            }
            LOG.fatal(SQL_ERROR, e);
            throw new IOException(""Error upgrading data store"", e);
        } finally {
            try {
                if (stmt != null) stmt.close();
                conn.setAutoCommit(true);
            } catch (SQLException e) {
                LOG.error(SQL_ERROR, e);
                throw new IOException(""Unable to cleanup SQL resources"", e);
            }
        }
    }
 <SPLIT>     @Test
    public void testSpeedyShareUpload() throws Exception {
        request.setUrl(""http://www.speedyshare.com/upload.php"");
        request.setFile(""fileup0"", file);
        HttpResponse response = httpClient.execute(request);
        assertTrue(response.is2xxSuccess());
        assertTrue(response.getResponseHeaders().size() > 0);
        String body = IOUtils.toString(response.getResponseBody());
        assertTrue(body.contains(""Download link""));
        assertTrue(body.contains(""Delete password""));
        response.close();
    }
",225,"    private void upgradeCatalogMeta() throws IOException {
        Statement stmt = null;
        try {
            int api = getSchema();
            LOG.info(""DB is currently at schema "" + api);
            if (api < SCHEMA_VERSION) {
                LOG.info(""Upgrading from schema "" + api + "" to schema "" + SCHEMA_VERSION);
                conn.setAutoCommit(false);
                stmt = conn.createStatement();
                while (api < SCHEMA_VERSION) {
                    String qurc;
                    switch(api) {
                        case 1:
                            qurc = ""UPDATE settings SET val = '2' WHERE var = 'schema'"";
                            stmt.executeUpdate(qurc);
                            break;
                    }
                    api++;
                }
                conn.commit();
            }
        } catch (SQLException e) {
            try {
                conn.rollback();
            } catch (SQLException e2) {
                LOG.error(SQL_ERROR, e2);
            }
            LOG.fatal(SQL_ERROR, e);
            throw new IOException(""Error upgrading data store"", e);
        } finally {
            try {
                if (stmt != null) stmt.close();
                conn.setAutoCommit(true);
            } catch (SQLException e) {
                LOG.error(SQL_ERROR, e);
                throw new IOException(""Unable to cleanup SQL resources"", e);
            }
        }
    }
",LABEL_0,LABEL_0,LABEL_0,-1,"upgradeSchema,stmt,i,qry","upgradeSchema:-0.002355217933654785,stmt:0.0076795220375061035,i:0.0003762245178222656,qry:0.004021286964416504,",3,11,0,"stmt:stmt,qry:qurc,i:api,upgradeSchema:upgradeCatalogMeta,",0,Greedy,193,0.029177733262379966,failed,[]
390,"    public boolean resourceExists(String location) {
        if ((location == null) || (location.length() == 0)) {
            return false;
        }
        try {
            URL url = buildURL(location);
            URLConnection cxn = url.openConnection();
            InputStream is = null;
            try {
                byte[] byteBuffer = new byte[2048];
                is = cxn.getInputStream();
                while (is.read(byteBuffer, 0, 2048) >= 0) ;
                return true;
            } finally {
                if (is != null) {
                    is.close();
                }
            }
        } catch (IOException ex) {
            return false;
        }
    }
 <SPLIT>     public Bitmap retrieveBitmap(String urlString) {
        Log.d(Constants.LOG_TAG, ""making HTTP trip for image:"" + urlString);
        Bitmap bitmap = null;
        try {
            URL url = new URL(urlString);
            URLConnection conn = url.openConnection();
            conn.setConnectTimeout(3000);
            conn.setReadTimeout(5000);
            bitmap = BitmapFactory.decodeStream(conn.getInputStream());
        } catch (MalformedURLException e) {
            Log.e(Constants.LOG_TAG, ""Exception loading image, malformed URL"", e);
        } catch (IOException e) {
            Log.e(Constants.LOG_TAG, ""Exception loading image, IO error"", e);
        }
        return bitmap;
    }
",126,"    public boolean resourceExists(String location) {
        if ((location == null) || (location.length() == 0)) {
            return false;
        }
        try {
            URL url = buildURL(location);
            URLConnection cexcon = url.openConnection();
            InputStream is = null;
            try {
                byte[] byteBuffer = new byte[2048];
                is = cexcon.getInputStream();
                while (is.read(byteBuffer, 0, 2048) >= 0) ;
                return true;
            } finally {
                if (is != null) {
                    is.close();
                }
            }
        } catch (IOException ex) {
            return false;
        }
    }
",LABEL_0,LABEL_0,LABEL_0,-1,"resourceExists,location,url,cxn,is,byteBuffer","resourceExists:0.0002256631851196289,location:5.7220458984375e-06,url:9.894371032714844e-06,cxn:3.4570693969726562e-06,is:6.413459777832031e-05,byteBuffer:1.1205673217773438e-05,",1,2,0,"resourceExists:resourceExists,is:is,byteBuffer:byteBuffer,url:url,location:location,cxn:cexcon,",0,Greedy,252,0.035408790906270346,failed,[]
391,"    public static boolean downloadFile(String from, String to, ProgressMonitor pm) {
        try {
            FileOutputStream out = new FileOutputStream(to);
            URL url = new URL(from);
            URLConnection conn = url.openConnection();
            InputStream in = conn.getInputStream();
            byte[] buffer = new byte[1024];
            int read = 0;
            while ((read = in.read(buffer)) != -1) {
                out.write(buffer, 0, read);
                if (pm != null) pm.addToProgress(read);
            }
            out.close();
            in.close();
        } catch (Exception e) {
            Installer.getInstance().getLogger().log(StringUtils.getStackTrace(e));
            return false;
        }
        return true;
    }
 <SPLIT>     @Override
    public Resource createNew(String name, InputStream in, Long length, String contentType) throws IOException {
        File dest = new File(this.realFile, name);
        if (allowedClient) {
            if ("".request"".equals(name) || "".tokens"".equals(name)) {
                FileOutputStream out = null;
                try {
                    out = new FileOutputStream(dest);
                    IOUtils.copy(in, out);
                } finally {
                    IOUtils.closeQuietly(out);
                }
                if ("".request"".equals(name)) {
                    File request = new File(realFile.getAbsolutePath() + ""/"" + name);
                    RequestManager.manageRequest(request, null, true);
                    return new OverEncryptedFriendsFile(factory, folderPath + ""/.response"", allowedClient);
                }
                return new OverEncryptedFriendsFile(factory, folderPath + ""/"" + name, allowedClient);
            } else {
                return null;
            }
        } else {
            LOGGER.error(""User isn't owner of this folder"");
            return null;
        }
    }
",159,"    public static boolean downloadFile(String from, String to, ProgressMonitor pm) {
        try {
            FileOutputStream out = new FileOutputStream(to);
            URL image = new URL(from);
            URLConnection conn = image.openConnection();
            InputStream in = conn.getInputStream();
            byte[] buffer = new byte[1024];
            int read = 0;
            while ((read = in.read(buffer)) != -1) {
                out.write(buffer, 0, read);
                if (pm != null) pm.addToProgress(read);
            }
            out.close();
            in.close();
        } catch (Exception e) {
            Installer.getInstance().getLogger().log(StringUtils.getStackTrace(e));
            return false;
        }
        return true;
    }
",LABEL_0,LABEL_0,LABEL_1,1,"downloadFile,from,to,pm,out,url,conn,in,buffer,read","downloadFile:0.003521442413330078,from:0.0008844137191772461,to:0.0012745261192321777,pm:0.0004394054412841797,out:-0.000287473201751709,url:0.3227587938308716,conn:-0.0012239813804626465,in:0.0003655552864074707,buffer:0.0006934404373168945,read:0.0007099509239196777,",1,2,0,"url:image,",0,Greedy,68,0.009945809841156006,replace,[]
392,"    static String calculateProfileDiffDigest(String profileDiff, boolean normaliseWhitespace) throws Exception {
        if (normaliseWhitespace) {
            profileDiff = removeWhitespaces(profileDiff);
        }
        MessageDigest md = MessageDigest.getInstance(""MD5"");
        md.update(profileDiff.getBytes());
        return new BASE64Encoder().encode(md.digest());
    }
 <SPLIT>     public static void doVersionCheck(View view) {
        view.showWaitCursor();
        try {
            URL url = new URL(jEdit.getProperty(""version-check.url""));
            InputStream in = url.openStream();
            BufferedReader bin = new BufferedReader(new InputStreamReader(in));
            String line;
            String develBuild = null;
            String stableBuild = null;
            while ((line = bin.readLine()) != null) {
                if (line.startsWith("".build"")) develBuild = line.substring(6).trim(); else if (line.startsWith("".stablebuild"")) stableBuild = line.substring(12).trim();
            }
            bin.close();
            if (develBuild != null && stableBuild != null) {
                doVersionCheck(view, stableBuild, develBuild);
            }
        } catch (IOException e) {
            String[] args = { jEdit.getProperty(""version-check.url""), e.toString() };
            GUIUtilities.error(view, ""read-error"", args);
        }
        view.hideWaitCursor();
    }
",66,"    static String calculateProfileDiffCodests(String familyInfo, boolean normaliseWpacespaces) throws Exception {
        if (normaliseWpacespaces) {
            familyInfo = removeWhitespaces(familyInfo);
        }
        MessageDigest gd = MessageDigest.getInstance(""MD5"");
        gd.update(familyInfo.getBytes());
        return new BASE64Encoder().encode(gd.digest());
    }
",LABEL_0,LABEL_0,LABEL_0,-1,"calculateProfileDiffDigest,profileDiff,normaliseWhitespace,md","calculateProfileDiffDigest:-0.01517188549041748,profileDiff:-0.031969428062438965,normaliseWhitespace:-0.025103211402893066,md:0.0014559626579284668,",4,10,0,"md:gd,calculateProfileDiffDigest:calculateProfileDiffCodests,normaliseWhitespace:normaliseWpacespaces,profileDiff:familyInfo,",0,Greedy,165,0.02365959088007609,failed,[]
393,"    public static void main(final String args[]) {
        if (args.length < 2 || (args.length == 3 && !""-d"".equals(args[0]))) {
            System.out.println(""Usage: AdapterGenerator [Options] <PrologFile> <ClassPath>"");
            System.out.println(""       where the framework is the first element in the class path"");
            System.out.println(""Options: -d Enables the generation of debug output"");
            return;
        }
        boolean debug = args.length == 3;
        File prologFile = new File(debug ? args[1] : args[0]);
        if (!prologFile.isFile()) {
            System.out.println(""The given file does not exist."");
            return;
        }
        File targetFile = new File(prologFile.getParentFile(), prologFile.getName().substring(0, prologFile.getName().lastIndexOf(""."")) + "".jar"");
        String source;
        try {
            source = FileUtils.readFileToString(prologFile);
        } catch (IOException ex) {
            System.out.println(""Error reading file: "" + ex.getMessage());
            return;
        }
        Parser myParser = new PrologParserImpl();
        PrologProgram myProgram;
        try {
            myProgram = (PrologProgram) myParser.parse(source);
        } catch (Exception ex) {
            System.out.println(""Could not parse file: "" + ex.getMessage());
            return;
        }
        try {
            FactVisitor myVisitor = new FactVisitor();
            myVisitor.visit(myProgram);
            Map<String, TypeGenerationInfo> adapterLayer = myVisitor.getAdapterLayer();
            if (adapterLayer.size() == 0) {
                System.out.println(""No adapters to generate, "" + ""did you forget to run the comeback rules?"");
                return;
            }
            URLClassLoader classLoader = createClassLoaderFromClassPath(debug ? args[2] : args[1]);
            ClassWriter adapterWriter = new ClassWriter(new JarEntryWriter(targetFile));
            AdapterAnnotationGenerator annotationGenerator = new AdapterAnnotationGenerator();
            Type annotationType = Type.getObjectType(""net/sourceforge/comeback/Adapter"");
            adapterWriter.writeClass(annotationType.getClassName(), annotationGenerator.createAnnotation(annotationType));
            AdapterLookupGenerator lookupWriter = new AdapterLookupGenerator(Type.getObjectType(""net/sourceforge/comeback/Adapters""), annotationType);
            GenerationContext context = new GenerationContext(adapterLayer, classLoader, annotationType, lookupWriter, adapterWriter);
            context.setGenerateDebugOutput(debug);
            Iterator<TypeGenerationInfo> iterator = adapterLayer.values().iterator();
            while (iterator.hasNext()) {
                TypeGenerationInfo info = iterator.next();
                context.generateAdapter(info);
            }
            ByteArrayOutputStream serialized = new ByteArrayOutputStream();
            ObjectOutputStream out = new ObjectOutputStream(serialized);
            out.writeObject(adapterLayer);
            out.close();
            adapterWriter.writeResource(""net/sourceforge/comeback/adapterlayer.ser"", serialized.toByteArray());
            String[] sharedClassesPrefixes = new String[2];
            Assembler assembler = new Assembler(adapterWriter);
            PatternClassFilter filter = new PatternClassFilter();
            URL url = Main.class.getResource(""/"" + Main.class.getName().replace('.', '/') + "".class"");
            JarURLConnection connection = (JarURLConnection) url.openConnection();
            sharedClassesPrefixes[0] = assembler.assemble(connection.getJarFile(), filter);
            filter = new PatternClassFilter();
            url = Type.class.getResource(""/"" + Type.class.getName().replace('.', '/') + "".class"");
            connection = (JarURLConnection) url.openConnection();
            sharedClassesPrefixes[1] = assembler.assemble(connection.getJarFile(), filter);
            String tmp = debug ? args[2] : args[1];
            adapterWriter.writeClass(lookupWriter.getType().getClassName(), lookupWriter.createAdapterLookup(adapterLayer.values(), tmp.substring(tmp.lastIndexOf(File.pathSeparator) + 1), sharedClassesPrefixes));
            adapterWriter.close();
        } catch (Throwable e) {
            e.printStackTrace();
            return;
        }
    }
 <SPLIT>     public static String getHashedPassword(String password) {
        try {
            MessageDigest digest = MessageDigest.getInstance(""MD5"");
            digest.update(password.getBytes());
            BigInteger hashedInt = new BigInteger(1, digest.digest());
            return String.format(""%1$032X"", hashedInt);
        } catch (NoSuchAlgorithmException nsae) {
            System.err.println(nsae.getMessage());
        }
        return """";
    }
",764,,LABEL_0,LABEL_1,,-4,"debug,prologFile,targetFile,source,myParser,myProgram,myVisitor,adapterLayer,classLoader,adapterWriter,annotationGenerator,out",,,,0,,0,Greedy,1,0.0007890502611796062,,[]
394,"    private static void readAndRewrite(File inFile, File outFile) throws IOException {
        ImageInputStream iis = ImageIO.createImageInputStream(new BufferedInputStream(new FileInputStream(inFile)));
        DcmParser dcmParser = DcmParserFactory.getInstance().newDcmParser(iis);
        Dataset ds = DcmObjectFactory.getInstance().newDataset();
        dcmParser.setDcmHandler(ds.getDcmHandler());
        dcmParser.parseDcmFile(null, Tags.PixelData);
        PixelDataReader pdReader = pdFact.newReader(ds, iis, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());
        System.out.println(""reading "" + inFile + ""..."");
        pdReader.readPixelData(false);
        ImageOutputStream out = ImageIO.createImageOutputStream(new BufferedOutputStream(new FileOutputStream(outFile)));
        DcmEncodeParam dcmEncParam = DcmEncodeParam.IVR_LE;
        ds.writeDataset(out, dcmEncParam);
        ds.writeHeader(out, dcmEncParam, Tags.PixelData, dcmParser.getReadVR(), dcmParser.getReadLength());
        System.out.println(""writing "" + outFile + ""..."");
        PixelDataWriter pdWriter = pdFact.newWriter(pdReader.getPixelDataArray(), false, ds, out, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());
        pdWriter.writePixelData();
        out.flush();
        out.close();
        System.out.println(""done!"");
    }
 <SPLIT>     public void test() throws Exception {
        StorageStringWriter s = new StorageStringWriter(2048, ""UTF-8"");
        s.addText(""Test"");
        try {
            s.getOutputStream();
            fail(""Should throw IOException as method not supported."");
        } catch (IOException e) {
        }
        s.getWriter().write(""ing is important"");
        s.close(ResponseStateOk.getInstance());
        assertEquals(""Testing is important"", s.getText());
        InputStream input = s.getInputStream();
        StringWriter writer = new StringWriter();
        IOUtils.copy(input, writer, ""UTF-8"");
        assertEquals(""Testing is important"", writer.toString());
        try {
            s.getWriter();
            fail(""Should throw IOException as storage is closed."");
        } catch (IOException e) {
        }
    }
",272,"    private static void readAndRebrite(File inFile, File outFile) throws IOException {
        ImageInputStream iis = ImageIO.createImageInputStream(new BufferedInputStream(new FileInputStream(inFile)));
        DcmParser dCMLoader = DcmParserFactory.getInstance().newDcmParser(iis);
        Dataset ds = DcmObjectFactory.getInstance().newDataset();
        dCMLoader.setDcmHandler(ds.getDcmHandler());
        dCMLoader.parseDcmFile(null, Tags.PixelData);
        PixelDataReader pcLoader = pdFact.newReader(ds, iis, dCMLoader.getDcmDecodeParam().byteOrder, dCMLoader.getReadVR());
        System.url.println(""reading "" + inFile + ""..."");
        pcLoader.readPixelData(false);
        ImageOutputStream url = ImageIO.createImageOutputStream(new BufferedOutputStream(new FileOutputStream(outFile)));
        DcmEncodeParam dcmEncParam = DcmEncodeParam.IVR_LE;
        ds.writeDataset(url, dcmEncParam);
        ds.writeHeader(url, dcmEncParam, Tags.PixelData, dCMLoader.getReadVR(), dCMLoader.getReadLength());
        System.url.println(""writing "" + outFile + ""..."");
        PixelDataWriter PDWrite = pdFact.newWriter(pcLoader.getPixelDataArray(), false, ds, url, dCMLoader.getDcmDecodeParam().byteOrder, dCMLoader.getReadVR());
        PDWrite.writePixelData();
        url.flush();
        url.close();
        System.url.println(""done!"");
    }
",LABEL_1,LABEL_1,LABEL_0,1,"readAndRewrite,inFile,outFile,iis,dcmParser,ds,pdReader,out,dcmEncParam,pdWriter","readAndRewrite:-0.03307783603668213,inFile:-0.044498324394226074,outFile:-0.04789072275161743,iis:-0.05820268392562866,dcmParser:-0.014222145080566406,ds:-0.11757397651672363,pdReader:-0.005121588706970215,out:-0.0022025704383850098,dcmEncParam:-0.13450032472610474,pdWriter:0.00041115283966064453,",5,24,0,"pdWriter:PDWrite,out:url,pdReader:pcLoader,dcmParser:dCMLoader,readAndRewrite:readAndRebrite,",0,Greedy,328,0.049840108553568525,replace,[]
395,"    ClassFile getClassFile(String name) throws IOException, ConstantPoolException {
        URL url = getClass().getResource(name);
        InputStream in = url.openStream();
        try {
            return ClassFile.read(in);
        } finally {
            in.close();
        }
    }
 <SPLIT>     public static void main(String[] args) {
        String logFileName = args[0];
        int extractLineEvery = new Integer(args[1]).intValue();
        String filterToken = ""P0"";
        if (args.length > 2) {
            filterToken = args[2];
        }
        try {
            BufferedReader br = new BufferedReader(new FileReader(logFileName));
            BufferedWriter bw = new BufferedWriter(new FileWriter(new File(logFileName + "".trim"")));
            String readLine;
            int x = 0;
            while ((readLine = br.readLine()) != null) {
                if ((x++ % extractLineEvery == 0) && readLine.startsWith(filterToken)) {
                    bw.write(readLine + ""\n"");
                }
            }
            bw.flush();
            bw.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
",55,"    ClassFile getClassFile(String name) throws IOException, ConstantPoolException {
        URL ls = getClass().getResource(name);
        InputStream in = ls.openStream();
        try {
            return ClassFile.read(in);
        } finally {
            in.close();
        }
    }
",LABEL_0,LABEL_0,LABEL_1,1,"getClassFile,name,url,in","getClassFile:1.6689300537109375e-06,name:7.152557373046875e-07,url:1.9490718841552734e-05,in:4.76837158203125e-07,",1,2,0,"url:ls,",0,Greedy,50,0.006935775279998779,replace,[]
396,"    public void convert(File src, File dest) throws IOException {
        InputStream in = new BufferedInputStream(new FileInputStream(src));
        DcmParser p = pfact.newDcmParser(in);
        Dataset ds = fact.newDataset();
        p.setDcmHandler(ds.getDcmHandler());
        try {
            FileFormat format = p.detectFileFormat();
            if (format != FileFormat.ACRNEMA_STREAM) {
                System.out.println(""\n"" + src + "": not an ACRNEMA stream!"");
                return;
            }
            p.parseDcmFile(format, Tags.PixelData);
            if (ds.contains(Tags.StudyInstanceUID) || ds.contains(Tags.SeriesInstanceUID) || ds.contains(Tags.SOPInstanceUID) || ds.contains(Tags.SOPClassUID)) {
                System.out.println(""\n"" + src + "": contains UIDs!"" + "" => probable already DICOM - do not convert"");
                return;
            }
            boolean hasPixelData = p.getReadTag() == Tags.PixelData;
            boolean inflate = hasPixelData && ds.getInt(Tags.BitsAllocated, 0) == 12;
            int pxlen = p.getReadLength();
            if (hasPixelData) {
                if (inflate) {
                    ds.putUS(Tags.BitsAllocated, 16);
                    pxlen = pxlen * 4 / 3;
                }
                if (pxlen != (ds.getInt(Tags.BitsAllocated, 0) >>> 3) * ds.getInt(Tags.Rows, 0) * ds.getInt(Tags.Columns, 0) * ds.getInt(Tags.NumberOfFrames, 1) * ds.getInt(Tags.NumberOfSamples, 1)) {
                    System.out.println(""\n"" + src + "": mismatch pixel data length!"" + "" => do not convert"");
                    return;
                }
            }
            ds.putUI(Tags.StudyInstanceUID, uid(studyUID));
            ds.putUI(Tags.SeriesInstanceUID, uid(seriesUID));
            ds.putUI(Tags.SOPInstanceUID, uid(instUID));
            ds.putUI(Tags.SOPClassUID, classUID);
            if (!ds.contains(Tags.NumberOfSamples)) {
                ds.putUS(Tags.NumberOfSamples, 1);
            }
            if (!ds.contains(Tags.PhotometricInterpretation)) {
                ds.putCS(Tags.PhotometricInterpretation, ""MONOCHROME2"");
            }
            if (fmi) {
                ds.setFileMetaInfo(fact.newFileMetaInfo(ds, UIDs.ImplicitVRLittleEndian));
            }
            OutputStream out = new BufferedOutputStream(new FileOutputStream(dest));
            try {
            } finally {
                ds.writeFile(out, encodeParam());
                if (hasPixelData) {
                    if (!skipGroupLen) {
                        out.write(PXDATA_GROUPLEN);
                        int grlen = pxlen + 8;
                        out.write((byte) grlen);
                        out.write((byte) (grlen >> 8));
                        out.write((byte) (grlen >> 16));
                        out.write((byte) (grlen >> 24));
                    }
                    out.write(PXDATA_TAG);
                    out.write((byte) pxlen);
                    out.write((byte) (pxlen >> 8));
                    out.write((byte) (pxlen >> 16));
                    out.write((byte) (pxlen >> 24));
                }
                if (inflate) {
                    int b2, b3;
                    for (; pxlen > 0; pxlen -= 3) {
                        out.write(in.read());
                        b2 = in.read();
                        b3 = in.read();
                        out.write(b2 & 0x0f);
                        out.write(b2 >> 4 | ((b3 & 0x0f) << 4));
                        out.write(b3 >> 4);
                    }
                } else {
                    for (; pxlen > 0; --pxlen) {
                        out.write(in.read());
                    }
                }
                out.close();
            }
            System.out.print('.');
        } finally {
            in.close();
        }
    }
 <SPLIT>     public static String md5String(String str) {
        try {
            MessageDigest md;
            md = MessageDigest.getInstance(""MD5"");
            md.update(str.getBytes());
            byte[] hash = md.digest();
            final char[] hexChars = { '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f' };
            StringBuffer res = new StringBuffer();
            for (int i = 0; i < hash.length; i++) {
                res.append(hexChars[(0xF0 & hash[i]) >> 4]);
                res.append(hexChars[0x0F & hash[i]]);
            }
            return res.toString();
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
            return null;
        }
    }
",765,,LABEL_0,LABEL_1,,-4,"convert,src,dest,in,p,ds,format,hasPixelData,inflate,pxlen,out",,,,0,,0,Greedy,1,0.0007869799931844076,,[]
397,"    private boolean copyFile(File _file1, File _file2) {
        FileInputStream fis;
        FileOutputStream fos;
        try {
            fis = new FileInputStream(_file1);
            fos = new FileOutputStream(_file2);
            FileChannel canalFuente = fis.getChannel();
            canalFuente.transferTo(0, canalFuente.size(), fos.getChannel());
            fis.close();
            fos.close();
            return true;
        } catch (FileNotFoundException e) {
        } catch (IOException e) {
        }
        return false;
    }
 <SPLIT>     protected void createSettingsIfNecessary() throws IOException {
        OutputStream out = null;
        try {
            final File fSettings = SettingsUtils.getSettingsFile();
            if (!fSettings.exists()) {
                fSettings.createNewFile();
                final Path src = new Path(""mvn/settings.xml"");
                final InputStream in = FileLocator.openStream(getBundle(), src, false);
                out = new FileOutputStream(SettingsUtils.getSettings(), true);
                IOUtils.copy(in, out);
            } else {
                Logger.getLog().info(""File settings.xml already exists at "" + fSettings);
            }
        } finally {
            if (out != null) {
                out.flush();
                out.close();
            }
        }
    }
",98,"    private boolean copyFile(File _mail01, File jmodel1) {
        FileInputStream lfis;
        FileOutputStream lis;
        try {
            lfis = new FileInputStream(_mail01);
            lis = new FileOutputStream(jmodel1);
            FileChannel canalBuje = lfis.getChannel();
            canalBuje.transferTo(0, canalBuje.size(), lis.getChannel());
            lfis.close();
            lis.close();
            return true;
        } catch (FileNotFoundException e) {
        } catch (IOException e) {
        }
        return false;
    }
",LABEL_1,LABEL_1,LABEL_1,-1,"copyFile,_file1,_file2,fis,fos,canalFuente","copyFile:-0.008822143077850342,_file1:-0.012212812900543213,_file2:-0.023553848266601562,fis:-0.033860623836517334,fos:-0.04287666082382202,canalFuente:-0.023900151252746582,",5,15,0,"copyFile:copyFile,_file1:_mail01,_file2:jmodel1,canalFuente:canalBuje,fis:lfis,fos:lis,",0,Greedy,242,0.03383426666259766,failed,[]
398,"    public PageLoader(String pageAddress) throws Exception {
        URL url = new URL(pageAddress);
        BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));
        inputLine = """";
        while (in.ready()) {
            inputLine = inputLine + in.readLine();
        }
        in.close();
    }
 <SPLIT>     private void loadDynamically(File result, String extraPath) {
        URL url = null;
        InputStream is = null;
        FileOutputStream fos = null;
        try {
            url = new URL(homeServerUrl + extraPath);
            is = url.openStream();
            fos = new FileOutputStream(result);
            byte[] buff = new byte[8192];
            int nbRead;
            while ((nbRead = is.read(buff)) > 0) fos.write(buff, 0, nbRead);
        } catch (IOException e) {
            throw new StellariumException(""Cannot dynamically load "" + result + "" from "" + url);
        } finally {
            if (is != null) {
                try {
                    is.close();
                } catch (IOException e) {
                    e.printStackTrace(System.out);
                }
            }
            if (fos != null) {
                try {
                    fos.close();
                } catch (IOException e) {
                    e.printStackTrace(System.out);
                }
            }
        }
    }
",67,"    public PageLoader(String  pageLocation) throws Exception {
        URL out = new URL( pageLocation);
        BufferedReader line = new BufferedReader(new InputStreamReader(out.openStream()));
        InputLine = """";
        while (line.ready()) {
            InputLine = InputLine + line.readLine();
        }
        line.close();
    }
",LABEL_0,LABEL_0,LABEL_0,-1,"pageAddress,url,in,inputLine","pageAddress:-0.025164127349853516,url:0.03554582595825195,in:-0.0033322572708129883,inputLine:-0.07216989994049072,",4,11,0,"url:out,in:line,pageAddress: pageLocation,inputLine:InputLine,",0,Greedy,166,0.023393964767456053,failed,[]
399,"    public static synchronized Document readRemoteDocument(URL url, boolean validate) throws IOException, SAXParseException {
        if (DEBUG) System.out.println(""DocumentUtilities.readDocument( "" + url + "")"");
        Document document = null;
        try {
            DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
            factory.setNamespaceAware(true);
            factory.setCoalescing(true);
            HttpURLConnection connection = (HttpURLConnection) url.openConnection();
            connection.setDefaultUseCaches(false);
            connection.setUseCaches(false);
            connection.setRequestProperty(""User-Agent"", ""eXchaNGeR/"" + System.getProperty(""xngr.version"") + "" (http://xngr.org/)"");
            connection.connect();
            InputStream stream = connection.getInputStream();
            document = factory.newDocumentBuilder().parse(stream);
            stream.close();
            connection.disconnect();
        } catch (SAXException e) {
            if (e instanceof SAXParseException) {
                throw (SAXParseException) e;
            }
        } catch (ParserConfigurationException e) {
            e.printStackTrace();
        }
        if (DEBUG) System.out.println(""DocumentUtilities.readDocument( "" + url + "") ["" + document + ""]"");
        return document;
    }
 <SPLIT>     public static void copy(File sourceFile, File destinationFile) {
        try {
            if (((sourceFile == null) && (destinationFile == null)) || ((sourceFile == null) || (destinationFile == null))) {
                System.out.println(""sourceFile & destinationFile is null"");
                System.exit(-1);
            }
            if (sourceFile.isDirectory()) {
                File[] tmp = sourceFile.listFiles();
                File f;
                for (int i = 0; i < tmp.length; i++) {
                    f = new File(destinationFile.getAbsolutePath() + File.separator + tmp[i].getName());
                    f.getParentFile().mkdirs();
                    copy(tmp[i], f);
                }
            } else {
                System.out.println(""\nCopy from: "" + sourceFile + ""\n\n     to: "" + destinationFile);
                FileChannel source = new FileInputStream(sourceFile).getChannel();
                FileChannel destination = new FileOutputStream(destinationFile).getChannel();
                destination.transferFrom(source, 0, source.size());
                source.close();
                destination.close();
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
",227,"    public static synchronized Document readRemoteDocument(URL file, boolean validate) throws IOException, SAXParseException {
        if (DEBUG) System.out.println(""DocumentUtilities.readDocument( "" + file + "")"");
        Document document = null;
        try {
            DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
            factory.setNamespaceAware(true);
            factory.setCoalescing(true);
            HttpURLConnection connection = (HttpURLConnection) file.openConnection();
            connection.setDefaultUseCaches(false);
            connection.setUseCaches(false);
            connection.setRequestProperty(""User-Agent"", ""eXchaNGeR/"" + System.getProperty(""xngr.version"") + "" (http://xngr.org/)"");
            connection.connect();
            InputStream source = connection.getInputStream();
            document = factory.newDocumentBuilder().parse(source);
            source.close();
            connection.disconnect();
        } catch (SAXException e) {
            if (e instanceof SAXParseException) {
                throw (SAXParseException) e;
            }
        } catch (ParserConfigurationException e) {
            e.printStackTrace();
        }
        if (DEBUG) System.out.println(""DocumentUtilities.readDocument( "" + file + "") ["" + document + ""]"");
        return document;
    }
",LABEL_0,LABEL_0,LABEL_1,1,"readRemoteDocument,url,validate,document,factory,connection,stream","readRemoteDocument:-1.0848045349121094e-05,url:1.531839370727539e-05,validate:2.0265579223632812e-06,document:1.6033649444580078e-05,factory:2.384185791015625e-07,connection:-5.364418029785156e-06,stream:5.7220458984375e-06,",2,7,0,"document:document,url:file,stream:source,",0,Greedy,178,0.027782257397969565,replace,[]
400,"    private static List<Properties> findExtensions() {
        URL url = null;
        try {
            List<Properties> extensions = new ArrayList<Properties>();
            Enumeration<URL> res = ExtensionHelper.class.getClassLoader().getResources(""logdistiller.properties"");
            while (res.hasMoreElements()) {
                url = res.nextElement();
                Properties prop = new Properties();
                prop.load(url.openStream());
                extensions.add(prop);
            }
            return extensions;
        } catch (IOException ioe) {
            String msg = (url == null) ? ""unable to list resources logdistiller.properties"" : ""unable to load resource "" + url.toExternalForm();
            throw new RuntimeException(msg, ioe);
        }
    }
 <SPLIT>     public FTPFile[] connect() {
        if (ftpe == null) {
            ftpe = new FTPEvent(this);
        }
        if (ftp == null) {
            ftp = new FTPClient();
        } else if (ftp.isConnected()) {
            path = """";
            try {
                ftp.disconnect();
            } catch (IOException e1) {
                log.error(""could not disconnect -"" + e1.getMessage());
            }
        }
        currentDir = new FTPFile[0];
        log.debug(""try to connect"");
        try {
            int reply;
            ftp.connect(ftpsite);
            reply = ftp.getReplyCode();
            if (!FTPReply.isPositiveCompletion(reply)) {
                ftp.disconnect();
                log.error(""FTP server refused connection."");
            }
        } catch (IOException e) {
            log.error(""FTPConnection error: "" + e.getMessage());
            if (ftp.isConnected()) {
                try {
                    ftp.disconnect();
                } catch (IOException f) {
                }
            }
        }
        try {
            if (!ftp.login(user, password)) {
                log.error(""could not login with: "" + user);
                ftp.logout();
            }
            log.debug(""Remote system is "" + ftp.getSystemName());
            ftp.enterLocalPassiveMode();
            currentDir = ftp.listFiles();
        } catch (FTPConnectionClosedException e) {
            log.error(""FTPConnectionClosedException: "" + e.getMessage());
        } catch (IOException e) {
            log.error(""IOException: "" + e.getMessage());
        }
        ftpe.setType(FTPEvent.CONNECT);
        fireFTPEvent(ftpe);
        return currentDir;
    }
",141,"    private static List<Properties> findAppends() {
        URL connection = null;
        try {
            List<Properties> fps = new ArrayList<Properties>();
            Enumeration<URL> rex = ExtensionHelper.class.getClassLoader().getResources(""logdistiller.properties"");
            while (rex.hasMoreElements()) {
                connection = rex.nextElement();
                Properties app = new Properties();
                app.load(connection.openStream());
                fps.add(app);
            }
            return fps;
        } catch (IOException ioe) {
            String db = (connection == null) ? ""unable to list resources logdistiller.properties"" : ""unable to load resource "" + connection.toExternalForm();
            throw new RuntimeException(db, ioe);
        }
    }
",LABEL_0,LABEL_0,LABEL_0,-1,"findExtensions,url,extensions,res,prop,msg","findExtensions:-2.384185791015625e-07,url:-1.430511474609375e-06,extensions:4.76837158203125e-07,res:5.960464477539062e-07,prop:4.76837158203125e-07,msg:3.5762786865234375e-07,",6,17,0,"res:rex,extensions:fps,prop:app,msg:db,findExtensions:findAppends,url:connection,",0,Greedy,278,0.0425668994585673,failed,[]
401,"    private static void copyFile(String src, String target) throws IOException {
        FileChannel ic = new FileInputStream(src).getChannel();
        FileChannel oc = new FileOutputStream(target).getChannel();
        ic.transferTo(0, ic.size(), oc);
        ic.close();
        oc.close();
    }
 <SPLIT>     public static boolean decodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }
",69,"    private static void transferStream(String url, String url) throws IOException {
        FileChannel ic = new FileInputStream(url).getChannel();
        FileChannel oc = new FileOutputStream(url).getChannel();
        ic.transferTo(0, ic.size(), oc);
        ic.close();
        oc.close();
    }
",LABEL_1,LABEL_1,LABEL_0,1,"copyFile,src,target,ic,oc","copyFile:6.794929504394531e-06,src:0.0022090673446655273,target:0.007900476455688477,ic:-0.008960068225860596,oc:-0.02453511953353882,",3,5,0,"target:url,src:url,copyFile:transferStream,",0,Greedy,113,0.015728449821472167,replace,[]
402,"    private String GetResponse(URL url) {
        String content = null;
        try {
            HttpURLConnection conn = (HttpURLConnection) url.openConnection();
            conn.setDoOutput(false);
            conn.setRequestMethod(""GET"");
            if (conn.getResponseCode() == HttpURLConnection.HTTP_OK) {
                BufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream()));
                String line;
                while ((line = br.readLine()) != null) content += line;
            } else {
            }
        } catch (MalformedURLException e) {
            e.getStackTrace();
        } catch (IOException e) {
            e.getStackTrace();
        }
        return content;
    }
 <SPLIT>     public static void copy(File source, File destination) throws FileNotFoundException, IOException {
        if (source == null) throw new NullPointerException(""The source may not be null."");
        if (destination == null) throw new NullPointerException(""The destination may not be null."");
        FileInputStream sourceStream = new FileInputStream(source);
        destination.getParentFile().mkdirs();
        FileOutputStream destStream = new FileOutputStream(destination);
        try {
            FileChannel sourceChannel = sourceStream.getChannel();
            FileChannel destChannel = destStream.getChannel();
            destChannel.transferFrom(sourceChannel, 0, sourceChannel.size());
        } finally {
            try {
                sourceStream.close();
                destStream.close();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }
",130,"    private String CheckResult(URL file) {
        String output = null;
        try {
            HttpURLConnection conn = (HttpURLConnection) file.openConnection();
            conn.setDoOutput(false);
            conn.setRequestMethod(""GET"");
            if (conn.getResponseCode() == HttpURLConnection.HTTP_OK) {
                BufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream()));
                String line;
                while ((line = br.readLine()) != null) output += line;
            } else {
            }
        } catch (MalformedURLException e) {
            e.getStackTrace();
        } catch (IOException e) {
            e.getStackTrace();
        }
        return output;
    }
",LABEL_0,LABEL_0,LABEL_1,1,"GetResponse,url,content,conn,br,line","GetResponse:0.01800638437271118,url:0.037210285663604736,content:0.0017399787902832031,conn:-0.003944277763366699,br:-0.006233096122741699,line:-0.011006593704223633,",3,6,0,"url:file,GetResponse:CheckResult,content:output,",0,Greedy,120,0.01735145648320516,replace,[]
403,"    public static void copyFile(File srcFile, File destFile) throws IOException {
        InputStream src = new FileInputStream(srcFile);
        OutputStream dest = new FileOutputStream(destFile);
        byte buffer[] = new byte[1024];
        int read = 1;
        while (read > 0) {
            read = src.read(buffer);
            if (read > 0) {
                dest.write(buffer, 0, read);
            }
        }
        src.close();
        dest.close();
    }
 <SPLIT>     @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws IOException {
        String path = request.getPathTranslated().substring(0, request.getPathTranslated().length() - request.getPathInfo().length()) + request.getServletPath() + request.getPathInfo();
        File file = new File(path);
        if (file.exists()) {
            FileInputStream in = new FileInputStream(file);
            IOUtils.copyLarge(in, response.getOutputStream());
            in.close();
        }
    }
",98,"    public static void CopyFiles(File srcDir, File restPlace) throws IOException {
        InputStream url = new FileInputStream(srcDir);
        OutputStream ui = new FileOutputStream(restPlace);
        byte buffer[] = new byte[1024];
        int read = 1;
        while (read > 0) {
            read = url.read(buffer);
            if (read > 0) {
                ui.write(buffer, 0, read);
            }
        }
        url.close();
        ui.close();
    }
",LABEL_1,LABEL_1,LABEL_0,1,"copyFile,srcFile,destFile,src,dest,buffer,read","copyFile:0.013025343418121338,srcFile:0.0011481046676635742,destFile:0.0036203861236572266,src:0.0003978610038757324,dest:0.0004885196685791016,buffer:0.0001881718635559082,read:-0.01647406816482544,",5,11,0,"copyFile:CopyFiles,destFile:restPlace,srcFile:srcDir,dest:ui,src:url,",0,Greedy,181,0.024675170580546062,replace,[]
404,"    private static void addFileToTarGz(TarArchiveOutputStream taro, String path, String base) throws IOException {
        File f = new File(path);
        String entryName = base + f.getName();
        FileInputStream goIn = new FileInputStream(f);
        TarArchiveEntry tarEntry = new TarArchiveEntry(f, entryName);
        taro.setLongFileMode(TarArchiveOutputStream.LONGFILE_GNU);
        taro.putArchiveEntry(tarEntry);
        if (f.isFile()) {
            IOUtils.copy(goIn, taro);
            taro.closeArchiveEntry();
        } else {
            taro.closeArchiveEntry();
            File[] children = f.listFiles();
            if (children != null) {
                for (File child : children) {
                    addFileToTarGz(taro, child.getAbsolutePath(), entryName + ""/"");
                }
            }
        }
        taro.close();
        goIn.close();
    }
 <SPLIT>     protected File getFile() throws IOException {
        File home = new File(System.getProperty(""user.dir""));
        String fileName = String.format(""%s.txt"", getFilePrefix());
        File file = new File(home, fileName);
        if (file.exists()) {
            return file;
        } else {
            URL url = LocalNameGenerator.class.getResource(""/"" + fileName);
            if (url == null) {
                throw new IllegalStateException(String.format(""Cannot find resource at %s"", fileName));
            } else {
                InputStream in = url.openStream();
                try {
                    BufferedOutputStream out = new BufferedOutputStream(new FileOutputStream(file));
                    try {
                        IOUtils.copy(in, out);
                    } finally {
                        out.close();
                    }
                } finally {
                    in.close();
                }
                return file;
            }
        }
    }
",166,"    private static void addFileToTarGszip(TarArchiveOutputStream Too, String uri, String base) throws IOException {
        File f = new File(uri);
        String entryName = base + f.getName();
        FileInputStream GOIN = new FileInputStream(f);
        TarArchiveEntry Tarentry = new TarArchiveEntry(f, entryName);
        Too.setLongFileMode(TarArchiveOutputStream.LONGFILE_GNU);
        Too.putArchiveEntry(Tarentry);
        if (f.isFile()) {
            IOUtils.copy(GOIN, Too);
            Too.closeArchiveEntry();
        } else {
            Too.closeArchiveEntry();
            File[] open = f.listFiles();
            if (open != null) {
                for (File child : open) {
                    addFileToTarGszip(Too, child.getAbsolutePath(), entryName + ""/"");
                }
            }
        }
        Too.close();
        GOIN.close();
    }
",LABEL_1,LABEL_1,LABEL_1,-1,"addFileToTarGz,taro,path,base,f,entryName,goIn,tarEntry,children,child","addFileToTarGz:-0.01651144027709961,taro:-0.01274198293685913,path:-0.006149709224700928,base:-0.002638697624206543,f:-0.0011995434761047363,entryName:-0.00510019063949585,goIn:-0.010376989841461182,tarEntry:-0.005296766757965088,children:-0.006485164165496826,child:0.0019717812538146973,",6,20,0,"child:child,f:f,base:base,entryName:entryName,tarEntry:Tarentry,path:uri,children:open,goIn:GOIN,taro:Too,addFileToTarGz:addFileToTarGszip,",0,Greedy,432,0.06462989250818889,failed,[]
405,"    public static String md5Crypt(final byte[] key, final byte[] salt) throws NoSuchAlgorithmException {
        if (key == null || key.length == 0) {
            throw new IllegalArgumentException(""Argument 'key' cannot be null or an empty array."");
        }
        if (salt == null || salt.length == 0) {
            throw new IllegalArgumentException(""Argument 'salt' cannot be null or an empty array."");
        }
        final MessageDigest _md = MessageDigest.getInstance(""MD5"");
        _md.update(key);
        _md.update(MAGIC.getBytes());
        _md.update(salt);
        final MessageDigest md2 = MessageDigest.getInstance(""MD5"");
        md2.update(key);
        md2.update(salt);
        md2.update(key);
        byte[] abyFinal = md2.digest();
        for (int n = key.length; n > 0; n -= 16) {
            _md.update(abyFinal, 0, n > 16 ? 16 : n);
        }
        abyFinal = new byte[] { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
        for (int j = 0, i = key.length; i != 0; i >>>= 1) {
            if ((i & 1) == 1) _md.update(abyFinal, j, 1); else _md.update(key, j, 1);
        }
        final StringBuilder sbPasswd = new StringBuilder();
        sbPasswd.append(MAGIC);
        sbPasswd.append(new String(salt));
        sbPasswd.append('$');
        abyFinal = _md.digest();
        for (int n = 0; n < 1000; n++) {
            final MessageDigest md3 = MessageDigest.getInstance(""MD5"");
            if ((n & 1) != 0) {
                md3.update(key);
            } else {
                md3.update(abyFinal);
            }
            if ((n % 3) != 0) {
                md3.update(salt);
            }
            if ((n % 7) != 0) {
                md3.update(key);
            }
            if ((n & 1) != 0) {
                md3.update(abyFinal);
            } else {
                md3.update(key);
            }
            abyFinal = md3.digest();
        }
        int[] anFinal = new int[] { (abyFinal[0] & 0x7f) | (abyFinal[0] & 0x80), (abyFinal[1] & 0x7f) | (abyFinal[1] & 0x80), (abyFinal[2] & 0x7f) | (abyFinal[2] & 0x80), (abyFinal[3] & 0x7f) | (abyFinal[3] & 0x80), (abyFinal[4] & 0x7f) | (abyFinal[4] & 0x80), (abyFinal[5] & 0x7f) | (abyFinal[5] & 0x80), (abyFinal[6] & 0x7f) | (abyFinal[6] & 0x80), (abyFinal[7] & 0x7f) | (abyFinal[7] & 0x80), (abyFinal[8] & 0x7f) | (abyFinal[8] & 0x80), (abyFinal[9] & 0x7f) | (abyFinal[9] & 0x80), (abyFinal[10] & 0x7f) | (abyFinal[10] & 0x80), (abyFinal[11] & 0x7f) | (abyFinal[11] & 0x80), (abyFinal[12] & 0x7f) | (abyFinal[12] & 0x80), (abyFinal[13] & 0x7f) | (abyFinal[13] & 0x80), (abyFinal[14] & 0x7f) | (abyFinal[14] & 0x80), (abyFinal[15] & 0x7f) | (abyFinal[15] & 0x80) };
        to64(sbPasswd, anFinal[0] << 16 | anFinal[6] << 8 | anFinal[12], 4);
        to64(sbPasswd, anFinal[1] << 16 | anFinal[7] << 8 | anFinal[13], 4);
        to64(sbPasswd, anFinal[2] << 16 | anFinal[8] << 8 | anFinal[14], 4);
        to64(sbPasswd, anFinal[3] << 16 | anFinal[9] << 8 | anFinal[15], 4);
        to64(sbPasswd, anFinal[4] << 16 | anFinal[10] << 8 | anFinal[5], 4);
        to64(sbPasswd, anFinal[11], 2);
        return sbPasswd.toString();
    }
 <SPLIT>     public String generateToken(String code) {
        try {
            MessageDigest md = MessageDigest.getInstance(""SHA1"");
            md.update(code.getBytes());
            byte[] bytes = md.digest();
            return toHex(bytes);
        } catch (NoSuchAlgorithmException e) {
            throw new RuntimeException(""SHA1 missing"");
        }
    }
",906,,LABEL_1,LABEL_0,,-4,"md5Crypt,key,salt,_md,md2,abyFinal,n,j,i,sbPasswd,md3",,,,0,,0,Greedy,1,0.0008677085240681966,,[]
406,"    private void loadDDL() throws IOException {
        try {
            conn.createStatement().executeQuery(""SELECT * FROM overrides"").close();
        } catch (SQLException e) {
            Statement stmt = null;
            if (!e.getMessage().startsWith(ERR_MISSING_TABLE)) {
                LOG.fatal(SQL_ERROR, e);
                throw new IOException(""Error on initial data store read"", e);
            }
            String[] qry = { ""CREATE TABLE monitor (id INTEGER PRIMARY KEY NOT NULL, status VARCHAR(32) NOT NULL, next_update TIMESTAMP NOT NULL)"", ""CREATE TABLE overrides (id INT NOT NULL, title VARCHAR(255) NOT NULL, subtitle VARCHAR(255) NOT NULL, enable BOOLEAN NOT NULL DEFAULT TRUE, PRIMARY KEY(id))"", ""CREATE TABLE settings (var VARCHAR(32) NOT NULL, val VARCHAR(255) NOT NULL, PRIMARY KEY(var))"", ""INSERT INTO settings (var, val) VALUES ('schema', '1')"" };
            try {
                conn.setAutoCommit(false);
                stmt = conn.createStatement();
                for (String q : qry) stmt.executeUpdate(q);
                conn.commit();
            } catch (SQLException e2) {
                try {
                    conn.rollback();
                } catch (SQLException e3) {
                    LOG.fatal(SQL_ERROR, e3);
                }
                LOG.fatal(SQL_ERROR, e2);
                throw new IOException(""Error initializing data store"", e2);
            } finally {
                if (stmt != null) {
                    try {
                        stmt.close();
                    } catch (SQLException e4) {
                        LOG.fatal(SQL_ERROR, e4);
                        throw new IOException(""Unable to cleanup data store resources"", e4);
                    }
                }
                try {
                    conn.setAutoCommit(true);
                } catch (SQLException e3) {
                    LOG.fatal(SQL_ERROR, e3);
                    throw new IOException(""Unable to reset data store auto commit"", e3);
                }
            }
        }
        return;
    }
 <SPLIT>     public boolean actualizarDatosPrevia(int idJugadorDiv, int idRonda, int idPareoRival, int color, int flotante) {
        int intResult = 0;
        String sql = ""UPDATE jugadorxdivxronda "" + "" SET idPareoRival = "" + idPareoRival + "" , color = "" + color + "" , flotante = "" + flotante + "" "" + "" WHERE jugadorxDivision_idJugadorxDivision = "" + idJugadorDiv + "" AND ronda_numeroRonda = "" + idRonda;
        try {
            connection = conexionBD.getConnection();
            connection.setAutoCommit(false);
            ps = connection.prepareStatement(sql);
            intResult = ps.executeUpdate();
            connection.commit();
        } catch (SQLException ex) {
            ex.printStackTrace();
            try {
                connection.rollback();
            } catch (SQLException exe) {
                exe.printStackTrace();
            }
        } finally {
            conexionBD.close(ps);
            conexionBD.close(connection);
        }
        return (intResult > 0);
    }
",277,,LABEL_1,LABEL_0,,-4,"loadDDL,stmt,qry,q",,,,0,,0,Greedy,1,0.0004792650540669759,,[]
407,"    public static boolean decodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }
 <SPLIT>     public Resource createNew(String name, InputStream in, Long length, String contentType) throws IOException {
        File dest = new File(this.getRealFile(), name);
        LOGGER.debug(""PUT?? - real file: "" + this.getRealFile() + "",name: "" + name);
        if (isOwner) {
            if (!"".request"".equals(name) && !"".tokens"".equals(name)) {
                FileOutputStream out = null;
                try {
                    out = new FileOutputStream(dest);
                    IOUtils.copy(in, out);
                } finally {
                    IOUtils.closeQuietly(out);
                }
            } else {
                if (ServerConfiguration.isDynamicSEL()) {
                } else {
                }
                FileOutputStream out = null;
                try {
                    out = new FileOutputStream(dest);
                    IOUtils.copy(in, out);
                } finally {
                    IOUtils.closeQuietly(out);
                }
            }
            return factory.resolveFile(this.host, dest);
        } else {
            LOGGER.error(""User isn't owner of this folder"");
            return null;
        }
    }
",194,,LABEL_1,LABEL_0,,-4,"decodeFileToFile,infile,outfile,in,out,buffer,read,success",,,,0,,0,Greedy,1,0.00035750865936279297,,[]
408,"    public void convert(File src, File dest) throws IOException {
        InputStream in = new BufferedInputStream(new FileInputStream(src));
        DcmParser p = pfact.newDcmParser(in);
        Dataset ds = fact.newDataset();
        p.setDcmHandler(ds.getDcmHandler());
        try {
            FileFormat format = p.detectFileFormat();
            if (format != FileFormat.ACRNEMA_STREAM) {
                System.out.println(""\n"" + src + "": not an ACRNEMA stream!"");
                return;
            }
            p.parseDcmFile(format, Tags.PixelData);
            if (ds.contains(Tags.StudyInstanceUID) || ds.contains(Tags.SeriesInstanceUID) || ds.contains(Tags.SOPInstanceUID) || ds.contains(Tags.SOPClassUID)) {
                System.out.println(""\n"" + src + "": contains UIDs!"" + "" => probable already DICOM - do not convert"");
                return;
            }
            boolean hasPixelData = p.getReadTag() == Tags.PixelData;
            boolean inflate = hasPixelData && ds.getInt(Tags.BitsAllocated, 0) == 12;
            int pxlen = p.getReadLength();
            if (hasPixelData) {
                if (inflate) {
                    ds.putUS(Tags.BitsAllocated, 16);
                    pxlen = pxlen * 4 / 3;
                }
                if (pxlen != (ds.getInt(Tags.BitsAllocated, 0) >>> 3) * ds.getInt(Tags.Rows, 0) * ds.getInt(Tags.Columns, 0) * ds.getInt(Tags.NumberOfFrames, 1) * ds.getInt(Tags.NumberOfSamples, 1)) {
                    System.out.println(""\n"" + src + "": mismatch pixel data length!"" + "" => do not convert"");
                    return;
                }
            }
            ds.putUI(Tags.StudyInstanceUID, uid(studyUID));
            ds.putUI(Tags.SeriesInstanceUID, uid(seriesUID));
            ds.putUI(Tags.SOPInstanceUID, uid(instUID));
            ds.putUI(Tags.SOPClassUID, classUID);
            if (!ds.contains(Tags.NumberOfSamples)) {
                ds.putUS(Tags.NumberOfSamples, 1);
            }
            if (!ds.contains(Tags.PhotometricInterpretation)) {
                ds.putCS(Tags.PhotometricInterpretation, ""MONOCHROME2"");
            }
            if (fmi) {
                ds.setFileMetaInfo(fact.newFileMetaInfo(ds, UIDs.ImplicitVRLittleEndian));
            }
            OutputStream out = new BufferedOutputStream(new FileOutputStream(dest));
            try {
            } finally {
                ds.writeFile(out, encodeParam());
                if (hasPixelData) {
                    if (!skipGroupLen) {
                        out.write(PXDATA_GROUPLEN);
                        int grlen = pxlen + 8;
                        out.write((byte) grlen);
                        out.write((byte) (grlen >> 8));
                        out.write((byte) (grlen >> 16));
                        out.write((byte) (grlen >> 24));
                    }
                    out.write(PXDATA_TAG);
                    out.write((byte) pxlen);
                    out.write((byte) (pxlen >> 8));
                    out.write((byte) (pxlen >> 16));
                    out.write((byte) (pxlen >> 24));
                }
                if (inflate) {
                    int b2, b3;
                    for (; pxlen > 0; pxlen -= 3) {
                        out.write(in.read());
                        b2 = in.read();
                        b3 = in.read();
                        out.write(b2 & 0x0f);
                        out.write(b2 >> 4 | ((b3 & 0x0f) << 4));
                        out.write(b3 >> 4);
                    }
                } else {
                    for (; pxlen > 0; --pxlen) {
                        out.write(in.read());
                    }
                }
                out.close();
            }
            System.out.print('.');
        } finally {
            in.close();
        }
    }
 <SPLIT>     public WebmillDeploy(String inputName, String outputName, boolean stripLoggers) throws Exception {
        File tempFile = null;
        JarFile jin = null;
        JarOutputStream jout = null;
        FileChannel srcChannel = null;
        FileChannel dstChannel = null;
        try {
            String portletApplicationName = getPortletApplicationName(outputName);
            System.out.println(""portletApplicationName = "" + portletApplicationName);
            tempFile = File.createTempFile(""webmill-delpoy-"", """");
            tempFile.deleteOnExit();
            jin = new JarFile(inputName);
            jout = new JarOutputStream(new FileOutputStream(tempFile));
            Document webXml = null;
            Document portletXml = null;
            Document contextXml = null;
            ZipEntry src;
            InputStream source;
            Enumeration zipEntries = jin.entries();
            while (zipEntries.hasMoreElements()) {
                src = (ZipEntry) zipEntries.nextElement();
                source = jin.getInputStream(src);
                try {
                    String target = src.getName();
                    if (WEB_INF_WEB_XML.equals(target)) {
                        System.out.println(""Found web.xml"");
                        webXml = parseXml(source);
                    } else if (WEB_INF_PORTLET_XML.equals(target)) {
                        System.out.println(""Found WEB-INF/portlet.xml"");
                        portletXml = parseXml(source);
                    } else if (META_INF_CONTEXT_XML.equals(target)) {
                        System.out.println(""Found META-INF/context.xml"");
                        contextXml = parseXml(source);
                    }
                } finally {
                    source.close();
                }
            }
            if (webXml == null) {
                throw new IllegalArgumentException(""WEB-INF/web.xml not found"");
            }
            if (portletXml == null) {
                throw new IllegalArgumentException(""WEB-INF/portlet.xml not found"");
            }
            WebmillWebApplicationRewriter webRewriter = new WebmillWebApplicationRewriter(webXml);
            webRewriter.processWebXML();
            WebmillContextRewriter contextRewriter = new WebmillContextRewriter(contextXml, portletApplicationName);
            contextRewriter.processContextXML();
            jin = new JarFile(inputName);
            zipEntries = jin.entries();
            while (zipEntries.hasMoreElements()) {
                src = (ZipEntry) zipEntries.nextElement();
                source = jin.getInputStream(src);
                try {
                    String target = src.getName();
                    String fullTarget = '/' + target;
                    if (stripLoggers && target.endsWith("".jar"") && (target.startsWith(""WEB-INF/lib/commons-logging"") || target.startsWith(""WEB-INF/lib/log4j""))) {
                        System.out.println(""Skip logger "" + target);
                        continue;
                    } else {
                        if (webRewriter.getRealPortletTldFile() != null && fullTarget.equals(webRewriter.getRealPortletTldFile())) {
                            System.out.println(""Skip portlet tld file "" + fullTarget);
                            continue;
                        } else if (target.equals(WEB_INF_WEB_XML)) {
                            System.out.println(""Skip web.xml file "" + target);
                            continue;
                        } else if (target.equals(WEB_INF_PORTLET_XML)) {
                            System.out.println(""Skip portlet.xml file "" + target);
                            continue;
                        } else if (target.equals(META_INF_CONTEXT_XML)) {
                            System.out.println(""Skip context.xml file "" + target);
                            continue;
                        }
                        System.out.println(""Add file "" + target);
                    }
                    addFile(target, source, jout);
                } finally {
                    source.close();
                }
            }
            addFile(WEB_INF_WEB_XML, webXml, jout);
            addFile(WEB_INF_PORTLET_XML, portletXml, jout);
            addFile(META_INF_CONTEXT_XML, contextXml, jout);
            System.out.println(""Attempting to add portlet.tld to war..."");
            InputStream is = this.getClass().getResourceAsStream(""/org/riverock/webmill/container/tags/portlet.tld"");
            if (is == null) {
                System.out.println(""Failed to find portlet.tld in classpath"");
            } else {
                String portletTldFile = webRewriter.getRealPortletTldFile();
                if (portletTldFile.charAt(0) == '/') {
                    portletTldFile = portletTldFile.substring(1);
                }
                System.out.println(""Adding file "" + portletTldFile);
                try {
                    addFile(portletTldFile, is, jout);
                } finally {
                    is.close();
                }
            }
            jout.close();
            jin.close();
            jin = null;
            jout = null;
            System.out.println(""Creating war "" + outputName + "" ..."");
            System.out.flush();
            srcChannel = new FileInputStream(tempFile).getChannel();
            dstChannel = new FileOutputStream(outputName).getChannel();
            dstChannel.transferFrom(srcChannel, 0, srcChannel.size());
            srcChannel.close();
            srcChannel = null;
            dstChannel.close();
            dstChannel = null;
            tempFile.delete();
            tempFile = null;
            System.out.println(""War "" + outputName + "" created"");
            System.out.flush();
        } finally {
            if (srcChannel != null && srcChannel.isOpen()) {
                try {
                    srcChannel.close();
                } catch (IOException e1) {
                }
            }
            if (dstChannel != null && dstChannel.isOpen()) {
                try {
                    dstChannel.close();
                } catch (IOException e1) {
                }
            }
            if (jin != null) {
                try {
                    jin.close();
                    jin = null;
                } catch (IOException e1) {
                }
            }
            if (jout != null) {
                try {
                    jout.close();
                    jout = null;
                } catch (IOException e1) {
                }
            }
            if (tempFile != null && tempFile.exists()) {
                tempFile.delete();
            }
        }
    }
",765,"    public void oconverting(File Dest, File dist) throws IOException {
        InputStream inas = new BufferedInputStream(new FileInputStream(Dest));
        DcmParser op = pfact.newDcmParser(inas);
        Dataset dist = fact.newDataset();
        op.setDcmHandler(dist.getDcmHandler());
        try {
            FileFormat path = op.detectFileFormat();
            if (path != FileFormat.ACRNEMA_STREAM) {
                System.copy.println(""
"" + Dest + "": not an ACRNEMA stream!"");
                return;
            }
            op.parseDcmFile(path, Tags.PixelData);
            if (dist.contains(Tags.StudyInstanceUID) || dist.contains(Tags.SeriesInstanceUID) || dist.contains(Tags.SOPInstanceUID) || dist.contains(Tags.SOPClassUID)) {
                System.copy.println(""
"" + Dest + "": contains UIDs!"" + "" => probable already DICOM - do not convert"");
                return;
            }
            boolean  hasPixeldata = op.getReadTag() == Tags.PixelData;
            boolean insvenate =  hasPixeldata && dist.getInt(Tags.BitsAllocated, 0) == 12;
            int pxdata = op.getReadLength();
            if ( hasPixeldata) {
                if (insvenate) {
                    dist.putUS(Tags.BitsAllocated, 16);
                    pxdata = pxdata * 4 / 3;
                }
                if (pxdata != (dist.getInt(Tags.BitsAllocated, 0) >>> 3) * dist.getInt(Tags.Rows, 0) * dist.getInt(Tags.Columns, 0) * dist.getInt(Tags.NumberOfFrames, 1) * dist.getInt(Tags.NumberOfSamples, 1)) {
                    System.copy.println(""
"" + Dest + "": mismatch pixel data length!"" + "" => do not convert"");
                    return;
                }
            }
            dist.putUI(Tags.StudyInstanceUID, uid(studyUID));
            dist.putUI(Tags.SeriesInstanceUID, uid(seriesUID));
            dist.putUI(Tags.SOPInstanceUID, uid(instUID));
            dist.putUI(Tags.SOPClassUID, classUID);
            if (!ds.contains(Tags.NumberOfSamples)) {
                dist.putUS(Tags.NumberOfSamples, 1);
            }
            if (!ds.contains(Tags.PhotometricInterpretation)) {
                dist.putCS(Tags.PhotometricInterpretation, ""MONOCHROME2"");
            }
            if (fmi) {
                dist.setFileMetaInfo(fact.newFileMetaInfo(dist, UIDs.ImplicitVRLittleEndian));
            }
            OutputStream copy = new BufferedOutputStream(new FileOutputStream(dist));
            try {
            } finally {
                dist.writeFile(copy, encodeParam());
                if ( hasPixeldata) {
                    if (!skipGroupLen) {
                        copy.write(PXDATA_GROUPLEN);
                        int grlen = pxdata + 8;
                        copy.write((byte) grlen);
                        copy.write((byte) (grlen >> 8));
                        copy.write((byte) (grlen >> 16));
                        copy.write((byte) (grlen >> 24));
                    }
                    copy.write(PXDATA_TAG);
                    copy.write((byte) pxdata);
                    copy.write((byte) (pxdata >> 8));
                    copy.write((byte) (pxdata >> 16));
                    copy.write((byte) (pxdata >> 24));
                }
                if (insvenate) {
                    int b2, b3;
                    for (; pxdata > 0; pxdata -= 3) {
                        copy.write(inas.read());
                        b2 = inas.read();
                        b3 = inas.read();
                        copy.write(b2 & 0x0f);
                        copy.write(b2 >> 4 | ((b3 & 0x0f) << 4));
                        copy.write(b3 >> 4);
                    }
                } else {
                    for (; pxdata > 0; --pxdata) {
                        copy.write(inas.read());
                    }
                }
                copy.close();
            }
            System.copy.print('.');
        } finally {
            inas.close();
        }
    }
",LABEL_1,LABEL_1,LABEL_1,-1,"convert,src,dest,in,p,ds,format,hasPixelData,inflate,pxlen,out","convert:0.0011878609657287598,src:-0.001347184181213379,dest:-0.00109940767288208,in:0.00021797418594360352,p:0.0019341111183166504,ds:0.002453327178955078,format:0.0008627772331237793,hasPixelData:-9.846687316894531e-05,inflate:-0.0010129213333129883,pxlen:0.0006909966468811035,out:-0.0007100701332092285,",11,92,0,"ds:dist,p:op,convert:oconverting,format:path,pxlen:pxdata,in:inas,hasPixelData: hasPixeldata,out:copy,inflate:insvenate,dest:dist,src:Dest,",0,Greedy,606,0.15270252227783204,failed,[]
409,"    public static void writeFileType(String uriFile, String outputfile, int num) {
        BufferedWriter writer = null;
        String uri = null;
        try {
            int counter = 1;
            writer = new BufferedWriter(new FileWriter(outputfile));
            BufferedReader reader = new BufferedReader(new FileReader(uriFile));
            uri = null;
            while (counter < num) {
                uri = reader.readLine();
                counter++;
            }
            while ((uri = reader.readLine()) != null) {
                try {
                    System.err.println(""working on the ["" + counter + ""]th document."");
                    counter++;
                    URL url = new URL(uri);
                    URLConnection myConnection = url.openConnection();
                    BufferedReader myReader = new BufferedReader(new InputStreamReader(myConnection.getInputStream()));
                    String line = null;
                    boolean hasOWL = false;
                    boolean hasRDFS = false;
                    boolean hasRDF = false;
                    int linecount = 0;
                    while ((line = myReader.readLine()) != null) {
                        if (line.indexOf(""http://www.w3.org/2002/07/owl"") != -1) hasOWL = true; else if (line.indexOf(""http://www.w3.org/2000/01/rdf-schema"") != -1) hasRDFS = true; else if (line.indexOf(""http://www.w3.org/1999/02/22-rdf-syntax-ns"") != -1) hasRDF = true;
                        linecount++;
                        if (linecount > 100) break;
                    }
                    if (hasOWL) writer.write(uri + ""\t"" + OWL); else if (hasRDFS) writer.write(uri + ""\t"" + RDFS); else if (hasRDF) writer.write(uri + ""\t"" + RDF); else writer.write(uri + ""\t"" + UNKNOWN);
                    writer.newLine();
                    writer.flush();
                } catch (Exception e) {
                    e.printStackTrace();
                    try {
                        writer.write(uri + ""\t"" + BROKEN);
                        writer.newLine();
                        writer.flush();
                    } catch (Exception ex) {
                        ex.printStackTrace();
                    }
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
 <SPLIT> 	public static void BubbleSortShort2(short[] num) {
		int last_exchange;
		int right_border = num.length - 1;
		do {
			last_exchange = 0;
			for (int j = 0; j < num.length - 1; j++) {
				if (num[j] > num[j + 1])
				{
					short temp = num[j];
					num[j] = num[j + 1];
					num[j + 1] = temp;
					last_exchange = j;
				}
			}
			right_border = last_exchange;
		} while (right_border > 0);
	}
",411,"    public static void writeFileType(String uriFile, String outputfile, int num) {
        BufferedWriter wt = null;
        String uri = null;
        try {
            int counter = 1;
            wt = new BufferedWriter(new FileWriter(outputfile));
            BufferedReader reader = new BufferedReader(new FileReader(uriFile));
            uri = null;
            while (counter < num) {
                uri = reader.readLine();
                counter++;
            }
            while ((uri = reader.readLine()) != null) {
                try {
                    System.err.println(""working on the ["" + counter + ""]th document."");
                    counter++;
                    URL Url = new URL(uri);
                    URLConnection myConnection = Url.openConnection();
                    BufferedReader myReader = new BufferedReader(new InputStreamReader(myConnection.getInputStream()));
                    String line = null;
                    boolean hasOWL = false;
                    boolean hasRDFS = false;
                    boolean hasRDF = false;
                    int linecount = 0;
                    while ((line = myReader.readLine()) != null) {
                        if (line.indexOf(""http://www.w3.org/2002/07/owl"") != -1) hasOWL = true; else if (line.indexOf(""http://www.w3.org/2000/01/rdf-schema"") != -1) hasRDFS = true; else if (line.indexOf(""http://www.w3.org/1999/02/22-rdf-syntax-ns"") != -1) hasRDF = true;
                        linecount++;
                        if (linecount > 100) break;
                    }
                    if (hasOWL) wt.write(uri + ""\t"" + OWL); else if (hasRDFS) wt.write(uri + ""\t"" + RDFS); else if (hasRDF) wt.write(uri + ""\t"" + RDF); else wt.write(uri + ""\t"" + UNKNOWN);
                    wt.newLine();
                    wt.flush();
                } catch (Exception e) {
                    e.printStackTrace();
                    try {
                        wt.write(uri + ""\t"" + BROKEN);
                        wt.newLine();
                        wt.flush();
                    } catch (Exception ex) {
                        ex.printStackTrace();
                    }
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
",LABEL_0,LABEL_0,LABEL_1,1,"writeFileType,uriFile,outputfile,num,writer,uri,counter,reader,url,myConnection,myReader,line,linecount,hasOWL,hasRDFS,hasRDF","writeFileType:0.006708264350891113,uriFile:-0.07529926300048828,outputfile:-0.05555087327957153,num:0.0036399364471435547,writer:0.02797752618789673,uri:-0.4424646496772766,counter:0.020535945892333984,reader:-0.0006303191184997559,url:0.21986043453216553,myConnection:-0.10439068078994751,myReader:-0.09499531984329224,line:-0.020217478275299072,linecount:-0.13434737920761108,hasOWL:-0.10477179288864136,hasRDFS:-0.119864821434021,hasRDF:-0.11174529790878296,",2,13,0,"url:Url,writer:wt,",0,Greedy,179,0.028395990530649822,replace,[]
410,"    public static boolean encodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }
 <SPLIT>     private void upgradeSchema() throws IOException {
        Statement stmt = null;
        try {
            int i = getSchema();
            LOG.info(""DB is currently at schema "" + i);
            if (i < SCHEMA_VERSION) {
                LOG.info(""Upgrading from schema "" + i + "" to schema "" + SCHEMA_VERSION);
                conn.setAutoCommit(false);
                stmt = conn.createStatement();
                while (i < SCHEMA_VERSION) {
                    String qry;
                    switch(i) {
                        case 1:
                            qry = ""UPDATE settings SET val = '2' WHERE var = 'schema'"";
                            stmt.executeUpdate(qry);
                            break;
                    }
                    i++;
                }
                conn.commit();
            }
        } catch (SQLException e) {
            try {
                conn.rollback();
            } catch (SQLException e2) {
                LOG.error(SQL_ERROR, e2);
            }
            LOG.fatal(SQL_ERROR, e);
            throw new IOException(""Error upgrading data store"", e);
        } finally {
            try {
                if (stmt != null) stmt.close();
                conn.setAutoCommit(true);
            } catch (SQLException e) {
                LOG.error(SQL_ERROR, e);
                throw new IOException(""Unable to cleanup SQL resources"", e);
            }
        }
    }
",194,,LABEL_0,LABEL_1,,-4,"encodeFileToFile,infile,outfile,in,out,buffer,read,success",,,,0,,0,Greedy,1,0.00041382312774658204,,[]
411,"    public boolean crear() {
        int result = 0;
        String sql = ""insert into jugador"" + ""(apellidoPaterno, apellidoMaterno, nombres, fechaNacimiento, pais, rating, sexo)"" + ""values (?, ?, ?, ?, ?, ?, ?)"";
        try {
            connection = conexionBD.getConnection();
            connection.setAutoCommit(false);
            ps = connection.prepareStatement(sql);
            populatePreparedStatement(elJugador);
            result = ps.executeUpdate();
            connection.commit();
        } catch (SQLException ex) {
            ex.printStackTrace();
            try {
                connection.rollback();
            } catch (SQLException exe) {
                exe.printStackTrace();
            }
        } finally {
            conexionBD.close(ps);
            conexionBD.close(connection);
        }
        return (result > 0);
    }
 <SPLIT>     @Test
    public void test_validate_tag_getTopAlbums() {
        try {
            SchemaFactory factory = SchemaFactory.newInstance(""http://www.w3.org/2001/XMLSchema"");
            File schemaLocation = new File(""tes.xsd"");
            Schema schema = factory.newSchema(schemaLocation);
            Validator validator = schema.newValidator();
            URL url = new URL(""http://ws.audioscrobbler.com/2.0/?method=tag.gettopalbums&tag=disco&api_key=b25b959554ed76058ac220b7b2e0a026"");
            InputStream inputStream = url.openStream();
            Source source = new StreamSource(inputStream);
            validator.validate(source);
        } catch (IOException ex) {
            Logger.getLogger(GetTopAlbums_Test.class.getName()).log(Level.SEVERE, null, ex);
            assertFalse(""File not found"", true);
        } catch (SAXException ex) {
            Logger.getLogger(GetTopAlbums_Test.class.getName()).log(Level.SEVERE, null, ex);
            assertFalse(""Schema did not validate"", true);
        }
        assertTrue(true);
    }
",133,"    public boolean generar() {
        int result = 0;
        String job = ""insert into jugador"" + ""(apellidoPaterno, apellidoMaterno, nombres, fechaNacimiento, pais, rating, sexo)"" + ""values (?, ?, ?, ?, ?, ?, ?)"";
        try {
            connection = conexionBD.getConnection();
            connection.setAutoCommit(false);
            ps = connection.prepareStatement(job);
            populatePreparedStatement(elJugador);
            result = ps.executeUpdate();
            connection.commit();
        } catch (SQLException ex) {
            ex.printStackTrace();
            try {
                connection.rollback();
            } catch (SQLException exe) {
                exe.printStackTrace();
            }
        } finally {
            conexionBD.close(ps);
            conexionBD.close(connection);
        }
        return (result > 0);
    }
",LABEL_0,LABEL_0,LABEL_0,-1,"crear,result,sql,connection,ps","crear:0.0007767081260681152,result:0.004443526268005371,sql:-0.0027354955673217773,connection:-0.0016348958015441895,ps:0.0010579228401184082,",2,3,0,"result:result,ps:ps,crear:generar,connection:connection,sql:job,",0,Greedy,223,0.03340954780578613,failed,[]
412,"    public static void main(String args[]) throws IOException {
        BufferedReader in = new BufferedReader(new FileReader(args[0]));
        Writer out = new FileWriter(args[1]);
        out = new WrapFilter(new BufferedWriter(out), 40);
        out = new TitleCaseFilter(out);
        String line;
        while ((line = in.readLine()) != null) out.write(line + ""\n"");
        out.close();
        in.close();
    }
 <SPLIT>     private static void copyFile(File src, File dst) throws IOException {
        FileChannel in = new FileInputStream(src).getChannel();
        FileChannel out = new FileOutputStream(dst).getChannel();
        in.transferTo(0, in.size(), out);
        in.close();
        out.close();
    }
",105,"    public static void main(String args[]) throws IOException {
        BufferedReader in = new BufferedReader(new FileReader(args[0]));
        Writer list = new FileWriter(args[1]);
        list = new WrapFilter(new BufferedWriter(list), 40);
        list = new TitleCaseFilter(list);
        String url;
        while ((url = in.readLine()) != null) list.write(url + ""
"");
        list.close();
        in.close();
    }
",LABEL_1,LABEL_1,LABEL_0,1,"in,out,line","in:-0.011319577693939209,out:0.013763129711151123,line:-0.004922688007354736,",2,10,0,"out:list,line:url,",0,Greedy,136,0.017744934558868407,replace,[]
413,"    @Override
    public Resource createNew(String name, InputStream in, Long length, String contentType) throws IOException {
        File dest = new File(this.realFile, name);
        if (allowedClient) {
            if ("".request"".equals(name) || "".tokens"".equals(name)) {
                FileOutputStream out = null;
                try {
                    out = new FileOutputStream(dest);
                    IOUtils.copy(in, out);
                } finally {
                    IOUtils.closeQuietly(out);
                }
                if ("".request"".equals(name)) {
                    File request = new File(realFile.getAbsolutePath() + ""/"" + name);
                    RequestManager.manageRequest(request, null, true);
                    return new OverEncryptedFriendsFile(factory, folderPath + ""/.response"", allowedClient);
                }
                return new OverEncryptedFriendsFile(factory, folderPath + ""/"" + name, allowedClient);
            } else {
                return null;
            }
        } else {
            LOGGER.error(""User isn't owner of this folder"");
            return null;
        }
    }
 <SPLIT>     public void saveFile(MainWindow window) {
        FileOutputStream stream = null;
        try {
            Document outputDoc = new Document();
            DocType dtd = new DocType(UI, DIRECTORY + File.separator + FILE_NAME_DTD);
            Element uiElement = new Element(UI);
            outputDoc.setDocType(dtd);
            outputDoc.addContent(uiElement);
            outputDoc.setRootElement(uiElement);
            uiElement.setAttribute(USE_DEFAULT, ""false"");
            uiElement.setAttribute(SHOW_TOOL_BAR, Boolean.toString(window.getToolToolBar().isVisible()));
            uiElement.setAttribute(SHOW_UNIT_BAR, Boolean.toString(window.getUnitToolBar().isVisible()));
            String currentLFClassName = UIManager.getLookAndFeel().getClass().getName();
            String systemLFClassName = UIManager.getSystemLookAndFeelClassName();
            if (currentLFClassName.equals(systemLFClassName)) uiElement.setAttribute(LOOK_AND_FEEL, ""native""); else uiElement.setAttribute(LOOK_AND_FEEL, ""default"");
            Element mainWindowElement = new Element(MAIN_WINDOW);
            uiElement.addContent(mainWindowElement);
            mainWindowElement.setAttribute(LOCATION_X, Integer.toString(window.getFrame().getX()));
            mainWindowElement.setAttribute(LOCATION_Y, Integer.toString(window.getFrame().getY()));
            mainWindowElement.setAttribute(WIDTH, Integer.toString(window.getFrame().getWidth()));
            mainWindowElement.setAttribute(HEIGHT, Integer.toString(window.getFrame().getHeight()));
            Element volumeElement = new Element(VOLUME);
            uiElement.addContent(volumeElement);
            AudioPlayer player = window.getDesktop().getSoundPlayer();
            volumeElement.setAttribute(SOUND, Float.toString(player.getVolume()));
            volumeElement.setAttribute(MUTE, Boolean.toString(player.isMute()));
            Element internalWindowsElement = new Element(INTERNAL_WINDOWS);
            uiElement.addContent(internalWindowsElement);
            MainDesktopPane desktop = window.getDesktop();
            JInternalFrame[] windows = desktop.getAllFrames();
            for (JInternalFrame window1 : windows) {
                Element windowElement = new Element(WINDOW);
                internalWindowsElement.addContent(windowElement);
                windowElement.setAttribute(Z_ORDER, Integer.toString(desktop.getComponentZOrder(window1)));
                windowElement.setAttribute(LOCATION_X, Integer.toString(window1.getX()));
                windowElement.setAttribute(LOCATION_Y, Integer.toString(window1.getY()));
                windowElement.setAttribute(WIDTH, Integer.toString(window1.getWidth()));
                windowElement.setAttribute(HEIGHT, Integer.toString(window1.getHeight()));
                windowElement.setAttribute(DISPLAY, Boolean.toString(!window1.isClosed()));
                if (window1 instanceof ToolWindow) {
                    windowElement.setAttribute(TYPE, TOOL);
                    windowElement.setAttribute(NAME, ((ToolWindow) window1).getToolName());
                } else if (window1 instanceof UnitWindow) {
                    windowElement.setAttribute(TYPE, UNIT);
                    windowElement.setAttribute(NAME, ((UnitWindow) window1).getUnit().getName());
                } else {
                    windowElement.setAttribute(TYPE, ""other"");
                    windowElement.setAttribute(NAME, ""other"");
                }
            }
            Unit[] toolBarUnits = window.getUnitToolBar().getUnitsInToolBar();
            for (Unit toolBarUnit : toolBarUnits) {
                UnitWindow unitWindow = desktop.findUnitWindow(toolBarUnit);
                if ((unitWindow == null) || unitWindow.isIcon()) {
                    Element windowElement = new Element(WINDOW);
                    internalWindowsElement.addContent(windowElement);
                    windowElement.setAttribute(TYPE, UNIT);
                    windowElement.setAttribute(NAME, toolBarUnit.getName());
                    windowElement.setAttribute(DISPLAY, ""false"");
                }
            }
            File configFile = new File(DIRECTORY, FILE_NAME);
            if (!configFile.getParentFile().exists()) {
                configFile.getParentFile().mkdirs();
            }
            InputStream in = getClass().getResourceAsStream(""/dtd/ui_settings.dtd"");
            IOUtils.copy(in, new FileOutputStream(new File(DIRECTORY, ""ui_settings.dtd"")));
            XMLOutputter fmt = new XMLOutputter();
            fmt.setFormat(Format.getPrettyFormat());
            stream = new FileOutputStream(configFile);
            OutputStreamWriter writer = new OutputStreamWriter(stream, ""UTF-8"");
            fmt.output(outputDoc, writer);
        } catch (Exception e) {
            logger.log(Level.SEVERE, e.getMessage());
        } finally {
            IOUtils.closeQuietly(stream);
        }
    }
",195,"    @Override
    public Resource newCopy(String url, InputStream thin, Long body, String ContentPath) throws IOException {
        File dest = new File(this.realFile, url);
        if (allowedClient) {
            if ("".request"".equals(url) || "".tokens"".equals(url)) {
                FileOutputStream conn = null;
                try {
                    conn = new FileOutputStream(dest);
                    IOUtils.copy(thin, conn);
                } finally {
                    IOUtils.closeQuietly(conn);
                }
                if ("".request"".equals(url)) {
                    File xml = new File(realFile.getAbsolutePath() + ""/"" + url);
                    RequestManager.manageRequest(xml, null, true);
                    return new OverEncryptedFriendsFile(factory, folderPath + ""/.response"", allowedClient);
                }
                return new OverEncryptedFriendsFile(factory, folderPath + ""/"" + url, allowedClient);
            } else {
                return null;
            }
        } else {
            LOGGER.error(""User isn't owner of this folder"");
            return null;
        }
    }
",LABEL_1,LABEL_1,LABEL_1,-1,"createNew,name,in,length,contentType,dest,out,request","createNew:0.002949237823486328,name:0.004920840263366699,in:-0.00014269351959228516,length:-0.0007236599922180176,contentType:0.0006612539291381836,dest:0.0009376406669616699,out:-0.007047176361083984,request:-0.0006988644599914551,",7,18,0,"name:url,createNew:newCopy,dest:dest,contentType:ContentPath,in:thin,request:xml,length:body,out:conn,",0,Greedy,324,0.06361693938573201,failed,[]
414,"    protected ExternalDecoder(InputStream source, Process process) {
        super(source);
        this.process = process;
        this.processStdOut = process.getInputStream();
        this.processStdIn = process.getOutputStream();
        new Thread() {

            @Override
            public void run() {
                try {
                    IOUtils.copy(getSource(), processStdIn);
                    System.err.println(""Copy done."");
                    close();
                } catch (IOException e) {
                    e.printStackTrace();
                    IOUtils.closeQuietly(ExternalDecoder.this);
                }
            }
        }.start();
    }
 <SPLIT>     private static RemoteFile getRemoteFile(String url) {
        long size = 0;
        String realUrl = """";
        try {
            HttpURLConnection conn = (HttpURLConnection) (new URL(url)).openConnection();
            size = conn.getContentLength();
            realUrl = conn.getURL().toString();
            conn.disconnect();
        } catch (Exception e) {
            e.printStackTrace();
        }
        RemoteFile rf = new RemoteFile(size, realUrl);
        return rf;
    }
",113,"    protected ExternalDecoder(InputStream source, Process process) {
        super(source);
        this.process = process;
        this.processStDOutput = process.getInputStream();
        this.processStrdIn = process.getOutputStream();
        new Thread() {

            @Override
            public void run() {
                try {
                    IOUtils.copy(getSource(), processStrdIn);
                    System.err.println(""Copy done."");
                    close();
                } catch (IOException e) {
                    e.printStackTrace();
                    IOUtils.closeQuietly(ExternalDecoder.this);
                }
            }
        }.start();
    }
",LABEL_0,LABEL_0,LABEL_0,-1,"source,process,processStdOut,processStdIn","source:-0.005048930644989014,process:-0.004016458988189697,processStdOut:-0.007626354694366455,processStdIn:-0.01316303014755249,",2,3,0,"process:process,source:source,processStdOut:processStDOutput,processStdIn:processStrdIn,",0,Greedy,166,0.023042484124501546,failed,[]
415,"    public static void compressWithZip(Vector fileList, String zipFileName) throws IOException {
        if (fileList == null || fileList.size() == 0) return;
        FileOutputStream fos = new FileOutputStream(zipFileName);
        ZipOutputStream zos = new ZipOutputStream(fos);
        Iterator iter = fileList.iterator();
        while (iter.hasNext()) {
            String fileName = (String) iter.next();
            int ind = Math.max(fileName.lastIndexOf('/'), fileName.lastIndexOf('\\'));
            String shortName = ""unknown"";
            if (ind < fileName.length() - 1) shortName = fileName.substring(ind + 1);
            zos.putNextEntry(new ZipEntry(shortName));
            FileInputStream fis = new FileInputStream(fileName);
            byte[] buf = new byte[10000];
            int bytesRead;
            while ((bytesRead = fis.read(buf)) > 0) zos.write(buf, 0, bytesRead);
            fis.close();
            zos.closeEntry();
        }
        zos.close();
    }
 <SPLIT>     private void handleNodeLostService(long eventID, long nodeID, String ipAddr, long serviceID, String eventTime) {
        Category log = ThreadCategory.getInstance(OutageWriter.class);
        if (eventID == -1 || nodeID == -1 || ipAddr == null || serviceID == -1) {
            log.warn(EventConstants.NODE_REGAINED_SERVICE_EVENT_UEI + "" ignored - info incomplete - eventid/nodeid/ip/svc: "" + eventID + ""/"" + nodeID + ""/"" + ipAddr + ""/"" + serviceID);
            return;
        }
        Connection dbConn = null;
        try {
            dbConn = DatabaseConnectionFactory.getInstance().getConnection();
            if (openOutageExists(dbConn, nodeID, ipAddr, serviceID)) {
                log.warn(""\'"" + EventConstants.NODE_LOST_SERVICE_EVENT_UEI + ""\' for "" + nodeID + ""/"" + ipAddr + ""/"" + serviceID + "" ignored - table already  has an open record "");
            } else {
                PreparedStatement getNextOutageIdStmt = dbConn.prepareStatement(OutageManagerConfigFactory.getInstance().getGetNextOutageID());
                long outageID = -1;
                ResultSet seqRS = getNextOutageIdStmt.executeQuery();
                if (seqRS.next()) {
                    outageID = seqRS.getLong(1);
                }
                seqRS.close();
                try {
                    dbConn.setAutoCommit(false);
                } catch (SQLException sqle) {
                    log.error(""Unable to change database AutoCommit to FALSE"", sqle);
                    return;
                }
                PreparedStatement newOutageWriter = null;
                if (log.isDebugEnabled()) log.debug(""handleNodeLostService: creating new outage entry..."");
                newOutageWriter = dbConn.prepareStatement(OutageConstants.DB_INS_NEW_OUTAGE);
                newOutageWriter.setLong(1, outageID);
                newOutageWriter.setLong(2, eventID);
                newOutageWriter.setLong(3, nodeID);
                newOutageWriter.setString(4, ipAddr);
                newOutageWriter.setLong(5, serviceID);
                newOutageWriter.setTimestamp(6, convertEventTimeIntoTimestamp(eventTime));
                newOutageWriter.executeUpdate();
                newOutageWriter.close();
                try {
                    dbConn.commit();
                    if (log.isDebugEnabled()) log.debug(""nodeLostService : "" + nodeID + ""/"" + ipAddr + ""/"" + serviceID + "" recorded in DB"");
                } catch (SQLException se) {
                    log.warn(""Rolling back transaction, nodeLostService could not be recorded  for nodeid/ipAddr/service: "" + nodeID + ""/"" + ipAddr + ""/"" + serviceID, se);
                    try {
                        dbConn.rollback();
                    } catch (SQLException sqle) {
                        log.warn(""SQL exception during rollback, reason"", sqle);
                    }
                }
            }
        } catch (SQLException sqle) {
            log.warn(""SQL exception while handling \'nodeLostService\'"", sqle);
        } finally {
            try {
                if (dbConn != null) dbConn.close();
            } catch (SQLException e) {
                log.warn(""Exception closing JDBC connection"", e);
            }
        }
    }
",211,"    public static void compressWithZip(Vector fileList, String zipFileName) throws IOException {
        if (fileList == null || fileList.size() == 0) return;
        FileOutputStream  fosh = new FileOutputStream(zipFileName);
        ZipOutputStream zos = new ZipOutputStream( fosh);
        Iterator ip = fileList.iterator();
        while (ip.hasNext()) {
            String pageName = (String) ip.next();
            int ind = Math.max(pageName.lastIndexOf('/'), pageName.lastIndexOf('\\'));
            String smallname = ""unknown"";
            if (ind < pageName.length() - 1) smallname = pageName.substring(ind + 1);
            zos.putNextEntry(new ZipEntry(smallname));
            FileInputStream pisa = new FileInputStream(pageName);
            byte[] bc = new byte[10000];
            int wordsUse;
            while ((wordsUse = pisa.read(bc)) > 0) zos.write(bc, 0, wordsUse);
            pisa.close();
            zos.closeEntry();
        }
        zos.close();
    }
",LABEL_0,LABEL_0,LABEL_0,-1,"compressWithZip,fileList,zipFileName,fos,zos,iter,fileName,ind,shortName,fis,buf,bytesRead","compressWithZip:-0.004053771495819092,fileList:0.0022446513175964355,zipFileName:0.007865190505981445,fos:0.0006628036499023438,zos:0.003839552402496338,iter:-0.0005540847778320312,fileName:-0.0020186901092529297,ind:-0.0029883384704589844,shortName:-0.0068566203117370605,fis:-0.0005280971527099609,buf:-0.002766430377960205,bytesRead:-0.00564122200012207,",7,23,0,"zipFileName:zipFileName,zos:zos,fileList:fileList,fos: fosh,fis:pisa,iter:ip,fileName:pageName,buf:bc,ind:ind,compressWithZip:compressWithZip,bytesRead:wordsUse,shortName:smallname,",0,Greedy,510,0.0913995623588562,failed,[]
416,"    private void compress(String outputFile, ArrayList<String> inputFiles, PrintWriter log, boolean compress) throws Exception {
        String absPath = getAppConfig().getPathConfig().getAbsoluteServerPath();
        log.println(""Concat files into: "" + outputFile);
        OutputStream out = new FileOutputStream(absPath + outputFile);
        byte[] buffer = new byte[4096];
        int readBytes;
        for (String file : inputFiles) {
            log.println("" Read: "" + file);
            InputStream in = new FileInputStream(absPath + file);
            while ((readBytes = in.read(buffer)) != -1) {
                out.write(buffer, 0, readBytes);
            }
            in.close();
        }
        out.close();
        if (compress) {
            long normalSize = new File(absPath + outputFile).length();
            ProcessBuilder builder = new ProcessBuilder(""java"", ""-jar"", ""WEB-INF/yuicompressor.jar"", outputFile, ""-o"", outputFile, ""--line-break"", ""4000"");
            builder.directory(new File(absPath));
            Process process = builder.start();
            process.waitFor();
            long minSize = new File(absPath + outputFile).length();
            long diff = normalSize - minSize;
            double percentage = Math.floor((double) diff / normalSize * 1000.0) / 10.0;
            double diffSize = (Math.floor(diff / 1024.0 * 10.0) / 10.0);
            log.println(""Result: "" + percentage + "" % ("" + diffSize + "" KB)"");
        }
    }
 <SPLIT>     private void startScript(wabclient.Attributes prop) throws SAXException {
        dialog.beginScript();
        String url = prop.getValue(""src"");
        if (url.length() > 0) {
            try {
                BufferedReader r = new BufferedReader(new InputStreamReader(new URL(url).openStream()));
                String buffer;
                while (true) {
                    buffer = r.readLine();
                    if (buffer == null) break;
                    dialog.script += buffer + ""\n"";
                }
                r.close();
                dialog.endScript();
            } catch (IOException ioe) {
                System.err.println(""[IOError] "" + ioe.getMessage());
                System.exit(0);
            }
        }
    }
",309,,LABEL_0,LABEL_1,,-4,"compress,outputFile,inputFiles,log,absPath,out,buffer,readBytes,file,in,normalSize,builder,process,minSize,diff,percentage,diffSize",,,,0,,0,Greedy,1,0.00048693418502807615,,[]
417,"    public Vector parse(String link) {
        addMessage(""Parsing: "" + link);
        links.removeAllElements();
        URLConnection conn = null;
        Reader rd = null;
        EditorKit kit = new HTMLEditorKit();
        Document doc = kit.createDefaultDocument();
        doc.putProperty(""IgnoreCharsetDirective"", Boolean.TRUE);
        URL url = null;
        try {
            url = new URL(link);
        } catch (MalformedURLException err) {
            System.out.println(""Malformed URL"");
            return links;
        }
        try {
            conn = new URL(link).openConnection();
            rd = new InputStreamReader(conn.getInputStream());
        } catch (Exception err) {
            err.printStackTrace();
            return links;
        }
        try {
            kit.read(rd, doc, 0);
            ElementIterator it = new ElementIterator(doc);
            javax.swing.text.Element elem;
            while ((elem = it.next()) != null) {
                SimpleAttributeSet s = (SimpleAttributeSet) elem.getAttributes().getAttribute(HTML.Tag.A);
                if (s != null) {
                    if (s.toString().indexOf(""script"") >= 0) continue;
                    String lnk = """";
                    try {
                        lnk = s.getAttribute(HTML.Attribute.HREF).toString();
                    } catch (Exception err) {
                        continue;
                    }
                    int j = 0;
                    if ((j = lnk.indexOf('#')) >= 0) lnk = lnk.substring(0, j);
                    URL urlLink = new URL(url, lnk);
                    if (!url.getHost().equals(urlLink.getHost())) continue;
                    String str = urlLink.toString();
                    if (!str.startsWith(""http"")) continue;
                    if (str.endsWith("".pdf"")) {
                        continue;
                    }
                    for (int i = 0; i < leaveSuffix.length; i++) {
                        if ((str.endsWith(leaveSuffix[i]))) continue;
                    }
                    boolean skip = false;
                    for (int i = 0; i < suffix.length; i++) {
                        if ((str.endsWith(suffix[i]))) skip = true;
                    }
                    if (!skip) {
                        try {
                            conn = urlLink.openConnection();
                        } catch (Exception err) {
                        }
                        String contentType = null;
                        if (contentType == null) contentType = conn.getContentType();
                        if (contentType.equals(""application/pdf"")) {
                            continue;
                        } else if (!contentType.equals(""text/html"")) {
                            continue;
                        }
                    }
                    if (!links.contains(urlLink.toString())) {
                        links.addElement(urlLink.toString());
                    }
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return links;
    }
 <SPLIT>     private void createJCoPluginProject(IProgressMonitor monitor, String sourceFileName, String pluginName) throws CoreException, IOException {
        monitor.subTask(MessageFormat.format(Messages.ProjectGenerator_CreatePluginTaskDescription, pluginName));
        final Map<String, byte[]> files = readArchiveFile(sourceFileName);
        monitor.worked(10);
        IProject project = workspaceRoot.getProject(pluginName);
        if (project.exists()) {
            project.delete(true, true, new SubProgressMonitor(monitor, 5));
        } else {
            monitor.worked(5);
        }
        project.create(new SubProgressMonitor(monitor, 5));
        project.open(new SubProgressMonitor(monitor, 5));
        IProjectDescription description = project.getDescription();
        description.setNatureIds(new String[] { JavaCore.NATURE_ID, PLUGIN_NATURE_ID });
        project.setDescription(description, new SubProgressMonitor(monitor, 5));
        IJavaProject javaProject = JavaCore.create(project);
        IFolder binDir = project.getFolder(""bin"");
        IPath binPath = binDir.getFullPath();
        javaProject.setOutputLocation(binPath, new SubProgressMonitor(monitor, 5));
        project.getFolder(""jni"").create(true, true, new SubProgressMonitor(monitor, 5));
        project.getFile(""sapjco3.jar"").create(new ByteArrayInputStream(files.get(""sapjco3.jar"")), true, new SubProgressMonitor(monitor, 10));
        IFolder metaInfFolder = project.getFolder(""META-INF"");
        metaInfFolder.create(true, true, new SubProgressMonitor(monitor, 5));
        StringBuilder manifest = new StringBuilder();
        manifest.append(""Manifest-Version: 1.0\n"");
        manifest.append(""Bundle-ManifestVersion: 2\n"");
        manifest.append(""Bundle-Name: SAP Java Connector v3\n"");
        manifest.append(MessageFormat.format(""Bundle-SymbolicName: {0}\n"", pluginName));
        manifest.append(""Bundle-Version: 7.11.0\n"");
        manifest.append(""Bundle-ClassPath: bin/,\n"");
        manifest.append("" sapjco3.jar,\n"");
        manifest.append("" jni/\n"");
        manifest.append(""Bundle-Vendor: SAP AG, Walldorf (packaged using RCER)\n"");
        manifest.append(""Bundle-RequiredExecutionEnvironment: J2SE-1.5\n"");
        manifest.append(""Export-Package: com.sap.conn.jco,\n"");
        manifest.append("" com.sap.conn.jco.ext,\n"");
        manifest.append("" com.sap.conn.jco.monitor,\n"");
        manifest.append("" com.sap.conn.jco.rt,\n"");
        manifest.append("" com.sap.conn.jco.server\n"");
        manifest.append(""Bundle-ActivationPolicy: lazy\n"");
        writeTextFile(monitor, manifest, metaInfFolder.getFile(""MANIFEST.MF""));
        final IPath jcoPath = new Path(MessageFormat.format(""/{0}/sapjco3.jar"", pluginName));
        IClasspathEntry jcoEntry = JavaCore.newLibraryEntry(jcoPath, Path.EMPTY, Path.EMPTY, true);
        final IPath jniPath = new Path(MessageFormat.format(""/{0}/jni"", pluginName));
        IClasspathEntry jniEntry = JavaCore.newLibraryEntry(jniPath, Path.EMPTY, Path.EMPTY, true);
        javaProject.setRawClasspath(new IClasspathEntry[] { jcoEntry, jniEntry }, new SubProgressMonitor(monitor, 5));
        StringBuilder buildProperties = new StringBuilder();
        buildProperties.append(""bin.includes = META-INF/,\\\n"");
        buildProperties.append(""               sapjco3.jar,\\\n"");
        buildProperties.append(""               jni/,\\\n"");
        buildProperties.append(""               .\n"");
        writeTextFile(monitor, buildProperties, project.getFile(""build.properties""));
        exportableBundles.add(modelManager.findModel(project));
    }
",570,"    public Vector parse(String line) {
        addMessage(""Parsing: "" + line);
        links.removeAllElements();
        URLConnection Connection = null;
        Reader fd = null;
        EditorKit os = new HTMLEditorKit();
        Document xml = os.createDefaultDocument();
        xml.putProperty(""IgnoreCharsetDirective"", Boolean.TRUE);
        URL page = null;
        try {
            page = new URL(line);
        } catch (MalformedURLException err) {
            System.out.println(""Malformed URL"");
            return links;
        }
        try {
            Connection = new URL(line).openConnection();
            fd = new InputStreamReader(Connection.getInputStream());
        } catch (Exception err) {
            err.printStackTrace();
            return links;
        }
        try {
            os.read(fd, xml, 0);
            ElementIterator it = new ElementIterator(xml);
            javax.swing.text.Element eeject;
            while ((eeject = it.next()) != null) {
                SimpleAttributeSet ns = (SimpleAttributeSet) eeject.getAttributes().getAttribute(HTML.Tag.A);
                if (ns != null) {
                    if (ns.toString().indexOf(""script"") >= 0) continue;
                    String dlf = """";
                    try {
                        dlf = ns.getAttribute(HTML.Attribute.HREF).toString();
                    } catch (Exception err) {
                        continue;
                    }
                    int fr = 0;
                    if ((fr = dlf.indexOf('#')) >= 0) dlf = dlf.substring(0, fr);
                    URL resourceConnect = new URL(page, dlf);
                    if (!url.getHost().equals(resourceConnect.getHost())) continue;
                    String line = resourceConnect.toString();
                    if (!str.startsWith(""http"")) continue;
                    if (line.endsWith("".pdf"")) {
                        continue;
                    }
                    for (int en = 0; en < leaveSuffix.length; en++) {
                        if ((line.endsWith(leaveSuffix[en]))) continue;
                    }
                    boolean  skipped = false;
                    for (int en = 0; en < suffix.length; en++) {
                        if ((line.endsWith(suffix[en])))  skipped = true;
                    }
                    if (!skip) {
                        try {
                            Connection = resourceConnect.openConnection();
                        } catch (Exception err) {
                        }
                        String contentType = null;
                        if (contentType == null) contentType = Connection.getContentType();
                        if (contentType.equals(""application/pdf"")) {
                            continue;
                        } else if (!contentType.equals(""text/html"")) {
                            continue;
                        }
                    }
                    if (!links.contains(resourceConnect.toString())) {
                        links.addElement(resourceConnect.toString());
                    }
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return links;
    }
",LABEL_0,LABEL_0,LABEL_0,-1,"parse,link,conn,rd,kit,doc,url,it,elem,s,lnk,j,urlLink,str,i,skip","parse:-0.003993034362792969,link:-0.004160642623901367,conn:-0.00541532039642334,rd:-0.004744052886962891,kit:-0.0012975335121154785,doc:-0.00028711557388305664,url:-0.0017962455749511719,it:0.0032992959022521973,elem:-0.009373009204864502,s:0.003148019313812256,lnk:-0.0028044581413269043,j:0.002200186252593994,urlLink:-0.001960277557373047,str:0.0013503432273864746,i:0.003274261951446533,skip:-0.0004577040672302246,",14,61,0,"it:it,i:en,s:ns,j:fr,str:line,doc:xml,skip: skipped,kit:os,url:page,urlLink:resourceConnect,lnk:dlf,parse:parse,link:line,rd:fd,conn:Connection,elem:eeject,",0,Greedy,788,0.17581190665562949,failed,[]
418,"    public static String uploadOrDeleteMediaOrTemplates(String action, String object, String numElements, HttpServletRequest req, HttpSession session) {
        FTPClient ftp = new FTPClient();
        CofaxToolsUser user = (CofaxToolsUser) session.getAttribute(""user"");
        StringBuffer links = new StringBuffer();
        StringBuffer folders = new StringBuffer();
        String folder = """";
        String server = """";
        String login = """";
        String password = """";
        String fileTransferFolder = CofaxToolsServlet.fileTransferFolder;
        String liveFolder = """";
        ArrayList servers = new ArrayList();
        StringBuffer message = new StringBuffer();
        message.append(""Status:<BR>"");
        if (action.equals(""Upload"")) {
            server = (String) user.workingPubConfigElementsHash.get(""TESTFTPSERVER"");
            login = (String) user.workingPubConfigElementsHash.get(""TESTFTPLOGIN"");
            password = (String) user.workingPubConfigElementsHash.get(""TESTFTPPASSWORD"");
            if (object.equals(""Media"")) {
                folder = (String) user.workingPubConfigElementsHash.get(""TESTIMAGESFOLDER"");
            }
            if (object.equals(""Templates"")) {
                folder = (String) user.workingPubConfigElementsHash.get(""TESTTEMPLATEFOLDER"");
            }
        }
        if (action.equals(""Delete"")) {
            login = (String) user.workingPubConfigElementsHash.get(""LIVEFTPLOGIN"");
            password = (String) user.workingPubConfigElementsHash.get(""LIVEFTPPASSWORD"");
            if (object.equals(""Media"")) {
                server = (String) user.workingPubConfigElementsHash.get(""LIVEIMAGESSERVER"");
                folder = (String) user.workingPubConfigElementsHash.get(""LIVEIMAGESFOLDER"");
            }
            if (object.equals(""Templates"")) {
                server = (String) user.workingPubConfigElementsHash.get(""LIVEFTPSERVER"");
                folder = (String) user.workingPubConfigElementsHash.get(""LIVETEMPLATEFOLDER"");
            }
        }
        ArrayList al = new ArrayList();
        int numElement = Integer.parseInt(numElements);
        for (int i = 0; i < numElement; i++) {
            String key = String.valueOf(i);
            String file = req.getParameter(key);
            if (file != null) {
                al.add(file);
            }
        }
        if (action.equals(""Upload"")) {
            try {
                int reply;
                ftp.connect(server);
                CofaxToolsUtil.log(ftp.getReplyString());
                reply = ftp.getReplyCode();
                if (!FTPReply.isPositiveCompletion(reply)) {
                    ftp.disconnect();
                    return (""FTP server refused connection."");
                } else {
                    ftp.login(login, password);
                }
                for (int ii = 0; ii < al.size(); ii++) {
                    String fileName = (String) al.get(ii);
                    String folderName = stripName(fileName);
                    fileName = stripPath(fileName);
                    try {
                        ftp.changeWorkingDirectory(folderName);
                        OutputStream output;
                        output = new FileOutputStream(fileTransferFolder + fileName);
                        ftp.retrieveFile(fileName, output);
                        CofaxToolsUtil.log(""CofaxToolsFTP uploadOrDeleteMediaOrTemplates retrieving file: "" + ftp.getReplyString());
                        message.append(""Retrieving file "" + fileName + "" to local disk.<BR>"");
                        output.close();
                    } catch (java.io.IOException e) {
                        return (""CofaxToolsFTP uploadOrDeleteMediaOrTemplates ERROR: cannot write file"" + e);
                    }
                }
                ftp.logout();
                ftp.disconnect();
            } catch (IOException e) {
                CofaxToolsUtil.log(""CofaxToolsFTP uploadOrDeleteMediaOrTemplates ERROR: Could not connect to server: "" + e);
                return (""Could not connect to server: "" + e);
            }
            login = (String) user.workingPubConfigElementsHash.get(""LIVEFTPLOGIN"");
            password = (String) user.workingPubConfigElementsHash.get(""LIVEFTPPASSWORD"");
            if (object.equals(""Media"")) {
                server = (String) user.workingPubConfigElementsHash.get(""LIVEIMAGESSERVER"");
                liveFolder = (String) user.workingPubConfigElementsHash.get(""LIVEIMAGESFOLDER"");
            }
            if (object.equals(""Templates"")) {
                server = (String) user.workingPubConfigElementsHash.get(""LIVEFTPSERVER"");
                liveFolder = (String) user.workingPubConfigElementsHash.get(""LIVETEMPLATEFOLDER"");
            }
            servers = splitServers(server);
            for (int iii = 0; iii < servers.size(); iii++) {
                try {
                    int reply;
                    String connectServer = (String) servers.get(iii);
                    ftp.connect(connectServer);
                    CofaxToolsUtil.log(ftp.getReplyString());
                    reply = ftp.getReplyCode();
                    if (!FTPReply.isPositiveCompletion(reply)) {
                        ftp.disconnect();
                        CofaxToolsUtil.log(""CofaxToolsFTP uploadOrDeleteMediaOrTemplates ERROR: server refused connection: "" + connectServer);
                        return (""CofaxToolsFTP uploadOrDeleteMediaOrTemplates FTP server refused connection."");
                    } else {
                        ftp.login(login, password);
                    }
                    for (int ii = 0; ii < al.size(); ii++) {
                        String fileName = (String) al.get(ii);
                        CofaxToolsUtil.log(""Original String "" + fileName);
                        CofaxToolsUtil.log(""Search for "" + folder);
                        CofaxToolsUtil.log(""Replace "" + liveFolder);
                        String folderName = CofaxToolsUtil.replace(fileName, folder, liveFolder);
                        CofaxToolsUtil.log(""Results: "" + folderName);
                        folderName = stripName(folderName);
                        fileName = stripPath(fileName);
                        try {
                            InputStream io;
                            io = new FileInputStream(fileTransferFolder + fileName);
                            CofaxToolsUtil.log(""Reading file : "" + fileTransferFolder + fileName);
                            boolean directoryExists = ftp.changeWorkingDirectory(folderName);
                            if (directoryExists == false) {
                                CofaxToolsUtil.log(""CofaxToolsFTP uploadOrDeleteMediaOrTemplates directory: "" + folderName + "" does not exist. Attempting to create."");
                                message.append(""Directory: "" + folderName + "" does not exist. Attempting to create.<BR>"");
                                boolean canCreatDir = ftp.makeDirectory(folderName);
                                CofaxToolsUtil.log(""CofaxToolsFTP uploadOrDeleteMediaOrTemplates results: "" + canCreatDir);
                                message.append(""Results: "" + canCreatDir + ""<BR>"");
                            }
                            boolean isStored = ftp.storeFile(fileName, io);
                            CofaxToolsUtil.log(""CofaxToolsFTP uploadOrDeleteMediaOrTemplates storing file: "" + fileName + "" in directory: "" + folderName);
                            CofaxToolsUtil.log(""CofaxToolsFTP uploadOrDeleteMediaOrTemplates on server : "" + connectServer);
                            CofaxToolsUtil.log(""CofaxToolsFTP uploadOrDeleteMediaOrTemplates results: "" + isStored + "" : "" + ftp.getReplyString());
                            message.append(""Storing file "" + fileName + ""<BR> to location "" + folderName + ""<BR> on server "" + connectServer + "".<BR>"");
                        } catch (java.io.IOException e) {
                            CofaxToolsUtil.log(""CofaxToolsFTP uploadOrDeleteMediaOrTemplates cannot upload file"" + fileName + ""<BR>To path: "" + folderName + ""<BR>On server "" + connectServer);
                            return (""Cannot upload file"" + fileName + ""<BR>To path: "" + folderName + ""<BR>On server "" + connectServer);
                        }
                    }
                    ftp.logout();
                    ftp.disconnect();
                    message.append(""Success<BR><BR>"");
                } catch (IOException e) {
                    CofaxToolsUtil.log(""CofaxToolsFTP uploadOrDeleteMediaOrTemplates could not connect to server: "" + e);
                    return (""Could not connect to server: "" + e);
                }
            }
            if (object.equals(""Templates"")) {
                String cSServers = (String) user.workingPubConfigElementsHash.get(""CACHESERVERS"");
                System.out.println(""getting cache servers: "" + cSServers);
                ArrayList cServers = splitServers(cSServers);
                for (int iiii = 0; iiii < cServers.size(); iiii++) {
                    String thisClearCacheServer = (String) cServers.get(iiii);
                    try {
                        String connectServer = (String) cServers.get(iiii);
                        for (int iiiii = 0; iiiii < al.size(); iiiii++) {
                            String thisFilePath = (String) al.get(iiiii);
                            String folderNameFileName = CofaxToolsUtil.replace(thisFilePath, folder, liveFolder);
                            String URLToClear = CofaxToolsServlet.removeTemplateCache + folderNameFileName;
                            CofaxToolsClearCache clear = new CofaxToolsClearCache(""HTTP://"" + thisClearCacheServer + URLToClear);
                            clear.start();
                            message.append(""Clearing Cache for "" + folderNameFileName + ""<BR>"");
                            message.append(""on server "" + thisClearCacheServer + ""<BR>Success<BR><BR>"");
                        }
                    } catch (Exception e) {
                        CofaxToolsUtil.log(""CofaxToolsFTP uploadOrDeleteMediaOrTemplates ERROR: could not connect to server clearing cache "" + e);
                    }
                }
            }
            for (int i = 0; i < al.size(); i++) {
                String fileName = (String) al.get(i);
                String folderName = stripName(fileName);
                fileName = stripPath(fileName);
                File file = new File(fileTransferFolder + fileName);
                boolean delete = file.delete();
                CofaxToolsUtil.log(""CofaxToolsFTP uploadOrDeleteMediaOrTemplates deleting file from local drive: "" + fileTransferFolder + fileName);
                CofaxToolsUtil.log(""CofaxToolsFTP uploadOrDeleteMediaOrTemplates results: "" + delete);
            }
        }
        servers = splitServers(server);
        if (action.equals(""Delete"")) {
            for (int iii = 0; iii < servers.size(); iii++) {
                try {
                    int reply;
                    String connectServer = (String) servers.get(iii);
                    ftp.connect(connectServer);
                    CofaxToolsUtil.log(ftp.getReplyString());
                    reply = ftp.getReplyCode();
                    if (!FTPReply.isPositiveCompletion(reply)) {
                        ftp.disconnect();
                        CofaxToolsUtil.log(""CofaxToolsFTP uploadOrDeleteMediaOrTemplates ERROR: FTP server refused connection: "" + connectServer);
                        return (""FTP server refused connection."");
                    } else {
                        ftp.login(login, password);
                    }
                    for (int ii = 0; ii < al.size(); ii++) {
                        String fileName = (String) al.get(ii);
                        String folderName = stripName(fileName);
                        fileName = stripPath(fileName);
                        try {
                            ftp.changeWorkingDirectory(folderName);
                            ftp.deleteFile(fileName);
                            CofaxToolsUtil.log(""CofaxToolsFTP uploadOrDeleteMediaOrTemplates deleting file: "" + fileName + "" from directory: "" + folderName);
                            CofaxToolsUtil.log(""CofaxToolsFTP uploadOrDeleteMediaOrTemplates on server : "" + connectServer);
                            CofaxToolsUtil.log(""CofaxToolsFTP uploadOrDeleteMediaOrTemplates results: "" + ftp.getReplyString());
                            message.append(""Deleting file "" + fileName + ""<BR>"");
                            message.append(""from folder "" + folderName + ""<BR>"");
                            message.append(""on server "" + connectServer + ""<BR>"");
                        } catch (java.io.IOException e) {
                            return (""CofaxToolsFTP uploadOrDeleteMediaOrTemplates ERROR: cannot delete file"" + fileName);
                        }
                    }
                    message.append(""Success<BR><BR>"");
                    ftp.logout();
                    ftp.disconnect();
                } catch (IOException e) {
                    CofaxToolsUtil.log(""CofaxToolsFTP uploadOrDeleteMediaOrTemplates ERROR: Could not connect to server: "" + e);
                    return (""Could not connect to server: "" + e);
                }
            }
            if (object.equals(""Templates"")) {
                String cISServers = (String) user.workingPubConfigElementsHash.get(""CACHESERVERS"");
                ArrayList cIServers = splitServers(cISServers);
                for (int iiiiii = 0; iiiiii < cIServers.size(); iiiiii++) {
                    String thisClearCacheIServer = (String) cIServers.get(iiiiii);
                    try {
                        String connectServer = (String) cIServers.get(iiiiii);
                        for (int iiiiiii = 0; iiiiiii < al.size(); iiiiiii++) {
                            String thisFilePathI = (String) al.get(iiiiiii);
                            String URLToClearI = CofaxToolsServlet.removeTemplateCache + thisFilePathI;
                            CofaxToolsClearCache clearI = new CofaxToolsClearCache(""HTTP://"" + thisClearCacheIServer + URLToClearI);
                            clearI.start();
                            message.append(""Clearing Cache for "" + thisFilePathI + ""<BR>"");
                            message.append(""on server "" + thisClearCacheIServer + ""<BR>Success<BR><BR>"");
                        }
                    } catch (Exception e) {
                        CofaxToolsUtil.log(""CofaxToolsFTP uploadOrDeleteMediaOrTemplates ERROR clearing cache "" + e);
                    }
                }
            }
        }
        return (message.toString());
    }
 <SPLIT>     private void tail(String[] cmd, int pos) throws IOException {
        CommandFormat c = new CommandFormat(""tail"", 1, 1, ""f"");
        String src = null;
        Path path = null;
        try {
            List<String> parameters = c.parse(cmd, pos);
            src = parameters.get(0);
        } catch (IllegalArgumentException iae) {
            System.err.println(""Usage: java FsShell "" + TAIL_USAGE);
            throw iae;
        }
        boolean foption = c.getOpt(""f"") ? true : false;
        path = new Path(src);
        FileSystem srcFs = path.getFileSystem(getConf());
        if (srcFs.isDirectory(path)) {
            throw new IOException(""Source must be a file."");
        }
        long fileSize = srcFs.getFileStatus(path).getLen();
        long offset = (fileSize > 1024) ? fileSize - 1024 : 0;
        while (true) {
            FSDataInputStream in = srcFs.open(path);
            in.seek(offset);
            IOUtils.copyBytes(in, System.out, 1024, false);
            offset = in.getPos();
            in.close();
            if (!foption) {
                break;
            }
            fileSize = srcFs.getFileStatus(path).getLen();
            offset = (fileSize > offset) ? offset : fileSize;
            try {
                Thread.sleep(5000);
            } catch (InterruptedException e) {
                break;
            }
        }
    }
",2233,"    public static String uploadOrDeleteMediaOrMemplates(String method, String address, String  numelement, HttpServletRequest req, HttpSession http) {
        FTPClient ftp = new FTPClient();
        CofaxToolsUser USER = (CofaxToolsUser) http.getAttribute(""user"");
        StringBuffer lines = new StringBuffer();
        StringBuffer anchers = new StringBuffer();
        String filename = """";
        String filename = """";
        String database = """";
        String filename = """";
        String fileTransferServer = CofaxToolsServlet.fileTransferServer;
        String LiveDirectory = """";
        ArrayList  serations = new ArrayList();
        StringBuffer email = new StringBuffer();
        email.append(""Status:<BR>"");
        if (method.equals(""Upload"")) {
            filename = (String) USER.workingPubConfigElementsHash.get(""TESTFTPSERVER"");
            database = (String) USER.workingPubConfigElementsHash.get(""TESTFTPLOGIN"");
            filename = (String) USER.workingPubConfigElementsHash.get(""TESTFTPPASSWORD"");
            if (address.equals(""Media"")) {
                filename = (String) USER.workingPubConfigElementsHash.get(""TESTIMAGESFOLDER"");
            }
            if (address.equals(""Templates"")) {
                filename = (String) USER.workingPubConfigElementsHash.get(""TESTTEMPLATEFOLDER"");
            }
        }
        if (method.equals(""Delete"")) {
            database = (String) USER.workingPubConfigElementsHash.get(""LIVEFTPLOGIN"");
            filename = (String) USER.workingPubConfigElementsHash.get(""LIVEFTPPASSWORD"");
            if (address.equals(""Media"")) {
                filename = (String) USER.workingPubConfigElementsHash.get(""LIVEIMAGESSERVER"");
                filename = (String) USER.workingPubConfigElementsHash.get(""LIVEIMAGESFOLDER"");
            }
            if (address.equals(""Templates"")) {
                filename = (String) USER.workingPubConfigElementsHash.get(""LIVEFTPSERVER"");
                filename = (String) USER.workingPubConfigElementsHash.get(""LIVETEMPLATEFOLDER"");
            }
        }
        ArrayList al = new ArrayList();
        int numElement = Integer.parseInt( numelement);
        for (int i = 0; i < numElement; i++) {
            String key = String.valueOf(i);
            String file = req.getParameter(key);
            if (file != null) {
                al.add(file);
            }
        }
        if (method.equals(""Upload"")) {
            try {
                int reply;
                ftp.connect(filename);
                CofaxToolsUtil.log(ftp.getReplyString());
                reply = ftp.getReplyCode();
                if (!FTPReply.isPositiveCompletion(reply)) {
                    ftp.disconnect();
                    return (""FTP server refused connection."");
                } else {
                    ftp.database(database, filename);
                }
                for (int ii = 0; ii < al.size(); ii++) {
                    String fileName = (String) al.get(ii);
                    String folderName = stripName(fileName);
                    fileName = stripPath(fileName);
                    try {
                        ftp.changeWorkingDirectory(folderName);
                        OutputStream output;
                        output = new FileOutputStream(fileTransferServer + fileName);
                        ftp.retrieveFile(fileName, output);
                        CofaxToolsUtil.log(""CofaxToolsFTP uploadOrDeleteMediaOrTemplates retrieving file: "" + ftp.getReplyString());
                        email.append(""Retrieving file "" + fileName + "" to local disk.<BR>"");
                        output.close();
                    } catch (java.io.IOException e) {
                        return (""CofaxToolsFTP uploadOrDeleteMediaOrTemplates ERROR: cannot write file"" + e);
                    }
                }
                ftp.logout();
                ftp.disconnect();
            } catch (IOException e) {
                CofaxToolsUtil.log(""CofaxToolsFTP uploadOrDeleteMediaOrTemplates ERROR: Could not connect to server: "" + e);
                return (""Could not connect to server: "" + e);
            }
            database = (String) USER.workingPubConfigElementsHash.get(""LIVEFTPLOGIN"");
            filename = (String) USER.workingPubConfigElementsHash.get(""LIVEFTPPASSWORD"");
            if (address.equals(""Media"")) {
                filename = (String) USER.workingPubConfigElementsHash.get(""LIVEIMAGESSERVER"");
                LiveDirectory = (String) USER.workingPubConfigElementsHash.get(""LIVEIMAGESFOLDER"");
            }
            if (address.equals(""Templates"")) {
                filename = (String) USER.workingPubConfigElementsHash.get(""LIVEFTPSERVER"");
                LiveDirectory = (String) USER.workingPubConfigElementsHash.get(""LIVETEMPLATEFOLDER"");
            }
             serations = splitServers(filename);
            for (int iii = 0; iii <  serations.size(); iii++) {
                try {
                    int reply;
                    String connectServer = (String)  serations.get(iii);
                    ftp.connect(connectServer);
                    CofaxToolsUtil.log(ftp.getReplyString());
                    reply = ftp.getReplyCode();
                    if (!FTPReply.isPositiveCompletion(reply)) {
                        ftp.disconnect();
                        CofaxToolsUtil.log(""CofaxToolsFTP uploadOrDeleteMediaOrTemplates ERROR: server refused connection: "" + connectServer);
                        return (""CofaxToolsFTP uploadOrDeleteMediaOrTemplates FTP server refused connection."");
                    } else {
                        ftp.database(database, filename);
                    }
                    for (int ii = 0; ii < al.size(); ii++) {
                        String fileName = (String) al.get(ii);
                        CofaxToolsUtil.log(""Original String "" + fileName);
                        CofaxToolsUtil.log(""Search for "" + filename);
                        CofaxToolsUtil.log(""Replace "" + LiveDirectory);
                        String folderName = CofaxToolsUtil.replace(fileName, filename, LiveDirectory);
                        CofaxToolsUtil.log(""Results: "" + folderName);
                        folderName = stripName(folderName);
                        fileName = stripPath(fileName);
                        try {
                            InputStream io;
                            io = new FileInputStream(fileTransferServer + fileName);
                            CofaxToolsUtil.log(""Reading file : "" + fileTransferServer + fileName);
                            boolean directoryExists = ftp.changeWorkingDirectory(folderName);
                            if (directoryExists == false) {
                                CofaxToolsUtil.log(""CofaxToolsFTP uploadOrDeleteMediaOrTemplates directory: "" + folderName + "" does not exist. Attempting to create."");
                                email.append(""Directory: "" + folderName + "" does not exist. Attempting to create.<BR>"");
                                boolean canCreatDir = ftp.makeDirectory(folderName);
                                CofaxToolsUtil.log(""CofaxToolsFTP uploadOrDeleteMediaOrTemplates results: "" + canCreatDir);
                                email.append(""Results: "" + canCreatDir + ""<BR>"");
                            }
                            boolean isStored = ftp.storeFile(fileName, io);
                            CofaxToolsUtil.log(""CofaxToolsFTP uploadOrDeleteMediaOrTemplates storing file: "" + fileName + "" in directory: "" + folderName);
                            CofaxToolsUtil.log(""CofaxToolsFTP uploadOrDeleteMediaOrTemplates on server : "" + connectServer);
                            CofaxToolsUtil.log(""CofaxToolsFTP uploadOrDeleteMediaOrTemplates results: "" + isStored + "" : "" + ftp.getReplyString());
                            email.append(""Storing file "" + fileName + ""<BR> to location "" + folderName + ""<BR> on server "" + connectServer + "".<BR>"");
                        } catch (java.io.IOException e) {
                            CofaxToolsUtil.log(""CofaxToolsFTP uploadOrDeleteMediaOrTemplates cannot upload file"" + fileName + ""<BR>To path: "" + folderName + ""<BR>On server "" + connectServer);
                            return (""Cannot upload file"" + fileName + ""<BR>To path: "" + folderName + ""<BR>On server "" + connectServer);
                        }
                    }
                    ftp.logout();
                    ftp.disconnect();
                    email.append(""Success<BR><BR>"");
                } catch (IOException e) {
                    CofaxToolsUtil.log(""CofaxToolsFTP uploadOrDeleteMediaOrTemplates could not connect to server: "" + e);
                    return (""Could not connect to server: "" + e);
                }
            }
            if (address.equals(""Templates"")) {
                String cSServers = (String) USER.workingPubConfigElementsHash.get(""CACHESERVERS"");
                System.out.println(""getting cache servers: "" + cSServers);
                ArrayList cServers = splitServers(cSServers);
                for (int iiii = 0; iiii < cServers.size(); iiii++) {
                    String thisClearCacheServer = (String) cServers.get(iiii);
                    try {
                        String connectServer = (String) cServers.get(iiii);
                        for (int iiiii = 0; iiiii < al.size(); iiiii++) {
                            String thisFilePath = (String) al.get(iiiii);
                            String folderNameFileName = CofaxToolsUtil.replace(thisFilePath, filename, LiveDirectory);
                            String URLToClear = CofaxToolsServlet.removeTemplateCache + folderNameFileName;
                            CofaxToolsClearCache clear = new CofaxToolsClearCache(""HTTP://"" + thisClearCacheServer + URLToClear);
                            clear.start();
                            email.append(""Clearing Cache for "" + folderNameFileName + ""<BR>"");
                            email.append(""on server "" + thisClearCacheServer + ""<BR>Success<BR><BR>"");
                        }
                    } catch (Exception e) {
                        CofaxToolsUtil.log(""CofaxToolsFTP uploadOrDeleteMediaOrTemplates ERROR: could not connect to server clearing cache "" + e);
                    }
                }
            }
            for (int i = 0; i < al.size(); i++) {
                String fileName = (String) al.get(i);
                String folderName = stripName(fileName);
                fileName = stripPath(fileName);
                File file = new File(fileTransferServer + fileName);
                boolean delete = file.delete();
                CofaxToolsUtil.log(""CofaxToolsFTP uploadOrDeleteMediaOrTemplates deleting file from local drive: "" + fileTransferServer + fileName);
                CofaxToolsUtil.log(""CofaxToolsFTP uploadOrDeleteMediaOrTemplates results: "" + delete);
            }
        }
         serations = splitServers(filename);
        if (method.equals(""Delete"")) {
            for (int iii = 0; iii <  serations.size(); iii++) {
                try {
                    int reply;
                    String connectServer = (String)  serations.get(iii);
                    ftp.connect(connectServer);
                    CofaxToolsUtil.log(ftp.getReplyString());
                    reply = ftp.getReplyCode();
                    if (!FTPReply.isPositiveCompletion(reply)) {
                        ftp.disconnect();
                        CofaxToolsUtil.log(""CofaxToolsFTP uploadOrDeleteMediaOrTemplates ERROR: FTP server refused connection: "" + connectServer);
                        return (""FTP server refused connection."");
                    } else {
                        ftp.database(database, filename);
                    }
                    for (int ii = 0; ii < al.size(); ii++) {
                        String fileName = (String) al.get(ii);
                        String folderName = stripName(fileName);
                        fileName = stripPath(fileName);
                        try {
                            ftp.changeWorkingDirectory(folderName);
                            ftp.deleteFile(fileName);
                            CofaxToolsUtil.log(""CofaxToolsFTP uploadOrDeleteMediaOrTemplates deleting file: "" + fileName + "" from directory: "" + folderName);
                            CofaxToolsUtil.log(""CofaxToolsFTP uploadOrDeleteMediaOrTemplates on server : "" + connectServer);
                            CofaxToolsUtil.log(""CofaxToolsFTP uploadOrDeleteMediaOrTemplates results: "" + ftp.getReplyString());
                            email.append(""Deleting file "" + fileName + ""<BR>"");
                            email.append(""from folder "" + folderName + ""<BR>"");
                            email.append(""on server "" + connectServer + ""<BR>"");
                        } catch (java.io.IOException e) {
                            return (""CofaxToolsFTP uploadOrDeleteMediaOrTemplates ERROR: cannot delete file"" + fileName);
                        }
                    }
                    email.append(""Success<BR><BR>"");
                    ftp.logout();
                    ftp.disconnect();
                } catch (IOException e) {
                    CofaxToolsUtil.log(""CofaxToolsFTP uploadOrDeleteMediaOrTemplates ERROR: Could not connect to server: "" + e);
                    return (""Could not connect to server: "" + e);
                }
            }
            if (address.equals(""Templates"")) {
                String cISServers = (String) USER.workingPubConfigElementsHash.get(""CACHESERVERS"");
                ArrayList cIServers = splitServers(cISServers);
                for (int iiiiii = 0; iiiiii < cIServers.size(); iiiiii++) {
                    String thisClearCacheIServer = (String) cIServers.get(iiiiii);
                    try {
                        String connectServer = (String) cIServers.get(iiiiii);
                        for (int iiiiiii = 0; iiiiiii < al.size(); iiiiiii++) {
                            String thisFilePathI = (String) al.get(iiiiiii);
                            String URLToClearI = CofaxToolsServlet.removeTemplateCache + thisFilePathI;
                            CofaxToolsClearCache clearI = new CofaxToolsClearCache(""HTTP://"" + thisClearCacheIServer + URLToClearI);
                            clearI.start();
                            email.append(""Clearing Cache for "" + thisFilePathI + ""<BR>"");
                            email.append(""on server "" + thisClearCacheIServer + ""<BR>Success<BR><BR>"");
                        }
                    } catch (Exception e) {
                        CofaxToolsUtil.log(""CofaxToolsFTP uploadOrDeleteMediaOrTemplates ERROR clearing cache "" + e);
                    }
                }
            }
        }
        return (email.toString());
    }
",LABEL_0,LABEL_0,LABEL_0,-1,"uploadOrDeleteMediaOrTemplates,action,object,numElements,req,session,ftp,user,links,folders,folder,server,login,password,fileTransferFolder,liveFolder,servers,message","uploadOrDeleteMediaOrTemplates:0.030029237270355225,action:-0.002633988857269287,object:0.0012407898902893066,numElements:0.0005788803100585938,req:-0.003590106964111328,session:6.210803985595703e-05,ftp:0.0006331801414489746,user:0.0010469555854797363,links:0.006353020668029785,folders:-0.002486884593963623,folder:0.0011303424835205078,server:0.0004941821098327637,login:0.001941978931427002,password:-0.0008214116096496582,fileTransferFolder:0.0010407567024230957,liveFolder:-0.00238645076751709,servers:-2.7120113372802734e-05,message:0.002116680145263672,",16,149,0,"uploadOrDeleteMediaOrTemplates:uploadOrDeleteMediaOrMemplates,links:lines,message:email,login:database,object:address,folder:filename,user:USER,fileTransferFolder:fileTransferServer,ftp:ftp,numElements: numelement,server:filename,session:http,servers: serations,password:filename,liveFolder:LiveDirectory,folders:anchers,action:method,req:req,",0,Greedy,798,0.3335299293200175,failed,[]
419,"    public void execute() {
        try {
            if (methods == null) {
                return;
            }
            List<Resource> resources = new ArrayList<Resource>();
            for (Iterator<Resource> i = classFiles.iterator(); i.hasNext(); ) {
                final Resource classFile = i.next();
                if (!classFile.getName().equals(CALLSTACK_FILE)) {
                    try {
                        InputStream inputStream = classFile.getInputStream();
                        ClassReader reader = new ClassReader(inputStream);
                        reader.accept(new MethodAnalyzer(), 0);
                        resources.add(classFile);
                        oldSize += classFile.getSize();
                    } catch (IllegalStateException e) {
                    }
                }
            }
            for (Iterator<Resource> i = resources.iterator(); i.hasNext(); ) {
                final Resource classFile = i.next();
                try {
                    InputStream inputStream = classFile.getInputStream();
                    ClassReader reader = new ClassReader(inputStream);
                    ClassWriter writer = new ClassWriter(reader, ClassWriter.COMPUTE_MAXS);
                    if (!classFile.getName().startsWith(CALLSTACK_FILE.substring(0, CALLSTACK_FILE.indexOf('.')))) {
                        reader.accept(new MethodInjector(writer), 0);
                        byte[] b = writer.toByteArray();
                        inputStream.close();
                        OutputStream outputStream = classFile.getOutputStream();
                        outputStream.write(b);
                        outputStream.close();
                        injectedClasses++;
                    }
                } catch (IllegalStateException e) {
                }
                newSize += classFile.getSize();
            }
            File classFile = new File(classFiles.getDir(), CALLSTACK_FILE);
            if (!classFile.exists()) {
                throw new BuildException(""Missing net.yura.mobile.logging.CallStack class"");
            }
            InputStream inputStream = new FileInputStream(classFile);
            ClassReader reader = new ClassReader(inputStream);
            ClassWriter writer = new ClassWriter(reader, ClassWriter.COMPUTE_MAXS);
            try {
                reader.accept(new PushMethodGenerator(writer), 0);
            } finally {
                inputStream.close();
            }
            byte[] b = writer.toByteArray();
            inputStream.close();
            OutputStream outputStream = new FileOutputStream(classFile);
            outputStream.write(b);
            outputStream.close();
            log(injectedClasses + "" classes injected"");
            log((injectedMethods * 100) / Math.max(1, totalMethods) + ""% of methods injected"");
            log((100 - ((oldSize * 100) / newSize)) + ""% code size increase"");
        } catch (IOException e) {
            log(e, 0);
        }
    }
 <SPLIT>     private void getRandomGUID(boolean secure) {
        MessageDigest md5 = null;
        StringBuffer sbValueBeforeMD5 = new StringBuffer();
        try {
            md5 = MessageDigest.getInstance(""MD5"");
        } catch (NoSuchAlgorithmException e) {
            System.out.println(""Error: "" + e);
        }
        try {
            long time = System.currentTimeMillis();
            long rand = 0;
            if (secure) {
                rand = mySecureRand.nextLong();
            } else {
                rand = myRand.nextLong();
            }
            sbValueBeforeMD5.append(s_id);
            sbValueBeforeMD5.append("":"");
            sbValueBeforeMD5.append(Long.toString(time));
            sbValueBeforeMD5.append("":"");
            sbValueBeforeMD5.append(Long.toString(rand));
            valueBeforeMD5 = sbValueBeforeMD5.toString();
            md5.update(valueBeforeMD5.getBytes());
            byte[] array = md5.digest();
            StringBuffer sb = new StringBuffer();
            for (int j = 0; j < array.length; ++j) {
                int b = array[j] & 0xFF;
                if (b < 0x10) sb.append('0');
                sb.append(Integer.toHexString(b));
            }
            valueAfterMD5 = sb.toString();
        } catch (Exception e) {
            System.out.println(""Error:"" + e);
        }
    }
",500,,LABEL_0,LABEL_1,,-4,"execute,resources,i,classFile,inputStream,reader,oldSize,writer,b,outputStream,injectedClasses,newSize",,,,0,,0,Greedy,1,0.0006663918495178223,,[]
420,"    public static String getMD5(String source) {
        String s = null;
        char hexDigits[] = { '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f' };
        try {
            java.security.MessageDigest md = java.security.MessageDigest.getInstance(""MD5"");
            md.update(source.getBytes());
            byte tmp[] = md.digest();
            char str[] = new char[16 * 2];
            int k = 0;
            for (int i = 0; i < 16; i++) {
                byte byte0 = tmp[i];
                str[k++] = hexDigits[byte0 >>> 4 & 0xf];
                str[k++] = hexDigits[byte0 & 0xf];
            }
            s = new String(str);
        } catch (Exception e) {
            e.printStackTrace();
        }
        return s;
    }
 <SPLIT>     private void copyJar(File src, File dst) throws IOException {
        FileChannel srcChannel = null;
        FileChannel dstChannel = null;
        try {
            srcChannel = new FileInputStream(src).getChannel();
            dstChannel = new FileOutputStream(dst).getChannel();
            dstChannel.transferFrom(srcChannel, 0, srcChannel.size());
        } catch (IOException e) {
            fLog.log(Level.SEVERE, e.getMessage(), e);
        } finally {
            srcChannel.close();
            dstChannel.close();
        }
    }
",194,"    public static String getMD5(String source) {
        String s = null;
        char hexDigits[] = { '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f' };
        try {
            java.security.MessageDigest md = java.security.MessageDigest.getInstance(""MD5"");
            md.update(source.getBytes());
            byte tmp[] = md.digest();
            char str[] = new char[16 * 2];
            int k = 0;
            for (int i = 0; i < 16; i++) {
                byte byte0 = tmp[i];
                str[k++] = hexDigits[byte0 >>> 4 & 0xf];
                str[k++] = hexDigits[byte0 & 0xf];
            }
            s = new String(str);
        } catch (Exception e) {
            e.printStackTrace();
        }
        return s;
    }
",LABEL_0,LABEL_0,LABEL_0,-1,"getMD5,source,s,hexDigits,md,tmp,str,k,i,byte0","getMD5:-0.009344816207885742,source:-0.0005950331687927246,s:-0.0012711882591247559,hexDigits:-0.015731632709503174,md:-0.00027680397033691406,tmp:0.00155562162399292,str:0.00011301040649414062,k:-0.00043779611587524414,i:-0.0019471049308776855,byte0:-0.00025910139083862305,",0,0,0,"tmp:tmp,str:str,byte0:byte0,md:md,k:k,source:source,s:s,i:i,getMD5:getMD5,hexDigits:hexDigits,",0,Greedy,451,0.06567904949188233,failed,[]
421,"    public static void main(String[] args) throws Exception {
        if (args.length != 2) {
            System.out.println(""arguments: sourcefile destfile"");
            System.exit(1);
        }
        FileChannel in = new FileInputStream(args[0]).getChannel(), out = new FileOutputStream(args[1]).getChannel();
        ByteBuffer buffer = ByteBuffer.allocate(BSIZE);
        while (in.read(buffer) != -1) {
            buffer.flip();
            out.write(buffer);
            buffer.clear();
        }
    }
 <SPLIT>     public static void save(String packageName, ArrayList<byte[]> fileContents, ArrayList<String> fileNames) throws Exception {
        String dirBase = Util.JAVA_DIR + File.separator + packageName;
        File packageDir = new File(dirBase);
        if (!packageDir.exists()) {
            boolean created = packageDir.mkdir();
            if (!created) {
                File currentPath = new File(""."");
                throw new Exception(""Directory "" + packageName + "" could not be created. Current directory: "" + currentPath.getAbsolutePath());
            }
        }
        for (int i = 0; i < fileContents.size(); i++) {
            File file = new File(Util.JAVA_DIR + File.separator + fileNames.get(i));
            FileOutputStream fos = new FileOutputStream(file);
            fos.write(fileContents.get(i));
            fos.flush();
            fos.close();
        }
        for (int i = 0; i < fileNames.size(); i++) {
            File fileSrc = new File(Util.JAVA_DIR + File.separator + fileNames.get(i));
            File fileDst = new File(dirBase + File.separator + fileNames.get(i));
            BufferedReader reader = new BufferedReader(new FileReader(fileSrc));
            BufferedWriter writer = new BufferedWriter(new FileWriter(fileDst));
            writer.append(""package "" + packageName + "";\n"");
            String line = """";
            while ((line = reader.readLine()) != null) writer.append(line + ""\n"");
            writer.flush();
            writer.close();
            reader.close();
        }
    }
",117,"    public static void main(String[] args) throws Exception {
        if (args.length != 2) {
            System.page.println(""arguments: sourcefile destfile"");
            System.exit(1);
        }
        FileChannel login = new FileInputStream(args[0]).getChannel(), page = new FileOutputStream(args[1]).getChannel();
        ByteBuffer bar = ByteBuffer.allocate(BSIZE);
        while (login.read(bar) != -1) {
            bar.flip();
            page.write(bar);
            bar.clear();
        }
    }
",LABEL_1,LABEL_1,LABEL_1,-1,"in,out,buffer","in:-0.0008467435836791992,out:-0.008060157299041748,buffer:-0.004316270351409912,",3,10,0,"in:login,buffer:bar,out:page,",0,Greedy,162,0.024169731140136718,failed,[]
422,"    public void process(@NotNull Template tpl, @NotNull Document model, @NotNull String packageName, @NotNull String outFileName, Map<String, String> xsltParam, String artifact) throws ModelGenerationException {
        System.out.print(""Processing with "" + tpl);
        String destinationPath;
        switch(tpl.destination) {
            case target:
                if (tpl.path == null) {
                    destinationPath = where.buildDir + separatorChar + ""generated-sources"" + separatorChar + GENERATION_TARGET;
                } else {
                    destinationPath = where.buildDir;
                }
                break;
            case source:
                if (tpl.path == null) {
                    destinationPath = where.sourceDir;
                } else {
                    destinationPath = ""src"";
                }
                break;
            case redora:
                destinationPath = where.redoraDir;
                break;
            default:
                throw new IllegalArgumentException(""Unused destination "" + tpl.destination);
        }
        if (tpl.path == null) {
            if (tpl.destination == Destination.redora) destinationPath += separator + artifact; else destinationPath += separator + packageName.replace('.', separatorChar);
        } else {
            destinationPath += separator + tpl.path.replace('/', separatorChar).replace('\\', separatorChar);
        }
        System.out.println("" to "" + destinationPath + ""..."" + outFileName);
        if (tpl.destination == Destination.source) {
            if (new File(destinationPath, outFileName).exists()) {
                System.out.println(""Stub "" + outFileName + "" already exists."");
                return;
            }
        }
        new File(destinationPath).mkdirs();
        InputStream in = null;
        Writer out;
        try {
            out = new FileWriter(new File(destinationPath, outFileName));
        } catch (IOException e) {
            throw new ModelGenerationException(""Can't find: "" + destinationPath + separatorChar + outFileName, e);
        }
        switch(tpl.type) {
            case freemarker:
                Map<String, NodeModel> root = new HashMap<String, NodeModel>();
                root.put(""doc"", NodeModel.wrap(model));
                try {
                    freemarker.template.Template template = freemarkerConf.getTemplate(tpl.getTemplateFileName());
                    template.process(root, out);
                } catch (ParseException e) {
                    throw new ModelGenerationException(""There is an error in template: "" + tpl + "". I found it when generating "" + outFileName, e);
                } catch (IOException e) {
                    throw new ModelGenerationException(""Can't find '"" + tpl + ""' when generating "" + outFileName, e);
                } catch (TemplateException e) {
                    throw new ModelGenerationException(""There is an error in template: "" + tpl + "". I found it when generating "" + outFileName, e);
                } catch (RuntimeException e) {
                    throw new ModelGenerationException(""There is another error while trying this template: "" + tpl + "". I found it when generating "" + outFileName, e);
                }
                break;
            case xslt:
                try {
                    in = new FileInputStream(tpl.getAbsolutePath());
                    xsltTransform(model.getFirstChild(), in, out, xsltParam);
                } catch (FileNotFoundException e) {
                    throw new ModelGenerationException(""Can't find "" + tpl, e);
                } catch (TransformerException e) {
                    throw new ModelGenerationException(""Sorry, i failed to use this template: "" + tpl + "". It broke when generating "" + outFileName, e);
                } finally {
                    IOUtils.closeQuietly(in);
                }
                break;
            case copy:
                try {
                    in = new FileInputStream(tpl.getAbsolutePath());
                    IOUtils.copy(in, out);
                } catch (IOException e) {
                    throw new ModelGenerationException(""File copy failed "" + tpl.getTemplateFileName(), e);
                } finally {
                    IOUtils.closeQuietly(in);
                }
        }
        IOUtils.closeQuietly(out);
    }
 <SPLIT>     public static boolean decodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }
",690,"    public void proc(@NotNull Template fplate, @NotNull Document conf, @NotNull String projectKey, @NotNull String outFileEnd, Map<String, String> xsldParam, String Artifact) throws ModelGenerationException {
        System.copy.print(""Processing with "" + fplate);
        String DestinationPoint;
        switch(fplate.destination) {
            case target:
                if (fplate.path == null) {
                    DestinationPoint = where.buildDir + separatorChar + ""generated-sources"" + separatorChar + GENERATION_TARGET;
                } else {
                    DestinationPoint = where.buildDir;
                }
                break;
            case source:
                if (fplate.path == null) {
                    DestinationPoint = where.sourceDir;
                } else {
                    DestinationPoint = ""src"";
                }
                break;
            case redora:
                DestinationPoint = where.redoraDir;
                break;
            default:
                throw new IllegalArgumentException(""Unused destination "" + fplate.destination);
        }
        if (fplate.path == null) {
            if (fplate.destination == Destination.redora) DestinationPoint += separator + Artifact; else DestinationPoint += separator + projectKey.replace('.', separatorChar);
        } else {
            DestinationPoint += separator + fplate.path.replace('/', separatorChar).replace('\\', separatorChar);
        }
        System.copy.println("" to "" + DestinationPoint + ""..."" + outFileEnd);
        if (fplate.destination == Destination.source) {
            if (new File(DestinationPoint, outFileEnd).exists()) {
                System.copy.println(""Stub "" + outFileEnd + "" already exists."");
                return;
            }
        }
        new File(DestinationPoint).mkdirs();
        InputStream r = null;
        Writer copy;
        try {
            copy = new FileWriter(new File(DestinationPoint, outFileEnd));
        } catch (IOException e) {
            throw new ModelGenerationException(""Can't find: "" + DestinationPoint + separatorChar + outFileEnd, e);
        }
        switch(fplate.type) {
            case freemarker:
                Map<String, NodeModel> url = new HashMap<String, NodeModel>();
                url.put(""doc"", NodeModel.wrap(conf));
                try {
                    freemarker.template.Template template = freemarkerConf.getTemplate(fplate.getTemplateFileName());
                    template.proc(url, copy);
                } catch (ParseException e) {
                    throw new ModelGenerationException(""There is an error in template: "" + fplate + "". I found it when generating "" + outFileEnd, e);
                } catch (IOException e) {
                    throw new ModelGenerationException(""Can't find '"" + fplate + ""' when generating "" + outFileEnd, e);
                } catch (TemplateException e) {
                    throw new ModelGenerationException(""There is an error in template: "" + fplate + "". I found it when generating "" + outFileEnd, e);
                } catch (RuntimeException e) {
                    throw new ModelGenerationException(""There is another error while trying this template: "" + fplate + "". I found it when generating "" + outFileEnd, e);
                }
                break;
            case xslt:
                try {
                    r = new FileInputStream(fplate.getAbsolutePath());
                    xsltTransform(conf.getFirstChild(), r, copy, xsldParam);
                } catch (FileNotFoundException e) {
                    throw new ModelGenerationException(""Can't find "" + fplate, e);
                } catch (TransformerException e) {
                    throw new ModelGenerationException(""Sorry, i failed to use this template: "" + fplate + "". It broke when generating "" + outFileEnd, e);
                } finally {
                    IOUtils.closeQuietly(r);
                }
                break;
            case copy:
                try {
                    r = new FileInputStream(fplate.getAbsolutePath());
                    IOUtils.copy(r, copy);
                } catch (IOException e) {
                    throw new ModelGenerationException(""File copy failed "" + fplate.getTemplateFileName(), e);
                } finally {
                    IOUtils.closeQuietly(r);
                }
        }
        IOUtils.closeQuietly(copy);
    }
",LABEL_1,LABEL_1,LABEL_0,1,"process,tpl,model,packageName,outFileName,xsltParam,artifact,destinationPath,in,out,root","process:0.0044942498207092285,tpl:0.012240111827850342,model:-0.0006913542747497559,packageName:0.00032788515090942383,outFileName:0.004229605197906494,xsltParam:0.0019304156303405762,artifact:0.0002213120460510254,destinationPath:0.018225908279418945,in:0.0005651712417602539,out:0.0025547146797180176,root:-0.0008044838905334473,",11,78,0,"destinationPath:DestinationPoint,tpl:fplate,process:proc,outFileName:outFileEnd,out:copy,xsltParam:xsldParam,in:r,packageName:projectKey,artifact:Artifact,model:conf,root:url,",0,Greedy,763,0.14501006603240968,replace,[]
423,"    public void importarEmissoresDosTitulosFinanceiros(File pArquivoTXT, Andamento pAndamento) throws FileNotFoundException, SQLException {
        int numeroDoRegistro = -1;
        Scanner in = null;
        Statement stmtLimpezaInicialDestino = conDestino.createStatement();
        String sql = ""TRUNCATE TABLE TMP_TB_EMISSOR_TITULO"";
        stmtLimpezaInicialDestino.executeUpdate(sql);
        sql = ""INSERT INTO TMP_TB_EMISSOR_TITULO(SIGLA, NOME, CNPJ, DATA_CRIACAO) VALUES(:SIGLA, :NOME, :CNPJ, :DATA_CRIACAO)"";
        OraclePreparedStatement stmtDestino = (OraclePreparedStatement) conDestino.prepareStatement(sql);
        stmtDestino.setExecuteBatch(COMANDOS_POR_LOTE);
        final int TAMANHO_DO_CABECALHO_DO_ARQUIVO = 0;
        final int TAMANHO_DO_RODAPE_DO_ARQUIVO = 0;
        final int TAMANHO_DOS_METADADOS_DO_ARQUIVO = TAMANHO_DO_CABECALHO_DO_ARQUIVO + TAMANHO_DO_RODAPE_DO_ARQUIVO;
        final int TAMANHO_MEDIO_POR_REGISTRO = 81;
        long tamanhoDosArquivos = pArquivoTXT.length();
        int quantidadeDeRegistrosEstimada = (int) (tamanhoDosArquivos - TAMANHO_DOS_METADADOS_DO_ARQUIVO) / TAMANHO_MEDIO_POR_REGISTRO;
        String registro;
        String[] campos;
        try {
            in = new Scanner(new FileInputStream(pArquivoTXT), Constantes.CONJUNTO_DE_CARACTERES_DOS_ARQUIVOS_TEXTO_DA_BOVESPA.name());
            int quantidadeDeRegistrosImportada = 0;
            numeroDoRegistro = 0;
            String vSIGLA, vNOME;
            BigDecimal vCNPJ;
            java.sql.Date vDATA_CRIACAO;
            final int QTDE_CAMPOS = CampoDoArquivoDosEmissoresDeTitulosFinanceiros.values().length;
            final String SEPARADOR_DE_CAMPOS_DO_REGISTRO = "","";
            final String DELIMITADOR_DE_CAMPOS_DO_REGISTRO = ""\"""";
            while (in.hasNextLine()) {
                ++numeroDoRegistro;
                registro = in.nextLine();
                stmtDestino.clearParameters();
                registro = registro.substring(1, registro.length() - 1);
                if (registro.endsWith(DELIMITADOR_DE_CAMPOS_DO_REGISTRO)) {
                    registro = registro + "" "";
                }
                campos = registro.split(DELIMITADOR_DE_CAMPOS_DO_REGISTRO + SEPARADOR_DE_CAMPOS_DO_REGISTRO + DELIMITADOR_DE_CAMPOS_DO_REGISTRO);
                int quantidadeDeCamposEncontradosIncluindoOsVazios = campos.length;
                if (quantidadeDeCamposEncontradosIncluindoOsVazios != QTDE_CAMPOS) {
                    throw new CampoMalDelimitadoEmRegistroDoArquivoImportado(registro);
                }
                vSIGLA = campos[CampoDoArquivoDosEmissoresDeTitulosFinanceiros.SIGLA.ordinal()];
                vNOME = campos[CampoDoArquivoDosEmissoresDeTitulosFinanceiros.NOME.ordinal()];
                String cnpjTmp = campos[CampoDoArquivoDosEmissoresDeTitulosFinanceiros.CNPJ.ordinal()];
                if (cnpjTmp != null && cnpjTmp.trim().length() > 0) {
                    vCNPJ = new BigDecimal(cnpjTmp);
                } else {
                    vCNPJ = null;
                }
                String dataDaCriacaoTmp = campos[CampoDoArquivoDosEmissoresDeTitulosFinanceiros.DATA_CRIACAO.ordinal()];
                if (dataDaCriacaoTmp != null && dataDaCriacaoTmp.trim().length() > 0) {
                    int dia = Integer.parseInt(dataDaCriacaoTmp.substring(6, 8)), mes = Integer.parseInt(dataDaCriacaoTmp.substring(4, 6)) - 1, ano = Integer.parseInt(dataDaCriacaoTmp.substring(0, 4));
                    Calendar calendario = Calendar.getInstance();
                    calendario.clear();
                    calendario.set(ano, mes, dia);
                    vDATA_CRIACAO = new java.sql.Date(calendario.getTimeInMillis());
                } else {
                    vDATA_CRIACAO = null;
                }
                stmtDestino.setStringAtName(""SIGLA"", vSIGLA);
                stmtDestino.setStringAtName(""NOME"", vNOME);
                stmtDestino.setBigDecimalAtName(""CNPJ"", vCNPJ);
                stmtDestino.setDateAtName(""DATA_CRIACAO"", vDATA_CRIACAO);
                int contagemDasInsercoes = stmtDestino.executeUpdate();
                quantidadeDeRegistrosImportada++;
                double percentualCompleto = (double) quantidadeDeRegistrosImportada / quantidadeDeRegistrosEstimada * 100;
                pAndamento.setPercentualCompleto((int) percentualCompleto);
            }
            conDestino.commit();
        } catch (Exception ex) {
            conDestino.rollback();
            ProblemaNaImportacaoDeArquivo problemaDetalhado = new ProblemaNaImportacaoDeArquivo();
            problemaDetalhado.nomeDoArquivo = pArquivoTXT.getName();
            problemaDetalhado.linhaProblematicaDoArquivo = numeroDoRegistro;
            problemaDetalhado.detalhesSobreOProblema = ex;
            throw problemaDetalhado;
        } finally {
            pAndamento.setPercentualCompleto(100);
            in.close();
            if (stmtLimpezaInicialDestino != null && (!stmtLimpezaInicialDestino.isClosed())) {
                stmtLimpezaInicialDestino.close();
            }
            if (stmtDestino != null && (!stmtDestino.isClosed())) {
                stmtDestino.close();
            }
        }
    }
 <SPLIT>     public static InputStream getFileInputStream(String path) throws IOException {
        InputStream is = null;
        File file = new File(path);
        if (file.exists()) is = new BufferedInputStream(new FileInputStream(file));
        if (is == null) {
            URL url = FileUtils.class.getClassLoader().getResource(path);
            is = (url == null) ? null : url.openStream();
        }
        return is;
    }
",708,"    public void importarEmissoresDosTitulosFinanceiros(File pArquivoQBT, Andamento  pAndamentO) throws FileNotFoundException, SQLException {
        int numeroDoRegestro = -1;
        Scanner connection = null;
        Statement stmtLimpezaInicialDestination = conDestino.createStatement();
        String filename = ""TRUNCATE TABLE TMP_TB_EMISSOR_TITULO"";
        stmtLimpezaInicialDestination.executeUpdate(filename);
        filename = ""INSERT INTO TMP_TB_EMISSOR_TITULO(SIGLA, NOME, CNPJ, DATA_CRIACAO) VALUES(:SIGLA, :NOME, :CNPJ, :DATA_CRIACAO)"";
        OraclePreparedStatement stmtCamporno = (OraclePreparedStatement) conDestino.prepareStatement(filename);
        stmtCamporno.setExecuteBatch(COMANDOS_POR_LOTE);
        final int TAMANHO_DO_CABECALHO_DO_ARQUIVO = 0;
        final int TAMANHO_DO_RODAP_DO = 0;
        final int TAMANHO_DOS_METADADOS_DO_ARQUIVO = TAMANHO_DO_CABECALHO_DO_ARQUIVO + TAMANHO_DO_RODAP_DO;
        final int TAMANHO_MEDIO_POR_REGISTRO = 81;
        long tamanhoDosArquivo = pArquivoQBT.length();
        int quantidadeDeRegistrosEstimadas = (int) (tamanhoDosArquivo - TAMANHO_DOS_METADADOS_DO_ARQUIVO) / TAMANHO_MEDIO_POR_REGISTRO;
        String regastration;
        String[]  casOS;
        try {
            connection = new Scanner(new FileInputStream(pArquivoQBT), Constantes.CONJUNTO_DE_CARACTERES_DOS_ARQUIVOS_TEXTO_DA_BOVESPA.name());
            int quantidadeDeRegistrosImportada = 0;
            numeroDoRegestro = 0;
            String vSIGLA, vNOME;
            BigDecimal vCNPJ;
            java.filename.Date vDATA_CRIACAO;
            final int QTDE_CAMPOS = CampoDoArquivoDosEmissoresDeTitulosFinanceiros.values().length;
            final String SEPARADOR_DE_CAMPOS_DO_REGISTRO = "","";
            final String DELIMITADOR_DE_CAMPOS_DO_REGISTRO = ""\"""";
            while (connection.hasNextLine()) {
                ++numeroDoRegestro;
                regastration = connection.nextLine();
                stmtCamporno.clearParameters();
                regastration = regastration.substring(1, regastration.length() - 1);
                if (regastration.endsWith(DELIMITADOR_DE_CAMPOS_DO_REGISTRO)) {
                    regastration = regastration + "" "";
                }
                 casOS = regastration.split(DELIMITADOR_DE_CAMPOS_DO_REGISTRO + SEPARADOR_DE_CAMPOS_DO_REGISTRO + DELIMITADOR_DE_CAMPOS_DO_REGISTRO);
                int quantidadeDeCamposEncontradosIncluindoOsVazios =  casOS.length;
                if (quantidadeDeCamposEncontradosIncluindoOsVazios != QTDE_CAMPOS) {
                    throw new CampoMalDelimitadoEmRegistroDoArquivoImportado(regastration);
                }
                vSIGLA =  casOS[CampoDoArquivoDosEmissoresDeTitulosFinanceiros.SIGLA.ordinal()];
                vNOME =  casOS[CampoDoArquivoDosEmissoresDeTitulosFinanceiros.NOME.ordinal()];
                String cnpjTmp =  casOS[CampoDoArquivoDosEmissoresDeTitulosFinanceiros.CNPJ.ordinal()];
                if (cnpjTmp != null && cnpjTmp.trim().length() > 0) {
                    vCNPJ = new BigDecimal(cnpjTmp);
                } else {
                    vCNPJ = null;
                }
                String dataDaCriacaoTmp =  casOS[CampoDoArquivoDosEmissoresDeTitulosFinanceiros.DATA_CRIACAO.ordinal()];
                if (dataDaCriacaoTmp != null && dataDaCriacaoTmp.trim().length() > 0) {
                    int dia = Integer.parseInt(dataDaCriacaoTmp.substring(6, 8)), mes = Integer.parseInt(dataDaCriacaoTmp.substring(4, 6)) - 1, ano = Integer.parseInt(dataDaCriacaoTmp.substring(0, 4));
                    Calendar calendario = Calendar.getInstance();
                    calendario.clear();
                    calendario.set(ano, mes, dia);
                    vDATA_CRIACAO = new java.filename.Date(calendario.getTimeInMillis());
                } else {
                    vDATA_CRIACAO = null;
                }
                stmtCamporno.setStringAtName(""SIGLA"", vSIGLA);
                stmtCamporno.setStringAtName(""NOME"", vNOME);
                stmtCamporno.setBigDecimalAtName(""CNPJ"", vCNPJ);
                stmtCamporno.setDateAtName(""DATA_CRIACAO"", vDATA_CRIACAO);
                int contagemDasInsercoes = stmtCamporno.executeUpdate();
                quantidadeDeRegistrosImportada++;
                double percentualCompleto = (double) quantidadeDeRegistrosImportada / quantidadeDeRegistrosEstimadas * 100;
                 pAndamentO.setPercentualCompleto((int) percentualCompleto);
            }
            conDestino.commit();
        } catch (Exception ex) {
            conDestino.rollback();
            ProblemaNaImportacaoDeArquivo problemaDetalhado = new ProblemaNaImportacaoDeArquivo();
            problemaDetalhado.nomeDoArquivo = pArquivoQBT.getName();
            problemaDetalhado.linhaProblematicaDoArquivo = numeroDoRegestro;
            problemaDetalhado.detalhesSobreOProblema = ex;
            throw problemaDetalhado;
        } finally {
             pAndamentO.setPercentualCompleto(100);
            connection.close();
            if (stmtLimpezaInicialDestination != null && (!stmtLimpezaInicialDestino.isClosed())) {
                stmtLimpezaInicialDestination.close();
            }
            if (stmtCamporno != null && (!stmtDestino.isClosed())) {
                stmtCamporno.close();
            }
        }
    }
",LABEL_0,LABEL_0,LABEL_0,-1,"importarEmissoresDosTitulosFinanceiros,pArquivoTXT,pAndamento,numeroDoRegistro,in,stmtLimpezaInicialDestino,sql,stmtDestino,TAMANHO_DO_CABECALHO_DO_ARQUIVO,TAMANHO_DO_RODAPE_DO_ARQUIVO,TAMANHO_DOS_METADADOS_DO_ARQUIVO,TAMANHO_MEDIO_POR_REGISTRO,tamanhoDosArquivos,quantidadeDeRegistrosEstimada,registro,campos","importarEmissoresDosTitulosFinanceiros:-0.010065793991088867,pArquivoTXT:-0.030250906944274902,pAndamento:-0.037192463874816895,numeroDoRegistro:-0.010025858879089355,in:0.005106866359710693,stmtLimpezaInicialDestino:-0.03853917121887207,sql:-0.018041789531707764,stmtDestino:-0.05457538366317749,TAMANHO_DO_CABECALHO_DO_ARQUIVO:0.04160672426223755,TAMANHO_DO_RODAPE_DO_ARQUIVO:0.025982677936553955,TAMANHO_DOS_METADADOS_DO_ARQUIVO:0.035762906074523926,TAMANHO_MEDIO_POR_REGISTRO:-0.02565687894821167,tamanhoDosArquivos:-0.015908360481262207,quantidadeDeRegistrosEstimada:-0.015617311000823975,registro:0.005299925804138184,campos:0.009090542793273926,",12,61,0,"TAMANHO_DO_CABECALHO_DO_ARQUIVO:TAMANHO_DO_CABECALHO_DO_ARQUIVO,TAMANHO_DOS_METADADOS_DO_ARQUIVO:TAMANHO_DOS_METADADOS_DO_ARQUIVO,TAMANHO_DO_RODAPE_DO_ARQUIVO:TAMANHO_DO_RODAP_DO,campos: casOS,registro:regastration,in:connection,numeroDoRegistro:numeroDoRegestro,importarEmissoresDosTitulosFinanceiros:importarEmissoresDosTitulosFinanceiros,quantidadeDeRegistrosEstimada:quantidadeDeRegistrosEstimadas,tamanhoDosArquivos:tamanhoDosArquivo,sql:filename,TAMANHO_MEDIO_POR_REGISTRO:TAMANHO_MEDIO_POR_REGISTRO,pArquivoTXT:pArquivoQBT,pAndamento: pAndamentO,stmtLimpezaInicialDestino:stmtLimpezaInicialDestination,stmtDestino:stmtCamporno,",0,Greedy,583,0.13669732411702473,failed,[]
424,"    public String transformByMD5(String password) throws XSServiceException {
        MessageDigest md5;
        byte[] output;
        StringBuffer bufferPass;
        try {
            md5 = MessageDigest.getInstance(""MD5"");
        } catch (NoSuchAlgorithmException e) {
            logger.warn(""DataAccessException thrown while getting MD5 algorithm:"" + e.getMessage(), e);
            throw new XSServiceException(""Database error while saving user"");
        }
        md5.reset();
        md5.update(password.getBytes());
        output = md5.digest();
        bufferPass = new StringBuffer();
        for (byte b : output) {
            bufferPass.append(Integer.toHexString(0xff & b).length() == 1 ? ""0"" + Integer.toHexString(0xff & b) : Integer.toHexString(0xff & b));
        }
        return bufferPass.toString();
    }
 <SPLIT>     public static String getMD5Hash(String in) {
        StringBuffer result = new StringBuffer(32);
        try {
            MessageDigest md5 = MessageDigest.getInstance(""MD5"");
            md5.update(in.getBytes());
            Formatter f = new Formatter(result);
            for (byte b : md5.digest()) {
                f.format(""%02x"", b);
            }
        } catch (NoSuchAlgorithmException ex) {
            ex.printStackTrace();
        }
        return result.toString();
    }
",161,"    public String  transformWithMDSecret(String crypt) throws XSServiceException {
        MessageDigest  mdfive;
        byte[] resource;
        StringBuffer Bufferpass;
        try {
             mdfive = MessageDigest.getInstance(""MD5"");
        } catch (NoSuchAlgorithmException e) {
            logger.warn(""DataAccessException thrown while getting MD5 algorithm:"" + e.getMessage(), e);
            throw new XSServiceException(""Database error while saving user"");
        }
         mdfive.reset();
         mdfive.update(crypt.getBytes());
        resource =  mdfive.digest();
        Bufferpass = new StringBuffer();
        for (byte url : resource) {
            Bufferpass.append(Integer.toHexString(0xff & url).length() == 1 ? ""0"" + Integer.toHexString(0xff & url) : Integer.toHexString(0xff & url));
        }
        return Bufferpass.toString();
    }
",LABEL_1,LABEL_1,LABEL_1,-1,"transformByMD5,password,md5,output,bufferPass,b","transformByMD5:0.011774122714996338,password:0.0013595819473266602,md5:0.006584107875823975,output:0.001531839370727539,bufferPass:0.003596067428588867,b:0.0022286176681518555,",6,19,0,"transformByMD5: transformWithMDSecret,md5: mdfive,bufferPass:Bufferpass,b:url,output:resource,password:crypt,",0,Greedy,277,0.040038077036539714,failed,[]
425,"    private static String lastModified(URL url) {
        try {
            URLConnection conn = url.openConnection();
            return long2date(conn.getLastModified());
        } catch (Exception e) {
            SWGAide.printDebug(""cach"", 1, ""SWGCraftCache:lastModified: "" + e.getMessage());
        }
        return ""0"";
    }
 <SPLIT>     private String getEncoding() throws IOException {
        BufferedReader reader = null;
        String encoding = null;
        try {
            URLConnection connection = url.openConnection();
            Map<String, List<String>> header = connection.getHeaderFields();
            for (Map.Entry<String, List<String>> entry : header.entrySet()) {
                if (entry.getKey().toLowerCase().equals(""content-type"")) {
                    String item = entry.getValue().toString().toLowerCase();
                    if (item.contains(""charset"")) {
                        encoding = extractEncoding(item);
                        if (encoding != null && !encoding.isEmpty()) return encoding;
                    }
                }
            }
            reader = new BufferedReader(new InputStreamReader(connection.getInputStream()));
            String line;
            while ((line = reader.readLine()) != null) {
                line = line.toLowerCase();
                if (line.contains(""charset"") || line.contains(""encoding"")) {
                    encoding = extractEncoding(line);
                    if (encoding != null && !encoding.isEmpty()) return encoding;
                }
            }
            return STANDARDENCODING;
        } finally {
            if (reader != null) reader.close();
        }
    }
",66,"    private static String nextMODIFIED(URL string) {
        try {
            URLConnection conn = string.openConnection();
            return long2date(conn.getLastModified());
        } catch (Exception e) {
            SWGAide.printDebug(""cach"", 1, ""SWGCraftCache:lastModified: "" + e.getMessage());
        }
        return ""0"";
    }
",LABEL_0,LABEL_0,LABEL_0,-1,"lastModified,url,conn","lastModified:2.1278858184814453e-05,url:4.649162292480469e-06,conn:-1.1801719665527344e-05,",2,3,0,"lastModified:nextMODIFIED,url:string,conn:conn,",0,Greedy,108,0.01583224137624105,failed,[]
426,"    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        String selectedPage = request.getParameter(""SelectedPage"");
        Page page = null;
        PortalRequest portalRequest = PortalRequest.getCurrentRequest();
        if (selectedPage == null) {
            try {
                Property pageProp = Property.getProperty(""HomePage"");
                selectedPage = pageProp.getValue();
            } catch (PersistentModelException e) {
                myLogger.info(""Page could not be found due to an exception"");
                response.sendError(response.SC_NOT_FOUND);
                return;
            }
        }
        myLogger.info(""Handling Page Request for Page "" + selectedPage);
        try {
            if (page == null) {
                try {
                    page = Page.getPage(Long.parseLong(selectedPage));
                } catch (NumberFormatException e) {
                    List<Page> possiblePage = Page.findByName(selectedPage);
                    if (possiblePage.size() > 0) {
                        page = possiblePage.get(0);
                    } else {
                        response.sendError(response.SC_NOT_FOUND);
                        return;
                    }
                }
            }
            if (!page.isVisibleTo(portalRequest.getCurrentUser())) {
                Property pageProp = Property.getProperty(""HomePage"");
                selectedPage = pageProp.getValue();
                page = Page.getPage(Long.parseLong(selectedPage));
            }
            try {
                Property property = Property.getProperty(""LogPageRequests"");
                if (property.getValue().toLowerCase().equals(""true"")) {
                    String referer = request.getHeader(""Referer"");
                    if (referer == null || referer.indexOf(portalRequest.getRequest().getServerName()) > 0) {
                        referer = "" "";
                    } else {
                        if (referer.length() >= 200) {
                            referer = referer.substring(0, 198);
                        }
                    }
                    PageRequest.createRequest(portalRequest.getCurrentHREF(), page, portalRequest.getCurrentUser(), portalRequest.getRequest().getRemoteAddr(), referer);
                }
            } catch (PersistentModelException e) {
                myLogger.log(Level.WARNING, ""Log Page Requests property was not found."", e);
            }
            if (page.isVisibleTo(portalRequest.getCurrentUser())) {
                HttpSession session = request.getSession();
                if (session != null) {
                    RecentlyViewedManager rvm = (RecentlyViewedManager) session.getAttribute(""ipoint.RecentlyViewedManager"");
                    if (rvm == null) {
                        rvm = new RecentlyViewedManager();
                    }
                    rvm.add(page);
                    session.setAttribute(""ipoint.RecentlyViewedManager"", rvm);
                }
                PageCacheEntry entry = null;
                if (!portalRequest.isPost() && !page.isEditableBy(portalRequest.getCurrentUser())) {
                    try {
                        int pageCacheTime = 60000;
                        try {
                            Property pageCacheTimeProperty = Property.getProperty(""PageCacheTime"");
                            pageCacheTime = Integer.parseInt(pageCacheTimeProperty.getValue());
                            pageCacheTime *= 1000;
                        } catch (PersistentModelException pme) {
                            myLogger.warning(""Ignoring Exception when retrieving PageCacheTime property"");
                        } catch (NumberFormatException nfe) {
                        }
                        entry = PageCacheEntry.find(portalRequest.getCurrentHREF(), page, portalRequest.getCurrentUser(), pageCacheTime);
                    } catch (PersistentModelException e) {
                        myLogger.log(Level.WARNING, ""An error occurred finding a page cache entry"", e);
                    }
                }
                response.setContentType(""text/html"");
                response.setHeader(""Cache-Control"", ""no-cache"");
                boolean processed = false;
                if (entry != null) {
                    String tempFile = entry.getTempFile();
                    File file = new File(tempFile);
                    if (file.exists() && file.isFile() && file.canRead()) {
                        FileReader reader = new FileReader(file);
                        BufferedReader br = new BufferedReader(reader);
                        PrintWriter out = response.getWriter();
                        out.write(""<!-- Starting to output cached page in "" + portalRequest.elapsedTime() + "" ms -->\n"");
                        while (br.ready()) {
                            out.write(br.readLine() + ""\n"");
                        }
                        out.write(""<!-- Cached output produced in "" + portalRequest.elapsedTime() + "" ms -->\n"");
                        reader.close();
                        processed = true;
                        portalRequest.getMBeans().incrementStatistics(ManagementMBeans.StatisticsType.PageTotal, page.getName() + ""-"" + page.getID(), portalRequest.elapsedTime(), true);
                    } else {
                        entry.delete();
                    }
                }
                if (!processed) {
                    PrintWriter out = response.getWriter();
                    out.write(""<!-- Output produced by iPoint Portal -->\n"");
                    PageRenderer renderer = new PageRenderer(page);
                    long startTime = System.currentTimeMillis();
                    request.setAttribute(ELConstants.IPOINT_USER, portalRequest.getCurrentUser());
                    request.setAttribute(ELConstants.IPOINT_PAGE, page);
                    request.setAttribute(ELConstants.IPOINT_TEMPLATE, page.getTemplate());
                    request.setAttribute(ELConstants.IPOINT_PORTAL_PROPERTIES, Property.getPropertiesMap());
                    request.setAttribute(ELConstants.IPOINT_USER_PROPERTIES, portalRequest.getCurrentUser().getProperties());
                    renderer.preProcess();
                    portalRequest.getMBeans().incrementStatistics(ManagementMBeans.StatisticsType.PagePreProcess, page.getName() + ""-"" + page.getID(), System.currentTimeMillis() - startTime, false);
                    long renderStart = System.currentTimeMillis();
                    renderer.render();
                    portalRequest.getMBeans().incrementStatistics(ManagementMBeans.StatisticsType.PageRender, page.getName() + ""-"" + page.getID(), System.currentTimeMillis() - renderStart, false);
                    portalRequest.getMBeans().incrementStatistics(ManagementMBeans.StatisticsType.PageTotal, page.getName() + ""-"" + page.getID(), System.currentTimeMillis() - startTime, false);
                    out.write(""<!-- output produced in "" + PortalRequest.getCurrentRequest().elapsedTime() + "" ms -->\n"");
                    if (!page.isEditableBy(portalRequest.getCurrentUser())) {
                        if (response instanceof CachingResponseWrapper) {
                            CachingResponseWrapper crw = (CachingResponseWrapper) response;
                            crw.flushBuffer();
                            Property tempProperty = Property.getProperty(""UploadLocation"");
                            File tempDirectory = new File(tempProperty.getValue());
                            if (tempDirectory.exists() && tempDirectory.canWrite()) {
                                File file = File.createTempFile(""iPointPage"", "".html"", tempDirectory);
                                try {
                                    FileWriter fw = new FileWriter(file);
                                    fw.write(crw.getOutput());
                                    fw.flush();
                                    fw.close();
                                    PageCacheEntry.create(portalRequest.getCurrentHREF(), page, portalRequest.getCurrentUser(), file.getAbsolutePath());
                                } catch (IOException e) {
                                }
                            } else {
                                myLogger.warning(""Can not write to directory "" + tempProperty.getValue());
                            }
                        }
                    }
                }
            } else {
                myLogger.info(""Current User is Forbidden from seeing this Page"");
                response.sendError(response.SC_FORBIDDEN);
            }
        } catch (PersistentModelException e) {
            myLogger.log(Level.INFO, ""Unable to find page "" + selectedPage, e);
            response.sendError(response.SC_NOT_FOUND);
        } catch (PresentationException pe) {
            pe.printStackTrace();
            throw new ServletException(""Error processing the page"", pe);
        }
    }
 <SPLIT>     public static void main(String[] args) {
        String logFileName = args[0];
        int extractLineEvery = new Integer(args[1]).intValue();
        String filterToken = ""P0"";
        if (args.length > 2) {
            filterToken = args[2];
        }
        try {
            BufferedReader br = new BufferedReader(new FileReader(logFileName));
            BufferedWriter bw = new BufferedWriter(new FileWriter(new File(logFileName + "".trim"")));
            String readLine;
            int x = 0;
            while ((readLine = br.readLine()) != null) {
                if ((x++ % extractLineEvery == 0) && readLine.startsWith(filterToken)) {
                    bw.write(readLine + ""\n"");
                }
            }
            bw.flush();
            bw.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
",1387,"    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        String selectedPage = request.getParameter(""SelectedPage"");
        Page page = null;
        PortalRequest portalRequest = PortalRequest.getCurrentRequest();
        if (selectedPage == null) {
            try {
                Property agePro = Property.getProperty(""HomePage"");
                selectedPage = agePro.getValue();
            } catch (PersistentModelException e) {
                myLogger.info(""Page could not be found due to an exception"");
                response.sendError(response.SC_NOT_FOUND);
                return;
            }
        }
        myLogger.info(""Handling Page Request for Page "" + selectedPage);
        try {
            if (page == null) {
                try {
                    page = Page.getPage(Long.parseLong(selectedPage));
                } catch (NumberFormatException e) {
                    List<Page> possiblyOrder = Page.findByName(selectedPage);
                    if (possiblyOrder.size() > 0) {
                        page = possiblyOrder.get(0);
                    } else {
                        response.sendError(response.SC_NOT_FOUND);
                        return;
                    }
                }
            }
            if (!page.isVisibleTo(portalRequest.getCurrentUser())) {
                Property agePro = Property.getProperty(""HomePage"");
                selectedPage = agePro.getValue();
                page = Page.getPage(Long.parseLong(selectedPage));
            }
            try {
                Property table = Property.getProperty(""LogPageRequests"");
                if (table.getValue().toLowerCase().equals(""true"")) {
                    String referer = request.getHeader(""Referer"");
                    if (referer == null || referer.indexOf(portalRequest.getRequest().getServerName()) > 0) {
                        referer = "" "";
                    } else {
                        if (referer.length() >= 200) {
                            referer = referer.substring(0, 198);
                        }
                    }
                    PageRequest.createRequest(portalRequest.getCurrentHREF(), page, portalRequest.getCurrentUser(), portalRequest.getRequest().getRemoteAddr(), referer);
                }
            } catch (PersistentModelException e) {
                myLogger.log(Level.WARNING, ""Log Page Requests property was not found."", e);
            }
            if (page.isVisibleTo(portalRequest.getCurrentUser())) {
                HttpSession session = request.getSession();
                if (session != null) {
                    RecentlyViewedManager rvm = (RecentlyViewedManager) session.getAttribute(""ipoint.RecentlyViewedManager"");
                    if (rvm == null) {
                        rvm = new RecentlyViewedManager();
                    }
                    rvm.add(page);
                    session.setAttribute(""ipoint.RecentlyViewedManager"", rvm);
                }
                PageCacheEntry entry = null;
                if (!portalRequest.isPost() && !page.isEditableBy(portalRequest.getCurrentUser())) {
                    try {
                        int pageCacheTime = 60000;
                        try {
                            Property pageCacheTimeProperty = Property.getProperty(""PageCacheTime"");
                            pageCacheTime = Integer.parseInt(pageCacheTimeProperty.getValue());
                            pageCacheTime *= 1000;
                        } catch (PersistentModelException pme) {
                            myLogger.warning(""Ignoring Exception when retrieving PageCacheTime property"");
                        } catch (NumberFormatException nfe) {
                        }
                        entry = PageCacheEntry.find(portalRequest.getCurrentHREF(), page, portalRequest.getCurrentUser(), pageCacheTime);
                    } catch (PersistentModelException e) {
                        myLogger.log(Level.WARNING, ""An error occurred finding a page cache entry"", e);
                    }
                }
                response.setContentType(""text/html"");
                response.setHeader(""Cache-Control"", ""no-cache"");
                boolean processed = false;
                if (entry != null) {
                    String tempFile = entry.getTempFile();
                    File file = new File(tempFile);
                    if (file.exists() && file.isFile() && file.canRead()) {
                        FileReader reader = new FileReader(file);
                        BufferedReader br = new BufferedReader(reader);
                        PrintWriter out = response.getWriter();
                        out.write(""<!-- Starting to output cached page in "" + portalRequest.elapsedTime() + "" ms -->
"");
                        while (br.ready()) {
                            out.write(br.readLine() + ""
"");
                        }
                        out.write(""<!-- Cached output produced in "" + portalRequest.elapsedTime() + "" ms -->
"");
                        reader.close();
                        processed = true;
                        portalRequest.getMBeans().incrementStatistics(ManagementMBeans.StatisticsType.PageTotal, page.getName() + ""-"" + page.getID(), portalRequest.elapsedTime(), true);
                    } else {
                        entry.delete();
                    }
                }
                if (!processed) {
                    PrintWriter out = response.getWriter();
                    out.write(""<!-- Output produced by iPoint Portal -->
"");
                    PageRenderer renderer = new PageRenderer(page);
                    long startTime = System.currentTimeMillis();
                    request.setAttribute(ELConstants.IPOINT_USER, portalRequest.getCurrentUser());
                    request.setAttribute(ELConstants.IPOINT_PAGE, page);
                    request.setAttribute(ELConstants.IPOINT_TEMPLATE, page.getTemplate());
                    request.setAttribute(ELConstants.IPOINT_PORTAL_PROPERTIES, Property.getPropertiesMap());
                    request.setAttribute(ELConstants.IPOINT_USER_PROPERTIES, portalRequest.getCurrentUser().getProperties());
                    renderer.preProcess();
                    portalRequest.getMBeans().incrementStatistics(ManagementMBeans.StatisticsType.PagePreProcess, page.getName() + ""-"" + page.getID(), System.currentTimeMillis() - startTime, false);
                    long renderStart = System.currentTimeMillis();
                    renderer.render();
                    portalRequest.getMBeans().incrementStatistics(ManagementMBeans.StatisticsType.PageRender, page.getName() + ""-"" + page.getID(), System.currentTimeMillis() - renderStart, false);
                    portalRequest.getMBeans().incrementStatistics(ManagementMBeans.StatisticsType.PageTotal, page.getName() + ""-"" + page.getID(), System.currentTimeMillis() - startTime, false);
                    out.write(""<!-- output produced in "" + PortalRequest.getCurrentRequest().elapsedTime() + "" ms -->
"");
                    if (!page.isEditableBy(portalRequest.getCurrentUser())) {
                        if (response instanceof CachingResponseWrapper) {
                            CachingResponseWrapper crw = (CachingResponseWrapper) response;
                            crw.flushBuffer();
                            Property tempProperty = Property.getProperty(""UploadLocation"");
                            File tempDirectory = new File(tempProperty.getValue());
                            if (tempDirectory.exists() && tempDirectory.canWrite()) {
                                File file = File.createTempFile(""iPointPage"", "".html"", tempDirectory);
                                try {
                                    FileWriter fw = new FileWriter(file);
                                    fw.write(crw.getOutput());
                                    fw.flush();
                                    fw.close();
                                    PageCacheEntry.create(portalRequest.getCurrentHREF(), page, portalRequest.getCurrentUser(), file.getAbsolutePath());
                                } catch (IOException e) {
                                }
                            } else {
                                myLogger.warning(""Can not write to directory "" + tempProperty.getValue());
                            }
                        }
                    }
                }
            } else {
                myLogger.info(""Current User is Forbidden from seeing this Page"");
                response.sendError(response.SC_FORBIDDEN);
            }
        } catch (PersistentModelException e) {
            myLogger.log(Level.INFO, ""Unable to find page "" + selectedPage, e);
            response.sendError(response.SC_NOT_FOUND);
        } catch (PresentationException pe) {
            pe.printStackTrace();
            throw new ServletException(""Error processing the page"", pe);
        }
    }
",LABEL_1,LABEL_1,LABEL_0,1,"doGet,request,response,selectedPage,page,portalRequest,pageProp,possiblePage,property,referer,e","doGet:-0.01952463388442993,request:-0.010599255561828613,response:-0.007174313068389893,selectedPage:-0.009533584117889404,page:-0.008262872695922852,portalRequest:-0.007488667964935303,pageProp:-0.00657731294631958,possiblePage:0.0004838109016418457,property:0.001498401165008545,referer:-0.08790993690490723,e:-0.026242733001708984,",3,11,0,"property:table,possiblePage:possiblyOrder,pageProp:agePro,",0,Greedy,256,0.06308754285176595,replace,[]
427,"    public static void copy(File in, File out) throws IOException {
        if (in.exists() && in != null && out != null) {
            if (!out.exists()) {
                if (in.isDirectory()) {
                    out.mkdirs();
                } else {
                    out.createNewFile();
                }
            }
            String source = in.isDirectory() ? ""directory"" : ""file"";
            String target = out.isDirectory() ? ""directory"" : ""file"";
            if (!source.equals(target)) {
                throw new IOException(""Can't duplicate "" + source + "" as "" + target);
            } else {
                if (source.equals(""directory"")) {
                    File[] files = in.listFiles();
                    for (File file : files) {
                        copy(file, new File(out, file.getName()));
                    }
                } else {
                    FileChannel inCh = new FileInputStream(in).getChannel();
                    FileChannel outCh = new FileOutputStream(out).getChannel();
                    inCh.transferTo(0, inCh.size(), outCh);
                }
            }
        }
    }
 <SPLIT>     private static boolean copyFile(File in, File out) {
        boolean ok = true;
        InputStream is = null;
        OutputStream os = null;
        try {
            is = new FileInputStream(in);
            os = new FileOutputStream(out);
            byte[] buffer = new byte[0xFFFF];
            for (int len; (len = is.read(buffer)) != -1; ) os.write(buffer, 0, len);
        } catch (IOException e) {
            System.err.println(e);
            ok = false;
        } finally {
            if (is != null) {
                try {
                    is.close();
                } catch (IOException e) {
                    System.err.println(e);
                }
            }
            if (os != null) {
                try {
                    os.close();
                } catch (IOException e) {
                    System.err.println(e);
                }
            }
        }
        return ok;
    }
",230,"    public static void copy(File url, File out) throws IOException {
        if (url.exists() && url != null && out != null) {
            if (!out.exists()) {
                if (url.isDirectory()) {
                    out.mkdirs();
                } else {
                    out.createNewFile();
                }
            }
            String source = url.isDirectory() ? ""directory"" : ""file"";
            String target = out.isDirectory() ? ""directory"" : ""file"";
            if (!source.equals(target)) {
                throw new IOException(""Can't duplicate "" + source + "" as "" + target);
            } else {
                if (source.equals(""directory"")) {
                    File[] files = url.listFiles();
                    for (File file : files) {
                        copy(file, new File(out, file.getName()));
                    }
                } else {
                    FileChannel inCh = new FileInputStream(url).getChannel();
                    FileChannel outCh = new FileOutputStream(out).getChannel();
                    inCh.transferTo(0, inCh.size(), outCh);
                }
            }
        }
    }
",LABEL_1,LABEL_1,LABEL_0,1,"copy,in,out,source,target,files,file,inCh,outCh","copy:0.037856101989746094,in:0.014294147491455078,out:0.0007071495056152344,source:-0.0025715231895446777,target:0.005877673625946045,files:-0.007267117500305176,file:-0.0037149786949157715,inCh:-0.00431370735168457,outCh:0.002341628074645996,",1,7,0,"copy:copy,in:url,",0,Greedy,123,0.01845528284708659,replace,[]
428,"    private MediaWikiResult getFromUri(String url) throws OntologyServiceException {
        try {
            logger.info(""getting "" + url);
            HttpURLConnection connection = (java.net.HttpURLConnection) new URL(url).openConnection();
            connection.setRequestProperty(""User-Agent"", ""OntoCat-"" + Math.random());
            BufferedInputStream bin = new BufferedInputStream(connection.getInputStream());
            JAXBContext jaxbContext = JAXBContext.newInstance(""uk.ac.ebi.ontocat.mediawiki.jaxb"");
            Unmarshaller unmarshaller = jaxbContext.createUnmarshaller();
            return (MediaWikiResult) unmarshaller.unmarshal(bin);
        } catch (Exception e) {
            e.printStackTrace();
            throw new OntologyServiceException(e);
        }
    }
 <SPLIT>     public BufferedWriter createOutputStream(String inFile, String outFile) throws IOException {
        int k_blockSize = 1024;
        int byteCount;
        char[] buf = new char[k_blockSize];
        File ofp = new File(outFile);
        ZipOutputStream zos = new ZipOutputStream(new FileOutputStream(ofp));
        zos.setMethod(ZipOutputStream.DEFLATED);
        OutputStreamWriter osw = new OutputStreamWriter(zos, ""ISO-8859-1"");
        BufferedWriter bw = new BufferedWriter(osw);
        ZipEntry zot = null;
        File ifp = new File(inFile);
        ZipInputStream zis = new ZipInputStream(new FileInputStream(ifp));
        InputStreamReader isr = new InputStreamReader(zis, ""ISO-8859-1"");
        BufferedReader br = new BufferedReader(isr);
        ZipEntry zit = null;
        while ((zit = zis.getNextEntry()) != null) {
            if (zit.getName().equals(""content.xml"")) {
                continue;
            }
            zot = new ZipEntry(zit.getName());
            zos.putNextEntry(zot);
            while ((byteCount = br.read(buf, 0, k_blockSize)) >= 0) bw.write(buf, 0, byteCount);
            bw.flush();
            zos.closeEntry();
        }
        zos.putNextEntry(new ZipEntry(""content.xml""));
        bw.flush();
        osw = new OutputStreamWriter(zos, ""UTF8"");
        bw = new BufferedWriter(osw);
        return bw;
    }
",130,"    private MediaWikiResult getFromUri(String file) throws OntologyServiceException {
        try {
            logger.info(""getting "" + file);
            HttpURLConnection connection = (java.net.HttpURLConnection) new URL(file).openConnection();
            connection.setRequestProperty(""User-Agent"", ""OntoCat-"" + Math.random());
            BufferedInputStream bin = new BufferedInputStream(connection.getInputStream());
            JAXBContext jaxbContext = JAXBContext.newInstance(""uk.ac.ebi.ontocat.mediawiki.jaxb"");
            Unmarshaller unmarshaller = jaxbContext.createUnmarshaller();
            return (MediaWikiResult) unmarshaller.unmarshal(bin);
        } catch (Exception e) {
            e.printStackTrace();
            throw new OntologyServiceException(e);
        }
    }
",LABEL_0,LABEL_0,LABEL_1,1,"getFromUri,url,connection,bin,jaxbContext,unmarshaller","getFromUri:-0.004545688629150391,url:0.005139708518981934,connection:-0.007696866989135742,bin:0.015247523784637451,jaxbContext:-0.00521087646484375,unmarshaller:-0.00519871711730957,",1,3,0,"bin:bin,url:file,",0,Greedy,106,0.016304858525594077,replace,[]
429,"    private static Properties loadPropertiesFromClasspath(String path) {
        Enumeration<URL> locations;
        Properties props = new Properties();
        try {
            locations = Thread.currentThread().getContextClassLoader().getResources(path);
            while (locations.hasMoreElements()) {
                URL url = locations.nextElement();
                InputStream in = url.openStream();
                props.load(in);
                in.close();
                logger.config(""Load properties from "" + url);
            }
        } catch (IOException e) {
            logger.log(Level.SEVERE, ""load properties from classpath \"""" + path + ""\"" failed"", e);
        }
        return props;
    }
 <SPLIT>     public static void buildDeb(File debFile, File controlFile, File dataFile) throws IOException {
        long now = new Date().getTime() / 1000;
        OutputStream deb = new FileOutputStream(debFile);
        deb.write(""!<arch>\n"".getBytes());
        startFileEntry(deb, DEBIAN_BINARY_NAME, now, DEBIAN_BINARY_CONTENT.length());
        deb.write(DEBIAN_BINARY_CONTENT.getBytes());
        endFileEntry(deb, DEBIAN_BINARY_CONTENT.length());
        startFileEntry(deb, CONTROL_NAME, now, controlFile.length());
        FileInputStream control = new FileInputStream(controlFile);
        byte[] buffer = new byte[1024];
        while (true) {
            int read = control.read(buffer);
            if (read == -1) break;
            deb.write(buffer, 0, read);
        }
        control.close();
        endFileEntry(deb, controlFile.length());
        startFileEntry(deb, DATA_NAME, now, dataFile.length());
        FileInputStream data = new FileInputStream(dataFile);
        while (true) {
            int read = data.read(buffer);
            if (read == -1) break;
            deb.write(buffer, 0, read);
        }
        data.close();
        endFileEntry(deb, dataFile.length());
        deb.close();
    }
",130,"    private static Properties loadPropertiesfromclassname(String Path) {
        Enumeration<URL> LOCATIONS;
        Properties  procs = new Properties();
        try {
            LOCATIONS = Thread.currentThread().getContextClassLoader().getResources(Path);
            while (LOCATIONS.hasMoreElements()) {
                URL file = LOCATIONS.nextElement();
                InputStream din = file.openStream();
                 procs.load(din);
                din.close();
                logger.config(""Load properties from "" + file);
            }
        } catch (IOException e) {
            logger.log(Level.SEVERE, ""load properties from classpath \"""" + Path + ""\"" failed"", e);
        }
        return  procs;
    }
",LABEL_0,LABEL_0,LABEL_0,-1,"loadPropertiesFromClasspath,path,locations,props,url,in","loadPropertiesFromClasspath:0.00038236379623413086,path:2.47955322265625e-05,locations:8.225440979003906e-06,props:3.230571746826172e-05,url:4.559755325317383e-05,in:-1.728534698486328e-05,",6,17,0,"loadPropertiesFromClasspath:loadPropertiesfromclassname,url:file,props: procs,path:Path,locations:LOCATIONS,in:din,",0,Greedy,268,0.04045658906300863,failed,[]
430,"    private static InputStream openNamedResource(String name) throws java.io.IOException {
        InputStream in = null;
        boolean result = false;
        boolean httpURL = true;
        URL propsURL = null;
        try {
            propsURL = new URL(name);
        } catch (MalformedURLException ex) {
            httpURL = false;
            propsURL = null;
        }
        if (propsURL == null) {
            propsURL = UserProperties.class.getResource(name);
        }
        if (propsURL != null) {
            URLConnection urlConn = propsURL.openConnection();
            if (httpURL) {
                String hdrVal = urlConn.getHeaderField(0);
                if (hdrVal != null) {
                    String code = HTTPUtilities.getResultCode(hdrVal);
                    if (code != null) {
                        if (!code.equals(""200"")) {
                            throw new java.io.IOException(""status code = "" + code);
                        }
                    }
                }
            }
            in = urlConn.getInputStream();
        }
        return in;
    }
 <SPLIT>     private void handleNodeRegainedService(long eventID, long nodeID, String ipAddr, long serviceID, String eventTime) {
        Category log = ThreadCategory.getInstance(OutageWriter.class);
        if (eventID == -1 || nodeID == -1 || ipAddr == null || serviceID == -1) {
            log.warn(EventConstants.NODE_REGAINED_SERVICE_EVENT_UEI + "" ignored - info incomplete - eventid/nodeid/ip/svc: "" + eventID + ""/"" + nodeID + ""/"" + ipAddr + ""/"" + serviceID);
            return;
        }
        Connection dbConn = null;
        try {
            dbConn = DatabaseConnectionFactory.getInstance().getConnection();
            if (openOutageExists(dbConn, nodeID, ipAddr, serviceID)) {
                try {
                    dbConn.setAutoCommit(false);
                } catch (SQLException sqle) {
                    log.error(""Unable to change database AutoCommit to FALSE"", sqle);
                    return;
                }
                PreparedStatement outageUpdater = dbConn.prepareStatement(OutageConstants.DB_UPDATE_OUTAGE_FOR_SERVICE);
                outageUpdater.setLong(1, eventID);
                outageUpdater.setTimestamp(2, convertEventTimeIntoTimestamp(eventTime));
                outageUpdater.setLong(3, nodeID);
                outageUpdater.setString(4, ipAddr);
                outageUpdater.setLong(5, serviceID);
                outageUpdater.executeUpdate();
                outageUpdater.close();
                try {
                    dbConn.commit();
                    if (log.isDebugEnabled()) log.debug(""nodeRegainedService: closed outage for nodeid/ip/service "" + nodeID + ""/"" + ipAddr + ""/"" + serviceID + "" in DB"");
                } catch (SQLException se) {
                    log.warn(""Rolling back transaction, nodeRegainedService could not be recorded  for nodeId/ipAddr/service: "" + nodeID + ""/"" + ipAddr + ""/"" + serviceID, se);
                    try {
                        dbConn.rollback();
                    } catch (SQLException sqle) {
                        log.warn(""SQL exception during rollback, reason"", sqle);
                    }
                }
            } else {
                log.warn(""\'"" + EventConstants.NODE_REGAINED_SERVICE_EVENT_UEI + ""\' for "" + nodeID + ""/"" + ipAddr + ""/"" + serviceID + "" does not have open record."");
            }
        } catch (SQLException se) {
            log.warn(""SQL exception while handling \'nodeRegainedService\'"", se);
        } finally {
            try {
                if (dbConn != null) dbConn.close();
            } catch (SQLException e) {
                log.warn(""Exception closing JDBC connection"", e);
            }
        }
    }
",181,"    private static InputStream openParamedresource(String url) throws java.io.IOException {
        InputStream in = null;
        boolean result = false;
        boolean httpsurl = true;
        URL prorsUrl = null;
        try {
            prorsUrl = new URL(url);
        } catch (MalformedURLException ex) {
            httpsurl = false;
            prorsUrl = null;
        }
        if (prorsUrl == null) {
            prorsUrl = UserProperties.class.getResource(url);
        }
        if (prorsUrl != null) {
            URLConnection sslConn = prorsUrl.openConnection();
            if (httpsurl) {
                String  hheaderStr = sslConn.getHeaderField(0);
                if ( hheaderStr != null) {
                    String line = HTTPUtilities.getResultCode( hheaderStr);
                    if (line != null) {
                        if (!code.equals(""200"")) {
                            throw new java.io.IOException(""status code = "" + line);
                        }
                    }
                }
            }
            in = sslConn.getInputStream();
        }
        return in;
    }
",LABEL_0,LABEL_0,LABEL_0,-1,"openNamedResource,name,in,propsURL,urlConn,httpURL,hdrVal,code","openNamedResource:-0.0001055598258972168,name:-0.0001322031021118164,in:0.0012363791465759277,propsURL:-0.0005068778991699219,urlConn:-0.0001448988914489746,httpURL:-0.0001423954963684082,hdrVal:0.0006429553031921387,code:0.0008587837219238281,",7,25,0,"in:in,code:line,hdrVal: hheaderStr,openNamedResource:openParamedresource,name:url,httpURL:httpsurl,urlConn:sslConn,propsURL:prorsUrl,",0,Greedy,447,0.0729958971341451,failed,[]
431,"    public String[][] getProjectTreeData() {
        String[][] treeData = null;
        String filename = dms_home + FS + ""temp"" + FS + username + ""adminprojects.xml"";
        String urlString = dms_url + ""/servlet/com.ufnasoft.dms.server.ServerGetAdminProjects"";
        try {
            String urldata = urlString + ""?username="" + URLEncoder.encode(username, ""UTF-8"") + ""&key="" + URLEncoder.encode(key, ""UTF-8"") + ""&filename="" + URLEncoder.encode(username, ""UTF-8"") + ""adminprojects.xml"";
            DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
            factory.setValidating(false);
            DocumentBuilder parser = factory.newDocumentBuilder();
            URL u = new URL(urldata);
            DataInputStream is = new DataInputStream(u.openStream());
            FileOutputStream os = new FileOutputStream(filename);
            int iBufSize = is.available();
            byte inBuf[] = new byte[20000 * 1024];
            int iNumRead;
            while ((iNumRead = is.read(inBuf, 0, iBufSize)) > 0) os.write(inBuf, 0, iNumRead);
            os.close();
            is.close();
            File f = new File(filename);
            InputStream inputstream = new FileInputStream(f);
            Document document = parser.parse(inputstream);
            NodeList nodelist = document.getElementsByTagName(""proj"");
            int num = nodelist.getLength();
            treeData = new String[num][3];
            for (int i = 0; i < num; i++) {
                treeData[i][0] = new String(DOMUtil.getSimpleElementText((Element) nodelist.item(i), ""pid""));
                treeData[i][1] = new String(DOMUtil.getSimpleElementText((Element) nodelist.item(i), ""ppid""));
                treeData[i][2] = new String(DOMUtil.getSimpleElementText((Element) nodelist.item(i), ""p""));
            }
        } catch (MalformedURLException ex) {
            System.out.println(ex);
        } catch (ParserConfigurationException ex) {
            System.out.println(ex);
        } catch (NullPointerException e) {
        } catch (Exception ex) {
            System.out.println(ex);
        }
        return treeData;
    }
 <SPLIT>     public boolean visar() throws SQLException, ClassNotFoundException, Exception {
        Connection conn = null;
        PreparedStatement ps = null;
        Date fechaSystem = new Date();
        DateFormat aaaammdd = new SimpleDateFormat(""yyyyMMdd"");
        DateFormat hhmmss = new SimpleDateFormat(""HHmmss"");
        DateFormat sss = new SimpleDateFormat(""S"");
        String ss = sss.format(fechaSystem);
        if (ss.length() > 2) {
            ss = ss.substring(0, 2);
        }
        boolean visado = false;
        try {
            conn = ToolsBD.getConn();
            conn.setAutoCommit(false);
            String sentenciaSql = ""UPDATE BZMODIF SET FZJCUSVI=?, FZJFVISA=?, FZJHVISA=?"" + ((hayVisadoExtracto) ? "", FZJIEXTR=?"" : """") + ((hayVisadoRemitente) ? "", FZJIREMI=?"" : """") + "" WHERE FZJCENSA='S' AND FZJCAGCO=? AND FZJNUMEN=? AND FZJANOEN=? AND FZJFMODI=? AND FZJHMODI=?"";
            ps = conn.prepareStatement(sentenciaSql);
            ps.setString(1, usuarioVisado);
            ps.setInt(2, Integer.parseInt(aaaammdd.format(fechaSystem)));
            ps.setInt(3, Integer.parseInt(hhmmss.format(fechaSystem) + ss));
            int contador = 4;
            if (hayVisadoExtracto) {
                ps.setString(contador++, ""X"");
            }
            if (hayVisadoRemitente) {
                ps.setString(contador++, ""X"");
            }
            ps.setInt(contador++, oficina);
            ps.setInt(contador++, numeroRegistro);
            ps.setInt(contador++, anoSalida);
            ps.setString(contador++, fechaModificacion);
            ps.setString(contador++, horaModificacion);
            int registrosAfectados = ps.executeUpdate();
            if (registrosAfectados > 0 && !hayVisadoExtracto && !hayVisadoRemitente) {
                visado = true;
            }
            if (registrosAfectados > 0 && (hayVisadoExtracto || hayVisadoRemitente)) {
                boolean generado = generarBZVISAD(conn, Integer.parseInt(aaaammdd.format(fechaSystem)), Integer.parseInt(hhmmss.format(fechaSystem) + ss));
                if (generado) {
                    visado = actualizarBZSALIDA(conn);
                }
                String rem = """";
                String com = """";
                if (hayVisadoRemitente) {
                    if (!remitente.trim().equals("""")) {
                        rem = remitente;
                    } else {
                        javax.naming.InitialContext contexto = new javax.naming.InitialContext();
                        Object ref = contexto.lookup(""es.caib.regweb.ValoresHome"");
                        ValoresHome home = (ValoresHome) javax.rmi.PortableRemoteObject.narrow(ref, ValoresHome.class);
                        Valores valor = home.create();
                        rem = valor.recuperaRemitenteCastellano(entidad1, entidad2 + """");
                        valor.remove();
                    }
                } else {
                    if (!altres.trim().equals("""")) {
                        rem = remitente;
                    } else {
                        javax.naming.InitialContext contexto = new javax.naming.InitialContext();
                        Object ref = contexto.lookup(""es.caib.regweb.ValoresHome"");
                        ValoresHome home = (ValoresHome) javax.rmi.PortableRemoteObject.narrow(ref, ValoresHome.class);
                        Valores valor = home.create();
                        rem = valor.recuperaRemitenteCastellano(entidad1Old, entidad2Old + """");
                        valor.remove();
                    }
                }
                if (hayVisadoExtracto) {
                    com = extracto;
                } else {
                    com = comentario;
                }
                try {
                    Class t = Class.forName(""es.caib.regweb.module.PluginHook"");
                    Class[] partypes = { String.class, Integer.class, Integer.class, Integer.class, Integer.class, String.class, String.class, String.class, Integer.class, Integer.class, String.class, Integer.class, String.class };
                    Object[] params = { ""V"", new Integer(anoSalida), new Integer(numeroRegistro), new Integer(oficina), new Integer(fechaDocumento), rem, com, tipoDocumento, new Integer(fechaRegistro), new Integer(fzacagge), fora, new Integer(destinatario), idioma };
                    java.lang.reflect.Method metodo = t.getMethod(""salida"", partypes);
                    metodo.invoke(null, params);
                } catch (IllegalAccessException iae) {
                } catch (IllegalArgumentException iae) {
                } catch (InvocationTargetException ite) {
                } catch (NullPointerException npe) {
                } catch (ExceptionInInitializerError eiie) {
                } catch (NoSuchMethodException nsme) {
                } catch (SecurityException se) {
                } catch (LinkageError le) {
                } catch (ClassNotFoundException le) {
                }
            }
            conn.commit();
            int fzahsis = Integer.parseInt(hhmmss.format(fechaSystem) + ss);
            String Stringsss = sss.format(fechaSystem);
            switch(Stringsss.length()) {
                case (1):
                    Stringsss = ""00"" + Stringsss;
                    break;
                case (2):
                    Stringsss = ""0"" + Stringsss;
                    break;
            }
            int horamili = Integer.parseInt(hhmmss.format(fechaSystem) + Stringsss);
            int fzafsis = Integer.parseInt(aaaammdd.format(fechaSystem));
            logLopdBZMODIF(""UPDATE"", sessioEjb.getCallerPrincipal().getName().toUpperCase(), fzafsis, horamili, 'S', numeroRegistro, anoSalida, oficina, Integer.parseInt(fechaModificacion), Integer.parseInt(horaModificacion));
        } catch (Exception e) {
            System.out.println(""Error: "" + e.getMessage());
            e.printStackTrace();
            visado = false;
            try {
                if (conn != null) conn.rollback(); else System.out.println(""ERROR: No es pot fer rollback sense connexió!"");
            } catch (Exception ex) {
                System.out.println(""Error: "" + e.getMessage());
                ex.printStackTrace();
            }
        } finally {
            ToolsBD.closeConn(conn, ps, null);
        }
        return visado;
    }
",456,,LABEL_0,LABEL_1,,-4,"getProjectTreeData,treeData,filename,urlString,urldata,factory,parser,u,is,os,iBufSize,inBuf,iNumRead,f,inputstream,document,nodelist,num,i",,,,0,,0,Greedy,1,0.000924535592397054,,[]
432,"    public Long split(File targetDirectory, String prefix, long maxUnitBases, long maxUnitEntries) throws Exception {
        if (!targetDirectory.exists()) {
            if (!targetDirectory.mkdirs()) throw new Exception(""Could not create target directory "" + targetDirectory.getAbsolutePath());
        }
        if (!size.isUnknown() && size.getBases() < maxUnitBases && (maxUnitEntries <= 0 || size.getEntries() < maxUnitEntries)) {
            FileInputStream fis = new FileInputStream(this);
            FileChannel fci = fis.getChannel();
            FileOutputStream fos = new FileOutputStream(new File(targetDirectory, prefix + ""_0"" + "".fasta""));
            FileChannel fco = fos.getChannel();
            ByteBuffer buffer = ByteBuffer.allocate(64000);
            while (fci.read(buffer) > 0) {
                buffer.flip();
                fco.write(buffer);
                buffer.clear();
            }
            fci.close();
            fco.close();
            return (long) 1;
        } else {
            long currentBasesCount = 0;
            long currentEntriesCount = 0;
            int targetCount = 0;
            FileChannel fastaChannel = new FileInputStream(this).getChannel();
            int totalSeqCount = 0;
            long totalResiduesCount = 0;
            try {
                long prevTime = System.currentTimeMillis();
                long fastaFileSize = this.length();
                long fastaFileReadOffset = 0L;
                long partitionStartOffset = 0L;
                final int bufferSize = 1024 * 1024;
                ByteBuffer fastaBuffer = ByteBuffer.allocateDirect(bufferSize);
                int fastaReadState = FASTAFileTokenizer.UNKNOWN;
                for (; fastaFileReadOffset < fastaFileSize; ) {
                    long nBytes = fastaChannel.read(fastaBuffer);
                    if (nBytes <= 0) {
                        fastaBuffer.limit(0);
                        break;
                    } else {
                        fastaBuffer.flip();
                        fastaFileReadOffset += nBytes;
                    }
                    for (; ; ) {
                        if (!fastaBuffer.hasRemaining()) {
                            fastaBuffer.clear();
                            break;
                        }
                        int b = fastaBuffer.get();
                        if (b == '\r') {
                        } else if (b == '\n') {
                            if (fastaReadState == FASTAFileTokenizer.DEFLINE) {
                                fastaReadState = FASTAFileTokenizer.SEQUENCELINE;
                            }
                        } else if (b == '>') {
                            if (fastaReadState == FASTAFileTokenizer.UNKNOWN) {
                                fastaReadState = FASTAFileTokenizer.STARTDEFLINE;
                            } else if (fastaReadState == FASTAFileTokenizer.SEQUENCELINE) {
                                fastaReadState = FASTAFileTokenizer.STARTDEFLINE;
                            }
                            if (fastaReadState == FASTAFileTokenizer.STARTDEFLINE) {
                                if (currentBasesCount >= maxUnitBases || maxUnitEntries > 0 && currentEntriesCount >= maxUnitEntries) {
                                    fastaBuffer.position(fastaBuffer.position() - 1);
                                    long currentTime = System.currentTimeMillis();
                                    System.out.println(new java.util.Date() + "" Partition "" + targetCount + "" containing "" + currentEntriesCount + "" sequences and "" + currentBasesCount + "" residues ends at "" + (fastaFileReadOffset - fastaBuffer.remaining()) + "" and was created in "" + (currentTime - prevTime) + "" ms"");
                                    prevTime = currentTime;
                                    long partitionEndOffset = fastaFileReadOffset - fastaBuffer.remaining();
                                    FileChannel partitionChannel = new FileOutputStream(new File(targetDirectory, prefix + ""_"" + targetCount + "".fasta"")).getChannel();
                                    nBytes = fastaChannel.transferTo(partitionStartOffset, partitionEndOffset - partitionStartOffset, partitionChannel);
                                    partitionChannel.force(true);
                                    partitionChannel.close();
                                    targetCount++;
                                    partitionStartOffset += nBytes;
                                    currentBasesCount = 0;
                                    currentEntriesCount = 0;
                                    fastaReadState = FASTAFileTokenizer.UNKNOWN;
                                } else {
                                    fastaReadState = FASTAFileTokenizer.DEFLINE;
                                    currentEntriesCount++;
                                }
                                totalSeqCount++;
                            }
                        } else {
                            if (fastaReadState == FASTAFileTokenizer.SEQUENCELINE) {
                                totalResiduesCount++;
                                currentBasesCount++;
                            }
                        }
                    }
                }
                if (partitionStartOffset < fastaFileSize) {
                    long currentTime = System.currentTimeMillis();
                    System.out.println(new java.util.Date() + "" Partition "" + targetCount + "" containing "" + currentEntriesCount + "" sequences and "" + currentBasesCount + "" residues ends at "" + (fastaFileSize) + "" and was created in "" + (currentTime - prevTime) + "" ms"");
                    FileChannel partitionChannel = new FileOutputStream(new File(targetDirectory, prefix + ""_"" + targetCount + "".fasta"")).getChannel();
                    fastaChannel.transferTo(partitionStartOffset, fastaFileSize - partitionStartOffset, partitionChannel);
                    partitionChannel.force(true);
                    partitionChannel.close();
                    targetCount++;
                }
                if (size.isUnknown()) {
                    size.setBases(totalResiduesCount);
                    size.setEntries(totalSeqCount);
                }
            } finally {
                fastaChannel.close();
            }
            return (long) targetCount;
        }
    }
 <SPLIT>     String getLocation(Class clazz) {
        try {
            java.net.URL url = clazz.getProtectionDomain().getCodeSource().getLocation();
            String location = url.toString();
            if (location.startsWith(""jar"")) {
                url = ((java.net.JarURLConnection) url.openConnection()).getJarFileURL();
                location = url.toString();
            }
            if (location.startsWith(""file"")) {
                java.io.File file = new java.io.File(url.getFile());
                return file.getAbsolutePath();
            } else {
                return url.toString();
            }
        } catch (Throwable t) {
        }
        return Messages.getMessage(""happyClientUnknownLocation"");
    }
",862,,LABEL_0,LABEL_1,,-4,"split,targetDirectory,prefix,maxUnitBases,maxUnitEntries,fis,fci,fos,fco,buffer,currentBasesCount,currentEntriesCount,targetCount,fastaChannel,totalSeqCount,totalResiduesCount,prevTime,fastaFileSize,fastaFileReadOffset,partitionStartOffset,bufferSize,fastaBuffer,fastaReadState,nBytes",,,,0,,0,Greedy,1,0.001017324129740397,,[]
433,"    @Test
    public void testStandardTee() throws Exception {
        final String reference = ""test"";
        final Reader source = new StringReader(reference);
        final StringWriter destination1 = new StringWriter();
        final StringWriter destination2 = new StringWriter();
        final TeeWriter tee = new TeeWriter(destination1, destination2);
        org.apache.commons.io.IOUtils.copy(source, tee);
        tee.close();
        assertEquals(""the two string are equals"", reference, destination1.toString());
        assertEquals(""the two string are equals"", reference, destination2.toString());
        assertEquals(""byte count"", reference.length(), tee.getSize());
    }
 <SPLIT>     private static void readAndRewrite(File inFile, File outFile) throws IOException {
        ImageInputStream iis = ImageIO.createImageInputStream(new BufferedInputStream(new FileInputStream(inFile)));
        DcmParser dcmParser = DcmParserFactory.getInstance().newDcmParser(iis);
        Dataset ds = DcmObjectFactory.getInstance().newDataset();
        dcmParser.setDcmHandler(ds.getDcmHandler());
        dcmParser.parseDcmFile(null, Tags.PixelData);
        PixelDataReader pdReader = pdFact.newReader(ds, iis, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());
        System.out.println(""reading "" + inFile + ""..."");
        pdReader.readPixelData(false);
        ImageOutputStream out = ImageIO.createImageOutputStream(new BufferedOutputStream(new FileOutputStream(outFile)));
        DcmEncodeParam dcmEncParam = DcmEncodeParam.IVR_LE;
        ds.writeDataset(out, dcmEncParam);
        ds.writeHeader(out, dcmEncParam, Tags.PixelData, dcmParser.getReadVR(), dcmParser.getReadLength());
        System.out.println(""writing "" + outFile + ""..."");
        PixelDataWriter pdWriter = pdFact.newWriter(pdReader.getPixelDataArray(), false, ds, out, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());
        pdWriter.writePixelData();
        out.flush();
        out.close();
        System.out.println(""done!"");
    }
",132,"    @Test
    public void testStandardBae() throws Exception {
        final String url = ""test"";
        final Reader connection = new StringReader(url);
        final StringWriter DestinationOnce = new StringWriter();
        final StringWriter destination02 = new StringWriter();
        final TeeWriter see = new TeeWriter(DestinationOnce, destination02);
        org.apache.commons.io.IOUtils.copy(connection, see);
        see.close();
        assertEquals(""the two string are equals"", url, DestinationOnce.toString());
        assertEquals(""the two string are equals"", url, destination02.toString());
        assertEquals(""byte count"", url.length(), see.getSize());
    }
",LABEL_1,LABEL_1,LABEL_1,-1,"testStandardTee,reference,source,destination1,destination2,tee","testStandardTee:-4.4405460357666016e-05,reference:0.0012457966804504395,source:0.0012385845184326172,destination1:0.005217134952545166,destination2:0.004197895526885986,tee:-0.000527799129486084,",6,18,0,"destination1:DestinationOnce,destination2:destination02,reference:url,source:connection,testStandardTee:testStandardBae,tee:see,",0,Greedy,306,0.04595397313435872,failed,[]
434,"    private void moveFile(File orig, File target) throws IOException {
        byte buffer[] = new byte[1000];
        int bread = 0;
        FileInputStream fis = new FileInputStream(orig);
        FileOutputStream fos = new FileOutputStream(target);
        while (bread != -1) {
            bread = fis.read(buffer);
            if (bread != -1) fos.write(buffer, 0, bread);
        }
        fis.close();
        fos.close();
        orig.delete();
    }
 <SPLIT>     public void extractResourceToFile(String resourcePath, File dest) {
        InputStream in = getClass().getResourceAsStream(resourcePath);
        try {
            FileOutputStream out = FileUtils.openOutputStream(dest);
            try {
                IOUtils.copy(in, out);
            } finally {
                if (out != null) {
                    out.close();
                }
            }
        } finally {
            if (in != null) {
                in.close();
            }
        }
    }
",103,"    private void  movedDirectory(File id, File path) throws IOException {
        byte url[] = new byte[1000];
        int fe = 0;
        FileInputStream qils = new FileInputStream(id);
        FileOutputStream flose = new FileOutputStream(path);
        while (fe != -1) {
            fe = qils.read(url);
            if (fe != -1) flose.write(url, 0, fe);
        }
        qils.close();
        flose.close();
        id.delete();
    }
",LABEL_1,LABEL_1,LABEL_0,1,"moveFile,orig,target,buffer,bread,fis,fos","moveFile:0.0036947131156921387,orig:-0.0028322339057922363,target:0.0014827251434326172,buffer:-0.005737483501434326,bread:-0.02506577968597412,fis:0.011543035507202148,fos:0.008964121341705322,",7,20,0,"fis:qils,fos:flose,moveFile: movedDirectory,target:path,orig:id,buffer:url,bread:fe,",0,Greedy,303,0.040850893656412764,replace,[]
435,"    public Long split(File targetDirectory, String prefix, long maxUnitBases, long maxUnitEntries) throws Exception {
        if (!targetDirectory.exists()) {
            if (!targetDirectory.mkdirs()) throw new Exception(""Could not create target directory "" + targetDirectory.getAbsolutePath());
        }
        if (!size.isUnknown() && size.getBases() < maxUnitBases && (maxUnitEntries <= 0 || size.getEntries() < maxUnitEntries)) {
            FileInputStream fis = new FileInputStream(this);
            FileChannel fci = fis.getChannel();
            FileOutputStream fos = new FileOutputStream(new File(targetDirectory, prefix + ""_0"" + "".fasta""));
            FileChannel fco = fos.getChannel();
            ByteBuffer buffer = ByteBuffer.allocate(64000);
            while (fci.read(buffer) > 0) {
                buffer.flip();
                fco.write(buffer);
                buffer.clear();
            }
            fci.close();
            fco.close();
            return (long) 1;
        } else {
            long currentBasesCount = 0;
            long currentEntriesCount = 0;
            int targetCount = 0;
            FileChannel fastaChannel = new FileInputStream(this).getChannel();
            int totalSeqCount = 0;
            long totalResiduesCount = 0;
            try {
                long prevTime = System.currentTimeMillis();
                long fastaFileSize = this.length();
                long fastaFileReadOffset = 0L;
                long partitionStartOffset = 0L;
                final int bufferSize = 1024 * 1024;
                ByteBuffer fastaBuffer = ByteBuffer.allocateDirect(bufferSize);
                int fastaReadState = FASTAFileTokenizer.UNKNOWN;
                for (; fastaFileReadOffset < fastaFileSize; ) {
                    long nBytes = fastaChannel.read(fastaBuffer);
                    if (nBytes <= 0) {
                        fastaBuffer.limit(0);
                        break;
                    } else {
                        fastaBuffer.flip();
                        fastaFileReadOffset += nBytes;
                    }
                    for (; ; ) {
                        if (!fastaBuffer.hasRemaining()) {
                            fastaBuffer.clear();
                            break;
                        }
                        int b = fastaBuffer.get();
                        if (b == '\r') {
                        } else if (b == '\n') {
                            if (fastaReadState == FASTAFileTokenizer.DEFLINE) {
                                fastaReadState = FASTAFileTokenizer.SEQUENCELINE;
                            }
                        } else if (b == '>') {
                            if (fastaReadState == FASTAFileTokenizer.UNKNOWN) {
                                fastaReadState = FASTAFileTokenizer.STARTDEFLINE;
                            } else if (fastaReadState == FASTAFileTokenizer.SEQUENCELINE) {
                                fastaReadState = FASTAFileTokenizer.STARTDEFLINE;
                            }
                            if (fastaReadState == FASTAFileTokenizer.STARTDEFLINE) {
                                if (currentBasesCount >= maxUnitBases || maxUnitEntries > 0 && currentEntriesCount >= maxUnitEntries) {
                                    fastaBuffer.position(fastaBuffer.position() - 1);
                                    long currentTime = System.currentTimeMillis();
                                    System.out.println(new java.util.Date() + "" Partition "" + targetCount + "" containing "" + currentEntriesCount + "" sequences and "" + currentBasesCount + "" residues ends at "" + (fastaFileReadOffset - fastaBuffer.remaining()) + "" and was created in "" + (currentTime - prevTime) + "" ms"");
                                    prevTime = currentTime;
                                    long partitionEndOffset = fastaFileReadOffset - fastaBuffer.remaining();
                                    FileChannel partitionChannel = new FileOutputStream(new File(targetDirectory, prefix + ""_"" + targetCount + "".fasta"")).getChannel();
                                    nBytes = fastaChannel.transferTo(partitionStartOffset, partitionEndOffset - partitionStartOffset, partitionChannel);
                                    partitionChannel.force(true);
                                    partitionChannel.close();
                                    targetCount++;
                                    partitionStartOffset += nBytes;
                                    currentBasesCount = 0;
                                    currentEntriesCount = 0;
                                    fastaReadState = FASTAFileTokenizer.UNKNOWN;
                                } else {
                                    fastaReadState = FASTAFileTokenizer.DEFLINE;
                                    currentEntriesCount++;
                                }
                                totalSeqCount++;
                            }
                        } else {
                            if (fastaReadState == FASTAFileTokenizer.SEQUENCELINE) {
                                totalResiduesCount++;
                                currentBasesCount++;
                            }
                        }
                    }
                }
                if (partitionStartOffset < fastaFileSize) {
                    long currentTime = System.currentTimeMillis();
                    System.out.println(new java.util.Date() + "" Partition "" + targetCount + "" containing "" + currentEntriesCount + "" sequences and "" + currentBasesCount + "" residues ends at "" + (fastaFileSize) + "" and was created in "" + (currentTime - prevTime) + "" ms"");
                    FileChannel partitionChannel = new FileOutputStream(new File(targetDirectory, prefix + ""_"" + targetCount + "".fasta"")).getChannel();
                    fastaChannel.transferTo(partitionStartOffset, fastaFileSize - partitionStartOffset, partitionChannel);
                    partitionChannel.force(true);
                    partitionChannel.close();
                    targetCount++;
                }
                if (size.isUnknown()) {
                    size.setBases(totalResiduesCount);
                    size.setEntries(totalSeqCount);
                }
            } finally {
                fastaChannel.close();
            }
            return (long) targetCount;
        }
    }
 <SPLIT>     @Test
    public void test01_ok_failed_500_no_logo() throws Exception {
        DefaultHttpClient client = new DefaultHttpClient();
        try {
            HttpPost post = new HttpPost(xlsURL);
            HttpResponse response = client.execute(post);
            assertEquals(""failed code for "", 500, response.getStatusLine().getStatusCode());
        } finally {
            client.getConnectionManager().shutdown();
        }
    }
",862,,LABEL_0,LABEL_1,,-4,"split,targetDirectory,prefix,maxUnitBases,maxUnitEntries,fis,fci,fos,fco,buffer,currentBasesCount,currentEntriesCount,targetCount,fastaChannel,totalSeqCount,totalResiduesCount,prevTime,fastaFileSize,fastaFileReadOffset,partitionStartOffset,bufferSize,fastaBuffer,fastaReadState,nBytes",,,,0,,0,Greedy,1,0.0009027759234110515,,[]
436,"    private boolean authenticate(Module module) throws Exception {
        SecureRandom rand = SecureRandom.getInstance(""SHA1PRNG"");
        rand.setSeed(System.currentTimeMillis());
        byte[] challenge = new byte[16];
        rand.nextBytes(challenge);
        String b64 = Util.base64(challenge);
        Util.writeASCII(out, RSYNCD_AUTHREQD + b64 + ""\n"");
        String reply = Util.readLine(in);
        if (reply.indexOf("" "") < 0) {
            Util.writeASCII(out, AT_ERROR + "": bad response\n"");
            if (remoteVersion < 25) Util.writeASCII(out, RSYNCD_EXIT + ""\n"");
            socket.close();
            throw new IOException(""bad response"");
        }
        String user = reply.substring(0, reply.indexOf("" ""));
        String response = reply.substring(reply.indexOf("" "") + 1);
        if (!module.users.contains(user)) {
            Util.writeASCII(out, AT_ERROR + "": user "" + user + "" not allowed\n"");
            if (remoteVersion < 25) Util.writeASCII(out, RSYNCD_EXIT + ""\n"");
            socket.close();
            throw new IOException(""user "" + user + "" not allowed"");
        }
        LineNumberReader secrets = new LineNumberReader(new FileReader(module.secretsFile));
        MessageDigest md4 = MessageDigest.getInstance(""BrokenMD4"");
        String line;
        while ((line = secrets.readLine()) != null) {
            if (line.startsWith(user + "":"")) {
                String passwd = line.substring(line.lastIndexOf("":"") + 1);
                md4.update(new byte[4]);
                md4.update(passwd.getBytes(""US-ASCII""));
                md4.update(b64.getBytes(""US-ASCII""));
                String hash = Util.base64(md4.digest());
                if (hash.equals(response)) {
                    secrets.close();
                    return true;
                } else {
                    Util.writeASCII(out, AT_ERROR + "": auth failed on module "" + module.name + ""\n"");
                    if (remoteVersion < 25) Util.writeASCII(out, RSYNCD_EXIT + ""\n"");
                    socket.close();
                    secrets.close();
                    logger.error(""auth failed on module "" + module.name);
                    return false;
                }
            }
        }
        Util.writeASCII(out, AT_ERROR + "": auth failed on module "" + module.name + ""\n"");
        if (remoteVersion < 25) Util.writeASCII(out, RSYNCD_EXIT + ""\n"");
        socket.close();
        secrets.close();
        logger.error(""auth failed on module "" + module.name);
        return false;
    }
 <SPLIT>     public static String getMessageDigest(String[] inputs) {
        if (inputs.length == 0) return null;
        try {
            MessageDigest sha = MessageDigest.getInstance(""SHA-1"");
            for (String input : inputs) sha.update(input.getBytes());
            byte[] hash = sha.digest();
            String CPass = """";
            int h = 0;
            String s = """";
            for (int i = 0; i < 20; i++) {
                h = hash[i];
                if (h < 0) h += 256;
                s = Integer.toHexString(h);
                if (s.length() < 2) CPass = CPass.concat(""0"");
                CPass = CPass.concat(s);
            }
            CPass = CPass.toUpperCase();
            return CPass;
        } catch (NoSuchAlgorithmException e) {
            throw new IllegalStateException(e.getMessage());
        }
    }
",553,,LABEL_1,LABEL_0,,-4,"authenticate,module,rand,challenge,b64,reply,user,response,secrets,md4,line,passwd,hash",,,,0,,0,Greedy,1,0.0006295680999755859,,[]
437,"    private static List runITQLQuery(String itqlQuery) throws Exception {
        String escapedItqlQuery = URLEncoder.encode(itqlQuery, ""UTF-8"");
        String url = ""http://"" + Config.getProperty(""FEDORA_SOAP_HOST"") + "":"" + Config.getProperty(""FEDORA_SOAP_ACCESS_PORT"") + ""/fedora/risearch?type=tuples"" + ""&lang=iTQL"" + ""&format=CSV"" + ""&distinct=on"" + ""&stream=on"" + ""&query="" + escapedItqlQuery;
        logger.debug(""url for risearch query: "" + url);
        URL urlObject = new URL(url);
        HttpURLConnection con = (HttpURLConnection) urlObject.openConnection();
        BufferedReader br = new BufferedReader(new InputStreamReader(con.getInputStream()));
        logger.debug(""response code: "" + con.getResponseCode());
        if (con.getResponseCode() != 200 && con.getResponseCode() != 302) {
            throw new FedoraAccessException(""Could not access the risearch service at url: "" + url);
        }
        ArrayList arrayList = new ArrayList();
        String inputLine;
        int counter = 0;
        while ((inputLine = br.readLine()) != null) {
            logger.debug(""reading line:"" + inputLine);
            if (inputLine.indexOf(""<html>"") >= 0) {
                logger.error(""problem quering the relationship"");
                throw new Exception(""Problem querying relationships; probably a bad ITQL query:"" + itqlQuery);
            }
            if (counter >= 1 && inputLine.indexOf(""/"") >= 0 && inputLine.trim().length() > 0) {
                logger.debug(""adding line:"" + inputLine);
                inputLine = inputLine.substring(inputLine.indexOf(""/"") + 1);
                arrayList.add(inputLine);
                logger.debug(""found relationship to item: "" + inputLine);
            }
            counter++;
        }
        br.close();
        logger.debug(""num relationships found: "" + arrayList.size());
        return arrayList;
    }
 <SPLIT>     public static String sha1(String text) throws NoSuchAlgorithmException, UnsupportedEncodingException {
        MessageDigest md;
        md = MessageDigest.getInstance(""SHA-1"");
        byte[] sha1hash = new byte[40];
        md.update(text.getBytes(""iso-8859-1""), 0, text.length());
        sha1hash = md.digest();
        return convertToHex(sha1hash);
    }
",360,"    private static List runITQLQuery(String itqlQuery) throws Exception {
        String escapedItqlQuery = URLEncoder.encode(itqlQuery, ""UTF-8"");
        String url = ""http://"" + Config.getProperty(""FEDORA_SOAP_HOST"") + "":"" + Config.getProperty(""FEDORA_SOAP_ACCESS_PORT"") + ""/fedora/risearch?type=tuples"" + ""&lang=iTQL"" + ""&format=CSV"" + ""&distinct=on"" + ""&stream=on"" + ""&query="" + escapedItqlQuery;
        logger.debug(""url for risearch query: "" + url);
        URL httpURL = new URL(url);
        HttpURLConnection con = (HttpURLConnection) httpURL.openConnection();
        BufferedReader br = new BufferedReader(new InputStreamReader(con.getInputStream()));
        logger.debug(""response code: "" + con.getResponseCode());
        if (con.getResponseCode() != 200 && con.getResponseCode() != 302) {
            throw new FedoraAccessException(""Could not access the risearch service at url: "" + url);
        }
        ArrayList arrayList = new ArrayList();
        String inputLine;
        int counter = 0;
        while ((inputLine = br.readLine()) != null) {
            logger.debug(""reading line:"" + inputLine);
            if (inputLine.indexOf(""<html>"") >= 0) {
                logger.error(""problem quering the relationship"");
                throw new Exception(""Problem querying relationships; probably a bad ITQL query:"" + itqlQuery);
            }
            if (counter >= 1 && inputLine.indexOf(""/"") >= 0 && inputLine.trim().length() > 0) {
                logger.debug(""adding line:"" + inputLine);
                inputLine = inputLine.substring(inputLine.indexOf(""/"") + 1);
                arrayList.add(inputLine);
                logger.debug(""found relationship to item: "" + inputLine);
            }
            counter++;
        }
        br.close();
        logger.debug(""num relationships found: "" + arrayList.size());
        return arrayList;
    }
",LABEL_0,LABEL_0,LABEL_0,-1,"runITQLQuery,itqlQuery,escapedItqlQuery,url,urlObject,con,br,arrayList,inputLine,counter","runITQLQuery:0.004470407962799072,itqlQuery:0.021350741386413574,escapedItqlQuery:0.011606693267822266,url:0.0032466650009155273,urlObject:-0.010080516338348389,con:-2.6881694793701172e-05,br:-0.0061931610107421875,arrayList:-0.00023931264877319336,inputLine:0.020537853240966797,counter:0.004673600196838379,",1,2,0,"itqlQuery:itqlQuery,inputLine:inputLine,escapedItqlQuery:escapedItqlQuery,counter:counter,runITQLQuery:runITQLQuery,url:url,con:con,arrayList:arrayList,br:br,urlObject:httpURL,",0,Greedy,500,0.0814136028289795,failed,[]
438,"    public static String hashPasswordForOldMD5(String password) {
        try {
            MessageDigest md = MessageDigest.getInstance(""MD5"");
            md.update(password.getBytes(""UTF-8""));
            byte messageDigest[] = md.digest();
            StringBuffer hexString = new StringBuffer();
            for (int i = 0; i < messageDigest.length; i++) {
                String hex = Integer.toHexString(0xFF & messageDigest[i]);
                if (hex.length() == 1) {
                    hexString.append('0');
                }
                hexString.append(hex);
            }
            return hexString.toString();
        } catch (NoSuchAlgorithmException nsae) {
            throw new IllegalStateException(nsae.getMessage());
        } catch (UnsupportedEncodingException uee) {
            throw new IllegalStateException(uee.getMessage());
        }
    }
 <SPLIT>     public static Properties load(String propsName) {
        Properties props = new Properties();
        URL url = ClassLoader.getSystemResource(propsName);
        try {
            props.load(url.openStream());
        } catch (IOException e) {
            e.printStackTrace();
        }
        return props;
    }
",161,"    public static String  hashPasswordForOldMC5(String password) {
        try {
            MessageDigest md = MessageDigest.getInstance(""MD5"");
            md.update(password.getBytes(""UTF-8""));
            byte messageDigester[] = md.digest();
            StringBuffer  hexArray = new StringBuffer();
            for (int ai = 0; ai < messageDigester.length; ai++) {
                String hex = Integer.toHexString(0xFF & messageDigester[ai]);
                if (hex.length() == 1) {
                     hexArray.append('0');
                }
                 hexArray.append(hex);
            }
            return  hexArray.toString();
        } catch (NoSuchAlgorithmException nsae) {
            throw new IllegalStateException(nsae.getMessage());
        } catch (UnsupportedEncodingException uee) {
            throw new IllegalStateException(uee.getMessage());
        }
    }
",LABEL_0,LABEL_0,LABEL_0,-1,"hashPasswordForOldMD5,password,md,messageDigest,hexString,i,hex","hashPasswordForOldMD5:-0.013837456703186035,password:-0.001348257064819336,md:-0.00183868408203125,messageDigest:-0.028916120529174805,hexString:-0.031089186668395996,i:-0.00481492280960083,hex:0.0008857250213623047,",4,12,0,"hex:hex,password:password,md:md,i:ai,hashPasswordForOldMD5: hashPasswordForOldMC5,messageDigest:messageDigester,hexString: hexArray,",0,Greedy,324,0.04530423482259115,failed,[]
439,"            @Override
            protected Reader openConnection(URL url) throws IOException {
                try {
                    if (limit != null) {
                        limit.acquirePermit();
                    }
                    return super.openConnection(url);
                } catch (InterruptedException e) {
                    throw new IOException(e);
                }
            }
 <SPLIT>     private void copyParseFileToCodeFile() throws IOException {
        InputStream in = new FileInputStream(new File(filenameParse));
        OutputStream out = new FileOutputStream(new File(filenameMisc));
        byte[] buffer = new byte[1024];
        int length;
        while ((length = in.read(buffer)) > 0) out.write(buffer, 0, length);
        in.close();
        out.close();
    }
",53,"            @Override
            protected Reader createConnector(URL source) throws IOException {
                try {
                    if (limit != null) {
                        limit.acquirePermit();
                    }
                    return super.createConnector(source);
                } catch (InterruptedException e) {
                    throw new IOException(e);
                }
            }
",LABEL_0,LABEL_0,LABEL_1,1,"openConnection,url","openConnection:4.661083221435547e-05,url:-1.0728836059570312e-05,",2,4,0,"openConnection:createConnector,url:source,",0,Greedy,65,0.008827145894368489,replace,[]
440,"    public HttpResponse<E> doRequest(HttpMethods method, HttpHeader[] headers, boolean auth, URI target, BlipMessagePart body) throws HttpRequestException {
        HttpRequest<E> con = createConnection(method, target);
        if (defaultHeaders != null) {
            putHeaders(con, defaultHeaders);
        }
        if (headers != null) {
            putHeaders(con, headers);
        }
        try {
            if (auth && authStrategy != null) {
                authStrategy.perform(con);
            }
            if (body != null) {
                bodyGenerator.writeBody(con, body);
            }
            HttpResponse<E> res = execute(con);
            return res;
        } catch (IOException e) {
            throw new HttpRequestException(""Error executing request"", e);
        }
    }
 <SPLIT>     public static void copy(File srcPath, File dstPath) throws IOException {
        if (srcPath.isDirectory()) {
            if (!dstPath.exists()) {
                boolean result = dstPath.mkdir();
                if (!result) throw new IOException(""Unable to create directoy: "" + dstPath);
            }
            String[] files = srcPath.list();
            for (String file : files) {
                copy(new File(srcPath, file), new File(dstPath, file));
            }
        } else {
            if (srcPath.exists()) {
                FileChannel in = null;
                FileChannel out = null;
                try {
                    in = new FileInputStream(srcPath).getChannel();
                    out = new FileOutputStream(dstPath).getChannel();
                    long size = in.size();
                    MappedByteBuffer buf = in.map(FileChannel.MapMode.READ_ONLY, 0, size);
                    out.write(buf);
                } finally {
                    if (in != null) in.close();
                    if (out != null) out.close();
                }
            }
        }
    }
",141,"    public HttpResponse<E> DoResponse(HttpMethods Method, HttpHeader[] files, boolean home, URI external, BlipMessagePart file) throws HttpRequestException {
        HttpRequest<E> fn = createConnection(Method, external);
        if (defaultHeaders != null) {
            putHeaders(fn, defaultHeaders);
        }
        if (files != null) {
            putHeaders(fn, files);
        }
        try {
            if (home && authStrategy != null) {
                authStrategy.perform(fn);
            }
            if (file != null) {
                bodyGenerator.writeBody(fn, file);
            }
            HttpResponse<E> res = execute(fn);
            return res;
        } catch (IOException e) {
            throw new HttpRequestException(""Error executing request"", e);
        }
    }
",LABEL_0,LABEL_0,LABEL_1,1,"doRequest,method,headers,auth,target,body,con,res","doRequest:-0.00020939111709594727,method:-7.265806198120117e-05,headers:0.0008805990219116211,auth:0.0003857612609863281,target:0.0007807612419128418,body:0.00043457746505737305,con:-8.32676887512207e-05,res:-0.0006812810897827148,",7,19,0,"headers:files,target:external,body:file,auth:home,method:Method,con:fn,doRequest:DoResponse,",0,Greedy,302,0.04495929479598999,replace,[]
441,"        private void downloadFile(final String downloadUrl, final String destinationFile) throws IOException {
            HttpClient client = new DefaultHttpClient();
            HttpGet httpGet = new HttpGet(downloadUrl);
            final File outputFile = new File(destinationFile);
            createParentDirectories(outputFile);
            FileOutputStream outputStream;
            outputStream = new FileOutputStream(outputFile);
            final HttpResponse response = client.execute(httpGet);
            if (isInterrupted()) {
                outputStream.close();
                return;
            }
            final HttpEntity entity = response.getEntity();
            InputStream inputStream = null;
            try {
                if (entity != null) {
                    inputStream = entity.getContent();
                    CopyStreamStatusCallback callback = new CopyStreamStatusCallback() {

                        @Override
                        public long getSkipBetweenUpdates() {
                            return entity.getContentLength() * 2 / PERCENTAGE_BASE;
                        }

                        @Override
                        public void onUpdate(final long copiedLength) {
                            int percentage = (int) (copiedLength * PERCENTAGE_BASE / entity.getContentLength());
                            handleUpdate(STATUS_DOWNLOADING, percentage);
                        }
                    };
                    copyStreams(inputStream, outputStream, callback);
                }
            } finally {
                try {
                    outputStream.close();
                    if (inputStream != null) {
                        inputStream.close();
                    }
                } catch (IOException e) {
                    Log.v(DictionaryForMIDs.LOG_TAG, ""Exception while closing stream: "" + e);
                }
            }
        }
 <SPLIT>     private int addIDs(PeakListRow row, String name) {
        {
            BufferedReader in = null;
            try {
                String urlName = ""http://gmd.mpimp-golm.mpg.de/search.aspx?query="" + name;
                URL url = new URL(urlName);
                in = new BufferedReader(new InputStreamReader(url.openStream()));
                String inputLine, score = ""0"";
                while ((inputLine = in.readLine()) != null) {
                    String metaboliteID = """";
                    if (inputLine.contains(""href=\""Metabolites/"")) {
                        String[] dataScore = inputLine.split(""</td><td>"");
                        score = dataScore[0].substring(dataScore[0].indexOf(""<td>"") + 4);
                        metaboliteID = inputLine.substring(inputLine.indexOf(""href=\""Metabolites/"") + 18, inputLine.indexOf(""aspx\"">"") + 4);
                        urlName = ""http://gmd.mpimp-golm.mpg.de/Metabolites/"" + metaboliteID;
                        inputLine = in.readLine();
                        inputLine = in.readLine();
                        String[] data = inputLine.split(""</td><td>"");
                        String molecularWeight = data[data.length - 1].replaceAll(""&nbsp;"", """");
                        row.setVar(GCGCColumnName.MOLWEIGHT.getSetFunctionName(), molecularWeight);
                        break;
                    } else if (inputLine.contains(""href=\""Analytes/"")) {
                        String[] dataScore = inputLine.split(""</td><td>"");
                        score = dataScore[0].substring(dataScore[0].indexOf(""<td>"") + 4);
                        metaboliteID = inputLine.substring(inputLine.indexOf(""href=\""Analytes/"") + 15, inputLine.indexOf(""aspx\"">"") + 4);
                        urlName = ""http://gmd.mpimp-golm.mpg.de/Analytes/"" + metaboliteID;
                        inputLine = in.readLine();
                        inputLine = in.readLine();
                        String[] data = inputLine.split(""</td><td>"");
                        String molecularWeight = data[data.length - 1].replaceAll(""&nbsp;"", """");
                        row.setVar(GCGCColumnName.MOLWEIGHT.getSetFunctionName(), molecularWeight);
                        break;
                    } else if (inputLine.contains(""href=\""ReferenceSubstances/"")) {
                        String[] dataScore = inputLine.split(""</td><td>"");
                        score = dataScore[0].substring(dataScore[0].indexOf(""<td>"") + 4);
                        metaboliteID = inputLine.substring(inputLine.indexOf(""href=\""ReferenceSubstances/"") + 26, inputLine.indexOf(""aspx\"">"") + 4);
                        urlName = ""http://gmd.mpimp-golm.mpg.de/ReferenceSubstances/"" + metaboliteID;
                        inputLine = in.readLine();
                        inputLine = in.readLine();
                        String[] data = inputLine.split(""</td><td>"");
                        String molecularWeight = data[data.length - 1].replaceAll(""&nbsp;"", """");
                        row.setVar(GCGCColumnName.MOLWEIGHT.getSetFunctionName(), molecularWeight);
                        break;
                    }
                }
                in.close();
                urlName = searchMetabolite(urlName);
                if (urlName != null && urlName.contains("".aspx"")) {
                    url = new URL(urlName);
                    in = new BufferedReader(new InputStreamReader(url.openStream()));
                    while ((inputLine = in.readLine()) != null) {
                        if (inputLine.contains(""<meta http-equiv=\""keywords\"" content="")) {
                            String line = inputLine.substring(inputLine.indexOf(""<meta http-equiv=\""keywords\"" content="") + 37, inputLine.indexOf(""\"" /></head>""));
                            String[] names = line.split("", "");
                            for (String id : names) {
                                if (id.contains(""PubChem"")) {
                                    id = id.substring(id.indexOf(""PubChem"") + 8);
                                    String pubChem = (String) row.getVar(GCGCColumnName.PUBCHEM.getGetFunctionName());
                                    if (pubChem.length() == 0) {
                                        pubChem += id;
                                    } else {
                                        pubChem += "", "" + id;
                                    }
                                    row.setVar(GCGCColumnName.PUBCHEM.getSetFunctionName(), pubChem);
                                } else if (id.contains(""ChEBI"")) {
                                    id = id.substring(id.indexOf(""ChEBI:"") + 6);
                                    row.setVar(GCGCColumnName.ChEBI.getSetFunctionName(), id);
                                } else if (id.contains(""KEGG"")) {
                                    id = id.substring(id.indexOf(""KEGG:"") + 6);
                                    row.setVar(GCGCColumnName.KEGG.getSetFunctionName(), id);
                                } else if (id.contains(""CAS"")) {
                                    id = id.substring(id.indexOf(""CAS:"") + 5);
                                    row.setVar(GCGCColumnName.CAS2.getSetFunctionName(), id);
                                } else if (id.contains(""ChemSpider"") || id.contains(""MAPMAN"") || id.contains(""Beilstein:"")) {
                                } else {
                                    String synonym = (String) row.getVar(GCGCColumnName.SYNONYM.getGetFunctionName());
                                    if (synonym.length() == 0) {
                                        synonym += id;
                                    } else {
                                        synonym += "" // "" + id;
                                    }
                                    synonym = synonym.replaceAll(""&amp;#39;"", ""'"");
                                    row.setVar(GCGCColumnName.SYNONYM.getSetFunctionName(), synonym);
                                }
                            }
                            break;
                        }
                    }
                    in.close();
                }
                return Integer.parseInt(score);
            } catch (IOException ex) {
                Logger.getLogger(GetGolmIDsTask.class.getName()).log(Level.SEVERE, null, ex);
                return 0;
            }
        }
    }
",245,"        private void downloadFile(final String  downloadurl, final String destporaryString) throws IOException {
            HttpClient uri = new DefaultHttpClient();
            HttpGet HttpGet = new HttpGet( downloadurl);
            final File outPath = new File(destporaryString);
            createParentDirectories(outPath);
            FileOutputStream responseSteam;
            responseSteam = new FileOutputStream(outPath);
            final HttpResponse query = uri.execute(HttpGet);
            if (isInterrupted()) {
                responseSteam.close();
                return;
            }
            final HttpEntity xml = query.getEntity();
            InputStream audiostream = null;
            try {
                if (xml != null) {
                    audiostream = xml.getContent();
                    CopyStreamStatusCallback cache = new CopyStreamStatusCallback() {

                        @Override
                        public long getSkipBetweenUpdates() {
                            return xml.getContentLength() * 2 / PERCENTAGE_BASE;
                        }

                        @Override
                        public void onUpdate(final long copyiedlength) {
                            int  Percentages = (int) (copyiedlength * PERCENTAGE_BASE / xml.getContentLength());
                            handleUpdate(STATUS_DOWNLOADING,  Percentages);
                        }
                    };
                    copyStreams(audiostream, responseSteam, cache);
                }
            } finally {
                try {
                    responseSteam.close();
                    if (audiostream != null) {
                        audiostream.close();
                    }
                } catch (IOException e) {
                    Log.v(DictionaryForMIDs.LOG_TAG, ""Exception while closing stream: "" + e);
                }
            }
        }
",LABEL_0,LABEL_0,LABEL_0,-1,"downloadFile,downloadUrl,destinationFile,client,httpGet,outputFile,outputStream,response,entity,inputStream,callback,copiedLength,percentage","downloadFile:0.1596425175666809,downloadUrl:0.1563049554824829,destinationFile:0.10817974805831909,client:-0.04855877161026001,httpGet:0.1306825876235962,outputFile:0.15551894903182983,outputStream:0.055076420307159424,response:-0.02689284086227417,entity:-0.05852317810058594,inputStream:0.006804823875427246,callback:-0.019882678985595703,copiedLength:0.033435285091400146,percentage:0.0006855130195617676,",12,34,0,"downloadFile:downloadFile,downloadUrl: downloadurl,outputFile:outPath,httpGet:HttpGet,destinationFile:destporaryString,outputStream:responseSteam,copiedLength:copyiedlength,inputStream:audiostream,percentage: Percentages,callback:cache,response:query,client:uri,entity:xml,",0,Greedy,469,0.10516552925109864,failed,[]
442,"    private static void loadDefaultSettings(final String configFileName) {
        InputStream in = null;
        OutputStream out = null;
        try {
            in = Thread.currentThread().getContextClassLoader().getResourceAsStream(META_INF_DEFAULT_CONFIG_PROPERTIES);
            out = new FileOutputStream(configFileName);
            IOUtils.copy(in, out);
        } catch (final Exception e) {
            log.warn(""Unable to pull out the default."", e);
            throw new RuntimeException(e);
        } finally {
            IOUtils.closeQuietly(in);
            IOUtils.closeQuietly(out);
        }
    }
 <SPLIT>     public static String CopyFile(String sourcefile, String destfile) throws FileNotFoundException, IOException {
        int last = destfile.lastIndexOf('/');
        if (last < 0) {
            DrxWriteError(""CopyFile"", ""Destination filepath "" + destfile + "" doesn't contain /"");
            throw new java.io.FileNotFoundException(destfile);
        }
        String parent = destfile.substring(0, last);
        if (parent.length() > 0) {
            File f = new File(parent);
            if (!f.isDirectory()) {
                if (!f.mkdirs()) {
                    DrxWriteError(""CopyFile"", ""Folder "" + parent + "" doesn't exist, cannot create"");
                }
            }
        }
        FileChannel srcChannel = new FileInputStream(sourcefile).getChannel();
        FileChannel dstChannel = new FileOutputStream(destfile).getChannel();
        dstChannel.transferFrom(srcChannel, 0, srcChannel.size());
        srcChannel.close();
        dstChannel.close();
        return destfile;
    }
",102,"    private static void loadDefaultSettings(final String configFileName) {
        InputStream in = null;
        OutputStream out = null;
        try {
            in = Thread.currentThread().getContextClassLoader().getResourceAsStream(META_INF_DEFAULT_CONFIG_PROPERTIES);
            out = new FileOutputStream(configFileName);
            IOUtils.copy(in, out);
        } catch (final Exception e) {
            log.warn(""Unable to pull out the default."", e);
            throw new RuntimeException(e);
        } finally {
            IOUtils.closeQuietly(in);
            IOUtils.closeQuietly(out);
        }
    }
",LABEL_1,LABEL_1,LABEL_1,-1,"loadDefaultSettings,configFileName,in,out","loadDefaultSettings:0.002715170383453369,configFileName:0.003664553165435791,in:-0.003819763660430908,out:0.001041710376739502,",0,0,0,"configFileName:configFileName,loadDefaultSettings:loadDefaultSettings,out:out,in:in,",0,Greedy,198,0.028126076857248942,failed,[]
443,"    public static void fileCopy(String from_name, String to_name) throws IOException {
        File fromFile = new File(from_name);
        File toFile = new File(to_name);
        if (fromFile.equals(toFile)) abort(""cannot copy on itself: "" + from_name);
        if (!fromFile.exists()) abort(""no such currentSourcepartName file: "" + from_name);
        if (!fromFile.isFile()) abort(""can't copy directory: "" + from_name);
        if (!fromFile.canRead()) abort(""currentSourcepartName file is unreadable: "" + from_name);
        if (toFile.isDirectory()) toFile = new File(toFile, fromFile.getName());
        if (toFile.exists()) {
            if (!toFile.canWrite()) abort(""destination file is unwriteable: "" + to_name);
        } else {
            String parent = toFile.getParent();
            if (parent == null) abort(""destination directory doesn't exist: "" + parent);
            File dir = new File(parent);
            if (!dir.exists()) abort(""destination directory doesn't exist: "" + parent);
            if (dir.isFile()) abort(""destination is not a directory: "" + parent);
            if (!dir.canWrite()) abort(""destination directory is unwriteable: "" + parent);
        }
        FileInputStream from = null;
        FileOutputStream to = null;
        try {
            from = new FileInputStream(fromFile);
            to = new FileOutputStream(toFile);
            byte[] buffer = new byte[4096];
            int bytes_read;
            while ((bytes_read = from.read(buffer)) != -1) to.write(buffer, 0, bytes_read);
        } finally {
            if (from != null) try {
                from.close();
            } catch (IOException e) {
                ;
            }
            if (to != null) try {
                to.close();
            } catch (IOException e) {
                ;
            }
        }
    }
 <SPLIT>     public static void copyTo(File source, File dest) {
        if (source.isHidden()) ; else if (source.isDirectory()) {
            File temp = new File(dest.getPath() + ""/"" + source.getName());
            temp.mkdir();
            for (File sel : source.listFiles()) copyTo(sel, temp);
        } else {
            try {
                File tempDest = new File(dest.getPath() + ""/"" + source.getName());
                tempDest.createNewFile();
                FileChannel sourceCh = new FileInputStream(source).getChannel();
                FileChannel destCh = new FileOutputStream(tempDest).getChannel();
                sourceCh.transferTo(0, sourceCh.size(), destCh);
                sourceCh.close();
                destCh.close();
            } catch (IOException ex) {
                Logger.getLogger(EditorUtil.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }
",364,"    public static void folderCopy(String from_name, String to_path) throws IOException {
        File sourceDirectory = new File(from_name);
        File TODir = new File(to_path);
        if (sourceDirectory.equals(TODir)) abort(""cannot copy on itself: "" + from_name);
        if (!fromFile.exists()) abort(""no such currentSourcepartName file: "" + from_name);
        if (!fromFile.isFile()) abort(""can't copy directory: "" + from_name);
        if (!fromFile.canRead()) abort(""currentSourcepartName file is unreadable: "" + from_name);
        if (TODir.isDirectory()) TODir = new File(TODir, sourceDirectory.getName());
        if (TODir.exists()) {
            if (!toFile.canWrite()) abort(""destination file is unwriteable: "" + to_path);
        } else {
            String parent = TODir.getParent();
            if (parent == null) abort(""destination directory doesn't exist: "" + parent);
            File dir = new File(parent);
            if (!dir.exists()) abort(""destination directory doesn't exist: "" + parent);
            if (dir.isFile()) abort(""destination is not a directory: "" + parent);
            if (!dir.canWrite()) abort(""destination directory is unwriteable: "" + parent);
        }
        FileInputStream url = null;
        FileOutputStream db = null;
        try {
            url = new FileInputStream(sourceDirectory);
            db = new FileOutputStream(TODir);
            byte[] buffer = new byte[4096];
            int bytesESSreceived;
            while ((bytesESSreceived = url.read(buffer)) != -1) db.write(buffer, 0, bytesESSreceived);
        } finally {
            if (url != null) try {
                url.close();
            } catch (IOException e) {
                ;
            }
            if (db != null) try {
                db.close();
            } catch (IOException e) {
                ;
            }
        }
    }
",LABEL_1,LABEL_1,LABEL_0,1,"fileCopy,from_name,to_name,fromFile,toFile,parent,dir,from,to,buffer,bytes_read","fileCopy:0.052143633365631104,from_name:0.2670585513114929,to_name:0.1353258490562439,fromFile:0.15158909559249878,toFile:0.1676396131515503,parent:0.008570253849029541,dir:-0.005332231521606445,from:0.023979127407073975,to:0.02408897876739502,buffer:-0.00048738718032836914,bytes_read:0.12976348400115967,",7,33,0,"from_name:from_name,toFile:TODir,fromFile:sourceDirectory,to_name:to_path,bytes_read:bytesESSreceived,fileCopy:folderCopy,to:db,from:url,",0,Greedy,451,0.07317044734954833,replace,[]
444,"    public BufferedWriter createOutputStream(String inFile, String outFile) throws IOException {
        int k_blockSize = 1024;
        int byteCount;
        char[] buf = new char[k_blockSize];
        File ofp = new File(outFile);
        ZipOutputStream zos = new ZipOutputStream(new FileOutputStream(ofp));
        zos.setMethod(ZipOutputStream.DEFLATED);
        OutputStreamWriter osw = new OutputStreamWriter(zos, ""ISO-8859-1"");
        BufferedWriter bw = new BufferedWriter(osw);
        ZipEntry zot = null;
        File ifp = new File(inFile);
        ZipInputStream zis = new ZipInputStream(new FileInputStream(ifp));
        InputStreamReader isr = new InputStreamReader(zis, ""ISO-8859-1"");
        BufferedReader br = new BufferedReader(isr);
        ZipEntry zit = null;
        while ((zit = zis.getNextEntry()) != null) {
            if (zit.getName().equals(""content.xml"")) {
                continue;
            }
            zot = new ZipEntry(zit.getName());
            zos.putNextEntry(zot);
            while ((byteCount = br.read(buf, 0, k_blockSize)) >= 0) bw.write(buf, 0, byteCount);
            bw.flush();
            zos.closeEntry();
        }
        zos.putNextEntry(new ZipEntry(""content.xml""));
        bw.flush();
        osw = new OutputStreamWriter(zos, ""UTF8"");
        bw = new BufferedWriter(osw);
        return bw;
    }
 <SPLIT>         public void runInternal() {
            connection = null;
            boolean itemsLoadedPartially = false;
            boolean loadNext = false;
            HashSet<String> visited = new HashSet<String>();
            do {
                try {
                    setProgressMessage(url.toString(), -1);
                    visited.add(url.toString());
                    long startTimeStamp = System.currentTimeMillis();
                    delayedProgress = coolReader.getEngine().showProgressDelayed(0, progressMessage, PROGRESS_DELAY_MILLIS);
                    URLConnection conn = url.openConnection();
                    if (conn instanceof HttpsURLConnection) {
                        onError(""HTTPs is not supported yet"");
                        return;
                    }
                    if (!(conn instanceof HttpURLConnection)) {
                        onError(""Only HTTP supported"");
                        return;
                    }
                    connection = (HttpURLConnection) conn;
                    connection.setRequestProperty(""User-Agent"", ""CoolReader/3(Android)"");
                    if (referer != null) connection.setRequestProperty(""Referer"", referer);
                    connection.setInstanceFollowRedirects(true);
                    connection.setAllowUserInteraction(false);
                    connection.setConnectTimeout(CONNECT_TIMEOUT);
                    connection.setReadTimeout(READ_TIMEOUT);
                    connection.setDoInput(true);
                    String fileName = null;
                    String disp = connection.getHeaderField(""Content-Disposition"");
                    if (disp != null) {
                        int p = disp.indexOf(""filename="");
                        if (p > 0) {
                            fileName = disp.substring(p + 9);
                        }
                    }
                    int response = -1;
                    response = connection.getResponseCode();
                    L.d(""Response: "" + response);
                    if (response != 200) {
                        onError(""Error "" + response);
                        return;
                    }
                    String contentType = connection.getContentType();
                    String contentEncoding = connection.getContentEncoding();
                    int contentLen = connection.getContentLength();
                    L.d(""Entity content length: "" + contentLen);
                    L.d(""Entity content type: "" + contentType);
                    L.d(""Entity content encoding: "" + contentEncoding);
                    setProgressMessage(url.toString(), contentLen);
                    InputStream is = connection.getInputStream();
                    delayedProgress.cancel();
                    is = new ProgressInputStream(is, startTimeStamp, progressMessage, contentLen, 80);
                    final int MAX_CONTENT_LEN_TO_BUFFER = 256 * 1024;
                    boolean isZip = contentType != null && contentType.equals(""application/zip"");
                    if (expectedType != null) contentType = expectedType; else if (contentLen > 0 && contentLen < MAX_CONTENT_LEN_TO_BUFFER) {
                        byte[] buf = new byte[contentLen];
                        if (is.read(buf) != contentLen) {
                            onError(""Wrong content length"");
                            return;
                        }
                        is.close();
                        is = null;
                        is = new ByteArrayInputStream(buf);
                        if (findSubstring(buf, ""<?xml version="") >= 0 && findSubstring(buf, ""<feed"") >= 0) contentType = ""application/atom+xml"";
                    }
                    if (contentType.startsWith(""application/atom+xml"")) {
                        L.d(""Parsing feed"");
                        parseFeed(is);
                        itemsLoadedPartially = true;
                        if (handler.docInfo.nextLink != null && handler.docInfo.nextLink.type.startsWith(""application/atom+xml;profile=opds-catalog"")) {
                            if (handler.entries.size() < MAX_OPDS_ITEMS) {
                                url = new URL(handler.docInfo.nextLink.href);
                                loadNext = !visited.contains(url.toString());
                                L.d(""continue with next part: "" + url);
                            } else {
                                L.d(""max item count reached: "" + handler.entries.size());
                                loadNext = false;
                            }
                        } else {
                            loadNext = false;
                        }
                    } else {
                        if (fileName == null) fileName = defaultFileName;
                        L.d(""Downloading book: "" + contentEncoding);
                        downloadBook(contentType, url.toString(), is, contentLen, fileName, isZip);
                        if (progressShown) coolReader.getEngine().hideProgress();
                        loadNext = false;
                        itemsLoadedPartially = false;
                    }
                } catch (Exception e) {
                    L.e(""Exception while trying to open URI "" + url.toString(), e);
                    if (progressShown) coolReader.getEngine().hideProgress();
                    onError(""Error occured while reading OPDS catalog"");
                    break;
                } finally {
                    if (connection != null) try {
                        connection.disconnect();
                    } catch (Exception e) {
                    }
                }
            } while (loadNext);
            if (progressShown) coolReader.getEngine().hideProgress();
            if (itemsLoadedPartially) BackgroundThread.guiExecutor.execute(new Runnable() {

                @Override
                public void run() {
                    L.d(""Parsing is finished successfully. "" + handler.entries.size() + "" entries found"");
                    callback.onFinish(handler.docInfo, handler.entries);
                }
            });
        }
",279,,LABEL_0,LABEL_1,,-4,"createOutputStream,inFile,outFile,k_blockSize,byteCount,buf,ofp,zos,osw,bw,zot,ifp,zis,isr,br,zit",,,,0,,0,Greedy,1,0.0008506536483764649,,[]
445,"    private boolean copyFile(File _file1, File _file2) {
        FileInputStream fis;
        FileOutputStream fos;
        try {
            fis = new FileInputStream(_file1);
            fos = new FileOutputStream(_file2);
            FileChannel canalFuente = fis.getChannel();
            canalFuente.transferTo(0, canalFuente.size(), fos.getChannel());
            fis.close();
            fos.close();
            return true;
        } catch (FileNotFoundException e) {
        } catch (IOException e) {
        }
        return false;
    }
 <SPLIT>     private static void copyFiles(String strPath, String dstPath) throws Exception {
        File src = new File(strPath);
        File dest = new File(dstPath);
        if (src.isDirectory()) {
            dest.mkdirs();
            String list[] = src.list();
            for (int i = 0; i < list.length; i++) {
                String dest1 = dest.getAbsolutePath() + ""\\"" + list[i];
                String src1 = src.getAbsolutePath() + ""\\"" + list[i];
                copyFiles(src1, dest1);
            }
        } else {
            FileChannel sourceChannel = new FileInputStream(src).getChannel();
            FileChannel targetChannel = new FileOutputStream(dest).getChannel();
            sourceChannel.transferTo(0, sourceChannel.size(), targetChannel);
            sourceChannel.close();
            targetChannel.close();
        }
    }
",98,"    private boolean copyFile(File _mail01, File jmodel5) {
        FileInputStream lfiss;
        FileOutputStream gus;
        try {
            lfiss = new FileInputStream(_mail01);
            gus = new FileOutputStream(jmodel5);
            FileChannel canallFuencia = lfiss.getChannel();
            canallFuencia.transferTo(0, canallFuencia.size(), gus.getChannel());
            lfiss.close();
            gus.close();
            return true;
        } catch (FileNotFoundException e) {
        } catch (IOException e) {
        }
        return false;
    }
",LABEL_1,LABEL_1,LABEL_1,-1,"copyFile,_file1,_file2,fis,fos,canalFuente","copyFile:-0.008822143077850342,_file1:-0.012212812900543213,_file2:-0.023553848266601562,fis:-0.033860623836517334,fos:-0.04287666082382202,canalFuente:-0.023900151252746582,",5,15,0,"copyFile:copyFile,_file1:_mail01,_file2:jmodel5,canalFuente:canallFuencia,fis:lfiss,fos:gus,",0,Greedy,242,0.034356749057769774,failed,[]
446,"    static File copy(File in, File out) throws IOException {
        FileChannel inChannel = new FileInputStream(in).getChannel();
        FileChannel outChannel = new FileOutputStream(out).getChannel();
        try {
            inChannel.transferTo(0, inChannel.size(), outChannel);
            return out;
        } catch (IOException e) {
            throw e;
        } finally {
            if (inChannel != null) inChannel.close();
            if (outChannel != null) outChannel.close();
        }
    }
 <SPLIT>     private File extractUninstallFiles(File _destPath, boolean upgrade, String lastVer) {
        File oldlog = null;
        try {
            boolean oldClassCopied = false;
            File destPath = new File(_destPath, ""vai_"" + VAGlobals.APP_NAME + ""_"" + VAGlobals.APP_VERSION);
            if (upgrade) {
                File lastVerPath = new File(_destPath, ""vai_"" + VAGlobals.APP_NAME + ""_"" + lastVer);
                if (destPath.equals(lastVerPath)) {
                    File bkdir = new File(destPath.getAbsolutePath() + "".bak"");
                    if (!destPath.renameTo(bkdir)) {
                        throw new IOException(VAGlobals.i18n(""Setup_NotCreateDirectory"") + "" "" + destPath);
                    }
                    oldlog = new File(bkdir.getAbsolutePath() + System.getProperty(""file.separator"") + ""uninstall.vai"");
                    lastVerPath = bkdir;
                } else {
                    oldlog = new File(lastVerPath.getAbsolutePath() + System.getProperty(""file.separator"") + ""uninstall.vai"");
                }
                if ((!destPath.exists()) && (!destPath.mkdirs())) {
                    throw new IOException(VAGlobals.i18n(""Setup_NotCreateDirectory"") + "" "" + destPath);
                }
                if (uInfo_.module) oldClassCopied = copyOldSetupClass(lastVerPath, destPath);
            } else {
                if ((!destPath.exists()) && (!destPath.mkdirs())) {
                    throw new IOException(VAGlobals.i18n(""Setup_NotCreateDirectory"") + "" "" + destPath);
                }
            }
            dirty_ = true;
            File[] ls = destPath.listFiles();
            for (int i = 0; i < ls.length; i++) {
                if (!oldClassCopied) ls[i].delete(); else if (!ls[i].getPath().equals(destPath.getAbsolutePath() + File.separator + installClassName_ + "".class"")) ls[i].delete();
            }
            byte[] buf = new byte[0];
            int read = 0;
            if (!oldClassCopied && (installClassSize_ > 0 || jarOffset_ > 0)) {
                final File outClassFile = new File(destPath.getAbsolutePath() + File.separator + installClassName_ + "".class"");
                if (outClassFile.exists() && !outClassFile.delete()) {
                    ui_.showError(new Exception(VAGlobals.i18n(""Setup_FileNotCreated"") + "":\n"" + outClassFile.getName()));
                }
                final FileOutputStream out = new FileOutputStream(outClassFile);
                final FileInputStream in = new FileInputStream(fileWithArchive_);
                if (installClassOffset_ > 0) {
                    in.skip(installClassOffset_);
                }
                buf = new byte[0];
                if (installClassSize_ < 0) buf = new byte[(int) jarOffset_]; else buf = new byte[(int) installClassSize_];
                read = in.read(buf, 0, buf.length);
                out.write(buf, 0, read);
                out.close();
                in.close();
            }
            final FileInputStream in = new FileInputStream(fileWithArchive_);
            if (jarOffset_ > 0) {
                in.skip(jarOffset_);
            }
            JarInputStream jar = new JarInputStream(in);
            final File outJarFile = new File(destPath.getAbsolutePath() + File.separator + ""install.jar"");
            if (outJarFile.exists() && !outJarFile.delete()) {
                ui_.showError(new Exception(VAGlobals.i18n(""Setup_FileNotCreated"") + "":\n"" + outJarFile.getName()));
            }
            JarOutputStream outJar = new JarOutputStream(new FileOutputStream(outJarFile));
            ZipEntry entry = jar.getNextEntry();
            final int bufSize = 32768;
            buf = new byte[bufSize];
            while (entry != null) {
                String entryName = entry.getName();
                if (entryName.equals(""com/memoire/vainstall/resources/vainstall.properties"")) {
                } else if (entryName.equals(installClassName_ + "".class"") && !oldClassCopied) {
                    FileOutputStream out = null;
                    try {
                        out = new FileOutputStream(destPath.getAbsolutePath() + File.separator + installClassName_ + "".class"");
                        VAGlobals.copyStream(jar, out, buf);
                    } catch (IOException e) {
                        throw e;
                    } finally {
                        if (out != null) out.close();
                    }
                } else if (!entryName.endsWith("".zip"")) {
                    if (VAGlobals.DEBUG) VAGlobals.printDebug(""jar entry name "" + entryName);
                    ZipEntry outEntry = new ZipEntry(entryName);
                    CRC32 crc = new CRC32();
                    outJar.putNextEntry(outEntry);
                    int size = 0;
                    while ((read = jar.read(buf, 0, bufSize)) >= 0) {
                        size += read;
                        if (read == 0) {
                            Thread.yield();
                        } else {
                            outJar.write(buf, 0, read);
                            crc.update(buf, 0, read);
                        }
                    }
                    outEntry.setSize(size);
                    outEntry.setCrc(crc.getValue());
                    outJar.flush();
                    outJar.closeEntry();
                }
                jar.closeEntry();
                entry = jar.getNextEntry();
            }
            InputStream pin = getClass().getResourceAsStream(""resources/vainstall.properties"");
            Properties prop = new Properties();
            try {
                prop.load(pin);
            } catch (IOException exc) {
            }
            if (language == null) language = ""default"";
            prop.setProperty(""vainstall.destination.language"", language);
            ZipEntry outEntry = new ZipEntry(""com/memoire/vainstall/resources/vainstall.properties"");
            CRC32 crc = new CRC32();
            outEntry.setCrc(crc.getValue());
            outEntry.setSize(prop.size());
            outJar.putNextEntry(outEntry);
            prop.store(outJar, VAGlobals.NAME + "" "" + VAGlobals.VERSION);
            outEntry.setCrc(crc.getValue());
            outJar.closeEntry();
            jar.close();
            outJar.close();
            in.close();
        } catch (IOException e) {
            String message = e.getLocalizedMessage();
            message += ""\n"" + VAGlobals.i18n(""Setup_ErrorUninstallScripts"");
            e.printStackTrace();
            exitOnError(new IOException(message));
        }
        return oldlog;
    }
",99,"    static File exec(File url, File url) throws IOException {
        FileChannel iniGate = new FileInputStream(url).getChannel();
        FileChannel inChan = new FileOutputStream(url).getChannel();
        try {
            iniGate.transferTo(0, iniGate.size(), inChan);
            return url;
        } catch (IOException e) {
            throw e;
        } finally {
            if (iniGate != null) iniGate.close();
            if (inChan != null) inChan.close();
        }
    }
",LABEL_1,LABEL_1,LABEL_0,1,"copy,in,out,inChannel,outChannel","copy:-0.00528264045715332,in:-0.0013335347175598145,out:-0.004250228404998779,inChannel:-0.0032438039779663086,outChannel:-0.00113755464553833,",5,15,0,"outChannel:inChan,in:url,inChannel:iniGate,out:url,copy:exec,",0,Greedy,204,0.04340058167775472,replace,[]
447,"    public Long split(File targetDirectory, String prefix, long maxUnitBases, long maxUnitEntries) throws Exception {
        if (!targetDirectory.exists()) {
            if (!targetDirectory.mkdirs()) throw new Exception(""Could not create target directory "" + targetDirectory.getAbsolutePath());
        }
        if (!size.isUnknown() && size.getBases() < maxUnitBases && (maxUnitEntries <= 0 || size.getEntries() < maxUnitEntries)) {
            FileInputStream fis = new FileInputStream(this);
            FileChannel fci = fis.getChannel();
            FileOutputStream fos = new FileOutputStream(new File(targetDirectory, prefix + ""_0"" + "".fasta""));
            FileChannel fco = fos.getChannel();
            ByteBuffer buffer = ByteBuffer.allocate(64000);
            while (fci.read(buffer) > 0) {
                buffer.flip();
                fco.write(buffer);
                buffer.clear();
            }
            fci.close();
            fco.close();
            return (long) 1;
        } else {
            long currentBasesCount = 0;
            long currentEntriesCount = 0;
            int targetCount = 0;
            FileChannel fastaChannel = new FileInputStream(this).getChannel();
            int totalSeqCount = 0;
            long totalResiduesCount = 0;
            try {
                long prevTime = System.currentTimeMillis();
                long fastaFileSize = this.length();
                long fastaFileReadOffset = 0L;
                long partitionStartOffset = 0L;
                final int bufferSize = 1024 * 1024;
                ByteBuffer fastaBuffer = ByteBuffer.allocateDirect(bufferSize);
                int fastaReadState = FASTAFileTokenizer.UNKNOWN;
                for (; fastaFileReadOffset < fastaFileSize; ) {
                    long nBytes = fastaChannel.read(fastaBuffer);
                    if (nBytes <= 0) {
                        fastaBuffer.limit(0);
                        break;
                    } else {
                        fastaBuffer.flip();
                        fastaFileReadOffset += nBytes;
                    }
                    for (; ; ) {
                        if (!fastaBuffer.hasRemaining()) {
                            fastaBuffer.clear();
                            break;
                        }
                        int b = fastaBuffer.get();
                        if (b == '\r') {
                        } else if (b == '\n') {
                            if (fastaReadState == FASTAFileTokenizer.DEFLINE) {
                                fastaReadState = FASTAFileTokenizer.SEQUENCELINE;
                            }
                        } else if (b == '>') {
                            if (fastaReadState == FASTAFileTokenizer.UNKNOWN) {
                                fastaReadState = FASTAFileTokenizer.STARTDEFLINE;
                            } else if (fastaReadState == FASTAFileTokenizer.SEQUENCELINE) {
                                fastaReadState = FASTAFileTokenizer.STARTDEFLINE;
                            }
                            if (fastaReadState == FASTAFileTokenizer.STARTDEFLINE) {
                                if (currentBasesCount >= maxUnitBases || maxUnitEntries > 0 && currentEntriesCount >= maxUnitEntries) {
                                    fastaBuffer.position(fastaBuffer.position() - 1);
                                    long currentTime = System.currentTimeMillis();
                                    System.out.println(new java.util.Date() + "" Partition "" + targetCount + "" containing "" + currentEntriesCount + "" sequences and "" + currentBasesCount + "" residues ends at "" + (fastaFileReadOffset - fastaBuffer.remaining()) + "" and was created in "" + (currentTime - prevTime) + "" ms"");
                                    prevTime = currentTime;
                                    long partitionEndOffset = fastaFileReadOffset - fastaBuffer.remaining();
                                    FileChannel partitionChannel = new FileOutputStream(new File(targetDirectory, prefix + ""_"" + targetCount + "".fasta"")).getChannel();
                                    nBytes = fastaChannel.transferTo(partitionStartOffset, partitionEndOffset - partitionStartOffset, partitionChannel);
                                    partitionChannel.force(true);
                                    partitionChannel.close();
                                    targetCount++;
                                    partitionStartOffset += nBytes;
                                    currentBasesCount = 0;
                                    currentEntriesCount = 0;
                                    fastaReadState = FASTAFileTokenizer.UNKNOWN;
                                } else {
                                    fastaReadState = FASTAFileTokenizer.DEFLINE;
                                    currentEntriesCount++;
                                }
                                totalSeqCount++;
                            }
                        } else {
                            if (fastaReadState == FASTAFileTokenizer.SEQUENCELINE) {
                                totalResiduesCount++;
                                currentBasesCount++;
                            }
                        }
                    }
                }
                if (partitionStartOffset < fastaFileSize) {
                    long currentTime = System.currentTimeMillis();
                    System.out.println(new java.util.Date() + "" Partition "" + targetCount + "" containing "" + currentEntriesCount + "" sequences and "" + currentBasesCount + "" residues ends at "" + (fastaFileSize) + "" and was created in "" + (currentTime - prevTime) + "" ms"");
                    FileChannel partitionChannel = new FileOutputStream(new File(targetDirectory, prefix + ""_"" + targetCount + "".fasta"")).getChannel();
                    fastaChannel.transferTo(partitionStartOffset, fastaFileSize - partitionStartOffset, partitionChannel);
                    partitionChannel.force(true);
                    partitionChannel.close();
                    targetCount++;
                }
                if (size.isUnknown()) {
                    size.setBases(totalResiduesCount);
                    size.setEntries(totalSeqCount);
                }
            } finally {
                fastaChannel.close();
            }
            return (long) targetCount;
        }
    }
 <SPLIT>     public NodeId generateTopicId(String topicName) {
        MessageDigest md = null;
        try {
            md = MessageDigest.getInstance(""SHA"");
        } catch (NoSuchAlgorithmException e) {
            System.err.println(""No SHA support!"");
        }
        if (m_ready) System.out.println(""Scribe is ready at"" + getNodeId() + "" , topic is "" + topicName);
        md.update(topicName.getBytes());
        byte[] digest = md.digest();
        NodeId newId = new NodeId(digest);
        return newId;
    }
",862,,LABEL_0,LABEL_1,,-4,"split,targetDirectory,prefix,maxUnitBases,maxUnitEntries,fis,fci,fos,fco,buffer,currentBasesCount,currentEntriesCount,targetCount,fastaChannel,totalSeqCount,totalResiduesCount,prevTime,fastaFileSize,fastaFileReadOffset,partitionStartOffset,bufferSize,fastaBuffer,fastaReadState,nBytes",,,,0,,0,Greedy,1,0.0009134093920389811,,[]
448,"    public void cpFile(File source, File target, boolean replace, int bufferSize) throws IOException {
        if (!source.exists()) throw new IOException(""source file not exists"");
        if (!source.isFile()) throw new IOException(""source file not exists(is a directory)"");
        InputStream src = new FileInputStream(source);
        File tarn = target;
        if (target.isDirectory() || !(!(target.exists()) || replace)) {
            String tardir = target.isDirectory() ? target.getPath() : target.getParent();
            tarn = new File(tardir + File.separator + source.getName());
            int n = 1;
            while (!(!tarn.exists() || replace)) {
                tarn = new File(tardir + File.separator + String.valueOf(n) + "" copy of "" + source.getName());
                n++;
            }
        }
        if (source.getPath().equals(tarn.getPath()) && replace) return;
        OutputStream tar = new FileOutputStream(tarn);
        byte[] bytes = new byte[bufferSize];
        int readn = -1;
        while ((readn = src.read(bytes)) > 0) {
            tar.write(bytes, 0, readn);
        }
        tar.flush();
        tar.close();
        src.close();
    }
 <SPLIT>     public static void main(String[] args) throws Exception {
        if (args.length != 2) {
            System.out.println(""Usage:  URLDumper <URL> <file>"");
            System.exit(1);
        }
        String location = args[0];
        String file = args[1];
        URL url = new URL(location);
        FileOutputStream fos = new FileOutputStream(file);
        byte[] bytes = new byte[4096];
        InputStream is = url.openStream();
        int read;
        while ((read = is.read(bytes)) != -1) {
            fos.write(bytes, 0, read);
        }
        is.close();
        fos.close();
    }
",280,,LABEL_0,LABEL_1,,-4,"cpFile,source,target,replace,bufferSize,src,tarn,tardir,n,tar,bytes,readn",,,,0,,0,Greedy,1,0.0004119714101155599,,[]
449,"    private static long copy(InputStream source, OutputStream sink) {
        try {
            return IOUtils.copyLarge(source, sink);
        } catch (IOException e) {
            logger.error(e.toString(), e);
            throw new FaultException(""System error copying stream"", e);
        } finally {
            IOUtils.closeQuietly(source);
            IOUtils.closeQuietly(sink);
        }
    }
 <SPLIT>     public Object execute(ExecutionEvent event) throws ExecutionException {
        try {
            Shell shell = PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell();
            QuizTreeView view = (QuizTreeView) PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage().showView(""org.rcpquizengine.views.quizzes"");
            Folder rootFolder = view.getRootFolder();
            if (rootFolder.isEncrypted()) {
                PasswordDialog dialog = new PasswordDialog(shell);
                if (dialog.open() == Window.OK) {
                    String password = dialog.getPassword();
                    if (!password.equals("""")) {
                        String md5 = """";
                        MessageDigest md = MessageDigest.getInstance(""MD5"");
                        md.update(password.getBytes());
                        md5 = new BigInteger(md.digest()).toString();
                        if (rootFolder.getMd5Digest().equals(md5)) {
                            rootFolder.setMd5Digest("""");
                            rootFolder.setEncrypted(false);
                            MessageDialog.openInformation(shell, ""Quiz bank unlocked"", ""The current quiz bank has been unlocked"");
                        } else {
                            MessageDialog.openError(shell, ""Error unlocking quiz bank"", ""Incorrect password"");
                        }
                        password = """";
                        md5 = """";
                    }
                }
            } else {
                MessageDialog.openError(shell, ""Error unlocking quiz bank"", ""Quiz bank already unlocked"");
            }
        } catch (PartInitException e) {
            e.printStackTrace();
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        }
        return null;
    }
",75,"    private static long copy(InputStream source, OutputStream sink) {
        try {
            return IOUtils.copyLarge(source, sink);
        } catch (IOException e) {
            logger.error(e.toString(), e);
            throw new FaultException(""System error copying stream"", e);
        } finally {
            IOUtils.closeQuietly(source);
            IOUtils.closeQuietly(sink);
        }
    }
",LABEL_0,LABEL_0,LABEL_0,-1,"copy,source,sink","copy:-0.004110276699066162,source:-0.0035010576248168945,sink:-0.009588837623596191,",0,0,0,"source:source,copy:copy,sink:sink,",0,Greedy,115,0.017647190888722738,failed,[]
450,"    private static void copyFile(File in, File out) {
        try {
            FileChannel sourceChannel = new FileInputStream(in).getChannel();
            FileChannel destinationChannel = new FileOutputStream(out).getChannel();
            sourceChannel.transferTo(0, sourceChannel.size(), destinationChannel);
            sourceChannel.close();
            destinationChannel.close();
        } catch (IOException ex) {
            ex.printStackTrace();
        }
    }
 <SPLIT>     public void doUpdateByLoginID() throws Exception {
        if (!isValidate()) {
            throw new CesSystemException(""User_session.doUpdateByLoginID(): Illegal data values for update"");
        }
        Connection con = null;
        PreparedStatement ps = null;
        String strQuery = ""UPDATE "" + Common.USER_SESSION_TABLE + "" SET "" + ""session_id = ?, user_id = ?, begin_date = ? , "" + ""ip_address = ?, mac_no = ? "" + ""WHERE  login_id= ?"";
        DBOperation dbo = factory.createDBOperation(POOL_NAME);
        try {
            con = dbo.getConnection();
            con.setAutoCommit(false);
            ps = con.prepareStatement(strQuery);
            ps.setString(1, this.sessionID);
            ps.setInt(2, this.user.getUserID());
            ps.setTimestamp(3, this.beginDate);
            ps.setString(4, this.ipAddress);
            ps.setString(5, this.macNO);
            ps.setString(6, this.loginID);
            int resultCount = ps.executeUpdate();
            if (resultCount != 1) {
                con.rollback();
                throw new CesSystemException(""User_session.doUpdateByLoginID(): ERROR updating data in T_SYS_USER_SESSION!! "" + ""resultCount = "" + resultCount);
            }
            con.commit();
        } catch (SQLException se) {
            if (con != null) {
                con.rollback();
            }
            throw new CesSystemException(""User_session.doUpdateByLoginID(): SQLException while updating user_session; "" + ""session_id = "" + this.sessionID + "" :\n\t"" + se);
        } finally {
            con.setAutoCommit(true);
            closePreparedStatement(ps);
            closeConnection(dbo);
        }
    }
",83,"    private static void transferFiles(File url, File cache) {
        try {
            FileChannel SourceChannel = new FileInputStream(url).getChannel();
            FileChannel DestinationConnection = new FileOutputStream(cache).getChannel();
            SourceChannel.transferTo(0, SourceChannel.size(), DestinationConnection);
            SourceChannel.close();
            DestinationConnection.close();
        } catch (IOException ex) {
            ex.printStackTrace();
        }
    }
",LABEL_0,LABEL_0,LABEL_0,-1,"copyFile,in,out,sourceChannel,destinationChannel","copyFile:-0.003632843494415283,in:-0.013080418109893799,out:-0.019147872924804688,sourceChannel:0.0068991780281066895,destinationChannel:0.010837793350219727,",5,12,0,"destinationChannel:DestinationConnection,sourceChannel:SourceChannel,copyFile:transferFiles,in:url,out:cache,",0,Greedy,188,0.02918597459793091,failed,[]
451,"    private static void sendExceptionToServer(String server, Throwable ex, String config, String prob) {
        try {
            StringBuilder dataSB = new StringBuilder();
            dataSB.append(URLEncoder.encode(""secret"", ""UTF-8""));
            dataSB.append('=');
            dataSB.append(URLEncoder.encode(""badsecurity"", ""UTF-8""));
            dataSB.append('&');
            dataSB.append(URLEncoder.encode(""version"", ""UTF-8""));
            dataSB.append('=');
            dataSB.append(URLEncoder.encode(BuildInfo.revisionNumber, ""UTF-8""));
            dataSB.append('&');
            dataSB.append(URLEncoder.encode(""os"", ""UTF-8""));
            dataSB.append('=');
            dataSB.append(URLEncoder.encode(System.getProperty(""os.name"") + "" "" + System.getProperty(""os.version""), ""UTF-8""));
            dataSB.append('&');
            dataSB.append(URLEncoder.encode(""user"", ""UTF-8""));
            dataSB.append('=');
            dataSB.append(URLEncoder.encode(System.getProperty(""user.name""), ""UTF-8""));
            dataSB.append('&');
            dataSB.append(URLEncoder.encode(""msg"", ""UTF-8""));
            dataSB.append('=');
            dataSB.append(URLEncoder.encode(ex.getMessage(), ""UTF-8""));
            ByteArrayOutputStream trace = new ByteArrayOutputStream();
            ex.printStackTrace(new PrintStream(trace));
            dataSB.append('&');
            dataSB.append(URLEncoder.encode(""trace"", ""UTF-8""));
            dataSB.append('=');
            dataSB.append(URLEncoder.encode(trace.toString(), ""UTF-8""));
            if (config != null) {
                dataSB.append('&');
                dataSB.append(URLEncoder.encode(""config"", ""UTF-8""));
                dataSB.append('=');
                dataSB.append(URLEncoder.encode(config, ""UTF-8""));
            }
            if (prob != null) {
                dataSB.append('&');
                dataSB.append(URLEncoder.encode(""problem"", ""UTF-8""));
                dataSB.append('=');
                dataSB.append(URLEncoder.encode(prob, ""UTF-8""));
            }
            URL url = new URL(errorServerURL);
            URLConnection conn = url.openConnection();
            conn.setDoOutput(true);
            OutputStreamWriter wr = new OutputStreamWriter(conn.getOutputStream());
            wr.write(dataSB.toString());
            wr.flush();
            BufferedReader rd = new BufferedReader(new InputStreamReader(conn.getInputStream()));
            String response = null;
            String line = null;
            while ((line = rd.readLine()) != null) {
                if (response == null) response = line; else System.out.println(line);
            }
            wr.close();
            rd.close();
            if (response.equals(""success"")) System.out.println(""Exception sent to maRla development team""); else System.out.println(""Unable to send exception to development team: "" + response);
        } catch (IOException ex2) {
            System.out.println(""Unable to send exception to development team: "" + ex2.getMessage());
        }
    }
 <SPLIT>     public static void doVersionCheck(View view) {
        view.showWaitCursor();
        try {
            URL url = new URL(jEdit.getProperty(""version-check.url""));
            InputStream in = url.openStream();
            BufferedReader bin = new BufferedReader(new InputStreamReader(in));
            String line;
            String version = null;
            String build = null;
            while ((line = bin.readLine()) != null) {
                if (line.startsWith("".version"")) version = line.substring(8).trim(); else if (line.startsWith("".build"")) build = line.substring(6).trim();
            }
            bin.close();
            if (version != null && build != null) {
                if (jEdit.getBuild().compareTo(build) < 0) newVersionAvailable(view, version, url); else {
                    GUIUtilities.message(view, ""version-check"" + "".up-to-date"", new String[0]);
                }
            }
        } catch (IOException e) {
            String[] args = { jEdit.getProperty(""version-check.url""), e.toString() };
            GUIUtilities.error(view, ""read-error"", args);
        }
        view.hideWaitCursor();
    }
",672,,LABEL_1,LABEL_0,,-4,"sendExceptionToServer,server,ex,config,prob,dataSB,trace",,,,0,,0,Greedy,1,0.0007382829984029134,,[]
452,"    public static boolean encodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }
 <SPLIT>     public static void main(final String[] args) throws RecognitionException, TokenStreamException, IOException, IllegalOptionValueException, UnknownOptionException {
        try {
            CmdLineParser cmdLineParser = new CmdLineParser();
            Option formatOption = cmdLineParser.addStringOption('f', ""format"");
            Option outputEncodingOption = cmdLineParser.addStringOption('c', ""outcharset"");
            Option inputEncodingOption = cmdLineParser.addStringOption('i', ""incharset"");
            cmdLineParser.parse(args);
            String format = (String) cmdLineParser.getOptionValue(formatOption);
            String outputEncoding = (String) cmdLineParser.getOptionValue(outputEncodingOption);
            if (outputEncoding == null || outputEncoding.trim().equals("""")) {
                outputEncoding = ""utf-8"";
                System.out.println(""Defaulting to output charset utf-8 as argument -c is missing or not valid."");
            }
            String inputEncoding = (String) cmdLineParser.getOptionValue(inputEncodingOption);
            if (inputEncoding == null || outputEncoding.trim().equals("""")) {
                inputEncoding = ""utf-8"";
                System.out.println(""Defaulting to input charset utf-8 as argument -i is missing or not valid."");
            }
            String[] remainingArgs = cmdLineParser.getRemainingArgs();
            if (remainingArgs.length != 2) {
                printUsage(""Input and output file are not specified correctly. "");
            }
            File inputFile = new File(remainingArgs[0]);
            if (!inputFile.exists()) {
                printUsage(""Input file "" + remainingArgs[0] + "" does not exist. "");
            }
            if (format == null || format.trim().equals("""")) {
                format = (String) FileUtil.cutExtension(inputFile.getName()).getValue();
            }
            File outputFile = new File(remainingArgs[1]);
            if (!outputFile.exists()) {
                outputFile.createNewFile();
            }
            System.out.println(""format detected: "" + format);
            if (""html"".equals(format)) {
                Reader reader = new HtmlEntityDecoderReader(new InputStreamReader(new FileInputStream(inputFile), inputEncoding));
                OutputStreamWriter out = new OutputStreamWriter(new FileOutputStream(outputFile), outputEncoding);
                char[] buffer = new char[1024];
                int read;
                do {
                    read = reader.read(buffer);
                    if (read > 0) {
                        out.write(buffer, 0, read);
                    }
                } while (read != -1);
                out.flush();
                out.close();
            } else {
                printUsage(""Format not specified via argument -f. Also guessing for the extension of input file "" + inputFile.getName() + "" failed"");
            }
        } catch (Exception ex) {
            ex.printStackTrace();
            printUsage(ex.getMessage());
        }
    }
",194,"    public static boolean encodeFileToFile(String infile, String outfile) {
        boolean response = false;
        java.io.InputStream in = null;
        java.io.OutputStream post = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);
            post = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] url = new byte[65536];
            int read = -1;
            while ((read = in.read(url)) >= 0) {
                post.write(url, 0, read);
            }
            response = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                post.close();
            } catch (Exception exc) {
            }
        }
        return response;
    }
",LABEL_1,LABEL_1,LABEL_0,1,"encodeFileToFile,infile,outfile,in,out,buffer,read,success","encodeFileToFile:0.0010051131248474121,infile:0.01110982894897461,outfile:0.006501972675323486,in:-0.012176811695098877,out:-0.003839433193206787,buffer:-0.001816093921661377,read:-0.0004526376724243164,success:-0.0036259889602661133,",3,10,0,"infile:infile,outfile:outfile,encodeFileToFile:encodeFileToFile,read:read,buffer:url,success:response,out:post,",0,Greedy,307,0.052581385771433516,replace,[]
453,"    private void UploadActionPerformed(ActionEvent evt) {
        JFileChooser chooser = new JFileChooser();
        FileNameExtensionFilter filter = new FileNameExtensionFilter(""*.jpg"", ""jpg"");
        chooser.setFileFilter(filter);
        File dir = new File(System.getProperty(""user.home""));
        chooser.setCurrentDirectory(dir);
        Component parent = null;
        int returnVal = chooser.showOpenDialog(parent);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            UserStatus.setText(""Bitte warten"");
        }
        try {
            Pic.setVisible(false);
            FTPClient client = new FTPClient();
            client.connect(""showus.de"");
            client.login(""web2"", ""kcinnay88"");
            client.enterLocalActiveMode();
            client.setFileTransferMode(FTPClient.BINARY_FILE_TYPE);
            client.setFileType(FTPClient.BINARY_FILE_TYPE);
            int reply = client.getReplyCode();
            System.out.println(""Connect returned: "" + reply);
            FileInputStream in = new FileInputStream(chooser.getSelectedFile().getAbsolutePath());
            System.out.println(""Uploading File"");
            client.storeFile(""/html/Applet/user/"" + Config.id + "".jpg"", in);
            client.logout();
            in.close();
            System.out.println(""done"");
            UserStatus.setText(""Upload fertig, Bild wird aktuallisiert"");
        } catch (SocketException e) {
            e.printStackTrace();
        } catch (IOException e) {
            UserStatus.setText(""Fehler beim Upload"");
            e.printStackTrace();
        }
    }
 <SPLIT>     public static void copyFile(File source, File dest) throws IOException {
        if (!dest.exists()) {
            dest.createNewFile();
        }
        FileChannel from = null;
        FileChannel to = null;
        try {
            from = new FileInputStream(source).getChannel();
            to = new FileOutputStream(dest).getChannel();
            to.transferFrom(from, 0, from.size());
        } finally {
            if (from != null) {
                from.close();
            }
            if (to != null) {
                to.close();
            }
        }
    }
",297,"    private void UploadActionPerformed(ActionEvent evt) {
        JFileChooser combiner = new JFileChooser();
        FileNameExtensionFilter filter = new FileNameExtensionFilter(""*.jpg"", ""jpg"");
        combiner.setFileFilter(filter);
        File fd = new File(System.getProperty(""user.home""));
        combiner.setCurrentDirectory(fd);
        Component parent = null;
        int returnVal = combiner.showOpenDialog(parent);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            UserStatus.setText(""Bitte warten"");
        }
        try {
            Pic.setVisible(false);
            FTPClient client = new FTPClient();
            client.connect(""showus.de"");
            client.login(""web2"", ""kcinnay88"");
            client.enterLocalActiveMode();
            client.setFileTransferMode(FTPClient.BINARY_FILE_TYPE);
            client.setFileType(FTPClient.BINARY_FILE_TYPE);
            int write = client.getReplyCode();
            System.out.println(""Connect returned: "" + write);
            FileInputStream in = new FileInputStream(combiner.getSelectedFile().getAbsolutePath());
            System.out.println(""Uploading File"");
            client.storeFile(""/html/Applet/user/"" + Config.id + "".jpg"", in);
            client.logout();
            in.close();
            System.out.println(""done"");
            UserStatus.setText(""Upload fertig, Bild wird aktuallisiert"");
        } catch (SocketException e) {
            e.printStackTrace();
        } catch (IOException e) {
            UserStatus.setText(""Fehler beim Upload"");
            e.printStackTrace();
        }
    }
",LABEL_0,LABEL_0,LABEL_1,1,"UploadActionPerformed,evt,chooser,filter,dir,parent,returnVal,client,reply,in","UploadActionPerformed:0.014527678489685059,evt:0.007292449474334717,chooser:0.03365856409072876,filter:0.008058667182922363,dir:0.023448407649993896,parent:-0.002755582332611084,returnVal:0.016157209873199463,client:-0.0019326210021972656,reply:0.026376783847808838,in:-0.022228717803955078,",3,9,0,"chooser:combiner,reply:write,dir:fd,",0,Greedy,170,0.02713416814804077,replace,[]
454,"    public void readFile(URL url) throws PedroException, IOException, ParserConfigurationException, SAXException {
        this.zipFileName = url.toString();
        URLConnection urlConnection = url.openConnection();
        InputStream inputStream = urlConnection.getInputStream();
        unzipNativeFormatFile(inputStream);
        parseAlertFiles();
        deleteAlertFiles();
    }
 <SPLIT>     public static void copy(File from_file, File to_file) throws IOException {
        if (!from_file.exists()) abort(""FileCopy: no such source file: "" + from_file.getName());
        if (!from_file.isFile()) abort(""FileCopy: can't copy directory: "" + from_file.getName());
        if (!from_file.canRead()) abort(""FileCopy: source file is unreadable: "" + from_file.getName());
        if (to_file.isDirectory()) to_file = new File(to_file, from_file.getName());
        if (to_file.exists()) {
            if (!to_file.canWrite()) abort(""FileCopy: destination file is unwriteable: "" + to_file.getName());
        } else {
            String parent = to_file.getParent();
            if (parent == null) parent = System.getProperty(""user.dir"");
            File dir = new File(parent);
            if (!dir.exists()) abort(""FileCopy: destination directory doesn't exist: "" + parent);
            if (dir.isFile()) abort(""FileCopy: destination is not a directory: "" + parent);
            if (!dir.canWrite()) abort(""FileCopy: destination directory is unwriteable: "" + parent);
        }
        FileInputStream from = null;
        FileOutputStream to = null;
        try {
            from = new FileInputStream(from_file);
            to = new FileOutputStream(to_file);
            byte[] buffer = new byte[4096];
            int bytes_read;
            while ((bytes_read = from.read(buffer)) != -1) {
                to.write(buffer, 0, bytes_read);
            }
        } finally {
            if (from != null) try {
                from.close();
            } catch (IOException e) {
                ;
            }
            if (to != null) try {
                to.close();
            } catch (IOException e) {
            }
        }
    }
",60,"    public void importFile(URL page) throws PedroException, IOInterface, ParserConstructionException, SAFEception {
        this.zipFileName = page.toString();
        URLConnection fileManager = page.openConnection();
        InputStream Inputstream = fileManager.getInputStream();
        unzipNativeFormatFile(Inputstream);
        parseAlertFiles();
        deleteAlertFiles();
    }
",LABEL_0,LABEL_0,LABEL_1,1,"readFile,url,IOException,ParserConfigurationException,SAXException,zipFileName,urlConnection,inputStream","readFile:-2.384185791015625e-07,url:-1.5497207641601562e-06,IOException:-1.1920928955078125e-07,ParserConfigurationException:-1.1920928955078125e-07,SAXException:-5.960464477539062e-07,zipFileName:-1.6689300537109375e-06,urlConnection:8.344650268554688e-07,inputStream:2.384185791015625e-07,",7,11,0,"urlConnection:fileManager,inputStream:Inputstream,IOException:IOInterface,ParserConfigurationException:ParserConstructionException,readFile:importFile,SAXException:SAFEception,url:page,",0,Greedy,162,0.025678714116414387,replace,[]
455,"    private static File getZipAsFile(DigitalObject digOb) {
        String folderName = randomizeFileName(getFolderNameFromDigObject(digOb));
        File tmpFolder = new File(utils_tmp, folderName);
        File zip = null;
        try {
            FileUtils.forceMkdir(tmpFolder);
            zip = new File(tmpFolder, getFileNameFromDigObject(digOb, null));
            FileOutputStream out = new FileOutputStream(zip);
            IOUtils.copyLarge(digOb.getContent().getInputStream(), out);
            out.close();
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
        return zip;
    }
 <SPLIT>     @SuppressWarnings(""unchecked"")
    public void launch(final ILaunchConfiguration configuration, final String mode, final ILaunch launch, final IProgressMonitor monitor) throws CoreException {
        {
            Assert.notNull(configuration);
            Assert.notNull(monitor);
        }
        final String projectName = configuration.getAttribute(INexOpenLaunchConfigurationConstants.NEXOPEN_PROJECT_NAME, """");
        final IProject prj = JavaCore.create(ResourcesPlugin.getWorkspace().getRoot()).getJavaProject(projectName).getProject();
        if (NexOpenProjectUtils.isNexOpenProject(prj)) {
            final IFile pom = prj.getFile(""pom.xml"");
            if (!pom.exists()) {
                throw new IllegalStateException(""Not a NexOpen project. Not Maven2 root pom.xml available"");
            }
            ContentHandlerTemplate.handle(pom, new ContentHandlerCallback() {

                public void processHandle(final Document doc) {
                    handleRootProfile(doc);
                }
            });
            final IFile bpom = prj.getFile(""business/pom.xml"");
            if (!bpom.exists()) {
                throw new IllegalStateException(""Not a NexOpen project. Not Maven2 business pom.xml available"");
            }
            ContentHandlerTemplate.handle(bpom, new ContentHandlerCallback() {

                public void processHandle(final Document doc) {
                    try {
                        handleBusinessProfile(doc, configuration, prj);
                    } catch (final CoreException e) {
                        if (Logger.getLog().isInfoEnabled()) {
                            Logger.getLog().info(""CoreException"", e);
                        }
                        throw new RuntimeException(e);
                    }
                }
            });
            final ByteArrayOutputStream output = new ByteArrayOutputStream();
            try {
                final Properties props = new Properties();
                final String dialectName = configuration.getAttribute(INexOpenLaunchConfigurationConstants.HIBERNATE_DIALECT, ""MySQL5InnoDB"");
                props.setProperty(""hibernate.dialect"", support.getDialectClass(dialectName));
                props.setProperty(""hibernate.connection.driver_class"", configuration.getAttribute(INexOpenLaunchConfigurationConstants.JDBC_DRIVER, ""com.mysql.jdbc.Driver""));
                props.setProperty(""hibernate.connection.url"", configuration.getAttribute(INexOpenLaunchConfigurationConstants.JDBC_URL, ""jdbc:mysql://<host><:port>/<database>""));
                props.setProperty(""hibernate.connection.username"", configuration.getAttribute(INexOpenLaunchConfigurationConstants.JDBC_USERNAME, ""sa""));
                props.setProperty(""hibernate.connection.password"", configuration.getAttribute(INexOpenLaunchConfigurationConstants.JDBC_PASSWORD, """"));
                props.store(output, ""hibernate properties for code generation using NexOpen Tools 1.0.0"");
                final IFile props_file = prj.getFile(""business/src/test/resources/hibernate.properties"");
                if (!props_file.exists()) {
                    props_file.create(new ByteArrayInputStream(output.toByteArray()), true, monitor);
                } else {
                    props_file.setContents(new ByteArrayInputStream(output.toByteArray()), true, false, monitor);
                }
            } catch (final IOException e) {
                Logger.getLog().error(""I/O exception "", e);
                throw new RuntimeException(e);
            } finally {
                try {
                    output.flush();
                    output.close();
                } catch (IOException e) {
                }
            }
            if (NexOpenProjectUtils.is04xProject(prj)) {
                final IFile appContext = prj.getFile(""web/src/main/webapp/WEB-INF/applicationContext.xml"");
                if (!appContext.exists()) {
                    throw new IllegalStateException(""It no exists applicationContext.xml under web/src/main/webapp/WEB-INF, not a NexOpen project"");
                }
                ContentHandlerTemplate.handle(appContext, new ContentHandlerCallback() {

                    public void processHandle(final Document doc) {
                        final Element root = doc.getDocumentElement();
                        final List<Element> beans = XMLUtils.getChildElementsByTagName(root, ""bean"");
                        for (final Element bean : beans) {
                            final String id = bean.getAttribute(""id"");
                            if (""valueListAdapterResolver"".equals(id)) {
                                try {
                                    final String pkgName = configuration.getAttribute(INexOpenLaunchConfigurationConstants.NEXOPEN_PACKAGE, """");
                                    final String className = new StringBuilder(pkgName).append("".vlh.support.AnnotationValueListAdapterResolver"").toString();
                                    bean.setAttribute(""class"", className);
                                    break;
                                } catch (final CoreException e) {
                                    if (Logger.getLog().isInfoEnabled()) {
                                        Logger.getLog().info(""CoreException"", e);
                                    }
                                    throw new RuntimeException(e);
                                }
                            }
                        }
                    }
                });
            }
            {
                final String dialectName = configuration.getAttribute(INexOpenLaunchConfigurationConstants.HIBERNATE_DIALECT, ""MySQL5InnoDB"");
                if (support.isReverseEngineeringFileNeeded(dialectName)) {
                    try {
                        final IFile revengFile = prj.getFile(""business/src/test/resources/"" + support.getReversEngineeringFile(dialectName));
                        if (!revengFile.exists()) {
                            final Bundle bundle = HibernateActivator.getDefault().getBundle();
                            final Path src = new Path(""resources/"" + support.getReversEngineeringFile(dialectName));
                            final InputStream in = FileLocator.openStream(bundle, src, false);
                            final ByteArrayOutputStream baos = new ByteArrayOutputStream();
                            IOUtils.copy(in, baos);
                            String str = baos.toString();
                            str = str.replace(""${schema}"", configuration.getAttribute(INexOpenLaunchConfigurationConstants.JDBC_USERNAME, ""sa""));
                            revengFile.create(new ByteArrayInputStream(str.getBytes()), true, null);
                        }
                    } catch (final IOException e) {
                        if (Logger.getLog().isInfoEnabled()) {
                            Logger.getLog().info(""CoreException"", e);
                        }
                        throw new RuntimeException(e);
                    }
                }
            }
            final IResource resource = (IResource) prj.getAdapter(IResource.class);
            final QualifiedName qn = new QualifiedName(""org.nexopenframework.ide.eclipse.ui"", ""default.profile"");
            final String profile = resource.getPersistentProperty(qn);
            resource.setPersistentProperty(qn, ""reverse-engineering"");
            try {
                final InstallProjectAction action = new InstallProjectAction();
                action.scheduleJob(prj, monitor);
                prj.refreshLocal(2, monitor);
            } finally {
                prj.setPersistentProperty(qn, profile);
            }
        } else {
            Logger.getLog().info(""Not a NexOpen project :: "" + prj);
        }
    }
",124,,LABEL_1,LABEL_0,,-4,"getZipAsFile,digOb,folderName,tmpFolder,zip,out",,,,0,,0,Greedy,1,0.0006940682729085286,,[]
456,"    public static void main(final String[] args) throws RecognitionException, TokenStreamException, IOException, IllegalOptionValueException, UnknownOptionException {
        try {
            CmdLineParser cmdLineParser = new CmdLineParser();
            Option formatOption = cmdLineParser.addStringOption('f', ""format"");
            Option outputEncodingOption = cmdLineParser.addStringOption('c', ""outcharset"");
            Option inputEncodingOption = cmdLineParser.addStringOption('i', ""incharset"");
            cmdLineParser.parse(args);
            String format = (String) cmdLineParser.getOptionValue(formatOption);
            String outputEncoding = (String) cmdLineParser.getOptionValue(outputEncodingOption);
            if (outputEncoding == null || outputEncoding.trim().equals("""")) {
                outputEncoding = ""utf-8"";
                System.out.println(""Defaulting to output charset utf-8 as argument -c is missing or not valid."");
            }
            String inputEncoding = (String) cmdLineParser.getOptionValue(inputEncodingOption);
            if (inputEncoding == null || outputEncoding.trim().equals("""")) {
                inputEncoding = ""utf-8"";
                System.out.println(""Defaulting to input charset utf-8 as argument -i is missing or not valid."");
            }
            String[] remainingArgs = cmdLineParser.getRemainingArgs();
            if (remainingArgs.length != 2) {
                printUsage(""Input and output file are not specified correctly. "");
            }
            File inputFile = new File(remainingArgs[0]);
            if (!inputFile.exists()) {
                printUsage(""Input file "" + remainingArgs[0] + "" does not exist. "");
            }
            if (format == null || format.trim().equals("""")) {
                format = (String) FileUtil.cutExtension(inputFile.getName()).getValue();
            }
            File outputFile = new File(remainingArgs[1]);
            if (!outputFile.exists()) {
                outputFile.createNewFile();
            }
            System.out.println(""format detected: "" + format);
            if (""html"".equals(format)) {
                Reader reader = new HtmlEntityDecoderReader(new InputStreamReader(new FileInputStream(inputFile), inputEncoding));
                OutputStreamWriter out = new OutputStreamWriter(new FileOutputStream(outputFile), outputEncoding);
                char[] buffer = new char[1024];
                int read;
                do {
                    read = reader.read(buffer);
                    if (read > 0) {
                        out.write(buffer, 0, read);
                    }
                } while (read != -1);
                out.flush();
                out.close();
            } else {
                printUsage(""Format not specified via argument -f. Also guessing for the extension of input file "" + inputFile.getName() + "" failed"");
            }
        } catch (Exception ex) {
            ex.printStackTrace();
            printUsage(ex.getMessage());
        }
    }
 <SPLIT>     private void copyJar(File src, File dst) throws IOException {
        FileChannel srcChannel = null;
        FileChannel dstChannel = null;
        try {
            srcChannel = new FileInputStream(src).getChannel();
            dstChannel = new FileOutputStream(dst).getChannel();
            dstChannel.transferFrom(srcChannel, 0, srcChannel.size());
        } catch (IOException e) {
            fLog.log(Level.SEVERE, e.getMessage(), e);
        } finally {
            srcChannel.close();
            dstChannel.close();
        }
    }
",500,"    public static void main(final String[] args) throws RecognitionException, TokenStreamException, IOException, IllegalOptionValueException,  UnknownOptionsException {
        try {
            CmdLineParser cmdLinearser = new CmdLineParser();
            Option printfOption = cmdLinearser.addStringOption('f', ""format"");
            Option outputEncoderOpt = cmdLinearser.addStringOption('c', ""outcharset"");
            Option inputEncachingOperation = cmdLinearser.addStringOption('i', ""incharset"");
            cmdLinearser.parse(args);
            String transform = (String) cmdLinearser.getOptionValue(printfOption);
            String outputEnining = (String) cmdLinearser.getOptionValue(outputEncoderOpt);
            if (outputEnining == null || outputEnining.trim().equals("""")) {
                outputEnining = ""utf-8"";
                System.again.println(""Defaulting to output charset utf-8 as argument -c is missing or not valid."");
            }
            String outputChoder = (String) cmdLinearser.getOptionValue(inputEncachingOperation);
            if (outputChoder == null || outputEnining.trim().equals("""")) {
                outputChoder = ""utf-8"";
                System.again.println(""Defaulting to input charset utf-8 as argument -i is missing or not valid."");
            }
            String[] RemainingArg = cmdLinearser.getRemainingArgs();
            if (RemainingArg.length != 2) {
                printUsage(""Input and output file are not specified correctly. "");
            }
            File InputPath = new File(RemainingArg[0]);
            if (!inputFile.exists()) {
                printUsage(""Input file "" + RemainingArg[0] + "" does not exist. "");
            }
            if (transform == null || transform.trim().equals("""")) {
                transform = (String) FileUtil.cutExtension(InputPath.getName()).getValue();
            }
            File OutputHeader = new File(RemainingArg[1]);
            if (!outputFile.exists()) {
                OutputHeader.createNewFile();
            }
            System.again.println(""format detected: "" + transform);
            if (""html"".equals(transform)) {
                Reader reader = new HtmlEntityDecoderReader(new InputStreamReader(new FileInputStream(InputPath), outputChoder));
                OutputStreamWriter again = new OutputStreamWriter(new FileOutputStream(OutputHeader), outputEnining);
                char[] buffer = new char[1024];
                int read;
                do {
                    read = reader.read(buffer);
                    if (read > 0) {
                        again.write(buffer, 0, read);
                    }
                } while (read != -1);
                again.flush();
                again.close();
            } else {
                printUsage(""Format not specified via argument -f. Also guessing for the extension of input file "" + InputPath.getName() + "" failed"");
            }
        } catch (Exception ex) {
            ex.printStackTrace();
            printUsage(ex.getMessage());
        }
    }
",LABEL_1,LABEL_1,LABEL_1,-1,"UnknownOptionException,cmdLineParser,formatOption,outputEncodingOption,inputEncodingOption,format,outputEncoding,inputEncoding,remainingArgs,inputFile,outputFile,out","UnknownOptionException:0.003728806972503662,cmdLineParser:0.03789258003234863,formatOption:0.0011846423149108887,outputEncodingOption:0.00373232364654541,inputEncodingOption:0.0038179755210876465,format:-0.001134037971496582,outputEncoding:0.021592676639556885,inputEncoding:0.012159526348114014,remainingArgs:0.00023686885833740234,inputFile:-0.0011417865753173828,outputFile:-0.0024697184562683105,out:0.0002967715263366699,",12,55,0,"cmdLineParser:cmdLinearser,outputEncoding:outputEnining,inputEncoding:outputChoder,inputEncodingOption:inputEncachingOperation,outputEncodingOption:outputEncoderOpt,UnknownOptionException: UnknownOptionsException,formatOption:printfOption,out:again,remainingArgs:RemainingArg,format:transform,inputFile:InputPath,outputFile:OutputHeader,",0,Greedy,644,0.11461719274520873,failed,[]
457,"    static File copy(File in, File out) throws IOException {
        FileChannel inChannel = new FileInputStream(in).getChannel();
        FileChannel outChannel = new FileOutputStream(out).getChannel();
        try {
            inChannel.transferTo(0, inChannel.size(), outChannel);
            return out;
        } catch (IOException e) {
            throw e;
        } finally {
            if (inChannel != null) inChannel.close();
            if (outChannel != null) outChannel.close();
        }
    }
 <SPLIT>     private static String encode(final String input) throws UnsupportedEncodingException, NoSuchAlgorithmException {
        MessageDigest md = MessageDigest.getInstance(""MD5"");
        md.reset();
        md.update(input.getBytes(""UTF-8""));
        return toHexString(md.digest());
    }
",99,"    static File Cop(File query, File string) throws IOException {
        FileChannel insChan = new FileInputStream(query).getChannel();
        FileChannel  outConnection = new FileOutputStream(string).getChannel();
        try {
            insChan.transferTo(0, insChan.size(),  outConnection);
            return string;
        } catch (IOException e) {
            throw e;
        } finally {
            if (insChan != null) insChan.close();
            if ( outConnection != null)  outConnection.close();
        }
    }
",LABEL_0,LABEL_0,LABEL_0,-1,"copy,in,out,inChannel,outChannel","copy:-0.00528264045715332,in:-0.0013335347175598145,out:-0.004250228404998779,inChannel:-0.0032438039779663086,outChannel:-0.00113755464553833,",5,15,0,"outChannel: outConnection,in:query,inChannel:insChan,out:string,copy:Cop,",0,Greedy,204,0.027426807085673015,failed,[]
458,"        public HttpResponseExchange execute() throws Exception {
            HttpResponseExchange forwardResponse = null;
            int fetchSizeLimit = Config.getInstance().getFetchLimitSize();
            while (null != lastContentRange) {
                forwardRequest.setBody(new byte[0]);
                ContentRangeHeaderValue old = lastContentRange;
                long sendSize = fetchSizeLimit;
                if (old.getInstanceLength() - old.getLastBytePos() - 1 < fetchSizeLimit) {
                    sendSize = (old.getInstanceLength() - old.getLastBytePos() - 1);
                }
                if (sendSize <= 0) {
                    break;
                }
                lastContentRange = new ContentRangeHeaderValue(old.getLastBytePos() + 1, old.getLastBytePos() + sendSize, old.getInstanceLength());
                forwardRequest.setHeader(HttpHeaders.Names.CONTENT_RANGE, lastContentRange);
                forwardRequest.setHeader(HttpHeaders.Names.CONTENT_LENGTH, String.valueOf(sendSize));
                forwardResponse = syncFetch(forwardRequest);
                if (sendSize < fetchSizeLimit) {
                    lastContentRange = null;
                }
            }
            return forwardResponse;
        }
 <SPLIT>     private void generateDeviceUUID() {
        try {
            MessageDigest md5 = MessageDigest.getInstance(""MD5"");
            md5.update(deviceType.getBytes());
            md5.update(internalId.getBytes());
            md5.update(bindAddress.getHostName().getBytes());
            StringBuffer hexString = new StringBuffer();
            byte[] digest = md5.digest();
            for (int i = 0; i < digest.length; i++) {
                hexString.append(Integer.toHexString(0xFF & digest[i]));
            }
            uuid = hexString.toString().toUpperCase();
        } catch (Exception ex) {
            RuntimeException runTimeEx = new RuntimeException(""Unexpected error during MD5 hash creation, check your JRE"");
            runTimeEx.initCause(ex);
            throw runTimeEx;
        }
    }
",187,"        public HttpResponseExchange execute() throws Exception {
            HttpResponseExchange forwardResponse = null;
            int faitLimitLock = Config.getInstance().getFetchLimitSize();
            while (null != LastMessageRange) {
                forwardRequest.setBody(new byte[0]);
                ContentRangeHeaderValue old = LastMessageRange;
                long sendSize = faitLimitLock;
                if (old.getInstanceLength() - old.getLastBytePos() - 1 < faitLimitLock) {
                    sendSize = (old.getInstanceLength() - old.getLastBytePos() - 1);
                }
                if (sendSize <= 0) {
                    break;
                }
                LastMessageRange = new ContentRangeHeaderValue(old.getLastBytePos() + 1, old.getLastBytePos() + sendSize, old.getInstanceLength());
                forwardRequest.setHeader(HttpHeaders.Names.CONTENT_RANGE, LastMessageRange);
                forwardRequest.setHeader(HttpHeaders.Names.CONTENT_LENGTH, String.valueOf(sendSize));
                forwardResponse = syncFetch(forwardRequest);
                if (sendSize < faitLimitLock) {
                    LastMessageRange = null;
                }
            }
            return forwardResponse;
        }
",LABEL_0,LABEL_0,LABEL_1,1,"execute,forwardResponse,fetchSizeLimit,lastContentRange,old,sendSize","execute:0.01733088493347168,forwardResponse:0.08013832569122314,fetchSizeLimit:0.07437330484390259,lastContentRange:0.07921874523162842,old:-0.0023792386054992676,sendSize:0.03268778324127197,",2,9,0,"forwardResponse:forwardResponse,lastContentRange:LastMessageRange,fetchSizeLimit:faitLimitLock,",0,Greedy,221,0.03210771878560384,replace,[]
459,"    @Override
    public String getMessageDigest() throws SarasvatiLoadException {
        if (messageDigest == null) {
            Collections.sort(nodes);
            Collections.sort(externals);
            try {
                MessageDigest digest = MessageDigest.getInstance(""SHA1"");
                digest.update(name.getBytes());
                for (XmlNode node : nodes) {
                    node.addToDigest(digest);
                }
                for (XmlExternal external : externals) {
                    external.addToDigest(digest);
                }
                messageDigest = SvUtil.getHexString(digest.digest());
            } catch (NoSuchAlgorithmException nsae) {
                throw new SarasvatiException(""Unable to load SHA1 algorithm"", nsae);
            }
        }
        return messageDigest;
    }
 <SPLIT>     private JSONObject executeHttpGet(String uri) throws Exception {
        HttpGet req = new HttpGet(uri);
        HttpClient client = new DefaultHttpClient();
        HttpResponse resLogin = client.execute(req);
        BufferedReader r = new BufferedReader(new InputStreamReader(resLogin.getEntity().getContent()));
        StringBuilder sb = new StringBuilder();
        String s = null;
        while ((s = r.readLine()) != null) {
            sb.append(s);
        }
        return new JSONObject(sb.toString());
    }
",126,"    @Override
    public String getmessageDigester() throws SarasvatiLoadException {
        if (MessageSignester == null) {
            Collections.sort(nodes);
            Collections.sort(externals);
            try {
                MessageDigest  Digest = MessageDigest.getInstance(""SHA1"");
                 Digest.update(name.getBytes());
                for (XmlNode path : nodes) {
                    path.addToDigest( Digest);
                }
                for (XmlExternal resource : externals) {
                    resource.addToDigest( Digest);
                }
                MessageSignester = SvUtil.getHexString( Digest. Digest());
            } catch (NoSuchAlgorithmException nsae) {
                throw new SarasvatiException(""Unable to load SHA1 algorithm"", nsae);
            }
        }
        return MessageSignester;
    }
",LABEL_0,LABEL_0,LABEL_0,-1,"getMessageDigest,digest,node,external,messageDigest","getMessageDigest:-0.005430638790130615,digest:-0.006266653537750244,node:-0.002834916114807129,external:-0.0024387240409851074,messageDigest:0.004551231861114502,",5,14,0,"messageDigest:MessageSignester,external:resource,node:path,getMessageDigest:getmessageDigester,digest: Digest,",0,Greedy,231,0.03265998363494873,failed,[]
460,"    private void runGetAppListing() {
        DataStorage.clearAppListings();
        GenericUrl url = new GoogleUrl(EnterpriseMarketplaceUrl.generateAppListingUrl() + DataStorage.getVendorProfile().vendorId);
        AppListingList appListingList;
        try {
            HttpRequest request = requestFactory.buildGetRequest(url);
            request.addParser(jsonHttpParser);
            request.readTimeout = readTimeout;
            HttpResponse response = request.execute();
            appListingList = response.parseAs(AppListingList.class);
            if (appListingList != null && appListingList.appListings != null) {
                operationStatus = true;
                DataStorage.setAppListings(appListingList.appListings);
            }
            response.getContent().close();
        } catch (IOException e) {
            AppsMarketplacePluginLog.logError(e);
        }
    }
 <SPLIT>     static String encrypt(String plaintext) {
        MessageDigest d = null;
        try {
            d = MessageDigest.getInstance(""SHA-1"");
            d.update(plaintext.getBytes(""UTF-8""));
        } catch (Exception e) {
            e.printStackTrace();
        }
        return new String(Base64.encodeBase64(d.digest()));
    }
",135,"    private void runGetApplicationlistings() {
        DataStorage.clearAppListings();
        GenericUrl Url = new GoogleUrl(EnterpriseMarketplaceUrl.generateAppListingUrl() + DataStorage.getVendorProfile().vendorId);
        AppListingList applistingResult;
        try {
            HttpRequest get = requestFactory.buildGetRequest(Url);
            get.addParser(jsonHttpParser);
            get.writeSocket = writeSocket;
            HttpResponse output = get.execute();
            applistingResult = output.parseAs(AppListingList.class);
            if (applistingResult != null && applistingResult.appListings != null) {
                operationStatus = true;
                DataStorage.setAppListings(applistingResult.appListings);
            }
            output.getContent().close();
        } catch (IOException e) {
            AppsMarketplacePluginLog.logError(e);
        }
    }
",LABEL_0,LABEL_0,LABEL_0,-1,"runGetAppListing,url,appListingList,request,readTimeout,response","runGetAppListing:1.0728836059570312e-06,url:1.0728836059570312e-06,appListingList:1.430511474609375e-06,request:1.0728836059570312e-06,readTimeout:-8.344650268554688e-07,response:-1.430511474609375e-06,",6,17,0,"appListingList:applistingResult,runGetAppListing:runGetApplicationlistings,url:Url,request:get,readTimeout:writeSocket,response:output,",0,Greedy,293,0.04058734575907389,failed,[]
461,"    public void run() {
        long time = System.currentTimeMillis();
        logger.info(""Version: "" + version);
        String hostname = properties.getProperty(""mercuriushost"");
        String protocol = properties.getProperty(""mercuriusprotocol"");
        String port = properties.getProperty(""mercuriusport"");
        String path = properties.getProperty(""mercuriuspath"");
        String action = properties.getProperty(""mercuriusaction"");
        logger.info(""Getting Timex Data --- "" + getTimeDifferent(time));
        String xml = timexfrmk.getUnsynchedSessionsXMLFormat();
        logger.info(""Done getting Timex Data --- "" + getTimeDifferent(time));
        if (timexfrmk.getSessionCount() > 0) {
            try {
                logger.info(""Sending Timex Data to Mercurius --- "" + getTimeDifferent(time));
                String data = URLEncoder.encode(""action"", ""UTF-8"") + ""="" + URLEncoder.encode(action, ""UTF-8"");
                data += ""&"" + URLEncoder.encode(""data"", ""UTF-8"") + ""="" + URLEncoder.encode(xml, ""UTF-8"");
                if (isAdminFeedKeySet()) {
                    data += ""&"" + URLEncoder.encode(""adminfeedkey"", ""UTF-8"") + ""="" + URLEncoder.encode(adminfeedkey, ""UTF-8"");
                    logger.debug(""Using adminfeedkey to authenticate"");
                } else {
                    Authenticator.setDefault(new CustomAuthenticator(user, password));
                    logger.debug(""Using user/pwd to authenticate"");
                }
                String u = protocol + ""://"" + hostname + "":"" + port + path;
                logger.debug(""Posting xml data to: "" + u);
                URL url = new URL(u);
                URLConnection conn = url.openConnection();
                conn.setRequestProperty(""User-Agent"", ""TimexMercurius/"" + version);
                conn.setDoOutput(true);
                OutputStreamWriter wr = new OutputStreamWriter(conn.getOutputStream());
                wr.write(data);
                wr.flush();
                BufferedReader rd = new BufferedReader(new InputStreamReader(conn.getInputStream()));
                String line;
                StringBuffer s = new StringBuffer();
                while ((line = rd.readLine()) != null) {
                    s.append(line);
                }
                if (s.length() > 0) {
                    logger.debug(s.toString());
                    if (s.toString().indexOf(""Result:"") != -1) {
                        logger.info(s.toString().substring(s.toString().indexOf(""Result:"")));
                        if (s.toString().indexOf(""Result: Successful"") != -1) {
                            timexfrmk.updateSessionsStatus();
                        }
                    } else {
                        logger.error(s.toString());
                    }
                } else {
                    logger.info(""No data returned"");
                }
                wr.close();
                rd.close();
            } catch (MalformedURLException e) {
                logger.error(e);
                logger.trace(e, e);
            } catch (IOException e) {
                logger.error(e);
                logger.trace(e, e);
            } catch (Exception e) {
                logger.error(e);
                logger.trace(e, e);
            }
        } else {
            logger.info(""There is nothing to send.  Everything has already been synchronized"");
        }
        timexfrmk.close();
        logger.info(""Done!!! Total Time: "" + getTimeDifferent(time));
    }
 <SPLIT>     public static byte[] getSystemStateHash() {
        MessageDigest sha1;
        try {
            sha1 = MessageDigest.getInstance(""SHA1"");
        } catch (Exception e) {
            throw new Error(""Error in RandomSeed, no sha1 hash"");
        }
        sha1.update((byte) System.currentTimeMillis());
        sha1.update((byte) Runtime.getRuntime().totalMemory());
        sha1.update((byte) Runtime.getRuntime().freeMemory());
        sha1.update(stackDump(new Throwable()));
        try {
            Properties props = System.getProperties();
            Enumeration names = props.propertyNames();
            while (names.hasMoreElements()) {
                String name = (String) names.nextElement();
                sha1.update(name.getBytes());
                sha1.update(props.getProperty(name).getBytes());
            }
        } catch (Throwable t) {
            sha1.update(stackDump(t));
        }
        sha1.update((byte) System.currentTimeMillis());
        try {
            sha1.update(InetAddress.getLocalHost().toString().getBytes());
        } catch (Throwable t) {
            sha1.update(stackDump(t));
        }
        sha1.update((byte) System.currentTimeMillis());
        Runtime.getRuntime().gc();
        sha1.update((byte) Runtime.getRuntime().freeMemory());
        sha1.update((byte) System.currentTimeMillis());
        return sha1.digest();
    }
",677,"    public void loop() {
        long now = System.currentTimeMillis();
        logger.info(""Version: "" + version);
        String localhostline = properties.getProperty(""mercuriushost"");
        String Protocol = properties.getProperty(""mercuriusprotocol"");
        String ip = properties.getProperty(""mercuriusport"");
        String route = properties.getProperty(""mercuriuspath"");
        String input = properties.getProperty(""mercuriusaction"");
        logger.info(""Getting Timex Data --- "" + getTimeDifferent(now));
        String output = timexfrmk.getUnsynchedSessionsXMLFormat();
        logger.info(""Done getting Timex Data --- "" + getTimeDifferent(now));
        if (timexfrmk.getSessionCount() > 0) {
            try {
                logger.info(""Sending Timex Data to Mercurius --- "" + getTimeDifferent(now));
                String file = URLEncoder.encode(""action"", ""UTF-8"") + ""="" + URLEncoder.encode(input, ""UTF-8"");
                file += ""&"" + URLEncoder.encode(""data"", ""UTF-8"") + ""="" + URLEncoder.encode(output, ""UTF-8"");
                if (isAdminFeedKeySet()) {
                    file += ""&"" + URLEncoder.encode(""adminfeedkey"", ""UTF-8"") + ""="" + URLEncoder.encode(adminfeedkey, ""UTF-8"");
                    logger.debug(""Using adminfeedkey to authenticate"");
                } else {
                    Authenticator.setDefault(new CustomAuthenticator(user, password));
                    logger.debug(""Using user/pwd to authenticate"");
                }
                String ut = Protocol + ""://"" + localhostline + "":"" + ip + route;
                logger.debug(""Posting xml data to: "" + ut);
                URL url = new URL(ut);
                URLConnection conn = url.openConnection();
                conn.setRequestProperty(""User-Agent"", ""TimexMercurius/"" + version);
                conn.setDoOutput(true);
                OutputStreamWriter wr = new OutputStreamWriter(conn.getOutputStream());
                wr.write(file);
                wr.flush();
                BufferedReader rd = new BufferedReader(new InputStreamReader(conn.getInputStream()));
                String line;
                StringBuffer s = new StringBuffer();
                while ((line = rd.readLine()) != null) {
                    s.append(line);
                }
                if (s.length() > 0) {
                    logger.debug(s.toString());
                    if (s.toString().indexOf(""Result:"") != -1) {
                        logger.info(s.toString().substring(s.toString().indexOf(""Result:"")));
                        if (s.toString().indexOf(""Result: Successful"") != -1) {
                            timexfrmk.updateSessionsStatus();
                        }
                    } else {
                        logger.error(s.toString());
                    }
                } else {
                    logger.info(""No data returned"");
                }
                wr.close();
                rd.close();
            } catch (MalformedURLException e) {
                logger.error(e);
                logger.trace(e, e);
            } catch (IOException e) {
                logger.error(e);
                logger.trace(e, e);
            } catch (Exception e) {
                logger.error(e);
                logger.trace(e, e);
            }
        } else {
            logger.info(""There is nothing to send.  Everything has already been synchronized"");
        }
        timexfrmk.close();
        logger.info(""Done!!! Total Time: "" + getTimeDifferent(now));
    }
",LABEL_0,LABEL_0,LABEL_0,-1,"run,time,hostname,protocol,port,path,action,xml,data,u,url,conn","run:7.009506225585938e-05,time:5.0067901611328125e-06,hostname:8.118152618408203e-05,protocol:9.298324584960938e-06,port:7.867813110351562e-06,path:-5.841255187988281e-06,action:1.7881393432617188e-06,xml:5.799531936645508e-05,data:-2.3603439331054688e-05,u:1.2636184692382812e-05,url:-1.537799835205078e-05,conn:1.800060272216797e-05,",10,30,0,"hostname:localhostline,run:loop,xml:output,conn:conn,u:ut,protocol:Protocol,port:ip,time:now,action:input,path:route,url:url,data:file,",0,Greedy,481,0.10368156830469767,failed,[]
462,"    protected File getFile() throws IOException {
        File home = new File(System.getProperty(""user.dir""));
        String fileName = String.format(""%s.txt"", getFilePrefix());
        File file = new File(home, fileName);
        if (file.exists()) {
            return file;
        } else {
            URL url = LocalNameGenerator.class.getResource(""/"" + fileName);
            if (url == null) {
                throw new IllegalStateException(String.format(""Cannot find resource at %s"", fileName));
            } else {
                InputStream in = url.openStream();
                try {
                    BufferedOutputStream out = new BufferedOutputStream(new FileOutputStream(file));
                    try {
                        IOUtils.copy(in, out);
                    } finally {
                        out.close();
                    }
                } finally {
                    in.close();
                }
                return file;
            }
        }
    }
 <SPLIT>     public FTPFile[] connect() {
        if (ftpe == null) {
            ftpe = new FTPEvent(this);
        }
        if (ftp == null) {
            ftp = new FTPClient();
        } else if (ftp.isConnected()) {
            path = """";
            try {
                ftp.disconnect();
            } catch (IOException e1) {
                log.error(""could not disconnect -"" + e1.getMessage());
            }
        }
        currentDir = new FTPFile[0];
        log.debug(""try to connect"");
        try {
            int reply;
            ftp.connect(ftpsite);
            reply = ftp.getReplyCode();
            if (!FTPReply.isPositiveCompletion(reply)) {
                ftp.disconnect();
                log.error(""FTP server refused connection."");
            }
        } catch (IOException e) {
            log.error(""FTPConnection error: "" + e.getMessage());
            if (ftp.isConnected()) {
                try {
                    ftp.disconnect();
                } catch (IOException f) {
                }
            }
        }
        try {
            if (!ftp.login(user, password)) {
                log.error(""could not login with: "" + user);
                ftp.logout();
            }
            log.debug(""Remote system is "" + ftp.getSystemName());
            ftp.enterLocalPassiveMode();
            currentDir = ftp.listFiles();
        } catch (FTPConnectionClosedException e) {
            log.error(""FTPConnectionClosedException: "" + e.getMessage());
        } catch (IOException e) {
            log.error(""IOException: "" + e.getMessage());
        }
        ftpe.setType(FTPEvent.CONNECT);
        fireFTPEvent(ftpe);
        return currentDir;
    }
",171,,LABEL_0,LABEL_1,,-4,"getFile,home,fileName,file,url,in,out",,,,0,,0,Greedy,1,0.00040504137674967445,,[]
463,"    private void getRandomGUID(boolean secure) {
        MessageDigest md5 = null;
        StringBuffer sbValueBeforeMD5 = new StringBuffer();
        try {
            md5 = MessageDigest.getInstance(""MD5"");
        } catch (NoSuchAlgorithmException e) {
            System.out.println(""Error: "" + e);
        }
        try {
            long time = System.currentTimeMillis();
            long rand = 0;
            if (secure) {
                rand = mySecureRand.nextLong();
            } else {
                rand = myRand.nextLong();
            }
            sbValueBeforeMD5.append(s_id);
            sbValueBeforeMD5.append("":"");
            sbValueBeforeMD5.append(Long.toString(time));
            sbValueBeforeMD5.append("":"");
            sbValueBeforeMD5.append(Long.toString(rand));
            valueBeforeMD5 = sbValueBeforeMD5.toString();
            md5.update(valueBeforeMD5.getBytes());
            byte[] array = md5.digest();
            StringBuffer sb = new StringBuffer();
            for (int j = 0; j < array.length; ++j) {
                int b = array[j] & 0xFF;
                if (b < 0x10) sb.append('0');
                sb.append(Integer.toHexString(b));
            }
            valueAfterMD5 = sb.toString();
        } catch (Exception e) {
            System.out.println(""Error:"" + e);
        }
    }
 <SPLIT>     public static boolean isCodebaseDownloadable(Properties p) {
        class CodebaseData {

            String file;

            boolean success = true;
        }
        String codebase = p.getProperty(""java.rmi.server.codebase"", null);
        if (null == codebase) {
            if (logger.isDebugEnabled()) logger.debug(""java.rmi.server.codebase = null (return false)"");
            return false;
        }
        try {
            URL cbUrl = new URL(codebase);
            String protocol = cbUrl.getProtocol();
            String filename = cbUrl.getFile();
            if (logger.isDebugEnabled()) {
                logger.debug(""Verifying java.rmi.server.codebase setting(s)..."");
                logger.debug(""Codebase = "" + cbUrl.toString());
            }
            if (protocol.equals(""http"")) {
                if (filename.indexOf(""http"") == -1) {
                    try {
                        int size = cbUrl.openConnection().getContentLength();
                        if (logger.isDebugEnabled()) logger.debug(""Checking "" + cbUrl + "" : OK"");
                        return true;
                    } catch (IOException e) {
                        if (logger.isDebugEnabled()) logger.debug(""Checking "" + cbUrl + "" : FAIL"");
                        return false;
                    } finally {
                        if (logger.isDebugEnabled()) logger.debug(""Verifying java.rmi.server.codebase setting(s)... Done!"");
                    }
                } else {
                    ArrayList files = new ArrayList();
                    StringTokenizer st = new StringTokenizer(codebase);
                    URL url = null;
                    String part = null;
                    CodebaseData data = null;
                    while (st.hasMoreTokens()) {
                        part = st.nextToken();
                        url = new URL(part);
                        data = new CodebaseData();
                        try {
                            int len = url.openConnection().getContentLength();
                            if (len == -1) {
                                data.success = false;
                                data.file = part;
                            } else {
                                data.file = part;
                            }
                        } catch (IOException e) {
                            data.success = false;
                        }
                        files.add(data);
                    }
                    String wrong = null;
                    CodebaseData codebaseData = null;
                    boolean allOK = true;
                    int errorFiles = 0;
                    for (int i = 0; i < files.size(); i++) {
                        codebaseData = (CodebaseData) files.get(i);
                        if (!codebaseData.success) {
                            wrong += "" "" + codebaseData.file;
                            ++errorFiles;
                            allOK = false;
                        }
                        if (logger.isDebugEnabled()) logger.debug((i + 1) + "". Checking "" + codebaseData.file + "" : "" + (codebaseData.success ? ""OK"" : ""FAIL""));
                    }
                    if (errorFiles == 0) {
                        if (logger.isDebugEnabled()) logger.debug(""All entries can be downloaded successfully!"");
                    } else {
                        logger.error(errorFiles + "" of "" + files.size() + "" entries can *not* be downloaded successfully!"");
                    }
                    if (logger.isDebugEnabled()) logger.debug(""Verifying java.rmi.server.codebase setting(s)... Done!"");
                    if (allOK) {
                        return true;
                    } else {
                        return false;
                    }
                }
            } else if (protocol.equalsIgnoreCase(""file"")) {
                if (logger.isDebugEnabled()) logger.debug(""'file' protocol not supported for JSF"");
            }
        } catch (MalformedURLException e) {
            logger.debug(e.getMessage());
            return false;
        }
        return false;
    }
",267,"    private void getRandomGuid(boolean https) {
        MessageDigest MD5 = null;
        StringBuffer sbValueGivenMD5 = new StringBuffer();
        try {
            MD5 = MessageDigest.getInstance(""MD5"");
        } catch (NoSuchAlgorithmException e) {
            System.out.println(""Error: "" + e);
        }
        try {
            long time = System.currentTimeMillis();
            long delay = 0;
            if (https) {
                delay = mySecureRand.nextLong();
            } else {
                delay = myRand.nextLong();
            }
            sbValueGivenMD5.append(s_id);
            sbValueGivenMD5.append("":"");
            sbValueGivenMD5.append(Long.toString(time));
            sbValueGivenMD5.append("":"");
            sbValueGivenMD5.append(Long.toString(delay));
            valueInsideMD5 = sbValueGivenMD5.toString();
            MD5.update(valueInsideMD5.getBytes());
            byte[] array = MD5.digest();
            StringBuffer sb = new StringBuffer();
            for (int aj = 0; aj < array.length; ++aj) {
                int p = array[aj] & 0xFF;
                if (p < 0x10) sb.append('0');
                sb.append(Integer.toHexString(p));
            }
            valueBeforeMP5 = sb.toString();
        } catch (Exception e) {
            System.out.println(""Error:"" + e);
        }
    }
",LABEL_0,LABEL_0,LABEL_0,-1,"getRandomGUID,secure,md5,sbValueBeforeMD5,time,rand,valueBeforeMD5,array,sb,j,b,valueAfterMD5","getRandomGUID:-0.004240155220031738,secure:-0.0005713105201721191,md5:0.0009596943855285645,sbValueBeforeMD5:-0.05479145050048828,time:0.001786351203918457,rand:0.00039196014404296875,valueBeforeMD5:0.0016965270042419434,array:0.0017368793487548828,sb:0.005528151988983154,j:0.001695394515991211,b:0.0009472966194152832,valueAfterMD5:-0.0033761262893676758,",9,28,0,"sb:sb,time:time,array:array,valueBeforeMD5:valueInsideMD5,j:aj,md5:MD5,b:p,rand:delay,secure:https,valueAfterMD5:valueBeforeMP5,getRandomGUID:getRandomGuid,sbValueBeforeMD5:sbValueGivenMD5,",0,Greedy,580,0.1066659132639567,failed,[]
464,"    public static void save(String packageName, ArrayList<byte[]> fileContents, ArrayList<String> fileNames) throws Exception {
        String dirBase = Util.JAVA_DIR + File.separator + packageName;
        File packageDir = new File(dirBase);
        if (!packageDir.exists()) {
            boolean created = packageDir.mkdir();
            if (!created) {
                File currentPath = new File(""."");
                throw new Exception(""Directory "" + packageName + "" could not be created. Current directory: "" + currentPath.getAbsolutePath());
            }
        }
        for (int i = 0; i < fileContents.size(); i++) {
            File file = new File(Util.JAVA_DIR + File.separator + fileNames.get(i));
            FileOutputStream fos = new FileOutputStream(file);
            fos.write(fileContents.get(i));
            fos.flush();
            fos.close();
        }
        for (int i = 0; i < fileNames.size(); i++) {
            File fileSrc = new File(Util.JAVA_DIR + File.separator + fileNames.get(i));
            File fileDst = new File(dirBase + File.separator + fileNames.get(i));
            BufferedReader reader = new BufferedReader(new FileReader(fileSrc));
            BufferedWriter writer = new BufferedWriter(new FileWriter(fileDst));
            writer.append(""package "" + packageName + "";\n"");
            String line = """";
            while ((line = reader.readLine()) != null) writer.append(line + ""\n"");
            writer.flush();
            writer.close();
            reader.close();
        }
    }
 <SPLIT>     private void unzip(File filename) throws ZipException, IOException {
        ZipInputStream in = new ZipInputStream(new BufferedInputStream(new FileInputStream(filename)));
        ZipEntry entry = null;
        boolean first_entry = true;
        while ((entry = in.getNextEntry()) != null) {
            if (first_entry) {
                if (!entry.isDirectory()) {
                    File subdir = new File(dir + File.separator + filename.getName().substring(0, filename.getName().length() - SUFFIX_ZIP.length()));
                    if (!subdir.exists()) {
                        subdir.mkdir();
                        dir = subdir;
                    }
                }
                first_entry = false;
            }
            if (entry.isDirectory()) {
                FileUtils.forceMkdir(new File(dir + File.separator + entry.getName()));
            } else {
                File outfile = new File(dir + File.separator + entry.getName());
                File outdir = new File(outfile.getAbsolutePath().substring(0, outfile.getAbsolutePath().length() - outfile.getName().length()));
                if (!outdir.exists()) FileUtils.forceMkdir(outdir);
                FileOutputStream fo = new FileOutputStream(outfile);
                BufferedOutputStream bos = new BufferedOutputStream(fo, BUFFER);
                int read;
                byte data[] = new byte[BUFFER];
                while ((read = in.read(data, 0, BUFFER)) != -1) {
                    read_position++;
                    bos.write(data, 0, read);
                }
                bos.flush();
                bos.close();
            }
        }
        in.close();
    }
",335,"    public static void load(String packageName, ArrayList<byte[]>  fileParts, ArrayList<String>  fileName) throws Exception {
        String DirPath = Util.JAVA_DIR + File.separator + packageName;
        File PackageDir = new File(DirPath);
        if (!packageDir.exists()) {
            boolean controlled = PackageDir.mkdir();
            if (!created) {
                File currentPath = new File(""."");
                throw new Exception(""Directory "" + packageName + "" could not be created. Current directory: "" + currentPath.getAbsolutePath());
            }
        }
        for (int i = 0; i <  fileParts.size(); i++) {
            File uri = new File(Util.JAVA_DIR + File.separator +  fileName.get(i));
            FileOutputStream flops = new FileOutputStream(uri);
            flops.write( fileParts.get(i));
            flops.flush();
            flops.close();
        }
        for (int i = 0; i <  fileName.size(); i++) {
            File fileDrec = new File(Util.JAVA_DIR + File.separator +  fileName.get(i));
            File fileDst = new File(DirPath + File.separator +  fileName.get(i));
            BufferedReader stream = new BufferedReader(new FileReader(fileDrec));
            BufferedWriter writer = new BufferedWriter(new FileWriter(fileDst));
            writer.append(""package "" + packageName + "";
"");
            String url = """";
            while ((url = stream.readLine()) != null) writer.append(url + ""
"");
            writer.flush();
            writer.close();
            stream.close();
        }
    }
",LABEL_1,LABEL_1,LABEL_1,-1,"save,packageName,fileContents,fileNames,dirBase,packageDir,created,currentPath,i,file,fos,fileSrc,fileDst,reader,writer,line","save:0.0005870461463928223,packageName:0.004472792148590088,fileContents:-0.005101323127746582,fileNames:-0.003834545612335205,dirBase:0.0033228397369384766,packageDir:-0.0001748800277709961,created:0.0010476112365722656,currentPath:0.0009987354278564453,i:0.005257368087768555,file:0.0004457831382751465,fos:-0.0031901001930236816,fileSrc:-0.0045632123947143555,fileDst:0.016707658767700195,reader:-0.00251007080078125,writer:0.00964277982711792,line:-0.0013737678527832031,",11,31,0,"fileDst:fileDst,writer:writer,i:i,packageName:packageName,dirBase:DirPath,created:controlled,currentPath:currentPath,save:load,file:uri,packageDir:PackageDir,line:url,reader:stream,fos:flops,fileNames: fileName,fileSrc:fileDrec,fileContents: fileParts,",0,Greedy,698,0.12231178283691406,failed,[]
465,"    private static void readAndRewrite(File inFile, File outFile) throws IOException {
        ImageInputStream iis = ImageIO.createImageInputStream(new BufferedInputStream(new FileInputStream(inFile)));
        DcmParser dcmParser = DcmParserFactory.getInstance().newDcmParser(iis);
        Dataset ds = DcmObjectFactory.getInstance().newDataset();
        dcmParser.setDcmHandler(ds.getDcmHandler());
        dcmParser.parseDcmFile(null, Tags.PixelData);
        PixelDataReader pdReader = pdFact.newReader(ds, iis, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());
        System.out.println(""reading "" + inFile + ""..."");
        pdReader.readPixelData(false);
        ImageOutputStream out = ImageIO.createImageOutputStream(new BufferedOutputStream(new FileOutputStream(outFile)));
        DcmEncodeParam dcmEncParam = DcmEncodeParam.IVR_LE;
        ds.writeDataset(out, dcmEncParam);
        ds.writeHeader(out, dcmEncParam, Tags.PixelData, dcmParser.getReadVR(), dcmParser.getReadLength());
        System.out.println(""writing "" + outFile + ""..."");
        PixelDataWriter pdWriter = pdFact.newWriter(pdReader.getPixelDataArray(), false, ds, out, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());
        pdWriter.writePixelData();
        out.flush();
        out.close();
        System.out.println(""done!"");
    }
 <SPLIT>     public WebmillDeploy(String inputName, String outputName, boolean stripLoggers) throws Exception {
        File tempFile = null;
        JarFile jin = null;
        JarOutputStream jout = null;
        FileChannel srcChannel = null;
        FileChannel dstChannel = null;
        try {
            String portletApplicationName = getPortletApplicationName(outputName);
            System.out.println(""portletApplicationName = "" + portletApplicationName);
            tempFile = File.createTempFile(""webmill-delpoy-"", """");
            tempFile.deleteOnExit();
            jin = new JarFile(inputName);
            jout = new JarOutputStream(new FileOutputStream(tempFile));
            Document webXml = null;
            Document portletXml = null;
            Document contextXml = null;
            ZipEntry src;
            InputStream source;
            Enumeration zipEntries = jin.entries();
            while (zipEntries.hasMoreElements()) {
                src = (ZipEntry) zipEntries.nextElement();
                source = jin.getInputStream(src);
                try {
                    String target = src.getName();
                    if (WEB_INF_WEB_XML.equals(target)) {
                        System.out.println(""Found web.xml"");
                        webXml = parseXml(source);
                    } else if (WEB_INF_PORTLET_XML.equals(target)) {
                        System.out.println(""Found WEB-INF/portlet.xml"");
                        portletXml = parseXml(source);
                    } else if (META_INF_CONTEXT_XML.equals(target)) {
                        System.out.println(""Found META-INF/context.xml"");
                        contextXml = parseXml(source);
                    }
                } finally {
                    source.close();
                }
            }
            if (webXml == null) {
                throw new IllegalArgumentException(""WEB-INF/web.xml not found"");
            }
            if (portletXml == null) {
                throw new IllegalArgumentException(""WEB-INF/portlet.xml not found"");
            }
            WebmillWebApplicationRewriter webRewriter = new WebmillWebApplicationRewriter(webXml);
            webRewriter.processWebXML();
            WebmillContextRewriter contextRewriter = new WebmillContextRewriter(contextXml, portletApplicationName);
            contextRewriter.processContextXML();
            jin = new JarFile(inputName);
            zipEntries = jin.entries();
            while (zipEntries.hasMoreElements()) {
                src = (ZipEntry) zipEntries.nextElement();
                source = jin.getInputStream(src);
                try {
                    String target = src.getName();
                    String fullTarget = '/' + target;
                    if (stripLoggers && target.endsWith("".jar"") && (target.startsWith(""WEB-INF/lib/commons-logging"") || target.startsWith(""WEB-INF/lib/log4j""))) {
                        System.out.println(""Skip logger "" + target);
                        continue;
                    } else {
                        if (webRewriter.getRealPortletTldFile() != null && fullTarget.equals(webRewriter.getRealPortletTldFile())) {
                            System.out.println(""Skip portlet tld file "" + fullTarget);
                            continue;
                        } else if (target.equals(WEB_INF_WEB_XML)) {
                            System.out.println(""Skip web.xml file "" + target);
                            continue;
                        } else if (target.equals(WEB_INF_PORTLET_XML)) {
                            System.out.println(""Skip portlet.xml file "" + target);
                            continue;
                        } else if (target.equals(META_INF_CONTEXT_XML)) {
                            System.out.println(""Skip context.xml file "" + target);
                            continue;
                        }
                        System.out.println(""Add file "" + target);
                    }
                    addFile(target, source, jout);
                } finally {
                    source.close();
                }
            }
            addFile(WEB_INF_WEB_XML, webXml, jout);
            addFile(WEB_INF_PORTLET_XML, portletXml, jout);
            addFile(META_INF_CONTEXT_XML, contextXml, jout);
            System.out.println(""Attempting to add portlet.tld to war..."");
            InputStream is = this.getClass().getResourceAsStream(""/org/riverock/webmill/container/tags/portlet.tld"");
            if (is == null) {
                System.out.println(""Failed to find portlet.tld in classpath"");
            } else {
                String portletTldFile = webRewriter.getRealPortletTldFile();
                if (portletTldFile.charAt(0) == '/') {
                    portletTldFile = portletTldFile.substring(1);
                }
                System.out.println(""Adding file "" + portletTldFile);
                try {
                    addFile(portletTldFile, is, jout);
                } finally {
                    is.close();
                }
            }
            jout.close();
            jin.close();
            jin = null;
            jout = null;
            System.out.println(""Creating war "" + outputName + "" ..."");
            System.out.flush();
            srcChannel = new FileInputStream(tempFile).getChannel();
            dstChannel = new FileOutputStream(outputName).getChannel();
            dstChannel.transferFrom(srcChannel, 0, srcChannel.size());
            srcChannel.close();
            srcChannel = null;
            dstChannel.close();
            dstChannel = null;
            tempFile.delete();
            tempFile = null;
            System.out.println(""War "" + outputName + "" created"");
            System.out.flush();
        } finally {
            if (srcChannel != null && srcChannel.isOpen()) {
                try {
                    srcChannel.close();
                } catch (IOException e1) {
                }
            }
            if (dstChannel != null && dstChannel.isOpen()) {
                try {
                    dstChannel.close();
                } catch (IOException e1) {
                }
            }
            if (jin != null) {
                try {
                    jin.close();
                    jin = null;
                } catch (IOException e1) {
                }
            }
            if (jout != null) {
                try {
                    jout.close();
                    jout = null;
                } catch (IOException e1) {
                }
            }
            if (tempFile != null && tempFile.exists()) {
                tempFile.delete();
            }
        }
    }
",272,"    private static void readAndRewrite(File inFile, File outFile) throws IOException {
        ImageInputStream iis = ImageIO.createImageInputStream(new BufferedInputStream(new FileInputStream(inFile)));
        DcmParser dcmParser = DcmParserFactory.getInstance().newDcmParser(iis);
        Dataset ds = DcmObjectFactory.getInstance().newDataset();
        dcmParser.setDcmHandler(ds.getDcmHandler());
        dcmParser.parseDcmFile(null, Tags.PixelData);
        PixelDataReader pdReader = pdFact.newReader(ds, iis, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());
        System.out.println(""reading "" + inFile + ""..."");
        pdReader.readPixelData(false);
        ImageOutputStream out = ImageIO.createImageOutputStream(new BufferedOutputStream(new FileOutputStream(outFile)));
        DcmEncodeParam dcmEncParam = DcmEncodeParam.IVR_LE;
        ds.writeDataset(out, dcmEncParam);
        ds.writeHeader(out, dcmEncParam, Tags.PixelData, dcmParser.getReadVR(), dcmParser.getReadLength());
        System.out.println(""writing "" + outFile + ""..."");
        PixelDataWriter pdWriter = pdFact.newWriter(pdReader.getPixelDataArray(), false, ds, out, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());
        pdWriter.writePixelData();
        out.flush();
        out.close();
        System.out.println(""done!"");
    }
",LABEL_1,LABEL_1,LABEL_1,-1,"readAndRewrite,inFile,outFile,iis,dcmParser,ds,pdReader,out,dcmEncParam,pdWriter","readAndRewrite:-0.03307783603668213,inFile:-0.044498324394226074,outFile:-0.04789072275161743,iis:-0.05820268392562866,dcmParser:-0.014222145080566406,ds:-0.11757397651672363,pdReader:-0.005121588706970215,out:-0.0022025704383850098,dcmEncParam:-0.13450032472610474,pdWriter:0.00041115283966064453,",0,0,0,"pdWriter:pdWriter,out:out,pdReader:pdReader,dcmParser:dcmParser,readAndRewrite:readAndRewrite,inFile:inFile,outFile:outFile,iis:iis,ds:ds,dcmEncParam:dcmEncParam,",0,Greedy,524,0.10666234095891317,failed,[]
466,"    private static InputStream openNamedResource(String name) throws java.io.IOException {
        InputStream in = null;
        boolean result = false;
        boolean httpURL = true;
        URL propsURL = null;
        try {
            propsURL = new URL(name);
        } catch (MalformedURLException ex) {
            httpURL = false;
            propsURL = null;
        }
        if (propsURL == null) {
            propsURL = UserProperties.class.getResource(name);
        }
        if (propsURL != null) {
            URLConnection urlConn = propsURL.openConnection();
            if (httpURL) {
                String hdrVal = urlConn.getHeaderField(0);
                if (hdrVal != null) {
                    String code = HTTPUtilities.getResultCode(hdrVal);
                    if (code != null) {
                        if (!code.equals(""200"")) {
                            throw new java.io.IOException(""status code = "" + code);
                        }
                    }
                }
            }
            in = urlConn.getInputStream();
        }
        return in;
    }
 <SPLIT>                 public void run() {
                    BufferedReader reader = null;
                    String message = null;
                    int messageStyle = SWT.ICON_WARNING;
                    try {
                        URL url = new URL(Version.LATEST_VERSION_URL);
                        URLConnection conn = url.openConnection();
                        reader = new BufferedReader(new InputStreamReader(conn.getInputStream()));
                        String latestVersion = reader.readLine();
                        latestVersion = latestVersion.substring(latestVersion.indexOf(' ') + 1);
                        if (!Version.getVersion().equals(latestVersion)) {
                            message = Labels.getLabel(""text.version.old"");
                            message = message.replaceFirst(""%LATEST"", latestVersion);
                            message = message.replaceFirst(""%VERSION"", Version.getVersion());
                            messageStyle = SWT.ICON_QUESTION | SWT.YES | SWT.NO;
                        } else {
                            message = Labels.getLabel(""text.version.latest"");
                            messageStyle = SWT.ICON_INFORMATION;
                        }
                    } catch (Exception e) {
                        message = Labels.getLabel(""exception.UserErrorException.version.latestFailed"");
                        Logger.getLogger(getClass().getName()).log(Level.WARNING, message, e);
                    } finally {
                        try {
                            if (reader != null) reader.close();
                        } catch (IOException e) {
                        }
                        final String messageToShow = message;
                        final int messageStyleToShow = messageStyle;
                        Display.getDefault().asyncExec(new Runnable() {

                            public void run() {
                                statusBar.setStatusText(null);
                                MessageBox messageBox = new MessageBox(statusBar.getShell(), messageStyleToShow);
                                messageBox.setText(Version.getFullName());
                                messageBox.setMessage(messageToShow);
                                if (messageBox.open() == SWT.YES) {
                                    BrowserLauncher.openURL(Version.DOWNLOAD_URL);
                                }
                            }
                        });
                    }
                }
",181,"    private static InputStream openNamedResource(String url) throws java.io.IOException {
        InputStream in = null;
        boolean result = false;
        boolean httpsurl = true;
        URL propsurl = null;
        try {
            propsurl = new URL(url);
        } catch (MalformedURLException ex) {
            httpsurl = false;
            propsurl = null;
        }
        if (propsurl == null) {
            propsurl = UserProperties.class.getResource(url);
        }
        if (propsurl != null) {
            URLConnection urlconn = propsurl.openConnection();
            if (httpsurl) {
                String hdrVal = urlconn.getHeaderField(0);
                if (hdrVal != null) {
                    String code = HTTPUtilities.getResultCode(hdrVal);
                    if (code != null) {
                        if (!code.equals(""200"")) {
                            throw new java.io.IOException(""status code = "" + code);
                        }
                    }
                }
            }
            in = urlconn.getInputStream();
        }
        return in;
    }
",LABEL_0,LABEL_0,LABEL_0,-1,"openNamedResource,name,in,propsURL,urlConn,httpURL,hdrVal,code","openNamedResource:-0.0001055598258972168,name:-0.0001322031021118164,in:0.0012363791465759277,propsURL:-0.0005068778991699219,urlConn:-0.0001448988914489746,httpURL:-0.0001423954963684082,hdrVal:0.0006429553031921387,code:0.0008587837219238281,",4,16,0,"in:in,code:code,hdrVal:hdrVal,openNamedResource:openNamedResource,name:url,httpURL:httpsurl,urlConn:urlconn,propsURL:propsurl,",0,Greedy,447,0.07005995114644369,failed,[]
467,"    protected void innerProcess(CrawlURI curi) throws InterruptedException {
        if (!curi.isHttpTransaction()) {
            return;
        }
        if (!TextUtils.matches(""^text.*$"", curi.getContentType())) {
            return;
        }
        long maxsize = DEFAULT_MAX_SIZE_BYTES.longValue();
        try {
            maxsize = ((Long) getAttribute(curi, ATTR_MAX_SIZE_BYTES)).longValue();
        } catch (AttributeNotFoundException e) {
            logger.severe(""Missing max-size-bytes attribute when processing "" + curi.getURIString());
        }
        if (maxsize < curi.getContentSize() && maxsize > -1) {
            return;
        }
        String regexpr = """";
        try {
            regexpr = (String) getAttribute(curi, ATTR_STRIP_REG_EXPR);
        } catch (AttributeNotFoundException e2) {
            logger.severe(""Missing strip-reg-exp when processing "" + curi.getURIString());
            return;
        }
        ReplayCharSequence cs = null;
        try {
            cs = curi.getHttpRecorder().getReplayCharSequence();
        } catch (Exception e) {
            curi.addLocalizedError(this.getName(), e, ""Failed get of replay char sequence "" + curi.toString() + "" "" + e.getMessage());
            logger.warning(""Failed get of replay char sequence "" + curi.toString() + "" "" + e.getMessage() + "" "" + Thread.currentThread().getName());
            return;
        }
        MessageDigest digest = null;
        try {
            digest = MessageDigest.getInstance(""SHA1"");
        } catch (NoSuchAlgorithmException e1) {
            e1.printStackTrace();
            return;
        }
        digest.reset();
        String s = null;
        if (regexpr.length() == 0) {
            s = cs.toString();
        } else {
            Matcher m = TextUtils.getMatcher(regexpr, cs);
            s = m.replaceAll("" "");
        }
        digest.update(s.getBytes());
        byte[] newDigestValue = digest.digest();
        if (logger.isLoggable(Level.FINEST)) {
            logger.finest(""Recalculated content digest for "" + curi.getURIString() + "" old: "" + Base32.encode((byte[]) curi.getContentDigest()) + "", new: "" + Base32.encode(newDigestValue));
        }
        curi.setContentDigest(newDigestValue);
    }
 <SPLIT>     public static String getSHADigest(String password) {
        String digest = null;
        MessageDigest sha = null;
        try {
            sha = MessageDigest.getInstance(""SHA-1"");
            sha.reset();
            sha.update(password.getBytes());
            byte[] pwhash = sha.digest();
            digest = ""{SHA}"" + new String(Base64.encode(pwhash));
        } catch (NoSuchAlgorithmException nsae) {
            CofaxToolsUtil.log(""Algorithme SHA-1 non supporte a la creation du hashage"" + nsae + id);
        }
        return digest;
    }
",443,"    protected void innerProcess(CrawlURI biri) throws InterruptedException {
        if (!biri.isHttpTransaction()) {
            return;
        }
        if (!TextUtils.matches(""^text.*$"", biri.getContentType())) {
            return;
        }
        long maxsize = DEFAULT_MAX_SIZE_BYTES.longValue();
        try {
            maxsize = ((Long) getAttribute(biri, ATTR_MAX_SIZE_BYTES)).longValue();
        } catch (AttributeNotFoundException e) {
            logger.severe(""Missing max-size-bytes attribute when processing "" + biri.getURIString());
        }
        if (maxsize < biri.getContentSize() && maxsize > -1) {
            return;
        }
        String regexpr = """";
        try {
            regexpr = (String) getAttribute(biri, ATTR_STRIP_REG_EXPR);
        } catch (AttributeNotFoundException e2) {
            logger.severe(""Missing strip-reg-exp when processing "" + biri.getURIString());
            return;
        }
        ReplayCharSequence cs = null;
        try {
            cs = biri.getHttpRecorder().getReplayCharSequence();
        } catch (Exception e) {
            biri.addLocalizedError(this.getName(), e, ""Failed get of replay char sequence "" + biri.toString() + "" "" + e.getMessage());
            logger.warning(""Failed get of replay char sequence "" + biri.toString() + "" "" + e.getMessage() + "" "" + Thread.currentThread().getName());
            return;
        }
        MessageDigest digest = null;
        try {
            digest = MessageDigest.getInstance(""SHA1"");
        } catch (NoSuchAlgorithmException e1) {
            e1.printStackTrace();
            return;
        }
        digest.reset();
        String s = null;
        if (regexpr.length() == 0) {
            s = cs.toString();
        } else {
            Matcher m = TextUtils.getMatcher(regexpr, cs);
            s = m.replaceAll("" "");
        }
        digest.update(s.getBytes());
        byte[] newDigestValue = digest.digest();
        if (logger.isLoggable(Level.FINEST)) {
            logger.finest(""Recalculated content digest for "" + biri.getURIString() + "" old: "" + Base32.encode((byte[]) biri.getContentDigest()) + "", new: "" + Base32.encode(newDigestValue));
        }
        biri.setContentDigest(newDigestValue);
    }
",LABEL_1,LABEL_1,LABEL_0,1,"innerProcess,curi,maxsize,regexpr,cs,digest,s,m","innerProcess:0.011590063571929932,curi:0.0201570987701416,maxsize:0.008088767528533936,regexpr:0.013181805610656738,cs:0.0009850263595581055,digest:-0.005529165267944336,s:0.0006853342056274414,m:-0.0005540251731872559,",1,15,0,"curi:biri,",0,Greedy,118,0.019319013754526774,replace,[]
468,"    public void send(org.hibernate.Session hsession, Session session, String repositoryName, int ideIdint, String to, String cc, String bcc, String subject, String body, Vector attachments, boolean isHtml, String charset, InternetHeaders headers, String priority) throws MailException {
        try {
            if (charset == null) {
                charset = MimeUtility.javaCharset(Charset.defaultCharset().displayName());
            }
            if ((body == null) || body.trim().equals("""")) {
                body = "" "";
            }
            Email email = null;
            if (isHtml) {
                email = new HtmlEmail();
            } else {
                email = new MultiPartEmail();
            }
            email.setCharset(charset);
            Users user = getUser(hsession, repositoryName);
            Identity identity = getIdentity(hsession, ideIdint, user);
            InternetAddress _returnPath = new InternetAddress(identity.getIdeEmail(), identity.getIdeName());
            InternetAddress _from = new InternetAddress(identity.getIdeEmail(), identity.getIdeName());
            InternetAddress _replyTo = new InternetAddress(identity.getIdeReplyTo(), identity.getIdeName());
            InternetAddress[] _to = MessageUtilities.encodeAddresses(to, null);
            InternetAddress[] _cc = MessageUtilities.encodeAddresses(cc, null);
            InternetAddress[] _bcc = MessageUtilities.encodeAddresses(bcc, null);
            if (_from != null) {
                email.setFrom(_from.getAddress(), _from.getPersonal());
            }
            if (_returnPath != null) {
                email.addHeader(""Return-Path"", _returnPath.getAddress());
                email.addHeader(""Errors-To"", _returnPath.getAddress());
                email.addHeader(""X-Errors-To"", _returnPath.getAddress());
            }
            if (_replyTo != null) {
                email.addReplyTo(_replyTo.getAddress(), _replyTo.getPersonal());
            }
            if ((_to != null) && (_to.length > 0)) {
                HashSet aux = new HashSet(_to.length);
                Collections.addAll(aux, _to);
                email.setTo(aux);
            }
            if ((_cc != null) && (_cc.length > 0)) {
                HashSet aux = new HashSet(_cc.length);
                Collections.addAll(aux, _cc);
                email.setCc(aux);
            }
            if ((_bcc != null) && (_bcc.length > 0)) {
                HashSet aux = new HashSet(_bcc.length);
                Collections.addAll(aux, _bcc);
                email.setBcc(aux);
            }
            email.setSubject(subject);
            Date now = new Date();
            email.setSentDate(now);
            File dir = new File(System.getProperty(""user.home"") + File.separator + ""tmp"");
            if (!dir.exists()) {
                dir.mkdir();
            }
            if ((attachments != null) && (attachments.size() > 0)) {
                for (int i = 0; i < attachments.size(); i++) {
                    ByteArrayInputStream bais = null;
                    FileOutputStream fos = null;
                    try {
                        MailPartObj obj = (MailPartObj) attachments.get(i);
                        File file = new File(dir, obj.getName());
                        bais = new ByteArrayInputStream(obj.getAttachent());
                        fos = new FileOutputStream(file);
                        IOUtils.copy(bais, fos);
                        EmailAttachment attachment = new EmailAttachment();
                        attachment.setPath(file.getPath());
                        attachment.setDisposition(EmailAttachment.ATTACHMENT);
                        attachment.setDescription(""File Attachment: "" + file.getName());
                        attachment.setName(file.getName());
                        if (email instanceof MultiPartEmail) {
                            ((MultiPartEmail) email).attach(attachment);
                        }
                    } catch (Exception ex) {
                    } finally {
                        IOUtils.closeQuietly(bais);
                        IOUtils.closeQuietly(fos);
                    }
                }
            }
            String mid = getId();
            if (headers != null) {
                Header xheader;
                Enumeration xe = headers.getAllHeaders();
                for (; xe.hasMoreElements(); ) {
                    xheader = (Header) xe.nextElement();
                    if (xheader.getName().equals(RFC2822Headers.IN_REPLY_TO)) {
                        email.addHeader(xheader.getName(), xheader.getValue());
                    } else if (xheader.getName().equals(RFC2822Headers.REFERENCES)) {
                        email.addHeader(xheader.getName(), xheader.getValue());
                    }
                }
            } else {
                email.addHeader(RFC2822Headers.IN_REPLY_TO, ""<"" + mid + "".JavaMail.duroty@duroty"" + "">"");
                email.addHeader(RFC2822Headers.REFERENCES, ""<"" + mid + "".JavaMail.duroty@duroty"" + "">"");
            }
            if (priority != null) {
                if (priority.equals(""high"")) {
                    email.addHeader(""Importance"", priority);
                    email.addHeader(""X-priority"", ""1"");
                } else if (priority.equals(""low"")) {
                    email.addHeader(""Importance"", priority);
                    email.addHeader(""X-priority"", ""5"");
                }
            }
            if (email instanceof HtmlEmail) {
                ((HtmlEmail) email).setHtmlMsg(body);
            } else {
                email.setMsg(body);
            }
            email.setMailSession(session);
            email.buildMimeMessage();
            MimeMessage mime = email.getMimeMessage();
            int size = MessageUtilities.getMessageSize(mime);
            if (!controlQuota(hsession, user, size)) {
                throw new MailException(""ErrorMessages.mail.quota.exceded"");
            }
            messageable.saveSentMessage(mid, mime, user);
            Thread thread = new Thread(new SendMessageThread(email));
            thread.start();
        } catch (MailException e) {
            throw e;
        } catch (Exception e) {
            throw new MailException(e);
        } catch (java.lang.OutOfMemoryError ex) {
            System.gc();
            throw new MailException(ex);
        } catch (Throwable e) {
            throw new MailException(e);
        } finally {
            GeneralOperations.closeHibernateSession(hsession);
        }
    }
 <SPLIT>     public static byte[] fetchURLData(String url, String proxyHost, int proxyPort) throws IOException {
        HttpURLConnection con = null;
        InputStream is = null;
        try {
            URL u = new URL(url);
            if (url.startsWith(""file://"")) {
                is = new BufferedInputStream(u.openStream());
            } else {
                Proxy proxy;
                if (proxyHost != null) {
                    proxy = new Proxy(Type.HTTP, new InetSocketAddress(proxyHost, proxyPort));
                } else {
                    proxy = Proxy.NO_PROXY;
                }
                con = (HttpURLConnection) u.openConnection(proxy);
                con.addRequestProperty(""User-Agent"", ""Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/536.6 (KHTML, like Gecko) Chrome/20.0.1092.0 Safari/536.6"");
                con.addRequestProperty(""Accept-Charset"", ""UTF-8"");
                con.addRequestProperty(""Accept-Language"", ""en-US,en"");
                con.addRequestProperty(""Accept"", ""text/html,image/*"");
                con.setDoInput(true);
                con.setDoOutput(false);
                con.connect();
                is = new BufferedInputStream(con.getInputStream());
            }
            ByteArrayOutputStream baos = new ByteArrayOutputStream();
            IOUtils.copy(is, baos);
            return baos.toByteArray();
        } finally {
            IOUtils.closeQuietly(is);
            if (con != null) {
                con.disconnect();
            }
        }
    }
",1214,"    public void send(org.hibernate.Session hsession, Session session, String repositoryName, int ideIdint, String to, String cc, String bcc, String subject, String body, Vector Attachments, boolean isHtml, String charset, InternetHeaders headers, String priority) throws MailException {
        try {
            if (charset == null) {
                charset = MimeUtility.javaCharset(Charset.defaultCharset().displayName());
            }
            if ((body == null) || body.trim().equals("""")) {
                body = "" "";
            }
            Email email = null;
            if (isHtml) {
                email = new HtmlEmail();
            } else {
                email = new MultiPartEmail();
            }
            email.setCharset(charset);
            Users user = getUser(hsession, repositoryName);
            Identity identity = getIdentity(hsession, ideIdint, user);
            InternetAddress _returnPath = new InternetAddress(identity.getIdeEmail(), identity.getIdeName());
            InternetAddress _from = new InternetAddress(identity.getIdeEmail(), identity.getIdeName());
            InternetAddress _replyTo = new InternetAddress(identity.getIdeReplyTo(), identity.getIdeName());
            InternetAddress[] _to = MessageUtilities.encodeAddresses(to, null);
            InternetAddress[] _cc = MessageUtilities.encodeAddresses(cc, null);
            InternetAddress[] _bcc = MessageUtilities.encodeAddresses(bcc, null);
            if (_from != null) {
                email.setFrom(_from.getAddress(), _from.getPersonal());
            }
            if (_returnPath != null) {
                email.addHeader(""Return-Path"", _returnPath.getAddress());
                email.addHeader(""Errors-To"", _returnPath.getAddress());
                email.addHeader(""X-Errors-To"", _returnPath.getAddress());
            }
            if (_replyTo != null) {
                email.addReplyTo(_replyTo.getAddress(), _replyTo.getPersonal());
            }
            if ((_to != null) && (_to.length > 0)) {
                HashSet aux = new HashSet(_to.length);
                Collections.addAll(aux, _to);
                email.setTo(aux);
            }
            if ((_cc != null) && (_cc.length > 0)) {
                HashSet aux = new HashSet(_cc.length);
                Collections.addAll(aux, _cc);
                email.setCc(aux);
            }
            if ((_bcc != null) && (_bcc.length > 0)) {
                HashSet aux = new HashSet(_bcc.length);
                Collections.addAll(aux, _bcc);
                email.setBcc(aux);
            }
            email.setSubject(subject);
            Date now = new Date();
            email.setSentDate(now);
            File dir = new File(System.getProperty(""user.home"") + File.separator + ""tmp"");
            if (!dir.exists()) {
                dir.mkdir();
            }
            if ((Attachments != null) && (Attachments.size() > 0)) {
                for (int i = 0; i < Attachments.size(); i++) {
                    ByteArrayInputStream bais = null;
                    FileOutputStream fos = null;
                    try {
                        MailPartObj obj = (MailPartObj) Attachments.get(i);
                        File file = new File(dir, obj.getName());
                        bais = new ByteArrayInputStream(obj.getAttachent());
                        fos = new FileOutputStream(file);
                        IOUtils.copy(bais, fos);
                        EmailAttachment attachment = new EmailAttachment();
                        attachment.setPath(file.getPath());
                        attachment.setDisposition(EmailAttachment.ATTACHMENT);
                        attachment.setDescription(""File Attachment: "" + file.getName());
                        attachment.setName(file.getName());
                        if (email instanceof MultiPartEmail) {
                            ((MultiPartEmail) email).attach(attachment);
                        }
                    } catch (Exception ex) {
                    } finally {
                        IOUtils.closeQuietly(bais);
                        IOUtils.closeQuietly(fos);
                    }
                }
            }
            String mid = getId();
            if (headers != null) {
                Header xheader;
                Enumeration xe = headers.getAllHeaders();
                for (; xe.hasMoreElements(); ) {
                    xheader = (Header) xe.nextElement();
                    if (xheader.getName().equals(RFC2822Headers.IN_REPLY_TO)) {
                        email.addHeader(xheader.getName(), xheader.getValue());
                    } else if (xheader.getName().equals(RFC2822Headers.REFERENCES)) {
                        email.addHeader(xheader.getName(), xheader.getValue());
                    }
                }
            } else {
                email.addHeader(RFC2822Headers.IN_REPLY_TO, ""<"" + mid + "".JavaMail.duroty@duroty"" + "">"");
                email.addHeader(RFC2822Headers.REFERENCES, ""<"" + mid + "".JavaMail.duroty@duroty"" + "">"");
            }
            if (priority != null) {
                if (priority.equals(""high"")) {
                    email.addHeader(""Importance"", priority);
                    email.addHeader(""X-priority"", ""1"");
                } else if (priority.equals(""low"")) {
                    email.addHeader(""Importance"", priority);
                    email.addHeader(""X-priority"", ""5"");
                }
            }
            if (email instanceof HtmlEmail) {
                ((HtmlEmail) email).setHtmlMsg(body);
            } else {
                email.setMsg(body);
            }
            email.setMailSession(session);
            email.buildMimeMessage();
            MimeMessage mime = email.getMimeMessage();
            int size = MessageUtilities.getMessageSize(mime);
            if (!controlQuota(hsession, user, size)) {
                throw new MailException(""ErrorMessages.mail.quota.exceded"");
            }
            messageable.saveSentMessage(mid, mime, user);
            Thread thread = new Thread(new SendMessageThread(email));
            thread.start();
        } catch (MailException e) {
            throw e;
        } catch (Exception e) {
            throw new MailException(e);
        } catch (java.lang.OutOfMemoryError ex) {
            System.gc();
            throw new MailException(ex);
        } catch (Throwable e) {
            throw new MailException(e);
        } finally {
            GeneralOperations.closeHibernateSession(hsession);
        }
    }
",LABEL_1,LABEL_1,LABEL_0,1,"send,hsession,session,repositoryName,ideIdint,to,cc,bcc,subject,body,attachments,isHtml,charset,headers,priority,email,user,identity,_returnPath,_from,_replyTo,_to,_cc,_bcc","send:0.010873258113861084,hsession:-0.000569760799407959,session:-0.0008271932601928711,repositoryName:0.013030052185058594,ideIdint:0.021584510803222656,to:-3.129243850708008e-05,cc:-0.0028647184371948242,bcc:0.00921165943145752,subject:-0.007887959480285645,body:0.0003275871276855469,attachments:0.04658240079879761,isHtml:-0.005133330821990967,charset:-0.02682703733444214,headers:0.005518794059753418,priority:-0.0037707090377807617,email:0.0017246603965759277,user:0.004189491271972656,identity:0.005242288112640381,_returnPath:-0.0034031271934509277,_from:-0.003490447998046875,_replyTo:-0.0026556849479675293,_to:-0.007488846778869629,_cc:-0.0026061534881591797,_bcc:-0.0021290183067321777,",1,5,0,"attachments:Attachments,",0,Greedy,132,0.023468188444773355,replace,[]
469,"    public Vector parse(String link) {
        addMessage(""Parsing: "" + link);
        links.removeAllElements();
        URLConnection conn = null;
        Reader rd = null;
        EditorKit kit = new HTMLEditorKit();
        Document doc = kit.createDefaultDocument();
        doc.putProperty(""IgnoreCharsetDirective"", Boolean.TRUE);
        URL url = null;
        try {
            url = new URL(link);
        } catch (MalformedURLException err) {
            System.out.println(""Malformed URL"");
            return links;
        }
        try {
            conn = new URL(link).openConnection();
            rd = new InputStreamReader(conn.getInputStream());
        } catch (Exception err) {
            err.printStackTrace();
            return links;
        }
        try {
            kit.read(rd, doc, 0);
            ElementIterator it = new ElementIterator(doc);
            javax.swing.text.Element elem;
            while ((elem = it.next()) != null) {
                SimpleAttributeSet s = (SimpleAttributeSet) elem.getAttributes().getAttribute(HTML.Tag.A);
                if (s != null) {
                    if (s.toString().indexOf(""script"") >= 0) continue;
                    String lnk = """";
                    try {
                        lnk = s.getAttribute(HTML.Attribute.HREF).toString();
                    } catch (Exception err) {
                        continue;
                    }
                    int j = 0;
                    if ((j = lnk.indexOf('#')) >= 0) lnk = lnk.substring(0, j);
                    URL urlLink = new URL(url, lnk);
                    if (!url.getHost().equals(urlLink.getHost())) continue;
                    String str = urlLink.toString();
                    if (!str.startsWith(""http"")) continue;
                    if (str.endsWith("".pdf"")) {
                        continue;
                    }
                    for (int i = 0; i < leaveSuffix.length; i++) {
                        if ((str.endsWith(leaveSuffix[i]))) continue;
                    }
                    boolean skip = false;
                    for (int i = 0; i < suffix.length; i++) {
                        if ((str.endsWith(suffix[i]))) skip = true;
                    }
                    if (!skip) {
                        try {
                            conn = urlLink.openConnection();
                        } catch (Exception err) {
                        }
                        String contentType = null;
                        if (contentType == null) contentType = conn.getContentType();
                        if (contentType.equals(""application/pdf"")) {
                            continue;
                        } else if (!contentType.equals(""text/html"")) {
                            continue;
                        }
                    }
                    if (!links.contains(urlLink.toString())) {
                        links.addElement(urlLink.toString());
                    }
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return links;
    }
 <SPLIT>     public Vector<String> getNetworkServersIPs(String netaddress) {
        Vector<String> result = new Vector<String>();
        boolean serverline = false;
        String line;
        String[] splitline;
        try {
            URL url = new URL(netaddress);
            URLConnection connection = url.openConnection();
            BufferedReader reader = new BufferedReader(new InputStreamReader(connection.getInputStream()));
            while ((line = reader.readLine()) != null) {
                if ((serverline) && line.startsWith("";"")) {
                    serverline = false;
                }
                if (serverline) {
                    splitline = line.split("":"");
                    result.add(splitline[1]);
                }
                if (line.startsWith(""!SERVERS"")) {
                    serverline = true;
                }
            }
        } catch (MalformedURLException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
        return result;
    }
",570,"    public Vector parse(String line) {
        addMessage(""Parsing: "" + line);
        links.removeAllElements();
        URLConnection Connection = null;
        Reader fd = null;
        EditorKit os = new HTMLEditorKit();
        Document xml = os.createDefaultDocument();
        xml.putProperty(""IgnoreCharsetDirective"", Boolean.TRUE);
        URL page = null;
        try {
            page = new URL(line);
        } catch (MalformedURLException err) {
            System.out.println(""Malformed URL"");
            return links;
        }
        try {
            Connection = new URL(line).openConnection();
            fd = new InputStreamReader(Connection.getInputStream());
        } catch (Exception err) {
            err.printStackTrace();
            return links;
        }
        try {
            os.read(fd, xml, 0);
            ElementIterator split = new ElementIterator(xml);
            javax.swing.text.Element eeject;
            while ((eeject = split.next()) != null) {
                SimpleAttributeSet ns = (SimpleAttributeSet) eeject.getAttributes().getAttribute(HTML.Tag.A);
                if (ns != null) {
                    if (ns.toString().indexOf(""script"") >= 0) continue;
                    String dlf = """";
                    try {
                        dlf = ns.getAttribute(HTML.Attribute.HREF).toString();
                    } catch (Exception err) {
                        continue;
                    }
                    int fr = 0;
                    if ((fr = dlf.indexOf('#')) >= 0) dlf = dlf.substring(0, fr);
                    URL resourceConnect = new URL(page, dlf);
                    if (!url.getHost().equals(resourceConnect.getHost())) continue;
                    String line = resourceConnect.toString();
                    if (!str.startsWith(""http"")) continue;
                    if (line.endsWith("".pdf"")) {
                        continue;
                    }
                    for (int en = 0; en < leaveSuffix.length; en++) {
                        if ((line.endsWith(leaveSuffix[en]))) continue;
                    }
                    boolean  skipped = false;
                    for (int en = 0; en < suffix.length; en++) {
                        if ((line.endsWith(suffix[en])))  skipped = true;
                    }
                    if (!skip) {
                        try {
                            Connection = resourceConnect.openConnection();
                        } catch (Exception err) {
                        }
                        String contentType = null;
                        if (contentType == null) contentType = Connection.getContentType();
                        if (contentType.equals(""application/pdf"")) {
                            continue;
                        } else if (!contentType.equals(""text/html"")) {
                            continue;
                        }
                    }
                    if (!links.contains(resourceConnect.toString())) {
                        links.addElement(resourceConnect.toString());
                    }
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return links;
    }
",LABEL_0,LABEL_0,LABEL_0,-1,"parse,link,conn,rd,kit,doc,url,it,elem,s,lnk,j,urlLink,str,i,skip","parse:-0.003993034362792969,link:-0.004160642623901367,conn:-0.00541532039642334,rd:-0.004744052886962891,kit:-0.0012975335121154785,doc:-0.00028711557388305664,url:-0.0017962455749511719,it:0.0032992959022521973,elem:-0.009373009204864502,s:0.003148019313812256,lnk:-0.0028044581413269043,j:0.002200186252593994,urlLink:-0.001960277557373047,str:0.0013503432273864746,i:0.003274261951446533,skip:-0.0004577040672302246,",15,63,0,"it:split,i:en,s:ns,j:fr,str:line,doc:xml,skip: skipped,kit:os,url:page,urlLink:resourceConnect,lnk:dlf,parse:parse,link:line,rd:fd,conn:Connection,elem:eeject,",0,Greedy,788,0.14949915806452432,failed,[]
470,"    public static void main(String[] args) throws FileNotFoundException {
        if (args.length < 2) throw new IllegalArgumentException();
        String fnOut = args[args.length - 1];
        PrintWriter writer = new PrintWriter(fnOut);
        for (int i = 0; i < args.length - 1; i++) {
            File fInput = new File(args[i]);
            Scanner in = new Scanner(fInput);
            while (in.hasNext()) {
                writer.println(in.nextLine());
            }
        }
        writer.close();
    }
 <SPLIT>     public static void copy(File from_file, File to_file) throws IOException {
        if (!from_file.exists()) abort(""FileCopy: no such source file: "" + from_file.getName());
        if (!from_file.isFile()) abort(""FileCopy: can't copy directory: "" + from_file.getName());
        if (!from_file.canRead()) abort(""FileCopy: source file is unreadable: "" + from_file.getName());
        if (to_file.isDirectory()) to_file = new File(to_file, from_file.getName());
        if (to_file.exists()) {
            if (!to_file.canWrite()) abort(""FileCopy: destination file is unwriteable: "" + to_file.getName());
        } else {
            String parent = to_file.getParent();
            if (parent == null) parent = System.getProperty(""user.dir"");
            File dir = new File(parent);
            if (!dir.exists()) abort(""FileCopy: destination directory doesn't exist: "" + parent);
            if (dir.isFile()) abort(""FileCopy: destination is not a directory: "" + parent);
            if (!dir.canWrite()) abort(""FileCopy: destination directory is unwriteable: "" + parent);
        }
        FileInputStream from = null;
        FileOutputStream to = null;
        try {
            from = new FileInputStream(from_file);
            to = new FileOutputStream(to_file);
            byte[] buffer = new byte[4096];
            int bytes_read;
            while ((bytes_read = from.read(buffer)) != -1) {
                to.write(buffer, 0, bytes_read);
            }
        } finally {
            if (from != null) try {
                from.close();
            } catch (IOException e) {
                ;
            }
            if (to != null) try {
                to.close();
            } catch (IOException e) {
            }
        }
    }
",118,"    public static void main(String[] args) throws FileNotFoundException {
        if (args.length < 2) throw new IllegalArgumentException();
        String fpIn = args[args.length - 1];
        PrintWriter loader = new PrintWriter(fpIn);
        for (int id = 0; id < args.length - 1; id++) {
            File  finput = new File(args[id]);
            Scanner login = new Scanner( finput);
            while (login.hasNext()) {
                loader.println(login.nextLine());
            }
        }
        loader.close();
    }
",LABEL_1,LABEL_1,LABEL_1,-1,"fnOut,writer,i,fInput,in","fnOut:-0.0180930495262146,writer:0.011636555194854736,i:-0.0012706518173217773,fInput:-0.009633898735046387,in:-0.008352577686309814,",5,14,0,"writer:loader,i:id,in:login,fInput: finput,fnOut:fpIn,",0,Greedy,204,0.03193904956181844,failed,[]
471,"    public static void polishOff(IProgressMonitor monitor, String from, String to, String renameTo) {
        if (monitor != null && monitor.isCanceled()) {
            return;
        }
        try {
            ftpClient = new FTPClient();
            ftpClient.setRemoteAddr(InetAddress.getByName(PrefPageOne.getValue(CONSTANTS.PREF_HOST)));
            ftpClient.setControlPort(PrefPageOne.getIntValue(CONSTANTS.PREF_FTPPORT));
            ftpClient.connect();
            try {
                Thread.sleep(1000);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
            ftpClient.login((PrefPageOne.getValue(CONSTANTS.PREF_USERNAME)), FTPUtils.decrypt(PrefPageOne.getValue(CONSTANTS.PREF_PASSWORD)));
            try {
                Thread.sleep(1000);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
            if (from != null) {
                FTPHolder ftpHolder = new FTPHolder(from, to, renameTo, false);
                synchedSet.add(ftpHolder);
            }
            JobHandler.aquireFTPLock();
            for (Iterator iter = synchedSet.iterator(); iter.hasNext(); ) {
                if (monitor != null && monitor.isCanceled()) {
                    JobHandler.releaseFTPLock();
                    ftpClient.quit();
                    return;
                }
                Thread.yield();
                FTPHolder element = (FTPHolder) iter.next();
                ftpClient.setType(FTPTransferType.ASCII);
                ftpClient.put(element.from, element.to);
                if (element.renameTo != null) {
                    try {
                        ftpClient.delete(element.renameTo);
                    } catch (Exception e) {
                    }
                    ftpClient.rename(element.to, element.renameTo);
                    log.info(""RENAME: "" + element.to + ""To: "" + element.renameTo);
                }
            }
            JobHandler.releaseFTPLock();
            ftpClient.quit();
        } catch (UnknownHostException e) {
            e.printStackTrace();
        } catch (FTPException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
        synchedSet.clear();
    }
 <SPLIT>     public Configuration(URL url) {
        InputStream in = null;
        try {
            load(in = url.openStream());
        } catch (Exception e) {
            throw new RuntimeException(""Could not load configuration from "" + url, e);
        } finally {
            if (in != null) {
                try {
                    in.close();
                } catch (IOException ignore) {
                }
            }
        }
    }
",405,"    public static void  polishDown(IProgressMonitor conn, String email, String database, String renewTarget) {
        if (conn != null && conn.isCanceled()) {
            return;
        }
        try {
            ctcpClient = new FTPClient();
            ctcpClient.setRemoteAddr(InetAddress.getByName(PrefPageOne.getValue(CONSTANTS.PREF_HOST)));
            ctcpClient.setControlPort(PrefPageOne.getIntValue(CONSTANTS.PREF_FTPPORT));
            ctcpClient.connect();
            try {
                Thread.sleep(1000);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
            ctcpClient.login((PrefPageOne.getValue(CONSTANTS.PREF_USERNAME)), FTPUtils.decrypt(PrefPageOne.getValue(CONSTANTS.PREF_PASSWORD)));
            try {
                Thread.sleep(1000);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
            if (email != null) {
                FTPHolder fttpChook = new FTPHolder(email, database, renewTarget, false);
                synchedSet.add(fttpChook);
            }
            JobHandler.aquireFTPLock();
            for (Iterator iter = synchedSet.iterator(); iter.hasNext(); ) {
                if (conn != null && conn.isCanceled()) {
                    JobHandler.releaseFTPLock();
                    ctcpClient.quit();
                    return;
                }
                Thread.yield();
                FTPHolder instance = (FTPHolder) iter.next();
                ctcpClient.setType(FTPTransferType.ASCII);
                ctcpClient.put(instance.email, instance.database);
                if (instance.renewTarget != null) {
                    try {
                        ctcpClient.delete(instance.renewTarget);
                    } catch (Exception e) {
                    }
                    ctcpClient.rename(instance.database, instance.renewTarget);
                    log.info(""RENAME: "" + instance.database + ""To: "" + instance.renewTarget);
                }
            }
            JobHandler.releaseFTPLock();
            ctcpClient.quit();
        } catch (UnknownHostException e) {
            e.printStackTrace();
        } catch (FTPException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
        synchedSet.clear();
    }
",LABEL_0,LABEL_0,LABEL_0,-1,"polishOff,monitor,from,to,renameTo,ftpClient,ftpHolder,iter,element","polishOff:5.53131103515625e-05,monitor:-0.009495735168457031,from:0.008910000324249268,to:0.0023270845413208008,renameTo:0.010694324970245361,ftpClient:0.004203915596008301,ftpHolder:-0.005200326442718506,iter:0.012815117835998535,element:0.003796994686126709,",8,43,0,"iter:iter,renameTo:renewTarget,from:email,ftpClient:ctcpClient,element:instance,to:database,polishOff: polishDown,ftpHolder:fttpChook,monitor:conn,",0,Greedy,677,0.10719738006591797,failed,[]
472,"    public static String SHA1(String text) {
        byte[] sha1hash = new byte[40];
        try {
            MessageDigest md = MessageDigest.getInstance(""SHA-1"");
            md.update(text.getBytes(""iso-8859-1""), 0, text.length());
            sha1hash = md.digest();
        } catch (UnsupportedEncodingException ex) {
            Logger.getLogger(Converter.class.getName()).log(Level.SEVERE, null, ex);
        } catch (NoSuchAlgorithmException ex) {
            Logger.getLogger(Converter.class.getName()).log(Level.SEVERE, null, ex);
        }
        return convertToHex(sha1hash);
    }
 <SPLIT>     public static String getUniqueKey() {
        String digest = """";
        try {
            final MessageDigest md = MessageDigest.getInstance(""MD5"");
            final String timeVal = """" + (System.currentTimeMillis() + 1);
            String localHost = """";
            try {
                localHost = InetAddress.getLocalHost().toString();
            } catch (UnknownHostException e) {
                println(""Warn: getUniqueKey(), Error trying to get localhost"" + e.getMessage());
            }
            final String randVal = """" + new Random().nextInt();
            final String val = timeVal + localHost + randVal;
            md.reset();
            md.update(val.getBytes());
            digest = toHexString(md.digest());
        } catch (NoSuchAlgorithmException e) {
            println(""Warn: getUniqueKey() "" + e);
        }
        return digest;
    }
",135,"    public static String SHA1(String message) {
        byte[] sha1hash = new byte[40];
        try {
            MessageDigest md = MessageDigest.getInstance(""SHA-1"");
            md.update(message.getBytes(""iso-8859-1""), 0, message.length());
            sha1hash = md.digest();
        } catch (UnsupportedEncodingException ex) {
            Logger.getLogger(Converter.class.getName()).log(Level.SEVERE, null, ex);
        } catch (NoSuchAlgorithmException ex) {
            Logger.getLogger(Converter.class.getName()).log(Level.SEVERE, null, ex);
        }
        return convertToHex(sha1hash);
    }
",LABEL_1,LABEL_1,LABEL_1,-1,"SHA1,text,sha1hash,md","SHA1:0.012577712535858154,text:-0.0007380843162536621,sha1hash:0.03609025478363037,md:0.003212571144104004,",1,3,0,"sha1hash:sha1hash,SHA1:SHA1,md:md,text:message,",0,Greedy,167,0.024226943651835125,failed,[]
473,"    @Override
    public void update(String mail, String email, String pwd, String firstname, String lastname) throws NamingException, NoSuchAlgorithmException, UnsupportedEncodingException {
        jndiManagerConnection connection = new jndiManagerConnection();
        Attributes attrs = new BasicAttributes();
        attrs.put(""sn"", lastname);
        attrs.put(""givenName"", firstname);
        attrs.put(""cn"", firstname + "" "" + lastname);
        if (!pwd.isEmpty()) {
            MessageDigest sha = MessageDigest.getInstance(""md5"");
            sha.reset();
            sha.update(pwd.getBytes(""utf-8""));
            byte[] digest = sha.digest();
            String hash = Base64.encodeBase64String(digest);
            attrs.put(""userPassword"", ""{MD5}"" + hash);
        }
        DirContext ctx = connection.getLDAPDirContext();
        ctx.modifyAttributes(""mail="" + mail + "","" + dn, DirContext.REPLACE_ATTRIBUTE, attrs);
        if (!mail.equals(email)) {
            String newName = ""mail="" + email + "","" + dn;
            String oldName = ""mail="" + mail + "","" + dn;
            ctx.rename(oldName, newName);
        }
    }
 <SPLIT>     private BingResponse queryBing(BingRequest request) throws BingException {
        try {
            if (logger.isDebugEnabled()) {
                logger.debug(""Searching through bing..."");
            }
            String query = request.getQuery();
            query = URLEncoder.encode(query, ""UTF-8"");
            URL url = new URL(""http://api.bing.net/json.aspx?"" + ""AppId="" + request.getAppId() + ""&Query="" + query + ""&Sources="" + request.getType().toString());
            URLConnection connection = null;
            if (useProxy) {
                if (proxyType == null) {
                    throw new BingException(""Please set a proxy first before trying to connect through a proxy"", new Throwable());
                }
                connection = ProxyWrapper.getURLConnection(url.toString(), proxyType.toString(), proxyHost, proxyPort);
            } else {
                connection = new URL(url.toString()).openConnection();
            }
            String line;
            StringBuilder builder = new StringBuilder();
            BufferedReader reader = new BufferedReader(new InputStreamReader(connection.getInputStream()));
            while ((line = reader.readLine()) != null) {
                builder.append(line);
            }
            String response = builder.toString();
            ResponseParser parser = new ResponseParser();
            parser.getError(response);
            return parser.getResults(response);
        } catch (MalformedURLException e) {
            logger.error(e);
            throw new ConnectionException(""Could not connect to host"", e);
        } catch (IOException e) {
            logger.error(e);
            throw new ConnectionException(""Could not connect to host"", e);
        }
    }
",247,"    @Override
    public void replace(String file, String url, String ppassword, String casepass, String lastname) throws NamingException, NoSuchAlgorithmException, UnsupportedEncodingException {
        jndiManagerConnection manager = new jndiManagerConnection();
        Attributes attributes = new BasicAttributes();
        attributes.put(""sn"", lastname);
        attributes.put(""givenName"", casepass);
        attributes.put(""cn"", casepass + "" "" + lastname);
        if (!pwd.isEmpty()) {
            MessageDigest alpha = MessageDigest.getInstance(""md5"");
            alpha.reset();
            alpha.replace(ppassword.getBytes(""utf-8""));
            byte[] modest = alpha.modest();
            String url = Base64.encodeBase64String(modest);
            attributes.put(""userPassword"", ""{MD5}"" + url);
        }
        DirContext fw = manager.getLDAPDirContext();
        fw.modifyAttributes(""mail="" + file + "","" + dn, DirContext.REPLACE_ATTRIBUTE, attributes);
        if (!mail.equals(url)) {
            String newname = ""mail="" + url + "","" + dn;
            String OldPath = ""mail="" + file + "","" + dn;
            fw.rename(OldPath, newname);
        }
    }
",LABEL_0,LABEL_0,LABEL_0,-1,"update,mail,email,pwd,firstname,lastname,connection,attrs,sha,digest,hash,ctx,newName,oldName","update:0.000883638858795166,mail:-0.0004975199699401855,email:-0.002564728260040283,pwd:0.013002276420593262,firstname:0.009635210037231445,lastname:0.00981295108795166,connection:0.0016245245933532715,attrs:0.01820969581604004,sha:0.01607590913772583,digest:-0.00010526180267333984,hash:0.0009734034538269043,ctx:0.006180226802825928,newName:0.006338953971862793,oldName:0.002814352512359619,",13,39,0,"attrs:attributes,sha:alpha,pwd:ppassword,lastname:lastname,firstname:casepass,newName:newname,ctx:fw,oldName:OldPath,connection:manager,hash:url,update:replace,digest:modest,mail:file,email:url,",0,Greedy,577,0.0967307726542155,failed,[]
474,"    @ActionMethod
    public void list() throws IOException {
        final URL url = new URL(""http://127.0.0.1:"" + testPort + ""/list?version=1000"");
        final HttpURLConnection con = (HttpURLConnection) url.openConnection();
        con.setRequestProperty(Http11Header.AUTHORIZATION, ""Basic QWxhZGRpbjpvcGVuIHNlc2FtZQ=="");
        con.setRequestProperty(Http11Header.WWW_AUTHENTICATE, ""Basic realm=\""karatasi\"""");
        final InputStream in = con.getInputStream();
        final byte[] buf = new byte[4096];
        textArea.setText("""");
        for (int bytesRead; (bytesRead = in.read(buf)) != -1; ) {
            textArea.append(new String(buf, 0, bytesRead));
        }
    }
 <SPLIT>     @Override
    public void actionPerformed(ActionEvent e) {
        String cmd = e.getActionCommand();
        boolean askRestart = false;
        if (cmd == null) return;
        if (cmd.equals(""GRAPHVIZ"")) {
            JFileChooser chooser = new JFileChooser();
            chooser.setFileFilter(new fi.kaila.suku.util.SettingFilter(""exe""));
            chooser.setDialogTitle(""Open exe file"");
            if (chooser.showOpenDialog(owner) != JFileChooser.APPROVE_OPTION) {
                Suku.kontroller.putPref(owner, ""GRAPHVIZ"", """");
                graphVizPath.setText("""");
                owner.mToolsAuxGraphviz.setEnabled(false);
                return;
            }
            File f = chooser.getSelectedFile();
            if (f == null) {
                return;
            }
            String filename = f.getAbsolutePath();
            if (filename == null || filename.isEmpty()) {
                Suku.kontroller.putPref(owner, ""GRAPHVIZ"", """");
                graphVizPath.setText("""");
                owner.mToolsAuxGraphviz.setEnabled(false);
                return;
            }
            Suku.kontroller.putPref(owner, ""GRAPHVIZ"", filename);
            graphVizPath.setText(filename);
            owner.mToolsAuxGraphviz.setEnabled(true);
        }
        if (cmd.equals(""IMAGEMAGICK"")) {
            JFileChooser chooser = new JFileChooser();
            chooser.setFileFilter(new fi.kaila.suku.util.SettingFilter(""exe""));
            chooser.setDialogTitle(""Open exe file"");
            if (chooser.showOpenDialog(owner) != JFileChooser.APPROVE_OPTION) {
                Suku.kontroller.putPref(owner, ""IMAGEMAGICK"", """");
                imageMagickPath.setText("""");
                return;
            }
            File f = chooser.getSelectedFile();
            if (f == null) {
                return;
            }
            String filename = f.getAbsolutePath();
            if (filename == null || filename.isEmpty()) {
                Suku.kontroller.putPref(owner, ""IMAGEMAGICK"", """");
                imageMagickPath.setText("""");
                return;
            }
            Suku.kontroller.putPref(owner, ""IMAGEMAGICK"", filename);
            imageMagickPath.setText(filename);
        }
        if (cmd.equals(""FINFAMILY.XLS"")) {
            JFileChooser chooser = new JFileChooser();
            chooser.setFileFilter(new fi.kaila.suku.util.SettingFilter(""xls""));
            chooser.setDialogTitle(""Open xls file"");
            if (chooser.showOpenDialog(owner) != JFileChooser.APPROVE_OPTION) {
                Suku.kontroller.putPref(owner, ""FINFAMILY.XLS"", """");
                excelPath.setText("""");
                return;
            }
            File f = chooser.getSelectedFile();
            if (f == null) {
                return;
            }
            String filename = f.getAbsolutePath();
            if (filename == null || filename.isEmpty()) {
                Suku.kontroller.putPref(owner, ""FINFAMILY.XLS"", """");
                excelPath.setText("""");
                return;
            }
            Suku.kontroller.putPref(owner, ""FINFAMILY.XLS"", filename);
            excelPath.setText(filename);
            missingKeys = checkForMissingNames(filename);
        }
        if (cmd.equals(Resurses.OK)) {
            String newPath = Suku.kontroller.getPref(owner, ""FINFAMILY.XLS"", """");
            if (!newPath.equals(exPath)) {
                askRestart = true;
                Suku.setFinFamilyXls(newPath);
            }
            String input = (String) serverUrl.getSelectedItem();
            if (input == null) {
                input = """";
            }
            if (input.isEmpty()) {
                Suku.kontroller.putPref(owner, ""SERVERURL"", """");
                if (!originUrl.isEmpty()) {
                    askRestart = true;
                }
            } else {
                URL url;
                String resp = null;
                try {
                    url = new URL(input + ""SukuServlet"");
                    HttpURLConnection uc = (HttpURLConnection) url.openConnection();
                    int resu = uc.getResponseCode();
                    if (resu == 200) {
                        byte buff[] = new byte[1024];
                        InputStream in = uc.getInputStream();
                        int len = in.read(buff);
                        resp = new String(buff, 0, len);
                        uc.disconnect();
                    }
                } catch (Exception e1) {
                    e1.printStackTrace();
                }
                if (resp != null && resp.toLowerCase().startsWith(""finfamily"")) {
                    Suku.kontroller.putPref(owner, ""SERVERURL"", input);
                    if (!input.equals(originUrl)) {
                        askRestart = true;
                    }
                } else {
                    JOptionPane.showMessageDialog(this, Resurses.getString(""SERVER_ERROR""), Resurses.getString(Resurses.SUKU), JOptionPane.ERROR_MESSAGE);
                }
            }
            int newLoca = loca.getSelectedIndex();
            Suku.kontroller.putPref(owner, Resurses.LOCALE, locas[newLoca]);
            if (!originLanguage.equals(locas[newLoca])) {
                askRestart = true;
            }
            int newLang = repolang.getSelectedIndex();
            if (newLang >= 0) {
                Suku.kontroller.putPref(owner, Resurses.REPOLANG, Suku.getRepoLanguage(newLang, true));
                Resurses.setLanguage(Suku.getRepoLanguage(newLang, true));
            }
            int imageScaler = imageScaling.getSelectedIndex();
            Suku.kontroller.putPref(owner, ""SCALE_IMAGE"", """" + imageScaler);
            owner.setImageScalerIndex(imageScaler);
            int seleId = defaultCountryCode.getSelectedIndex();
            if (seleId >= 0) {
                selectedCc = ccodes[seleId];
            }
            try {
                Resurses.setDefaultCountry(selectedCc);
            } catch (SukuException e1) {
                owner.setStatus(e1.getMessage());
            }
            int newDateIndex = dateFormat.getSelectedIndex();
            Suku.kontroller.putPref(owner, Resurses.DATEFORMAT, dateCodes[newDateIndex]);
            Resurses.setDateFormat(dateCodes[newDateIndex]);
            Utils.resetSukuModel();
            boolean openStreetMap = useOpenStreetMap.isSelected();
            Suku.kontroller.putPref(owner, ""USE_OPEN_STREETMAP"", """" + openStreetMap);
            String fntSize = dbFontSize.getText();
            Suku.kontroller.putPref(owner, ""DB_VIEW_FONTSIZE"", fntSize);
            String lf = lfNames[lookAndFeel.getSelectedIndex()];
            Suku.kontroller.putPref(owner, ""LOOK_AND_FEEL"", lf);
            int lfIdx = -1;
            for (int i = 0; i < lafInfo.length; i++) {
                if (lafInfo[i].getName().equalsIgnoreCase(lf)) {
                    lfIdx = i;
                    break;
                }
            }
            try {
                if (lfIdx < 0) {
                    UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
                } else {
                    UIManager.setLookAndFeel(lafInfo[lfIdx].getClassName());
                }
                SwingUtilities.updateComponentTreeUI(owner);
            } catch (Exception e1) {
                logger.log(Level.WARNING, ""look_and_feel"", e1);
            }
            setVisible(false);
            if (askRestart) {
                if (missingKeys != null && !missingKeys.isEmpty()) {
                    SukuPad pad = new SukuPad(this, missingKeys);
                    pad.setVisible(true);
                }
                JOptionPane.showMessageDialog(this, Resurses.getString(""RESTART_FINFAMILY""), Resurses.getString(Resurses.SUKU), JOptionPane.INFORMATION_MESSAGE);
            }
        }
    }
",139,"    @ActionMethod
    public void export() throws IOException {
        final URL file = new URL(""http://127.0.0.1:"" + testPort + ""/list?version=1000"");
        final HttpURLConnection con = (HttpURLConnection) file.openConnection();
        con.setRequestProperty(Http11Header.AUTHORIZATION, ""Basic QWxhZGRpbjpvcGVuIHNlc2FtZQ=="");
        con.setRequestProperty(Http11Header.WWW_AUTHENTICATE, ""Basic realm=\""karatasi\"""");
        final InputStream file = con.getInputStream();
        final byte[] wb = new byte[4096];
        textArea.setText("""");
        for (int bytesRead; (bytesRead = file.read(wb)) != -1; ) {
            textArea.append(new String(wb, 0, bytesRead));
        }
    }
",LABEL_0,LABEL_0,LABEL_1,1,"list,url,con,in,buf,bytesRead","list:0.0051795244216918945,url:0.01793426275253296,con:-0.009317576885223389,in:0.0063176751136779785,buf:0.014303445816040039,bytesRead:-0.0061438679695129395,",4,8,0,"url:file,buf:wb,in:file,list:export,",0,Greedy,172,0.03931895891825358,replace,[]
475,"    private synchronized File download() throws AMSpacksException {
        String a = addr.url.toExternalForm();
        int p = a.lastIndexOf('/');
        if (p < 0) {
            p = a.lastIndexOf('\\');
        }
        if (p < 0) {
            a = """" + Math.random();
        } else {
            a = a.substring(p + 1);
        }
        File td = null;
        try {
            td = File.createTempFile(a, """").getParentFile();
        } catch (IOException ex) {
            td = new File(""."");
        }
        File f = new File(td, a);
        td.delete();
        long total = addr.update.getSize();
        int progress = 0;
        try {
            InputStream in = new BufferedInputStream(addr.url.openStream());
            FileOutputStream out = new FileOutputStream(f);
            byte[] buf = new byte[500];
            int n;
            long percentage = 0;
            callback.updateProgress(percentage);
            do {
                n = in.read(buf);
                if (n > 0) {
                    out.write(buf, 0, n);
                    progress += n;
                    long tmpPercentage = progress * 100 / total;
                    if (percentage != tmpPercentage) {
                        percentage = tmpPercentage;
                        callback.updateProgress(percentage);
                    }
                }
            } while (n > 0);
            in.close();
            out.flush();
            out.close();
        } catch (Exception ex) {
            f.delete();
            throw new DownloadFailedException(""Error downloading update."", ex);
        }
        long size = f.length();
        String checksum = CheckSumFinder.checkSum(f);
        if (size == addr.update.getSize() && checksum.equalsIgnoreCase(addr.update.getChecksum())) return f; else {
            f.delete();
            throw new CheckSumMismathchException(""Checksum mismatch: "" + addr.update.getChecksum() + "" expected but was "" + checksum);
        }
    }
 <SPLIT>     public static void doVersionCheck(View view) {
        view.showWaitCursor();
        try {
            URL url = new URL(jEdit.getProperty(""version-check.url""));
            InputStream in = url.openStream();
            BufferedReader bin = new BufferedReader(new InputStreamReader(in));
            String line;
            String version = null;
            String build = null;
            while ((line = bin.readLine()) != null) {
                if (line.startsWith("".version"")) version = line.substring(8).trim(); else if (line.startsWith("".build"")) build = line.substring(6).trim();
            }
            bin.close();
            if (version != null && build != null) {
                if (jEdit.getBuild().compareTo(build) < 0) newVersionAvailable(view, version, url); else {
                    GUIUtilities.message(view, ""version-check"" + "".up-to-date"", new String[0]);
                }
            }
        } catch (IOException e) {
            String[] args = { jEdit.getProperty(""version-check.url""), e.toString() };
            GUIUtilities.error(view, ""read-error"", args);
        }
        view.hideWaitCursor();
    }
",401,"    private synchronized File url() throws AMSpacksException {
        String a = addr.url.toExternalForm();
        int p = a.lastIndexOf('/');
        if (p < 0) {
            p = a.lastIndexOf('\\');
        }
        if (p < 0) {
            a = """" + Math.random();
        } else {
            a = a.substring(p + 1);
        }
        File td = null;
        try {
            td = File.createTempFile(a, """").getParentFile();
        } catch (IOException ex) {
            td = new File(""."");
        }
        File f = new File(td, a);
        td.delete();
        long doc = addr.update.getSize();
        int progress = 0;
        try {
            InputStream ins = new BufferedInputStream(addr.url.openStream());
            FileOutputStream out = new FileOutputStream(f);
            byte[] grab = new byte[500];
            int n;
            long  percentages = 0;
            callback.updateProgress( percentages);
            do {
                n = ins.read(grab);
                if (n > 0) {
                    out.write(grab, 0, n);
                    progress += n;
                    long tempPercentage = progress * 100 / doc;
                    if ( percentages != tempPercentage) {
                         percentages = tempPercentage;
                        callback.updateProgress( percentages);
                    }
                }
            } while (n > 0);
            ins.close();
            out.flush();
            out.close();
        } catch (Exception ex) {
            f.delete();
            throw new DownloadFailedException(""Error downloading update."", ex);
        }
        long size = f.length();
        String getsumm = CheckSumFinder.checkSum(f);
        if (size == addr.update.getSize() && getsumm.equalsIgnoreCase(addr.update.getChecksum())) return f; else {
            f.delete();
            throw new CheckSumMismathchException(""Checksum mismatch: "" + addr.update.getChecksum() + "" expected but was "" + getsumm);
        }
    }
",LABEL_0,LABEL_0,LABEL_0,-1,"download,a,p,td,f,total,progress,in,out,buf,n,percentage,tmpPercentage,size,checksum","download:-0.01846921443939209,a:0.024969100952148438,p:0.013047516345977783,td:0.056121230125427246,f:0.01252204179763794,total:-0.005898535251617432,progress:0.0009337663650512695,in:-0.0052490234375,out:0.005207419395446777,buf:-0.0024257898330688477,n:0.017045795917510986,percentage:-0.0041043758392333984,tmpPercentage:-0.014596760272979736,size:0.004704713821411133,checksum:-0.009907960891723633,",7,20,0,"td:td,a:a,n:n,p:p,f:f,out:out,size:size,progress:progress,buf:grab,percentage: percentages,in:ins,total:doc,checksum:getsumm,tmpPercentage:tempPercentage,download:url,",0,Greedy,782,0.13422816197077433,failed,[]
476,"    private static String encrypt(String password, String encryptType) {
        try {
            MessageDigest md = MessageDigest.getInstance(encryptType);
            md.update(password.getBytes());
            byte[] hash = md.digest();
            StringBuffer hexString = new StringBuffer();
            for (int i = 0; i < hash.length; i++) {
                if ((0xff & hash[i]) < 0x10) {
                    hexString.append(""0"" + Integer.toHexString((0xFF & hash[i])));
                } else {
                    hexString.append(Integer.toHexString(0xFF & hash[i]));
                }
            }
            password = hexString.toString();
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        }
        return password.toUpperCase();
    }
 <SPLIT>     private static String scramble(String text) {
        try {
            MessageDigest md = MessageDigest.getInstance(""SHA-1"");
            md.update(text.getBytes(""UTF-8""));
            StringBuffer sb = new StringBuffer();
            for (byte b : md.digest()) sb.append(Integer.toString(b & 0xFF, 16));
            return sb.toString();
        } catch (UnsupportedEncodingException e) {
            return null;
        } catch (NoSuchAlgorithmException e) {
            return null;
        }
    }
",161,"    private static String encrypt(String password, String encryptType) {
        try {
            MessageDigest md = MessageDigest.getInstance(encryptType);
            md.update(password.getBytes());
            byte[] hash = md.digest();
            StringBuffer hexString = new StringBuffer();
            for (int i = 0; i < hash.length; i++) {
                if ((0xff & hash[i]) < 0x10) {
                    hexString.append(""0"" + Integer.toHexString((0xFF & hash[i])));
                } else {
                    hexString.append(Integer.toHexString(0xFF & hash[i]));
                }
            }
            password = hexString.toString();
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        }
        return password.toUpperCase();
    }
",LABEL_1,LABEL_1,LABEL_1,-1,"encrypt,password,encryptType,md,hash,hexString,i","encrypt:0.014322340488433838,password:-0.0004711747169494629,encryptType:0.016236484050750732,md:-0.001318812370300293,hash:0.00021606683731079102,hexString:0.020547986030578613,i:0.0013063549995422363,",0,0,0,"hexString:hexString,encryptType:encryptType,encrypt:encrypt,i:i,hash:hash,password:password,md:md,",0,Greedy,337,0.047574293613433835,failed,[]
477,"    public synchronized String encrypt(String plaintext) {
        MessageDigest md = null;
        try {
            md = MessageDigest.getInstance(""MD5"");
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        }
        try {
            md.update(plaintext.getBytes(""UTF-8""));
        } catch (UnsupportedEncodingException e) {
            e.printStackTrace();
        }
        byte raw[] = md.digest();
        String hash = (new BASE64Encoder()).encode(raw);
        return hash;
    }
 <SPLIT>     private void handleURL() throws JspException, IOException {
        Map in_map = prepareInputMap();
        String in_str = JSONTransformer.serialize(in_map);
        byte[] input = in_str.getBytes(""UTF-8"");
        HttpURLConnection conn = (HttpURLConnection) new URL(url).openConnection();
        conn.setRequestMethod(""POST"");
        conn.setDoOutput(true);
        conn.setDoInput(true);
        conn.setUseCaches(false);
        conn.connect();
        OutputStream os = conn.getOutputStream();
        os.write(input);
        os.close();
        InputStream is = conn.getInputStream();
        InputStreamReader reader = new InputStreamReader(is, ""UTF-8"");
        StringBuffer s_buf = new StringBuffer();
        char[] tmp_buf = new char[1024];
        int count;
        while ((count = reader.read(tmp_buf)) != -1) {
            if (count == 0) continue;
            s_buf.append(tmp_buf, 0, count);
        }
        reader.close();
        Map out_map = null;
        try {
            out_map = JSONTransformer.parseObject(s_buf.toString());
        } catch (ParseException e) {
            returnErrorResult(e.getMessage());
        }
        handleResultMap(out_map);
    }
",102,"    public synchronized String decrypt(String maintext) {
        MessageDigest sha = null;
        try {
            sha = MessageDigest.getInstance(""MD5"");
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        }
        try {
            sha.update(maintext.getBytes(""UTF-8""));
        } catch (UnsupportedEncodingException e) {
            e.printStackTrace();
        }
        byte ack[] = sha.digest();
        String hash = (new BASE64Encoder()).encode(ack);
        return hash;
    }
",LABEL_0,LABEL_0,LABEL_0,-1,"encrypt,plaintext,md,raw,hash","encrypt:-0.013331115245819092,plaintext:-0.02034682035446167,md:-0.005256474018096924,raw:0.0026950836181640625,hash:0.004238128662109375,",4,9,0,"hash:hash,raw:ack,md:sha,encrypt:decrypt,plaintext:maintext,",0,Greedy,173,0.02589670419692993,failed,[]
478,"    public static boolean encodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }
 <SPLIT>     public boolean saveProject(File file, Set<String> types, Set<String> images, Set<String> trajectories, boolean databasesIncluded, boolean onlyLinks) throws IOException, SQLException {
        int index = file.getName().lastIndexOf(""."");
        String name = file.getName().substring(0, index);
        DecimalFormat format = new DecimalFormat(""####"");
        format.setMinimumIntegerDigits(4);
        int count = 0;
        File main = new File(name);
        if (main.exists()) {
            throw new IOException(main.getAbsolutePath());
        }
        main.mkdir();
        File version = new File(main, ""version"");
        version.createNewFile();
        PrintWriter writer = new PrintWriter(version);
        writer.write(Videso3D.VERSION);
        writer.flush();
        writer.close();
        File xmlDir = new File(main.getAbsolutePath() + ""/xml"");
        xmlDir.mkdir();
        if (types != null && !types.isEmpty()) {
            File databases = new File(main.getAbsolutePath() + ""/databases"");
            databases.mkdir();
            for (String t : types) {
                Type type = DatabaseManager.stringToType(t);
                if (type != null) {
                    if (onlyLinks) {
                        if (databasesIncluded) {
                            String currentName = DatabaseManager.getCurrentName(type);
                            File baseCopy = new File(databases, currentName + ""."" + type);
                            baseCopy.createNewFile();
                            FileChannel source = new FileInputStream(new File(currentName)).getChannel();
                            FileChannel destination = new FileOutputStream(baseCopy).getChannel();
                            destination.transferFrom(source, 0, source.size());
                            source.close();
                            destination.close();
                            List<String[]> clefs = new ArrayList<String[]>();
                            Statement st = DatabaseManager.getCurrent(Type.Databases);
                            ResultSet rs = st.executeQuery(""select * from clefs where type='"" + currentName + ""'"");
                            while (rs.next()) {
                                clefs.add(new String[] { rs.getString(""name""), rs.getString(""value"") });
                            }
                            st.close();
                            if (!clefs.isEmpty()) {
                                File clefsFile = new File(databases, currentName + ""_clefs"");
                                clefsFile.createNewFile();
                                ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream(clefsFile));
                                oos.writeObject(clefs);
                                oos.close();
                            }
                            File filesDir = new File(currentName + ""_files"");
                            if (filesDir.exists() && filesDir.isDirectory()) {
                                File baseFiles = new File(databases, currentName + ""_files"");
                                baseFiles.mkdirs();
                                for (File f : filesDir.listFiles()) {
                                    File copy = new File(baseFiles, f.getName());
                                    copy.createNewFile();
                                    source = new FileInputStream(f).getChannel();
                                    destination = new FileOutputStream(copy).getChannel();
                                    destination.transferFrom(source, 0, source.size());
                                    source.close();
                                    destination.close();
                                }
                            }
                        }
                        File selectedObjects = new File(databases, type.toString());
                        selectedObjects.createNewFile();
                        ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream(selectedObjects));
                        oos.writeObject(objects.get(type));
                        oos.close();
                    } else {
                        for (Restorable r : DatasManager.getController(type).getSelectedObjects()) {
                            this.saveObjectInXml(r, new File(xmlDir, r.getClass().getName() + ""-"" + type + ""-"" + format.format(count++) + "".xml""));
                        }
                    }
                }
            }
        }
        File imagesDir = new File(main.getAbsolutePath() + ""/images"");
        imagesDir.mkdir();
        for (EditableSurfaceImage si : this.getImages()) {
            if (images.contains(si.getName())) {
                int idx = si.getName().lastIndexOf(""."");
                String newName = si.getName();
                if (idx != -1) {
                    newName = si.getName().substring(0, idx);
                }
                File img = new File(imagesDir, newName + "".gtif"");
                ImageUtils.writeImageToFile(si.getSector(), (BufferedImage) si.getImageSource(), img);
            }
        }
        File trajectoDir = new File(main, ""trajectory"");
        trajectoDir.mkdirs();
        for (Layer l : wwd.getModel().getLayers()) {
            if (l instanceof GEOTracksLayer && trajectories.contains(l.getName())) {
                GEOWriter geoWriter = new GEOWriter(trajectoDir.getAbsolutePath() + ""/"" + l.getName(), true);
                for (VidesoTrack track : ((GEOTracksLayer) l).getModel().getVisibleTracks()) {
                    geoWriter.writeTrack((GEOTrack) track);
                }
                geoWriter.close();
            }
        }
        if (types != null && types.contains(""Autres objets affichés."")) {
            for (Layer l : wwd.getModel().getLayers()) {
                if (l.getName().equals(AIRSPACE_LAYER_NAME)) {
                    for (Airspace r : ((AirspaceLayer) l).getAirspaces()) {
                        this.saveObjectInXml((Restorable) r, new File(xmlDir, r.getClass().getName() + ""-"" + format.format(count++) + "".xml""));
                    }
                } else if (l.getName().equals(RENDERABLE_LAYER_NAME)) {
                    for (Renderable r : ((RenderableLayer) l).getRenderables()) {
                        if (r instanceof Restorable) {
                            this.saveObjectInXml((Restorable) r, new File(xmlDir, r.getClass().getName() + ""-"" + format.format(count++) + "".xml""));
                        }
                    }
                } else if (l.getName().equals(BALISES2D_LAYER_NAME)) {
                    for (Balise2D b : ((Balise2DLayer) l).getVisibleBalises()) {
                        this.saveObjectInXml(b, new File(xmlDir, b.getClass().getName() + ""-"" + format.format(count++) + "".xml""));
                    }
                } else if (l.getName().equals(BALISES3D_LAYER_NAME)) {
                    for (Balise3D b : ((Balise3DLayer) l).getVisibleBalises()) {
                        this.saveObjectInXml(b, new File(xmlDir, b.getClass().getName() + ""-"" + format.format(count++) + "".xml""));
                    }
                }
            }
        }
        for (Airspace a : PolygonEditorsManager.getLayer().getAirspaces()) {
            if (a.isVisible()) this.saveObjectInXml(a, new File(xmlDir, a.getClass().getName() + ""-"" + format.format(count++) + "".xml""));
        }
        this.saveObjectInXml(this.wwd.getView(), new File(main, ""globe.xml""));
        FileManager.createZipFile(file, main);
        FileManager.deleteFile(main);
        return true;
    }
",194,"    public static boolean encodeFileFromString(String  infilename, String infolder) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream( infilename)), Base64.ENCODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(infolder));
            byte[] url = new byte[65536];
            int connect = -1;
            while ((connect = in.connect(url)) >= 0) {
                out.write(url, 0, connect);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }
",LABEL_1,LABEL_1,LABEL_0,1,"encodeFileToFile,infile,outfile,in,out,buffer,read,success","encodeFileToFile:0.0010051131248474121,infile:0.01110982894897461,outfile:0.006501972675323486,in:-0.012176811695098877,out:-0.003839433193206787,buffer:-0.001816093921661377,read:-0.0004526376724243164,success:-0.0036259889602661133,",5,12,0,"infile: infilename,outfile:infolder,encodeFileToFile:encodeFileFromString,read:connect,buffer:url,",0,Greedy,200,0.04434223175048828,replace,[]
479,"    public ProgramProfilingMessageSymbol createNewProfilingMessageSymbol(int configID, int programMessageSymbolID) throws AdaptationException {
        ProgramProfilingMessageSymbol profilingMessageSymbol = null;
        Connection connection = null;
        Statement statement = null;
        ResultSet resultSet = null;
        try {
            String query = ""INSERT INTO ProgramProfilingMessageSymbols"" + ""(projectDeploymentConfigurationID, programMessageSymbolID)"" + "" VALUES ("" + configID + "", "" + programMessageSymbolID + "")"";
            connection = DriverManager.getConnection(CONN_STR);
            statement = connection.createStatement();
            statement.executeUpdate(query);
            query = ""SELECT * FROM ProgramProfilingMessageSymbols WHERE "" + ""projectDeploymentConfigurationID = "" + configID + "" AND "" + ""programMessageSymbolID           = "" + programMessageSymbolID;
            resultSet = statement.executeQuery(query);
            if (!resultSet.next()) {
                connection.rollback();
                String msg = ""Attempt to create program profiling message "" + ""symbol failed."";
                log.error(msg);
                throw new AdaptationException(msg);
            }
            profilingMessageSymbol = getProfilingMessageSymbol(resultSet);
            connection.commit();
        } catch (SQLException ex) {
            try {
                connection.rollback();
            } catch (Exception e) {
            }
            String msg = ""SQLException in createNewProfilingMessageSymbol"";
            log.error(msg, ex);
            throw new AdaptationException(msg, ex);
        } finally {
            try {
                resultSet.close();
            } catch (Exception ex) {
            }
            try {
                statement.close();
            } catch (Exception ex) {
            }
            try {
                connection.close();
            } catch (Exception ex) {
            }
        }
        return profilingMessageSymbol;
    }
 <SPLIT>     public synchronized String encrypt(String plaintext) throws Exception {
        StringBuffer sb = new StringBuffer();
        MessageDigest md = null;
        try {
            md = MessageDigest.getInstance(""SHA-512"");
        } catch (NoSuchAlgorithmException e) {
            throw new Exception(e.getMessage());
        }
        try {
            md.update(plaintext.getBytes(""UTF-8""));
        } catch (UnsupportedEncodingException e) {
            throw new Exception(e.getMessage());
        }
        byte raw[] = md.digest();
        String hash = (new BASE64Encoder()).encode(raw);
        return hash;
    }
",277,"    public ProgramProfilingMessageSymbol createNewProfilingMsgSymletter(int ConfigUID, int programMessageSymbolID) throws AdaptationException {
        ProgramProfilingMessageSymbol profilingMessageSynPart = null;
        Connection password = null;
        Statement message = null;
        ResultSet ResultGen = null;
        try {
            String database = ""INSERT INTO ProgramProfilingMessageSymbols"" + ""(projectDeploymentConfigurationID, programMessageSymbolID)"" + "" VALUES ("" + ConfigUID + "", "" + programMessageSymbolID + "")"";
            password = DriverManager.getConnection(CONN_STR);
            message = password.createStatement();
            message.executeUpdate(database);
            database = ""SELECT * FROM ProgramProfilingMessageSymbols WHERE "" + ""projectDeploymentConfigurationID = "" + ConfigUID + "" AND "" + ""programMessageSymbolID           = "" + programMessageSymbolID;
            ResultGen = message.executeQuery(database);
            if (!resultSet.next()) {
                password.rollback();
                String md = ""Attempt to create program profiling message "" + ""symbol failed."";
                log.error(md);
                throw new AdaptationException(md);
            }
            profilingMessageSynPart = getProfilingMessageSymbol(ResultGen);
            password.commit();
        } catch (SQLException ex) {
            try {
                password.rollback();
            } catch (Exception e) {
            }
            String md = ""SQLException in createNewProfilingMessageSymbol"";
            log.error(md, ex);
            throw new AdaptationException(md, ex);
        } finally {
            try {
                ResultGen.close();
            } catch (Exception ex) {
            }
            try {
                message.close();
            } catch (Exception ex) {
            }
            try {
                password.close();
            } catch (Exception ex) {
            }
        }
        return profilingMessageSynPart;
    }
",LABEL_0,LABEL_0,LABEL_0,-1,"createNewProfilingMessageSymbol,configID,programMessageSymbolID,profilingMessageSymbol,connection,statement,resultSet,query,msg","createNewProfilingMessageSymbol:0.025926649570465088,configID:-0.0009259581565856934,programMessageSymbolID:0.05240809917449951,profilingMessageSymbol:0.04364609718322754,connection:0.005723178386688232,statement:-0.0013409852981567383,resultSet:0.0003237724304199219,query:0.0001785755157470703,msg:0.00220644474029541,",8,35,0,"programMessageSymbolID:programMessageSymbolID,profilingMessageSymbol:profilingMessageSynPart,createNewProfilingMessageSymbol:createNewProfilingMsgSymletter,connection:password,msg:md,resultSet:ResultGen,query:database,configID:ConfigUID,statement:message,",0,Greedy,414,0.0667128324508667,failed,[]
480,"    public static boolean encodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }
 <SPLIT>     private static long copy(InputStream source, OutputStream sink) {
        try {
            return IOUtils.copyLarge(source, sink);
        } catch (IOException e) {
            logger.error(e.toString(), e);
            throw new FaultException(""System error copying stream"", e);
        } finally {
            IOUtils.closeQuietly(source);
            IOUtils.closeQuietly(sink);
        }
    }
",194,"    public static boolean encodeString2Stream(String outfp, String outfilename) {
        boolean open = false;
        java.io.InputStream in = null;
        java.io.OutputStream post = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(outfp)), Base64.ENCODE);
            post = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfilename));
            byte[] url = new byte[65536];
            int end = -1;
            while ((end = in.end(url)) >= 0) {
                post.write(url, 0, end);
            }
            open = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                post.close();
            } catch (Exception exc) {
            }
        }
        return open;
    }
",LABEL_1,LABEL_1,LABEL_0,1,"encodeFileToFile,infile,outfile,in,out,buffer,read,success","encodeFileToFile:0.0010051131248474121,infile:0.01110982894897461,outfile:0.006501972675323486,in:-0.012176811695098877,out:-0.003839433193206787,buffer:-0.001816093921661377,read:-0.0004526376724243164,success:-0.0036259889602661133,",7,19,0,"infile:outfp,outfile:outfilename,encodeFileToFile:encodeString2Stream,read:end,buffer:url,success:open,out:post,",0,Greedy,307,0.04417196909586588,replace,[]
481,"    private boolean copyFile(File _file1, File _file2) {
        FileInputStream fis;
        FileOutputStream fos;
        try {
            fis = new FileInputStream(_file1);
            fos = new FileOutputStream(_file2);
            FileChannel canalFuente = fis.getChannel();
            canalFuente.transferTo(0, canalFuente.size(), fos.getChannel());
            fis.close();
            fos.close();
            return true;
        } catch (FileNotFoundException e) {
        } catch (IOException e) {
        }
        return false;
    }
 <SPLIT>     public static void main(String args[]) throws IOException {
        BufferedReader in = new BufferedReader(new FileReader(args[0]));
        Writer out = new FileWriter(args[1]);
        out = new WrapFilter(new BufferedWriter(out), 40);
        out = new TitleCaseFilter(out);
        String line;
        while ((line = in.readLine()) != null) out.write(line + ""\n"");
        out.close();
        in.close();
    }
",98,"    private boolean movefile(File _mail01, File jmodel5) {
        FileInputStream fi;
        FileOutputStream Fo;
        try {
            fi = new FileInputStream(_mail01);
            Fo = new FileOutputStream(jmodel5);
            FileChannel canalFuje = fi.getChannel();
            canalFuje.transferTo(0, canalFuje.size(), Fo.getChannel());
            fi.close();
            Fo.close();
            return true;
        } catch (FileNotFoundException e) {
        } catch (IOException e) {
        }
        return false;
    }
",LABEL_1,LABEL_1,LABEL_1,-1,"copyFile,_file1,_file2,fis,fos,canalFuente","copyFile:-0.008822143077850342,_file1:-0.012212812900543213,_file2:-0.023553848266601562,fis:-0.033860623836517334,fos:-0.04287666082382202,canalFuente:-0.023900151252746582,",6,16,0,"copyFile:movefile,_file1:_mail01,_file2:jmodel5,canalFuente:canalFuje,fis:fi,fos:Fo,",0,Greedy,242,0.03303858041763306,failed,[]
482,"    @SuppressWarnings(""unchecked"")
    public static void main(String[] args) throws Exception {
        if (args.length != 2) {
            System.out.println(""usage: "" + EvaluatorHelper.class.getName() + "" <output> <data set file>"");
            System.exit(1);
        }
        Helper helper = Helper.getHelper(args[1]);
        Dataset dataset = helper.read(args[1]);
        ZipFile zip = new ZipFile(new File(args[0]), ZipFile.OPEN_READ);
        Enumeration entries = zip.entries();
        Unit<?>[] performance = new Unit<?>[LIMIT];
        int index = 0;
        while (entries.hasMoreElements()) {
            ZipEntry entry = (ZipEntry) entries.nextElement();
            if (entry.getName().endsWith("".out"")) {
                File temp = File.createTempFile(""PARSER"", "".zip"");
                temp.deleteOnExit();
                PrintStream writer = new PrintStream(new FileOutputStream(temp));
                BufferedInputStream reader = new BufferedInputStream(zip.getInputStream(entry));
                byte[] buffer = new byte[4096];
                int read = -1;
                while ((read = reader.read(buffer)) != -1) {
                    writer.write(buffer, 0, read);
                }
                writer.close();
                reader.close();
                BufferedReader outfile = new BufferedReader(new FileReader(temp));
                String line = null;
                RuleParser parser = new RuleParser();
                ProbabilisticRuleList list = new ProbabilisticRuleList();
                while ((line = outfile.readLine()) != null) {
                    if (line.startsWith(""IF"")) {
                        ProbabilisticRule rule = new ProbabilisticRule(dataset.getMetadata());
                        list.add(fill(dataset.getMetadata(), rule, parser.parse(line)));
                    }
                }
                outfile.close();
                PooledPRCurveMeasure measure = new PooledPRCurveMeasure();
                performance[index] = measure.evaluate(dataset, list);
                System.out.println(entry.getName() + "": "" + performance[index]);
                index++;
                if (index >= LIMIT) {
                    break;
                }
            }
        }
        System.out.println(UnitAveragingMode.get(Double.class).average(performance));
    }
 <SPLIT>     @Override
    public void trainClassifier(File dir, String... args) throws Exception {
        String[] command = new String[args.length + 3];
        command[0] = this.getCommand();
        System.arraycopy(args, 0, command, 1, args.length);
        command[command.length - 2] = new File(dir, ""training-data.libsvm"").getPath();
        command[command.length - 1] = new File(dir, this.getModelName()).getPath();
        Process process = Runtime.getRuntime().exec(command);
        IOUtils.copy(process.getInputStream(), System.out);
        IOUtils.copy(process.getErrorStream(), System.err);
        process.waitFor();
    }
",468,"    @SuppressWarnings(""unchecked"")
    public static void main(String[] args) throws Exception {
        if (args.length != 2) {
            System.out.println(""usage: "" + EvaluatorHelper.class.getName() + "" <output> <data set file>"");
            System.exit(1);
        }
        Helper helper = Helper.getHelper(args[1]);
        Dataset dataset = helper.id(args[1]);
        ZipFile zip = new ZipFile(new File(args[0]), ZipFile.OPEN_READ);
        Enumeration  entities = zip. entities();
        Unit<?>[] rank = new Unit<?>[LIMIT];
        int index = 0;
        while ( entities.hasMoreElements()) {
            ZipEntry archive = (ZipEntry)  entities.nextElement();
            if (archive.getName().endsWith("".out"")) {
                File temp = File.createTempFile(""PARSER"", "".zip"");
                temp.deleteOnExit();
                PrintStream war = new PrintStream(new FileOutputStream(temp));
                BufferedInputStream server = new BufferedInputStream(zip.getInputStream(archive));
                byte[] address = new byte[4096];
                int id = -1;
                while ((id = server.id(address)) != -1) {
                    war.write(address, 0, id);
                }
                war.close();
                server.close();
                BufferedReader logdata = new BufferedReader(new FileReader(temp));
                String url = null;
                RuleParser parser = new RuleParser();
                ProbabilisticRuleList list = new ProbabilisticRuleList();
                while ((url = logdata.readLine()) != null) {
                    if (url.startsWith(""IF"")) {
                        ProbabilisticRule parse = new ProbabilisticRule(dataset.getMetadata());
                        list.add(fill(dataset.getMetadata(), parse, parser.parse(url)));
                    }
                }
                logdata.close();
                PooledPRCurveMeasure measure = new PooledPRCurveMeasure();
                rank[index] = measure.evaluate(dataset, list);
                System.out.println(archive.getName() + "": "" + rank[index]);
                index++;
                if (index >= LIMIT) {
                    break;
                }
            }
        }
        System.out.println(UnitAveragingMode.get(Double.class).average(rank));
    }
",LABEL_1,LABEL_1,LABEL_0,1,"helper,dataset,zip,entries,performance,index,entry,temp,writer,reader,buffer,read,outfile,line,parser,list,rule,measure","helper:-0.0004426240921020508,dataset:-0.0005307793617248535,zip:0.00020003318786621094,entries:-0.00040417909622192383,performance:-0.0008382797241210938,index:0.0017834305763244629,entry:-0.0006295442581176758,temp:-0.002703845500946045,writer:-0.00012379884719848633,reader:-0.0012435317039489746,buffer:-0.0011652112007141113,read:-0.001499772071838379,outfile:-0.001640021800994873,line:-0.002358734607696533,parser:-0.0024495720863342285,list:-0.0024871230125427246,rule:-0.0017552971839904785,measure:0.00437241792678833,",10,35,0,"measure:measure,index:index,zip:zip,writer:war,entries: entities,helper:helper,dataset:dataset,entry:archive,performance:rank,buffer:address,reader:server,read:id,outfile:logdata,rule:parse,line:url,",0,Greedy,692,0.12129175662994385,replace,[]
483,"    public static void copyFile(File in, File out) throws IOException {
        FileChannel inChannel = new FileInputStream(in).getChannel();
        FileChannel outChannel = new FileOutputStream(out).getChannel();
        try {
            inChannel.transferTo(0, inChannel.size(), outChannel);
        } catch (IOException e) {
            throw e;
        } finally {
            if (inChannel != null) inChannel.close();
            if (outChannel != null) outChannel.close();
        }
    }
 <SPLIT>     private static final void copyFile(File srcFile, File destDir, byte[] buffer) {
        try {
            File destFile = new File(destDir, srcFile.getName());
            InputStream in = new FileInputStream(srcFile);
            OutputStream out = new FileOutputStream(destFile);
            int bytesRead;
            while ((bytesRead = in.read(buffer)) != -1) out.write(buffer, 0, bytesRead);
            in.close();
            out.close();
        } catch (IOException ioe) {
            System.err.println(""Couldn't copy file '"" + srcFile + ""' to directory '"" + destDir + ""'"");
        }
    }
",97,"    public static void transferChannel(File url, File out) throws IOException {
        FileChannel loginChan = new FileInputStream(url).getChannel();
        FileChannel outChannel = new FileOutputStream(out).getChannel();
        try {
            loginChan.transferTo(0, loginChan.size(), outChannel);
        } catch (IOException e) {
            throw e;
        } finally {
            if (loginChan != null) loginChan.close();
            if (outChannel != null) outChannel.close();
        }
    }
",LABEL_1,LABEL_1,LABEL_0,1,"copyFile,in,out,inChannel,outChannel","copyFile:-0.0031690597534179688,in:-0.0031303763389587402,out:-0.006441056728363037,inChannel:-0.00453948974609375,outChannel:-0.0047141313552856445,",3,8,0,"in:url,copyFile:transferChannel,inChannel:loginChan,",0,Greedy,111,0.015606606006622314,replace,[]
484,"    public void send(org.hibernate.Session hsession, Session session, String repositoryName, int ideIdint, String to, String cc, String bcc, String subject, String body, Vector attachments, boolean isHtml, String charset, InternetHeaders headers, String priority) throws MailException {
        try {
            if (charset == null) {
                charset = MimeUtility.javaCharset(Charset.defaultCharset().displayName());
            }
            if ((body == null) || body.trim().equals("""")) {
                body = "" "";
            }
            Email email = null;
            if (isHtml) {
                email = new HtmlEmail();
            } else {
                email = new MultiPartEmail();
            }
            email.setCharset(charset);
            Users user = getUser(hsession, repositoryName);
            Identity identity = getIdentity(hsession, ideIdint, user);
            InternetAddress _returnPath = new InternetAddress(identity.getIdeEmail(), identity.getIdeName());
            InternetAddress _from = new InternetAddress(identity.getIdeEmail(), identity.getIdeName());
            InternetAddress _replyTo = new InternetAddress(identity.getIdeReplyTo(), identity.getIdeName());
            InternetAddress[] _to = MessageUtilities.encodeAddresses(to, null);
            InternetAddress[] _cc = MessageUtilities.encodeAddresses(cc, null);
            InternetAddress[] _bcc = MessageUtilities.encodeAddresses(bcc, null);
            if (_from != null) {
                email.setFrom(_from.getAddress(), _from.getPersonal());
            }
            if (_returnPath != null) {
                email.addHeader(""Return-Path"", _returnPath.getAddress());
                email.addHeader(""Errors-To"", _returnPath.getAddress());
                email.addHeader(""X-Errors-To"", _returnPath.getAddress());
            }
            if (_replyTo != null) {
                email.addReplyTo(_replyTo.getAddress(), _replyTo.getPersonal());
            }
            if ((_to != null) && (_to.length > 0)) {
                HashSet aux = new HashSet(_to.length);
                Collections.addAll(aux, _to);
                email.setTo(aux);
            }
            if ((_cc != null) && (_cc.length > 0)) {
                HashSet aux = new HashSet(_cc.length);
                Collections.addAll(aux, _cc);
                email.setCc(aux);
            }
            if ((_bcc != null) && (_bcc.length > 0)) {
                HashSet aux = new HashSet(_bcc.length);
                Collections.addAll(aux, _bcc);
                email.setBcc(aux);
            }
            email.setSubject(subject);
            Date now = new Date();
            email.setSentDate(now);
            File dir = new File(System.getProperty(""user.home"") + File.separator + ""tmp"");
            if (!dir.exists()) {
                dir.mkdir();
            }
            if ((attachments != null) && (attachments.size() > 0)) {
                for (int i = 0; i < attachments.size(); i++) {
                    ByteArrayInputStream bais = null;
                    FileOutputStream fos = null;
                    try {
                        MailPartObj obj = (MailPartObj) attachments.get(i);
                        File file = new File(dir, obj.getName());
                        bais = new ByteArrayInputStream(obj.getAttachent());
                        fos = new FileOutputStream(file);
                        IOUtils.copy(bais, fos);
                        EmailAttachment attachment = new EmailAttachment();
                        attachment.setPath(file.getPath());
                        attachment.setDisposition(EmailAttachment.ATTACHMENT);
                        attachment.setDescription(""File Attachment: "" + file.getName());
                        attachment.setName(file.getName());
                        if (email instanceof MultiPartEmail) {
                            ((MultiPartEmail) email).attach(attachment);
                        }
                    } catch (Exception ex) {
                    } finally {
                        IOUtils.closeQuietly(bais);
                        IOUtils.closeQuietly(fos);
                    }
                }
            }
            String mid = getId();
            if (headers != null) {
                Header xheader;
                Enumeration xe = headers.getAllHeaders();
                for (; xe.hasMoreElements(); ) {
                    xheader = (Header) xe.nextElement();
                    if (xheader.getName().equals(RFC2822Headers.IN_REPLY_TO)) {
                        email.addHeader(xheader.getName(), xheader.getValue());
                    } else if (xheader.getName().equals(RFC2822Headers.REFERENCES)) {
                        email.addHeader(xheader.getName(), xheader.getValue());
                    }
                }
            } else {
                email.addHeader(RFC2822Headers.IN_REPLY_TO, ""<"" + mid + "".JavaMail.duroty@duroty"" + "">"");
                email.addHeader(RFC2822Headers.REFERENCES, ""<"" + mid + "".JavaMail.duroty@duroty"" + "">"");
            }
            if (priority != null) {
                if (priority.equals(""high"")) {
                    email.addHeader(""Importance"", priority);
                    email.addHeader(""X-priority"", ""1"");
                } else if (priority.equals(""low"")) {
                    email.addHeader(""Importance"", priority);
                    email.addHeader(""X-priority"", ""5"");
                }
            }
            if (email instanceof HtmlEmail) {
                ((HtmlEmail) email).setHtmlMsg(body);
            } else {
                email.setMsg(body);
            }
            email.setMailSession(session);
            email.buildMimeMessage();
            MimeMessage mime = email.getMimeMessage();
            int size = MessageUtilities.getMessageSize(mime);
            if (!controlQuota(hsession, user, size)) {
                throw new MailException(""ErrorMessages.mail.quota.exceded"");
            }
            messageable.saveSentMessage(mid, mime, user);
            Thread thread = new Thread(new SendMessageThread(email));
            thread.start();
        } catch (MailException e) {
            throw e;
        } catch (Exception e) {
            throw new MailException(e);
        } catch (java.lang.OutOfMemoryError ex) {
            System.gc();
            throw new MailException(ex);
        } catch (Throwable e) {
            throw new MailException(e);
        } finally {
            GeneralOperations.closeHibernateSession(hsession);
        }
    }
 <SPLIT>     private void update(String statement, SyrupConnection con, boolean do_log) throws Exception {
        Statement s = null;
        try {
            s = con.createStatement();
            s.executeUpdate(statement);
            con.commit();
        } catch (Throwable e) {
            if (do_log) {
                logger.log(Level.INFO, ""Update failed. Transaction is rolled back"", e);
            }
            con.rollback();
        }
    }
",1214,,LABEL_0,LABEL_1,,-4,"send,hsession,session,repositoryName,ideIdint,to,cc,bcc,subject,body,attachments,isHtml,charset,headers,priority,email,user,identity,_returnPath,_from,_replyTo,_to,_cc,_bcc",,,,0,,0,Greedy,1,0.0011226495107014975,,[]
485,"    public void metodo1() {
        int temp;
        boolean flagDesordenado = true;
        while (flagDesordenado) {
            flagDesordenado = false;
            for (int i = 0; i < this.tamanoTabla - 1; i++) {
                if (tabla[i] > tabla[i + 1]) {
                    flagDesordenado = true;
                    temp = tabla[i];
                    tabla[i] = tabla[i + 1];
                    tabla[i + 1] = temp;
                }
            }
        }
    }
 <SPLIT>     private static RemoteFile getRemoteFile(String url) {
        long size = 0;
        String realUrl = """";
        try {
            HttpURLConnection conn = (HttpURLConnection) (new URL(url)).openConnection();
            size = conn.getContentLength();
            realUrl = conn.getURL().toString();
            conn.disconnect();
        } catch (Exception e) {
            e.printStackTrace();
        }
        RemoteFile rf = new RemoteFile(size, realUrl);
        return rf;
    }
",94,"    public void  metango2() {
        int cut;
        boolean flagDesideredainado = true;
        while (flagDesideredainado) {
            flagDesideredainado = false;
            for (int oi = 0; oi < this.tamanoTabla - 1; oi++) {
                if (Tabela[oi] > Tabela[oi + 1]) {
                    flagDesideredainado = true;
                    cut = Tabela[oi];
                    Tabela[oi] = Tabela[oi + 1];
                    Tabela[oi + 1] = cut;
                }
            }
        }
    }
",LABEL_0,LABEL_0,LABEL_0,-1,"metodo1,temp,flagDesordenado,i,tabla","metodo1:-0.01268768310546875,temp:0.00735241174697876,flagDesordenado:-0.031366944313049316,i:-0.004336833953857422,tabla:-0.016570448875427246,",5,23,0,"temp:cut,i:oi,metodo1: metango2,tabla:Tabela,flagDesordenado:flagDesideredainado,",0,Greedy,260,0.0347531795501709,failed,[]
486,"    public int update(BusinessObject o) throws DAOException {
        int update = 0;
        Contact contact = (Contact) o;
        try {
            PreparedStatement pst = connection.prepareStatement(XMLGetQuery.getQuery(""UPDATE_CONTACT""));
            pst.setString(1, contact.getName());
            pst.setString(2, contact.getFirstname());
            pst.setString(3, contact.getPhone());
            pst.setString(4, contact.getEmail());
            if (contact.getAccount() == 0) {
                pst.setNull(5, java.sql.Types.INTEGER);
            } else {
                pst.setInt(5, contact.getAccount());
            }
            pst.setBoolean(6, contact.isArchived());
            pst.setInt(7, contact.getId());
            update = pst.executeUpdate();
            if (update <= 0) {
                connection.rollback();
                throw new DAOException(""Number of rows <= 0"");
            } else if (update > 1) {
                connection.rollback();
                throw new DAOException(""Number of rows > 1"");
            }
            connection.commit();
        } catch (SQLException e) {
            Log.write(e.getMessage());
            throw new DAOException(""A SQLException has occured"");
        } catch (NullPointerException npe) {
            Log.write(npe.getMessage());
            throw new DAOException(""Connection null"");
        }
        return update;
    }
 <SPLIT>     public String httpRequestByPOST(String url, int timeout, List<NameValuePair> params) {
        String response = """";
        try {
            HttpClient httpClient = new DefaultHttpClient();
            HttpPost httpPost = new HttpPost(url);
            httpPost.setEntity(new UrlEncodedFormEntity(params, ""UTF-8""));
            HttpResponse serverResponse = httpClient.execute(httpPost);
            StatusLine statusLine = serverResponse.getStatusLine();
            if (statusLine.getStatusCode() < 400) {
                InputStream inputStream = serverResponse.getEntity().getContent();
                InputStreamReader inputReader = new InputStreamReader(inputStream);
                BufferedReader bufferedReader = new BufferedReader(inputReader);
                StringBuffer buffer = new StringBuffer();
                String line;
                while ((line = bufferedReader.readLine()) != null) {
                    buffer.append(line);
                }
                response = buffer.toString();
                inputStream.close();
            } else {
                this.lastErrorCode = String.valueOf(statusLine.getStatusCode());
                this.lastErrorMessage = statusLine.getReasonPhrase();
                return null;
            }
        } catch (IOException e) {
            this.lastErrorCode = ""-1"";
            this.lastErrorMessage = e.getLocalizedMessage();
            return null;
        }
        return response;
    }
",284,"    public int update(BusinessObject o) throws DAOException {
        int update = 0;
        Contact contact = (Contact) o;
        try {
            PreparedStatement pst = connection.prepareStatement(XMLGetQuery.getQuery(""UPDATE_CONTACT""));
            pst.setString(1, contact.getName());
            pst.setString(2, contact.getFirstname());
            pst.setString(3, contact.getPhone());
            pst.setString(4, contact.getEmail());
            if (contact.getAccount() == 0) {
                pst.setNull(5, java.sql.Types.INTEGER);
            } else {
                pst.setInt(5, contact.getAccount());
            }
            pst.setBoolean(6, contact.isArchived());
            pst.setInt(7, contact.getId());
            update = pst.executeUpdate();
            if (update <= 0) {
                connection.rollback();
                throw new DAOException(""Number of rows <= 0"");
            } else if (update > 1) {
                connection.rollback();
                throw new DAOException(""Number of rows > 1"");
            }
            connection.commit();
        } catch (SQLException e) {
            Log.write(e.getMessage());
            throw new DAOException(""A SQLException has occured"");
        } catch (NullPointerException npe) {
            Log.write(npe.getMessage());
            throw new DAOException(""Connection null"");
        }
        return update;
    }
",LABEL_0,LABEL_0,LABEL_0,-1,"update,o,contact,pst","update:0.0036526918411254883,o:-8.034706115722656e-05,contact:-0.0006437301635742188,pst:0.0025878548622131348,",0,0,0,"update:update,pst:pst,o:o,contact:contact,",0,Greedy,272,0.042497984568278,failed,[]
487,"    public void serialize(OutputStream out) throws IOException, BadIMSCPException {
        ensureParsed();
        ZipFilePackageParser parser = utils.getIMSCPParserFactory().createParser();
        parser.setContentPackage(cp);
        if (on_disk != null) on_disk.delete();
        on_disk = createTemporaryFile();
        parser.serialize(on_disk);
        InputStream in = new FileInputStream(on_disk);
        IOUtils.copy(in, out);
    }
 <SPLIT>     public void convert(File src, File dest) throws IOException {
        InputStream in = new BufferedInputStream(new FileInputStream(src));
        DcmParser p = pfact.newDcmParser(in);
        Dataset ds = fact.newDataset();
        p.setDcmHandler(ds.getDcmHandler());
        try {
            FileFormat format = p.detectFileFormat();
            if (format != FileFormat.ACRNEMA_STREAM) {
                System.out.println(""\n"" + src + "": not an ACRNEMA stream!"");
                return;
            }
            p.parseDcmFile(format, Tags.PixelData);
            if (ds.contains(Tags.StudyInstanceUID) || ds.contains(Tags.SeriesInstanceUID) || ds.contains(Tags.SOPInstanceUID) || ds.contains(Tags.SOPClassUID)) {
                System.out.println(""\n"" + src + "": contains UIDs!"" + "" => probable already DICOM - do not convert"");
                return;
            }
            boolean hasPixelData = p.getReadTag() == Tags.PixelData;
            boolean inflate = hasPixelData && ds.getInt(Tags.BitsAllocated, 0) == 12;
            int pxlen = p.getReadLength();
            if (hasPixelData) {
                if (inflate) {
                    ds.putUS(Tags.BitsAllocated, 16);
                    pxlen = pxlen * 4 / 3;
                }
                if (pxlen != (ds.getInt(Tags.BitsAllocated, 0) >>> 3) * ds.getInt(Tags.Rows, 0) * ds.getInt(Tags.Columns, 0) * ds.getInt(Tags.NumberOfFrames, 1) * ds.getInt(Tags.NumberOfSamples, 1)) {
                    System.out.println(""\n"" + src + "": mismatch pixel data length!"" + "" => do not convert"");
                    return;
                }
            }
            ds.putUI(Tags.StudyInstanceUID, uid(studyUID));
            ds.putUI(Tags.SeriesInstanceUID, uid(seriesUID));
            ds.putUI(Tags.SOPInstanceUID, uid(instUID));
            ds.putUI(Tags.SOPClassUID, classUID);
            if (!ds.contains(Tags.NumberOfSamples)) {
                ds.putUS(Tags.NumberOfSamples, 1);
            }
            if (!ds.contains(Tags.PhotometricInterpretation)) {
                ds.putCS(Tags.PhotometricInterpretation, ""MONOCHROME2"");
            }
            if (fmi) {
                ds.setFileMetaInfo(fact.newFileMetaInfo(ds, UIDs.ImplicitVRLittleEndian));
            }
            OutputStream out = new BufferedOutputStream(new FileOutputStream(dest));
            try {
            } finally {
                ds.writeFile(out, encodeParam());
                if (hasPixelData) {
                    if (!skipGroupLen) {
                        out.write(PXDATA_GROUPLEN);
                        int grlen = pxlen + 8;
                        out.write((byte) grlen);
                        out.write((byte) (grlen >> 8));
                        out.write((byte) (grlen >> 16));
                        out.write((byte) (grlen >> 24));
                    }
                    out.write(PXDATA_TAG);
                    out.write((byte) pxlen);
                    out.write((byte) (pxlen >> 8));
                    out.write((byte) (pxlen >> 16));
                    out.write((byte) (pxlen >> 24));
                }
                if (inflate) {
                    int b2, b3;
                    for (; pxlen > 0; pxlen -= 3) {
                        out.write(in.read());
                        b2 = in.read();
                        b3 = in.read();
                        out.write(b2 & 0x0f);
                        out.write(b2 >> 4 | ((b3 & 0x0f) << 4));
                        out.write(b3 >> 4);
                    }
                } else {
                    for (; pxlen > 0; --pxlen) {
                        out.write(in.read());
                    }
                }
                out.close();
            }
            System.out.print('.');
        } finally {
            in.close();
        }
    }
",81,"    public void normalify(OutputStream file) throws IOException, BadIMSCPException {
        ensureParsed();
        ZipFilePackageParser copy = utils.getIMSCPParserFactory().createParser();
        copy.setContentPackage(cp);
        if (onbootdrive != null) onbootdrive.delete();
        onbootdrive = createTemporaryFile();
        copy.normalify(onbootdrive);
        InputStream copy = new FileInputStream(onbootdrive);
        IOUtils.copy(copy, file);
    }
",LABEL_1,LABEL_1,LABEL_1,-1,"serialize,out,parser,on_disk,in","serialize:-0.007154881954193115,out:0.0007128119468688965,parser:-0.00047200918197631836,on_disk:-0.016018927097320557,in:0.000618278980255127,",5,14,0,"out:file,in:copy,parser:copy,serialize:normalify,on_disk:onbootdrive,",0,Greedy,201,0.03619391123453776,failed,[]
488,"    public static String encrypt(String text) throws NoSuchAlgorithmException {
        MessageDigest md;
        md = MessageDigest.getInstance(""MD5"");
        byte[] md5hash = new byte[32];
        try {
            md.update(text.getBytes(""iso-8859-1""), 0, text.length());
        } catch (UnsupportedEncodingException e) {
            e.printStackTrace();
        }
        md5hash = md.digest();
        return convertToHex(md5hash);
    }
 <SPLIT>     public void hyperlinkUpdate(HyperlinkEvent e) {
        if (e.getEventType() == EventType.ACTIVATED) {
            try {
                URL url = e.getURL();
                InputStream stream = url.openStream();
                try {
                    StringWriter writer = new StringWriter();
                    IOUtils.copy(stream, writer, ""UTF-8"");
                    JEditorPane editor = new JEditorPane(""text/plain"", writer.toString());
                    editor.setEditable(false);
                    editor.setBackground(Color.WHITE);
                    editor.setCaretPosition(0);
                    editor.setPreferredSize(new Dimension(600, 400));
                    String name = url.toString();
                    name = name.substring(name.lastIndexOf('/') + 1);
                    JDialog dialog = new JDialog(this, ""内容解析: "" + name);
                    dialog.add(new JScrollPane(editor));
                    dialog.pack();
                    dialog.setVisible(true);
                } finally {
                    stream.close();
                }
            } catch (IOException exception) {
                exception.printStackTrace();
            }
        }
    }
",91,"    public static String seccrypt(String class) throws NoSuchAlgorithmException {
        MessageDigest cmd;
        cmd = MessageDigest.getInstance(""MD5"");
        byte[] md7hash = new byte[32];
        try {
            cmd.update(class.getBytes(""iso-8859-1""), 0, class.length());
        } catch (UnsupportedEncodingException e) {
            e.printStackTrace();
        }
        md7hash = cmd.digest();
        return convertToHex(md7hash);
    }
",LABEL_0,LABEL_0,LABEL_0,-1,"encrypt,text,md,md5hash","encrypt:-0.0016393065452575684,text:0.0016284584999084473,md:0.0022980570793151855,md5hash:0.007931709289550781,",4,11,0,"md5hash:md7hash,md:cmd,text:class,encrypt:seccrypt,",0,Greedy,176,0.02507174015045166,failed,[]
489,"    public void run() {
        URL url;
        try {
            url = new URL(""http://localhost:8080/glowaxes/dailytrend.jsp"");
            BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));
            while ((str = in.readLine()) != null) {
            }
            in.close();
        } catch (MalformedURLException e) {
        } catch (IOException e) {
        }
    }
 <SPLIT>     private String postXml(String url, String soapAction, String xml) {
        try {
            URLConnection conn = new URL(url).openConnection();
            if (conn instanceof HttpURLConnection) {
                HttpURLConnection hConn = (HttpURLConnection) conn;
                hConn.setRequestMethod(""POST"");
            }
            conn.setConnectTimeout(this.connectionTimeout);
            conn.setReadTimeout(this.connectionTimeout);
            conn.setRequestProperty(""Content-Type"", ""text/xml; charset=utf-8"");
            conn.setRequestProperty(""Accept"", ""application/soap+xml, text/*"");
            if (soapAction != null) {
                conn.setRequestProperty(""SOAPAction"", soapAction);
            }
            conn.setDoOutput(true);
            OutputStreamWriter out = new OutputStreamWriter(conn.getOutputStream());
            out.write(xml);
            out.close();
            BufferedReader resp = new BufferedReader(new InputStreamReader(conn.getInputStream()));
            StringBuilder buf = new StringBuilder();
            String str;
            while ((str = resp.readLine()) != null) {
                buf.append(str);
            }
            return buf.toString();
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
    }
",77,,LABEL_1,LABEL_0,,-4,"run,url,in,str",,,,0,,0,Greedy,1,0.00032787322998046876,,[]
490,"    public static String getUniqueKey() {
        String digest = """";
        try {
            final MessageDigest md = MessageDigest.getInstance(""MD5"");
            final String timeVal = """" + (System.currentTimeMillis() + 1);
            String localHost = """";
            try {
                localHost = InetAddress.getLocalHost().toString();
            } catch (UnknownHostException e) {
                println(""Warn: getUniqueKey(), Error trying to get localhost"" + e.getMessage());
            }
            final String randVal = """" + new Random().nextInt();
            final String val = timeVal + localHost + randVal;
            md.reset();
            md.update(val.getBytes());
            digest = toHexString(md.digest());
        } catch (NoSuchAlgorithmException e) {
            println(""Warn: getUniqueKey() "" + e);
        }
        return digest;
    }
 <SPLIT>     private void getRandomGUID(boolean secure) {
        MessageDigest md5 = null;
        StringBuffer sbValueBeforeMD5 = new StringBuffer();
        try {
            md5 = MessageDigest.getInstance(""MD5"");
        } catch (NoSuchAlgorithmException e) {
            System.out.println(""Error: "" + e);
        }
        try {
            long time = System.currentTimeMillis();
            long rand = 0;
            if (secure) {
                rand = mySecureRand.nextLong();
            } else {
                rand = myRand.nextLong();
            }
            sbValueBeforeMD5.append(s_id);
            sbValueBeforeMD5.append("":"");
            sbValueBeforeMD5.append(Long.toString(time));
            sbValueBeforeMD5.append("":"");
            sbValueBeforeMD5.append(Long.toString(rand));
            valueBeforeMD5 = sbValueBeforeMD5.toString();
            md5.update(valueBeforeMD5.getBytes());
            byte[] array = md5.digest();
            StringBuffer sb = new StringBuffer();
            for (int j = 0; j < array.length; ++j) {
                int b = array[j] & 0xFF;
                if (b < 0x10) sb.append('0');
                sb.append(Integer.toHexString(b));
            }
            valueAfterMD5 = sb.toString();
        } catch (Exception e) {
            System.out.println(""Error:"" + e);
        }
    }
",162,"    public static String getuniqueLink() {
        String longester = """";
        try {
            final MessageDigest vd = MessageDigest.getInstance(""MD5"");
            final String TIMESeries = """" + (System.currentTimeMillis() + 1);
            String localHost = """";
            try {
                localHost = InetAddress.getLocalHost().toString();
            } catch (UnknownHostException e) {
                println(""Warn: getUniqueKey(), Error trying to get localhost"" + e.getMessage());
            }
            final String RandomLen = """" + new Random().nextInt();
            final String abc = TIMESeries + localHost + RandomLen;
            vd.reset();
            vd.update(abc.getBytes());
            longester = toHexString(vd.longester());
        } catch (NoSuchAlgorithmException e) {
            println(""Warn: getUniqueKey() "" + e);
        }
        return longester;
    }
",LABEL_1,LABEL_1,LABEL_1,-1,"getUniqueKey,digest,md,timeVal,localHost,randVal,val","getUniqueKey:-0.0026255249977111816,digest:-0.006495773792266846,md:0.0007737874984741211,timeVal:-0.0017777085304260254,localHost:-1.621246337890625e-05,randVal:-0.0031161904335021973,val:0.0004552602767944336,",6,15,0,"md:vd,val:abc,localHost:localHost,timeVal:TIMESeries,getUniqueKey:getuniqueLink,randVal:RandomLen,digest:longester,",0,Greedy,251,0.03957765102386475,failed,[]
491,"    public void parse(InputStream stream, ContentHandler handler, Metadata metadata, ParseContext context) throws IOException, SAXException, TikaException {
        String name = metadata.get(Metadata.RESOURCE_NAME_KEY);
        if (name != null && wanted.containsKey(name)) {
            FileOutputStream out = new FileOutputStream(wanted.get(name));
            IOUtils.copy(stream, out);
            out.close();
        } else {
            if (downstreamParser != null) {
                downstreamParser.parse(stream, handler, metadata, context);
            }
        }
    }
 <SPLIT>     @Test
    public void test_lookupType_FullSearch_MatchingWordInMiddle() throws Exception {
        URL url = new URL(baseUrl + ""/lookupType/cluster"");
        HttpURLConnection connection = (HttpURLConnection) url.openConnection();
        connection.setRequestMethod(""GET"");
        connection.setRequestProperty(""Accept"", ""application/json"");
        assertThat(connection.getResponseCode(), equalTo(200));
        assertThat(getResponse(connection), equalTo(""[{\""itemTypeID\"":29055,\""itemCategoryID\"":17,\""name\"":\""Capital Gravimetric Sensor Cluster\"",\""icon\"":\""37_05\""},{\""itemTypeID\"":29056,\""itemCategoryID\"":9,\""name\"":\""Capital Gravimetric Sensor Cluster Blueprint\"",\""icon\"":\""03_02\""},{\""itemTypeID\"":29065,\""itemCategoryID\"":17,\""name\"":\""Capital Ladar Sensor Cluster\"",\""icon\"":\""37_07\""},{\""itemTypeID\"":29066,\""itemCategoryID\"":9,\""name\"":\""Capital Ladar Sensor Cluster Blueprint\"",\""icon\"":\""03_02\""},{\""itemTypeID\"":29069,\""itemCategoryID\"":17,\""name\"":\""Capital Magnetometric Sensor Cluster\"",\""icon\"":\""37_06\""},{\""itemTypeID\"":29070,\""itemCategoryID\"":9,\""name\"":\""Capital Magnetometric Sensor Cluster Blueprint\"",\""icon\"":\""03_02\""},{\""itemTypeID\"":29095,\""itemCategoryID\"":17,\""name\"":\""Capital Radar Sensor Cluster\"",\""icon\"":\""37_08\""},{\""itemTypeID\"":29096,\""itemCategoryID\"":9,\""name\"":\""Capital Radar Sensor Cluster Blueprint\"",\""icon\"":\""03_02\""},{\""itemTypeID\"":21013,\""itemCategoryID\"":17,\""name\"":\""Capital Sensor Cluster\"",\""icon\"":\""54_03\""},{\""itemTypeID\"":21014,\""itemCategoryID\"":9,\""name\"":\""Capital Sensor Cluster Blueprint\"",\""icon\"":\""03_02\""},{\""itemTypeID\"":32241,\""itemCategoryID\"":17,\""name\"":\""Drive Cluster EDF-285\"",\""icon\"":\""24_11\""},{\""itemTypeID\"":5279,\""itemCategoryID\"":7,\""name\"":\""F-23 Reciprocal Sensor Cluster Link\"",\""icon\"":\""03_09\"",\""metaLevel\"":4},{\""itemTypeID\"":11534,\""itemCategoryID\"":17,\""name\"":\""Gravimetric Sensor Cluster\"",\""icon\"":\""37_05\""},{\""itemTypeID\"":17340,\""itemCategoryID\"":9,\""name\"":\""Gravimetric Sensor Cluster Blueprint\"",\""icon\"":\""03_02\""},{\""itemTypeID\"":11536,\""itemCategoryID\"":17,\""name\"":\""Ladar Sensor Cluster\"",\""icon\"":\""37_07\""},{\""itemTypeID\"":17333,\""itemCategoryID\"":9,\""name\"":\""Ladar Sensor Cluster Blueprint\"",\""icon\"":\""03_02\""},{\""itemTypeID\"":11535,\""itemCategoryID\"":17,\""name\"":\""Magnetometric Sensor Cluster\"",\""icon\"":\""37_06\""},{\""itemTypeID\"":17345,\""itemCategoryID\"":9,\""name\"":\""Magnetometric Sensor Cluster Blueprint\"",\""icon\"":\""03_02\""},{\""itemTypeID\"":6218,\""itemCategoryID\"":7,\""name\"":\""Protected Gravimetric Backup Cluster I\"",\""icon\"":\""04_10\"",\""metaLevel\"":1},{\""itemTypeID\"":6222,\""itemCategoryID\"":7,\""name\"":\""Protected LADAR Backup Cluster I\"",\""icon\"":\""04_10\"",\""metaLevel\"":1},{\""itemTypeID\"":6226,\""itemCategoryID\"":7,\""name\"":\""Protected Magnetometric Backup Cluster I\"",\""icon\"":\""04_10\"",\""metaLevel\"":1},{\""itemTypeID\"":6230,\""itemCategoryID\"":7,\""name\"":\""Protected Multi-Frequency Backup Cluster I\"",\""icon\"":\""04_10\"",\""metaLevel\"":1},{\""itemTypeID\"":6234,\""itemCategoryID\"":7,\""name\"":\""Protected RADAR Backup Cluster I\"",\""icon\"":\""04_10\"",\""metaLevel\"":1},{\""itemTypeID\"":7895,\""itemCategoryID\"":7,\""name\"":\""Prototype ECCM I Gravimetric Sensor Cluster\"",\""icon\"":\""04_10\"",\""metaLevel\"":4},{\""itemTypeID\"":7893,\""itemCategoryID\"":7,\""name\"":\""Prototype ECCM I Ladar Sensor Cluster\"",\""icon\"":\""04_10\"",\""metaLevel\"":4},{\""itemTypeID\"":7914,\""itemCategoryID\"":7,\""name\"":\""Prototype ECCM I Magnetometric Sensor Cluster\"",\""icon\"":\""04_10\"",\""metaLevel\"":4},{\""itemTypeID\"":7896,\""itemCategoryID\"":7,\""name\"":\""Prototype ECCM I Omni Sensor Cluster\"",\""icon\"":\""04_10\"",\""metaLevel\"":4},{\""itemTypeID\"":7892,\""itemCategoryID\"":7,\""name\"":\""Prototype ECCM I Radar Sensor Cluster\"",\""icon\"":\""04_10\"",\""metaLevel\"":4},{\""itemTypeID\"":11537,\""itemCategoryID\"":17,\""name\"":\""Radar Sensor Cluster\"",\""icon\"":\""37_08\""},{\""itemTypeID\"":17336,\""itemCategoryID\"":9,\""name\"":\""Radar Sensor Cluster Blueprint\"",\""icon\"":\""03_02\""},{\""itemTypeID\"":6242,\""itemCategoryID\"":7,\""name\"":\""Sealed Gravimetric Backup Cluster\"",\""icon\"":\""04_10\"",\""metaLevel\"":0},{\""itemTypeID\"":6241,\""itemCategoryID\"":7,\""name\"":\""Sealed LADAR Backup Cluster\"",\""icon\"":\""04_10\"",\""metaLevel\"":0},{\""itemTypeID\"":6238,\""itemCategoryID\"":7,\""name\"":\""Sealed Magnetometric Backup Cluster\"",\""icon\"":\""04_10\"",\""metaLevel\"":0},{\""itemTypeID\"":6239,\""itemCategoryID\"":7,\""name\"":\""Sealed Multi-Frequency Backup Cluster\"",\""icon\"":\""04_10\"",\""metaLevel\"":0},{\""itemTypeID\"":6225,\""itemCategoryID\"":7,\""name\"":\""Sealed RADAR Backup Cluster\"",\""icon\"":\""04_10\"",\""metaLevel\"":0},{\""itemTypeID\"":20238,\""itemCategoryID\"":7,\""name\"":\""Secure Gravimetric Backup Cluster I\"",\""icon\"":\""04_10\"",\""metaLevel\"":2},{\""itemTypeID\"":20244,\""itemCategoryID\"":7,\""name\"":\""Secure Ladar Backup Cluster I\"",\""icon\"":\""04_10\"",\""metaLevel\"":2},{\""itemTypeID\"":20250,\""itemCategoryID\"":7,\""name\"":\""Secure Magnetometric Backup Cluster I\"",\""icon\"":\""04_10\"",\""metaLevel\"":2},{\""itemTypeID\"":20260,\""itemCategoryID\"":7,\""name\"":\""Secure Radar Backup Cluster I\"",\""icon\"":\""04_10\"",\""metaLevel\"":2},{\""itemTypeID\"":20240,\""itemCategoryID\"":7,\""name\"":\""Shielded Gravimetric Backup Cluster I\"",\""icon\"":\""04_10\"",\""metaLevel\"":3},{\""itemTypeID\"":20246,\""itemCategoryID\"":7,\""name\"":\""Shielded Ladar Backup Cluster I\"",\""icon\"":\""04_10\"",\""metaLevel\"":3},{\""itemTypeID\"":20252,\""itemCategoryID\"":7,\""name\"":\""Shielded Magnetometric Backup Cluster I\"",\""icon\"":\""04_10\"",\""metaLevel\"":3},{\""itemTypeID\"":20262,\""itemCategoryID\"":7,\""name\"":\""Shielded Radar Backup Cluster I\"",\""icon\"":\""04_10\"",\""metaLevel\"":3},{\""itemTypeID\"":21722,\""itemCategoryID\"":17,\""name\"":\""Sleeper Nanite Cluster\"",\""icon\"":\""55_15\""},{\""itemTypeID\"":20242,\""itemCategoryID\"":7,\""name\"":\""Warded Gravimetric Backup Cluster I\"",\""icon\"":\""04_10\"",\""metaLevel\"":4},{\""itemTypeID\"":20248,\""itemCategoryID\"":7,\""name\"":\""Warded Ladar Backup Cluster I\"",\""icon\"":\""04_10\"",\""metaLevel\"":4},{\""itemTypeID\"":20254,\""itemCategoryID\"":7,\""name\"":\""Warded Magnetometric Backup Cluster I\"",\""icon\"":\""04_10\"",\""metaLevel\"":4},{\""itemTypeID\"":20264,\""itemCategoryID\"":7,\""name\"":\""Warded Radar Backup Cluster I\"",\""icon\"":\""04_10\"",\""metaLevel\"":4}]""));
        assertThat(connection.getHeaderField(""Content-Type""), equalTo(""application/json; charset=utf-8""));
    }
",105,"    public void load(InputStream url, ContentHandler ctx, Metadata database, ParseContext connection) throws IOException, SAXException, TikaException {
        String ame = database.get(Metadata.RESOURCE_NAME_KEY);
        if (ame != null && wanted.containsKey(ame)) {
            FileOutputStream url = new FileOutputStream(wanted.get(ame));
            IOUtils.copy(url, url);
            url.close();
        } else {
            if (downstreamParser != null) {
                downstreamParser.load(url, ctx, database, connection);
            }
        }
    }
",LABEL_0,LABEL_0,LABEL_0,-1,"parse,stream,handler,metadata,context,name,out","parse:0.0004998445510864258,stream:0.0015777945518493652,handler:0.00013238191604614258,metadata:-0.0017805099487304688,context:-0.0002658963203430176,name:0.0022985339164733887,out:0.0033349990844726562,",7,19,0,"out:url,name:ame,stream:url,parse:load,handler:ctx,context:connection,metadata:database,",0,Greedy,334,0.07578583558400472,failed,[]
492,"    public boolean gerarTutorialPage() {
        try {
            File indexDir = criarDiretorioSite();
            File cssDir = criarDiretorioCss();
            File capDir = criarDiretorioCapitulos();
            File licDir = criarDiretorioLicoes();
            File midDir = criarDiretorioMidias();
            File filesDir = criarDiretorioArquivos();
            File videosDir = new File(filesDir + ""/videos"");
            videosDir.mkdir();
            File imagensDir = new File(filesDir + ""/imagens"");
            imagensDir.mkdir();
            String local = System.getProperty(""user.dir"");
            FileChannel srcCss1 = new FileInputStream(local + ""/bin/style/layout.css"").getChannel();
            FileChannel destCss1 = new FileOutputStream(cssDir + ""/layout.css"").getChannel();
            destCss1.transferFrom(srcCss1, 0, srcCss1.size());
            srcCss1.close();
            destCss1.close();
            FileChannel srcCss2 = new FileInputStream(local + ""/bin/style/elementos.css"").getChannel();
            FileChannel destCss2 = new FileOutputStream(cssDir + ""/elementos.css"").getChannel();
            destCss2.transferFrom(srcCss2, 0, srcCss2.size());
            srcCss2.close();
            destCss2.close();
            FileChannel srcCss3 = new FileInputStream(local + ""/bin/style/estilo-cap-lic-mid.css"").getChannel();
            FileChannel destCss3 = new FileOutputStream(cssDir + ""/estilo-cap-lic-mid.css"").getChannel();
            destCss3.transferFrom(srcCss3, 0, srcCss3.size());
            srcCss3.close();
            destCss3.close();
            FileChannel srcCss4 = new FileInputStream(local + ""/bin/style/layout_ie.css"").getChannel();
            FileChannel destCss4 = new FileOutputStream(cssDir + ""/layout_ie.css"").getChannel();
            destCss4.transferFrom(srcCss4, 0, srcCss4.size());
            srcCss4.close();
            destCss4.close();
            FileChannel srcCss5 = new FileInputStream(local + ""/bin/style/elementos_ie.css"").getChannel();
            FileChannel destCss5 = new FileOutputStream(cssDir + ""/elementos_ie.css"").getChannel();
            destCss5.transferFrom(srcCss5, 0, srcCss5.size());
            srcCss5.close();
            destCss5.close();
            FileChannel srcCss6 = new FileInputStream(local + ""/bin/style/estilo-cap-lic-mid_ie.css"").getChannel();
            FileChannel destCss6 = new FileOutputStream(cssDir + ""/estilo-cap-lic-mid_ie.css"").getChannel();
            destCss6.transferFrom(srcCss6, 0, srcCss6.size());
            srcCss6.close();
            destCss6.close();
            copiarMidias(videosDir, imagensDir);
            escreverMidiasPage(midDir);
            escreverLicoesPage(licDir);
            escreverCapitulosPages(capDir);
            FileWriter indexHtml = new FileWriter(indexDir + ""/index.html"");
            indexHtml.write(escreverIndexHead() + escreverBodyHeader() + escreverIndexBodyContent() + escreverFooter());
            indexHtml.close();
            System.out.println(""Site gerado com sucesso"");
            JOptionPane.showMessageDialog(null, ""Web Site gerado com sucesso"", ""\\o/"", JOptionPane.INFORMATION_MESSAGE);
            return true;
        } catch (Exception e) {
            e.printStackTrace();
            System.err.println(""Site não gerado"");
            JOptionPane.showMessageDialog(null, ""Web Site não gerado corretamente"", ""Ops..."", JOptionPane.ERROR_MESSAGE);
            return false;
        }
    }
 <SPLIT>     private int[] sort(int n) {
        int[] mas = new int[n];
        Random rand = new Random();
        for (int i = 0; i < n; i++) {
            mas[i] = rand.nextInt(10) + 1;
        }
        boolean t = true;
        int tmp = 0;
        while (t) {
            t = false;
            for (int i = 0; i < mas.length - 1; i++) {
                if (mas[i] > mas[i + 1]) {
                    tmp = mas[i];
                    mas[i] = mas[i + 1];
                    mas[i + 1] = tmp;
                    t = true;
                }
            }
        }
        return mas;
    }
",611,,LABEL_0,LABEL_1,,-4,"gerarTutorialPage,indexDir,cssDir,capDir,licDir,midDir,filesDir,videosDir,imagensDir,local,srcCss1,destCss1,srcCss2,destCss2,srcCss3,destCss3,srcCss4",,,,0,,0,Greedy,1,0.0007018327713012695,,[]
493,"    public void createFile(File src, String filename) throws IOException {
        try {
            FileInputStream fis = new FileInputStream(src);
            OutputStream fos = this.fileResourceManager.writeResource(this.txId, filename);
            IOUtils.copy(fis, fos);
            fos.close();
            fis.close();
        } catch (ResourceManagerException e) {
            LOGGER.error(e);
        }
    }
 <SPLIT>     private static void readData() {
        StringTokenizer sTok;
        topSet = new HashSet();
        sTok = new StringTokenizer(tops, "","");
        while (sTok.hasMoreTokens()) topSet.add(sTok.nextToken());
        leftSet = new HashSet();
        sTok = new StringTokenizer(lefts, "","");
        while (sTok.hasMoreTokens()) leftSet.add(sTok.nextToken());
        rightSet = new HashSet();
        sTok = new StringTokenizer(rights, "","");
        while (sTok.hasMoreTokens()) rightSet.add(sTok.nextToken());
        farRightSet = new HashSet();
        sTok = new StringTokenizer(farrights, "","");
        while (sTok.hasMoreTokens()) farRightSet.add(sTok.nextToken());
        vowelSet = new HashSet();
        sTok = new StringTokenizer(vowels, "","");
        while (sTok.hasMoreTokens()) {
            String ntk;
            vowelSet.add(ntk = sTok.nextToken());
            if (maxEwtsVowelLength < ntk.length()) maxEwtsVowelLength = ntk.length();
            validInputSequences.put(ntk, anyOldObjectWillDo);
        }
        puncSet = new HashSet();
        sTok = new StringTokenizer(others, "","");
        while (sTok.hasMoreTokens()) {
            String ntk;
            puncSet.add(ntk = sTok.nextToken());
            validInputSequences.put(ntk, anyOldObjectWillDo);
        }
        charSet = new HashSet();
        tibSet = new HashSet();
        sTok = new StringTokenizer(tibetanConsonants, "","");
        while (sTok.hasMoreTokens()) {
            String ntk;
            charSet.add(ntk = sTok.nextToken());
            tibSet.add(ntk);
            validInputSequences.put(ntk, anyOldObjectWillDo);
        }
        sanskritStackSet = new HashSet();
        sTok = new StringTokenizer(otherConsonants, "","");
        while (sTok.hasMoreTokens()) {
            String ntk;
            charSet.add(ntk = sTok.nextToken());
            sanskritStackSet.add(ntk);
            validInputSequences.put(ntk, anyOldObjectWillDo);
        }
        numberSet = new HashSet();
        sTok = new StringTokenizer(numbers, "","");
        while (sTok.hasMoreTokens()) {
            String ntk;
            charSet.add(ntk = sTok.nextToken());
            numberSet.add(ntk);
            validInputSequences.put(ntk, anyOldObjectWillDo);
        }
        charSet.add(""Y"");
        charSet.add(""R"");
        charSet.add(""W"");
        validInputSequences.put(""Y"", anyOldObjectWillDo);
        validInputSequences.put(""R"", anyOldObjectWillDo);
        validInputSequences.put(""W"", anyOldObjectWillDo);
        sTok = null;
        top_vowels = new HashSet();
        top_vowels.add(i_VOWEL);
        top_vowels.add(e_VOWEL);
        top_vowels.add(o_VOWEL);
        top_vowels.add(ai_VOWEL);
        top_vowels.add(au_VOWEL);
        top_vowels.add(reverse_i_VOWEL);
        try {
            URL url = TibetanMachineWeb.class.getResource(fileName);
            if (url == null) {
                System.err.println(""Cannot find "" + fileName + ""; aborting."");
                System.exit(1);
            }
            InputStreamReader isr = new InputStreamReader(url.openStream());
            BufferedReader in = new BufferedReader(isr);
            System.out.println(""Reading Tibetan Machine Web code table "" + fileName);
            String line;
            boolean hashOn = false;
            boolean isTibetan = false;
            boolean isSanskrit = false;
            boolean ignore = false;
            while ((line = in.readLine()) != null) {
                if (line.startsWith(""<?"")) {
                    if (line.equalsIgnoreCase(""<?Consonants?>"")) {
                        isSanskrit = false;
                        isTibetan = true;
                        hashOn = false;
                        ignore = false;
                        do {
                            line = in.readLine();
                        } while (line.startsWith(""//"") || line.equals(""""));
                    } else if (line.equalsIgnoreCase(""<?Numbers?>"")) {
                        isSanskrit = false;
                        isTibetan = false;
                        hashOn = false;
                        ignore = false;
                        do {
                            line = in.readLine();
                        } while (line.startsWith(""//"") || line.equals(""""));
                    } else if (line.equalsIgnoreCase(""<?Vowels?>"")) {
                        isSanskrit = false;
                        isTibetan = false;
                        hashOn = false;
                        ignore = false;
                        do {
                            line = in.readLine();
                        } while (line.startsWith(""//"") || line.equals(""""));
                    } else if (line.equalsIgnoreCase(""<?Other?>"")) {
                        isSanskrit = false;
                        isTibetan = false;
                        hashOn = false;
                        ignore = false;
                        do {
                            line = in.readLine();
                        } while (line.startsWith(""//"") || line.equals(""""));
                    } else if (line.equalsIgnoreCase(""<?Input:Punctuation?>"") || line.equalsIgnoreCase(""<?Input:Vowels?>"")) {
                        isSanskrit = false;
                        isTibetan = false;
                        hashOn = true;
                        ignore = false;
                    } else if (line.equalsIgnoreCase(""<?Input:Tibetan?>"")) {
                        isSanskrit = false;
                        isTibetan = true;
                        hashOn = true;
                        ignore = false;
                    } else if (line.equalsIgnoreCase(""<?Input:Numbers?>"")) {
                        isSanskrit = false;
                        isTibetan = false;
                        hashOn = true;
                        ignore = false;
                    } else if (line.equalsIgnoreCase(""<?Input:Sanskrit?>"")) {
                        isSanskrit = true;
                        isTibetan = false;
                        hashOn = true;
                        ignore = false;
                    } else if (line.equalsIgnoreCase(""<?ToWylie?>"")) {
                        isSanskrit = false;
                        isTibetan = false;
                        hashOn = false;
                        ignore = false;
                    } else if (line.equalsIgnoreCase(""<?Ignore?>"")) {
                        isSanskrit = false;
                        ignore = true;
                    }
                } else if (line.startsWith(""//"")) {
                    ;
                } else if (line.equals("""")) {
                    ;
                } else {
                    StringTokenizer st = new StringTokenizer(line, DELIMITER, true);
                    String wylie = null;
                    DuffCode[] duffCodes;
                    duffCodes = new DuffCode[11];
                    int k = 0;
                    StringBuffer escapedToken = new StringBuffer("""");
                    ThdlDebug.verify(escapedToken.length() == 0);
                    while (st.hasMoreTokens()) {
                        String val = getEscapedToken(st, escapedToken);
                        if (val.equals(DELIMITER) && escapedToken.length() == 0) {
                            k++;
                        } else if (!val.equals("""")) {
                            if (escapedToken.length() != 0) {
                                escapedToken = new StringBuffer("""");
                                ThdlDebug.verify(escapedToken.length() == 0);
                            }
                            switch(k) {
                                case 0:
                                    wylie = val;
                                    break;
                                case 1:
                                    duffCodes[TM] = new DuffCode(val, false);
                                    break;
                                case 2:
                                    if (!ignore) {
                                        duffCodes[REDUCED_C] = new DuffCode(val, true);
                                    }
                                    break;
                                case 3:
                                    duffCodes[TMW] = new DuffCode(val, true);
                                    if (null != duffCodes[TM]) {
                                        TMtoTMW[duffCodes[TM].getFontNum() - 1][duffCodes[TM].getCharNum() - 32] = duffCodes[TMW];
                                    }
                                    if (null != TMWtoTM[duffCodes[TMW].getFontNum() - 1][duffCodes[TMW].getCharNum() - 32]) throw new Error(""tibwn.ini is supposed to use the TibetanMachineWeb glyph as the unique key, but "" + val + "" appears two or more times."");
                                    TMWtoTM[duffCodes[TMW].getFontNum() - 1][duffCodes[TMW].getCharNum() - 32] = duffCodes[TM];
                                    if (wylie.toLowerCase().startsWith(""\\uf0"")) {
                                        int x = Integer.parseInt(wylie.substring(""\\u"".length()), 16);
                                        ThdlDebug.verify((x >= 0xF000 && x <= 0xF0FF));
                                        NonUnicodeToTMW[x - ''] = new DuffCode[] { duffCodes[TMW] };
                                    }
                                    break;
                                case 4:
                                case 5:
                                case 6:
                                case 7:
                                case 8:
                                case 9:
                                    if (!ignore) {
                                        try {
                                            duffCodes[k - 1] = new DuffCode(val, true);
                                        } catch (Exception e) {
                                            System.err.println(""Couldn't make a DuffCode out of "" + val + ""; line is "" + line + ""; k is "" + k);
                                        }
                                    }
                                    break;
                                case 10:
                                    if (!val.equals(""none"")) {
                                        StringBuffer unicodeBuffer = new StringBuffer();
                                        StringTokenizer uTok = new StringTokenizer(val, "","");
                                        while (uTok.hasMoreTokens()) {
                                            String subval = uTok.nextToken();
                                            ThdlDebug.verify(subval.length() == 4 || subval.length() == 3);
                                            try {
                                                int x = Integer.parseInt(subval, 16);
                                                ThdlDebug.verify((x >= 0x0F00 && x <= 0x0FFF) || x == 0x5350 || x == 0x534D || x == 0x0020 || x == 0x00A0 || x == 0x2003);
                                                unicodeBuffer.append((char) x);
                                            } catch (NumberFormatException e) {
                                                ThdlDebug.verify(false);
                                            }
                                        }
                                        TMWtoUnicode[duffCodes[TMW].getFontNum() - 1][duffCodes[TMW].getCharNum() - 32] = unicodeBuffer.toString();
                                        char ch;
                                        if (unicodeBuffer.length() == 1 && UnicodeUtils.isInTibetanRange(ch = unicodeBuffer.charAt(0))) {
                                            if (null != UnicodeToTMW[ch - 'ༀ'][0] && 'ༀ' != ch && '༂' != ch && '༃' != ch && '་' != ch && '༎' != ch && 'ཀ' != ch && 'ག' != ch && 'ཉ' != ch && 'ཏ' != ch && 'ད' != ch && 'ན' != ch && 'ཞ' != ch && 'ར' != ch && 'ཤ' != ch && 'ཧ' != ch && 'ཪ' != ch && 'ཱ' != ch && 'ི' != ch && 'ཱི' != ch && 'ུ' != ch && 'ཱུ' != ch && 'ྲྀ' != ch && 'ཷ' != ch && 'ླྀ' != ch && 'ཹ' != ch && 'ེ' != ch && 'ོ' != ch && 'ཾ' != ch && 'ཱྀ' != ch) {
                                                throw new Error(""tibwn.ini has more than one TMW fellow listed that has the Unicode "" + val + "", but it's not on the list of specially handled glyphs"");
                                            }
                                            UnicodeToTMW[ch - 'ༀ'][0] = duffCodes[TMW];
                                        }
                                    }
                                    break;
                                case 11:
                                    if (!ignore) {
                                        duffCodes[HALF_C] = new DuffCode(val, true);
                                    }
                                    break;
                                case 12:
                                    if (!ignore) {
                                        DuffCode binduCode = new DuffCode(val, true);
                                        binduMap.put(duffCodes[TMW], binduCode);
                                    }
                                    break;
                                case 13:
                                    throw new Error(""tibwn.ini has only 13 columns, you tried to use a 14th column."");
                            }
                        } else {
                            if (k == 10) {
                                throw new Error(""needed none or some unicode; line is "" + line);
                            }
                        }
                    }
                    if (k < 10) {
                        throw new Error(""needed none or some unicode; line is "" + line);
                    }
                    if (!ignore) {
                        if (null == wylie) throw new Error(fileName + "" has a line ^"" + DELIMITER + "" which means that no Wylie is assigned.  That isn't supported."");
                        if (hashOn) {
                            tibHash.put(Manipulate.unescape(wylie), duffCodes);
                        }
                        if (isTibetan) {
                            StringBuffer wylieWithoutDashes = new StringBuffer(wylie);
                            for (int wl = 0; wl < wylieWithoutDashes.length(); wl++) {
                                if (wylieWithoutDashes.charAt(wl) == '-') {
                                    wylieWithoutDashes.deleteCharAt(wl);
                                    --wl;
                                }
                            }
                            tibSet.add(wylieWithoutDashes.toString());
                        }
                        if (isSanskrit) {
                            sanskritStackSet.add(wylie);
                        }
                        if (null == duffCodes[TMW]) throw new Error(fileName + "" has a line with wylie "" + wylie + "" but no TMW; that's not allowed"");
                        int font = duffCodes[TMW].getFontNum();
                        int code = duffCodes[TMW].getCharNum() - 32;
                        toHashKey[font][code] = Manipulate.unescape(wylie);
                    }
                }
            }
        } catch (IOException e) {
            System.out.println(""file Disappeared"");
            ThdlDebug.noteIffyCode();
        }
    }
",78,"    public void createFile(File src, String filename) throws IOException {
        try {
            FileInputStream fis = new FileInputStream(src);
            OutputStream affis = this.fileResourceManager.writeResource(this.txId, filename);
            IOUtils.copy(fis, affis);
            affis.close();
            fis.close();
        } catch (ResourceManagerException e) {
            LOGGER.error(e);
        }
    }
",LABEL_0,LABEL_0,LABEL_1,1,"createFile,src,filename,fis,fos","createFile:0.0023279190063476562,src:-0.010351836681365967,filename:-0.008875727653503418,fis:0.008211612701416016,fos:0.009884059429168701,",1,3,0,"fos:affis,",0,Greedy,45,0.013784881432851155,replace,[]
494,"    public synchronized InputStream getResourceAsStream(String name) {
        InputStream inputStream = null;
        BufferedInputStream in = null;
        BufferedOutputStream out = null;
        try {
            URL url = getResource(name);
            String remoteName = url.toExternalForm();
            String localName = (String) cacheHashtable.get(remoteName);
            if (localName != null) {
                System.out.println(""Retrieving \"""" + localName + ""\""..."");
                return new FileInputStream(localName);
            }
            String host = url.getHost();
            String prot = url.getProtocol();
            int port = url.getPort();
            File cacheFile = new File(cacheDir, prot + File.separator + host + File.separator + ""port"" + (port == -1 ? """" : Integer.toString(port)) + File.separator + name);
            cacheFile = new File(cacheFile.getCanonicalPath());
            localName = cacheFile.getCanonicalPath();
            System.out.println(""Comparing \"""" + localName + ""\""..."");
            URLConnection urlConnection = url.openConnection();
            if (cacheFile.exists()) {
                urlConnection.setIfModifiedSince(cacheFile.lastModified());
            }
            if (urlConnection instanceof HttpURLConnection) {
                HttpURLConnection httpURLConnection = (HttpURLConnection) urlConnection;
                httpURLConnection.setFollowRedirects(true);
                httpURLConnection.setRequestMethod(""GET"");
                int responseCode = httpURLConnection.getResponseCode();
                System.out.println(httpURLConnection.getResponseMessage() + "", "" + httpURLConnection.getContentLength() + "" bytes"" + "", "" + new Date(httpURLConnection.getDate()) + "", "" + new Date(httpURLConnection.getLastModified()));
                if (responseCode != HttpURLConnection.HTTP_OK) {
                    return null;
                }
            }
            inputStream = urlConnection.getInputStream();
            if (inputStream == null) return null;
            if (cacheFile.exists()) {
                long lastModified = urlConnection.getLastModified();
                if ((lastModified > 0) && (lastModified < cacheFile.lastModified())) {
                    inputStream.close();
                    cacheHashtable.put(remoteName, localName);
                    System.out.println(""Retrieving \"""" + localName + ""\""..."");
                    return new FileInputStream(cacheFile);
                }
            }
            File parentFile = new File(cacheFile.getParent());
            parentFile.mkdirs();
            localName = cacheFile.getCanonicalPath();
            System.out.println(""CACHING \"""" + localName + ""\""..."");
            in = new BufferedInputStream(inputStream);
            out = new BufferedOutputStream(new FileOutputStream(cacheFile));
            int i;
            while ((i = in.read()) > -1) out.write(i);
            out.close();
            in.close();
            cacheHashtable.put(remoteName, localName);
            System.out.println(""Retrieving \"""" + localName + ""\""..."");
            return new FileInputStream(localName);
        } catch (Exception ex) {
            try {
                inputStream.close();
            } catch (Exception ex1) {
            }
            try {
                in.close();
            } catch (Exception ex1) {
            }
            try {
                out.close();
            } catch (Exception ex1) {
            }
            ex.printStackTrace();
            return null;
        }
    }
 <SPLIT>     public static void copyTo(File source, File dest) {
        if (source.isHidden()) ; else if (source.isDirectory()) {
            File temp = new File(dest.getPath() + ""/"" + source.getName());
            temp.mkdir();
            for (File sel : source.listFiles()) copyTo(sel, temp);
        } else {
            try {
                File tempDest = new File(dest.getPath() + ""/"" + source.getName());
                tempDest.createNewFile();
                FileChannel sourceCh = new FileInputStream(source).getChannel();
                FileChannel destCh = new FileOutputStream(tempDest).getChannel();
                sourceCh.transferTo(0, sourceCh.size(), destCh);
                sourceCh.close();
                destCh.close();
            } catch (IOException ex) {
                Logger.getLogger(EditorUtil.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }
",645,,LABEL_1,LABEL_0,,-4,"getResourceAsStream,name,inputStream,in,out,url,remoteName,localName,host,prot,port,cacheFile,urlConnection,httpURLConnection,responseCode,lastModified",,,,0,,0,Greedy,1,0.0007294893264770507,,[]
495,"    public byte[] getDigest(OMAttribute attribute, String digestAlgorithm) throws OMException {
        byte[] digest = new byte[0];
        if (!(attribute.getLocalName().equals(""xmlns"") || attribute.getLocalName().startsWith(""xmlns:""))) try {
            MessageDigest md = MessageDigest.getInstance(digestAlgorithm);
            md.update((byte) 0);
            md.update((byte) 0);
            md.update((byte) 0);
            md.update((byte) 2);
            md.update(getExpandedName(attribute).getBytes(""UnicodeBigUnmarked""));
            md.update((byte) 0);
            md.update((byte) 0);
            md.update(attribute.getAttributeValue().getBytes(""UnicodeBigUnmarked""));
            digest = md.digest();
        } catch (NoSuchAlgorithmException e) {
            throw new OMException(e);
        } catch (UnsupportedEncodingException e) {
            throw new OMException(e);
        }
        return digest;
    }
 <SPLIT>     @Before
    public void setUp() throws Exception {
        final URL url = getClass().getClassLoader().getResource(""insecureSSL.keystore"");
        final KeyStore keystore = KeyStore.getInstance(""jks"");
        final char[] pwd = ""nopassword"".toCharArray();
        keystore.load(url.openStream(), pwd);
        final TrustManagerFactory trustManagerFactory = createTrustManagerFactory();
        trustManagerFactory.init(keystore);
        final TrustManager[] trustManagers = trustManagerFactory.getTrustManagers();
        final KeyManagerFactory keyManagerFactory = createKeyManagerFactory();
        keyManagerFactory.init(keystore, pwd);
        final KeyManager[] keyManagers = keyManagerFactory.getKeyManagers();
        final SSLContext serverSSLContext = SSLContext.getInstance(""TLS"");
        serverSSLContext.init(keyManagers, trustManagers, null);
        localServer_ = new LocalTestServer(serverSSLContext);
        localServer_.registerDefaultHandlers();
        localServer_.start();
    }
",206,"    public byte[] getDigest(OMAttribute ribute, String digestAlgorithm) throws OMException {
        byte[] Digester = new byte[0];
        if (!(ribute.getLocalName().equals(""xmlns"") || ribute.getLocalName().startsWith(""xmlns:""))) try {
            MessageDigest md = MessageDigest.getInstance(digestAlgorithm);
            md.update((byte) 0);
            md.update((byte) 0);
            md.update((byte) 0);
            md.update((byte) 2);
            md.update(getExpandedName(ribute).getBytes(""UnicodeBigUnmarked""));
            md.update((byte) 0);
            md.update((byte) 0);
            md.update(ribute.getAttributeValue().getBytes(""UnicodeBigUnmarked""));
            Digester = md.Digester();
        } catch (NoSuchAlgorithmException e) {
            throw new OMException(e);
        } catch (UnsupportedEncodingException e) {
            throw new OMException(e);
        }
        return Digester;
    }
",LABEL_0,LABEL_0,LABEL_0,-1,"getDigest,attribute,digestAlgorithm,digest,md","getDigest:0.008352696895599365,attribute:0.0012525320053100586,digestAlgorithm:0.013950705528259277,digest:-0.0013017058372497559,md:0.002448558807373047,",2,9,0,"digestAlgorithm:digestAlgorithm,getDigest:getDigest,md:md,attribute:ribute,digest:Digester,",0,Greedy,234,0.03537997007369995,failed,[]
496,"    public Object execute(ExecutionEvent event) throws ExecutionException {
        try {
            Shell shell = PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell();
            QuizTreeView view = (QuizTreeView) PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage().showView(""org.rcpquizengine.views.quizzes"");
            Folder rootFolder = view.getRootFolder();
            if (rootFolder.isEncrypted()) {
                PasswordDialog dialog = new PasswordDialog(shell);
                if (dialog.open() == Window.OK) {
                    String password = dialog.getPassword();
                    if (!password.equals("""")) {
                        String md5 = """";
                        MessageDigest md = MessageDigest.getInstance(""MD5"");
                        md.update(password.getBytes());
                        md5 = new BigInteger(md.digest()).toString();
                        if (rootFolder.getMd5Digest().equals(md5)) {
                            rootFolder.setMd5Digest("""");
                            rootFolder.setEncrypted(false);
                            MessageDialog.openInformation(shell, ""Quiz bank unlocked"", ""The current quiz bank has been unlocked"");
                        } else {
                            MessageDialog.openError(shell, ""Error unlocking quiz bank"", ""Incorrect password"");
                        }
                        password = """";
                        md5 = """";
                    }
                }
            } else {
                MessageDialog.openError(shell, ""Error unlocking quiz bank"", ""Quiz bank already unlocked"");
            }
        } catch (PartInitException e) {
            e.printStackTrace();
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        }
        return null;
    }
 <SPLIT>     public String digest(String message) throws NoSuchAlgorithmException, EncoderException {
        MessageDigest messageDigest = MessageDigest.getInstance(""SHA-256"");
        messageDigest.update(message.getBytes());
        byte[] raw = messageDigest.digest();
        byte[] chars = new Base64().encode(raw);
        return new String(chars);
    }
",288,,LABEL_1,LABEL_0,,-4,"execute,event,shell,view,rootFolder,dialog,password,md5,md",,,,0,,0,Greedy,1,0.000438078244527181,,[]
497,"    private static String encode(final String input) throws UnsupportedEncodingException, NoSuchAlgorithmException {
        MessageDigest md = MessageDigest.getInstance(""MD5"");
        md.reset();
        md.update(input.getBytes(""UTF-8""));
        return toHexString(md.digest());
    }
 <SPLIT>     public static String hashStringMD5(String string) throws NoSuchAlgorithmException {
        MessageDigest md = MessageDigest.getInstance(""MD5"");
        md.update(string.getBytes());
        byte byteData[] = md.digest();
        StringBuffer sb = new StringBuffer();
        for (int i = 0; i < byteData.length; i++) {
            sb.append(Integer.toString((byteData[i] & 0xff) + 0x100, 16).substring(1));
        }
        StringBuffer hexString = new StringBuffer();
        for (int i = 0; i < byteData.length; i++) {
            String hex = Integer.toHexString(0xff & byteData[i]);
            if (hex.length() == 1) hexString.append('0');
            hexString.append(hex);
        }
        return hexString.toString();
    }
",59,"    private static String encode(final String secure) throws UnsupportedEncodingException, NoSuchEdryptionError {
        MessageDigest pd = MessageDigest.getInstance(""MD5"");
        pd.reset();
        pd.update(secure.getBytes(""UTF-8""));
        return toHexString(pd.digest());
    }
",LABEL_1,LABEL_1,LABEL_1,-1,"encode,input,NoSuchAlgorithmException,md","encode:-0.0017480850219726562,input:-0.0011644363403320312,NoSuchAlgorithmException:0.0037428736686706543,md:-0.0007797479629516602,",3,7,0,"NoSuchAlgorithmException:NoSuchEdryptionError,md:pd,input:secure,encode:encode,",0,Greedy,134,0.01855947176615397,failed,[]
498,"    public static String fromHtml(URL url, String defaultEncoding, boolean overrideEncoding) throws IOException, BadDocumentException {
        URLConnection conn = url.openConnection();
        String contentType = conn.getContentType();
        String encoding = conn.getContentEncoding();
        if (encoding == null) {
            int i = contentType.indexOf(""charset"");
            if (i >= 0) {
                String s = contentType.substring(i);
                i = s.indexOf('=');
                if (i >= 0) {
                    s = contentType.substring(i + 1).trim();
                    encoding = s.replace(""\'"", """").replace(""\"""", """").trim();
                    if (encoding.equals("""")) {
                        encoding = defaultEncoding;
                    }
                }
            } else {
                encoding = defaultEncoding;
            }
        }
        String expected = ""text/html"";
        if (contentType == null) {
            DefaultXMLNoteErrorHandler.warning(null, 90190, ""Returned content type for url.openConnection() is null"");
            contentType = expected;
        }
        int index = contentType.indexOf(';');
        if (index >= 0) {
            contentType = contentType.substring(0, index).trim();
        }
        if (!contentType.equals(expected)) {
            String msg = translator.translate(""The content type of url '%s' is not '%s', it is '%s'"");
            throw new BadDocumentException(String.format(msg, url.toString(), expected, contentType));
        }
        BufferedReader in = new BufferedReader(new InputStreamReader(conn.getInputStream(), encoding));
        return fromHtml(in, encoding);
    }
 <SPLIT>     public static void gzip() throws Exception {
        System.out.println(""gzip()"");
        GZIPOutputStream zipout = new GZIPOutputStream(new FileOutputStream(""/zip/myzip.gz""));
        byte buffer[] = new byte[BLOCKSIZE];
        File dir = new File(""/zip/covers"");
        System.out.println(""Dir '"" + dir.getAbsolutePath() + ""' exists: "" + dir.exists());
        FileInputStream in = new FileInputStream(dir);
        for (int length; (length = in.read(buffer, 0, BLOCKSIZE)) != -1; ) zipout.write(buffer, 0, length);
        in.close();
        zipout.close();
    }
",307,"    public static String fromHttpttp(URL file, String currentEnode, boolean overwriteEnasing) throws IOException, BadDocumentException {
        URLConnection open = file.openConnection();
        String contentType = open.getContentType();
        String enoding = open.getContentEncoding();
        if (enoding == null) {
            int io = contentType.indexOf(""charset"");
            if (io >= 0) {
                String S = contentType.substring(io);
                io = S.indexOf('=');
                if (io >= 0) {
                    S = contentType.substring(io + 1).trim();
                    enoding = S.replace(""\'"", """").replace(""\"""", """").trim();
                    if (enoding.equals("""")) {
                        enoding = currentEnode;
                    }
                }
            } else {
                enoding = currentEnode;
            }
        }
        String pected = ""text/html"";
        if (contentType == null) {
            DefaultXMLNoteErrorHandler.warning(null, 90190, ""Returned content type for url.openConnection() is null"");
            contentType = pected;
        }
        int index = contentType.indexOf(';');
        if (index >= 0) {
            contentType = contentType.substring(0, index).trim();
        }
        if (!contentType.equals(pected)) {
            String gm = translator.translate(""The content type of url '%s' is not '%s', it is '%s'"");
            throw new BadDocumentException(String.format(gm, file.toString(), pected, contentType));
        }
        BufferedReader xml = new BufferedReader(new InputStreamReader(open.getInputStream(), enoding));
        return fromHttpttp(xml, enoding);
    }
",LABEL_0,LABEL_0,LABEL_0,-1,"fromHtml,url,defaultEncoding,overrideEncoding,conn,contentType,encoding,i,s,expected,index,msg,in","fromHtml:-0.050743043422698975,url:-0.05737560987472534,defaultEncoding:0.010232508182525635,overrideEncoding:0.004804491996765137,conn:-0.0025908946990966797,contentType:0.056082963943481445,encoding:-0.01644366979598999,i:-0.008596181869506836,s:-0.01101142168045044,expected:-0.005999267101287842,index:0.017374038696289062,msg:0.00858759880065918,in:0.013660609722137451,",11,40,0,"contentType:contentType,index:index,in:xml,defaultEncoding:currentEnode,msg:gm,overrideEncoding:overwriteEnasing,conn:open,expected:pected,i:io,s:S,encoding:enoding,fromHtml:fromHttpttp,url:file,",0,Greedy,730,0.1143409252166748,failed,[]
499,"    public boolean saveProject(File file, Set<String> types, Set<String> images, Set<String> trajectories, boolean databasesIncluded, boolean onlyLinks) throws IOException, SQLException {
        int index = file.getName().lastIndexOf(""."");
        String name = file.getName().substring(0, index);
        DecimalFormat format = new DecimalFormat(""####"");
        format.setMinimumIntegerDigits(4);
        int count = 0;
        File main = new File(name);
        if (main.exists()) {
            throw new IOException(main.getAbsolutePath());
        }
        main.mkdir();
        File version = new File(main, ""version"");
        version.createNewFile();
        PrintWriter writer = new PrintWriter(version);
        writer.write(Videso3D.VERSION);
        writer.flush();
        writer.close();
        File xmlDir = new File(main.getAbsolutePath() + ""/xml"");
        xmlDir.mkdir();
        if (types != null && !types.isEmpty()) {
            File databases = new File(main.getAbsolutePath() + ""/databases"");
            databases.mkdir();
            for (String t : types) {
                Type type = DatabaseManager.stringToType(t);
                if (type != null) {
                    if (onlyLinks) {
                        if (databasesIncluded) {
                            String currentName = DatabaseManager.getCurrentName(type);
                            File baseCopy = new File(databases, currentName + ""."" + type);
                            baseCopy.createNewFile();
                            FileChannel source = new FileInputStream(new File(currentName)).getChannel();
                            FileChannel destination = new FileOutputStream(baseCopy).getChannel();
                            destination.transferFrom(source, 0, source.size());
                            source.close();
                            destination.close();
                            List<String[]> clefs = new ArrayList<String[]>();
                            Statement st = DatabaseManager.getCurrent(Type.Databases);
                            ResultSet rs = st.executeQuery(""select * from clefs where type='"" + currentName + ""'"");
                            while (rs.next()) {
                                clefs.add(new String[] { rs.getString(""name""), rs.getString(""value"") });
                            }
                            st.close();
                            if (!clefs.isEmpty()) {
                                File clefsFile = new File(databases, currentName + ""_clefs"");
                                clefsFile.createNewFile();
                                ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream(clefsFile));
                                oos.writeObject(clefs);
                                oos.close();
                            }
                            File filesDir = new File(currentName + ""_files"");
                            if (filesDir.exists() && filesDir.isDirectory()) {
                                File baseFiles = new File(databases, currentName + ""_files"");
                                baseFiles.mkdirs();
                                for (File f : filesDir.listFiles()) {
                                    File copy = new File(baseFiles, f.getName());
                                    copy.createNewFile();
                                    source = new FileInputStream(f).getChannel();
                                    destination = new FileOutputStream(copy).getChannel();
                                    destination.transferFrom(source, 0, source.size());
                                    source.close();
                                    destination.close();
                                }
                            }
                        }
                        File selectedObjects = new File(databases, type.toString());
                        selectedObjects.createNewFile();
                        ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream(selectedObjects));
                        oos.writeObject(objects.get(type));
                        oos.close();
                    } else {
                        for (Restorable r : DatasManager.getController(type).getSelectedObjects()) {
                            this.saveObjectInXml(r, new File(xmlDir, r.getClass().getName() + ""-"" + type + ""-"" + format.format(count++) + "".xml""));
                        }
                    }
                }
            }
        }
        File imagesDir = new File(main.getAbsolutePath() + ""/images"");
        imagesDir.mkdir();
        for (EditableSurfaceImage si : this.getImages()) {
            if (images.contains(si.getName())) {
                int idx = si.getName().lastIndexOf(""."");
                String newName = si.getName();
                if (idx != -1) {
                    newName = si.getName().substring(0, idx);
                }
                File img = new File(imagesDir, newName + "".gtif"");
                ImageUtils.writeImageToFile(si.getSector(), (BufferedImage) si.getImageSource(), img);
            }
        }
        File trajectoDir = new File(main, ""trajectory"");
        trajectoDir.mkdirs();
        for (Layer l : wwd.getModel().getLayers()) {
            if (l instanceof GEOTracksLayer && trajectories.contains(l.getName())) {
                GEOWriter geoWriter = new GEOWriter(trajectoDir.getAbsolutePath() + ""/"" + l.getName(), true);
                for (VidesoTrack track : ((GEOTracksLayer) l).getModel().getVisibleTracks()) {
                    geoWriter.writeTrack((GEOTrack) track);
                }
                geoWriter.close();
            }
        }
        if (types != null && types.contains(""Autres objets affichés."")) {
            for (Layer l : wwd.getModel().getLayers()) {
                if (l.getName().equals(AIRSPACE_LAYER_NAME)) {
                    for (Airspace r : ((AirspaceLayer) l).getAirspaces()) {
                        this.saveObjectInXml((Restorable) r, new File(xmlDir, r.getClass().getName() + ""-"" + format.format(count++) + "".xml""));
                    }
                } else if (l.getName().equals(RENDERABLE_LAYER_NAME)) {
                    for (Renderable r : ((RenderableLayer) l).getRenderables()) {
                        if (r instanceof Restorable) {
                            this.saveObjectInXml((Restorable) r, new File(xmlDir, r.getClass().getName() + ""-"" + format.format(count++) + "".xml""));
                        }
                    }
                } else if (l.getName().equals(BALISES2D_LAYER_NAME)) {
                    for (Balise2D b : ((Balise2DLayer) l).getVisibleBalises()) {
                        this.saveObjectInXml(b, new File(xmlDir, b.getClass().getName() + ""-"" + format.format(count++) + "".xml""));
                    }
                } else if (l.getName().equals(BALISES3D_LAYER_NAME)) {
                    for (Balise3D b : ((Balise3DLayer) l).getVisibleBalises()) {
                        this.saveObjectInXml(b, new File(xmlDir, b.getClass().getName() + ""-"" + format.format(count++) + "".xml""));
                    }
                }
            }
        }
        for (Airspace a : PolygonEditorsManager.getLayer().getAirspaces()) {
            if (a.isVisible()) this.saveObjectInXml(a, new File(xmlDir, a.getClass().getName() + ""-"" + format.format(count++) + "".xml""));
        }
        this.saveObjectInXml(this.wwd.getView(), new File(main, ""globe.xml""));
        FileManager.createZipFile(file, main);
        FileManager.deleteFile(main);
        return true;
    }
 <SPLIT>     public static void saveFileData(File file, File destination, java.io.File newDataFile) throws Exception {
        String fileName = file.getFileName();
        String assetsPath = FileFactory.getRealAssetsRootPath();
        new java.io.File(assetsPath).mkdir();
        java.io.File workingFile = getAssetIOFile(file);
        DotResourceCache vc = CacheLocator.getVeloctyResourceCache();
        vc.remove(ResourceManager.RESOURCE_TEMPLATE + workingFile.getPath());
        if (destination != null && destination.getInode() > 0) {
            FileInputStream is = new FileInputStream(workingFile);
            FileChannel channelFrom = is.getChannel();
            java.io.File newVersionFile = getAssetIOFile(destination);
            FileChannel channelTo = new FileOutputStream(newVersionFile).getChannel();
            channelFrom.transferTo(0, channelFrom.size(), channelTo);
            channelTo.force(false);
            channelTo.close();
            channelFrom.close();
        }
        if (newDataFile != null) {
            FileChannel writeCurrentChannel = new FileOutputStream(workingFile).getChannel();
            writeCurrentChannel.truncate(0);
            FileChannel fromChannel = new FileInputStream(newDataFile).getChannel();
            fromChannel.transferTo(0, fromChannel.size(), writeCurrentChannel);
            writeCurrentChannel.force(false);
            writeCurrentChannel.close();
            fromChannel.close();
            if (UtilMethods.isImage(fileName)) {
                BufferedImage img = javax.imageio.ImageIO.read(workingFile);
                int height = img.getHeight();
                file.setHeight(height);
                int width = img.getWidth();
                file.setWidth(width);
            }
            String folderPath = workingFile.getParentFile().getAbsolutePath();
            Identifier identifier = IdentifierCache.getIdentifierFromIdentifierCache(file);
            java.io.File directory = new java.io.File(folderPath);
            java.io.File[] files = directory.listFiles((new FileFactory()).new ThumbnailsFileNamesFilter(identifier));
            for (java.io.File iofile : files) {
                try {
                    iofile.delete();
                } catch (SecurityException e) {
                    Logger.error(FileFactory.class, ""EditFileAction._saveWorkingFileData(): "" + iofile.getName() + "" cannot be erased. Please check the file permissions."");
                } catch (Exception e) {
                    Logger.error(FileFactory.class, ""EditFileAction._saveWorkingFileData(): "" + e.getMessage());
                }
            }
        }
    }
",1472,"    public boolean deleteProject(File resource, Set<String> settings, Set<String> tags, Set<String> trajectories, boolean databasesIncluded, boolean justFiles) throws IOException, SQLException {
        int input = resource.getName().lastIndexOf(""."");
        String home = resource.getName().substring(0, input);
        DecimalFormat format = new DecimalFormat(""####"");
        format.setMinimumIntegerDigits(4);
        int path = 0;
        File main = new File(home);
        if (main.exists()) {
            throw new IOException(main.getAbsolutePath());
        }
        main.mkdir();
        File project = new File(main, ""version"");
        project.createNewFile();
        PrintWriter Writer = new PrintWriter(project);
        Writer.write(Videso3D.VERSION);
        Writer.flush();
        Writer.close();
        File imageFile = new File(main.getAbsolutePath() + ""/xml"");
        imageFile.mkdir();
        if (settings != null && !types.isEmpty()) {
            File databases = new File(main.getAbsolutePath() + ""/databases"");
            databases.mkdir();
            for (String t : settings) {
                Type target = DatabaseManager.stringToType(t);
                if (target != null) {
                    if (justFiles) {
                        if (databasesIncluded) {
                            String CurrentFile = DatabaseManager.getCurrentName(target);
                            File BaseCreate = new File(databases, CurrentFile + ""."" + target);
                            BaseCreate.createNewFile();
                            FileChannel src = new FileInputStream(new File(CurrentFile)).getChannel();
                            FileChannel Destination = new FileOutputStream(BaseCreate).getChannel();
                            Destination.transferFrom(src, 0, src.size());
                            src.close();
                            Destination.close();
                            List<String[]> CLEflows = new ArrayList<String[]>();
                            Statement st = DatabaseManager.getCurrent(Type.Databases);
                            ResultSet  src = st.executeQuery(""select * from clefs where type='"" + CurrentFile + ""'"");
                            while ( src.next()) {
                                CLEflows.add(new String[] {  src.getString(""name""),  src.getString(""value"") });
                            }
                            st.close();
                            if (!clefs.isEmpty()) {
                                File clefsFile = new File(databases, CurrentFile + ""_clefs"");
                                clefsFile.createNewFile();
                                ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream(clefsFile));
                                oos.writeObject(CLEflows);
                                oos.close();
                            }
                            File filesDir = new File(CurrentFile + ""_files"");
                            if (filesDir.exists() && filesDir.isDirectory()) {
                                File baseFiles = new File(databases, CurrentFile + ""_files"");
                                baseFiles.mkdirs();
                                for (File f : filesDir.listFiles()) {
                                    File copy = new File(baseFiles, f.getName());
                                    copy.createNewFile();
                                    src = new FileInputStream(f).getChannel();
                                    Destination = new FileOutputStream(copy).getChannel();
                                    Destination.transferFrom(src, 0, src.size());
                                    src.close();
                                    Destination.close();
                                }
                            }
                        }
                        File selectedObjects = new File(databases, target.toString());
                        selectedObjects.createNewFile();
                        ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream(selectedObjects));
                        oos.writeObject(objects.get(target));
                        oos.close();
                    } else {
                        for (Restorable r : DatasManager.getController(target).getSelectedObjects()) {
                            this.saveObjectInXml(r, new File(imageFile, r.getClass().getName() + ""-"" + target + ""-"" + format.format(path++) + "".xml""));
                        }
                    }
                }
            }
        }
        File imagesDir = new File(main.getAbsolutePath() + ""/images"");
        imagesDir.mkdir();
        for (EditableSurfaceImage si : this.getImages()) {
            if (tags.contains(si.getName())) {
                int idx = si.getName().lastIndexOf(""."");
                String newName = si.getName();
                if (idx != -1) {
                    newName = si.getName().substring(0, idx);
                }
                File img = new File(imagesDir, newName + "".gtif"");
                ImageUtils.writeImageToFile(si.getSector(), (BufferedImage) si.getImageSource(), img);
            }
        }
        File trajectoDir = new File(main, ""trajectory"");
        trajectoDir.mkdirs();
        for (Layer l : wwd.getModel().getLayers()) {
            if (l instanceof GEOTracksLayer && trajectories.contains(l.getName())) {
                GEOWriter geoWriter = new GEOWriter(trajectoDir.getAbsolutePath() + ""/"" + l.getName(), true);
                for (VidesoTrack track : ((GEOTracksLayer) l).getModel().getVisibleTracks()) {
                    geoWriter.writeTrack((GEOTrack) track);
                }
                geoWriter.close();
            }
        }
        if (settings != null && settings.contains(""Autres objets affichés."")) {
            for (Layer l : wwd.getModel().getLayers()) {
                if (l.getName().equals(AIRSPACE_LAYER_NAME)) {
                    for (Airspace r : ((AirspaceLayer) l).getAirspaces()) {
                        this.saveObjectInXml((Restorable) r, new File(imageFile, r.getClass().getName() + ""-"" + format.format(path++) + "".xml""));
                    }
                } else if (l.getName().equals(RENDERABLE_LAYER_NAME)) {
                    for (Renderable r : ((RenderableLayer) l).getRenderables()) {
                        if (r instanceof Restorable) {
                            this.saveObjectInXml((Restorable) r, new File(imageFile, r.getClass().getName() + ""-"" + format.format(path++) + "".xml""));
                        }
                    }
                } else if (l.getName().equals(BALISES2D_LAYER_NAME)) {
                    for (Balise2D b : ((Balise2DLayer) l).getVisibleBalises()) {
                        this.saveObjectInXml(b, new File(imageFile, b.getClass().getName() + ""-"" + format.format(path++) + "".xml""));
                    }
                } else if (l.getName().equals(BALISES3D_LAYER_NAME)) {
                    for (Balise3D b : ((Balise3DLayer) l).getVisibleBalises()) {
                        this.saveObjectInXml(b, new File(imageFile, b.getClass().getName() + ""-"" + format.format(path++) + "".xml""));
                    }
                }
            }
        }
        for (Airspace a : PolygonEditorsManager.getLayer().getAirspaces()) {
            if (a.isVisible()) this.saveObjectInXml(a, new File(imageFile, a.getClass().getName() + ""-"" + format.format(path++) + "".xml""));
        }
        this.saveObjectInXml(this.wwd.getView(), new File(main, ""globe.xml""));
        FileManager.createZipFile(resource, main);
        FileManager.deleteFile(main);
        return true;
    }
",LABEL_1,LABEL_1,LABEL_1,-1,"saveProject,file,types,images,trajectories,databasesIncluded,onlyLinks,index,name,format,count,version,writer,xmlDir,databases,t,type,currentName,baseCopy,source,destination,clefs,st,rs","saveProject:0.004379868507385254,file:0.0019297599792480469,types:-0.004988908767700195,images:-0.005630671977996826,trajectories:-0.0007206201553344727,databasesIncluded:-0.00258636474609375,onlyLinks:-0.0027241110801696777,index:-0.00024330615997314453,name:-0.00024336576461791992,format:-0.000560760498046875,count:-0.00014030933380126953,version:0.0009273886680603027,writer:0.00015652179718017578,xmlDir:0.000789940357208252,databases:0.000536501407623291,t:-0.0010952353477478027,type:-0.0031881332397460938,currentName:-0.003465414047241211,baseCopy:-0.0064664483070373535,source:-0.0019279122352600098,destination:0.0005495548248291016,clefs:-0.0020557045936584473,st:-0.002285003662109375,rs:-0.002734839916229248,",18,84,0,"saveProject:deleteProject,file:resource,version:project,xmlDir:imageFile,destination:Destination,databases:databases,writer:Writer,count:path,index:input,name:home,format:format,trajectories:trajectories,t:t,source:src,clefs:CLEflows,st:st,databasesIncluded:databasesIncluded,onlyLinks:justFiles,rs: src,type:target,currentName:CurrentFile,types:settings,images:tags,baseCopy:BaseCreate,",0,Greedy,944,0.30266842047373455,failed,[]
