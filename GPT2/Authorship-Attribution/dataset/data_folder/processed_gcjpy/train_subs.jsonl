{"code": " \n  tCase = int(sys.stdin.readline())\n  \n  def alien(numbers):\n  \tresul = 0\n  \tA = int(numbers[0])\n  \tB = int(numbers[1])\n  \n  \tfor n in range(A,B-1):\n  \t\tfor m in range(n+1,B+1):\n  \t\t\tif (len(str(n)) == len(str(m))):\n  \t\t\t\tresul += isRecycled(str(n),str(m))\n  \t\n  \n  \n  \treturn resul\n  \t\n  def isRecycled(n,m):\n  \tif len(n) < 2:\n  \t\treturn 0\n  \t\t\n  \tfor c in m:\n  \t\tif c not in n:\n  \t\t\treturn 0\n  \n  \tfor i in range (1, len(n)):\n  \t\tmi = m[i:] + m[-len(m):-(len(m)-i)]\n  \t\tif n == mi:\n  \t\t\treturn 1\n  \t\n  \treturn 0\n  \n  \n  lines = []\n  for i in xrange(tCase):\n  \tline = sys.stdin.readline().split()\n  \tlines.append((line[0],line[1]))\n  \t\n  \n  for i in xrange(tCase):\t\n  \tprint \"Case #%d: %s\" % (i+1, alien(lines[i]))\n  \t\n  \t\n  \n", "substitutes": {"tCase": ["dtCase", "dCondition", " tCode", "towerCase", "tCode", "TNext", "towerCourse", "Tcase", "dCourse", " tNext", "dtNext", "tcase", "tCourse", "TCode", "tfCourse", "tClass", "tNext", "dClass", "tfClass", "fCode", "fCase", "dCase", "towerCondition", "fcase", "tfCase", "towerClass", "dtcase", "tCondition", "tfCondition", "TCase", "dtCode", " tcase"], "numbers": ["inumbers", "Nums", "deters", "Noms", "dumber", "ceters", "sumber", "cumber", "sums", "dums", "cumer", "number", "Neters", "nums", "dumbers", "mums", "sumbers", "cumbers", "Numbers", "Numer", "mumbers", "neters", "Number", "sumer", "inoms", "noms", "moms", "cums", "numer", "inums"], "resul": ["resull", "rasulate", "rasul", " Rescul", " resUL", " resull", "resuler", "Resuc", "rasuls", " rescul", "Rescul", "rsull", "powersulate", "resUL", "powersuler", "rasuler", "rsUL", " resuler", " resulate", " resuls", " Resul", "ResUL", "rsuc", "rescul", "rsul", "Resull", "Resulate", "resuls", "powersuls", "resuc", "resulate", "powersul", "Resul", " ResUL", " Resulate", " resuc"], "A": ["Ma", " N", "AC", "N", " a", " C", "At", "P", "I", "T", "Count", "p", "From", "G", "L", "Am", "K", "Y", "a", "Z", "Ar", "b", "V", "BA", "H", "R", "AA", "Na", "mA", "C", "U", " I", "O", "Number", "alpha", "D", "S", "Offset", "M", "X", "F"], "B": ["N", "BF", "BI", "NB", "GB", "UB", "WB", "P", "I", " b", "T", "Limit", "MB", "G", "L", "K", "Z", "Y", "Two", "BB", "LB", "AB", "b", "Num", "Bs", "V", "BA", "W", "R", "CB", "H", "C", "Bi", "O", "U", "OB", "D", "base", "TB", "E", "S", "J", "M", "X", "F", "Q", "BC"], "n": ["mn", "ni", "one", "nb", "gn", "ln", "nc", "h", "a", "e", "np", "b", "Na", "C", "on", "li", "un", "num", "ini", "k", "name", "p", "r", "z", "o", "ac", "cn", "non", "t", "nd", "rn", "ne", "dn", "net", "nm", "w", "x", "s", "u", "ic", "no", "y", "l", "ns", "en", "f", "ar", "al", "nn", "j", "sn", "M", "v", "NA", "ind", "N", "an", "d", "L", "fn", "nt", "na", "pn", "nu", "new", "g"], "m": ["mn", "mun", "range", "one", "mm", "gm", "h", "a", "e", "sm", "b", "md", "li", "un", "tm", "num", "multi", "mu", "k", "am", "me", "p", "mon", "mat", "cm", "r", "z", "o", "mc", "ms", "t", "hm", "im", "mr", "ym", "nm", "w", "km", "mad", "x", "bm", "s", "u", "y", "l", "machine", "en", "mo", "f", "ml", "nn", "j", "M", "v", "dm", "fm", "ma", "message", "an", "body", "d", "mult", "pm", "module", "q", "man", "g"], "c": ["uc", "cu", "nec", "anc", "x", "con", "k", "usc", "unc", "pc", "ai", "code", "ct", "an", "cat", "cc", "d", "p", "count", "case", "cm", "ic", "nc", "h", "r", "z", "cmp", "abc", "a", "ac", "mc", "e", "cn", "y", "cin", "cr", "l", "b", "t", "int", "ok", "chain", "rn", "f", "C", "un", "lc", "ci", "oc", "g"], "i": ["ip", "mini", "ie", "ni", "id", "it", "I", "oi", "h", "ix", "a", "e", "iii", "int", "b", "li", "pi", "fi", "multi", "di", "ini", "idi", "k", "ai", "ji", "gi", "io", "p", "r", "z", "o", "t", "im", "ani", "ij", "iu", "ii", "ui", "ti", "ci", "ei", "hi", "qi", "x", "yi", "chi", "bi", "u", "zi", "ic", "cli", "y", "l", "eni", "ri", "f", "iq", "j", "si", "v", "ind", "phi", "d", "abi", "axis", "xi", "q", "vi", "index", "g"], "mi": ["ini", "dm", "mn", "mini", "avi", "ni", "lim", "ai", "loc", "me", "chi", "gi", "ki", "mm", "bi", "cm", "mu", "MI", "my", "pm", "mc", "mis", "md", "len", "eni", "ne", "mr", "xi", "pi", "fi", "vi", "Mi", "nm", "mid", "ii", "ui", "num", "ti", "min", "si", "mia", "umi", "ci", "km", "li", "multi", "di"], "lines": ["la", "ine", "letters", "locks", "nl", " breaks", " slices", " links", "les", "posts", "items", "ls", "ines", "body", "liners", " rows", "rows", "ins", "lin", "links", "flows", "runs", "cli", "files", "models", " sections", "lins", "cases", "LINE", "lists", "l", "cells", "words", "pages", "comments", "rings", "pins", "users", "limits", "Line", "points", "balls", "headers", "objects", "rules", "los", "ds", "breaks", "shows", "frames", "lights", " Lines", "path", "blocks", "lined", "groups", "strings", "codes", "elines", " positions", "ids", " headlines", "inline"], "line": ["ine", "data", "comment", "end", "ner", "split", "item", "sync", "ni", "block", "range", "look", "ge", "code", "message", "rule", "body", "part", "word", "section", "ele", "le", "lin", "case", "page", "source", "ide", "lf", "header", "edge", "co", " inline", "LINE", "parse", "frame", "l", "liner", "zip", "len", "chain", "list", "base", "user", "ne", "link", "row", "do", "lo", "pe", "object", "cle", "day", "el", "lc", "entry", "load", "cell", "iter", "sl", "none", "lined", "cl", "log", "file", "node", "po", "li", "inline", "band", "se"]}}
{"code": " \n  \n  \n  class Test(unittest.TestCase):\n  \tdef test_1(self):\n  \t\tself.assertEqual(main(5, 2, 2, [2,1]), 12)\n  \tdef test_2(self):\n  \t\tself.assertEqual(main(5,2,2,[1,2]), 12)\n  \tdef test_3(self):\n  \t\tself.assertEqual(main(3,3,4,[4,1,3,5]), 39)\n  \tdef test_4(self):\n  \t\tself.assertEqual(main(5,2,4,[5, 1, 1, 5]), 51)\n  \n  \n  tCase = int(sys.stdin.readline())\n  \n  def main(A, B, AList, BList):\n  \tresp = 0\n  \tA = A - 1\n  \tB = B - 1\n  \tAlist = AList[A*4:A*4+4]\n  \tBList = BList[B*4:B*4+4]\n  \tcont = 0\n  \tfor aa in Alist:\n  \t\tif aa in BList:\n  \t\t\tresp = aa\n  \t\t\tcont += 1\n  \t\t\n  \tif cont == 1:\n  \t\treturn resp\n  \telif cont == 0:\n  \t\treturn \"Volunteer cheated!\"\n  \telse:\n  \t\treturn \"Bad magician!\"\n  \t\t\n   \n  if __name__ == '__main__':\n  \tfor i in xrange(tCase):\t\n  \t\t\n  \t\tA = [int(x) for x in sys.stdin.readline().split(' ')][0]\n  \t\tNList = [int(x) for x in sys.stdin.readline().split(' ')]\n  \t\tNList += [int(x) for x in sys.stdin.readline().split(' ')]\n  \t\tNList += [int(x) for x in sys.stdin.readline().split(' ')]\n  \t\tNList += [int(x) for x in sys.stdin.readline().split(' ')]\n  \t\tB = [int(x) for x in sys.stdin.readline().split(' ')][0]\n  \t\tBList = [int(x) for x in sys.stdin.readline().split(' ')]\n  \t\tBList += [int(x) for x in sys.stdin.readline().split(' ')]\n  \t\tBList += [int(x) for x in sys.stdin.readline().split(' ')]\n  \t\tBList += [int(x) for x in sys.stdin.readline().split(' ')]\n  \t\tprint \"Case #%d: %s\" % (i + 1, main(A, B, NList, BList))\n", "substitutes": {"self": ["public", "plus", "ng", "bug", "part", "server", "_", "this", "event", "req", "func", "h", "work", "e", "parse", "now", "comp", "driver", "pair", "er", "full", "node", "Self", "host", "http", "form", "loop", "k", "utils", "me", "P", "cache", "case", "worker", "p", "py", "ctx", "eth", "us", "spec", "w", "other", "wx", "static", "function", "client", "comment", "layer", "ns", "l", "user", "f", "parser", "ws", "cl", "instance", "app", "python", "peer", "context", "parent", "writer", "connection", "object", "q", "os", "test", "g"], "tCase": ["dtCase", "TTest", " TCase", "xcase", "TMode", "Tcase", "tcase", "dtTest", "tTest", " tDefault", " TDefault", "TDefault", " TMode", "xTest", " Tcase", "tDefault", "dtcase", "tMode", "TCase", "xCase", " tMode", " tcase"], "A": ["Ma", "AC", "NA", "Ca", "N", " N", "As", "AR", "At", "Alpha", "T", "P", "I", "Wa", "Ac", "Name", "G", "Am", "L", "An", "Ha", "Ar", "Y", "K", "a", "API", "HA", "Z", "AB", "AI", "Ab", "AU", "EA", "V", "W", "H", "AA", "Na", "mA", "C", "This", "U", "O", "AF", "OA", "GA", "D", "Az", "IA", "E", "S", "AMI", "MA", "J", "Auth", "AP", "PA", "LA", "X", "M", "F", "Cu", "AAA", "R", "CA", "The", "SA"], "B": ["IB", "N", "BF", "BI", "NB", "AR", "GB", "UB", "T", "P", "I", "WB", "BE", " b", "Be", "MB", "Bal", "Other", "FB", "G", "Both", "L", "Beta", " BA", "K", "Y", "DB", "Z", "BM", "Two", "BB", "LB", "b", "Ab", "BBC", "BS", "Bs", "V", "BA", "W", "R", "H", "CB", "BER", "C", "Many", "O", "U", "Output", "Sub", "OB", "Number", "PB", "D", "E", "S", "J", "AP", "M", "X", "F", "Q", "BC", "QB"], "AList": ["ALLists", "ALLelist", "ALIST", "AlIST", "Palist", "Alists", "Palists", "PalIST", "ASisted", "ASIST", "UListed", "ALists", "ASists", "ALelist", "ULIST", "ALLIST", "ULelist", "ALList", "ULists", "Palelist", "Alisted", "ASist", "UList", "AListed"], "BList": ["BBase", "LCode", "bList", "DInfo", "VCount", " BCount", "DString", " BLine", "BQueue", "OContent", "OStr", "DData", "NCount", "Blist", "BArray", "YList", "BCode", "blist", " Blist", "YData", "DArray", " BStr", "LLine", "ACount", " BInfo", "LStr", "DList", " BString", "RSt", "bBase", "NSt", "LContent", "OBList", "YString", "NQueue", "OBlist", "OBCode", "BStr", "BContent", " BSt", " BQueue", "LData", "YInfo", "RList", "DCode", "BString", "BLine", "BData", "OList", "OLine", "BCount", "BSt", " BCode", "VList", "BInfo", "OBBase", "RCount", "Llist", "LArray", " BArray", "LList", " BBase", "RQueue", " BData", "Vlist", " BContent", "bCode"], "resp": ["ref", "rec", "proc", "success", "part", "pos", "Resp", "_", "req", "RES", "cmp", "comp", "acc", "cas", "Rec", "NT", "Rep", "prep", "seq", "arr", "p", "count", "true", "esp", "r", "res", "all", "bb", "par", "respons", "obj", "feat", "ret", "CONT", "err", "rest", "rev", "prev", "compl", "cond", "rh", "conn", "rep", "array", "REP", "Response", "content", "rel", "response", "result", "reply", "respond", "Res", "coll", "nt", "re", "null", "na", "report", "red", "Ret", "col"], "Alist": ["Salist", " ALList", "Sallist", "AlIST", "SalIST", "Aisted", "Alelist", "Blelist", "AlList", "Allist", "Salelist", "ALelist", "AIST", "Blist", " AListed", "ALList", "ALlist", "Aist", " ALIST", "Alisted", "Bllist", "BlIST", "ALIST", "AListed"], "cont": ["rec", "ctr", "text", "code", "ct", "inc", "req", "nc", "size", "ont", "cr", "int", "txt", "comp", "acc", "sect", "contin", "diff", "path", "inf", "keep", "sc", "default", "att", "length", " CONT", "count", "complete", "cm", "toc", "dest", "struct", "lat", "ourse", "circ", "feat", "ext", "ci", "CONT", "rest", "c", "current", "compl", "dist", "conn", "nat", "CC", " Cont", "det", "requ", "lc", "contract", "content", "progress", "cur", "uc", "dc", "ind", "xt", "desc", "catch", "common", "ident", "cc", "cart", "mult", "coll", "const", "Cont", "nt", "list", "nav", "entry", "ignore"], "aa": ["la", "uc", "ea", "aska", "AC", "dc", "ma", "ana", "ja", "qa", "xa", "c", "af", "fc", "ha", "ai", "pha", "doc", "df", "cc", "mm", "ee", "arr", "ack", "wa", "inc", "nc", "ave", "ah", "exp", "abc", "a", "ac", "adr", "aaaa", "sa", "da", "qua", "va", "aii", "ae", "null", "ad", "ari", "na", "ay", "asha", "asa", "bb", "AA", "sha", "Na", "aaa", "apa", "alpha", "acc", "ba", "ga", "par", "ca", "au", "anta", "aea", "aw", "oc", "ia", "account", "di"], "i": ["ei", "ip", "iw", "sys", "ie", "ind", "c", "text", "id", "code", "ct", "gi", "I", "io", "p", "r", "ix", "z", "work", "e", "y", " iP", "gu", "iu", "xi", "w", "ii", "j", "num", "opt", "instance", "ti", "ci", "ih", "ait", "g"], "x": ["input", "right", "plus", "text", "id", "code", "xes", "ct", "mx", "xxxx", "event", "west", "h", "nc", "ix", "work", "a", "e", "get", "wy", "int", "ad", "b", "ux", "fx", "ax", "on", "num", "opt", "ady", "inf", "xs", "xml", "n", "full", "config", "exec", "view", "xy", "well", "p", "m", "z", "abc", "sex", "ctx", "nex", "t", "ww", "plex", "pe", "any", "w", "xx", "rex", "ext", "wx", "vent", "ci", "hex", "tx", "xc", "c", "rax", "s", "word", "u", "wa", "cgi", "px", "ic", "y", "exc", "es", "xp", "dx", "l", "ty", "en", "expl", "lex", "f", "cross", "ross", "sw", "content", "qu", "python", "v", "yx", "data", "xt", "ph", "rx", "co", "na", "www", "php", "xi", "q", "X", "index", "apache", "ex", "g"], "NList": ["NPercent", "YColl", "ESet", "YZ", " NChain", "ZColl", "VList", "NZ", " Nlist", "Nlist", "CNlist", " NPercent", "IChain", "JSet", "NLoop", " NSet", "NData", " NZ", " NLoop", "NLi", "CNInt", "JList", " NData", "IList", "JData", " NLi", "NLIST", "CNLi", "NSet", "NChain", "ZList", "Blist", "ELoop", " NColl", "EList", "BLi", "VCont", "YList", "EData", "JLoop", "BInt", "NInt", "IPercent", "ZZ", "NCont", " NCont", "ZLIST", " NInt", "NColl", "ICont", "VPercent", "VChain", "CNList", " NLIST", "YLIST"]}}
{"code": " \n  \n  tCase = int(sys.stdin.readline())\n  \n  def ken(bet, list):\n  \tfor i in list:\n  \t\tif i >= bet:\n  \t\t\tlist.remove(i)\n  \t\t\treturn i, list\n  \t\n  \tx = list[0]\n  \tlist.remove(x)\n  \treturn x, list\n  \t\n  def naomi(YList, ZList):\n  \tl1 = list(YList)\n  \tl2 = list(ZList)\n  \t\n  \twhile len(l1) > 0:\n  \t\tcy = l1.pop()\n  \t\tcz = l2.pop()\n  \n  \t\tif (cy < cz):\n  \t\t\t\treturn YList[0], ZList[len(ZList)-1]\n  \t\t\n  \treturn YList[len(YList)-1], ZList[len(ZList)-1]\n  \t\t\n  def main(YList, ZList):\n  \tdnp = 0\n  \tnp = 0\n  \tYList.sort()\n  \tZList.sort()\n  \t\n  \tYList2 = list(YList)\n  \tZList2 = list(ZList)\n  \t\n  \tYList.sort()\n  \t\n  \twhile len(YList) > 0:\n  \t\tcy, ty = naomi(YList, ZList)\n  \t\tYList.remove(cy)\t\t\n  \t\tcz, ZList = ken(ty, ZList)\n  \t\tif (cy > cz):\n  \t\t\tdnp += 1\n  \t\t\t\n  \twhile len(YList2) > 0:\n  \t\tcy = YList2.pop()\n  \t\tcz, ZList2 = ken(cy, ZList2)\n  \t\tif (cy > cz):\n  \t\t\tnp += 1\n  \t\t\t\n  \t\t\t\n  \t\n  \n  \treturn str(dnp) + \" \" + str(np)\n  \t\t\n   \n  if __name__ == '__main__':\n  \tfor i in xrange(tCase):\t\n  \t\t\n  \t\tN = [int(x) for x in sys.stdin.readline().split(' ')]\n  \t\tYList = [float(x) for x in sys.stdin.readline().split(' ')]\n  \t\tZList = [float(x) for x in sys.stdin.readline().split(' ')]\n  \t\tprint \"Case #%d: %s\" % (i + 1, main(YList, ZList))\n", "substitutes": {"tCase": [" tStep", " TCase", "ttCase", "Tcase", "tcase", " TStep", "ttStep", "xtCase", "tEvent", "TEvent", "xtEvent", "tStep", " tcase", " Tcase", "TStep", "ttEvent", "TCase", "xtStep"], "bet": ["cot", "iot", "pred", "et", "ind", "bm", "ji", "beta", "pre", "bank", "bi", "br", "p", "case", "pat", "sat", "mat", "lot", "py", "ch", "bf", "pit", "Bet", "bit", "nt", "bt", "nd", "base", "net", "match", "ot", "gt", "bat", "yt", "nat", "bett", "il", "bot", "ny", "val", "ba", "slot", "eb", "si", "test", "court"], "list": ["LI", "long", "input", "text", "code", "one", "part", "LIST", "hard", "source", "table", "flat", "live", "e", "sort", "term", "int", "queue", "member", "the", "format", "path", "style", "none", "pair", "listed", "full", "n", "default", "string", "vector", "multi", "la", "loop", "view", "length", "p", "case", "edit", "complete", "group", "z", "all", "key", "place", "non", "que", "t", "base", "line", "net", "pe", "load", "w", "left", "bl", "tree", "see", "c", "tail", "out", "s", "ll", "layer", "word", "section", "za", "fl", "system", "List", "cli", "self", "pl", "lists", "l", "f", "g", "lc", "array", "lu", "j", "cl", "batch", "type", "ler", "v", "search", "sequence", "add", "data", "record", "end", "ls", "parent", "result", "number", "L", "st", "stack", "back", "law", "nt", "low", "null", "zip", "len", "chain", "www", "pattern", "wl", "match", "resource", "object", "lp", "module", "single", "new", "q", "val", "dl", "entry", "set", "hold", "man", "X", "index", "test", "li"], "i": ["ip", "ie", "mini", "slice", "id", "it", "I", "oi", "h", "ix", "a", "e", "adi", "int", "b", "aci", "start", "uri", "pi", "ib", "inf", "ait", "multi", "di", "ini", "idi", "iw", "jit", "k", "ai", "ji", "gi", "io", "p", "mi", "z", "key", "iu", "w", "ii", "ui", "ti", "ali", "ci", "ei", "qi", "hi", "c", "yi", "chi", "bi", "u", "zi", "ic", "cli", "y", "l", "uni", "ri", "f", "isi", "iq", "trial", "j", "si", "ih", " ii", "iac", "v", "bis", "ind", "phi", "ion", "d", "abi", "gu", "xi", "q", "vi", "ik", "index", "li"], "x": ["rec", "input", "item", "text", "id", "code", "one", "xes", "ct", "mx", "xxxx", "_", " X", "event", "h", "ix", "work", "six", "a", "e", "zx", "b", "int", "ux", " z", "ax", "fx", "on", " index", "xs", "xml", "n", "full", "exec", "view", "k", "loc", "xy", "p", "true", "xxxxxxxx", "m", "z", "sex", "key", "ctx", "nex", "t", "xf", "xe", "ww", "pe", "any", "w", "xx", "rex", "ext", "wx", "ci", "hex", "tx", "ch", "xc", "c", "rax", "out", "s", "word", "inx", "u", "px", "ic", "y", "exc", "es", " xx", "xp", "com", "l", "dx", "en", "expl", "lex", "f", "cross", "array", "max", "xxx", "j", "qu", "python", "v", "search", " item", "yx", "data", "iz", "items", "xt", "d", "rx", "check", "na", "www", "php", "xi", " y", "arch", "q", "X", "index", "test", "ex", "g"], "YList": ["NYCode", "ZDesc", "QLine", "YBlock", "yChain", "XInstance", "YLine", "NYSet", "XCode", "XDesc", "ZMode", "ZData", "XArray", "ZCode", "YYEx", "yPart", " YMode", "ZLine", " YEx", "YData", "XEx", "YPart", "IOLine", " YSt", " YCollection", "XSet", "XSt", "ZArray", "NYBlock", "QList", "YLibrary", "Ylist", "ZSet", "YCollection", "ZLibrary", "XLeft", "NYEx", " Ylist", "XBlock", "ZSt", " YDesc", "Zlist", " YArray", "yData", "YYL", " YLibrary", "XChain", "ZEx", "YInstance", " YData", "XYChain", "XYSet", "NYList", "XPart", "XCollection", "XYList", "YL", "YSet", " YLeft", "XData", "ZLeft", " YBlock", "IOList", "Qlist", "ySet", "QChain", "XYL", "YSt", "yList", "ZChain", " YChain", "YChain", "yMode", "NYCollection", "YDesc", "ZL", "ySt", "YMode", "IOSet", "YCode", " YSet", "XYLine", "yLibrary", "XL", "yArray", " YPart", " YL", "YEx", "XList", "yL", "YYArray", "yBlock", "ZPart", " YInstance", "YLeft", "YArray", "ZInstance", " YLine", "YYList", "yEx"], "ZList": ["SHL", "ZPage", "ZZList", "IZTable", " ZLeft", "INL", "YLine", "ZipArray", " ZLike", "SHlist", "ZData", "YLow", "ZLow", "zList", "ZEList", "YPage", "ZCollection", "XText", "ZipEx", "ZLine", "XEx", " ZLine", "XLine", " Zlist", "ZenEx", "XInfo", "IZlist", "ZenTree", "INList", "YTree", "YTable", "IPList", "ZZCollection", "ZQueue", "YLike", "XLow", " ZCollection", "ZArray", "SHText", "Ylist", " ZLIST", "ZTable", "YCollection", "XLeft", "Zlist", "ZLike", "SHList", "IPL", "ZipList", "Xlist", "YYL", "INCollection", "ZenL", "ZXList", "ZXLine", " ZText", "ZEx", "ZXlist", " ZEx", "YYLIST", "XCollection", "YInfo", "YL", "zlist", "ZZArray", "XData", "IPPage", "ZLeft", "ZenPage", " ZTable", "IZList", "zQueue", "ZInfo", "ZipL", "YYLike", "zLine", "SHCollection", "ZLIST", "ZenList", "ZL", " ZLow", " ZArray", "INLeft", " ZL", "ZEQueue", "SHLine", "ZElist", "IZL", "zCollection", "XL", "YText", " ZInfo", "ZTree", "XTree", "SHQueue", "ZText", "ZECollection", "YEx", "XList", "ZZEx", "ZXData", "zData", "YArray", "YYList", "YLIST"], "l1": [" l3", " ln", "l3", "li81", "L1", "b2", "b0", "li2", "L0", "l81", " l8", "sl1", "sl2", "l8", "ln", "b1", "l0", "Ln", "L01", " l81", "L2", "sl8", "li01", "bn", "sl3", "l01", "L81", " l01", "li1", "L8", "L3", " l0"], "l2": ["ltwo", "L1", "L5", "li2", "lp1", "Ltwo", "eltwo", " l02", "L2", "l5", "lp5", "liSecond", "el5", " lSecond", "lSecond", "el2", "LSecond", "L02", "lptwo", "li1", "li02", "lp2", "l02", "el1"], "cy": ["chu", "ie", "ct", "cia", "pty", "ly", "cs", "cf", "cod", "yy", "cr", "cing", "cow", "kee", "cro", "chy", "dy", "cycle", "cell", "cos", "yo", "gy", "cot", "cu", "sky", "cm", "py", "z", "cb", "cn", "key", "cor", "ym", "cd", "oy", "ca", "zy", "cp", "cry", "ci", "ck", "Cy", "ch", "cies", "sy", "c", "zh", "yi", "cat", "px", "y", "icy", "cus", "cin", "Ky", "sty", "ny", "lc", "hy", "vy", "ky", "ce", "sys", "ocy", "vc", "cop", "co", "core", "lie", "cum", "city", "cit", "ku", "cyl", "ry", "Ty", "jc", "col"], "cz": ["lab", "pc", "tc", "ly", "cs", "cf", "zx", "qq", "zo", "cr", "cow", "chy", "gy", "cot", "cu", "yz", "nz", "count", "sky", "cm", "py", "z", "cb", "ctx", "fy", "cd", "ca", "zy", "ci", "ch", "sy", "c", "zh", "yi", "zi", "cca", "px", "gb", "y", "cus", "cin", "ny", "lc", "tiny", "ky", "ce", "che", "dc", "tz", "co", "ez", "zip", "chini", "gz", "ry", "Ty", "jc", "li"], "dnp": ["fdp", "nyp", "cdnP", "lnp", "fdper", "wdl", "dhpt", "dnpt", "mnpt", "nyl", "nyc", "dnpr", "dnpo", "ndp", "rnc", "wdper", "rnpr", "mnP", "cdnpt", "dnc", "dnper", "dhP", "wdp", "fdl", "cdnp", "ndpr", "dnP", "fdc", "lnc", "wdc", "mnpc", "dhp", "dnpc", "rnp", "dhpc", "dnl", "ndc", "lnpr", "cdnpc", "lnpo", "ndpo", "nyper", "rnpo", "mnp"], "np": ["nr", "ip", "proc", "ni", "ng", "nah", "pu", "Py", "nb", "tp", "nc", "cmp", "fp", "size", "qq", "next", "jp", "pi", "pai", "appy", "num", "gap", "wp", "adj", "node", "n", "bps", "sync", "odi", "p", "py", "nw", "t", "bsp", "nd", " nap", "ne", "net", "nm", "cp", "NP", "frac", "api", "yn", " NP", "nut", "uni", "ns", "dx", "bp", "dist", "nat", "ny", "nn", "sn", " nit", "python", "network", "nl", "pg", "omp", "nice", "png", "tmp", "fn", " ni", "nt", "umpy", "na", "pn", "nit", "wn", "nu", "nv"], "YList2": ["YLineall", "YLineTwo", "YContall", "YEx2", "YListTwo", "YMember2", "XList182", "YEx4", "YMap2", "YMember1", "Ylist1", "YListall", "WLine2", "YList1", "Ylist2", "YList4", "YLine4", "YStatus2", "YList0", "XYLine4", "WListTwo", "YLine0", "YList182", "XYList0", "YExtwo", "XList2", "XYList4", "WList2", "XYLine2", "YMapall", "YStatus0", "XYListtwo", "YLine2", "XList1", "YStatustwo", "YContTwo", "WListall", "YEx0", "XYLinetwo", "YLinetwo", "XYLine0", "YMember182", "XYList2", "YStatus4", "WLineTwo", "YCont2", "WLineall", "Ylist182", "YListtwo", "YMapTwo"], "ZList2": ["ZL2", "Zlist1", "SHList4", "SHListL", "ZList4", "ZCollection1", "ZSet2", "YList1", "zListTwo", "zCollection2", "YList0", "ZSetAll", "ZList5", "zCollectionAll", "SHLine5", "zList2", "ZLine5", "SHLine4", "ZL4", "ZCollectionAll", "zListAll", "ZCollectionL", "Zlist0", "ZLL", "ZListTwo", "ZLine2", "ZListL", "ZL5", "ZCollection2", "ZList0", "ZCollection0", "SHList2", "ZLineTwo", "ZList1", "SHLine2", "SHLineL", "ZlistL", "ZCollectionTwo", "ZLine4", "Zlist5", "ZLineL", "ZSetTwo", "zCollectionTwo", "Zlist2", "SHList5", "ZLineAll", "ZListAll", "YListL", "Zlist4"], "ty": ["gy", "sy", "tor", "tu", "zh", "tty", "sh", "tz", "th", "sq", "sky", "py", "pty", "px", "z", "pay", "thy", "y", "icy", "yan", "wy", "bay", "asy", "yy", "ski", "fy", "txt", "ay", "sty", "ties", "cor", "ot", "yt", "ety", "TY", "cro", "ny", "chy", "oy", "tiny", "ta", "hy", "vy", "ady", "ky", "zy", "ti", "vt", "idy", "ry", "cry", "tan", "Ty", "ch"], "N": ["Ni", "NL", "NY", "NI", "NT", "NB", "ni", "n", "Node", "T", "P", "I", "G", "L", "NS", "nc", "Y", "Z", "Num", "ns", "V", "ne", "R", "C", "O", "A", "D", "E", "S", "Ns", "M", "B", "NN", "F", "Q", " n", "No", "CI"]}}
{"code": " \n  \n  \n  \n  tCase = int(sys.stdin.readline())\n  \n  def calcTemp(taxa, X):\n  \treturn X/taxa;\n  \n  def main(C, F, X):\n  \n  \ttaxa = 2.0\n  \tresp = 0\n  \t\n  \t\n  \twhile True:\n  \t\tif C/taxa + calcTemp(taxa + F, X) < calcTemp(taxa, X):\n  \t\t\tresp += C/taxa\n  \t\t\ttaxa += F\t\t\t\n  \t\telse:\n  \t\t\tresp += calcTemp(taxa, X)\n  \t\t\treturn resp\n  \t\n  \t\n  \treturn 0\n  \t\t\n   \n  if __name__ == '__main__':\n  \tfor i in xrange(tCase):\t\n  \t\t\n  \t\tC, F, X = [float(x) for x in sys.stdin.readline().split(' ')]\n  \t\tprint \"Case #%d: %s\" % (i + 1, main(C, F, X))\n", "substitutes": {"tCase": ["fStep", "dtCase", " tCountry", "tcStep", "TTest", "tCode", "Tcase", " tTest", "tcase", "TCode", "tcCase", "dtTest", "tccase", "tTest", "fCode", "fCase", "tStep", "TCountry", "tcCode", "fcase", "TStep", "dtcase", "tCountry", "dtCountry", "TCase", " tcase"], "taxa": ["genan", "carta", "Taxa", "ttan", "lexa", "Taxan", "genA", "lexea", "cartb", " taxe", "lexas", "cartas", "axas", "planta", "Taxb", "axan", "axae", "axaa", " taxea", "lexA", " taxo", "oxea", " taxae", "taxae", "oxaa", "oxas", "taxi", " taxas", "cartan", "TaxA", " taxan", "axi", " taxi", "lexo", "plantas", "gena", " taxA", "oxan", "taxea", "plantb", "oxi", "axA", "axa", "taxas", "tta", "oxA", "taxA", " taxb", " taxaa", "cartA", "plantA", "oxa", "taxaa", "tte", "axo", "taxan", "taxe", "taxo", "Taxe", "oxb", "lexae", "ttA", "taxb"], "X": ["HTTP", "I", "G", "Z", "V", "W", "R", "U", "O", "FW", "XXX", "Int", "CH", "Q", "Cu", "FE", "NC", "IR", "WS", "P", "CR", "Ext", "LL", "FC", "K", "H", "Value", "XM", "A", "Form", "B", "CA", "Test", "Event", "AC", "CF", "CE", "Y", "XP", "EL", "XT", "Rex", "CC", "D", "MX", "TX", "S", "XY", "Ex", "M", "File", "EX", "Cross", "IO", "IP", "FX", "Fe", "N", "PH", "IX", "Location", "T", "Work", "UX", "L", "XL", "CL", "XX", "FF", "UC", "ZX", "E", "Long", "PE", "DX", "CI"], "C": ["Cs", "AC", "N", "c", "Case", " c", "CU", "P", "T", "I", "CR", "case", "CM", "CF", "G", "CN", "JC", "CW", "L", "FC", "CE", "CT", "CL", "YC", "K", "Y", "CV", "Python", "Sc", "SC", "Ch", "Co", "V", "CCC", "W", "R", "H", "UC", "f", "FF", "U", "O", "A", "CO", "CC", "D", "Code", "EC", "VC", "COR", "E", "S", "DC", "Cache", "M", "B", "Q", "Cu", "NC", "MC", "CA", "CI", "CNN"], "F": ["PF", "Fe", " f", "OF", "N", "Full", "BF", "Fore", "IF", "MF", "DF", "SF", "T", "P", "I", "Fin", "FB", "CF", "UF", "G", "Conf", "FO", "L", "FC", "FM", "K", "Z", "Y", "cf", "API", "Flow", "Family", "V", "FG", "H", "W", "f", "FF", "R", "U", "O", "TF", "FW", "AF", "A", "Fi", "Form", "GF", "D", "EF", "WF", "RF", "E", "FS", "FL", "Fine", "FH", "M", "File", "Q", "B", "Fun", "ELF", "Fs", "FD"], "resp": ["ref", "rec", "success", "pos", "Resp", "mm", "req", "aa", "cmp", "pp", "camp", "comp", "acc", "num", "aff", "n", "mem", "Rec", "conf", "exit", "nz", "cache", "seq", "p", "esp", "r", "sp", "z", "res", "ac", "fe", "bb", "par", "temp", "err", "xc", "frac", "c", "ll", "rev", "prev", "cond", "xp", "rh", "conn", "f", "CC", "lc", "rep", "Response", "eff", "response", "result", "respond", "rx", "exp", "tmp", "nt", "re", "zip", "na", "val", "col"], "i": ["ini", "ip", "ie", "mini", "ind", "xc", "slice", " c", "c", "phi", "k", "id", "code", "ai", "chi", "gi", "I", "bi", "p", "zi", "mi", "counter", "ix", "z", "my", "a", "e", "y", "int", "ri", "aci", "f", "iu", "xi", "uri", "pi", "ii", "j", "ti", "type", "index", "si", "ci", "n", "li", "multi", "col", "di"], "x": [" f", "xc", "c", "value", " c", " int", "code", "xt", "xy", "ct", " np", "mx", "xxxx", "p", "u", "xxxxxxxx", "rx", "m", "h", "r", "z", "e", "y", "ctx", "xp", "XX", "dx", "int", "xf", "www", "xe", "f", "fx", "ax", " ft", "ww", "xi", " cx", " xp", "xxx", "w", "xx", "rex", "index", "test", "xs", "wx", "xml", "n", " ff", "ex", "tx", "v"]}}
{"code": " \n  class Test(unittest.TestCase):\n  \tdef test_1(self):\n  \t\tself.assertEqual(main('XXXT', '....', 'OO..', '....'), 'X won')\n  \tdef test_2(self):\n  \t\tself.assertEqual(main('XOXT', 'XXOO', 'OXOX', 'XXOO'), 'Draw')\n  \tdef test_3(self):\n  \t\tself.assertEqual(main('XOX.', 'OX..', '....', '....'), 'Game has not completed')\n  \tdef test_4(self):\n  \t\tself.assertEqual(main('OOXX', 'OXXX', 'OX.T', 'O..O'), 'O won')\n  \tdef test_5(self):\n  \t\tself.assertEqual(main('XXXO', '..O.', '.O..', 'T...'), 'O won')\n  \tdef test_6(self):\n  \t\tself.assertEqual(main('OXXX', 'XO..', '..O.', '...O'), 'O won')\n  \n  tCase = int(sys.stdin.readline())\n  \n  def main(l1, l2, l3, l4):\n  \t\n  \tresul = ganhador(l1[0], l1[1], l1[2], l1[3])\n  \t\n  \tif resul == 0:\n  \t\treturn 'X won'\n  \telif resul == 1:\n  \t\treturn 'O won'\n  \t\t\n  \tresul = ganhador(l2[0], l2[1], l2[2], l2[3])\n  \t\n  \tif resul == 0:\n  \t\treturn 'X won'\n  \telif resul == 1:\n  \t\treturn 'O won'\n  \t\t\n  \tresul = ganhador(l3[0], l3[1], l3[2], l3[3])\n  \t\n  \tif resul == 0:\n  \t\treturn 'X won'\n  \telif resul == 1:\n  \t\treturn 'O won'\n  \t\t\n  \tresul = ganhador(l4[0], l4[1], l4[2], l4[3])\n  \t\n  \tif resul == 0:\n  \t\treturn 'X won'\n  \telif resul == 1:\n  \t\treturn 'O won'\n  \t\t\n  \tresul = ganhador(l1[0], l2[0], l3[0], l4[0])\n  \t\n  \tif resul == 0:\n  \t\treturn 'X won'\n  \telif resul == 1:\n  \t\treturn 'O won'\n  \n  \tresul = ganhador(l1[1], l2[1], l3[1], l4[1])\n  \t\n  \tif resul == 0:\n  \t\treturn 'X won'\n  \telif resul == 1:\n  \t\treturn 'O won'\n  \n  \tresul = ganhador(l1[2], l2[2], l3[2], l4[2])\n  \t\n  \tif resul == 0:\n  \t\treturn 'X won'\n  \telif resul == 1:\n  \t\treturn 'O won'\n  \n  \tresul = ganhador(l1[3], l2[3], l3[3], l4[3])\n  \t\n  \tif resul == 0:\n  \t\treturn 'X won'\n  \telif resul == 1:\n  \t\treturn 'O won'\n  \n  \tresul = ganhador(l1[3], l2[2], l3[1], l4[0])\n  \t\n  \tif resul == 0:\n  \t\treturn 'X won'\n  \telif resul == 1:\n  \t\treturn 'O won'\n  \n  \tresul = ganhador(l1[0], l2[1], l3[2], l4[3])\n  \t\n  \tif resul == 0:\n  \t\treturn 'X won'\n  \telif resul == 1:\n  \t\treturn 'O won'\n  \t\n  \tif '.' in l1 or '.' in l2 or '.' in l3 or '.' in l4:\n  \t\treturn 'Game has not completed'\n  \telse:\n  \t\treturn 'Draw'\n  \t\n  \t\n  def ganhador(a, b, c, d):\n  \tx = 0\n  \to = 0\n  \tp = 0\n  \tif a == 'X':\n  \t\tx += 1\n  \t\tp += 1\n  \tif a == 'O':\n  \t\to += 1\n  \t\tp += 1\n  \tif a == 'T':\n  \t\tx += 1\n  \t\to += 1\n  \t\tp += 1\n  \tif b == 'X':\n  \t\tx += 1\n  \t\tp += 1\n  \tif b == 'O':\n  \t\to += 1\n  \t\tp += 1\n  \tif b == 'T':\n  \t\tx += 1\n  \t\to += 1\n  \t\tp += 1\n  \tif c == 'X':\n  \t\tx += 1\n  \t\tp += 1\n  \tif c == 'O':\n  \t\to += 1\n  \t\tp += 1\n  \tif c == 'T':\n  \t\tx += 1\n  \t\to += 1\n  \t\tp += 1\n  \tif d == 'X':\n  \t\tx += 1\n  \t\tp += 1\n  \tif d == 'O':\n  \t\to += 1\n  \t\tp += 1\n  \tif d == 'T':\n  \t\tx += 1\n  \t\to += 1\n  \t\tp += 1\t\n  \tif x == 4:\n  \t\treturn 0\n  \telif o == 4:\n  \t\treturn 1\n  \telif p == 4:\n  \t\treturn 2\n  \telse: # incompleto\n  \t\treturn 3\n   \n  if __name__ == '__main__':\n  \tfor i in xrange(tCase):\t\n  \t\tl1 = [str(x) for x in sys.stdin.readline().split(' ')]\n  \t\tl2 = [str(x) for x in sys.stdin.readline().split(' ')]\t\n  \t\tl3 = [str(x) for x in sys.stdin.readline().split(' ')]\t\n  \t\tl4 = [str(x) for x in sys.stdin.readline().split(' ')]\n  \t\tnulo = [str(x) for x in sys.stdin.readline().split(' ')]\t\t\n  \t\tprint \"Case #%d: %s\" % (i + 1, main(l1[0], l2[0], l3[0], l4[0]))\n  \t\t\n", "substitutes": {"self": ["ref", "proc", "public", "ng", "bug", "part", "server", "this", "event", "func", "h", "lf", "work", "cs", "e", "now", "driver", "er", "private", "full", "node", "Self", "host", "http", "form", "k", "utils", "me", "cache", "mp", "case", "worker", "session", "all", "args", "ctx", "base", "eth", "error", "row", "us", "spec", "w", "other", "wx", "ck", "static", "ch", "client", "layer", "word", "es", "ns", "l", "user", "f", "ws", "cl", "instance", "log", "app", "type", "python", "peer", "context", "sys", "github", "ls", "parent", "writer", "result", "connection", "yes", "co", "tmp", "object", "q", "eng", "per", "os", "time", "ps", "test", "g"], "tCase": ["fcase", "fEnd", "hEnd", "hcase", "fCase", "ttycase", "tcase", "todo", "ttyCase", "fodo", "tEnd", "hCase", "ttyEnd", "ttyodo", "hodo"], "l1": ["p2", "l16", "lcOne", "p1", "l24", "l6", "ll6", "il14", "cell99", "l99", "ell20", "L1", "l11", "ol24", "llOne", "ll24", "ll20", "lc4", "ll9", "ell14", " l11", "liOne", "p4", "lc1", "il1", "ell9", "ol6", "L2", "olOne", "cell7", " l24", "lc16", " l6", "il20", "cell1", "il9", "cell11", "l9", "lc3", "el11", "el7", "l20", "el1", "l7", " lOne", "ell1", "ll1", "L4", "el99", " l99", "p3", "lOne", "li3", " l16", "li1", "ol1", "ll14", "lc2", "L3", "l14", "li16", " l7"], "l2": ["p2", "L22", "ltwo", "p1", "ll2", "p5", "lc22", "ll5", "el4", "L1", "lc4", "L5", "el8", "p4", "l8", "eltwo", " ltwo", "L2", "l5", "el5", "el2", "wltwo", "ll4", "ilTwo", "lc3", "llTwo", "il4", "ll3", "ll1", "wl4", "L4", " l22", "il8", "el3", "ll8", "wl3", "wl2", "lTwo", "lc5", "elTwo", "il2", "lc2", "L3", "l22"], "l3": ["l16", "ll03", "ol28", "l6", "ol37", "rl33", "L6", "Lthree", "li37", "l28", "rl4", "ll28", "li16", " lthree", "ll37", "ilthree", "il3", "il6", "L5", " l8", "l8", "il44", "lthree", "l5", "l44", " l33", "fl3", " l6", "li03", "lc3", "ol03", "ellThird", "li44", "rl3", "ell44", "lThird", "l37", "liThird", "il4", "ell16", " l5", "ll3", "il16", "l33", "L4", "l03", "ol3", "li3", "ilThird", "lc8", "fl8", "L33", "ell3", "rl5", "lc6", "fl5", "lc5", "fl6", "L3", "li28"], "l4": ["d6", "lp6", "l6", "p5", "el4", " l23", "l11", "pfour", " lfour", "elfour", "li0", " l11", "cellfour", "p4", "fl4", "l0", "la2", "cell2", "p9", "l5", "li11", "lp0", "li6", "li4", "li32", "lafour", "la23", "el5", " l6", "l32", "l9", "lfour", "l7", "d4", "L32", "l23", "cell4", "L4", " l5", "lp4", " l0", "lp11", "dfour", "li3", "flfour", "el6", "L7", "d5", "fl9", "fl5", " l9", "cell23", "li7", "L3", " l32", "la4", " l7"], "resul": ["rezell", "resell", "rotssell", "rasulate", "resit", "presull", "errul", "ressulate", "resultscul", "rowsil", "prescul", "errsell", " resit", "retsul", " resomal", "resulator", "risil", "cssul", "erric", "resil", "resolutionunt", "presul", "psUL", "reshhell", "rezull", "resolutionUL", "rezhell", " resil", "resimil", "cssull", " resell", "reshic", "rasunt", "rotsul", " resol", "reshell", "ressull", "resUL", " reshell", "risell", "errull", "psul", "rescul", "rasulator", " resoul", "risull", "rezil", "rowsif", "resultsulator", "resulate", "resetimil", "resolutionil", "resic", "resolutionul", "retsit", "erril", "Resul", "presoul", "ressil", "rowsul", "pscul", "reshsell", "rasil", "reshil", "rasul", "rasUL", " resUL", "regil", "resscul", "restol", "resetul", "ressimil", " rescul", "resultsulate", "regul", "errhell", "regol", "rascul", "Resil", " resimil", "resuu", "cssil", "resetit", "retsomal", "ressul", "resomal", "ressUL", "resultsul", "rotsil", "reshif", "reshimil", "ressell", "cssif", "rowsull", "psoul", "Resunt", "presil", "resull", "resif", "restul", "restil", " resull", "rotsic", "reshull", "reguu", "rezul", "retsimil", "resunt", "ResUL", "reshul", "resoul", " resuu", "restuu", "resetomal", "resol", "risul", "presUL", "ressulator"]}}
{"code": " \n  \n  tCase = int(sys.stdin.readline())\n  \n  \n  def map(R, C, Bombs):\n  \tm = [[\".\" for x in xrange(C)] for x in xrange(R)]\n  \tprint Bombs\n  \tm[R-1][C-1] = 'c'\n  \tlastSkip = False\n  \tfor i in xrange(R):\n  \t\tfor j in xrange(C):\n  \t\t\tif Bombs == 0:\n  \t\t\t\tbreak\n  \t\t\t\n  \t\t\tif lastSkip:\n  \t\t\t\tm[i][j] = 'f'\n  \t\t\t\tcontinue\n  \t\t\t\n  \t\t\tif R - i == 2 or C - j == 2:\n  \t\t\t\tif Bombs == 1:\n  \t\t\t\t\tm[i][j] = 'f'\n  \t\t\t\t\tlastSkip = True\n  \t\t\t\t\tcontinue\n  \t\t\t\n  \t\t\t\t\n  \t\t\tm[i][j] = '*'\n  \t\t\tBombs -= 1\n  \t\t\tlastSkip = False\n  \t\tlastSkip = False\n  \t\t\t\t\n  \t\n  \t\n  \tfor line in m:\n  \t\tfor c in line:\n  \t\t\tprint c,\n  \t\tprint\n  \t\t\n  \t\t\n  def imprimir(m):\n  \tfor line in m:\n  \t\tfor c in line:\n  \t\t\tprint c,\n  \t\tprint\n  \t\t\n  def map2(R, C, Bombs):\n  \tm = [[\".\" for x in xrange(C)] for x in xrange(R)]\n  \tm[R-1][C-1] = 'c'\n  \tlastSkip = False\n  \t\n  \tii = 0\n  \tjj = 0\n  \twhile Bombs > 0:\n  \t\tfor j in xrange(jj, C):\n  \t\t\tif Bombs >= (C - j) or Bombs <= (C - j - 2) and Bombs > 0:\n  \t\t\t\tm[ii][j] = '*'\n  \t\t\t\tBombs -= 1\n  \t\t\telse:\n  \t\t\t\tcontinue\n  \t\t\n  \t\t\n  \t\tfor i in xrange(ii+1, R):\n  \t\t\tif Bombs >= (R - i) or Bombs <= (R - i - 2) and Bombs > 0:\n  \t\t\t\tm[i][jj] = '*'\n  \t\t\t\tBombs -= 1\n  \t\t\telse:\n  \t\t\t\tif Bombs > 0:\n  \t\t\t\t\tprint \"Impossible\"\n  \t\t\t\t\treturn\n  \t\t\t\tcontinue\n  \t\tjj += 1\n  \t\tii += 1\n  \timprimir(m)\n  \t\n  \t\t\t\t\n  \t\n  \t\n  \n  \t\t\n  def main(R, C, M):\n  \tvazios = R * C - M\n  \n  \tif R == 1 or C == 1 or vazios == 1 or vazios >= 4:\n  \t\tmap2(R, C, M)\n  \telse:\n  \t\tprint \"Impossible\"\n  \n  \treturn \"\"\n  \t\t\n   \n  if __name__ == '__main__':\n  \tfor i in xrange(tCase):\t\n  \t\t\n  \t\tR, C, M = [int(x) for x in sys.stdin.readline().split(' ')]\n  \t\tprint \"Case #%d:\" % (i + 1)\n  \t\tmain(R, C, M)\n", "substitutes": {"tCase": ["tfcase", "ttCase", " tPath", "Tcases", "Tcase", "tcases", "tcase", "ttName", " tcases", "tfPath", "tPath", "ttcase", "tName", "TPath", "TName", "tfName", "tfCase", "ttPath", "tfcases", "TCase", " tcase"], "R": ["SR", "RT", "Order", "KR", "I", "G", "With", "After", "Run", "Z", "V", "Rule", "W", "U", "O", "TR", "F", "Q", "RH", "All", "IR", "RW", "Rec", "Br", "AR", "RE", "P", "CR", "WR", "Rs", "r", "K", "Ch", "Range", "Block", "MR", "H", "Par", "RM", "A", "Before", "RA", "Rh", "B", "ERC", "Right", "RIP", "Cl", "RC", "Y", "GR", "Any", "SC", "LR", "RR", "ER", " r", "D", "Cr", "S", "J", "Ro", "M", "File", "Role", "DR", "RN", "RP", "Ram", "N", "JR", "T", "NR", "Res", "L", "CL", "Sc", "Ra", "Re", "RS", "Line", "RL", "BR", "Read", "E", "Region", "RG", "X", "RO"], "C": ["Core", "Ca", "I", "Count", "G", "CW", "Z", "V", "W", "Config", "CS", "U", "O", "Code", "RFC", "F", "Q", "Cu", "MC", "Com", "NC", "You", "KC", "P", "CR", "CM", "CN", "r", "K", "Ch", "Channel", "H", "A", "EC", "Control", "Chain", "GC", "Rh", "B", "CA", "Cor", "AC", "CU", "Cl", "RC", "CF", "JC", "Column", "CE", "YC", "Y", "SC", "Col", "This", "CC", "D", "Cr", "DC", "S", "J", "M", "CP", "Cs", "N", "T", "L", "CT", "CL", "CV", "Sc", "Size", "CI", "Co", "UC", "VC", "IC", "E", "X", "Cloud", "Con", "CNN"], "Bombs": ["SBorers", "brees", "TBombs", "Balballs", " Bunks", "BWombs", "Bouts", "Bombies", "PBlocks", " Bauts", "Bumbs", " Brees", "Brees", " Bombies", " Bumbs", "Baombie", "Lambers", "Bashes", "bouts", " Bballs", "Baos", "bombie", "Balacteria", "BBaos", "bauts", "TBlocks", "BFesses", "Buffrones", "Ambones", "bumbs", "Subunks", "Subandals", "bowers", " Bandals", "Phrones", "PBrones", "baos", "besses", "Blacteria", " Biers", "PBurches", "Blockandals", "Baombs", "BWumbs", "Bunks", "Blockauts", "Subombs", " Bomb", "Ubauts", "Bones", "baches", "Bomb", "MBauts", "OBauts", "Bliers", "bballs", " Baos", "Baliers", "BFomes", "Blombies", "BBasm", "Suborers", "Borers", "Brumbs", "Lumbs", "Bambers", "Basm", "OBumbs", "Balurches", "BFombs", "Phombs", "Blouts", " Basm", "Fomb", "bbusters", "Blockombs", "Balions", " Bambers", "MBumbs", "Biers", "FBurches", "Brombies", "GBombs", " Borders", "Fambers", "BBombies", "Louts", "TBauts", "Lombs", "Bauts", "Ambauts", " Borers", "OBombies", "Borders", "Burches", "Ambbusters", " Bounces", "Bandauts", "PBauts", "Bandballs", "Phauts", "Bandashes", "Ambombs", "BFaches", "borders", "Blalions", "Fombs", "bambers", "Bbusters", "Bombie", "GBombies", "bombs", "BBomb", "Baches", "BWomb", "Barees", "MBombs", "Bandals", "SBandals", "Blombs", "Bballs", "Ubombs", "Buffombs", "GBiers", "PBowers", "Balombies", "Ubballs", "blocks", "FBombs", "FBashes", " Besses", "Bowers", "Blockiers", "Bandbusters", "BBacteria", "FBballs", "Bounces", "Buffauts", "bomb", "Baounces", "Blocks", "Brauts", " Bomes", "Forders", "TBowers", "Balouts", "Buffurches", "Balandals", "Bomes", "basm", "Balashes", "bones", " Balions", "Besses", "Phurches", "Bandombs", " Baches", " Bouts", "OBombs", "Bandurches", "Brombs", " Bombie", "GBalions", "Balauts", "BBombs", "PBombs", "SBunks", "SBombs", "BWaos", "Bandones", "Ubambers", "MBombies", "Bacteria", "Brones", "BBouts", "bomes", "bounces", "Balombs"], "m": ["mn", "mini", "more", "mm", "rm", "gm", "h", "a", "e", "sm", "b", "md", "mos", "main", "tm", "num", "semble", "mut", "n", "mass", "mu", "form", "k", "am", "p", "lin", "mon", "mi", "cm", "r", "z", "o", "margin", "mc", "ms", "t", "em", "hm", "im", "rem", "mr", "ym", "nm", "mt", "w", "mand", "memory", "asm", "meter", "dim", "km", "ine", "media", "bm", "s", "middle", "meta", "u", "mission", "wm", "y", "l", "machine", "mo", "f", "ml", "model", "M", "ze", "v", "dm", "fm", "vm", "ma", "message", "d", "um", " M", "mac", "pm", "om", "module", "q", "man", "menu", "arm", "g"], "x": ["id", "code", "xes", "mx", "xxxx", "_", "event", " X", "h", "ix", "work", "a", "e", "bit", "b", "int", "ux", "fx", "ax", "on", "num", "full", "xs", "xml", "n", "ction", "k", "xy", "p", "xxxxxxxx", "r", "z", "sex", "key", "ctx", "nex", "t", "xf", "ww", "plex", "pe", "alpha", "cent", "w", "xx", "rex", "wx", "vent", "tx", "xc", "rax", "oint", "ll", "word", "page", "u", "y", "xp", "pl", "l", "dx", "lex", "f", "cross", "max", "xxx", "cl", "qu", "valid", "v", "yx", "xt", "d", "ph", "rx", "co", "XX", "xi", "q", "val", "X", "index", "test", "go", "ex", "xb"], "lastSkip": ["lastJump", "LastSkip", "firstCopy", " Lastskip", "LastCopy", "lastDiff", "latestskip", "LastDiff", "lastCopy", " lastCopy", " lastHop", "lastskip", "nextskip", "latestHop", "Lastskip", "LastJump", "nextJump", " LastCopy", "latestCopy", "firstSkip", "nextSkip", " lastDiff", " lastskip", "firstskip", " LastSkip", "LastHop", " lastJump", "nextCopy", "latestSkip", "lastHop", "firstJump", " LastDiff"], "i": ["ip", "ie", "mini", "ni", "id", "it", "one", "ki", "I", "le", "oi", "ir", "h", "ix", "a", "e", "b", "int", "uri", "li", "pi", "fi", "n", "config", "multi", "di", "ini", "k", "ai", "ji", "gi", "io", "p", "mi", "r", "z", "o", "im", "ani", "ij", "iu", "w", "ui", "ti", "ci", "ia", "ch", "ei", "hi", "qi", "yi", "chi", "bi", "u", "ic", "cli", "y", "l", "eni", "ri", "f", "inner", "J", "si", "v", "iv", "ind", "phi", "d", "ili", "xi", "q", "vi", "ori", "ik", "g"], "j": ["ie", "jo", "jet", "I", "note", "bj", "ir", "h", "ix", "a", "e", "b", "jp", "ju", "adj", "n", "uj", "ja", "jit", "json", "k", "ji", "gi", "io", "p", "cm", "py", "r", "z", "o", "em", "im", "ij", "el", "w", "oj", "ui", "ci", "ch", "jl", "qi", "job", "java", "rev", "aj", "u", "zi", "y", "l", "f", "g", "js", "J", "si", "je", "v", "ind", "ion", "d", "kj", "jump", "xi", "q", "dj", "X", "index", "jc", "li"], "line": ["play", "ine", "verse", "long", "status", "ner", "end", "loop", "sync", "nl", "block", "range", "code", "one", "word", "le", "lin", "page", "case", "group", "cm", "call", "nc", "lace", "edge", "no", "co", "point", "o", "change", "mc", "liner", "l", "b", "len", "chain", "base", "do", "link", "Line", "im", "lo", "main", "ite", "ino", "ml", "eline", "cycle", "el", "write", "lc", "set", "cell", "store", "ode", "lock", "lined", "cl", "ze", "log", "lines", "course", "online", "lining", "file", "ync", "n", "semble", "string", "li", "inline"], "c": ["uc", "cu", "nec", "dc", "enc", "xc", "anc", "fc", "k", "out", "unc", "pc", "code", "col", "ct", "cat", "ec", "cc", "d", "cache", "word", "p", "u", "case", "cm", "ic", "nc", "r", "z", "h", "call", "co", "ce", "cs", "e", "ac", "a", "mc", "cf", "coll", "cr", "l", "b", "cy", "arc", "f", "cut", "cycle", "lc", "cd", "cell", "w", "cl", "ci", "ync", "n", "sc", "g", "v"], "ii": ["ei", "jl", "ini", "iw", "iv", "ie", "qi", "ind", "mini", "qa", "hi", "ni", "ai", "ji", "yi", "gi", "bi", "zi", "II", "agi", "abi", "info", "ix", "ili", "z", "cli", "iii", "ski", "uni", "lli", "int", "ari", "ri", "ani", "ij", "iu", "iq", "ctrl", "xi", "ice", "fi", "sci", "pi", "jp", "vi", " iii", "ui", "inn", "inf", "si", "ci", "ih", "jc", "li", "v", "di"], "jj": ["qa", "jack", "ni", "jo", "ki", "mm", "bj", "jam", "ix", "Ja", "qq", "iii", "yy", "rb", "pp", "now", "jp", "pi", " iii", "adj", "di", "iw", "uj", "ja", "jit", "ai", "ji", "gi", "NJ", "II", "cm", "nd", "gh", "bb", "III", "ww", "ij", "Jump", "obj", "aq", "xx", "ci", "jl", "JJ", "qi", "java", "rev", "aj", "JC", "ri", "rc", "Job", "CC", "ZZ", "nn", "J", "ind", "JR", "cc", "url", "kj", "jump", "ijk", "q", "IJ", "jan", "dj", "jc", "li", "CNN"], "vazios": ["baudiol", "vazelos", "vazeixels", "vazicals", "vaudlos", "bazios", "Vazios", "Vzenos", " vaudicho", "vazenos", "baudlos", "vzits", "Vazio", "vaudio", "vaxicho", " vaudios", "vaudixels", "vaudicho", "vaxio", "vachio", "vazeio", "vaxicals", "vzicals", "vazicho", "Vazenos", "vachits", "vaziol", "vasiol", "vaxios", "vazixels", "vazeiol", "bazixels", "vzios", " vaudicals", "baziol", "Vazits", "baudios", "vaudios", "vazeenos", " vaudio", "vaslos", " vazicho", "baudixels", "vzenos", "Vzios", "vazlos", "vazeits", "Vzits", "vasios", "vzio", "vasixels", "vachios", "vaudiol", "vazio", "vazits", " vazio", "bazlos", " vazicals", "vachenos", "Vzio", "vaudicals", "vazeios", "vzicho"]}}
{"code": " \n  fLine = sys.stdin.readline().split()\n  tCase = int(fLine[0])\n  \n  \n  dic = {\t\t'a':'y',\n  \t\t\t'b':'h',\n  \t\t\t'c':'e',\n  \t\t\t'd':'s',\n  \t\t\t'e':'o',\n  \t\t\t'f':'c',\n  \t\t\t'g':'v',\n  \t\t\t'h':'x',\n  \t\t\t'i':'d',\n  \t\t\t'j':'u',\n  \t\t\t'k':'i',\n  \t\t\t'l':'g',\n  \t\t\t'm':'l',\n  \t\t\t'n':'b',\n  \t\t\t'o':'k',\n  \t\t\t'p':'r',\n  \t\t\t'q':'z',\n  \t\t\t'r':'t',\n  \t\t\t's':'n',\n  \t\t\t't':'w',\n  \t\t\t'u':'j',\n  \t\t\t'v':'p',\n  \t\t\t'w':'f',\n  \t\t\t'x':'m',\n  \t\t\t'y':'a',\n  \t\t\t'z':'q',\n  \t\t\t'\n':'',\n  \t\t\t' ':' '}\n  \n  \n  def alien(frase):\n  \tresul = \"\"\n  \tfor c in frase:\n  \t\tresul += dic[c]\n  \n  \treturn resul\n  \n  \n  \n  frases = []\n  for i in xrange(tCase):\n  \tfrase = sys.stdin.readline().replace(\"\n\",\"\")\n  \tfrases.append(frase)\n  \t\n  \n  for i in xrange(tCase):\t\n  \tprint \"Case #%d: %s\" % (i+1, alien(frases[i]))\n  \t\n  \t\n  \n", "substitutes": {"fLine": ["fRow", "fLoc", "fsRow", "fsCh", "lRow", "tLine", "tCode", "fCh", "lLine", "tGe", "tCh", " fGe", "fCode", "FLine", "fGe", "FGe", "lCode", "fsLine", "lCh", "tLoc", "tRow", " fLoc", "FLoc", "fsCode"], "tCase": ["cBase", " tCount", "vCase", "xCode", " tCode", "tBase", "fName", "tCode", " tCondition", "xClient", " tClass", "TCount", "TCode", "tClass", "cCode", "cCase", "fCode", "fCase", "TBase", "xBase", "tName", "TName", "TClass", "tClient", "fClass", "vCount", "cClient", "tCondition", "TCondition", "TCase", "xCase", " tName", "tCount", "vCondition", "TClient"], "dic": [" dict", "dsict", "dice", "dicc", "Dic", "mdic", " dice", "dsic", "mdican", "Dict", "diac", "dIC", " dican", " diac", "dican", "dsicc", "mdiac", " dicc", "dsice", "Dice", "dict", " dIC", "mdIC", "Dicc"], "frase": ["frace", "trase", "fase", "brasing", "france", "drcase", "face", "Frcase", "drase", "frased", "Frased", "fraser", "brased", "Frase", "Frases", "trased", "brase", " frace", "fance", "drasing", "drases", " frased", "Fraser", "brance", "brases", " france", "fcase", "frasing", "traser", "trases", "frcase", "Frasing", " frasing", " fraser", "fases", "fasing", "brace"], "resul": ["resule", " resule", "psuli", "Resule", "presule", "Result", " resUL", "revult", "result", "Resuc", "psuc", "Resu", "resu", "resUL", "rsUL", "ResUL", "psul", "rsuc", "revUL", "rsul", "resuli", "rsu", "presuc", "resuc", "psUL", "presul", "rsult", "rsuli", "Resuli", "revul", "presUL", "revu", "Resul", " resuc"], "c": ["uc", "v", "cu", "dc", "xc", "x", "fc", "k", "usc", "unc", "code", "s", "ct", "cc", "ec", "d", "p", "u", "name", "count", "m", "bc", "ic", "nc", "r", "h", "z", "cb", "o", "a", "cf", "mc", "ac", "e", "y", "self", "cin", "l", "b", "ae", "t", "cy", "chain", "f", "C", "q", "lc", "cd", "w", "j", "ci", "n", "oc", "g", "col"], "frases": ["errases", " frances", "fase", "brasing", "erraces", "feased", "errase", "errasing", "frased", "feaces", "feases", " fraces", "Frase", "Frases", "brase", "fances", " frased", "fease", "fraces", "brases", "frasing", "Frasing", "brances", "Fraces", " frasing", "frances", "errased", "fases", "fasing"], "i": ["ip", "ie", "mini", "slice", "ni", "id", "it", "I", "h", "ix", "a", "e", "iii", "int", "b", "aci", "start", "pi", "ib", "n", "multi", "di", "ini", "idi", "cu", "ai", "gi", "io", "p", "name", "count", "m", "z", "key", "t", "udi", "im", "ani", "ij", "iu", "ice", "ii", "ui", "ti", "ci", "ia", "ei", "qi", "x", "init", "yi", "bi", "u", "zi", "ic", "counter", "cli", "y", "l", "eni", "ri", "f", "isi", "iq", "j", "si", "ih", "v", "ind", "phi", "ion", "d", "abi", "axis", "xi", "vi", "index", "li"]}}
{"code": " \n  \n  for i in range(int(input())):\n      n, m = tuple(map(int, input().split()))\n      l = dict(chain.from_iterable(map(lambda j: zip(zip([j] * m, range(m)), map(int, input().split())), range(n))))\n      ans = \"YES\"\n  \n      while len(l):\n          ly, lx = min(l, key=l.get)\n          lowest = l[(ly, lx)]\n  \n          if all(map(lambda j: l.get((ly, j), lowest) == lowest, range(m))):\n              for j in range(m):\n                  l.pop((ly, j), None)\n  \n          elif all(map(lambda j: l.get((j, lx), lowest) == lowest, range(n))):\n              for j in range(n):\n                  l.pop((j, lx), None)\n  \n          else:\n              ans = \"NO\"\n              break\n  \n      print(\"Case #{}: {}\".format(i + 1, ans))\n", "substitutes": {"i": ["ini", "ip", "bis", "ie", "qi", "ind", "mini", "slice", "hi", "c", "jit", "ni", "k", "phi", "ai", "id", "yi", "ji", "chi", "gi", "I", "bi", "io", "p", "u", "uli", "zi", "mi", "h", "ix", "z", "cli", "info", "y", "int", "ri", "f", "im", "ij", "iu", "iq", "lo", "xi", "uri", "pi", "q", "ii", "ik", "ui", "ti", "index", "si", "ci", "li", "multi", "v"], "n": ["N", "x", "c", "k", "range", "s", "one", "an", "d", "p", "u", "name", "nb", "ln", "cm", "h", "r", "z", "no", "nc", "o", "size", "e", "y", "a", "b", "t", "ns", "len", "en", "f", "net", "on", "li", "un", "el", "nm", "w", "none", "num", "sn", "M", "min", "nan", "g", "v"], "m": ["dm", "fm", "mn", "mini", "N", "x", "c", "k", "range", "am", "s", "d", "mm", "p", "u", "mi", "gm", "cm", "h", "r", "z", "o", "size", "e", "y", "ms", "mc", "a", "int", "b", "sm", "md", "t", "len", "en", "om", "machine", "f", "im", "module", "li", "q", "model", "ym", "nm", "w", "num", "M", "min", "dim", "g", "multi", "v", "mu"], "l": ["le", "ln", "lf", "lr", "e", "ell", "b", "lis", "li", "la", "k", "loc", "ql", "p", "lin", " L", "r", "z", "o", "t", "line", "yl", "lov", "acl", "los", "el", "sl", "lock", "left", "bl", "iol", "rl", "jl", "kl", "c", "lb", "ol", "s", "ll", "u", "fl", "cli", "pl", "f", "lo", "gl", "ml", "lc", "al", "like", "lu", "cl", "log", "ler", "il", "v", "nl", "lic", "ls", "d", "shell", "L", "ul", "url", "coll", "len", "list", "wl", "lp", "dl", "g"], "j": ["ie", "jo", "jet", "bj", "le", "_", "gn", "h", "jam", "ix", "e", "b", "jj", "on", "ot", "jp", "li", "un", "er", "adj", "jing", "la", "uj", "ja", "jit", "k", "ji", "jon", "br", "p", "py", "r", "z", "jen", "o", "key", "em", "ne", "im", "ij", "el", "obj", "w", "ii", "oj", "zy", "ali", "ci", "bl", "ch", "jl", "qi", "job", "x", "c", "ge", "ll", "aj", "u", "fl", "y", "lex", "f", "lo", "ny", "js", "J", "lu", "pr", "syn", "si", "je", "v", "ind", "vol", "ion", "jin", "d", "ul", "kj", "fr", "q", "jan", "dj", "ik", "so", "jc", "g"], "ans": [" sins", "ana", "anks", "aces", "anc", "leans", "lan", "eps", " scans", "s", "annels", "ls", "an", "gan", "rans", " means", " Ans", "aos", "anon", "ins", "asin", "ang", "yes", "cons", "ens", "An", "cs", "ane", "ces", "sex", "ams", "ars", "anas", "ians", "cus", "Ann", "ns", "ads", "ase", "na", "ani", "ANS", "ras", "aus", "san", "nas", "anes", "ds", "ays", "ares", "any", "ks", "lang", "nn", "os", "ann", "ats", "urs", "atan", "plan", "scan", "asm", "ants", "can", "aned", "cas", "ents", "ons", "ases", "AN"], "ly": ["jl", "la", "gy", "sy", "ja", "jo", "loc", "ls", "yi", "ll", "ji", "little", "ey", "le", "lin", "p", "ln", "fl", "lf", "py", "z", "lly", "illy", "y", "key", "ell", "pl", "sol", "ld", "lie", "cy", "lex", "hip", "fr", "lo", "ply", "jp", "fi", "ny", "Ly", "lv", "el", "ley", "lc", "lem", "dl", "like", "lu", "ii", "sn", "ky", "zy", "syn", "si", "ci", "yll", "ry", "je", "li"], "lx": ["ilX", "lb", "flx", "Lz", "lw", "elw", "ilx", "llxc", " lb", " lw", "llz", "elx", "llx", "lly", "slx", "slj", "elz", "lX", "ily", "llX", "Lxc", "ely", " lz", "slz", " lX", "Ly", "lz", " lxc", "flw", "flz", "lj", "Lx", "ilj", "lxc", " lj", "fly", "ilb", "slb", "ilz"], "lowest": [" lowast", "lowested", "supphest", "longest", "greatested", "longear", "littleense", "poorend", " lowear", "suppense", "smallend", "littleear", "loest", "longx", "greatear", " lowtest", "Lowast", "littleest", "greatest", "suppested", "loEST", " lowbest", "lowast", "lowEST", "loast", "highest", "poortest", "lohest", " lowested", "lowtest", "smalltest", "smallest", "longested", "LowEST", "lowense", " lowense", "greatx", "lowear", "suppear", "lowbest", " lowx", "highested", "highbest", "lowx", "Lowest", "poorest", "suppest", " lowhest", "highhest", "lowhest", "Lowhest", "suppbest", " lowend", " lowEST", "lowend", "littleested"]}}
{"code": "for case in range(int(input())):\n      a, b = tuple(map(int, input().split()))\n      result = 0\n      ast, bst = str(a), str(b)\n      for x in range(a, b + 1):\n          xst = str(x)\n          added = list()\n          for j in range(len(xst)):\n              xstr = xst[j:] + xst[:j]\n              if xstr < ast or xstr > bst:\n                  continue\n              elif xst < xstr and xstr not in added:\n                  added.append(xstr)\n                  result += 1\n      print(\"Case #{}: {}\".format(case + 1, result))\n", "substitutes": {"case": ["uc", "sequence", "client", "slice", "xc", "rest", "end", "c", "Case", "code", "loc", "me", "catch", "bug", "use", "ace", "word", "section", "length", "seq", "name", "count", "switch", "chance", "bc", "ix", "change", "abc", "ase", " CASE", "cases", "charge", "core", "ise", "future", "line", "error", "race", "match", "order", "ice", "val", "trial", "pair", "time", "instance", "X", "ance", "test", "choice", "position", "phase", "rice", "ce", "ch", "fold"], "a": ["sta", "la", "ak", "ma", "c", "ab", "af", "am", "ai", "an", "d", "aj", "p", "u", "aa", "m", "r", "ah", "at", "ac", "y", "sa", "da", "e", "area", "va", "l", "ae", "ad", "art", "asa", "ama", "f", "i", "A", "alpha", "ba", "ach", "ar", "array", "w", "ca", "au", "n", "aw"], "b": ["be", "bis", "bound", "end", "bone", "c", "ab", "lb", "k", "s", "bug", "beta", "d", "bi", "body", "p", "u", "nb", "pb", "m", "bf", "r", "fb", "cb", "o", "e", "y", "db", "boot", "bas", "l", "t", "rb", "ben", "bin", "bb", "f", "abb", "i", "ob", "sb", "ba", "bd", "eb", "bs", "iter", "w", "mb", "other", "ib", "B", "bu", "n", "bl", "g", "v", "xb"], "result": ["status", "rest", "end", "response", "success", "final", "range", "ver", "done", "message", "Result", "code", "mate", "our", "length", "step", "count", "page", "cache", "event", "number", "cup", "date", "compl", "counter", "r", "current", "res", "change", "future", "error", "answer", "f", "now", "race", "row", "match", "order", "results", "runner", "new", "mer", "diff", "score", "array", "found", "trial", "num", "feature", "cur", "test", "valid", "ret", "append", "default", "err", "grade"], "ast": ["lab", "id", "aster", "_", " X", "cest", " ax", "at", "past", "ad", " code", "ax", " sax", "ot", " feat", " ff", "sc", "est", "Ast", "am", " Ax", " w", " orig", "abc", "ac", "cast", "t", " string", " cx", " xp", " Ast", "bl", " st", "xa", "rest", "ab", "asts", "ust", "anch", "xp", " xx", "dist", " ex", "al", " rest", "ost", "adapt", " s", "access", " A", "ord", "ma", "xt", "mast", "st", " t", "ist", "act", " p", "na", "blast", "gest", "xi", " y", "val", "AST", "test", "xb"], "bst": [" bsc", "Bst", " bsts", "bsts", "xsts", " bST", "Bsts", "bST", "fsc", "bstr", "lbST", "bSt", "xsc", "lbsc", "lbSt", "Bsc", "fST", "Bstr", "fSt", "bsc", " bstr", "lbst", "fst", " bSt"], "x": ["host", "xc", "xa", "c", "ox", "code", "xy", "xes", "bug", "ace", "example", "section", "xxxx", "p", "u", "rx", "event", "h", "ix", "z", "work", "exp", "abc", "change", "sex", "y", "xp", "nex", "dx", "mix", "t", "fix", "base", "xe", "lex", "f", "ax", "cross", "xi", "array", "xxx", "string", "w", "xx", "content", "rex", "X", "index", "test", "wx", "xs", "xml", "n", "ex", "config", "tx", "v", "xb"], "xst": ["exST", "exsts", "yST", "ysts", "xxstd", "xsts", "extest", "xtest", "yst", "xct", "crossst", " xstri", "exct", "fxstri", "xstd", "xbr", "fxtest", "crossbr", "crossST", "xstri", " xtest", " xstd", " xST", "exstri", "exbr", "xxct", " xct", "xxstr", "fxstr", "xxst", "crossstr", "xxsts", "fxst", "exstd", " xbr", "exst", "ystr", "exstr", " xsts", "xxST", "xST"], "added": ["confirmed", "add", "news", "dd", "updated", "edited", "anged", "expected", " moved", "acked", "done", "fixed", "aled", "allowed", "bad", "worked", "broken", "ed", "ended", " Added", "pped", "started", "extra", "alled", " skipped", "graded", "finished", "ashed", "oved", "modified", "sent", "played", "posted", "said", "ad", "packed", "joined", "anded", "ated", "ans", "ored", "aired", "adding", "used", " failed", "ordered", "failed", "new", " changed", "opened", "cluded", "found", "created", "needed", "handled", "aned", "placed", "changed", "ined", "lost", "paid", "Added"], "j": ["uj", " f", "ie", "ja", "ind", "end", "job", "c", "k", "jo", "col", "ji", "part", "d", " w", "section", "pos", "step", "br", "p", " dj", "u", " ax", " obj", "r", "z", "ix", "h", "o", "e", "y", " day", "key", " xx", " job", "l", "t", "int", "jj", "f", " je", "i", "jump", " z", "ij", "kj", "start", "xi", " jo", "ice", "jp", "g", "q", "li", "obj", " jump", "J", "ii", " point", "index", "adj", " ii", "n", "je", " J", "v"], "xstr": ["xest", "xxint", "xxbr", "xsts", "yst", " xstri", "exstring", "xstring", "xdr", "fxstri", "Xstri", "xbr", "Xsts", " xest", "xxarr", " xstring", "Xcr", " xint", "xcr", "xstri", " xcr", "exstri", "Xstr", "Xst", "lexbr", "lexsts", "Xint", "fxstr", "wxstri", "xxstr", "xxst", " xarr", "xstream", "exdr", " xdr", "xxstring", "ystri", "Xarr", "fxst", "xarr", "xxdr", "wxst", "wxstream", "Xbr", "xxest", " xbr", "exst", "ycr", "wxstr", "ystr", "exstream", "exstr", "fxstream", "Xest", "xint", "lexstr", " xsts", "lexst"]}}
{"code": "def read_case():\n  \n      answer = int(input())\n      lines = tuple(map(lambda _: set(str.split(input())), range(4)))\n      return lines[answer - 1]\n  \n  \n  for i in range(int(input())):\n  \n      intersection = read_case() & read_case()\n      count = len(intersection)\n      if count == 1:\n  \n          answer = intersection.pop()\n  \n      elif count > 1:\n  \n          answer = \"Bad magician!\"\n  \n      elif count < 1:\n  \n          answer = \"Volunteer cheated!\"\n  \n      print(str.format(\"Case #{}: {}\", i + 1, answer))\n", "substitutes": {"answer": ["nr", "field", "text", "id", "code", "example", "ee", "ix", "size", "e", "ell", "area", "int", "next", "ae", "version", "now", "format", "main", "output", "evidence", "num", "duration", "min", "n", "support", "string", "grade", "issue", "ace", "length", "name", "inter", "lead", "episode", "margin", "une", "Answer", "line", "error", "description", "cash", "empty", "say", "year", "reason", "amount", "avoid", "account", "err", "activity", "see", "comment", "value", "x", "average", "word", "section", "username", "page", "expression", "y", "en", "eni", "question", "f", "offer", "array", "age", "content", "answered", " answers", "fill", "align", "span", "after", "response", "message", "again", "result", "reply", "respond", "cover", "number", " answered", "edge", "offset", "element", "fix", "len", "audio", "order", "energy", "blank", "score", "archive", "index", "test", "address"], "lines": ["notes", "letters", "data", "ips", "eps", "text", "posts", "items", "ines", "ints", "rows", "ins", "runs", "values", "files", "models", "cases", "lists", "states", "cells", "words", "pages", "sections", "comments", "types", "line", "faces", "reads", "errors", "points", "results", "details", "objects", "rules", "parts", "breaks", "frames", " Lines", "blocks", "cycles", "feed", "groups", "changes", "strings", "codes", "elines", "ids"], "i": ["ini", "ip", "ie", "slice", "ind", "end", "c", "x", "item", "field", "k", "id", "ai", "it", "d", "I", "p", "u", "page", "h", "r", "ix", "z", "info", "counter", "a", "e", "y", "key", "int", "eni", "start", "f", "gu", " I", "iq", "uri", "pi", " j", "ii", "j", "ib", "pri", "ti", "instance", "index", "ci", "n", "li", "multi"], "intersection": ["intsector", "intsection", "presection", "interection", " interection", " interdivision", " intersector", "intersections", "Intersections", "presect", "Intersect", "intdivision", "INTERsection", "intsections", "intsect", " intersect", "INTERsect", "interdivision", "presector", "Intersector", "Interdivision", "Interection", "INTERsector", "presections", "intersector", "INTERsections", "intersect", " intersections", "intection", "Intersection"], "count": ["span", "ind", "level", "c", "more", "allow", "id", "code", "every", "catch", "body", "part", "parent", "div", "length", "Count", "cache", "p", "sum", "handle", "case", "name", "find", "group", "number", "connection", "current", "call", "counter", "size", "all", "weight", "coll", "offset", "key", "area", "limit", "low", "int", "next", "check", "len", "depth", "base", "list", "child", "force", "start", "now", "f", "match", "empty", "label", "filter", "array", "found", "missing", "left", "content", "time", "year", "type", "state", "test", "index", "second", "support", "amount", "err"]}}
{"code": " \n  \n  def optimal_war_step(blocks, value):\n  \n      win_blocks = set(filter(lambda block: block > value, blocks))\n      blocks.discard(min(win_blocks if win_blocks else blocks))\n      return bool(win_blocks)\n  \n  \n  def deceitful_war(ken, naomi, epsilon = 10 ** (-6)):\n  \n      while ken:\n  \n          min_ken = min(ken)\n          max_ken = max(ken)\n          min_naomi = min(naomi)\n  \n          if min_ken > min_naomi and any(map(lambda bs: operator.lt(*bs), zip(sorted(naomi), sorted(ken)))):\n  \n              yield max_ken - epsilon\n  \n          else:\n  \n              yield 1.0 - epsilon\n  \n          naomi.discard(min_naomi)\n  \n  \n  for i in range(int(input())):\n  \n      input()\n      naomi = set(map(float, str.split(input())))\n      ken = set(map(float, str.split(input())))\n  \n      dwar_ken = ken.copy()\n      dwar_naomi = naomi.copy()\n      dwar = collections.Counter(map(functools.partial(optimal_war_step, dwar_ken), deceitful_war(dwar_ken, dwar_naomi)))\n      war = collections.Counter(map(functools.partial(optimal_war_step, ken), naomi))\n      print(str.format(\"Case #{}: {} {}\", i + 1, dwar[False], war[False]))\n", "substitutes": {"blocks": ["units", "locks", "pieces", "works", "block", "items", "Blocks", "builders", "rows", "ins", "chains", "views", "workers", "flows", "bc", "runs", "values", "modules", "images", "files", "args", "outs", "ools", "lists", "cells", "words", "pages", "sections", "rings", "names", "types", "limits", "errors", "breakers", "maps", "books", "plugins", "results", "members", "children", "ks", "rules", "boxes", "objects", "levels", "breaks", "checks", "win", "bs", "frames", "cycles", "groups", "keys", "heads", "bits", "bars", "packs", "banks", "steps", "windows", "jobs"], "value": ["timeout", "function", "fee", "data", "right", "flow", "end", "wave", "view", "block", "range", "width", "each", "example", "wall", "length", "join", "name", "off", "wa", "number", "window", "expression", "values", "root", "work", "size", "key", "element", "hello", "image", "we", "Value", "anything", "foo", "VALUE", "output", "widget", " values", "val", "write", "volume", "max", "none", "w", "content", "num", "feature", "min", "index", "node", "default", "wise", "v", "native"], "win_blocks": ["win_steps", "win_levels", " winallplugins", "winning_pieces", "winning_blocks", "winnetbs", "win_plugins", "winning_bs", " win_errors", "win_block", "winallblock", "win_pieces", "winallblocks", "winallerrors", "bin_blocks", "win67blocks", "chain_block", "win67rules", " winallblocks", " win_block", "chain_rules", "win_units", "winableblocks", "winning_units", " winallblock", "winnetpieces", "chain67blocks", "winnetblocks", "chain67steps", "chain_blocks", "win_errors", "win_rules", " win_plugins", "winableerrors", "winnetunits", "winableblock", " winallerrors", "chain67rules", "bin_levels", "bin_block", "win_bs", "win67block", "chain_steps", "chain67block", "winallplugins", "bin_bs", "winableplugins", "win67steps"], "ken": ["breaker", "king", "flow", "qa", "partial", "af", "jo", "hen", "ki", "note", "ee", "wake", "broken", "keeper", "ir", "kn", "aka", "fen", "bas", "int", "bin", "nir", "unin", "kee", "kai", "uri", "wk", "iter", "kk", "aw", "nan", "die", "la", "ner", "maker", "block", "ke", "loc", "ker", "unit", "walker", "dest", "da", "non", "nor", "zen", "ne", "ko", "bb", "won", "walk", "el", "gen", "reason", "tan", "kens", "bl", "han", "bel", "fee", "kun", "enn", "iri", "chi", "ka", "bc", "kel", "token", "ah", "self", "sin", "wal", "kan", "eni", "en", "sha", "yer", "inner", "nn", "knife", "burn", "aken", "kin", "central", "oc", "wan", "gan", "kie", "shield", "torn", "dan", " block", "nin", "thin", "kat", "nt", "frame", "ski", "ok", "na", "rake", "KEN", "ku", "nil", "win", "blank", "make", "inn", "ork", "kid"], "naomi": ["kaaru", " naoki", "naori", " NAomo", "neoki", " naaru", "naoki", "saoma", "daomi", " NAoma", "taoru", "nanaru", "saomo", "nanori", "nanobi", "kaomi", " NAaji", "taomi", "anaoma", "unaomo", "anaomo", " naoru", "waoki", "nanoma", "nanoki", " naomo", "kaoki", "naobi", "anaori", "daoki", "daaji", "waomo", "saoki", "nanoko", " NAomi", "naomo", "taoki", "waaji", "unaoko", "unaobi", "taomo", "neomi", "neobi", "saaji", "waobi", "naaji", "anaoki", "unaoru", "naoma", "nanomo", "nanomi", " naaji", "daomo", "anaomi", "unaoki", "kaobi", "waoma", "naoko", "naoru", " naobi", "waomi", " naoma", "unaomi", "anaobi", "unaori", "saomi", "neoru", "anaoko", "saoru", "naaru"], "epsilon": ["epeltond", "epeltony", "epilony", "epssilon", " epsilron", "EPsilone", "epicololon", "epritron", "epicolond", "epritony", "epsicolony", "epsilond", "EPilloned", "epsiloned", "epilron", "epillond", "epsilons", "epsicololon", "epriton", "EPillon", "epralond", "epsicolon", "epritond", "epelton", "epritoned", "epeltone", "epillony", "EPsilon", " epeltony", "epsilolon", "epritone", "epritons", "epssilony", "epilon", "epeltons", " epelton", "epicolony", "epilond", "epsicolond", "epralony", "EPsilons", "epssilond", "epralolon", "epeltoned", "EPillons", "epillon", " epeltond", "epeltron", "epicolon", "epssilolon", " epeltron", "epralon", "epillolon", "EPsiloned", "EPillone", "epilloned", "epsilony", " epsilond", "epsilone", "epillone", "epillons", "epsilron", " epsilony"], "min_ken": ["minRken", " max___ken", "min_kn", " max_ka", "min___ke", " max___ke", " min_broken", "min___ka", "min_ka", "min00kn", " max___ka", "min00broken", " max_ke", "min___kn", "min00ken", " max___kn", "min_broken", "minRke", "min_ke", "min00kin", " min_kin", "minRkn", "min___ken", " min_kn", " max_kn", "minRka", "min_kin"], "max_ken": ["min_kn", "min_block", "max_tan", "maxJlin", "max_kn", "maxJtan", "MAXJkn", "MAX_tan", "maxOfken", "MAX_lin", "maxOfkin", "max_kin", "MAXJlin", "max_lin", "MAXJtan", "maxOfblock", "maxJken", "max_block", "maxJkn", "MAXJken", "MAX_kn", "MAX_ken", "maxOfkn", "min_kin"], "min_naomi": ["min_naov", "min_nanqi", "min_laobi", "min_nanoma", "min_waomi", "min_naomo", "min_naoma", "min_naobi", "min_nanoshi", "min_laqi", "min_nanomo", "min_kaogi", "min_naqi", "min_niomo", "min_waobi", "min_kaomi", "min_nanogi", "min_jaomi", "min_nioshi", "min_laogi", "min_naoshi", "min_laoma", "min_nanobi", "min_kaobi", "min_niomi", "min_jaogi", "min_nanov", "min_laov", "min_jaoma", "min_waoshi", "min_niobi", "min_laomi", "min_jaqi", "min_nanomi", "min_kaov", "min_waomo", "min_naogi"], "i": ["ini", "ip", "ie", "hi", "ind", "qi", "x", "c", "ni", "k", "phi", "reci", "ai", "id", "it", "yi", "chi", "gi", "I", "bi", "vis", "p", "u", "zi", "mi", "hei", "h", "counter", "info", "ix", "z", "cli", "a", "y", "limit", "l", "int", "ri", "start", "iu", "xi", "uri", "ice", "pi", "ii", "j", "ui", "instance", "ti", "index", "si", "ci", "n", "li", "multi", "di"], "dwar_ken": ["dwarpleken", "dwar_ok", "dwarplekn", "dmar_kn", "dmarplenon", "dmarplekn", "dmar_kan", "dwar_non", "dpur_aken", "dmarpleken", "dwarplekan", "dwar_kn", "dwar_kan", "dpur_kn", "dpur_ken", "dmarplekan", "dwr_ok", "dwar_ker", "dmar_non", "dwr_kn", "dwr_ko", "dwr_ken", "dwar_ko", "dpur_ker", "dwarplenon", "dmar_ken", "dwar_aken"], "dwar_naomi": ["dwar_neori", "dwar_naemi", "dwar_neiti", "dwar_alphaoru", "dwar_alphaori", "dwar_alphaomi", "dwar_staiti", "dwar_anaqi", "dwardstaemi", "dwar_neomi", "dwar_naiti", "dwardnaiti", "dwar_staomi", "dwar_saoko", "dwardstaoko", "dwar_neoru", "dwar_anaomi", "dwardstaomi", "dwar_naqi", "dwardnaemi", "dwar_saomi", "dwar_neqi", "dwar_anaoru", "dwar_staemi", "dwardnaomi", "dwar_naoru", "dwar_saiti", "dwar_staoko", "dwar_anaori", "dwardnaoko", "dwar_naoko", "dwar_neoko", "dwardstaiti", "dwar_naori", "dwar_alphaqi", "dwar_saemi", "dwar_neemi"], "dwar": ["ddgar", "Dawar", "ldwarm", "dvar", "cdwar", "Dgar", "ddwar", "ddwarm", "cdapp", "sdapp", "sdgar", " dvar", "Dwarm", "Dwar", "dawar", "ddawar", " dapp", "sdvar", "dgar", "cdvar", "ldwar", "ldawar", "cdgar", "dwarm", "dapp", " dgar", "sdwar", "ldgar"], "war": ["air", "http", "warn", "rah", "wic", "ruby", "ror", "rou", "har", "wave", "warm", "our", "aver", "gar", "tar", "wa", "usr", "ir", "awar", "star", "rew", "r", "inter", "anger", "var", "change", "rum", "wy", "wal", "world", "way", "re", "ra", "nir", "na", "row", "wer", "rw", "WAR", "util", "were", "War", "ar", "mar", "par", "haw", "w", "time", "watch", "feature", "kin", "wr", "whatever", "web", "aw", "rice", "wan", "dam"]}}
{"code": "for i in range(int(input())):\n  \n      c, f, x = tuple(map(float, str.split(input())))\n  \n      base_time = 0.0\n      base_rate = 2.0\n      farms_count = 0\n      best_time = None\n  \n      current_time = base_time + x / (base_rate + farms_count * f)\n  \n      while best_time is None or best_time > current_time:\n  \n          best_time = current_time\n          base_time += c / (base_rate + farms_count * f)\n          farms_count += 1\n  \n          current_time = base_time + x / (base_rate + farms_count * f)\n  \n      print(str.format(\"Case #{}: {}\", i + 1, best_time))\n", "substitutes": {"i": ["ei", "hi", "ind", "qi", "field", "phi", "k", "id", "ai", "s", "chi", "gi", "I", "bi", "io", "p", "zi", "u", "abi", "info", "ix", "z", "cli", "a", "e", "y", "key", "uni", "int", "t", "ri", "start", "iu", "xi", "uri", "pi", "ii", "j", "ui", "instance", "ti", "type", "index", "si", "ci", "n", "li", "multi", "v", "di"], "c": ["cu", "dc", "xc", "con", "fc", "k", "s", "ct", "d", "cc", "p", "count", "u", "m", "cm", "nc", "r", "z", "h", "ch", "o", "size", "e", "y", "cf", "cs", "ac", "a", "l", "t", "b", "cy", "base", "C", "q", "lc", "max", "w", "time", "ci", "n", "circ", "v"], "f": ["fm", "conf", "flow", "fun", "frac", "field", "fc", "form", "af", "fore", "of", "tf", "df", "d", "p", "count", "u", "m", "rf", "bf", "h", "r", "z", "fb", "float", "fp", "e", "cf", "y", "fen", "frame", "l", "b", "t", "frequency", "fe", "xf", "fit", "force", "fx", "fr", "fa", "fs", "q", "sf", "al", "fac", "ef", "j", "time", "feed", "fold", "inf", "F", "file", "n", "g", "v", "fd"], "x": ["xc", "plus", "s", "xes", "width", "d", "p", "u", "rx", "number", "m", "ic", "h", "r", "z", "ix", "o", "size", "e", "y", "a", "es", "xp", "area", "l", "t", "b", "dx", "xf", "en", "up", "fast", "fx", "cross", "php", "ax", "pe", "alpha", "xi", "q", "max", "w", "xx", "time", "X", "inf", "index", "ext", "xs", "ci", "n", "ex", "g", "v"], "base_time": ["base5timer", "current_source", "base5time", " base___rate", "base_source", "base2time", "base2cost", "current_times", "base67rate", " base_wave", " base___year", "base___year", "base1time", "base2timer", "best_rate", "current_rate", "base_year", "best_size", "base_times", "base1size", "base_size", "base1rate", "current_cost", "base5rate", "base_wave", "base___time", "base_timer", "base_cost", " base_year", "base67source", "best_timer", " base___wave", "current_timer", "base67time", "base2times", "base1timer", "base___rate", "base5size", "base___wave", "base67times", " base___time"], "base_rate": ["base_speed", "base_rating", "ase_rate", "fixed_rate", "base__time", "ase_degree", "fixed_time", "base_loop", "fixed_rating", "best_rate", "core_time", "core_wave", "base_degree", "ase_rating", "base_wave", "base__grade", "best_speed", "ase_speed", "core_loop", "base__speed", "fixed_speed", "base_grade", "base__rate", "best_grade", "core_rate"], "farms_count": ["farmsetsize", "farmscccount", "farms_depth", "farms_rate", "farm_size", "farm_order", "farmsccdepth", "farming_counter", "farmsacdepth", "farmsaccount", "farm_length", "farms64rate", "farmsetcount", "farmsacorder", "farm_count", "farms_length", "farms_size", "farm_depth", "farms64count", "farmsetcounter", "farmsccorder", "farm_sum", "farming_count", "farmsetsum", "farms_counter", "farms_order", "farms_sum", "farm_Count", "farming_sum", "farm_rate", "farms_Count", "farms64sum", "farming_size", "farms64size"], "best_time": ["better_am", "best_times", "best___times", "better_date", "best___time", "best1times", "bestingtime", "bestingspeed", "better_size", "thisiantime", "bestingtimes", "best_size", "bestiancount", "thisiantimes", "best_Time", "best1time", "better_length", "best_memory", "best_length", "bestactimes", "this_times", "this_count", "best___size", "best1date", "thisianmoney", "this_money", "better_speed", "bestiantime", "best_am", "best_date", "bestingmemory", "thisiancount", "this_time", "better_memory", "better_times", "bestaccount", "best_speed", "better_Time", "bestiantimes", "best_count", "best1am", "best_money", "bestacmoney", "better_time", "bestianmoney", "bestactime"], "current_time": ["current67clock", "next_cycle", "current_home", "next_count", "current_count", "current67live", "best_times", "reported_depth", "current_times", "current_clock", "current_cycle", "current_depth", "next_time", "current64time", "reported_time", "reported_value", "current_value", "current_rate", "current_live", "next_type", "currentJhome", "current_length", "current67times", "currentmcycle", "current64cycle", "currentJrate", "currentJtime", "currentmtime", "current64count", "current_type", "current64type", " current_home", " current_type", "current67time", "reported_length", "best_clock", "currentmcount", "currentmtype", " current_rate", "best_live", "currentJtype"]}}
{"code": "def yoba(s, ch):\n      lines = [True] * 10\n      for i in range(4):\n          for j in range(4):\n              lines[j] = lines[j] and (s[i][j] in (ch, \"T\"))\n              lines[j + 4] = lines[j + 4] and (s[j][i] in (ch, \"T\"))\n          lines[8] = lines[8] and (s[i][i] in (ch, \"T\"))\n          lines[9] = lines[9] and (s[3 - i][i] in (ch, \"T\"))\n      return any(lines)\n  \n  for i in range(int(input())):\n      s = tuple(map(lambda _: input(), range(4)))\n  \n      if yoba(s, \"X\"):\n          ans = \"X won\"\n      elif yoba(s, \"O\"):\n          ans = \"O won\"\n      elif \".\" not in \"\".join(s):\n          ans = \"Draw\"\n      else:\n          ans = \"Game has not completed\"\n  \n      input()\n      print(\"Case #{}: {}\".format(i + 1, ans))\n", "substitutes": {"s": ["input", "services", "sets", "charges", "h", "a", "e", "cs", "b", "sections", "sing", "styles", "parts", "shows", "xs", "n", "sc", "string", "features", "letters", "su", "sync", "k", "south", "p", "opens", "m", "r", "z", "less", "o", "args", "sv", "t", "types", "line", "sb", "spec", "ks", "sf", "say", "w", "sl", "ges", "se", "orders", "c", "ssl", "ins", "sh", "u", "sq", "sin", "y", "l", "ns", "cells", "ses", "f", "ds", "S", "ws", "si", "v", "sys", "ls", "d", "powers", "sites", "sts", "sg", "space", "os", "gs", "strings", "ps", "sk", "g"], "ch": ["v", "chan", "che", "ie", "conf", "form", "c", "cel", "x", "k", "cand", "zh", "chart", "code", "col", " cs", "chi", "d", "cha", "ches", "sh", "u", "p", "case", "th", "char", "m", "sch", "ic", "h", "r", "z", "sky", "cht", "cs", "o", "y", "e", "a", "com", "l", "b", "cells", "Ch", "cy", "f", "cher", "cho", "q", "ach", "el", "cell", "CH", "w", "cl", "ich", "cp", " Ch", "ci", "n", "sk", "g", "sea"], "lines": ["locks", "dates", "pos", "charges", "ln", "files", "e", "cs", "lins", "cases", "b", "styles", "points", "boxes", "shows", "frames", "xs", "n", "steps", "letters", "works", "les", "ines", "verts", "rows", "p", "lin", "flows", "runs", "z", "states", "pages", "line", "plugins", "ends", "ks", "objects", "los", "rules", "photos", "groups", "heads", "ges", "ids", "inline", "notes", "orders", "c", "posts", "ins", "links", "models", "lists", "l", "cells", "faces", "limits", "f", "results", "planes", "js", "blocks", "log", "phones", "ides", "els", "bands", "ips", "items", "ls", "images", "sites", "vals", "forms", "errors", "books", "breaks", "lights", "lined", "strings", "codes", "holes", "elines"], "i": ["ip", "ie", "mini", "slice", "ni", "id", "it", "ki", "I", "pos", "oi", "h", "ix", "a", "e", "b", "int", "uri", "li", "pi", "n", "multi", "di", "ini", "k", "ai", "ji", "gi", "io", "p", "name", "m", "z", "o", "esi", "t", "udi", "line", "im", "iu", "w", "ii", "ui", "ti", "ci", "ei", "hi", "qi", "x", "c", "yi", "chi", "bi", "u", "zi", "ic", "cli", "y", "l", "eni", "f", "lc", "type", "si", "v", "ind", "phi", "d", "ski", "xi", "q", "vi", "ori", "index", "g"], "j": ["ip", "ie", "jo", "id", "it", "jet", "I", "bj", "oi", "h", "ix", "a", "e", "b", "jj", "jp", "li", "n", "uj", "ja", "k", "ji", "jon", "br", "p", "m", "r", "z", "o", "all", "key", "ij", "obj", "ii", " l", "oj", "jl", "x", "c", "aj", "u", "y", "l", "f", "js", "J", "si", "je", "v", "ind", "d", "q", "jan", "index", "jc", "g"], "ans": ["amps", "anus", "ags", "span", "anse", "aces", "anks", "anc", "leans", "ana", "lan", "eps", "aid", "helps", "ai", "ls", "ines", "an", " means", "aos", " Ans", "ins", "ania", "ang", "ens", "cons", "ln", "An", "angs", "ros", "cs", "ane", "ces", "ars", "ams", "anas", "es", "cus", "ns", "ads", "ean", "na", "inas", "ani", "ANS", "ras", "aus", "arts", "san", "ks", "nas", "ays", "lang", "anes", "ds", "sk", "os", "ann", "ats", "atan", "aning", "eds", "urs", "ants", "can", "aned", "ents", "plan", "cas", "ons", "AN"]}}
{"code": " \n  \n  '''\n  ...\n  ...\n  ...\n  ...\n  ...\n  '''\n  \n  for i in range(int(input())):\n  \n      r, c, m = tuple(map(int, str.split(input())))\n      count = r * c - m\n      field = dict(map(lambda c: (c, \"*\"), itertools.product(range(c), range(r))))\n      answer = \"Impossible\"\n  \n      if m == 0:\n  \n          answer = field\n  \n      elif 1 in (r, c):\n  \n          for p in itertools.islice(itertools.product(range(c), range(r)), count):\n  \n              field[p] = \".\"\n  \n          answer = field\n  \n      elif count in (0, 2, 3, 5, 7):\n  \n          pass\n  \n      elif count == 1:\n  \n          answer = field\n  \n      elif count // 2 < c or count == c * 2 + 1:\n  \n          if count % 2 != 0:\n  \n              tail = 3\n              ncount = count - 3\n  \n          else:\n  \n              tail = 0\n              ncount = count\n  \n          for x in range(ncount // 2):\n  \n              field[(x, 0)] = field[(x, 1)] = \".\"\n  \n          for x in range(tail):\n  \n              field[(x, 2)] = \".\"\n  \n          answer = field\n  \n      elif not (c == 2 and count % c == 1):\n  \n          for x in range(c):\n  \n              field[(x, 0)] = field[(x, 1)] = \".\"\n  \n          count -= 2 * c\n          tail = 0\n          if count % c == 1:\n  \n              tail = 2\n              count -= 1\n  \n          y = 2\n          while count > 0:\n  \n              rx = min(count, c)\n              for x in range(rx):\n  \n                  field[(x, y)] = \".\"\n  \n              count -= rx\n              y += 1\n  \n          for x in range(tail):\n  \n              field[(x, y)] = \".\"\n  \n          answer = field\n  \n      field[(0, 0)] = \"c\"\n      print(str.format(\"Case #{}:\", i + 1))\n      if isinstance(answer, dict):\n  \n          for y in range(r):\n  \n              print(str.join(\"\", map(lambda x: field[(x, y)], range(c))))\n  \n      else:\n  \n          print(answer)\n", "substitutes": {"i": ["ei", "ini", "ip", "mini", "slice", "ind", "qi", "phi", "id", "ai", "col", "it", "chi", "gi", "I", "bi", "u", "zi", "case", "mi", "py", "info", "ix", "z", "e", "int", "b", "t", "eni", "ri", "start", "f", "im", "iu", "iq", "xi", "uri", "ice", "pi", "ii", "j", "ib", "ui", "ti", "type", "index", "si", "ci", "n", "li", "multi", "v", "di"], "r": ["nr", "rec", "sr", "right", "ru", "k", "range", "pc", "s", "rar", "d", "u", "ir", "rf", "lr", "h", "ro", "rg", "o", "a", "e", "cr", "l", "b", "t", "rb", "re", "rh", "ra", "rn", "radius", "R", "f", "rc", "fr", "mr", "rr", "rs", "q", "ar", "w", "er", "pr", "ur", "cur", "n", "g", "rl", "v"], "c": ["rec", "right", "con", "fc", "range", "pc", "code", "ct", "nc", "h", "cs", "e", "size", "cf", "a", "cr", "b", "arc", "C", "cycle", "cell", "num", "n", "sc", "cu", "k", "unc", "ec", "cache", "cm", "z", "o", "abc", "ac", "cn", "category", "mc", "t", "cd", "w", "ca", "ci", "ch", "xc", "s", "cat", "u", "ic", "l", "cy", "f", "rc", "lc", "max", "j", "oc", "ce", "v", "uc", "dc", "vc", "d", "cc", "call", "co", "coll", "q", "g", "col"], "m": ["fm", "span", "mini", "more", "con", "range", "am", "pc", "s", "d", "mm", "rm", "length", "u", "mi", "number", "cm", "mult", "h", "z", "co", "o", "pm", "e", "mc", "size", "cr", "l", "b", "t", "len", "member", "f", "C", "multiple", "order", "mr", "pi", "q", "mass", "j", "num", "M", "dim", "n", "g", "v"], "count": ["more", "con", "range", "id", "code", "ct", "bug", "ount", "part", "note", "Count", "h", "nc", "size", "e", "cf", "weight", "cr", "b", "int", "scroll", "C", "cycle", "lag", "num", "min", "full", "n", "support", "default", "conf", "sync", "flag", "allow", "loc", "length", "cache", "case", "name", "char", "cm", "extra", "only", "z", "all", "ac", "mc", "cast", "key", "base", "force", "error", "empty", "cd", "found", "w", "memory", "left", "year", "ch", "comment", "value", "div", "page", "current", "counter", "cond", "limit", "l", "child", "f", "cost", "egg", "process", "lc", "max", "age", "content", "log", "type", "v", "ind", "carry", "level", "status", "catch", "common", "parent", "cc", "d", "sum", "number", "call", "offset", "coll", "const", "nt", "null", "core", "check", "zip", "len", "depth", "list", "race", "multiple", "order", "match", "q", "score", "time", "index", "col"], "field": ["input", "long", "equ", "manager", "attr", "range", "id", "variable", "server", "FIELD", "source", "table", "cmp", "size", "e", "term", "pp", "member", "ield", "the", "link", "now", "C", "format", "output", "update", "diff", "cell", "file", "append", "string", "default", "over", "multi", "dd", "form", "fields", "flag", "block", "issue", "lib", "ground", "cache", "holder", "group", "only", "z", "all", "key", "line", "force", "row", "error", "label", "load", "custom", "map", "lock", "plugin", "seed", "play", "wire", "function", "client", "comment", "upp", "condition", "value", "rule", "layer", "word", "div", "pick", "page", "Field", "current", "change", "machine", "user", "child", "f", "box", "question", "gener", "player", "model", "post", "lc", "array", "folder", "type", "v", "fm", "data", "record", "end", "after", "attribute", "message", "document", "d", "result", "service", "cover", "number", "edge", "info", "url", "element", "back", "option", "null", "check", "fix", "len", "query", "list", "zip", "pattern", "match", "order", "object", "lp", "q", "entry", "man", "time", "index", "test"], "answer": ["equ", "range", "code", "example", "ee", "come", "source", "complex", "size", "term", "area", "ell", "install", "correct", "practice", "format", "main", "output", "evidence", "update", "eny", "eddy", "support", "string", "grade", "knowledge", "form", "issue", "fake", "ace", "cache", "name", "extra", "margin", "image", "une", "Answer", "error", "ani", "description", "metadata", "runner", "white", "orf", "entity", "write", "say", "memory", "err", "fee", "comment", "value", "average", "agree", "word", "replace", "expression", "token", "root", "eni", "question", "egg", "swers", "offer", "player", "post", "array", "content", " answers", "answered", "fill", "python", "arel", "software", "data", "after", "response", "attribute", "message", "video", "document", "parent", " answering", "result", "reply", "respond", " Answer", "side", "cover", "request", "number", " answered", "edge", " explanation", "option", "fix", "audio", "query", "order", "match", "object", "energy", "blank", "score", "archive", "address"], "p": ["v", "ip", "proc", "k", "pc", "id", "code", "pre", "pos", "P", "d", "parent", "u", "ph", "py", "h", "z", "pm", "a", "e", "get", "o", "fp", "param", "np", "pp", "b", "int", "t", "patch", "l", "bp", "list", "pn", "f", "include", "gu", "match", "pe", "prefix", "lp", "pi", "q", "post", "ach", "ar", "array", "like", "w", "pair", "j", "num", "cp", "go", "python", "n", "g", "col"], "tail": ["timeout", "long", "slice", "code", "it", "tc", "table", "nc", "size", "weight", "term", "b", "foot", "pull", "start", "roll", "output", "cycle", "run", "position", "n", "support", "sign", "sync", "tails", "loc", "length", "cache", "unit", "lead", "margin", "all", "t", "patch", "line", "collection", "row", "target", "w", "lock", "left", "comment", "condition", "local", "value", "width", "ll", "head", "tick", "thread", "root", "limit", "l", "tag", "child", "lex", "wrap", "lc", "ail", "sn", "batch", "type", "span", "ind", "end", "body", "result", "sum", "number", "call", "edge", "ul", "act", "offset", "coll", "nt", "zip", "len", "chain", "list", "wl", "match", "stop", "index", "test", "li", "col"], "ncount": ["lcoll", "nlength", "nnlength", "dcount", "llimit", "Ncount", "nlimit", "ltail", "zcount", "zlength", "nncount", "lcount", "lcall", "ntail", "llength", "ccount", "ncoll", "dtail", "dcoll", "Nlimit", "zcall", "clength", "ccall", "lsize", "ncall", "dlength", "nsize", "nncoll", " nlimit", " nsize", "nntail", "Nsize"], "x": ["plus", "id", "code", "one", "xes", "ct", "xxxx", "h", "nc", "ix", "work", "my", "e", "bit", "b", "int", "ux", "fx", "ax", "on", "num", "xs", "full", "n", "xml", "string", "host", "view", "k", "xy", "name", "case", "xxxxxxxx", "z", "o", "sex", "key", "ac", "ctx", "t", "xf", "xe", "line", "row", "ww", "pe", "ice", "el", "any", "w", "xx", "wx", "ync", "tx", "xc", "xa", "s", "word", "u", "ic", "px", "no", "self", "es", "xp", "pl", "l", "ay", "lex", "f", "cross", "model", "ach", "max", "sw", "xxx", "j", "content", "type", "python", "v", "search", "yx", "xt", "d", "ph", "co", "exp", "point", "check", "php", "xi", "q", "val", "time", "X", "ys", "index", "test", "ex", "g", "col", "xb"], "y": ["ies", "ip", "you", "id", "code", "_", "h", "my", "iny", "get", "e", "wy", "a", "size", "yy", "b", "dy", "yr", "n", "yo", "gy", "k", "xy", "ey", "name", "py", "ye", "z", "o", "key", "yd", "t", "iy", "yl", "ym", "oy", "w", "ii", "year", "zy", "ch", "sy", "out", "yi", "u", "yn", "Y", "ish", "l", "ty", "cy", "ay", "f", "ny", "vy", "j", "type", "python", "v", " Y", "d", "isy", "yt", "q", "ya", "ys", "ry", "col"], "rx": ["nr", "rec", "fc", "mx", "rss", "lr", "nc", "size", "cr", "rb", "queue", "ux", "pull", "R", "roll", "rr", "rs", "cro", "cycle", "dy", "run", "min", "n", "sync", "loc", "xxxxxxxx", "wrapper", "runs", "push", "abc", "ctx", "ra", "mr", "circ", "w", "wx", "rl", "tx", "width", "collect", "rf", "rd", "limit", "radius", "rh", "ri", "lex", "rc", "cross", "rw", "lc", "max", "sw", "yx", "request", "act", "co", "coll", "core", "rt", "poly", "X", "index", "test", "ry", "ex", "col"]}}
{"code": "for case in range(int(input())):\n      a, b = tuple(map(int, input().split()))\n      result = 0\n      ast, bst = str(a), str(b)\n      for x in range(a, b + 1):\n          xst = str(x)\n          added = list()\n          for j in range(len(xst)):\n              xstr = xst[j:] + xst[:j]\n              if xstr < ast or xstr > bst:\n                  continue\n              elif xst < xstr and xstr not in added:\n                  added.append(xstr)\n                  result += 1\n      print(\"Case #{}: {}\".format(case + 1, result))\n", "substitutes": {"case": ["uc", "sequence", "client", "slice", "xc", "rest", "end", "c", "Case", "code", "loc", "me", "catch", "bug", "use", "ace", "word", "section", "length", "seq", "name", "count", "switch", "chance", "bc", "ix", "change", "abc", "ase", " CASE", "cases", "charge", "core", "ise", "future", "line", "error", "race", "match", "order", "ice", "val", "trial", "pair", "time", "instance", "X", "ance", "test", "choice", "position", "phase", "rice", "ce", "ch", "fold"], "a": ["sta", "la", "ak", "ma", "c", "ab", "af", "am", "ai", "an", "d", "aj", "p", "u", "aa", "m", "r", "ah", "at", "ac", "y", "sa", "da", "e", "area", "va", "l", "ae", "ad", "art", "asa", "ama", "f", "i", "A", "alpha", "ba", "ach", "ar", "array", "w", "ca", "au", "n", "aw"], "b": ["be", "bis", "bound", "end", "bone", "c", "ab", "lb", "k", "s", "bug", "beta", "d", "bi", "body", "p", "u", "nb", "pb", "m", "bf", "r", "fb", "cb", "o", "e", "y", "db", "boot", "bas", "l", "t", "rb", "ben", "bin", "bb", "f", "abb", "i", "ob", "sb", "ba", "bd", "eb", "bs", "iter", "w", "mb", "other", "ib", "B", "bu", "n", "bl", "g", "v", "xb"], "result": ["status", "rest", "end", "response", "success", "final", "range", "ver", "done", "message", "Result", "code", "mate", "our", "length", "step", "count", "page", "cache", "event", "number", "cup", "date", "compl", "counter", "r", "current", "res", "change", "future", "error", "answer", "f", "now", "race", "row", "match", "order", "results", "runner", "new", "mer", "diff", "score", "array", "found", "trial", "num", "feature", "cur", "test", "valid", "ret", "append", "default", "err", "grade"], "ast": ["lab", "id", "aster", "_", " X", "cest", " ax", "at", "past", "ad", " code", "ax", " sax", "ot", " feat", " ff", "sc", "est", "Ast", "am", " Ax", " w", " orig", "abc", "ac", "cast", "t", " string", " cx", " xp", " Ast", "bl", " st", "xa", "rest", "ab", "asts", "ust", "anch", "xp", " xx", "dist", " ex", "al", " rest", "ost", "adapt", " s", "access", " A", "ord", "ma", "xt", "mast", "st", " t", "ist", "act", " p", "na", "blast", "gest", "xi", " y", "val", "AST", "test", "xb"], "bst": [" bsc", "Bst", " bsts", "bsts", "xsts", " bST", "Bsts", "bST", "fsc", "bstr", "lbST", "bSt", "xsc", "lbsc", "lbSt", "Bsc", "fST", "Bstr", "fSt", "bsc", " bstr", "lbst", "fst", " bSt"], "x": ["host", "xc", "xa", "c", "ox", "code", "xy", "xes", "bug", "ace", "example", "section", "xxxx", "p", "u", "rx", "event", "h", "ix", "z", "work", "exp", "abc", "change", "sex", "y", "xp", "nex", "dx", "mix", "t", "fix", "base", "xe", "lex", "f", "ax", "cross", "xi", "array", "xxx", "string", "w", "xx", "content", "rex", "X", "index", "test", "wx", "xs", "xml", "n", "ex", "config", "tx", "v", "xb"], "xst": ["exST", "exsts", "yST", "ysts", "xxstd", "xsts", "extest", "xtest", "yst", "xct", "crossst", " xstri", "exct", "fxstri", "xstd", "xbr", "fxtest", "crossbr", "crossST", "xstri", " xtest", " xstd", " xST", "exstri", "exbr", "xxct", " xct", "xxstr", "fxstr", "xxst", "crossstr", "xxsts", "fxst", "exstd", " xbr", "exst", "ystr", "exstr", " xsts", "xxST", "xST"], "added": ["confirmed", "add", "news", "dd", "updated", "edited", "anged", "expected", " moved", "acked", "done", "fixed", "aled", "allowed", "bad", "worked", "broken", "ed", "ended", " Added", "pped", "started", "extra", "alled", " skipped", "graded", "finished", "ashed", "oved", "modified", "sent", "played", "posted", "said", "ad", "packed", "joined", "anded", "ated", "ans", "ored", "aired", "adding", "used", " failed", "ordered", "failed", "new", " changed", "opened", "cluded", "found", "created", "needed", "handled", "aned", "placed", "changed", "ined", "lost", "paid", "Added"], "j": ["uj", " f", "ie", "ja", "ind", "end", "job", "c", "k", "jo", "col", "ji", "part", "d", " w", "section", "pos", "step", "br", "p", " dj", "u", " ax", " obj", "r", "z", "ix", "h", "o", "e", "y", " day", "key", " xx", " job", "l", "t", "int", "jj", "f", " je", "i", "jump", " z", "ij", "kj", "start", "xi", " jo", "ice", "jp", "g", "q", "li", "obj", " jump", "J", "ii", " point", "index", "adj", " ii", "n", "je", " J", "v"], "xstr": ["xest", "xxint", "xxbr", "xsts", "yst", " xstri", "exstring", "xstring", "xdr", "fxstri", "Xstri", "xbr", "Xsts", " xest", "xxarr", " xstring", "Xcr", " xint", "xcr", "xstri", " xcr", "exstri", "Xstr", "Xst", "lexbr", "lexsts", "Xint", "fxstr", "wxstri", "xxstr", "xxst", " xarr", "xstream", "exdr", " xdr", "xxstring", "ystri", "Xarr", "fxst", "xarr", "xxdr", "wxst", "wxstream", "Xbr", "xxest", " xbr", "exst", "ycr", "wxstr", "ystr", "exstream", "exstr", "fxstream", "Xest", "xint", "lexstr", " xsts", "lexst"]}}
{"code": "fileName = raw_input(\"File name: \")\n  f = open(fileName,\"r\")\n  \n  \n  n = int(f.readline()[:-1])\n  \n  def check_row(board, index):\n      row = board[index]\n      M = row[0]\n      index = 0\n      for i in range(len(row)):\n          num = row[i]\n          if(num > M):\n              M = num\n              index = i\n      for i in range(len(row)):\n          num = row[i]\n          if(num < M):\n              if not check_col(board,i,num):\n                  return False\n      return True\n  \n  \n  def check_col(board,index,number):\n      for i in range(len(board)):\n          if board[i][index] > number:\n              return False\n      return True\n  \n  def check_all(board):\n      for i in range(len(board)):\n          if not check_row(board, i):\n              return False\n      return True    \n   \n  outputFileName = raw_input(\"output file name: \")\n  of = open(outputFileName,\"w\")\n  \n  for i in range(n):\n      board = []\n      mn = f.readline()[:-1].split()\n      m = int(mn[0])\n      n = int(mn[1])\n      for j in range(m): \n          row = f.readline()[:-1].split()\n          row_lst = []\n          for s in row:\n              row_lst += [int(s)]\n          board += [row]\n      if check_all(board):\n          of.write( \"Case #%d: %s\n\" %(i+1, \"YES\"))\n      else:\n          of.write( \"Case #%d: %s\n\" %(i+1, \"NO\"))\n  \n  of.close()\n  f.close()\n  \n  \n      \n      \n  \n  \n      \n", "substitutes": {"fileName": ["FilePath", "fullPath", "FileNames", "filePath", "FileName", " filePath", "profileName", "fullname", "fullNames", "profilename", " filename", " fileNames", "filename", "Filename", "fileNames", "fullName", "profilePath"], "f": ["input", "ie", "flow", "af", "fc", "df", "lf", "h", "fp", "e", "fen", "cf", "b", "fx", "fed", "fs", "fi", "iter", "feed", "aff", "inf", "F", "full", "file", "http", "conf", "form", "loop", "lib", "io", "p", "bf", "r", "z", "tif", "o", "buff", "arf", "t", "fe", "fast", "found", "w", "fu", "function", "c", "fore", "fw", "tf", "u", "rf", "fb", "l", "flo", "fa", "folder", "fo", "v", "fd", "fm", "d", "fing", "um", "raf", "up", "fr", "q", "os", "g"], "n": ["network", "N", "ner", "nl", "c", "x", "ni", "k", "d", "name", "p", "u", "nb", "ln", "nc", "r", "z", "o", "size", "cn", "y", "fn", "nt", "ns", "l", "b", "t", "np", "ok", "len", "en", "nor", "ne", "dn", "net", "nu", "un", "nm", "nn", "node", "w", "sn", "v"], "board": ["input", "flow", "code", "one", "dom", "bug", "bar", "table", "layout", "clean", "foot", "stroke", "round", "du", "cell", "none", "feed", "node", "sc", "la", "home", "form", "loop", "view", "sync", "block", "k", "wall", "length", "boards", "p", "card", "ack", "case", "group", "auto", "ward", "o", "way", "image", "game", "base", "line", "ko", "rank", "deck", "ga", "custom", "room", "ui", "control", "ck", "bl", "comment", "c", "Board", "boarding", "head", "word", "buffer", "off", "ro", "channel", "team", "draw", "flo", "box", "cross", "model", "lc", "batch", "lane", "bo", "uc", "sequence", "hole", "design", "data", "phone", "che", "square", "ow", "down", "d", "cart", "co", "ban", "coll", "back", "frame", "null", "check", "core", "list", "object", "rock", "entry", "menu", "go", "col"], "index": ["input", "slice", "ni", "id", "ng", "pos", "I", "note", "nb", "inc", "ln", "ix", "size", "e", "weight", "location", "int", "start", "prefix", "Number", "uri", "update", "path", "iter", "min", "position", "node", "multi", "di", "ini", "form", "loop", "ai", "loc", "length", "name", "find", "count", "mi", "unit", "o", "key", "mis", "image", "original", "line", "ne", "im", "label", "temp", "ii", "NUM", "ui", " increment", "ci", "qi", "begin", "condition", "x", "c", "value", "init", "bi", "word", "head", "u", "page", " numbering", " iteration", "y", "uni", "eni", "inner", " Index", "nn", "xxx", "Index", "instance", "type", "umber", "si", "fill", "search", "data", "ind", "end", "ion", "initial", " it", "result", " numeric", "um", "column", "info", "offset", "len", " sequence", "list", "active", "office", "object", "xi", " position", "inn", "address", "li"], "row": ["flow", "item", "range", "id", "one", "month", "bug", "server", "tr", "e", "roll", "round", "du", "cell", "kk", "none", "feed", "run", "wheel", "node", "sc", "string", "la", "form", "loop", "view", "sync", "block", "k", "rows", "length", "uu", "ack", "group", "p", "case", "r", "ward", "o", "all", "key", "image", "game", "line", "ko", "rank", "pe", "mod", "w", "grid", "rect", "comment", "x", "c", "word", "head", "raw", "page", "hub", "fl", "ro", "draw", "user", "box", "rc", "post", "model", "array", "nn", "sw", "batch", "instance", "bo", "uc", "data", "ow", "record", "sum", "um", "co", "coll", "frame", "check", "ok", "list", "up", "order", "object", "rock", "ride", "entry", "Row", "col"], "M": ["month", "mm", "I", "Mo", "MN", "MI", "Z", "mode", "W", "R", "C", "U", "O", "Number", "ONE", "MD", "F", "MC", "mass", "multi", "mu", "P", "length", "mon", "mi", "ME", "cm", "unit", "K", "o", "H", "RM", "A", "NUM", "B", "dim", "DM", "x", "IM", "MAL", "Y", "y", "D", "model", "MX", "mid", "Index", "NM", "MO", "dm", "N", "OM", "parent", "d", "T", "MB", "um", "L", "mult", "AM", "Num", "LM", "multiple", "module", "Mi", "man", "shape", "MM", "X", "umi"], "i": ["ip", "ie", "mini", "ni", "id", "it", "I", "_", "h", "ix", "a", "e", "int", "b", "start", "on", "uri", "pi", "none", "ib", "position", "multi", "di", "ini", "mu", "iw", "k", "ai", "gi", "io", "p", "mi", "r", "z", "o", "iy", "line", "im", "iu", "ii", "ui", "ti", "ci", "ia", "ei", "qi", "x", "c", "init", "out", "yi", "bi", "u", "zi", "ic", "cli", "y", "l", "uni", "eni", "ri", "si", "ih", "il", "v", "ind", "end", "d", "info", "xi", "q", "li"], "num": ["nom", "con", "id", "dom", "pos", "mm", "coord", "nb", "inc", "np", "int", "bin", "b", "un", "iter", "position", "node", "multi", "mu", "form", "block", "norm", "loc", "doc", "name", "count", "mon", "cm", "unit", "o", "mod", "label", "nm", "NUM", "dim", "x", "c", "init", "lim", "u", "mom", "no", "uni", "comb", "en", "total", "inner", "max", "nn", "valid", "dm", "N", "end", "d", "result", "sum", "um", "mult", "ul", "info", "coll", "fn", "back", "Num", "om", "len", "na", "cum", "nam", "nu", "umi", "col"], "number": ["nr", "N", "x", "c", "initial", "ng", "id", "month", "parent", "digit", "word", "length", "result", "name", "page", "count", "source", "mi", "p", "um", "ln", "unit", "no", "r", "o", "size", "key", "fn", "b", "null", "mis", "int", "na", "member", "line", "total", "prefix", "module", "Number", "array", "nn", "max", "xxx", "none", "NUM", "min", "umber", "position", "node", "zero", "multi"], "outputFileName": ["inputfilePath", "outputFoldername", "outputFileNames", "OutputPerName", "outputFolderUrl", "outputfilename", "outputFileUrl", "outputPerUrl", "inputfileNames", "outputPername", "outputDirname", "inputfilename", "inputFilename", "outputFilesName", "outputfileNames", "OutputFileLine", "OutputPerLine", "OutputPerUrl", "OutputFileName", "OutputPername", "inputFilePath", "outputPerName", "outputFolderLine", "inputFileName", "outputFolderName", "inputFileNames", "outputFilesname", "outputfileName", "outputDirNames", "OutputFileUrl", "inputfileName", "outputPerLine", "outputFilename", "outputfileUrl", "OutputFilename", "outputDirPath", "outputFilePath", "outputFilesNames", "outputfilePath", "outputDirName", "outputFileLine", "outputFilesPath", "outputfileLine"], "of": ["exec", "OF", "ow", "flow", "response", "copy", "out", "org", "it", "one", "part", "df", "d", "given", "length", "result", "off", "rf", "no", "lf", "less", "de", "exp", "o", "fam", "e", "dir", "at", "ff", "hand", "ok", "zip", "alf", "en", "om", "flo", "ob", "on", "fr", "to", "object", "output", "new", "orf", "sf", "found", "obj", "os", "folder", "once", "free", "fd", "ef", "other", "own", "log", "valid", "full", "Of", "config", "over", "fold"], "mn": ["dm", "nom", "fm", "ma", "master", "bm", "ng", "loc", "me", "mm", "mx", "dr", "lin", "mon", "mi", "MN", "cm", "ln", "nc", "wm", "header", "pm", "mc", "ms", "fn", "cn", "ns", "np", "mis", "core", "md", "nd", "bn", "rn", "rup", "mo", "dn", "pin", "mr", "nav", "main", "nas", "ml", "mann", "model", "nic", "nm", "nn", "man", "node", "dj", "dim", "mic", "km", "mu"], "m": ["mini", "c", "x", "k", "range", "bm", "month", "d", "mm", "p", "u", "mon", "mi", "um", "cm", "h", "r", "z", "o", "size", "e", "mc", "ms", "y", "pm", "l", "b", "mo", "line", "hm", "im", "nm", "man", "w", "dim", "g", "km", "v", "mu"], "j": [" si", "su", "ie", "ai", " js", "d", " vi", " section", "p", "sh", "ix", "z", " site", "o", "a", " sp", "y", " sd", " sec", " sc", "sa", "b", " sy", " se", " z", "sec", "ice", " sw", "js", " sid", "ss", "sl", "ui", "ti", "si", " ii", " su", " sl"], "row_lst": ["row_lstr", "row_Lbl", "row_llST", "row_lST", "row_flnt", "row_llstr", "row_elbl", "row_llnt", "row_llst", "row_Lsts", "row_elst", "row_lsts", "row_elsts", "row_llsts", "row_Lst", "row_flST", "row_flstr", "row_flst", "row_lbl", "row_LST", "row_lnt", "row_elST", "row_llbl"], "s": ["su", " S", "c", "x", "k", "id", "items", "ls", "d", "ages", "south", "ins", "sh", "u", "p", "sq", "sym", "r", "z", "sd", "sp", "o", "a", "size", "y", "ms", "e", "es", "ums", "sv", "ns", "b", "sm", "l", "ses", "sec", "sb", "sid", "spec", "ds", "iss", "S", "set", "days", "sw", "ss", "gs", "w", "stat", "sn", "abs", "si", "ows", "sc", "sk", "g", "se"]}}
{"code": " \n  def compute(A,B):\n      start = A\n  \n      count = 0\n  \n      while start < B:\n          temp = str(start)+str(start)[:len(str(start))-1]\n          for i in range (len(str(start))):\n              if int(temp[i:len(str(start))+i]) > start and int(temp[i:len(str(start))+i]) <= B:\n                  count += 1\n          \n          start += 1\n  \n      return count\n          \n  fileName = raw_input(\"File name: \")\n  f = open(fileName,\"r\")\n  n = int(f.readline()[:-1])\n  i=0\n  for line in f:\n  \n      items = (line[:-1]).split()\n  \n      A = int(items[0])\n      B = int(items[1])\n      print \"Case #%d: %d\" %(i+1,compute(A,B))\n      i+=1\n      \n  f.close()\n", "substitutes": {"A": ["Alpha", "I", "Ant", "Count", "G", "An", "a", "AI", "V", "W", "R", "C", "U", "O", "AD", "Average", "Start", "TA", "Az", "AMI", "Action", "LA", "F", "ID", "Asia", "App", "AR", "ai", "Power", "P", "Name", "Ar", "K", "Area", "H", "mA", "alpha", "AW", "Adam", "CA", "SA", "PI", "AC", "At", "One", "Y", "API", "AB", "Ab", "AA", "GA", "D", "S", "M", "Act", "NA", "N", "As", "Case", "New", "T", "L", "Am", "AM", "Num", "E", "AP", "Offset", "X"], "B": ["BD", "BF", "Bur", "Ub", "UB", "I", "Count", "G", "Bah", "Z", "DB", "b", "BBC", "Bs", "V", "W", "R", "C", "U", "O", "Number", "OB", "PB", "F", "Q", "BW", "BI", "BE", "WB", "P", "Limit", "End", "length", "BM", "K", "SB", "Block", "base", "BA", "H", "BER", "Bi", "Blue", "BC", "Max", "Y", "EB", "BB", "LB", "AB", "Ab", "AA", "CB", "D", "S", "J", "MAX", "M", "BL", "BS", "bound", "N", "NB", "GB", "T", "MB", "number", "L", "Band", "Big", "TB", "E", "Tab", "X"], "start": ["ize", "input", "slice", "range", "text", "id", "it", "code", "part", "pos", "I", "source", "started", "size", "get", "e", "a", "sort", "parse", "int", "next", "b", "now", "C", "Start", "iter", "style", "shift", "min", "file", "string", "use", "length", "step", "case", "name", "p", "sp", "r", "key", "t", "base", "alpha", "w", "se", "seed", "stuff", "begin", "rest", "c", "x", "init", "u", "current", "star", "no", "first", "limit", "l", "draw", " Start", "cur", "type", "state", "si", "search", "span", "add", "data", "ind", "end", "d", "starting", "st", "info", "offset", "len", "str", "art", "skip", "order", "match", "stop", "new", "space", "set", "E", "time", "X", "index", "test"], "count": ["text", "id", "code", "part", "Count", "source", "size", "a", "b", "int", "next", "C", "path", "num", "file", "string", "loop", "use", "length", "seq", "cache", "case", "p", "name", "char", "only", "all", "key", "old", "base", "error", "found", "err", "c", "ed", "current", "counter", "cond", "limit", "child", "total", "max", "progress", "batch", "state", "type", "data", "ind", "level", "sum", "number", "call", "info", "offset", "check", "len", "depth", "list", "order", "match", "last", "time", "index", "test"], "temp": ["context", "stuff", "data", "input", "form", "c", "json", "init", "text", "loc", "code", "fake", "pre", "T", "body", "part", "length", "cache", "raw", "case", "source", "p", "tc", "template", "current", "sp", "flat", "offset", "e", "tmp", "t", "txt", "str", "base", "emp", "total", "wrap", "order", "Temp", "empty", "output", "inner", "new", "cont", "tab", "html", "diff", "iter", "w", "time", "content", "tem", "log", "test", "xml", "col"], "i": ["ip", "ie", "mini", "slice", "ni", "id", "I", "wei", "nb", "oi", "ix", "a", "e", "int", "b", "uri", "pi", "fi", "multi", "di", "ini", "idi", "k", "ai", "ji", "gi", "io", "p", "name", "mi", "m", "r", "z", "o", "t", "iu", "ii", "ui", "ti", "ci", "ei", "hi", "qi", "x", "c", "api", "yi", "bi", "u", "zi", "cli", "y", "l", "eni", "ri", "isi", "inner", "j", "si", "v", "ind", "end", "phi", "d", "abi", "offset", "xi", "vi", "ori", "index", "li", "col"], "fileName": ["FilePath", "FILEname", "FileNames", "fName", " fileUrl", "FileUrl", "fPath", "FileName", "filePath", " filePath", "FILEName", "fileUrl", "fUrl", "FILENames", " filename", " fileNames", "filename", "fname", "Filename", "fileNames"], "f": ["fm", "input", "flow", "end", "form", "c", "x", "af", "fc", "fore", "s", "tf", "body", "df", "d", "io", "p", "u", "page", "m", "fin", "bf", "h", "r", "fb", "lf", "uf", "ff", "fp", "o", "e", "a", "fn", "raf", "arf", "frame", "l", "t", "b", "handler", "fe", "xf", "fit", "fast", "fx", "fr", "fa", "fed", "fs", "fi", "sf", "found", "iter", "w", "fo", "fac", "feed", "j", "F", "full", "file", "rf", "v", "fd"], "n": ["NL", "nr", "N", "c", "k", "it", "s", "pos", "p", "name", "nb", "number", "m", "ln", "L", "nc", "r", "no", "o", "size", "e", "y", "nt", "Num", "l", "b", "t", "next", "len", "Line", "C", "g", "iter", "w", "j", "num", "sn", "li"], "line": ["news", "data", "comment", "end", "status", "nl", "item", "c", "out", "block", "range", "code", "id", "body", "part", "pos", "word", "section", "name", "page", "case", "group", "lin", "p", "number", "ln", "unit", "no", "r", "lf", "e", "l", "int", "b", "nd", "len", "str", "list", "link", "row", "Line", " Line", "object", "day", " lines", "el", "entry", "obj", "nn", "iter", "log", "lines", "file", "string", "inline"], "items": ["notes", "bytes", "stuff", "Items", "news", "data", "pieces", "works", "x", "item", "ips", "s", "pos", "rows", "ins", "chains", "classes", "p", "links", "charges", "flows", "runs", "values", "articles", "vals", "sites", "files", "models", "args", "events", "cases", "lists", "ns", "b", "cells", "words", "pages", "sections", "comments", "rings", "names", "books", "plugins", "results", "members", "details", "objects", "boxes", " lines", "parts", "rules", "breaks", "iter", "blocks", "cycles", "feed", "groups", "keys", "bits", "lines", "strings", "xs", "ids", "features"]}}
{"code": "filename = raw_input(\"Name of file: \")\n  f = open(filename, \"r\")\n  o = open(filename + \".out\", \"w\")\n  \n  \n  T = int(f.readline()[:-1])\n  \n  many_possible = \"Bad magician!\"\n  zero_possible = \"Volunteer cheated!\"\n  \n  for t in range(1, T + 1):\n      first = int(f.readline()[:-1]) - 1\n      grid1 = []\n      for i in range(4):\n          grid1 += [f.readline()[:-1].split(\" \")]\n          \n      second = int(f.readline()[:-1]) - 1\n      grid2 = []\n      for i in range(4):\n          grid2 += [f.readline()[:-1].split(\" \")]\n  \n      possible = []\n      for num in grid1[first]:\n          if num in grid2[second]:\n              possible += [num]\n  \n      if len(possible) == 1:\n          o.write(\"Case #%d: %s\n\" %(t, possible[0]))\n      elif len(possible) == 0:\n          o.write(\"Case #%d: %s\n\" %(t, zero_possible))\n      else:\n          o.write(\"Case #%d: %s\n\" %(t, many_possible))\n          \n      \n  \n  o.close()\n  f.close()\n", "substitutes": {"filename": ["jl", "email", "sequence", "kl", "ername", "tail", "setup", "tty", "ename", "jet", "ame", "nuclear", "document", "amer", "word", "sole", "username", "name", "til", "uture", "dyl", "ln", "kn", "bf", "pty", "sheet", "stem", "directory", "fp", "files", "url", "mph", "fn", "location", "FILE", "mble", "phrase", "utf", "uno", "fil", "doi", "names", "shaw", "prefix", "wl", "dll", "which", "output", "ames", "nil", "sf", "named", "Filename", "title", "folder", "path", "knife", "binary", "feat", "string", "println", "database", "whatever", "file", "download", "figure", "rl", "il", "fd"], "f": ["more", "af", "plus", "fc", "of", "part", "df", "this", "func", "lf", "h", "fp", "files", "e", "fen", "b", "fx", "fs", "fi", "iter", "feed", "inf", "F", "full", "file", "n", "die", "http", "conf", "form", "loop", "k", "io", "p", "m", "bf", "r", "z", "fe", "fast", "sf", "obj", "found", "w", "fu", "function", "c", "x", "api", "s", "fw", "tf", "u", "rf", "fb", "self", "l", "fa", "folder", "fo", "log", "v", "fd", "fm", "d", "info", "fn", "fr", "os", "g", "fold"], "o": ["obo", "ow", "c", "x", "out", "ol", "k", "oid", "opy", "ando", "ne", "io", "p", "u", "bo", "oi", "off", "tto", "m", "auto", "ro", "no", "info", "z", "ilo", "e", "y", "line", "ao", "l", "b", "op", "ou", "om", "mo", "ooo", "ko", "do", "oo", "ob", "to", "O", "office", "object", "on", "error", "lo", "output", "orf", "vo", "obj", "os", "open", "w", "fo", "iso", "er", "oa", "oe", "log", "so", "online", "file", "go", "n", "po", "yo", "v"], "T": ["N", "TN", "NT", "out", "n", "P", "I", "length", "G", "number", "L", "CT", "K", "Y", "Z", "size", "Num", "Time", "UTC", "V", "W", "R", "H", "DT", "TH", "C", "O", "TT", "A", "D", "WT", "TB", "S", "E", "Length", "time", "X", "M", "B", "F", "type", "Type", "Q", "TS"], "many_possible": ["many_cossibility", "many__peossibility", "many_Possibly", "many_possibly", "many__patch", "many_patch", "many_Patch", "many__peossible", "many__possibly", "many_peossibility", "many_Possible", "many_peatch", "many_peossible", "many_catch", "many_peossibly", "many_spossible", "many_Powed", "many_Possibility", "many_cossibly", "many_potowed", "many__possibility", "many__peatch", "many_spossibility", "many_potossibility", "many__possible", "many_powed", "many_potossible", "many_Pausible", "many_cossible", "many_spowed", "many_potausible", "many_pausible", "many_spausible", "many_possibility", "many__peossibly"], "zero_possible": ["zero_Ported", "zero_cowed", "zero_spable", "zero_corted", "zero_Powed", "zero_cossibility", "zero_cable", "zero_possibility", "zero_Possibility", "zero_sported", "zero_cossible", "zero_Possible", "zero_pable", "zero_powed", "zero_spossibility", "zero_spossible", "zero_tossibility", "zero_ported", "zero_Pable", "zero_tossible", "zero_towed", "zero_table"], "t": ["latest", "c", "x", "out", "k", "text", "it", "s", "tf", "d", "I", "p", "u", "tim", "tc", "tp", "_", "m", "h", "z", "r", "a", "e", "y", "te", "tower", "at", "dt", "nt", "l", "int", "b", "pt", "the", "start", "ts", "total", "now", "lat", "ot", "title", "tt", "ta", "w", "j", "time", "type", "test", "n", "times", "g", "v"], "first": ["right", "third", "x", "split", "initial", "upper", "middle", "one", "s", "part", "parent", "name", "p", "case", "th", "prev", "current", "st", "only", "a", "size", "self", "b", "next", "lower", "up", "start", "now", "primary", "fifth", "small", "front", "fourth", "space", "last", "max", "mid", "path", "top", "left", "First", "time", "min", "family", "full", "latest"], "grid1": ["grid0", "rowone", " grid6", "Grid81", "Grid2", " gridpart", "rangeone", "grid6", " gridone", "line1", "line0", "gridpart", "house1", "line6", "grid81", "Grid6", "range2", "house0", "range1", "linepart", "Grid1", "range81", "gridone", "row2", "row81", " grid0", "house2", "Gridone", "houseone", "row1", "line2", "Gridpart", "lineone"], "i": ["idi", "ip", "ie", "ind", "x", "ai", "it", "id", "yi", "gi", "I", "io", "p", "u", "m", "ir", "r", "e", "l", "int", "b", "ri", "on", "iu", "xi", "g", "pi", "ii", "j", "ui", "ti", "inf", "si", "ci", "n", "li", "multi", "v", "di"], "second": ["sub", "be", "mini", "follow", "long", "after", "third", "split", "final", "two", "middle", "Second", "since", "s", "part", "south", "double", "seconds", "current", "size", "offset", "secondary", "low", "next", "lower", "nd", "future", "letter", "now", "sec", "fifth", "front", "fourth", "secret", "last", "later", "top", "left", "other", "j", "danger", "between", "latest", "zero", "v"], "grid2": ["grid5", "draw2", " grid5", "productsecond", "modulesecond", "module1", "product1", " gridsecond", "producttwo", "gridtwo", "gridsecond", "age1", "draw5", " grid4", "age4", "module2", "age2", "row2", "moduletwo", "drawsecond", "rowsecond", "grid4", " gridtwo", "row5", "row4", "agesecond", "row1", "product2", "draw4"], "possible": [" pential", " possibility", "ppossibly", "pential", "Possible", "psossible", "paossible", "piped", "ppential", "apausible", "nausible", "nossibility", "Pected", "nossibly", "apossibility", "pected", "apossible", " picky", " possibly", "psossibility", "ppossibility", "apossibly", "possibility", "paossibility", "Picky", "nossible", "psicky", "paected", "niped", "Pential", "Possibly", "picky", "Pausible", "paossibly", "psossibly", "ppossible", "pausible", " pected", " piped", "possibly", "Possibility", "Piped"], "num": ["nr", "nom", "tu", "ram", "x", "block", "text", "id", "loc", "width", "code", "parent", "digit", "pos", "d", "length", "result", "name", "count", "sum", "nb", "u", "mom", "number", "anch", "mult", "unit", "nc", "no", "um", "inc", "root", "m", "size", "offset", "term", "Num", "nt", "np", "null", "draw", "int", "uni", "sec", "rank", "nam", "rem", "atom", "nu", "empty", "du", "nm", "max", "temp", "missing", "nn", "inal", "node", "none", "NUM", "gap", "unk", "index", "test", "umi", "dim", "n", "g", "multi", "col", "grade"]}}
{"code": "filename = raw_input(\"Name of file: \")\n  infile = open(filename, \"r\")\n  outfile = open(filename + \".out\", \"w\")\n  \n  \n  T = int(infile.readline()[:-1])\n  \n  def playDecWars(her, his):\n      n = len(her)\n      count = 0\n      while n > 0:\n          if her[0] < his[0]:\n              del(her[0])\n              del(his[-1])\n          else:\n              del(her[0])\n              del(his[0])\n              count += 1\n          n -= 1\n      return count\n  \n  def playWars(her, his):\n      n = len(her)\n      count = 0\n      while n > 0:\n          if her[0] > his[-1]:\n              count += 1\n              del(her[0])\n              del(his[0])\n          else:\n              his_index = 0\n              for num in his:\n                  if num > her[0]:\n                      break\n                  his_index += 1\n              del(her[0])\n              del(his[his_index])\n          n -= 1\n      return count\n  \n  for t in range(1, T + 1):\n      n = int(infile.readline()[:-1])\n      her = infile.readline()[:-1].split(\" \")\n      his = infile.readline()[:-1].split(\" \")\n      her = [float(x) for x in her]\n      his = [float(x) for x in his]\n  \n      her.sort()\n      his.sort()\n  \n      d_wars = playDecWars(her[:], his[:])\n      wars = playWars(her[:], his[:])\n      \n      outfile.write(\"Case #%d: %d %d\n\" % (t, d_wars, wars))\n      \n          \n      \n  \n  outfile.close()\n  infile.close()\n", "substitutes": {"filename": ["jl", "email", "phil", "kl", "ername", "sheet", "tails", "tail", "chapter", "tty", "s", "login", "ename", "jet", "journal", "nuclear", "fle", "document", "sole", "username", "name", "til", "loader", "uture", "dyl", "ln", "lace", "skin", "kn", "pty", "itled", "socket", "FILE", "directory", "url", "files", "fp", "location", "fn", "lesh", "stem", "mph", "mble", "utf", "phrase", "fil", "doi", "names", "f", "shaw", "processor", "prefix", "dll", "which", "ames", "nil", "SourceFile", "named", "Filename", "selection", "title", "nm", "path", "knife", "FH", "database", "File", "whatever", "file", "download", "figure", "il", "fd"], "infile": ["inloop", " inFile", "Inqueue", "outfilename", "inputFile", "inqueue", "Infile", "outstream", "inputline", "INstream", "innstream", "Infiles", "innline", "INmessage", " intime", "inputfile", "INline", "INFile", "infilename", "innqueue", "outqueue", " inline", "outFile", "InFile", " infiles", "outtime", " inmessage", "innloop", "inputfiles", "outmessage", "instream", "innfile", "INfile", "outfiles", "outloop", "intime", "inFile", "inntime", " inloop", "outline", "Instream", "inmessage", "Infilename", "Inline", "infiles", "inline", "INfilename"], "outfile": [" outletter", "tempfile", "Outfile", " outf", "outstream", "Outline", " outline", "templetter", "outf", " outstream", "outFile", "againfile", " outFile", "Outstream", "instream", "inletter", "outletter", "tempFile", "Outf", "againf", "inFile", "outline", "inf", "tempf", "againletter", "againstream", "inline"], "T": [" N", "N", "Total", "TN", "NT", "TG", "P", "I", "Count", "G", "L", "CT", "z", "K", "Y", "Z", "Size", "Time", "V", "H", "R", "W", "TH", "DT", "C", "O", "TF", "TT", "A", "D", "WT", "TB", "S", "E", "Length", "J", "time", "X", "M", "B", "F", "Q", "Type", "TS", "TI"], "her": ["you", "hler", "here", "field", "hen", "hard", "this", "h", "hl", "work", "der", "Her", "fer", "gr", "hers", "hem", "cher", "good", "pher", "mer", "hed", "hess", "iter", "yr", "er", "file", "hes", "hou", "fat", "host", "rah", "ner", "holy", "maker", "master", "half", "gender", "ke", "me", "worker", "true", "cer", "build", "r", "z", "girl", "human", "old", "gh", "wh", "H", "ham", "eh", "both", "el", "oh", "yahoo", "guy", "w", "ers", "boy", "err", "ch", "hel", "han", "HER", "ter", "html", "head", "our", "div", "sh", "hr", "hair", "ah", "self", "hand", "com", "handler", "rh", "hell", "en", "user", "she", "f", "yer", "inner", "player", "like", "hog", "hy", "oe", "wife", "ler", "ih", "he", "che", "person", "github", "ha", "ver", "upper", "husband", "opher", "ph", "ger", "hab", "header", "hom", "reader", "order", "eng", "per", "woman", "him", "man", "test"], "his": ["humans", "right", "hn", "here", "plus", "helps", "when", "hours", "hua", "charges", "this", "west", "ens", "h", "hal", "work", "gin", "wy", "oms", "cases", "hon", "houses", "hers", "better", "omes", "shows", "history", "wrong", "hop", "hess", "xs", "makes", "hes", "ahs", "times", "rah", "home", "tails", "does", "ics", "christ", "opens", "hei", "your", "happy", "hands", "less", "gins", "human", "ists", "quarters", "iths", "mis", "another", "pages", "women", "gh", "wh", "vs", "grades", "ham", "hm", "us", "ras", "olis", "vin", "both", "oh", "there", "ats", "heads", "ges", "whatever", "pps", "hens", " hes", "hex", "fits", "though", "han", "hi", "His", "s", "hp", "its", "ins", "ches", "hr", "ah", "what", "hus", "hat", "es", "ums", "com", "rh", "words", "why", "hell", "anything", "hea", "issues", "maps", "byn", "ws", "hy", "changes", "whose", "wife", "ih", "he", "projects", "something", "ims", "husband", "thanks", "thus", "again", "yes", "rooms", "hom", "stats", "events", "forms", "hin", "today", "boys", "tests", "hist", "pers", "breaks", "woman", "him", "hh", "hops", "holes", "tops", "ris", "has", "hs", "ps", "test", "hews", "fact", "bh"], "n": ["nr", "ni", "ng", "ct", "part", "pos", "note", "nb", "ln", "nc", "size", "term", "np", "on", "ot", "un", "none", "min", "sync", "k", "norm", "length", "p", "name", "m", "unit", "r", "z", "o", "all", "cn", "non", "nor", "ne", "dn", "i", "net", "el", "w", "left", "err", " N", "c", "out", "init", "s", "u", "current", "no", "y", "l", "ns", "en", "conn", "f", "nat", "inner", "ny", "nn", "j", "sn", "v", "span", "ind", "N", " c", "an", "d", "sum", "number", "call", "fn", "nt", "len", "na", "skip", "nu", "ignore", "g"], "count": ["long", "more", "success", "con", "id", "code", "ct", "part", "bug", "Count", "nb", "th", "h", "flat", "size", "weight", "b", "member", "start", "C", "stat", "default", "mass", "loop", "allow", "loc", "length", "cache", "seq", "name", "p", "z", "toc", "all", "ac", "old", "base", "i", "sec", "label", "cd", "found", "left", "ch", "c", "value", "cat", "ed", "current", " counts", "counter", "y", "cond", "limit", "l", "child", "f", "total", "process", "max", "content", "type", "span", "ind", "catch", "parent", "result", "sum", "number", "call", "offset", "coll", "check", "len", "list", "depth", "skip", "multiple", "match", "val", "score", "time", "index", "test", "col"], "his_index": [" his_offset", "his2ind", " his_length", " his_size", "his_id", "his_key", "his_offset", "his2key", "His_id", "his_ind", " his_ind", " his_id", " his_key", "his_length", "His_ind", "his2size", "his_size", "his2index", "hisAindex", "hisAlength", "hisAid", "His_index", "hisAoffset"], "num": ["mem", "nr", "nom", "mn", "N", "con", "ni", "block", "am", "init", "id", "code", "ng", "dom", "result", "name", "sum", "nb", "mon", "mat", "um", "number", "m", "mult", "mom", "unit", "h", "no", "nc", "root", "inc", "term", "Num", "np", "b", "uni", "om", "en", "member", "na", "i", "im", "nu", "new", "img", "nm", "nn", "max", "man", "node", "gen", "index", "dim", "col"], "t": ["N", "c", "s", "col", "tf", "d", "pos", "p", "tim", "u", "tp", "number", "m", "tr", "h", "z", "r", "at", "o", "y", "te", "nt", "dt", "l", "int", "ty", "b", "len", "start", "ts", "total", "i", "f", "ot", "title", "tt", "temp", "w", "j", "time", "type", "test", "times", "v"], "x": ["ip", "he", "yx", "xc", "c", "ox", "k", "id", "xt", "xy", "s", "d", "p", "u", "rx", "_", "event", "number", "m", "px", "h", "r", "z", "ix", "ch", "float", "a", "e", "y", "sex", "self", "xp", "dx", "int", "xf", "wh", "ux", "lex", "f", "i", "ax", "cross", "on", "plex", "xi", "q", "mass", "max", "xxx", "w", "xx", "j", "time", "X", "index", "xs", "wx", "ci", "ex", "g", "tx", "v"], "d_wars": ["d_hars", "d_Wards", "d_Wans", "d_vats", "d_whans", "d_whars", "d_hans", "d_vars", "d_wares", "d_whats", "d_Wats", "d_hares", "d_wans", "d_Wars", "d_vares", "d_wards", "d_Wares", "d_vards", "d_whards", "d_wats", "d_hats", "d_vans"], "wars": ["wares", "awalls", "whalls", "Wars", "kwars", "Wares", "awars", "whares", "kwats", "Walls", "whars", "awats", "Wats", "kwarts", "walls", "wats", "warts", "wharts", "kwares", "Warts", "awarts", "whats"]}}
{"code": "filename = raw_input(\"Name of file: \")\n  infile = open(filename, \"r\")\n  outfile = open(filename + \".out\", \"w\")\n  \n  \n  T = int(infile.readline()[:-1])\n  \n  \n  def getMinTime(c, f, x):\n      p0 = 2.0\n      s_prev = x / p0\n      s_curr = c / p0\n      prev_item = 0\n      next_item = x / (p0 + f)\n      n = 1\n      while s_prev + prev_item > s_curr + next_item:\n          s_prev = s_curr\n          prev_item = next_item\n          s_curr += c / (p0 + (n * f))\n          next_item = x / (p0 + ((n + 1) * f))\n          n += 1\n      return s_prev + prev_item\n  \n  for t in range(1, T + 1):\n      items = infile.readline()[:-1].split(\" \")\n      c = float(items[0])\n      f = float(items[1])\n      x = float(items[2])\n      time = getMinTime(c, f, x)\n      outfile.write(\"Case #%d: %.7f\n\" %(t, time))\n      \n          \n      \n  \n  outfile.close()\n  infile.close()\n", "substitutes": {"filename": ["jl", "email", "kl", "ername", "sheet", "chapter", "tail", "s", "selected", "ename", "document", "jet", "journal", "amer", "username", "name", "source", "that", "til", "uture", "ln", "lace", "kn", "skin", "pty", "itled", "socket", "FILE", "directory", "fp", "files", "stem", "location", "fn", "url", "mph", "utf", "phrase", "fil", "doi", "names", "letter", "prefix", "dll", "which", "output", "ames", "un", "sf", "SourceFile", "nil", "named", "sql", "Filename", "selection", "title", "theme", "path", "knife", "binary", "subject", "FH", "database", "whatever", "file", "download", "figure", "rl", "il", "fd"], "infile": ["inputFile", "inputf", "inputlock", "Infile", "inputline", "Infiles", "outf", "inputfile", " inline", "outFile", "Inf", " infiles", "InFile", " inf", "inlock", "outfiles", "outlock", " inlock", "inFile", "outline", "inf", "Inline", "infiles", "inline"], "outfile": [" outletter", "Outfile", " outf", "Outletter", "outstream", "Outline", " outfolder", " outline", "outf", " outstream", "OUTline", "OutFile", "outFile", "outfolder", " outFile", "Outstream", "OUTf", "infolder", "instream", "inletter", "outletter", "Outfolder", "OUTfile", "inFile", "outline", "inf", "OUTFile", "inline"], "T": ["N", "TN", "NT", "P", "I", "Count", "TW", "p", "G", "L", "z", "K", "Y", "Z", "Size", "Time", "V", "H", "R", "W", "TH", "C", "O", "TF", "TT", "A", "Temp", "TA", "WT", "D", "TB", "S", "E", "Length", "X", "M", "B", "F", "Q", "TS"], "c": ["uc", "cu", "dc", "xc", "con", "k", "fc", "s", "col", "at", "ct", "d", "cc", "ec", "p", "u", "count", "tc", "m", "cm", "ic", "h", "r", "z", "ch", "nc", "ce", "o", "size", "e", "y", "cs", "cn", "a", "cin", "cf", "cr", "l", "b", "com", "cy", "i", "C", "q", "cent", "cycle", "lc", "cd", "max", "ac", "w", "ca", "ci", "g", "co", "v"], "f": ["fm", "form", "field", "fc", "k", "af", "s", "of", "tf", "df", "d", "p", "u", "m", "fl", "rf", "h", "r", "z", "fb", "bf", "o", "fp", "e", "y", "cf", "fen", "l", "b", "fe", "xf", "fer", "en", "fx", "i", "fr", "fa", "fs", "fi", "q", "sf", "el", "al", "ft", "w", "fac", "ef", "fo", "inf", "F", "file", "g", "v", "fd"], "x": ["con", "plus", "code", "xes", "ct", "fixed", "event", "h", "ix", "size", "e", "a", "area", "b", "fx", "ax", "F", "xs", "full", "xy", "p", "case", "m", "cm", "r", "z", "xf", "fast", "i", "im", "pe", "el", "w", "xx", "ci", "wx", "tx", "xc", "xa", "s", "u", "wa", "ic", "y", "xp", "com", "l", "dx", "en", "cross", "array", "max", "cl", "python", "ce", "v", "end", "d", "rx", "co", "up", "php", "xi", "q", "X", "index", "ex", "g"], "p0": ["p2", " p2", "P0", "c4", "p1", "n1", "v6", "sp4", "c0", "f2", " p1", "p6", "p90", "sp1", "a4", "p4", "m1", "a00", "n0", "f4", "m3", "v1", " p4", "m0", "p00", "v3", "c50", " p90", "P2", "p50", "n00", "c2", "a1", "P3", "P00", "f1", "sp0", "c90", "a2", "p3", "sp90", "v0", "m6", "P1", "a50", "P4", "c1", "P6", "f00", "c00", "f50", "f0", "a0"], "s_prev": ["s_cur", " s_init", "s___prev", "ns___cur", "s_orig", "s___iter", "s___cur", " s_next", " s_cur", " s_rev", "s_next", "s_vious", " s_vious", "ns_cur", "ns___next", "ns_iter", "s_ctr", "ns___prev", "ns___iter", "s___next", " s_rel", "ns_prev", "s_rev", "s_rel", " s_orig", " s_ctr", "s_init", "s_iter", "ns_next"], "s_curr": ["s_schrer", "s_curra", "s_prevred", "s_serrer", "s_catrer", "s_Curred", "s_Currs", "s_curro", "s_currar", "s_surrl", "s_catrar", "s_curred", "s_serra", "s_serrs", "s_currc", "s_prevrs", "s_Currer", "s_corro", "s_corrl", "s_currl", "s_schr", "s_schrar", "s_schrs", "s_Curra", "s_currer", "s_correr", "s_Currc", "s_surr", "s_centrl", "s_corr", "s_centro", "s_corrs", "s_Curr", "s_corra", "s_prevrc", "s_surro", "s_serr", "s_currs", "s_prevr", "s_catrs", "s_Currar", "s_catr", "s_centr"], "prev_item": [" next_function", "prev\u00b7layer", "prev__step", "prev__item", " previous__step", "prev\u00b7entry", "prevPitem", "prev_instance", " previous_step", "prev_entry", " previous_element", "next_instance", "prev_layer", "prev_function", " previous_layer", " previous__item", " previous__element", " previous__layer", "prev__element", "prev_iter", "prev_step", "next_value", "prev_element", "prevPvalue", "prev_value", " previous_item", "prev\u00b7element", "prev\u00b7function", "prevPiter", "prev__layer", "next_layer", "prev\u00b7step", "next_iter", "prev\u00b7item", " next_entry"], "next_item": ["next_Item", "nextpelement", "prev_object", "next_event", "next__item", "nextxItem", "next_offset", "prev_element", "next_object", "prev_event", "next_element", "next__element", "nextpobject", "next_items", "nextxitems", "nextxevent", "prev_offset", "nextpitem", "next__object", "nextpItem", "nextxitem", "prev_items", "prev_Item", "next__Item"], "n": ["span", "N", "nl", "con", "ni", "k", "s", "an", "d", "p", "u", "count", "nb", "number", "m", "nc", "r", "z", "no", "o", "size", "e", "y", "fn", "all", "cn", "nt", "l", "ns", "np", "b", "en", "len", "na", "ne", "conn", "i", "on", "nu", "li", "un", "ny", "nn", "max", "w", "j", "num", "sn", "min", "adj", "g", "v"], "t": ["N", "k", "s", "tf", "ct", "d", "length", "p", "tim", "u", "tz", "tp", "m", "r", "z", "h", "o", "a", "e", "y", "size", "at", "nt", "dt", "l", "b", "int", "ts", "i", "total", "C", "temp", "tt", "w", "j", "num", "type", "v"], "items": ["units", "Items", "data", "pieces", "projects", "works", "qs", "item", "ips", "agents", "json", "docs", "eps", "it", "apps", "example", "rows", "ins", "its", "links", "opens", "flows", "values", "mu", "images", "vals", "articles", "packages", "amples", "files", "models", "args", "events", "forms", "es", "effects", "lists", "products", "cells", "words", "pages", "sections", "comments", "names", "types", "users", "grades", "ops", "styles", "plugins", "members", "results", "objects", "boxes", "tests", "parts", "terms", "photos", "blocks", "groups", "keys", "strings", "lines", "bits", "xs", "obs", "xml", "phones", "ids", "features", "jobs", "cats"], "time": ["timeout", "data", "end", "value", "text", "id", "s", "length", "scale", "name", "count", "p", "tim", "tc", "tz", "case", "event", "date", "m", "call", "h", "z", "money", "size", "e", "y", "weight", "term", "ime", "Time", "timer", "frequency", "clock", "depth", "now", "sec", "tm", "q", "cycle", "space", "TIME", "etime", "temp", "tt", "age", "w", "duration", "rate", "type", "times", "v"]}}
{"code": "fileName = raw_input(\"File name: \")\n  f = open(fileName,\"r\")\n  \n  \n  n = int(f.readline()[:-1])\n  boards = []\n  \n  def check_tuple(row):\n      has_o = False\n      has_x = False\n      for char in row:\n          if(char == \".\"):\n              return (False, \"Game has not completed\")\n          if(char == \"x\" or char == \"X\"):\n              has_x = True\n          if(char == \"o\" or char == \"O\"):\n              has_o = True\n          \n      if has_o and has_x:\n          return (False, \"Draw\")\n      if has_o:\n          return (True, \"O won\")\n      return (True, \"X won\")\n  \n  def check_rows(board):\n      for row in board:\n          result = check_tuple(row)\n          if result[0]:\n              return result\n      return (False, \"Unknown result\")\n  \n  def check_columns(board):\n      for i in range(len(board)):\n          col = \"\"\n          col += board[0][i]\n          col += board[1][i]\n          col += board[2][i]\n          col += board[3][i]\n          result = check_tuple(col)\n          if result[0]:\n              return result\n      return (False, \"Unknown result\")\n  \n  def check_diagonals(board):\n      main_diag = \"\"\n      main_diag += board[0][0]\n      main_diag += board[1][1]\n      main_diag += board[2][2]\n      main_diag += board[3][3]\n      result = check_tuple(main_diag)\n      if result[0]:\n          return result\n      \n      sec_diag = \"\"\n      sec_diag += board[0][3]\n      sec_diag += board[1][2]\n      sec_diag += board[2][1]\n      sec_diag += board[3][0]\n  \n      result = check_tuple(sec_diag)\n      if result[0]:\n          return result\n  \n      return (False,\"Unknown reason\")\n  \n      \n              \n      \n  \n  def check_board(board,might_have_finished):\n      result = check_rows(board)\n      if result[0]:\n          return result[1]\n      \n      result = check_columns(board)\n      if result[0]:\n          return result[1]\n      \n      result = check_diagonals(board)\n      if result[0]:\n          return result[1]\n  \n      if(might_have_finished):\n          return \"Game has not completed\"\n      return \"Draw\"\n      \n      \n      \n      \n      \n  \n  \n  for i in range(n):\n      board = []\n      might_have_finished = False\n      for j in range(4): \n          row = f.readline()[:-1]\n          if \".\" in row:\n              might_have_finished = True\n          board += [row]\n      print \"Case #%d: %s\" %(i+1, check_board(board,might_have_finished))\n      f.readline()\n  \n  f.close()\n  \n      \n      \n  \n  \n      \n", "substitutes": {"fileName": ["FilePath", "fNames", "FileNames", "basePath", " fileUrl", "fName", "FileUrl", "fPath", "filePath", "FileName", "baseDir", " filePath", "fileUrl", "fUrl", "FileDir", " fileDir", " fileNames", "fileNames", "fileDir", "baseName"], "f": ["ref", "fm", "form", "c", "af", "loop", "fc", "s", "fw", "body", "df", "d", "io", "fing", "p", "u", "m", "rf", "h", "r", "fb", "bf", "info", "ff", "fp", "o", "e", "z", "buff", "y", "raf", "arf", "handler", "l", "b", "t", "fx", "fr", "fa", "fed", "fs", "q", "sf", "folder", "w", "fo", "feed", "F", "file", "g", "v", "fd"], "n": ["nr", " N", "N", "nl", "c", "k", "s", "d", "p", "name", "u", "nb", "count", "number", "m", "nc", "r", "z", "no", "o", "e", "fn", "nt", "ns", "l", "t", "b", "np", "len", "net", "nn", "node", "w", "num", "sn", "g"], "boards": ["pieces", "anks", "orders", " Boards", " results", "Board", "boarding", "items", "builders", " rows", "rows", "views", "runs", "rooms", "odes", "forms", "cells", "forums", "cards", " scoreboard", "games", "plugins", "results", "objects", "boxes", "tests", "checks", "frames", "blocks", "groups", "codes", "lines", "holes", "ows", "jobs", "cats"], "row": ["flow", "item", "con", "range", "bug", "server", "event", "tr", "work", "clean", "sel", "roll", "round", "container", "du", "cell", "feed", "run", "wheel", "node", "sc", "gram", "string", "view", "sync", "block", "rows", "ack", "group", "card", "ward", "key", "way", "image", "line", "error", "rank", "rect", "roc", "word", "head", "raw", "page", "ro", "channel", "draw", "user", "box", "rc", "post", "array", "uc", "rown", "ow", "record", "che", "column", "rew", "co", "coll", "frame", "null", "reader", "ud", "query", "up", "object", "ride", "entry", "Row", "index", "insert"], "has_o": ["has_oa", "hasEo", "hasPon", "has__o", "hasEO", "has_y", "hasEon", "has__b", " has_on", " has_n", "has_O", "hasEx", "hasPx", " has_b", "has_b", "has__y", " has_e", " has_O", "has_n", "hasPo", "has__O", " has_y", " has_oa", " has_os", "has_e", "hasPO", "has_on", "has_os"], "has_x": ["has_z", " has_z", "has__o", "hasxz", "has_y", "has_v", " has_on", "has__x", "hasxx", "has__y", "hasxon", "has__v", " has_v", " has_y", "has_w", "hasxo", "has_on", " has_w"], "char": ["ctr", "attr", "text", "range", "cookie", "coord", "tr", "int", "gr", "start", "arc", "rr", "uri", "cell", "arg", "gap", "feature", "ur", "sc", "gram", "string", "color", "cmd", "tri", "chrom", "face", "ace", "name", "cer", "move", "inter", "category", "key", "Char", "cor", "sim", "void", "par", "oct", "ci", "hex", "ch", "c", "rule", "cat", "word", "html", "our", "u", "star", "pixel", "channel", "inch", "uint", " character", "chip", "ar", "car", "cur", "qu", "ce", "che", "square", "cand", "cue", "byte", "kick", "co", "url", "var", "coll", "back", "grave", "utf", "ou", "str", "addr", "letter", "match", "character", "entry", "course", "CHAR"], "board": ["land", "union", "slice", "flow", "fc", "range", "code", "one", "dom", "month", "bug", "server", "ault", "table", "event", "layout", "ide", "work", "clean", "foot", "stroke", "day", "round", "du", "product", "hop", "cell", "style", "device", "feed", "wheel", "node", "home", "form", "loop", "view", "sync", "block", "wall", "join", "card", "ack", "case", "group", "flight", "ward", "ac", "game", "line", "ko", "error", "stick", "rank", "deck", "custom", "room", "detail", "cam", "plan", "database", "control", "can", "ck", "plugin", "function", "comment", "Board", "boarding", "pace", "rule", "cat", "word", "head", "buffer", "bank", "page", "hub", "ro", "division", "channel", "league", "team", "draw", "flo", "hack", "box", "cross", "component", "conference", "front", "post", "model", "lc", "array", "nn", "batch", "state", "lane", "bo", "uc", "sequence", "hole", "design", "che", "ow", "square", "action", "down", "video", "an", "ull", "cart", "template", "co", "point", "ban", "coll", "back", "plane", "frame", "door", "check", "core", "lay", "list", "port", "wl", "object", "entry", "woman", "ode", "panel", "band"], "result": ["warning", "manager", "item", "success", "successful", "attr", "range", "code", "Result", "df", "note", "source", "table", "event", "date", "func", "method", "goal", "clean", "term", "next", "member", "the", "future", "acc", "output", "product", "diff", "iter", "arg", "feed", "num", "feature", "rate", "default", "color", "grade", "msg", "ner", "form", "master", "final", "view", "block", "cache", "join", "br", "card", "case", "group", "broad", "complete", "true", "step", "session", "only", "r", "res", "category", "dest", "game", "error", "answer", "description", "cash", "spec", "runner", "found", "reason", "ret", "package", "account", "err", "rect", "function", "comment", "value", "ge", "rule", "done", "mate", "our", "page", "current", "compl", "root", "mark", "draw", "user", "child", "rc", "role", "trace", "results", "ure", "content", "instance", "valid", "search", "data", "record", "status", "end", "response", "winner", "submit", "ver", "message", "desc", "parent", "sum", "cup", "call", "params", "url", "coll", "element", "option", "null", "check", "ok", "report", "up", "list", "match", "order", "resource", "new", "definition", "val", "entry", "filter", "dict", "score", "test"], "i": ["ip", "ie", "mini", "item", "id", "it", "part", "ki", "I", "oi", "ix", "my", "a", "e", "int", "uri", "pi", "fi", "ib", "num", "multi", "di", "ini", "k", "ai", "gi", "io", "uu", "p", "mi", "z", "o", "key", "t", "im", "ij", "iu", "ii", "ui", "ti", "ci", "ch", "qi", "c", "x", "api", "yi", "bi", "u", "page", "y", "uni", "l", "ri", "iq", "inner", "si", "ih", "v", "ind", "ion", "phi", "d", "number", "info", "gu", "xi", "q", "index", "li"], "col": ["con", "fc", "pc", "ct", "part", "icol", "table", "th", "cil", "inc", "sel", "sect", "cell", "path", "cos", "COL", "keep", "color", "cal", "disc", "cu", "block", "loc", "rol", "p", "count", "cm", "ac", "key", "patch", "pt", "collection", "cor", "label", "el", "temp", "feat", "ann", "ca", "can", "cp", "ci", "ch", "enc", "client", "c", "ol", "cat", "div", "section", "fl", "channel", "cond", "fil", "flo", "cy", "conn", "Col", "cross", "cl", "type", "oc", "il", "che", "dc", "cel", "pg", "column", "vel", "act", "co", "point", "coll", "ctrl", "nav", "character", "val", "index", "fact"], "main_diag": ["mainlydiand", "main_diags", "main__idiag", "main_triand", "main_kitag", "main_coage", "main_dagging", "main_iniace", "main_iniand", "main__diagging", "main_datags", "main_dagged", "main_datig", "main__diagn", "main_kiagged", "main_idiag", "main_dag", "main_diig", "mainlyiniace", "main_datagger", "mainlydiog", "main_gaagonal", "main_dagger", "main_disags", "main_dags", "mainlydiag", "main_triag", "main_biag", "main_diagn", "main_Diag", "main_disagger", "main_coagged", "main_disage", "main_triog", "main_Dialog", "main_coig", "main_diagonal", "main_diagger", "main_disag", "main_diagon", "main_iniag", "main_idiagn", "main_coagger", "main_cotag", "main_biags", "main_diand", "main_diage", "main_kiag", "main_diagged", "main_biagger", "main__idiagonal", "main_kiagger", "main_diagging", "main_gaagn", "main__idiagn", "main_idiagging", "main_Diagon", "mainlyiniag", "main_coags", "main_Diags", "main_idialog", "main_dagn", "main_biig", "main_dialog", "main_iniagon", "main_gaagging", "mainlydiace", "main_dtag", "main_diace", "main_idiagon", "main__diag", "main_gaag", "main_idiog", "main_datag", "main_idiace", "main_dage", "main_triace", "main_dagonal", "main_idiand", "main_iniags", "main_iniog", "main_idiags", "main_ditag", "main_diog", "main__idiagging", "mainlyiniand", "main_inialog", "main_coag", "main__diagonal", "mainlyiniog", "main_idiagonal"], "sec_diag": ["sec_daagn", "sec_adiagonal", "sec_dragon", "sec_dragn", "sec_idiagger", "sec_idiagram", "sec_dragonal", "sec_diagn", "sec_skiagger", "sec_liig", "secingdiah", "sec2idiob", "sec2diagger", "sec_reciag", "sec_liagger", "sec_idiah", "secingidiagon", "sec_diang", "sec_biagon", "sec_biagonal", "sec_skiagram", "sec_Diagger", "sec_skiagh", "sec_skialog", "sec_idiag", "sec_Diig", "sec_biob", "sec_biag", "sec_audiag", "sec_diagon", "sec_diob", "sec_idiagonal", "sec_dang", "sec_Diagon", "sec_skirag", "sec_daig", "sec_biagger", "sec2idiagram", "sec_skiag", "sec_dirag", "secingidiag", "secingdiag", "sec_reciagn", "sec_biagram", "sec_dialog", "sec_Diagn", "sec_liag", "secingidiagonal", "sec2diag", "sec_dalog", "sec2diob", "secingdiagon", "sec_dagn", "sec2idiag", "sec_diig", "sec_adiag", "sec_daagger", "sec_idiagon", "sec_adirag", "sec_skiob", "sec_adiagon", "sec_audiagh", "sec2idiagger", "sec2diagram", "sec_diagh", "sec_daag", "sec_diagger", "sec_liagn", "secingidiah", "sec_audialog", "sec_Diag", "sec_dag", "sec_audirag", "sec_adiah", "sec_drag", "sec_adialog", "sec_recialog", "sec_adiagh", "sec_diah", "sec_diagram", "sec_diagonal", "sec_reciang", "sec_biah", "secingdiagonal", "sec_idiob", "sec_Diagonal"], "might_have_finished": ["might_have_failed", "might_has_ended", "might_has_failed", "might_has_finished", "might_have_done", "might_have__done", "might_has_done", "might_have__ended", "might_have__finished", "might_have__failed", "might_have_ended"]}}
{"code": "filename = raw_input(\"Name of file: \")\n  infile = open(filename, \"r\")\n  outfile = open(filename + \".out\", \"w\")\n  \n  \n  T = int(infile.readline()[:-1])\n  \n  def addMinesDiagonally(r, c, m):\n      field = []\n      for i in range (r):\n          row = []\n          for j in range(c):\n              row += [\".\"]\n          field += [row]\n          \n      for i in range (r + c):\n          ver = min (i, r - 1)\n          hor = max (0, 1 + i - r)\n          while ver >= 0 and hor <= c - 1 and m > 0:\n              if m == 1 and hor == c - 2 and ver == r - 2:\n                  ver -= 1\n                  hor += 1\n              field[ver][hor] = \"*\"\n              ver -= 1\n              hor += 1\n              m -= 1\n          \n      return field\n  \n  def isPossible(field):\n      if field[-1][-1] != \".\":\n          return False\n      up = True\n      left = True\n      diag = True\n      if len(field) > 1 and field[-2][-1] != \".\":\n              up = len(field[-1]) <= 1\n      if len(field[-1]) > 1 and field[-1][-2] != \".\":\n              left = len(field) <= 1\n      if len(field) > 1 and len(field[-1]) > 1 and field[-2][-2] != \".\":\n          diag = False\n      return (up and left and diag) or \\\n             ((not up) and (not left) and (not diag))\n      \n  \n  for t in range(1, T + 1):\n      items = infile.readline()[:-1].split(\" \")\n      r = int(items[0])\n      c = int(items[1])\n      m = int(items[2])\n      field = addMinesDiagonally(r, c, m)\n      if isPossible(field):\n          field[-1][-1] = \"c\"\n          s = \"\"\n          for line in field:\n              for cell in line:\n                  s += cell\n              s += \"\n\"\n          outfile.write(\"Case #%d:\n%s\n\" %(t, s[:-1]))\n      else:\n          s = \"IMPOSSIBLE!!!!\n\"\n          for line in field:\n              for cell in line:\n                  s += cell\n              s += \"\n\"\n          outfile.write(\"Case #%d:\n%s\n\" %(t, s[:-1]))\n      \n          \n      \n  \n  outfile.close()\n  infile.close()\n", "substitutes": {"filename": ["jl", "email", "kl", "slice", "ername", "tail", "chapter", "tty", "login", "ename", "document", "jet", "journal", "nuclear", "amer", "word", "username", "name", "source", "that", "til", "pal", "uture", "ln", "lace", "kn", "pty", "sheet", "itled", "socket", "stem", "directory", "fp", "files", "url", "location", "fn", "FILE", "mble", "utf", "phrase", "fil", "doi", "f", "wl", "dll", "which", "ames", "nil", "SourceFile", "sf", "reenshot", "tin", "sql", "Filename", "selection", "title", "path", "knife", "binary", "subject", "there", "database", "file", "download", "figure", "il", "fd"], "infile": [" inFile", "outfilename", "Infile", "outstream", " infilename", "Infiles", "infilename", " inline", "outFile", " instream", "InFile", " infiles", "instream", "outfiles", "inFile", "outline", "Instream", "Infilename", "Inline", "infiles", "inline"], "outfile": [" outletter", "Outfile", " outf", "outstream", "Outline", " outline", "OUTletter", "outf", " outstream", "outFile", " outFile", "Outstream", "instream", "inletter", "outletter", "Outf", "OUTfile", "inFile", "outline", "inf", "OUTFile", "OUTstream", "inline"], "T": ["TM", "N", "TN", "NT", "n", "P", "I", "p", "G", "LT", "number", "L", "CT", "z", "K", "Z", "Y", "Size", "V", "W", "R", "H", "TH", "C", "U", "O", "TT", "A", "TF", "TA", "TR", "D", "WT", "S", "E", "Length", "w", "time", "M", "X", "B", "F", "Q", "type", "TS", "TI"], "r": ["nr", "rec", "sr", "right", "x", "ru", "k", "range", "d", "br", "p", "u", "tr", "ro", "h", "ir", "kr", "z", "rg", "o", "a", "e", "rd", "y", "cr", "l", "b", "rh", "re", "ra", "rb", "rn", "ri", "R", "f", "rc", "fr", "rr", "rs", "rt", "q", "ar", "w", "yr", "er", "pr", "ur", "min", "type", "n", "g", "err", "v"], "c": ["center", "uc", "cu", "dc", "right", "end", "x", "con", "k", "loc", "col", "ct", "cat", "d", "cc", "ec", "p", "u", "um", "cm", "h", "z", "ch", "cb", "co", "cs", "e", "y", "cn", "mc", "o", "a", "ac", "at", "cr", "l", "b", "cin", "en", "cy", "f", "rc", "C", "g", "q", "lc", "ar", "nc", "max", "w", "ca", "ii", "cl", "min", "cp", "ci", "n", "sc", "ce", "v"], "m": ["mn", "range", "mm", "rm", "tr", "ir", "h", "at", "a", "e", "sm", "b", "md", "pi", "tm", "er", "min", "ur", "n", "over", "mu", "k", "am", "p", "mon", "mi", "cm", "z", "o", "all", "mc", "em", "im", "mr", "ym", "w", "meter", "x", "bm", "u", "y", "l", "machine", "en", "f", "M", "type", "v", "dm", "fm", "vm", "end", "an", "d", "um", "pm", "re", "om", "module", "q", "time", "arm", "g"], "field": ["input", "slice", "manager", "flow", "fc", "range", "id", "code", "pod", "part", "server", "FIELD", "source", "table", "_", "this", "event", "h", "cmp", "e", "sort", "term", "area", "ield", "pull", "format", "day", "update", "diff", "style", "farm", "er", "feature", "file", "node", "string", "dd", "form", "fields", "block", "length", "cache", "p", "group", "case", "card", "uf", "bf", "z", "all", "key", "old", "patch", "force", "error", "label", "load", "lock", "package", "seed", "play", "wire", "function", "comment", "condition", "value", "rule", "layer", "word", "section", "pick", "page", "off", "Field", "fb", "change", "machine", "op", "user", "child", "f", "box", "component", "util", "player", "model", "post", "array", "folder", "type", "eff", "v", "add", "data", "record", "end", "cel", "message", "document", "parent", "d", "result", "service", "um", "number", "column", "url", "coll", "element", "frame", "option", "null", "ld", "check", "fix", "zip", "query", "list", "len", "order", "match", "object", "module", "space", "filter", "man", "flower", "time", "ff"], "i": ["ini", "ip", "ie", "qi", "ind", "x", "k", "phi", "range", "id", "ai", "yi", "d", "I", "io", "p", "u", "mi", "ir", "h", "z", "ch", "cm", "o", "e", "y", "area", "l", "int", "b", "ri", "f", "im", "iu", "il", "xi", "g", "pi", "q", "ar", "w", "ii", "ui", "ti", "min", "index", "si", "ci", "n", "li", "v", "di"], "row": ["uc", "v", "ow", "form", "value", "x", "block", "range", "id", "k", "month", "bug", "server", "our", "rows", "step", "group", "tr", "column", "ro", "h", "ul", "o", "all", "key", "coll", "element", "cr", "query", "child", "box", "port", "rank", "order", "rc", "f", "round", "model", "array", "max", "Row", "w", "feed", "num", "feature", "cur", "type", "index", "ry", "node", "sc", "col"], "j": ["je", "k", "block", "code", "col", "ct", "cc", "section", "seq", "p", "cm", "jam", "jac", "z", "co", "o", "e", "y", "ac", "cf", "ell", "b", "cy", "f", "sec", "im", "ij", "ice", "un", "q", "cycle", "oj", "year", "ib", "ci", "jc", "g", "v"], "ver": ["con", "range", "Ver", "bug", "dr", "ir", "vr", "h", "ear", "cr", "b", "gr", "version", "rr", "cher", "iver", "iter", "pair", "yr", "er", "num", "feature", "min", "ur", "vers", "over", "browser", "conv", "ner", "br", "p", "river", "inter", "res", "train", "ra", "rank", "mr", " vers", "oor", "oy", "err", "air", "VER", "reach", "x", "ter", "aver", "vor", "root", "l", "user", "f", "gener", "cv", "car", "pr", "cur", "type", "mir", "v", "ve", "cover", "var", "coll", "re", "om", "ever", "fr", "vert", "test", "av", "col"], "hor": ["Hor", "dom", "coord", "hum", "tr", "vr", "ir", "h", "adr", "cr", "b", "version", "uri", "lor", "cro", "dy", "hover", "ur", "ho", "ior", "over", "multi", "home", "tri", "chrom", "norm", "loc", "ov", "xy", "br", "broad", "mi", "nor", "eor", "ra", "cor", "im", "mr", "oh", "oor", "oy", "rub", "shadow", "dim", "meter", "hide", "air", "hi", "reach", "lim", "hov", "bor", "aver", "vor", "hr", "uber", "hub", "rum", "rh", "mor", "flo", "ri", "lo", "cv", "car", "hy", "pr", "cur", "floor", "mir", "v", "far", "ha", "d", "orient", "um", "hom", "low", "door", "om", "ever", "mar", "flower", "vert", "dir"], "up": ["ip", "union", "home", "flow", "upp", "around", "upe", "ma", "plus", "api", "initial", "setup", "down", "upper", "one", "pre", "UP", "div", "parent", "mp", "length", "sup", "name", "u", "upid", "ahead", "omp", "sum", "p", "cup", "um", "sym", "move", "exp", "all", "a", " Up", "coll", "uv", "lip", "back", "area", "op", "ou", "ra", "user", "rup", "ama", "primary", "ure", "equal", "update", "array", "room", "top", "lock", "ups", "w", "ame", "own", "pr", "ur", "ext", "uph", "upt", "floor", "ap", "uper", "dir", "over", "Up"], "left": ["NL", "long", "right", "flow", "plus", "two", "pos", "le", "ly", "limited", "size", "ell", "cle", "wrong", "none", "min", "la", "leave", "ner", "loc", "length", "double", "p", "sp", "o", "all", "place", "Left", "yl", "el", "cloud", "sl", "lock", "elt", "led", "control", "bl", "hide", "out", "lim", "where", "width", "off", "fl", "limit", "pl", "l", "flo", "lo", "byn", "inner", "ml", "lu", "cl", "log", "il", "fail", "rel", "level", "nl", "lic", "down", "d", "L", "ul", "exp", "url", "offset", "law", "low", "null", "lt", "len", "dl", "lon", "li"], "diag": ["diig", "liap", " diags", "liig", "biagn", "liog", " diap", "siig", "liags", "diagg", "siagn", "diagn", "liag", "diagram", "biog", "liagg", "diags", " diagn", "siags", "biag", " diagram", "Diags", "Diagn", " diig", "siagram", "Diap", " diagg", "liagn", "siag", "Diag", "diap", "biags", "diog", "siagg", " diog", "Diagram"], "t": ["tom", "td", "tu", "x", "out", "text", "col", "tf", "d", "length", "tl", "p", "u", "tim", "table", "tz", "tr", "st", "h", "z", "template", "o", "at", "e", "y", "a", "dt", "nt", "l", "ut", "ty", "int", "b", "len", "ts", "f", "total", "ot", "rt", "title", "tt", "ta", "w", "time", "type", "test", "n", "v"], "items": ["item", "classes", "charges", "files", "loads", "comments", "styles", "boxes", "keys", "bars", "xs", "xml", "steps", "features", "Items", "letters", "fields", "json", "eps", "docs", "gets", "rows", "opens", "flows", "pages", "lbs", "types", "users", "ops", "plugins", "objects", "photos", "groups", "abs", "ids", "cats", "notes", "pieces", "orders", "ins", "links", "values", "models", "es", "lists", "cells", "words", "planes", "results", "js", "blocks", "phones", "bytes", "units", "projects", "bands", "qs", "ips", "apps", "articles", "images", "sites", "amples", "vals", "events", "names", "details", "tests", "breaks", "bs", "strings", "lines", "tops", "codes"], "s": ["input", "slice", "services", "id", "pos", "I", "sets", "_", "sym", "size", "e", "cs", "a", "sort", "b", "comments", "format", "parts", "n", "append", "string", "ing", "k", "ments", "south", "rows", "join", "p", "case", "z", "sp", "o", "sv", "states", "types", "ts", "ops", "us", "sb", "spec", "sf", "ss", "w", "sl", "groups", "B", "x", "ions", "settings", "ins", "u", "ed", "y", "es", "l", "ns", "cells", "words", "ses", "f", "als", "results", "ds", "js", "S", "ws", "blocks", "si", "sample", "v", "bytes", "span", "add", "ips", "ls", "d", "params", "series", "sg", "match", "single", "new", "os", "gs", "X", "strings", "lines", "ps", "g"], "line": ["ine", "flow", "end", "loop", "cel", "block", "range", "rule", "code", "one", "layer", "section", "length", "lin", "group", "name", "case", "table", "number", "lace", "unit", "column", "no", "edge", "co", "point", "all", " inline", "ell", "frame", "l", "draw", "struct", "liner", "len", "chain", "f", "link", "Line", "lo", "object", "single", "un", "cycle", "el", "write", "lc", "set", "lined", "lines", "file", "n", "string", "li", "inline", "col"], "cell": ["v", "sub", "add", "long", "input", "ind", "cel", "block", "text", "range", "chart", "code", "cat", "div", "section", "length", "case", "group", "count", "ill", "char", "number", "Field", "column", "call", "unit", "z", "ch", "all", "coll", "cond", "ell", "l", "int", "cells", "struct", "str", "child", "letter", "f", "pattern", "match", "un", "Cell", "label", "character", "tab", "entry", "temp", "feed", "year", "string", "inline", "col"]}}
{"code": " dictionary = {\n      \"a\":\"y\",\n      \"b\":\"h\",\n      \"c\":\"e\",\n      \"d\":\"s\",\n      \"e\":\"o\",\n      \"f\":\"c\",\n      \"g\":\"v\",\n      \"h\":\"x\",\n      \"i\":\"d\",\n      \"j\":\"u\",\n      \"k\":\"i\",\n      \"l\":\"g\",\n      \"m\":\"l\",\n      \"n\":\"b\",\n      \"o\":\"k\",\n      \"p\":\"r\",\n      \"q\":\"z\",\n      \"r\":\"t\",\n      \"s\":\"n\",\n      \"t\":\"w\",\n      \"u\":\"j\",\n      \"v\":\"p\",\n      \"w\":\"f\",\n      \"x\":\"m\",\n      \"y\":\"a\",\n      \"z\":\"q\",\n      \" \":\" \"    \n      }\n  \n  def translate(sen):\n      \n      new_sen = \"\"\n  \n      for char in sen: #translate each charecter\n          new_sen += dictionary[char]\n          \n      return new_sen\n  \n  fileName = raw_input(\"File name: \")\n  f = open(fileName,\"r\")\n  \n  n = int(f.readline()[:-1])\n  cases = [] #keeps the input msgs\n  \n  for i in range(n):\n      cases += [f.readline()[:-1]]\n  \n  f.close()\n  \n  \n  for i in range(n): # print out\n      print \"Case #%d: %s\" %(i+1, translate(cases[i]))\n      \n      \n  \n  \n      \n", "substitutes": {"dictionary": ["drama", " dict", "ddict", "fdictionary", "diamond", "dinitions", "Diamond", "Dictionary", "fdinitions", "fictionary", "Dict", "fdiction", " drama", "fiction", "indict", "indiamond", "fdict", " diction", "dict", "fddict", " ddict", " diamond", "indrama", "indictionary", " dinitions", "finitions", "diction", "Drama"], "sen": ["sr", "su", "enc", "son", "ton", "con", "text", "pen", "loc", "code", "document", "issa", "ence", "length", "ele", "case", "source", "ens", "paren", "sex", "ign", "sa", "Sen", "coll", "const", "sel", "sv", "len", "str", "en", "lex", "dn", "match", "spec", "sign", "filename", "termin", "character", "ser", "sur", "set", "score", "sl", "esc", "sem", "pair", "sn", "src", "cur", "si", "cas", "sc", "string", "cal", "se"], "new_sen": ["newJser", "newjsel", "new_ser", "newJse", "newJsen", " new_sign", "newjsen", "new_sel", " new_ser", " new_se", "newjse", "newjser", " new_pen", "new_sign", " new_sn", " new_sel", "newJpen", "new_pen", "new_sn", "newjsn", "new_se", "newjsign"], "char": ["chan", "su", "sr", "ctr", "ord", " characters", " c", "attribute", "attr", " CHAR", " word", "usc", "text", "face", "chrom", " cs", "catch", "ident", "word", "ace", "coord", " glyph", "dr", "\u00e7", "sch", "cue", "cer", "cap", "sin", "key", "sex", "Char", "escape", "utf", " Char", "inch", "letter", "cor", "vec", " character", "void", "chip", "character", " chars", "sur", " letter", "cel", " ch", "car", "cell", "esc", "cur", "CHAR", "separ", "gram", "string", "ch"], "fileName": ["FilePath", "classname", " fileNumber", "fName", "fPath", "FileName", "filePath", " filePath", "fileNumber", "fNumber", " filename", "FileNumber", "filename", "fname", "Filename", "className", "classPath"], "f": ["die", "fm", "uf", "rf", "form", "c", "x", "loop", "fc", "k", "af", "ab", "s", "fw", "of", "d", "io", "p", "u", "m", "bf", "h", "r", "fb", "lf", "z", "ff", "fp", "a", "e", "y", "fn", "buff", "o", "l", "b", "t", "fe", "xf", "force", "fr", "fa", "fed", "fs", "fi", "q", "found", "folder", "w", "fo", "j", "feed", "fold", "inf", "F", "full", "file", "g", "v", "fd"], "n": ["N", "ner", "nl", "c", "x", "sync", "k", "s", "d", "p", "name", "u", "nb", "count", "number", "m", "ln", "h", "nc", "z", "r", "no", "o", "size", "e", "cn", "fn", "y", "a", "nt", "non", "ns", "b", "l", "t", "nor", "len", "en", "ne", "net", "un", "nn", "w", "left", "j", "num", "sn", "nan", "g", "v"], "cases": ["rams", " tests", "les", "ances", "gets", "suits", "rows", "chains", "classes", "case", "ches", "opens", "clips", "steps", "charges", "reports", "tips", "runs", "apes", "ports", "amples", "rooms", "sheets", "cs", "files", "ases", "events", "forms", "ices", "es", "lets", "pes", "states", "ples", "cells", "ces", "comments", "sections", "words", "names", "types", "limits", " Cases", "books", "acts", "ues", "results", "uses", "details", "ends", "boxes", "tests", "shows", "breaks", "checks", "frames", "blocks", "ups", "groups", "changes", "codes", "lines", "strings", "cas", "phones", "ps", "packs", "holes", "times", "ex", "config", "features"], "i": ["ini", "idi", "ip", "bis", "ie", "qi", "ind", "mini", "end", "x", "c", "ni", "init", "id", "ai", "s", "yi", "ji", "gi", "d", "I", "bi", "io", "p", "u", "zi", "mi", "m", "h", "abi", "z", "ix", "cli", "o", "a", "e", "y", "adi", "iii", "l", "int", "b", "udi", "uni", "aci", "ri", "start", "ani", "ij", "iu", "iq", "xi", "pi", " j", "q", "vi", "diff", "ii", "j", "ui", "batch", "ali", "ti", "index", "si", "ci", "li", "multi", "v", "di"]}}
{"code": " \n  def read_word(f):\n      return next(f).strip()\n  \n  def read_int(f, b=10):\n      return int(read_word(f), b)\n  \n  def read_letters(f):\n      return list(read_word(f))\n  \n  def read_digits(f, b=10):\n      return [int(x, b) for x in read_letters(f)]\n  \n  def read_words(f, d=' '):\n      return read_word(f).split(d)\n  \n  def read_ints(f, b=10, d=' '):\n      return [int(x, b) for x in read_words(f, d)]\n  \n  def read_floats(f, d=' '):\n      return [float(x) for x in read_words(f, d)]\n  \n  def read_arr(f, R, reader=read_ints, *args, **kwargs):\n      res = []\n      for i in range(R):\n          res.append(reader(f, *args, **kwargs))\n      return res\n  \n  def solve(solver, fn, out_fn=None):\n      in_fn = fn + '.in'\n      if out_fn is None:\n          out_fn = fn + '.out'\n      with open(in_fn, 'r') as fi:\n          with open(out_fn, 'w') as fo:\n              T = read_int(fi)\n              for i in range(T):\n                  case = read_case(fi)\n                  res = solver(case)\n                  write_case(fo, i, res)\n  \n  \n  def read_case(f):\n      [N, M] = read_ints(f)\n      A = read_arr(f, N)\n      return (N, M, A)\n  \n  def write_case(f, i, res):\n      f.write('Case #%d: '%i)\n      f.write('%s'%res)\n      f.write('\n')\n  \n  \n  def solve_small(case):\n      (N, M, A) = case\n      rows = [max(row) for row in A]\n      cols = [max(row[j] for row in A) for j in range(M)]\n      for i in range(N):\n          for j in range(M):\n              if A[i][j] < min(rows[i], cols[j]):\n                  return 'NO'\n      return 'YES'\n  \n  def solve_large(case):\n      return solve_small(case)\n  \n  DEBUG = 'i'\n  \n", "substitutes": {"f": ["ref", "input", "af", "field", "fc", "of", "df", "this", "func", "h", "lf", "flat", "fp", "files", "e", "fen", "cf", "fam", "rb", "fx", "fed", "fs", "fi", "free", "feed", "feature", "inf", "F", "file", "n", "fat", "die", "conf", "form", "io", "p", "m", "uf", "bf", "r", "tif", "o", "buff", "arf", "t", "fe", "xf", "sf", "found", "w", "fun", "function", "c", "fore", "api", "forum", "s", "fw", "tf", "fish", "html", "u", "page", "off", "fl", "rf", "fb", "self", "handler", "l", "fa", "fo", "v", "fd", "fm", "fing", "info", "frame", "fit", "fr", "ft", "fac", "ff", "g", "fold"], "b": ["be", "end", "c", "ab", "lb", "k", "block", "split", "s", "body", "bi", "length", "p", "u", "nb", "pb", "m", "bc", "bf", "r", "z", "h", "aa", "fb", "o", "a", "e", "y", "db", "limit", "l", "t", "rb", "bp", "base", "bb", "sb", "ba", "dy", "bd", "eb", "bs", "ub", "w", "ib", "B", "type", "abs", "n", "bl", "g", "wb", "bh", "v"], "x": ["data", "input", "long", "xc", "xa", "c", "k", "text", "id", "xt", "xy", "s", "width", "pos", "word", "xxxx", "p", "u", "xxxxxxxx", "rx", "_", "m", "h", "r", "ix", "z", "px", "co", "o", "e", "y", "sex", "get", "bit", "xp", "l", "int", "t", "xf", "en", "xe", "fx", "ax", "xi", "q", "max", "string", "xxx", "w", "xx", "ext", "num", "X", "index", "valid", "xs", "ci", "wx", "n", "xml", "full", "ex", "g", "v", "xb"], "d": ["dm", "dd", "data", "dc", "ind", "direction", "end", "c", "split", "k", "id", "part", "dh", "p", "name", "u", "dat", "m", "h", "r", "z", "sd", "o", "e", "y", "dir", "a", "db", "da", "dt", "l", "ad", "t", "md", "nd", "dx", "ld", "ud", "do", "start", "dn", "D", "ds", "dy", "di", "dl", "cd", "diff", "dict", "dp", "w", "type", "dim", "n", "g", "v", "fd"], "R": ["SR", "RP", "RW", "range", "Reader", "JR", "P", "I", "length", "CR", "NR", "WR", "Rs", "G", "Res", "L", "r", "K", "Y", "Range", "V", "W", "H", "RR", "C", "U", "O", "RM", "RL", "BR", " r", "rs", "TR", "D", "RF", "S", "array", "RA", "Array", "E", "OR", "Rh", "RG", "X", "B", "F", "Q", "RO", "DR", "RN", "v"], "reader": ["function", "data", "slice", "client", "transfer", "proc", "ner", "value", "Reader", "rar", "df", "writer", "io", "length", "buffer", "source", "worker", "loader", "wrapper", "cer", "r", "read", "channel", "old", "handler", "rb", "rh", "report", "rer", "rc", "builder", "resource", "rr", "spec", "uri", "inner", "parser", "q", "runner", "ar", "ride", "lc", "entry", "load", "driver", "ctor", "finder", "iter", "w", "pair", "reading", "er", "feed", "rot", "ler", "callback", "default", "seed"], "res": ["rec", "right", "range", "Result", "remote", "resh", "rss", "req", "RES", "ros", "cs", "cases", "gr", "fi", "rs", "features", "reg", "resolution", " Res", "su", "rez", "RE", "me", "arr", "Rs", "runs", "r", "all", "args", "ms", "error", "us", "rem", "ras", "spec", "ries", "rap", "obj", "ret", "err", "ch", "rys", "rest", "init", "out", "rev", "pre", "our", "ins", "ches", "values", "self", "exc", "es", "rh", "ri", "rc", "results", "resp", "blocks", "Response", "sr", "end", "response", "relations", "Case", "catch", "result", "rx", "Results", "Res", "cons", "ress", "powers", "vals", "co", "re", "we", "RS", "ES", "fr", "resource", "match", "details", "q", "val", "pres", "breaks", "bs", "os", "ris", "ps", "ry"], "i": ["ip", "ie", "ni", "id", "it", "pos", "I", "ki", "example", "_", "ir", "func", "ix", "a", "e", "int", "start", "uri", "pi", "fi", "feed", "num", "n", "multi", "di", "ini", "iw", "k", "ai", "ji", "gi", "io", "p", "mi", "m", "r", "z", "o", "t", "im", "ij", "iu", "w", "ii", "ui", "ti", "ci", "ia", "ei", "function", "qi", "c", "out", "init", "s", "yi", "chi", "bi", "u", "zi", "ed", "ic", "y", "l", "ri", "iq", "g", "D", "J", "si", "ih", "v", "ind", "end", "phi", "info", "exp", "len", "xi", "q", "dict", "ik", "index", "li"], "solver": ["insolver", "seolution", "Solver", "solved", "ssolved", "insolution", "ssolving", "insolve", "solve", "ssolve", "solving", "seolved", "seolving", "Solution", "ssolver", "Solved", "Solve", "solution", "seolver", "ssolution", "Solving", "insolved"], "fn": ["function", "enc", "rf", "fun", "c", "sync", "fc", "out", "text", "loc", "orn", "lib", "fat", "io", "name", "p", "ln", "fl", "bf", "func", "nc", "m", "fb", "h", "kn", "fp", "o", "r", "fen", "cn", "cf", "txt", "bn", "FN", "dn", "format", "wl", "prefix", "il", "fa", "filename", "fi", "output", "native", "sf", "fs", "nm", "feat", "path", "node", "sn", "file", "n", "wt", "v", "fd"], "out_fn": ["outCfn", "out_fc", "outFilefp", "in_fc", "in_coll", "out_fs", "outFilefs", "out_coll", "out_n", "in_file", "out_bin", "in_fs", "outFilefilename", "out2fc", "outFilebin", "out2fn", "outCfilename", "in_bin", "outFilen", "out_fp", "in_fp", "outCcoll", "out_path", "in_filename", "out_file", "out2fp", "in_n", "in_path", "outCfs", "out_filename", "outFilecoll", "out2n", "outFilefn"], "in_fn": ["in_fd", "in64root", "in64fn", "in64path", "out_fd", "bin_fp", "in_root", "bin_path", "inamefd", "inamefp", "bin_root", "out_fp", "in_fp", "inamefat", "out_fat", "in64fp", "in_path", "bin_fn", "inamefn", "in_fat"], "T": ["PI", "TN", "NT", "P", "I", "length", "p", "G", "L", "CT", "CL", "K", "Z", "Y", "Time", "t", "Tu", "V", "W", "H", "C", "O", "U", "TT", "TA", "D", "TB", "Mi", "S", "E", "J", "Tab", "X", "B", "F", "Q", "type", "Type", "TS", "TI", "Test", "CI"], "case": ["slice", "con", "text", "id", "code", "bug", "table", "size", "e", "a", "cases", "cr", "C", "fi", "path", "cell", "pair", "feed", "shift", "cas", "sc", "default", "rice", "config", "conf", "form", "use", "P", "ace", "cache", "length", "p", "cer", "r", "key", "fe", "base", "line", "force", "pe", "ice", "ch", "rest", "c", "rule", "section", "change", "fa", "model", "array", "trial", "fo", "instance", "type", "app", "ce", "sequence", "che", "end", "Case", "catch", "result", "switch", "call", "info", "co", "ase", "core", "match", "ride", "space", "shape", "time", "X", "test", "address", "fact"], "N": ["Ni", "NL", "NA", "NY", "NI", "GN", "NT", "KN", "Ne", "I", "P", "Mo", "NJ", "NE", "Name", "NO", "G", "CN", "MN", "L", "NS", "CL", "K", "Y", "Z", "NH", "SN", "Num", "V", "W", "H", "Na", "OS", "C", "O", "U", " n", "Len", "Wh", "D", "S", "E", "J", "Ns", "X", "B", "F", "NN", "Q", "AN", "n", "NG", "RN", "NC", "NM", "CNN"], "M": ["EM", "MAN", "Ma", "DM", "MS", "OM", "MF", "MO", "IM", "I", "P", "Mo", "CM", "G", "MN", "m", "L", "JM", "FM", "AM", "IN", "K", "Y", "Z", "LM", "MR", "V", "W", "H", "MT", "C", "O", "U", "RM", "MOD", "D", "MD", "MA", "E", "Mi", "S", "MP", "J", "Me", "MM", "X", "B", "F", "Q", "Ms", "MC", "n", "NM", "AN"], "A": ["If", "Alpha", "I", "G", "An", "Z", "a", "area", "Av", "AU", "V", "W", "Na", "AY", "C", "U", "O", "TA", "AS", "Az", "LA", "F", "Q", "All", "AR", "P", "And", "Ar", "K", "H", "mA", "RA", "AW", "B", "Data", "CA", "SA", "Up", "AN", "AC", "At", "Ac", "Y", "API", "AB", "Ab", "AA", "This", "D", "IA", "S", "array", "Array", "J", "Ma", "NA", "As", "Case", " a", "an", "AL", "Am", "L", "AM", "HA", "MA", "E", "Row", "AP", "X"], "rows": ["data", "orders", "fields", "airs", "posts", "items", "s", "ins", "raw", "classes", "runs", "values", "h", "images", "marks", "models", "events", "forms", "es", "cases", "cells", "pages", "names", "types", "users", "limits", "errors", "maps", "results", "headers", "details", "rs", "ks", "rules", "objects", "members", "tests", "breaks", "frames", "array", "Row", "days", "w", "blocks", "feed", "groups", "keys", "lines", "index", "xs", "ows", "hs", "ids", "times", " arrays", "features", "col"], "row": ["slice", "item", "range", "month", "bug", "mm", "iii", "jj", "ax", "cycle", "dy", "cell", "pair", "feed", "num", "run", "ho", "node", "sc", "tri", "view", "block", "k", "xy", "uu", "p", "group", "mi", "m", "r", "ward", "key", "line", "error", "rank", "ij", "oy", "cube", "ch", " col", "raw", "aj", "page", "u", "ro", "y", "rh", "user", "ay", "ri", "mo", "rc", "model", "post", "array", "nn", "batch", "app", "ram", "uc", "ow", "record", "ind", "ha", "result", "scale", "sum", "column", "co", "frame", "order", "q", "ride", "entry", "Row", "X", "index", "test", "go", "col"], "cols": ["alignes", "columnords", "columns", "columnes", " colords", "colords", "aligns", "alignords", " coles", "coles", "columnows", "colows", "alignows", " colows"], "j": ["jl", "uj", "ie", "ja", "ind", "qi", "c", "je", "k", "jo", "ai", "col", "ji", "jet", "I", "aj", "p", "br", "m", "h", "ch", "z", "r", "o", "a", "e", "y", "l", "int", "kj", "jj", "im", "ij", "iu", " n", "jp", "g", "q", "js", "IJ", "obj", "max", "cell", "J", "dj", "ii", "w", " l", "oj", "min", "si", "adj", "n", "jc", "li", "v"]}}
{"code": " \n  __file__ = sys.argv[0]\n  __path__ = os.path.dirname(__file__)\n  __prob__ = os.path.basename(__path__)\n  \n  def pout(s, back=0):\n      f = sys._getframe(back+1)\n      d = 0\n      if 'depth' in f.f_locals:\n          d = f.f_locals['depth']\n      print(' '*d + s + ' = ' + repr(eval(s, f.f_globals, f.f_locals)))\n  \n  def perr(s, back=0):\n      f = sys._getframe(back+1)\n      d = 0\n      if 'depth' in f.f_locals:\n          d = f.f_locals['depth']\n      ERR_FILE.write(' '*d + '%s = %s\n'%(s, repr(eval(s, f.f_globals, f.f_locals))))\n  \n  def argmin(f, s=None):\n      a = f\n      if s is None:\n          s = range(len(a))\n          f = lambda i: a[i]\n      res = None\n      for x in s:\n          y = f(x)\n          if res is None or best > y:\n              best = y\n              res = x\n      return res\n  \n  def argmax(f, s=None):\n      a = f\n      if s is None:\n          s = range(len(a))\n          f = lambda i: a[i]\n      res = None\n      for x in s:\n          y = f(x)\n          if res is None or best < y:\n              best = y\n              res = x\n      return res\n  \n  def read_word(f):\n      return next(f).strip()\n  \n  def read_int(f, b=10):\n      return int(read_word(f), b)\n  \n  def read_words(f, d=' '):\n      return read_word(f).split(d)\n  \n  def read_ints(f, b=10, d=' '):\n      return [int(x, b) for x in read_words(f, d)]\n  \n  def read_word_arr(f, R):\n      res = []\n      for i in range(R):\n          res.append(read_word(f))\n      return res\n  \n  def read_ints_arr(f, R, dtype=int, *args, **kwargs):\n      res = []\n      for i in range(R):\n          res.append(read_ints(f, *args, **kwargs))\n      return numpy.array(res, dtype)\n  \n  def solve(solver, fn, start_case=0, end_case=None, out_fn=None):\n      global ERR_FILE\n      in_fn = fn + '.in'\n      if out_fn is None:\n          out_fn = fn + '.out'\n      err_fn = fn + '.err'\n      if start_case == 0:\n          append = True\n          if os.path.exists(out_fn):\n              with open(out_fn, 'r') as f:\n                  for l in f:\n                      if l[:6] == 'Case #':\n                          start_case = int(l[6:l.index(':')])+1\n      else:\n          append = False\n      with open(in_fn, 'r') as fi:\n          with open(out_fn, 'a' if append else 'w') as fo:\n              with open(err_fn, 'w') as ERR_FILE:\n                  T = read_int(fi)\n                  for i in range(T):\n                      case = read_case(fi)\n                      if i+1 < start_case:\n                          continue\n                      print('Case #%d of %d'%(i+1, T))\n                      ERR_FILE.write('Case #%d of %d\n'%(i+1, T))\n                      perr('case')\n                      res = solver(case)\n                      perr('res')\n                      write_case(fo, i, res)\n                      fo.flush()\n                      if end_case is not None and i+1 == end_case:\n                          break\n  \n  def test(start_case=1, end_case=None):\n      fn = os.path.join(__path__, 'test')\n      solve(solve_small, fn, start_case, end_case)\n  \n  def small(start_case=1, end_case=None):\n      fn = os.path.join(__path__, '%s-small-attempt0'%__prob__)\n      solve(solve_small, fn, start_case, end_case)\n  \n  def small2(start_case=1, end_case=None):\n      fn = os.path.join(__path__, '%s-small-attempt0'%__prob__)\n      solve(solve_large, fn, start_case, end_case, fn + '2.out')\n  \n  def large(start_case=0, end_case=None):\n      fn = os.path.join(__path__, '%s-large-attempt0'%__prob__)\n      solve(solve_large, fn, start_case, end_case)\n  \n  \n  def read_case(f):\n      (A, B) = read_ints(f)\n      return (A, B)\n  \n  def write_case(f, i, res):\n      f.write('Case #%d: '%(i+1))\n      f.write('%s'%res)\n      f.write('\n')\n  \n  FAIL = 'NO SOLUTION'\n  \n  def aux(n, a, b):\n      res = 0\n      s = set()\n      for i in range(1, len(n)):\n          m = n[i:]+n[:i]\n          if m > n and m >= a and m <= b and m not in s:\n              res += 1\n              s.add(m)\n      return res\n  \n  def solve_small(case):\n      (A, B) = case\n      a = str(A)\n      b = str(B)\n      res = 0\n      for n in range(A, B+1):\n          res += aux(str(n), a, b)\n      return res\n  \n  solve_large = solve_small\n  \n  pout = perr\n", "substitutes": {"__file__": ["__name___", " __path___", "__file___", "__log__", "__path____", " __file____", " __file___", "__name__", "__call____", " __path____", "__name____", "__file____", "__log____", "__log___", "__call__", "__path___", "__call___"], "__path__": [" __path___", "__file___", " __dir_", "__log__", "__path____", "__dir___", " __path_", " __file___", "__method__", "__dir_", "__method___", " __dir___", " __dir__", " __path____", "__file_", "__file____", "__log_", "__log____", "__log___", "__call__", "__path___", " __dir____", "__dir____", "__call___", "__path_", "__dir__"], "__prob__": ["__proot__", "__peb___", "__proc___", "__pebe__", "__prob___", "__proot____", "__peb__", "__peb____", "__probe___", "__proot___", "__proc____", "__pebe___", "__prob____", "__proc__", "__probe____", "__probe__", "__pebe____"], "s": ["input", "services", "id", "source", "sets", "sym", "h", "func", "files", "e", "cs", "save", "comments", "sing", "ans", "fs", "sql", "stat", "inf", "full", "sc", "times", "sign", "string", "features", "su", "http", "conf", "sync", "k", "rows", "sup", "p", "name", "seconds", "flows", "r", "sd", "z", "o", "args", "sa", "old", "sv", "states", "t", "uns", "ops", "ts", "us", "sec", "sb", "sid", "small", "spec", "ks", "stable", "sf", "say", "ss", "w", "sl", "ats", "groups", "secure", "se", "function", "c", "ssl", "value", "storage", "posts", "sh", "u", "ches", "sq", "self", "es", "ns", "words", "ses", "ds", "js", "S", "ws", "j", "state", "si", "sample", "v", "network", "sys", "status", "qs", "ls", "service", "suff", "side", "request", "st", "info", "sites", "params", "forms", "https", "secondary", "str", "sg", "resource", "single", "new", "q", "space", "set", "os", "gs", "time", "site", "strings", "lines", "ps", "has", "second", "sk", "g", "native"], "back": ["stage", "add", "backed", "input", "right", "home", "short", "end", "bottom", "half", "down", "id", "bug", "part", "head", "length", "p", "side", "reverse", "supp", "off", "session", "date", "st", "ce", "self", "backs", "first", "db", "before", "da", "der", "callback", "Back", "ud", "child", "BACK", "base", "pull", "force", "depth", "now", "cost", "round", "front", "q", "du", "D", "last", "diff", "forward", "left", "time", "shift", "state", "ck", "support", "g", "att", "close"], "f": ["ref", "input", "af", "field", "fc", "of", "part", "df", "this", "lf", "h", "func", "flat", "fp", "e", "fen", "cf", "fx", "fed", "fs", "fi", "framework", "diff", "free", "feed", "er", "feature", "aff", "inf", "F", "full", "file", "http", "conf", "form", "k", "p", "fab", "uf", "bf", "r", "z", "cb", "o", "all", "buff", "t", "fe", "xf", "fast", "sf", "img", "found", "w", "fu", "ef", "fun", "elf", "function", "c", "fore", "api", "fw", "tf", "html", "u", "page", "current", "rf", "fb", "root", "self", "es", "handler", "fa", "al", "fo", "j", "v", "fd", "fm", "sys", "end", "ph", "um", "info", "frame", "fit", "fr", "new", "q", "ft", "os", "fac", "family", "ff", "g"], "d": ["long", "id", "dom", "bug", "part", "h", "e", "ad", "md", "start", "day", "dy", "du", "diff", "di", "dd", "k", "dash", "dB", "p", "name", "r", "sd", "z", "o", "db", "da", "t", "nd", "dn", "cd", "w", "dim", "c", "dh", "delay", "u", "dt", "dx", "do", "g", "D", "ds", "bd", "j", "dat", "v", "fd", "td", "dm", "dc", "data", "ind", "end", "body", "dos", "side", "did", "pd", "ld", "ud", "dl", "dp", "dj", "dir"], "a": ["sta", "input", "ana", "af", "part", "aa", "h", "e", "area", "ae", "ad", "ans", "aaa", "ap", "aw", "la", "form", "am", "ai", "p", "auto", "r", "z", "o", "all", "ac", "args", "sa", "da", "ao", "va", "t", "another", "alpha", "ga", "any", "w", "ca", "oa", "ia", "c", "ab", "api", "aj", "u", "wa", "za", "current", "fa", "ar", "array", "app", "v", "access", "ea", "ma", "action", "ha", "an", "na", "active", "ba", "au"], "res": ["ref", "rec", "right", "rates", "range", "Result", "remote", "resh", "rus", "rss", "req", "RES", "ros", "cs", "e", "outs", "cases", "sol", "ores", "correct", "ests", "gr", "ax", "rs", "mer", "hes", "features", "reg", "des", "abilities", "resolution", " Res", "rez", "final", "rows", "oss", "arr", "p", "cache", "Rs", "runs", "r", "args", "ms", "error", "row", "rem", "ras", "mr", "spec", "ries", "obj", "ers", "ret", "nos", "ids", "ons", "err", "ric", "press", "rest", "out", "rev", "ins", "raw", "repl", "values", "root", "models", "ars", "es", "rh", "box", "results", "resp", "js", "resources", "css", "rep", "ross", "max", "rets", "blocks", "changes", "valid", "bytes", "sys", "data", "rel", " results", "response", "winner", "ox", "ver", "result", "overs", "ours", "Results", "Res", "yes", "ress", "powers", "vals", "params", "exp", "ces", "re", "null", "core", "wcs", "names", "errors", "ES", "RS", "arts", "arch", "details", "val", "pres", "breaks", "bs", "os", "stars", "ps", "ris", "g"], "x": ["ip", "id", "code", "one", "xes", "pos", "xxxx", "_", " X", "h", "ix", "work", "e", "bit", "int", "ax", "on", "opt", "inf", "xs", "xml", " you", "xy", "ey", "p", "name", "sp", "z", "r", "o", "all", "sex", "key", "abc", "t", "image", "xf", "xe", "w", "xx", "ext", "wx", "ch", "xc", "xa", "c", "word", "u", "ic", "Y", "xp", " xx", "dx", "ty", "cross", "max", "xxx", "j", "python", "v", "yx", "data", " _", " c", "xt", "ph", "rx", "XX", "re", "na", "www", "xi", "q", "X", "index", "test", "ex", "g", "col", "xb"], "y": ["long", "id", "bar", "h", "my", "ory", "e", "iny", "wy", "yang", "yy", "yu", "dy", "good", "num", "min", "gy", "k", "xy", "ey", "p", "sky", "py", "ye", "z", "o", "key", "t", "fy", "iy", "ray", "ym", "say", "oy", "w", "year", "zy", "err", "ch", "sy", "c", "out", "yi", "pay", "Y", "ty", "cy", "ay", "hot", "ny", "hy", "vy", "j", "ky", "type", "python", "v", " Y", "uy", "asy", "re", "yt", "X", "ys", "ry", "g", "ya"], "best": ["warning", "largest", "right", "success", "remote", "aster", "this", "highest", "maximum", "suggest", "correct", " better", "round", "better", "good", "style", "latest", "default", "est", "effective", "bottom", "short", "master", "perfect", "final", "half", "true", "py", "only", "ward", "how", "all", "ago", "key", "original", "pe", "any", "missing", "top", "zero", "err", " Best", "rest", "value", "higher", "average", "bad", "prev", "ast", "star", "no", "most", "root", "self", "ale", "rand", "poor", "Best", "instance", "winner", "gold", "result", "rew", "null", "new", "last", "stars", "worst", "go"], "b": ["be", "bound", "c", "ab", "lb", "k", "id", "body", "part", "beta", "bi", "p", "u", "nb", "number", "bf", "r", "z", "h", "fb", "cb", "o", "e", "db", "t", "rb", "bg", "bp", "base", "line", "bb", "sb", "ba", "bd", "dy", "eb", "bs", "mb", "w", "j", "ib", "g", "wb", "v", "xb"], "R": ["RT", "RW", "right", "N", "Rec", "RGB", "range", "P", "I", "CR", "NR", "Rs", "G", "Res", "L", "r", "K", "Y", "Ra", "Range", "V", "W", "RS", "RR", "C", "U", "RM", "O", " r", "rs", "D", "RF", "RA", "S", "Array", "Length", "Rh", "RG", "X", "M", "F", "Q", "RH", "RN"], "i": ["ip", "ie", "mini", "id", "I", "ir", "h", "ix", "my", "e", "int", " I", "uri", "pi", "fi", "ati", "num", "multi", "di", "ini", "k", "ai", "ji", "gi", "io", "p", "name", "II", "r", "z", "o", "t", "im", "iu", "w", "ii", "ui", "ti", "ci", "ei", "qi", "hi", "c", "api", "bi", "zi", "u", "ang", "ic", "cli", "ity", "eni", "iq", "ar", "Xi", "j", "si", "ih", "v", "ind", "ion", "phi", "abi", "info", "ise", "xi", "q", "vi", "ik", "index", "g"], "append": ["repeat", "add", "data", "begin", "ind", "end", "attr", "remove", "init", "text", "attach", "cat", "join", "bind", "push", "delete", "sort", "before", "element", "next", "patch", "just", "pull", "start", "include", "php", "write", "pop", "open", "left", "pad", "shift", "app", "insert", "ext"], "pout": ["wpinc", "pdOut", "procobj", "procOut", "procinc", "pinc", "pdobj", "wpout", "pdout", "pobj", "wpobj", "procout", "pdinc", "wpOut", "pOut"]}}
{"code": " \n  def read_word(f):\n      return next(f).strip()\n  \n  def read_int(f, b=10):\n      return int(read_word(f), b)\n  \n  def read_letters(f):\n      return list(read_word(f))\n  \n  def read_digits(f, b=10):\n      return [int(x, b) for x in read_letters(f)]\n  \n  def read_words(f, d=' '):\n      return read_word(f).split(d)\n  \n  def read_ints(f, b=10, d=' '):\n      return [int(x, b) for x in read_words(f, d)]\n  \n  def read_floats(f, d=' '):\n      return [float(x) for x in read_words(f, d)]\n  \n  def read_arr(f, R, reader=read_ints, *args, **kwargs):\n      return [reader(f, *args, **kwargs) for i in range(R)]\n  \n  def solve(solver, fn, out_fn=None):\n      in_fn = fn + '.in'\n      if out_fn is None:\n          out_fn = fn + '.out'\n      with open(in_fn, 'r') as fi:\n          with open(out_fn, 'w') as fo:\n              T = read_int(fi)\n              for i in range(T):\n                  case = read_case(fi)\n                  res = solver(case)\n                  write_case(fo, i, res)\n  \n  \n  def read_case(f):\n      R1 = read_int(f)\n      Q1 = read_arr(f, 4)\n      R2 = read_int(f)\n      Q2 = read_arr(f, 4)\n      return (R1, Q1, R2, Q2)\n  \n  def write_case(f, i, res):\n      f.write('Case #%d: '%i)\n      f.write('%s'%res)\n      f.write('\n')\n  \n  \n  def solve_small(case):\n      (R1, Q1, R2, Q2) = case\n      s = set(Q1[R1-1]) & set(Q2[R2-1])\n      if len(s) == 0:\n          return 'Volunteer cheated!'\n      if len(s) == 1:\n          return s.pop()\n      return 'Bad magician!'\n  \n  def solve_large(case):\n      return solve_small(case)\n  \n  DEBUG = 'i'\n  \n", "substitutes": {"f": ["input", "ie", "proc", "af", "field", "fc", "of", "df", "fff", "this", "func", "h", "lf", "flat", "fp", "files", "e", "fen", "cf", "fam", "fx", "fed", "fs", "fi", "iter", "feed", "feature", "inf", "F", "full", "file", "n", "fat", "die", "exec", "conf", "form", "k", "io", "p", "fab", "m", "uf", "bf", "r", "z", "tif", "o", "buff", "t", "fe", "xf", "fast", "sf", "found", "w", "fun", "fits", "function", "c", "fore", "forum", "fw", "tf", "fish", "html", "u", "page", "off", "fl", "rf", "fin", "fb", "self", "handler", "l", "fa", "fo", "j", "v", "fd", "fm", "far", "fing", "info", "exp", "frame", "fit", "fr", "ft", "fac", "ff", "g", "fold"], "b": ["be", "end", "c", "ab", "lb", "k", "block", "split", "width", "body", "beta", "bi", "length", "p", "u", "nb", "pb", "m", "bc", "bf", "r", "z", "h", "fb", "o", "a", "e", "y", "db", "limit", "l", "t", "rb", "bp", "base", "bb", "sb", "ba", "dy", "bd", "eb", "bs", "w", "j", "ib", "B", "type", "abs", "n", "bl", "g", "wb", "bh", "v"], "x": ["data", "input", "xc", "xa", "c", "out", "k", "text", "id", "xt", "xy", "pos", "word", "p", "u", "xxxxxxxx", "rx", "_", "m", "px", "h", "r", "z", "ix", "co", "o", "self", "e", "y", "get", "bit", "xp", "l", "t", "int", "xf", "xe", "fx", "ax", "xi", "q", "ml", "max", "string", "xxx", "w", "xx", "j", "num", "opt", "X", "index", "valid", "xs", "wx", "n", "xml", "ex", "g", "v", "xb"], "d": ["dm", "dd", "data", "dc", "ind", "direction", "end", "c", "split", "k", "id", "part", "dh", "length", "p", "name", "u", "dat", "xd", "m", "h", "r", "z", "sd", "o", "e", "y", "dir", "da", "db", "a", "dt", "l", "ad", "t", "md", "nd", "dx", "ld", "ud", "do", "start", "dn", "D", "ds", "dec", "dy", "di", "dl", "cd", "diff", "w", "j", "dim", "n", "g", "v", "fd"], "R": ["SR", "N", "range", "Reader", "P", "I", "length", "NR", "CR", "WR", "Rs", "G", "Res", "L", "runs", "r", "K", "Y", "rb", "rh", "Range", "V", "W", "H", "RR", "rc", "C", "U", "O", "RM", "A", "RL", "TR", "D", "RF", "S", "E", "RA", "OR", "J", "run", "RG", "X", "B", "M", "F", "Q", "RH", "RO", "DR", "RN"], "reader": ["function", "input", "slice", "RW", "transfer", "ner", "value", "upper", "Reader", "argument", "df", "dr", "word", "writer", "io", "length", "buffer", "source", "loader", "wrapper", "rx", "r", "read", "method", "fp", "key", "handler", "rb", "rh", "cr", "builder", "rc", "row", "rw", "format", "rr", "spec", "runner", "inner", "parser", "ar", "ride", "lc", "entry", "ctor", "driver", "array", "finder", "iter", "w", "pair", "reading", "er", "feed", "rot", "type", "callback", "default", "config", "seed"], "i": ["ei", "ini", "ip", "v", "ie", "qi", "ind", "hi", "c", "ni", "api", "k", "phi", "id", "ai", "col", "it", "chi", "gi", "I", "bi", "io", "pos", "p", "u", "zi", "mi", "m", "abi", "r", "ix", "z", "ic", "a", "e", "y", "iii", "ime", "l", "int", "t", "CI", "ri", "im", "on", "iu", "iq", "xi", "uri", "pi", "fi", "q", "ori", "ii", "j", "ui", "ti", "index", "si", "ci", "ih", "n", "li", "multi", "il", "di"], "solver": ["safer", "Solver", "Saver", "seafer", "ssolving", "Safer", " saver", "solve", "ssolve", "solving", " safer", " solve", " solving", "seolving", "ssaver", "ssolver", "Solve", "saver", "seolver", "seolve", "Solving"], "fn": ["function", "enc", "rf", "fun", "c", "sync", "fc", "out", "loc", "phy", "orn", "lib", "document", "fat", "io", "name", "p", "ln", "fl", "func", "bf", "nc", "m", "h", "fb", "typ", "fp", "o", "kn", "fen", "cn", "l", "txt", "xf", "conn", "FN", "format", "prefix", "il", "fa", "lf", "filename", "fi", "output", "native", "write", "fs", "nm", "feat", "path", "node", "sn", "syn", "file", "n", "wt", "v", "fd"], "out_fn": ["output_file", "out_function", "out_text", "outStext", "out_fc", "outingfc", "outlogfn", "outlogfp", "outlogfc", "outSfile", "outSfn", "out_n", "output_fp", "in_file", "outlogcf", "biningcf", "bin_fp", "in_function", "out_cf", "outingcf", "biningfn", "outSfp", "out_fp", "in_fp", "output_fn", "out_file", "outingfn", "output_text", "biningfc", "in_n", "biningfp", "outingfp", "bin_fn", "out_filename", "bin_cf", "in_filename", "bin_fc"], "in_fn": ["in_fd", "inFilecoll", "in_dn", "in_coll", "out_fd", "inFilepath", " in_coll", "inFilefn", "out_dn", " in_fp", "out_fp", "in_fp", " in_path", "in_path", "inFilefp"], "T": ["PI", "N", "NT", "IT", "P", "I", "p", "G", "L", "CT", "CL", "K", "Y", "Z", "FFFF", "Time", "t", "V", "W", "H", "DT", "TH", "C", "U", "O", "TT", "A", "TA", "TR", "D", "HI", "TB", "E", "S", "J", "X", "M", "B", "F", "Q", "type", "Type", "VI", "TS", "TI", "Test", "CI"], "case": ["mini", "slice", "text", "id", "code", "bug", "_", "size", "e", "cases", "C", "fi", "cell", "pair", "feed", "shift", "cas", "sc", "default", "rice", "config", "string", "sea", "ace", "P", "cache", "p", "name", "cer", "profile", "r", "key", "base", "force", "pe", "ice", "ch", "client", "condition", "c", "section", "change", "exc", "SC", "fa", "trial", "fo", "instance", "type", "app", "ce", "context", "sub", "Case", "lic", "catch", "result", "switch", "info", "co", "ase", "core", "ise", "pattern", "match", "q", "ride", "space", "set", "shape", "time", "X", "test", "choice", "fact"], "res": ["resolution", "rec", " Res", "su", "sr", "conf", "right", "rest", "response", "Case", "out", "block", "range", "Result", "remote", "catch", "me", "rev", "pre", "example", "our", "rows", "result", "reply", "complete", "Res", "req", "ress", "RES", "r", "ch", "co", "exc", "ms", "cases", "re", "rh", "core", "ise", "base", "error", "rc", "us", "rem", "resource", "match", "mr", "results", "spec", "details", "resp", "rs", "fi", "val", "pres", "rap", "mer", "obj", "os", "ss", "ps", "ris", "test", "ry", "ret", "sc", "rice", "ce", "err", "reg"], "R1": ["R4", "X4", "RR0", "RHead", "RoleHead", "X1", "r4", "X2", " RHead", "Q4", "Role1", " RONE", "Run001", " R01", "Q001", "r1", "I0", "Role2", "r2", "Run81", "RR1", "Role01", " R001", " R81", "R001", "R81", "X81", "RR2", "R01", "QONE", "Q0", "RunONE", "RONE", "Q81", "r81", "QHead", "Run1", "R0", "I1", "Q01", "I2"], "Q1": ["QU10", "R4", "Qu1", "Review1", "R3", "X1", "P9", "QFirst", "RFirst", "Qu3", "Q4", "ReviewFirst", "Query4", "Query2", "QN", " Q10", " Q3", "R10", "Review4", "Review2", "Q6", "QUN", "P2", "QueryFirst", " Q31", " Q9", "Query1", "Q9", "X3", "P3", "X31", "R9", "Q3", "Q10", "QU1", " QN", "QU2", "Qu31", "Qu6", " Q6", "Q31", "RN", "X6", "P1"], "R2": ["R4", "R8", "r4", "Q72", "Q4", " R14", "RA2", " Rsecond", "r0", "R72", " R4", "Rsecond", "Q02", "Rh2", " RB", "Qsecond", "Rh72", " R72", " R5", "r1", "r8", "Q14", "RB", "r02", "r2", "r5", " R8", "R02", "Rh02", "R5", "RA5", "r14", " R0", "Q0", "R14", " R02", "Rhsecond", "R0", "RA8", "rB", "QB", "RA4"], "Q2": ["R4", "IQ2", "q14", "Qtwo", "IQ_", "Q4", "Query2", "q02", "Query62", "Q02", "R22", " Q12", " Q14", "q_", "Q14", " Q_", " Q02", "P2", "Q22", "Query22", "q22", "Query1", "IQtwo", "q1", "R5", "R12", "q62", "IQ02", "q5", "R14", "Q12", "R62", "Q_", "P1", "P5", "P4", "Q62", "q2", "Q5", " Qtwo", "qtwo", "q12", "q4"], "s": [" objects", " S", "slice", "c", "ssl", "sync", "services", "ls", "result", "service", "p", "u", "settings", "seconds", "sets", "session", "m", "sym", "h", "r", "o", "a", "e", "y", "all", "size", "es", "cs", "cases", "args", "l", "t", "ns", "sections", "ses", "start", "sec", "styles", "sb", "new", "parts", "js", "S", "set", "os", "ss", "gs", "w", "ing", "sc", "strings", "type", "si", "n", "string", "g", "v"]}}
{"code": " \n  def read_word(f):\n      return next(f).strip()\n  \n  def read_int(f, b=10):\n      return int(read_word(f), b)\n  \n  def read_letters(f):\n      return list(read_word(f))\n  \n  def read_digits(f, b=10):\n      return [int(x, b) for x in read_letters(f)]\n  \n  def read_words(f, d=' '):\n      return read_word(f).split(d)\n  \n  def read_ints(f, b=10, d=' '):\n      return [int(x, b) for x in read_words(f, d)]\n  \n  def read_floats(f, d=' '):\n      return [float(x) for x in read_words(f, d)]\n  \n  def read_arr(f, R, reader=read_ints, *args, **kwargs):\n      return [reader(f, *args, **kwargs) for i in range(R)]\n  \n  def solve(solver, fn, out_fn=None):\n      in_fn = fn + '.in'\n      if out_fn is None:\n          out_fn = fn + '.out'\n      with open(in_fn, 'r') as fi:\n          with open(out_fn, 'w') as fo:\n              T = read_int(fi)\n              for i in range(T):\n                  case = read_case(fi)\n                  res = solver(case)\n                  write_case(fo, i, res)\n  \n  \n  def read_case(f):\n      N = read_int(f)\n      MN = read_floats(f)\n      MK = read_floats(f)\n      return (N, MN, MK)\n  \n  def write_case(f, i, res):\n      f.write('Case #%d: '%i)\n      f.write('%d %d'%res)\n      f.write('\n')\n  \n  \n  def solve_small(case):\n      (N, MN, MK) = case\n      MN = sorted(MN)\n      MK = sorted(MK)\n      y = 0\n      i = 0\n      for j in range(N):\n          while i < N and MN[i] < MK[j]:\n              i += 1\n          if i < N:\n              y += 1\n              i += 1\n      z = N\n      j = 0\n      for i in range(N):\n          while j < N and MN[i] > MK[j]:\n              j += 1\n          if j < N:\n              z -= 1\n              j += 1\n      return (y, z)\n  \n  def solve_large(case):\n      return solve_small(case)\n  \n  DEBUG = 'i'\n  \n", "substitutes": {"f": ["ref", "input", "proc", "af", "field", "fc", "of", "df", "fff", "this", "func", "h", "lf", "fp", "files", "e", "fen", "cf", "fam", "rb", "fer", "fx", "fed", "fs", "fi", "feed", "er", "feature", "inf", "F", "full", "file", "n", "die", "conf", "form", "io", "p", "fab", "m", "uf", "bf", "r", "tif", "o", "buff", "t", "fe", "xf", "fast", "sf", "found", "w", "fun", "fits", "function", "c", "fore", "forum", "s", "fw", "tf", "fish", "html", "u", "page", "off", "rf", "fb", "self", "handler", "l", "fa", "fo", "v", "fd", "fm", "fing", "info", "frame", "fit", "fr", "ft", "fac", "ff", "g", "fold"], "b": ["be", "end", "c", "ab", "lb", "block", "split", "k", "s", "body", "bi", "length", "p", "u", "nb", "pb", "m", "bc", "bf", "r", "fb", "h", "aa", "o", "a", "e", "db", "limit", "l", "t", "rb", "ad", "bp", "base", "bb", "sb", "ba", "dy", "eb", "bs", "ub", "mb", "w", "ib", "batch", "B", "type", "abs", "n", "bl", "g", "wb", "bh", "v"], "x": ["data", "input", "xc", "xa", "you", "c", "k", "text", "id", "xt", "xy", "s", "pos", "word", "xxxx", "p", "u", "xxxxxxxx", "rx", "_", "m", "h", "r", "ix", "px", "co", "o", "e", "get", "self", "bit", "xp", "l", "t", "int", "xf", "xe", "fx", "ax", "im", "php", "xi", "q", "max", "string", "xxx", "w", "xx", "num", "opt", "X", "inf", "index", "valid", "xs", "wx", "n", "xml", "ex", "g", "v", "xb"], "d": ["dm", "dd", "data", "dc", "ind", "direction", "end", "c", "split", "k", "id", "part", "dh", "p", "name", "u", "dat", "m", "h", "r", "sd", "did", "o", "e", "a", "dir", "da", "db", "dt", "l", "ad", "t", "md", "nd", "dx", "ld", "ud", "do", "dn", "D", "ds", "bd", "dy", "dec", "dl", "cd", "diff", "dp", "fd", "w", "type", "dim", "n", "g", "v", "di"], "R": ["SR", "RT", "RI", "RW", "range", "RE", "Reader", "JR", "P", "I", "CR", "WR", "Rs", "G", "Res", "L", "r", "Y", "rb", "rh", "Range", "V", "H", "W", "RR", "RS", "C", "U", "O", "RM", "A", "BR", "RL", " r", "rs", "TR", "D", "RF", "RA", "S", "OR", "Rh", "RG", "M", "B", "X", "F", "Q", "RH", "RO", "DR", "RN", "IR"], "reader": ["input", "slice", "RW", "transfer", "ner", "value", "upper", "Reader", "rar", "argument", "df", "dr", "writer", "length", "io", "worker", "loader", "wrapper", "cer", "lr", "r", "inter", "read", "method", "random", "der", "handler", "rb", "rh", "int", "core", "library", "builder", "rc", "row", "rw", "rr", "runner", "inner", "parser", "q", "ar", "ride", "lc", "entry", "ctor", "driver", "finder", "arg", "w", "pair", "reading", "er", "iter", "feed", "rot", "callback", "seed"], "i": ["ip", "ie", "ni", "id", "it", "ki", "I", "oi", "ir", "h", "ix", "a", "e", "int", "uri", "pi", "fi", "dy", "num", "ID", "n", "di", "ini", "k", "ai", "ji", "gi", "io", "p", "mi", "m", "r", "o", "t", "im", "ij", "iu", "w", "ii", "ui", "ti", "ci", "ei", "qi", "hi", "c", "yi", "chi", "bi", "u", "zi", "ic", "l", "ri", "iq", "si", "ih", "il", "v", "ind", "phi", "xi", "q", "vi", "ori", "ik", "index", "li", "col"], "solver": ["ssolves", "Solves", "insolver", "seolution", "Solver", "insolution", "insolving", "setsolver", "ssolving", "setsolution", "insolve", "solve", "solving", "seolving", "seolves", "Solution", "ssolver", "Solve", "solves", "solution", "seolver", "setsolving", "ssolution", "Solving", "setsolve"], "fn": ["function", "enc", "fun", "c", "fc", "out", "loc", "phy", "orn", "lib", "fat", "io", "name", "p", "ln", "fl", "func", "bf", "nc", "m", "fb", "kn", "h", "fp", "o", "rf", "fen", "cn", "l", "xf", "conn", "FN", "typ", "dn", "format", "wl", "fa", "prefix", "lf", "filename", "fi", "output", "native", "fs", "write", "nm", "feat", "path", "node", "sn", "syn", "file", "n", "wt", "wb", "v", "fd"], "out_fn": ["cache_fn", "cache_fp", "outJbf", "outFilebody", "output_bf", "out_fi", "out2filename", "cacheetfen", "outFilefen", "out_fp", "out_file", "out2function", "outFilefp", "cacheetfp", "outetfn", "output_fp", "outJfn", "cache_fen", "outetfi", "in_fp", "out_filename", "in_filename", " out_filename", "outFilefi", "outFilebf", "in_file", "out2fn", "cacheetfi", "output_fn", "out2fp", "cacheetfn", " out_function", "outJbody", "output_body", "outFilefn", "outetfen", "out_function", "outetfp", "out_bf", "outJfp", "cache_fi", "out_fen", " out_fp", "out_body"], "in_fn": ["in64fn", "in_dn", "in_kn", "out_cn", "in_cn", "out_dn", "out_fp", "in_fp", "out_kn", "in_filename", "in64kn", "in64filename", "in64fin", "out_filename", "out_fin", "in_fin"], "T": ["SI", "NT", "IT", "P", "I", "PT", "p", "OUT", "G", "L", "CT", "CL", "Z", "Y", "FFFF", "Time", "t", "V", "H", "W", "DT", "C", "U", "O", "TT", "A", "TA", "TR", "D", "Ti", "It", "TB", "E", "S", "J", "M", "X", "B", "F", "Q", "VI", "type", "Type", "TS", "TI", "Test", "CI"], "case": ["mini", "slice", "con", "id", "code", "bug", "size", "e", "cases", "C", "fi", "cell", "path", "pair", "then", "cas", "position", "sc", "default", "config", "su", "conf", "form", "block", "loc", "use", "ace", "P", "cache", "length", "p", "cer", "profile", "r", "key", "base", "line", "force", "pe", "ice", "cp", "ch", "client", "condition", "c", "section", "CE", "SC", "fa", "CC", "array", "trial", "max", "fo", "instance", "type", "app", "ce", "sequence", "Case", "catch", "result", "switch", "info", "co", "ase", "core", "ise", "match", "order", "ride", "space", "shape", "time", "X", "test", "choice", "ff", "fact"], "res": ["resolution", " Res", "rec", "mini", "sr", "conf", "MS", "rest", "right", "response", "Case", "block", "RE", "Result", "rev", " RES", "CR", "RC", "result", "resh", "Rs", "rx", "Results", "Res", "req", "ress", "RES", "r", "ch", "co", "exc", "ms", "cr", "re", "rh", "mis", "core", "MR", "gr", "ri", "error", "RS", "ES", "rc", "rem", "resource", "match", "us", "rr", "ras", "results", "spec", "details", "rs", "resp", "pres", "rap", "mer", "os", "red", "Response", "ris", "ps", "ry", "ret", "sc", "err", "reg"], "N": ["Ni", "NL", "GN", "We", "I", "G", "Z", "V", "W", "Na", "C", "O", "U", "Network", "Ns", "F", "Q", "n", "NG", "NC", "TN", "NT", "KN", "Ne", "P", "NO", "CN", "K", "H", "A", "ND", "B", "IND", "NV", "AN", "Sn", "NI", "Nat", "NE", "NS", "Y", "D", "NPR", "S", "max", "J", "M", "NN", "NM", "IP", "NY", "NA", "NF", "IN", "L", "CL", "SN", "Num", "Size", "UN", "Net", "Len", "E", "X", "No", "CNN"], "MN": ["EM", "MAN", "mn", "MS", "GN", "Mo", "MG", "JM", "MI", "MON", "PIN", "OS", "MU", "PO", "MD", "MP", "Ns", "MC", "DN", "KN", "CR", "NJ", "NER", "NO", "CM", "ME", "NK", "MR", "BER", "MT", "HK", "ND", "MH", "IND", "MEN", "NW", "DM", "MIN", "NI", "MF", "MET", "IM", "NE", "FM", "MAL", "Man", "NH", "ML", "MY", "D", "NPR", "MX", "MSN", "M", "BL", "NM", "MO", "NY", "NF", "NA", "NB", "MB", "IN", "CL", "MW", "LM", "WM", "SM", "UN", "INS", "CO", "Mi", "MA", "MM", " ML", "CNN"], "MK": ["MAN", "MS", "KR", "UB", "NZ", "Mo", "MG", "KS", "JM", "MON", "ANN", "MAS", "MU", "MAG", "RAM", "MOD", "MD", "MP", "CH", "MER", "FK", "MC", "FORM", "CM", "ME", "KK", "MAR", "NK", "K", "MJ", "MR", "MT", "RM", "HK", "MH", "AMY", "MEN", "UK", "KO", "AK", "DEC", "MF", "MAP", "Man", "Y", "ML", "MY", "Maker", "MX", "mk", "M", "MAC", "NM", "MO", "Ma", "WH", "NY", "Mars", "DOM", "SK", "MB", "KER", "AM", "CL", "PK", "MW", "LM", "WM", "DK", "SM", "UN", "MA", "MM", "X"], "y": ["gy", "sy", "v", "hi", "c", "k", "phi", "yi", "ey", "p", "u", "isy", "zi", "m", "py", "h", "my", "Y", "o", "e", "wy", "yy", "l", "t", "ay", "cy", "iy", "yt", "ny", "q", "dy", "ym", "oy", "w", "yr", "vy", "year", "zy", "ky", "ady", "ry", "n", "g", "yo", "ya"], "j": ["jl", "ip", "uj", "ie", "ja", "ind", "qi", "job", "c", "k", "jo", "ji", "yi", "bi", "aj", "bj", "u", "p", "m", "jam", "ch", "ix", "jc", "r", "o", "e", "l", "t", "ne", "jj", "kj", "ij", "xi", "jp", "g", "pi", "q", "dy", "js", "obj", "oy", "ori", "J", "dj", "ii", "oj", "ik", "si", "adj", "n", "je", "li", "v", "di"], "z": ["ie", "hi", "qi", "c", "k", "zh", "iz", "id", "ji", "yi", "nz", "p", "zi", "u", "m", "h", "Z", "o", "e", "Y", "cz", "l", "t", "xi", "q", "ya", "w", "num", "zy", "ze", "ci", "n", "zo", "g", "v"]}}
{"code": " \n  def read_word(f):\n      return next(f).strip()\n  \n  def read_int(f, b=10):\n      return int(read_word(f), b)\n  \n  def read_letters(f):\n      return list(read_word(f))\n  \n  def read_digits(f, b=10):\n      return [int(x, b) for x in read_letters(f)]\n  \n  def read_words(f, d=' '):\n      return read_word(f).split(d)\n  \n  def read_ints(f, b=10, d=' '):\n      return [int(x, b) for x in read_words(f, d)]\n  \n  def read_floats(f, d=' '):\n      return [float(x) for x in read_words(f, d)]\n  \n  def read_arr(f, R, reader=read_ints, *args, **kwargs):\n      return [reader(f, *args, **kwargs) for i in range(R)]\n  \n  def solve(solver, fn, out_fn=None):\n      in_fn = fn + '.in'\n      if out_fn is None:\n          out_fn = fn + '.out'\n      with open(in_fn, 'r') as fi:\n          with open(out_fn, 'w') as fo:\n              T = read_int(fi)\n              for i in range(T):\n                  case = read_case(fi)\n                  res = solver(case)\n                  write_case(fo, i, res)\n  \n  \n  def read_case(f):\n      return read_floats(f)\n  \n  def write_case(f, i, res):\n      f.write('Case #%d: '%i)\n      f.write('%s'%res)\n      f.write('\n')\n  \n  \n  def solve_small(case):\n      (C, F, X) = case\n      res = 0\n      i = 0\n      while X/(2 + i*F) > C/(2 + i*F) + X/(2 + (i+1)*F):\n          res += C/(2 + i*F)\n          i += 1\n      return res + X/(2 + i*F)\n  \n  def solve_large(case):\n      return solve_small(case)\n  \n  DEBUG = 'i'\n  \n", "substitutes": {"f": ["ref", "af", "field", "fc", "of", "df", "this", "func", "h", "lf", "fp", "files", "e", "fen", "cf", "a", "fam", "fer", "fx", "fed", "fs", "fi", "pi", "iter", "feed", "feature", "inf", "file", "n", "fat", "die", "conf", "form", "k", "io", "p", "fab", "m", "uf", "bf", "r", "z", "tif", "o", "buff", "t", "fe", "xf", "sf", "found", "w", "fun", "function", "c", "fore", "api", "s", "fw", "tf", "html", "u", "off", "rf", "fb", "self", "y", "handler", "l", "fa", "fo", "j", "v", "fd", "fm", "far", "fing", "ph", "um", "info", "frame", "fit", "fr", "q", "ft", "fac", "ff", "g", "fold"], "b": ["be", "bound", "end", "c", "ab", "lb", "k", "split", "width", "s", "body", "beta", "bi", "length", "part", "p", "u", "nb", "pb", "m", "bc", "bf", "r", "z", "h", "fb", "o", "a", "e", "y", "db", "limit", "l", "t", "rb", "bp", "base", "bb", "sb", "ba", "dy", "bd", "bs", "ub", "w", "j", "ib", "batch", "B", "type", "abs", "n", "g", "wb", "bh", "v"], "x": ["data", "xc", "xa", "c", "k", "text", "id", "xt", "s", "xy", "word", "xxxx", "p", "u", "xxxxxxxx", "rx", "_", "m", "h", "r", "z", "ix", "px", "co", "o", "self", "e", "y", "get", "bit", "xp", "l", "t", "int", "xf", "xe", "fx", "ax", "php", "xi", "q", "ml", "max", "string", "xxx", "w", "xx", "j", "num", "opt", "inf", "index", "valid", "xs", "ci", "n", "wx", "xml", "ex", "g", "full", "v", "xb"], "d": ["dm", "dd", "data", "dc", "ind", "end", "c", "split", "k", "id", "part", "dh", "p", "name", "dat", "u", "xd", "m", "h", "r", "z", "sd", "o", "e", "y", "db", "dir", "da", "a", "dt", "l", "ad", "t", "md", "nd", "dx", "ld", "ud", "do", "dn", "vd", "D", "ds", "dy", "di", "dl", "cd", "diff", "w", "j", "type", "dim", "n", "g", "v", "fd"], "R": ["SR", "RP", "RT", "RI", "RW", "N", "ru", "range", "Reader", "P", "I", "CR", "NR", "WR", "Rs", "G", "Res", "L", "r", "K", "Y", "rb", "rh", "Range", "V", "H", "W", "RR", "RS", "U", "O", "RM", "A", "BR", " r", "rs", "TR", "D", "RF", "S", "RA", "OR", "J", "RG", "M", "B", "Q", "RH", "RO", "DR", "RN"], "reader": ["input", "slice", "transfer", "ner", "value", "Reader", "rar", "argument", "df", "dr", "word", "writer", "io", "length", "step", "buffer", "source", "loader", "wrapper", "r", "read", "method", "channel", "random", "handler", "cr", "int", "rb", "mode", "core", "library", "builder", "rc", "row", "wrap", "rr", "runner", "inner", "parser", "rand", "ar", "ride", "ctor", "entry", "driver", "array", "finder", "arg", "iter", "w", "reading", "er", "feed", "instance", "dim", "callback", "default", "config", "seed"], "i": ["ip", "ie", "mini", "ni", "id", "it", "ki", "I", "ir", "h", "ix", "a", "e", "adi", "iii", "int", " I", "uri", "pi", "fi", "iter", "ib", "n", "multi", "di", "ini", "k", "ai", "ji", "gi", "io", "p", "count", "mi", "m", "r", "z", "o", "t", "im", "ani", "iu", "ice", "w", "ii", "ui", "ti", "ci", "ei", "qi", "hi", "c", "api", "s", "chi", "bi", "u", "zi", "ic", "cli", "y", "l", "uni", "eni", "ri", "iq", "j", "si", "v", "ind", "phi", "number", "abi", "xi", "q", "vi", "ori", "index", "li"], "solver": ["ssanger", "insolver", "seolution", "Solver", "solved", "insolution", "setsanger", "setsolver", "sanger", "ssolving", "setsolution", "insolve", "solve", "setsolved", "solving", "seolving", "Solution", "ssolver", "Solved", "Solve", "solution", "seanger", "seolver", "setsolving", "ssolution", "insolved", "setsolve"], "fn": ["function", "enc", "fun", "c", "sync", "fc", "out", "lib", "io", "fat", "name", "p", "kn", "ln", "fl", "func", "nc", "m", "bf", "typ", "fb", "h", "fp", "o", "rf", "fen", "cn", "l", "bn", "np", "xf", "conn", "FN", "dn", "format", "fa", "wt", "filename", "fi", "output", "native", "fs", "write", "nm", "feat", "path", "node", "fo", "sn", "syn", "file", "n", "config", "v", "fd"], "out_fn": ["in_fil", "outFilenode", "out_fp", "out_kn", "out_file", "out2function", "outningfil", "outFilefp", "output_fun", "output_fp", "outJfn", "outningfilename", "flatingfp", "outningfile", "out_fil", "flatingfn", "out_filename", "in_filename", "flat_fc", "outingfc", "outingkn", "in_file", "outacfc", "flat_kn", "outacfn", "out2fn", "flatingfc", "output_fn", "out2fp", "outJfun", " out_function", "outackn", "outFilefn", "out_node", "out_function", "flatingkn", "out_fun", "flat_fn", "out_fc", "outJfp", "outFilefun", "flat_fp", "out_n", "output_node", " out_fp", "outingfn", "outJnode", "outingfp", " out_n", "outningfn", "outacfp", "out2n"], "in_fn": ["in_fd", "in64fn", "out_fc", "in_fc", "in64nc", "in_nc", "out_fd", "bin_fp", "bin_nc", "out_fp", "in_fp", "bin_filename", "in64fp", "in64filename", "bin_fn", "in_filename"], "T": ["N", "c", "Case", "NT", "text", "IT", "P", "I", "length", "TW", "p", "G", "Res", "number", "L", "CT", "r", "K", "Y", "Z", "Time", "t", "V", "W", "H", "U", "O", "TT", "A", "TA", "D", "Ti", "TB", "Mi", "S", "E", "J", "Tab", "num", "M", "B", "Q", "type", "TS", "TI", "Test", "CI"], "case": ["slice", "id", "code", "bug", "closure", "part", "example", "e", "cases", "cr", "mode", "U", "fi", "path", "cell", "pair", "cas", "sc", "default", "rice", "config", "sea", "conf", "form", "use", "P", "ace", "cache", "p", "cer", "profile", "r", "key", "fe", "base", "line", "force", "cor", "pe", "ice", "cp", "ci", "ch", "court", "se", "function", "client", "rest", "job", "c", "ge", "section", "bc", "CE", "exc", "cy", "fa", "max", "trial", "fo", "instance", "type", "app", "ce", "che", "end", "Case", "catch", "result", "request", "call", "info", "co", "ase", "core", "chain", "match", "ride", "shape", "time", "test", "fact"], "res": ["right", "MS", "range", "id", "remote", "resh", "req", "RES", "cs", "e", "cases", "cr", "CS", "fi", "rs", "sc", "rice", "reg", "resolution", " Res", "su", "tri", "final", "eps", "RE", "me", "gi", "rows", "arr", "p", "Rs", "runs", "r", "z", "ms", "error", "us", "rem", "ras", "spec", "rap", "ret", "err", "ch", "rest", "out", "init", "rev", "pre", "GR", "es", "rh", "ri", "rc", "results", "resp", "reset", "rep", "S", "css", "trial", "Response", "sr", "data", " results", "response", "Case", "upper", "result", "ios", "rx", "Results", "switch", "Res", "cons", "ress", "powers", "info", "vals", "co", "re", "core", "RS", "ES", "resource", "match", "details", "val", "pres", "os", "red", "ps", "ris", "test"], "C": ["Cs", "N", "c", "Case", "IX", "CU", "DI", "P", "I", "CR", "Con", "CM", "CF", "II", "G", "L", "CE", "CT", "CL", "K", "Y", "Z", "CV", "Sc", "SC", "V", "W", "H", "CS", "U", "O", "A", "CO", "CC", "D", "Code", "EC", "VC", "COR", "E", "S", "DC", "CH", "M", "B", "Q", "Cu", "NC", "CA", "CI"], "F": ["PF", "FA", "OF", "N", "c", "IF", "MF", "DF", "SF", "I", "P", "Frame", "Ext", "CF", "FB", "FE", "G", "FO", "L", "FC", "UL", "FM", "K", "Y", "Z", "FY", "FIN", "V", "FG", "H", "W", "U", "O", "FI", "A", "FW", "AF", "Fi", "GF", "D", "FR", "EF", "WF", "EC", "E", "S", "FS", "FL", "J", "FH", "Feed", "M", "B", "Q", "File", "ELF", "Fs", "FD"], "X": ["IP", "WH", "N", "PH", "IX", "Case", "HTTP", "CU", "P", "I", "CR", "WR", "CF", "G", "IV", "UX", "L", "CE", "XL", "FC", "CL", "UL", "K", "Z", "Y", "XP", "Sc", "XX", "CI", "SC", "EL", "ML", "V", "FF", "W", "H", "XM", "U", "XXX", "CC", "D", "ZX", "EC", "TX", "E", "S", "IC", "CH", "XY", "Ex", "M", "PE", "Q", "B", "EX", "Cu", "ID", "DX", "FE", "IO", "NC"], "DEBUG": ["uc", "end", "Case", "init", "id", "P", "CR", "result", "name", "Res", "unit", "RES", "nc", "info", "r", "method", "color", "exc", "key", "cases", "cr", "core", "line", "error", "rc", "prefix", " error", " Case", "trial", "feat", "path", "Error", "test", "ID", "file", "err", "Test", " rc", "CI"]}}
{"code": " \n  def read_word(f):\n      return next(f).strip()\n  \n  def read_int(f, b=10):\n      return int(read_word(f), b)\n  \n  def read_letters(f):\n      return list(read_word(f))\n  \n  def read_digits(f, b=10):\n      return [int(x, b) for x in read_letters(f)]\n  \n  def read_words(f, d=' '):\n      return read_word(f).split(d)\n  \n  def read_ints(f, b=10, d=' '):\n      return [int(x, b) for x in read_words(f, d)]\n  \n  def read_floats(f, d=' '):\n      return [float(x) for x in read_words(f, d)]\n  \n  def read_arr(f, R, reader=read_ints, *args, **kwargs):\n      res = []\n      for i in range(R):\n          res.append(reader(f, *args, **kwargs))\n      return res\n  \n  def solve(solver, fn, out_fn=None):\n      in_fn = fn + '.in'\n      if out_fn is None:\n          out_fn = fn + '.out'\n      with open(in_fn, 'r') as fi:\n          with open(out_fn, 'w') as fo:\n              T = read_int(fi)\n              for i in range(T):\n                  case = read_case(fi)\n                  res = solver(case)\n                  write_case(fo, i, res)\n  \n  \n  def read_case(f):\n      B = read_arr(f, 4, read_letters)\n      read_word(f)\n      return B\n  \n  def write_case(f, i, res):\n      f.write('Case #%d: '%i)\n      f.write('%s'%res)\n      f.write('\n')\n  \n  \n  def test(a):\n      if '.' not in a and 'O' not in a:\n          return 'X won'\n      if '.' not in a and 'X' not in a:\n          return 'O won'\n  \n  def solve_small(case):\n      draw = True\n      for row in case:\n          if '.' in row:\n              draw = False\n          res = test(row)\n          if res:\n              return res\n      for i in range(len(case[0])):\n          col = [row[i] for row in case]\n          res = test(col)\n          if res:\n              return res\n      diag = [case[i][i] for i in range(len(case))]\n      res = test(diag)\n      if res:\n          return res\n      diag = [case[i][-i-1] for i in range(len(case))]\n      res = test(diag)\n      if res:\n          return res\n      if draw:\n          return 'Draw'\n      return 'Game has not completed'\n  \n  def solve_large(case):\n      return solve_small(case)\n  \n  DEBUG = 'i'\n  \n", "substitutes": {"f": ["ref", "input", "af", "field", "fc", "of", "df", "fff", "this", "func", "h", "lf", "flat", "fp", "e", "fen", "files", "cf", "fam", "fx", "fed", "fs", "fi", "feed", "feature", "inf", "F", "file", "n", "fat", "die", "conf", "form", "k", "io", "p", "fab", "m", "uf", "bf", "r", "tif", "o", "buff", "arf", "t", "fe", "xf", "fast", "sf", "found", "w", "fg", "fun", "function", "c", "fore", "s", "fw", "tf", "fish", "html", "u", "page", "off", "fl", "rf", "fb", "self", "handler", "l", "fa", "fo", "j", "v", "fd", "fm", "fing", "info", "frame", "fit", "fr", "ft", "fac", "family", "ff", "g", "fold"], "b": ["be", "bound", "end", "c", "ab", "lb", "k", "split", "width", "s", "body", "bi", "length", "p", "u", "nb", "pb", "m", "aa", "bf", "r", "z", "h", "fb", "bc", "o", "e", "y", "db", "limit", "l", "t", "int", "rb", "ad", "bp", "base", "line", "bb", "sb", "ba", "eb", "dy", "bd", "bs", "ub", "mb", "w", "j", "ib", "type", "abs", "n", "g", "wb", "bh", "v"], "x": ["text", "id", "code", "pos", "xxxx", "_", "h", "ix", "e", "get", "bit", "int", "fx", "ax", "num", "opt", "xs", "xml", "n", "full", "k", "xy", "p", "name", "xxxxxxxx", "m", "r", "z", "o", "t", "xf", "xe", "yl", "w", "xx", "ci", "wx", "xc", "xa", "c", "s", "width", "word", "u", "px", "self", "y", "xp", "l", "ml", "max", "xxx", "j", "valid", "v", "data", "xt", "rx", "ex", "co", "xi", "q", "X", "index", "g", "xb"], "d": ["dm", "dd", "data", "dc", "ind", "direction", "end", "c", "split", "k", "id", "part", "dh", "p", "name", "dat", "u", "xd", "m", "h", "r", "z", "sd", "de", "o", "e", "dir", "y", "db", "da", "dt", "l", "ad", "t", "md", "nd", "dx", "ld", "ud", "do", "dn", "ds", "D", "dec", "dy", "di", "dl", "cd", "diff", "dict", "dp", "w", "j", "type", "dim", "n", "g", "v", "fd"], "R": ["SR", "RW", "N", "range", "Reader", "JR", "P", "I", "length", "CR", "NR", "WR", "Rs", "G", "Res", "L", "runs", "r", "K", "Y", "rb", "rh", "Range", "V", "W", "H", "RR", "C", "rc", "U", "O", "RM", "A", "TR", "D", "S", "RA", "Row", "OR", "J", "run", "RG", "X", "M", "F", "Q", "RH", "RO", "DR", "RN"], "reader": ["function", "client", "slice", "RW", "transfer", "ner", "value", "Reader", "rar", "argument", "df", "dr", "writer", "io", "length", "result", "source", "worker", "loader", "wrapper", "buffer", "rx", "cer", "r", "read", "key", "der", "handler", "rb", "rh", "report", "builder", "rc", "resource", "rr", "spec", "uri", "runner", "inner", "parser", "ride", "lc", "entry", "ctor", "driver", "finder", "iter", "w", "reading", "feed", "er", "rot", "test", "ler", "callback", "default", "seed"], "res": ["rec", "right", "MS", "clear", "range", "__", "Result", " RES", "I", " result", "resh", "rus", "rss", "req", "RES", "ros", "cs", "cr", "gr", "OS", "rs", "rice", "features", "reg", "resolution", " Res", "su", "rez", "final", "block", "RE", "loc", "P", "rows", "arr", "p", "true", "Rs", "runs", "r", "all", "args", "ms", "error", "us", "rem", "ras", "mr", "rules", "rap", "obj", "grid", "ret", "ons", "err", "ch", "rys", "rest", "out", "rev", "pre", "raw", "values", "self", "models", "GR", "es", "rh", "ri", "rc", "results", " r", "resp", "reset", "css", "J", "blocks", "Response", "scope", "sr", "data", "N", "end", " results", "response", "relations", "Case", "result", "rx", "Results", "Res", "cons", "ress", "powers", "vals", "params", "back", "re", "str", "RS", "ES", "resource", "match", "details", "val", "pres", "breaks", "bs", "os", "X", "ris", "ps"], "i": ["ip", "ie", "slice", "ni", "id", "it", "pos", "I", "ix", "e", "int", "start", "on", "uri", "pi", "fi", "num", "n", "di", "ini", "iw", "k", "ai", "gi", "io", "length", "p", "mi", "m", "r", "z", "o", "t", "im", "ij", "iu", "w", "ii", "ui", "ti", "ci", "ia", "ei", "qi", "c", "out", "s", "yi", "chi", "bi", "u", "zi", "ic", "y", "l", "ri", "iq", "j", "si", "v", "ind", "end", "phi", "xi", "q", "index", "li"], "solver": ["ssolves", "Solves", "insolver", "seolution", "Solver", "solved", "ssolved", "insolve", "insolves", "solve", "ssolve", "ssolutions", "seolves", "Solution", "solutions", "ssolver", "Solved", "Solve", "solves", "solution", "seolutions", "seolver", "ssolution", "insolved", "Solutions"], "fn": ["function", "enc", "rf", "fun", "c", "fc", "out", "text", "orn", "lib", "fat", "io", "name", "p", "ln", "fl", "func", "bf", "nc", "fb", "lf", "h", "m", "fp", "o", "kn", "fen", "cn", "cf", "l", "txt", "FN", "dn", "format", "wl", "prefix", "il", "fa", "filename", "fi", "output", "native", "sf", "write", "nm", "feat", "path", "node", "sn", "feature", "file", "n", "wt", "v", "fd"], "out_fn": ["out_function", "outingfin", "outFilefp", "outffile", "out_n", "in_file", "in_fen", "outffn", "outFilefn", "in_function", "outFilefen", "out_fin", "out_fen", "out_fp", "outffunction", "in_fp", "out_file", "outingfn", "in_n", "outingfp", "out_filename", "outingfen", "outffilename", "outFilefin", "in_filename", "in_fin"], "in_fn": ["out_n", "inFilefat", "in_buff", "inFilefn", "out_fp", "in_fp", "out_fat", "inFilen", "in_n", "out_buff", "out_filename", "inFilefilename", "in_fat", "in_filename"], "T": ["N", "Total", "TN", "c", "Case", "NT", "Dim", "text", "IT", "P", "I", "length", "p", "G", "L", "CT", "K", "Y", "Z", "FFFF", "Size", "Time", "t", "V", "W", "H", "C", "U", "O", "TT", "A", "TA", "TR", "D", "TB", "S", "E", "J", "X", "M", "F", "Q", "type", "ID", "TS", "TI", "Test", "CI"], "case": ["slice", "id", "code", "bug", "example", "table", "size", "e", "cases", "cr", "C", "fi", "cycle", "sect", "cell", "path", "pair", "feed", "cas", "sc", "rice", "config", "sea", "form", "block", "use", "P", "ace", "cache", "p", "count", "name", "cer", "r", "key", "fe", "base", "line", "force", "error", "pe", "small", "ice", "feat", "ca", "cp", "court", "ch", "c", "rule", "section", "page", "SC", "fa", "model", "array", "trial", "fo", "instance", "type", "ce", "uc", "phone", "Case", "catch", "cc", "result", "call", "info", "co", "ase", "frame", "core", "zip", "match", "order", "space", "entry", "shape", "time", "project", "test", "fact"], "B": ["BD", "function", "N", "BF", "Case", "BI", "P", "I", "CR", "result", "G", "Res", "L", "RES", "r", "FC", "Y", "Z", "BB", "V", "BA", "W", "H", "CB", "C", "A", "BR", "output", "D", "S", "bs", "Array", "J", "batch", "X", "M", "F", "Q", "BC", "BL", "BS"], "a": ["access", "la", "data", "ana", "ma", "et", "form", "c", "ab", "af", "am", "ha", "s", "ai", "an", "aux", "aj", "p", "u", "ation", "aa", "m", "bc", "za", "r", "ah", "aba", "ast", "at", "ac", "all", "sa", "y", "e", "aut", "area", "o", "va", "eta", "ae", "ad", "na", "ans", "asa", "ama", "ax", "aaa", "fa", "A", "alpha", "ada", "ba", "ar", "ach", "ga", "array", "w", "ca", "aw", "au", "app", "ata", "av", "n", "sc", "account"], "draw": ["play", "render", "add", "carry", "clear", "winner", "RAW", "colour", "width", "parent", "dr", "div", "strip", "scale", "find", "create", "background", "layout", "unit", "move", "drawn", "show", "weight", "coll", "clean", "grad", "check", "game", "stick", "stroke", "cost", "post", "du", "strike", "poly", "win", "update", "cycle", "custom", " Draw", "style", "display", "progress", "run", "fill", "Draw", "color", "rawn"], "row": ["slice", "flow", "range", "one", "month", "bug", "table", "tr", "ear", "area", "cr", "int", "round", "cell", "feed", "run", "ows", "sc", "string", "board", "tri", "ner", "form", "block", "rows", "arr", "r", "inter", "all", "non", "line", "error", "any", "w", "cube", "ch", "rect", "c", "out", "raw", "ro", "no", "box", "rc", "array", "trial", "app", "valid", "rown", "ow", "ind", "data", "ox", "result", "column", "coll", "frame", "null", "port", "arrow", "match", "order", "arch", "win", "entry", "Row", "index", "test", "ry"]}}
{"code": " \n  def read_word(f):\n      return next(f).strip()\n  \n  def read_int(f, b=10):\n      return int(read_word(f), b)\n  \n  def read_letters(f):\n      return list(read_word(f))\n  \n  def read_digits(f, b=10):\n      return [int(x, b) for x in read_letters(f)]\n  \n  def read_words(f, d=' '):\n      return read_word(f).split(d)\n  \n  def read_ints(f, b=10, d=' '):\n      return [int(x, b) for x in read_words(f, d)]\n  \n  def read_floats(f, d=' '):\n      return [float(x) for x in read_words(f, d)]\n  \n  def read_arr(f, R, reader=read_ints, *args, **kwargs):\n      return [reader(f, *args, **kwargs) for i in range(R)]\n  \n  def solve(solver, fn, out_fn=None):\n      in_fn = fn + '.in'\n      if out_fn is None:\n          out_fn = fn + '.out'\n      with open(in_fn, 'r') as fi:\n          with open(out_fn, 'w') as fo:\n              T = read_int(fi)\n              for i in range(T):\n                  case = read_case(fi)\n                  res = solver(case)\n                  write_case(fo, i, res)\n  \n  \n  def read_case(f):\n      return read_ints(f)\n  \n  def write_case(f, i, res):\n      f.write('Case #%d: '%i)\n      if isinstance(res, list):\n          res[0][0] = 'c'\n          res = '\n'.join(''.join(c for c in r) for r in res)\n      f.write('\n%s'%res)\n      f.write('\n')\n  \n  \n  def solve_small(case):\n      (R, C, M) = case\n      if R == 1:\n          return 'c' + '.'*(C-M-1) + '*'*M\n      if C == 1:\n          return '\n'.join(['c'] + ['.']*(R-M-1) + ['*']*M)\n      m = R*C - M\n      res = [['*']*C for r in range(R)]\n      if m == 1:\n          return res\n      for r in range(2, R+1):\n          c = m // r\n          z = m % r\n          if c < 2 or c + (z>0) > C:\n              continue\n          if z == 1 and (r < 3 or c < 3):\n              continue\n          for x in range(r):\n              for y in range(c):\n                  res[x][y] = '.'\n          for y in range(z):\n              res[y][c] = '.'\n          if z == 1:\n              res[z][c] = '.'\n              res[r-1][c-1] = '*'\n          return res\n      return 'Impossible'\n  \n  def solve_large(case):\n      return solve_small(case)\n  \n  DEBUG = 'f'\n  \n", "substitutes": {"f": ["input", "ie", "af", "field", "fc", "of", "df", "this", "func", "h", "lf", "flat", "fp", "files", "e", "fen", "a", "cf", "fam", "fer", "fx", "fed", "fs", "fi", "iter", "feed", "er", "feature", "inf", "F", "full", "file", "n", "fat", "conf", "form", "k", "p", "uf", "bf", "py", "cb", "o", "buff", "t", "fe", "xf", "fast", "sf", "found", "w", "fun", "function", "fore", "api", "s", "fw", "tf", "html", "u", "off", "fl", "rf", "fin", "fb", "self", "handler", "l", "fa", "fo", "j", "afi", "v", "fd", "fm", "fing", "info", "frame", "fit", "fr", "ft", "fac", "ff", "g", "fold"], "b": ["be", "bound", "end", "ab", "lb", "k", "block", "split", "width", "s", "body", "bi", "length", "p", "u", "nb", "pb", "bc", "bf", "h", "fb", "o", "a", "e", "db", "limit", "l", "t", "rb", "ad", "bp", "base", "bb", "sb", "ba", "dy", "eb", "bs", "ub", "mb", "w", "j", "ib", "batch", "B", "type", "abs", "n", "bl", "g", "wb", "bh", "v"], "x": ["input", "text", "id", "pos", "xxxx", "_", "h", "ix", "e", "get", "bit", "int", "fx", "ax", "num", "opt", "xs", "xml", "n", "full", "string", "k", "xy", "p", "xxxxxxxx", "t", "xf", "xe", "el", "w", "xx", "ci", "wx", "xc", "xa", "s", "word", "u", "px", "self", "xp", "l", "ml", "max", "xxx", "j", "valid", "v", "data", "xt", "rx", "ex", "co", "xi", "q", "val", "X", "index", "g", "xb"], "d": ["dm", "dd", "data", "dc", "ind", "direction", "end", "split", "k", "id", "s", "part", "dh", "p", "name", "u", "dat", "h", "sd", "o", "e", "dir", "da", "db", "a", "dt", "l", "ad", "t", "md", "nd", "dx", "ld", "ud", "do", "start", "dn", "D", "ds", "dy", "di", "dl", "cd", "diff", "w", "j", "dim", "n", "g", "v", "fd"], "R": ["SR", "RT", "RP", "RW", "N", "AR", "range", "RE", "Reader", "JR", "P", "I", "length", "NR", "WR", "CR", "RC", "Rs", "G", "Res", "L", "runs", "CL", "K", "Y", "CV", "GR", "rb", "rh", "MR", "Range", "V", "LR", "H", "W", "RR", "RS", "Re", "U", "O", "RM", "A", "RL", "BR", "rs", "TR", "D", "RF", "S", "RA", "E", "J", "RG", "B", "X", "F", "Q", "RH", "RO", "DR", "RN", "IR"], "reader": ["input", "slice", "client", "transfer", "ner", "value", "upper", "Reader", "argument", "dr", "writer", "io", "length", "source", "worker", "loader", "wrapper", "rx", "interface", "func", "read", "method", "channel", "random", "handler", "rb", "library", "builder", "rc", "row", "rw", "rr", "spec", "runner", "inner", "parser", "ar", "ride", "lc", "entry", "ctor", "driver", "array", "finder", "arg", "w", "pair", "reading", "er", "iter", "feed", "instance", "callback", "default", "string", "seed"], "i": ["ei", "ini", "ip", "mini", "qi", "ind", "hi", "ni", "k", "phi", "id", "ai", "it", "s", "chi", "gi", "I", "bi", "io", "p", "u", "zi", "mi", "ic", "ix", "a", "e", "l", "int", "t", "eni", "ri", "im", "ij", "iq", "iu", "il", "xi", "uri", "ice", "pi", "fi", "q", "vi", "w", "ii", "j", "num", "ui", "ti", "index", "si", "ci", "ih", "n", "li", "multi", "v", "di"], "solver": ["ssolves", "Solves", "insolver", "Solver", " soper", "insolving", "soper", "ssolving", "insolve", "solve", "ssolve", "solving", " solve", " solving", "seolving", "seolves", "ssolver", "Solve", "solves", "seolver", "seolve", "Solving", "Soper", "insoper"], "fn": ["function", "enc", "rf", "fun", "sync", "fc", "out", "loc", "phy", "orn", "lib", "document", "fat", "io", "name", "p", "gn", "ln", "fl", "func", "bf", "nc", "h", "fb", "typ", "fp", "o", "kn", "fen", "cn", "l", "np", "bn", "xf", "conn", "FN", "dn", "format", "wl", "prefix", "fa", "filename", "fi", "output", "native", "write", "nm", "feat", "path", "node", "sn", "syn", "file", "n", "wt", "v", "fd"], "out_fn": ["outFilepath", "output_path", "outqfc", "outqfn", "out2file", "out2filename", "extra_fn", "out_fp", "out_file", "outqfp", "outqbin", "outPn", "extraPfunc", "outFilefp", "output_fun", "out_fd", "output_fp", "extra_func", "out2fd", "flatingfp", "outPfunc", "extraPn", "flatingfn", "out_filename", "in_filename", "in_fd", "flat_fc", "extra_fp", "outingfc", "in_file", "out_bin", "outingbin", "outPfp", "out2fn", "out_path", "flatingfc", "output_fn", "extraPfn", "outFilefn", "out_fun", "flat_fn", "out_fc", "outPfn", "extra_n", "outFilefun", "out_n", "extraPfp", "flat_fp", "flat_bin", "flatingbin", "out_func", "outingfn", "outingfp"], "in_fn": ["out_folder", "inwmn", "in_fil", "inwfilename", "inwfp", "bin_mn", "bin_fp", "inwfn", "in_folder", "out_fp", "in_fp", "bin_filename", "in_mn", "out_fil", "bin_fn", "in_filename"], "T": ["PI", "N", "Case", "NT", "P", "I", "length", "p", "G", "number", "L", "CT", "K", "Z", "Y", "Time", "t", "V", "W", "H", "TS", "DT", "U", "O", "TT", "A", "cut", "TA", "D", "TB", "S", "E", "J", "num", "X", "B", "F", "Q", "type", "Type", "n", "TI", "Test", "CI"], "case": ["slice", "range", "id", "code", "_", "h", "e", "cases", "mode", "fi", "path", "pair", "shift", "cas", "sc", "default", "rice", "config", "string", "sea", "su", "loc", "use", "ace", "P", "cache", "length", "p", "cer", "profile", "key", " CASE", "base", "line", "force", "pe", "ice", "cp", "ch", "function", "condition", "rest", "rule", "section", "change", "exc", "fa", "false", "trial", "fo", "cl", "instance", "type", "ce", "uc", "che", "end", "Case", "lic", "catch", "result", "switch", "call", "info", "ase", "ise", "match", "ride", "space", "shape", "time", "X", "test", "fact"], "res": ["rec", "right", "ru", "con", "range", "remote", "Result", "rss", "rus", "req", "RES", "ros", "cs", "e", "cases", "cr", "gr", "fi", "rs", "vers", "default", "rice", "reg", "resolution", " Res", "su", "rez", "block", "RE", "rows", "arr", "p", "Rs", "ms", "error", "us", "rem", "ras", "mr", "spec", "rap", "ret", "vre", "err", "ch", "rest", "out", "s", "rev", "pre", "ches", "ro", "exc", "es", "ns", "rh", "ri", "rc", "results", "resp", "js", "rep", "changes", "ce", "v", "scope", "data", "response", "Case", "catch", "result", "rx", "Res", "ress", "exp", "co", "ces", "re", "core", "RS", "ES", "fr", "match", "resource", "details", "val", "pres", "os", "esc", "ris", "ps", "test", "ry", "ex"], "c": ["v", "uc", "rec", "cu", "dc", "xc", "anc", "con", "k", "fc", "roc", "unc", "pc", "s", "ct", "cc", "ec", "p", "h", "nc", "co", "cs", "cf", "cn", "e", "ac", "a", "cr", "l", "t", "core", "rc", "q", "lc", "cd", "w", "cp", "ci", "n", "sc", "ce", "ch"], "r": ["rec", "ner", "ru", "range", "id", "rev", "rm", "result", "br", "p", "u", "Res", "ir", "ro", "lr", "h", "co", "all", "e", "cr", "l", "re", "rb", "rh", "gr", "ri", "str", "chain", "rc", "fr", "rr", "rs", "rt", "q", "ar", "w", "er", "pr", "rib", "ur", "n", "rl", "err", "v"], "C": ["Cs", "AC", "Rec", "N", "CU", "Cl", "P", "I", "CM", "G", "CN", "CW", "L", "CE", "CL", "K", "Y", "Z", "CV", "Sc", "Size", "CI", "SC", "Ch", "Co", "V", "W", "H", "CS", "U", "O", "A", "CO", "CC", "D", "Code", "EC", "Cr", "VC", "E", "S", "DC", "B", "X", "F", "Q", "Cu", "MC", "CA", "NC"], "M": ["DM", "N", "MS", "MF", "P", "I", "Mo", "CR", "CM", "G", "MN", "L", "MQ", "FM", "MI", "CL", "K", "Y", "Z", "LM", "V", "W", "MT", "H", "O", "U", "MU", "A", "RM", "CC", "D", "MX", "MD", "E", "S", "MA", "Mc", "J", "MM", "B", "X", "F", "Q", "Ms", "MC", "MO"]}}
{"code": " \n  __file__ = sys.argv[0]\n  __path__ = os.path.dirname(__file__)\n  __prob__ = os.path.basename(__path__)\n  \n  def pout(s, back=0):\n      f = sys._getframe(back+1)\n      d = 0\n      if 'depth' in f.f_locals:\n          d = f.f_locals['depth']\n      print(' '*d + s + ' = ' + repr(eval(s, f.f_globals, f.f_locals)))\n  \n  def perr(s, back=0):\n      f = sys._getframe(back+1)\n      d = 0\n      if 'depth' in f.f_locals:\n          d = f.f_locals['depth']\n      ERR_FILE.write(' '*d + '%s = %s\n'%(s, repr(eval(s, f.f_globals, f.f_locals))))\n  \n  def argmin(f, s=None):\n      a = f\n      if s is None:\n          s = range(len(a))\n          f = lambda i: a[i]\n      res = None\n      for x in s:\n          y = f(x)\n          if res is None or best > y:\n              best = y\n              res = x\n      return res\n  \n  def argmax(f, s=None):\n      a = f\n      if s is None:\n          s = range(len(a))\n          f = lambda i: a[i]\n      res = None\n      for x in s:\n          y = f(x)\n          if res is None or best < y:\n              best = y\n              res = x\n      return res\n  \n  def read_word(f):\n      return next(f).strip()\n  \n  def read_int(f, b=10):\n      return int(read_word(f), b)\n  \n  def read_words(f, d=' '):\n      return read_word(f).split(d)\n  \n  def read_ints(f, b=10, d=' '):\n      return [int(x, b) for x in read_words(f, d)]\n  \n  def read_word_arr(f, R):\n      res = []\n      for i in range(R):\n          res.append(read_word(f))\n      return res\n  \n  def read_ints_arr(f, R, dtype=int, *args, **kwargs):\n      res = []\n      for i in range(R):\n          res.append(read_ints(f, *args, **kwargs))\n      return numpy.array(res, dtype)\n  \n  def solve(solver, fn, start_case=0, end_case=None, out_fn=None):\n      global ERR_FILE\n      in_fn = fn + '.in'\n      if out_fn is None:\n          out_fn = fn + '.out'\n      err_fn = fn + '.err'\n      if start_case == 0:\n          append = True\n          if os.path.exists(out_fn):\n              with open(out_fn, 'r') as f:\n                  for l in f:\n                      if l[:6] == 'Case #':\n                          start_case = int(l[6:l.index(':')])+1\n      else:\n          append = False\n      with open(in_fn, 'r') as fi:\n          with open(out_fn, 'a' if append else 'w') as fo:\n              with open(err_fn, 'w') as ERR_FILE:\n                  T = read_int(fi)\n                  for i in range(T):\n                      case = read_case(fi)\n                      if i+1 < start_case:\n                          continue\n                      print('Case #%d of %d'%(i+1, T))\n                      ERR_FILE.write('Case #%d of %d\n'%(i+1, T))\n                      perr('case')\n                      res = solver(case)\n                      perr('res')\n                      write_case(fo, i, res)\n                      fo.flush()\n                      if end_case is not None and i+1 == end_case:\n                          break\n  \n  def test(start_case=1, end_case=None):\n      fn = os.path.join(__path__, 'test')\n      solve(solve_small, fn, start_case, end_case)\n  \n  def small(start_case=1, end_case=None):\n      fn = os.path.join(__path__, '%s-small-practice'%__prob__)\n      solve(solve_small, fn, start_case, end_case)\n  \n  def small2(start_case=1, end_case=None):\n      fn = os.path.join(__path__, '%s-small-practice'%__prob__)\n      solve(solve_large, fn, start_case, end_case, fn + '2.out')\n  \n  def large(start_case=0, end_case=None):\n      fn = os.path.join(__path__, '%s-large-practice'%__prob__)\n      solve(solve_large, fn, start_case, end_case)\n  \n  \n  def read_case(f):\n      G = read_word(f)\n      return G\n  \n  def write_case(f, i, res):\n      f.write('Case #%d: '%(i+1))\n      f.write('%s'%res)\n      f.write('\n')\n  \n  FAIL = 'NO SOLUTION'\n  \n  TRANS = {'z': 'q', 'q': 'z', '\n': '\n', ' ': ' ', 'a': 'y', 'c': 'e', 'b': 'h', 'e': 'o', 'd': 's', 'g': 'v', 'f': 'c', 'i': 'd', 'h': 'x', 'k': 'i', 'j': 'u', 'm': 'l', 'l': 'g', 'o': 'k', 'n': 'b', 'p': 'r', 's': 'n', 'r': 't', 'u': 'j', 't': 'w', 'w': 'f', 'v': 'p', 'y': 'a', 'x': 'm'}\n  \n  def solve_small(case):\n      G = case\n      return ''.join(TRANS[x] for x in G)\n  \n  solve_large = solve_small\n  \n  pout = perr\n", "substitutes": {"__file__": ["__name___", " __path___", "__file___", "__log__", "__path____", " __file____", " __file___", "__name__", "__call____", " __path____", "__name____", "__file____", "__log____", "__log___", "__call__", "__path___", "__call___"], "__path__": [" __path___", "__file___", " __dir_", "__log__", "__path____", "__dir___", " __path_", " __file___", "__method__", "__dir_", "__method___", " __dir___", " __dir__", " __path____", "__file_", "__file____", "__log_", "__log____", "__log___", "__call__", "__path___", " __dir____", "__dir____", "__call___", "__path_", "__dir__"], "__prob__": ["__proot__", "__peb___", "__proc___", "__pebe__", "__prob___", "__proot____", "__peb__", "__peb____", "__probe___", "__proot___", "__proc____", "__pebe___", "__prob____", "__proc__", "__probe____", "__probe__", "__pebe____"], "s": ["input", "services", "id", "source", "sets", "sym", "h", "func", "files", "e", "cs", "save", "comments", "sing", "ans", "fs", "sql", "stat", "inf", "full", "n", "sc", "times", "sign", "string", "features", "su", "http", "conf", "sync", "k", "rows", "sup", "p", "name", "seconds", "flows", "m", "r", "sd", "z", "o", "args", "sa", "old", "sv", "states", "t", "uns", "ops", "ts", "us", "sec", "sb", "sid", "small", "spec", "ks", "stable", "sf", "say", "ss", "w", "sl", "ats", "groups", "secure", "se", "function", "c", "ssl", "value", "storage", "posts", "sh", "u", "ches", "sq", "self", "es", "ns", "words", "ses", "ds", "js", "S", "ws", "j", "state", "si", "sample", "v", "network", "sys", "status", "qs", "ls", "service", "suff", "side", "request", "st", "info", "sites", "params", "forms", "https", "secondary", "str", "sg", "resource", "single", "new", "q", "space", "set", "os", "gs", "time", "site", "strings", "lines", "ps", "has", "second", "sk", "g", "native"], "back": ["stage", "add", "backed", "input", "right", "home", "short", "end", "bottom", "half", "down", "id", "bug", "part", "head", "length", "p", "side", "reverse", "supp", "off", "session", "date", "st", "ce", "self", "backs", "first", "db", "before", "da", "der", "callback", "Back", "ud", "child", "BACK", "base", "pull", "force", "depth", "now", "cost", "round", "front", "q", "du", "D", "last", "diff", "forward", "left", "time", "shift", "state", "ck", "support", "g", "att", "close"], "f": ["ref", "input", "af", "field", "fc", "of", "part", "df", "this", "lf", "h", "func", "flat", "fp", "e", "fen", "cf", "fx", "fed", "fs", "fi", "framework", "diff", "free", "feed", "er", "feature", "aff", "inf", "F", "full", "file", "n", "http", "conf", "form", "k", "p", "fab", "m", "uf", "bf", "r", "z", "cb", "o", "all", "buff", "t", "fe", "xf", "fast", "sf", "img", "found", "w", "fu", "ef", "fun", "elf", "function", "c", "fore", "api", "fw", "tf", "html", "u", "page", "current", "rf", "fb", "root", "self", "es", "handler", "fa", "al", "fo", "j", "v", "fd", "fm", "sys", "end", "ph", "um", "info", "frame", "fit", "fr", "new", "q", "ft", "os", "fac", "family", "ff", "g"], "d": ["long", "id", "dom", "bug", "part", "h", "e", "ad", "md", "start", "day", "dy", "du", "diff", "n", "di", "dd", "k", "dash", "dB", "p", "name", "m", "r", "sd", "z", "o", "db", "da", "t", "nd", "dn", "cd", "w", "dim", "c", "dh", "delay", "u", "dt", "dx", "do", "g", "D", "ds", "bd", "j", "dat", "v", "fd", "td", "dm", "dc", "data", "ind", "end", "body", "dos", "side", "did", "pd", "ld", "ud", "dl", "dp", "dj", "dir"], "a": ["sta", "input", "ana", "af", "part", "aa", "h", "e", "area", "ae", "ad", "ans", "aaa", "n", "ap", "aw", "la", "form", "am", "ai", "p", "m", "auto", "r", "z", "o", "all", "ac", "args", "sa", "da", "ao", "va", "t", "another", "A", "alpha", "ga", "any", "w", "ca", "oa", "ia", "c", "ab", "api", "aj", "u", "wa", "za", "current", "fa", "ar", "array", "app", "v", "access", "ea", "ma", "action", "ha", "an", "na", "active", "ba", "au"], "res": ["ref", "rec", "right", "rates", "range", "Result", "remote", "resh", "rus", "rss", "req", "RES", "ros", "cs", "e", "outs", "cases", "sol", "ores", "correct", "ests", "gr", "ax", "rs", "mer", "hes", "features", "reg", "des", "abilities", "resolution", " Res", "rez", "final", "rows", "oss", "arr", "p", "cache", "Rs", "runs", "r", "args", "ms", "error", "row", "rem", "ras", "mr", "spec", "ries", "obj", "ers", "ret", "nos", "ids", "ons", "err", "ric", "press", "rest", "out", "rev", "ins", "raw", "repl", "values", "root", "models", "ars", "es", "rh", "box", "results", "resp", "js", "resources", "css", "rep", "ross", "max", "rets", "blocks", "changes", "valid", "bytes", "sys", "data", "rel", " results", "response", "winner", "ox", "ver", "result", "overs", "ours", "Results", "Res", "yes", "ress", "powers", "vals", "params", "exp", "ces", "re", "null", "core", "wcs", "names", "errors", "ES", "RS", "arts", "arch", "details", "val", "pres", "breaks", "bs", "os", "stars", "ps", "ris", "g"], "x": ["ip", "id", "code", "one", "xes", "pos", "xxxx", "_", " X", "h", "ix", "work", "e", "bit", "int", "ax", "on", "opt", "inf", "xs", "xml", "n", " you", "xy", "ey", "p", "name", "m", "sp", "z", "r", "o", "all", "sex", "key", "abc", "t", "image", "xf", "xe", "w", "xx", "ext", "wx", "ch", "xc", "xa", "c", "word", "u", "ic", "Y", "xp", " xx", "dx", "ty", "cross", "max", "xxx", "j", "python", "v", "yx", "data", " _", " c", "xt", "ph", "rx", "XX", "re", "na", "www", "xi", "q", "X", "index", "test", "ex", "g", "col", "xb"], "y": ["long", "id", "bar", "h", "my", "ory", "e", "iny", "wy", "yang", "yy", "yu", "dy", "good", "num", "min", "n", "gy", "k", "xy", "ey", "p", "sky", "m", "py", "ye", "z", "o", "key", "t", "fy", "iy", "ray", "ym", "say", "oy", "w", "year", "zy", "err", "ch", "sy", "c", "out", "yi", "pay", "Y", "ty", "cy", "ay", "hot", "ny", "hy", "vy", "j", "ky", "type", "python", "v", " Y", "uy", "asy", "re", "yt", "X", "ys", "ry", "g", "ya"], "best": ["warning", "largest", "right", "success", "remote", "aster", "this", "highest", "maximum", "suggest", "correct", " better", "round", "better", "good", "style", "latest", "default", "est", "effective", "bottom", "short", "master", "perfect", "final", "half", "true", "py", "only", "ward", "how", "all", "ago", "key", "original", "pe", "any", "missing", "top", "zero", "err", " Best", "rest", "value", "higher", "average", "bad", "prev", "ast", "star", "no", "most", "root", "self", "ale", "rand", "poor", "Best", "instance", "winner", "gold", "result", "rew", "null", "new", "last", "stars", "worst", "go"], "b": ["be", " B", "bound", "c", "ab", "lb", "k", "id", "body", "part", "beta", "bi", "p", "u", "nb", "number", "m", "bf", "r", "z", "h", "fb", "cb", "o", "e", "db", "t", "rb", "bg", "bp", "base", "line", "bb", "sb", "ba", "bd", "dy", "eb", "bs", "mb", "w", "j", "ib", "B", "n", "g", "wb", "v", "xb"], "R": ["RT", "RW", "right", "N", "Rec", "RGB", "range", "P", "I", "CR", "NR", "Rs", "Res", "L", "r", "K", "Y", "Ra", "Range", "V", "W", "RS", "RR", "C", "U", "RM", "O", "A", " r", "rs", "D", "RF", "RA", "S", "Array", "Length", "Rh", "RG", "X", "B", "M", "F", "Q", "RH", "RN"], "i": ["ip", "ie", "mini", "id", "I", "ir", "h", "ix", "my", "e", "int", " I", "uri", "pi", "fi", "ati", "num", "n", "multi", "di", "ini", "k", "ai", "ji", "gi", "io", "p", "name", "II", "r", "z", "o", "t", "im", "iu", "w", "ii", "ui", "ti", "ci", "ei", "qi", "hi", "c", "api", "bi", "zi", "u", "ang", "ic", "cli", "ity", "eni", "iq", "ar", "Xi", "j", "si", "ih", "v", "ind", "ion", "phi", "abi", "info", "ise", "xi", "q", "vi", "ik", "index", "g"], "append": ["repeat", "add", "data", "begin", "ind", "end", "attr", "remove", "init", "text", "attach", "cat", "join", "bind", "push", "delete", "sort", "before", "element", "next", "patch", "just", "pull", "start", "include", "php", "write", "pop", "open", "left", "pad", "shift", "app", "insert", "ext"], "pout": ["wpinc", "pdOut", "procobj", "procOut", "procinc", "pinc", "pdobj", "wpout", "pdout", "pobj", "wpobj", "procout", "pdinc", "wpOut", "pOut"]}}
{"code": "t = int(raw_input())\n  \n  for case in range(t):\n  \tline = raw_input().split(' ')\n  \tn = int(line[0])\n  \tm = int(line[1])\n  \n  \tl = []\n  \tfor j in range(n):\n  \t\ta = raw_input().split(' ')\n  \t\tb = []\n  \t\tfor x in a:\n  \t\t\tb.append(int(x))\n  \t\tl.append(b)\n  \n  \n  \tcumple = True\n  \tfor i in range(n):\n  \t\tfor j in range(m):\n  \t\t\tcol = True\n  \t\t\tfil = True\n  \t\t\tfor x in range(n):\n  \t\t\t\tif l[x][j] > l[i][j]:\n  \t\t\t\t\tcol = False\n  \t\t\t\t\tbreak\n  \t\t\tfor x in range(m):\n  \t\t\t\tif l[i][x] > l[i][j]:\n  \t\t\t\t\tfil = False\n  \t\t\t\t\tbreak\n  \n  \t\t\tif not col and not fil:\n  \t\t\t\tcumple = False\n  \t\t\t\tbreak\n  \n  \t\tif not cumple:\n  \t\t\tbreak\n  \n  \tif cumple:\n  \t\tprint 'Case #'+str(case+1)+': YES'\n  \telse:\n  \t\tprint 'Case #'+str(case+1)+': NO'\n", "substitutes": {"t": ["tom", "c", "out", "it", "s", "T", "d", "p", "u", "tc", "table", "tp", "tz", "template", "h", "z", "r", "at", "o", "e", "y", "te", "dt", "nt", " T", "the", "start", "f", "ts", "ot", "tm", "q", "title", "tt", "temp", "w", "time", "ti", "type", "test", "g", "v"], "case": ["v", "uc", "slice", "xc", "end", "condition", "c", "Case", "default", "id", "code", "loc", "one", "catch", "ace", "section", "length", "seq", "result", "name", "p", "count", "switch", "table", "date", "cm", "call", "z", "ix", "change", "e", "y", "key", "ase", "size", "cases", "mode", "patch", "cy", "error", "start", "order", "pe", "match", "ice", "day", "q", "cycle", "trial", "shape", "cell", "path", "time", "instance", "type", "test", "choice", "address", "rice", "ce", "sea"], "line": ["la", "ine", "long", "data", "comment", "end", "sync", "out", "block", "look", "ge", "rule", "code", "part", "body", "word", "section", "le", "lin", "page", "name", "group", "source", "date", "fl", "no", "r", "o", "e", "LINE", "parse", "frame", "liner", "str", "list", "letter", "f", "row", "link", "ne", "do", "lo", "Line", "object", "cle", "day", "q", "cycle", "el", "model", "entry", "cell", "sl", "pair", "cl", "time", "log", "lines", "file", "g", "band", "se"], "n": ["N", "ner", "c", "ni", "k", "s", "an", "d", "p", "u", "name", "nb", "number", "nc", "no", "z", "r", "h", "o", "e", "y", "fn", "cn", "nt", "ns", "np", "om", "en", "len", "na", "ne", "f", "net", "on", "nu", "un", "ny", "q", "nn", "w", "sn", "g", "v"], "m": ["mn", "ma", "c", "k", "am", "s", "one", "month", "an", "d", "mm", "p", "u", "mi", "gm", "cm", "h", "r", "z", "o", "e", "y", "mc", "size", "sm", "md", "machine", "en", "om", "f", "im", "on", "tm", "un", "ym", "nm", "w", "M", "g", "v"], "l": ["jl", "la", "kl", "nl", "c", "split", "lb", "ol", "k", "ls", "s", "ll", "d", "le", "p", "u", "lin", "ln", "L", "fl", "r", "z", "ul", "ly", "o", "e", "y", "ell", "pl", "list", "f", "wl", "il", "lp", "li", "ml", "el", "dl", "lc", "ail", "al", "sl", "lu", "g", "rl", "v"], "j": ["jl", "uj", "ie", "ja", "ind", "end", "job", "c", "ion", "block", "k", "it", "jo", "ji", "id", "part", "jet", "d", "I", "bj", "aj", "p", "u", "name", "h", "r", "z", "ch", "jc", "ix", "point", "e", "y", "o", "key", "int", "jj", "f", "ax", "on", "im", "ij", "xi", "jp", "li", "un", "q", "el", "js", "cell", "J", "w", "ii", "oj", "index", "je", "g", "v"], "a": ["sta", "la", "access", "ea", "ma", "ana", "qa", "c", "ab", "am", "ai", "ha", "s", "an", "aj", "p", "ka", "aa", "auto", "z", "at", "ac", "y", "sa", "args", "da", "e", "area", "va", "ad", "ae", "another", "ans", "na", "aaa", "fa", "A", "alpha", "ada", "tta", "ba", "ar", "ga", "any", "array", "ann", "ta", "ca", "w", "oa", "au", "aw"], "b": ["be", "bel", "c", "ab", "lb", "k", "ol", "s", "body", "part", "d", "p", "u", "nb", "fl", "bc", "aa", "r", "z", "h", "o", "e", "y", "pl", "bol", "bas", "rb", "base", "bb", "f", "abb", "ob", "sb", "bat", "ble", "ba", "el", "eb", "bd", "al", "bs", "array", "w", "B", "bl", "g", "v"], "x": ["ip", "ie", "jo", "id", "code", "xes", "_", "h", "ix", "work", "e", "int", "ax", "on", "num", "xs", "k", "xy", "io", "p", "name", "r", "z", "o", "sex", "key", "xe", "yl", "im", "el", "any", "w", "xx", "wx", "xc", "xa", "c", "ll", "u", "ic", "no", "px", "change", "y", "xp", "ay", "lex", "f", "js", "xxx", "v", "yx", "xt", "d", "number", "na", "axis", "xi", "q", "time", "X", "index", "test", "ex", "g", "xb"], "cumple": [" comples", "campble", "cumpingle", "lcumplette", "campler", "cumpll", "lcamplette", " cumpble", "cumpinglet", "cupler", "crippble", "Cumpler", " cumpler", "comples", "campedLE", "camplette", "campedler", "Cupple", "cripple", "couples", "couple", " cumples", "cuple", "campll", "cumplet", "cuppll", "cumpingble", "cumples", "complette", "complet", "campedll", "crippel", "lcample", "cumpinglette", "CumpLE", "cuppLE", "Cumple", "comple", " compble", "cuppler", "cumpler", "CuppLE", "Cumpble", "compler", " compler", "cuppel", "cupple", "campLE", "cumpel", "cupble", "Cumpel", "Cuppble", "camplet", "cample", "coupble", "campedle", "cuples", "cumplette", "Cumpll", "Cuppll", " comple", "coupler", "cumpble", "compble", "lcamplet", "lcumpble", "lcampble", "lcumplet", "Cuppel", "crippler", "cumpLE", "cupel", "lcumple", "cuppble", "Cuppler"], "i": ["ip", "iv", "ie", "ind", "c", "ni", "k", "ai", "it", "id", "ji", "d", "I", "bi", "io", "p", "u", "ir", "ic", "z", "ix", "o", "e", "y", "int", "f", "im", "on", "il", "iu", "xi", "w", "ii", "ik", "ib", "index", "si", "ia", "li", "v"], "col": ["ref", "uc", "enc", "font", "ind", "con", "fc", "ol", "block", "loc", "ll", "ct", "rol", "oc", "icol", "count", "cil", "ill", "ln", "fl", "column", "vel", "ch", "act", "co", "pool", "ac", "key", "coll", "fn", "cond", "sel", "align", "foot", "chain", "roll", "row", "Col", "yl", "ilk", "rc", "round", "lang", "sect", "el", "val", "poly", "win", "ail", "ml", "cont", "cell", "cl", "num", "log", "COL", "file", "pol", "bl", "color", "cal", "il", "fat"], "fil": ["nl", "fal", "c", "con", "fc", "ol", "Fil", "loc", "ll", "rol", "icol", "sil", "fat", "lin", "cil", "fol", "ill", "bil", "ln", "fl", "call", "vel", "column", "ul", "select", "pool", "fp", "fn", "coll", "cond", "sel", "pl", "bol", "align", "foot", "len", "f", "roll", "ilk", "wl", "acl", "ml", "el", "filter", "ail", "al", "cell", "cl", "log", "full", "file", "fill", "bool", "bl", "rl", "il", "fold"]}}
{"code": "t = int(raw_input())\n  \n  def mover(n, i):\n  \ts = str(n)\n  \treturn int(s[i:] + s[:i])\n  \n  for i in range(t):\n  \ts = raw_input().split(' ')\n  \ta = int(s[0])\n  \tb = int(s[1])\n  \ttotal = 0\n  \tfor n in range(a, b):\n  \t\tms = []\n  \t\tfor k in range(len(s[0])):\n  \t\t\tm = mover(n, k+1)\n  \t\t\tif m <= b and m > n and not m in ms:\n  \t\t\t\tms.append(m)\n  \t\t\t\ttotal +=1\n  \n  \n  \tprint 'Case #'+str(i+1)+':', total\n", "substitutes": {"t": ["ate", "tu", "c", "x", "tf", "T", "d", "p", "u", "tz", "tp", "tick", "h", "z", "r", "o", "at", "e", "y", "offset", "dt", "nt", "l", "int", "ut", "pt", "art", "start", "ts", "f", "ot", "q", "tt", "temp", "ta", "w", "j", "time", "ti", "type", "v", "tn"], "n": ["nr", "network", "mn", "N", "x", "c", "ni", "out", "an", "one", "d", "pos", "p", "u", "name", "nb", "number", "nc", "r", "z", "no", "h", "o", "e", "y", "nw", "ac", "nt", "non", "l", "ns", "int", "nor", "en", "na", "rn", "names", "nd", "ne", "f", "net", "nu", "pi", "un", "q", "ny", "nn", "max", "node", "w", "j", "num", "min", "nan", "v"], "i": ["ini", "ip", "ie", "hi", "ind", "slice", "end", "x", "c", "ni", " c", "phi", "ai", "id", "it", "yi", "part", "chi", "d", "I", "bi", "length", "p", "u", "name", "oi", "mi", "h", "r", "z", "ix", "o", "e", "y", "l", "int", "ri", "start", "f", "iu", "xi", "uri", "li", "pi", " j", "w", "ii", "j", "ui", "num", "ti", "type", "index", "si", "ci", " ii", "ih", "g", "v"], "s": ["input", "services", "sets", "h", "e", "cs", "ans", "start", "parts", "shows", "xs", "string", "su", "ments", "sup", "p", "seconds", "opens", "r", "z", "o", "args", "sv", "ts", "sb", "spec", "ss", "w", "sl", "se", "c", "x", "split", "ions", "its", "ins", "u", "sq", "y", "es", "l", "ns", "words", "ses", "f", "ds", "js", "S", "ws", "si", "v", "bis", "data", "qs", "ls", "d", "sts", "str", "sg", "new", "bs", "os", "gs", "strings", "ps", "lines", "g"], "a": ["la", "ak", "x", "c", "ab", "af", "am", "ai", "an", "d", "p", "u", "ka", "aa", "h", "r", "z", "o", "ac", "y", "sa", "e", "offset", "da", "area", "l", "ad", "ae", "asa", "f", "A", "alpha", "ba", "w", "ca", "au", "g", "v"], "b": ["be", "account", "home", "c", "x", "ab", "lb", "beta", "d", "length", "bar", "p", "u", "nb", "pb", "aa", "bf", "bc", "r", "fb", "z", "cb", "o", "e", "y", "boot", "bas", "l", "rb", "emb", "base", "abb", "f", "bb", "ob", "sb", "bot", "ba", "bd", "eb", "bs", "mb", "w", "j", "ib", "B", "bl", "g", "wb", "v", "xb"], "total": ["percent", "mini", "ma", "Total", "partial", "final", "done", "id", "doc", "part", " Total", "mm", "meta", "d", "length", "result", "scale", "p", "count", "sum", "complete", "gross", "tp", "mill", "this", "number", "current", "no", "info", "o", "all", "size", "key", "trans", "loss", "nt", "ski", "ok", "na", "base", "skip", "error", "f", "now", "net", "printed", "mega", "serial", "max", "temp", "tt", "found", "ta", "w", "iter", "ss", "num", "valid", "full", "li", "multi", "mu"], "ms": ["amps", "rams", "mn", "ma", "MS", "mad", "c", "more", "lems", "les", "helps", "items", "ims", "ls", "me", "ments", "mm", "d", "mx", "mp", "ins", "p", "mi", "ens", "wm", "vals", "res", "params", "cs", "models", "mc", "ems", "es", "oms", "marks", "ams", "ns", "mis", "states", "md", "mas", "ans", "mo", "f", "mos", "mins", "ts", "ks", "q", "terms", "nos", "ws", "ss", "aps", "keys", "mes", "ys", "lines", "ps", "xs", "Ms", "mic", "ids", "ents", "km", "mu"], "k": ["kl", "ind", "end", "c", "ke", "id", "kw", "d", "p", "u", "kn", "nc", "no", "r", "h", "K", "o", "e", "y", "key", "l", "ad", "ok", "start", "f", "row", "ko", "net", "pi", "un", " j", "q", "ks", "nn", "max", "kk", "w", "j", "ik", "mk", "unk", "num", "ck", "sk", "g", "km", "v"], "m": ["dm", "fm", "mn", "mini", "ma", "vm", "c", "x", "am", "bm", "an", "d", "mm", "rm", "mp", "p", "u", "mon", "nb", "mi", "um", "gm", "cm", "mult", "h", "r", "auto", "mac", "no", "o", "e", "y", "mc", "pm", "term", "sm", "l", "machine", "md", "mas", "em", "om", "mo", "f", "hm", "im", "mr", "tm", "un", "ym", "nm", "mt", "mb", "mand", "j", "num", "M", "g", "v", "mu"]}}
{"code": "t = int(raw_input())\n  \n  for case in range(t):\n  \tr1 = int(raw_input())\n  \tc1 = []\n  \tfor j in range(4):\n  \t\tc1.append([int(i) for i in raw_input().split()])\n  \n  \tr2 = int(raw_input())\n  \tc2 = []\n  \tfor j in range(4):\n  \t\tc2.append([int(i) for i in raw_input().split()])\n  \n  \tnum = -1\n  \tpossibles = 0\n  \tfor j in c1[r1-1]:\n  \t\tif c2[r2-1].count(j) == 1:\n  \t\t\tnum = j\n  \t\t\tpossibles += 1\n  \n  \tif possibles > 1:\n  \t\tprint 'Case #'+str(case+1)+': Bad magician!'\n  \telif possibles == 0:\n  \t\tprint 'Case #'+str(case+1)+': Volunteer cheated!'\n  \telse:\n  \t\tprint 'Case #'+str(case+1)+': '+str(num)\n", "substitutes": {"t": ["c", "x", "qt", "it", "s", "T", "d", "p", "u", "tp", "m", "template", "h", "z", "r", "o", "e", "y", "dt", "ut", " T", "start", "ts", "f", "total", "ot", "cut", "tm", "q", "tt", "trial", "ta", "w", "time", "ti", "type", "test", "n", "times", "g", "v"], "case": ["ip", "ie", "slice", "jo", "text", "id", "code", "one", "ct", "part", "ide", "date", "ix", "a", "size", "cases", "b", "mode", "jp", "day", "du", "cell", "path", "position", "default", "rice", "config", "string", "loop", "k", "ai", "gi", "ace", "length", "seq", "name", "m", "z", "key", "line", "sec", "pe", "ice", "ti", "qi", "condition", "job", "c", "section", "u", "bc", "no", "division", "trial", "instance", "type", "ce", "v", "uc", "sequence", "ind", "end", "Case", "catch", "nice", "connection", "call", "ase", "chain", "race", "match", "q", "vi", "space", "set", "shape", "time", "test", "choice", "li"], "r1": ["rc2", "R3", "c3", "R1", "c0", " r3", "r0", "x8", "r8", "rc8", "R2", "rc1", "x1", " r0", "r3", "R0", "x2", "c8"], "c1": ["rc0", "rc3", " c0", "rc2", "c3", " c31", " cup", "C0", "c0", "Cup", "r0", "cup", " cn", "cn", "c31", "C2", "C1", "r31", "rn", "rup", " c3", "Cn", "rc1", "C31", "r3"], "j": ["ip", "ie", "id", "code", "jet", "note", "bj", "_", "h", "jam", "a", "e", "b", "int", "start", "jj", "on", "jp", "un", "cell", "adj", "n", "jing", "uj", "ja", "jit", "k", "ai", "ji", "jon", "length", "br", "p", "m", "r", "z", "o", "all", "key", "im", "ij", "obj", "w", "oj", "ch", "jl", "job", "x", "c", "aj", "u", "y", "l", "f", "iq", "js", "J", "je", "v", "ind", "end", "ion", "d", "number", "kj", "jump", "new", "q", "dj", "jc", "g"], "i": ["ini", "ip", "ie", "qi", "ind", "c", "jit", "x", "ni", "k", "id", "it", "ai", "ji", "yi", "chi", "d", "I", "bi", "io", "p", "u", "zi", "m", "r", "info", "ix", "z", "o", "e", "y", "l", "b", "int", "ri", "start", "f", "im", "on", "iu", "il", "xi", "pi", "q", "ori", "ii", "ui", "ik", "ti", "type", "index", "si", "ci", "ih", "n", "ia", "li", "v"], "r2": ["R4", "rr1", "v2", "r4", "R1", " r4", " r22", "vsecond", "r22", "rr4", "rsecond", "rr2", " rsecond", "rTwo", "u2", "R2", "rrTwo", " rTwo", "RTwo", "u22", "usecond", "v22"], "c2": ["p2", "v62", "cTwo", "v2", "c4", "p1", "Ctwo", "c62", "r4", "vTwo", "f2", "p6", " c62", "f4", "v1", " c8", "r8", "C2", "C1", "C4", "ctwo", "r6", "rTwo", "rtwo", "c6", "f1", "p8", "r62", " c6", "ftwo", " cTwo", "c8"], "num": ["span", "nom", "mun", "mn", "ind", "split", "c", "con", "x", "k", "lim", "ni", "id", "loc", "norm", "success", "multi", "lib", "part", "pos", "div", "note", "coord", "p", "count", "sum", "nb", "u", "mon", "loop", "um", "number", "m", "mom", "unit", "no", "off", "hom", "Num", "np", "b", "uni", "int", "om", "len", "en", "na", "lam", "im", "sim", "nam", "byn", "nu", "un", "set", "max", "trial", "NUM", "sn", "gen", "index", "umi", "dim", "n", "cal", "col"], "possibles": ["POSSibl", "passibilities", "passibles", "POSSibility", "pOSSible", "pOSSibl", "Possible", "positibles", "Possibles", "powersibilities", "pensibles", "posibly", "Passibility", "possibl", "posibility", "Passibles", "positible", "positibl", "Passibly", "POSSibilities", "POSSibles", "passibly", "Passibl", "Possibilities", "possibility", "Possibility", "powersibles", "passibl", "pOSSibly", "possibilities", "pensibly", "Possibl", "positibilities", "POSSible", "pOSSibility", "Possibly", "posibles", "passibility", "posibilities", "POSSibly", "pensibilities", "pensibility", "passible", "Passible", "possibly", "powersibility", "pOSSibilities", "Passibilities", "powersibly", "possible", "pOSSibles"]}}
{"code": "t = int(raw_input())\n  \n  for case in range(t):\n  \tn = int(raw_input())\n  \tnaomi = [float(i) for i in raw_input().split()]\n  \tken = [float(i) for i in raw_input().split()]\n  \n  \tnaomi.sort()\n  \tken.sort()\n  \ty = 0\n  \tz = 0\n  \n  \n  \tna = naomi[:]\n  \tke = ken[:]\n  \twhile len(na) > 0:\n  \t\tnc = na.pop(0)\n  \t\tkc = -1\n  \t\tfor i in range(len(ke)):\n  \t\t\tif ke[i] > nc:\n  \t\t\t\tkc = ke.pop(i)\n  \t\t\t\tbreak\n  \t\tif kc == -1:\n  \t\t\tkc = ke.pop(0)\n  \t\tif nc > kc:\n  \t\t\tz += 1\n  \n  \n  \tna = naomi[:]\n  \tke = ken[:]\n  \twhile len(ke) > 0:\n  \t\tkc = ke.pop(0)\n  \t\tnc = -1\n  \t\tfor i in range(len(na)):\n  \t\t\tif na[i] > kc:\n  \t\t\t\tnc = na.pop(i)\n  \t\t\t\tbreak\n  \t\tif nc == -1:\n  \t\t\tnc = na.pop(0)\n  \t\tif nc > kc:\n  \t\t\ty += 1\n  \n  \tprint 'Case #'+str(case+1)+':', y, z\n", "substitutes": {"t": ["tom", "tail", "c", "x", "qt", "it", "s", "T", "note", "p", "tz", "tp", "m", "template", "tick", "h", "r", "o", "tower", "e", "dt", "nt", "l", "int", " T", "b", "pt", "start", "ts", "f", "total", "ot", "trace", "ant", "tm", "q", "tt", "trial", "temp", "tip", "ta", "w", "j", "time", "type", "tie", "test", "g", "v"], "case": ["ie", "slice", "end", "c", "Case", "x", "loop", "text", "id", "code", "use", "me", "one", "ace", "example", "section", "length", "seq", "name", "count", "p", "switch", "ide", "bc", "call", "change", "size", "a", "exc", "key", "ase", "e", "cases", "b", "mode", "ise", "patch", "chain", "line", "f", "match", "order", "ice", "trial", "shape", "time", "num", "instance", "type", "app", "test", "choice", "position", "rice", "ce", "cube", "se"], "n": ["network", "N", "c", "x", "ni", "k", "d", "p", "nb", "m", "o", "size", "e", "nt", "ns", "int", "np", "l", "b", "len", "en", "ne", "f", "net", "nat", "nu", "ny", "nn", "w", "j", "num", "sn", "g"], "naomi": ["NAoki", " naoki", "neoki", "aogi", "naoki", "Naobi", "Naomi", " naoko", "NAobi", "nyoko", "nanoma", "naogi", "nanoki", "waoki", "waoko", "naobi", "daoki", "nyobi", "nyomi", "aoki", "nanoko", "daobi", "Naoko", "daoko", "neomi", "aoko", "aomi", "neogi", "daoma", "Naonic", "NAomi", "naoma", "waobi", "nanomi", "neoko", "naoko", "naonic", " naobi", " naoma", "waomi", "nyonic", "NAoko", " naonic", "daomi", "daogi"], "i": ["ip", "ie", "input", "mini", "ni", "range", "id", "it", "part", "I", "ix", "a", "e", "int", "b", "start", "on", "uri", "pi", "fi", "inf", "multi", "di", "ini", "idi", "k", "ai", "gi", "io", "p", "mi", "m", "r", "sp", "o", "im", "\u0438", "iu", "ii", "ui", "ti", "ci", "ei", "qi", "x", "c", "api", "yi", "chi", "bi", "section", "u", "zi", "current", "cli", "l", "eni", "ri", "f", "isi", "iq", "g", "j", "type", "si", "il", "v", "ind", "phi", "ion", "info", "xi", "q", "ori", "ik", "index", "li"], "ken": ["die", "la", "enny", "center", "han", "ja", "ket", "enn", "jin", "hen", "ker", "an", "dan", "yah", "ki", "jon", "wake", "broken", "ka", "keeper", "kn", "kel", "no", "jen", "thin", "nin", "ane", "fen", "da", "non", "ked", "zen", "en", "eni", "rake", "ne", "ko", "den", "kee", "nit", "byn", "nine", "wn", "ven", "white", "un", "inner", "ny", "una", "iden", "blank", "nn", "nee", "knife", "node", "inn", "aken", "gen", "miss", "ze", "don", "kin", "tan", "kens", "nan", "gan"], "y": ["gy", "sy", "hi", "x", "c", "k", "iz", "col", "xy", "yi", "d", "ey", "p", "u", "zi", "sky", "m", "py", "yn", "ye", "h", "Y", "a", "o", "e", "iny", "key", "yd", "yy", "l", "b", "cy", "ay", "iy", "f", "yl", "yt", "ny", "q", "dy", "ym", "oy", "w", "yr", "j", "vy", "year", "ky", "zy", "ze", "ys", "g", "ya"], "z": ["zn", "oz", "ind", " Z", "x", "c", "yz", "zone", "k", "zh", "iz", "az", "s", "yi", "nz", "d", "p", "zi", "u", "count", "tz", "zz", "_", "sh", "m", "za", "h", "Z", "Y", "e", "size", "cz", "zie", "zx", "nt", "l", "b", "ez", "ld", "zen", "zip", "uz", "depth", "f", "hz", "q", "ny", "w", "ii", "j", "gz", "zy", "ze", "index", "zo", "ce", "v"], "na": ["ana", "qa", "ni", "one", "nah", "ki", "note", " kn", "aa", "kn", "a", "area", "np", "Na", "kee", "anne", "una", "ina", "sc", "node", "nan", "di", "la", " si", "ja", "sync", " ma", "ye", "sa", "da", "nex", "va", "non", "base", "asa", "ne", "pa", "pe", "nova", "ga", "ta", "ann", " ya", "ca", "gen", "ci", "zn", " NA", " ka", " sky", "local", "enn", "chi", "NE", "ka", "wa", "za", "no", "ns", "eni", " sa", "fa", "nat", "ny", "nn", "ena", "ze", "kin", "ata", " ja", " sn", "he", "network", "NY", "NA", "ma", "data", "zone", "ha", "dan", "act", "nt", "null", "list", "nih", "nit", "nam", "nav", "nu", "nas", "ona", "ba", "space", "Ka", "po", "sk", "ya"], "ke": ["spe", "king", "ie", "ni", "KE", "ki", "note", "le", "ene", "kn", "e", "cf", "aka", "ae", "kee", "cle", "anne", "wk", "none", "die", "kell", "k", "ace", "este", "ek", "key", "nw", "da", "ffe", "ne", "ko", "ani", "pe", "poke", "ice", "ks", "el", "ci", "ck", "ense", "se", "oke", "ine", "ak", "ike", "qi", "Ke", "coe", "sh", "ka", " kne", "za", "kel", "de", "aze", "ane", "mix", "she", "ds", "knife", "oe", "ze", "wife", "ce", "ake", "kie", "ea", "he", "che", "cand", "ve", "kes", "edge", "co", "ked", "uke", "ld", "ou", "ise", "rake", "ink", "oda", "ku", "ode", "ik", "sk"], "nc": ["nr", "occ", "mn", "qa", "hn", "ni", "fc", "pc", "ng", "code", "ct", "nb", "inc", "gn", "jc", "cmp", "cs", "cf", "np", "acc", "cos", "sc", "NC", "nec", "anc", "sync", "k", "unc", "nz", "ec", "cb", "ac", "cn", "mc", "nw", "nd", "rn", "ne", "dn", "nm", "auc", "ci", "ync", "ck", "enc", "xc", "c", "roc", "zi", "cca", "bc", "exc", "cin", "ns", "conn", "rc", "ny", "lc", "cv", "nn", "uc", "dc", "nl", "cc", "co", "coll", "nt", "pn", "nu", "ku", "nic", "circ", "nv"], "kc": [" kcs", "Kci", "kpc", "kl", "qe", "qk", "Knc", " knc", "knc", "kci", "Kpc", "skci", "qcs", "qdc", "ekc", "skk", " kk", "Kl", "skdc", "skl", " kf", " kdc", "qci", "kcs", "ekf", "ekdc", "Kc", " kci", "Krc", "skcs", "ske", "Kf", "kdc", "Kdc", "eknc", "qc", "skc", "kk", "skpc", "krc", " kl", " krc", " kpc", "skf", "skrc", "qpc", "kf"]}}
{"code": "t = int(raw_input())\n  \n  for case in range(t):\n  \n  \tc, f, x = raw_input().split()\n  \tc = float(c)\n  \tf = float(f)\n  \tx = float(x)\n  \n  \tt = 0\n  \tcps = 2.0\n  \twhile c/cps < x/cps and t+x/cps > t+c/cps + x/(cps+f):\n  \t\tt += c/cps\n  \t\tcps += f\n  \n  \tt += x/cps\n  \n  \tprint 'Case #'+str(case+1)+':', t\n", "substitutes": {"t": ["timeout", "you", "it", "ct", "tc", "table", "tp", "this", "h", "at", "a", "e", "int", "b", "start", "ot", "wt", "ant", "duration", "n", "length", "p", "count", "m", "r", "z", "o", "tower", "pt", "ts", "i", "temp", "ta", "w", "ti", "tx", "tu", "qt", "out", "s", "tf", "u", "y", "dt", "l", "ut", "ty", "total", "trace", "trial", "j", "type", "v", "tn", "T", "d", "tim", "tz", "ert", "st", "offset", "nt", " T", "art", "cut", "q", "tt", "time", "test", "g"], "case": ["sequence", "client", "slice", "end", "rest", "Case", "default", "id", "code", "use", "catch", "d", "ace", "section", "length", "example", "count", "p", "switch", "number", "chance", "call", "ASE", "change", "point", "size", "e", "ce", "ase", " CASE", "cases", "int", "patch", "future", "start", "error", "race", "nce", "match", " trial", "pe", "ice", "trial", "shape", "time", "instance", "course", "type", "index", "test", "choice", "position", "phase", "rice", "config", "USE"], "c": ["uc", "cu", "con", "k", "fc", "pc", "vc", "col", "s", "ct", "d", "cc", "ec", "p", "u", "count", "m", "cm", "nc", "r", "z", "ch", "h", "ce", "o", "cs", "e", "y", "cf", "cn", "size", "at", "cin", "ac", "a", "l", "b", "cr", "cy", "rc", "i", "C", "q", "cycle", "lc", "cd", "w", "ca", "cl", "time", "cur", "ci", "n", "sc", "g", "co", "v"], "f": ["function", "form", "field", "fc", "k", "af", "col", "s", "of", "tf", "df", "d", "p", "u", "um", "m", "fl", "rf", "h", "r", "fb", "z", "bf", "float", "fp", "o", "cf", "y", "e", "fen", "a", "l", "b", "fe", "xf", "fit", "fast", "fx", "i", "fr", "now", "fa", "fs", "fi", "q", "sf", "ft", "fac", "w", "ef", "j", "feed", "inf", "F", "family", "file", "fg", "n", "g", "v", "fd"], "x": ["input", "plus", "fc", "xes", "ct", "h", "ix", "a", "e", "cf", "b", "int", "fx", "ax", "C", "F", "xs", "xml", "n", "form", "k", "p", "m", "r", "z", "o", "ctx", "xf", "i", "pe", "el", "w", "xx", "ext", "ci", "wx", "tx", "ch", "xc", "s", "u", "px", "ic", "self", "y", "es", "com", "l", "dx", "en", "cross", "array", "xxx", "j", "cl", "content", "v", "uc", "d", "cc", "ph", "rx", "co", "check", "php", "xi", "q", "time", "X", "index", "test", "ex", "g"], "cps": ["cPS", "cpp", "chpp", "fpped", "ancpps", "fPS", "fups", "cpps", "vps", "Cps", "ucips", "ercips", "cpped", "fcases", "cfs", "pcps", "cases", " cpped", "fcps", "chrs", "Cips", "ccips", "lcps", "Cfs", "fps", "acps", "dpe", "ccales", "vpps", "bps", "acips", "ercases", "bups", "cips", "ucPS", "Cups", "fccs", "pccs", "chpe", " cPS", "capped", "ctps", "Cpe", "fcamps", "Camps", "ccs", "acpe", "ercpped", "Cpped", "ucases", "fips", "vpped", "bplanes", "drs", "Cpt", "caplanes", " cases", " ccs", "pcPS", "fcpt", "lcrs", "fplanes", " cips", "fpe", "pcases", " cfs", "lcpe", "caups", "cpe", "ucpped", "fcPS", "cups", " cales", "ccps", "cpt", "Cpps", "caps", "lcpp", "ucps", "Cales", "acups", "ctpt", "ancpped", "ctamps", "dps", "ccfs", "ercps", "dpp", "cplanes", "ucpe", "ancps", "crs", " cpe", "cales", "vases", "chps", "ancases", "bpped", "Cases", "fcales", "camps", "ctales"]}}
{"code": "t = int(raw_input())\n  \n  code = 'yhesocvxduiglbkrztnwjpfmaq'\n  \n  for i in range(t):\n  \tl = []\n  \tfor j in range(4):\n  \t\tl.append(raw_input())\n  \tif i != t-1:\n  \t\traw_input()\n  \n  \tv = False\n  \tfin = False\n  \tfor li in l:\n  \t\tx = True\n  \t\to = True\n  \t\tfor c in li:\n  \t\t\tif c != 'X' and c != 'T':\n  \t\t\t\tx = False\n  \t\t\tif c != 'O' and c != 'T':\n  \t\t\t\to = False\n  \t\t\tif c == '.':\n  \t\t\t\tv = True\n  \t\tif x:\n  \t\t\tprint 'Case #'+str(i+1)+': X won'\n  \t\t\tfin = True\n  \t\tif o:\n  \t\t\tprint 'Case #'+str(i+1)+': O won'\n  \t\t\tfin = True\n  \n  \tif fin:\n  \t\tcontinue\n  \n  \tfor a in range(4):\n  \t\tx = True\n  \t\to = True\n  \t\tfor b in range(4):\n  \t\t\tif l[b][a] != 'X' and l[b][a] != 'T':\n  \t\t\t\tx = False\n  \t\t\tif l[b][a] != 'O' and l[b][a] != 'T':\n  \t\t\t\to = False\n  \t\tif x:\n  \t\t\tprint 'Case #'+str(i+1)+': X won'\n  \t\t\tfin = True\n  \t\tif o:\n  \t\t\tprint 'Case #'+str(i+1)+': O won'\n  \t\t\tfin = True\n  \tif fin:\n  \t\tcontinue\n  \n  \tx = True\n  \to = True\n  \tfor j in range(4):\n  \t\tif l[j][j] != 'X' and l[j][j] != 'T':\n  \t\t\tx = False\n  \t\tif l[j][j] != 'O' and l[j][j] != 'T':\n  \t\t\to = False\n  \tif x:\n  \t\tprint 'Case #'+str(i+1)+': X won'\n  \t\tcontinue\n  \tif o:\n  \t\tprint 'Case #'+str(i+1)+': O won'\n  \t\tcontinue\n  \tx = True\n  \to = True\n  \tfor j in range(4):\n  \t\tif l[3-j][j] != 'X' and l[3-j][j] != 'T':\n  \t\t\tx = False\n  \t\tif l[3-j][j] != 'O' and l[3-j][j] != 'T':\n  \t\t\to = False\n  \tif x:\n  \t\tprint 'Case #'+str(i+1)+': X won'\n  \t\tcontinue\n  \tif o:\n  \t\tprint 'Case #'+str(i+1)+': O won'\n  \t\tcontinue\n  \n  \tif v:\n  \t\tprint 'Case #'+str(i+1)+': Game has not completed'\n  \telse:\n  \t\tprint 'Case #'+str(i+1)+': Draw'\n", "substitutes": {"t": ["qt", "k", "it", "s", "tf", "T", "d", "p", "u", "tp", "m", "tr", "st", "h", "z", "r", "at", "e", "y", "dt", "nt", " T", "int", "ty", "ut", "pt", "start", "ts", "f", "total", "ot", "wt", "q", "tt", "ta", "w", "tip", "time", "num", "ti", "type", "test", "n", "g", "tn"], "code": ["rec", "xc", "end", "init", "id", "desc", "ll", "cc", "div", "ec", "result", "call", "nc", "ic", "z", "cb", "y", "cod", "int", "error", "rc", "start", "C", "sec", "fr", "Code", "cont", "q", "xxx", "xx", "cl", "codes", "go", "err", "ch"], "i": ["ip", "ie", "mini", "slice", "ni", "id", "it", "I", "h", "ix", "e", "int", "start", "now", "uri", "pi", "ib", "n", "multi", "di", "ini", "idi", "k", "ai", "ji", "gi", "io", "sup", "p", "name", "m", "z", "key", "esi", "image", "im", "ij", "iu", "ii", "ui", "ti", "ci", "ia", "ei", "hi", "init", "s", "yi", "chi", "bi", "u", "zi", "current", "ic", "y", "eni", "ri", "f", "g", "inner", "type", "si", "ind", "phi", "d", "info", "xi", "ori", "ik", "index"], "l": ["lab", "land", "le", "ln", "h", "hl", "ly", "e", "ell", "cell", "ur", "n", "la", "k", "loc", "lib", "ql", "p", "lin", "m", "r", "z", "line", "yl", "acl", "el", "w", "sl", "left", "rl", "kl", "lb", "ol", "s", "ll", "layer", "u", "fl", "y", "let", "pl", "f", "lo", "ml", "lc", "al", "like", "lu", "cl", "log", "il", "nl", "ls", "d", "shell", "ill", "L", "ul", "url", "las", "lam", "list", "lp", "q", "lang", "dl", "yll", "g"], "j": ["ie", "jo", "it", "jet", "part", "note", "bj", "_", "h", "jam", "e", "int", "jj", "ax", "jp", "ju", "er", "adj", "n", "jing", "uj", "ja", "json", "k", "ji", "jon", "br", "p", "m", "r", "z", "jen", "all", "key", "ij", "el", "obj", "w", "ii", "oj", "ui", "left", "ch", "se", "jl", "qi", "job", "out", "ge", "s", "aj", "u", "off", "ah", "y", "boot", "f", "g", "js", "J", "je", "ind", "end", "ion", "body", "d", "fr", "q", "jan", "vert", "jc"], "v": ["iv", "function", "k", "ve", "s", "video", "ll", "d", "vv", "p", "u", "m", "ln", "h", "r", "z", "no", "e", "uv", "y", "sv", "en", "V", "vs", "line", "f", "vd", "g", "fi", "q", "vi", "vo", "w", "ii", "vy", "log", "n", "nv"], "fin": ["ni", "id", "it", "bug", "pos", "oi", "ln", "h", "e", "int", "next", "bin", "start", "ot", "fi", "run", "ur", "file", "n", "mu", "ini", "fat", "die", "final", "spin", "k", "ov", "br", "lin", "p", "fine", "unit", "fe", "nd", "line", "spec", "fun", "err", "hide", " finish", "init", "div", "u", "zi", "fl", "no", "ic", "cond", "cin", "op", "en", "do", "f", "pin", "lo", "fa", "util", "like", "sn", "syn", "si", "fd", "fail", "ow", "end", "after", "dev", "Fin", "adv", "pid", "thin", "info", "fn", "FIN", "ok", "len", "inv", "commit", "skip", "fr", "nu", "q", "val", "os", "vert", "close"], "li": ["ei", "oci", "la", "cu", "ie", "qi", "kl", "lic", "ol", "lim", "ai", "loc", "ls", "lib", "ll", "bi", "Li", "le", "icc", "lin", "zi", "lit", "ln", "fl", "ic", "ul", "m", "ly", "ili", "co", "e", "pl", "lie", "lt", "len", "list", "line", "lo", "iu", "iq", "lp", "ml", "vi", "late", "lv", "el", "lc", "iam", "val", "lock", "ii", "lu", "ib", "cl", "log", "si", "ci", "ler", "bl", "jc", "il", "di"], "x": ["ie", "long", "bug", "fixed", "event", "h", "ix", "e", "bit", "int", "ax", "on", "none", "num", "opt", "inf", "xs", "full", "xml", "n", "over", "k", "xy", "io", "p", "name", "m", "auto", "r", "z", "key", "fast", "error", "im", "any", "el", "w", "xx", "ci", "wx", "wire", "function", "xc", "out", "ll", "inx", "u", "wa", "ic", "yn", "no", "y", "xp", "ns", "en", "do", "f", "cross", "to", "max", "xxx", "python", "bo", "data", "ox", "xt", "an", "d", "rx", "yes", "call", "co", "check", "active", "php", "object", "xi", "q", "val", "os", "ous", "X", "index", "go", "ex", "g"], "o": ["oi", "ln", "h", "e", "int", "ooo", "oo", "ob", "on", "O", "ot", "none", "n", "yo", "k", "io", "p", "m", "auto", "r", "z", "wo", "line", "error", "ko", "ino", "oy", "od", "w", "ii", "oa", "out", "ol", "oid", "u", "off", "ro", "no", "y", "op", "en", "do", "f", "to", "lo", "oe", "bo", "after", "d", "nt", "ok", "xi", "q", "vo", "os", "ori", "ode", "so", "online", "go", "po", "g"], "c": ["uc", "cu", "dc", "enc", "xc", "fc", "k", "con", "unc", "ai", "pc", "vc", "ct", "it", "cat", "ec", "cc", "d", "at", "icc", "p", "u", "m", "bc", "ic", "h", "cm", "nc", "z", "ch", "co", "ce", "ac", "mc", "e", "cf", "cn", "y", "cin", "cod", "cr", "cs", "chain", "cy", "f", "arc", "C", "rc", "ot", "lc", "r", "ca", "cl", "ci", "n", "sc", "oc", "g", "col"], "a": ["la", "ak", "ma", "xa", "qa", "af", "ab", "api", "am", "ai", "form", "n", "action", "an", "part", "cha", "aj", "p", "u", "name", "br", "ka", "aa", "za", "auto", "ah", "ac", "y", "sa", "e", "all", "da", "area", "ao", "va", "ad", "ae", "na", "art", "active", "ax", "aaa", "pa", "fa", "A", "alpha", "ba", "ar", "ach", "ga", "al", "any", "array", "ca", "oa", "vert", "au", "app", "ap", "ia", "ya"], "b": ["two", "bar", "nb", "aa", "h", "e", "bas", "rb", "ae", "bin", "aaa", "ib", "n", "k", "am", "ai", "br", "p", "m", "auto", "bf", "r", "z", "cb", "ac", "db", "sa", "old", "base", "bb", "abb", "pa", "sb", "ga", "eb", "both", "w", "ca", "binary", "B", "bl", "wb", "be", "ab", "lb", "s", "beta", "bi", "u", "bc", "fb", "y", "comb", "cy", "f", "fa", "al", "batch", "bo", "bis", "ver", "an", "body", "d", "ba", "bs", "g", "bh", "ya", "xb"]}}
{"code": "t = int(raw_input())\n  \n  for case in range(t):\n  \tprint 'Case #'+str(case+1)+':'\n  \tr, c, m = raw_input().split()\n  \tr = int(r)\n  \tc = int(c)\n  \tm = int(m)\n  \n  \tif m==0:\n  \t\tprint 'c' + ('.'*(c-1))\n  \t\tfor i in range(r-1):\n  \t\t\tprint '.'*c\n  \telif r == 1:\n  \t\tprint 'c'+('.'*(c-m-1))+('*'*(m))\n  \telif c == 1:\n  \t\tprint 'c'\n  \t\tfor i in range(r-m-1):\n  \t\t\tprint '.'\n  \t\tfor i in range(m):\n  \t\t\tprint '*'\n  \telif r == 2:\n  \t\tif m%2==0 and c>2 and m<r*c-2:\n  \t\t\tprint 'c'+('.'*(c-m/2-1))+('*'*(m/2))\n  \t\t\tprint ('.'*(c-m/2))+('*'*(m/2))\n  \t\telif m == r*c - 1:\n  \t\t\tprint 'c'+('*'*(c-1))\n  \t\t\tprint '*'*c\n  \t\telse:\n  \t\t\tprint 'Impossible'\n  \telif c == 2:\n  \t\tif m%2==0 and r>2 and m<r*c-2:\n  \t\t\tprint 'c.'\n  \t\t\tfor i in range(r-m/2-1):\n  \t\t\t\tprint '..'\n  \t\t\tfor i in range(m/2):\n  \t\t\t\tprint '**'\n  \t\telif m == r*c - 1:\n  \t\t\tprint 'c*'\n  \t\t\tfor i in range(r-1):\n  \t\t\t\tprint '**'\n  \t\telse:\n  \t\t\tprint 'Impossible'\n  \telif c == 3 and r == 3:\n  \t\tif m == 1:\n  \t\t\tprint 'c..'\n  \t\t\tprint '...'\n  \t\t\tprint '..*'\n  \t\telif m == 2:\n  \t\t\tprint 'Impossible'\n  \t\telif m == 3:\n  \t\t\tprint 'c..'\n  \t\t\tprint '...'\n  \t\t\tprint '***'\n  \t\telif m == 4:\n  \t\t\tprint 'Impossible'\n  \t\telif m == 5:\n  \t\t\tprint 'c.*'\n  \t\t\tprint '..*'\n  \t\t\tprint '***'\n  \t\telif m == 6:\n  \t\t\tprint 'Impossible'\n  \t\telif m == 7:\n  \t\t\tprint 'Impossible'\n  \t\telif m == 8:\n  \t\t\tprint 'c**'\n  \t\t\tprint '***'\n  \t\t\tprint '***'\n  \telif c == 3 and r == 4:\n  \t\tif m == 1:\n  \t\t\tprint 'c..'\n  \t\t\tprint '...'\n  \t\t\tprint '...'\n  \t\t\tprint '..*'\n  \t\telif m == 2:\n  \t\t\tprint 'c..'\n  \t\t\tprint '...'\n  \t\t\tprint '..*'\n  \t\t\tprint '..*'\n  \t\telif m == 3:\n  \t\t\tprint 'c..'\n  \t\t\tprint '...'\n  \t\t\tprint '...'\n  \t\t\tprint '***'\n  \t\telif m == 4:\n  \t\t\tprint 'c.*'\n  \t\t\tprint '..*'\n  \t\t\tprint '..*'\n  \t\t\tprint '..*'\n  \t\telif m == 5:\n  \t\t\tprint 'Impossible'\n  \t\telif m == 6:\n  \t\t\tprint 'c..'\n  \t\t\tprint '...'\n  \t\t\tprint '***'\n  \t\t\tprint '***'\n  \t\telif m == 7:\n  \t\t\tprint 'Impossible'\n  \t\telif m == 8:\n  \t\t\tprint 'c.*'\n  \t\t\tprint '..*'\n  \t\t\tprint '***'\n  \t\t\tprint '***'\n  \t\telif m == 9:\n  \t\t\tprint 'Impossible'\n  \t\telif m == 10:\n  \t\t\tprint 'Impossible'\n  \t\telif m == 11:\n  \t\t\tprint 'c**'\n  \t\t\tprint '***'\n  \t\t\tprint '***'\n  \t\t\tprint '***'\n  \telif c == 3 and r == 5:\n  \t\tif m == 1:\n  \t\t\tprint 'c..'\n  \t\t\tprint '...'\n  \t\t\tprint '...'\n  \t\t\tprint '...'\n  \t\t\tprint '..*'\n  \t\telif m == 2:\n  \t\t\tprint 'c..'\n  \t\t\tprint '...'\n  \t\t\tprint '...'\n  \t\t\tprint '..*'\n  \t\t\tprint '..*'\n  \t\telif m == 3:\n  \t\t\tprint 'c..'\n  \t\t\tprint '...'\n  \t\t\tprint '..*'\n  \t\t\tprint '..*'\n  \t\t\tprint '..*'\n  \t\telif m == 4:\n  \t\t\tprint 'c..'\n  \t\t\tprint '...'\n  \t\t\tprint '...'\n  \t\t\tprint '..*'\n  \t\t\tprint '***'\n  \t\telif m == 5:\n  \t\t\tprint 'c.*'\n  \t\t\tprint '..*'\n  \t\t\tprint '..*'\n  \t\t\tprint '..*'\n  \t\t\tprint '..*'\n  \t\telif m == 6:\n  \t\t\tprint 'c..'\n  \t\t\tprint '...'\n  \t\t\tprint '...'\n  \t\t\tprint '***'\n  \t\t\tprint '***'\n  \t\telif m == 7:\n  \t\t\tprint 'c..'\n  \t\t\tprint '...'\n  \t\t\tprint '..*'\n  \t\t\tprint '***'\n  \t\t\tprint '***'\n  \t\telif m == 8:\n  \t\t\tprint 'Impossible'\n  \t\telif m == 9:\n  \t\t\tprint 'c..'\n  \t\t\tprint '...'\n  \t\t\tprint '***'\n  \t\t\tprint '***'\n  \t\t\tprint '***'\n  \t\telif m == 10:\n  \t\t\tprint 'Impossible'\n  \t\telif m == 11:\n  \t\t\tprint 'c.*'\n  \t\t\tprint '..*'\n  \t\t\tprint '***'\n  \t\t\tprint '***'\n  \t\t\tprint '***'\n  \t\telif m == 12:\n  \t\t\tprint 'Impossible'\n  \t\telif m == 13:\n  \t\t\tprint 'Impossible'\n  \t\telif m == 14:\n  \t\t\tprint 'c**'\n  \t\t\tprint '***'\n  \t\t\tprint '***'\n  \t\t\tprint '***'\n  \t\t\tprint '***'\n  \telif c == 4 and r == 3:\n  \t\tif m == 1:\n  \t\t\tprint 'c...'\n  \t\t\tprint '....'\n  \t\t\tprint '...*'\n  \t\telif m == 2:\n  \t\t\tprint 'c...'\n  \t\t\tprint '...*'\n  \t\t\tprint '...*'\n  \t\telif m == 3:\n  \t\t\tprint 'c..*'\n  \t\t\tprint '...*'\n  \t\t\tprint '...*'\n  \t\telif m == 4:\n  \t\t\tprint 'c...'\n  \t\t\tprint '....'\n  \t\t\tprint '****'\n  \t\telif m == 5:\n  \t\t\tprint 'Impossible'\n  \t\telif m == 6:\n  \t\t\tprint 'c.**'\n  \t\t\tprint '..**'\n  \t\t\tprint '..**'\n  \t\telif m == 7:\n  \t\t\tprint 'Impossible'\n  \t\telif m == 8:\n  \t\t\tprint 'c.**'\n  \t\t\tprint '..**'\n  \t\t\tprint '****'\n  \t\telif m == 9:\n  \t\t\tprint 'Impossible'\n  \t\telif m == 10:\n  \t\t\tprint 'Impossible'\n  \t\telif m == 11:\n  \t\t\tprint 'c***'\n  \t\t\tprint '****'\n  \t\t\tprint '****'\n  \telif c == 4 and r == 4:\n  \t\tif m == 1:\n  \t\t\tprint 'c...'\n  \t\t\tprint '....'\n  \t\t\tprint '....'\n  \t\t\tprint '...*'\n  \t\telif m == 2:\n  \t\t\tprint 'c...'\n  \t\t\tprint '....'\n  \t\t\tprint '....'\n  \t\t\tprint '..**'\n  \t\telif m == 3:\n  \t\t\tprint 'c...'\n  \t\t\tprint '....'\n  \t\t\tprint '...*'\n  \t\t\tprint '..**'\n  \t\telif m == 4:\n  \t\t\tprint 'c...'\n  \t\t\tprint '....'\n  \t\t\tprint '....'\n  \t\t\tprint '****'\n  \t\telif m == 5:\n  \t\t\tprint 'c...'\n  \t\t\tprint '....'\n  \t\t\tprint '...*'\n  \t\t\tprint '****'\n  \t\telif m == 6:\n  \t\t\tprint 'c...'\n  \t\t\tprint '....'\n  \t\t\tprint '..**'\n  \t\t\tprint '****'\n  \t\telif m == 7:\n  \t\t\tprint 'c..*'\n  \t\t\tprint '...*'\n  \t\t\tprint '...*'\n  \t\t\tprint '****'\n  \t\telif m == 8:\n  \t\t\tprint 'c...'\n  \t\t\tprint '....'\n  \t\t\tprint '****'\n  \t\t\tprint '****'\n  \t\telif m == 9:\n  \t\t\tprint 'Impossible'\n  \t\telif m == 10:\n  \t\t\tprint 'c.**'\n  \t\t\tprint '..**'\n  \t\t\tprint '..**'\n  \t\t\tprint '****'\n  \t\telif m == 11:\n  \t\t\tprint 'Impossible'\n  \t\telif m == 12:\n  \t\t\tprint 'c.**'\n  \t\t\tprint '..**'\n  \t\t\tprint '****'\n  \t\t\tprint '****'\n  \t\telif m == 13:\n  \t\t\tprint 'Impossible'\n  \t\telif m == 14:\n  \t\t\tprint 'Impossible'\n  \t\telif m == 15:\n  \t\t\tprint 'c***'\n  \t\t\tprint '****'\n  \t\t\tprint '****'\n  \t\t\tprint '****'\n  \telif c == 4 and r == 5:\n  \t\tif m == 1:\n  \t\t\tprint 'c...'\n  \t\t\tprint '....'\n  \t\t\tprint '....'\n  \t\t\tprint '....'\n  \t\t\tprint '...*'\n  \t\telif m == 2:\n  \t\t\tprint 'c...'\n  \t\t\tprint '....'\n  \t\t\tprint '....'\n  \t\t\tprint '....'\n  \t\t\tprint '..**'\n  \t\telif m == 3:\n  \t\t\tprint 'c...'\n  \t\t\tprint '....'\n  \t\t\tprint '...*'\n  \t\t\tprint '...*'\n  \t\t\tprint '...*'\n  \t\telif m == 4:\n  \t\t\tprint 'c...'\n  \t\t\tprint '....'\n  \t\t\tprint '....'\n  \t\t\tprint '....'\n  \t\t\tprint '****'\n  \t\telif m == 5:\n  \t\t\tprint 'c..*'\n  \t\t\tprint '...*'\n  \t\t\tprint '...*'\n  \t\t\tprint '...*'\n  \t\t\tprint '...*'\n  \t\telif m == 6:\n  \t\t\tprint 'c...'\n  \t\t\tprint '....'\n  \t\t\tprint '....'\n  \t\t\tprint '..**'\n  \t\t\tprint '****'\n  \t\telif m == 7:\n  \t\t\tprint 'c..*'\n  \t\t\tprint '...*'\n  \t\t\tprint '...*'\n  \t\t\tprint '..**'\n  \t\t\tprint '..**'\n  \t\telif m == 8:\n  \t\t\tprint 'c...'\n  \t\t\tprint '....'\n  \t\t\tprint '....'\n  \t\t\tprint '****'\n  \t\t\tprint '****'\n  \t\telif m == 9:\n  \t\t\tprint 'c..*'\n  \t\t\tprint '...*'\n  \t\t\tprint '...*'\n  \t\t\tprint '..**'\n  \t\t\tprint '****'\n  \t\telif m == 10:\n  \t\t\tprint 'c.**'\n  \t\t\tprint '..**'\n  \t\t\tprint '..**'\n  \t\t\tprint '..**'\n  \t\t\tprint '..**'\n  \t\telif m == 11:\n  \t\t\tprint 'c..*'\n  \t\t\tprint '...*'\n  \t\t\tprint '...*'\n  \t\t\tprint '****'\n  \t\t\tprint '****'\n  \t\telif m == 12:\n  \t\t\tprint 'c...'\n  \t\t\tprint '....'\n  \t\t\tprint '****'\n  \t\t\tprint '****'\n  \t\t\tprint '****'\n  \t\telif m == 13:\n  \t\t\tprint 'Impossible'\n  \t\telif m == 14:\n  \t\t\tprint 'c..*'\n  \t\t\tprint '...*'\n  \t\t\tprint '****'\n  \t\t\tprint '****'\n  \t\t\tprint '****'\n  \t\telif m == 15:\n  \t\t\tprint 'Impossible'\n  \t\telif m == 16:\n  \t\t\tprint 'c.**'\n  \t\t\tprint '..**'\n  \t\t\tprint '****'\n  \t\t\tprint '****'\n  \t\t\tprint '****'\n  \t\telif m == 17:\n  \t\t\tprint 'Impossible'\n  \t\telif m == 18:\n  \t\t\tprint 'Impossible'\n  \t\telif m == 19:\n  \t\t\tprint 'c***'\n  \t\t\tprint '****'\n  \t\t\tprint '****'\n  \t\t\tprint '****'\n  \t\t\tprint '****'\n  \telif c == 5 and r == 3:\n  \t\tif m == 1:\n  \t\t\tprint 'c....'\n  \t\t\tprint '.....'\n  \t\t\tprint '....*'\n  \t\telif m == 2:\n  \t\t\tprint 'c....'\n  \t\t\tprint '.....'\n  \t\t\tprint '...**'\n  \t\telif m == 3:\n  \t\t\tprint 'c....'\n  \t\t\tprint '.....'\n  \t\t\tprint '..***'\n  \t\telif m == 4:\n  \t\t\tprint 'c...*'\n  \t\t\tprint '....*'\n  \t\t\tprint '...**'\n  \t\telif m == 5:\n  \t\t\tprint 'c....'\n  \t\t\tprint '.....'\n  \t\t\tprint '*****'\n  \t\telif m == 6:\n  \t\t\tprint 'c..**'\n  \t\t\tprint '...**'\n  \t\t\tprint '...**'\n  \t\telif m == 7:\n  \t\t\tprint 'c..**'\n  \t\t\tprint '...**'\n  \t\t\tprint '..***'\n  \t\telif m == 8:\n  \t\t\tprint 'Impossible'\n  \t\telif m == 9:\n  \t\t\tprint 'c.***'\n  \t\t\tprint '..***'\n  \t\t\tprint '..***'\n  \t\telif m == 10:\n  \t\t\tprint 'Impossible'\n  \t\telif m == 11:\n  \t\t\tprint 'c.***'\n  \t\t\tprint '..***'\n  \t\t\tprint '*****'\n  \t\telif m == 12:\n  \t\t\tprint 'Impossible'\n  \t\telif m == 13:\n  \t\t\tprint 'Impossible'\n  \t\telif m == 14:\n  \t\t\tprint 'c****'\n  \t\t\tprint '*****'\n  \t\t\tprint '*****'\n  \telif c == 5 and r == 4:\n  \t\tif m == 1:\n  \t\t\tprint 'c....'\n  \t\t\tprint '.....'\n  \t\t\tprint '.....'\n  \t\t\tprint '....*'\n  \t\telif m == 2:\n  \t\t\tprint 'c....'\n  \t\t\tprint '.....'\n  \t\t\tprint '.....'\n  \t\t\tprint '...**'\n  \t\telif m == 3:\n  \t\t\tprint 'c....'\n  \t\t\tprint '.....'\n  \t\t\tprint '.....'\n  \t\t\tprint '..***'\n  \t\telif m == 4:\n  \t\t\tprint 'c...*'\n  \t\t\tprint '....*'\n  \t\t\tprint '....*'\n  \t\t\tprint '....*'\n  \t\telif m == 5:\n  \t\t\tprint 'c....'\n  \t\t\tprint '.....'\n  \t\t\tprint '.....'\n  \t\t\tprint '*****'\n  \t\telif m == 6:\n  \t\t\tprint 'c...*'\n  \t\t\tprint '....*'\n  \t\t\tprint '....*'\n  \t\t\tprint '..***'\n  \t\telif m == 7:\n  \t\t\tprint 'c....'\n  \t\t\tprint '.....'\n  \t\t\tprint '...**'\n  \t\t\tprint '*****'\n  \t\telif m == 8:\n  \t\t\tprint 'c..**'\n  \t\t\tprint '...**'\n  \t\t\tprint '...**'\n  \t\t\tprint '...**'\n  \t\telif m == 9:\n  \t\t\tprint 'c...*'\n  \t\t\tprint '....*'\n  \t\t\tprint '...**'\n  \t\t\tprint '*****'\n  \t\telif m == 10:\n  \t\t\tprint 'c....'\n  \t\t\tprint '.....'\n  \t\t\tprint '*****'\n  \t\t\tprint '*****'\n  \t\telif m == 11:\n  \t\t\tprint 'c..**'\n  \t\t\tprint '...**'\n  \t\t\tprint '...**'\n  \t\t\tprint '*****'\n  \t\telif m == 12:\n  \t\t\tprint 'c.***'\n  \t\t\tprint '..***'\n  \t\t\tprint '..***'\n  \t\t\tprint '..***'\n  \t\telif m == 13:\n  \t\t\tprint 'Impossible'\n  \t\telif m == 14:\n  \t\t\tprint 'c.***'\n  \t\t\tprint '..***'\n  \t\t\tprint '..***'\n  \t\t\tprint '*****'\n  \t\telif m == 15:\n  \t\t\tprint 'Impossible'\n  \t\telif m == 16:\n  \t\t\tprint 'c.***'\n  \t\t\tprint '..***'\n  \t\t\tprint '*****'\n  \t\t\tprint '*****'\n  \t\telif m == 17:\n  \t\t\tprint 'Impossible'\n  \t\telif m == 18:\n  \t\t\tprint 'Impossible'\n  \t\telif m == 19:\n  \t\t\tprint 'c****'\n  \t\t\tprint '*****'\n  \t\t\tprint '*****'\n  \t\t\tprint '*****'\n  \telif c == 5 and r == 5:\n  \t\tif m == 1:\n  \t\t\tprint 'c....'\n  \t\t\tprint '.....'\n  \t\t\tprint '.....'\n  \t\t\tprint '.....'\n  \t\t\tprint '....*'\n  \t\telif m == 2:\n  \t\t\tprint 'c....'\n  \t\t\tprint '.....'\n  \t\t\tprint '.....'\n  \t\t\tprint '.....'\n  \t\t\tprint '...**'\n  \t\telif m == 3:\n  \t\t\tprint 'c....'\n  \t\t\tprint '.....'\n  \t\t\tprint '.....'\n  \t\t\tprint '.....'\n  \t\t\tprint '..***'\n  \t\telif m == 4:\n  \t\t\tprint 'c....'\n  \t\t\tprint '.....'\n  \t\t\tprint '.....'\n  \t\t\tprint '...**'\n  \t\t\tprint '...**'\n  \t\telif m == 5:\n  \t\t\tprint 'c....'\n  \t\t\tprint '.....'\n  \t\t\tprint '.....'\n  \t\t\tprint '.....'\n  \t\t\tprint '*****'\n  \t\telif m == 6:\n  \t\t\tprint 'c....'\n  \t\t\tprint '.....'\n  \t\t\tprint '.....'\n  \t\t\tprint '..***'\n  \t\t\tprint '..***'\n  \t\telif m == 7:\n  \t\t\tprint 'c....'\n  \t\t\tprint '.....'\n  \t\t\tprint '.....'\n  \t\t\tprint '...**'\n  \t\t\tprint '*****'\n  \t\telif m == 8:\n  \t\t\tprint 'c....'\n  \t\t\tprint '.....'\n  \t\t\tprint '.....'\n  \t\t\tprint '..***'\n  \t\t\tprint '*****'\n  \t\telif m == 9:\n  \t\t\tprint 'c...*'\n  \t\t\tprint '....*'\n  \t\t\tprint '....*'\n  \t\t\tprint '....*'\n  \t\t\tprint '*****'\n  \t\telif m == 10:\n  \t\t\tprint 'c....'\n  \t\t\tprint '.....'\n  \t\t\tprint '.....'\n  \t\t\tprint '*****'\n  \t\t\tprint '*****'\n  \t\telif m == 11:\n  \t\t\tprint 'c....'\n  \t\t\tprint '.....'\n  \t\t\tprint '....*'\n  \t\t\tprint '*****'\n  \t\t\tprint '*****'\n  \t\telif m == 12:\n  \t\t\tprint 'c....'\n  \t\t\tprint '.....'\n  \t\t\tprint '...**'\n  \t\t\tprint '*****'\n  \t\t\tprint '*****'\n  \t\telif m == 13:\n  \t\t\tprint 'c....'\n  \t\t\tprint '.....'\n  \t\t\tprint '..***'\n  \t\t\tprint '*****'\n  \t\t\tprint '*****'\n  \t\telif m == 14:\n  \t\t\tprint 'c..**'\n  \t\t\tprint '...**'\n  \t\t\tprint '...**'\n  \t\t\tprint '..***'\n  \t\t\tprint '*****'\n  \t\telif m == 15:\n  \t\t\tprint 'c....'\n  \t\t\tprint '.....'\n  \t\t\tprint '*****'\n  \t\t\tprint '*****'\n  \t\t\tprint '*****'\n  \t\telif m == 16:\n  \t\t\tprint 'c..**'\n  \t\t\tprint '...**'\n  \t\t\tprint '...**'\n  \t\t\tprint '*****'\n  \t\t\tprint '*****'\n  \t\telif m == 17:\n  \t\t\tprint 'c..**'\n  \t\t\tprint '...**'\n  \t\t\tprint '..***'\n  \t\t\tprint '*****'\n  \t\t\tprint '*****'\n  \t\telif m == 18:\n  \t\t\tprint 'Impossible'\n  \t\telif m == 19:\n  \t\t\tprint 'c..**'\n  \t\t\tprint '...**'\n  \t\t\tprint '*****'\n  \t\t\tprint '*****'\n  \t\t\tprint '*****'\n  \t\telif m == 20:\n  \t\t\tprint 'Impossible'\n  \t\telif m == 21:\n  \t\t\tprint 'c.***'\n  \t\t\tprint '..***'\n  \t\t\tprint '*****'\n  \t\t\tprint '*****'\n  \t\t\tprint '*****'\n  \t\telif m == 22:\n  \t\t\tprint 'Impossible'\n  \t\telif m == 23:\n  \t\t\tprint 'Impossible'\n  \t\telif m == 24:\n  \t\t\tprint 'c****'\n  \t\t\tprint '*****'\n  \t\t\tprint '*****'\n  \t\t\tprint '*****'\n  \t\t\tprint '*****'\n  \telse:\n  \t\tprint 'Impossible'\n  \n", "substitutes": {"t": ["tom", "x", "text", "it", "s", "T", "d", "p", "u", "tc", "table", "tz", "template", "z", "h", "at", "o", "e", "y", "a", "dt", "l", "b", "int", "start", "f", "port", "ts", "scroll", "tm", "q", "title", "tt", "trial", "temp", "tip", "w", "er", "time", "ur", "type", "test", "n", "v"], "case": ["v", "slice", "end", "Case", "x", "loop", "default", "text", "id", "code", "loc", "use", "me", "ace", "d", "section", "length", "seq", "result", "name", "p", "count", "table", "number", "change", "ce", "size", "key", "ase", "cases", "mode", "patch", "line", "race", "match", "ice", "max", "trial", "shape", "time", "instance", "type", "app", "test", "choice", "position", "rice", "config"], "r": ["nr", "rec", "sr", "right", "x", "ru", "k", "range", "s", "rar", "d", "dr", "rm", "ter", "br", "p", "u", "hr", "ir", "lr", "tr", "h", "ro", "rg", "z", "o", "a", "e", "y", "cr", "l", "b", "rb", "rh", "re", "nor", "gr", "chain", "R", "f", "rc", "C", "fr", "order", "mr", "rr", "rs", "q", "rt", "ar", "lc", "w", "yr", "er", "j", "pr", "ur", "n", "g", "rl", "err", "v"], "c": ["rec", "con", "pc", "code", "ct", "nc", "h", "at", "cs", "e", "a", "cf", "cr", "b", "arc", "C", "cycle", "ur", "n", "sc", "config", "cu", "k", "unc", "loc", "ec", "p", "count", "cm", "z", "o", "all", "ac", "mc", "cn", "cent", "w", "ca", "cp", "ci", "ch", "xc", "x", "s", "cat", "u", "ic", "y", "cin", "l", "cy", "f", "rc", "CC", "cont", "ar", "lc", "cv", "j", "cl", "cur", "oc", "ce", "v", "uc", "dc", "d", "cc", "call", "co", "re", "core", "chain", "cum", "q", "g", "col"], "m": ["mn", "mini", "more", "range", "one", "mm", "rm", "dr", "gm", "h", "at", "a", "e", "term", "cr", "sm", "b", "md", "hem", "tm", "er", "ur", "n", "multi", "mu", "k", "am", "me", "alm", "p", "mon", "mi", "cm", "z", "o", "all", "mc", "ms", "em", "line", "hm", "im", "mr", "mod", "ym", "nm", "mt", "w", "ch", "mad", "x", "bm", "s", "orm", "u", "y", "l", "machine", "en", "mo", "f", "model", "ar", "lc", "al", "j", "M", "v", "dm", "fm", "end", "an", "d", "um", "pm", "re", "om", "fr", "module", "q", "man", "time", "arm", "g"], "i": ["ini", "ei", "ip", "iw", "iv", "ie", "qi", "x", "ni", "phi", "ai", "it", "s", "yi", "id", "ji", "chi", "I", "bi", "io", "p", "zi", "u", "oi", "ir", "ic", "h", "o", "e", "l", "int", "b", "ri", "iy", "f", "im", "ij", "iu", "il", "iq", "xi", "\u0438", "pi", "fi", "vi", "ii", "ib", "ui", "j", "ti", "si", "ci", "n", "ia", "li", "v", "di"]}}
{"code": "t = int(raw_input())\n  \n  code = ['y', 'h', 'e', 's', 'o', 'c', 'v', 'x', 'd', 'u', 'i', 'g', 'l', 'b', 'k', 'r', 'z', 't', 'n', 'w', 'j', 'p', 'f', 'm', 'a', 'q']\n  \n  for i in range(t):\n  \tline = raw_input()\n  \tdecoded = ''\n  \n  \tfor c in line:\n  \t\tif c==' ':\n  \t\t\tdecoded += c\n  \t\telse:\n  \t\t\tdecoded += code[ord(c)-97]\n  \n  \tprint 'Case #'+str(i+1)+':', decoded\n", "substitutes": {"t": ["tree", "sequence", "data", "x", "tail", "text", "s", "T", "d", "p", "u", "count", "table", "tz", "m", "template", "tick", "r", "z", "o", "e", "y", "l", "int", "b", "ut", "start", "f", "total", "ts", "ties", "det", "new", "output", "tab", "set", "array", "temp", "title", "diff", "ta", "w", "trial", "time", "transform", "test", "python", "n", "string", "config", "v"], "code": ["sequence", "enc", "data", "comment", "form", "x", "value", "text", "done", "id", "message", "body", "cc", "buffer", "result", "cache", "case", "source", "count", "create", "table", "complete", "char", "current", "call", "header", "co", "change", "key", "element", "cod", "const", "back", "frame", "check", "command", "list", "error", "C", "order", "Code", "late", "coded", "ode", "pair", "content", "codes", "type", "test", "address", "ce", "ch"], "i": ["ini", "idi", "uc", "ip", "v", "cu", "mini", "qi", "ind", "xc", "anc", "end", "x", "slice", "phi", "k", "reci", "id", "ai", "pc", "unc", "d", "I", "ace", "bi", "p", "u", "oi", "mi", "m", "h", "ix", "z", "cli", "my", "o", "e", "ac", "y", "l", "int", "b", "ri", "f", "iu", "xi", "uri", "pi", "lc", "w", "ii", "j", "ib", "ui", "index", "ci", "n", "oc", "li", "multi", "col"], "line": ["sequence", "enc", "data", "input", "comment", "status", "long", "end", "out", "block", "text", "range", "message", "body", "d", "le", "lin", "source", "page", "case", "char", "m", "st", "lf", "de", "e", "orig", "coll", "cond", "LINE", "cr", "re", "frame", "l", "len", "user", "str", "list", "error", "row", "f", "C", "Line", "dec", "val", "lc", "cell", "ode", "lined", "cl", "content", "time", "lines", "type", "file", "n", "string", "g", "inline", "err", "col"], "decoded": ["encoded", "decided", "encided", " decoder", "Decrypted", "Decode", "encored", "Decided", "declided", "decloder", "deoded", "Decoded", "encode", "deode", " decored", " decode", "decored", "deided", "desoded", "decicated", "desicated", "decode", "derypted", " decrypted", "encrypted", "decrypted", " decided", "declored", "desided", "decoder", " decicated", "deicated", "encoder", "decloded", "desrypted"], "c": ["uc", "v", "rec", "enc", "cu", "dc", "xc", "end", "x", "fc", "k", "con", "unc", "pc", "s", "ct", "cat", "cc", "d", "ec", "p", "u", "count", "name", "case", "m", "cm", "ic", "nc", "r", "h", "z", "csv", "ce", "o", "a", "ac", "e", "cf", "all", "cs", "cod", "at", "y", "cr", "l", "b", "f", "arc", "C", "q", "dec", "lc", "cell", "w", "ci", "n", "g", "col"]}}
{"code": " \n  stdin = sys.stdin\n  for c in xrange(int(stdin.readline())):\n      n,m = map(int, stdin.readline().split())\n      rows = [map(int, stdin.readline().split()) for i in xrange(n)]\n      cols = [[row[i] for row in rows] for i in xrange(m)]\n  \n      rowmaxs = [max(x) for x in rows]\n      colmaxs = [max(x) for x in cols]\n  \n      verdict = \"YES\"\n      for i in xrange(n):\n          for k in xrange(m):\n              if min(rowmaxs[i], colmaxs[k]) > rows[i][k]:\n                  verdict = \"NO\"\n                  break\n  \n          if verdict == \"NO\": break\n  \n      print \"Case #%i: %s\" % (c+1, verdict)\n", "substitutes": {"stdin": [" stdino", "stins", "builtIN", "dustins", "STDins", "dustout", "stdout", "builtinn", "crinn", " stdIN", "STDout", "stdinner", " stdinner", " stdins", "crIN", "stout", "STDin", "STDinner", "gradin", "STDdin", "gradout", "rbins", "dustin", "stdins", "stin", "stdIN", "rbino", "rbout", "gradino", " stddin", " stdinn", "rbin", "dustinner", "gradins", "crins", "stdinn", "stddin", " stdout", "stdino", "builtins", "builtin", "crin"], "c": ["v", "uc", "rec", "cu", "dc", "conf", "xc", "end", "fc", "unc", "pc", "ai", "kw", "s", "ct", "cc", "d", " col", "icc", "u", "aic", "p", "count", "bc", "ic", "nc", "cm", "r", "h", "z", "co", "toc", "a", "ac", "mc", "cf", "e", "abc", "l", "b", "t", "chain", "arc", "f", "C", "lc", "cell", "w", "index", "ci", "g", "col"], "n": ["N", "ni", "s", "col", "an", "d", "p", "u", "name", "nb", "no", "r", "z", "o", "size", "e", "y", "cn", "nt", "ns", "b", "t", "l", "en", "ne", "f", "dn", "net", "nu", "un", "q", "nn", "max", "w", "j", "num", "sn", "min", "g", "v"], "m": ["dm", "span", "mn", "range", "bm", "s", "middle", "an", "d", "mm", "p", "u", "mon", "mi", "cm", "h", "r", "z", "o", "a", "e", "y", "mc", "ms", "l", "b", "sm", "t", "em", "md", "en", "om", "f", "hm", "im", "module", "pi", "tm", "q", "ym", "w", "j", "M", "dim", "g", "km", "v", "mu"], "rows": ["xes", "ros", "cs", "files", "cases", "fs", "rs", "boxes", "frames", "keys", "xs", "ows", "times", "features", " folds", "acks", "works", "fields", "length", "months", "opens", "flows", "runs", "r", "z", "ward", "odes", "ms", "states", "pages", "users", "ues", "ries", "headers", "ks", "objects", "ays", "checks", "w", "groups", "heads", "ids", "orders", "roc", "posts", "reports", "values", "models", "cells", "words", "maps", "results", "blocks", "OWS", "uc", "tracks", "rown", "ips", "relations", "items", "views", "vals", "images", "rooms", "events", "coll", "forms", "names", "reads", "members", "breaks", "holes", "lines", "col"], "i": ["ip", "ie", "id", "it", "ki", "I", "oi", "ir", "h", "ix", "a", "e", "int", "b", "li", "pi", "min", "di", "ini", "iw", "ai", "ji", "gi", "io", "p", "r", "z", "o", "ac", "t", "line", "im", "iu", "w", "ii", "ui", "unk", "ti", "ci", "ei", "qi", "s", "yi", "bi", "zi", "u", "ic", "y", "l", "eni", "ri", "f", "iq", "j", "si", "il", "v", "ind", "d", "xi", "vi", "ori", "ik", "index", "go", "g", "col"], "cols": ["columns", "lengths", " coles", "coles", "columnsets", "cold", " cold", "colsets", "columnlines", "Cold", "Colows", "collines", "lengthes", "Coles", "colows", "lengthlines", "columnd", "Cols", "columnows", " collines", " colsets", " colows", "columnes", "lengthsets"], "row": ["v", "ip", "ow", "record", "value", "view", "block", "range", "id", "one", "cat", "pos", "df", " col", "arr", "group", "scale", "u", "_", "tr", "ro", "column", "r", "ix", "work", "key", "y", "frame", "int", "null", "line", "f", "cross", "ax", "rank", "q", "entry", "win", "array", "max", "Row", "cell", "oy", "nn", "xx", "feed", "num", "X", "min", "index", "ows", "node", "sc", "oc", "col"], "rowmaxs": ["rowclments", "rowMaxd", "rowaxn", "rowmaxi", "colmaxe", "rowaxs", "rowMaxs", "rowcoli", "rowcold", " rowmaxn", "colmaxes", "rowMaxi", "rowMaxn", "rowcles", " rowmaxd", "rowlengths", "rowlengthe", "rowmaxe", " rowMaxn", "rowmaxd", "rowcle", " rowmaxi", "rowlengthes", "rowlengthments", "rowcoln", "rowaxd", "rowcls", " rowMaxi", " rowMaxs", " rowMaxd", "rowcols", "rowmaxn", "rowmaxes", "colmaxments", "rowmaxments", "rowaxi"], "x": ["yx", "data", "xc", "xa", "id", "code", "s", "col", "xes", "xt", "oint", "width", "d", "word", "p", "u", "ph", "rx", "ic", "h", "r", "z", "ix", "work", "o", "a", "e", "y", "sex", "point", "ctx", "xp", "nex", "l", "t", "int", "b", "check", "xf", "ux", "lex", "f", "im", "on", "cross", "plex", "ax", "lat", "xi", "q", "model", "max", "w", "xx", "j", "X", "index", "xs", "wx", "full", "ci", "ex", "v", "xb"], "colmaxs": ["colcoles", "colmaxlines", "colMaxi", "colminlines", " colmaxi", " colaxi", "colmind", "colMaxlines", " colaxs", " colaxp", "colmaxes", "colmaxd", "colMaxd", " colmaxd", " colmaxp", "colMaxes", " colmaxes", "colcols", "colaxi", "colaxes", " colaxes", "colMaxs", "colmines", "colmins", "colcoli", "colMaxp", "colmaxp", "colaxs", "colmaxi", " colmaxlines", "colcolp", "colaxp"], "verdict": ["vertdir", "vertdict", "everdict", "Verict", "verdef", "verict", "vordl", "verden", " verbody", "vordb", "verdc", "averbody", " verdb", "browserdict", "averdb", "Verden", "Verdir", "verdl", "Verdb", "averdc", " verdl", "verdb", "averdir", "vertdef", " verdc", "browserdir", " verdir", " verden", "Verdc", "everdl", "vordir", " verdef", "vertbody", " verict", "browserden", "averdict", "Verdict", "everdir", "averict", "verdir", "verbody", "averdef", "browserict", "everdb", "vordict"], "k": ["v", "kl", "end", "range", "id", "ke", "s", "kw", "kid", "it", "cc", "d", "ki", "kh", "p", "u", "_", "kn", "nc", "r", "z", "h", "ch", "K", "o", "work", "e", "y", "key", "ac", "l", "b", "t", "ok", "ko", "f", "ijk", "kj", "ks", "q", "max", "kk", "w", "ik", "j", "mk", "unk", "ck", "oc", "sk", "g", "col"]}}
{"code": " \n  pots = [int(10**k) for k in xrange(0,16)]\n  \n  T = int(stdin.readline())\n  \n  for i in xrange(1,T+1):\n  \ta,b = map(int, stdin.readline().split())\n  \tt = 0\n  \tm = len(str(a))\n  \n  \tpp = int(10**m)\n  \n  \tfor n in xrange(a,b):\n  \t\tss = []\n  \t\tq = 1\n  \t\tp = pp\n  \t\tfor j in xrange(1,m):\n  \t\t\tq *= 10\n  \t\t\tp /= 10\n  \t\t\tr = (n % p) * q + (n /p)\n  \t\t\tif n < r and r <= b and not r in ss: \n  \t\t\t\tss.append(r)\n  \t\t\t\tt += 1\n  \n  \n  \tprint \"Case #%d: %d\" % (i,t)\n  \n", "substitutes": {"pots": ["span", "c", " c", "eps", "id", "it", "pos", "seq", "rss", "ress", "z", "Z", "o", "ns", "int", "types", " z", "points", "SS", "mega", "pi", "bs", "max", "os", "w", "ps", "test", "pot", "obs", " s", " ps", "Ps", "est"], "k": ["ak", "ind", "ck", "c", "x", "ke", "id", "kw", "s", "d", "kb", "u", "tk", "kr", "kn", "h", "ch", "z", "K", "o", "e", "y", "l", "ok", "ko", "f", "ks", "ku", "max", " K", "kk", "w", "num", "kin", "cp", "sk", "g", "km", "v"], "T": ["Ts", "N", "TN", "c", "x", "NT", "it", "P", "I", "G", "L", "h", "z", "unit", "K", "Y", "Z", "o", "e", "y", "Time", "V", "H", "R", "f", "W", "C", "O", "TT", "A", "D", "E", "S", "ta", "w", "Tab", "time", "M", "X", "B", "F", "Q", "test", "type", "TS"], "i": ["ini", "ip", " N", "ie", "slice", "ind", "N", "mini", "c", " c", "ni", "init", "phi", "x", "ai", "it", "id", "d", "I", "u", "ir", "z", "info", "ix", "o", "e", "get", "y", "l", "int", " iP", "f", " z", "im", " I", "iq", "iu", "xi", "li", "pi", "ii", "num", "ib", "ti", "inf", "index", "si", "ci", " ii", " iT", "g", "v"], "a": ["sta", "la", "ea", "ak", "ma", "x", "c", "ab", "af", "am", "ai", "s", "an", "aj", "u", "wa", "aa", "z", "at", "ac", "y", "sa", "da", "e", "all", "area", "args", "l", "ad", "ae", "int", "art", "up", "asa", "f", "mA", "aaa", "pa", "fa", "A", "alpha", "tta", "ba", "ga", "array", "w", "ca", "oa", "au", "ata", "aw", "ia"], "b": ["sub", "rob", "c", "x", "ab", "lb", "s", "beta", "d", "bi", "br", "u", "bar", "nb", "pb", "bc", "bf", "h", "z", "fb", "sp", "o", "e", "y", "db", "reb", "l", "rb", "bt", "bin", "bg", "base", "bb", "f", "ob", "sb", "arb", "bot", "ba", "bd", "bs", "mb", "w", "ib", "B", "bl", "g", "wb", "v"], "t": ["tom", "tu", "x", "c", "it", "s", "xt", "tf", "ct", "d", "tim", "tc", "u", "tz", "tp", "count", "tick", "z", "at", "o", "e", "y", "tmp", "te", "nt", "dt", "l", "int", "pt", "start", "f", "ts", "ot", "TT", "tm", "tt", "temp", "trial", "ta", "tip", "time", "ti", "state", "type", "test", "g", "v", "tn"], "m": ["dm", "span", "mn", "fm", "ma", "c", "x", "am", "s", "P", "d", "mp", "pos", "mm", "u", "mi", " M", "cm", "h", "z", "pm", "e", "ms", "y", "l", "int", "md", "pt", "f", "im", "pi", "mt", "w", "num", "M", "mean", "g", "v"], "pp": ["ip", "dd", "s", "pg", "mm", "P", "d", "mp", "count", "ep", "tp", "nc", "sp", "pm", "e", "y", "qq", "back", "nt", "pl", "np", "int", "nd", "pt", "po", "pn", "bb", "start", "pe", "lp", "pi", "par", "nn", "tt", "max", "PP", "ps", "app", "cp", "ff", "pps", "v"], "n": ["mn", "ind", "N", "x", "c", "ni", "s", "an", "d", "pos", "u", "nb", "gn", "number", "yn", "nc", "z", "h", "o", "all", "e", "cn", "y", "nt", "ns", "l", "np", "nd", "na", "rn", "pn", "ne", "f", "net", "ot", "nu", "pi", "un", "ny", "ar", "nn", "w", "num", "sn", "min", "nan", "g", "v"], "ss": ["resses", "su", "\u00df", "qs", "x", "ips", "ssl", "eps", "master", "s", "ls", "nz", "pos", "oss", "seq", "rss", "ssh", "rus", "sq", "cons", "ens", "st", "ress", "sp", "z", "js", "ros", "res", "less", "cs", "stats", "ass", "ess", "es", "ns", "states", "struct", "sts", "ests", "est", "ses", "uss", "vs", "ts", "pps", "SS", "rs", "ks", "ds", "fts", "iss", "ross", "css", "bs", "S", "ws", "hess", "os", "sw", "xx", "sn", "ps", "lines", "test", "cas", "sc", "zzle", "se"], "q": ["ip", "qa", "qs", "c", "x", "quant", "s", "P", "d", "u", "count", "sq", "req", "h", "z", "ch", "e", "y", "qq", "eq", "l", "charge", "query", "patch", "depth", "f", "pe", "w", "cl", "dq", "qu", "ps", "type", "Q", "cp", "shift", "g", "v"], "p": ["ip", "c", "x", "phi", "pc", "s", "part", "d", "P", "pu", "u", " P", "tp", "py", "h", "z", "sp", "change", "e", "y", "pm", "point", "ap", "l", "op", "np", "pt", "bp", "pn", "f", "pa", "pe", "lp", "jp", "pi", "per", "w", "pr", "ps", "po", "g", "v"], "j": ["ip", " am", " f", "ind", "c", " c", "it", " np", "d", "bj", "u", "z", "o", "pm", "e", " sp", "np", "l", " v", "pn", "f", "jp", " fn", " pm", "nn", "J", " l", "g", "v"], "r": ["nr", "rec", "sr", "c", "x", "ru", "range", "s", "rar", "d", "br", "u", "rss", "arr", "rx", "hr", "usr", "tr", "ir", "ro", "h", "lr", "rf", "var", "rd", "e", "y", "rage", "rg", "res", "cr", "rb", "l", "re", "rh", "rn", "str", "ri", "ra", "R", "f", "rc", "fr", "error", "rw", "mr", "rr", "vr", "rs", "rt", "ar", "par", "per", "w", "er", "pr", "ur", "g", "rl", "err", "v"]}}
{"code": " \n  \n  lines = [map(int, line.strip().split(\" \")) for line in open(sys.argv[1]).readlines()]\n  [count] = lines[0]\n  assert count * 10 + 1 == len(lines)\n  \n  for i in xrange(count):\n      base = i*10\n      [n1] = lines[base+1]\n      [n2] = lines[base+6]\n      row1 = set(lines[base+1+n1])\n      row2 = set(lines[base+6+n2])\n      common = row1.intersection(row2)\n      print \"Case #%s:\" % (i+1),\n      if len(common) == 1:\n          print list(common)[0]\n      elif not common:\n          print \"Volunteer cheated!\"\n      else:\n          print \"Bad magician!\"\n", "substitutes": {"lines": ["locks", "years", "sets", "flat", "sheets", "files", "lins", "comments", "sections", "styles", "points", "parts", "shows", "frames", "scenes", "steps", "letters", "les", "ines", "verts", "rows", "boards", "flows", "runs", "args", "ms", "states", "pages", "types", "vs", "users", "plugins", "headers", "objects", "rules", "los", "cycles", "groups", "heads", "ids", "notes", "orders", "posts", "s", "ins", "links", "values", "models", "lists", "l", "cells", "words", "faces", "limits", "balls", "results", "blocks", "changes", "log", "pins", "data", "ips", "items", "ls", "vals", "stats", "forms", "zip", "names", "books", "levels", "tests", "breaks", "lights", "strings", "codes", "ones", "tops", "elines"], "line": ["ine", "kl", "data", "comment", "nl", "x", "item", "block", "s", "part", "d", "word", "strip", "buffer", "le", "lin", "page", "source", "name", "rl", "char", "ln", "column", "lf", "byte", "header", "de", "e", "key", "LINE", "liner", "l", "len", "str", "letter", "link", "row", "Line", "day", "val", "el", "lc", "entry", "obj", "cell", "sl", "lined", "file", "lane", "string", "li", "inline"], "count": ["ind", "c", "x", "id", "code", "loc", "part", "body", "length", "Count", "case", "name", "p", "sum", "border", "number", "current", "ch", "act", "size", "e", "weight", "key", "a", "area", "limit", "l", "int", "b", "check", "core", "zip", "len", "depth", "list", "start", "f", "total", "error", "label", "q", "cycle", "deep", "max", "found", "num", "content", "log", "index", "test", "ci", "file", "n", "ce", "col", "close"], "i": ["ip", "ie", "qi", "ind", "mini", "end", "x", "c", "slice", "hi", "id", "ai", "it", "code", "gi", "part", "d", "I", "pos", "bi", "length", "p", "u", "zi", "section", "page", "ix", "z", "a", "e", "y", "limit", "l", "int", "b", "start", "f", "iu", "uri", "pi", "q", "chi", "iter", "ii", "j", "num", "ui", "type", "index", "si", "ci", "position", "n", "li", "col", "di"], "base": ["ie", "range", "id", "part", "pos", "server", "source", "flat", "size", "based", "area", "bas", "b", "version", "start", "prefix", "pi", "bot", "cycle", "file", "position", "n", "http", "home", "loc", "length", "cache", "case", "name", "p", "birth", "build", "unit", "key", "kit", "pe", "year", "se", "c", "x", "init", "bi", "buffer", "u", "root", "change", "y", "first", "batch", "Base", "basic", "parent", "body", "scale", "create", "number", "offset", "ase", "core", "check", "len", "letter", "resource", "pse", "last", "set", "site", "index", "family"], "n1": ["p2", "N01", "p1", "n3", "p5", "N5", "N1", "p01", "n01", "l1", "N3", " n5", "l2", "n5", "N2", "l01", "p3", " n3"], "n2": ["cTwo", "noe", "v2", "v6", "N02", "coe", "nodeoe", "ntwo", "nTwo", " n6", "v02", " noe", "c2", " n02", "N6", "Ntwo", "N2", "nodeTwo", " ntwo", " nTwo", "vtwo", "n02", "n6", "node2"], "row1": ["rowone", "raw1", "rows01", "col01", "rawone", "rows1", "col1", " row3", "row3", "rows3", " rowone", "col3", "rows8", " row01", "rowsone", " row8", "row01", "row8", "rows2", "col2", "raw2", "raw8"], "row2": ["nodetwo", " rowtwo", "cell6", "rowtwo", "cell3", " row3", " row5", "line6", "row3", "cell2", "ow4", "owtwo", "line3", "row6", "node5", "ow5", "cell4", "row5", "row4", "line4", "ow2", " row6", "line2", "node2", " row4", "node4"], "common": ["unique", "la", "security", "data", "union", "conf", "long", "comment", "local", "c", "public", "con", "media", "seen", "hidden", "norm", "same", "similar", "parent", "standard", "section", "specific", "example", "name", "shared", "border", "recent", "broad", "complex", "connection", "extra", "special", "no", "flat", "general", "root", "ban", "non", "low", "plain", "known", "core", "correct", "dist", "total", "generic", "cross", "ordered", "main", "small", "new", "Common", "compatible", "lc", "set", "diff", "custom", "found", "normal", "other", "family", "central", "valid", "basic", "color"]}}
{"code": " \n  f = open(sys.argv[1])\n  count = int(f.readline())\n  \n  for i in xrange(0, count):\n      n = int(f.readline())\n      naomis = sorted(map(float, f.readline().split()))\n      kens = sorted(map(float, f.readline().split()))\n      assert len(naomis) == n and len(kens) == n\n  \n      naomis_w = set(naomis)\n      kens_w = set(kens)\n      naomi_war_wins = 0\n      while naomis_w:\n          nao = max(naomis_w)\n          try:\n              ken = min(w for w in kens_w if w > nao)\n          except ValueError:\n              ken = min(kens_w)\n              naomi_war_wins += 1\n          naomis_w.remove(nao)\n          kens_w.remove(ken)\n  \n      naomi_deceit_wins = 0\n      naomis_w = set(naomis)\n      kens_w = set(kens)\n      while naomis_w:\n          ken = min(kens_w)\n          try:\n              nao = min(w for w in naomis_w if w > ken)\n              naomi_deceit_wins += 1\n          except ValueError:\n              nao = min(naomis_w)\n          naomis_w.remove(nao)\n          kens_w.remove(ken)\n  \n      print \"Case #%s: %s %s\" % (i+1, naomi_deceit_wins, naomi_war_wins)\n", "substitutes": {"f": ["fm", "data", "rf", "conf", "function", "form", "c", "x", "af", "fc", "plus", "s", "fw", "of", "tf", "d", "io", "handle", "p", "z", "m", "uf", "h", "r", "fb", "bf", "lf", "ff", "fp", "o", "e", "fen", "fn", "buff", "handler", "l", "t", "b", "fe", "xf", "fast", "fx", "fr", "fa", "fs", "fi", "sf", "folder", "iter", "fo", "er", "feed", "inf", "F", "full", "file", "g", "v", "fd"], "count": ["span", "ind", "N", "c", "tail", "con", "id", "code", "part", "cc", "length", "Count", "name", "sum", "nb", "p", "th", "number", "m", "call", "counter", "z", "h", "ch", "nc", "size", "all", "weight", "nt", "limit", "b", "nd", "len", "depth", "list", "base", "skip", "start", "max", "nn", "iter", "num", "batch", "index", "keep", "col", "close"], "i": ["ini", "ip", "ind", "end", "c", "k", "id", "ai", "gi", "d", "I", "bi", "io", "p", "u", "zi", "name", "m", "h", "counter", "ix", "z", "cli", "info", "e", "y", "key", "l", "int", "t", "b", " iP", "ri", "start", "gu", " I", "iu", "xi", "uri", "li", "pi", "q", "ii", "j", "inn", "num", "ui", "ti", "index", "si", "ci", "ih", " ip", "multi"], "n": ["nr", "span", "network", "N", "nl", "c", "x", "ni", "k", "s", "d", "p", "name", "nb", "u", "sum", "number", "m", "nc", "r", "z", "no", "h", "o", "all", "e", "y", "fn", "cn", "size", "nt", "ns", "t", "l", "b", "np", "nd", "en", "len", "na", "pn", "ne", "dn", "net", "nat", "un", "nn", "max", "j", "num", "sn", "min", "nan", "g", "v"], "naomis": ["naominris", "naomsIs", "neemis", "naemos", "naomas", "naomalis", "naemas", "neomsis", "naomIs", "neomos", "neemiss", "nanemis", "neomsIs", "naormiss", "naomsiss", "neomsics", "nanomas", "naommris", "naormics", "naominiss", "neomsris", "neomsiss", "naymiss", "naymIs", "naormas", "naemis", "nanemiss", "naominisi", "naomiss", "neomics", "naormis", "naemisi", "naomics", "naomalics", "nanemisi", "naomris", "naemris", "naomsris", "neomiss", "neomris", "naymis", "nanemas", "naormisi", "naomalos", "naominas", "naommiss", "nanomisi", "naomaliss", "naominIs", "naemiss", "naommos", "nanomis", "naomalris", "neemris", "naormris", "neemos", "naomisi", "neomIs", "naomsis", "naommis", "nanomiss", "neomis", "naymris", "naominis", "naomsics", "naomos"], "kens": ["humans", "thens", "oks", "landers", "works", "witz", "projects", "leans", "wit", "services", "sels", "kins", "guards", "kas", "liners", "atten", "oss", "nis", "wen", "workers", "opens", "nuts", "kes", "kn", "ens", "nets", "gins", "aka", "lings", "owers", "attacks", "ums", "ushes", "ns", "wcs", "unders", "words", "rings", "ans", "nox", "breakers", "hers", "maps", "warts", "kos", "akens", "wn", "hews", "ks", "monds", "ds", "nas", "anes", "weapons", "fts", "drops", "ernels", "hops", "kies", "ws", "doms", "waters", "itters", "holes", "bits", "uchs", "phones", "hes", "hens", "kinson"], "naomis_w": ["naomis_wal", "naomiss_h", "naomis2W", "naomis_tw", "naomiss_wa", "naomis_win", "naomisParw", "naomisParwa", "naomisFew", "naomris_wu", "naomisFw", "naomiss_hw", "naomis2hw", "naomis_sw", "naomris_wa", "naomiss_sw", "naomis_W", "naomiscchw", "naomiscctw", "naomisParwu", "naomiss_wh", "naomris_w", "naomisacwal", "naomisFwa", "naomiss_ws", "naomisach", "naomisacwe", "naomisccsw", "naomisdhw", "naomisParW", "naomis_h", "naomiss_W", "naomiss_win", "naomris_W", "naomisccws", "naomisdwa", "naomiss_wal", "naomiss_w", "naomis_wa", "naomisccw", "naomis2ws", "naomis_ws", "naomiss_tw", "naomisacw", "naomisFwin", "naomiss_ew", "naomis2w", "naomis_wu", "naomis_we", "naomisdw", "naomisdtw", "naomis_wh", "naomis_hw", "naomiss_we", "naomisccwa", "naomis_ew"], "kens_w": ["oks_W", "kens_aw", "keepersJaw", "kenspyws", "kens_wd", "kens_ow", "kensAw", "kens_wan", "kens_web", "kenspywar", "kenspywan", "kensAweb", "okschewar", "kensAW", "oks_wb", "kensBywan", "kens_tw", "kensphw", "kens_wa", "hews_w", "kens_wt", "waters_wa", "oks_war", "keepers_aw", "nas_wb", "okscheW", "kenspw", "nas_tw", "waters_wan", "nas_web", "kensJwb", "kensBywb", "kensppW", "keepersJwd", "kensByw", "kens25wa", "nas_W", "kenspyw", "kensJw", "okschew", "kens25w", "kensadws", "kensJws", "kenspywb", "hewsByws", "kensppwd", "hews_wb", "waters_wt", "kenspwt", "hewsByw", "kensJwd", "hews_ws", "keepersJw", "kensppweb", "kens25wan", "kensByws", "kenschewar", "kens_wb", "kensppwb", "nas_wa", "keepersJwan", "kensppw", "okschewb", "kenschewb", "kenschew", "kensAwb", "nas_ow", "hews_wan", "waters_ws", "kens_ws", "kensppaw", "kens25ws", "kenspyW", "waters_hw", "kensadhw", "keepers_wan", "waters_w", "kensadwt", "kens_W", "kenspws", "kensadw", "kensppwan", "oks_w", "keepers_wd", "kens_war", "keepers_w", "kenscheW", "kensJaw", "kensJwan", "kenspywa", "hewsBywan", "hewsBywb", "kens_hw", "nas_w"], "naomi_war_wins": ["naomi_war_Walls", "naomi_war_twains", "naomi_war_awits", "naomi_war_twins", "naomi_war_awin", "naomi_war_twalls", "naomi_war_hwin", "naomi_war_Wouts", "naomi_war_twits", "naomi_war_Wains", "naomi_war_Wales", "naomi_war_hwales", "naomi_war_waouts", "naomi_war_wales", "naomi_war_wouts", "naomi_war_walls", "naomi_war_win", "naomi_war_awouts", "naomi_war_wain", "naomi_war_waalls", "naomi_war_Wins", "naomi_war_waains", "naomi_war_hwins", "naomi_war_Win", "naomi_war_twin", "naomi_war_wains", "naomi_war_hwouts", "naomi_war_awins", "naomi_war_wits", "naomi_war_twouts", "naomi_war_waits"], "nao": ["naoff", " napo", "Naoo", "laoa", " naos", "nane", " naoa", " nae", "naao", "daoo", "nana", "saoa", "unaode", "lao", "saoff", "neao", "naow", "laoff", "nanos", "nano", "neow", "Napo", "sao", "nasos", "nanoo", "Naow", "nanpo", "daos", "knao", "neos", "unao", "kno", "nasoin", "saode", "knw", "naso", "naoin", "laode", "nae", "unaoff", " naow", " naao", " naw", "naw", "naoo", "naode", "nasoo", " naoo", "new", "naoa", "Nae", "daoin", "kne", "naa", "nee", " naa", "neoo", "neo", "Nao", "Naoa", "nea", "dao", "napo", "nanoa", "nanoin", "unaoa", "naos", "nepo"], "ken": ["ana", "qa", "hn", "ni", "hen", "nah", "ki", "sten", "wake", "gn", "kn", "fen", "gin", "goal", "moon", "unin", "kee", "un", "wrong", "nan", "die", "ke", "ker", "yah", "laugh", "jon", "wall", "lin", "mon", "wen", "jen", "girl", "key", "non", "ben", "uno", "zen", "ne", "ko", "white", "nee", "atan", "tan", "ien", "enny", "hel", "han", "kun", "melon", "ka", "no", "kel", "paren", "token", "what", "yan", "en", "eni", "kan", "ren", "den", "piece", "lynn", "yer", "inner", "ny", "haw", "knife", "aken", "don", "kin", "kinson", "gan", "kie", "rown", "lah", "jin", "dan", "byte", "thin", "ski", "oken", "na", "rake", "KEN", "oin", "nu", "nil", "blank", "man", "miss"], "w": ["iw", "wd", "ow", "x", "wave", "c", "width", "fw", "kw", "d", "wall", "word", "raw", "p", "name", "wen", "tw", "wa", "m", "window", "west", "h", "only", "z", "work", "weight", "wal", "way", "t", "weights", "words", "wo", "we", "wh", "W", "ww", "wer", "wl", "rw", "wn", "wt", "won", "wait", "q", "wk", "wi", "win", "max", "ws", "sw", "wu", "wed", "wig", "hw", "wr", "wp", "wx", "ew", "aw", "g", "wb", "wan", "v"], "naomi_deceit_wins": ["naomi_deceit_kwins", "naomi_deceit_wINS", "naomi_deceit_wits", "naomi_deceit_twalls", "naomi_deceit_awouts", "naomi_deceit_Wins", "naomi_deceit_win", "naomi_deceit_Wouts", "naomi_deceit_Walls", "naomi_deceit_kwalls", "naomi_deceit_awin", "naomi_deceit_waases", "naomi_deceit_waalls", "naomi_deceit_twouts", "naomi_deceit_walls", "naomi_deceit_twins", "naomi_deceit_Win", "naomi_deceit_kwases", "naomi_deceit_awINS", "naomi_deceit_kwits", "naomi_deceit_waits", "naomi_deceit_awins", "naomi_deceit_wains", "naomi_deceit_wouts", "naomi_deceit_waouts", "naomi_deceit_wain", "naomi_deceit_wases", "naomi_deceit_waINS", "naomi_deceit_twin"]}}
{"code": " \n  lines = [line.strip() for line in open(sys.argv[1])]\n  count = int(lines[0])\n  \n  for i in xrange(count):\n      farm_cost,farm_production,target = map(float, lines[i+1].split())\n      seconds = 0\n      production = 2\n      best = float(\"inf\")\n      while True:\n          best = min(best, seconds + target / production)\n          seconds += farm_cost / production\n          if seconds >= best: break\n          production += farm_production\n  \n      print \"Case #%s: %.7f\" % (i+1, best)\n", "substitutes": {"lines": ["bytes", "mails", "letters", "data", "nl", "qs", "ips", "posts", "items", "s", "ls", "ines", "rows", "ins", "links", "ipes", "opens", "runs", "values", "sites", "vals", "files", "args", "lins", "loads", "es", "l", "cells", "words", "pages", "sections", "comments", "zip", "types", "points", "headers", "objects", "los", "ds", "rules", "breaks", "frames", "lights", " Lines", "ss", "blocks", "lined", "cycles", "groups", "strings", "codes", "log", "xs", "elines", "ids", "steps", "inline", "jobs", "ides"], "line": ["ine", "kl", "comment", "end", "nl", "split", "item", "c", "block", "rule", "id", "code", "s", "col", "d", "word", "strip", "le", "lin", "page", "source", "name", "char", "column", "lf", "de", "point", "e", "key", "LINE", "sel", "frame", "l", "pl", "len", "str", "letter", "link", "row", "Line", "ne", "f", " Line", "cle", "day", "label", "lc", "entry", "obj", "cell", "sl", "file", "lane", "string", "li", "inline", "v"], "count": ["conf", "c", "loop", "con", "id", "code", "catch", "part", "cc", "length", "Count", "cache", "case", "sum", "complete", "large", "nb", "group", "find", "number", "call", "counter", "act", "flat", "live", "work", "size", "key", "weight", "first", "limit", "core", "len", "depth", "list", "base", "child", "start", "force", "race", "order", "process", "cycle", "deep", "max", "found", "path", "num", "time", "batch", "type", "index", "test", "n", "close"], "i": ["ini", "ip", "ie", "qi", "ind", "mini", "c", "x", "slice", "split", "phi", "k", "id", "ai", "code", "yi", "part", "gi", "d", "I", "pos", "io", "step", "p", "u", "name", "h", "inter", "z", "ix", "my", "a", "e", "y", "size", "key", "esi", "l", "int", "eni", "start", "f", " I", "iu", "hi", "xi", "pi", " j", "ii", "j", "num", "ui", "ti", "type", "index", "si", "ci", " ii", "n", "li", "multi", "v", "di"], "farm_cost": ["farm_depth", "tower_cost", "farm64cost", "enough_position", "farm55price", "farm55cost", "farm55position", "tower___rate", "farm64rate", "tower_rate", "enough64price", "tower___depth", "enough_price", "enough_cost", "enough64rate", "farm64price", "farm_rate", "farm_price", "enough64cost", "farm64position", "farm___rate", "farm___cost", "farm55rate", "tower___cost", "farm_position", "tower_depth", "farm___depth", "enough64position", "enough_rate"], "farm_production": ["farm2product", " farm_Production", "farm_Production", "farm2cost", "farm_product", "farm2Production", " farm_product", " farm_budget", " farm_termination", "farm_termination", "farm_budget", "farm2production"], "target": ["stage", "high", "effective", "client", "origin", "padding", "right", "end", "master", "value", "final", "success", "local", "range", "width", "growth", "standard", "phase", "scale", "source", "large", "border", "period", "window", "unit", "edge", "current", "pixel", "platform", "point", "weight", "goal", "highest", "next", "aggressive", "force", "confidence", "total", "start", "cost", "peak", "profit", "component", "output", "stop", "better", "hop", "Target", "top", "price", "year", "site", "src", "type", "second", "support", "latest"], "seconds": ["timeout", "largest", "services", "since", "hours", "years", "comes", "speed", "size", "files", "outs", "sections", "future", "points", "bugs", "scenes", "fps", "duration", "latest", "times", "steps", "minimum", "final", "south", "ages", "months", "flows", "unit", "runs", "gravity", "send", "species", "quarters", "states", "fe", "ops", "sec", "prototype", "small", "ends", "objects", "ss", "left", "security", "pieces", "places", "asts", "s", "settings", "reports", "values", "es", "inst", "failed", "instance", "changes", "bytes", "units", "ances", "again", "service", "period", "sites", "images", "https", "secondary", "low", "confidence", "cuts", "errors", "tests", "worst", "ones", "second", "forces", "flash"], "production": ["stage", "competitive", "success", "standard", "size", "goal", "highest", "region", "performance", "future", "start", "primary", "output", "better", "good", "product", "duration", "price", "boost", "support", "latest", "paid", "resolution", "capacity", "final", "staff", "starter", "worker", "unit", "female", "fe", "prototype", "alpha", "termination", "top", "zero", "security", "efficiency", "width", "power", "current", "season", "first", "development", "produced", "cost", "profit", "front", "ope", "progress", "commercial", "Production", "company", "design", "winner", " Production", "communication", "growth", "border", "protection", "pro", "core", "confidence", " profits", "stop", "produ", "last", " prod", "flower", "worst", "project", "second"], "best": ["largest", "right", " latest", "success", "same", "standard", "great", "this", " finest", "live", "size", "goal", "highest", " closest", "spot", " fastest", "pp", "performance", "start", "peak", " biggest", "round", "better", "good", "diff", "hess", "boost", "latest", " highest", "default", "est", "effective", "bottom", "master", "perfect", "final", "half", "length", "p", "hest", "only", "all", " winner", " worst", "rank", "alpha", "ss", "top", " Best", "rest", "local", "higher", "asts", "std", "average", "width", " newest", "ast", "self", "first", "cost", "profit", "failed", "existing", "Best", "max", "progress", "instance", "eff", "high", "end", "winner", "gold", "growth", "result", "edge", "point", "back", " largest", "today", "core", "working", "confidence", "crop", "new", "last", "worst", "ps", "test"]}}
{"code": " \n  stdin = sys.stdin\n  ixs = range(4)\n  for i in xrange(int(stdin.readline())):\n      print \"Case #%i: \" % (i+1),\n      rows = [stdin.readline()[:4] for i in ixs]\n  \n      cols = [[row[i] for row in rows] for i in ixs]\n      diags = [\n          [rows[i][i] for i in ixs],\n          [rows[i][3-i] for i in ixs]\n      ]\n      notdone = False\n      for row in rows + cols + diags:\n          x = None\n          for t in row:\n              if t == '.':\n                  notdone = True\n                  break\n              elif t == 'T':\n                  continue\n              elif x is not None and x != t:\n                  break\n              else:\n                  x = t\n          else:\n              print x, \"won\"\n              break\n      else:\n          if notdone: print \"Game has not completed\"\n          else:       print \"Draw\"\n  \n      stdin.readline()\n", "substitutes": {"stdin": ["liveout", "stins", "dustout", "stdout", "STDinn", "gestdin", "STDout", "gestinn", "stdinner", " stdinner", " stdins", "liveins", "stout", "stine", "STDin", "stdbin", "sthdin", " stdbin", "gradin", "sthin", "STDdin", "gradout", "dustin", "stdine", "stdins", "stin", "liveinn", "sthout", " stddin", " stdinn", "livein", "gestout", "stinner", "dustdin", "gradins", "dustbin", "sthbin", "stdinn", "stddin", "gestin", "stinn", " stdout", "gradinner", "STDine", " stdine"], "ixs": ["ixeds", "coles", "ptcount", "prefixs", "cold", "xes", "lexs", "lexd", "colfiles", "prefixes", "ixedes", "pts", "ixfiles", "xd", "ixes", "oxs", "oxes", "ptfiles", "coli", "ixi", "prefixp", "xp", "ixedd", "lexi", " prefixs", "oxi", "ixcount", "ixd", " prefixfiles", "prefixd", "xi", " prefix ", "lexes", "ixedi", " prefixcount", "ixp", "colcount", "xs", "ix ", "colp", "col ", "oxd", "pt "], "i": ["ip", "mini", "slice", "ie", "ni", "id", "it", "part", "I", "oi", "ir", "h", "ix", "a", "e", "iii", "int", "b", "start", "on", "uri", "li", "pi", "ati", "ib", "inf", "n", "multi", "di", "ini", "idi", "iw", "k", "ai", "ji", "io", "p", "name", "mi", "m", "r", "z", "o", "t", "udi", "ij", "iu", "ii", "ui", "ti", "ci", "ei", "qi", "c", "x", "iri", "s", "yi", "chi", "bi", "u", "zi", "ic", "cli", "y", "l", "eni", "ri", "f", "isi", "iq", "sci", "j", "type", "si", "ih", "v", "il", "ind", "phi", "d", "info", "xi", "ite", "vi", "ori", "index", "g", "col"], "rows": ["input", "flow", "range", "xes", "df", "ros", "files", "cs", "cases", "uds", "sections", "points", "roots", "fs", "rs", "boxes", "frames", "feed", "keys", "xs", "ows", "times", "features", "multi", "board", "form", "fields", "view", "flows", "runs", "odes", "states", "pages", "types", "users", "rank", "headers", "objects", "ays", "checks", "w", "groups", "heads", "grid", "obs", "ids", "orders", "x", "c", "roc", "posts", "where", "each", "head", "ins", "ches", "reports", "values", "wards", "ums", "cells", "words", "faces", "f", "results", "model", "array", "ws", "blocks", "umbers", "tracks", "rown", "ow", "data", "qs", "ips", "items", "ls", "scale", "views", "events", "forms", "report", "names", "skip", "order", "tests", "breaks", "shape", "Row", "holes", "lines", "index", "test", "strings", "col"], "cols": ["Collines", "columns", " coles", "coles", "columnlines", "colgs", "Colings", "columnings", "Colgs", "Colows", "collines", "Coles", "colows", "colings", "columngs", " colgs", "Cols", "columnows", " collines", " colows", "columnes", " colings"], "row": ["ip", "input", "flow", "range", "id", "month", "bug", "df", "pos", "table", "_", "ros", "cr", "int", "roll", "round", "sect", "diff", "cell", "feed", "num", "run", "ows", "node", "board", "form", "view", "block", "k", "ai", "uu", "length", "p", "group", "ack", "name", "case", "step", "r", "ward", "key", "line", "error", "rank", "w", "grid", "rect", "x", "c", "head", "word", "raw", "page", "u", "ro", "y", "user", "ay", "f", "rc", "model", "post", "array", "j", "type", "v", "uc", "rown", "ow", "record", "column", "header", "rew", "coll", "frame", "ok", "zip", "arrow", "order", "object", "q", "ride", "entry", "Row", "ode", "index", "rog", "col"], "diags": ["siagged", "diag", " diag", "digs", "diagram", "Digs", " diagged", " digs", "adiag", "diagged", "siags", " diagram", "adiagged", "Diags", "adiags", "siagram", "siag", "Diag", "adigs", "Diagged", "Diagram"], "notdone": ["nondone", " notDone", "Notdid", "ntdone", "nondo", "Notdo", " notodo", "ntdid", "notDone", "notdid", " notdo", "nonDone", " notdid", "notodo", "nonodo", "Notdone", "NotDone", "ntdo", "ntDone", "notdo", "ntodo"]}}
{"code": " \n  lines = [line.strip() for line in open(sys.argv[1])]\n  count = int(lines[0])\n  \n  for i in xrange(count):\n      R,C,M = map(int, lines[i+1].split())\n      print \"Case #%s:\" % (i+1)\n  \n      w = max(R,C)\n      h = min(R,C)\n      X = R*C - M\n      assert X > 0\n  \n      if X == 1:\n          rows = ['c' + ('*' * (w-1))] + (h-1) * ['*' * w]\n      elif h == 1:\n          rows = ['c' + '.' * (X-1) + '*' * M]\n      elif X == 4:\n              rows = [\n                  'c.' + '*' * (w-2),\n                  '..' + '*' * (w-2),\n              ] + ['*' * w] * (h-2)\n      elif h == 2:\n          if X%2 == 1 or X == 2:\n              rows = None\n          else:\n              rows = [\n                  'c' + '.' * (X/2-1) + '*' * (M/2),\n                  '.' + '.' * (X/2-1) + '*' * (M/2)\n              ]\n      elif X <= 5 or X == 7:\n          rows = None\n  \n      elif X%2 == 0 and X <= w*2:\n          r = X/2\n          rows = [\n              'c' + '.' * (r - 1) + '*' * (w-r),\n                    '.' * r       + '*' * (w-r),\n          ] + ['*' * w] * (h-2)\n  \n      elif X <= w*3 and (X % 3) != 1:\n          n = (X+1) / 3\n          t = X - 2*n\n          rows = [\n              'c' + '.' * (n-1) + '*' * (w-n),\n                    '.' * n     + '*' * (w-n),\n                    '.' * t     + '*' * (w-t)\n          ] + ['*' * w] * (h-3)\n      else:\n          n = X / w\n          t = X % w\n          if t == 1:\n              rows = (\n                      ['c' + (w-1) * '.']\n                  +   ['.' * w] * (n-2)\n                  +   ['.' * (w-1) + '*']\n                  +   ['..' + '*' * (w-2)]\n                  +   ['*' * w] * (h - n - 1)\n              )\n          else:\n              k = 1 if t == 0 else 0\n              rows = (\n                      ['c' + (w-1) * '.']\n                  +   ['.' * w] * (n-1)\n                  +   ['.' * t + '*' * (w-t)] * (1 - k)\n                  +   ['*' * w] * (h - n - 1 + k)\n              )\n  \n      if rows:\n          if R > C:\n              rows = [\"\".join(row[i] for row in rows) for i in xrange(R)]\n  \n          for row in rows:\n              print row\n  \n          assert len(rows) == R\n          assert len(rows[0]) == C\n          assert sum(1 for row in rows for col in row if col == '*') == M\n  \n      else:\n          print \"Impossible\"\n  \n", "substitutes": {"lines": ["bytes", "letters", "works", "nl", "qs", "ips", "posts", "items", "s", "ls", "ines", "ins", "links", "ipes", "flows", "runs", "values", "images", "vals", "sites", "params", "files", "args", "models", "lins", "ms", "es", "lists", "l", "cells", "words", "pages", "sections", "zip", "ses", "limits", "vs", "plugins", "points", "headers", "fs", "objects", "los", "ds", "rules", "breaks", "sql", "bs", "frames", " Lines", "ss", "blocks", "lined", "groups", "strings", "log", "xs", "elines", "ids", "steps"], "line": ["v", "ine", "kl", "nl", "split", "item", "c", "block", "id", "code", "s", "d", "strip", "word", "le", "lin", "page", "name", "source", "p", "m", "column", "lf", "de", "e", "LINE", "parse", "frame", "l", "sel", "len", "str", "letter", "link", "Line", "ne", "f", "cle", "day", "lc", "obj", "cell", "sl", "cl", "ze", "file", "lane", "string", "li", "inline", "se"], "count": ["ind", "N", "c", "x", "con", "id", "code", "cc", "length", "Count", "case", "sum", "p", "number", "m", "counter", "z", "call", "act", "ch", "size", "y", "weight", "coll", "limit", "l", "b", "core", "len", "depth", "list", "base", "start", "f", "total", "order", "q", "max", "found", "num", "time", "index", "close"], "i": ["ini", "ip", "mini", "hi", "ind", "ie", "qi", "slice", "x", "c", "phi", "id", "ai", "yi", "chi", "pos", "I", "d", "gi", "bi", "p", "u", "zi", "mi", "m", "ix", "cli", "my", "a", "e", "y", "l", "int", "image", "eni", "start", "iu", "iq", "xi", "uri", "pi", "inner", "vi", "ii", "j", "num", "ui", "ti", "type", "index", "si", "ci", "li", "multi", "di"], "R": ["SR", "RT", "N", "RE", "T", "I", "P", "NR", "RC", "CR", "Rs", "G", "Res", "L", "K", "Y", "GR", "Ra", "MR", "V", "W", "H", "RR", "RS", "U", "RM", "O", "A", "RL", "D", "RF", "RA", "E", "S", "Row", "Rh", "RG", "B", "F", "Q", "RH", "RO", "DR", "Right", "RN", "IR"], "C": ["AC", "N", "c", "Max", "T", "I", "P", "CR", "Cl", "CM", "CF", "G", "CN", "L", "CE", "CL", "K", "Y", "Z", "Sc", "CI", "SC", "Ch", "Co", "V", "W", "H", "U", "O", "A", "CO", "CC", "D", "Cr", "VC", "DC", "E", "S", "B", "F", "Q", "Cu", "WC", "MC", "NC", "CA", "Con", "CP"], "M": ["TM", "DM", "N", "MS", "MF", "Max", "T", "P", "I", "CR", "Min", "CM", "G", "ME", "MN", "m", "L", "Am", "AM", "Man", "K", "Y", "Z", "y", "MW", "LM", "MR", "ML", "V", "H", "W", "MT", "Many", "U", "O", "RM", "A", "Wh", "D", "MD", "Mi", "E", "S", "MX", "Mass", "J", "Me", "MM", "MH", "B", "F", "Q", "Ms", "MC"], "w": ["wd", "We", "mm", "TW", "west", " W", "work", "a", "e", "weight", "b", "W", "U", "wt", "hw", "WC", "aw", "web", "iw", "wave", "am", "kw", "WS", "wall", "p", "m", "z", "o", "all", "nw", "way", "wh", "H", "ww", "wu", "temp", "wx", "ew", "wb", "x", "c", "width", "fw", "s", "word", "sh", "u", "tw", "wa", "current", "Y", "y", "wal", "l", "f", "rw", "Wh", "max", "ws", "sw", "week", "wan", "v", "ow", "N", "d", "T", "window", "L", "we", "www", "wl", "wn", "q", "win", "time", "g"], "h": ["uh", "th", "G", "work", "a", "e", "b", "W", "U", "HH", "hw", "min", "ho", "P", "p", "m", "z", "how", "o", "all", "gh", "wh", "H", "hm", "ww", "oh", "ch", "hi", "x", "c", "height", "width", "s", "head", "dh", "sh", "u", "hr", "wa", "ah", "y", "l", "rh", "en", "f", "max", "j", "ih", "v", "he", "end", "d", "ph", "ul", "ht", " H", "q", "hh", "time", "hs", "g", "bh"], "X": ["Sw", "HTTP", "I", "Count", "TW", "G", "Z", "V", "W", "U", "O", "FW", "HH", "XXX", "CH", "Sex", "F", "Q", "ID", "RH", "MC", "Model", "WS", "P", "length", "WR", "YY", "z", "K", "Time", "XXXX", "Left", "H", "Value", "XM", "A", "B", "Right", "Event", "x", "width", "IM", "Max", "Wa", " x", "CE", "Y", "XP", "y", "Any", "SW", "ML", "Wh", "D", "MX", "TX", "S", "Do", "Mass", "max", "J", "XY", "MAX", "Ex", "Weight", "Cross", "FX", "WH", "N", "PH", "IX", "T", "Work", "UX", "L", "XL", "CL", "XX", "Size", "FF", "TH", "OX", "ZX", "Width", "Tx", "E", "Length", "PE", "DX"], "rows": ["airs", "classes", "ports", "ros", "sheets", "files", "cases", "points", "roots", "children", "rs", "shows", "frames", "keys", "vers", "ows", "steps", "times", "features", "works", "fields", "docs", "months", "arr", "flows", "runs", "hands", "ews", "pages", "types", "users", "ends", "headers", "rules", "ays", "checks", "heads", "groups", "obs", "ids", "orders", "x", "posts", "raw", "values", "models", "rors", "cells", "faces", "results", "planes", "array", "ws", "blocks", "OWS", "tracks", "data", "rown", "relations", "items", "views", "workers", "prints", "vals", "images", "rooms", "events", "forms", "reads", "errors", "members", "levels", "tests", "breaks", "Row", "holes", "strings", "index"], "r": ["nr", "sr", "right", "c", "ru", "x", "range", "d", "dr", "br", "p", "u", "hr", "m", "ir", "ro", "rf", "z", "rg", "res", "o", "ch", "e", "y", "a", "cr", "l", "rh", "b", "re", "nor", "rb", "f", "rc", "rw", "rank", "order", "rr", "fr", "mr", "rs", "q", "ar", "yr", "j", "er", "run", "ur", "g", "err", "v"], "n": [" N", "N", "x", "c", "out", "ng", "s", "an", "d", "T", "p", "u", "nb", "name", "ed", "number", "m", "z", "nc", "no", "o", "all", "e", "y", "a", "at", "nt", "l", "b", "ns", "nor", "nd", "en", "na", "pn", "ne", "f", "net", "on", "ot", "nu", "un", "new", "q", "nm", "nn", "max", "j", "num", "sn", "min", "g", "v"], "t": ["N", "c", "x", "out", "it", "s", "ct", "d", "T", "p", "u", "name", "tz", "tp", "tw", "m", "tr", "st", "z", "o", "at", "e", "y", "all", "a", "dt", "nt", "l", "b", " T", "int", "ty", "pt", "ts", "f", "on", "to", "ot", "wt", "tm", "q", "tt", "temp", "ta", "j", "time", "ti", "min", "type", "g", "v", "tn"]}}
{"code": " \n  googlerese = \"\"\"\n  y qee\n  ejp mysljylc kd kxveddknmc re jsicpdrysi\n  rbcpc ypc rtcsra dkh wyfrepkym veddknkmkrkcd\n  de kr kd eoya kw aej tysr re ujdr lkgc jv\n  z\n  \"\"\"\n  \n  plain = \"\"\"\n  a zoo\n  our language is impossible to understand\n  there are twenty six factorial possibilities\n  so it is okay if you want to just give up\n  q\n  \"\"\"\n  \n  gtos = {}\n  stog = {}\n  \n  for s,g in zip(plain, googlerese):\n  \tgtos[g] = s\n  \tstog[s] = g\n  \n  \n  f = sys.stdin\n  \n  t = int(f.readline())\n  \n  for i in xrange(0,t):\n  \tline = f.readline().strip()\n  \tprint \"Case #%d: %s\" % (i+1, \"\".join([gtos.get(c,c) for c in line]))\n  \n", "substitutes": {"googlerese": [" googlerece", " googlerense", " googlebresem", " googlebrece", "googlereze", "googleRede", " googlerende", "googleResem", "googleREsem", "googlerense", "googlerecse", "googleREse", "googlerecsem", "googleREce", " googlebreze", "googlerence", "googleREde", "googleRese", "googlerede", "googlerecze", "googlebrese", "googlebreze", " googlerede", "googlebrece", "googlerende", "googleRece", "googlerecce", "googlebresem", " googleresem", " googlerence", " googlerensem", "googlerensem", "googlerenze", "googlerece", " googlereze", " googlebrese", "googleresem"], "plain": [" confirm", " python", " Plain", "fc", " complex", "n", "AIN", "pre", "body", "example", "html", "cache", "arr", "p", "prot", "inline", "complete", " javascript", "fine", "page", "regular", "pb", "pic", "fl", "py", " main", "header", "m", "flat", "theme", "fp", "pl", "ain", "pp", " explain", "en", "\u4e2d", " simplified", "sg", "static", "summary", "format", "main", " details", "domain", "details", "javascript", "express", "lang", " simple", "css", "title", " py", " cipher", "full", "python", "xml", " flat", "simple"], "gtos": ["xto", "gentos", "gzOS", "stdo", "gento", "stdos", "gzops", "gzoes", "ynamo", "gzo", "GTos", "ynamos", "ynamoss", "GToes", "gtoss", "gto", "stdoss", "stdoa", "gentOS", "xtOS", "gtoa", "GTo", "gentons", "xtos", "GToss", "gentoes", "xtons", "gtops", "gentops", "gzons", "GTops", "GToa", "ynamoa", "gtons", "gzos", "gtOS", "gtoes"], "stog": ["stogs", "STogs", "ostOG", "STorg", "StOG", "STOG", "astograph", " nostog", "astog", "ostogs", " nostogging", "Stogs", "Stog", "stogged", "storg", " nostogged", " stogged", "stOG", "STog", " stogging", "stogging", "astogging", " stograph", "ostorg", "astogged", "ostog", " nostograph", "Storg", "stograph"], "s": ["sub", "sys", "su", "input", "http", "ssl", "x", "k", "ls", "an", "gi", "server", "d", "p", "u", "sh", "sq", "m", "h", "r", "z", "o", "cs", "gb", "a", "e", "stats", "es", "https", "sv", "y", "self", "ns", "b", "states", "l", "super", "ses", "sg", "sb", "spec", "single", "fs", "new", "q", "sf", "ds", "js", "bs", "S", "ws", "os", "ss", "gs", "sl", "w", "sw", "ps", "si", "go", "n", "sc", "v", "se"], "g": ["og", "graph", "msg", "sys", "x", "agg", "ge", "out", "yg", "gi", "d", "gg", "u", "p", "cfg", "group", "G", "gn", "gm", "m", "gru", "h", "r", "z", "google", "rg", "e", "y", "l", "bg", "gam", "game", "b", "gpu", "eg", "gh", "gp", "gate", "sg", "gu", "git", "ig", "gl", "gener", "q", "ga", "gain", "erg", "gs", "w", "gc", "arg", "gz", "groups", "gen", "gas", "go", "gnu", "n", "vg", "v"], "f": ["ref", "function", "data", "input", "conf", "flow", "form", "af", "x", "fc", "loop", "fw", "tf", "body", "df", "d", "io", "p", " df", "source", "m", "bf", "rf", "uf", "z", "lf", "fb", "h", "fp", "stream", "e", "r", "info", "self", "frame", "l", "b", "handler", "xf", "fast", "fr", "fa", "fs", "fi", "sf", "folder", "fo", "w", "feed", "aff", "log", "inf", "F", " ff", "full", "file", " F", "v", "fd"], "t": [" limit", "x", " tail", "n", " it", "tf", "T", " w", "d", " start", "p", "u", "tz", "tp", " text", "m", "tick", " title", "z", "h", "r", " p", "o", "e", "y", " ti", " input", "dt", "l", "int", " T", "ty", " sequence", "pt", "the", " d", "start", "ts", " total", " r", "tm", "tt", "temp", "ta", " l", "time", "ti", " e", "type", " tab", " time", " n", "v"], "i": ["ini", "idi", "ip", "ie", "mini", "ind", "slice", "end", "x", "phi", "id", "yi", "d", "I", "bi", "p", "u", "count", "zi", "oi", "m", "ic", "inter", "z", "ix", "h", "counter", "cli", "e", "l", "int", "b", "str", "ri", "start", "iu", "xi", "uri", "pi", "vi", "ii", "j", "ui", "ti", "type", "index", "si", "ci", "n", "li", "multi", "v", "di"], "line": ["comment", "nl", "block", "range", "code", "section", "note", "le", "lin", "page", "source", "name", "raw", "case", "L", "no", "lf", "unit", "co", "o", "url", "e", "point", "LINE", "frame", "l", "cr", "liner", "len", "chain", "str", "do", "link", "row", "Line", "ne", "on", "lo", "pe", "cle", "el", "lc", "cell", "sl", "lined", "cl", "time", "log", "online", "file", "string", "li", "inline", "v"], "c": ["uc", "cu", "dc", "xc", "x", "fc", "k", "con", "unc", "code", "col", "loc", "id", "ct", "cat", "cc", "ec", "d", "word", "p", "u", "case", "name", "page", "\u00e7", "char", "m", "ic", "csv", "nc", "ch", "r", "z", "h", "o", "cs", "e", "cn", "cf", "a", "ac", "abc", "cr", "l", "b", "cy", "str", "rc", "C", "arc", "lc", "cell", "w", "cl", "course", "cur", "ci", "n", "string", "ce", "v"]}}
{"code": " fin = sys.stdin\n  T = int(fin.readline())\n  for case in range(1,T+1):\n      board = []\n      N, M = map(int, fin.readline().split())\n      for i in range(N):\n          board.append(list(map(int, fin.readline().split())))\n      \n      row_min = [100]*N\n      row_max = [0]*N\n      col_min = [100]*M\n      col_max = [0]*M\n  \n      for i in range(N):\n          for j in range(M):\n              v = board[i][j]\n              row_min[i] = min(v, row_min[i])\n              row_max[i] = max(v, row_max[i])\n              col_min[j] = min(v, col_min[j])\n              col_max[j] = max(v, col_max[j])\n  \n  \n      possible = True\n      for i in range(N):\n          for j in range(M):\n              v = board[i][j]\n              if v != row_max[i] and v != col_max[j]:\n                  possible = False\n                  break\n  \n  \n      print(\"Case #%d: %s\" % (case, possible and \"YES\" or \"NO\"))\n  \n  \n  \n", "substitutes": {"fin": ["ini", "die", "fail", "rec", "su", "tu", "proc", "final", "init", "pen", "lib", "fork", "br", "lin", "Fin", "fine", "dev", "oi", "loader", "req", "ln", "thin", "fb", "fp", "rin", "fen", "fn", "raf", "bas", "bin", "FIN", "fe", "zen", "len", "inv", "en", "skip", "conn", "start", "f", "fr", "fa", "nu", "fi", "ven", "tun", "rt", "serv", "tin", "rip", "util", "el", "win", "mer", "os", "finder", "fd", "inn", "syn", "inf", "kin", "ran", "file", "fun", "dir", "des", "fat"], "T": ["Total", "TN", "Case", "NT", "n", "I", "P", "length", "G", "L", " t", "CT", "K", "Y", "Z", "Size", "Time", "t", "V", "W", "R", "TH", "H", "DT", "C", "TC", "O", "U", "TT", "A", "TA", "D", "WT", "Ti", "TB", "S", "E", "J", "Tab", "time", "X", "B", "F", "Q", "TS", "TI"], "case": ["qi", "slice", "pack", "c", "x", "Case", "loop", "code", "use", "catch", "bug", "ace", "section", "length", "seq", "result", "u", "p", "name", "mi", "switch", "_", "count", "number", "m", "ide", "date", "z", "ce", "size", "e", "key", "ase", "cases", "t", "core", "mode", "patch", "line", "isi", "race", "C", "match", "ice", "q", "trial", "path", "J", "time", "num", "instance", "X", "ti", "type", "app", "test", "ci", "address", "position", "cas", "times", "li", "se"], "board": ["sequence", "hole", "function", "data", "input", "flow", "comment", "form", "loop", "Board", "boarding", "block", "view", "code", "video", "body", "head", "bank", "buffer", "word", "bar", "boards", "cart", "card", "table", "ack", "layout", "interface", "stream", "ban", "coll", "bean", "channel", "back", "frame", "check", "game", "queue", "foot", "chain", "core", "flo", "list", "line", "reader", "box", "row", "roll", "stroke", "hack", "object", "deck", "model", "rock", "array", "panel", "feed", "wheel", "menu", "control", "log", "pad", "index", "file", "lane", "bo", "crew", "col"], "N": ["Ni", "NL", "NA", "NY", "NI", "NT", "Ne", "ON", "Max", "I", "P", "Mo", "NE", "NO", "II", "G", "CN", "MN", "IN", "L", "NS", "K", "Y", "SN", "Z", "Num", "Size", "V", "W", "R", "H", "Na", "EN", "C", "OS", "O", "U", " n", "A", "Net", "UN", "D", " Ne", "S", "E", "J", "NUM", "NOR", "Ns", "X", "NN", "B", "F", "Q", "AN", "n", "RN", "No", "NC", "NM", "CNN"], "M": ["MAN", "Ma", "DM", "MS", "Mon", "OM", "MF", "Max", "IM", "P", "I", "Mo", "NO", "MB", "CM", "G", "ME", "MN", "m", "L", "JM", "FM", "AM", "MI", "K", "Y", "Z", "Multi", "MON", "LM", "ML", "V", "W", "R", "H", "MT", "C", "Memory", "O", "U", "MU", "A", "RM", "D", "MD", "MA", "S", "E", "Mass", "MX", "J", "MM", "X", "B", "F", "Q", "MC", "n", "NM", "MO"], "i": ["ip", "ie", "mini", "ni", "id", "it", "ki", "I", "oi", "ir", "ix", "a", "e", "b", "int", "uri", "pi", "fi", "ib", "n", "multi", "di", "ini", "k", "ai", "ji", "gi", "io", "p", "mi", "m", "z", "o", "t", "image", "line", "im", "ij", "iu", "\u0438", "ii", "ui", "ti", "ci", "ia", "inline", "ch", "ei", "qi", "c", "x", "api", "s", "yi", "chi", "bi", "u", "zi", "ic", "cli", "y", "l", "eni", "ri", "f", "si", "iv", "ind", "phi", "d", "ili", "xi", "q", "vi", "ori", "ik", "li"], "row_min": ["rowingrange", "row\u00b7miss", "row\u00b7max", "rowingaverage", "row67min", "rowingmin", "col_shift", "row_range", "row67shift", "row2max", "col_miss", "row2min", "col_Min", "col_mins", "row_miss", "row_Min", "row2average", "row\u00b7min", "row_average", "rowingmins", "rowingMin", "col_average", "rowingmax", "row_shift", "col_range", "row_mins", "row2Min", "row67miss", "row\u00b7shift", "row67max"], "row_max": ["row_size", "rowalmax", "rowalrange", "row67min", "rowalonly", "col_last", "row_only", "row_ax", "row_range", "col_size", "row67ax", "row2max", "col_ax", "row2min", "row67step", "row_last", "row2range", "row_mod", "rowalmin", "col_mod", "col_range", "row2size", "col_only", "col_step", "row67max", "row_step"], "col_min": ["col32mini", "colsmins", "colAmax", "colAmini", "row_mini", "row_main", "colAminimum", "colsmax", "col_mins", "col32main", "col_minimum", "colsmain", "col32max", "col_mini", "colsmin", "colAmin", "col_main", "row_mins", "row_minimum", "col32min"], "col_max": ["colacrank", "col_comb", "colNmax", "colacmax", "colNmin", "colacmaximum", "row_ax", "colNax", "row_chain", "row_range", "col_ax", "col\u00b7rank", "col2min", "colNchain", "col2max", "col_rank", "row_maximum", "col\u00b7maximum", "col_maximum", "row_rank", "col_range", "col\u00b7min", "row_comb", "col_chain", "colacmin", "col\u00b7max", "col2range"], "j": ["ip", "ie", "ni", "jo", "it", "part", "jet", "note", "h", "a", "e", "b", "jj", "jp", "li", "cell", "er", "adj", "n", "uj", "ja", "k", "ai", "ji", "io", "p", "m", "cm", "r", "z", "o", "all", "key", "t", "em", "im", "ij", "iu", "w", "ii", "oj", "ui", "other", "left", "ci", "ch", "jl", "qi", "job", "x", "c", "out", "ge", "s", "aj", "u", "off", "y", "l", "f", "js", "J", "si", "je", "iv", "ind", "end", "ion", "d", "fr", "xi", "q", "vi", "ori", "jc", "g"], "v": ["ion", "iv", "vm", "conv", "vol", "c", "x", "value", "k", "ve", "ver", "vc", "qv", "s", "tv", "ov", "ev", "rev", "video", "d", "vv", "p", "u", "m", "h", "r", "z", "ch", "o", "uv", "e", "y", "a", "sv", "va", "l", "b", "t", "vu", "en", "V", "vs", "version", "f", "vd", "li", "vin", "q", "vi", "lv", "val", "cv", "w", "ii", "ui", "vp", "vic", "van", "av", "n", "g", "nv"], "possible": [" possibility", "ppbable", "Pider", "pential", "Possible", " pable", "ppable", "gider", "spossibility", "potossibly", "potential", "spential", "gbable", "gossible", "Pable", "ppossibility", "possibility", " pbable", "spossibly", "pider", "gossibility", " pider", "Pential", "Possibly", "potossibility", "pbable", "Pbable", "spossible", "potossible", "ppossible", "possibly", "Possibility", "pable"]}}
{"code": " fin = sys.stdin\n  T = int(fin.readline())\n  for case in range(1,T+1):\n      A, B = map(int, fin.readline().split())\n  \n      total = 0\n  \n      for i in range(A, B+1):\n          n = str(i)\n          pairs = set()\n          for shift in range(1, len(n)):\n              m = n[shift:] + n[:shift]\n              j = int(m)\n              if j > i and j <= B:\n                  pairs.add(m)\n          total += len(pairs)\n  \n  \n      print \"Case #%d: %s\" % (case, total)\n  \n", "substitutes": {"fin": ["ini", "die", "han", "su", "fun", "proc", "end", "final", "init", "done", "pen", "div", "br", "lin", "Fin", "fine", "oi", "hr", "req", "ln", "thin", "fp", "rin", "fen", "fn", "trans", "raf", "close", "rb", "bin", "FIN", "reader", "nir", "len", "en", "skip", "conn", "start", "f", "fr", "lo", "fa", "nu", "fi", "inner", "tun", "tin", "obj", "finder", "os", "fd", "iter", "inn", "sn", "syn", "inf", "file", "dir", "err", "des", "fat"], "T": ["PI", " N", "N", "Total", " limit", "TN", " C", "I", "P", " P", "G", " L", " M", "L", " t", "K", "Y", "Z", " ti", "Time", "t", "Tu", "V", "H", "R", "W", " CI", "C", "TC", " I", "O", "TT", " trial", "U", "TA", "TF", "D", "WT", "Ti", "TB", "S", "E", "Tab", "time", "M", "X", "F", "Q", " time", "TS", "TI", "Test", " F"], "case": ["ip", "slice", "end", "c", " c", "Case", "x", "loop", "id", "code", "ai", "me", "use", "P", "ace", "section", "bi", "seq", "d", "name", "count", "p", "switch", "result", "ide", "number", "bc", "h", "r", "I", "ce", "e", "key", "ase", "cases", "CI", "mode", "line", "race", "C", "U", "match", "pe", "ice", "trial", "pair", "time", "instance", "ti", "type", "index", "test", "cas", "address", "position", "phase", "li", "sea", "se"], "A": ["NA", "Pi", "Ca", "N", "Case", "At", "P", "I", "p", "Si", "G", "One", "L", "Am", "K", "Y", "a", "API", "Num", "AB", "b", "Ab", "AI", "Sa", "V", "BA", "H", "R", "AA", "Na", "C", "U", "O", "alpha", "TA", "D", "E", "S", "Part", "Offset", "LA", "M", "X", "F", "CA", "Ak", "Shift"], "B": ["IB", "bound", "N", "BF", "BI", "NB", "BE", "WB", "P", "I", "Limit", "length", "MB", "Bal", "FB", "G", "number", "L", "K", "Y", "Z", "DB", "LB", "BB", "AB", "b", "Ab", "Bs", "Block", "V", "BA", "W", "R", "H", "CB", "FF", "C", "base", "U", "O", "BR", "Number", "OB", "PB", "D", "E", "S", "J", "M", "X", "F", "Q", "BC", "BL", "BS"], "total": ["percent", "mini", "Total", "partial", "final", "done", "doc", "otal", " Total", "part", "I", "mm", "length", "result", "scale", "p", "count", "sum", "complete", "nb", "number", "mult", "py", "no", "mu", "info", "current", "toc", "all", "offset", "trans", "nt", " tot", "t", "b", "base", "error", "net", "summary", " TOTAL", "pi", "chi", "di", "tax", "max", "temp", "trial", "tt", "ta", "J", "fo", "iter", "ti", "M", "si", "full", "valid", "li", "multi", "fat"], "i": ["ini", "ip", "PI", "ie", "slice", "ind", "qi", "mini", "x", "c", "ni", "hi", "phi", "ai", "id", "chi", "pos", "bi", "I", "d", "p", "u", "mi", "abi", "mu", "z", "info", "a", "e", "y", "l", "b", "int", "t", "start", "f", "ij", "iu", "iti", "xi", "pi", "ori", "ii", "num", "ui", "ti", "index", "si", "ci", "li", "v", "di"], "n": ["network", "ind", "N", "c", "x", "ni", "k", "s", "an", "body", "d", "pos", "p", "name", "u", "nb", "nc", "r", "z", "h", "o", "a", "e", "cn", "y", "fn", "nt", "non", "ns", "b", "t", "l", "np", "int", "en", "eni", "na", "pn", "ne", "conn", "f", "net", "nit", "nu", "un", "q", "nm", "nn", "w", "num", "sn", "Ns", "g", "v"], "pairs": ["spores", "hairs", " parms", "ppores", "hats", "pports", "ppair", "pores", "conents", "Pats", "Ports", "Pair", "parms", "ports", " pores", " ports", " ponents", " pats", "harms", "cores", "pats", "sponents", "pair", "cairs", "ponents", "ppairs", "Pores", "Parms", "horts", " pair", "spairs", "Pairs"], "shift": ["center", "ip", "span", "data", "pack", "ind", "slice", "end", "origin", "input", "distance", "range", "ai", "power", "chi", "part", "pos", "d", "length", "seq", "sup", "p", "u", "scale", "source", "count", "sh", "switch", "cm", "reverse", "h", "r", "z", "push", "offset", "size", "weight", "b", "patch", "dist", "depth", "pull", "start", "f", "head", "force", "version", "order", "axis", "small", "jp", "hift", "q", "mass", "pop", "set", "diff", "shape", "pair", "ii", "left", "num", "gap", "src", "index", "transform", "ff", "li", "align", "Shift"], "m": ["dm", "fm", "mn", "mini", "ma", "c", "x", "range", "bm", "s", "an", "d", "pos", "mm", "p", "u", "mi", "gm", "cm", "h", "r", "z", "o", "a", "e", "y", "ms", "pm", "param", "l", "b", "t", "sm", "md", "int", "machine", "mo", "f", "hm", "im", "mr", "module", "tm", "mass", "ym", "nm", "w", "num", "M", "mean", "g", "v", "mu"], "j": ["jl", "uj", "mn", "ja", "ind", "x", "c", "ni", "k", "jo", "ji", "part", "pos", "I", "d", "mm", "aj", "p", "u", "bj", "cm", "h", "r", "z", "o", "a", "e", "y", "l", "b", "t", "jj", "f", "im", "ij", "jp", "li", "pi", "ny", "js", "nm", "obj", " maj", "J", "dj", "ii", "oj", "jc", "g", "v", "mu"]}}
{"code": " \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  def debug(*args):\n      print(*args, file=sys.stderr)\n  \n  fin = sys.stdin\n  T = int(fin.readline())\n  for case in range(1, T + 1):\n      answer1 = int(fin.readline())\n      rows1 = []\n      for i in range(4):\n          rows1.append(set(map(int, fin.readline().split())))\n      answer2 = int(fin.readline())\n      rows2 = []\n      for i in range(4):\n          rows2.append(set(map(int, fin.readline().split())))\n  \n      possibilities1 = rows1[answer1-1]\n      possibilities2 = rows2[answer2-1]\n  \n      numbers = possibilities1.intersection(possibilities2)\n      result = None\n      if len(numbers) == 1:\n          result = list(numbers)[0]\n      elif len(numbers) == 0:\n          result = 'Volunteer cheated!'\n      else:\n          result = 'Bad magician!'\n  \n  \n      print(\"Case #%d: %s\" % (case, result))\n  \n", "substitutes": {"fin": ["ini", "die", "fail", "han", "rec", "data", "proc", "fun", "after", "final", "init", "hen", "pos", "div", "fat", "br", "lin", "Fin", "fine", "loader", "dev", "ln", "thin", "info", "fp", "rin", "fen", "fn", "trans", "raf", "before", "non", "cook", "bas", "bin", "FIN", "reader", "nir", "en", "report", "zen", "len", "conn", "f", "fr", "vec", "fa", "spec", "nu", "ven", "gener", "tun", "util", "front", "tin", "prem", "el", "rt", "inner", "mer", "rip", "finder", "iter", "inn", "don", "kin", "central", "ran", "file", "n", "dir", "err", "fd"], "T": [" N", "N", "Total", "TN", "n", " C", "P", "I", " P", "L", " t", "unit", "Y", "Z", "Time", "t", "V", "future", "H", "R", "C", "TC", "O", " trial", "TT", "A", "TA", "TR", "D", "S", "E", " ratio", "trial", "time", "duration", "M", "X", "B", "F", "Q", "test", " time", "TS", "TI"], "case": ["ip", "sequence", "su", "tri", "end", "c", "Case", "x", "loop", "id", "code", "use", "me", "bug", "ace", "section", "length", "seq", "step", "tim", "u", "page", "name", "switch", "count", "number", "call", "size", "key", "adi", "ase", "cases", "t", "mode", "line", "answer", "row", "ue", "C", "race", "U", "match", "ice", "day", "trial", "path", "time", "instance", "X", "shift", "type", "test", "cas", "address", "position", "phase", "ce", "sea", "v", "se"], "answer1": ["responseOne", "address1", "sizeone", "size1", "Answer1", "address01", " answerOne", "rankone", "rank1", "answerOne", "size01", "rank01", "AnswerOne", "Answer2", "answerone", "response2", "response1", "answer01", "addressone"], "rows1": ["rowone", "rows01", "blocks01", "ows1", "rowOne", "rows0", "readsone", "owsone", "orders01", "blocksone", "row0", "ows01", "reads0", "rowsOne", "row2", "orders1", " rowsOne", "rowsone", "ows2", "ows0", "blocks1", "orders2", "reads2", "owsOne", "row1", "ordersone", "reads1", "blocks2"], "i": ["ei", "v", "ip", "isin", "ie", "qi", "ind", "x", "c", "k", "ai", "it", "id", "yi", "chi", "gi", "d", "I", "io", "p", "uli", "u", "h", "r", "o", "a", "e", "ime", "l", "int", "b", "eni", "ri", "f", "im", "iu", "iq", "xi", "pi", "ati", "ii", "j", "ui", "num", "ti", "index", "si", "ci", "ait", "li", "il"], "answer2": ["replyTwo", "answer5", "addressTwo", "issue4", "responseTwo", "result4", "result5", "response02", "reply2", "answertwo", "Answer5", "replytwo", "address02", "issue2", "Answer4", "AnswerTwo", "address2", "Answer2", "issueTwo", "answerTwo", "reply02", "issue5", "result2", "answer4", "responsetwo", "response2", "addresstwo", "answer02", "resultTwo"], "rows2": ["ows62", "rowtwo", " rows02", "ows1", "owstwo", "shows4", "shows62", "rows02", "rows0", " rowstwo", "ows02", "showstwo", "shows2", "row02", "ows4", "row0", "rows62", "row62", "row2", "rows4", "readstwo", "ows2", "ows0", "row4", "rowstwo", "reads2", "reads02", "row1", "reads1", " rows0"], "possibilities1": ["possiblesone", "pOSSibilities3", "possives2", "possives1", "possibles1", "pposibility2", "possibilities01", "possitions2", "pOSSibles2", "pOSSibilities1", "possibilitiesone", "possibility01", "possibilityone", "possitions1", "possitionsone", "possibles3", "pposibilities01", "pposibilities2", "pOSSibles1", "pOSSibles3", "possibilities3", "possibility1", "pposibility1", "pposibilities1", "possibility2", "pOSSibilities2", "possibles2", "pposibilitiesone", "pposibility01", "possibility3", "possives3", "pposibilityone", "possibles01", "possitions01"], "possibilities2": ["possibilityTwo", "possipes1", "pOSSibility2", "possibility4", "possibles1", "pOSSibilities1", "posses2", "pOSSibilities4", "posses4", "possibilities4", "possities4", "possities1", "pOSSibilitiesTwo", "possitiesTwo", "posses1", "possipes2", "possibilitiesTwo", "possibility1", "possibility2", "pOSSibilityTwo", "pOSSibilities2", "possibles2", "pOSSibility4", "possities2", "pOSSibility1", "possesTwo"], "numbers": ["rnums", "Nums", "neumbers", "generumbers", "rnumbers", "neumer", "cumber", "Nefficients", "cumer", "rnumer", "number", "generumer", "generodes", "podes", "neefficients", "nums", "rnodes", "Nodes", "nefficients", "pums", "cumbers", "Numbers", "Numer", " numer", "pumber", "Number", "generums", " nums", "neums", "nodes", "cums", " nefficients", "numer", "codes", "pumbers"], "result": ["warning", "stage", "direction", "success", "successful", "attr", "Result", "df", "source", "date", "method", "effect", "main", "output", "product", "diff", "default", "grade", "msg", "su", "final", "length", "step", "name", "res", "mess", "answer", "error", "description", "cash", "runner", "found", "obj", "lock", "reason", "ret", " Result", "package", "account", "err", "rect", "follow", "comment", "value", "mate", "notice", "our", "replace", "repl", "current", "compl", "root", "division", "rc", "summary", "results", "folder", "type", "valid", "search", "data", "status", "response", "winner", "message", "catch", "desc", "cup", "ise", "report", "match", "score", "test"]}}
{"code": " \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  def debug(*args):\n      print(*args, file=sys.stderr)\n  \n  fin = sys.stdin\n  T = int(fin.readline())\n  for case in range(1, T + 1):\n      N = int(fin.readline())\n      numbers1 = list(map(float, fin.readline().split()))\n      numbers2 = list(map(float, fin.readline().split()))\n  \n      numbers1.sort(reverse=True)\n      numbers2.sort()\n  \n      naomi = 0\n      remaining = numbers2[:]\n      for n in numbers1:\n          lost = False\n          for i, r in enumerate(remaining):\n              if r > n:\n                  del remaining[i]\n                  lost = True\n                  break\n          if not lost:\n              naomi += 1\n  \n      cheat = 0\n      remaining = numbers2[:]\n      numbers1.sort()\n      while numbers1:\n          n = numbers1[0]\n          if n > remaining[0]:\n              cheat += 1\n              del remaining[0]\n              del numbers1[0]\n          else:\n              del remaining[-1]\n              del numbers1[0]\n  \n      print(\"Case #%d: %d %d\" % (case, cheat, naomi))\n  \n", "substitutes": {"fin": ["rec", "proc", "loader", "pub", "oi", "req", "ln", "fp", "rin", "fen", "bas", "bin", "nir", "rup", "start", "fi", "tin", "prem", "mer", "finder", "iter", "file", "fat", "ini", "die", "form", "final", "spin", "br", "lin", "fine", "cook", "zen", "spec", "tun", "serv", "el", "fu", "gen", "fun", "err", "han", "init", "div", "fork", "rf", "fb", "trans", "en", "conn", "f", "lo", "fa", "gener", "util", "inner", "front", "sn", "kin", "fd", "dev", "Fin", "thin", "info", "fn", "raf", "FIN", "reader", "report", "len", "skip", "fr", "nu", "ven", "os", "ori", "inn", "dir"], "T": ["Total", "TN", "Case", "NT", "P", "I", "G", "L", " t", "K", "Y", "Z", "Time", "t", "V", "H", "R", "W", "DT", "C", "TC", "O", "U", "TT", " trial", "A", "TA", "TR", "D", "TB", "S", "E", "J", "time", "M", "X", "B", "F", "Q", "test", "TS"], "case": ["sequence", "end", "x", "Case", "c", "loop", "code", "loc", "one", "catch", "bug", "config", "ace", "section", "length", "step", "result", "name", "count", "number", "chance", "call", "size", "exc", "key", "ase", " CASE", "cases", "t", "charge", "mode", "patch", "line", "error", "race", "match", "pe", "trace", "ice", "day", "trial", "path", "time", "num", "instance", "X", "type", "test", "position", "ce", "sea"], "N": ["network", "ner", "Case", "NT", "NB", "P", "I", "NR", "p", "number", "L", "no", "unit", "Num", "nt", "np", "nor", "R", "Na", "C", "Number", "nu", "D", "S", "NUM", "num", "M", "B", "X", "F", "Test"], "numbers1": ["Numbers0", "numbersone", "numer2", "number2", "nodes4", "numsone", "nums1", "Nums0", "cums2", "pumberOne", "Nums1", "nNumbers1", "NumbersOne", "cumbers2", "Nums001", "pumbers2", "numpy001", "nodes0", " nNumbersone", "nodes8", "NumsOne", "cumbers0", "cums0", "nNumbers2", "pumber1", "numer1", "numbers81", "cums3", "nums81", "Numbers81", "nodes1", "numbers0", "numberOne", "Numbers2", "nNumbers0", "numps3", "Numbers001", "number3", "cumbers1", "numpy2", "nums4", "nums0", "nNumbers4", "pumbers1", "pumber4", "numsOne", "novers2", "nNumbersone", " numbersone", "numbers8", "novers1", "noversone", "cums1", "Nums2", " nNumbers1", "nNumbersOne", "Numbers4", "nodesOne", "nodes2", "numbers4", "number001", "Numbers1", "cumbers3", "nums2", "number1", "numer4", "Nums8", "pumber2", "number81", "pumbers4", "numps2", "nums001", "numpy81", "number0", " nNumbers2", "numps0", "Nums4", "Numbers8", "numbersOne", "numbers3", "Nums81", "numer8", "nums8", "pumbersOne", "number4", "numps1", "numpy1", "numbers001", "nums3"], "numbers2": ["nNumbers2", "Numbers0", "nnotations2", "Numbers5", "number2", "neumbers8", "neumbers2", "nodes4", "nums182", "nums1", "nums5", "nnotations1", "numberstwo", "nphones2", "neumbers1", "numbers3", "nways182", "Nums0", "number182", "numbers8", "numstwo", "nnotationstwo", "Numbers3", "nums0", "nphonestwo", "nodes1", "Nums2", "NumbersTwo", "Nums1", "Numberstwo", "nNumbers1", "nways1", "neums1", "numsTwo", "nodes5", "nphones1", "nphones5", "numbers0", "numbersTwo", "Nums5", "nums8", "Numbers2", "nphonesTwo", "neums8", "numbers5", "nums3", "nodes2", "numbers4", "nways2", "Numbers1", "nums2", "neums2", "neums4", "number1", "number3", "Nums182", "NumsTwo", "nodes0", "nways3", "nphones0", "Numstwo", "Nums3", "nodes8", "Numbers182", "nNumbers8", "neumbers4", "nums4", "nnotationsTwo", "numbers182", "nNumbers4"], "naomi": ["naori", " naoki", "nooki", "naoki", "nuoko", "Naobi", "Naomi", "nanqi", "Naoki", " naoko", "anaosi", "nanori", "nuomi", "Naoshi", " naori", "nanoki", " naqi", "naobi", "noqi", "noomi", "unaobi", "nuosi", "nuomal", " naosi", " naomal", "nanomi", "anaomi", "unaoshi", "unaoki", "anaomal", "naoko", " naobi", " naoshi", "naoshi", "unaomi", "naomal", "naosi", "noori", "anaoko", "naqi"], "remaining": ["renaning", "grouting", "grain", "grained", "errouting", "renainer", "expainer", "resaining", "renaining", "nained", "renain", " remain", "resining", "resained", "Remining", "resain", "renained", "promained", "rightained", "rightaining", "remain", "remopping", "remainer", "expaining", "rightain", "nopping", "promaning", "Remopping", "renains", " remained", "expained", "Remouting", "remining", "expining", "nain", "nains", "remouting", "rightainer", "erraining", "Remaining", " remopping", " remining", "Remained", "errained", "renining", "restainer", "Remains", "Remainer", "restained", "naining", "promainer", "restaining", "remained", "errain", "promaining", "remains", "remaning", "Remain", "restaning", "expain", "graining"], "n": ["rec", "span", "mini", "ind", "x", "c", "ni", "out", "k", "s", "an", "d", "name", "u", "p", "nb", "number", "m", "mult", "nc", "z", "nin", "unit", "o", "a", "e", "y", "cn", "fn", "non", "nt", "ns", "l", "int", "t", "b", "np", "en", "na", "rn", "pn", "ne", "conn", "f", "unn", "net", "dn", "ot", "byn", "nat", "nu", "un", "nm", "nn", "w", "inn", "num", "sn", "j", "nan", "g", "v"], "lost": ["confirmed", "killed", "rawn", "earned", "seen", "winner", "shown", "out", "final", "connected", "hidden", "protected", "sold", "south", "given", "pos", "oss", "winning", "tested", "broken", "made", "unit", "started", "less", " lose", " loser", " Lost", "osed", "size", "loss", "flat", "owned", "unknown", "sent", "old", " missed", "got", "known", "uno", "original", "need", "initialized", " found", "cost", " failed", "failed", "won", "classified", " killed", "wrong", "found", "missing", "dead", "Lost", " loose", "temp", "left", "needed", "balanced", " loss", "index", "cas", "matched", "placed", "changed", "closed", "numbered"], "i": ["ini", "ip", "ie", "ind", "x", "c", "ni", "k", "ai", "yi", "chi", "gi", "d", "I", "ki", "io", "bi", "p", "u", "zi", "m", "z", "o", "e", "y", "l", "int", "t", "b", "eni", "ri", "f", "im", "iu", "xi", "uri", "pi", "inner", "vi", "ii", "j", "ui", "ti", "index", "si", "ci", "li", "v", "di"], "r": ["nr", "rec", "su", "rel", "sr", "ner", "ru", "c", "rial", "k", "range", "it", "s", "d", "rit", " R", "result", "br", "arr", "p", "dev", "m", "ro", "h", "counter", "rf", "rg", "res", "rd", "e", "orig", "cr", "re", "b", "rh", "rb", "nor", "viol", "gr", "chain", "rn", "ri", "R", "f", "race", "error", "row", "rank", "rr", "rs", "requ", "ar", "ori", "w", "j", "er", "run", "ret", "err"], "cheat": ["die", "stuff", "luck", "fail", "risk", "quick", "pred", "frac", "winner", "init", "fortune", "night", "catch", "bug", "chi", "notice", "ace", "rit", "result", "p", "adv", "nice", "magic", "switch", "pixel", " race", "kick", "cmp", "info", "kat", "clean", "advant", "ski", "np", "kill", "next", " winner", "game", "fix", "patch", "na", "int", "hack", "conn", "skip", "error", "race", "foo", "pie", "wait", "front", " cheating", "win", "diff", "trial", "feat", "stat", "progress", "miss", "test", "cas", "debug", "ignore", "err", "fat"]}}
{"code": " \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  def debug(*args):\n      print(*args, file=sys.stderr)\n  \n  fin = sys.stdin\n  T = int(fin.readline())\n  for case in range(1, T + 1):\n      C, F, X = map(float, fin.readline().split())\n  \n  \n      rate = 2\n      time = 0\n  \n      best = 10**20\n  \n      while time < best:\n          result = X / rate + time\n          if result < best:\n              best = result\n          time += C / rate\n          rate += F\n  \n  \n  \n      print(\"Case #%d: %.7f\" % (case, best))\n  \n", "substitutes": {"fin": ["ini", "die", "pred", "browser", "proc", "init", "done", "prof", "lib", "div", "fat", "br", "dev", "Fin", "fine", "lin", "oi", "req", "ln", "r", "thin", "info", "fb", "fp", "finished", "rin", "fen", "fn", "raf", "rb", "bin", "FIN", "reader", "en", "inv", "len", "conn", "start", "f", "i", "fr", "lo", "fa", "nu", "fi", "inner", "util", "tun", "serv", "tin", "el", "spec", "os", "iter", "inn", "sn", "gen", "inf", "kin", "file", "dir", "fd"], "T": ["N", "Total", "TN", "c", "Case", "P", "I", " test", "L", " t", "CT", "CL", "K", "Y", "Z", "Time", "t", "V", "W", "R", "TH", "H", "TC", "O", "U", "TT", "trace", " trial", "A", "stop", "D", "WT", "TB", "S", "E", "TIME", "M", "B", "test", "Q", "TS", "Test"], "case": ["c", "Case", " c", "x", "loop", "code", "catch", "bug", "section", "length", "ace", "name", "count", " test", "complete", "seq", "event", "number", "chance", "CE", "change", "point", "size", "key", "ase", " CASE", "cases", "Time", "rice", "core", "seed", "clock", "line", "f", " suite", "race", "EST", "match", " trial", "nce", "trace", "ice", "trial", "num", "instance", "course", "type", "site", "test", "cas", "times", "Test", "ce", "est"], "C": ["ACE", "N", "c", "CU", "P", "I", "CR", "Count", "count", "CM", "CF", "G", "CN", "L", "CT", "FC", "CL", "K", "Y", "CV", "Sc", "Time", "CI", "V", "W", "R", "H", "UC", "CS", "U", "O", "A", "CO", "CC", "D", "EC", "COR", "E", "S", "DC", "M", "B", "Q", "Cu", "MC", "CA", "Con", "CP"], "F": ["PF", "FA", "OF", "BF", "N", "Result", "P", "I", "FT", "FB", "CF", "FE", "G", "FO", "L", "FC", "FM", "K", "Y", "Z", "Time", "FU", "frequency", "V", "FF", "H", "R", "f", "W", "FG", "U", "O", "AF", "A", "FW", "TF", "GF", "D", "FR", "EF", "RF", "E", "S", "Fine", "FH", "M", "B", "Q", "FD"], "X": ["N", "x", "P", "I", "RC", "CR", "CF", "G", "UX", "L", "FC", "XL", "CE", "CL", "K", "Y", "Z", "XP", "CV", "XX", "Time", "SC", "XT", "V", "FF", "W", "H", "R", "XM", "TC", "U", "O", "A", "CO", "XXX", "CC", "D", "EC", "TX", "E", "S", "J", "CH", "XY", "B", "M", "Q", "PE", "EX", "CI", "CP"], "rate": ["prime", "timeout", "stage", "rates", "con", "code", "event", "date", "burst", " speed", "speed", "size", "weight", "term", "cr", "mode", "correct", "R", "cycle", "dy", "feed", "feature", "tie", "rice", "FE", "est", "grade", "use", "CR", "count", " test", "r", "rating", "key", "ime", "Time", "error", "force", "rank", "pe", "err", "seed", "Rate", "value", "rule", "cause", "delay", "counter", "ave", "root", "change", "float", "peed", "frequency", "rc", "cost", "trace", "rand", "trial", "age", "currency", "type", "sample", " frequency", " grace", "ate", "scale", "erate", "cale", "core", "rated", "depth", "race", "order", "stop", "ride", "score", "test"], "time": ["stage", "timeout", "right", " times", "event", "date", "live", "speed", "size", "Z", "cf", "weight", "term", "start", "U", "round", "cycle", "factor", "duration", "run", "Q", "times", "FE", "est", "grade", "form", "loop", "ace", "length", "count", "complete", "unit", "r", "ac", "ime", "Time", "t", "error", "force", "fast", "ice", "play", "c", "value", "x", " Time", "change", "frequency", "f", "cost", "trace", "CC", "max", "trial", "age", "progress", "type", "end", "scale", "tim", "call", "timer", "depth", "fit", "race", "order", "stop", "TIME", "etime", "score", "course", "test", " TIME"], "best": ["largest", "right", "success", "aster", "live", "speed", "size", "highest", " fastest", "correct", "start", "R", "peak", "round", "better", "good", "diff", "latest", "default", "times", "est", "loop", "master", "final", "perfect", "p", "r", "only", "all", " winner", "fe", "fast", " worst", "rank", "pe", "top", "err", " Best", "x", "std", " newest", "current", "thread", "change", "f", "cost", "ale", "trace", "profit", "results", "player", "rand", "Best", "max", "trial", "progress", "instance", "valid", "search", "end", "winner", "growth", "scale", "depth", "race", "order", "match", "new", "last", "score", "worst", "test", "go", "close"], "result": ["function", "data", "value", "winner", "success", "final", "c", "distance", "master", "Result", "catch", "month", "mate", "length", "complete", "event", "request", "current", "r", "counter", "change", "term", "rice", "core", "correct", "report", "depth", "performance", "future", "error", "f", "race", "rc", "R", "rank", "match", "order", "cost", "trace", "cess", "results", "runner", "acc", "round", "better", "ride", "diff", "score", "trial", "progress", "duration", "feature", "worst", "test", "valid", "default", "grade"]}}
{"code": " fin = sys.stdin\n  T = int(fin.readline())\n  for case in range(1,T+1):\n      board = []\n      for i in range(4):\n          row = list(fin.readline().strip())\n          board.append(row)\n  \n      fin.readline()\n  \n      rows = [[], [], [], []]\n      cols = [[], [], [], []]\n      diags = [[], []]\n  \n      for i in range(4):\n          for j in range(4):\n              v = board[i][j]\n              rows[i].append(v)\n              cols[j].append(v)\n              if i == j:\n                  diags[0].append(v)\n              if i + j == 3:\n                  diags[1].append(v)\n  \n      buckets = rows + cols + diags\n      result = 'Draw'\n      filled = True\n      for bucket in buckets:\n          d = {'T': 0, 'X': 0, 'O': 0, '.': 0}\n          for v in bucket:\n              d[v] += 1\n          if d['T'] + d['X'] == 4:\n              result = 'X won'\n              break\n          if d['T'] + d['O'] == 4:\n              result = 'O won'\n              break\n          if d['.'] > 0:\n              result = 'Game has not completed'\n  \n      print(\"Case #%d: %s\" % (case, result))\n  \n  \n  \n", "substitutes": {"fin": ["ini", "die", "fail", "rec", "su", "rob", "exec", "tu", "data", "proc", "end", "init", "done", "pen", "n", "div", "lin", "Fin", "fine", "dev", "oi", "ln", "skin", "ro", "rf", "thin", "fb", "fp", "rin", "finished", "fen", "fn", "raf", "close", "before", "bin", "FIN", "zen", "len", "inv", "en", "fit", "conn", "start", "f", "line", "fr", "lo", "fa", "nu", "ven", "inner", "tun", "rt", "serv", "tin", "util", "un", "win", "os", "fd", "fu", "inn", "feed", "sn", "run", "kin", "ran", "file", "fun", "dir", "por", "fat"], "T": [" N", "N", "TN", "x", "Case", " unit", "n", " it", " body", "I", " R", "P", " table", "p", " script", " duration", " L", "tick", "L", " t", "K", "Z", " loop", "Y", " ti", " CASE", " format", " trials", "Time", "t", "V", "H", "R", "TS", " z", "C", " I", " trial", "TT", "O", "TR", "D", "S", "E", "trial", "ti", "time", "M", "B", "X", "F", "Q", " tab", "test", " time", " n", "TI", " D"], "case": ["su", "ie", "qi", "slice", "pack", "end", "c", "x", "Case", "loop", "k", "ai", "code", "me", "catch", "bug", "ace", "section", "length", "seq", "cache", "u", "p", "tim", "table", "count", "switch", "name", "ide", "chance", "bc", "CE", "h", "r", "z", "ASE", "change", "size", "e", "key", "ase", "cases", "b", "mode", "zip", "future", "line", "race", "match", "ice", "li", "q", "vi", "trial", "path", "time", "instance", "test", "cas", "phase", "times", "ce", "sea", "se"], "board": ["la", "uc", "sequence", "hole", "data", "flow", "comment", "form", "c", "loop", "Board", "boarding", "block", "down", "video", "bug", "body", "head", "buffer", "boards", "cart", "ack", "table", "layout", "ro", "stream", "ban", "coll", "clean", "channel", "buff", "frame", "que", "draw", "check", "core", "queue", "foot", "flo", "list", "hack", "line", "box", "roll", "object", "deck", "round", "rock", "entry", "array", "cell", "panel", "feed", "run", "batch", "wheel", "menu", "pad", "lane", "bo", "boy", "col"], "i": ["ip", "ie", "ni", "ki", "I", "uli", "oi", "a", "e", "int", "b", "start", "uri", "pi", "fi", "n", "di", "ini", "k", "ai", "ji", "gi", "io", "p", "mi", "m", "z", "o", "t", "ij", "iu", "w", "ii", "ui", "ti", "ci", "ei", "qi", "hi", "x", "c", "s", "yi", "chi", "bi", "u", "zi", "y", "l", "eni", "ri", "f", "si", "ind", "end", "ion", "xi", "vi", "ori", "ik", "index", "li", "col"], "row": ["data", "slice", "comment", "record", "flow", "item", "view", "sync", "block", "range", "k", "id", "bug", "server", "head", "page", "group", "raw", "buffer", "bar", "sum", "tr", "ro", "r", "key", "coll", "reader", "user", "list", "line", "roll", "box", "f", "ob", "q", "post", "du", "rock", "lc", "entry", "array", "Row", "cell", "feed", "log", "sc", "col"], "rows": ["acks", "tracks", "locks", "data", "orders", "fields", "ips", "posts", "items", "s", "builders", "head", "boards", "views", "stars", "flows", "runs", "values", "hands", "vals", "r", "rooms", "ros", "files", "models", "events", "forms", "cells", "pages", "faces", "users", "ues", "balls", "roots", "results", "headers", "planes", "rs", "boxes", "ays", "ks", "shows", "breaks", "frames", "array", "thumbnails", "ss", "blocks", "ups", "feed", "groups", "heads", "keys", "holes", "lines", "packs", "vers", "ows", "OWS", "aults"], "cols": ["Collines", " colabs", "Colments", "columnabs", "columns", " coles", "Colabs", "coles", "colabs", "cold", "colments", "columnlines", "Cold", "clabs", "Colows", "cles", "COLlines", "collines", "COLs", "Coles", "colows", "cls", "columnd", "COLes", "Cols", "columnows", "columnments", "COLd", " colows", "columnes", "clments"], "diags": ["niags", "diag", " diag", "iniag", "liags", "diagn", "liages", "liag", "diagram", "diads", "liagram", "niag", "niages", "diages", "dragram", " diages", " diagn", "Diages", " diagram", "Diags", "Diagn", "Diads", "iniages", "drages", "iniads", "Diag", "drag", "drags", " diads", "iniags", "niagn", "Diagram"], "j": ["ie", "ni", "jo", "jam", "h", "a", "e", "b", "jj", "jp", "pi", "li", "n", "di", "uj", "ja", "k", "ai", "ji", "gi", "io", "p", "m", "r", "z", "o", "t", "ij", "w", "ii", "oj", "ch", "jl", "qi", "x", "c", "s", "bi", "aj", "u", "y", "l", "ri", "f", "js", "J", "si", " ii", "je", "iv", "ind", "end", "kj", "fr", "xi", "q", "vi", "dj", "ik", "jc", "g"], "v": ["ion", "iv", "ie", "vol", "x", "c", "value", "k", "ve", "ver", "vc", "qv", "s", "ov", "ev", "tv", "video", "word", "our", "vv", "p", "u", "page", "m", "window", "h", "r", "z", "o", "uv", "e", "y", "point", "vid", "sv", "va", "l", "b", "t", "vu", "ou", "V", "vs", "version", "f", "vd", "letter", "net", "li", "vin", "q", "vi", "lv", "val", "vo", "cv", "ach", "w", "ii", "vy", "vert", "num", "vp", "vt", "av", "n", "g", "nv"], "buckets": ["packet", " bucketlists", " Bucklists", "pieceset", "buckments", "packets", " Buckets", " bucketeting", "pieceseting", " bucketet", "bassets", "bucketing", "basseting", "piecesments", "packments", " bucketing", "basset", "bassments", " bucklists", "bucklists", " Bucketing", " Bucket", "packeting", "piecesets", " bucketets"], "result": ["warning", "success", "text", "Result", "event", "date", "method", "goal", "term", "effect", "main", "output", "round", "mer", "diff", "feature", "default", "string", "grade", "msg", "su", "ner", "final", "cache", "step", "card", "complete", "r", "res", "answer", "error", "description", "cash", "runner", "found", "reason", "ret", " Result", "package", "err", "comment", "value", "our", "section", "replace", "page", "compl", "counter", "mark", "user", "rc", "results", "content", "valid", "fail", "search", "data", "status", "end", "response", "winner", "ver", "enter", "message", "desc", "catch", "reply", "sum", "cup", "info", "coll", "report", "str", "match", "new", "val", "space", "entry", "dict", "score", "miss", "test"], "filled": ["confirmed", "marked", "locked", " resulted", "loaded", "colour", "quant", " built", "built", "sum", "bl", "complete", "flat", " selected", "black", "quad", " packed", " loaded", " played", " matched", "packed", "bg", " tested", "box", "aligned", "match", "used", "fitted", "round", "blank", "balanced", "holes", " fill", "full", "fill", "matched", "changed", " confirmed"], "bucket": ["blacket", "packet", "quet", "buckET", "bassant", "backet", "buckant", "packets", "bets", "blets", "bassets", "bleting", "quacket", "buckacket", "bucketing", "packant", "packET", "beting", "bet", "basset", "blet", "blant", "queting", "blET", "quets", "bassET"], "d": ["ded", "id", "it", "dom", "ct", "df", "pos", "h", "at", "a", "e", "b", "ad", "md", "du", "dy", "diff", "n", "di", "dd", "k", "dash", "p", "m", "r", "z", "sd", "o", "db", "yd", "t", "nd", "dn", "cd", "od", "w", "c", "x", "s", "dh", "u", "ed", "dad", "y", "dt", "l", "draw", "dx", "do", "f", "D", "ds", "bd", "dat", "fd", "td", "data", "dc", "ind", "dos", "did", "pd", "ld", "q", "dl", "dict", "dp", "daily", "g"]}}
{"code": " \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n   \n  \n  \n  \n  \n  def debug(*args):\n      print(*args, file=sys.stderr)\n  \n  fin = sys.stdin\n  T = int(fin.readline())\n  for case in range(1, T + 1):\n      RR, CC, M = map(int, fin.readline().split())\n      R, C = None, None\n      blocks = RR*CC - M\n      inverse = False\n      if RR > CC:\n          inverse = True\n          R, C = CC, RR\n      else:\n          R, C = RR, CC\n      result = None\n      if R == 1:\n          result = [('.' * blocks) + ('*' * M)]\n      elif R == 2:\n          if blocks == 1:\n              result = ['.' + ('*' * (C-1)), '*' * C]\n          elif blocks % 2 == 0 and blocks != 2:\n              cc = blocks // 2\n              result = [('.' * cc) + ('*' * (C - cc)), ('.' * cc) + ('*' * (C - cc))] \n          else:\n              result = None\n      else:\n          if blocks == 1:\n              result = ['*' * C] * R\n          elif blocks == 4:\n              result = ['..' + (C-2)*'*']*2\n              result += ['*'*C] * (R-2)\n          elif blocks == 6:\n              result = ['...' + (C-3)*'*']*2\n              result += ['*'*C] * (R-2)\n          for rows in range(3, R+1):\n              for columns in range(rows, C+1):\n                  size = rows * columns\n                  if size - blocks >= 0:\n                      if size - blocks <= columns - 2: \n                          result = []\n                          for r in range(rows):\n                              if r < rows - 1:\n                                  result.append(('.' * columns) + ('*' * (C - columns)))\n                              else:\n                                  cc = columns - (size - blocks)\n                                  result.append(('.' * cc) + ('*' * (C - cc)))\n                          for r in range(R - rows):\n                              result.append('*' * C)\n                      elif size - blocks == columns - 1 and rows >= 4:\n                          result = []\n                          for r in range(rows):\n                              if r < rows - 2:\n                                  result.append(('.' * columns) + ('*' * (C - columns)))\n                              elif r == rows - 2:\n                                  cc = columns - 1\n                                  result.append(('.' * cc) + ('*' * (C - cc)))\n                              else:\n                                  cc = 2\n                                  result.append(('.' * cc) + ('*' * (C - cc)))\n                          for r in range(R - rows):\n                              result.append('*' * C)\n                      \n  \n  \n  \n      print(\"Case #%d: \" % (case))\n      if result is None:\n          debug('impossible', blocks, RR, CC)\n          print(\"Impossible\")\n      else:\n          mines = 0\n          for r in range(RR):\n              row = ''\n              for c in range(CC):\n                  rr, cc = r, c\n                  if inverse:\n                      rr, cc = c, r\n                  if rr == 0 and cc == 0:\n                      row += 'c'\n                  else:\n                      row += result[rr][cc]\n                      if result[rr][cc] == '*':\n                          mines += 1\n              print(row)\n          if mines != M:\n              raise Exception(\"%d != %d %d x %d\" % (mines, M, RR, CC))\n              \n  \n  \n", "substitutes": {"fin": ["ini", "die", "hel", "su", "proc", "final", "init", "div", "fat", "br", "lin", "Fin", "fine", "oi", "ln", "h", "mu", "thin", "fb", "fp", "rin", "fen", "fn", "trans", "raf", "bas", "rb", "bin", "FIN", "en", "len", "inv", "fit", "conn", "start", "f", "fr", "lo", "fa", "nu", "fi", "ino", "tun", "util", "serv", "tin", "el", "ven", "inner", "os", "iter", "inn", "sn", "syn", "inf", "kin", "ran", "file", "fun", "fits", "des", "fd"], "T": ["RT", " N", "Ts", "N", "TN", "NT", "IT", "P", "I", "G", "L", " t", "CT", "CL", "K", "Y", "Z", "Time", "t", "V", "W", "H", "total", "TH", "TC", "O", "TF", "TT", "A", "U", "TR", "D", "Times", "TB", "S", "E", "time", "X", "B", "F", "Q", "type", "TS"], "case": ["end", "code", "col", " times", "ace", "d", "section", "length", "seq", "P", "p", "tc", "bc", "toc", "e", "cases", "Time", "b", "SC", "chain", "line", "race", "cor", "sec", "TC", "ice", "q", "trial", "time", "num", "ti", "shift", "X", "B", "test", " time", "times", "v"], "RR": ["ARC", "RT", "SR", "RP", "RI", "RW", "AR", "KR", "RE", "MF", "JR", "REC", "RC", "CR", "NR", "WR", "UR", "GG", "Rs", "LL", "HR", "CW", "CV", "RB", "GR", "ARR", "MR", "LR", "CCC", "Re", "RS", "RM", "RL", "ER", "CO", "TR", "RF", "VC", "RA", "DC", "Rh", "PP", "RG", "X", "RH", "RO", "DR", "RN", "RD", "IR"], "CC": ["PC", "AC", "RW", "NULL", "KC", "RC", "CR", "GG", "LC", "OC", "CDC", "CM", "CF", "LL", "H", "CW", "CE", "FC", "CT", "CL", "Z", "CV", "XX", "CI", "SC", "DD", "Co", "FF", "CCC", "CD", "UC", "RS", "CS", "TC", "rc", "CB", "CO", "RM", "HH", "TR", "EC", "VC", "DC", "CH", "GC", "MM", "CON", "PP", "ACC", "X", "WC", "MC", "BC", "CA", "NC", "CP", "CNN"], "M": ["TM", "RP", "AC", "DM", "N", "MS", "OM", "MF", "IM", "P", "RC", "I", "CM", "G", "ME", "MN", "m", "L", "CL", "MI", "K", "Y", "Z", "MON", "MW", "LM", "MR", "Co", "Block", "V", "CCC", "W", "H", "RS", "CB", "U", "RM", "O", "A", "D", "MOD", "MD", "S", "DC", "MP", "OR", "J", "MM", "B", "X", "F", "Q", "MC", "n", "CNN"], "R": ["RT", "SR", "right", "KR", "Reader", "Result", "I", "G", "Run", "Z", "Rules", "V", "W", "U", "O", "TR", "F", "Q", "RH", "RD", "IR", "RW", "Rec", "AR", "RE", "P", "CR", "Rs", "K", "MR", "Range", "Block", "H", "RM", "A", "RA", "Rh", "B", "Right", "RC", "Y", "GR", "LR", "ER", "D", "RF", "S", "OR", "J", "DR", "RN", "RP", "N", "Blocks", "JR", "NR", "L", "RB", "Size", "Co", "Re", "RS", "RL", "BR", "E", "Row", "RG", "X", "RO"], "C": ["SR", "Ca", "I", "Count", "G", "CW", "Z", "V", "W", "CD", "CS", "U", "O", "Code", "F", "Q", "Cu", "WC", "MC", "Com", "NC", "PC", "KC", "P", "CR", "LC", "CM", "CN", "FC", "K", "Ch", "H", "A", "EC", "Control", "Chain", "Mc", "GC", "CON", "B", "Collection", "Right", "BC", "CA", "Cor", "AC", "CU", "Cl", "RC", "OC", "CF", "JC", "Column", "CE", "YC", "Y", "SC", "Col", "D", "DC", "S", "CP", "Cs", "N", "L", "CT", "CL", "CV", "Sc", "Size", "Co", "CCC", "CO", "VC", "E", "Length", "HC", "X", "CI", "CNN"], "blocks": ["locks", "MS", "classes", "charges", "CW", "files", "outs", "ools", "cases", "b", "sections", "W", "points", "boxes", "frames", "num", "inches", "F", "bars", "MC", "n", "times", "steps", "features", "jobs", "TM", "PC", "works", "block", "CR", "built", "length", "Rs", "opens", "flows", "runs", "cb", "K", "packages", "all", "quarters", "pages", "Block", "types", "H", "users", "ops", "plugins", "rules", "ks", "checks", "cycles", "groups", "heads", "B", "control", "BC", "nos", "AC", "pieces", "x", "RESULTS", "s", "ions", "RC", "its", "ins", "chains", "links", "bc", "values", "models", "limit", "rh", "cells", "words", "LR", "limits", "CB", "rc", "maps", "rons", "balls", "results", "planes", "S", "days", " Blocks", "cl", "BL", "bytes", "units", "tracks", "N", " results", "qs", "Blocks", "items", " block", "Results", "L", "modules", "images", "params", "events", "blocking", "rings", "CCC", "errors", "RS", "cuts", "books", "INS", "levels", "breaks", "bs", "X", "codes", "lines", "bits", "forces"], "inverse": ["uninverted", "Inverse", "invert", "Include", "Inreverse", "insverted", "uninverse", "INverse", "outverted", "Invert", "INverted", "inverted", "INclude", "uninclude", "include", "outverse", "insreverse", "insverse", "inreverse", "uninreverse", "INreverse", "outvert", "insvert", "Inverted", "outreverse"], "result": ["success", "attr", "range", "ULT", "id", "Result", "df", "example", "source", "table", "event", "date", "func", "method", "term", "next", "correct", "output", "round", "product", "diff", "finder", "transform", "default", "color", "config", "features", "grade", "pack", "master", "final", "json", "block", "view", "use", "cache", "length", "arr", "group", "true", "complete", "res", "error", "answer", "description", "alpha", "runner", "rules", "found", "lock", "memory", "reason", "ret", " Result", "package", "account", "err", "function", "follow", "comment", "rest", "out", "rule", "RESULTS", "layer", "section", "buffer", "replace", "page", "current", "compl", "root", "draw", "dist", "summary", "results", "front", "array", "content", "type", "valid", "search", "data", "record", "status", "end", "response", "message", "catch", "desc", "sum", "Results", "cover", "number", "info", "params", "url", "coll", "element", "report", "math", "list", "include", "match", "order", "details", "also", "filter", "dict", "test"], "cc": ["rec", "con", "fc", "pc", "code", "ct", "mm", "tc", "cms", "inc", "nc", "cs", "cf", "weight", "cod", "cases", "cr", "sections", "comp", "acc", "children", "cell", "kk", "sc", "config", "PC", "anc", "block", "loc", "ec", "length", "LC", "count", "cm", "FC", "cb", "ac", "mc", "cn", "cci", "error", "bb", "sec", "rank", "lv", "cd", "custom", "ca", "control", "cp", "ci", "BC", "ck", "width", "ll", "RC", "section", "sq", "cca", "bc", "CE", "com", "cells", "rc", "cost", "ced", "lc", "cv", "DC", "cl", "content", "oc", "ce", "uc", "ucc", "dc", "scale", "co", "coll", "shape", "ff"], "rows": ["right", "airs", "classes", "rss", "_", "h", "ros", "cs", "files", "cases", "sections", "points", "rs", "boxes", "frames", "num", "keys", "vers", "bars", "xs", "ows", "n", "sc", "times", "steps", "features", "works", "length", "p", "count", "runs", "pages", "types", "users", "ops", "rank", "ries", "headers", "ks", "rules", "ays", "checks", "ss", "w", "groups", "heads", "orders", "x", "height", "s", "RC", "ins", "reports", "values", "es", "ums", "rh", "cells", "words", "rc", "results", "planes", "DC", "OWS", "rown", "end", "qs", "items", "d", "views", "images", "events", "forms", "names", "errors", "RS", "members", "tests", "breaks", "dict", "Row", "X", "lines", "index", "col"], "columns": [" columnS", "Columnsets", "rownings", "colS", "paragraphs", "indexes", "colensions", "coles", "columnsets", "Columnl", "columnS", "columnb", "structes", "colsets", "colrows", "structns", "paragraphes", "paragraphses", "scrollb", "methodows", "Columnns", "columners", "Columnses", "roundes", "indexl", "patterns", "rowns", "columnrows", "structings", "celles", "cols", "columnensions", "Columnensions", "columnings", "rounds", "indexs", "scrolls", "coll", "rounders", " columnows", "structs", "methods", "cells", "methodes", "Columnrows", "colses", "indexsets", " columnb", "columnns", "colows", "Columnings", "columnl", "columnses", "scrollows", "colings", "cellensions", "scrollS", "patternns", "patternings", "rownes", "cellrows", "paragraphows", "Columnes", "ColumnS", "columnows", "Columnows", "rowners", "patternes", "Columns", "roundings", "colers", "columnes", "methodS", "colb"], "size": ["ize", "mini", "range", "when", "ng", "code", "source", "six", "cs", "e", "clean", "sort", "area", "mode", "member", "sized", "cycle", "rate", "shift", "ows", "position", "n", "support", "sc", "default", "capacity", "form", "k", "loc", "use", "length", "name", "count", "SIZE", "unit", "z", "general", "res", "external", "une", "sec", "small", "ice", "empty", "white", "w", "cycles", "year", "grow", "ci", "inline", "ch", "function", "see", "enc", "x", "storage", "width", "s", "es", "radius", "ns", "cells", "en", "cl", "content", "sn", "izes", "square", "scale", "large", "number", "column", "Size", "core", "len", "chain", "order", "new", "shape", "esc", "time", "address", "second", "col"], "r": ["nr", "rec", "sr", "right", "ner", "ru", "x", "k", "range", "s", "d", " i", "br", "p", "u", "resh", "_", "hr", "m", " rc", "ro", "rf", "lr", "rew", "rg", "h", "z", "rd", "e", "a", "res", "cr", "rb", "rh", "b", "l", "re", "ir", "gr", "rn", "f", "rc", "i", "fr", "rw", "rank", "rs", "ar", "Row", "w", "yr", "er", "cl", "run", "pr", "ur", "n", "g", "rl", "err", "v"]}}
{"code": " \n  input = \"\"\"ejp mysljylc kd kxveddknmc re jsicpdrysi\n  rbcpc ypc rtcsra dkh wyfrepkym veddknkmkrkcd\n  de kr kd eoya kw aej tysr re ujdr lkgc jv\"\"\"\n  \n  output = \"\"\"our language is impossible to understand\n  there are twenty six factorial possibilities\n  so it is okay if you want to just give up\"\"\"\n  \n  mapping = {'a': 'y', 'o': 'e', 'z': 'q', 'q': 'z'}\n  \n  for i, c in enumerate(input):\n      mapping[c] = output[i]\n  \n  \n  fin = sys.stdin\n  T = int(fin.readline())\n  for case in range(1,T+1):\n      line = fin.readline().strip()\n  \n      result = \"\"\n      for c in line:\n          result += mapping[c]\n  \n      print \"Case #%d: %s\" % (case, result)\n  \n", "substitutes": {"input": ["context", "ini", "ip", "upload", "cmd", "script", "data", "exec", "flow", "form", "response", "init", "out", "text", "example", "parent", "source", "analysis", "table", "PUT", "request", "connection", "inc", "interface", "unit", "call", "stream", "socket", "select", "cli", "method", "csv", "element", "frame", "bin", "reader", "command", "audio", "error", "include", "format", " Input", "single", "inner", "q", "Input", "load", "temp", "path", "iter", "progress", "run", "instance", "inf", "insert", "index", "file", "config"], "output": ["context", "sequence", "put", "function", "network", "flow", "after", "exit", "response", "out", "environment", "application", "document", "config", "source", "edit", "complete", "PUT", "connection", "operation", "current", "call", "unit", "profile", "intern", "o", "fn", "option", "draw", "reference", "image", "en", "version", "answer", "Output", "summary", "main", "object", "target", "process", "write", "model", "update", "export", "run", "control", "index", "online", "file", "position", "address", " Output", "console", "production"], "mapping": ["dapper", "faming", "caming", "bapper", "Mapped", "Mapper", " mording", "capping", "fwriting", "maming", "mwriting", "dapping", "bapped", "fappings", "cappings", "bapping", "mording", "mashing", "Maming", "dappings", "Mording", "Mashing", "cashing", "Mapping", "Mwriting", "mapped", "mapper", "mappings", "Mappings", "fapping", "fording", "fashing", " mwriting", " mappings", "dapped", "bappings"], "i": ["ini", "ip", "ie", "qi", "ind", "x", "k", "ai", "code", "gi", "d", "I", "bi", "io", "u", "p", "mi", "m", "r", "info", "z", "ch", "e", "l", "int", "t", "b", "eni", "start", "f", "im", "C", "iu", "xi", "uri", "pi", "fi", "q", "ii", "j", "index", "si", "ci", "n", "li", "v", "di"], "c": ["uc", "cu", "dc", "xc", "anc", "x", "con", "k", "fc", "unc", "code", "s", "col", "ct", "d", "cc", "ace", "cache", "ec", "p", "u", "count", "tc", "m", "cm", "call", "h", "r", "z", "nc", "ch", "cb", "o", "cs", "e", "cf", "cn", "mc", "ac", "a", "cin", "cr", "l", "t", "b", "ic", "cy", "chain", "f", "C", "g", "q", "lc", "cd", "w", "j", "type", "cp", "ci", "n", "sc", "ce", "v"], "fin": ["ini", "die", "fail", "function", "rec", "data", "browser", "conf", "end", "fun", "final", "init", "done", "pen", "lib", "pos", "div", "br", "lin", "Fin", "fine", "ln", "ro", "rf", "info", "res", "send", "finished", "fen", "fn", "stack", "close", "raf", "non", "cook", "bin", "FIN", "report", "len", "inv", "en", "skip", "conn", "f", "start", "net", "fr", "vec", "fa", "results", "nu", "runner", "fi", "tun", "details", "inner", "serv", "win", "fd", "fu", "run", "sn", "log", "kin", "file", "n", "dir", "err", "fat"], "T": ["N", "Total", " limit", "TN", "Case", "NT", "n", " C", "P", "I", "length", " L", "connection", "L", " t", "Y", "Z", " length", "Time", "t", " sequence", "V", "W", "H", "R", "C", "O", " I", " trial", "TT", "A", " total", "U", "D", " translation", "S", "E", "trial", "time", "M", "B", "X", "F", "test", "Q", " time", "TS", "TI", " F"], "case": ["uc", "sequence", "slice", "Case", "x", "lic", "loop", "id", "code", "catch", "ct", "bug", "config", "d", "section", "length", "ace", "name", "count", "chance", "cm", "CE", "edge", "point", "exc", "ase", "cases", "int", "CI", "core", "fe", "nce", "C", "match", "ced", "ice", "cycle", "ride", "lc", "trial", "time", "instance", "course", "type", "test", "choice", "ci", "position", "cas", "string", "ce", "sea", "se"], "line": ["ine", "data", "comment", "status", "block", "text", "code", "section", "raw", "lin", "source", "page", "name", "group", "number", "ln", "column", "csv", "no", "call", "point", "e", "LINE", "frame", "cr", "len", "chain", "str", "user", "error", "start", "row", "Line", "on", "lo", " Line", "match", "object", "ole", "pe", "cle", "lc", "obj", "cell", "lined", "cl", "run", "time", "log", "lines", "test", "file", "n", "string", "li", "inline", "err", "col"], "result": ["sequence", "su", "data", "status", "comment", "expected", "value", "response", "success", "json", "final", "text", "range", "done", "message", "Result", "code", "rule", "our", "section", "source", "name", "table", "cup", "current", "compl", "r", "res", "change", "report", "answer", "error", "rc", "f", "row", "summary", "match", "description", "trace", "results", "runner", "diff", "score", "progress", "feature", "cur", "test", "reason", "ret", "default", "string", "err", "grade"]}}
{"code": " \n  def read_ints():\n      return map(int, stdin.readline().rstrip().split(' '))\n  \n  def print_lawn(lawn):\n      for row in lawn:\n          print row\n          \n  def is_higher(a, i, j, N, M):\n      s = a[i][j]\n      v, h = False, False\n      for ii in xrange(N):\n          if a[ii][j] > s:\n              v = True\n              break\n      for jj in xrange(M):\n          if a[i][jj] > s:\n              h = True\n              break\n      return v and h\n      \n  def check(a, N, M):\n      if N == 1 or M == 1:\n          return True\n      else:\n          for i in xrange(N):\n              for j in xrange(M):\n                  h = is_higher(a, i, j, N, M)\n                  if h:\n                      return False\n          return True\n      \n  def main():\n      T = int(stdin.readline())\n      for Ti in xrange(T):\n          N, M = read_ints()\n          a = []\n          for i in xrange(N):\n              a.append(read_ints())\n          answer = 'YES' if check(a, N, M) else 'NO'\n          print 'Case #{}: {}'.format(Ti + 1, answer)\n          \n  main()\n", "substitutes": {"lawn": ["Lwn", "lown", " loud", "loud", "rlown", "Lork", "rlwn", "frow", "flawn", "fork", "Lawn", "lwn", "Lrow", "lrow", "Loud", "rlawn", "Lown", "flwn", "flork", " lrow", "lork", "foud", "flown", "rlork", " lork", "fawn"], "row": ["rown", "ow", "board", "flow", "ner", "you", "loop", "x", "block", "k", "bug", "rows", "uu", "ack", "page", "case", "rew", "ward", "r", "root", "how", "all", "null", "user", "line", "error", "R", "arrow", "rank", "order", "A", "false", "arch", "round", "post", "val", "entry", "array", "oy", "Row", "cell", "nn", "w", "Array", "feed", "X", "insert", "n", "aw", "All", "col"], "a": ["ana", "qa", "this", "aa", "work", "at", "e", "area", "b", "ae", "ad", "ans", "aaa", "n", "aw", "la", "am", "ai", "ace", "p", "m", "auto", "z", "o", "ac", "sa", "da", "ao", "va", "t", "asa", "ama", "Answer", "mA", "pa", "A", "alpha", "ga", "ta", "w", "ca", "oa", "abs", "ia", "x", "c", "ab", "api", "aj", "u", "wa", "y", "l", "f", "ar", "array", "app", "ata", "access", "ea", "data", "ma", "ha", "an", "d", "audio", "na", "ada", "ba", "au", "g"], "i": ["ei", "ini", "ip", "iv", "iw", "ie", "qi", "ind", "x", "c", "ni", "k", "ion", "phi", "ai", "id", "it", "ji", "d", "I", "bi", "io", "p", "u", "oi", "m", "ir", "r", "z", "o", "e", "y", "iii", "l", "b", "int", "ri", "f", "im", "ij", "iu", "xi", "g", "pi", "jp", "q", "vi", "ori", "w", "ik", "ui", "ib", "ti", "index", "si", "ci", "n", "ia", "li"], "j": ["jl", "uj", "iv", "ie", "ja", "ind", "x", "jit", "c", "k", "jo", "ion", "ia", "java", "ji", "jet", "jon", "d", "I", "bj", "aj", "p", "u", "m", "z", "jc", "o", "e", "y", "l", "t", "b", "em", "f", "jun", "ijk", "ij", "iu", "xi", "jp", "pi", "g", "q", "vi", "js", "ju", "J", "w", "oj", "ib", "si", "n", "je", "li"], "N": ["Ni", "NA", "Sn", "Mon", "GN", "NI", "NT", "NB", "ni", "Ne", "ON", "We", "P", "I", "Node", "NR", "Mo", "Nat", "Name", "NE", "NO", "II", "G", "CN", "MN", "m", "L", "NS", "K", "Y", "Z", "Num", "Size", "V", "W", "H", "R", "Na", "C", "OS", "O", "U", " n", "A", "In", "Len", "Wh", "Net", "D", "S", "E", "J", "Me", "Ns", "X", "B", "F", "Q", "NN", "n", "NG", "RN", "No", "NC", "NM", "AN"], "M": ["GM", "EM", "Ma", "TM", "mn", "DM", "MS", "Mon", "Month", "OM", "MF", "IM", "P", "Mo", "I", "MB", "CM", "G", "ME", "MN", "m", "L", "JM", "FM", "AM", "MI", "Man", "K", "Y", "Z", "o", "VM", "MON", "LM", "MR", "SM", "V", "H", "W", "R", "MT", "C", "U", "O", "RM", "A", "Mode", "D", "MD", "Mi", "S", "E", "MA", "MX", "J", "Me", "MM", "MH", "B", "X", "F", "Q", "Ms", "MC", "n", "NM", "MO"], "s": ["su", "c", "k", "ls", "an", "d", "south", "ins", "sh", "u", "p", "sq", "m", "sym", "sp", "z", "o", "e", "y", "self", "es", "sv", "l", "ns", "t", "b", "vs", "f", "ts", "us", "sb", "small", "spec", "ks", "q", "iss", "space", "js", "S", "sw", "ws", "ss", "os", "sl", "w", "sc", "sn", "hes", "ps", "lines", "min", "si", "hs", "n", "sk", "g", "se"], "v": ["iv", "vm", "vol", "end", "c", "x", "value", "k", "ve", "ver", "qv", "tv", "ev", "ov", "rev", "env", "sav", "vv", "p", "u", "sh", "cover", "m", "fl", "ch", "z", "ul", "change", "o", "uv", "e", "y", "sv", "va", "l", "b", "t", "inv", "V", "vs", "version", "f", "vd", "q", "vi", "lv", "val", "vo", "cv", "w", "vy", "vert", "hw", "vp", "vt", "volt", "av", "n", "vg", "g", "nv"], "h": ["beh", "he", "han", "uh", "hi", "http", "end", "x", "c", "hn", "k", "ha", "hp", "d", "kh", "vv", "p", "u", "sh", "ph", "th", "hang", "hr", "m", "r", "z", "ah", "hl", "ch", "o", "ht", "e", "y", "work", "how", "l", "t", "b", "rh", "why", "auth", "gh", "H", "error", "f", "hm", "hd", "eh", "q", "hash", "oh", "her", "hh", "w", "hy", "hhh", "cl", "hw", "hs", "enh", "ih", "n", "help", "g", "bh"], "ii": ["ei", "jl", "ini", "iw", "iv", "ie", "qi", "ind", "mini", "je", "ni", "\u00ee", "ai", "yi", "ji", "gi", "bi", "II", "mi", "agi", "info", "z", "ix", "iii", "aii", "iy", "ij", "iu", "iq", "xi", "ice", "fi", "sci", "pi", "jp", "vi", "q", "iov", "img", "nn", "ib", "ui", "inf", "si", "ci", "ih", "ien", "ia", "li", "ian", "di"], "jj": ["jl", "JJ", "iw", "uj", "ja", "iang", "qi", "x", "hn", "c", "jo", "ia", "ai", "ji", "gi", "mm", "bj", "aj", "p", "uli", "u", "gn", "gm", "jam", "ix", "z", "y", "qq", "iii", "b", "gh", "kj", "ijk", "f", "gu", "ij", "iq", "iu", "xi", "jp", "iji", "vi", "q", "jan", "nn", "J", "dj", "inn", "ci", "jah", "ih", "jc"], "T": ["TM", "Total", "TN", "NT", "P", "I", "TW", "G", "number", "L", "K", "Y", "Z", "Num", "Time", "t", "Tu", "V", "W", "R", "H", "MT", "C", "TC", "U", "O", "TT", "A", "Token", "TA", "D", "WT", "TB", "S", "E", "Tw", "J", "B", "X", "F", "Q", "Type", "TS", "Test"], "Ti": ["ei", "Ni", "Iter", "Pi", "qi", "ni", "phi", "ai", "Tip", "Yo", "ji", "Lo", "chi", "DI", "I", "Li", "zi", "Vo", "Si", "agi", "hei", "Lu", "Y", "o", "Tai", "Gi", " ti", "Num", "t", "Tu", "Tok", "Wi", "Na", "U", "O", "iti", "xi", "ice", "pi", "Ta", "vi", "Xi", "Ton", "Tx", "ta", "J", "Vi", "asi", "Ru", "ti", "si", "ci", "Po", "TI", "li", "di"], "answer": ["su", "data", "exit", "response", "text", "issue", "average", " question", " answering", "ace", "ee", "result", "reply", "name", " Answer", "complete", "number", " answered", "inter", " explanation", "offset", "margin", "random", "ell", "term", "option", "ae", "next", "int", "fix", "Answer", "question", "error", "practice", "now", "format", "order", "swers", "A", "ice", "output", "new", "evidence", "say", "array", "update", "blank", "num", "test", " answers", "address", "answered", "string", "err", "anda", "grade"]}}
{"code": " \n  def program():\n  \tT = int(stdin.readline())\n  \tfor Ti in xrange(T):\n  \t\tA, B =  map(int, stdin.readline().rstrip().split(' '))\n  \t\t\n  \t\tss = set()\n  \t\tfor n in xrange(A, B + 1):\n  \t\t\tsn = str(n)\n  \t\t\tfor i in xrange(1, len(sn)):\n  \t\t\t\tsm = sn[i:] + sn[:i]\n  \t\t\t\tif sm[0] != '0':\n  \t\t\t\t\tm = int(sm)\n  \t\t\t\t\tif m > n and m <= B:\n  \t\t\t\t\t\tss.add((n, m))\n  \t\t\n  \t\tprint 'Case #%d: %d' % (Ti + 1, len(ss))\t\n  \t\n  if __name__ == '__main__':\n  \tprogram()\n", "substitutes": {"T": ["Ts", "N", "Total", "TN", "IT", "P", "I", "TW", "p", "Si", "G", "L", "K", "Y", "Z", "Time", "t", "Tu", "V", "H", "R", "W", "C", "TC", "O", "TT", "Len", "TA", "Temp", "D", "Ta", "HI", "TB", "S", "E", "Tab", "Port", "M", "X", "F", "Type", "TS", "TI", "Test"], "Ti": ["Ni", "Iter", "Pi", "hi", "tu", "N", "ind", "qi", "ni", "phi", "ai", "No", "Lo", "chi", "DI", "P", "I", "io", "d", "Lt", "u", "zi", "Si", "L", "Y", "o", "a", "y", "Gi", " ti", "Num", "t", "Sa", "Tu", "f", "Wi", "Hi", "C", "Na", "O", "lo", "Ind", "Len", "xi", "nu", "pi", "Ta", "Mi", "Xi", "ta", "Vi", "ti", "M", "F", "si", "ci", "Po", "TI", "li", "di"], "A": ["Ma", "Pi", "Ca", "FA", "N", "ai", "At", "Alpha", "P", "I", "Wa", "Si", "II", "G", "L", "Pa", "Am", "AM", "Ha", "Ar", "Y", "a", "K", "API", "Ang", "Sa", "Ab", "AU", "EA", "BA", "H", "AA", "Na", "C", "U", "O", "Len", "TA", "D", "IA", "S", "E", "AP", "PA", "LA", "Offset", "M", "X", "CA", "SA", "Ak"], "B": ["IB", "BD", "N", "BF", "BI", "NB", "GB", "BE", "WB", " b", "P", "I", "Limit", "End", "beta", "MB", "Bal", "II", "G", "L", "K", "Y", "DB", "Z", "Two", "BB", "LB", "AB", "b", "Ab", "Bs", "V", "BA", "W", "R", "CB", "H", "C", "Bi", "U", "O", "BR", "Number", "OB", "D", "TB", "E", "S", "Bar", "M", "X", "F", "Q", "Base", "BC", "BL", "BS"], "ss": ["search", "resses", "ssl", "ips", "les", "eps", "services", "s", "ls", "WS", "pos", "mm", "ins", "sh", "p", "rss", "ssh", "sp", "cs", "stats", "ess", "es", "sv", "cases", "ns", "sts", "names", "uss", "vs", "ses", "ts", "styles", "SS", "spec", "mys", "fs", "rs", "ks", "ds", "sf", "iss", "fts", "css", "S", "nn", "ws", "hess", "bs", "sl", "sw", "xx", "ps", "lines", "si", "xs", "sk", "est"], "n": ["Ni", "mn", "ni", "pos", "I", "nb", "ln", "sym", "nc", "a", "e", "b", "Na", "C", "num", "Ns", "inf", "nan", "k", "P", "Not", "p", "name", "r", "z", "o", "cn", "t", "ne", "Bi", "net", "nm", "w", "ii", " N", "Sn", "x", "c", "s", "Nat", "u", "no", "y", "l", "ns", "f", "ny", "nn", "max", "j", "si", "v", "span", "N", "No", "an", "d", "number", "fn", " ni", "nt", "Num", "na", "pn", "nu", "Mi", "g"], "sn": ["nr", "span", "su", "Sn", "news", "N", "ni", "loc", "s", "ls", "chi", "pos", "sh", "name", "p", "source", "gn", "ln", "kn", "nc", "sp", "sd", "z", "st", "SN", "size", "o", "cn", "sam", "y", "fn", "sa", "sv", "nt", "ess", "ns", "int", "na", "dn", "sb", "wn", "nu", "ny", "sf", "nn", "sw", "ws", "score", "sl", "inn", "syn", "si", "xs", "sc", "sk", "v"], "i": ["ini", "Ni", "ip", "span", "ie", "hi", "ind", "qi", "c", "x", "ni", "k", "phi", "ai", "id", "s", "ji", "part", "d", "I", "bi", "p", "u", "nb", "no", "r", "z", "sp", "h", "o", "a", "e", "y", "key", " ni", "l", "int", "b", " iP", "start", "f", " I", "iu", "g", "pi", " j", "w", "ii", "j", "inn", "ti", "index", "si", " ii", "li", "v"], "sm": ["sy", "span", "mn", "Sn", "su", "sr", "ni", "s", "mm", "d", "sh", "name", "gn", "sym", "cm", "st", "sp", "sd", "ln", "kn", "SN", "size", "mph", "sam", "y", "cn", "ms", "sv", "ns", "em", "md", "na", "SM", "im", "sim", "sb", "tm", "ny", "sf", "ym", "Sm", "nm", "nn", "sw", "sl", "ii", "syn", "M", "si", "xs", "sk", "ism"], "m": ["dm", "fm", "mn", "mini", "ma", "span", "c", "x", "bm", "s", "me", "an", "d", "pos", "rm", "mm", "mp", "mx", "p", "u", "mi", "mmm", "gm", "cm", "sym", "wm", "r", "z", " M", "o", "a", "e", "y", "ms", "pm", "mc", "l", "b", "em", "md", "om", "int", "mo", "f", "hm", "im", "sim", "mos", "mr", "tm", "ym", "nm", "mt", " mm", "j", "M", "arm", "ism", "v", "mu"]}}
{"code": " \n  def read_str(): return stdin.readline().rstrip('\n')\n  def read_int(): return int(stdin.readline())\n  def read_ints(): return map(int, stdin.readline().split())\n  \n  def read_cards():\n      cards = []\n      for i in range(4):\n          cards.append(read_ints())\n      return cards\n  \n  def main():\n      cases = read_int()\n      for case in range(1, cases + 1):\n          row = read_int() - 1\n          cards = read_cards()\n          candidates1 = set(cards[row])\n          \n          row = read_int() - 1\n          cards = read_cards()\n          candidates2 = set(cards[row])\n          \n          candidates = candidates1.intersection(candidates2)\n          if len(candidates) == 1:\n              ans = list(candidates)[0]\n          elif len(candidates) == 0:\n              ans = 'Volunteer cheated!'\n          else:\n              ans = 'Bad magician!'\n          \n          print('Case #{}: {}'.format(case, ans))\n          \n  main()\n", "substitutes": {"cards": ["center", "charges", "files", "cf", "cs", "Card", "ards", "comments", "games", "styles", "boxes", "frames", "cell", "cas", "default", "steps", "config", "features", "times", " games", "letters", "fields", "les", "rows", "months", "card", "hands", "all", "args", "ickets", "attacks", "quarters", "types", "grades", "acs", "rules", "ays", "checks", "groups", "ids", " Cards", "cats", "pieces", "c", "guards", "posts", "s", "settings", "chains", "cus", "lists", "cells", "words", "limits", "kids", "breakers", "cross", "balls", "planes", "caps", "lc", "css", "array", " card", "blocks", "changes", "packs", "phones", "sequence", "yards", "carry", "parents", "items", "liners", "clips", "cons", "rooms", "events", "forms", "bags", "rings", "list", "reads", "cuts", "books", "members", "tests", "breaks", "lights", "shape", "stars", "holes", "codes", "lines", "index"], "i": ["ip", "ind", "c", "item", " ic", "x", "id", "it", "d", "I", "ace", "pos", "p", "u", "char", "bc", "ic", "counter", "ix", "ce", "e", "y", "int", "chain", "line", "f", " I", "ice", "character", "rand", "j", "num", "index", " ii", "n", "li", "col"], "cases": ["fields", "Case", "ls", "rows", "months", "chains", "ches", "classes", "steps", "settings", "sets", "tips", "runs", "values", "ports", "rooms", "amples", "cs", "ces", "events", "forms", "cus", "cells", "comments", "sections", "types", "errors", "points", "ends", "planes", "details", "boxes", "tests", "shows", "breaks", "checks", "days", "shape", "blocks", "ups", "groups", "batch", "packs", "lines", "xs", "test", "cas", "times", "ases", "features", "cats"], "case": ["slice", "ind", "end", "c", " c", "Case", "ape", "id", "loc", "code", "face", "use", "bug", "config", "pos", "ace", "section", "length", "rows", "scale", "page", "name", "seq", "char", "ce", "ase", "division", "core", "mode", "base", "line", "start", "nce", "race", "match", "ced", "ice", "ride", " index", "diff", "trial", "shape", "cell", "ca", "time", "instance", "X", "type", "index", "test", "cas", "address", "position", "ance", "sc", "li", "sea", "col"], "row": ["uc", "ow", "slice", "x", "loop", "block", "range", "id", "loc", "where", "month", "bug", "pos", "head", " rows", "rows", "length", "group", "step", "section", "scale", "uu", "raw", "column", "ro", "r", "ward", "ros", "co", "rug", "key", "coll", "mode", "line", "error", "roll", "port", "box", "role", "order", "match", "rank", "rc", "race", "ice", "round", "model", "post", "ride", "entry", "hop", "win", "shape", "cell", "week", "Row", "rot", "feed", "year", "batch", "instance", "index", "test", "ry", "sc", "cube", "col", "seed"], "candidates1": ["Candidates1", "candodes0", "candices2", "candidate1", "Candidate2", "candidate0", "candores1", "candodesone", "candidate3", "candidateone", "candores2", "candidate2", "Candidates3", "Candidateone", "Candidates0", "Candidatesone", "candores0", "candotes1", "Candidate0", "candodes2", "Candidate1", "candices3", "Candidate3", "candices1", "Candidates2", "candodes1", "candotes0", "candotes3", "candidatesone", "candidates3", "candotes2", "candices0", "candoresone", "candidates0"], "candidates2": ["Candidates1", "candodes0", "candidate1", "Candidate2", "candates0", "candidate0", "candriesTwo", "candates2", "candles2", "candries2", "candidate02", "candidate2", "candles1", "Candidates0", "candates1", "Candidate0", "candries1", "candodes2", "Candidate1", "candles0", "candodes02", "Candidates2", "candodes1", "candidates02", "Candidates02", "candlesTwo", "candidateTwo", "candates02", "Candidate02", "CandidateTwo", "candidatesTwo", "CandidatesTwo", "candidates0", "candries0"], "candidates": ["mandidates", "validles", "valididates", "Candates", "candales", "variances", "charidate", "variidates", "indates", "candances", "Candidates", "matates", "charores", "variations", "mandidate", "indations", "charales", "mandores", "candles", "matidates", "charances", "mandencies", "candores", "valididate", "charles", "Candencies", "Candles", "candidate", "validales", "charencies", "Candales", "candates", "matidate", "Candidate", "Candores", "charates", "charations", "charidates", "candencies", "indances", "matles", "candations", "indidates", "variates"], "ans": ["abilities", "amps", "anus", " sins", "ana", "aces", "anc", "leans", "les", "aniel", "lan", "eps", "ai", "ano", "ls", "an", " means", "aos", " Ans", "ins", "ania", "anch", "ang", "ens", "cons", "co", "ane", "nan", "ars", "ams", "anas", "cus", "ians", "ain", "ns", "ads", " ang", "ean", "na", "ase", "ations", "cross", "ani", "ANS", "ras", "aus", "san", "anne", "nas", "ares", "lang", " nas", "os", "ann", "ons", "ats", "atan", "aning", "plan", "kin", "ants", "can", "aned", "ents", "sk", "ases", "AN"]}}
{"code": " \n  \n  def read_str(): return stdin.readline().rstrip('\n')\n  def read_int(): return int(stdin.readline())\n  def read_ints(): return map(int, stdin.readline().split())\n  def read_floats(): return map(float, stdin.readline().split())\n  \n      \n  def war(N, K):\n      points = 0\n      j = 0\n      for i in range(len(N)):\n          while j < len(K) and K[j] < N[i]:\n              j += 1\n          if j == len(K):\n              points += 1\n          else:\n              j += 1\n      return points\n  \n  \n  def deceitful_war(N, K):\n      return len(N) - war(K, N)\n      \n  \n  def solve_case():\n      read_int()\n      N = sorted(read_floats())\n      K = sorted(read_floats())\n      \n      return '{} {}'.format(deceitful_war(N, K), war(N, K))\n  \n      \n  def main():\n      cases = read_int()\n      for case in range(1, cases + 1):\n          print('Case #{}: {}'.format(case, solve_case()))\n  \n          \n  main()\n", "substitutes": {"N": ["Ni", "NL", "Core", "GN", "KR", "We", "I", "Mo", "G", "MN", "Z", "V", "Key", "W", "R", "Na", "OS", "C", "O", "U", "Network", "Ns", "F", "Q", "n", "NG", "NC", "NT", "k", "KN", "Ne", "Power", "P", "NO", "North", "Name", "CN", "H", "Local", "A", "ND", "Part", "B", "AN", "NP", "NW", "NI", "Node", "Nat", "NE", "NS", "Y", "NH", "Wh", "D", "S", "DC", "J", "M", "NN", "RN", "NA", "NF", "NB", "T", "L", "SN", "Num", "Size", "Line", "Net", "Len", "E", "X", " n", "No", "CNN"], "K": ["KE", "KR", "Sk", "VK", "Kin", "I", "KS", "G", "Z", "KB", "V", "Key", "W", "R", "OS", "C", "O", "U", "CH", "F", "Q", "ID", "MC", "NG", "Ak", "k", "KN", "IK", " NK", "KI", "Power", "KC", "P", "Point", "Ku", " k", "KK", "NK", "KA", "Ch", "H", "HK", "A", "Disk", "EC", "B", "AN", "UK", "AC", "KO", "AK", "Ke", "NE", "Y", "Kent", "D", "S", "DC", "J", "M", "CP", "SH", "IP", "T", "SK", "IN", "L", "CL", "PK", "XX", "DK", "Mask", "MK", "E", "OK", "Ka", "X", "CNN"], "points": ["dates", "pos", "cs", "sections", "pi", "parts", "path", "adj", "n", "steps", "times", "features", "jobs", "works", "eps", "k", "P", "Point", "offs", "months", "length", "p", "z", "all", "args", "pages", "pt", "ops", "ends", "ks", "obj", "cycles", "groups", "ons", "pieces", "Points", "x", "c", "posts", "s", "ins", "links", "tips", "values", "y", "ns", "cells", "faces", "results", "false", "ds", "js", "max", "blocks", "span", "items", "d", "powers", "vals", "params", "point", " Points", "breaks", "poly", "pointers", "ps", "lines", "index"], "j": ["ie", "ni", "jo", " inj", "part", "jet", "pos", "bj", "pointer", "e", "b", "jj", "start", "ot", "jp", "pi", " Ji", " index", "adj", "n", "jobs", "uj", " si", "ja", "jit", "k", "ji", "length", "step", "p", " dj", "m", "py", "r", "z", "o", "key", "t", "pt", " Dj", "ij", "obj", " maj", "ii", "oj", " l", "ch", "jl", "qi", "job", "x", "bi", "aj", "y", "l", "conn", "f", "js", "J", "si", " ii", "v", "span", "ind", "d", "point", "offset", " p", "nt", "jump", "xi", "ori", "dj", "ps", "index", " n", "jc", "li"], "i": ["ie", "qi", "ind", "x", "c", "ni", "k", "jo", "id", "ai", "it", "ji", "d", "I", "ki", "bi", "aj", "p", "u", "m", "z", "ix", "o", "a", "point", "y", "key", "e", "l", "int", "b", "ri", "start", "f", " I", "ij", "iu", "xi", "pi", "ori", "J", "ii", "oj", "ik", "index", "si", "ci", "n", "li", "v"], "cases": ["abilities", " tests", "works", "Case", "places", "items", "ls", "closure", "its", "settings", "chains", "classes", "opens", "sets", "charges", "tips", "runs", "powers", "values", "files", "marks", "cs", "events", "ices", "cells", "pages", "sections", "types", "limits", "ends", "planes", "details", "tests", "shows", "Times", "checks", "days", "aps", "blocks", "ups", "cycles", "groups", "changes", "packs", "then", "cas", "xs", "test", "forces", "times", "ases", "features"], "case": ["end", "condition", "x", "Case", "c", "id", "loc", "code", "catch", "example", "section", "length", "ace", "result", "name", "p", "count", "switch", "chance", "de", "change", "a", "size", "e", "key", "ase", " CASE", "division", "charge", "patch", "base", "C", "match", "ice", "character", "set", "trial", "cell", "pose", "time", "instance", "type", "index", "test", "cas", "address", "position", "default", "ce", "cube", "sea"]}}
{"code": " \n  def read_str(): return stdin.readline().rstrip('\n')\n  def read_int(): return int(stdin.readline())\n  def read_ints(): return map(int, stdin.readline().split())\n  def read_floats(): return map(float, stdin.readline().split())\n  \n  \n  def solve_case():\n      C, F, X = read_floats()\n      rate = 2\n      current = 0\n      best = X / rate\n      \n      while True:\n          current += C / rate\n          rate += F\n          next = current + X / rate\n          if next < best:\n              best = next\n          else:\n              break\n      \n      return best\n  \n      \n  def main():\n      cases = read_int()\n      for case in range(1, cases + 1):\n          print('Case #{}: {:.7f}'.format(case, solve_case()))\n  \n          \n  main()\n", "substitutes": {"C": ["N", "c", "Case", "code", "CU", "P", "T", "I", "CR", "CM", "CF", "G", "Cy", "L", "CE", "CT", "FC", "CL", "Current", "K", "Y", "size", "CV", "Z", "W", "R", "U", "O", "A", "CO", "CC", "D", "COR", "S", "E", "DC", "CH", "M", "B", "Q", "Cu", "MC", "CA", "NC", "CNN"], "F": ["PF", "FA", "N", "BF", "IF", "P", "T", "I", "CR", "FT", "FB", "CF", "FE", "G", "FO", "L", "FC", "FM", "K", "Y", "Z", "V", "FF", "W", "R", "f", "H", "U", "O", "AF", "A", "FI", "Fi", "GF", "D", "FR", "CC", "E", "S", "J", "M", "B", "Q", "FP", "FD", "CNN"], "X": ["Rate", "FX", "AC", "N", "PH", "x", "Case", "FORM", "IF", "P", "T", "I", "CR", "Work", "CF", "G", "Event", "UX", "L", "FC", "XL", "CE", "CL", "Current", "K", "Y", "Z", "XP", "CV", "XX", "V", "FF", "W", "H", "R", "UC", "XM", "U", "O", "ICE", "FW", "XXX", "CC", "D", "ZX", "TX", "E", "S", "DC", "J", "CH", "XY", "M", "B", "Q", "PE", "Weight", "DX", "FE", "NC"], "rate": ["prime", "stage", " score", "rates", "code", "date", " speed", "speed", "size", "weight", "cr", "mode", "correct", "acc", "cycle", "factor", "update", " Rate", "pair", "feed", "tie", "rat", "grade", "est", "capacity", "master", "sync", "use", "length", "recent", "count", "complete", "unit", "r", "rating", "key", "base", "rank", "write", "seed", "Rate", "play", " rates", "fee", "value", "rule", "cause", "delay", "ave", "counter", "root", "change", "phrase", "frequency", "cost", "rand", "max", "age", "progress", "currency", "sample", "ate", "data", "level", "scale", "number", "erate", "co", "exp", "charge", "core", "rated", "depth", "cum", "gest", "race", "match", "order", "give", "ride", "score", "time", "test"], "current": ["latest", "sequence", "data", "c", "master", "success", "x", "code", "average", "parent", "example", "length", "result", "reported", "count", "step", "recent", "complete", "counter", "r", "Current", "change", "speed", "past", "first", "critical", "today", "correct", "depth", "performance", "future", "active", "fast", "now", "race", "existing", "currently", "new", "better", "cycle", "last", "update", "temp", "time", "progress", "cur", "currency", "credit", "test", "choice", "sample", "second", "URRENT", "default"], "best": ["largest", "leader", "right", "success", "it", "one", "aster", "this", "live", "highest", " fastest", "correct", "start", "peak", "better", "good", "none", "latest", "default", " highest", "grade", "est", "bottom", "short", "master", "final", "perfect", "recent", "p", "all", " winner", "fe", "fast", " worst", "rank", "any", "top", " Best", "higher", "x", "value", "std", "average", "mate", " newest", "fork", "Success", "most", "change", "self", "first", "cost", "ale", "profit", "rand", "poor", "Best", "max", "progress", "instance", "end", "winner", "growth", "again", "result", "scale", "back", " largest", "null", "list", "new", "stop", "last", "score", "worst", "test"], "next": ["sequence", "pred", "init", "end", "rand", "more", " latest", "success", "final", "default", "x", "vious", "done", "code", "c", "average", "range", "parent", "again", "step", "recent", "p", "loop", "prev", "running", "this", "r", "change", "past", "first", "est", "correct", " last", "future", "line", "start", "error", "now", "sec", "cost", "new", "better", "cycle", " Next", "last", "write", "max", "trial", " first", "open", "ride", "later", " previous", "progress", "gen", "worst", "Next", "then", "test", "second", "latest", "close"], "cases": [" folds", "capacity", "loop", "Case", "rates", "places", "items", "ls", "example", "rows", "settings", "chains", "classes", "times", "its", "charges", "tips", "runs", "values", "cs", "files", "events", "forms", "cells", "sections", "errors", "points", "ends", "children", "details", "tests", "Times", "days", "cycles", "blocks", "groups", "instance", "changes", "lines", "test", "cas", "forces", "steps", "ases", "features"], "case": ["uc", "client", "end", "c", "Case", "x", " c", "loop", "id", "loc", "code", "use", "catch", "example", "ace", "section", "length", "result", " i", "p", "name", "count", "chance", "change", "a", "e", "size", "ase", "int", "charge", "rice", "base", "line", "force", "f", " suite", "i", "race", "match", "ice", "character", "cycle", "ride", "lc", "set", "trial", "pair", "num", "instance", "type", "test", "position", "address", "default", "config", "cube", "CI"]}}
{"code": " \n  def won(x, o, t):\n      if x == 4 or (x == 3 and t == 1):\n          return 1\n      elif o == 4 or (o == 3 and t == 1):\n          return 2\n  \n  def check(board, BOARD_SIZE, RESULTS):\n      d = 0\n      for i in xrange(BOARD_SIZE):\n          x = board[i].count('X')\n          o = board[i].count('O')\n          t = board[i].count('T')\n          d += board[i].count('.')\n          w = won(x, o, t)\n          if w:\n              return w\n      for i in xrange(BOARD_SIZE):\n          vertical = [ board[j][i] for j in xrange(BOARD_SIZE) ]\n          x = vertical.count('X')\n          o = vertical.count('O')\n          t = vertical.count('T')\n          w = won(x, o, t)\n          if w:\n              return w\n      x, o, t = 0, 0, 0\n      for i in xrange(BOARD_SIZE):\n          if board[i][i] == 'X':\n              x += 1\n          elif board[i][i] == 'O':\n              o += 1\n          elif board[i][i] == 'T':\n              t += 1\n      w = won(x, o, t)\n      if w:\n          return w    \n      x, o, t = 0, 0, 0\n      for i in xrange(BOARD_SIZE):\n          if board[i][BOARD_SIZE - i - 1] == 'X':\n              x += 1\n          elif board[i][BOARD_SIZE - i - 1] == 'O':\n              o += 1\n          elif board[i][BOARD_SIZE - i - 1] == 'T':\n              t += 1\n      w = won(x, o, t)\n      if w:\n          return w\n      if d == 0:\n          return 3\n      else:\n          return 4\n      \n  def main():\n      BOARD_SIZE = 4\n      RESULTS = 'X won', 'O won', 'Draw', 'Game has not completed'\n  \n      T = int(stdin.readline())\n      for Ti in xrange(T):\n          board = []\n          for i in xrange(BOARD_SIZE):\n              board.append(list(stdin.readline().rstrip()))\n          print 'Case #{}: {}'.format(Ti + 1, RESULTS[check(board, BOARD_SIZE, RESULTS) - 1])    \n          stdin.readline()\n          \n  main()\n", "substitutes": {"x": ["right", "plus", "id", "one", "ct", "_", "event", "h", "ix", "work", "my", "a", "e", "int", "b", "ux", "fx", "ax", "on", "ho", "xs", "xml", "n", "k", "xy", "p", "name", "m", "z", "sex", "image", "xe", "ww", "pe", "el", "any", "xx", "wx", "ci", "tx", "voice", "xc", "c", "width", "s", "ll", "u", "wa", "ic", "px", "no", "change", "y", "xp", "pl", "l", "dx", "en", "do", "lex", "f", "cross", "sw", "xxx", "v", "yx", "ox", "xt", "an", "rx", "yes", "co", "na", "php", "xi", "q", "time", "X", "index", "test", "ex", "g", "ya"], "o": ["et", "one", "ola", "note", "oi", "h", "e", "\u00f3", "b", "ooo", "oo", "on", "O", "ot", "oko", "n", "yo", "k", "io", "p", "m", "auto", "z", "ao", "wo", "ne", "ko", "ino", "obj", "ta", "ui", "oa", "out", "ol", "oid", "s", "u", "off", "no", "y", "l", "op", "en", "mo", "do", "f", "to", "lo", "oro", "fo", "iso", "oe", "type", "bo", "v", "ow", "an", "ilo", "offset", "ou", "om", "oin", "vo", "os", "so", "go", "po", "li"], "t": ["et", "it", "ct", "note", "tc", "tp", "tr", "h", "at", "a", "e", "b", "the", "on", "ot", "wt", "ant", "tm", "tip", "opt", "n", "k", "tty", "p", "m", "z", "pt", "ts", "unt", "target", "temp", "ta", "mt", "ti", "tu", "tail", "c", "qt", "out", "s", "tf", "u", "kt", "off", "tw", "token", "y", "dt", "l", "ut", "op", "ty", "f", "to", "type", "v", "tn", "iot", "tz", "template", "te", "nt", "port", "yt", "q", "rt", "tt", "time", "test", "g"], "board": ["land", "input", "slice", "flow", "dom", "bug", "ault", "table", "layout", "event", "ide", "pool", "clean", "fleet", "b", "foot", "queue", "builder", "stroke", "round", "du", "style", "device", "wheel", "sc", "config", "home", "form", "loop", "view", "block", "wall", "io", "card", "boards", "p", "case", "ack", "stream", "ward", "uno", "image", "game", "road", "line", "stick", "ko", "row", "rank", "deck", "poll", "custom", "room", "lock", "database", "control", "plugin", "ck", "boy", "client", "Board", "boarding", "rule", "word", "head", "buffer", "bank", "ro", "channel", "league", "team", "draw", "flo", "box", "f", "cross", "conference", "player", "model", "knife", "lane", "bo", "crew", "sequence", "hole", "phone", "che", "design", "square", "down", "video", "oard", "cart", "window", "co", "point", "coll", "back", "screen", "frame", "core", "list", "object", "rock", "entry", "panel", "ode", "engine", "menu", "course", "col"], "BOARD_SIZE": ["BOORD_Size", "BOARDIDSIZE", "BOARDS_Size", "BOARDS_NAME", "BOARD_Size", "BOARDIDSize", "BOARDS_VERSION", "BOARDTIMESize", "BOARD_SPEC", "BOARD_NAME", "BOARD_IZE", "BOARDTIMEMODE", "BOARDIDsize", "BOARDS_ANY", "BOARDNSize", "BOARDS_TABLE", "BOARDS_IZE", "BOARDS_ENGTH", "BOARDS_SIZE", "BOARDS_POSE", "BOARDNSIZE", "BOARDS_MODE", "BOARDTIMESIZE", "BOARD_MODE", "BOARDS_SPEC", "BOORD_VERSION", "BOARDS_RAW", "BOORD_size", "BOARD_RAW", "BOARDOsize", "BOARDOSIZE", "BOARD_VERSION", "BOARDS_size", "BOARDIDVERSION", "BOARDNVERSION", "BOARDOSize", "BOARDOVERSION", "BOORD_SIZE", "BOARDTIMERAW", "BOARD_TABLE", "BOARD_ENGTH", "BOARD_ANY", "BOARD_POSE", "BOARDNIZE", "BOARD_size"], "RESULTS": ["AMES", "ULTS", "END", "N", "MS", " results", "GUI", "FORM", "ULT", "items", "Result", "RE", "Events", "Features", "LES", "P", "MAP", "rows", "result", "LIST", "Games", "Values", "table", "SIZE", "G", "Results", "runs", "L", "r", "RES", "DATA", "Y", "TABLE", "DW", "GR", "Rules", "game", "BOX", "W", "R", "III", "row", "COLOR", "C", "ES", "games", "U", "ITS", "Contents", "results", "details", "output", "CC", "tests", "LOG", "S", "E", "Row", "NAME", "NUM", "progress", "GES", "B", "F", "Q", "MODE", "GAME", "PS"], "d": ["v", "dm", "dd", "dc", "data", "ind", "end", "c", "k", "done", "id", "dom", "ct", "dh", "p", "xd", "m", "dL", "did", "r", "z", "sd", "h", "pd", "e", "y", "da", "dt", "ld", "ad", "dx", "md", "draw", "b", "dist", "depth", "l", "do", "start", "dn", "f", "day", "ds", "D", "dy", "di", "dl", "cd", "du", "diff", "max", "dp", "dq", "dim", "n", "g", "dat", "fd"], "i": ["ip", "ie", "input", "mini", "ni", "two", "id", "it", "one", "part", "ki", "I", "oi", "h", "ix", "a", "e", "size", "iii", "b", "int", " I", "uri", "li", "pi", "fi", "ib", "n", "multi", "di", "ini", "idi", "k", "ai", "ji", "gi", "io", "sup", "p", "name", "mi", "m", "r", "z", "line", "im", "iu", "ii", "ui", "ti", "ci", "ia", "ei", "qi", "c", "init", "s", "yi", "chi", "bi", "u", "zi", "page", "ic", "cli", "ish", "y", "l", "ri", "f", "inner", "lc", "type", "si", "v", "iv", "data", "ind", "phi", "info", "list", "xi", "q", "vi", "ori", "ik", "index", "g"], "w": ["wd", "it", "_", "h", " W", "work", "a", "e", "weight", "wy", "b", "W", "on", "wt", "wk", "wig", "hw", "wp", "n", "aw", "est", "iw", "k", "kw", "wall", "p", "m", "r", "z", "how", "only", "all", "way", "wo", "wh", "ww", "won", "wait", "wu", "wx", "ew", "wb", "c", "value", "width", "fw", "s", "word", "raw", "u", "off", "tw", "ed", "wa", "y", "wal", "l", "draw", "do", "f", "rw", "max", "sw", "ws", "week", "wan", "v", "ow", "end", "we", "wl", "wn", "new", "q", "win", "go", "ex", "g"], "vertical": ["identual", "verular", "vertsically", "canoniscal", "vertedical", "canonically", "vertsics", "verticals", "vertsical", "canonual", "vericals", "vertular", "verics", "vertedically", "vertsicals", "partual", "identical", "vertedics", "identicals", "vertizontal", "vertedicals", "canonular", "vertically", "verizontal", "indular", "vertsicial", "verticial", "canonizontal", "vertiscal", "indical", "canonical", "verically", "partical", "partiscal", "vertual", "identically", "partically", "identiscal", "indizontal", "identicial", "vertics", "vericial", "verical", "indically"], "j": ["ie", "ind", "c", "je", " c", "k", "ai", "it", "ji", "div", "note", "io", "I", "p", "u", "zi", "oi", "m", "h", "r", "z", "e", "y", "dt", "iii", "l", "b", "jj", "f", "row", " z", "im", "ij", "iu", " I", "xi", "jp", "li", "pi", "q", "dy", "temp", "ii", "ui", "index", "ci", " ii", "n", "jc", "g", "v", "di"], "T": ["IP", " N", "N", " Z", "TN", "NT", "TG", "IT", "n", "I", "P", "length", " P", "G", " L", "number", "thread", "L", " W", "Y", "Z", "e", "Time", " TI", "V", "W", "R", "C", "O", "U", "TT", "A", " I", "D", "WT", "TB", "S", "E", "trial", "time", "duration", "X", "M", "B", "F", "Q", "type", "TS", "TI", " D", " F"], "Ti": ["ei", "hi", "out", "ai", "yi", "tf", "gi", "I", "io", "length", "tim", "u", "oi", "tk", "unit", "abi", "z", "y", " ti", "iii", "ts", " I", "iti", "xi", "pi", "fi", "vi", "temp", "ati", "ta", "ii", "ui", "num", "ti", "si", "TI", "li", "di"]}}
{"code": " \n  \n  def read_str(): return stdin.readline().rstrip('\n')\n  def read_int(): return int(stdin.readline())\n  def read_ints(): return map(int, stdin.readline().split())\n  def read_floats(): return map(float, stdin.readline().split())\n  \n  \n  def atos(A):\n      return '\n'.join([''.join(row) for row in A])\n      \n  \n  def get_field(r, c):\n      field = [['.'] * c for i in range(r)]\n      field[0][0] = 'c'\n      return field\n      \n      \n  def is_forbidden(i, j):\n      return i == 0 and j == 0 or i == 0 and j == 1 or \\\n          i == 1 and j == 0 or i == 1 and j == 1\n      \n      \n  def fill(field, r, c, m):\n      left = m\n      for ii in range(r - 1, -1, -1):\n          i = ii\n          j = c - 1\n          while i < r and j >= 0:\n              if is_forbidden(i, j):\n                  i += 1\n                  j -= 1\n                  continue\n              if left == 0:\n                  return 0\n              field[i][j] = '*'\n              left -= 1\n              \n              i += 1\n              j -= 1\n              \n          if ii == 0:\n              for jj in range(c - 2, 1, -1):\n                  i = ii\n                  j = jj\n                  while i < r and j >= 0:\n                      if is_forbidden(i, j):\n                          i += 1\n                          j -= 1\n                          continue\n                      if left == 0:\n                          return 0\n                      field[i][j] = '*'\n                      left -= 1\n                      \n                      i += 1\n                      j -= 1\n              \n      if r * c == m + 1:\n          if r > 1:\n              field[1][0] = '*'\n          if c > 1:\n              field[0][1] = '*'\n          if r > 1 and c > 1:\n              field[1][1] = '*'\n          return 0\n              \n      return left\n  \n      \n  def solve_case():\n      r, c, m = read_ints()\n      \n      field = get_field(r, c)\n          \n      left = fill(field, r, c, m)\n          \n      return 'Impossible' if left != 0 else atos(field)\n      \n      \n  def main():\n      cases = read_int()\n      for case in range(1, cases + 1):\n          print('Case #{}:\n{}'.format(case, solve_case()))\n  \n          \n  main()\n", "substitutes": {"A": ["AC", "NA", "N", "As", "AR", "am", "an", "T", "P", "I", "analysis", "G", "L", "AM", "An", "K", "Z", "a", "ac", "Y", "Ar", "area", "AB", "V", "W", "R", "H", "mA", "C", "AA", "This", "AD", "alpha", "AS", "D", "S", "array", "E", "Array", "shape", "RA", "AP", "PA", "LA", "instance", "M", "B", "au", "F", "grid", "X", "n", "CA", "The", "ram", "AN"], "row": ["dd", "input", "ow", "record", "slice", "board", "rown", "value", "item", "x", "block", "roc", "month", "bug", "df", "mm", " rows", "rows", "result", "arr", "raw", "uu", "xxxxxxxx", "column", "ro", "rew", "key", "frame", "reader", "ud", "user", "list", "line", "f", "rc", "rw", "object", " Row", " ro", "round", "model", "entry", "array", "obj", "Row", "cell", "feed", "instance", "insert", "node", "gram", "string", "col"], "r": ["nr", "rec", "right", "ru", "attr", "range", "dr", "rm", "tr", "ir", "kr", "h", "lr", "a", "e", "adr", "cr", "rb", "b", "gr", "R", "rr", "rs", "yr", "er", "ur", "n", "k", "br", "p", "arr", "z", "res", "o", "t", "ra", "rn", "mr", "w", "err", "x", "s", "rar", "u", "hr", "rf", "root", "rd", "y", "l", "rh", "ri", "f", "rc", "ar", "sw", "pr", "cur", "oc", "v", "sr", "d", "rx", "rg", "re", "str", "fr", "order", "q", "rt", "g"], "c": ["uc", "rec", "cu", "dc", "right", "xc", "end", "x", "fc", "k", "con", "loc", "col", "s", "code", "ct", "cat", "cc", "d", "ec", "p", "u", "cm", "ic", "nc", "z", "ch", "h", "co", "o", "cs", "cf", "mc", "cn", "ac", "e", "y", "cin", "a", "cr", "l", "b", "t", "re", "en", "cy", "f", "rc", "C", "arc", "g", "q", "ar", "lc", "cv", "w", "ca", "cl", "cp", "ci", "n", "sc", "oc", "ce", "v"], "field": ["input", "manager", "slice", "when", "id", "argument", "part", "FIELD", "source", "table", "this", "e", "sort", "term", "int", "now", "format", "li", "day", "round", "update", "diff", "cell", "er", "file", "node", "default", "string", "multi", "form", "fields", "block", "holder", "p", "group", "true", "all", "key", "patch", "line", "force", "error", "empty", "label", "load", "w", "lock", "err", "play", "wire", "function", "comment", "condition", "value", "x", "rule", "pre", "layer", "word", "section", "div", "page", "ed", "Field", "root", "change", "handler", "l", "machine", "user", "child", "f", "inner", "player", "model", "post", "array", "pad", "type", "fill", "v", "add", "data", "record", "end", "message", "document", "parent", "d", "result", "cover", "number", "column", "url", "element", "option", "null", "fix", "list", "match", "object", "module", "q", "entry", "man", "time", "ff", "g"], "i": ["ip", "ie", "mini", "ni", "id", "it", "ki", "I", "oi", "ir", "ix", "a", "e", "adi", "b", "int", "uri", "pi", "fi", "ib", "n", "multi", "di", "ini", "mu", "iw", "k", "ai", "ji", "gi", "io", "p", "mi", "z", "o", "t", "ani", "ij", "iu", "ui", "ti", "ci", "ia", "ei", "qi", "x", "api", "s", "yi", "chi", "bi", "u", "zi", "ic", "cli", "y", "l", "uni", "eni", "ri", "f", "lc", "si", "ih", "v", "iv", "ind", "anti", "phi", "d", "info", "xi", "vi", "ori", "ik", "li", "col"], "j": ["ie", "ni", "jo", "it", "jet", "part", "note", "bj", "le", "h", "ix", "a", "e", "b", "on", "ot", "jp", "pi", "un", "li", "dy", "yr", "adj", "n", "uj", "ja", "k", "xy", "ji", "jon", "io", "br", "p", "name", "z", "jen", "o", "all", "key", "t", "pt", "ne", "line", "ij", "el", "obj", "oj", "ui", "other", "ci", "err", "ch", "jl", "qi", "x", "aj", "sh", "u", "page", "off", "ah", "y", "l", "en", "f", "js", "J", "pr", "si", "je", "v", "ion", "d", "str", "ijk", "fr", "q", "vi", "last", "dj", "jc", "g"], "m": ["fm", "x", "k", "range", "am", "middle", "d", "mm", "mp", "p", "u", "mi", "um", "cm", "h", "z", "o", "a", "e", "y", "ms", "mc", "cr", "l", "b", "t", "sm", "md", "re", "machine", "f", "im", "mr", "module", "un", "tm", "q", "ym", "man", "w", "num", "time", "M", "n", "g", "v", "mu"], "left": ["center", "right", "partial", "plus", "two", "id", "code", "it", "fixed", "le", "this", "ix", "method", "size", "e", "ell", "member", "scroll", "cle", "wrong", "diff", "cell", "path", "none", "shift", "min", "full", "n", "default", "leave", "form", "fields", "spin", "length", "p", "auto", "only", "z", "o", "margin", "all", "old", "fe", "Left", "line", "error", "used", "small", "empty", "label", "found", "obj", "missing", "Right", "err", "hide", "function", " Left", "value", "x", "split", "rule", "width", "ed", "fl", "no", "cli", "self", "pl", "l", "joined", "child", "cost", "lo", "inner", "lc", "cl", "log", "rights", "data", "ind", "level", "after", "end", "nl", "cel", "copy", "shell", "L", "ul", "column", "exp", "url", "offset", "nt", "low", "null", "lt", "len", "skip", "last", "ignore", "li", "col"], "ii": ["center", "ie", "mini", "qa", "ni", "id", "bug", "sil", "h", "ix", "size", "cf", "iii", "yy", "b", "int", "jp", "fi", "pi", "cycle", "ib", "aff", "inf", "n", "di", "ini", "iw", "\u00ee", "spin", "ai", "ji", "gi", "p", "II", "cm", "z", "image", "error", "ani", "ij", "ice", "ig", "vin", "img", "say", "ti", "irm", "ci", "err", "ei", "qi", "hi", "init", "circle", "middle", "chi", "fl", "y", "ign", "l", "eni", "ri", "f", "iq", "sci", "inner", "ail", "ort", "si", "iv", "ind", "end", "after", "d", "ili", "co", "url", "nt", "inv", "xi", "vi", "illi", "ignore", "li", "col"], "jj": ["jl", "JJ", "ref", "uj", "rec", "vm", "ja", "right", "x", "java", "jo", "ji", "mm", "d", "cc", "aj", "p", "JC", "gn", "gm", "cm", "h", "jac", "ix", "z", "jam", "pm", "y", "qq", "yy", "re", "b", "bb", "rc", "dn", "ij", "jp", "tm", "q", "man", "J", "dj", "cp", "adj", "ci", "n", "jc", "g", "di"], "cases": ["sub", "rest", "fields", "Case", "rule", "options", "section", "rows", "count", "sets", "mat", "values", "counter", "size", "margin", "stack", "cells", "sections", "child", "errors", "ops", "ends", "children", "inner", "rules", "tests", "trial", "path", "cl", "instance", "shift", "lines", "test", "index", "times", "config", "col"], "case": ["add", "right", "end", "block", "pos", "length", "ed", "_", "exp", "self", "all", "pattern", "index"]}}
{"code": " \n  def get_mapping():\n  \td = ord('a')\n  \tmapping = [ None ] * 26\n  \tinputs = [ 'ejp mysljylc kd kxveddknmc re jsicpdrysi', \n  \t\t'rbcpc ypc rtcsra dkh wyfrepkym veddknkmkrkcd', \n  \t\t'de kr kd eoya kw aej tysr re ujdr lkgc jv' ]\n  \toutputs = [ 'our language is impossible to understand', \n  \t\t'there are twenty six factorial possibilities', \n  \t\t'so it is okay if you want to just give up' ]\n  \t\n  \tfor i in xrange(len(inputs)):\n  \t\tinput = inputs[i]\n  \t\toutput = outputs[i]\n  \t\tfor j in xrange(len(input)):\n  \t\t\tif input[j] == ' ':\n  \t\t\t\tcontinue\n  \t\t\tk = ord(input[j]) - d\n  \t\t\tif mapping[k] is None:\n  \t\t\t\tmapping[k] = output[j]\n  \tmapping[ord('q') - d] = 'z'\n  \tmapping[ord('z') - d] = 'q'\n  \t\t\t\t\n  \treturn mapping\n  \t\t\t\n  \n  def program():\n  \tT = int(stdin.readline())\n  \tmapping = get_mapping()\n  \td = ord('a')\n  \tfor i in xrange(T):\n  \t\ts = stdin.readline().rstrip()\n  \t\tt = ''\n  \t\t\n  \t\tfor ss in s:\n  \t\t\tif ss == ' ':\n  \t\t\t\tt += ' '\n  \t\t\telse:\n  \t\t\t\tt += mapping[ord(ss) - d]\n  \t\tprint 'Case #%d: %s' % (i + 1, t)\n  \t\n  if __name__ == '__main__':\n  \tprogram()\n", "substitutes": {"d": ["td", "v", "dc", " D", "ind", "dd", "data", "c", "x", "ded", "out", "id", "std", "dh", "dos", "p", "u", "name", "ed", "xd", "m", "z", "de", "sd", "o", "a", "e", "y", "db", "da", "dir", " dd", "dt", "l", "ad", "b", "dx", "nd", "do", "start", "f", "dn", "D", "ds", "q", "dy", "du", "dl", "cd", "dict", "diff", "dp", "w", "dim", "n", "g", "dat", "di"], "mapping": ["dapper", "smappings", "pap", "coding", "fapper", "mmapping", "ymapping", "ymashing", "paramapped", "Mapped", "smapping", "Mapper", "paramap", "paramapping", "fapped", "mmappings", "capping", "doding", " mapped", "capped", "ymording", "ymappings", "Moding", "pappings", "smapper", "papped", "cording", "papper", "dapping", "fappings", "smapped", "cappings", "paramappings", "mording", "capper", "mashing", "mmapped", " map", "dappings", "Mording", " mapper", "Mashing", "Mapping", "cashing", "mmoding", "map", "moding", "mapped", "papping", "poding", "mapper", "mappings", "Mappings", "fapping", "mmapper", " mappings", "dapped"], "inputs": [" inputlines", "streaming", " inputi", "Inputwords", "inputd", "streams", "Inputing", "streamd", "outputwords", "inputes", " inputd", "inputing", "Inputi", "Inputes", "outputing", "inputsets", " inputes", "Inputs", "streamlines", "outputd", " inputwords", "outputlines", " inputsets", "outputsets", "Inputlines", "Inputsets", "inputi", "outputes", "inputwords", "Inputd", "outputi", "inputlines"], "outputs": ["configs", "controlments", "controles", "inputd", " outputfields", "outputwords", "inputments", "Outputfields", " outputwords", "outputd", "outputments", "inputfields", "configd", "configments", "configes", " outputd", "outputes", "inputwords", "outputfields", "Outputs", "controls", "controld", "Outputwords", "inputes", "Outputd"], "i": ["ini", "ei", "ip", "iw", "ie", "ind", "qi", "slice", "mini", "x", "c", "ni", "phi", "id", "it", "ai", "ji", "yi", "gi", "I", "io", "p", "u", "m", "ir", "h", "r", "z", "ix", "cli", "o", "a", "e", "y", "l", "b", "int", "eni", "ri", "f", "im", "on", "iu", "il", "xi", "uri", "g", "pi", "vi", "trial", "ii", "ib", "ui", "ti", "type", "index", "si", "ci", "ih", "n", "ia", "li", "multi", "v", "di"], "input": ["ip", "qa", "text", "code", "argument", "source", "inc", "event", "interface", "a", "qq", "int", "bin", "version", "Input", "update", "diff", "path", "feed", "run", "inf", "file", "xml", "string", "config", "form", "view", "block", "issue", "p", "stream", "o", "key", "image", "answer", "error", "target", "img", "temp", "w", "control", "condition", "c", "value", "out", "word", "analysis", "current", "param", "channel", "op", "f", "model", "array", "instance", "batch", "type", "python", "data", "dc", "response", "submit", "document", "result", "request", "number", "point", "inside", "element", "option", "audio", "command", "list", "amp", "pattern", "match", "object", "q", "filter", "dict", "insert", "index", "address"], "output": ["context", "sequence", "network", "data", "flow", "value", "response", "fore", "out", "environment", "text", "application", "document", "result", "p", "source", "page", "analysis", "connection", "m", "number", "unit", "operation", "o", "external", "channel", "option", "reference", "struct", "op", "image", "version", "Output", "resource", "office", "object", "module", "component", "target", "write", "model", "update", "run", "type", "control", "index", "choice", "address", "position", "file", "config", "console", "v"], "j": ["jl", "ip", "uj", "ie", "ja", "ind", "qi", " _", "c", "x", "jit", "jo", "id", "ai", "n", "ji", "jet", "part", "note", "bj", "p", "u", "aj", "m", "h", "r", "z", "jen", "o", "a", "e", "y", "key", "l", "b", "jj", "f", "kj", "ijk", "ij", "jp", "q", "js", "jan", "J", "w", "ii", "num", "oj", "ik", "dj", "index", "ci", "adj", " n", "je", "li", "v"], "k": ["ak", "kl", "ck", "c", "ask", "x", "id", "ke", "kid", "kw", "ki", "kh", "p", "u", "kt", "ack", "ka", "tk", "m", "kr", "kn", "h", "ek", "z", "ch", "kick", "K", "o", "work", "e", "key", "y", "kat", "b", "ok", "dk", "ko", "f", "ijk", "kj", "uk", "ks", "q", "ku", "wk", "r", " K", "kk", "w", "kg", "ik", "ky", "kin", "n", "sk", "g", "v"], "ord": ["range", "text", "id", "dom", "coord", "Ord", "gd", "adr", "bit", "cod", "int", "bin", "ad", "md", "ordered", "ords", "num", "ORD", "append", "dd", "short", "bottom", "form", "norm", "rod", "char", "only", "dest", "orig", "old", "nd", "mod", "rend", "cd", "od", "obj", "oct", "ext", "deg", "done", "butt", "orm", "div", "off", "rd", "und", "uni", "dist", "uint", "ort", "pad", "log", "alt", "add", "ind", "bound", "end", "org", "desc", "orient", "ond", "cart", "byte", "const", "ld", "len", "str", "art", "addr", "order", "orde", "ode", "vert", "dir", "rad"], "T": ["N", "Total", "TN", "NT", "GT", "TH", "P", "I", "LT", "G", "connection", "L", "TE", "K", "Z", "Y", "dt", "Time", "V", "H", "R", "W", "DT", "ts", "C", "O", "TS", "TT", "A", "Start", "TA", "D", "WT", "Input", "TB", "S", "E", "Length", "time", "M", "X", "B", "F", "Q", "test", "type", "Ts", "TI"], "s": ["sequence", "su", "data", "qs", "c", "ssl", "ips", "services", "ls", "rows", "p", "source", "ssh", "sets", "session", "sym", "m", "st", "r", "e", "ess", "sv", "ns", "b", "states", "words", "comments", "str", "ses", "f", "ts", "ops", "sb", "spec", "rs", "ds", "tests", "fts", "css", "S", "bs", "ws", "sw", "gs", "w", "sl", "sn", "ps", "strings", "lines", "si", "n", "string", "g", "v"], "t": ["data", "c", "x", "tail", "qt", "text", "xt", "tf", "ct", "p", "u", "name", "tz", "m", "template", "tick", "r", "z", "token", "h", "o", "a", "e", "y", "at", "tmp", "dt", "nt", "l", "b", "int", "txt", "str", "pt", "start", "f", "ts", "ot", "tm", "reset", "title", "tt", "temp", "ta", "w", "tip", "diff", "time", "ti", "type", "test", "python", "n", "string", "g", "v"], "ss": ["dd", "\u00df", "su", "ng", "ct", "pos", "mm", "oss", "sit", "p", "rss", "ssh", "switch", "tz", "sch", "st", "r", "ass", "ess", "es", "sv", "nt", "ns", "struct", "str", "ses", "uss", "ts", "SS", "acc", "password", "spec", "rs", "ds", "iss", "css", "bs", "nn", "ws", "sw", "os", " iss", "hess", "S", "tt", "style", "sn", "tes", "mes", "ps", "ys", "ti", "test", "si", "sc", "string", " es", "se"]}}
{"code": "def get_number_of_test_case():\n      return int(raw_input().strip())\n  \n  def solve_case(t):\n      N, M = [int(x) for x in raw_input().strip().split()]\n      \n      matrix = [[int(x) for x in raw_input().strip().split()] for y in range(N)]\n  \n      s_list = list()\n      for i in range(N):\n          for j in range(M):\n              s_list.append([matrix[i][j], i, j,])\n      s_list.sort(cmp = lambda x, y: x[0] - y[0])\n  \n      outcome = 'YES'\n      for s in s_list:\n          if matrix[s[1]][s[2]] == 0:\n              continue\n  \n          row, col = s[1], s[2]\n  \n          can_do = True\n          for i in range(N):\n              can_do &= matrix[i][col] <= s[0]\n          if can_do:\n              for i in range(N):\n                  matrix[i][col] = 0\n              continue\n  \n          can_do = True\n          for j in range(M):\n              can_do &= matrix[row][j] <= s[0]\n          if can_do:\n              for j in range(M):\n                  matrix[row][j] = 0\n          else:\n              outcome = 'NO'\n              break\n      \n      print 'Case #%d: %s' % (t, outcome,)\n  \n  \n  T = get_number_of_test_case()\n  t = 1\n  while t <= T:\n      solve_case(t)\n      t += 1\n  \n", "substitutes": {"t": ["et", "tu", "c", "qt", "k", "out", "it", "tf", "d", "note", "p", "u", "tc", "count", "tz", "tp", "m", "tick", "st", "r", "z", "h", "template", "o", "a", "e", "all", "trans", "tmp", "at", "te", "dt", "nt", "l", "ut", "b", "int", "txt", "pt", "bt", "ty", "start", "ts", "f", "total", "ot", "TT", "ant", "stop", "ft", "tt", "temp", "trial", "ta", "w", "tip", "time", "ti", "type", "state", "test", "n", "g", "v", "tn"], "N": ["Ni", "NL", "NA", "GN", "NI", "NT", "NB", "Ne", "ON", "n", "P", "I", "Mo", "NE", "NO", "CM", "CN", "MN", "IN", "L", "NS", "K", "Y", "Z", "Num", "Size", "V", "H", "R", "W", "OS", "Na", "C", "O", "U", "Len", "A", "D", "S", "E", "J", "Me", "Ns", "X", "B", "F", "Q", "NN", " n", "No", "NC", "NM", "CNN"], "M": ["Ma", "MS", "Mon", "OM", "IM", "P", "I", "Mo", "MB", "CM", "G", "ME", "MN", "m", "L", "JM", "AM", "IN", "MI", "K", "Y", "Z", "ARM", "Multi", "MON", "LM", "SM", "V", "W", "R", "H", "Many", "C", "O", "U", "RM", "A", "D", "ION", "MX", "Mi", "E", "S", "J", "MM", "B", "X", "F", "Q", "NN", "Mor", "MC", "n", "NM", "MO"], "x": ["yx", "data", "xc", "c", "plus", "k", "ox", "id", "xt", "xy", "one", "xes", "d", "xxxx", "p", "u", "xxxxxxxx", "rx", "_", "event", " X", "m", "px", "h", "ix", "z", "a", "sex", "e", "bit", "XX", "xp", " xx", "dx", "int", "l", "hex", "xf", "b", "ux", "f", "fx", "cross", "php", "ax", "on", "xi", "q", "xxx", "w", "xx", "X", "inf", "index", "test", "xs", "wx", "n", "ci", "full", "ex", "g", "tx", "v", "xb"], "matrix": ["Matrices", "latrix", "atrics", "attric", "matbox", "latlas", "Matlas", "matriz", "attrics", "hematriz", "matric", "latract", " matensor", "manMatrix", "memrix", "matogram", "matrices", "MatMatrix", "catrix", "memract", "latogram", "latric", " matbox", "matract", "hematbox", "matlas", "catogram", "atric", "latrices", "Matogram", "atensor", "latrics", "Matomo", " matlas", "memogram", "atbox", "manrices", "manogram", " matogram", "matMatrix", "colrices", " matomo", " matriz", " matric", "Matric", "attrix", "colrix", "scherices", "matensor", "matomo", "cologram", " matract", "latomo", "memrices", "colric", " matrics", "Matrix", "attensor", "atrices", "matrics", "hematrix", "manrix", "catric", "atriz", "catrices", "scheogram", " matrices", "scherix", "scheMatrix", "hematrices", "atrix"], "y": ["gy", "sy", "ind", "c", "k", "xy", "yi", "ji", "d", "ey", "p", "u", "m", "py", "h", "ye", "z", "r", "my", "o", "Y", "e", "a", "key", "yd", "yy", "b", "ty", "cy", "iy", "jj", "f", "yl", "xi", "yt", "jp", "q", "ny", "dy", "ym", "oy", "ya", "w", "yr", "ii", "vy", "hy", "X", "ys", "type", "ry", "n", "je", "g", "yo", "v"], "s_list": ["s_LIST", " s_source", "s__all", "sites__LIST", "s_List", "sortedlist", "sites_LIST", "s__listed", "sasall", "sites__all", " s_li", "sites__listed", "sites__list", "s_val", "sites_all", "sites_list", "s_parent", "sortedli", "saslisted", " s_map", " s_listed", "sortedsource", "s_listed", "sites_listed", "sasLIST", "s__list", "sortedtail", "saslist", "s_source", " s_parent", " s_List", " s_bl", "s_map", " s_val", "s_all", "s_bl", "s_li", "s_tail", "s__LIST", " s_tail"], "i": ["ip", "ie", "ni", "id", "it", "I", "oi", "ir", "ix", "a", "e", "area", "int", "b", "start", "uri", "pi", "ib", "n", "multi", "di", "ini", "iw", "k", "ai", "ji", "io", "p", "name", "m", "auto", "r", "z", "o", "key", "iy", "im", "ij", "iu", "\u0438", "ii", "ui", "ti", "ci", "ia", "ei", "qi", "hi", "c", "yi", "bi", "u", "ic", "cli", "ish", "l", "eni", "ri", "f", "si", "v", "iv", "ind", "phi", "d", "xi", "q", "ori", "ik", "index", "li"], "j": ["jo", "it", "jet", "pos", "bj", "h", "jac", "ix", "a", "e", "get", "b", "int", "jj", "start", "ax", "jp", "li", "cell", "adj", "n", "uj", "ja", "k", "block", "ai", "loc", "ji", "br", "p", "m", "py", "r", "z", "o", "key", "ij", "label", "el", "ym", "w", "ii", "oj", "ci", "ch", "jl", "qi", "job", "c", "ge", "aj", "u", "l", "cy", "f", "ny", "js", "J", "si", "je", "v", "iv", "ind", "d", "coll", "ijk", "xi", "q", "ik", "index", "g"], "outcome": ["offrule", "outmble", "ingrade", " outcomes", "Outcome", "outcomes", "inmble", "Outline", "incomes", " outgrade", " outline", "income", "upcomes", "upmble", "Outgrade", "outgrade", "offcomes", "Outmble", "outrule", "outzie", "Outzie", "offcome", "upgrade", "Outrule", "outline", "upcome", " outzie", " outrule", "Outcomes", "inline", "offzie"], "s": ["services", "sets", "_", "sym", "a", "e", "outs", "b", "comments", "parts", "keys", "xs", "n", "sc", "times", "features", "su", " S", "fields", "sync", "k", "south", "p", "opens", "m", "r", "z", "o", "args", "ms", "sv", "states", "types", "ts", "ops", "sb", "spec", "ks", "ss", "sl", "w", "groups", "ges", "abs", "se", "c", "its", "ins", "u", "sq", "values", "es", "l", "ns", "cells", "ses", "f", "ds", "js", "S", "sw", "ws", "blocks", "si", "v", "bis", "ind", "qs", "ips", "ims", "ls", "d", "sites", "params", "sg", "new", "q", "tests", "space", "set", "os", "gs", "site", "ps", "strings", "lines", "sk", "g"], "row": ["v", "ip", "iv", "ow", "ind", "c", "k", "id", "loc", "month", "bug", "server", "head", "rows", "p", "page", "bar", "group", "u", "th", "name", "m", "tr", "column", "ro", "r", "ward", "z", "co", "o", "e", "key", "coll", "area", "l", "b", "user", "ri", "line", "link", "rc", "role", "f", "module", "mod", "q", "post", "du", "entry", "oy", "Row", "cell", "year", "index", "ior", "ry", "n", "sc", "li"], "col": ["uc", "v", "cu", "ind", "c", "con", "k", "block", "id", "loc", "ct", "cat", "pos", "d", "io", "p", "u", "char", "m", "fl", "column", "z", "co", "o", "coll", "key", "ell", "yy", "l", "b", "cy", "line", "Col", "yl", "f", "cor", "il", "label", "val", "dy", "el", "lc", "cell", "w", "cl", "year", "COL", "cp", "ci", "index", "keep", "n", "jc", "li", "ch"], "can_do": ["canlandboot", "canPdid", "can5do", " can_run", "Can_doing", " can_boot", " canpdo", " can_check", "can_dos", "Can_done", "can_die", "canpdo", "canPdo", "can_boot", "can2do", "canAdo", "canlogodo", " can_did", "can_done", "can_did", "canPdone", "can_doing", "canAdone", "can5die", "canpdone", "Can_don", "canlanddo", "canpdid", "can_odo", "canlogcheck", " can_go", "can_go", "Can_do", "can2done", " can_die", "can2doing", "canlogdos", "canprun", " can_done", " canprun", " canpdid", " canpdone", "canlogdo", "can_run", " can_odo", "canlanddone", "can2don", "canAdoing", "can_don", "can_check", "can5done", "canPrun", "canAdon", " can_dos"], "T": ["TM", "TN", "NT", "IT", "P", "I", "TW", "PT", "p", "G", "LT", "L", "CT", "TE", "K", "Y", "Time", "V", "H", "R", "W", "TH", "MT", "C", "DT", "O", "TF", "TT", "INT", "TC", "TA", "ONE", "TR", "D", "WT", "S", "E", "X", "B", "F", "Q", "test", "Type", "TS"]}}
{"code": "def count_between(a, b):\n  \tcount = 0\n  \tfor item in range(a, b + 1):\n  \t\trotate = len(str(item)) - 1\n  \t\twatch_list = [item,]\n  \t\trotate_count = 0\n  \t\titem_len = len(str(item))\n  \t\twhile rotate_count < rotate:\n  \t\t\tr_item = str(item)\n  \t\t\tr_item = r_item[rotate_count + 1:] + r_item[:rotate_count + 1]\n  \t\t\tr_item_len = len(r_item)\n  \t\t\tr_item = int(r_item)\n  \t\t\tif r_item not in watch_list and r_item > item and r_item <= b and r_item >= a and item_len == r_item_len:\n  \t\t\t\twatch_list.append(r_item)\n  \t\t\t\tcount +=1\n  \t\t\trotate_count += 1\n  \treturn count\n  \n  pre_computed = [0, 36, 801, 12060, 161982, 2023578, 299997,]\n  \n  t = int(raw_input().strip())\n  t_count = 1\n  while t_count <= t:\n  \ta, b = [int(x) for x in raw_input().strip().split()]\n  \tprint 'Case #%d: %d' % (t_count, count_between(a, b),)\n  \tt_count += 1\n  \n", "substitutes": {"a": ["sta", "la", "ea", "ak", "ma", "qa", "c", "ab", "af", "api", "am", "ai", "s", "at", "an", "d", "aj", "p", "u", "off", "wa", "aa", "m", "auto", "r", "ah", "z", "h", "o", "ac", "e", "sa", "da", "offset", "all", "area", "ap", "va", "ad", "ae", "another", "na", "art", "asa", "ama", "f", "i", "aaa", "A", "alpha", "ada", "ba", "ar", "ga", "ta", "w", "ca", "au", "app", "ata", "n", "aw", "ia"], "b": ["be", " B", "account", "bis", "bound", "home", "end", "c", "ab", "lb", "k", "bur", "body", "d", "bi", "abe", "p", "u", "nb", "pb", "m", "aa", "bf", "r", "fb", "z", "root", "o", "e", "y", "boot", "reb", "db", "area", "bas", "l", "rb", "emb", "bp", "base", "abb", "f", "bb", "i", "ob", "amb", "sb", "g", "new", "ba", "eb", "bs", "w", "ib", "j", "other", "B", "app", "n", "mb", "wb", "v"], "count": ["add", "long", "conf", "ind", "status", "more", "c", "loop", "id", "code", "catch", "bug", "part", "parent", "div", "cache", "length", "Count", "name", "sum", "case", "seq", "ed", "this", "number", "call", "counter", "size", "offset", "weight", "key", "all", "cond", "core", "check", "tag", "len", "child", "depth", "list", "base", "error", "f", "race", "total", "start", "order", "match", "process", "cycle", "val", "last", "found", "max", "time", "progress", "num", "type", "index", "test", "n", "amount", "col"], "item": ["ip", "input", "ie", "text", "id", "it", "example", "server", "ee", "bar", "source", "_", "event", "e", "term", "area", "int", "day", "container", "update", "hop", "iter", "er", "xml", "n", "string", "am", "ai", "loc", "p", "name", "m", "extra", "r", "o", "key", "image", "base", "row", "i", "el", "temp", "other", "package", "stuff", "value", "c", "s", "word", "section", "page", "u", "y", "article", "ay", "f", "anything", "Item", "g", "array", "j", "instance", "app", "sample", "v", "data", "end", " _", "attribute", "items", "an", "d", "result", " i", "info", "url", "offset", "element", "option", "order", "object", "atom", "q", "val", "entry", "time", "site", "au", "index", "li"], "rotate": ["rtat", " rotimate", " rotATE", " rotation", "transat", "polat", "polATE", "transate", "rotATE", "transimate", "rtation", "rotation", "rotat", "rtate", "polimate", "transATE", "rotimate", " Rotat", "polate", " Rotation", " rotat", " Rotate"], "watch_list": ["watch_part", "watchlibpart", "watch_keep", "watchlibgroup", " watch_group", "update_list", "watch_file", "watchvallists", "watchedlist", "watch_table", " watch_part", "update_data", "watchvalkeep", "watchfilepart", "watchvalqueue", " watch_lists", "watchliblist", " watchalqueue", " watch_queue", "watchfilelc", " watchalkeep", "watchedkeep", "watchedqueue", "update_table", " watchlibpart", "watch_queue", " watch_keep", "watch_lists", "watchalkeep", " watchliblc", " watchlibgroup", "watchliblc", "watchvalgroup", "watch_data", "update_file", "watchvallc", "watch_group", " watchallist", "watchedlists", "watchvalpart", " watchallists", "watch_lc", "watchvallist", "watchfilelist", "watchallists", "watchalqueue", "watchfilegroup", " watchliblist", " watch_lc", "watchallist"], "rotate_count": ["rotate1count", "rotated_col", "rotational__len", "rotate_size", "rotate__code", "rotation_cache", "rotate_len", "rotate__sum", "rotate__len", "rotational__count", "rotate_sum", "rotat_count", "rotate__count", "rotat_cache", "rotation_count", "rotational_sum", "rotate_col", "rotational_count", "rotate_cache", "rotated_code", "rotation_length", "rotational__sum", "rotational__code", "rotate_length", "rotate1code", "rotat_length", "rotate_c", "rotate1len", "rotate_code", "rotation_c", "rotated_count", "rotational_len", "rotational_code", "rotate1sum"], "item_len": ["r_Len", "item___Len", "source_fat", "r_lic", "source_limit", "source\u00b7fat", "item_length", "item___lic", "item___len", "item_lic", "item_limit", "r_length", "item___length", "item\u00b7len", "item_fat", "source\u00b7limit", "source_lin", "item\u00b7lin", "source_len", "item\u00b7limit", "item\u00b7fat", "source\u00b7lin", "item_Len", "item_lin", "r_len", "source\u00b7len"], "r_item": ["rpyitem", "rvalid", "rg_item", "rpyip", "r__info", "r_type", "r5source", "r__item", "r_source", "r_items", "r_ip", "rvalline", "rh_resource", "r_group", "rg_element", "r_module", "rallitem", "rightvalid", "r___ip", "rvalsource", "r_unit", "chain_group", "r___element", "r__element", " r_element", "rightvalline", "chain_server", "right_item", "rpylist", "rpip", "r5line", "r_result", " r_items", "rptype", "chain___entry", "r_Item", "rappitem", "right_line", "rpyelement", "R_entry", "r_list", "r_article", " r_article", "rnpline", "r5id", "rn_item", " r_Item", "chain_entry", "chain___group", "r___package", "rpline", "rh_element", " r_unit", "rn_result", "r___type", "chain_item", " r_module", "r_id", "right_source", "r_package", "r5item", "r___entry", "rg_ip", "rvalitem", "rnptype", "r_entry", "rappentry", "r___group", "rallelement", " r_info", "rh_package", " r_ip", "r___line", "r___item", "right_id", "rg_list", "r_server", "rn_entry", "rn_type", "r_resource", "chain___item", "r_info", "r_element", "r_line", "r___resource", "chain___server", "rightvalitem", " r_type", "r___server", "rightvalsource", "rnpip", "rpitem", "R_item", "rn_ip", "rn_line", "rh_item", "rnpitem", "R_element", "rallinfo", "rappresult"], "r_item_len": ["r_item_base", "r_item_num", "r_item_val", "r_item__len", "r_item_length", "r_item_Len", "r_item__num", "r_item__Len", "r_item__base"], "pre_computed": ["pre_commented", "pre_timpleted", "pre_comitted", "pre_timmented", "pre_calpleted", "pre_timputed", "pre_calitted", "pre_compitted", "pre_compmented", "pre_compputed", "pre_calputed", "pre_comppleted", "pre_timitted", "pre_completed", "pre_calmented"], "t": ["c", "s", "tf", "ct", "T", "d", "p", "u", "tz", "tp", "tw", "m", "tick", "tr", "o", "at", "e", "y", "dt", "nt", "l", " T", "ty", "ts", "f", "i", "now", "total", "ot", "target", "new", "q", "set", "diff", "tt", "title", "temp", "ta", "w", "time", "type", "test", "n", "g", "v", "tn"], "t_count": ["T_count", "ticantest", "test_keep", "test_weight", "ticannumber", "tr_number", "t25keep", "test_count", " t_Count", "t_loop", "t_length", "tricantest", "tricannumber", "T_loop", "T_Count", "tricanshift", "tr_shift", "tricancount", "t24number", "t24test", "t25length", "t_number", "tr_count", "t_shift", "t_weight", "T_code", "tr_test", "t_list", "ticanshift", "t25count", "t64count", "t_keep", "t64list", " t_list", "t_test", "t24shift", "t_code", "t_Count", "test_length", "t64Count", "t25weight", "ticancount", "t24count"], "x": ["yx", "xc", "xa", "rax", "id", "xy", "xes", "mx", "xxxx", "p", "name", "xxxxxxxx", "rx", "xd", "number", "px", "z", "ix", "exp", "abc", "sex", "e", "y", "bit", "XX", "nex", "xp", "dx", "pl", " xx", "fe", "xf", "xe", "expl", "ux", "lex", "fx", "ax", "ww", "php", "gal", "xi", "xxx", "string", "xx", "rex", "X", "index", "wx", "xs", "ex", "tx", "v", "xb"]}}
{"code": "def solve_case(t):\n      interested_row = int(raw_input().strip())\n      i = 1\n      while i <= 4:\n          row = raw_input()\n          if i == interested_row:\n              first_set = set(row.strip().split())\n          i += 1\n      interested_row = int(raw_input().strip())\n      i = 1\n      while i <= 4:\n          row = raw_input()\n          if i == interested_row:\n              second_set = set(row.strip().split())\n          i += 1\n      ans_set = first_set & second_set\n      if len(ans_set) == 1:\n          print 'Case #%d: %s' % (t, ans_set.pop(),)\n      elif len(ans_set) > 1:\n          print 'Case #%d: Bad magician!' % (t,)\n      else:\n          print 'Case #%d: Volunteer cheated!' % (t,)\n  \n  def main():\n      t = int(raw_input().strip())\n      for i in range(1, t + 1):\n          solve_case(i)\n  \n  if __name__ == '__main__':\n      main()\n", "substitutes": {"t": ["id", "it", "ct", "tc", "table", "tp", "h", "at", "a", "e", "b", "int", "the", "start", "now", "ot", "tm", "bot", "task", "tip", "duration", "n", "k", "p", "name", "m", "r", "z", "o", "tower", "pt", "ts", "target", "title", "temp", "ta", "mt", "w", "ti", "tu", "c", "x", "qt", "s", "tf", "u", "thread", "token", "y", "dt", "l", "ut", "f", "total", "trial", "j", "type", "python", "v", "T", "d", "tim", "tz", "template", "window", "st", "offset", "nt", "port", "q", "tt", "time", "test", "g"], "interested_row": ["mentioned_rows", "interest_row", "interestedCcell", "interestedCrows", "interested_none", " interested_set", "interestededstep", "interested_rows", " interested_rows", "interest_col", "mentioned_bar", "interest_rows", "interestedCrow", "interested_step", "interested_col", "interestediannone", "interest_none", "interest_step", "mentioned_row", "interested67ro", "interested_cell", "interested_ro", "interested_bar", " interested_ro", "mentioned_set", "interestededcell", "interested67rows", "interestedianrow", "interestededrows", "interestededrow", "interestediancol", "interested67set", "interest_cell", "interested_set", "interested67row", "interestedianrows", "interestedCstep"], "i": ["ip", "mini", "ie", "ni", "id", "ki", "I", "oi", "h", "ix", "at", "a", "e", "int", "b", "start", "uri", "li", "pi", "iter", "num", "n", "multi", "mu", "ini", "di", "iw", "k", "ai", "gi", "io", "p", "mi", "m", "r", "z", "o", "iu", "ii", "ui", "ti", "ci", "qi", "hi", "x", "c", "api", "init", "s", "yi", "chi", "bi", "u", "zi", "cli", "y", "l", "ri", "f", "j", "type", "si", "ih", "v", "ind", "anti", "phi", "d", "info", "xi", "q", "vi", "ori", "index", "g", "col"], "row": ["ip", "input", "right", "flow", "id", "month", "bug", "df", "server", "event", "tr", "ob", "container", "cell", "pair", "feed", "wheel", "node", "sc", "dd", "su", "view", "sync", "block", "rows", "step", "p", "group", "r", "ward", "key", "va", "way", "image", "line", "error", "w", "seed", "comment", "x", "section", "raw", "page", "hub", "wa", "ro", "channel", "user", "conn", "f", "box", "model", "lc", "array", "sw", "batch", "instance", "uc", "data", "ow", "record", "ha", "result", "um", "column", "coll", "reader", "list", "up", "port", "arrow", "q", "entry", "set", "Row", "ry", "col"], "first_set": ["first_sc", "small_size", "primaryLSet", "small_box", "smallJsc", "primaryLset", "primary_Set", "first_size", "smallJset", "firstNsize", "small_set", "first_name", "firstJsc", "firstLsetting", "primary_setting", "firstJbox", "firstLSet", "firstLset", "smallJsize", "first_setting", "primary_name", "primaryLname", "primaryLsetting", "first_Set", "firstJset", "firstJsize", "firstLname", "firstNbox", "smallJbox", "small_sc", "firstNset", "first_box", "firstNsc", "primary_set"], "second_set": [" second_row", "second_pack", " second_sc", " second_case", "second__setting", " second_setting", " second_pack", "second_sc", "second__set", "second__sc", "second_row", "second_setting", "second_case"], "ans_set": ["ans2set", "ans_sche", "an_list", "ansxlist", "an_length", "ans_seen", "an_match", "an_set", "ans_list", "ansxet", "ans_et", "ans_length", "an_sche", "ans_match", "ans2list", "ans_part", "ans2match", "ansxlength", "ans_setting", "an_seen", "an_setting", "ansxset", "an_part", "ans2seen", "an_et"]}}
{"code": "def solve_case(t):\n      n = int(raw_input().strip())\n      naomi = sorted([float(num) for num in raw_input().strip().split()])\n      ken = sorted([float(num) for num in raw_input().strip().split()])\n  \n  \n      i, j = 0, 0\n      while j < n:\n          if ken[j] > naomi[i]:\n              i += 1\n          j += 1\n      optimal_result = n - i\n  \n      deceit_result = 0\n      while n > 0:\n          if naomi[0] < ken[0]:\n              ken.pop()\n          else:\n              deceit_result += 1\n              ken = ken[1:]\n          naomi = naomi[1:]\n          n -= 1\n      \n  \n  \n  \n      print 'Case #%d: %d %d' % (t, deceit_result, optimal_result,)\n  \n  def main():\n      t = int(raw_input().strip())\n      for i in range(1, t + 1):\n          solve_case(i)\n  \n  if __name__ == '__main__':\n      main()\n", "substitutes": {"t": ["tu", "c", "x", "k", "it", "tf", "ct", "d", "T", "p", "name", "count", "tc", "table", "tp", "u", "tim", "number", "m", "thread", "st", "r", "z", "h", "token", "window", "o", "at", "e", "y", "offset", "tmp", "dt", "nt", "l", "b", "ut", "int", " T", "pt", "start", "ts", "f", "total", "ot", "target", "new", "task", "q", "tt", "trial", "temp", "ta", "w", "time", "ti", "type", "test", "g", "v", "tn"], "n": ["nr", "network", "N", "c", "x", "ni", "k", "s", "an", "d", "pos", "p", "count", "u", "nb", "number", "m", "ln", "nc", "z", "o", "a", "e", "y", "size", "cn", "fn", "nt", "l", "ns", "b", "np", "len", "en", "na", "ne", "f", "net", "nit", "ot", "nat", "nu", "pi", "un", "inner", "ny", "nn", "max", "w", "sn", "don", "min", "nan", "g", "v"], "naomi": [" naku", "anaqi", "naori", "naican", "neoki", " naoki", "naoi", " naoni", "kaogi", "unaoka", "naoki", "paqi", "ataomi", "waiti", "kaoi", " naonic", "ataori", "kaomi", "neku", "neonic", "qaomi", "unaoni", "ataonic", "ataoki", "naogi", "kaiti", "naoni", " naori", "anaori", "naiti", "naobi", " naqi", " naoka", "waogi", "paobi", "paori", "qaqi", "paomi", "maoni", "naoka", "naku", "maoi", "maomi", "neomi", "qaican", "qaori", " naiti", "waoi", "ataqi", " naoi", "anaomi", " naogi", "maoka", "naonic", " naobi", "waomi", "unaomi", "ataican", "anaobi", "ataku", "anaican", "unaoi", "naqi"], "num": ["nom", "ten", "con", "text", "id", "dom", "nb", "inc", "nc", "gin", "np", "int", "bin", "un", "min", "inf", "node", "nan", "numbered", "multi", "cal", "block", "norm", "name", "count", "p", "mat", "m", "unit", "non", "wh", "net", "nm", "temp", "w", "NUM", "gen", "dim", "c", "x", "init", "div", "u", "mom", "no", "float", "random", "uni", "draw", "en", "f", "gener", "max", "nn", "sn", "gan", "N", "andom", "digit", "ident", "tim", "sum", "um", "number", "alph", "mult", "aim", "hom", "fn", "nt", "Num", "null", "bn", "om", "lam", "nam", "nu"], "ken": ["center", "mn", "hn", "ni", "hen", "ki", "sten", "source", "broken", "wake", "gn", "kn", "fen", "gin", "bin", "unin", "oo", "kee", "un", "una", "dy", "kk", "node", "aw", "nan", "di", "die", "block", "k", "ke", "ker", "jon", "nen", "unit", "jen", "non", "uno", "zen", "une", "ko", "error", "iden", "nee", "ann", "atan", "gen", "arn", "own", "tan", "ien", "han", "kun", "seen", "enn", "chi", "kel", "token", "kan", "eni", "en", "den", "inner", "nn", "knife", "aken", "don", "kin", "wan", "gan", "data", "an", "dan", "atten", "result", "side", "nin", "byte", "thin", "ok", "na", "len", "rake", "skip", "canon", "oin", "ven", "new", "blank", "jan", "olen", "man", "normal", "inn", "miss", "ork"], "i": ["ini", "ip", "ie", "hi", "ind", "end", "x", "c", "ni", "init", "k", "phi", "ai", "it", "id", "one", "yi", "ji", "gi", "d", "I", "bi", "io", "p", "u", "mi", "m", "h", "r", "z", "ix", "o", "a", "e", "y", "l", "b", "int", "eni", "ri", "start", "f", "ij", "iu", "xi", "pi", "inner", "ii", "ik", "ui", "ti", "inf", "index", "si", "ci", "type", "li", "multi", "v", "di"], "j": ["jl", " si", "uj", "ie", "ja", "ind", "qi", "x", "c", "ni", "k", "jo", "ji", "d", "pos", " b", "aj", "p", "u", "bj", "m", "r", "z", "jen", "o", "a", "e", "y", "nt", "l", "b", "ok", "ne", "jj", "f", " z", "ij", "ot", "jp", "li", "q", "js", " index", "nn", "obj", "ju", "J", "dj", "ii", " l", "index", "si", "ci", " ii", "jc", "g", "v"], "optimal_result": ["optimal2result", "optim_results", "optimalacresults", "optimal_counter", "optimal\u00b7division", "optim_Result", "optimal_number", "optimal\u00b7results", "optimal33number", "optim_counter", "optimal_Result", "optimalaccounter", "optimal_results", "optimal2mer", "optimal33mer", "optimal_mer", "optimal2number", "optim_division", "optimal\u00b7result", "optimal\u00b7counter", "optimalacdivision", "optimal2Result", "optimal_division", "optimal33result", "optim_number", "optimal33Result", "optim_result", "optim_mer", "optimalacresult"], "deceit_result": ["deceit_count", "deceits_results", "deceited_result", "deceits_Result", "deceited_Result", "deceit_results", "deceits_count", "deceits_response", "deceit_Result", "deceit_response", "deceits_result", "deceited_results"]}}
{"code": "def solve_case(t):\n      c, f, x = [float(num) for num in raw_input().strip().split()]\n      current_time_usage = x / 2.0\n  \n      n = 1\n      build_farm_time = c / (2.0 + float((n - 1) * f))\n      attemp_time_usage = (x / (2.0 + float(n * f))) + build_farm_time\n  \n      while attemp_time_usage < current_time_usage:\n          current_time_usage = attemp_time_usage\n  \n          n += 1\n          build_farm_time += c / (2.0 + float((n - 1) * f))\n          attemp_time_usage = (x / (2.0 + float(n * f))) + build_farm_time\n  \n      print 'Case #%d: %.7f' % (t, current_time_usage,)\n  \n  def main():\n      t = int(raw_input().strip())\n      for i in range(1, t + 1):\n          solve_case(i)\n  \n  if __name__ == '__main__':\n      main()\n", "substitutes": {"t": ["tu", "tail", "k", "xt", "col", "tf", "ct", "d", "T", "p", "name", "u", "count", "tz", "tp", "table", "tc", "tw", "m", "window", "st", "r", "z", "template", "at", "o", "e", "y", "offset", "dt", "nt", "l", "ut", "b", "int", "lt", "pt", "the", "start", "ts", "total", "port", "ot", "target", "new", "q", "tt", "temp", "ta", "w", "j", "time", "ti", "type", "index", "test", "v", "tn"], "c": ["center", "cu", "dc", "xc", "con", "k", "fc", "unc", "code", "col", "ct", "d", "cc", "cache", "p", "u", "count", "m", "cm", "ic", "nc", "ch", "z", "r", "size", "e", "y", "cs", "cn", "cf", "ac", "cr", "l", "b", "en", "cy", "C", "cycle", "lc", "cd", "max", "w", "ca", "time", "ci", "sc", "circ", "ce", "v"], "f": ["fm", "flow", "form", "field", "fc", "k", "s", "of", "df", "d", "fff", "p", "u", "m", "fl", "rf", "h", "bf", "z", "fb", "float", "o", "fp", "e", "cf", "y", "fn", "l", "b", "fe", "xf", "now", "fr", "fs", "q", "sf", "w", "fac", "j", "time", "inf", "F", "file", "g", "v", "fd"], "x": ["data", "xc", "xa", "sync", "fc", "k", "plus", "xy", "xes", "ct", "s", "d", "p", "u", "rx", "number", "m", "ic", "h", "r", "z", "ix", "o", "size", "e", "y", "a", "xp", "l", "dx", "b", "int", "xf", "en", "xe", "fx", "xi", "q", "el", "lc", "max", "w", "xx", "time", "content", "X", "inf", "index", "xs", "xml", "wx", "ex", "g", "v"], "num": ["nr", "nom", "con", "text", "id", "ng", "dom", "ident", "d", "coord", "uu", "result", "name", "tim", "sum", "mon", "nb", "u", "um", "number", "m", "unit", "no", "offset", "sam", "param", "fn", "nw", "term", "Num", "uni", "b", "bin", "np", "om", "na", "str", "child", "sim", "nam", "nat", "nu", "un", "day", "img", "nm", "nn", "temp", "NUM", "gen", "sn", "index", "umi", "dim", "node", "hex", "cal"], "current_time_usage": ["current_timepreused", "current_timepreusage", "current_time_mem", "current_time_used", "current_time_Usage", "current_timepremem", "current_time_use", "current_time_access", "current_time_current"], "n": ["nr", "span", "N", "ni", "k", "sync", "s", "an", "d", "pos", "name", "p", "u", "nb", "number", "ln", "m", "unit", "nc", "r", "z", "ic", "no", "o", "all", "e", "cn", "fn", "y", "size", "at", "nt", "non", "l", "ns", "b", "np", "nor", "en", "na", "len", "ne", "conn", "net", "nit", "nu", "un", "el", "nm", "nn", "w", "none", "j", "sn", "Ns", "min", "ci", "nan", "g", "v"], "build_farm_time": ["build_farm_Time", "build_farm_name", "build_field_times", "build_farm_times", "build_farmthetime", "build_field_name", "build_time_time", "build_time_times", "build_time_clock", "build_farmthetimes", "build_field_time", "build_farm_type", "build_farmthetype", "build_field_Time", "build_farm_clock"], "attemp_time_usage": ["attemp_timefmem", "attemp_timesuse", "attemp_time_use", "attemp_timefused", "attemp_timefusage", "attemp_timefuse", "attemp_time_history", "attemp_timesused", "attemp_timeshistory", "attemp_time_mem", "attemp_time_used", "attemp_time_size", "attemp_timesusage", "attemp_time_capacity"], "i": ["ini", "ip", "input", "ind", "ni", "k", "phi", "id", "gi", "d", "I", "io", "p", "u", "number", "m", "r", "z", "ix", "info", "o", "a", "e", "y", "l", "int", "b", "ri", "start", "im", "gu", "iu", "xi", "pi", "inner", "ii", "j", "time", "ti", "type", "index", "si", "li", "v", "di"]}}
{"code": "def get_number_of_test_case():\n      return int(raw_input().strip())\n  \n  def solve_case(t):\n      lines = [list(raw_input().strip()) for i in range(4)]\n      raw_input()\n  \n      i = 0\n      j = 0\n  \n      p_list = list()\n      while i < 4:\n          j = 0\n          s = ''\n          while j < 4:\n              s += lines[i][j]\n              j += 1\n          p_list.append(s.replace('T', 'X'))\n          p_list.append(s.replace('T', 'O'))\n          i += 1\n  \n      j = 0\n      while j < 4:\n          i = 0\n          s = ''\n          while i < 4:\n              s += lines[i][j]\n              i += 1\n          p_list.append(s.replace('T', 'X'))\n          p_list.append(s.replace('T', 'O'))\n          j += 1\n      \n      s = lines[0][0] + lines[1][1] + lines[2][2] + lines[3][3]\n      p_list.append(s.replace('T', 'X'))\n      p_list.append(s.replace('T', 'O'))\n  \n      s = lines[0][3] + lines[1][2] + lines[2][1] + lines[3][0]\n      p_list.append(s.replace('T', 'X'))\n      p_list.append(s.replace('T', 'O'))\n  \n      has_empty = False\n      outcome = ''\n      for p in p_list:\n          has_empty |= '.' in p\n          if p == 'XXXX':\n              outcome = 'X won'\n              break\n          elif p == 'OOOO':\n              outcome = 'O won'\n              break\n      if not outcome:\n          if has_empty:\n              outcome = 'Game has not completed'\n          else:\n              outcome = 'Draw'\n      \n      print 'Case #%d: %s' % (t, outcome,)\n  \n  T = get_number_of_test_case()\n  t = 1\n  while t <= T:\n      solve_case(t)\n      t += 1\n  \n", "substitutes": {"t": ["et", "you", "it", "ct", "note", "tc", "table", "tp", "h", "at", "a", "e", "b", "int", "start", "ot", "wt", "ant", "tm", "tip", "duration", "n", "att", "k", "count", "m", "r", "z", "o", "pt", "ts", "unt", "temp", "ta", "w", "ti", "tree", "tu", "x", "c", "qt", "out", "tf", "u", "tick", "thread", "y", "dt", "l", "ut", "ty", "f", "total", "to", "trace", "trial", "type", "v", "tn", "d", "tim", "tz", "st", "tmp", "te", "nt", "port", "rt", "tt", "time", "utt", "test", "g"], "lines": ["locks", "dates", "pos", "sets", "charges", "sheets", "files", "e", "cs", "lins", "cases", "sections", "styles", "points", "boxes", "shows", "frames", "cell", "xs", "steps", "features", "letters", "works", "les", "ines", "verts", "rows", "lin", "flows", "runs", "states", "pages", "types", "line", "grades", "users", "plugins", "ends", "headers", "ks", "rules", "objects", "sl", "cycles", "groups", "heads", "ges", "ids", "plays", "cats", "notes", "orders", "x", "c", "posts", "ins", "links", "values", "models", "es", "lists", "l", "ns", "cells", "words", "faces", "limits", "f", "balls", "planes", "blocks", "phones", "pins", "bands", "items", "ls", "vals", "sites", "forms", "Line", "books", "levels", "tests", "breaks", "lights", "lined", "holes", "strings", "ones", "tops", "elines", "codes"], "i": ["ip", "ie", "ni", "id", "it", "I", "oi", "h", "ix", "a", "e", "iii", "b", "jj", "jp", "pi", "n", "di", "ini", "ja", "k", "ai", "ji", "io", "mi", "m", "py", "z", "o", "im", "ij", "iu", "ii", "ui", "ti", "ci", "ei", "qi", "hi", "x", "c", "api", "yi", "chi", "bi", "aj", "u", "zi", "ish", "y", "l", "ri", "f", "js", "si", "v", "iv", "ind", "phi", "d", "xi", "vi", "ori", "ik", "index", "li"], "j": ["ie", "ni", "jo", "it", "I", "note", "oi", "_", "h", "ix", "a", "e", "b", "jj", "jp", "pi", "dy", "er", "n", "di", "uj", "ja", "jit", "k", "ai", "ji", "io", "m", "py", "ami", "r", "z", "sp", "o", "im", "ij", "obj", "ss", "w", "ii", " l", "oj", "ci", "ia", "ch", "jl", "qi", "job", "x", "c", "out", "yi", "aj", "u", "y", "l", "f", "js", "J", "si", " ii", "je", "v", "iv", "ind", "end", "ion", "d", "xi", "q", "vi", "ik", "jc", "li"], "p_list": ["p__group", " p7stream", "p_l", " p_block", "p_data", "psl", "p__source", " p_call", "ppsllists", "p8queue", "p_source", "pi_string", "pigstack", "p7stream", "p7stack", "pappblock", "P_layer", " p_stack", " p_queue", "p7list", "t_block", "pappl", "p_type", "p_set", "p_dict", "pp_type", "pi_list", "padlist", "pslist", "p__lists", "piglist", " p7stack", "ppslsource", "P_view", " p_l", "palldict", "piglayer", "p__list", "t_data", "pigview", "padlists", "pslsource", "padtype", "p_block", "p_stream", "pslog", "p8stream", "pi_stream", "pallqueue", "p_queue", "psco", "p_string", "p8list", "pp_group", "ppsllist", "p_lists", "pallcall", "p__set", "powtype", "p_listed", "powlist", "p_co", "pp_list", "p__l", " p7list", "psllist", "powlists", "p_view", "ppsltype", "P_stack", " p_co", "papplist", "psltype", "powsource", " p7l", "p8block", "p_group", "pappdata", "P_list", "t_list", "pi_map", " p_log", "pp_lists", "p7l", "p__type", "p_log", " p_dict", "p8l", " p_set", "p_map", "psllists", "palllist", " p_listed", "p_layer", "p8stack", "p__listed", "t_l", "padgroup", " p_stream", "p_call", "pp_source", "p_stack"], "s": ["input", "slice", "padding", "plus", "source", "sets", "sym", " self", "h", "a", "e", "b", "comments", "styles", "fs", "rs", "parts", "cell", "style", "sie", "xs", "n", "steps", "string", " si", "letters", "su", "sync", "k", "south", "seconds", "m", "sp", "z", "r", "less", "o", "ms", "sv", "states", "line", "ts", "sec", "us", "sb", "spec", "ends", "sf", "ss", "w", "sl", " l", "se", "x", "c", "ssl", "ins", "settings", "u", "sq", "self", "sin", "y", "es", "l", "ns", "cells", "words", "en", "ses", "f", "ds", "js", "S", "ws", "changes", "state", "si", "v", "span", "sys", "status", " c", "ls", "d", "service", "sum", "side", "st", "sites", "info", "params", "series", "str", "sg", "details", "new", "tests", "os", "gs", "site", "ps", "strings", "g"], "has_empty": ["Has_break", "Has_Empty", "hasnonEmpty", "hasnonbreak", "has_white", " has_missing", "has64missing", " hasperror", "has2size", "has_error", "has_Empty", "has_exc", " has_white", "has64error", "Has_empty", "has_size", " has_size", "hasperror", "haspmissing", " haspempty", "haspempty", "haspexc", "has64empty", "has64exc", "has_break", " has_exc", "has2empty", " haspmissing", "has2white", " has_error", "hasnonempty", " haspexc", "has_missing"], "outcome": ["overgrade", "outstyle", "Outcycle", "outdoor", "incycle", "incase", "averagecomes", "OUTcycle", "ingrade", " outcomes", "Outcome", "outcomes", "Outline", " outcycle", "incomes", " outgrade", "againline", "inlier", " outline", "income", "againdone", "outfortune", "outlier", "averagegrade", "Outcode", "outputcycle", "OUTcase", "outcase", "OUTcome", "outputdoor", "againcomes", " outdone", "outcycle", "overlier", "overcase", "Outgrade", "outputcome", "outputgrade", "outgrade", "againrule", "outdone", "OUTlier", "Outdoor", "Outdone", "infortune", "outrule", "Outfortune", "overcome", "Outstyle", "incode", "Outrule", "outcode", "averagefortune", "outline", "againcome", "againstyle", "OUTdoor", "averagecome", " outrule", " outcode", "Outcomes", " outstyle", "OUTgrade"], "p": ["ip", "et", "ping", "proc", "pc", "code", "it", "one", "of", "pu", "tp", "_", "h", "fp", "a", "e", "at", "np", "pp", "b", "ot", "jp", "pi", "num", "ap", "n", "board", "P", "mp", "case", "ep", "m", "py", "r", "z", "sp", "o", "all", "pa", "pe", "w", "cp", "play", "c", "x", "pre", "u", "fl", "y", "pl", "l", "op", "f", "g", "orp", "progress", "pr", "vp", "valid", "python", "v", "ve", "d", "pat", "pm", "pn", "port", "race", "lp", "q", "val", "po", "li"], "T": ["TM", "N", "NT", "TG", "n", "P", "I", "length", "G", "L", "TE", "K", "Y", "Z", "Time", "V", "W", "H", "TH", "R", "DT", "C", "total", "O", "TF", "TT", "A", "U", "TA", "D", "WT", "TB", "E", "S", "Length", "ta", "X", "M", "B", "F", "Q", "VT", "test", "Type", "TS", "Test"]}}
{"code": "class Sweeper(object):\n      def __init__(self, r, c, m):\n          self.matrix = [['.' for j in range(0, c)] for i in range(0, r)]\n          self.matrix[0][0] = 'c'\n  \n          self.r = r\n          self.c = c\n          self.m = m\n          self.current_r = r\n          self.current_c = c\n          self.current_m = m\n  \n      def fill_row(self):\n          if self.current_r >= 3 and self.current_m >= self.current_c:\n              for i in range(0, self.current_c):\n                  self.matrix[self.current_r - 1][i] = '*'\n              self.current_r -= 1\n              self.current_m -= self.current_c\n              return True\n          return False\n  \n      def fill_col(self):\n          if self.current_c >= 3 and self.current_m >= self.current_r:\n              for i in range(0, self.current_r):\n                  self.matrix[i][self.current_c - 1] = '*'\n              self.current_c -= 1\n              self.current_m -= self.current_r\n              return True\n          return False\n  \n      def fill_partial(self):\n          if self.current_r >= 3:\n              fill_num = min(self.current_m, self.current_c - 2)\n              for i in range(0, fill_num):\n                  self.matrix[self.current_r - 1][self.current_c - 1 - i] = '*'\n              self.current_m -= fill_num\n              if fill_num > 0:\n                  self.current_r -= 1\n          if self.current_c >= 3:\n              fill_num = min(self.current_m, self.current_r - 2)\n              for i in range(0, fill_num):\n                  self.matrix[self.current_r - 1 - i][self.current_c - 1] = '*'\n              self.current_m -= fill_num\n              if fill_num > 0:\n                  self.current_c -= 1\n          if self.current_m > 0:\n              return False\n          else:\n              return True\n  \n      def fill_special_one(self):\n          if self.current_r * self.current_c == self.current_m + 1:\n              for i in range(0, self.current_r):\n                  for j in range(0, self.current_c):\n                      self.matrix[i][j] = '*'\n              self.matrix[0][0] = 'c'\n              self.current_r = 0\n              self.current_c = 0\n              self.current_m = 0\n              return True\n          return False\n  \n      def fill_special_col(self):\n          if self.current_c == 1 and self.current_r > self.current_m:\n              for i in range(0, self.current_m):\n                  self.matrix[self.current_r - 1 - i][0] = '*'\n              self.matrix[0][0] = 'c'\n              self.current_m = 0\n              self.current_r = 0\n              self.current_c = 0\n              return True\n          return False\n  \n      def fill_special_row(self):\n          if self.current_r == 1 and self.current_c > self.current_m:\n              for i in range(0, self.current_m):\n                  self.matrix[0][self.current_c - 1 - i] = '*'\n              self.matrix[0][0] = 'c'\n              self.current_m = 0\n              self.current_r = 0\n              self.current_c = 0\n              return True\n          return False\n  \n  def print_matrix(matrix):\n      for row in matrix:\n          s = ''\n          for col in row:\n              s += col\n          print s\n  \n      \n  def solve_case(t):\n      r, c, m = [int(num) for num in raw_input().strip().split()]\n      sweeper = Sweeper(r, c, m)\n      print 'Case #%d:' % (t,)\n      if sweeper.fill_special_one() or sweeper.fill_special_col() or sweeper.fill_special_row():\n          print_matrix(sweeper.matrix)\n          return\n      f_result = True\n      while sweeper.current_m > 0 and f_result:\n          f_result = False\n          f_result |= sweeper.fill_row()\n          f_result |= sweeper.fill_col()\n      if sweeper.current_m > 0:\n          sweeper.fill_partial()\n      if sweeper.current_m > 0:\n          print 'Impossible'\n      else:\n          print_matrix(sweeper.matrix)\n  \n  def main():\n      t = int(raw_input().strip())\n      for i in range(1, t + 1):\n          solve_case(i)\n  \n  if __name__ == '__main__':\n      main()\n", "substitutes": {"self": ["ref", "graph", "manager", "right", "qa", "proc", "more", "field", "public", "plus", "ng", "remote", "part", "df", "pos", "server", "source", "_", "this", "event", "complex", "func", "inc", "h", "lf", "req", "work", "method", "a", "e", "cs", "parse", "b", "next", "member", "comp", "now", "cell", "style", "none", "er", "private", "full", "n", "node", "default", "Self", "mass", "config", "host", "http", "conf", "form", "master", "view", "block", "k", "utils", "me", "cache", "mp", "case", "worker", "p", "ack", "wrapper", "complete", "group", "extra", "res", "o", "all", "args", "ctx", "old", "non", "game", "super", "base", "line", "error", "us", "spec", "load", "missing", "temp", "ss", "map", "w", "top", "sk", "other", "gen", "wx", "plugin", "err", "ch", "client", "job", "x", "api", "mate", "layer", "word", "raw", "page", "u", "kernel", "system", "no", "change", "es", "hand", "world", "ns", "l", "user", "f", "cross", "results", "resp", "lc", "css", "max", "ws", "cl", "instance", "log", "app", "type", "python", "v", "context", "high", "scope", "data", "sys", "end", "github", "parent", "d", "writer", "result", "shared", "connection", "book", "co", "point", "coll", "ok", "www", "skip", "resource", "object", "module", "members", "new", "q", "per", "man", "os", "time", "site", "ps", "go", "g"], "r": ["nr", "rec", "sr", "rel", "right", "ru", "x", "k", "range", "dr", "d", "rm", "br", "p", "u", "hr", "ir", "ro", "kr", "h", "rf", "rg", "res", "rd", "e", "rad", "y", "cr", "l", "rh", "b", "radius", "ra", "rb", "re", "R", "f", "rc", "fr", "C", "arc", "mr", "rr", "rs", "rt", "q", "ar", "w", "yr", "er", "pr", "cur", "type", "ur", "n", "err", "v"], "c": ["uc", "rec", "cu", "dc", "xc", "x", "con", "k", "pc", "cat", "d", "cc", "p", "u", "count", "cm", "h", "z", "nc", "ch", "co", "cs", "e", "y", "mc", "cf", "cn", "a", "cin", "cr", "l", "b", "cy", "f", "rc", "C", "arc", "g", "q", "lc", "cd", "max", "ac", "w", "cur", "cp", "ci", "n", "ce", "v"], "m": ["rec", "mn", "mad", "x", "k", "range", "am", "bm", "d", "mm", "rm", "p", "u", "mi", "cm", "h", "z", "o", "pm", "e", "mc", "y", "ms", "a", "ac", "cr", "l", "b", "sm", "md", "re", "f", "hm", "im", "mr", "q", "ym", "max", "w", "M", "n", "g", "v", "mu"], "matrix": ["attric", "latrix", "Matrices", "atrow", "trix", "latrow", " matmap", "matric", "Matcost", "tment", "matrow", "atcost", " matvector", "atpack", " matrib", "Matrib", " matensor", "Matvector", "atvector", "atmap", "trices", "matrices", "latment", "attrow", "mensor", "latric", "Matensor", "attmap", "matpack", " matcost", "atric", "attpack", "mrib", "tq", "matq", "mrix", "matvector", "matment", "Matq", " matric", "attrix", "matmap", "matensor", "matrib", " matpack", "atrices", "mcost", "Matrix", "Matment", "attrices", "matcost", " matrices", "latrices", "latq", "atrix"], "j": ["jl", " si", "iv", "ie", "ja", "ma", "k", "ai", "ji", "gi", "bi", "zi", "uli", " li", "abi", "z", "o", " ni", "iii", "ime", "ri", " pi", "ij", "xi", "jp", "pi", "q", "vi", "ga", "js", "ati", "ta", " l", " o", " ii", "je", " cc", "di"], "i": ["ip", "ie", "mini", "ni", "id", "I", "oi", "ir", "h", "ix", "a", "e", "b", "int", "li", "pi", "ib", "n", "multi", "di", "ini", "mu", "iw", "k", "ai", "ji", "gi", "io", "p", "mi", "z", "o", "im", "ij", "iu", "w", "ii", "ui", "ti", "ci", "ia", "ei", "qi", "x", "yi", "bi", "u", "zi", "ic", "cli", "y", "l", "ri", "f", "inner", "si", "ih", "il", "v", "phi", "info", "xi", "q", "vi", "ori", "ik", "index", "g"], "current_r": ["current_e", "current_rb", "currentThero", "current_ro", "reported_e", "reported_row", "currentlyc", "currentMc", "current__e", "reported_m", "current__m", "currentAllr", "current_rc", "reported_R", "reported_c", "current_R", "currentPr", "currentQr", "currentMr", "currentVrate", "currentVr", "currentlyr", "currentQrr", "current_rate", "currentQm", "currentMR", "currentAllm", "reported_reb", "currentMm", "current_rr", "currentPc", "currentQc", "currentPrb", "reported_rf", "current_ra", "current_l", "reported_rc", "current_row", "currentlym", "currentlyro", "reported_ra", "currentVc", "currentAllrf", "current___reb", "currentThec", "reported_rb", "reported_l", "current_reb", "current__c", "current___r", "currentVm", "currentPm", "reported_rr", "currentThereb", "current_rf", "current__r", "currentTher", "reported_rate", "currentAllc", "current___ro", "reported_r", "reported_ro", "current___c"], "current_c": ["center", "current_w", "currentAcur", "current_cn", "pos", "_", "current_nr", "func", "current_count", "reported_m", "currentMemr", "currentIcount", "currentXc", "current_pc", "currentIr", "reported_c", "currentParr", "currentParrn", "reported_rn", "currentXm", "currentMemm", "current_cin", "reported_b", "current_mc", "currentAc", "currentVarc", "currentVr", "currentXpc", "auto", "currentMemfc", "currentIPr", "all", "currentIPc", "currentIc", "currentImc", "w", "current_cur", "reported_fc", "reported_arc", "current_fc", "currentDc", "current25c", "currentMemc", "current_h", "currentXr", "currentDcount", "currentVc", "reported_count", "currentDr", "current_b", "reported_cur", "reported_mc", "currentIPcin", "current25nr", "reported_pc", "currentDmc", "current25r", "current_rn", "currentParc", "current25cn", "current25m", "reported_h", "currentVm", "reported_cn", "end", "currentAh", "current_arc", "d", "reported_n", "currentParw", "reported_cin", "currentAr", "current_n", "currentIPm", "reported_nr", "reported_w", "reported_r"], "current_m": ["current_rb", "currentWc", "currentlyc", "reported_cr", "reported_m", "currentAllr", "currentFr", "current_p", "currentFc", "current_cr", "currentWmu", "reported_c", "current_mc", "current_cum", "currentFm", "currentlyr", "current_ar", "currently_p", "currentAllm", "reported_mu", "currentWm", "reported_ar", "current_mad", "currentDc", "current25c", "currentlym", "currently_c", "current25cr", "current_mu", "currentDr", "reported_mn", "reported_mc", "currentDmc", "reported_rb", "currentFcum", "current25r", "currentJr", "current_mo", "current25m", "currentlyrb", "currentWr", "currentJc", "reported_cum", "currentDm", "currently_m", "currentAllmn", "currentJp", "reported_mo", "currentAllc", "current_mn", "reported_mad", "currentAllmo", "reported_r", "currentJm", "currently_r"], "fill_num": ["fill_none", "fill32mom", "fill_Num", "fill2num", "update_none", " fill_net", "fill_nb", "fill___num", "fill_net", "fill_n", "fillennum", "fillingum", "fillensum", "update_sum", "fillNcommon", " fill_gap", "ill_sum", "fill_dim", "fill64gap", "fillNnone", "fill___Num", "ill_common", "fill_gap", "fill67nb", " fill_name", "fill_nu", "update_num", " fill_sum", "fill_multi", "fill_name", "fillingnum", "fillingnone", "fill32multi", " fill_mom", "fill2name", "ill_none", " fill_number", " fill_multi", "fill2sum", "fill2number", " fill_nb", "update_um", "fill___net", "fill64nb", "fill_sum", "update_n", "update_nu", "fill_um", "fillingnu", "fill67gap", "fill32Num", "fill_mom", "fillNnum", "fillNsum", "ill_num", "fill_number", " fill_Num", "fill___sum", "fill64num", "fill32num", "fill_common", "fill64sum", " fill_dim", "fill67sum", "fillennone", "fillencommon", "fill67num"]}}
{"code": "\"\"\"\n  num = int(raw_input('num: ').strip())\n  \n  c_map = [None for x in range(0, 26)]\n  \n  while num > 0:\n  \tgoogleres = raw_input('googleres: ').strip()\n  \toriginal = raw_input('original: ').strip()\n  \n  \n  \tord_a = ord('a')\n  \tord_z = ord('z')\n  \n  \ti = 0\n  \tfor c in googleres:\n  \t\tord_c = ord(c)\n  \t\tif ord_a <= ord_c and ord_c <= ord_z:\n  \t\t\tc_map[ord_c - ord_a] = ord(original[i]) - ord_c\n  \t\ti += 1\n  \t\n  \tnum -= 1\n  \n  print c_map\n  \"\"\"\n  \n  \"\"\"\n  c_map = [24, 6, 2, 15, 10, -3, 15, 16, -5, 11, -2, -5, -1, -12, -4, 2, 9, 2, -5, 3, -11, -6, -17, -11, -24, -9]\n  i = 0\n  original_list = list()\n  while i < 25:\n  \toriginal_list.append(c_map[i] + i)\n  \ti += 1\n  original_list.sort()\n  print original_list\n  \"\"\"\n  \n  c_map = [24, 6, 2, 15, 10, -3, 15, 16, -5, 11, -2, -5, -1, -12, -4, 2, 9, 2, -5, 3, -11, -6, -17, -11, -24, -9]\n  \n  t = int(raw_input().strip())\n  t_count = 1\n  while t_count <= t:\n  \tord_a = ord('a')\n  \tord_z = ord('z')\n  \tgoogleres = raw_input().strip()\n  \toriginal = ''\n  \tfor c in googleres:\n  \t\tord_c = ord(c)\n  \t\tif ord_a <= ord_c and ord_c <= ord_z:\n  \t\t\toriginal += chr(c_map[ord_c - ord_a] + ord_c)\n  \t\telse:\n  \t\t\toriginal += c\n  \tprint 'Case #%d: %s' % (t_count, original,)\n  \tt_count += 1\n  \n", "substitutes": {"c_map": ["callmaps", "cmapMap", "c_MAP", "color_Map", "calllist", "c_maps", "callmap", "c2maps", "cmapmap", "c_pad", "cmappad", "color_maps", "colormapMap", "c_Map", "c_list", "p_maps", "cmapmaps", "colormappad", "color_pad", "p_map", "p_list", "colormapmap", "p_MAP", "c2Map", "callMAP", "c2pad", "color_map", "c2map", "colormapmaps"], "t": ["x", "qt", "it", "s", "tf", "T", "d", "length", "p", "count", "tc", "u", "tz", "tp", "number", "m", "template", "tick", "r", "z", "h", "at", "o", "e", "y", "dt", "nt", "l", "int", " T", "b", "ts", "f", "i", "total", "ot", "stop", "q", "diff", "tt", "ta", "w", "time", "num", "ti", "type", "n", "g", "v"], "t_count": ["t_c", "tt_sum", "qt_cond", "tpc", "t__num", "t___handle", "tissuestart", "t_sum", "t___keep", "tpCount", "t___count", "tt__Count", " t_handle", "t_num", "tissueset", "tpnum", "tt_count", "t_start", "tt_num", " t_keep", "toxnumber", "tt__num", "tt_number", "tt_Count", "toxsum", "qt_start", "toxcount", "tissuecount", "tpcount", "qt_count", "t_number", "tlenfound", "t_set", "t_cond", "t__c", "tt_c", "t_handle", "tissuecond", "t_keep", "tlencount", "tt__c", "t__count", "t_Count", "toxstart", " t_found", "tt__count", "t___found", "t__Count", "tlenkeep", "qt_set", "t_found", "tlenhandle", "tt_start"], "ord_a": ["ord_ac", " ord_b", "ord__ac", "orig_i", "orig_ac", "orig_c", "ord__a", "ord__A", "ord__z", "ord_ae", "ord_A", "ord__i", "ord__b", "ord__ae", " ord_ae", "ord__c", "orig_b", "orig_z", "ord_i", "orig_A", "orig_a", "ord_b"], "ord_z": ["orig_q", "ord__q", "orig_c", "ord__z", "orig_zo", "ord__b", "orig_b", "orig_z", "ord__c", "ord_q", "ord_b", "orig_a", "ord_zo"], "googleres": ["coreret", "googleresponse", "GoogleRES", "Googleresults", "gameresults", "ggres", "coreresponse", " googleRES", "googleRES", "googleRes", " googlers", "googlers", "googleret", " googleresponse", "Googleres", "gameres", " googleRes", "ggresponse", "ggrs", "googleresults", "coreres", " googleret", "ggret", "GoogleRes", "gameRes", "corers", " googleresults", "gameRES"], "original": ["ip", "sequence", "rec", "redo", "updated", "origin", "edited", "winner", "copy", "roc", "final", "initial", "Orig", "rev", "ec", "cc", "result", "regular", "raw", "cre", " orig", "edit", "reverse", "current", "Original", "nc", "r", "extra", "rew", "co", "abc", "o", "ac", "orig", "coll", "res", "modified", "random", "exc", "re", "core", "str", "error", "written", "rc", "clone", "C", " Original", "historic", "description", "root", "creator", "internal", "inner", "new", "lc", "author", "custom", "none", "esc", "cos", "created", "ex", "central", "reason", "ci", "rice", "actual", "native"], "c": ["cb", "center", "rec", "cu", "dc", "enc", "xc", "anc", "comment", "x", "con", "k", "chart", "unc", "usc", "code", "ct", "cc", "d", "ec", "word", "case", "p", "u", "m", "ic", "h", "r", "z", "ch", "csv", "co", "o", "cs", "e", "ac", "a", "cf", "mc", "cod", "y", "l", "b", "reference", "arc", "rc", "f", "C", "i", "orc", "q", "cont", "lc", "cd", "nc", "w", "esc", "ce", "ca", "content", "cur", "ci", "n", "sc", "string", "g", "v"], "ord_c": ["order_m", "order_c", "ord2t", " ord2n", "orig_c", "ord2z", "ord_d", "orig_na", "ord_n", "ord_t", " ord_n", "orig_a", " ord_t", "ord2n", " ord2z", " ord2c", "ord_na", "order_z", " ord2t", "order_s", "orig_d", "ord2a", " ord2a", "ord2c", "orig_b", "ord_s", "orig_z", "ord_m", "ord_b"]}}
